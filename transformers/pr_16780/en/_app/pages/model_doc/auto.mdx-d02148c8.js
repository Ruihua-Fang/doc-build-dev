import{S as zEt,i as QEt,s as WEt,e as a,k as l,w as f,t as o,M as HEt,c as n,d as t,m as i,a as s,x as m,h as r,b as d,F as e,g as b,y as g,q as h,o as p,B as _,v as UEt}from"../../chunks/vendor-6b77c823.js";import{T as fPr}from"../../chunks/Tip-39098574.js";import{D as w}from"../../chunks/Docstring-90e3aa51.js";import{C as A}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as X}from"../../chunks/IconCopyLink-7a11ce68.js";function JEt(qf){let Z,io,de,Ce,lo,ge,Me,Xo,qi,Nf,fa,Ni,ji,CE,jf,xe,co,Di,Gn,wE,On,Vn,AE,Gi,Xn,yE,Oi,Df,Da;return{c(){Z=a("p"),io=o("If your "),de=a("code"),Ce=o("NewModelConfig"),lo=o(" is a subclass of "),ge=a("code"),Me=o("PretrainedConfig"),Xo=o(`, make sure its
`),qi=a("code"),Nf=o("model_type"),fa=o(" attribute is set to the same key you use when registering the config (here "),Ni=a("code"),ji=o('"new-model"'),CE=o(")."),jf=l(),xe=a("p"),co=o("Likewise, if your "),Di=a("code"),Gn=o("NewModel"),wE=o(" is a subclass of "),On=a("a"),Vn=o("PreTrainedModel"),AE=o(`, make sure its
`),Gi=a("code"),Xn=o("config_class"),yE=o(` attribute is set to the same class you use when registering the model (here
`),Oi=a("code"),Df=o("NewModelConfig"),Da=o(")."),this.h()},l(fo){Z=n(fo,"P",{});var ue=s(Z);io=r(ue,"If your "),de=n(ue,"CODE",{});var u9=s(de);Ce=r(u9,"NewModelConfig"),u9.forEach(t),lo=r(ue," is a subclass of "),ge=n(ue,"CODE",{});var Vi=s(ge);Me=r(Vi,"PretrainedConfig"),Vi.forEach(t),Xo=r(ue,`, make sure its
`),qi=n(ue,"CODE",{});var b9=s(qi);Nf=r(b9,"model_type"),b9.forEach(t),fa=r(ue," attribute is set to the same key you use when registering the config (here "),Ni=n(ue,"CODE",{});var F9=s(Ni);ji=r(F9,'"new-model"'),F9.forEach(t),CE=r(ue,")."),ue.forEach(t),jf=i(fo),xe=n(fo,"P",{});var zo=s(xe);co=r(zo,"Likewise, if your "),Di=n(zo,"CODE",{});var Ga=s(Di);Gn=r(Ga,"NewModel"),Ga.forEach(t),wE=r(zo," is a subclass of "),On=n(zo,"A",{href:!0});var v9=s(On);Vn=r(v9,"PreTrainedModel"),v9.forEach(t),AE=r(zo,`, make sure its
`),Gi=n(zo,"CODE",{});var Gf=s(Gi);Xn=r(Gf,"config_class"),Gf.forEach(t),yE=r(zo,` attribute is set to the same class you use when registering the model (here
`),Oi=n(zo,"CODE",{});var T9=s(Oi);Df=r(T9,"NewModelConfig"),T9.forEach(t),Da=r(zo,")."),zo.forEach(t),this.h()},h(){d(On,"href","/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel")},m(fo,ue){b(fo,Z,ue),e(Z,io),e(Z,de),e(de,Ce),e(Z,lo),e(Z,ge),e(ge,Me),e(Z,Xo),e(Z,qi),e(qi,Nf),e(Z,fa),e(Z,Ni),e(Ni,ji),e(Z,CE),b(fo,jf,ue),b(fo,xe,ue),e(xe,co),e(xe,Di),e(Di,Gn),e(xe,wE),e(xe,On),e(On,Vn),e(xe,AE),e(xe,Gi),e(Gi,Xn),e(xe,yE),e(xe,Oi),e(Oi,Df),e(xe,Da)},d(fo){fo&&t(Z),fo&&t(jf),fo&&t(xe)}}}function YEt(qf){let Z,io,de,Ce,lo;return{c(){Z=a("p"),io=o("Passing "),de=a("code"),Ce=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(ge){Z=n(ge,"P",{});var Me=s(Z);io=r(Me,"Passing "),de=n(Me,"CODE",{});var Xo=s(de);Ce=r(Xo,"use_auth_token=True"),Xo.forEach(t),lo=r(Me," is required when you want to use a private model."),Me.forEach(t)},m(ge,Me){b(ge,Z,Me),e(Z,io),e(Z,de),e(de,Ce),e(Z,lo)},d(ge){ge&&t(Z)}}}function KEt(qf){let Z,io,de,Ce,lo;return{c(){Z=a("p"),io=o("Passing "),de=a("code"),Ce=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(ge){Z=n(ge,"P",{});var Me=s(Z);io=r(Me,"Passing "),de=n(Me,"CODE",{});var Xo=s(de);Ce=r(Xo,"use_auth_token=True"),Xo.forEach(t),lo=r(Me," is required when you want to use a private model."),Me.forEach(t)},m(ge,Me){b(ge,Z,Me),e(Z,io),e(Z,de),e(de,Ce),e(Z,lo)},d(ge){ge&&t(Z)}}}function ZEt(qf){let Z,io,de,Ce,lo,ge,Me,Xo,qi,Nf,fa,Ni,ji,CE,jf,xe,co,Di,Gn,wE,On,Vn,AE,Gi,Xn,yE,Oi,Df,Da,fo,ue,u9,Vi,b9,F9,zo,Ga,v9,Gf,T9,BIe,vRe,Xi,Of,nY,LE,PIe,sY,$Ie,TRe,zn,IIe,lY,qIe,NIe,iY,jIe,DIe,MRe,xE,ERe,M9,GIe,CRe,Vf,wRe,zi,Xf,dY,kE,OIe,cY,VIe,ARe,Qo,SE,XIe,RE,zIe,E9,QIe,WIe,HIe,BE,UIe,fY,JIe,YIe,KIe,mo,PE,ZIe,mY,eqe,oqe,Qi,rqe,gY,tqe,aqe,hY,nqe,sqe,lqe,F,zf,pY,iqe,dqe,C9,cqe,fqe,mqe,Qf,_Y,gqe,hqe,w9,pqe,_qe,uqe,Wf,uY,bqe,Fqe,A9,vqe,Tqe,Mqe,Hf,bY,Eqe,Cqe,y9,wqe,Aqe,yqe,Uf,FY,Lqe,xqe,L9,kqe,Sqe,Rqe,Jf,vY,Bqe,Pqe,x9,$qe,Iqe,qqe,Yf,TY,Nqe,jqe,k9,Dqe,Gqe,Oqe,Kf,MY,Vqe,Xqe,S9,zqe,Qqe,Wqe,Zf,EY,Hqe,Uqe,R9,Jqe,Yqe,Kqe,em,CY,Zqe,eNe,B9,oNe,rNe,tNe,om,wY,aNe,nNe,P9,sNe,lNe,iNe,rm,AY,dNe,cNe,$9,fNe,mNe,gNe,tm,yY,hNe,pNe,I9,_Ne,uNe,bNe,am,LY,FNe,vNe,q9,TNe,MNe,ENe,nm,xY,CNe,wNe,N9,ANe,yNe,LNe,sm,kY,xNe,kNe,j9,SNe,RNe,BNe,lm,SY,PNe,$Ne,D9,INe,qNe,NNe,im,RY,jNe,DNe,G9,GNe,ONe,VNe,dm,BY,XNe,zNe,O9,QNe,WNe,HNe,cm,PY,UNe,JNe,V9,YNe,KNe,ZNe,fm,$Y,eje,oje,X9,rje,tje,aje,mm,IY,nje,sje,z9,lje,ije,dje,gm,qY,cje,fje,Q9,mje,gje,hje,hm,NY,pje,_je,W9,uje,bje,Fje,pm,jY,vje,Tje,H9,Mje,Eje,Cje,_m,DY,wje,Aje,U9,yje,Lje,xje,um,GY,kje,Sje,J9,Rje,Bje,Pje,bm,OY,$je,Ije,Y9,qje,Nje,jje,Fm,VY,Dje,Gje,K9,Oje,Vje,Xje,vm,XY,zje,Qje,Z9,Wje,Hje,Uje,Tm,zY,Jje,Yje,ex,Kje,Zje,eDe,Mm,QY,oDe,rDe,ox,tDe,aDe,nDe,Em,WY,sDe,lDe,rx,iDe,dDe,cDe,Cm,HY,fDe,mDe,tx,gDe,hDe,pDe,wm,UY,_De,uDe,ax,bDe,FDe,vDe,Am,JY,TDe,MDe,nx,EDe,CDe,wDe,ym,YY,ADe,yDe,sx,LDe,xDe,kDe,Lm,KY,SDe,RDe,lx,BDe,PDe,$De,xm,ZY,IDe,qDe,ix,NDe,jDe,DDe,km,eK,GDe,ODe,dx,VDe,XDe,zDe,Sm,oK,QDe,WDe,cx,HDe,UDe,JDe,Rm,rK,YDe,KDe,fx,ZDe,eGe,oGe,Bm,tK,rGe,tGe,mx,aGe,nGe,sGe,Pm,aK,lGe,iGe,gx,dGe,cGe,fGe,$m,nK,mGe,gGe,hx,hGe,pGe,_Ge,Im,sK,uGe,bGe,px,FGe,vGe,TGe,qm,lK,MGe,EGe,_x,CGe,wGe,AGe,Nm,iK,yGe,LGe,ux,xGe,kGe,SGe,jm,dK,RGe,BGe,bx,PGe,$Ge,IGe,Dm,cK,qGe,NGe,Fx,jGe,DGe,GGe,Gm,fK,OGe,VGe,vx,XGe,zGe,QGe,Om,mK,WGe,HGe,Tx,UGe,JGe,YGe,Vm,gK,KGe,ZGe,Mx,eOe,oOe,rOe,Xm,hK,tOe,aOe,Ex,nOe,sOe,lOe,zm,pK,iOe,dOe,Cx,cOe,fOe,mOe,Qm,_K,gOe,hOe,wx,pOe,_Oe,uOe,Wm,uK,bOe,FOe,Ax,vOe,TOe,MOe,Hm,bK,EOe,COe,yx,wOe,AOe,yOe,Um,FK,LOe,xOe,Lx,kOe,SOe,ROe,Jm,vK,BOe,POe,xx,$Oe,IOe,qOe,Ym,TK,NOe,jOe,kx,DOe,GOe,OOe,Km,MK,VOe,XOe,Sx,zOe,QOe,WOe,Zm,EK,HOe,UOe,Rx,JOe,YOe,KOe,eg,CK,ZOe,eVe,Bx,oVe,rVe,tVe,og,wK,aVe,nVe,Px,sVe,lVe,iVe,rg,AK,dVe,cVe,$x,fVe,mVe,gVe,tg,yK,hVe,pVe,Ix,_Ve,uVe,bVe,ag,LK,FVe,vVe,qx,TVe,MVe,EVe,ng,xK,CVe,wVe,Nx,AVe,yVe,LVe,sg,kK,xVe,kVe,jx,SVe,RVe,BVe,lg,SK,PVe,$Ve,Dx,IVe,qVe,NVe,ig,RK,jVe,DVe,Gx,GVe,OVe,VVe,dg,BK,XVe,zVe,Ox,QVe,WVe,HVe,cg,PK,UVe,JVe,Vx,YVe,KVe,ZVe,fg,$K,eXe,oXe,Xx,rXe,tXe,aXe,mg,IK,nXe,sXe,zx,lXe,iXe,dXe,gg,qK,cXe,fXe,Qx,mXe,gXe,hXe,hg,NK,pXe,_Xe,Wx,uXe,bXe,FXe,pg,jK,vXe,TXe,Hx,MXe,EXe,CXe,_g,DK,wXe,AXe,Ux,yXe,LXe,xXe,ug,GK,kXe,SXe,Jx,RXe,BXe,PXe,bg,OK,$Xe,IXe,Yx,qXe,NXe,jXe,Fg,VK,DXe,GXe,Kx,OXe,VXe,XXe,vg,XK,zXe,QXe,Zx,WXe,HXe,UXe,Tg,zK,JXe,YXe,ek,KXe,ZXe,eze,Mg,QK,oze,rze,ok,tze,aze,nze,Eg,WK,sze,lze,rk,ize,dze,cze,Cg,HK,fze,mze,tk,gze,hze,pze,wg,UK,_ze,uze,ak,bze,Fze,vze,Ag,JK,Tze,Mze,nk,Eze,Cze,wze,yg,YK,Aze,yze,sk,Lze,xze,kze,Lg,KK,Sze,Rze,lk,Bze,Pze,$ze,xg,ZK,Ize,qze,ik,Nze,jze,Dze,kg,eZ,Gze,Oze,dk,Vze,Xze,zze,Sg,oZ,Qze,Wze,ck,Hze,Uze,Jze,Rg,rZ,Yze,Kze,fk,Zze,eQe,oQe,Bg,tZ,rQe,tQe,mk,aQe,nQe,sQe,Pg,aZ,lQe,iQe,gk,dQe,cQe,fQe,$g,nZ,mQe,gQe,hk,hQe,pQe,_Qe,Ig,sZ,uQe,bQe,pk,FQe,vQe,TQe,qg,lZ,MQe,EQe,_k,CQe,wQe,AQe,iZ,yQe,LQe,$E,xQe,Ng,IE,kQe,dZ,SQe,yRe,Wi,jg,cZ,qE,RQe,fZ,BQe,LRe,Wo,NE,PQe,jE,$Qe,uk,IQe,qQe,NQe,DE,jQe,mZ,DQe,GQe,OQe,go,GE,VQe,gZ,XQe,zQe,Oa,QQe,hZ,WQe,HQe,pZ,UQe,JQe,_Z,YQe,KQe,ZQe,E,Qn,uZ,eWe,oWe,bk,rWe,tWe,Fk,aWe,nWe,sWe,Wn,bZ,lWe,iWe,vk,dWe,cWe,Tk,fWe,mWe,gWe,Hn,FZ,hWe,pWe,Mk,_We,uWe,Ek,bWe,FWe,vWe,Dg,vZ,TWe,MWe,Ck,EWe,CWe,wWe,Un,TZ,AWe,yWe,wk,LWe,xWe,Ak,kWe,SWe,RWe,Gg,MZ,BWe,PWe,yk,$We,IWe,qWe,Og,EZ,NWe,jWe,Lk,DWe,GWe,OWe,Vg,CZ,VWe,XWe,xk,zWe,QWe,WWe,Jn,wZ,HWe,UWe,kk,JWe,YWe,Sk,KWe,ZWe,eHe,Yn,AZ,oHe,rHe,Rk,tHe,aHe,Bk,nHe,sHe,lHe,Kn,yZ,iHe,dHe,Pk,cHe,fHe,$k,mHe,gHe,hHe,Xg,LZ,pHe,_He,Ik,uHe,bHe,FHe,zg,xZ,vHe,THe,qk,MHe,EHe,CHe,Zn,kZ,wHe,AHe,Nk,yHe,LHe,jk,xHe,kHe,SHe,Qg,SZ,RHe,BHe,Dk,PHe,$He,IHe,es,RZ,qHe,NHe,Gk,jHe,DHe,Ok,GHe,OHe,VHe,os,BZ,XHe,zHe,Vk,QHe,WHe,Xk,HHe,UHe,JHe,rs,PZ,YHe,KHe,zk,ZHe,eUe,$Z,oUe,rUe,tUe,Wg,IZ,aUe,nUe,Qk,sUe,lUe,iUe,ts,qZ,dUe,cUe,Wk,fUe,mUe,Hk,gUe,hUe,pUe,Hg,NZ,_Ue,uUe,Uk,bUe,FUe,vUe,as,jZ,TUe,MUe,Jk,EUe,CUe,Yk,wUe,AUe,yUe,ns,DZ,LUe,xUe,Kk,kUe,SUe,Zk,RUe,BUe,PUe,ss,GZ,$Ue,IUe,eS,qUe,NUe,oS,jUe,DUe,GUe,Ug,OZ,OUe,VUe,rS,XUe,zUe,QUe,ls,VZ,WUe,HUe,tS,UUe,JUe,aS,YUe,KUe,ZUe,Jg,XZ,eJe,oJe,nS,rJe,tJe,aJe,is,zZ,nJe,sJe,sS,lJe,iJe,lS,dJe,cJe,fJe,ds,QZ,mJe,gJe,iS,hJe,pJe,dS,_Je,uJe,bJe,cs,WZ,FJe,vJe,cS,TJe,MJe,fS,EJe,CJe,wJe,fs,HZ,AJe,yJe,mS,LJe,xJe,gS,kJe,SJe,RJe,ms,UZ,BJe,PJe,hS,$Je,IJe,pS,qJe,NJe,jJe,Yg,JZ,DJe,GJe,_S,OJe,VJe,XJe,gs,YZ,zJe,QJe,uS,WJe,HJe,bS,UJe,JJe,YJe,hs,KZ,KJe,ZJe,FS,eYe,oYe,vS,rYe,tYe,aYe,ps,ZZ,nYe,sYe,TS,lYe,iYe,MS,dYe,cYe,fYe,_s,eee,mYe,gYe,ES,hYe,pYe,CS,_Ye,uYe,bYe,us,oee,FYe,vYe,wS,TYe,MYe,AS,EYe,CYe,wYe,bs,ree,AYe,yYe,yS,LYe,xYe,LS,kYe,SYe,RYe,Kg,tee,BYe,PYe,xS,$Ye,IYe,qYe,Fs,aee,NYe,jYe,kS,DYe,GYe,SS,OYe,VYe,XYe,Zg,nee,zYe,QYe,RS,WYe,HYe,UYe,eh,see,JYe,YYe,BS,KYe,ZYe,eKe,vs,lee,oKe,rKe,PS,tKe,aKe,$S,nKe,sKe,lKe,Ts,iee,iKe,dKe,IS,cKe,fKe,qS,mKe,gKe,hKe,oh,dee,pKe,_Ke,NS,uKe,bKe,FKe,Ms,cee,vKe,TKe,jS,MKe,EKe,DS,CKe,wKe,AKe,Es,fee,yKe,LKe,GS,xKe,kKe,OS,SKe,RKe,BKe,Cs,mee,PKe,$Ke,VS,IKe,qKe,XS,NKe,jKe,DKe,ws,gee,GKe,OKe,zS,VKe,XKe,QS,zKe,QKe,WKe,As,hee,HKe,UKe,WS,JKe,YKe,HS,KKe,ZKe,eZe,rh,pee,oZe,rZe,US,tZe,aZe,nZe,th,_ee,sZe,lZe,JS,iZe,dZe,cZe,ah,uee,fZe,mZe,YS,gZe,hZe,pZe,nh,bee,_Ze,uZe,KS,bZe,FZe,vZe,ys,Fee,TZe,MZe,ZS,EZe,CZe,eR,wZe,AZe,yZe,sh,vee,LZe,xZe,oR,kZe,SZe,RZe,Ls,Tee,BZe,PZe,rR,$Ze,IZe,tR,qZe,NZe,jZe,xs,Mee,DZe,GZe,aR,OZe,VZe,nR,XZe,zZe,QZe,ks,Eee,WZe,HZe,sR,UZe,JZe,lR,YZe,KZe,ZZe,Ss,Cee,eeo,oeo,iR,reo,teo,dR,aeo,neo,seo,Rs,wee,leo,ieo,cR,deo,ceo,fR,feo,meo,geo,Bs,Aee,heo,peo,mR,_eo,ueo,gR,beo,Feo,veo,lh,yee,Teo,Meo,hR,Eeo,Ceo,weo,ih,Lee,Aeo,yeo,pR,Leo,xeo,keo,Ps,xee,Seo,Reo,_R,Beo,Peo,uR,$eo,Ieo,qeo,$s,kee,Neo,jeo,bR,Deo,Geo,FR,Oeo,Veo,Xeo,Is,See,zeo,Qeo,vR,Weo,Heo,TR,Ueo,Jeo,Yeo,dh,Ree,Keo,Zeo,MR,eoo,ooo,roo,ch,Bee,too,aoo,ER,noo,soo,loo,fh,Pee,ioo,doo,CR,coo,foo,moo,mh,$ee,goo,hoo,wR,poo,_oo,uoo,gh,Iee,boo,Foo,AR,voo,Too,Moo,qs,qee,Eoo,Coo,yR,woo,Aoo,LR,yoo,Loo,xoo,hh,Nee,koo,Soo,xR,Roo,Boo,Poo,ph,jee,$oo,Ioo,kR,qoo,Noo,joo,Ns,Dee,Doo,Goo,SR,Ooo,Voo,RR,Xoo,zoo,Qoo,js,Gee,Woo,Hoo,BR,Uoo,Joo,PR,Yoo,Koo,Zoo,Oee,ero,oro,OE,rro,_h,VE,tro,Vee,aro,xRe,Hi,uh,Xee,XE,nro,zee,sro,kRe,Ho,zE,lro,QE,iro,$R,dro,cro,fro,WE,mro,Qee,gro,hro,pro,$e,HE,_ro,Wee,uro,bro,Va,Fro,Hee,vro,Tro,Uee,Mro,Ero,Jee,Cro,wro,Aro,ee,bh,Yee,yro,Lro,IR,xro,kro,Sro,Fh,Kee,Rro,Bro,qR,Pro,$ro,Iro,vh,Zee,qro,Nro,NR,jro,Dro,Gro,Th,eoe,Oro,Vro,jR,Xro,zro,Qro,Mh,ooe,Wro,Hro,DR,Uro,Jro,Yro,Eh,roe,Kro,Zro,GR,eto,oto,rto,Ch,toe,tto,ato,OR,nto,sto,lto,wh,aoe,ito,dto,VR,cto,fto,mto,Ah,noe,gto,hto,XR,pto,_to,uto,yh,soe,bto,Fto,zR,vto,Tto,Mto,Lh,loe,Eto,Cto,QR,wto,Ato,yto,xh,ioe,Lto,xto,WR,kto,Sto,Rto,kh,doe,Bto,Pto,HR,$to,Ito,qto,Sh,coe,Nto,jto,UR,Dto,Gto,Oto,Rh,foe,Vto,Xto,JR,zto,Qto,Wto,Bh,moe,Hto,Uto,YR,Jto,Yto,Kto,Ph,goe,Zto,eao,KR,oao,rao,tao,$h,hoe,aao,nao,ZR,sao,lao,iao,Ih,poe,dao,cao,eB,fao,mao,gao,qh,hao,_oe,pao,_ao,UE,uao,Nh,JE,bao,uoe,Fao,SRe,Ui,jh,boe,YE,vao,Foe,Tao,RRe,Uo,KE,Mao,ZE,Eao,oB,Cao,wao,Aao,eC,yao,voe,Lao,xao,kao,Ie,oC,Sao,Toe,Rao,Bao,Ji,Pao,Moe,$ao,Iao,Eoe,qao,Nao,jao,ke,Dh,Coe,Dao,Gao,rB,Oao,Vao,Xao,Gh,woe,zao,Qao,tB,Wao,Hao,Uao,Oh,Aoe,Jao,Yao,aB,Kao,Zao,eno,Vh,yoe,ono,rno,nB,tno,ano,nno,Xh,Loe,sno,lno,sB,ino,dno,cno,zh,xoe,fno,mno,lB,gno,hno,pno,Qh,koe,_no,uno,iB,bno,Fno,vno,Wh,Soe,Tno,Mno,dB,Eno,Cno,wno,Hh,Ano,Roe,yno,Lno,rC,xno,Uh,tC,kno,Boe,Sno,BRe,Yi,Jh,Poe,aC,Rno,$oe,Bno,PRe,Jo,nC,Pno,Ki,$no,cB,Ino,qno,fB,Nno,jno,Dno,sC,Gno,Ioe,Ono,Vno,Xno,Xr,lC,zno,qoe,Qno,Wno,Zi,Hno,Noe,Uno,Jno,mB,Yno,Kno,Zno,joe,eso,oso,iC,rso,qe,dC,tso,Doe,aso,nso,Xa,sso,Goe,lso,iso,Ooe,dso,cso,Voe,fso,mso,gso,T,Yh,Xoe,hso,pso,gB,_so,uso,bso,Kh,zoe,Fso,vso,hB,Tso,Mso,Eso,Zh,Qoe,Cso,wso,pB,Aso,yso,Lso,ep,Woe,xso,kso,_B,Sso,Rso,Bso,op,Hoe,Pso,$so,uB,Iso,qso,Nso,rp,Uoe,jso,Dso,bB,Gso,Oso,Vso,tp,Joe,Xso,zso,FB,Qso,Wso,Hso,ap,Yoe,Uso,Jso,vB,Yso,Kso,Zso,np,Koe,elo,olo,TB,rlo,tlo,alo,sp,Zoe,nlo,slo,MB,llo,ilo,dlo,lp,ere,clo,flo,EB,mlo,glo,hlo,ip,ore,plo,_lo,CB,ulo,blo,Flo,dp,rre,vlo,Tlo,wB,Mlo,Elo,Clo,cp,tre,wlo,Alo,AB,ylo,Llo,xlo,fp,are,klo,Slo,yB,Rlo,Blo,Plo,mp,nre,$lo,Ilo,LB,qlo,Nlo,jlo,gp,sre,Dlo,Glo,xB,Olo,Vlo,Xlo,hp,lre,zlo,Qlo,kB,Wlo,Hlo,Ulo,pp,ire,Jlo,Ylo,SB,Klo,Zlo,eio,_p,dre,oio,rio,RB,tio,aio,nio,up,cre,sio,lio,BB,iio,dio,cio,bp,fre,fio,mio,PB,gio,hio,pio,Fp,mre,_io,uio,$B,bio,Fio,vio,vp,gre,Tio,Mio,IB,Eio,Cio,wio,Tp,hre,Aio,yio,qB,Lio,xio,kio,Mp,pre,Sio,Rio,NB,Bio,Pio,$io,Ep,_re,Iio,qio,jB,Nio,jio,Dio,Cp,ure,Gio,Oio,DB,Vio,Xio,zio,wp,bre,Qio,Wio,GB,Hio,Uio,Jio,Ds,Fre,Yio,Kio,OB,Zio,edo,VB,odo,rdo,tdo,Ap,vre,ado,ndo,XB,sdo,ldo,ido,yp,Tre,ddo,cdo,zB,fdo,mdo,gdo,Lp,Mre,hdo,pdo,QB,_do,udo,bdo,xp,Ere,Fdo,vdo,WB,Tdo,Mdo,Edo,kp,Cre,Cdo,wdo,HB,Ado,ydo,Ldo,Sp,wre,xdo,kdo,UB,Sdo,Rdo,Bdo,Rp,Are,Pdo,$do,JB,Ido,qdo,Ndo,Bp,yre,jdo,Ddo,YB,Gdo,Odo,Vdo,Pp,Lre,Xdo,zdo,KB,Qdo,Wdo,Hdo,$p,xre,Udo,Jdo,ZB,Ydo,Kdo,Zdo,Ip,kre,eco,oco,eP,rco,tco,aco,qp,Sre,nco,sco,oP,lco,ico,dco,Np,Rre,cco,fco,rP,mco,gco,hco,jp,Bre,pco,_co,tP,uco,bco,Fco,Dp,Pre,vco,Tco,aP,Mco,Eco,Cco,Gp,$re,wco,Aco,nP,yco,Lco,xco,Op,Ire,kco,Sco,sP,Rco,Bco,Pco,Vp,qre,$co,Ico,lP,qco,Nco,jco,Xp,Nre,Dco,Gco,iP,Oco,Vco,Xco,zp,jre,zco,Qco,dP,Wco,Hco,Uco,Qp,Dre,Jco,Yco,cP,Kco,Zco,efo,Wp,Gre,ofo,rfo,fP,tfo,afo,nfo,Hp,Ore,sfo,lfo,mP,ifo,dfo,cfo,Up,Vre,ffo,mfo,gP,gfo,hfo,pfo,Jp,Xre,_fo,ufo,hP,bfo,Ffo,vfo,Yp,zre,Tfo,Mfo,pP,Efo,Cfo,wfo,Kp,Qre,Afo,yfo,_P,Lfo,xfo,kfo,Zp,Wre,Sfo,Rfo,uP,Bfo,Pfo,$fo,e_,Hre,Ifo,qfo,bP,Nfo,jfo,Dfo,o_,Ure,Gfo,Ofo,FP,Vfo,Xfo,zfo,r_,Jre,Qfo,Wfo,vP,Hfo,Ufo,Jfo,t_,Yre,Yfo,Kfo,TP,Zfo,emo,omo,a_,Kre,rmo,tmo,MP,amo,nmo,smo,n_,Zre,lmo,imo,EP,dmo,cmo,fmo,s_,ete,mmo,gmo,CP,hmo,pmo,_mo,l_,ote,umo,bmo,wP,Fmo,vmo,Tmo,i_,rte,Mmo,Emo,AP,Cmo,wmo,Amo,d_,tte,ymo,Lmo,yP,xmo,kmo,Smo,c_,ate,Rmo,Bmo,LP,Pmo,$mo,Imo,f_,nte,qmo,Nmo,xP,jmo,Dmo,Gmo,m_,ste,Omo,Vmo,kP,Xmo,zmo,Qmo,g_,lte,Wmo,Hmo,SP,Umo,Jmo,Ymo,h_,ite,Kmo,Zmo,RP,ego,ogo,rgo,p_,dte,tgo,ago,BP,ngo,sgo,lgo,__,cte,igo,dgo,PP,cgo,fgo,mgo,u_,fte,ggo,hgo,$P,pgo,_go,ugo,b_,mte,bgo,Fgo,IP,vgo,Tgo,Mgo,F_,gte,Ego,Cgo,qP,wgo,Ago,ygo,v_,hte,Lgo,xgo,NP,kgo,Sgo,Rgo,T_,pte,Bgo,Pgo,jP,$go,Igo,qgo,M_,_te,Ngo,jgo,DP,Dgo,Ggo,Ogo,E_,ute,Vgo,Xgo,GP,zgo,Qgo,Wgo,C_,bte,Hgo,Ugo,OP,Jgo,Ygo,Kgo,w_,Fte,Zgo,eho,VP,oho,rho,tho,A_,vte,aho,nho,XP,sho,lho,iho,y_,Tte,dho,cho,zP,fho,mho,gho,L_,Mte,hho,pho,QP,_ho,uho,bho,x_,Ete,Fho,vho,WP,Tho,Mho,Eho,k_,Cte,Cho,who,HP,Aho,yho,Lho,S_,wte,xho,kho,UP,Sho,Rho,Bho,R_,Ate,Pho,$ho,JP,Iho,qho,Nho,B_,yte,jho,Dho,YP,Gho,Oho,Vho,P_,Lte,Xho,zho,KP,Qho,Who,Hho,$_,Uho,xte,Jho,Yho,kte,Kho,Zho,Ste,epo,opo,cC,$Re,ed,I_,Rte,fC,rpo,Bte,tpo,IRe,Yo,mC,apo,od,npo,ZP,spo,lpo,e$,ipo,dpo,cpo,gC,fpo,Pte,mpo,gpo,hpo,zr,hC,ppo,$te,_po,upo,rd,bpo,Ite,Fpo,vpo,o$,Tpo,Mpo,Epo,qte,Cpo,wpo,pC,Apo,Ne,_C,ypo,Nte,Lpo,xpo,za,kpo,jte,Spo,Rpo,Dte,Bpo,Ppo,Gte,$po,Ipo,qpo,S,q_,Ote,Npo,jpo,r$,Dpo,Gpo,Opo,N_,Vte,Vpo,Xpo,t$,zpo,Qpo,Wpo,j_,Xte,Hpo,Upo,a$,Jpo,Ypo,Kpo,D_,zte,Zpo,e_o,n$,o_o,r_o,t_o,G_,Qte,a_o,n_o,s$,s_o,l_o,i_o,O_,Wte,d_o,c_o,l$,f_o,m_o,g_o,V_,Hte,h_o,p_o,i$,__o,u_o,b_o,X_,Ute,F_o,v_o,d$,T_o,M_o,E_o,z_,Jte,C_o,w_o,c$,A_o,y_o,L_o,Q_,Yte,x_o,k_o,f$,S_o,R_o,B_o,W_,Kte,P_o,$_o,m$,I_o,q_o,N_o,H_,Zte,j_o,D_o,g$,G_o,O_o,V_o,U_,eae,X_o,z_o,h$,Q_o,W_o,H_o,J_,oae,U_o,J_o,p$,Y_o,K_o,Z_o,Y_,rae,euo,ouo,_$,ruo,tuo,auo,K_,tae,nuo,suo,u$,luo,iuo,duo,Z_,aae,cuo,fuo,b$,muo,guo,huo,eu,nae,puo,_uo,F$,uuo,buo,Fuo,ou,sae,vuo,Tuo,v$,Muo,Euo,Cuo,ru,lae,wuo,Auo,T$,yuo,Luo,xuo,tu,iae,kuo,Suo,M$,Ruo,Buo,Puo,au,dae,$uo,Iuo,E$,quo,Nuo,juo,nu,cae,Duo,Guo,C$,Ouo,Vuo,Xuo,su,fae,zuo,Quo,w$,Wuo,Huo,Uuo,lu,mae,Juo,Yuo,A$,Kuo,Zuo,e1o,iu,gae,o1o,r1o,y$,t1o,a1o,n1o,du,hae,s1o,l1o,L$,i1o,d1o,c1o,cu,pae,f1o,m1o,x$,g1o,h1o,p1o,fu,_ae,_1o,u1o,k$,b1o,F1o,v1o,mu,uae,T1o,M1o,S$,E1o,C1o,w1o,gu,bae,A1o,y1o,R$,L1o,x1o,k1o,hu,Fae,S1o,R1o,B$,B1o,P1o,$1o,pu,vae,I1o,q1o,P$,N1o,j1o,D1o,_u,Tae,G1o,O1o,$$,V1o,X1o,z1o,uu,Mae,Q1o,W1o,I$,H1o,U1o,J1o,bu,Eae,Y1o,K1o,q$,Z1o,ebo,obo,Fu,Cae,rbo,tbo,N$,abo,nbo,sbo,vu,wae,lbo,ibo,j$,dbo,cbo,fbo,Tu,Aae,mbo,gbo,D$,hbo,pbo,_bo,Mu,ubo,yae,bbo,Fbo,Lae,vbo,Tbo,xae,Mbo,Ebo,uC,qRe,td,Eu,kae,bC,Cbo,Sae,wbo,NRe,Ko,FC,Abo,ad,ybo,G$,Lbo,xbo,O$,kbo,Sbo,Rbo,vC,Bbo,Rae,Pbo,$bo,Ibo,Qr,TC,qbo,Bae,Nbo,jbo,nd,Dbo,Pae,Gbo,Obo,V$,Vbo,Xbo,zbo,$ae,Qbo,Wbo,MC,Hbo,je,EC,Ubo,Iae,Jbo,Ybo,Qa,Kbo,qae,Zbo,e2o,Nae,o2o,r2o,jae,t2o,a2o,n2o,$,Cu,Dae,s2o,l2o,X$,i2o,d2o,c2o,wu,Gae,f2o,m2o,z$,g2o,h2o,p2o,Au,Oae,_2o,u2o,Q$,b2o,F2o,v2o,yu,Vae,T2o,M2o,W$,E2o,C2o,w2o,Lu,Xae,A2o,y2o,H$,L2o,x2o,k2o,xu,zae,S2o,R2o,U$,B2o,P2o,$2o,ku,Qae,I2o,q2o,J$,N2o,j2o,D2o,Su,Wae,G2o,O2o,Y$,V2o,X2o,z2o,Ru,Hae,Q2o,W2o,K$,H2o,U2o,J2o,Bu,Uae,Y2o,K2o,Z$,Z2o,eFo,oFo,Pu,Jae,rFo,tFo,eI,aFo,nFo,sFo,$u,Yae,lFo,iFo,oI,dFo,cFo,fFo,Iu,Kae,mFo,gFo,rI,hFo,pFo,_Fo,qu,Zae,uFo,bFo,tI,FFo,vFo,TFo,Nu,ene,MFo,EFo,aI,CFo,wFo,AFo,ju,one,yFo,LFo,nI,xFo,kFo,SFo,Du,rne,RFo,BFo,sI,PFo,$Fo,IFo,Gu,tne,qFo,NFo,lI,jFo,DFo,GFo,Ou,ane,OFo,VFo,iI,XFo,zFo,QFo,Vu,nne,WFo,HFo,dI,UFo,JFo,YFo,Xu,sne,KFo,ZFo,cI,evo,ovo,rvo,zu,lne,tvo,avo,fI,nvo,svo,lvo,Qu,ine,ivo,dvo,mI,cvo,fvo,mvo,Wu,dne,gvo,hvo,gI,pvo,_vo,uvo,Hu,cne,bvo,Fvo,hI,vvo,Tvo,Mvo,Uu,fne,Evo,Cvo,pI,wvo,Avo,yvo,Ju,mne,Lvo,xvo,_I,kvo,Svo,Rvo,Yu,gne,Bvo,Pvo,uI,$vo,Ivo,qvo,Ku,hne,Nvo,jvo,bI,Dvo,Gvo,Ovo,Zu,pne,Vvo,Xvo,FI,zvo,Qvo,Wvo,e1,_ne,Hvo,Uvo,vI,Jvo,Yvo,Kvo,o1,une,Zvo,e6o,TI,o6o,r6o,t6o,r1,bne,a6o,n6o,MI,s6o,l6o,i6o,t1,Fne,d6o,c6o,EI,f6o,m6o,g6o,a1,vne,h6o,p6o,CI,_6o,u6o,b6o,n1,F6o,Tne,v6o,T6o,Mne,M6o,E6o,Ene,C6o,w6o,CC,jRe,sd,s1,Cne,wC,A6o,wne,y6o,DRe,Zo,AC,L6o,ld,x6o,wI,k6o,S6o,AI,R6o,B6o,P6o,yC,$6o,Ane,I6o,q6o,N6o,Wr,LC,j6o,yne,D6o,G6o,id,O6o,Lne,V6o,X6o,yI,z6o,Q6o,W6o,xne,H6o,U6o,xC,J6o,De,kC,Y6o,kne,K6o,Z6o,Wa,e0o,Sne,o0o,r0o,Rne,t0o,a0o,Bne,n0o,s0o,l0o,I,l1,Pne,i0o,d0o,LI,c0o,f0o,m0o,i1,$ne,g0o,h0o,xI,p0o,_0o,u0o,d1,Ine,b0o,F0o,kI,v0o,T0o,M0o,c1,qne,E0o,C0o,SI,w0o,A0o,y0o,f1,Nne,L0o,x0o,RI,k0o,S0o,R0o,m1,jne,B0o,P0o,BI,$0o,I0o,q0o,g1,Dne,N0o,j0o,PI,D0o,G0o,O0o,h1,Gne,V0o,X0o,$I,z0o,Q0o,W0o,p1,One,H0o,U0o,II,J0o,Y0o,K0o,_1,Vne,Z0o,eTo,qI,oTo,rTo,tTo,u1,Xne,aTo,nTo,NI,sTo,lTo,iTo,b1,zne,dTo,cTo,jI,fTo,mTo,gTo,F1,Qne,hTo,pTo,DI,_To,uTo,bTo,v1,Wne,FTo,vTo,GI,TTo,MTo,ETo,T1,Hne,CTo,wTo,OI,ATo,yTo,LTo,M1,Une,xTo,kTo,VI,STo,RTo,BTo,E1,Jne,PTo,$To,XI,ITo,qTo,NTo,C1,Yne,jTo,DTo,zI,GTo,OTo,VTo,w1,Kne,XTo,zTo,QI,QTo,WTo,HTo,A1,Zne,UTo,JTo,WI,YTo,KTo,ZTo,y1,ese,e8o,o8o,HI,r8o,t8o,a8o,L1,ose,n8o,s8o,UI,l8o,i8o,d8o,x1,rse,c8o,f8o,JI,m8o,g8o,h8o,k1,tse,p8o,_8o,YI,u8o,b8o,F8o,S1,ase,v8o,T8o,KI,M8o,E8o,C8o,R1,nse,w8o,A8o,ZI,y8o,L8o,x8o,B1,sse,k8o,S8o,eq,R8o,B8o,P8o,P1,lse,$8o,I8o,oq,q8o,N8o,j8o,$1,ise,D8o,G8o,rq,O8o,V8o,X8o,I1,dse,z8o,Q8o,tq,W8o,H8o,U8o,q1,cse,J8o,Y8o,fse,K8o,Z8o,e7o,N1,mse,o7o,r7o,aq,t7o,a7o,n7o,j1,gse,s7o,l7o,nq,i7o,d7o,c7o,D1,hse,f7o,m7o,sq,g7o,h7o,p7o,G1,pse,_7o,u7o,lq,b7o,F7o,v7o,O1,T7o,_se,M7o,E7o,use,C7o,w7o,bse,A7o,y7o,SC,GRe,dd,V1,Fse,RC,L7o,vse,x7o,ORe,er,BC,k7o,cd,S7o,iq,R7o,B7o,dq,P7o,$7o,I7o,PC,q7o,Tse,N7o,j7o,D7o,Hr,$C,G7o,Mse,O7o,V7o,fd,X7o,Ese,z7o,Q7o,cq,W7o,H7o,U7o,Cse,J7o,Y7o,IC,K7o,Ge,qC,Z7o,wse,eMo,oMo,Ha,rMo,Ase,tMo,aMo,yse,nMo,sMo,Lse,lMo,iMo,dMo,ne,X1,xse,cMo,fMo,fq,mMo,gMo,hMo,z1,kse,pMo,_Mo,mq,uMo,bMo,FMo,Q1,Sse,vMo,TMo,gq,MMo,EMo,CMo,W1,Rse,wMo,AMo,hq,yMo,LMo,xMo,H1,Bse,kMo,SMo,pq,RMo,BMo,PMo,U1,Pse,$Mo,IMo,_q,qMo,NMo,jMo,J1,$se,DMo,GMo,uq,OMo,VMo,XMo,Y1,Ise,zMo,QMo,bq,WMo,HMo,UMo,K1,qse,JMo,YMo,Fq,KMo,ZMo,e4o,Z1,Nse,o4o,r4o,vq,t4o,a4o,n4o,eb,jse,s4o,l4o,Tq,i4o,d4o,c4o,ob,Dse,f4o,m4o,Mq,g4o,h4o,p4o,rb,Gse,_4o,u4o,Eq,b4o,F4o,v4o,tb,Ose,T4o,M4o,Cq,E4o,C4o,w4o,ab,Vse,A4o,y4o,wq,L4o,x4o,k4o,nb,Xse,S4o,R4o,Aq,B4o,P4o,$4o,sb,zse,I4o,q4o,yq,N4o,j4o,D4o,lb,G4o,Qse,O4o,V4o,Wse,X4o,z4o,Hse,Q4o,W4o,NC,VRe,md,ib,Use,jC,H4o,Jse,U4o,XRe,or,DC,J4o,gd,Y4o,Lq,K4o,Z4o,xq,eEo,oEo,rEo,GC,tEo,Yse,aEo,nEo,sEo,Ur,OC,lEo,Kse,iEo,dEo,hd,cEo,Zse,fEo,mEo,kq,gEo,hEo,pEo,ele,_Eo,uEo,VC,bEo,Oe,XC,FEo,ole,vEo,TEo,Ua,MEo,rle,EEo,CEo,tle,wEo,AEo,ale,yEo,LEo,xEo,y,db,nle,kEo,SEo,Sq,REo,BEo,PEo,cb,sle,$Eo,IEo,Rq,qEo,NEo,jEo,fb,lle,DEo,GEo,Bq,OEo,VEo,XEo,mb,ile,zEo,QEo,Pq,WEo,HEo,UEo,gb,dle,JEo,YEo,$q,KEo,ZEo,eCo,hb,cle,oCo,rCo,Iq,tCo,aCo,nCo,pb,fle,sCo,lCo,qq,iCo,dCo,cCo,_b,mle,fCo,mCo,Nq,gCo,hCo,pCo,ub,gle,_Co,uCo,jq,bCo,FCo,vCo,bb,hle,TCo,MCo,Dq,ECo,CCo,wCo,Fb,ple,ACo,yCo,Gq,LCo,xCo,kCo,vb,_le,SCo,RCo,Oq,BCo,PCo,$Co,Tb,ule,ICo,qCo,Vq,NCo,jCo,DCo,Mb,ble,GCo,OCo,Xq,VCo,XCo,zCo,Eb,Fle,QCo,WCo,zq,HCo,UCo,JCo,Cb,vle,YCo,KCo,Qq,ZCo,e5o,o5o,wb,Tle,r5o,t5o,Wq,a5o,n5o,s5o,Ab,Mle,l5o,i5o,Hq,d5o,c5o,f5o,yb,Ele,m5o,g5o,Uq,h5o,p5o,_5o,Lb,Cle,u5o,b5o,Jq,F5o,v5o,T5o,xb,wle,M5o,E5o,Yq,C5o,w5o,A5o,kb,Ale,y5o,L5o,Kq,x5o,k5o,S5o,Sb,yle,R5o,B5o,Zq,P5o,$5o,I5o,Rb,Lle,q5o,N5o,eN,j5o,D5o,G5o,Bb,xle,O5o,V5o,oN,X5o,z5o,Q5o,Pb,kle,W5o,H5o,rN,U5o,J5o,Y5o,$b,Sle,K5o,Z5o,tN,e3o,o3o,r3o,Ib,Rle,t3o,a3o,aN,n3o,s3o,l3o,qb,Ble,i3o,d3o,nN,c3o,f3o,m3o,Nb,Ple,g3o,h3o,sN,p3o,_3o,u3o,jb,$le,b3o,F3o,lN,v3o,T3o,M3o,Db,Ile,E3o,C3o,iN,w3o,A3o,y3o,Gb,qle,L3o,x3o,dN,k3o,S3o,R3o,Ob,Nle,B3o,P3o,cN,$3o,I3o,q3o,Vb,jle,N3o,j3o,fN,D3o,G3o,O3o,Xb,Dle,V3o,X3o,mN,z3o,Q3o,W3o,zb,Gle,H3o,U3o,gN,J3o,Y3o,K3o,Qb,Ole,Z3o,ewo,hN,owo,rwo,two,Wb,Vle,awo,nwo,pN,swo,lwo,iwo,Hb,Xle,dwo,cwo,_N,fwo,mwo,gwo,Ub,zle,hwo,pwo,uN,_wo,uwo,bwo,Jb,Qle,Fwo,vwo,bN,Two,Mwo,Ewo,Yb,Wle,Cwo,wwo,FN,Awo,ywo,Lwo,Kb,Hle,xwo,kwo,vN,Swo,Rwo,Bwo,Zb,Ule,Pwo,$wo,TN,Iwo,qwo,Nwo,e2,Jle,jwo,Dwo,MN,Gwo,Owo,Vwo,o2,Yle,Xwo,zwo,EN,Qwo,Wwo,Hwo,r2,Uwo,Kle,Jwo,Ywo,Zle,Kwo,Zwo,eie,eAo,oAo,zC,zRe,pd,t2,oie,QC,rAo,rie,tAo,QRe,rr,WC,aAo,_d,nAo,CN,sAo,lAo,wN,iAo,dAo,cAo,HC,fAo,tie,mAo,gAo,hAo,Jr,UC,pAo,aie,_Ao,uAo,ud,bAo,nie,FAo,vAo,AN,TAo,MAo,EAo,sie,CAo,wAo,JC,AAo,Ve,YC,yAo,lie,LAo,xAo,Ja,kAo,iie,SAo,RAo,die,BAo,PAo,cie,$Ao,IAo,qAo,G,a2,fie,NAo,jAo,yN,DAo,GAo,OAo,n2,mie,VAo,XAo,LN,zAo,QAo,WAo,s2,gie,HAo,UAo,xN,JAo,YAo,KAo,l2,hie,ZAo,eyo,kN,oyo,ryo,tyo,i2,pie,ayo,nyo,SN,syo,lyo,iyo,d2,_ie,dyo,cyo,RN,fyo,myo,gyo,c2,uie,hyo,pyo,BN,_yo,uyo,byo,f2,bie,Fyo,vyo,PN,Tyo,Myo,Eyo,m2,Fie,Cyo,wyo,$N,Ayo,yyo,Lyo,g2,vie,xyo,kyo,IN,Syo,Ryo,Byo,h2,Tie,Pyo,$yo,qN,Iyo,qyo,Nyo,p2,Mie,jyo,Dyo,NN,Gyo,Oyo,Vyo,_2,Eie,Xyo,zyo,jN,Qyo,Wyo,Hyo,u2,Cie,Uyo,Jyo,DN,Yyo,Kyo,Zyo,b2,wie,eLo,oLo,GN,rLo,tLo,aLo,F2,Aie,nLo,sLo,ON,lLo,iLo,dLo,v2,yie,cLo,fLo,VN,mLo,gLo,hLo,T2,Lie,pLo,_Lo,XN,uLo,bLo,FLo,M2,xie,vLo,TLo,zN,MLo,ELo,CLo,E2,kie,wLo,ALo,QN,yLo,LLo,xLo,C2,Sie,kLo,SLo,WN,RLo,BLo,PLo,w2,Rie,$Lo,ILo,HN,qLo,NLo,jLo,A2,Bie,DLo,GLo,UN,OLo,VLo,XLo,y2,Pie,zLo,QLo,JN,WLo,HLo,ULo,L2,$ie,JLo,YLo,YN,KLo,ZLo,e9o,x2,Iie,o9o,r9o,KN,t9o,a9o,n9o,k2,qie,s9o,l9o,ZN,i9o,d9o,c9o,S2,Nie,f9o,m9o,ej,g9o,h9o,p9o,R2,_9o,jie,u9o,b9o,Die,F9o,v9o,Gie,T9o,M9o,KC,WRe,bd,B2,Oie,ZC,E9o,Vie,C9o,HRe,tr,e5,w9o,Fd,A9o,oj,y9o,L9o,rj,x9o,k9o,S9o,o5,R9o,Xie,B9o,P9o,$9o,Yr,r5,I9o,zie,q9o,N9o,vd,j9o,Qie,D9o,G9o,tj,O9o,V9o,X9o,Wie,z9o,Q9o,t5,W9o,Xe,a5,H9o,Hie,U9o,J9o,Ya,Y9o,Uie,K9o,Z9o,Jie,exo,oxo,Yie,rxo,txo,axo,da,P2,Kie,nxo,sxo,aj,lxo,ixo,dxo,$2,Zie,cxo,fxo,nj,mxo,gxo,hxo,I2,ede,pxo,_xo,sj,uxo,bxo,Fxo,q2,ode,vxo,Txo,lj,Mxo,Exo,Cxo,N2,rde,wxo,Axo,ij,yxo,Lxo,xxo,j2,kxo,tde,Sxo,Rxo,ade,Bxo,Pxo,nde,$xo,Ixo,n5,URe,Td,D2,sde,s5,qxo,lde,Nxo,JRe,ar,l5,jxo,Md,Dxo,dj,Gxo,Oxo,cj,Vxo,Xxo,zxo,i5,Qxo,ide,Wxo,Hxo,Uxo,Kr,d5,Jxo,dde,Yxo,Kxo,Ed,Zxo,cde,eko,oko,fj,rko,tko,ako,fde,nko,sko,c5,lko,ze,f5,iko,mde,dko,cko,Ka,fko,gde,mko,gko,hde,hko,pko,pde,_ko,uko,bko,j,G2,_de,Fko,vko,mj,Tko,Mko,Eko,O2,ude,Cko,wko,gj,Ako,yko,Lko,V2,bde,xko,kko,hj,Sko,Rko,Bko,X2,Fde,Pko,$ko,pj,Iko,qko,Nko,z2,vde,jko,Dko,_j,Gko,Oko,Vko,Q2,Tde,Xko,zko,uj,Qko,Wko,Hko,W2,Mde,Uko,Jko,bj,Yko,Kko,Zko,H2,Ede,eSo,oSo,Fj,rSo,tSo,aSo,U2,Cde,nSo,sSo,vj,lSo,iSo,dSo,J2,wde,cSo,fSo,Tj,mSo,gSo,hSo,Y2,Ade,pSo,_So,Mj,uSo,bSo,FSo,K2,yde,vSo,TSo,Ej,MSo,ESo,CSo,Z2,Lde,wSo,ASo,Cj,ySo,LSo,xSo,eF,xde,kSo,SSo,wj,RSo,BSo,PSo,oF,kde,$So,ISo,Aj,qSo,NSo,jSo,rF,Sde,DSo,GSo,yj,OSo,VSo,XSo,tF,Rde,zSo,QSo,Lj,WSo,HSo,USo,aF,Bde,JSo,YSo,xj,KSo,ZSo,eRo,nF,Pde,oRo,rRo,kj,tRo,aRo,nRo,sF,$de,sRo,lRo,Sj,iRo,dRo,cRo,lF,Ide,fRo,mRo,Rj,gRo,hRo,pRo,iF,qde,_Ro,uRo,Bj,bRo,FRo,vRo,dF,Nde,TRo,MRo,Pj,ERo,CRo,wRo,cF,jde,ARo,yRo,$j,LRo,xRo,kRo,fF,Dde,SRo,RRo,Ij,BRo,PRo,$Ro,mF,Gde,IRo,qRo,qj,NRo,jRo,DRo,gF,Ode,GRo,ORo,Nj,VRo,XRo,zRo,hF,Vde,QRo,WRo,jj,HRo,URo,JRo,pF,Xde,YRo,KRo,Dj,ZRo,eBo,oBo,_F,zde,rBo,tBo,Gj,aBo,nBo,sBo,uF,Qde,lBo,iBo,Oj,dBo,cBo,fBo,bF,Wde,mBo,gBo,Vj,hBo,pBo,_Bo,FF,Hde,uBo,bBo,Xj,FBo,vBo,TBo,vF,MBo,Ude,EBo,CBo,Jde,wBo,ABo,Yde,yBo,LBo,m5,YRe,Cd,TF,Kde,g5,xBo,Zde,kBo,KRe,nr,h5,SBo,wd,RBo,zj,BBo,PBo,Qj,$Bo,IBo,qBo,p5,NBo,ece,jBo,DBo,GBo,Zr,_5,OBo,oce,VBo,XBo,Ad,zBo,rce,QBo,WBo,Wj,HBo,UBo,JBo,tce,YBo,KBo,u5,ZBo,Qe,b5,ePo,ace,oPo,rPo,Za,tPo,nce,aPo,nPo,sce,sPo,lPo,lce,iPo,dPo,cPo,R,MF,ice,fPo,mPo,Hj,gPo,hPo,pPo,EF,dce,_Po,uPo,Uj,bPo,FPo,vPo,CF,cce,TPo,MPo,Jj,EPo,CPo,wPo,wF,fce,APo,yPo,Yj,LPo,xPo,kPo,AF,mce,SPo,RPo,Kj,BPo,PPo,$Po,yF,gce,IPo,qPo,Zj,NPo,jPo,DPo,LF,hce,GPo,OPo,eD,VPo,XPo,zPo,xF,pce,QPo,WPo,oD,HPo,UPo,JPo,kF,_ce,YPo,KPo,rD,ZPo,e$o,o$o,SF,uce,r$o,t$o,tD,a$o,n$o,s$o,RF,bce,l$o,i$o,aD,d$o,c$o,f$o,BF,Fce,m$o,g$o,nD,h$o,p$o,_$o,PF,vce,u$o,b$o,sD,F$o,v$o,T$o,$F,Tce,M$o,E$o,lD,C$o,w$o,A$o,IF,Mce,y$o,L$o,iD,x$o,k$o,S$o,qF,Ece,R$o,B$o,dD,P$o,$$o,I$o,NF,Cce,q$o,N$o,cD,j$o,D$o,G$o,jF,wce,O$o,V$o,fD,X$o,z$o,Q$o,DF,Ace,W$o,H$o,mD,U$o,J$o,Y$o,GF,yce,K$o,Z$o,gD,eIo,oIo,rIo,OF,Lce,tIo,aIo,hD,nIo,sIo,lIo,VF,xce,iIo,dIo,pD,cIo,fIo,mIo,XF,kce,gIo,hIo,_D,pIo,_Io,uIo,zF,Sce,bIo,FIo,uD,vIo,TIo,MIo,QF,Rce,EIo,CIo,bD,wIo,AIo,yIo,WF,Bce,LIo,xIo,FD,kIo,SIo,RIo,HF,Pce,BIo,PIo,vD,$Io,IIo,qIo,UF,$ce,NIo,jIo,TD,DIo,GIo,OIo,JF,Ice,VIo,XIo,MD,zIo,QIo,WIo,YF,qce,HIo,UIo,ED,JIo,YIo,KIo,KF,Nce,ZIo,eqo,CD,oqo,rqo,tqo,ZF,jce,aqo,nqo,wD,sqo,lqo,iqo,ev,Dce,dqo,cqo,AD,fqo,mqo,gqo,ov,Gce,hqo,pqo,yD,_qo,uqo,bqo,rv,Oce,Fqo,vqo,LD,Tqo,Mqo,Eqo,tv,Vce,Cqo,wqo,xD,Aqo,yqo,Lqo,av,Xce,xqo,kqo,kD,Sqo,Rqo,Bqo,nv,zce,Pqo,$qo,SD,Iqo,qqo,Nqo,sv,Qce,jqo,Dqo,RD,Gqo,Oqo,Vqo,lv,Xqo,Wce,zqo,Qqo,Hce,Wqo,Hqo,Uce,Uqo,Jqo,F5,ZRe,yd,iv,Jce,v5,Yqo,Yce,Kqo,eBe,sr,T5,Zqo,Ld,eNo,BD,oNo,rNo,PD,tNo,aNo,nNo,M5,sNo,Kce,lNo,iNo,dNo,et,E5,cNo,Zce,fNo,mNo,xd,gNo,efe,hNo,pNo,$D,_No,uNo,bNo,ofe,FNo,vNo,C5,TNo,We,w5,MNo,rfe,ENo,CNo,en,wNo,tfe,ANo,yNo,afe,LNo,xNo,nfe,kNo,SNo,RNo,sfe,dv,lfe,BNo,PNo,ID,$No,INo,qNo,cv,NNo,ife,jNo,DNo,dfe,GNo,ONo,cfe,VNo,XNo,A5,oBe,kd,fv,ffe,y5,zNo,mfe,QNo,rBe,lr,L5,WNo,Sd,HNo,qD,UNo,JNo,ND,YNo,KNo,ZNo,x5,ejo,gfe,ojo,rjo,tjo,ot,k5,ajo,hfe,njo,sjo,Rd,ljo,pfe,ijo,djo,jD,cjo,fjo,mjo,_fe,gjo,hjo,S5,pjo,He,R5,_jo,ufe,ujo,bjo,on,Fjo,bfe,vjo,Tjo,Ffe,Mjo,Ejo,vfe,Cjo,wjo,Ajo,ce,mv,Tfe,yjo,Ljo,DD,xjo,kjo,Sjo,gv,Mfe,Rjo,Bjo,GD,Pjo,$jo,Ijo,Gs,Efe,qjo,Njo,OD,jjo,Djo,VD,Gjo,Ojo,Vjo,hv,Cfe,Xjo,zjo,XD,Qjo,Wjo,Hjo,ma,wfe,Ujo,Jjo,zD,Yjo,Kjo,QD,Zjo,eDo,WD,oDo,rDo,tDo,pv,Afe,aDo,nDo,HD,sDo,lDo,iDo,_v,yfe,dDo,cDo,UD,fDo,mDo,gDo,uv,Lfe,hDo,pDo,JD,_Do,uDo,bDo,bv,xfe,FDo,vDo,YD,TDo,MDo,EDo,Fv,kfe,CDo,wDo,KD,ADo,yDo,LDo,vv,Sfe,xDo,kDo,ZD,SDo,RDo,BDo,Tv,Rfe,PDo,$Do,eG,IDo,qDo,NDo,Mv,jDo,Bfe,DDo,GDo,Pfe,ODo,VDo,$fe,XDo,zDo,B5,tBe,Bd,Ev,Ife,P5,QDo,qfe,WDo,aBe,ir,$5,HDo,Pd,UDo,oG,JDo,YDo,rG,KDo,ZDo,eGo,I5,oGo,Nfe,rGo,tGo,aGo,rt,q5,nGo,jfe,sGo,lGo,$d,iGo,Dfe,dGo,cGo,tG,fGo,mGo,gGo,Gfe,hGo,pGo,N5,_Go,Ue,j5,uGo,Ofe,bGo,FGo,rn,vGo,Vfe,TGo,MGo,Xfe,EGo,CGo,zfe,wGo,AGo,yGo,Qfe,Cv,Wfe,LGo,xGo,aG,kGo,SGo,RGo,wv,BGo,Hfe,PGo,$Go,Ufe,IGo,qGo,Jfe,NGo,jGo,D5,nBe,Id,Av,Yfe,G5,DGo,Kfe,GGo,sBe,dr,O5,OGo,qd,VGo,nG,XGo,zGo,sG,QGo,WGo,HGo,V5,UGo,Zfe,JGo,YGo,KGo,tt,X5,ZGo,eme,eOo,oOo,Nd,rOo,ome,tOo,aOo,lG,nOo,sOo,lOo,rme,iOo,dOo,z5,cOo,Je,Q5,fOo,tme,mOo,gOo,tn,hOo,ame,pOo,_Oo,nme,uOo,bOo,sme,FOo,vOo,TOo,Se,yv,lme,MOo,EOo,iG,COo,wOo,AOo,Lv,ime,yOo,LOo,dG,xOo,kOo,SOo,xv,dme,ROo,BOo,cG,POo,$Oo,IOo,kv,cme,qOo,NOo,fG,jOo,DOo,GOo,Sv,fme,OOo,VOo,mG,XOo,zOo,QOo,Rv,mme,WOo,HOo,gG,UOo,JOo,YOo,Bv,gme,KOo,ZOo,hG,eVo,oVo,rVo,Pv,hme,tVo,aVo,pG,nVo,sVo,lVo,$v,iVo,pme,dVo,cVo,_me,fVo,mVo,ume,gVo,hVo,W5,lBe,jd,Iv,bme,H5,pVo,Fme,_Vo,iBe,cr,U5,uVo,Dd,bVo,_G,FVo,vVo,uG,TVo,MVo,EVo,J5,CVo,vme,wVo,AVo,yVo,at,Y5,LVo,Tme,xVo,kVo,Gd,SVo,Mme,RVo,BVo,bG,PVo,$Vo,IVo,Eme,qVo,NVo,K5,jVo,Ye,Z5,DVo,Cme,GVo,OVo,an,VVo,wme,XVo,zVo,Ame,QVo,WVo,yme,HVo,UVo,JVo,nn,qv,Lme,YVo,KVo,FG,ZVo,eXo,oXo,Nv,xme,rXo,tXo,vG,aXo,nXo,sXo,jv,kme,lXo,iXo,TG,dXo,cXo,fXo,Dv,Sme,mXo,gXo,MG,hXo,pXo,_Xo,Gv,uXo,Rme,bXo,FXo,Bme,vXo,TXo,Pme,MXo,EXo,e3,dBe,Od,Ov,$me,o3,CXo,Ime,wXo,cBe,fr,r3,AXo,Vd,yXo,EG,LXo,xXo,CG,kXo,SXo,RXo,t3,BXo,qme,PXo,$Xo,IXo,nt,a3,qXo,Nme,NXo,jXo,Xd,DXo,jme,GXo,OXo,wG,VXo,XXo,zXo,Dme,QXo,WXo,n3,HXo,Ke,s3,UXo,Gme,JXo,YXo,sn,KXo,Ome,ZXo,ezo,Vme,ozo,rzo,Xme,tzo,azo,nzo,Re,Vv,zme,szo,lzo,AG,izo,dzo,czo,Xv,Qme,fzo,mzo,yG,gzo,hzo,pzo,zv,Wme,_zo,uzo,LG,bzo,Fzo,vzo,Qv,Hme,Tzo,Mzo,xG,Ezo,Czo,wzo,Wv,Ume,Azo,yzo,kG,Lzo,xzo,kzo,Hv,Jme,Szo,Rzo,SG,Bzo,Pzo,$zo,Uv,Yme,Izo,qzo,RG,Nzo,jzo,Dzo,Jv,Kme,Gzo,Ozo,BG,Vzo,Xzo,zzo,Yv,Qzo,Zme,Wzo,Hzo,ege,Uzo,Jzo,oge,Yzo,Kzo,l3,fBe,zd,Kv,rge,i3,Zzo,tge,eQo,mBe,mr,d3,oQo,Qd,rQo,PG,tQo,aQo,$G,nQo,sQo,lQo,c3,iQo,age,dQo,cQo,fQo,st,f3,mQo,nge,gQo,hQo,Wd,pQo,sge,_Qo,uQo,IG,bQo,FQo,vQo,lge,TQo,MQo,m3,EQo,Ze,g3,CQo,ige,wQo,AQo,ln,yQo,dge,LQo,xQo,cge,kQo,SQo,fge,RQo,BQo,PQo,h3,Zv,mge,$Qo,IQo,qG,qQo,NQo,jQo,e6,gge,DQo,GQo,NG,OQo,VQo,XQo,o6,zQo,hge,QQo,WQo,pge,HQo,UQo,_ge,JQo,YQo,p3,gBe,Hd,r6,uge,_3,KQo,bge,ZQo,hBe,gr,u3,eWo,Ud,oWo,jG,rWo,tWo,DG,aWo,nWo,sWo,b3,lWo,Fge,iWo,dWo,cWo,lt,F3,fWo,vge,mWo,gWo,Jd,hWo,Tge,pWo,_Wo,GG,uWo,bWo,FWo,Mge,vWo,TWo,v3,MWo,eo,T3,EWo,Ege,CWo,wWo,dn,AWo,Cge,yWo,LWo,wge,xWo,kWo,Age,SWo,RWo,BWo,cn,t6,yge,PWo,$Wo,OG,IWo,qWo,NWo,a6,Lge,jWo,DWo,VG,GWo,OWo,VWo,n6,xge,XWo,zWo,XG,QWo,WWo,HWo,s6,kge,UWo,JWo,zG,YWo,KWo,ZWo,l6,eHo,Sge,oHo,rHo,Rge,tHo,aHo,Bge,nHo,sHo,M3,pBe,Yd,i6,Pge,E3,lHo,$ge,iHo,_Be,hr,C3,dHo,Kd,cHo,QG,fHo,mHo,WG,gHo,hHo,pHo,w3,_Ho,Ige,uHo,bHo,FHo,it,A3,vHo,qge,THo,MHo,Zd,EHo,Nge,CHo,wHo,HG,AHo,yHo,LHo,jge,xHo,kHo,y3,SHo,oo,L3,RHo,Dge,BHo,PHo,fn,$Ho,Gge,IHo,qHo,Oge,NHo,jHo,Vge,DHo,GHo,OHo,ec,d6,Xge,VHo,XHo,UG,zHo,QHo,WHo,c6,zge,HHo,UHo,JG,JHo,YHo,KHo,f6,Qge,ZHo,eUo,YG,oUo,rUo,tUo,m6,aUo,Wge,nUo,sUo,Hge,lUo,iUo,Uge,dUo,cUo,x3,uBe,oc,g6,Jge,k3,fUo,Yge,mUo,bBe,pr,S3,gUo,rc,hUo,KG,pUo,_Uo,ZG,uUo,bUo,FUo,R3,vUo,Kge,TUo,MUo,EUo,dt,B3,CUo,Zge,wUo,AUo,tc,yUo,ehe,LUo,xUo,eO,kUo,SUo,RUo,ohe,BUo,PUo,P3,$Uo,ro,$3,IUo,rhe,qUo,NUo,mn,jUo,the,DUo,GUo,ahe,OUo,VUo,nhe,XUo,zUo,QUo,she,h6,lhe,WUo,HUo,oO,UUo,JUo,YUo,p6,KUo,ihe,ZUo,eJo,dhe,oJo,rJo,che,tJo,aJo,I3,FBe,ac,_6,fhe,q3,nJo,mhe,sJo,vBe,_r,N3,lJo,nc,iJo,rO,dJo,cJo,tO,fJo,mJo,gJo,j3,hJo,ghe,pJo,_Jo,uJo,ct,D3,bJo,hhe,FJo,vJo,sc,TJo,phe,MJo,EJo,aO,CJo,wJo,AJo,_he,yJo,LJo,G3,xJo,to,O3,kJo,uhe,SJo,RJo,gn,BJo,bhe,PJo,$Jo,Fhe,IJo,qJo,vhe,NJo,jJo,DJo,The,u6,Mhe,GJo,OJo,nO,VJo,XJo,zJo,b6,QJo,Ehe,WJo,HJo,Che,UJo,JJo,whe,YJo,KJo,V3,TBe,lc,F6,Ahe,X3,ZJo,yhe,eYo,MBe,ur,z3,oYo,ic,rYo,sO,tYo,aYo,lO,nYo,sYo,lYo,Q3,iYo,Lhe,dYo,cYo,fYo,ft,W3,mYo,xhe,gYo,hYo,dc,pYo,khe,_Yo,uYo,iO,bYo,FYo,vYo,She,TYo,MYo,H3,EYo,ao,U3,CYo,Rhe,wYo,AYo,hn,yYo,Bhe,LYo,xYo,Phe,kYo,SYo,$he,RYo,BYo,PYo,cc,v6,Ihe,$Yo,IYo,dO,qYo,NYo,jYo,T6,qhe,DYo,GYo,cO,OYo,VYo,XYo,M6,Nhe,zYo,QYo,fO,WYo,HYo,UYo,E6,JYo,jhe,YYo,KYo,Dhe,ZYo,eKo,Ghe,oKo,rKo,J3,EBe,fc,C6,Ohe,Y3,tKo,Vhe,aKo,CBe,br,K3,nKo,mc,sKo,mO,lKo,iKo,gO,dKo,cKo,fKo,Z3,mKo,Xhe,gKo,hKo,pKo,mt,ew,_Ko,zhe,uKo,bKo,gc,FKo,Qhe,vKo,TKo,hO,MKo,EKo,CKo,Whe,wKo,AKo,ow,yKo,no,rw,LKo,Hhe,xKo,kKo,pn,SKo,Uhe,RKo,BKo,Jhe,PKo,$Ko,Yhe,IKo,qKo,NKo,Khe,w6,Zhe,jKo,DKo,pO,GKo,OKo,VKo,A6,XKo,epe,zKo,QKo,ope,WKo,HKo,rpe,UKo,JKo,tw,wBe,hc,y6,tpe,aw,YKo,ape,KKo,ABe,Fr,nw,ZKo,pc,eZo,_O,oZo,rZo,uO,tZo,aZo,nZo,sw,sZo,npe,lZo,iZo,dZo,gt,lw,cZo,spe,fZo,mZo,_c,gZo,lpe,hZo,pZo,bO,_Zo,uZo,bZo,ipe,FZo,vZo,iw,TZo,ho,dw,MZo,dpe,EZo,CZo,_n,wZo,cpe,AZo,yZo,fpe,LZo,xZo,mpe,kZo,SZo,RZo,x,L6,gpe,BZo,PZo,FO,$Zo,IZo,qZo,x6,hpe,NZo,jZo,vO,DZo,GZo,OZo,k6,ppe,VZo,XZo,TO,zZo,QZo,WZo,S6,_pe,HZo,UZo,MO,JZo,YZo,KZo,R6,upe,ZZo,eer,EO,oer,rer,ter,B6,bpe,aer,ner,CO,ser,ler,ier,P6,Fpe,der,cer,wO,fer,mer,ger,$6,vpe,her,per,AO,_er,uer,ber,I6,Tpe,Fer,ver,yO,Ter,Mer,Eer,q6,Mpe,Cer,wer,LO,Aer,yer,Ler,N6,Epe,xer,ker,xO,Ser,Rer,Ber,j6,Cpe,Per,$er,kO,Ier,qer,Ner,D6,wpe,jer,Der,SO,Ger,Oer,Ver,G6,Ape,Xer,zer,RO,Qer,Wer,Her,O6,ype,Uer,Jer,BO,Yer,Ker,Zer,V6,Lpe,eor,oor,PO,ror,tor,aor,Os,xpe,nor,sor,$O,lor,ior,IO,dor,cor,mor,X6,kpe,gor,hor,qO,por,_or,uor,z6,Spe,bor,For,NO,vor,Tor,Mor,Q6,Rpe,Eor,Cor,jO,wor,Aor,yor,W6,Bpe,Lor,xor,DO,kor,Sor,Ror,H6,Ppe,Bor,Por,GO,$or,Ior,qor,U6,$pe,Nor,jor,OO,Dor,Gor,Oor,J6,Ipe,Vor,Xor,VO,zor,Qor,Wor,Y6,qpe,Hor,Uor,XO,Jor,Yor,Kor,K6,Npe,Zor,err,zO,orr,rrr,trr,Z6,jpe,arr,nrr,QO,srr,lrr,irr,e0,Dpe,drr,crr,WO,frr,mrr,grr,o0,Gpe,hrr,prr,HO,_rr,urr,brr,r0,Ope,Frr,vrr,UO,Trr,Mrr,Err,t0,Vpe,Crr,wrr,JO,Arr,yrr,Lrr,a0,Xpe,xrr,krr,YO,Srr,Rrr,Brr,n0,zpe,Prr,$rr,KO,Irr,qrr,Nrr,s0,Qpe,jrr,Drr,ZO,Grr,Orr,Vrr,l0,Wpe,Xrr,zrr,eV,Qrr,Wrr,Hrr,i0,Hpe,Urr,Jrr,oV,Yrr,Krr,Zrr,d0,Upe,etr,otr,rV,rtr,ttr,atr,c0,Jpe,ntr,str,tV,ltr,itr,dtr,f0,Ype,ctr,ftr,aV,mtr,gtr,htr,m0,Kpe,ptr,_tr,nV,utr,btr,Ftr,g0,Zpe,vtr,Ttr,sV,Mtr,Etr,Ctr,h0,e_e,wtr,Atr,lV,ytr,Ltr,xtr,p0,o_e,ktr,Str,iV,Rtr,Btr,Ptr,_0,r_e,$tr,Itr,dV,qtr,Ntr,jtr,t_e,Dtr,Gtr,cw,yBe,uc,u0,a_e,fw,Otr,n_e,Vtr,LBe,vr,mw,Xtr,bc,ztr,cV,Qtr,Wtr,fV,Htr,Utr,Jtr,gw,Ytr,s_e,Ktr,Ztr,ear,ht,hw,oar,l_e,rar,tar,Fc,aar,i_e,nar,sar,mV,lar,iar,dar,d_e,car,far,pw,mar,po,_w,gar,c_e,har,par,un,_ar,f_e,uar,bar,m_e,Far,Tar,g_e,Mar,Ear,Car,H,b0,h_e,war,Aar,gV,yar,Lar,xar,F0,p_e,kar,Sar,hV,Rar,Bar,Par,v0,__e,$ar,Iar,pV,qar,Nar,jar,T0,u_e,Dar,Gar,_V,Oar,Var,Xar,M0,b_e,zar,Qar,uV,War,Har,Uar,E0,F_e,Jar,Yar,bV,Kar,Zar,enr,C0,v_e,onr,rnr,FV,tnr,anr,nnr,w0,T_e,snr,lnr,vV,inr,dnr,cnr,A0,M_e,fnr,mnr,TV,gnr,hnr,pnr,y0,E_e,_nr,unr,MV,bnr,Fnr,vnr,L0,C_e,Tnr,Mnr,EV,Enr,Cnr,wnr,x0,w_e,Anr,ynr,CV,Lnr,xnr,knr,k0,A_e,Snr,Rnr,wV,Bnr,Pnr,$nr,S0,y_e,Inr,qnr,AV,Nnr,jnr,Dnr,R0,L_e,Gnr,Onr,yV,Vnr,Xnr,znr,B0,x_e,Qnr,Wnr,LV,Hnr,Unr,Jnr,P0,k_e,Ynr,Knr,xV,Znr,esr,osr,$0,S_e,rsr,tsr,kV,asr,nsr,ssr,I0,R_e,lsr,isr,SV,dsr,csr,fsr,q0,B_e,msr,gsr,RV,hsr,psr,_sr,N0,P_e,usr,bsr,BV,Fsr,vsr,Tsr,j0,$_e,Msr,Esr,PV,Csr,wsr,Asr,D0,I_e,ysr,Lsr,$V,xsr,ksr,Ssr,q_e,Rsr,Bsr,uw,xBe,vc,G0,N_e,bw,Psr,j_e,$sr,kBe,Tr,Fw,Isr,Tc,qsr,IV,Nsr,jsr,qV,Dsr,Gsr,Osr,vw,Vsr,D_e,Xsr,zsr,Qsr,pt,Tw,Wsr,G_e,Hsr,Usr,Mc,Jsr,O_e,Ysr,Ksr,NV,Zsr,elr,olr,V_e,rlr,tlr,Mw,alr,_o,Ew,nlr,X_e,slr,llr,bn,ilr,z_e,dlr,clr,Q_e,flr,mlr,W_e,glr,hlr,plr,fe,O0,H_e,_lr,ulr,jV,blr,Flr,vlr,V0,U_e,Tlr,Mlr,DV,Elr,Clr,wlr,X0,J_e,Alr,ylr,GV,Llr,xlr,klr,z0,Y_e,Slr,Rlr,OV,Blr,Plr,$lr,Q0,K_e,Ilr,qlr,VV,Nlr,jlr,Dlr,W0,Z_e,Glr,Olr,XV,Vlr,Xlr,zlr,H0,eue,Qlr,Wlr,zV,Hlr,Ulr,Jlr,U0,oue,Ylr,Klr,QV,Zlr,eir,oir,J0,rue,rir,tir,WV,air,nir,sir,Y0,tue,lir,iir,HV,dir,cir,fir,K0,aue,mir,gir,UV,hir,pir,_ir,Z0,nue,uir,bir,JV,Fir,vir,Tir,sue,Mir,Eir,Cw,SBe,Ec,eT,lue,ww,Cir,iue,wir,RBe,Mr,Aw,Air,Cc,yir,YV,Lir,xir,KV,kir,Sir,Rir,yw,Bir,due,Pir,$ir,Iir,_t,Lw,qir,cue,Nir,jir,wc,Dir,fue,Gir,Oir,ZV,Vir,Xir,zir,mue,Qir,Wir,xw,Hir,uo,kw,Uir,gue,Jir,Yir,Fn,Kir,hue,Zir,edr,pue,odr,rdr,_ue,tdr,adr,ndr,Sw,oT,uue,sdr,ldr,eX,idr,ddr,cdr,rT,bue,fdr,mdr,oX,gdr,hdr,pdr,Fue,_dr,udr,Rw,BBe,Ac,tT,vue,Bw,bdr,Tue,Fdr,PBe,Er,Pw,vdr,yc,Tdr,rX,Mdr,Edr,tX,Cdr,wdr,Adr,$w,ydr,Mue,Ldr,xdr,kdr,ut,Iw,Sdr,Eue,Rdr,Bdr,Lc,Pdr,Cue,$dr,Idr,aX,qdr,Ndr,jdr,wue,Ddr,Gdr,qw,Odr,bo,Nw,Vdr,Aue,Xdr,zdr,vn,Qdr,yue,Wdr,Hdr,Lue,Udr,Jdr,xue,Ydr,Kdr,Zdr,J,aT,kue,ecr,ocr,nX,rcr,tcr,acr,nT,Sue,ncr,scr,sX,lcr,icr,dcr,sT,Rue,ccr,fcr,lX,mcr,gcr,hcr,lT,Bue,pcr,_cr,iX,ucr,bcr,Fcr,iT,Pue,vcr,Tcr,dX,Mcr,Ecr,Ccr,dT,$ue,wcr,Acr,cX,ycr,Lcr,xcr,cT,Iue,kcr,Scr,fX,Rcr,Bcr,Pcr,fT,que,$cr,Icr,mX,qcr,Ncr,jcr,mT,Nue,Dcr,Gcr,gX,Ocr,Vcr,Xcr,gT,jue,zcr,Qcr,hX,Wcr,Hcr,Ucr,hT,Due,Jcr,Ycr,pX,Kcr,Zcr,efr,pT,Gue,ofr,rfr,_X,tfr,afr,nfr,_T,Oue,sfr,lfr,uX,ifr,dfr,cfr,uT,Vue,ffr,mfr,bX,gfr,hfr,pfr,bT,Xue,_fr,ufr,FX,bfr,Ffr,vfr,FT,zue,Tfr,Mfr,vX,Efr,Cfr,wfr,vT,Que,Afr,yfr,TX,Lfr,xfr,kfr,TT,Wue,Sfr,Rfr,MX,Bfr,Pfr,$fr,MT,Hue,Ifr,qfr,EX,Nfr,jfr,Dfr,ET,Uue,Gfr,Ofr,CX,Vfr,Xfr,zfr,Jue,Qfr,Wfr,jw,$Be,xc,CT,Yue,Dw,Hfr,Kue,Ufr,IBe,Cr,Gw,Jfr,kc,Yfr,wX,Kfr,Zfr,AX,emr,omr,rmr,Ow,tmr,Zue,amr,nmr,smr,bt,Vw,lmr,e1e,imr,dmr,Sc,cmr,o1e,fmr,mmr,yX,gmr,hmr,pmr,r1e,_mr,umr,Xw,bmr,Fo,zw,Fmr,t1e,vmr,Tmr,Tn,Mmr,a1e,Emr,Cmr,n1e,wmr,Amr,s1e,ymr,Lmr,xmr,be,wT,l1e,kmr,Smr,LX,Rmr,Bmr,Pmr,AT,i1e,$mr,Imr,xX,qmr,Nmr,jmr,yT,d1e,Dmr,Gmr,kX,Omr,Vmr,Xmr,LT,c1e,zmr,Qmr,SX,Wmr,Hmr,Umr,xT,f1e,Jmr,Ymr,RX,Kmr,Zmr,egr,kT,m1e,ogr,rgr,BX,tgr,agr,ngr,ST,g1e,sgr,lgr,PX,igr,dgr,cgr,RT,h1e,fgr,mgr,$X,ggr,hgr,pgr,BT,p1e,_gr,ugr,IX,bgr,Fgr,vgr,PT,_1e,Tgr,Mgr,qX,Egr,Cgr,wgr,u1e,Agr,ygr,Qw,qBe,Rc,$T,b1e,Ww,Lgr,F1e,xgr,NBe,wr,Hw,kgr,Bc,Sgr,NX,Rgr,Bgr,jX,Pgr,$gr,Igr,Uw,qgr,v1e,Ngr,jgr,Dgr,Ft,Jw,Ggr,T1e,Ogr,Vgr,Pc,Xgr,M1e,zgr,Qgr,DX,Wgr,Hgr,Ugr,E1e,Jgr,Ygr,Yw,Kgr,vo,Kw,Zgr,C1e,ehr,ohr,Mn,rhr,w1e,thr,ahr,A1e,nhr,shr,y1e,lhr,ihr,dhr,V,IT,L1e,chr,fhr,GX,mhr,ghr,hhr,qT,x1e,phr,_hr,OX,uhr,bhr,Fhr,NT,k1e,vhr,Thr,VX,Mhr,Ehr,Chr,jT,S1e,whr,Ahr,XX,yhr,Lhr,xhr,DT,R1e,khr,Shr,zX,Rhr,Bhr,Phr,GT,B1e,$hr,Ihr,QX,qhr,Nhr,jhr,OT,P1e,Dhr,Ghr,WX,Ohr,Vhr,Xhr,VT,$1e,zhr,Qhr,HX,Whr,Hhr,Uhr,XT,I1e,Jhr,Yhr,UX,Khr,Zhr,epr,zT,q1e,opr,rpr,JX,tpr,apr,npr,QT,N1e,spr,lpr,YX,ipr,dpr,cpr,WT,j1e,fpr,mpr,KX,gpr,hpr,ppr,HT,D1e,_pr,upr,ZX,bpr,Fpr,vpr,UT,G1e,Tpr,Mpr,ez,Epr,Cpr,wpr,JT,O1e,Apr,ypr,oz,Lpr,xpr,kpr,YT,V1e,Spr,Rpr,rz,Bpr,Ppr,$pr,KT,X1e,Ipr,qpr,tz,Npr,jpr,Dpr,ZT,z1e,Gpr,Opr,az,Vpr,Xpr,zpr,e8,Q1e,Qpr,Wpr,nz,Hpr,Upr,Jpr,o8,W1e,Ypr,Kpr,sz,Zpr,e_r,o_r,r8,H1e,r_r,t_r,lz,a_r,n_r,s_r,t8,U1e,l_r,i_r,iz,d_r,c_r,f_r,a8,J1e,m_r,g_r,dz,h_r,p_r,__r,n8,Y1e,u_r,b_r,cz,F_r,v_r,T_r,s8,K1e,M_r,E_r,fz,C_r,w_r,A_r,l8,Z1e,y_r,L_r,mz,x_r,k_r,S_r,ebe,R_r,B_r,Zw,jBe,$c,i8,obe,eA,P_r,rbe,$_r,DBe,Ar,oA,I_r,Ic,q_r,gz,N_r,j_r,hz,D_r,G_r,O_r,rA,V_r,tbe,X_r,z_r,Q_r,vt,tA,W_r,abe,H_r,U_r,qc,J_r,nbe,Y_r,K_r,pz,Z_r,eur,our,sbe,rur,tur,aA,aur,To,nA,nur,lbe,sur,lur,En,iur,ibe,dur,cur,dbe,fur,mur,cbe,gur,hur,pur,se,d8,fbe,_ur,uur,_z,bur,Fur,vur,c8,mbe,Tur,Mur,uz,Eur,Cur,wur,f8,gbe,Aur,yur,bz,Lur,xur,kur,m8,hbe,Sur,Rur,Fz,Bur,Pur,$ur,g8,pbe,Iur,qur,vz,Nur,jur,Dur,h8,_be,Gur,Our,Tz,Vur,Xur,zur,p8,ube,Qur,Wur,Mz,Hur,Uur,Jur,_8,bbe,Yur,Kur,Ez,Zur,e1r,o1r,u8,Fbe,r1r,t1r,Cz,a1r,n1r,s1r,b8,vbe,l1r,i1r,wz,d1r,c1r,f1r,F8,Tbe,m1r,g1r,Az,h1r,p1r,_1r,v8,Mbe,u1r,b1r,yz,F1r,v1r,T1r,T8,Ebe,M1r,E1r,Lz,C1r,w1r,A1r,M8,Cbe,y1r,L1r,xz,x1r,k1r,S1r,E8,wbe,R1r,B1r,kz,P1r,$1r,I1r,C8,Abe,q1r,N1r,Sz,j1r,D1r,G1r,w8,ybe,O1r,V1r,Rz,X1r,z1r,Q1r,Lbe,W1r,H1r,sA,GBe,Nc,A8,xbe,lA,U1r,kbe,J1r,OBe,yr,iA,Y1r,jc,K1r,Bz,Z1r,ebr,Pz,obr,rbr,tbr,dA,abr,Sbe,nbr,sbr,lbr,Tt,cA,ibr,Rbe,dbr,cbr,Dc,fbr,Bbe,mbr,gbr,$z,hbr,pbr,_br,Pbe,ubr,bbr,fA,Fbr,Mo,mA,vbr,$be,Tbr,Mbr,Cn,Ebr,Ibe,Cbr,wbr,qbe,Abr,ybr,Nbe,Lbr,xbr,kbr,jbe,y8,Dbe,Sbr,Rbr,Iz,Bbr,Pbr,$br,Gbe,Ibr,qbr,gA,VBe,Gc,L8,Obe,hA,Nbr,Vbe,jbr,XBe,Lr,pA,Dbr,Oc,Gbr,qz,Obr,Vbr,Nz,Xbr,zbr,Qbr,_A,Wbr,Xbe,Hbr,Ubr,Jbr,Mt,uA,Ybr,zbe,Kbr,Zbr,Vc,e2r,Qbe,o2r,r2r,jz,t2r,a2r,n2r,Wbe,s2r,l2r,bA,i2r,Eo,FA,d2r,Hbe,c2r,f2r,wn,m2r,Ube,g2r,h2r,Jbe,p2r,_2r,Ybe,u2r,b2r,F2r,Y,x8,Kbe,v2r,T2r,Dz,M2r,E2r,C2r,k8,Zbe,w2r,A2r,Gz,y2r,L2r,x2r,S8,e2e,k2r,S2r,Oz,R2r,B2r,P2r,R8,o2e,$2r,I2r,Vz,q2r,N2r,j2r,B8,r2e,D2r,G2r,Xz,O2r,V2r,X2r,P8,t2e,z2r,Q2r,zz,W2r,H2r,U2r,$8,a2e,J2r,Y2r,Qz,K2r,Z2r,eFr,I8,n2e,oFr,rFr,Wz,tFr,aFr,nFr,q8,s2e,sFr,lFr,Hz,iFr,dFr,cFr,N8,l2e,fFr,mFr,Uz,gFr,hFr,pFr,j8,i2e,_Fr,uFr,Jz,bFr,FFr,vFr,D8,d2e,TFr,MFr,Yz,EFr,CFr,wFr,G8,c2e,AFr,yFr,Kz,LFr,xFr,kFr,O8,f2e,SFr,RFr,Zz,BFr,PFr,$Fr,V8,m2e,IFr,qFr,eQ,NFr,jFr,DFr,X8,g2e,GFr,OFr,oQ,VFr,XFr,zFr,z8,h2e,QFr,WFr,rQ,HFr,UFr,JFr,Q8,p2e,YFr,KFr,tQ,ZFr,evr,ovr,W8,_2e,rvr,tvr,aQ,avr,nvr,svr,H8,u2e,lvr,ivr,nQ,dvr,cvr,fvr,b2e,mvr,gvr,vA,zBe,Xc,U8,F2e,TA,hvr,v2e,pvr,QBe,xr,MA,_vr,zc,uvr,sQ,bvr,Fvr,lQ,vvr,Tvr,Mvr,EA,Evr,T2e,Cvr,wvr,Avr,Et,CA,yvr,M2e,Lvr,xvr,Qc,kvr,E2e,Svr,Rvr,iQ,Bvr,Pvr,$vr,C2e,Ivr,qvr,wA,Nvr,Co,AA,jvr,w2e,Dvr,Gvr,An,Ovr,A2e,Vvr,Xvr,y2e,zvr,Qvr,L2e,Wvr,Hvr,Uvr,K,J8,x2e,Jvr,Yvr,dQ,Kvr,Zvr,e6r,Y8,k2e,o6r,r6r,cQ,t6r,a6r,n6r,K8,S2e,s6r,l6r,fQ,i6r,d6r,c6r,Z8,R2e,f6r,m6r,mQ,g6r,h6r,p6r,e7,B2e,_6r,u6r,gQ,b6r,F6r,v6r,o7,P2e,T6r,M6r,hQ,E6r,C6r,w6r,r7,$2e,A6r,y6r,pQ,L6r,x6r,k6r,t7,I2e,S6r,R6r,_Q,B6r,P6r,$6r,a7,q2e,I6r,q6r,uQ,N6r,j6r,D6r,n7,N2e,G6r,O6r,bQ,V6r,X6r,z6r,s7,j2e,Q6r,W6r,FQ,H6r,U6r,J6r,l7,D2e,Y6r,K6r,vQ,Z6r,e0r,o0r,i7,G2e,r0r,t0r,TQ,a0r,n0r,s0r,d7,O2e,l0r,i0r,MQ,d0r,c0r,f0r,c7,V2e,m0r,g0r,EQ,h0r,p0r,_0r,f7,X2e,u0r,b0r,CQ,F0r,v0r,T0r,m7,z2e,M0r,E0r,wQ,C0r,w0r,A0r,g7,Q2e,y0r,L0r,AQ,x0r,k0r,S0r,h7,W2e,R0r,B0r,yQ,P0r,$0r,I0r,p7,H2e,q0r,N0r,LQ,j0r,D0r,G0r,U2e,O0r,V0r,yA,WBe,Wc,_7,J2e,LA,X0r,Y2e,z0r,HBe,kr,xA,Q0r,Hc,W0r,xQ,H0r,U0r,kQ,J0r,Y0r,K0r,kA,Z0r,K2e,eTr,oTr,rTr,Ct,SA,tTr,Z2e,aTr,nTr,Uc,sTr,eFe,lTr,iTr,SQ,dTr,cTr,fTr,oFe,mTr,gTr,RA,hTr,wo,BA,pTr,rFe,_Tr,uTr,yn,bTr,tFe,FTr,vTr,aFe,TTr,MTr,nFe,ETr,CTr,wTr,sFe,u7,lFe,ATr,yTr,RQ,LTr,xTr,kTr,iFe,STr,RTr,PA,UBe,Jc,b7,dFe,$A,BTr,cFe,PTr,JBe,Sr,IA,$Tr,Yc,ITr,BQ,qTr,NTr,PQ,jTr,DTr,GTr,qA,OTr,fFe,VTr,XTr,zTr,wt,NA,QTr,mFe,WTr,HTr,Kc,UTr,gFe,JTr,YTr,$Q,KTr,ZTr,e8r,hFe,o8r,r8r,jA,t8r,Ao,DA,a8r,pFe,n8r,s8r,Ln,l8r,_Fe,i8r,d8r,uFe,c8r,f8r,bFe,m8r,g8r,h8r,FFe,F7,vFe,p8r,_8r,IQ,u8r,b8r,F8r,TFe,v8r,T8r,GA,YBe,Zc,v7,MFe,OA,M8r,EFe,E8r,KBe,Rr,VA,C8r,ef,w8r,qQ,A8r,y8r,NQ,L8r,x8r,k8r,XA,S8r,CFe,R8r,B8r,P8r,At,zA,$8r,wFe,I8r,q8r,of,N8r,AFe,j8r,D8r,jQ,G8r,O8r,V8r,yFe,X8r,z8r,QA,Q8r,yo,WA,W8r,LFe,H8r,U8r,xn,J8r,xFe,Y8r,K8r,kFe,Z8r,e7r,SFe,o7r,r7r,t7r,z,T7,RFe,a7r,n7r,DQ,s7r,l7r,i7r,M7,BFe,d7r,c7r,GQ,f7r,m7r,g7r,E7,PFe,h7r,p7r,OQ,_7r,u7r,b7r,C7,$Fe,F7r,v7r,VQ,T7r,M7r,E7r,w7,IFe,C7r,w7r,XQ,A7r,y7r,L7r,A7,qFe,x7r,k7r,zQ,S7r,R7r,B7r,y7,NFe,P7r,$7r,QQ,I7r,q7r,N7r,L7,jFe,j7r,D7r,WQ,G7r,O7r,V7r,x7,DFe,X7r,z7r,HQ,Q7r,W7r,H7r,k7,GFe,U7r,J7r,UQ,Y7r,K7r,Z7r,S7,OFe,eMr,oMr,JQ,rMr,tMr,aMr,R7,VFe,nMr,sMr,YQ,lMr,iMr,dMr,B7,XFe,cMr,fMr,KQ,mMr,gMr,hMr,P7,zFe,pMr,_Mr,ZQ,uMr,bMr,FMr,$7,QFe,vMr,TMr,eW,MMr,EMr,CMr,I7,WFe,wMr,AMr,oW,yMr,LMr,xMr,q7,HFe,kMr,SMr,rW,RMr,BMr,PMr,N7,UFe,$Mr,IMr,tW,qMr,NMr,jMr,j7,JFe,DMr,GMr,aW,OMr,VMr,XMr,D7,YFe,zMr,QMr,nW,WMr,HMr,UMr,G7,KFe,JMr,YMr,sW,KMr,ZMr,e4r,O7,ZFe,o4r,r4r,lW,t4r,a4r,n4r,V7,eve,s4r,l4r,iW,i4r,d4r,c4r,X7,ove,f4r,m4r,dW,g4r,h4r,p4r,z7,rve,_4r,u4r,cW,b4r,F4r,v4r,tve,T4r,M4r,HA,ZBe,rf,Q7,ave,UA,E4r,nve,C4r,ePe,Br,JA,w4r,tf,A4r,fW,y4r,L4r,mW,x4r,k4r,S4r,YA,R4r,sve,B4r,P4r,$4r,yt,KA,I4r,lve,q4r,N4r,af,j4r,ive,D4r,G4r,gW,O4r,V4r,X4r,dve,z4r,Q4r,ZA,W4r,Lo,ey,H4r,cve,U4r,J4r,kn,Y4r,fve,K4r,Z4r,mve,eEr,oEr,gve,rEr,tEr,aEr,ca,W7,hve,nEr,sEr,hW,lEr,iEr,dEr,H7,pve,cEr,fEr,pW,mEr,gEr,hEr,U7,_ve,pEr,_Er,_W,uEr,bEr,FEr,J7,uve,vEr,TEr,uW,MEr,EEr,CEr,Y7,bve,wEr,AEr,bW,yEr,LEr,xEr,Fve,kEr,SEr,oy,oPe,nf,K7,vve,ry,REr,Tve,BEr,rPe,Pr,ty,PEr,sf,$Er,FW,IEr,qEr,vW,NEr,jEr,DEr,ay,GEr,Mve,OEr,VEr,XEr,Lt,ny,zEr,Eve,QEr,WEr,lf,HEr,Cve,UEr,JEr,TW,YEr,KEr,ZEr,wve,eCr,oCr,sy,rCr,xo,ly,tCr,Ave,aCr,nCr,Sn,sCr,yve,lCr,iCr,Lve,dCr,cCr,xve,fCr,mCr,gCr,me,Z7,kve,hCr,pCr,MW,_Cr,uCr,bCr,eM,Sve,FCr,vCr,EW,TCr,MCr,ECr,oM,Rve,CCr,wCr,CW,ACr,yCr,LCr,rM,Bve,xCr,kCr,wW,SCr,RCr,BCr,tM,Pve,PCr,$Cr,AW,ICr,qCr,NCr,aM,$ve,jCr,DCr,yW,GCr,OCr,VCr,nM,Ive,XCr,zCr,LW,QCr,WCr,HCr,sM,qve,UCr,JCr,xW,YCr,KCr,ZCr,lM,Nve,e5r,o5r,kW,r5r,t5r,a5r,iM,jve,n5r,s5r,SW,l5r,i5r,d5r,dM,Dve,c5r,f5r,RW,m5r,g5r,h5r,cM,Gve,p5r,_5r,BW,u5r,b5r,F5r,Ove,v5r,T5r,iy,tPe,df,fM,Vve,dy,M5r,Xve,E5r,aPe,$r,cy,C5r,cf,w5r,PW,A5r,y5r,$W,L5r,x5r,k5r,fy,S5r,zve,R5r,B5r,P5r,xt,my,$5r,Qve,I5r,q5r,ff,N5r,Wve,j5r,D5r,IW,G5r,O5r,V5r,Hve,X5r,z5r,gy,Q5r,ko,hy,W5r,Uve,H5r,U5r,Rn,J5r,Jve,Y5r,K5r,Yve,Z5r,e3r,Kve,o3r,r3r,t3r,Fe,mM,Zve,a3r,n3r,qW,s3r,l3r,i3r,gM,e6e,d3r,c3r,NW,f3r,m3r,g3r,hM,o6e,h3r,p3r,jW,_3r,u3r,b3r,pM,r6e,F3r,v3r,DW,T3r,M3r,E3r,_M,t6e,C3r,w3r,GW,A3r,y3r,L3r,uM,a6e,x3r,k3r,OW,S3r,R3r,B3r,bM,n6e,P3r,$3r,VW,I3r,q3r,N3r,FM,s6e,j3r,D3r,XW,G3r,O3r,V3r,vM,l6e,X3r,z3r,zW,Q3r,W3r,H3r,TM,i6e,U3r,J3r,QW,Y3r,K3r,Z3r,d6e,ewr,owr,py,nPe,mf,MM,c6e,_y,rwr,f6e,twr,sPe,Ir,uy,awr,gf,nwr,WW,swr,lwr,HW,iwr,dwr,cwr,by,fwr,m6e,mwr,gwr,hwr,kt,Fy,pwr,g6e,_wr,uwr,hf,bwr,h6e,Fwr,vwr,UW,Twr,Mwr,Ewr,p6e,Cwr,wwr,vy,Awr,So,Ty,ywr,_6e,Lwr,xwr,Bn,kwr,u6e,Swr,Rwr,b6e,Bwr,Pwr,F6e,$wr,Iwr,qwr,Ee,EM,v6e,Nwr,jwr,JW,Dwr,Gwr,Owr,CM,T6e,Vwr,Xwr,YW,zwr,Qwr,Wwr,wM,M6e,Hwr,Uwr,KW,Jwr,Ywr,Kwr,AM,E6e,Zwr,eAr,ZW,oAr,rAr,tAr,yM,C6e,aAr,nAr,eH,sAr,lAr,iAr,LM,w6e,dAr,cAr,oH,fAr,mAr,gAr,xM,A6e,hAr,pAr,rH,_Ar,uAr,bAr,kM,y6e,FAr,vAr,tH,TAr,MAr,EAr,SM,L6e,CAr,wAr,aH,AAr,yAr,LAr,x6e,xAr,kAr,My,lPe,pf,RM,k6e,Ey,SAr,S6e,RAr,iPe,qr,Cy,BAr,_f,PAr,nH,$Ar,IAr,sH,qAr,NAr,jAr,wy,DAr,R6e,GAr,OAr,VAr,St,Ay,XAr,B6e,zAr,QAr,uf,WAr,P6e,HAr,UAr,lH,JAr,YAr,KAr,$6e,ZAr,eyr,yy,oyr,Ro,Ly,ryr,I6e,tyr,ayr,Pn,nyr,q6e,syr,lyr,N6e,iyr,dyr,j6e,cyr,fyr,myr,ve,BM,D6e,gyr,hyr,iH,pyr,_yr,uyr,PM,G6e,byr,Fyr,dH,vyr,Tyr,Myr,$M,O6e,Eyr,Cyr,cH,wyr,Ayr,yyr,IM,V6e,Lyr,xyr,fH,kyr,Syr,Ryr,qM,X6e,Byr,Pyr,mH,$yr,Iyr,qyr,NM,z6e,Nyr,jyr,gH,Dyr,Gyr,Oyr,jM,Q6e,Vyr,Xyr,hH,zyr,Qyr,Wyr,DM,W6e,Hyr,Uyr,pH,Jyr,Yyr,Kyr,GM,H6e,Zyr,eLr,_H,oLr,rLr,tLr,OM,U6e,aLr,nLr,uH,sLr,lLr,iLr,J6e,dLr,cLr,xy,dPe,bf,VM,Y6e,ky,fLr,K6e,mLr,cPe,Nr,Sy,gLr,Ff,hLr,bH,pLr,_Lr,FH,uLr,bLr,FLr,Ry,vLr,Z6e,TLr,MLr,ELr,Rt,By,CLr,e0e,wLr,ALr,vf,yLr,o0e,LLr,xLr,vH,kLr,SLr,RLr,r0e,BLr,PLr,Py,$Lr,Bo,$y,ILr,t0e,qLr,NLr,$n,jLr,a0e,DLr,GLr,n0e,OLr,VLr,s0e,XLr,zLr,QLr,Te,XM,l0e,WLr,HLr,TH,ULr,JLr,YLr,zM,i0e,KLr,ZLr,MH,e9r,o9r,r9r,QM,d0e,t9r,a9r,EH,n9r,s9r,l9r,WM,c0e,i9r,d9r,CH,c9r,f9r,m9r,HM,f0e,g9r,h9r,wH,p9r,_9r,u9r,UM,m0e,b9r,F9r,AH,v9r,T9r,M9r,JM,g0e,E9r,C9r,yH,w9r,A9r,y9r,YM,h0e,L9r,x9r,LH,k9r,S9r,R9r,KM,p0e,B9r,P9r,xH,$9r,I9r,q9r,ZM,_0e,N9r,j9r,kH,D9r,G9r,O9r,u0e,V9r,X9r,Iy,fPe,Tf,e4,b0e,qy,z9r,F0e,Q9r,mPe,jr,Ny,W9r,Mf,H9r,SH,U9r,J9r,RH,Y9r,K9r,Z9r,jy,exr,v0e,oxr,rxr,txr,Bt,Dy,axr,T0e,nxr,sxr,Ef,lxr,M0e,ixr,dxr,BH,cxr,fxr,mxr,E0e,gxr,hxr,Gy,pxr,Po,Oy,_xr,C0e,uxr,bxr,In,Fxr,w0e,vxr,Txr,A0e,Mxr,Exr,y0e,Cxr,wxr,Axr,Be,o4,L0e,yxr,Lxr,PH,xxr,kxr,Sxr,r4,x0e,Rxr,Bxr,$H,Pxr,$xr,Ixr,t4,k0e,qxr,Nxr,IH,jxr,Dxr,Gxr,a4,S0e,Oxr,Vxr,qH,Xxr,zxr,Qxr,n4,R0e,Wxr,Hxr,NH,Uxr,Jxr,Yxr,s4,B0e,Kxr,Zxr,jH,ekr,okr,rkr,l4,P0e,tkr,akr,DH,nkr,skr,lkr,i4,$0e,ikr,dkr,GH,ckr,fkr,mkr,I0e,gkr,hkr,Vy,gPe,Cf,d4,q0e,Xy,pkr,N0e,_kr,hPe,Dr,zy,ukr,wf,bkr,OH,Fkr,vkr,VH,Tkr,Mkr,Ekr,Qy,Ckr,j0e,wkr,Akr,ykr,Pt,Wy,Lkr,D0e,xkr,kkr,Af,Skr,G0e,Rkr,Bkr,XH,Pkr,$kr,Ikr,O0e,qkr,Nkr,Hy,jkr,$o,Uy,Dkr,V0e,Gkr,Okr,qn,Vkr,X0e,Xkr,zkr,z0e,Qkr,Wkr,Q0e,Hkr,Ukr,Jkr,Pe,c4,W0e,Ykr,Kkr,zH,Zkr,eSr,oSr,f4,H0e,rSr,tSr,QH,aSr,nSr,sSr,m4,U0e,lSr,iSr,WH,dSr,cSr,fSr,g4,J0e,mSr,gSr,HH,hSr,pSr,_Sr,h4,Y0e,uSr,bSr,UH,FSr,vSr,TSr,p4,K0e,MSr,ESr,JH,CSr,wSr,ASr,_4,Z0e,ySr,LSr,YH,xSr,kSr,SSr,u4,eTe,RSr,BSr,KH,PSr,$Sr,ISr,oTe,qSr,NSr,Jy,pPe,yf,b4,rTe,Yy,jSr,tTe,DSr,_Pe,Gr,Ky,GSr,Lf,OSr,ZH,VSr,XSr,eU,zSr,QSr,WSr,Zy,HSr,aTe,USr,JSr,YSr,$t,eL,KSr,nTe,ZSr,eRr,xf,oRr,sTe,rRr,tRr,oU,aRr,nRr,sRr,lTe,lRr,iRr,oL,dRr,Io,rL,cRr,iTe,fRr,mRr,Nn,gRr,dTe,hRr,pRr,cTe,_Rr,uRr,fTe,bRr,FRr,vRr,mTe,F4,gTe,TRr,MRr,rU,ERr,CRr,wRr,hTe,ARr,yRr,tL,uPe,kf,v4,pTe,aL,LRr,_Te,xRr,bPe,Or,nL,kRr,Sf,SRr,tU,RRr,BRr,aU,PRr,$Rr,IRr,sL,qRr,uTe,NRr,jRr,DRr,It,lL,GRr,bTe,ORr,VRr,Rf,XRr,FTe,zRr,QRr,nU,WRr,HRr,URr,vTe,JRr,YRr,iL,KRr,qo,dL,ZRr,TTe,eBr,oBr,jn,rBr,MTe,tBr,aBr,ETe,nBr,sBr,CTe,lBr,iBr,dBr,cL,T4,wTe,cBr,fBr,sU,mBr,gBr,hBr,M4,ATe,pBr,_Br,lU,uBr,bBr,FBr,yTe,vBr,TBr,fL,FPe,Bf,E4,LTe,mL,MBr,xTe,EBr,vPe,Vr,gL,CBr,Pf,wBr,iU,ABr,yBr,dU,LBr,xBr,kBr,hL,SBr,kTe,RBr,BBr,PBr,qt,pL,$Br,STe,IBr,qBr,$f,NBr,RTe,jBr,DBr,cU,GBr,OBr,VBr,BTe,XBr,zBr,_L,QBr,No,uL,WBr,PTe,HBr,UBr,Dn,JBr,$Te,YBr,KBr,ITe,ZBr,ePr,qTe,oPr,rPr,tPr,NTe,C4,jTe,aPr,nPr,fU,sPr,lPr,iPr,DTe,dPr,cPr,bL,TPe;return ge=new X({}),Da=new A({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),LE=new X({}),xE=new A({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Vf=new fPr({props:{warning:!0,$$slots:{default:[JEt]},$$scope:{ctx:qf}}}),kE=new X({}),SE=new w({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/configuration_auto.py#L552"}}),PE=new w({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/configuration_auto.py#L575"}}),$E=new A({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),IE=new w({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/configuration_auto.py#L697"}}),qE=new X({}),NE=new w({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/tokenization_auto.py#L353"}}),GE=new w({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16780/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/tokenization_auto.py#L367"}}),OE=new A({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),VE=new w({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/tokenization_auto.py#L563"}}),XE=new X({}),zE=new w({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/feature_extraction_auto.py#L172"}}),HE=new w({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16780/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/feature_extraction_auto.py#L186"}}),qh=new fPr({props:{$$slots:{default:[YEt]},$$scope:{ctx:qf}}}),UE=new A({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),JE=new w({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/feature_extraction_auto.py#L313"}}),YE=new X({}),KE=new w({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/processing_auto.py#L70"}}),oC=new w({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/processing_auto.py#L84"}}),Hh=new fPr({props:{$$slots:{default:[KEt]},$$scope:{ctx:qf}}}),rC=new A({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),tC=new w({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/processing_auto.py#L237"}}),aC=new X({}),nC=new w({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/modeling_auto.py#L711"}}),lC=new w({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16780/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16780/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L389"}}),iC=new A({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),dC=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L417"}}),cC=new A({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),fC=new X({}),mC=new w({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/modeling_auto.py#L718"}}),hC=new w({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16780/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L389"}}),pC=new A({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),_C=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L417"}}),uC=new A({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),bC=new X({}),FC=new w({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/modeling_auto.py#L733"}}),TC=new w({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16780/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L389"}}),MC=new A({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),EC=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L417"}}),CC=new A({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),wC=new X({}),AC=new w({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/modeling_auto.py#L740"}}),LC=new w({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16780/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L389"}}),xC=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),kC=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L417"}}),SC=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),RC=new X({}),BC=new w({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/modeling_auto.py#L747"}}),$C=new w({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16780/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L389"}}),IC=new A({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),qC=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L417"}}),NC=new A({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),jC=new X({}),DC=new w({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/modeling_auto.py#L756"}}),OC=new w({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16780/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L389"}}),VC=new A({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),XC=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L417"}}),zC=new A({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),QC=new X({}),WC=new w({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/modeling_auto.py#L790"}}),UC=new w({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16780/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L389"}}),JC=new A({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),YC=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L417"}}),KC=new A({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ZC=new X({}),e5=new w({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/modeling_auto.py#L797"}}),r5=new w({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16780/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L389"}}),t5=new A({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),a5=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L417"}}),n5=new A({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),s5=new X({}),l5=new w({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/modeling_auto.py#L783"}}),d5=new w({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16780/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L389"}}),c5=new A({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),f5=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L417"}}),m5=new A({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),g5=new X({}),h5=new w({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/modeling_auto.py#L765"}}),_5=new w({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16780/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L389"}}),u5=new A({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),b5=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L417"}}),F5=new A({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),v5=new X({}),T5=new w({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/modeling_auto.py#L772"}}),E5=new w({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16780/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L389"}}),C5=new A({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),w5=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L417"}}),A5=new A({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),y5=new X({}),L5=new w({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/modeling_auto.py#L806"}}),k5=new w({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16780/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16780/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16780/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16780/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L389"}}),S5=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),R5=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L417"}}),B5=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),P5=new X({}),$5=new w({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/modeling_auto.py#L845"}}),q5=new w({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16780/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L389"}}),N5=new A({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),j5=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L417"}}),D5=new A({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),G5=new X({}),O5=new w({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/modeling_auto.py#L852"}}),X5=new w({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16780/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L389"}}),z5=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),Q5=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L417"}}),W5=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),H5=new X({}),U5=new w({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/modeling_auto.py#L875"}}),Y5=new w({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16780/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L389"}}),K5=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),Z5=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L417"}}),e3=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),o3=new X({}),r3=new w({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/modeling_auto.py#L859"}}),a3=new w({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16780/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L389"}}),n3=new A({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),s3=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L417"}}),l3=new A({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),i3=new X({}),d3=new w({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/modeling_auto.py#L866"}}),f3=new w({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16780/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L389"}}),m3=new A({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),g3=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L417"}}),p3=new A({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),_3=new X({}),u3=new w({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/modeling_auto.py#L884"}}),F3=new w({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16780/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L389"}}),v3=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),T3=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L417"}}),M3=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),E3=new X({}),C3=new w({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/modeling_auto.py#L891"}}),A3=new w({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16780/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L389"}}),y3=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),L3=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L417"}}),x3=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),k3=new X({}),S3=new w({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/modeling_auto.py#L838"}}),B3=new w({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16780/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L389"}}),P3=new A({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),$3=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L417"}}),I3=new A({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),q3=new X({}),N3=new w({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/modeling_auto.py#L813"}}),D3=new w({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16780/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L389"}}),G3=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),O3=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L417"}}),V3=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),X3=new X({}),z3=new w({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/modeling_auto.py#L820"}}),W3=new w({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16780/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L389"}}),H3=new A({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),U3=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L417"}}),J3=new A({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Y3=new X({}),K3=new w({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/modeling_auto.py#L829"}}),ew=new w({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16780/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L389"}}),ow=new A({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),rw=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L417"}}),tw=new A({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),aw=new X({}),nw=new w({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/modeling_tf_auto.py#L381"}}),lw=new w({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16780/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16780/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L389"}}),iw=new A({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),dw=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L417"}}),cw=new A({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),fw=new X({}),mw=new w({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/modeling_tf_auto.py#L388"}}),hw=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16780/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L389"}}),pw=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),_w=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L417"}}),uw=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),bw=new X({}),Fw=new w({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),Tw=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16780/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L389"}}),Mw=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),Ew=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L417"}}),Cw=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ww=new X({}),Aw=new w({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/modeling_tf_auto.py#L410"}}),Lw=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16780/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L389"}}),xw=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),kw=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L417"}}),Rw=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Bw=new X({}),Pw=new w({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/modeling_tf_auto.py#L424"}}),Iw=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16780/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L389"}}),qw=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),Nw=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L417"}}),jw=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Dw=new X({}),Gw=new w({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/modeling_tf_auto.py#L431"}}),Vw=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16780/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L389"}}),Xw=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),zw=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L417"}}),Qw=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ww=new X({}),Hw=new w({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/modeling_tf_auto.py#L440"}}),Jw=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16780/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L389"}}),Yw=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),Kw=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L417"}}),Zw=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),eA=new X({}),oA=new w({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),tA=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16780/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L389"}}),aA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),nA=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L417"}}),sA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),lA=new X({}),iA=new w({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/modeling_tf_auto.py#L456"}}),cA=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16780/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L389"}}),fA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),mA=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L417"}}),gA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),hA=new X({}),pA=new w({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/modeling_tf_auto.py#L467"}}),uA=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16780/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L389"}}),bA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),FA=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L417"}}),vA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),TA=new X({}),MA=new w({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/modeling_tf_auto.py#L449"}}),CA=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16780/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L389"}}),wA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),AA=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L417"}}),yA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),LA=new X({}),xA=new w({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/modeling_tf_auto.py#L417"}}),SA=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16780/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L389"}}),RA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),BA=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L417"}}),PA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),$A=new X({}),IA=new w({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/modeling_tf_auto.py#L492"}}),NA=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16780/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L389"}}),jA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),DA=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L417"}}),GA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),OA=new X({}),VA=new w({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/modeling_flax_auto.py#L237"}}),zA=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16780/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L389"}}),QA=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),WA=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L417"}}),HA=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),UA=new X({}),JA=new w({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),KA=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16780/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L389"}}),ZA=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),ey=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L417"}}),oy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ry=new X({}),ty=new w({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),ny=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16780/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L389"}}),sy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),ly=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L417"}}),iy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),dy=new X({}),cy=new w({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),my=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16780/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L389"}}),gy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),hy=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L417"}}),py=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),_y=new X({}),uy=new w({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),Fy=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16780/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L389"}}),vy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),Ty=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L417"}}),My=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ey=new X({}),Cy=new w({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),Ay=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16780/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L389"}}),yy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),Ly=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L417"}}),xy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ky=new X({}),Sy=new w({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),By=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16780/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L389"}}),Py=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),$y=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L417"}}),Iy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),qy=new X({}),Ny=new w({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),Dy=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16780/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L389"}}),Gy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),Oy=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L417"}}),Vy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Xy=new X({}),zy=new w({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),Wy=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16780/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L389"}}),Hy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),Uy=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L417"}}),Jy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Yy=new X({}),Ky=new w({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),eL=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16780/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L389"}}),oL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),rL=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L417"}}),tL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),aL=new X({}),nL=new w({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),lL=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16780/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16780/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L389"}}),iL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),dL=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L417"}}),fL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),mL=new X({}),gL=new w({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),pL=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16780/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16780/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L389"}}),_L=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),uL=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16780/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16780/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16780/src/transformers/models/auto/auto_factory.py#L417"}}),bL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){Z=a("meta"),io=l(),de=a("h1"),Ce=a("a"),lo=a("span"),f(ge.$$.fragment),Me=l(),Xo=a("span"),qi=o("Auto Classes"),Nf=l(),fa=a("p"),Ni=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ji=a("code"),CE=o("from_pretrained()"),jf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),xe=l(),co=a("p"),Di=o("Instantiating one of "),Gn=a("a"),wE=o("AutoConfig"),On=o(", "),Vn=a("a"),AE=o("AutoModel"),Gi=o(`, and
`),Xn=a("a"),yE=o("AutoTokenizer"),Oi=o(" will directly create a class of the relevant architecture. For instance"),Df=l(),f(Da.$$.fragment),fo=l(),ue=a("p"),u9=o("will create a model that is an instance of "),Vi=a("a"),b9=o("BertModel"),F9=o("."),zo=l(),Ga=a("p"),v9=o("There is one class of "),Gf=a("code"),T9=o("AutoModel"),BIe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),vRe=l(),Xi=a("h2"),Of=a("a"),nY=a("span"),f(LE.$$.fragment),PIe=l(),sY=a("span"),$Ie=o("Extending the Auto Classes"),TRe=l(),zn=a("p"),IIe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),lY=a("code"),qIe=o("NewModel"),NIe=o(", make sure you have a "),iY=a("code"),jIe=o("NewModelConfig"),DIe=o(` then you can add those to the auto
classes like this:`),MRe=l(),f(xE.$$.fragment),ERe=l(),M9=a("p"),GIe=o("You will then be able to use the auto classes like you would usually do!"),CRe=l(),f(Vf.$$.fragment),wRe=l(),zi=a("h2"),Xf=a("a"),dY=a("span"),f(kE.$$.fragment),OIe=l(),cY=a("span"),VIe=o("AutoConfig"),ARe=l(),Qo=a("div"),f(SE.$$.fragment),XIe=l(),RE=a("p"),zIe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),E9=a("a"),QIe=o("from_pretrained()"),WIe=o(" class method."),HIe=l(),BE=a("p"),UIe=o("This class cannot be instantiated directly using "),fY=a("code"),JIe=o("__init__()"),YIe=o(" (throws an error)."),KIe=l(),mo=a("div"),f(PE.$$.fragment),ZIe=l(),mY=a("p"),eqe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),oqe=l(),Qi=a("p"),rqe=o("The configuration class to instantiate is selected based on the "),gY=a("code"),tqe=o("model_type"),aqe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),hY=a("code"),nqe=o("pretrained_model_name_or_path"),sqe=o(":"),lqe=l(),F=a("ul"),zf=a("li"),pY=a("strong"),iqe=o("albert"),dqe=o(" \u2014 "),C9=a("a"),cqe=o("AlbertConfig"),fqe=o(" (ALBERT model)"),mqe=l(),Qf=a("li"),_Y=a("strong"),gqe=o("bart"),hqe=o(" \u2014 "),w9=a("a"),pqe=o("BartConfig"),_qe=o(" (BART model)"),uqe=l(),Wf=a("li"),uY=a("strong"),bqe=o("beit"),Fqe=o(" \u2014 "),A9=a("a"),vqe=o("BeitConfig"),Tqe=o(" (BEiT model)"),Mqe=l(),Hf=a("li"),bY=a("strong"),Eqe=o("bert"),Cqe=o(" \u2014 "),y9=a("a"),wqe=o("BertConfig"),Aqe=o(" (BERT model)"),yqe=l(),Uf=a("li"),FY=a("strong"),Lqe=o("bert-generation"),xqe=o(" \u2014 "),L9=a("a"),kqe=o("BertGenerationConfig"),Sqe=o(" (Bert Generation model)"),Rqe=l(),Jf=a("li"),vY=a("strong"),Bqe=o("big_bird"),Pqe=o(" \u2014 "),x9=a("a"),$qe=o("BigBirdConfig"),Iqe=o(" (BigBird model)"),qqe=l(),Yf=a("li"),TY=a("strong"),Nqe=o("bigbird_pegasus"),jqe=o(" \u2014 "),k9=a("a"),Dqe=o("BigBirdPegasusConfig"),Gqe=o(" (BigBirdPegasus model)"),Oqe=l(),Kf=a("li"),MY=a("strong"),Vqe=o("blenderbot"),Xqe=o(" \u2014 "),S9=a("a"),zqe=o("BlenderbotConfig"),Qqe=o(" (Blenderbot model)"),Wqe=l(),Zf=a("li"),EY=a("strong"),Hqe=o("blenderbot-small"),Uqe=o(" \u2014 "),R9=a("a"),Jqe=o("BlenderbotSmallConfig"),Yqe=o(" (BlenderbotSmall model)"),Kqe=l(),em=a("li"),CY=a("strong"),Zqe=o("camembert"),eNe=o(" \u2014 "),B9=a("a"),oNe=o("CamembertConfig"),rNe=o(" (CamemBERT model)"),tNe=l(),om=a("li"),wY=a("strong"),aNe=o("canine"),nNe=o(" \u2014 "),P9=a("a"),sNe=o("CanineConfig"),lNe=o(" (Canine model)"),iNe=l(),rm=a("li"),AY=a("strong"),dNe=o("clip"),cNe=o(" \u2014 "),$9=a("a"),fNe=o("CLIPConfig"),mNe=o(" (CLIP model)"),gNe=l(),tm=a("li"),yY=a("strong"),hNe=o("convbert"),pNe=o(" \u2014 "),I9=a("a"),_Ne=o("ConvBertConfig"),uNe=o(" (ConvBERT model)"),bNe=l(),am=a("li"),LY=a("strong"),FNe=o("convnext"),vNe=o(" \u2014 "),q9=a("a"),TNe=o("ConvNextConfig"),MNe=o(" (ConvNext model)"),ENe=l(),nm=a("li"),xY=a("strong"),CNe=o("ctrl"),wNe=o(" \u2014 "),N9=a("a"),ANe=o("CTRLConfig"),yNe=o(" (CTRL model)"),LNe=l(),sm=a("li"),kY=a("strong"),xNe=o("data2vec-audio"),kNe=o(" \u2014 "),j9=a("a"),SNe=o("Data2VecAudioConfig"),RNe=o(" (Data2VecAudio model)"),BNe=l(),lm=a("li"),SY=a("strong"),PNe=o("data2vec-text"),$Ne=o(" \u2014 "),D9=a("a"),INe=o("Data2VecTextConfig"),qNe=o(" (Data2VecText model)"),NNe=l(),im=a("li"),RY=a("strong"),jNe=o("deberta"),DNe=o(" \u2014 "),G9=a("a"),GNe=o("DebertaConfig"),ONe=o(" (DeBERTa model)"),VNe=l(),dm=a("li"),BY=a("strong"),XNe=o("deberta-v2"),zNe=o(" \u2014 "),O9=a("a"),QNe=o("DebertaV2Config"),WNe=o(" (DeBERTa-v2 model)"),HNe=l(),cm=a("li"),PY=a("strong"),UNe=o("decision_transformer"),JNe=o(" \u2014 "),V9=a("a"),YNe=o("DecisionTransformerConfig"),KNe=o(" (Decision Transformer model)"),ZNe=l(),fm=a("li"),$Y=a("strong"),eje=o("deit"),oje=o(" \u2014 "),X9=a("a"),rje=o("DeiTConfig"),tje=o(" (DeiT model)"),aje=l(),mm=a("li"),IY=a("strong"),nje=o("detr"),sje=o(" \u2014 "),z9=a("a"),lje=o("DetrConfig"),ije=o(" (DETR model)"),dje=l(),gm=a("li"),qY=a("strong"),cje=o("distilbert"),fje=o(" \u2014 "),Q9=a("a"),mje=o("DistilBertConfig"),gje=o(" (DistilBERT model)"),hje=l(),hm=a("li"),NY=a("strong"),pje=o("dpr"),_je=o(" \u2014 "),W9=a("a"),uje=o("DPRConfig"),bje=o(" (DPR model)"),Fje=l(),pm=a("li"),jY=a("strong"),vje=o("dpt"),Tje=o(" \u2014 "),H9=a("a"),Mje=o("DPTConfig"),Eje=o(" (DPT model)"),Cje=l(),_m=a("li"),DY=a("strong"),wje=o("electra"),Aje=o(" \u2014 "),U9=a("a"),yje=o("ElectraConfig"),Lje=o(" (ELECTRA model)"),xje=l(),um=a("li"),GY=a("strong"),kje=o("encoder-decoder"),Sje=o(" \u2014 "),J9=a("a"),Rje=o("EncoderDecoderConfig"),Bje=o(" (Encoder decoder model)"),Pje=l(),bm=a("li"),OY=a("strong"),$je=o("flaubert"),Ije=o(" \u2014 "),Y9=a("a"),qje=o("FlaubertConfig"),Nje=o(" (FlauBERT model)"),jje=l(),Fm=a("li"),VY=a("strong"),Dje=o("fnet"),Gje=o(" \u2014 "),K9=a("a"),Oje=o("FNetConfig"),Vje=o(" (FNet model)"),Xje=l(),vm=a("li"),XY=a("strong"),zje=o("fsmt"),Qje=o(" \u2014 "),Z9=a("a"),Wje=o("FSMTConfig"),Hje=o(" (FairSeq Machine-Translation model)"),Uje=l(),Tm=a("li"),zY=a("strong"),Jje=o("funnel"),Yje=o(" \u2014 "),ex=a("a"),Kje=o("FunnelConfig"),Zje=o(" (Funnel Transformer model)"),eDe=l(),Mm=a("li"),QY=a("strong"),oDe=o("glpn"),rDe=o(" \u2014 "),ox=a("a"),tDe=o("GLPNConfig"),aDe=o(" (GLPN model)"),nDe=l(),Em=a("li"),WY=a("strong"),sDe=o("gpt2"),lDe=o(" \u2014 "),rx=a("a"),iDe=o("GPT2Config"),dDe=o(" (OpenAI GPT-2 model)"),cDe=l(),Cm=a("li"),HY=a("strong"),fDe=o("gpt_neo"),mDe=o(" \u2014 "),tx=a("a"),gDe=o("GPTNeoConfig"),hDe=o(" (GPT Neo model)"),pDe=l(),wm=a("li"),UY=a("strong"),_De=o("gptj"),uDe=o(" \u2014 "),ax=a("a"),bDe=o("GPTJConfig"),FDe=o(" (GPT-J model)"),vDe=l(),Am=a("li"),JY=a("strong"),TDe=o("hubert"),MDe=o(" \u2014 "),nx=a("a"),EDe=o("HubertConfig"),CDe=o(" (Hubert model)"),wDe=l(),ym=a("li"),YY=a("strong"),ADe=o("ibert"),yDe=o(" \u2014 "),sx=a("a"),LDe=o("IBertConfig"),xDe=o(" (I-BERT model)"),kDe=l(),Lm=a("li"),KY=a("strong"),SDe=o("imagegpt"),RDe=o(" \u2014 "),lx=a("a"),BDe=o("ImageGPTConfig"),PDe=o(" (ImageGPT model)"),$De=l(),xm=a("li"),ZY=a("strong"),IDe=o("layoutlm"),qDe=o(" \u2014 "),ix=a("a"),NDe=o("LayoutLMConfig"),jDe=o(" (LayoutLM model)"),DDe=l(),km=a("li"),eK=a("strong"),GDe=o("layoutlmv2"),ODe=o(" \u2014 "),dx=a("a"),VDe=o("LayoutLMv2Config"),XDe=o(" (LayoutLMv2 model)"),zDe=l(),Sm=a("li"),oK=a("strong"),QDe=o("led"),WDe=o(" \u2014 "),cx=a("a"),HDe=o("LEDConfig"),UDe=o(" (LED model)"),JDe=l(),Rm=a("li"),rK=a("strong"),YDe=o("longformer"),KDe=o(" \u2014 "),fx=a("a"),ZDe=o("LongformerConfig"),eGe=o(" (Longformer model)"),oGe=l(),Bm=a("li"),tK=a("strong"),rGe=o("luke"),tGe=o(" \u2014 "),mx=a("a"),aGe=o("LukeConfig"),nGe=o(" (LUKE model)"),sGe=l(),Pm=a("li"),aK=a("strong"),lGe=o("lxmert"),iGe=o(" \u2014 "),gx=a("a"),dGe=o("LxmertConfig"),cGe=o(" (LXMERT model)"),fGe=l(),$m=a("li"),nK=a("strong"),mGe=o("m2m_100"),gGe=o(" \u2014 "),hx=a("a"),hGe=o("M2M100Config"),pGe=o(" (M2M100 model)"),_Ge=l(),Im=a("li"),sK=a("strong"),uGe=o("marian"),bGe=o(" \u2014 "),px=a("a"),FGe=o("MarianConfig"),vGe=o(" (Marian model)"),TGe=l(),qm=a("li"),lK=a("strong"),MGe=o("maskformer"),EGe=o(" \u2014 "),_x=a("a"),CGe=o("MaskFormerConfig"),wGe=o(" (MaskFormer model)"),AGe=l(),Nm=a("li"),iK=a("strong"),yGe=o("mbart"),LGe=o(" \u2014 "),ux=a("a"),xGe=o("MBartConfig"),kGe=o(" (mBART model)"),SGe=l(),jm=a("li"),dK=a("strong"),RGe=o("megatron-bert"),BGe=o(" \u2014 "),bx=a("a"),PGe=o("MegatronBertConfig"),$Ge=o(" (MegatronBert model)"),IGe=l(),Dm=a("li"),cK=a("strong"),qGe=o("mobilebert"),NGe=o(" \u2014 "),Fx=a("a"),jGe=o("MobileBertConfig"),DGe=o(" (MobileBERT model)"),GGe=l(),Gm=a("li"),fK=a("strong"),OGe=o("mpnet"),VGe=o(" \u2014 "),vx=a("a"),XGe=o("MPNetConfig"),zGe=o(" (MPNet model)"),QGe=l(),Om=a("li"),mK=a("strong"),WGe=o("mt5"),HGe=o(" \u2014 "),Tx=a("a"),UGe=o("MT5Config"),JGe=o(" (mT5 model)"),YGe=l(),Vm=a("li"),gK=a("strong"),KGe=o("nystromformer"),ZGe=o(" \u2014 "),Mx=a("a"),eOe=o("NystromformerConfig"),oOe=o(" (Nystromformer model)"),rOe=l(),Xm=a("li"),hK=a("strong"),tOe=o("openai-gpt"),aOe=o(" \u2014 "),Ex=a("a"),nOe=o("OpenAIGPTConfig"),sOe=o(" (OpenAI GPT model)"),lOe=l(),zm=a("li"),pK=a("strong"),iOe=o("pegasus"),dOe=o(" \u2014 "),Cx=a("a"),cOe=o("PegasusConfig"),fOe=o(" (Pegasus model)"),mOe=l(),Qm=a("li"),_K=a("strong"),gOe=o("perceiver"),hOe=o(" \u2014 "),wx=a("a"),pOe=o("PerceiverConfig"),_Oe=o(" (Perceiver model)"),uOe=l(),Wm=a("li"),uK=a("strong"),bOe=o("plbart"),FOe=o(" \u2014 "),Ax=a("a"),vOe=o("PLBartConfig"),TOe=o(" (PLBart model)"),MOe=l(),Hm=a("li"),bK=a("strong"),EOe=o("poolformer"),COe=o(" \u2014 "),yx=a("a"),wOe=o("PoolFormerConfig"),AOe=o(" (PoolFormer model)"),yOe=l(),Um=a("li"),FK=a("strong"),LOe=o("prophetnet"),xOe=o(" \u2014 "),Lx=a("a"),kOe=o("ProphetNetConfig"),SOe=o(" (ProphetNet model)"),ROe=l(),Jm=a("li"),vK=a("strong"),BOe=o("qdqbert"),POe=o(" \u2014 "),xx=a("a"),$Oe=o("QDQBertConfig"),IOe=o(" (QDQBert model)"),qOe=l(),Ym=a("li"),TK=a("strong"),NOe=o("rag"),jOe=o(" \u2014 "),kx=a("a"),DOe=o("RagConfig"),GOe=o(" (RAG model)"),OOe=l(),Km=a("li"),MK=a("strong"),VOe=o("realm"),XOe=o(" \u2014 "),Sx=a("a"),zOe=o("RealmConfig"),QOe=o(" (Realm model)"),WOe=l(),Zm=a("li"),EK=a("strong"),HOe=o("reformer"),UOe=o(" \u2014 "),Rx=a("a"),JOe=o("ReformerConfig"),YOe=o(" (Reformer model)"),KOe=l(),eg=a("li"),CK=a("strong"),ZOe=o("regnet"),eVe=o(" \u2014 "),Bx=a("a"),oVe=o("RegNetConfig"),rVe=o(" (RegNet model)"),tVe=l(),og=a("li"),wK=a("strong"),aVe=o("rembert"),nVe=o(" \u2014 "),Px=a("a"),sVe=o("RemBertConfig"),lVe=o(" (RemBERT model)"),iVe=l(),rg=a("li"),AK=a("strong"),dVe=o("resnet"),cVe=o(" \u2014 "),$x=a("a"),fVe=o("ResNetConfig"),mVe=o(" (ResNet model)"),gVe=l(),tg=a("li"),yK=a("strong"),hVe=o("retribert"),pVe=o(" \u2014 "),Ix=a("a"),_Ve=o("RetriBertConfig"),uVe=o(" (RetriBERT model)"),bVe=l(),ag=a("li"),LK=a("strong"),FVe=o("roberta"),vVe=o(" \u2014 "),qx=a("a"),TVe=o("RobertaConfig"),MVe=o(" (RoBERTa model)"),EVe=l(),ng=a("li"),xK=a("strong"),CVe=o("roformer"),wVe=o(" \u2014 "),Nx=a("a"),AVe=o("RoFormerConfig"),yVe=o(" (RoFormer model)"),LVe=l(),sg=a("li"),kK=a("strong"),xVe=o("segformer"),kVe=o(" \u2014 "),jx=a("a"),SVe=o("SegformerConfig"),RVe=o(" (SegFormer model)"),BVe=l(),lg=a("li"),SK=a("strong"),PVe=o("sew"),$Ve=o(" \u2014 "),Dx=a("a"),IVe=o("SEWConfig"),qVe=o(" (SEW model)"),NVe=l(),ig=a("li"),RK=a("strong"),jVe=o("sew-d"),DVe=o(" \u2014 "),Gx=a("a"),GVe=o("SEWDConfig"),OVe=o(" (SEW-D model)"),VVe=l(),dg=a("li"),BK=a("strong"),XVe=o("speech-encoder-decoder"),zVe=o(" \u2014 "),Ox=a("a"),QVe=o("SpeechEncoderDecoderConfig"),WVe=o(" (Speech Encoder decoder model)"),HVe=l(),cg=a("li"),PK=a("strong"),UVe=o("speech_to_text"),JVe=o(" \u2014 "),Vx=a("a"),YVe=o("Speech2TextConfig"),KVe=o(" (Speech2Text model)"),ZVe=l(),fg=a("li"),$K=a("strong"),eXe=o("speech_to_text_2"),oXe=o(" \u2014 "),Xx=a("a"),rXe=o("Speech2Text2Config"),tXe=o(" (Speech2Text2 model)"),aXe=l(),mg=a("li"),IK=a("strong"),nXe=o("splinter"),sXe=o(" \u2014 "),zx=a("a"),lXe=o("SplinterConfig"),iXe=o(" (Splinter model)"),dXe=l(),gg=a("li"),qK=a("strong"),cXe=o("squeezebert"),fXe=o(" \u2014 "),Qx=a("a"),mXe=o("SqueezeBertConfig"),gXe=o(" (SqueezeBERT model)"),hXe=l(),hg=a("li"),NK=a("strong"),pXe=o("swin"),_Xe=o(" \u2014 "),Wx=a("a"),uXe=o("SwinConfig"),bXe=o(" (Swin model)"),FXe=l(),pg=a("li"),jK=a("strong"),vXe=o("t5"),TXe=o(" \u2014 "),Hx=a("a"),MXe=o("T5Config"),EXe=o(" (T5 model)"),CXe=l(),_g=a("li"),DK=a("strong"),wXe=o("tapas"),AXe=o(" \u2014 "),Ux=a("a"),yXe=o("TapasConfig"),LXe=o(" (TAPAS model)"),xXe=l(),ug=a("li"),GK=a("strong"),kXe=o("tapex"),SXe=o(" \u2014 "),Jx=a("a"),RXe=o("BartConfig"),BXe=o(" (TAPEX model)"),PXe=l(),bg=a("li"),OK=a("strong"),$Xe=o("transfo-xl"),IXe=o(" \u2014 "),Yx=a("a"),qXe=o("TransfoXLConfig"),NXe=o(" (Transformer-XL model)"),jXe=l(),Fg=a("li"),VK=a("strong"),DXe=o("trocr"),GXe=o(" \u2014 "),Kx=a("a"),OXe=o("TrOCRConfig"),VXe=o(" (TrOCR model)"),XXe=l(),vg=a("li"),XK=a("strong"),zXe=o("unispeech"),QXe=o(" \u2014 "),Zx=a("a"),WXe=o("UniSpeechConfig"),HXe=o(" (UniSpeech model)"),UXe=l(),Tg=a("li"),zK=a("strong"),JXe=o("unispeech-sat"),YXe=o(" \u2014 "),ek=a("a"),KXe=o("UniSpeechSatConfig"),ZXe=o(" (UniSpeechSat model)"),eze=l(),Mg=a("li"),QK=a("strong"),oze=o("van"),rze=o(" \u2014 "),ok=a("a"),tze=o("VanConfig"),aze=o(" (VAN model)"),nze=l(),Eg=a("li"),WK=a("strong"),sze=o("vilt"),lze=o(" \u2014 "),rk=a("a"),ize=o("ViltConfig"),dze=o(" (ViLT model)"),cze=l(),Cg=a("li"),HK=a("strong"),fze=o("vision-encoder-decoder"),mze=o(" \u2014 "),tk=a("a"),gze=o("VisionEncoderDecoderConfig"),hze=o(" (Vision Encoder decoder model)"),pze=l(),wg=a("li"),UK=a("strong"),_ze=o("vision-text-dual-encoder"),uze=o(" \u2014 "),ak=a("a"),bze=o("VisionTextDualEncoderConfig"),Fze=o(" (VisionTextDualEncoder model)"),vze=l(),Ag=a("li"),JK=a("strong"),Tze=o("visual_bert"),Mze=o(" \u2014 "),nk=a("a"),Eze=o("VisualBertConfig"),Cze=o(" (VisualBert model)"),wze=l(),yg=a("li"),YK=a("strong"),Aze=o("vit"),yze=o(" \u2014 "),sk=a("a"),Lze=o("ViTConfig"),xze=o(" (ViT model)"),kze=l(),Lg=a("li"),KK=a("strong"),Sze=o("vit_mae"),Rze=o(" \u2014 "),lk=a("a"),Bze=o("ViTMAEConfig"),Pze=o(" (ViTMAE model)"),$ze=l(),xg=a("li"),ZK=a("strong"),Ize=o("wav2vec2"),qze=o(" \u2014 "),ik=a("a"),Nze=o("Wav2Vec2Config"),jze=o(" (Wav2Vec2 model)"),Dze=l(),kg=a("li"),eZ=a("strong"),Gze=o("wavlm"),Oze=o(" \u2014 "),dk=a("a"),Vze=o("WavLMConfig"),Xze=o(" (WavLM model)"),zze=l(),Sg=a("li"),oZ=a("strong"),Qze=o("xglm"),Wze=o(" \u2014 "),ck=a("a"),Hze=o("XGLMConfig"),Uze=o(" (XGLM model)"),Jze=l(),Rg=a("li"),rZ=a("strong"),Yze=o("xlm"),Kze=o(" \u2014 "),fk=a("a"),Zze=o("XLMConfig"),eQe=o(" (XLM model)"),oQe=l(),Bg=a("li"),tZ=a("strong"),rQe=o("xlm-prophetnet"),tQe=o(" \u2014 "),mk=a("a"),aQe=o("XLMProphetNetConfig"),nQe=o(" (XLMProphetNet model)"),sQe=l(),Pg=a("li"),aZ=a("strong"),lQe=o("xlm-roberta"),iQe=o(" \u2014 "),gk=a("a"),dQe=o("XLMRobertaConfig"),cQe=o(" (XLM-RoBERTa model)"),fQe=l(),$g=a("li"),nZ=a("strong"),mQe=o("xlm-roberta-xl"),gQe=o(" \u2014 "),hk=a("a"),hQe=o("XLMRobertaXLConfig"),pQe=o(" (XLM-RoBERTa-XL model)"),_Qe=l(),Ig=a("li"),sZ=a("strong"),uQe=o("xlnet"),bQe=o(" \u2014 "),pk=a("a"),FQe=o("XLNetConfig"),vQe=o(" (XLNet model)"),TQe=l(),qg=a("li"),lZ=a("strong"),MQe=o("yoso"),EQe=o(" \u2014 "),_k=a("a"),CQe=o("YosoConfig"),wQe=o(" (YOSO model)"),AQe=l(),iZ=a("p"),yQe=o("Examples:"),LQe=l(),f($E.$$.fragment),xQe=l(),Ng=a("div"),f(IE.$$.fragment),kQe=l(),dZ=a("p"),SQe=o("Register a new configuration for this class."),yRe=l(),Wi=a("h2"),jg=a("a"),cZ=a("span"),f(qE.$$.fragment),RQe=l(),fZ=a("span"),BQe=o("AutoTokenizer"),LRe=l(),Wo=a("div"),f(NE.$$.fragment),PQe=l(),jE=a("p"),$Qe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),uk=a("a"),IQe=o("AutoTokenizer.from_pretrained()"),qQe=o(" class method."),NQe=l(),DE=a("p"),jQe=o("This class cannot be instantiated directly using "),mZ=a("code"),DQe=o("__init__()"),GQe=o(" (throws an error)."),OQe=l(),go=a("div"),f(GE.$$.fragment),VQe=l(),gZ=a("p"),XQe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),zQe=l(),Oa=a("p"),QQe=o("The tokenizer class to instantiate is selected based on the "),hZ=a("code"),WQe=o("model_type"),HQe=o(` property of the config object (either
passed as an argument or loaded from `),pZ=a("code"),UQe=o("pretrained_model_name_or_path"),JQe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Z=a("code"),YQe=o("pretrained_model_name_or_path"),KQe=o(":"),ZQe=l(),E=a("ul"),Qn=a("li"),uZ=a("strong"),eWe=o("albert"),oWe=o(" \u2014 "),bk=a("a"),rWe=o("AlbertTokenizer"),tWe=o(" or "),Fk=a("a"),aWe=o("AlbertTokenizerFast"),nWe=o(" (ALBERT model)"),sWe=l(),Wn=a("li"),bZ=a("strong"),lWe=o("bart"),iWe=o(" \u2014 "),vk=a("a"),dWe=o("BartTokenizer"),cWe=o(" or "),Tk=a("a"),fWe=o("BartTokenizerFast"),mWe=o(" (BART model)"),gWe=l(),Hn=a("li"),FZ=a("strong"),hWe=o("barthez"),pWe=o(" \u2014 "),Mk=a("a"),_We=o("BarthezTokenizer"),uWe=o(" or "),Ek=a("a"),bWe=o("BarthezTokenizerFast"),FWe=o(" (BARThez model)"),vWe=l(),Dg=a("li"),vZ=a("strong"),TWe=o("bartpho"),MWe=o(" \u2014 "),Ck=a("a"),EWe=o("BartphoTokenizer"),CWe=o(" (BARTpho model)"),wWe=l(),Un=a("li"),TZ=a("strong"),AWe=o("bert"),yWe=o(" \u2014 "),wk=a("a"),LWe=o("BertTokenizer"),xWe=o(" or "),Ak=a("a"),kWe=o("BertTokenizerFast"),SWe=o(" (BERT model)"),RWe=l(),Gg=a("li"),MZ=a("strong"),BWe=o("bert-generation"),PWe=o(" \u2014 "),yk=a("a"),$We=o("BertGenerationTokenizer"),IWe=o(" (Bert Generation model)"),qWe=l(),Og=a("li"),EZ=a("strong"),NWe=o("bert-japanese"),jWe=o(" \u2014 "),Lk=a("a"),DWe=o("BertJapaneseTokenizer"),GWe=o(" (BertJapanese model)"),OWe=l(),Vg=a("li"),CZ=a("strong"),VWe=o("bertweet"),XWe=o(" \u2014 "),xk=a("a"),zWe=o("BertweetTokenizer"),QWe=o(" (Bertweet model)"),WWe=l(),Jn=a("li"),wZ=a("strong"),HWe=o("big_bird"),UWe=o(" \u2014 "),kk=a("a"),JWe=o("BigBirdTokenizer"),YWe=o(" or "),Sk=a("a"),KWe=o("BigBirdTokenizerFast"),ZWe=o(" (BigBird model)"),eHe=l(),Yn=a("li"),AZ=a("strong"),oHe=o("bigbird_pegasus"),rHe=o(" \u2014 "),Rk=a("a"),tHe=o("PegasusTokenizer"),aHe=o(" or "),Bk=a("a"),nHe=o("PegasusTokenizerFast"),sHe=o(" (BigBirdPegasus model)"),lHe=l(),Kn=a("li"),yZ=a("strong"),iHe=o("blenderbot"),dHe=o(" \u2014 "),Pk=a("a"),cHe=o("BlenderbotTokenizer"),fHe=o(" or "),$k=a("a"),mHe=o("BlenderbotTokenizerFast"),gHe=o(" (Blenderbot model)"),hHe=l(),Xg=a("li"),LZ=a("strong"),pHe=o("blenderbot-small"),_He=o(" \u2014 "),Ik=a("a"),uHe=o("BlenderbotSmallTokenizer"),bHe=o(" (BlenderbotSmall model)"),FHe=l(),zg=a("li"),xZ=a("strong"),vHe=o("byt5"),THe=o(" \u2014 "),qk=a("a"),MHe=o("ByT5Tokenizer"),EHe=o(" (ByT5 model)"),CHe=l(),Zn=a("li"),kZ=a("strong"),wHe=o("camembert"),AHe=o(" \u2014 "),Nk=a("a"),yHe=o("CamembertTokenizer"),LHe=o(" or "),jk=a("a"),xHe=o("CamembertTokenizerFast"),kHe=o(" (CamemBERT model)"),SHe=l(),Qg=a("li"),SZ=a("strong"),RHe=o("canine"),BHe=o(" \u2014 "),Dk=a("a"),PHe=o("CanineTokenizer"),$He=o(" (Canine model)"),IHe=l(),es=a("li"),RZ=a("strong"),qHe=o("clip"),NHe=o(" \u2014 "),Gk=a("a"),jHe=o("CLIPTokenizer"),DHe=o(" or "),Ok=a("a"),GHe=o("CLIPTokenizerFast"),OHe=o(" (CLIP model)"),VHe=l(),os=a("li"),BZ=a("strong"),XHe=o("convbert"),zHe=o(" \u2014 "),Vk=a("a"),QHe=o("ConvBertTokenizer"),WHe=o(" or "),Xk=a("a"),HHe=o("ConvBertTokenizerFast"),UHe=o(" (ConvBERT model)"),JHe=l(),rs=a("li"),PZ=a("strong"),YHe=o("cpm"),KHe=o(" \u2014 "),zk=a("a"),ZHe=o("CpmTokenizer"),eUe=o(" or "),$Z=a("code"),oUe=o("CpmTokenizerFast"),rUe=o(" (CPM model)"),tUe=l(),Wg=a("li"),IZ=a("strong"),aUe=o("ctrl"),nUe=o(" \u2014 "),Qk=a("a"),sUe=o("CTRLTokenizer"),lUe=o(" (CTRL model)"),iUe=l(),ts=a("li"),qZ=a("strong"),dUe=o("deberta"),cUe=o(" \u2014 "),Wk=a("a"),fUe=o("DebertaTokenizer"),mUe=o(" or "),Hk=a("a"),gUe=o("DebertaTokenizerFast"),hUe=o(" (DeBERTa model)"),pUe=l(),Hg=a("li"),NZ=a("strong"),_Ue=o("deberta-v2"),uUe=o(" \u2014 "),Uk=a("a"),bUe=o("DebertaV2Tokenizer"),FUe=o(" (DeBERTa-v2 model)"),vUe=l(),as=a("li"),jZ=a("strong"),TUe=o("distilbert"),MUe=o(" \u2014 "),Jk=a("a"),EUe=o("DistilBertTokenizer"),CUe=o(" or "),Yk=a("a"),wUe=o("DistilBertTokenizerFast"),AUe=o(" (DistilBERT model)"),yUe=l(),ns=a("li"),DZ=a("strong"),LUe=o("dpr"),xUe=o(" \u2014 "),Kk=a("a"),kUe=o("DPRQuestionEncoderTokenizer"),SUe=o(" or "),Zk=a("a"),RUe=o("DPRQuestionEncoderTokenizerFast"),BUe=o(" (DPR model)"),PUe=l(),ss=a("li"),GZ=a("strong"),$Ue=o("electra"),IUe=o(" \u2014 "),eS=a("a"),qUe=o("ElectraTokenizer"),NUe=o(" or "),oS=a("a"),jUe=o("ElectraTokenizerFast"),DUe=o(" (ELECTRA model)"),GUe=l(),Ug=a("li"),OZ=a("strong"),OUe=o("flaubert"),VUe=o(" \u2014 "),rS=a("a"),XUe=o("FlaubertTokenizer"),zUe=o(" (FlauBERT model)"),QUe=l(),ls=a("li"),VZ=a("strong"),WUe=o("fnet"),HUe=o(" \u2014 "),tS=a("a"),UUe=o("FNetTokenizer"),JUe=o(" or "),aS=a("a"),YUe=o("FNetTokenizerFast"),KUe=o(" (FNet model)"),ZUe=l(),Jg=a("li"),XZ=a("strong"),eJe=o("fsmt"),oJe=o(" \u2014 "),nS=a("a"),rJe=o("FSMTTokenizer"),tJe=o(" (FairSeq Machine-Translation model)"),aJe=l(),is=a("li"),zZ=a("strong"),nJe=o("funnel"),sJe=o(" \u2014 "),sS=a("a"),lJe=o("FunnelTokenizer"),iJe=o(" or "),lS=a("a"),dJe=o("FunnelTokenizerFast"),cJe=o(" (Funnel Transformer model)"),fJe=l(),ds=a("li"),QZ=a("strong"),mJe=o("gpt2"),gJe=o(" \u2014 "),iS=a("a"),hJe=o("GPT2Tokenizer"),pJe=o(" or "),dS=a("a"),_Je=o("GPT2TokenizerFast"),uJe=o(" (OpenAI GPT-2 model)"),bJe=l(),cs=a("li"),WZ=a("strong"),FJe=o("gpt_neo"),vJe=o(" \u2014 "),cS=a("a"),TJe=o("GPT2Tokenizer"),MJe=o(" or "),fS=a("a"),EJe=o("GPT2TokenizerFast"),CJe=o(" (GPT Neo model)"),wJe=l(),fs=a("li"),HZ=a("strong"),AJe=o("gptj"),yJe=o(" \u2014 "),mS=a("a"),LJe=o("GPT2Tokenizer"),xJe=o(" or "),gS=a("a"),kJe=o("GPT2TokenizerFast"),SJe=o(" (GPT-J model)"),RJe=l(),ms=a("li"),UZ=a("strong"),BJe=o("herbert"),PJe=o(" \u2014 "),hS=a("a"),$Je=o("HerbertTokenizer"),IJe=o(" or "),pS=a("a"),qJe=o("HerbertTokenizerFast"),NJe=o(" (HerBERT model)"),jJe=l(),Yg=a("li"),JZ=a("strong"),DJe=o("hubert"),GJe=o(" \u2014 "),_S=a("a"),OJe=o("Wav2Vec2CTCTokenizer"),VJe=o(" (Hubert model)"),XJe=l(),gs=a("li"),YZ=a("strong"),zJe=o("ibert"),QJe=o(" \u2014 "),uS=a("a"),WJe=o("RobertaTokenizer"),HJe=o(" or "),bS=a("a"),UJe=o("RobertaTokenizerFast"),JJe=o(" (I-BERT model)"),YJe=l(),hs=a("li"),KZ=a("strong"),KJe=o("layoutlm"),ZJe=o(" \u2014 "),FS=a("a"),eYe=o("LayoutLMTokenizer"),oYe=o(" or "),vS=a("a"),rYe=o("LayoutLMTokenizerFast"),tYe=o(" (LayoutLM model)"),aYe=l(),ps=a("li"),ZZ=a("strong"),nYe=o("layoutlmv2"),sYe=o(" \u2014 "),TS=a("a"),lYe=o("LayoutLMv2Tokenizer"),iYe=o(" or "),MS=a("a"),dYe=o("LayoutLMv2TokenizerFast"),cYe=o(" (LayoutLMv2 model)"),fYe=l(),_s=a("li"),eee=a("strong"),mYe=o("layoutxlm"),gYe=o(" \u2014 "),ES=a("a"),hYe=o("LayoutXLMTokenizer"),pYe=o(" or "),CS=a("a"),_Ye=o("LayoutXLMTokenizerFast"),uYe=o(" (LayoutXLM model)"),bYe=l(),us=a("li"),oee=a("strong"),FYe=o("led"),vYe=o(" \u2014 "),wS=a("a"),TYe=o("LEDTokenizer"),MYe=o(" or "),AS=a("a"),EYe=o("LEDTokenizerFast"),CYe=o(" (LED model)"),wYe=l(),bs=a("li"),ree=a("strong"),AYe=o("longformer"),yYe=o(" \u2014 "),yS=a("a"),LYe=o("LongformerTokenizer"),xYe=o(" or "),LS=a("a"),kYe=o("LongformerTokenizerFast"),SYe=o(" (Longformer model)"),RYe=l(),Kg=a("li"),tee=a("strong"),BYe=o("luke"),PYe=o(" \u2014 "),xS=a("a"),$Ye=o("LukeTokenizer"),IYe=o(" (LUKE model)"),qYe=l(),Fs=a("li"),aee=a("strong"),NYe=o("lxmert"),jYe=o(" \u2014 "),kS=a("a"),DYe=o("LxmertTokenizer"),GYe=o(" or "),SS=a("a"),OYe=o("LxmertTokenizerFast"),VYe=o(" (LXMERT model)"),XYe=l(),Zg=a("li"),nee=a("strong"),zYe=o("m2m_100"),QYe=o(" \u2014 "),RS=a("a"),WYe=o("M2M100Tokenizer"),HYe=o(" (M2M100 model)"),UYe=l(),eh=a("li"),see=a("strong"),JYe=o("marian"),YYe=o(" \u2014 "),BS=a("a"),KYe=o("MarianTokenizer"),ZYe=o(" (Marian model)"),eKe=l(),vs=a("li"),lee=a("strong"),oKe=o("mbart"),rKe=o(" \u2014 "),PS=a("a"),tKe=o("MBartTokenizer"),aKe=o(" or "),$S=a("a"),nKe=o("MBartTokenizerFast"),sKe=o(" (mBART model)"),lKe=l(),Ts=a("li"),iee=a("strong"),iKe=o("mbart50"),dKe=o(" \u2014 "),IS=a("a"),cKe=o("MBart50Tokenizer"),fKe=o(" or "),qS=a("a"),mKe=o("MBart50TokenizerFast"),gKe=o(" (mBART-50 model)"),hKe=l(),oh=a("li"),dee=a("strong"),pKe=o("mluke"),_Ke=o(" \u2014 "),NS=a("a"),uKe=o("MLukeTokenizer"),bKe=o(" (mLUKE model)"),FKe=l(),Ms=a("li"),cee=a("strong"),vKe=o("mobilebert"),TKe=o(" \u2014 "),jS=a("a"),MKe=o("MobileBertTokenizer"),EKe=o(" or "),DS=a("a"),CKe=o("MobileBertTokenizerFast"),wKe=o(" (MobileBERT model)"),AKe=l(),Es=a("li"),fee=a("strong"),yKe=o("mpnet"),LKe=o(" \u2014 "),GS=a("a"),xKe=o("MPNetTokenizer"),kKe=o(" or "),OS=a("a"),SKe=o("MPNetTokenizerFast"),RKe=o(" (MPNet model)"),BKe=l(),Cs=a("li"),mee=a("strong"),PKe=o("mt5"),$Ke=o(" \u2014 "),VS=a("a"),IKe=o("MT5Tokenizer"),qKe=o(" or "),XS=a("a"),NKe=o("MT5TokenizerFast"),jKe=o(" (mT5 model)"),DKe=l(),ws=a("li"),gee=a("strong"),GKe=o("openai-gpt"),OKe=o(" \u2014 "),zS=a("a"),VKe=o("OpenAIGPTTokenizer"),XKe=o(" or "),QS=a("a"),zKe=o("OpenAIGPTTokenizerFast"),QKe=o(" (OpenAI GPT model)"),WKe=l(),As=a("li"),hee=a("strong"),HKe=o("pegasus"),UKe=o(" \u2014 "),WS=a("a"),JKe=o("PegasusTokenizer"),YKe=o(" or "),HS=a("a"),KKe=o("PegasusTokenizerFast"),ZKe=o(" (Pegasus model)"),eZe=l(),rh=a("li"),pee=a("strong"),oZe=o("perceiver"),rZe=o(" \u2014 "),US=a("a"),tZe=o("PerceiverTokenizer"),aZe=o(" (Perceiver model)"),nZe=l(),th=a("li"),_ee=a("strong"),sZe=o("phobert"),lZe=o(" \u2014 "),JS=a("a"),iZe=o("PhobertTokenizer"),dZe=o(" (PhoBERT model)"),cZe=l(),ah=a("li"),uee=a("strong"),fZe=o("plbart"),mZe=o(" \u2014 "),YS=a("a"),gZe=o("PLBartTokenizer"),hZe=o(" (PLBart model)"),pZe=l(),nh=a("li"),bee=a("strong"),_Ze=o("prophetnet"),uZe=o(" \u2014 "),KS=a("a"),bZe=o("ProphetNetTokenizer"),FZe=o(" (ProphetNet model)"),vZe=l(),ys=a("li"),Fee=a("strong"),TZe=o("qdqbert"),MZe=o(" \u2014 "),ZS=a("a"),EZe=o("BertTokenizer"),CZe=o(" or "),eR=a("a"),wZe=o("BertTokenizerFast"),AZe=o(" (QDQBert model)"),yZe=l(),sh=a("li"),vee=a("strong"),LZe=o("rag"),xZe=o(" \u2014 "),oR=a("a"),kZe=o("RagTokenizer"),SZe=o(" (RAG model)"),RZe=l(),Ls=a("li"),Tee=a("strong"),BZe=o("realm"),PZe=o(" \u2014 "),rR=a("a"),$Ze=o("RealmTokenizer"),IZe=o(" or "),tR=a("a"),qZe=o("RealmTokenizerFast"),NZe=o(" (Realm model)"),jZe=l(),xs=a("li"),Mee=a("strong"),DZe=o("reformer"),GZe=o(" \u2014 "),aR=a("a"),OZe=o("ReformerTokenizer"),VZe=o(" or "),nR=a("a"),XZe=o("ReformerTokenizerFast"),zZe=o(" (Reformer model)"),QZe=l(),ks=a("li"),Eee=a("strong"),WZe=o("rembert"),HZe=o(" \u2014 "),sR=a("a"),UZe=o("RemBertTokenizer"),JZe=o(" or "),lR=a("a"),YZe=o("RemBertTokenizerFast"),KZe=o(" (RemBERT model)"),ZZe=l(),Ss=a("li"),Cee=a("strong"),eeo=o("retribert"),oeo=o(" \u2014 "),iR=a("a"),reo=o("RetriBertTokenizer"),teo=o(" or "),dR=a("a"),aeo=o("RetriBertTokenizerFast"),neo=o(" (RetriBERT model)"),seo=l(),Rs=a("li"),wee=a("strong"),leo=o("roberta"),ieo=o(" \u2014 "),cR=a("a"),deo=o("RobertaTokenizer"),ceo=o(" or "),fR=a("a"),feo=o("RobertaTokenizerFast"),meo=o(" (RoBERTa model)"),geo=l(),Bs=a("li"),Aee=a("strong"),heo=o("roformer"),peo=o(" \u2014 "),mR=a("a"),_eo=o("RoFormerTokenizer"),ueo=o(" or "),gR=a("a"),beo=o("RoFormerTokenizerFast"),Feo=o(" (RoFormer model)"),veo=l(),lh=a("li"),yee=a("strong"),Teo=o("speech_to_text"),Meo=o(" \u2014 "),hR=a("a"),Eeo=o("Speech2TextTokenizer"),Ceo=o(" (Speech2Text model)"),weo=l(),ih=a("li"),Lee=a("strong"),Aeo=o("speech_to_text_2"),yeo=o(" \u2014 "),pR=a("a"),Leo=o("Speech2Text2Tokenizer"),xeo=o(" (Speech2Text2 model)"),keo=l(),Ps=a("li"),xee=a("strong"),Seo=o("splinter"),Reo=o(" \u2014 "),_R=a("a"),Beo=o("SplinterTokenizer"),Peo=o(" or "),uR=a("a"),$eo=o("SplinterTokenizerFast"),Ieo=o(" (Splinter model)"),qeo=l(),$s=a("li"),kee=a("strong"),Neo=o("squeezebert"),jeo=o(" \u2014 "),bR=a("a"),Deo=o("SqueezeBertTokenizer"),Geo=o(" or "),FR=a("a"),Oeo=o("SqueezeBertTokenizerFast"),Veo=o(" (SqueezeBERT model)"),Xeo=l(),Is=a("li"),See=a("strong"),zeo=o("t5"),Qeo=o(" \u2014 "),vR=a("a"),Weo=o("T5Tokenizer"),Heo=o(" or "),TR=a("a"),Ueo=o("T5TokenizerFast"),Jeo=o(" (T5 model)"),Yeo=l(),dh=a("li"),Ree=a("strong"),Keo=o("tapas"),Zeo=o(" \u2014 "),MR=a("a"),eoo=o("TapasTokenizer"),ooo=o(" (TAPAS model)"),roo=l(),ch=a("li"),Bee=a("strong"),too=o("tapex"),aoo=o(" \u2014 "),ER=a("a"),noo=o("TapexTokenizer"),soo=o(" (TAPEX model)"),loo=l(),fh=a("li"),Pee=a("strong"),ioo=o("transfo-xl"),doo=o(" \u2014 "),CR=a("a"),coo=o("TransfoXLTokenizer"),foo=o(" (Transformer-XL model)"),moo=l(),mh=a("li"),$ee=a("strong"),goo=o("wav2vec2"),hoo=o(" \u2014 "),wR=a("a"),poo=o("Wav2Vec2CTCTokenizer"),_oo=o(" (Wav2Vec2 model)"),uoo=l(),gh=a("li"),Iee=a("strong"),boo=o("wav2vec2_phoneme"),Foo=o(" \u2014 "),AR=a("a"),voo=o("Wav2Vec2PhonemeCTCTokenizer"),Too=o(" (Wav2Vec2Phoneme model)"),Moo=l(),qs=a("li"),qee=a("strong"),Eoo=o("xglm"),Coo=o(" \u2014 "),yR=a("a"),woo=o("XGLMTokenizer"),Aoo=o(" or "),LR=a("a"),yoo=o("XGLMTokenizerFast"),Loo=o(" (XGLM model)"),xoo=l(),hh=a("li"),Nee=a("strong"),koo=o("xlm"),Soo=o(" \u2014 "),xR=a("a"),Roo=o("XLMTokenizer"),Boo=o(" (XLM model)"),Poo=l(),ph=a("li"),jee=a("strong"),$oo=o("xlm-prophetnet"),Ioo=o(" \u2014 "),kR=a("a"),qoo=o("XLMProphetNetTokenizer"),Noo=o(" (XLMProphetNet model)"),joo=l(),Ns=a("li"),Dee=a("strong"),Doo=o("xlm-roberta"),Goo=o(" \u2014 "),SR=a("a"),Ooo=o("XLMRobertaTokenizer"),Voo=o(" or "),RR=a("a"),Xoo=o("XLMRobertaTokenizerFast"),zoo=o(" (XLM-RoBERTa model)"),Qoo=l(),js=a("li"),Gee=a("strong"),Woo=o("xlnet"),Hoo=o(" \u2014 "),BR=a("a"),Uoo=o("XLNetTokenizer"),Joo=o(" or "),PR=a("a"),Yoo=o("XLNetTokenizerFast"),Koo=o(" (XLNet model)"),Zoo=l(),Oee=a("p"),ero=o("Examples:"),oro=l(),f(OE.$$.fragment),rro=l(),_h=a("div"),f(VE.$$.fragment),tro=l(),Vee=a("p"),aro=o("Register a new tokenizer in this mapping."),xRe=l(),Hi=a("h2"),uh=a("a"),Xee=a("span"),f(XE.$$.fragment),nro=l(),zee=a("span"),sro=o("AutoFeatureExtractor"),kRe=l(),Ho=a("div"),f(zE.$$.fragment),lro=l(),QE=a("p"),iro=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),$R=a("a"),dro=o("AutoFeatureExtractor.from_pretrained()"),cro=o(" class method."),fro=l(),WE=a("p"),mro=o("This class cannot be instantiated directly using "),Qee=a("code"),gro=o("__init__()"),hro=o(" (throws an error)."),pro=l(),$e=a("div"),f(HE.$$.fragment),_ro=l(),Wee=a("p"),uro=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),bro=l(),Va=a("p"),Fro=o("The feature extractor class to instantiate is selected based on the "),Hee=a("code"),vro=o("model_type"),Tro=o(` property of the config object
(either passed as an argument or loaded from `),Uee=a("code"),Mro=o("pretrained_model_name_or_path"),Ero=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Jee=a("code"),Cro=o("pretrained_model_name_or_path"),wro=o(":"),Aro=l(),ee=a("ul"),bh=a("li"),Yee=a("strong"),yro=o("beit"),Lro=o(" \u2014 "),IR=a("a"),xro=o("BeitFeatureExtractor"),kro=o(" (BEiT model)"),Sro=l(),Fh=a("li"),Kee=a("strong"),Rro=o("clip"),Bro=o(" \u2014 "),qR=a("a"),Pro=o("CLIPFeatureExtractor"),$ro=o(" (CLIP model)"),Iro=l(),vh=a("li"),Zee=a("strong"),qro=o("convnext"),Nro=o(" \u2014 "),NR=a("a"),jro=o("ConvNextFeatureExtractor"),Dro=o(" (ConvNext model)"),Gro=l(),Th=a("li"),eoe=a("strong"),Oro=o("deit"),Vro=o(" \u2014 "),jR=a("a"),Xro=o("DeiTFeatureExtractor"),zro=o(" (DeiT model)"),Qro=l(),Mh=a("li"),ooe=a("strong"),Wro=o("detr"),Hro=o(" \u2014 "),DR=a("a"),Uro=o("DetrFeatureExtractor"),Jro=o(" (DETR model)"),Yro=l(),Eh=a("li"),roe=a("strong"),Kro=o("hubert"),Zro=o(" \u2014 "),GR=a("a"),eto=o("Wav2Vec2FeatureExtractor"),oto=o(" (Hubert model)"),rto=l(),Ch=a("li"),toe=a("strong"),tto=o("layoutlmv2"),ato=o(" \u2014 "),OR=a("a"),nto=o("LayoutLMv2FeatureExtractor"),sto=o(" (LayoutLMv2 model)"),lto=l(),wh=a("li"),aoe=a("strong"),ito=o("maskformer"),dto=o(" \u2014 "),VR=a("a"),cto=o("MaskFormerFeatureExtractor"),fto=o(" (MaskFormer model)"),mto=l(),Ah=a("li"),noe=a("strong"),gto=o("perceiver"),hto=o(" \u2014 "),XR=a("a"),pto=o("PerceiverFeatureExtractor"),_to=o(" (Perceiver model)"),uto=l(),yh=a("li"),soe=a("strong"),bto=o("poolformer"),Fto=o(" \u2014 "),zR=a("a"),vto=o("PoolFormerFeatureExtractor"),Tto=o(" (PoolFormer model)"),Mto=l(),Lh=a("li"),loe=a("strong"),Eto=o("regnet"),Cto=o(" \u2014 "),QR=a("a"),wto=o("ConvNextFeatureExtractor"),Ato=o(" (RegNet model)"),yto=l(),xh=a("li"),ioe=a("strong"),Lto=o("resnet"),xto=o(" \u2014 "),WR=a("a"),kto=o("ConvNextFeatureExtractor"),Sto=o(" (ResNet model)"),Rto=l(),kh=a("li"),doe=a("strong"),Bto=o("segformer"),Pto=o(" \u2014 "),HR=a("a"),$to=o("SegformerFeatureExtractor"),Ito=o(" (SegFormer model)"),qto=l(),Sh=a("li"),coe=a("strong"),Nto=o("speech_to_text"),jto=o(" \u2014 "),UR=a("a"),Dto=o("Speech2TextFeatureExtractor"),Gto=o(" (Speech2Text model)"),Oto=l(),Rh=a("li"),foe=a("strong"),Vto=o("swin"),Xto=o(" \u2014 "),JR=a("a"),zto=o("ViTFeatureExtractor"),Qto=o(" (Swin model)"),Wto=l(),Bh=a("li"),moe=a("strong"),Hto=o("van"),Uto=o(" \u2014 "),YR=a("a"),Jto=o("ConvNextFeatureExtractor"),Yto=o(" (VAN model)"),Kto=l(),Ph=a("li"),goe=a("strong"),Zto=o("vit"),eao=o(" \u2014 "),KR=a("a"),oao=o("ViTFeatureExtractor"),rao=o(" (ViT model)"),tao=l(),$h=a("li"),hoe=a("strong"),aao=o("vit_mae"),nao=o(" \u2014 "),ZR=a("a"),sao=o("ViTFeatureExtractor"),lao=o(" (ViTMAE model)"),iao=l(),Ih=a("li"),poe=a("strong"),dao=o("wav2vec2"),cao=o(" \u2014 "),eB=a("a"),fao=o("Wav2Vec2FeatureExtractor"),mao=o(" (Wav2Vec2 model)"),gao=l(),f(qh.$$.fragment),hao=l(),_oe=a("p"),pao=o("Examples:"),_ao=l(),f(UE.$$.fragment),uao=l(),Nh=a("div"),f(JE.$$.fragment),bao=l(),uoe=a("p"),Fao=o("Register a new feature extractor for this class."),SRe=l(),Ui=a("h2"),jh=a("a"),boe=a("span"),f(YE.$$.fragment),vao=l(),Foe=a("span"),Tao=o("AutoProcessor"),RRe=l(),Uo=a("div"),f(KE.$$.fragment),Mao=l(),ZE=a("p"),Eao=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),oB=a("a"),Cao=o("AutoProcessor.from_pretrained()"),wao=o(" class method."),Aao=l(),eC=a("p"),yao=o("This class cannot be instantiated directly using "),voe=a("code"),Lao=o("__init__()"),xao=o(" (throws an error)."),kao=l(),Ie=a("div"),f(oC.$$.fragment),Sao=l(),Toe=a("p"),Rao=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Bao=l(),Ji=a("p"),Pao=o("The processor class to instantiate is selected based on the "),Moe=a("code"),$ao=o("model_type"),Iao=o(` property of the config object (either
passed as an argument or loaded from `),Eoe=a("code"),qao=o("pretrained_model_name_or_path"),Nao=o(" if possible):"),jao=l(),ke=a("ul"),Dh=a("li"),Coe=a("strong"),Dao=o("clip"),Gao=o(" \u2014 "),rB=a("a"),Oao=o("CLIPProcessor"),Vao=o(" (CLIP model)"),Xao=l(),Gh=a("li"),woe=a("strong"),zao=o("layoutlmv2"),Qao=o(" \u2014 "),tB=a("a"),Wao=o("LayoutLMv2Processor"),Hao=o(" (LayoutLMv2 model)"),Uao=l(),Oh=a("li"),Aoe=a("strong"),Jao=o("layoutxlm"),Yao=o(" \u2014 "),aB=a("a"),Kao=o("LayoutXLMProcessor"),Zao=o(" (LayoutXLM model)"),eno=l(),Vh=a("li"),yoe=a("strong"),ono=o("speech_to_text"),rno=o(" \u2014 "),nB=a("a"),tno=o("Speech2TextProcessor"),ano=o(" (Speech2Text model)"),nno=l(),Xh=a("li"),Loe=a("strong"),sno=o("speech_to_text_2"),lno=o(" \u2014 "),sB=a("a"),ino=o("Speech2Text2Processor"),dno=o(" (Speech2Text2 model)"),cno=l(),zh=a("li"),xoe=a("strong"),fno=o("trocr"),mno=o(" \u2014 "),lB=a("a"),gno=o("TrOCRProcessor"),hno=o(" (TrOCR model)"),pno=l(),Qh=a("li"),koe=a("strong"),_no=o("vision-text-dual-encoder"),uno=o(" \u2014 "),iB=a("a"),bno=o("VisionTextDualEncoderProcessor"),Fno=o(" (VisionTextDualEncoder model)"),vno=l(),Wh=a("li"),Soe=a("strong"),Tno=o("wav2vec2"),Mno=o(" \u2014 "),dB=a("a"),Eno=o("Wav2Vec2Processor"),Cno=o(" (Wav2Vec2 model)"),wno=l(),f(Hh.$$.fragment),Ano=l(),Roe=a("p"),yno=o("Examples:"),Lno=l(),f(rC.$$.fragment),xno=l(),Uh=a("div"),f(tC.$$.fragment),kno=l(),Boe=a("p"),Sno=o("Register a new processor for this class."),BRe=l(),Yi=a("h2"),Jh=a("a"),Poe=a("span"),f(aC.$$.fragment),Rno=l(),$oe=a("span"),Bno=o("AutoModel"),PRe=l(),Jo=a("div"),f(nC.$$.fragment),Pno=l(),Ki=a("p"),$no=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),cB=a("a"),Ino=o("from_pretrained()"),qno=o(" class method or the "),fB=a("a"),Nno=o("from_config()"),jno=o(` class
method.`),Dno=l(),sC=a("p"),Gno=o("This class cannot be instantiated directly using "),Ioe=a("code"),Ono=o("__init__()"),Vno=o(" (throws an error)."),Xno=l(),Xr=a("div"),f(lC.$$.fragment),zno=l(),qoe=a("p"),Qno=o("Instantiates one of the base model classes of the library from a configuration."),Wno=l(),Zi=a("p"),Hno=o(`Note:
Loading a model from its configuration file does `),Noe=a("strong"),Uno=o("not"),Jno=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mB=a("a"),Yno=o("from_pretrained()"),Kno=o(" to load the model weights."),Zno=l(),joe=a("p"),eso=o("Examples:"),oso=l(),f(iC.$$.fragment),rso=l(),qe=a("div"),f(dC.$$.fragment),tso=l(),Doe=a("p"),aso=o("Instantiate one of the base model classes of the library from a pretrained model."),nso=l(),Xa=a("p"),sso=o("The model class to instantiate is selected based on the "),Goe=a("code"),lso=o("model_type"),iso=o(` property of the config object (either
passed as an argument or loaded from `),Ooe=a("code"),dso=o("pretrained_model_name_or_path"),cso=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Voe=a("code"),fso=o("pretrained_model_name_or_path"),mso=o(":"),gso=l(),T=a("ul"),Yh=a("li"),Xoe=a("strong"),hso=o("albert"),pso=o(" \u2014 "),gB=a("a"),_so=o("AlbertModel"),uso=o(" (ALBERT model)"),bso=l(),Kh=a("li"),zoe=a("strong"),Fso=o("bart"),vso=o(" \u2014 "),hB=a("a"),Tso=o("BartModel"),Mso=o(" (BART model)"),Eso=l(),Zh=a("li"),Qoe=a("strong"),Cso=o("beit"),wso=o(" \u2014 "),pB=a("a"),Aso=o("BeitModel"),yso=o(" (BEiT model)"),Lso=l(),ep=a("li"),Woe=a("strong"),xso=o("bert"),kso=o(" \u2014 "),_B=a("a"),Sso=o("BertModel"),Rso=o(" (BERT model)"),Bso=l(),op=a("li"),Hoe=a("strong"),Pso=o("bert-generation"),$so=o(" \u2014 "),uB=a("a"),Iso=o("BertGenerationEncoder"),qso=o(" (Bert Generation model)"),Nso=l(),rp=a("li"),Uoe=a("strong"),jso=o("big_bird"),Dso=o(" \u2014 "),bB=a("a"),Gso=o("BigBirdModel"),Oso=o(" (BigBird model)"),Vso=l(),tp=a("li"),Joe=a("strong"),Xso=o("bigbird_pegasus"),zso=o(" \u2014 "),FB=a("a"),Qso=o("BigBirdPegasusModel"),Wso=o(" (BigBirdPegasus model)"),Hso=l(),ap=a("li"),Yoe=a("strong"),Uso=o("blenderbot"),Jso=o(" \u2014 "),vB=a("a"),Yso=o("BlenderbotModel"),Kso=o(" (Blenderbot model)"),Zso=l(),np=a("li"),Koe=a("strong"),elo=o("blenderbot-small"),olo=o(" \u2014 "),TB=a("a"),rlo=o("BlenderbotSmallModel"),tlo=o(" (BlenderbotSmall model)"),alo=l(),sp=a("li"),Zoe=a("strong"),nlo=o("camembert"),slo=o(" \u2014 "),MB=a("a"),llo=o("CamembertModel"),ilo=o(" (CamemBERT model)"),dlo=l(),lp=a("li"),ere=a("strong"),clo=o("canine"),flo=o(" \u2014 "),EB=a("a"),mlo=o("CanineModel"),glo=o(" (Canine model)"),hlo=l(),ip=a("li"),ore=a("strong"),plo=o("clip"),_lo=o(" \u2014 "),CB=a("a"),ulo=o("CLIPModel"),blo=o(" (CLIP model)"),Flo=l(),dp=a("li"),rre=a("strong"),vlo=o("convbert"),Tlo=o(" \u2014 "),wB=a("a"),Mlo=o("ConvBertModel"),Elo=o(" (ConvBERT model)"),Clo=l(),cp=a("li"),tre=a("strong"),wlo=o("convnext"),Alo=o(" \u2014 "),AB=a("a"),ylo=o("ConvNextModel"),Llo=o(" (ConvNext model)"),xlo=l(),fp=a("li"),are=a("strong"),klo=o("ctrl"),Slo=o(" \u2014 "),yB=a("a"),Rlo=o("CTRLModel"),Blo=o(" (CTRL model)"),Plo=l(),mp=a("li"),nre=a("strong"),$lo=o("data2vec-audio"),Ilo=o(" \u2014 "),LB=a("a"),qlo=o("Data2VecAudioModel"),Nlo=o(" (Data2VecAudio model)"),jlo=l(),gp=a("li"),sre=a("strong"),Dlo=o("data2vec-text"),Glo=o(" \u2014 "),xB=a("a"),Olo=o("Data2VecTextModel"),Vlo=o(" (Data2VecText model)"),Xlo=l(),hp=a("li"),lre=a("strong"),zlo=o("deberta"),Qlo=o(" \u2014 "),kB=a("a"),Wlo=o("DebertaModel"),Hlo=o(" (DeBERTa model)"),Ulo=l(),pp=a("li"),ire=a("strong"),Jlo=o("deberta-v2"),Ylo=o(" \u2014 "),SB=a("a"),Klo=o("DebertaV2Model"),Zlo=o(" (DeBERTa-v2 model)"),eio=l(),_p=a("li"),dre=a("strong"),oio=o("decision_transformer"),rio=o(" \u2014 "),RB=a("a"),tio=o("DecisionTransformerModel"),aio=o(" (Decision Transformer model)"),nio=l(),up=a("li"),cre=a("strong"),sio=o("deit"),lio=o(" \u2014 "),BB=a("a"),iio=o("DeiTModel"),dio=o(" (DeiT model)"),cio=l(),bp=a("li"),fre=a("strong"),fio=o("detr"),mio=o(" \u2014 "),PB=a("a"),gio=o("DetrModel"),hio=o(" (DETR model)"),pio=l(),Fp=a("li"),mre=a("strong"),_io=o("distilbert"),uio=o(" \u2014 "),$B=a("a"),bio=o("DistilBertModel"),Fio=o(" (DistilBERT model)"),vio=l(),vp=a("li"),gre=a("strong"),Tio=o("dpr"),Mio=o(" \u2014 "),IB=a("a"),Eio=o("DPRQuestionEncoder"),Cio=o(" (DPR model)"),wio=l(),Tp=a("li"),hre=a("strong"),Aio=o("dpt"),yio=o(" \u2014 "),qB=a("a"),Lio=o("DPTModel"),xio=o(" (DPT model)"),kio=l(),Mp=a("li"),pre=a("strong"),Sio=o("electra"),Rio=o(" \u2014 "),NB=a("a"),Bio=o("ElectraModel"),Pio=o(" (ELECTRA model)"),$io=l(),Ep=a("li"),_re=a("strong"),Iio=o("flaubert"),qio=o(" \u2014 "),jB=a("a"),Nio=o("FlaubertModel"),jio=o(" (FlauBERT model)"),Dio=l(),Cp=a("li"),ure=a("strong"),Gio=o("fnet"),Oio=o(" \u2014 "),DB=a("a"),Vio=o("FNetModel"),Xio=o(" (FNet model)"),zio=l(),wp=a("li"),bre=a("strong"),Qio=o("fsmt"),Wio=o(" \u2014 "),GB=a("a"),Hio=o("FSMTModel"),Uio=o(" (FairSeq Machine-Translation model)"),Jio=l(),Ds=a("li"),Fre=a("strong"),Yio=o("funnel"),Kio=o(" \u2014 "),OB=a("a"),Zio=o("FunnelModel"),edo=o(" or "),VB=a("a"),odo=o("FunnelBaseModel"),rdo=o(" (Funnel Transformer model)"),tdo=l(),Ap=a("li"),vre=a("strong"),ado=o("glpn"),ndo=o(" \u2014 "),XB=a("a"),sdo=o("GLPNModel"),ldo=o(" (GLPN model)"),ido=l(),yp=a("li"),Tre=a("strong"),ddo=o("gpt2"),cdo=o(" \u2014 "),zB=a("a"),fdo=o("GPT2Model"),mdo=o(" (OpenAI GPT-2 model)"),gdo=l(),Lp=a("li"),Mre=a("strong"),hdo=o("gpt_neo"),pdo=o(" \u2014 "),QB=a("a"),_do=o("GPTNeoModel"),udo=o(" (GPT Neo model)"),bdo=l(),xp=a("li"),Ere=a("strong"),Fdo=o("gptj"),vdo=o(" \u2014 "),WB=a("a"),Tdo=o("GPTJModel"),Mdo=o(" (GPT-J model)"),Edo=l(),kp=a("li"),Cre=a("strong"),Cdo=o("hubert"),wdo=o(" \u2014 "),HB=a("a"),Ado=o("HubertModel"),ydo=o(" (Hubert model)"),Ldo=l(),Sp=a("li"),wre=a("strong"),xdo=o("ibert"),kdo=o(" \u2014 "),UB=a("a"),Sdo=o("IBertModel"),Rdo=o(" (I-BERT model)"),Bdo=l(),Rp=a("li"),Are=a("strong"),Pdo=o("imagegpt"),$do=o(" \u2014 "),JB=a("a"),Ido=o("ImageGPTModel"),qdo=o(" (ImageGPT model)"),Ndo=l(),Bp=a("li"),yre=a("strong"),jdo=o("layoutlm"),Ddo=o(" \u2014 "),YB=a("a"),Gdo=o("LayoutLMModel"),Odo=o(" (LayoutLM model)"),Vdo=l(),Pp=a("li"),Lre=a("strong"),Xdo=o("layoutlmv2"),zdo=o(" \u2014 "),KB=a("a"),Qdo=o("LayoutLMv2Model"),Wdo=o(" (LayoutLMv2 model)"),Hdo=l(),$p=a("li"),xre=a("strong"),Udo=o("led"),Jdo=o(" \u2014 "),ZB=a("a"),Ydo=o("LEDModel"),Kdo=o(" (LED model)"),Zdo=l(),Ip=a("li"),kre=a("strong"),eco=o("longformer"),oco=o(" \u2014 "),eP=a("a"),rco=o("LongformerModel"),tco=o(" (Longformer model)"),aco=l(),qp=a("li"),Sre=a("strong"),nco=o("luke"),sco=o(" \u2014 "),oP=a("a"),lco=o("LukeModel"),ico=o(" (LUKE model)"),dco=l(),Np=a("li"),Rre=a("strong"),cco=o("lxmert"),fco=o(" \u2014 "),rP=a("a"),mco=o("LxmertModel"),gco=o(" (LXMERT model)"),hco=l(),jp=a("li"),Bre=a("strong"),pco=o("m2m_100"),_co=o(" \u2014 "),tP=a("a"),uco=o("M2M100Model"),bco=o(" (M2M100 model)"),Fco=l(),Dp=a("li"),Pre=a("strong"),vco=o("marian"),Tco=o(" \u2014 "),aP=a("a"),Mco=o("MarianModel"),Eco=o(" (Marian model)"),Cco=l(),Gp=a("li"),$re=a("strong"),wco=o("maskformer"),Aco=o(" \u2014 "),nP=a("a"),yco=o("MaskFormerModel"),Lco=o(" (MaskFormer model)"),xco=l(),Op=a("li"),Ire=a("strong"),kco=o("mbart"),Sco=o(" \u2014 "),sP=a("a"),Rco=o("MBartModel"),Bco=o(" (mBART model)"),Pco=l(),Vp=a("li"),qre=a("strong"),$co=o("megatron-bert"),Ico=o(" \u2014 "),lP=a("a"),qco=o("MegatronBertModel"),Nco=o(" (MegatronBert model)"),jco=l(),Xp=a("li"),Nre=a("strong"),Dco=o("mobilebert"),Gco=o(" \u2014 "),iP=a("a"),Oco=o("MobileBertModel"),Vco=o(" (MobileBERT model)"),Xco=l(),zp=a("li"),jre=a("strong"),zco=o("mpnet"),Qco=o(" \u2014 "),dP=a("a"),Wco=o("MPNetModel"),Hco=o(" (MPNet model)"),Uco=l(),Qp=a("li"),Dre=a("strong"),Jco=o("mt5"),Yco=o(" \u2014 "),cP=a("a"),Kco=o("MT5Model"),Zco=o(" (mT5 model)"),efo=l(),Wp=a("li"),Gre=a("strong"),ofo=o("nystromformer"),rfo=o(" \u2014 "),fP=a("a"),tfo=o("NystromformerModel"),afo=o(" (Nystromformer model)"),nfo=l(),Hp=a("li"),Ore=a("strong"),sfo=o("openai-gpt"),lfo=o(" \u2014 "),mP=a("a"),ifo=o("OpenAIGPTModel"),dfo=o(" (OpenAI GPT model)"),cfo=l(),Up=a("li"),Vre=a("strong"),ffo=o("pegasus"),mfo=o(" \u2014 "),gP=a("a"),gfo=o("PegasusModel"),hfo=o(" (Pegasus model)"),pfo=l(),Jp=a("li"),Xre=a("strong"),_fo=o("perceiver"),ufo=o(" \u2014 "),hP=a("a"),bfo=o("PerceiverModel"),Ffo=o(" (Perceiver model)"),vfo=l(),Yp=a("li"),zre=a("strong"),Tfo=o("plbart"),Mfo=o(" \u2014 "),pP=a("a"),Efo=o("PLBartModel"),Cfo=o(" (PLBart model)"),wfo=l(),Kp=a("li"),Qre=a("strong"),Afo=o("poolformer"),yfo=o(" \u2014 "),_P=a("a"),Lfo=o("PoolFormerModel"),xfo=o(" (PoolFormer model)"),kfo=l(),Zp=a("li"),Wre=a("strong"),Sfo=o("prophetnet"),Rfo=o(" \u2014 "),uP=a("a"),Bfo=o("ProphetNetModel"),Pfo=o(" (ProphetNet model)"),$fo=l(),e_=a("li"),Hre=a("strong"),Ifo=o("qdqbert"),qfo=o(" \u2014 "),bP=a("a"),Nfo=o("QDQBertModel"),jfo=o(" (QDQBert model)"),Dfo=l(),o_=a("li"),Ure=a("strong"),Gfo=o("reformer"),Ofo=o(" \u2014 "),FP=a("a"),Vfo=o("ReformerModel"),Xfo=o(" (Reformer model)"),zfo=l(),r_=a("li"),Jre=a("strong"),Qfo=o("regnet"),Wfo=o(" \u2014 "),vP=a("a"),Hfo=o("RegNetModel"),Ufo=o(" (RegNet model)"),Jfo=l(),t_=a("li"),Yre=a("strong"),Yfo=o("rembert"),Kfo=o(" \u2014 "),TP=a("a"),Zfo=o("RemBertModel"),emo=o(" (RemBERT model)"),omo=l(),a_=a("li"),Kre=a("strong"),rmo=o("resnet"),tmo=o(" \u2014 "),MP=a("a"),amo=o("ResNetModel"),nmo=o(" (ResNet model)"),smo=l(),n_=a("li"),Zre=a("strong"),lmo=o("retribert"),imo=o(" \u2014 "),EP=a("a"),dmo=o("RetriBertModel"),cmo=o(" (RetriBERT model)"),fmo=l(),s_=a("li"),ete=a("strong"),mmo=o("roberta"),gmo=o(" \u2014 "),CP=a("a"),hmo=o("RobertaModel"),pmo=o(" (RoBERTa model)"),_mo=l(),l_=a("li"),ote=a("strong"),umo=o("roformer"),bmo=o(" \u2014 "),wP=a("a"),Fmo=o("RoFormerModel"),vmo=o(" (RoFormer model)"),Tmo=l(),i_=a("li"),rte=a("strong"),Mmo=o("segformer"),Emo=o(" \u2014 "),AP=a("a"),Cmo=o("SegformerModel"),wmo=o(" (SegFormer model)"),Amo=l(),d_=a("li"),tte=a("strong"),ymo=o("sew"),Lmo=o(" \u2014 "),yP=a("a"),xmo=o("SEWModel"),kmo=o(" (SEW model)"),Smo=l(),c_=a("li"),ate=a("strong"),Rmo=o("sew-d"),Bmo=o(" \u2014 "),LP=a("a"),Pmo=o("SEWDModel"),$mo=o(" (SEW-D model)"),Imo=l(),f_=a("li"),nte=a("strong"),qmo=o("speech_to_text"),Nmo=o(" \u2014 "),xP=a("a"),jmo=o("Speech2TextModel"),Dmo=o(" (Speech2Text model)"),Gmo=l(),m_=a("li"),ste=a("strong"),Omo=o("splinter"),Vmo=o(" \u2014 "),kP=a("a"),Xmo=o("SplinterModel"),zmo=o(" (Splinter model)"),Qmo=l(),g_=a("li"),lte=a("strong"),Wmo=o("squeezebert"),Hmo=o(" \u2014 "),SP=a("a"),Umo=o("SqueezeBertModel"),Jmo=o(" (SqueezeBERT model)"),Ymo=l(),h_=a("li"),ite=a("strong"),Kmo=o("swin"),Zmo=o(" \u2014 "),RP=a("a"),ego=o("SwinModel"),ogo=o(" (Swin model)"),rgo=l(),p_=a("li"),dte=a("strong"),tgo=o("t5"),ago=o(" \u2014 "),BP=a("a"),ngo=o("T5Model"),sgo=o(" (T5 model)"),lgo=l(),__=a("li"),cte=a("strong"),igo=o("tapas"),dgo=o(" \u2014 "),PP=a("a"),cgo=o("TapasModel"),fgo=o(" (TAPAS model)"),mgo=l(),u_=a("li"),fte=a("strong"),ggo=o("transfo-xl"),hgo=o(" \u2014 "),$P=a("a"),pgo=o("TransfoXLModel"),_go=o(" (Transformer-XL model)"),ugo=l(),b_=a("li"),mte=a("strong"),bgo=o("unispeech"),Fgo=o(" \u2014 "),IP=a("a"),vgo=o("UniSpeechModel"),Tgo=o(" (UniSpeech model)"),Mgo=l(),F_=a("li"),gte=a("strong"),Ego=o("unispeech-sat"),Cgo=o(" \u2014 "),qP=a("a"),wgo=o("UniSpeechSatModel"),Ago=o(" (UniSpeechSat model)"),ygo=l(),v_=a("li"),hte=a("strong"),Lgo=o("van"),xgo=o(" \u2014 "),NP=a("a"),kgo=o("VanModel"),Sgo=o(" (VAN model)"),Rgo=l(),T_=a("li"),pte=a("strong"),Bgo=o("vilt"),Pgo=o(" \u2014 "),jP=a("a"),$go=o("ViltModel"),Igo=o(" (ViLT model)"),qgo=l(),M_=a("li"),_te=a("strong"),Ngo=o("vision-text-dual-encoder"),jgo=o(" \u2014 "),DP=a("a"),Dgo=o("VisionTextDualEncoderModel"),Ggo=o(" (VisionTextDualEncoder model)"),Ogo=l(),E_=a("li"),ute=a("strong"),Vgo=o("visual_bert"),Xgo=o(" \u2014 "),GP=a("a"),zgo=o("VisualBertModel"),Qgo=o(" (VisualBert model)"),Wgo=l(),C_=a("li"),bte=a("strong"),Hgo=o("vit"),Ugo=o(" \u2014 "),OP=a("a"),Jgo=o("ViTModel"),Ygo=o(" (ViT model)"),Kgo=l(),w_=a("li"),Fte=a("strong"),Zgo=o("vit_mae"),eho=o(" \u2014 "),VP=a("a"),oho=o("ViTMAEModel"),rho=o(" (ViTMAE model)"),tho=l(),A_=a("li"),vte=a("strong"),aho=o("wav2vec2"),nho=o(" \u2014 "),XP=a("a"),sho=o("Wav2Vec2Model"),lho=o(" (Wav2Vec2 model)"),iho=l(),y_=a("li"),Tte=a("strong"),dho=o("wavlm"),cho=o(" \u2014 "),zP=a("a"),fho=o("WavLMModel"),mho=o(" (WavLM model)"),gho=l(),L_=a("li"),Mte=a("strong"),hho=o("xglm"),pho=o(" \u2014 "),QP=a("a"),_ho=o("XGLMModel"),uho=o(" (XGLM model)"),bho=l(),x_=a("li"),Ete=a("strong"),Fho=o("xlm"),vho=o(" \u2014 "),WP=a("a"),Tho=o("XLMModel"),Mho=o(" (XLM model)"),Eho=l(),k_=a("li"),Cte=a("strong"),Cho=o("xlm-prophetnet"),who=o(" \u2014 "),HP=a("a"),Aho=o("XLMProphetNetModel"),yho=o(" (XLMProphetNet model)"),Lho=l(),S_=a("li"),wte=a("strong"),xho=o("xlm-roberta"),kho=o(" \u2014 "),UP=a("a"),Sho=o("XLMRobertaModel"),Rho=o(" (XLM-RoBERTa model)"),Bho=l(),R_=a("li"),Ate=a("strong"),Pho=o("xlm-roberta-xl"),$ho=o(" \u2014 "),JP=a("a"),Iho=o("XLMRobertaXLModel"),qho=o(" (XLM-RoBERTa-XL model)"),Nho=l(),B_=a("li"),yte=a("strong"),jho=o("xlnet"),Dho=o(" \u2014 "),YP=a("a"),Gho=o("XLNetModel"),Oho=o(" (XLNet model)"),Vho=l(),P_=a("li"),Lte=a("strong"),Xho=o("yoso"),zho=o(" \u2014 "),KP=a("a"),Qho=o("YosoModel"),Who=o(" (YOSO model)"),Hho=l(),$_=a("p"),Uho=o("The model is set in evaluation mode by default using "),xte=a("code"),Jho=o("model.eval()"),Yho=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kte=a("code"),Kho=o("model.train()"),Zho=l(),Ste=a("p"),epo=o("Examples:"),opo=l(),f(cC.$$.fragment),$Re=l(),ed=a("h2"),I_=a("a"),Rte=a("span"),f(fC.$$.fragment),rpo=l(),Bte=a("span"),tpo=o("AutoModelForPreTraining"),IRe=l(),Yo=a("div"),f(mC.$$.fragment),apo=l(),od=a("p"),npo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),ZP=a("a"),spo=o("from_pretrained()"),lpo=o(" class method or the "),e$=a("a"),ipo=o("from_config()"),dpo=o(` class
method.`),cpo=l(),gC=a("p"),fpo=o("This class cannot be instantiated directly using "),Pte=a("code"),mpo=o("__init__()"),gpo=o(" (throws an error)."),hpo=l(),zr=a("div"),f(hC.$$.fragment),ppo=l(),$te=a("p"),_po=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),upo=l(),rd=a("p"),bpo=o(`Note:
Loading a model from its configuration file does `),Ite=a("strong"),Fpo=o("not"),vpo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),o$=a("a"),Tpo=o("from_pretrained()"),Mpo=o(" to load the model weights."),Epo=l(),qte=a("p"),Cpo=o("Examples:"),wpo=l(),f(pC.$$.fragment),Apo=l(),Ne=a("div"),f(_C.$$.fragment),ypo=l(),Nte=a("p"),Lpo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),xpo=l(),za=a("p"),kpo=o("The model class to instantiate is selected based on the "),jte=a("code"),Spo=o("model_type"),Rpo=o(` property of the config object (either
passed as an argument or loaded from `),Dte=a("code"),Bpo=o("pretrained_model_name_or_path"),Ppo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gte=a("code"),$po=o("pretrained_model_name_or_path"),Ipo=o(":"),qpo=l(),S=a("ul"),q_=a("li"),Ote=a("strong"),Npo=o("albert"),jpo=o(" \u2014 "),r$=a("a"),Dpo=o("AlbertForPreTraining"),Gpo=o(" (ALBERT model)"),Opo=l(),N_=a("li"),Vte=a("strong"),Vpo=o("bart"),Xpo=o(" \u2014 "),t$=a("a"),zpo=o("BartForConditionalGeneration"),Qpo=o(" (BART model)"),Wpo=l(),j_=a("li"),Xte=a("strong"),Hpo=o("bert"),Upo=o(" \u2014 "),a$=a("a"),Jpo=o("BertForPreTraining"),Ypo=o(" (BERT model)"),Kpo=l(),D_=a("li"),zte=a("strong"),Zpo=o("big_bird"),e_o=o(" \u2014 "),n$=a("a"),o_o=o("BigBirdForPreTraining"),r_o=o(" (BigBird model)"),t_o=l(),G_=a("li"),Qte=a("strong"),a_o=o("camembert"),n_o=o(" \u2014 "),s$=a("a"),s_o=o("CamembertForMaskedLM"),l_o=o(" (CamemBERT model)"),i_o=l(),O_=a("li"),Wte=a("strong"),d_o=o("ctrl"),c_o=o(" \u2014 "),l$=a("a"),f_o=o("CTRLLMHeadModel"),m_o=o(" (CTRL model)"),g_o=l(),V_=a("li"),Hte=a("strong"),h_o=o("data2vec-text"),p_o=o(" \u2014 "),i$=a("a"),__o=o("Data2VecTextForMaskedLM"),u_o=o(" (Data2VecText model)"),b_o=l(),X_=a("li"),Ute=a("strong"),F_o=o("deberta"),v_o=o(" \u2014 "),d$=a("a"),T_o=o("DebertaForMaskedLM"),M_o=o(" (DeBERTa model)"),E_o=l(),z_=a("li"),Jte=a("strong"),C_o=o("deberta-v2"),w_o=o(" \u2014 "),c$=a("a"),A_o=o("DebertaV2ForMaskedLM"),y_o=o(" (DeBERTa-v2 model)"),L_o=l(),Q_=a("li"),Yte=a("strong"),x_o=o("distilbert"),k_o=o(" \u2014 "),f$=a("a"),S_o=o("DistilBertForMaskedLM"),R_o=o(" (DistilBERT model)"),B_o=l(),W_=a("li"),Kte=a("strong"),P_o=o("electra"),$_o=o(" \u2014 "),m$=a("a"),I_o=o("ElectraForPreTraining"),q_o=o(" (ELECTRA model)"),N_o=l(),H_=a("li"),Zte=a("strong"),j_o=o("flaubert"),D_o=o(" \u2014 "),g$=a("a"),G_o=o("FlaubertWithLMHeadModel"),O_o=o(" (FlauBERT model)"),V_o=l(),U_=a("li"),eae=a("strong"),X_o=o("fnet"),z_o=o(" \u2014 "),h$=a("a"),Q_o=o("FNetForPreTraining"),W_o=o(" (FNet model)"),H_o=l(),J_=a("li"),oae=a("strong"),U_o=o("fsmt"),J_o=o(" \u2014 "),p$=a("a"),Y_o=o("FSMTForConditionalGeneration"),K_o=o(" (FairSeq Machine-Translation model)"),Z_o=l(),Y_=a("li"),rae=a("strong"),euo=o("funnel"),ouo=o(" \u2014 "),_$=a("a"),ruo=o("FunnelForPreTraining"),tuo=o(" (Funnel Transformer model)"),auo=l(),K_=a("li"),tae=a("strong"),nuo=o("gpt2"),suo=o(" \u2014 "),u$=a("a"),luo=o("GPT2LMHeadModel"),iuo=o(" (OpenAI GPT-2 model)"),duo=l(),Z_=a("li"),aae=a("strong"),cuo=o("ibert"),fuo=o(" \u2014 "),b$=a("a"),muo=o("IBertForMaskedLM"),guo=o(" (I-BERT model)"),huo=l(),eu=a("li"),nae=a("strong"),puo=o("layoutlm"),_uo=o(" \u2014 "),F$=a("a"),uuo=o("LayoutLMForMaskedLM"),buo=o(" (LayoutLM model)"),Fuo=l(),ou=a("li"),sae=a("strong"),vuo=o("longformer"),Tuo=o(" \u2014 "),v$=a("a"),Muo=o("LongformerForMaskedLM"),Euo=o(" (Longformer model)"),Cuo=l(),ru=a("li"),lae=a("strong"),wuo=o("lxmert"),Auo=o(" \u2014 "),T$=a("a"),yuo=o("LxmertForPreTraining"),Luo=o(" (LXMERT model)"),xuo=l(),tu=a("li"),iae=a("strong"),kuo=o("megatron-bert"),Suo=o(" \u2014 "),M$=a("a"),Ruo=o("MegatronBertForPreTraining"),Buo=o(" (MegatronBert model)"),Puo=l(),au=a("li"),dae=a("strong"),$uo=o("mobilebert"),Iuo=o(" \u2014 "),E$=a("a"),quo=o("MobileBertForPreTraining"),Nuo=o(" (MobileBERT model)"),juo=l(),nu=a("li"),cae=a("strong"),Duo=o("mpnet"),Guo=o(" \u2014 "),C$=a("a"),Ouo=o("MPNetForMaskedLM"),Vuo=o(" (MPNet model)"),Xuo=l(),su=a("li"),fae=a("strong"),zuo=o("openai-gpt"),Quo=o(" \u2014 "),w$=a("a"),Wuo=o("OpenAIGPTLMHeadModel"),Huo=o(" (OpenAI GPT model)"),Uuo=l(),lu=a("li"),mae=a("strong"),Juo=o("retribert"),Yuo=o(" \u2014 "),A$=a("a"),Kuo=o("RetriBertModel"),Zuo=o(" (RetriBERT model)"),e1o=l(),iu=a("li"),gae=a("strong"),o1o=o("roberta"),r1o=o(" \u2014 "),y$=a("a"),t1o=o("RobertaForMaskedLM"),a1o=o(" (RoBERTa model)"),n1o=l(),du=a("li"),hae=a("strong"),s1o=o("squeezebert"),l1o=o(" \u2014 "),L$=a("a"),i1o=o("SqueezeBertForMaskedLM"),d1o=o(" (SqueezeBERT model)"),c1o=l(),cu=a("li"),pae=a("strong"),f1o=o("t5"),m1o=o(" \u2014 "),x$=a("a"),g1o=o("T5ForConditionalGeneration"),h1o=o(" (T5 model)"),p1o=l(),fu=a("li"),_ae=a("strong"),_1o=o("tapas"),u1o=o(" \u2014 "),k$=a("a"),b1o=o("TapasForMaskedLM"),F1o=o(" (TAPAS model)"),v1o=l(),mu=a("li"),uae=a("strong"),T1o=o("transfo-xl"),M1o=o(" \u2014 "),S$=a("a"),E1o=o("TransfoXLLMHeadModel"),C1o=o(" (Transformer-XL model)"),w1o=l(),gu=a("li"),bae=a("strong"),A1o=o("unispeech"),y1o=o(" \u2014 "),R$=a("a"),L1o=o("UniSpeechForPreTraining"),x1o=o(" (UniSpeech model)"),k1o=l(),hu=a("li"),Fae=a("strong"),S1o=o("unispeech-sat"),R1o=o(" \u2014 "),B$=a("a"),B1o=o("UniSpeechSatForPreTraining"),P1o=o(" (UniSpeechSat model)"),$1o=l(),pu=a("li"),vae=a("strong"),I1o=o("visual_bert"),q1o=o(" \u2014 "),P$=a("a"),N1o=o("VisualBertForPreTraining"),j1o=o(" (VisualBert model)"),D1o=l(),_u=a("li"),Tae=a("strong"),G1o=o("vit_mae"),O1o=o(" \u2014 "),$$=a("a"),V1o=o("ViTMAEForPreTraining"),X1o=o(" (ViTMAE model)"),z1o=l(),uu=a("li"),Mae=a("strong"),Q1o=o("wav2vec2"),W1o=o(" \u2014 "),I$=a("a"),H1o=o("Wav2Vec2ForPreTraining"),U1o=o(" (Wav2Vec2 model)"),J1o=l(),bu=a("li"),Eae=a("strong"),Y1o=o("xlm"),K1o=o(" \u2014 "),q$=a("a"),Z1o=o("XLMWithLMHeadModel"),ebo=o(" (XLM model)"),obo=l(),Fu=a("li"),Cae=a("strong"),rbo=o("xlm-roberta"),tbo=o(" \u2014 "),N$=a("a"),abo=o("XLMRobertaForMaskedLM"),nbo=o(" (XLM-RoBERTa model)"),sbo=l(),vu=a("li"),wae=a("strong"),lbo=o("xlm-roberta-xl"),ibo=o(" \u2014 "),j$=a("a"),dbo=o("XLMRobertaXLForMaskedLM"),cbo=o(" (XLM-RoBERTa-XL model)"),fbo=l(),Tu=a("li"),Aae=a("strong"),mbo=o("xlnet"),gbo=o(" \u2014 "),D$=a("a"),hbo=o("XLNetLMHeadModel"),pbo=o(" (XLNet model)"),_bo=l(),Mu=a("p"),ubo=o("The model is set in evaluation mode by default using "),yae=a("code"),bbo=o("model.eval()"),Fbo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lae=a("code"),vbo=o("model.train()"),Tbo=l(),xae=a("p"),Mbo=o("Examples:"),Ebo=l(),f(uC.$$.fragment),qRe=l(),td=a("h2"),Eu=a("a"),kae=a("span"),f(bC.$$.fragment),Cbo=l(),Sae=a("span"),wbo=o("AutoModelForCausalLM"),NRe=l(),Ko=a("div"),f(FC.$$.fragment),Abo=l(),ad=a("p"),ybo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),G$=a("a"),Lbo=o("from_pretrained()"),xbo=o(" class method or the "),O$=a("a"),kbo=o("from_config()"),Sbo=o(` class
method.`),Rbo=l(),vC=a("p"),Bbo=o("This class cannot be instantiated directly using "),Rae=a("code"),Pbo=o("__init__()"),$bo=o(" (throws an error)."),Ibo=l(),Qr=a("div"),f(TC.$$.fragment),qbo=l(),Bae=a("p"),Nbo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),jbo=l(),nd=a("p"),Dbo=o(`Note:
Loading a model from its configuration file does `),Pae=a("strong"),Gbo=o("not"),Obo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),V$=a("a"),Vbo=o("from_pretrained()"),Xbo=o(" to load the model weights."),zbo=l(),$ae=a("p"),Qbo=o("Examples:"),Wbo=l(),f(MC.$$.fragment),Hbo=l(),je=a("div"),f(EC.$$.fragment),Ubo=l(),Iae=a("p"),Jbo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Ybo=l(),Qa=a("p"),Kbo=o("The model class to instantiate is selected based on the "),qae=a("code"),Zbo=o("model_type"),e2o=o(` property of the config object (either
passed as an argument or loaded from `),Nae=a("code"),o2o=o("pretrained_model_name_or_path"),r2o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jae=a("code"),t2o=o("pretrained_model_name_or_path"),a2o=o(":"),n2o=l(),$=a("ul"),Cu=a("li"),Dae=a("strong"),s2o=o("bart"),l2o=o(" \u2014 "),X$=a("a"),i2o=o("BartForCausalLM"),d2o=o(" (BART model)"),c2o=l(),wu=a("li"),Gae=a("strong"),f2o=o("bert"),m2o=o(" \u2014 "),z$=a("a"),g2o=o("BertLMHeadModel"),h2o=o(" (BERT model)"),p2o=l(),Au=a("li"),Oae=a("strong"),_2o=o("bert-generation"),u2o=o(" \u2014 "),Q$=a("a"),b2o=o("BertGenerationDecoder"),F2o=o(" (Bert Generation model)"),v2o=l(),yu=a("li"),Vae=a("strong"),T2o=o("big_bird"),M2o=o(" \u2014 "),W$=a("a"),E2o=o("BigBirdForCausalLM"),C2o=o(" (BigBird model)"),w2o=l(),Lu=a("li"),Xae=a("strong"),A2o=o("bigbird_pegasus"),y2o=o(" \u2014 "),H$=a("a"),L2o=o("BigBirdPegasusForCausalLM"),x2o=o(" (BigBirdPegasus model)"),k2o=l(),xu=a("li"),zae=a("strong"),S2o=o("blenderbot"),R2o=o(" \u2014 "),U$=a("a"),B2o=o("BlenderbotForCausalLM"),P2o=o(" (Blenderbot model)"),$2o=l(),ku=a("li"),Qae=a("strong"),I2o=o("blenderbot-small"),q2o=o(" \u2014 "),J$=a("a"),N2o=o("BlenderbotSmallForCausalLM"),j2o=o(" (BlenderbotSmall model)"),D2o=l(),Su=a("li"),Wae=a("strong"),G2o=o("camembert"),O2o=o(" \u2014 "),Y$=a("a"),V2o=o("CamembertForCausalLM"),X2o=o(" (CamemBERT model)"),z2o=l(),Ru=a("li"),Hae=a("strong"),Q2o=o("ctrl"),W2o=o(" \u2014 "),K$=a("a"),H2o=o("CTRLLMHeadModel"),U2o=o(" (CTRL model)"),J2o=l(),Bu=a("li"),Uae=a("strong"),Y2o=o("data2vec-text"),K2o=o(" \u2014 "),Z$=a("a"),Z2o=o("Data2VecTextForCausalLM"),eFo=o(" (Data2VecText model)"),oFo=l(),Pu=a("li"),Jae=a("strong"),rFo=o("electra"),tFo=o(" \u2014 "),eI=a("a"),aFo=o("ElectraForCausalLM"),nFo=o(" (ELECTRA model)"),sFo=l(),$u=a("li"),Yae=a("strong"),lFo=o("gpt2"),iFo=o(" \u2014 "),oI=a("a"),dFo=o("GPT2LMHeadModel"),cFo=o(" (OpenAI GPT-2 model)"),fFo=l(),Iu=a("li"),Kae=a("strong"),mFo=o("gpt_neo"),gFo=o(" \u2014 "),rI=a("a"),hFo=o("GPTNeoForCausalLM"),pFo=o(" (GPT Neo model)"),_Fo=l(),qu=a("li"),Zae=a("strong"),uFo=o("gptj"),bFo=o(" \u2014 "),tI=a("a"),FFo=o("GPTJForCausalLM"),vFo=o(" (GPT-J model)"),TFo=l(),Nu=a("li"),ene=a("strong"),MFo=o("marian"),EFo=o(" \u2014 "),aI=a("a"),CFo=o("MarianForCausalLM"),wFo=o(" (Marian model)"),AFo=l(),ju=a("li"),one=a("strong"),yFo=o("mbart"),LFo=o(" \u2014 "),nI=a("a"),xFo=o("MBartForCausalLM"),kFo=o(" (mBART model)"),SFo=l(),Du=a("li"),rne=a("strong"),RFo=o("megatron-bert"),BFo=o(" \u2014 "),sI=a("a"),PFo=o("MegatronBertForCausalLM"),$Fo=o(" (MegatronBert model)"),IFo=l(),Gu=a("li"),tne=a("strong"),qFo=o("openai-gpt"),NFo=o(" \u2014 "),lI=a("a"),jFo=o("OpenAIGPTLMHeadModel"),DFo=o(" (OpenAI GPT model)"),GFo=l(),Ou=a("li"),ane=a("strong"),OFo=o("pegasus"),VFo=o(" \u2014 "),iI=a("a"),XFo=o("PegasusForCausalLM"),zFo=o(" (Pegasus model)"),QFo=l(),Vu=a("li"),nne=a("strong"),WFo=o("plbart"),HFo=o(" \u2014 "),dI=a("a"),UFo=o("PLBartForCausalLM"),JFo=o(" (PLBart model)"),YFo=l(),Xu=a("li"),sne=a("strong"),KFo=o("prophetnet"),ZFo=o(" \u2014 "),cI=a("a"),evo=o("ProphetNetForCausalLM"),ovo=o(" (ProphetNet model)"),rvo=l(),zu=a("li"),lne=a("strong"),tvo=o("qdqbert"),avo=o(" \u2014 "),fI=a("a"),nvo=o("QDQBertLMHeadModel"),svo=o(" (QDQBert model)"),lvo=l(),Qu=a("li"),ine=a("strong"),ivo=o("reformer"),dvo=o(" \u2014 "),mI=a("a"),cvo=o("ReformerModelWithLMHead"),fvo=o(" (Reformer model)"),mvo=l(),Wu=a("li"),dne=a("strong"),gvo=o("rembert"),hvo=o(" \u2014 "),gI=a("a"),pvo=o("RemBertForCausalLM"),_vo=o(" (RemBERT model)"),uvo=l(),Hu=a("li"),cne=a("strong"),bvo=o("roberta"),Fvo=o(" \u2014 "),hI=a("a"),vvo=o("RobertaForCausalLM"),Tvo=o(" (RoBERTa model)"),Mvo=l(),Uu=a("li"),fne=a("strong"),Evo=o("roformer"),Cvo=o(" \u2014 "),pI=a("a"),wvo=o("RoFormerForCausalLM"),Avo=o(" (RoFormer model)"),yvo=l(),Ju=a("li"),mne=a("strong"),Lvo=o("speech_to_text_2"),xvo=o(" \u2014 "),_I=a("a"),kvo=o("Speech2Text2ForCausalLM"),Svo=o(" (Speech2Text2 model)"),Rvo=l(),Yu=a("li"),gne=a("strong"),Bvo=o("transfo-xl"),Pvo=o(" \u2014 "),uI=a("a"),$vo=o("TransfoXLLMHeadModel"),Ivo=o(" (Transformer-XL model)"),qvo=l(),Ku=a("li"),hne=a("strong"),Nvo=o("trocr"),jvo=o(" \u2014 "),bI=a("a"),Dvo=o("TrOCRForCausalLM"),Gvo=o(" (TrOCR model)"),Ovo=l(),Zu=a("li"),pne=a("strong"),Vvo=o("xglm"),Xvo=o(" \u2014 "),FI=a("a"),zvo=o("XGLMForCausalLM"),Qvo=o(" (XGLM model)"),Wvo=l(),e1=a("li"),_ne=a("strong"),Hvo=o("xlm"),Uvo=o(" \u2014 "),vI=a("a"),Jvo=o("XLMWithLMHeadModel"),Yvo=o(" (XLM model)"),Kvo=l(),o1=a("li"),une=a("strong"),Zvo=o("xlm-prophetnet"),e6o=o(" \u2014 "),TI=a("a"),o6o=o("XLMProphetNetForCausalLM"),r6o=o(" (XLMProphetNet model)"),t6o=l(),r1=a("li"),bne=a("strong"),a6o=o("xlm-roberta"),n6o=o(" \u2014 "),MI=a("a"),s6o=o("XLMRobertaForCausalLM"),l6o=o(" (XLM-RoBERTa model)"),i6o=l(),t1=a("li"),Fne=a("strong"),d6o=o("xlm-roberta-xl"),c6o=o(" \u2014 "),EI=a("a"),f6o=o("XLMRobertaXLForCausalLM"),m6o=o(" (XLM-RoBERTa-XL model)"),g6o=l(),a1=a("li"),vne=a("strong"),h6o=o("xlnet"),p6o=o(" \u2014 "),CI=a("a"),_6o=o("XLNetLMHeadModel"),u6o=o(" (XLNet model)"),b6o=l(),n1=a("p"),F6o=o("The model is set in evaluation mode by default using "),Tne=a("code"),v6o=o("model.eval()"),T6o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mne=a("code"),M6o=o("model.train()"),E6o=l(),Ene=a("p"),C6o=o("Examples:"),w6o=l(),f(CC.$$.fragment),jRe=l(),sd=a("h2"),s1=a("a"),Cne=a("span"),f(wC.$$.fragment),A6o=l(),wne=a("span"),y6o=o("AutoModelForMaskedLM"),DRe=l(),Zo=a("div"),f(AC.$$.fragment),L6o=l(),ld=a("p"),x6o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),wI=a("a"),k6o=o("from_pretrained()"),S6o=o(" class method or the "),AI=a("a"),R6o=o("from_config()"),B6o=o(` class
method.`),P6o=l(),yC=a("p"),$6o=o("This class cannot be instantiated directly using "),Ane=a("code"),I6o=o("__init__()"),q6o=o(" (throws an error)."),N6o=l(),Wr=a("div"),f(LC.$$.fragment),j6o=l(),yne=a("p"),D6o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),G6o=l(),id=a("p"),O6o=o(`Note:
Loading a model from its configuration file does `),Lne=a("strong"),V6o=o("not"),X6o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yI=a("a"),z6o=o("from_pretrained()"),Q6o=o(" to load the model weights."),W6o=l(),xne=a("p"),H6o=o("Examples:"),U6o=l(),f(xC.$$.fragment),J6o=l(),De=a("div"),f(kC.$$.fragment),Y6o=l(),kne=a("p"),K6o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Z6o=l(),Wa=a("p"),e0o=o("The model class to instantiate is selected based on the "),Sne=a("code"),o0o=o("model_type"),r0o=o(` property of the config object (either
passed as an argument or loaded from `),Rne=a("code"),t0o=o("pretrained_model_name_or_path"),a0o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bne=a("code"),n0o=o("pretrained_model_name_or_path"),s0o=o(":"),l0o=l(),I=a("ul"),l1=a("li"),Pne=a("strong"),i0o=o("albert"),d0o=o(" \u2014 "),LI=a("a"),c0o=o("AlbertForMaskedLM"),f0o=o(" (ALBERT model)"),m0o=l(),i1=a("li"),$ne=a("strong"),g0o=o("bart"),h0o=o(" \u2014 "),xI=a("a"),p0o=o("BartForConditionalGeneration"),_0o=o(" (BART model)"),u0o=l(),d1=a("li"),Ine=a("strong"),b0o=o("bert"),F0o=o(" \u2014 "),kI=a("a"),v0o=o("BertForMaskedLM"),T0o=o(" (BERT model)"),M0o=l(),c1=a("li"),qne=a("strong"),E0o=o("big_bird"),C0o=o(" \u2014 "),SI=a("a"),w0o=o("BigBirdForMaskedLM"),A0o=o(" (BigBird model)"),y0o=l(),f1=a("li"),Nne=a("strong"),L0o=o("camembert"),x0o=o(" \u2014 "),RI=a("a"),k0o=o("CamembertForMaskedLM"),S0o=o(" (CamemBERT model)"),R0o=l(),m1=a("li"),jne=a("strong"),B0o=o("convbert"),P0o=o(" \u2014 "),BI=a("a"),$0o=o("ConvBertForMaskedLM"),I0o=o(" (ConvBERT model)"),q0o=l(),g1=a("li"),Dne=a("strong"),N0o=o("data2vec-text"),j0o=o(" \u2014 "),PI=a("a"),D0o=o("Data2VecTextForMaskedLM"),G0o=o(" (Data2VecText model)"),O0o=l(),h1=a("li"),Gne=a("strong"),V0o=o("deberta"),X0o=o(" \u2014 "),$I=a("a"),z0o=o("DebertaForMaskedLM"),Q0o=o(" (DeBERTa model)"),W0o=l(),p1=a("li"),One=a("strong"),H0o=o("deberta-v2"),U0o=o(" \u2014 "),II=a("a"),J0o=o("DebertaV2ForMaskedLM"),Y0o=o(" (DeBERTa-v2 model)"),K0o=l(),_1=a("li"),Vne=a("strong"),Z0o=o("distilbert"),eTo=o(" \u2014 "),qI=a("a"),oTo=o("DistilBertForMaskedLM"),rTo=o(" (DistilBERT model)"),tTo=l(),u1=a("li"),Xne=a("strong"),aTo=o("electra"),nTo=o(" \u2014 "),NI=a("a"),sTo=o("ElectraForMaskedLM"),lTo=o(" (ELECTRA model)"),iTo=l(),b1=a("li"),zne=a("strong"),dTo=o("flaubert"),cTo=o(" \u2014 "),jI=a("a"),fTo=o("FlaubertWithLMHeadModel"),mTo=o(" (FlauBERT model)"),gTo=l(),F1=a("li"),Qne=a("strong"),hTo=o("fnet"),pTo=o(" \u2014 "),DI=a("a"),_To=o("FNetForMaskedLM"),uTo=o(" (FNet model)"),bTo=l(),v1=a("li"),Wne=a("strong"),FTo=o("funnel"),vTo=o(" \u2014 "),GI=a("a"),TTo=o("FunnelForMaskedLM"),MTo=o(" (Funnel Transformer model)"),ETo=l(),T1=a("li"),Hne=a("strong"),CTo=o("ibert"),wTo=o(" \u2014 "),OI=a("a"),ATo=o("IBertForMaskedLM"),yTo=o(" (I-BERT model)"),LTo=l(),M1=a("li"),Une=a("strong"),xTo=o("layoutlm"),kTo=o(" \u2014 "),VI=a("a"),STo=o("LayoutLMForMaskedLM"),RTo=o(" (LayoutLM model)"),BTo=l(),E1=a("li"),Jne=a("strong"),PTo=o("longformer"),$To=o(" \u2014 "),XI=a("a"),ITo=o("LongformerForMaskedLM"),qTo=o(" (Longformer model)"),NTo=l(),C1=a("li"),Yne=a("strong"),jTo=o("mbart"),DTo=o(" \u2014 "),zI=a("a"),GTo=o("MBartForConditionalGeneration"),OTo=o(" (mBART model)"),VTo=l(),w1=a("li"),Kne=a("strong"),XTo=o("megatron-bert"),zTo=o(" \u2014 "),QI=a("a"),QTo=o("MegatronBertForMaskedLM"),WTo=o(" (MegatronBert model)"),HTo=l(),A1=a("li"),Zne=a("strong"),UTo=o("mobilebert"),JTo=o(" \u2014 "),WI=a("a"),YTo=o("MobileBertForMaskedLM"),KTo=o(" (MobileBERT model)"),ZTo=l(),y1=a("li"),ese=a("strong"),e8o=o("mpnet"),o8o=o(" \u2014 "),HI=a("a"),r8o=o("MPNetForMaskedLM"),t8o=o(" (MPNet model)"),a8o=l(),L1=a("li"),ose=a("strong"),n8o=o("nystromformer"),s8o=o(" \u2014 "),UI=a("a"),l8o=o("NystromformerForMaskedLM"),i8o=o(" (Nystromformer model)"),d8o=l(),x1=a("li"),rse=a("strong"),c8o=o("perceiver"),f8o=o(" \u2014 "),JI=a("a"),m8o=o("PerceiverForMaskedLM"),g8o=o(" (Perceiver model)"),h8o=l(),k1=a("li"),tse=a("strong"),p8o=o("qdqbert"),_8o=o(" \u2014 "),YI=a("a"),u8o=o("QDQBertForMaskedLM"),b8o=o(" (QDQBert model)"),F8o=l(),S1=a("li"),ase=a("strong"),v8o=o("reformer"),T8o=o(" \u2014 "),KI=a("a"),M8o=o("ReformerForMaskedLM"),E8o=o(" (Reformer model)"),C8o=l(),R1=a("li"),nse=a("strong"),w8o=o("rembert"),A8o=o(" \u2014 "),ZI=a("a"),y8o=o("RemBertForMaskedLM"),L8o=o(" (RemBERT model)"),x8o=l(),B1=a("li"),sse=a("strong"),k8o=o("roberta"),S8o=o(" \u2014 "),eq=a("a"),R8o=o("RobertaForMaskedLM"),B8o=o(" (RoBERTa model)"),P8o=l(),P1=a("li"),lse=a("strong"),$8o=o("roformer"),I8o=o(" \u2014 "),oq=a("a"),q8o=o("RoFormerForMaskedLM"),N8o=o(" (RoFormer model)"),j8o=l(),$1=a("li"),ise=a("strong"),D8o=o("squeezebert"),G8o=o(" \u2014 "),rq=a("a"),O8o=o("SqueezeBertForMaskedLM"),V8o=o(" (SqueezeBERT model)"),X8o=l(),I1=a("li"),dse=a("strong"),z8o=o("tapas"),Q8o=o(" \u2014 "),tq=a("a"),W8o=o("TapasForMaskedLM"),H8o=o(" (TAPAS model)"),U8o=l(),q1=a("li"),cse=a("strong"),J8o=o("wav2vec2"),Y8o=o(" \u2014 "),fse=a("code"),K8o=o("Wav2Vec2ForMaskedLM"),Z8o=o(" (Wav2Vec2 model)"),e7o=l(),N1=a("li"),mse=a("strong"),o7o=o("xlm"),r7o=o(" \u2014 "),aq=a("a"),t7o=o("XLMWithLMHeadModel"),a7o=o(" (XLM model)"),n7o=l(),j1=a("li"),gse=a("strong"),s7o=o("xlm-roberta"),l7o=o(" \u2014 "),nq=a("a"),i7o=o("XLMRobertaForMaskedLM"),d7o=o(" (XLM-RoBERTa model)"),c7o=l(),D1=a("li"),hse=a("strong"),f7o=o("xlm-roberta-xl"),m7o=o(" \u2014 "),sq=a("a"),g7o=o("XLMRobertaXLForMaskedLM"),h7o=o(" (XLM-RoBERTa-XL model)"),p7o=l(),G1=a("li"),pse=a("strong"),_7o=o("yoso"),u7o=o(" \u2014 "),lq=a("a"),b7o=o("YosoForMaskedLM"),F7o=o(" (YOSO model)"),v7o=l(),O1=a("p"),T7o=o("The model is set in evaluation mode by default using "),_se=a("code"),M7o=o("model.eval()"),E7o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),use=a("code"),C7o=o("model.train()"),w7o=l(),bse=a("p"),A7o=o("Examples:"),y7o=l(),f(SC.$$.fragment),GRe=l(),dd=a("h2"),V1=a("a"),Fse=a("span"),f(RC.$$.fragment),L7o=l(),vse=a("span"),x7o=o("AutoModelForSeq2SeqLM"),ORe=l(),er=a("div"),f(BC.$$.fragment),k7o=l(),cd=a("p"),S7o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),iq=a("a"),R7o=o("from_pretrained()"),B7o=o(" class method or the "),dq=a("a"),P7o=o("from_config()"),$7o=o(` class
method.`),I7o=l(),PC=a("p"),q7o=o("This class cannot be instantiated directly using "),Tse=a("code"),N7o=o("__init__()"),j7o=o(" (throws an error)."),D7o=l(),Hr=a("div"),f($C.$$.fragment),G7o=l(),Mse=a("p"),O7o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),V7o=l(),fd=a("p"),X7o=o(`Note:
Loading a model from its configuration file does `),Ese=a("strong"),z7o=o("not"),Q7o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cq=a("a"),W7o=o("from_pretrained()"),H7o=o(" to load the model weights."),U7o=l(),Cse=a("p"),J7o=o("Examples:"),Y7o=l(),f(IC.$$.fragment),K7o=l(),Ge=a("div"),f(qC.$$.fragment),Z7o=l(),wse=a("p"),eMo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),oMo=l(),Ha=a("p"),rMo=o("The model class to instantiate is selected based on the "),Ase=a("code"),tMo=o("model_type"),aMo=o(` property of the config object (either
passed as an argument or loaded from `),yse=a("code"),nMo=o("pretrained_model_name_or_path"),sMo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lse=a("code"),lMo=o("pretrained_model_name_or_path"),iMo=o(":"),dMo=l(),ne=a("ul"),X1=a("li"),xse=a("strong"),cMo=o("bart"),fMo=o(" \u2014 "),fq=a("a"),mMo=o("BartForConditionalGeneration"),gMo=o(" (BART model)"),hMo=l(),z1=a("li"),kse=a("strong"),pMo=o("bigbird_pegasus"),_Mo=o(" \u2014 "),mq=a("a"),uMo=o("BigBirdPegasusForConditionalGeneration"),bMo=o(" (BigBirdPegasus model)"),FMo=l(),Q1=a("li"),Sse=a("strong"),vMo=o("blenderbot"),TMo=o(" \u2014 "),gq=a("a"),MMo=o("BlenderbotForConditionalGeneration"),EMo=o(" (Blenderbot model)"),CMo=l(),W1=a("li"),Rse=a("strong"),wMo=o("blenderbot-small"),AMo=o(" \u2014 "),hq=a("a"),yMo=o("BlenderbotSmallForConditionalGeneration"),LMo=o(" (BlenderbotSmall model)"),xMo=l(),H1=a("li"),Bse=a("strong"),kMo=o("encoder-decoder"),SMo=o(" \u2014 "),pq=a("a"),RMo=o("EncoderDecoderModel"),BMo=o(" (Encoder decoder model)"),PMo=l(),U1=a("li"),Pse=a("strong"),$Mo=o("fsmt"),IMo=o(" \u2014 "),_q=a("a"),qMo=o("FSMTForConditionalGeneration"),NMo=o(" (FairSeq Machine-Translation model)"),jMo=l(),J1=a("li"),$se=a("strong"),DMo=o("led"),GMo=o(" \u2014 "),uq=a("a"),OMo=o("LEDForConditionalGeneration"),VMo=o(" (LED model)"),XMo=l(),Y1=a("li"),Ise=a("strong"),zMo=o("m2m_100"),QMo=o(" \u2014 "),bq=a("a"),WMo=o("M2M100ForConditionalGeneration"),HMo=o(" (M2M100 model)"),UMo=l(),K1=a("li"),qse=a("strong"),JMo=o("marian"),YMo=o(" \u2014 "),Fq=a("a"),KMo=o("MarianMTModel"),ZMo=o(" (Marian model)"),e4o=l(),Z1=a("li"),Nse=a("strong"),o4o=o("mbart"),r4o=o(" \u2014 "),vq=a("a"),t4o=o("MBartForConditionalGeneration"),a4o=o(" (mBART model)"),n4o=l(),eb=a("li"),jse=a("strong"),s4o=o("mt5"),l4o=o(" \u2014 "),Tq=a("a"),i4o=o("MT5ForConditionalGeneration"),d4o=o(" (mT5 model)"),c4o=l(),ob=a("li"),Dse=a("strong"),f4o=o("pegasus"),m4o=o(" \u2014 "),Mq=a("a"),g4o=o("PegasusForConditionalGeneration"),h4o=o(" (Pegasus model)"),p4o=l(),rb=a("li"),Gse=a("strong"),_4o=o("plbart"),u4o=o(" \u2014 "),Eq=a("a"),b4o=o("PLBartForConditionalGeneration"),F4o=o(" (PLBart model)"),v4o=l(),tb=a("li"),Ose=a("strong"),T4o=o("prophetnet"),M4o=o(" \u2014 "),Cq=a("a"),E4o=o("ProphetNetForConditionalGeneration"),C4o=o(" (ProphetNet model)"),w4o=l(),ab=a("li"),Vse=a("strong"),A4o=o("t5"),y4o=o(" \u2014 "),wq=a("a"),L4o=o("T5ForConditionalGeneration"),x4o=o(" (T5 model)"),k4o=l(),nb=a("li"),Xse=a("strong"),S4o=o("tapex"),R4o=o(" \u2014 "),Aq=a("a"),B4o=o("BartForConditionalGeneration"),P4o=o(" (TAPEX model)"),$4o=l(),sb=a("li"),zse=a("strong"),I4o=o("xlm-prophetnet"),q4o=o(" \u2014 "),yq=a("a"),N4o=o("XLMProphetNetForConditionalGeneration"),j4o=o(" (XLMProphetNet model)"),D4o=l(),lb=a("p"),G4o=o("The model is set in evaluation mode by default using "),Qse=a("code"),O4o=o("model.eval()"),V4o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wse=a("code"),X4o=o("model.train()"),z4o=l(),Hse=a("p"),Q4o=o("Examples:"),W4o=l(),f(NC.$$.fragment),VRe=l(),md=a("h2"),ib=a("a"),Use=a("span"),f(jC.$$.fragment),H4o=l(),Jse=a("span"),U4o=o("AutoModelForSequenceClassification"),XRe=l(),or=a("div"),f(DC.$$.fragment),J4o=l(),gd=a("p"),Y4o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Lq=a("a"),K4o=o("from_pretrained()"),Z4o=o(" class method or the "),xq=a("a"),eEo=o("from_config()"),oEo=o(` class
method.`),rEo=l(),GC=a("p"),tEo=o("This class cannot be instantiated directly using "),Yse=a("code"),aEo=o("__init__()"),nEo=o(" (throws an error)."),sEo=l(),Ur=a("div"),f(OC.$$.fragment),lEo=l(),Kse=a("p"),iEo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),dEo=l(),hd=a("p"),cEo=o(`Note:
Loading a model from its configuration file does `),Zse=a("strong"),fEo=o("not"),mEo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kq=a("a"),gEo=o("from_pretrained()"),hEo=o(" to load the model weights."),pEo=l(),ele=a("p"),_Eo=o("Examples:"),uEo=l(),f(VC.$$.fragment),bEo=l(),Oe=a("div"),f(XC.$$.fragment),FEo=l(),ole=a("p"),vEo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),TEo=l(),Ua=a("p"),MEo=o("The model class to instantiate is selected based on the "),rle=a("code"),EEo=o("model_type"),CEo=o(` property of the config object (either
passed as an argument or loaded from `),tle=a("code"),wEo=o("pretrained_model_name_or_path"),AEo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ale=a("code"),yEo=o("pretrained_model_name_or_path"),LEo=o(":"),xEo=l(),y=a("ul"),db=a("li"),nle=a("strong"),kEo=o("albert"),SEo=o(" \u2014 "),Sq=a("a"),REo=o("AlbertForSequenceClassification"),BEo=o(" (ALBERT model)"),PEo=l(),cb=a("li"),sle=a("strong"),$Eo=o("bart"),IEo=o(" \u2014 "),Rq=a("a"),qEo=o("BartForSequenceClassification"),NEo=o(" (BART model)"),jEo=l(),fb=a("li"),lle=a("strong"),DEo=o("bert"),GEo=o(" \u2014 "),Bq=a("a"),OEo=o("BertForSequenceClassification"),VEo=o(" (BERT model)"),XEo=l(),mb=a("li"),ile=a("strong"),zEo=o("big_bird"),QEo=o(" \u2014 "),Pq=a("a"),WEo=o("BigBirdForSequenceClassification"),HEo=o(" (BigBird model)"),UEo=l(),gb=a("li"),dle=a("strong"),JEo=o("bigbird_pegasus"),YEo=o(" \u2014 "),$q=a("a"),KEo=o("BigBirdPegasusForSequenceClassification"),ZEo=o(" (BigBirdPegasus model)"),eCo=l(),hb=a("li"),cle=a("strong"),oCo=o("camembert"),rCo=o(" \u2014 "),Iq=a("a"),tCo=o("CamembertForSequenceClassification"),aCo=o(" (CamemBERT model)"),nCo=l(),pb=a("li"),fle=a("strong"),sCo=o("canine"),lCo=o(" \u2014 "),qq=a("a"),iCo=o("CanineForSequenceClassification"),dCo=o(" (Canine model)"),cCo=l(),_b=a("li"),mle=a("strong"),fCo=o("convbert"),mCo=o(" \u2014 "),Nq=a("a"),gCo=o("ConvBertForSequenceClassification"),hCo=o(" (ConvBERT model)"),pCo=l(),ub=a("li"),gle=a("strong"),_Co=o("ctrl"),uCo=o(" \u2014 "),jq=a("a"),bCo=o("CTRLForSequenceClassification"),FCo=o(" (CTRL model)"),vCo=l(),bb=a("li"),hle=a("strong"),TCo=o("data2vec-text"),MCo=o(" \u2014 "),Dq=a("a"),ECo=o("Data2VecTextForSequenceClassification"),CCo=o(" (Data2VecText model)"),wCo=l(),Fb=a("li"),ple=a("strong"),ACo=o("deberta"),yCo=o(" \u2014 "),Gq=a("a"),LCo=o("DebertaForSequenceClassification"),xCo=o(" (DeBERTa model)"),kCo=l(),vb=a("li"),_le=a("strong"),SCo=o("deberta-v2"),RCo=o(" \u2014 "),Oq=a("a"),BCo=o("DebertaV2ForSequenceClassification"),PCo=o(" (DeBERTa-v2 model)"),$Co=l(),Tb=a("li"),ule=a("strong"),ICo=o("distilbert"),qCo=o(" \u2014 "),Vq=a("a"),NCo=o("DistilBertForSequenceClassification"),jCo=o(" (DistilBERT model)"),DCo=l(),Mb=a("li"),ble=a("strong"),GCo=o("electra"),OCo=o(" \u2014 "),Xq=a("a"),VCo=o("ElectraForSequenceClassification"),XCo=o(" (ELECTRA model)"),zCo=l(),Eb=a("li"),Fle=a("strong"),QCo=o("flaubert"),WCo=o(" \u2014 "),zq=a("a"),HCo=o("FlaubertForSequenceClassification"),UCo=o(" (FlauBERT model)"),JCo=l(),Cb=a("li"),vle=a("strong"),YCo=o("fnet"),KCo=o(" \u2014 "),Qq=a("a"),ZCo=o("FNetForSequenceClassification"),e5o=o(" (FNet model)"),o5o=l(),wb=a("li"),Tle=a("strong"),r5o=o("funnel"),t5o=o(" \u2014 "),Wq=a("a"),a5o=o("FunnelForSequenceClassification"),n5o=o(" (Funnel Transformer model)"),s5o=l(),Ab=a("li"),Mle=a("strong"),l5o=o("gpt2"),i5o=o(" \u2014 "),Hq=a("a"),d5o=o("GPT2ForSequenceClassification"),c5o=o(" (OpenAI GPT-2 model)"),f5o=l(),yb=a("li"),Ele=a("strong"),m5o=o("gpt_neo"),g5o=o(" \u2014 "),Uq=a("a"),h5o=o("GPTNeoForSequenceClassification"),p5o=o(" (GPT Neo model)"),_5o=l(),Lb=a("li"),Cle=a("strong"),u5o=o("gptj"),b5o=o(" \u2014 "),Jq=a("a"),F5o=o("GPTJForSequenceClassification"),v5o=o(" (GPT-J model)"),T5o=l(),xb=a("li"),wle=a("strong"),M5o=o("ibert"),E5o=o(" \u2014 "),Yq=a("a"),C5o=o("IBertForSequenceClassification"),w5o=o(" (I-BERT model)"),A5o=l(),kb=a("li"),Ale=a("strong"),y5o=o("layoutlm"),L5o=o(" \u2014 "),Kq=a("a"),x5o=o("LayoutLMForSequenceClassification"),k5o=o(" (LayoutLM model)"),S5o=l(),Sb=a("li"),yle=a("strong"),R5o=o("layoutlmv2"),B5o=o(" \u2014 "),Zq=a("a"),P5o=o("LayoutLMv2ForSequenceClassification"),$5o=o(" (LayoutLMv2 model)"),I5o=l(),Rb=a("li"),Lle=a("strong"),q5o=o("led"),N5o=o(" \u2014 "),eN=a("a"),j5o=o("LEDForSequenceClassification"),D5o=o(" (LED model)"),G5o=l(),Bb=a("li"),xle=a("strong"),O5o=o("longformer"),V5o=o(" \u2014 "),oN=a("a"),X5o=o("LongformerForSequenceClassification"),z5o=o(" (Longformer model)"),Q5o=l(),Pb=a("li"),kle=a("strong"),W5o=o("mbart"),H5o=o(" \u2014 "),rN=a("a"),U5o=o("MBartForSequenceClassification"),J5o=o(" (mBART model)"),Y5o=l(),$b=a("li"),Sle=a("strong"),K5o=o("megatron-bert"),Z5o=o(" \u2014 "),tN=a("a"),e3o=o("MegatronBertForSequenceClassification"),o3o=o(" (MegatronBert model)"),r3o=l(),Ib=a("li"),Rle=a("strong"),t3o=o("mobilebert"),a3o=o(" \u2014 "),aN=a("a"),n3o=o("MobileBertForSequenceClassification"),s3o=o(" (MobileBERT model)"),l3o=l(),qb=a("li"),Ble=a("strong"),i3o=o("mpnet"),d3o=o(" \u2014 "),nN=a("a"),c3o=o("MPNetForSequenceClassification"),f3o=o(" (MPNet model)"),m3o=l(),Nb=a("li"),Ple=a("strong"),g3o=o("nystromformer"),h3o=o(" \u2014 "),sN=a("a"),p3o=o("NystromformerForSequenceClassification"),_3o=o(" (Nystromformer model)"),u3o=l(),jb=a("li"),$le=a("strong"),b3o=o("openai-gpt"),F3o=o(" \u2014 "),lN=a("a"),v3o=o("OpenAIGPTForSequenceClassification"),T3o=o(" (OpenAI GPT model)"),M3o=l(),Db=a("li"),Ile=a("strong"),E3o=o("perceiver"),C3o=o(" \u2014 "),iN=a("a"),w3o=o("PerceiverForSequenceClassification"),A3o=o(" (Perceiver model)"),y3o=l(),Gb=a("li"),qle=a("strong"),L3o=o("plbart"),x3o=o(" \u2014 "),dN=a("a"),k3o=o("PLBartForSequenceClassification"),S3o=o(" (PLBart model)"),R3o=l(),Ob=a("li"),Nle=a("strong"),B3o=o("qdqbert"),P3o=o(" \u2014 "),cN=a("a"),$3o=o("QDQBertForSequenceClassification"),I3o=o(" (QDQBert model)"),q3o=l(),Vb=a("li"),jle=a("strong"),N3o=o("reformer"),j3o=o(" \u2014 "),fN=a("a"),D3o=o("ReformerForSequenceClassification"),G3o=o(" (Reformer model)"),O3o=l(),Xb=a("li"),Dle=a("strong"),V3o=o("rembert"),X3o=o(" \u2014 "),mN=a("a"),z3o=o("RemBertForSequenceClassification"),Q3o=o(" (RemBERT model)"),W3o=l(),zb=a("li"),Gle=a("strong"),H3o=o("roberta"),U3o=o(" \u2014 "),gN=a("a"),J3o=o("RobertaForSequenceClassification"),Y3o=o(" (RoBERTa model)"),K3o=l(),Qb=a("li"),Ole=a("strong"),Z3o=o("roformer"),ewo=o(" \u2014 "),hN=a("a"),owo=o("RoFormerForSequenceClassification"),rwo=o(" (RoFormer model)"),two=l(),Wb=a("li"),Vle=a("strong"),awo=o("squeezebert"),nwo=o(" \u2014 "),pN=a("a"),swo=o("SqueezeBertForSequenceClassification"),lwo=o(" (SqueezeBERT model)"),iwo=l(),Hb=a("li"),Xle=a("strong"),dwo=o("tapas"),cwo=o(" \u2014 "),_N=a("a"),fwo=o("TapasForSequenceClassification"),mwo=o(" (TAPAS model)"),gwo=l(),Ub=a("li"),zle=a("strong"),hwo=o("tapex"),pwo=o(" \u2014 "),uN=a("a"),_wo=o("BartForSequenceClassification"),uwo=o(" (TAPEX model)"),bwo=l(),Jb=a("li"),Qle=a("strong"),Fwo=o("transfo-xl"),vwo=o(" \u2014 "),bN=a("a"),Two=o("TransfoXLForSequenceClassification"),Mwo=o(" (Transformer-XL model)"),Ewo=l(),Yb=a("li"),Wle=a("strong"),Cwo=o("xlm"),wwo=o(" \u2014 "),FN=a("a"),Awo=o("XLMForSequenceClassification"),ywo=o(" (XLM model)"),Lwo=l(),Kb=a("li"),Hle=a("strong"),xwo=o("xlm-roberta"),kwo=o(" \u2014 "),vN=a("a"),Swo=o("XLMRobertaForSequenceClassification"),Rwo=o(" (XLM-RoBERTa model)"),Bwo=l(),Zb=a("li"),Ule=a("strong"),Pwo=o("xlm-roberta-xl"),$wo=o(" \u2014 "),TN=a("a"),Iwo=o("XLMRobertaXLForSequenceClassification"),qwo=o(" (XLM-RoBERTa-XL model)"),Nwo=l(),e2=a("li"),Jle=a("strong"),jwo=o("xlnet"),Dwo=o(" \u2014 "),MN=a("a"),Gwo=o("XLNetForSequenceClassification"),Owo=o(" (XLNet model)"),Vwo=l(),o2=a("li"),Yle=a("strong"),Xwo=o("yoso"),zwo=o(" \u2014 "),EN=a("a"),Qwo=o("YosoForSequenceClassification"),Wwo=o(" (YOSO model)"),Hwo=l(),r2=a("p"),Uwo=o("The model is set in evaluation mode by default using "),Kle=a("code"),Jwo=o("model.eval()"),Ywo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zle=a("code"),Kwo=o("model.train()"),Zwo=l(),eie=a("p"),eAo=o("Examples:"),oAo=l(),f(zC.$$.fragment),zRe=l(),pd=a("h2"),t2=a("a"),oie=a("span"),f(QC.$$.fragment),rAo=l(),rie=a("span"),tAo=o("AutoModelForMultipleChoice"),QRe=l(),rr=a("div"),f(WC.$$.fragment),aAo=l(),_d=a("p"),nAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),CN=a("a"),sAo=o("from_pretrained()"),lAo=o(" class method or the "),wN=a("a"),iAo=o("from_config()"),dAo=o(` class
method.`),cAo=l(),HC=a("p"),fAo=o("This class cannot be instantiated directly using "),tie=a("code"),mAo=o("__init__()"),gAo=o(" (throws an error)."),hAo=l(),Jr=a("div"),f(UC.$$.fragment),pAo=l(),aie=a("p"),_Ao=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),uAo=l(),ud=a("p"),bAo=o(`Note:
Loading a model from its configuration file does `),nie=a("strong"),FAo=o("not"),vAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AN=a("a"),TAo=o("from_pretrained()"),MAo=o(" to load the model weights."),EAo=l(),sie=a("p"),CAo=o("Examples:"),wAo=l(),f(JC.$$.fragment),AAo=l(),Ve=a("div"),f(YC.$$.fragment),yAo=l(),lie=a("p"),LAo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),xAo=l(),Ja=a("p"),kAo=o("The model class to instantiate is selected based on the "),iie=a("code"),SAo=o("model_type"),RAo=o(` property of the config object (either
passed as an argument or loaded from `),die=a("code"),BAo=o("pretrained_model_name_or_path"),PAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cie=a("code"),$Ao=o("pretrained_model_name_or_path"),IAo=o(":"),qAo=l(),G=a("ul"),a2=a("li"),fie=a("strong"),NAo=o("albert"),jAo=o(" \u2014 "),yN=a("a"),DAo=o("AlbertForMultipleChoice"),GAo=o(" (ALBERT model)"),OAo=l(),n2=a("li"),mie=a("strong"),VAo=o("bert"),XAo=o(" \u2014 "),LN=a("a"),zAo=o("BertForMultipleChoice"),QAo=o(" (BERT model)"),WAo=l(),s2=a("li"),gie=a("strong"),HAo=o("big_bird"),UAo=o(" \u2014 "),xN=a("a"),JAo=o("BigBirdForMultipleChoice"),YAo=o(" (BigBird model)"),KAo=l(),l2=a("li"),hie=a("strong"),ZAo=o("camembert"),eyo=o(" \u2014 "),kN=a("a"),oyo=o("CamembertForMultipleChoice"),ryo=o(" (CamemBERT model)"),tyo=l(),i2=a("li"),pie=a("strong"),ayo=o("canine"),nyo=o(" \u2014 "),SN=a("a"),syo=o("CanineForMultipleChoice"),lyo=o(" (Canine model)"),iyo=l(),d2=a("li"),_ie=a("strong"),dyo=o("convbert"),cyo=o(" \u2014 "),RN=a("a"),fyo=o("ConvBertForMultipleChoice"),myo=o(" (ConvBERT model)"),gyo=l(),c2=a("li"),uie=a("strong"),hyo=o("data2vec-text"),pyo=o(" \u2014 "),BN=a("a"),_yo=o("Data2VecTextForMultipleChoice"),uyo=o(" (Data2VecText model)"),byo=l(),f2=a("li"),bie=a("strong"),Fyo=o("distilbert"),vyo=o(" \u2014 "),PN=a("a"),Tyo=o("DistilBertForMultipleChoice"),Myo=o(" (DistilBERT model)"),Eyo=l(),m2=a("li"),Fie=a("strong"),Cyo=o("electra"),wyo=o(" \u2014 "),$N=a("a"),Ayo=o("ElectraForMultipleChoice"),yyo=o(" (ELECTRA model)"),Lyo=l(),g2=a("li"),vie=a("strong"),xyo=o("flaubert"),kyo=o(" \u2014 "),IN=a("a"),Syo=o("FlaubertForMultipleChoice"),Ryo=o(" (FlauBERT model)"),Byo=l(),h2=a("li"),Tie=a("strong"),Pyo=o("fnet"),$yo=o(" \u2014 "),qN=a("a"),Iyo=o("FNetForMultipleChoice"),qyo=o(" (FNet model)"),Nyo=l(),p2=a("li"),Mie=a("strong"),jyo=o("funnel"),Dyo=o(" \u2014 "),NN=a("a"),Gyo=o("FunnelForMultipleChoice"),Oyo=o(" (Funnel Transformer model)"),Vyo=l(),_2=a("li"),Eie=a("strong"),Xyo=o("ibert"),zyo=o(" \u2014 "),jN=a("a"),Qyo=o("IBertForMultipleChoice"),Wyo=o(" (I-BERT model)"),Hyo=l(),u2=a("li"),Cie=a("strong"),Uyo=o("longformer"),Jyo=o(" \u2014 "),DN=a("a"),Yyo=o("LongformerForMultipleChoice"),Kyo=o(" (Longformer model)"),Zyo=l(),b2=a("li"),wie=a("strong"),eLo=o("megatron-bert"),oLo=o(" \u2014 "),GN=a("a"),rLo=o("MegatronBertForMultipleChoice"),tLo=o(" (MegatronBert model)"),aLo=l(),F2=a("li"),Aie=a("strong"),nLo=o("mobilebert"),sLo=o(" \u2014 "),ON=a("a"),lLo=o("MobileBertForMultipleChoice"),iLo=o(" (MobileBERT model)"),dLo=l(),v2=a("li"),yie=a("strong"),cLo=o("mpnet"),fLo=o(" \u2014 "),VN=a("a"),mLo=o("MPNetForMultipleChoice"),gLo=o(" (MPNet model)"),hLo=l(),T2=a("li"),Lie=a("strong"),pLo=o("nystromformer"),_Lo=o(" \u2014 "),XN=a("a"),uLo=o("NystromformerForMultipleChoice"),bLo=o(" (Nystromformer model)"),FLo=l(),M2=a("li"),xie=a("strong"),vLo=o("qdqbert"),TLo=o(" \u2014 "),zN=a("a"),MLo=o("QDQBertForMultipleChoice"),ELo=o(" (QDQBert model)"),CLo=l(),E2=a("li"),kie=a("strong"),wLo=o("rembert"),ALo=o(" \u2014 "),QN=a("a"),yLo=o("RemBertForMultipleChoice"),LLo=o(" (RemBERT model)"),xLo=l(),C2=a("li"),Sie=a("strong"),kLo=o("roberta"),SLo=o(" \u2014 "),WN=a("a"),RLo=o("RobertaForMultipleChoice"),BLo=o(" (RoBERTa model)"),PLo=l(),w2=a("li"),Rie=a("strong"),$Lo=o("roformer"),ILo=o(" \u2014 "),HN=a("a"),qLo=o("RoFormerForMultipleChoice"),NLo=o(" (RoFormer model)"),jLo=l(),A2=a("li"),Bie=a("strong"),DLo=o("squeezebert"),GLo=o(" \u2014 "),UN=a("a"),OLo=o("SqueezeBertForMultipleChoice"),VLo=o(" (SqueezeBERT model)"),XLo=l(),y2=a("li"),Pie=a("strong"),zLo=o("xlm"),QLo=o(" \u2014 "),JN=a("a"),WLo=o("XLMForMultipleChoice"),HLo=o(" (XLM model)"),ULo=l(),L2=a("li"),$ie=a("strong"),JLo=o("xlm-roberta"),YLo=o(" \u2014 "),YN=a("a"),KLo=o("XLMRobertaForMultipleChoice"),ZLo=o(" (XLM-RoBERTa model)"),e9o=l(),x2=a("li"),Iie=a("strong"),o9o=o("xlm-roberta-xl"),r9o=o(" \u2014 "),KN=a("a"),t9o=o("XLMRobertaXLForMultipleChoice"),a9o=o(" (XLM-RoBERTa-XL model)"),n9o=l(),k2=a("li"),qie=a("strong"),s9o=o("xlnet"),l9o=o(" \u2014 "),ZN=a("a"),i9o=o("XLNetForMultipleChoice"),d9o=o(" (XLNet model)"),c9o=l(),S2=a("li"),Nie=a("strong"),f9o=o("yoso"),m9o=o(" \u2014 "),ej=a("a"),g9o=o("YosoForMultipleChoice"),h9o=o(" (YOSO model)"),p9o=l(),R2=a("p"),_9o=o("The model is set in evaluation mode by default using "),jie=a("code"),u9o=o("model.eval()"),b9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Die=a("code"),F9o=o("model.train()"),v9o=l(),Gie=a("p"),T9o=o("Examples:"),M9o=l(),f(KC.$$.fragment),WRe=l(),bd=a("h2"),B2=a("a"),Oie=a("span"),f(ZC.$$.fragment),E9o=l(),Vie=a("span"),C9o=o("AutoModelForNextSentencePrediction"),HRe=l(),tr=a("div"),f(e5.$$.fragment),w9o=l(),Fd=a("p"),A9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),oj=a("a"),y9o=o("from_pretrained()"),L9o=o(" class method or the "),rj=a("a"),x9o=o("from_config()"),k9o=o(` class
method.`),S9o=l(),o5=a("p"),R9o=o("This class cannot be instantiated directly using "),Xie=a("code"),B9o=o("__init__()"),P9o=o(" (throws an error)."),$9o=l(),Yr=a("div"),f(r5.$$.fragment),I9o=l(),zie=a("p"),q9o=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),N9o=l(),vd=a("p"),j9o=o(`Note:
Loading a model from its configuration file does `),Qie=a("strong"),D9o=o("not"),G9o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tj=a("a"),O9o=o("from_pretrained()"),V9o=o(" to load the model weights."),X9o=l(),Wie=a("p"),z9o=o("Examples:"),Q9o=l(),f(t5.$$.fragment),W9o=l(),Xe=a("div"),f(a5.$$.fragment),H9o=l(),Hie=a("p"),U9o=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),J9o=l(),Ya=a("p"),Y9o=o("The model class to instantiate is selected based on the "),Uie=a("code"),K9o=o("model_type"),Z9o=o(` property of the config object (either
passed as an argument or loaded from `),Jie=a("code"),exo=o("pretrained_model_name_or_path"),oxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yie=a("code"),rxo=o("pretrained_model_name_or_path"),txo=o(":"),axo=l(),da=a("ul"),P2=a("li"),Kie=a("strong"),nxo=o("bert"),sxo=o(" \u2014 "),aj=a("a"),lxo=o("BertForNextSentencePrediction"),ixo=o(" (BERT model)"),dxo=l(),$2=a("li"),Zie=a("strong"),cxo=o("fnet"),fxo=o(" \u2014 "),nj=a("a"),mxo=o("FNetForNextSentencePrediction"),gxo=o(" (FNet model)"),hxo=l(),I2=a("li"),ede=a("strong"),pxo=o("megatron-bert"),_xo=o(" \u2014 "),sj=a("a"),uxo=o("MegatronBertForNextSentencePrediction"),bxo=o(" (MegatronBert model)"),Fxo=l(),q2=a("li"),ode=a("strong"),vxo=o("mobilebert"),Txo=o(" \u2014 "),lj=a("a"),Mxo=o("MobileBertForNextSentencePrediction"),Exo=o(" (MobileBERT model)"),Cxo=l(),N2=a("li"),rde=a("strong"),wxo=o("qdqbert"),Axo=o(" \u2014 "),ij=a("a"),yxo=o("QDQBertForNextSentencePrediction"),Lxo=o(" (QDQBert model)"),xxo=l(),j2=a("p"),kxo=o("The model is set in evaluation mode by default using "),tde=a("code"),Sxo=o("model.eval()"),Rxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ade=a("code"),Bxo=o("model.train()"),Pxo=l(),nde=a("p"),$xo=o("Examples:"),Ixo=l(),f(n5.$$.fragment),URe=l(),Td=a("h2"),D2=a("a"),sde=a("span"),f(s5.$$.fragment),qxo=l(),lde=a("span"),Nxo=o("AutoModelForTokenClassification"),JRe=l(),ar=a("div"),f(l5.$$.fragment),jxo=l(),Md=a("p"),Dxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),dj=a("a"),Gxo=o("from_pretrained()"),Oxo=o(" class method or the "),cj=a("a"),Vxo=o("from_config()"),Xxo=o(` class
method.`),zxo=l(),i5=a("p"),Qxo=o("This class cannot be instantiated directly using "),ide=a("code"),Wxo=o("__init__()"),Hxo=o(" (throws an error)."),Uxo=l(),Kr=a("div"),f(d5.$$.fragment),Jxo=l(),dde=a("p"),Yxo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Kxo=l(),Ed=a("p"),Zxo=o(`Note:
Loading a model from its configuration file does `),cde=a("strong"),eko=o("not"),oko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fj=a("a"),rko=o("from_pretrained()"),tko=o(" to load the model weights."),ako=l(),fde=a("p"),nko=o("Examples:"),sko=l(),f(c5.$$.fragment),lko=l(),ze=a("div"),f(f5.$$.fragment),iko=l(),mde=a("p"),dko=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),cko=l(),Ka=a("p"),fko=o("The model class to instantiate is selected based on the "),gde=a("code"),mko=o("model_type"),gko=o(` property of the config object (either
passed as an argument or loaded from `),hde=a("code"),hko=o("pretrained_model_name_or_path"),pko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pde=a("code"),_ko=o("pretrained_model_name_or_path"),uko=o(":"),bko=l(),j=a("ul"),G2=a("li"),_de=a("strong"),Fko=o("albert"),vko=o(" \u2014 "),mj=a("a"),Tko=o("AlbertForTokenClassification"),Mko=o(" (ALBERT model)"),Eko=l(),O2=a("li"),ude=a("strong"),Cko=o("bert"),wko=o(" \u2014 "),gj=a("a"),Ako=o("BertForTokenClassification"),yko=o(" (BERT model)"),Lko=l(),V2=a("li"),bde=a("strong"),xko=o("big_bird"),kko=o(" \u2014 "),hj=a("a"),Sko=o("BigBirdForTokenClassification"),Rko=o(" (BigBird model)"),Bko=l(),X2=a("li"),Fde=a("strong"),Pko=o("camembert"),$ko=o(" \u2014 "),pj=a("a"),Iko=o("CamembertForTokenClassification"),qko=o(" (CamemBERT model)"),Nko=l(),z2=a("li"),vde=a("strong"),jko=o("canine"),Dko=o(" \u2014 "),_j=a("a"),Gko=o("CanineForTokenClassification"),Oko=o(" (Canine model)"),Vko=l(),Q2=a("li"),Tde=a("strong"),Xko=o("convbert"),zko=o(" \u2014 "),uj=a("a"),Qko=o("ConvBertForTokenClassification"),Wko=o(" (ConvBERT model)"),Hko=l(),W2=a("li"),Mde=a("strong"),Uko=o("data2vec-text"),Jko=o(" \u2014 "),bj=a("a"),Yko=o("Data2VecTextForTokenClassification"),Kko=o(" (Data2VecText model)"),Zko=l(),H2=a("li"),Ede=a("strong"),eSo=o("deberta"),oSo=o(" \u2014 "),Fj=a("a"),rSo=o("DebertaForTokenClassification"),tSo=o(" (DeBERTa model)"),aSo=l(),U2=a("li"),Cde=a("strong"),nSo=o("deberta-v2"),sSo=o(" \u2014 "),vj=a("a"),lSo=o("DebertaV2ForTokenClassification"),iSo=o(" (DeBERTa-v2 model)"),dSo=l(),J2=a("li"),wde=a("strong"),cSo=o("distilbert"),fSo=o(" \u2014 "),Tj=a("a"),mSo=o("DistilBertForTokenClassification"),gSo=o(" (DistilBERT model)"),hSo=l(),Y2=a("li"),Ade=a("strong"),pSo=o("electra"),_So=o(" \u2014 "),Mj=a("a"),uSo=o("ElectraForTokenClassification"),bSo=o(" (ELECTRA model)"),FSo=l(),K2=a("li"),yde=a("strong"),vSo=o("flaubert"),TSo=o(" \u2014 "),Ej=a("a"),MSo=o("FlaubertForTokenClassification"),ESo=o(" (FlauBERT model)"),CSo=l(),Z2=a("li"),Lde=a("strong"),wSo=o("fnet"),ASo=o(" \u2014 "),Cj=a("a"),ySo=o("FNetForTokenClassification"),LSo=o(" (FNet model)"),xSo=l(),eF=a("li"),xde=a("strong"),kSo=o("funnel"),SSo=o(" \u2014 "),wj=a("a"),RSo=o("FunnelForTokenClassification"),BSo=o(" (Funnel Transformer model)"),PSo=l(),oF=a("li"),kde=a("strong"),$So=o("gpt2"),ISo=o(" \u2014 "),Aj=a("a"),qSo=o("GPT2ForTokenClassification"),NSo=o(" (OpenAI GPT-2 model)"),jSo=l(),rF=a("li"),Sde=a("strong"),DSo=o("ibert"),GSo=o(" \u2014 "),yj=a("a"),OSo=o("IBertForTokenClassification"),VSo=o(" (I-BERT model)"),XSo=l(),tF=a("li"),Rde=a("strong"),zSo=o("layoutlm"),QSo=o(" \u2014 "),Lj=a("a"),WSo=o("LayoutLMForTokenClassification"),HSo=o(" (LayoutLM model)"),USo=l(),aF=a("li"),Bde=a("strong"),JSo=o("layoutlmv2"),YSo=o(" \u2014 "),xj=a("a"),KSo=o("LayoutLMv2ForTokenClassification"),ZSo=o(" (LayoutLMv2 model)"),eRo=l(),nF=a("li"),Pde=a("strong"),oRo=o("longformer"),rRo=o(" \u2014 "),kj=a("a"),tRo=o("LongformerForTokenClassification"),aRo=o(" (Longformer model)"),nRo=l(),sF=a("li"),$de=a("strong"),sRo=o("megatron-bert"),lRo=o(" \u2014 "),Sj=a("a"),iRo=o("MegatronBertForTokenClassification"),dRo=o(" (MegatronBert model)"),cRo=l(),lF=a("li"),Ide=a("strong"),fRo=o("mobilebert"),mRo=o(" \u2014 "),Rj=a("a"),gRo=o("MobileBertForTokenClassification"),hRo=o(" (MobileBERT model)"),pRo=l(),iF=a("li"),qde=a("strong"),_Ro=o("mpnet"),uRo=o(" \u2014 "),Bj=a("a"),bRo=o("MPNetForTokenClassification"),FRo=o(" (MPNet model)"),vRo=l(),dF=a("li"),Nde=a("strong"),TRo=o("nystromformer"),MRo=o(" \u2014 "),Pj=a("a"),ERo=o("NystromformerForTokenClassification"),CRo=o(" (Nystromformer model)"),wRo=l(),cF=a("li"),jde=a("strong"),ARo=o("qdqbert"),yRo=o(" \u2014 "),$j=a("a"),LRo=o("QDQBertForTokenClassification"),xRo=o(" (QDQBert model)"),kRo=l(),fF=a("li"),Dde=a("strong"),SRo=o("rembert"),RRo=o(" \u2014 "),Ij=a("a"),BRo=o("RemBertForTokenClassification"),PRo=o(" (RemBERT model)"),$Ro=l(),mF=a("li"),Gde=a("strong"),IRo=o("roberta"),qRo=o(" \u2014 "),qj=a("a"),NRo=o("RobertaForTokenClassification"),jRo=o(" (RoBERTa model)"),DRo=l(),gF=a("li"),Ode=a("strong"),GRo=o("roformer"),ORo=o(" \u2014 "),Nj=a("a"),VRo=o("RoFormerForTokenClassification"),XRo=o(" (RoFormer model)"),zRo=l(),hF=a("li"),Vde=a("strong"),QRo=o("squeezebert"),WRo=o(" \u2014 "),jj=a("a"),HRo=o("SqueezeBertForTokenClassification"),URo=o(" (SqueezeBERT model)"),JRo=l(),pF=a("li"),Xde=a("strong"),YRo=o("xlm"),KRo=o(" \u2014 "),Dj=a("a"),ZRo=o("XLMForTokenClassification"),eBo=o(" (XLM model)"),oBo=l(),_F=a("li"),zde=a("strong"),rBo=o("xlm-roberta"),tBo=o(" \u2014 "),Gj=a("a"),aBo=o("XLMRobertaForTokenClassification"),nBo=o(" (XLM-RoBERTa model)"),sBo=l(),uF=a("li"),Qde=a("strong"),lBo=o("xlm-roberta-xl"),iBo=o(" \u2014 "),Oj=a("a"),dBo=o("XLMRobertaXLForTokenClassification"),cBo=o(" (XLM-RoBERTa-XL model)"),fBo=l(),bF=a("li"),Wde=a("strong"),mBo=o("xlnet"),gBo=o(" \u2014 "),Vj=a("a"),hBo=o("XLNetForTokenClassification"),pBo=o(" (XLNet model)"),_Bo=l(),FF=a("li"),Hde=a("strong"),uBo=o("yoso"),bBo=o(" \u2014 "),Xj=a("a"),FBo=o("YosoForTokenClassification"),vBo=o(" (YOSO model)"),TBo=l(),vF=a("p"),MBo=o("The model is set in evaluation mode by default using "),Ude=a("code"),EBo=o("model.eval()"),CBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jde=a("code"),wBo=o("model.train()"),ABo=l(),Yde=a("p"),yBo=o("Examples:"),LBo=l(),f(m5.$$.fragment),YRe=l(),Cd=a("h2"),TF=a("a"),Kde=a("span"),f(g5.$$.fragment),xBo=l(),Zde=a("span"),kBo=o("AutoModelForQuestionAnswering"),KRe=l(),nr=a("div"),f(h5.$$.fragment),SBo=l(),wd=a("p"),RBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),zj=a("a"),BBo=o("from_pretrained()"),PBo=o(" class method or the "),Qj=a("a"),$Bo=o("from_config()"),IBo=o(` class
method.`),qBo=l(),p5=a("p"),NBo=o("This class cannot be instantiated directly using "),ece=a("code"),jBo=o("__init__()"),DBo=o(" (throws an error)."),GBo=l(),Zr=a("div"),f(_5.$$.fragment),OBo=l(),oce=a("p"),VBo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),XBo=l(),Ad=a("p"),zBo=o(`Note:
Loading a model from its configuration file does `),rce=a("strong"),QBo=o("not"),WBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wj=a("a"),HBo=o("from_pretrained()"),UBo=o(" to load the model weights."),JBo=l(),tce=a("p"),YBo=o("Examples:"),KBo=l(),f(u5.$$.fragment),ZBo=l(),Qe=a("div"),f(b5.$$.fragment),ePo=l(),ace=a("p"),oPo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),rPo=l(),Za=a("p"),tPo=o("The model class to instantiate is selected based on the "),nce=a("code"),aPo=o("model_type"),nPo=o(` property of the config object (either
passed as an argument or loaded from `),sce=a("code"),sPo=o("pretrained_model_name_or_path"),lPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lce=a("code"),iPo=o("pretrained_model_name_or_path"),dPo=o(":"),cPo=l(),R=a("ul"),MF=a("li"),ice=a("strong"),fPo=o("albert"),mPo=o(" \u2014 "),Hj=a("a"),gPo=o("AlbertForQuestionAnswering"),hPo=o(" (ALBERT model)"),pPo=l(),EF=a("li"),dce=a("strong"),_Po=o("bart"),uPo=o(" \u2014 "),Uj=a("a"),bPo=o("BartForQuestionAnswering"),FPo=o(" (BART model)"),vPo=l(),CF=a("li"),cce=a("strong"),TPo=o("bert"),MPo=o(" \u2014 "),Jj=a("a"),EPo=o("BertForQuestionAnswering"),CPo=o(" (BERT model)"),wPo=l(),wF=a("li"),fce=a("strong"),APo=o("big_bird"),yPo=o(" \u2014 "),Yj=a("a"),LPo=o("BigBirdForQuestionAnswering"),xPo=o(" (BigBird model)"),kPo=l(),AF=a("li"),mce=a("strong"),SPo=o("bigbird_pegasus"),RPo=o(" \u2014 "),Kj=a("a"),BPo=o("BigBirdPegasusForQuestionAnswering"),PPo=o(" (BigBirdPegasus model)"),$Po=l(),yF=a("li"),gce=a("strong"),IPo=o("camembert"),qPo=o(" \u2014 "),Zj=a("a"),NPo=o("CamembertForQuestionAnswering"),jPo=o(" (CamemBERT model)"),DPo=l(),LF=a("li"),hce=a("strong"),GPo=o("canine"),OPo=o(" \u2014 "),eD=a("a"),VPo=o("CanineForQuestionAnswering"),XPo=o(" (Canine model)"),zPo=l(),xF=a("li"),pce=a("strong"),QPo=o("convbert"),WPo=o(" \u2014 "),oD=a("a"),HPo=o("ConvBertForQuestionAnswering"),UPo=o(" (ConvBERT model)"),JPo=l(),kF=a("li"),_ce=a("strong"),YPo=o("data2vec-text"),KPo=o(" \u2014 "),rD=a("a"),ZPo=o("Data2VecTextForQuestionAnswering"),e$o=o(" (Data2VecText model)"),o$o=l(),SF=a("li"),uce=a("strong"),r$o=o("deberta"),t$o=o(" \u2014 "),tD=a("a"),a$o=o("DebertaForQuestionAnswering"),n$o=o(" (DeBERTa model)"),s$o=l(),RF=a("li"),bce=a("strong"),l$o=o("deberta-v2"),i$o=o(" \u2014 "),aD=a("a"),d$o=o("DebertaV2ForQuestionAnswering"),c$o=o(" (DeBERTa-v2 model)"),f$o=l(),BF=a("li"),Fce=a("strong"),m$o=o("distilbert"),g$o=o(" \u2014 "),nD=a("a"),h$o=o("DistilBertForQuestionAnswering"),p$o=o(" (DistilBERT model)"),_$o=l(),PF=a("li"),vce=a("strong"),u$o=o("electra"),b$o=o(" \u2014 "),sD=a("a"),F$o=o("ElectraForQuestionAnswering"),v$o=o(" (ELECTRA model)"),T$o=l(),$F=a("li"),Tce=a("strong"),M$o=o("flaubert"),E$o=o(" \u2014 "),lD=a("a"),C$o=o("FlaubertForQuestionAnsweringSimple"),w$o=o(" (FlauBERT model)"),A$o=l(),IF=a("li"),Mce=a("strong"),y$o=o("fnet"),L$o=o(" \u2014 "),iD=a("a"),x$o=o("FNetForQuestionAnswering"),k$o=o(" (FNet model)"),S$o=l(),qF=a("li"),Ece=a("strong"),R$o=o("funnel"),B$o=o(" \u2014 "),dD=a("a"),P$o=o("FunnelForQuestionAnswering"),$$o=o(" (Funnel Transformer model)"),I$o=l(),NF=a("li"),Cce=a("strong"),q$o=o("gptj"),N$o=o(" \u2014 "),cD=a("a"),j$o=o("GPTJForQuestionAnswering"),D$o=o(" (GPT-J model)"),G$o=l(),jF=a("li"),wce=a("strong"),O$o=o("ibert"),V$o=o(" \u2014 "),fD=a("a"),X$o=o("IBertForQuestionAnswering"),z$o=o(" (I-BERT model)"),Q$o=l(),DF=a("li"),Ace=a("strong"),W$o=o("layoutlmv2"),H$o=o(" \u2014 "),mD=a("a"),U$o=o("LayoutLMv2ForQuestionAnswering"),J$o=o(" (LayoutLMv2 model)"),Y$o=l(),GF=a("li"),yce=a("strong"),K$o=o("led"),Z$o=o(" \u2014 "),gD=a("a"),eIo=o("LEDForQuestionAnswering"),oIo=o(" (LED model)"),rIo=l(),OF=a("li"),Lce=a("strong"),tIo=o("longformer"),aIo=o(" \u2014 "),hD=a("a"),nIo=o("LongformerForQuestionAnswering"),sIo=o(" (Longformer model)"),lIo=l(),VF=a("li"),xce=a("strong"),iIo=o("lxmert"),dIo=o(" \u2014 "),pD=a("a"),cIo=o("LxmertForQuestionAnswering"),fIo=o(" (LXMERT model)"),mIo=l(),XF=a("li"),kce=a("strong"),gIo=o("mbart"),hIo=o(" \u2014 "),_D=a("a"),pIo=o("MBartForQuestionAnswering"),_Io=o(" (mBART model)"),uIo=l(),zF=a("li"),Sce=a("strong"),bIo=o("megatron-bert"),FIo=o(" \u2014 "),uD=a("a"),vIo=o("MegatronBertForQuestionAnswering"),TIo=o(" (MegatronBert model)"),MIo=l(),QF=a("li"),Rce=a("strong"),EIo=o("mobilebert"),CIo=o(" \u2014 "),bD=a("a"),wIo=o("MobileBertForQuestionAnswering"),AIo=o(" (MobileBERT model)"),yIo=l(),WF=a("li"),Bce=a("strong"),LIo=o("mpnet"),xIo=o(" \u2014 "),FD=a("a"),kIo=o("MPNetForQuestionAnswering"),SIo=o(" (MPNet model)"),RIo=l(),HF=a("li"),Pce=a("strong"),BIo=o("nystromformer"),PIo=o(" \u2014 "),vD=a("a"),$Io=o("NystromformerForQuestionAnswering"),IIo=o(" (Nystromformer model)"),qIo=l(),UF=a("li"),$ce=a("strong"),NIo=o("qdqbert"),jIo=o(" \u2014 "),TD=a("a"),DIo=o("QDQBertForQuestionAnswering"),GIo=o(" (QDQBert model)"),OIo=l(),JF=a("li"),Ice=a("strong"),VIo=o("reformer"),XIo=o(" \u2014 "),MD=a("a"),zIo=o("ReformerForQuestionAnswering"),QIo=o(" (Reformer model)"),WIo=l(),YF=a("li"),qce=a("strong"),HIo=o("rembert"),UIo=o(" \u2014 "),ED=a("a"),JIo=o("RemBertForQuestionAnswering"),YIo=o(" (RemBERT model)"),KIo=l(),KF=a("li"),Nce=a("strong"),ZIo=o("roberta"),eqo=o(" \u2014 "),CD=a("a"),oqo=o("RobertaForQuestionAnswering"),rqo=o(" (RoBERTa model)"),tqo=l(),ZF=a("li"),jce=a("strong"),aqo=o("roformer"),nqo=o(" \u2014 "),wD=a("a"),sqo=o("RoFormerForQuestionAnswering"),lqo=o(" (RoFormer model)"),iqo=l(),ev=a("li"),Dce=a("strong"),dqo=o("splinter"),cqo=o(" \u2014 "),AD=a("a"),fqo=o("SplinterForQuestionAnswering"),mqo=o(" (Splinter model)"),gqo=l(),ov=a("li"),Gce=a("strong"),hqo=o("squeezebert"),pqo=o(" \u2014 "),yD=a("a"),_qo=o("SqueezeBertForQuestionAnswering"),uqo=o(" (SqueezeBERT model)"),bqo=l(),rv=a("li"),Oce=a("strong"),Fqo=o("xlm"),vqo=o(" \u2014 "),LD=a("a"),Tqo=o("XLMForQuestionAnsweringSimple"),Mqo=o(" (XLM model)"),Eqo=l(),tv=a("li"),Vce=a("strong"),Cqo=o("xlm-roberta"),wqo=o(" \u2014 "),xD=a("a"),Aqo=o("XLMRobertaForQuestionAnswering"),yqo=o(" (XLM-RoBERTa model)"),Lqo=l(),av=a("li"),Xce=a("strong"),xqo=o("xlm-roberta-xl"),kqo=o(" \u2014 "),kD=a("a"),Sqo=o("XLMRobertaXLForQuestionAnswering"),Rqo=o(" (XLM-RoBERTa-XL model)"),Bqo=l(),nv=a("li"),zce=a("strong"),Pqo=o("xlnet"),$qo=o(" \u2014 "),SD=a("a"),Iqo=o("XLNetForQuestionAnsweringSimple"),qqo=o(" (XLNet model)"),Nqo=l(),sv=a("li"),Qce=a("strong"),jqo=o("yoso"),Dqo=o(" \u2014 "),RD=a("a"),Gqo=o("YosoForQuestionAnswering"),Oqo=o(" (YOSO model)"),Vqo=l(),lv=a("p"),Xqo=o("The model is set in evaluation mode by default using "),Wce=a("code"),zqo=o("model.eval()"),Qqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hce=a("code"),Wqo=o("model.train()"),Hqo=l(),Uce=a("p"),Uqo=o("Examples:"),Jqo=l(),f(F5.$$.fragment),ZRe=l(),yd=a("h2"),iv=a("a"),Jce=a("span"),f(v5.$$.fragment),Yqo=l(),Yce=a("span"),Kqo=o("AutoModelForTableQuestionAnswering"),eBe=l(),sr=a("div"),f(T5.$$.fragment),Zqo=l(),Ld=a("p"),eNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),BD=a("a"),oNo=o("from_pretrained()"),rNo=o(" class method or the "),PD=a("a"),tNo=o("from_config()"),aNo=o(` class
method.`),nNo=l(),M5=a("p"),sNo=o("This class cannot be instantiated directly using "),Kce=a("code"),lNo=o("__init__()"),iNo=o(" (throws an error)."),dNo=l(),et=a("div"),f(E5.$$.fragment),cNo=l(),Zce=a("p"),fNo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),mNo=l(),xd=a("p"),gNo=o(`Note:
Loading a model from its configuration file does `),efe=a("strong"),hNo=o("not"),pNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$D=a("a"),_No=o("from_pretrained()"),uNo=o(" to load the model weights."),bNo=l(),ofe=a("p"),FNo=o("Examples:"),vNo=l(),f(C5.$$.fragment),TNo=l(),We=a("div"),f(w5.$$.fragment),MNo=l(),rfe=a("p"),ENo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),CNo=l(),en=a("p"),wNo=o("The model class to instantiate is selected based on the "),tfe=a("code"),ANo=o("model_type"),yNo=o(` property of the config object (either
passed as an argument or loaded from `),afe=a("code"),LNo=o("pretrained_model_name_or_path"),xNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nfe=a("code"),kNo=o("pretrained_model_name_or_path"),SNo=o(":"),RNo=l(),sfe=a("ul"),dv=a("li"),lfe=a("strong"),BNo=o("tapas"),PNo=o(" \u2014 "),ID=a("a"),$No=o("TapasForQuestionAnswering"),INo=o(" (TAPAS model)"),qNo=l(),cv=a("p"),NNo=o("The model is set in evaluation mode by default using "),ife=a("code"),jNo=o("model.eval()"),DNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dfe=a("code"),GNo=o("model.train()"),ONo=l(),cfe=a("p"),VNo=o("Examples:"),XNo=l(),f(A5.$$.fragment),oBe=l(),kd=a("h2"),fv=a("a"),ffe=a("span"),f(y5.$$.fragment),zNo=l(),mfe=a("span"),QNo=o("AutoModelForImageClassification"),rBe=l(),lr=a("div"),f(L5.$$.fragment),WNo=l(),Sd=a("p"),HNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),qD=a("a"),UNo=o("from_pretrained()"),JNo=o(" class method or the "),ND=a("a"),YNo=o("from_config()"),KNo=o(` class
method.`),ZNo=l(),x5=a("p"),ejo=o("This class cannot be instantiated directly using "),gfe=a("code"),ojo=o("__init__()"),rjo=o(" (throws an error)."),tjo=l(),ot=a("div"),f(k5.$$.fragment),ajo=l(),hfe=a("p"),njo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),sjo=l(),Rd=a("p"),ljo=o(`Note:
Loading a model from its configuration file does `),pfe=a("strong"),ijo=o("not"),djo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jD=a("a"),cjo=o("from_pretrained()"),fjo=o(" to load the model weights."),mjo=l(),_fe=a("p"),gjo=o("Examples:"),hjo=l(),f(S5.$$.fragment),pjo=l(),He=a("div"),f(R5.$$.fragment),_jo=l(),ufe=a("p"),ujo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),bjo=l(),on=a("p"),Fjo=o("The model class to instantiate is selected based on the "),bfe=a("code"),vjo=o("model_type"),Tjo=o(` property of the config object (either
passed as an argument or loaded from `),Ffe=a("code"),Mjo=o("pretrained_model_name_or_path"),Ejo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vfe=a("code"),Cjo=o("pretrained_model_name_or_path"),wjo=o(":"),Ajo=l(),ce=a("ul"),mv=a("li"),Tfe=a("strong"),yjo=o("beit"),Ljo=o(" \u2014 "),DD=a("a"),xjo=o("BeitForImageClassification"),kjo=o(" (BEiT model)"),Sjo=l(),gv=a("li"),Mfe=a("strong"),Rjo=o("convnext"),Bjo=o(" \u2014 "),GD=a("a"),Pjo=o("ConvNextForImageClassification"),$jo=o(" (ConvNext model)"),Ijo=l(),Gs=a("li"),Efe=a("strong"),qjo=o("deit"),Njo=o(" \u2014 "),OD=a("a"),jjo=o("DeiTForImageClassification"),Djo=o(" or "),VD=a("a"),Gjo=o("DeiTForImageClassificationWithTeacher"),Ojo=o(" (DeiT model)"),Vjo=l(),hv=a("li"),Cfe=a("strong"),Xjo=o("imagegpt"),zjo=o(" \u2014 "),XD=a("a"),Qjo=o("ImageGPTForImageClassification"),Wjo=o(" (ImageGPT model)"),Hjo=l(),ma=a("li"),wfe=a("strong"),Ujo=o("perceiver"),Jjo=o(" \u2014 "),zD=a("a"),Yjo=o("PerceiverForImageClassificationLearned"),Kjo=o(" or "),QD=a("a"),Zjo=o("PerceiverForImageClassificationFourier"),eDo=o(" or "),WD=a("a"),oDo=o("PerceiverForImageClassificationConvProcessing"),rDo=o(" (Perceiver model)"),tDo=l(),pv=a("li"),Afe=a("strong"),aDo=o("poolformer"),nDo=o(" \u2014 "),HD=a("a"),sDo=o("PoolFormerForImageClassification"),lDo=o(" (PoolFormer model)"),iDo=l(),_v=a("li"),yfe=a("strong"),dDo=o("regnet"),cDo=o(" \u2014 "),UD=a("a"),fDo=o("RegNetForImageClassification"),mDo=o(" (RegNet model)"),gDo=l(),uv=a("li"),Lfe=a("strong"),hDo=o("resnet"),pDo=o(" \u2014 "),JD=a("a"),_Do=o("ResNetForImageClassification"),uDo=o(" (ResNet model)"),bDo=l(),bv=a("li"),xfe=a("strong"),FDo=o("segformer"),vDo=o(" \u2014 "),YD=a("a"),TDo=o("SegformerForImageClassification"),MDo=o(" (SegFormer model)"),EDo=l(),Fv=a("li"),kfe=a("strong"),CDo=o("swin"),wDo=o(" \u2014 "),KD=a("a"),ADo=o("SwinForImageClassification"),yDo=o(" (Swin model)"),LDo=l(),vv=a("li"),Sfe=a("strong"),xDo=o("van"),kDo=o(" \u2014 "),ZD=a("a"),SDo=o("VanForImageClassification"),RDo=o(" (VAN model)"),BDo=l(),Tv=a("li"),Rfe=a("strong"),PDo=o("vit"),$Do=o(" \u2014 "),eG=a("a"),IDo=o("ViTForImageClassification"),qDo=o(" (ViT model)"),NDo=l(),Mv=a("p"),jDo=o("The model is set in evaluation mode by default using "),Bfe=a("code"),DDo=o("model.eval()"),GDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pfe=a("code"),ODo=o("model.train()"),VDo=l(),$fe=a("p"),XDo=o("Examples:"),zDo=l(),f(B5.$$.fragment),tBe=l(),Bd=a("h2"),Ev=a("a"),Ife=a("span"),f(P5.$$.fragment),QDo=l(),qfe=a("span"),WDo=o("AutoModelForVision2Seq"),aBe=l(),ir=a("div"),f($5.$$.fragment),HDo=l(),Pd=a("p"),UDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),oG=a("a"),JDo=o("from_pretrained()"),YDo=o(" class method or the "),rG=a("a"),KDo=o("from_config()"),ZDo=o(` class
method.`),eGo=l(),I5=a("p"),oGo=o("This class cannot be instantiated directly using "),Nfe=a("code"),rGo=o("__init__()"),tGo=o(" (throws an error)."),aGo=l(),rt=a("div"),f(q5.$$.fragment),nGo=l(),jfe=a("p"),sGo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),lGo=l(),$d=a("p"),iGo=o(`Note:
Loading a model from its configuration file does `),Dfe=a("strong"),dGo=o("not"),cGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tG=a("a"),fGo=o("from_pretrained()"),mGo=o(" to load the model weights."),gGo=l(),Gfe=a("p"),hGo=o("Examples:"),pGo=l(),f(N5.$$.fragment),_Go=l(),Ue=a("div"),f(j5.$$.fragment),uGo=l(),Ofe=a("p"),bGo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),FGo=l(),rn=a("p"),vGo=o("The model class to instantiate is selected based on the "),Vfe=a("code"),TGo=o("model_type"),MGo=o(` property of the config object (either
passed as an argument or loaded from `),Xfe=a("code"),EGo=o("pretrained_model_name_or_path"),CGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zfe=a("code"),wGo=o("pretrained_model_name_or_path"),AGo=o(":"),yGo=l(),Qfe=a("ul"),Cv=a("li"),Wfe=a("strong"),LGo=o("vision-encoder-decoder"),xGo=o(" \u2014 "),aG=a("a"),kGo=o("VisionEncoderDecoderModel"),SGo=o(" (Vision Encoder decoder model)"),RGo=l(),wv=a("p"),BGo=o("The model is set in evaluation mode by default using "),Hfe=a("code"),PGo=o("model.eval()"),$Go=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ufe=a("code"),IGo=o("model.train()"),qGo=l(),Jfe=a("p"),NGo=o("Examples:"),jGo=l(),f(D5.$$.fragment),nBe=l(),Id=a("h2"),Av=a("a"),Yfe=a("span"),f(G5.$$.fragment),DGo=l(),Kfe=a("span"),GGo=o("AutoModelForAudioClassification"),sBe=l(),dr=a("div"),f(O5.$$.fragment),OGo=l(),qd=a("p"),VGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),nG=a("a"),XGo=o("from_pretrained()"),zGo=o(" class method or the "),sG=a("a"),QGo=o("from_config()"),WGo=o(` class
method.`),HGo=l(),V5=a("p"),UGo=o("This class cannot be instantiated directly using "),Zfe=a("code"),JGo=o("__init__()"),YGo=o(" (throws an error)."),KGo=l(),tt=a("div"),f(X5.$$.fragment),ZGo=l(),eme=a("p"),eOo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),oOo=l(),Nd=a("p"),rOo=o(`Note:
Loading a model from its configuration file does `),ome=a("strong"),tOo=o("not"),aOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lG=a("a"),nOo=o("from_pretrained()"),sOo=o(" to load the model weights."),lOo=l(),rme=a("p"),iOo=o("Examples:"),dOo=l(),f(z5.$$.fragment),cOo=l(),Je=a("div"),f(Q5.$$.fragment),fOo=l(),tme=a("p"),mOo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),gOo=l(),tn=a("p"),hOo=o("The model class to instantiate is selected based on the "),ame=a("code"),pOo=o("model_type"),_Oo=o(` property of the config object (either
passed as an argument or loaded from `),nme=a("code"),uOo=o("pretrained_model_name_or_path"),bOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sme=a("code"),FOo=o("pretrained_model_name_or_path"),vOo=o(":"),TOo=l(),Se=a("ul"),yv=a("li"),lme=a("strong"),MOo=o("data2vec-audio"),EOo=o(" \u2014 "),iG=a("a"),COo=o("Data2VecAudioForSequenceClassification"),wOo=o(" (Data2VecAudio model)"),AOo=l(),Lv=a("li"),ime=a("strong"),yOo=o("hubert"),LOo=o(" \u2014 "),dG=a("a"),xOo=o("HubertForSequenceClassification"),kOo=o(" (Hubert model)"),SOo=l(),xv=a("li"),dme=a("strong"),ROo=o("sew"),BOo=o(" \u2014 "),cG=a("a"),POo=o("SEWForSequenceClassification"),$Oo=o(" (SEW model)"),IOo=l(),kv=a("li"),cme=a("strong"),qOo=o("sew-d"),NOo=o(" \u2014 "),fG=a("a"),jOo=o("SEWDForSequenceClassification"),DOo=o(" (SEW-D model)"),GOo=l(),Sv=a("li"),fme=a("strong"),OOo=o("unispeech"),VOo=o(" \u2014 "),mG=a("a"),XOo=o("UniSpeechForSequenceClassification"),zOo=o(" (UniSpeech model)"),QOo=l(),Rv=a("li"),mme=a("strong"),WOo=o("unispeech-sat"),HOo=o(" \u2014 "),gG=a("a"),UOo=o("UniSpeechSatForSequenceClassification"),JOo=o(" (UniSpeechSat model)"),YOo=l(),Bv=a("li"),gme=a("strong"),KOo=o("wav2vec2"),ZOo=o(" \u2014 "),hG=a("a"),eVo=o("Wav2Vec2ForSequenceClassification"),oVo=o(" (Wav2Vec2 model)"),rVo=l(),Pv=a("li"),hme=a("strong"),tVo=o("wavlm"),aVo=o(" \u2014 "),pG=a("a"),nVo=o("WavLMForSequenceClassification"),sVo=o(" (WavLM model)"),lVo=l(),$v=a("p"),iVo=o("The model is set in evaluation mode by default using "),pme=a("code"),dVo=o("model.eval()"),cVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_me=a("code"),fVo=o("model.train()"),mVo=l(),ume=a("p"),gVo=o("Examples:"),hVo=l(),f(W5.$$.fragment),lBe=l(),jd=a("h2"),Iv=a("a"),bme=a("span"),f(H5.$$.fragment),pVo=l(),Fme=a("span"),_Vo=o("AutoModelForAudioFrameClassification"),iBe=l(),cr=a("div"),f(U5.$$.fragment),uVo=l(),Dd=a("p"),bVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),_G=a("a"),FVo=o("from_pretrained()"),vVo=o(" class method or the "),uG=a("a"),TVo=o("from_config()"),MVo=o(` class
method.`),EVo=l(),J5=a("p"),CVo=o("This class cannot be instantiated directly using "),vme=a("code"),wVo=o("__init__()"),AVo=o(" (throws an error)."),yVo=l(),at=a("div"),f(Y5.$$.fragment),LVo=l(),Tme=a("p"),xVo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),kVo=l(),Gd=a("p"),SVo=o(`Note:
Loading a model from its configuration file does `),Mme=a("strong"),RVo=o("not"),BVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bG=a("a"),PVo=o("from_pretrained()"),$Vo=o(" to load the model weights."),IVo=l(),Eme=a("p"),qVo=o("Examples:"),NVo=l(),f(K5.$$.fragment),jVo=l(),Ye=a("div"),f(Z5.$$.fragment),DVo=l(),Cme=a("p"),GVo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),OVo=l(),an=a("p"),VVo=o("The model class to instantiate is selected based on the "),wme=a("code"),XVo=o("model_type"),zVo=o(` property of the config object (either
passed as an argument or loaded from `),Ame=a("code"),QVo=o("pretrained_model_name_or_path"),WVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yme=a("code"),HVo=o("pretrained_model_name_or_path"),UVo=o(":"),JVo=l(),nn=a("ul"),qv=a("li"),Lme=a("strong"),YVo=o("data2vec-audio"),KVo=o(" \u2014 "),FG=a("a"),ZVo=o("Data2VecAudioForAudioFrameClassification"),eXo=o(" (Data2VecAudio model)"),oXo=l(),Nv=a("li"),xme=a("strong"),rXo=o("unispeech-sat"),tXo=o(" \u2014 "),vG=a("a"),aXo=o("UniSpeechSatForAudioFrameClassification"),nXo=o(" (UniSpeechSat model)"),sXo=l(),jv=a("li"),kme=a("strong"),lXo=o("wav2vec2"),iXo=o(" \u2014 "),TG=a("a"),dXo=o("Wav2Vec2ForAudioFrameClassification"),cXo=o(" (Wav2Vec2 model)"),fXo=l(),Dv=a("li"),Sme=a("strong"),mXo=o("wavlm"),gXo=o(" \u2014 "),MG=a("a"),hXo=o("WavLMForAudioFrameClassification"),pXo=o(" (WavLM model)"),_Xo=l(),Gv=a("p"),uXo=o("The model is set in evaluation mode by default using "),Rme=a("code"),bXo=o("model.eval()"),FXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bme=a("code"),vXo=o("model.train()"),TXo=l(),Pme=a("p"),MXo=o("Examples:"),EXo=l(),f(e3.$$.fragment),dBe=l(),Od=a("h2"),Ov=a("a"),$me=a("span"),f(o3.$$.fragment),CXo=l(),Ime=a("span"),wXo=o("AutoModelForCTC"),cBe=l(),fr=a("div"),f(r3.$$.fragment),AXo=l(),Vd=a("p"),yXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),EG=a("a"),LXo=o("from_pretrained()"),xXo=o(" class method or the "),CG=a("a"),kXo=o("from_config()"),SXo=o(` class
method.`),RXo=l(),t3=a("p"),BXo=o("This class cannot be instantiated directly using "),qme=a("code"),PXo=o("__init__()"),$Xo=o(" (throws an error)."),IXo=l(),nt=a("div"),f(a3.$$.fragment),qXo=l(),Nme=a("p"),NXo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),jXo=l(),Xd=a("p"),DXo=o(`Note:
Loading a model from its configuration file does `),jme=a("strong"),GXo=o("not"),OXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wG=a("a"),VXo=o("from_pretrained()"),XXo=o(" to load the model weights."),zXo=l(),Dme=a("p"),QXo=o("Examples:"),WXo=l(),f(n3.$$.fragment),HXo=l(),Ke=a("div"),f(s3.$$.fragment),UXo=l(),Gme=a("p"),JXo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),YXo=l(),sn=a("p"),KXo=o("The model class to instantiate is selected based on the "),Ome=a("code"),ZXo=o("model_type"),ezo=o(` property of the config object (either
passed as an argument or loaded from `),Vme=a("code"),ozo=o("pretrained_model_name_or_path"),rzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xme=a("code"),tzo=o("pretrained_model_name_or_path"),azo=o(":"),nzo=l(),Re=a("ul"),Vv=a("li"),zme=a("strong"),szo=o("data2vec-audio"),lzo=o(" \u2014 "),AG=a("a"),izo=o("Data2VecAudioForCTC"),dzo=o(" (Data2VecAudio model)"),czo=l(),Xv=a("li"),Qme=a("strong"),fzo=o("hubert"),mzo=o(" \u2014 "),yG=a("a"),gzo=o("HubertForCTC"),hzo=o(" (Hubert model)"),pzo=l(),zv=a("li"),Wme=a("strong"),_zo=o("sew"),uzo=o(" \u2014 "),LG=a("a"),bzo=o("SEWForCTC"),Fzo=o(" (SEW model)"),vzo=l(),Qv=a("li"),Hme=a("strong"),Tzo=o("sew-d"),Mzo=o(" \u2014 "),xG=a("a"),Ezo=o("SEWDForCTC"),Czo=o(" (SEW-D model)"),wzo=l(),Wv=a("li"),Ume=a("strong"),Azo=o("unispeech"),yzo=o(" \u2014 "),kG=a("a"),Lzo=o("UniSpeechForCTC"),xzo=o(" (UniSpeech model)"),kzo=l(),Hv=a("li"),Jme=a("strong"),Szo=o("unispeech-sat"),Rzo=o(" \u2014 "),SG=a("a"),Bzo=o("UniSpeechSatForCTC"),Pzo=o(" (UniSpeechSat model)"),$zo=l(),Uv=a("li"),Yme=a("strong"),Izo=o("wav2vec2"),qzo=o(" \u2014 "),RG=a("a"),Nzo=o("Wav2Vec2ForCTC"),jzo=o(" (Wav2Vec2 model)"),Dzo=l(),Jv=a("li"),Kme=a("strong"),Gzo=o("wavlm"),Ozo=o(" \u2014 "),BG=a("a"),Vzo=o("WavLMForCTC"),Xzo=o(" (WavLM model)"),zzo=l(),Yv=a("p"),Qzo=o("The model is set in evaluation mode by default using "),Zme=a("code"),Wzo=o("model.eval()"),Hzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ege=a("code"),Uzo=o("model.train()"),Jzo=l(),oge=a("p"),Yzo=o("Examples:"),Kzo=l(),f(l3.$$.fragment),fBe=l(),zd=a("h2"),Kv=a("a"),rge=a("span"),f(i3.$$.fragment),Zzo=l(),tge=a("span"),eQo=o("AutoModelForSpeechSeq2Seq"),mBe=l(),mr=a("div"),f(d3.$$.fragment),oQo=l(),Qd=a("p"),rQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),PG=a("a"),tQo=o("from_pretrained()"),aQo=o(" class method or the "),$G=a("a"),nQo=o("from_config()"),sQo=o(` class
method.`),lQo=l(),c3=a("p"),iQo=o("This class cannot be instantiated directly using "),age=a("code"),dQo=o("__init__()"),cQo=o(" (throws an error)."),fQo=l(),st=a("div"),f(f3.$$.fragment),mQo=l(),nge=a("p"),gQo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),hQo=l(),Wd=a("p"),pQo=o(`Note:
Loading a model from its configuration file does `),sge=a("strong"),_Qo=o("not"),uQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IG=a("a"),bQo=o("from_pretrained()"),FQo=o(" to load the model weights."),vQo=l(),lge=a("p"),TQo=o("Examples:"),MQo=l(),f(m3.$$.fragment),EQo=l(),Ze=a("div"),f(g3.$$.fragment),CQo=l(),ige=a("p"),wQo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),AQo=l(),ln=a("p"),yQo=o("The model class to instantiate is selected based on the "),dge=a("code"),LQo=o("model_type"),xQo=o(` property of the config object (either
passed as an argument or loaded from `),cge=a("code"),kQo=o("pretrained_model_name_or_path"),SQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fge=a("code"),RQo=o("pretrained_model_name_or_path"),BQo=o(":"),PQo=l(),h3=a("ul"),Zv=a("li"),mge=a("strong"),$Qo=o("speech-encoder-decoder"),IQo=o(" \u2014 "),qG=a("a"),qQo=o("SpeechEncoderDecoderModel"),NQo=o(" (Speech Encoder decoder model)"),jQo=l(),e6=a("li"),gge=a("strong"),DQo=o("speech_to_text"),GQo=o(" \u2014 "),NG=a("a"),OQo=o("Speech2TextForConditionalGeneration"),VQo=o(" (Speech2Text model)"),XQo=l(),o6=a("p"),zQo=o("The model is set in evaluation mode by default using "),hge=a("code"),QQo=o("model.eval()"),WQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pge=a("code"),HQo=o("model.train()"),UQo=l(),_ge=a("p"),JQo=o("Examples:"),YQo=l(),f(p3.$$.fragment),gBe=l(),Hd=a("h2"),r6=a("a"),uge=a("span"),f(_3.$$.fragment),KQo=l(),bge=a("span"),ZQo=o("AutoModelForAudioXVector"),hBe=l(),gr=a("div"),f(u3.$$.fragment),eWo=l(),Ud=a("p"),oWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),jG=a("a"),rWo=o("from_pretrained()"),tWo=o(" class method or the "),DG=a("a"),aWo=o("from_config()"),nWo=o(` class
method.`),sWo=l(),b3=a("p"),lWo=o("This class cannot be instantiated directly using "),Fge=a("code"),iWo=o("__init__()"),dWo=o(" (throws an error)."),cWo=l(),lt=a("div"),f(F3.$$.fragment),fWo=l(),vge=a("p"),mWo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),gWo=l(),Jd=a("p"),hWo=o(`Note:
Loading a model from its configuration file does `),Tge=a("strong"),pWo=o("not"),_Wo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GG=a("a"),uWo=o("from_pretrained()"),bWo=o(" to load the model weights."),FWo=l(),Mge=a("p"),vWo=o("Examples:"),TWo=l(),f(v3.$$.fragment),MWo=l(),eo=a("div"),f(T3.$$.fragment),EWo=l(),Ege=a("p"),CWo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),wWo=l(),dn=a("p"),AWo=o("The model class to instantiate is selected based on the "),Cge=a("code"),yWo=o("model_type"),LWo=o(` property of the config object (either
passed as an argument or loaded from `),wge=a("code"),xWo=o("pretrained_model_name_or_path"),kWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Age=a("code"),SWo=o("pretrained_model_name_or_path"),RWo=o(":"),BWo=l(),cn=a("ul"),t6=a("li"),yge=a("strong"),PWo=o("data2vec-audio"),$Wo=o(" \u2014 "),OG=a("a"),IWo=o("Data2VecAudioForXVector"),qWo=o(" (Data2VecAudio model)"),NWo=l(),a6=a("li"),Lge=a("strong"),jWo=o("unispeech-sat"),DWo=o(" \u2014 "),VG=a("a"),GWo=o("UniSpeechSatForXVector"),OWo=o(" (UniSpeechSat model)"),VWo=l(),n6=a("li"),xge=a("strong"),XWo=o("wav2vec2"),zWo=o(" \u2014 "),XG=a("a"),QWo=o("Wav2Vec2ForXVector"),WWo=o(" (Wav2Vec2 model)"),HWo=l(),s6=a("li"),kge=a("strong"),UWo=o("wavlm"),JWo=o(" \u2014 "),zG=a("a"),YWo=o("WavLMForXVector"),KWo=o(" (WavLM model)"),ZWo=l(),l6=a("p"),eHo=o("The model is set in evaluation mode by default using "),Sge=a("code"),oHo=o("model.eval()"),rHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rge=a("code"),tHo=o("model.train()"),aHo=l(),Bge=a("p"),nHo=o("Examples:"),sHo=l(),f(M3.$$.fragment),pBe=l(),Yd=a("h2"),i6=a("a"),Pge=a("span"),f(E3.$$.fragment),lHo=l(),$ge=a("span"),iHo=o("AutoModelForMaskedImageModeling"),_Be=l(),hr=a("div"),f(C3.$$.fragment),dHo=l(),Kd=a("p"),cHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),QG=a("a"),fHo=o("from_pretrained()"),mHo=o(" class method or the "),WG=a("a"),gHo=o("from_config()"),hHo=o(` class
method.`),pHo=l(),w3=a("p"),_Ho=o("This class cannot be instantiated directly using "),Ige=a("code"),uHo=o("__init__()"),bHo=o(" (throws an error)."),FHo=l(),it=a("div"),f(A3.$$.fragment),vHo=l(),qge=a("p"),THo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),MHo=l(),Zd=a("p"),EHo=o(`Note:
Loading a model from its configuration file does `),Nge=a("strong"),CHo=o("not"),wHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HG=a("a"),AHo=o("from_pretrained()"),yHo=o(" to load the model weights."),LHo=l(),jge=a("p"),xHo=o("Examples:"),kHo=l(),f(y3.$$.fragment),SHo=l(),oo=a("div"),f(L3.$$.fragment),RHo=l(),Dge=a("p"),BHo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),PHo=l(),fn=a("p"),$Ho=o("The model class to instantiate is selected based on the "),Gge=a("code"),IHo=o("model_type"),qHo=o(` property of the config object (either
passed as an argument or loaded from `),Oge=a("code"),NHo=o("pretrained_model_name_or_path"),jHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vge=a("code"),DHo=o("pretrained_model_name_or_path"),GHo=o(":"),OHo=l(),ec=a("ul"),d6=a("li"),Xge=a("strong"),VHo=o("deit"),XHo=o(" \u2014 "),UG=a("a"),zHo=o("DeiTForMaskedImageModeling"),QHo=o(" (DeiT model)"),WHo=l(),c6=a("li"),zge=a("strong"),HHo=o("swin"),UHo=o(" \u2014 "),JG=a("a"),JHo=o("SwinForMaskedImageModeling"),YHo=o(" (Swin model)"),KHo=l(),f6=a("li"),Qge=a("strong"),ZHo=o("vit"),eUo=o(" \u2014 "),YG=a("a"),oUo=o("ViTForMaskedImageModeling"),rUo=o(" (ViT model)"),tUo=l(),m6=a("p"),aUo=o("The model is set in evaluation mode by default using "),Wge=a("code"),nUo=o("model.eval()"),sUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hge=a("code"),lUo=o("model.train()"),iUo=l(),Uge=a("p"),dUo=o("Examples:"),cUo=l(),f(x3.$$.fragment),uBe=l(),oc=a("h2"),g6=a("a"),Jge=a("span"),f(k3.$$.fragment),fUo=l(),Yge=a("span"),mUo=o("AutoModelForObjectDetection"),bBe=l(),pr=a("div"),f(S3.$$.fragment),gUo=l(),rc=a("p"),hUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),KG=a("a"),pUo=o("from_pretrained()"),_Uo=o(" class method or the "),ZG=a("a"),uUo=o("from_config()"),bUo=o(` class
method.`),FUo=l(),R3=a("p"),vUo=o("This class cannot be instantiated directly using "),Kge=a("code"),TUo=o("__init__()"),MUo=o(" (throws an error)."),EUo=l(),dt=a("div"),f(B3.$$.fragment),CUo=l(),Zge=a("p"),wUo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),AUo=l(),tc=a("p"),yUo=o(`Note:
Loading a model from its configuration file does `),ehe=a("strong"),LUo=o("not"),xUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eO=a("a"),kUo=o("from_pretrained()"),SUo=o(" to load the model weights."),RUo=l(),ohe=a("p"),BUo=o("Examples:"),PUo=l(),f(P3.$$.fragment),$Uo=l(),ro=a("div"),f($3.$$.fragment),IUo=l(),rhe=a("p"),qUo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),NUo=l(),mn=a("p"),jUo=o("The model class to instantiate is selected based on the "),the=a("code"),DUo=o("model_type"),GUo=o(` property of the config object (either
passed as an argument or loaded from `),ahe=a("code"),OUo=o("pretrained_model_name_or_path"),VUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nhe=a("code"),XUo=o("pretrained_model_name_or_path"),zUo=o(":"),QUo=l(),she=a("ul"),h6=a("li"),lhe=a("strong"),WUo=o("detr"),HUo=o(" \u2014 "),oO=a("a"),UUo=o("DetrForObjectDetection"),JUo=o(" (DETR model)"),YUo=l(),p6=a("p"),KUo=o("The model is set in evaluation mode by default using "),ihe=a("code"),ZUo=o("model.eval()"),eJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dhe=a("code"),oJo=o("model.train()"),rJo=l(),che=a("p"),tJo=o("Examples:"),aJo=l(),f(I3.$$.fragment),FBe=l(),ac=a("h2"),_6=a("a"),fhe=a("span"),f(q3.$$.fragment),nJo=l(),mhe=a("span"),sJo=o("AutoModelForImageSegmentation"),vBe=l(),_r=a("div"),f(N3.$$.fragment),lJo=l(),nc=a("p"),iJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),rO=a("a"),dJo=o("from_pretrained()"),cJo=o(" class method or the "),tO=a("a"),fJo=o("from_config()"),mJo=o(` class
method.`),gJo=l(),j3=a("p"),hJo=o("This class cannot be instantiated directly using "),ghe=a("code"),pJo=o("__init__()"),_Jo=o(" (throws an error)."),uJo=l(),ct=a("div"),f(D3.$$.fragment),bJo=l(),hhe=a("p"),FJo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),vJo=l(),sc=a("p"),TJo=o(`Note:
Loading a model from its configuration file does `),phe=a("strong"),MJo=o("not"),EJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aO=a("a"),CJo=o("from_pretrained()"),wJo=o(" to load the model weights."),AJo=l(),_he=a("p"),yJo=o("Examples:"),LJo=l(),f(G3.$$.fragment),xJo=l(),to=a("div"),f(O3.$$.fragment),kJo=l(),uhe=a("p"),SJo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),RJo=l(),gn=a("p"),BJo=o("The model class to instantiate is selected based on the "),bhe=a("code"),PJo=o("model_type"),$Jo=o(` property of the config object (either
passed as an argument or loaded from `),Fhe=a("code"),IJo=o("pretrained_model_name_or_path"),qJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vhe=a("code"),NJo=o("pretrained_model_name_or_path"),jJo=o(":"),DJo=l(),The=a("ul"),u6=a("li"),Mhe=a("strong"),GJo=o("detr"),OJo=o(" \u2014 "),nO=a("a"),VJo=o("DetrForSegmentation"),XJo=o(" (DETR model)"),zJo=l(),b6=a("p"),QJo=o("The model is set in evaluation mode by default using "),Ehe=a("code"),WJo=o("model.eval()"),HJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Che=a("code"),UJo=o("model.train()"),JJo=l(),whe=a("p"),YJo=o("Examples:"),KJo=l(),f(V3.$$.fragment),TBe=l(),lc=a("h2"),F6=a("a"),Ahe=a("span"),f(X3.$$.fragment),ZJo=l(),yhe=a("span"),eYo=o("AutoModelForSemanticSegmentation"),MBe=l(),ur=a("div"),f(z3.$$.fragment),oYo=l(),ic=a("p"),rYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),sO=a("a"),tYo=o("from_pretrained()"),aYo=o(" class method or the "),lO=a("a"),nYo=o("from_config()"),sYo=o(` class
method.`),lYo=l(),Q3=a("p"),iYo=o("This class cannot be instantiated directly using "),Lhe=a("code"),dYo=o("__init__()"),cYo=o(" (throws an error)."),fYo=l(),ft=a("div"),f(W3.$$.fragment),mYo=l(),xhe=a("p"),gYo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),hYo=l(),dc=a("p"),pYo=o(`Note:
Loading a model from its configuration file does `),khe=a("strong"),_Yo=o("not"),uYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iO=a("a"),bYo=o("from_pretrained()"),FYo=o(" to load the model weights."),vYo=l(),She=a("p"),TYo=o("Examples:"),MYo=l(),f(H3.$$.fragment),EYo=l(),ao=a("div"),f(U3.$$.fragment),CYo=l(),Rhe=a("p"),wYo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),AYo=l(),hn=a("p"),yYo=o("The model class to instantiate is selected based on the "),Bhe=a("code"),LYo=o("model_type"),xYo=o(` property of the config object (either
passed as an argument or loaded from `),Phe=a("code"),kYo=o("pretrained_model_name_or_path"),SYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$he=a("code"),RYo=o("pretrained_model_name_or_path"),BYo=o(":"),PYo=l(),cc=a("ul"),v6=a("li"),Ihe=a("strong"),$Yo=o("beit"),IYo=o(" \u2014 "),dO=a("a"),qYo=o("BeitForSemanticSegmentation"),NYo=o(" (BEiT model)"),jYo=l(),T6=a("li"),qhe=a("strong"),DYo=o("dpt"),GYo=o(" \u2014 "),cO=a("a"),OYo=o("DPTForSemanticSegmentation"),VYo=o(" (DPT model)"),XYo=l(),M6=a("li"),Nhe=a("strong"),zYo=o("segformer"),QYo=o(" \u2014 "),fO=a("a"),WYo=o("SegformerForSemanticSegmentation"),HYo=o(" (SegFormer model)"),UYo=l(),E6=a("p"),JYo=o("The model is set in evaluation mode by default using "),jhe=a("code"),YYo=o("model.eval()"),KYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dhe=a("code"),ZYo=o("model.train()"),eKo=l(),Ghe=a("p"),oKo=o("Examples:"),rKo=l(),f(J3.$$.fragment),EBe=l(),fc=a("h2"),C6=a("a"),Ohe=a("span"),f(Y3.$$.fragment),tKo=l(),Vhe=a("span"),aKo=o("AutoModelForInstanceSegmentation"),CBe=l(),br=a("div"),f(K3.$$.fragment),nKo=l(),mc=a("p"),sKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),mO=a("a"),lKo=o("from_pretrained()"),iKo=o(" class method or the "),gO=a("a"),dKo=o("from_config()"),cKo=o(` class
method.`),fKo=l(),Z3=a("p"),mKo=o("This class cannot be instantiated directly using "),Xhe=a("code"),gKo=o("__init__()"),hKo=o(" (throws an error)."),pKo=l(),mt=a("div"),f(ew.$$.fragment),_Ko=l(),zhe=a("p"),uKo=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),bKo=l(),gc=a("p"),FKo=o(`Note:
Loading a model from its configuration file does `),Qhe=a("strong"),vKo=o("not"),TKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hO=a("a"),MKo=o("from_pretrained()"),EKo=o(" to load the model weights."),CKo=l(),Whe=a("p"),wKo=o("Examples:"),AKo=l(),f(ow.$$.fragment),yKo=l(),no=a("div"),f(rw.$$.fragment),LKo=l(),Hhe=a("p"),xKo=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),kKo=l(),pn=a("p"),SKo=o("The model class to instantiate is selected based on the "),Uhe=a("code"),RKo=o("model_type"),BKo=o(` property of the config object (either
passed as an argument or loaded from `),Jhe=a("code"),PKo=o("pretrained_model_name_or_path"),$Ko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yhe=a("code"),IKo=o("pretrained_model_name_or_path"),qKo=o(":"),NKo=l(),Khe=a("ul"),w6=a("li"),Zhe=a("strong"),jKo=o("maskformer"),DKo=o(" \u2014 "),pO=a("a"),GKo=o("MaskFormerForInstanceSegmentation"),OKo=o(" (MaskFormer model)"),VKo=l(),A6=a("p"),XKo=o("The model is set in evaluation mode by default using "),epe=a("code"),zKo=o("model.eval()"),QKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ope=a("code"),WKo=o("model.train()"),HKo=l(),rpe=a("p"),UKo=o("Examples:"),JKo=l(),f(tw.$$.fragment),wBe=l(),hc=a("h2"),y6=a("a"),tpe=a("span"),f(aw.$$.fragment),YKo=l(),ape=a("span"),KKo=o("TFAutoModel"),ABe=l(),Fr=a("div"),f(nw.$$.fragment),ZKo=l(),pc=a("p"),eZo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),_O=a("a"),oZo=o("from_pretrained()"),rZo=o(" class method or the "),uO=a("a"),tZo=o("from_config()"),aZo=o(` class
method.`),nZo=l(),sw=a("p"),sZo=o("This class cannot be instantiated directly using "),npe=a("code"),lZo=o("__init__()"),iZo=o(" (throws an error)."),dZo=l(),gt=a("div"),f(lw.$$.fragment),cZo=l(),spe=a("p"),fZo=o("Instantiates one of the base model classes of the library from a configuration."),mZo=l(),_c=a("p"),gZo=o(`Note:
Loading a model from its configuration file does `),lpe=a("strong"),hZo=o("not"),pZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bO=a("a"),_Zo=o("from_pretrained()"),uZo=o(" to load the model weights."),bZo=l(),ipe=a("p"),FZo=o("Examples:"),vZo=l(),f(iw.$$.fragment),TZo=l(),ho=a("div"),f(dw.$$.fragment),MZo=l(),dpe=a("p"),EZo=o("Instantiate one of the base model classes of the library from a pretrained model."),CZo=l(),_n=a("p"),wZo=o("The model class to instantiate is selected based on the "),cpe=a("code"),AZo=o("model_type"),yZo=o(` property of the config object (either
passed as an argument or loaded from `),fpe=a("code"),LZo=o("pretrained_model_name_or_path"),xZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mpe=a("code"),kZo=o("pretrained_model_name_or_path"),SZo=o(":"),RZo=l(),x=a("ul"),L6=a("li"),gpe=a("strong"),BZo=o("albert"),PZo=o(" \u2014 "),FO=a("a"),$Zo=o("TFAlbertModel"),IZo=o(" (ALBERT model)"),qZo=l(),x6=a("li"),hpe=a("strong"),NZo=o("bart"),jZo=o(" \u2014 "),vO=a("a"),DZo=o("TFBartModel"),GZo=o(" (BART model)"),OZo=l(),k6=a("li"),ppe=a("strong"),VZo=o("bert"),XZo=o(" \u2014 "),TO=a("a"),zZo=o("TFBertModel"),QZo=o(" (BERT model)"),WZo=l(),S6=a("li"),_pe=a("strong"),HZo=o("blenderbot"),UZo=o(" \u2014 "),MO=a("a"),JZo=o("TFBlenderbotModel"),YZo=o(" (Blenderbot model)"),KZo=l(),R6=a("li"),upe=a("strong"),ZZo=o("blenderbot-small"),eer=o(" \u2014 "),EO=a("a"),oer=o("TFBlenderbotSmallModel"),rer=o(" (BlenderbotSmall model)"),ter=l(),B6=a("li"),bpe=a("strong"),aer=o("camembert"),ner=o(" \u2014 "),CO=a("a"),ser=o("TFCamembertModel"),ler=o(" (CamemBERT model)"),ier=l(),P6=a("li"),Fpe=a("strong"),der=o("clip"),cer=o(" \u2014 "),wO=a("a"),fer=o("TFCLIPModel"),mer=o(" (CLIP model)"),ger=l(),$6=a("li"),vpe=a("strong"),her=o("convbert"),per=o(" \u2014 "),AO=a("a"),_er=o("TFConvBertModel"),uer=o(" (ConvBERT model)"),ber=l(),I6=a("li"),Tpe=a("strong"),Fer=o("convnext"),ver=o(" \u2014 "),yO=a("a"),Ter=o("TFConvNextModel"),Mer=o(" (ConvNext model)"),Eer=l(),q6=a("li"),Mpe=a("strong"),Cer=o("ctrl"),wer=o(" \u2014 "),LO=a("a"),Aer=o("TFCTRLModel"),yer=o(" (CTRL model)"),Ler=l(),N6=a("li"),Epe=a("strong"),xer=o("deberta"),ker=o(" \u2014 "),xO=a("a"),Ser=o("TFDebertaModel"),Rer=o(" (DeBERTa model)"),Ber=l(),j6=a("li"),Cpe=a("strong"),Per=o("deberta-v2"),$er=o(" \u2014 "),kO=a("a"),Ier=o("TFDebertaV2Model"),qer=o(" (DeBERTa-v2 model)"),Ner=l(),D6=a("li"),wpe=a("strong"),jer=o("distilbert"),Der=o(" \u2014 "),SO=a("a"),Ger=o("TFDistilBertModel"),Oer=o(" (DistilBERT model)"),Ver=l(),G6=a("li"),Ape=a("strong"),Xer=o("dpr"),zer=o(" \u2014 "),RO=a("a"),Qer=o("TFDPRQuestionEncoder"),Wer=o(" (DPR model)"),Her=l(),O6=a("li"),ype=a("strong"),Uer=o("electra"),Jer=o(" \u2014 "),BO=a("a"),Yer=o("TFElectraModel"),Ker=o(" (ELECTRA model)"),Zer=l(),V6=a("li"),Lpe=a("strong"),eor=o("flaubert"),oor=o(" \u2014 "),PO=a("a"),ror=o("TFFlaubertModel"),tor=o(" (FlauBERT model)"),aor=l(),Os=a("li"),xpe=a("strong"),nor=o("funnel"),sor=o(" \u2014 "),$O=a("a"),lor=o("TFFunnelModel"),ior=o(" or "),IO=a("a"),dor=o("TFFunnelBaseModel"),cor=o(" (Funnel Transformer model)"),mor=l(),X6=a("li"),kpe=a("strong"),gor=o("gpt2"),hor=o(" \u2014 "),qO=a("a"),por=o("TFGPT2Model"),_or=o(" (OpenAI GPT-2 model)"),uor=l(),z6=a("li"),Spe=a("strong"),bor=o("gptj"),For=o(" \u2014 "),NO=a("a"),vor=o("TFGPTJModel"),Tor=o(" (GPT-J model)"),Mor=l(),Q6=a("li"),Rpe=a("strong"),Eor=o("hubert"),Cor=o(" \u2014 "),jO=a("a"),wor=o("TFHubertModel"),Aor=o(" (Hubert model)"),yor=l(),W6=a("li"),Bpe=a("strong"),Lor=o("layoutlm"),xor=o(" \u2014 "),DO=a("a"),kor=o("TFLayoutLMModel"),Sor=o(" (LayoutLM model)"),Ror=l(),H6=a("li"),Ppe=a("strong"),Bor=o("led"),Por=o(" \u2014 "),GO=a("a"),$or=o("TFLEDModel"),Ior=o(" (LED model)"),qor=l(),U6=a("li"),$pe=a("strong"),Nor=o("longformer"),jor=o(" \u2014 "),OO=a("a"),Dor=o("TFLongformerModel"),Gor=o(" (Longformer model)"),Oor=l(),J6=a("li"),Ipe=a("strong"),Vor=o("lxmert"),Xor=o(" \u2014 "),VO=a("a"),zor=o("TFLxmertModel"),Qor=o(" (LXMERT model)"),Wor=l(),Y6=a("li"),qpe=a("strong"),Hor=o("marian"),Uor=o(" \u2014 "),XO=a("a"),Jor=o("TFMarianModel"),Yor=o(" (Marian model)"),Kor=l(),K6=a("li"),Npe=a("strong"),Zor=o("mbart"),err=o(" \u2014 "),zO=a("a"),orr=o("TFMBartModel"),rrr=o(" (mBART model)"),trr=l(),Z6=a("li"),jpe=a("strong"),arr=o("mobilebert"),nrr=o(" \u2014 "),QO=a("a"),srr=o("TFMobileBertModel"),lrr=o(" (MobileBERT model)"),irr=l(),e0=a("li"),Dpe=a("strong"),drr=o("mpnet"),crr=o(" \u2014 "),WO=a("a"),frr=o("TFMPNetModel"),mrr=o(" (MPNet model)"),grr=l(),o0=a("li"),Gpe=a("strong"),hrr=o("mt5"),prr=o(" \u2014 "),HO=a("a"),_rr=o("TFMT5Model"),urr=o(" (mT5 model)"),brr=l(),r0=a("li"),Ope=a("strong"),Frr=o("openai-gpt"),vrr=o(" \u2014 "),UO=a("a"),Trr=o("TFOpenAIGPTModel"),Mrr=o(" (OpenAI GPT model)"),Err=l(),t0=a("li"),Vpe=a("strong"),Crr=o("pegasus"),wrr=o(" \u2014 "),JO=a("a"),Arr=o("TFPegasusModel"),yrr=o(" (Pegasus model)"),Lrr=l(),a0=a("li"),Xpe=a("strong"),xrr=o("rembert"),krr=o(" \u2014 "),YO=a("a"),Srr=o("TFRemBertModel"),Rrr=o(" (RemBERT model)"),Brr=l(),n0=a("li"),zpe=a("strong"),Prr=o("roberta"),$rr=o(" \u2014 "),KO=a("a"),Irr=o("TFRobertaModel"),qrr=o(" (RoBERTa model)"),Nrr=l(),s0=a("li"),Qpe=a("strong"),jrr=o("roformer"),Drr=o(" \u2014 "),ZO=a("a"),Grr=o("TFRoFormerModel"),Orr=o(" (RoFormer model)"),Vrr=l(),l0=a("li"),Wpe=a("strong"),Xrr=o("speech_to_text"),zrr=o(" \u2014 "),eV=a("a"),Qrr=o("TFSpeech2TextModel"),Wrr=o(" (Speech2Text model)"),Hrr=l(),i0=a("li"),Hpe=a("strong"),Urr=o("t5"),Jrr=o(" \u2014 "),oV=a("a"),Yrr=o("TFT5Model"),Krr=o(" (T5 model)"),Zrr=l(),d0=a("li"),Upe=a("strong"),etr=o("tapas"),otr=o(" \u2014 "),rV=a("a"),rtr=o("TFTapasModel"),ttr=o(" (TAPAS model)"),atr=l(),c0=a("li"),Jpe=a("strong"),ntr=o("transfo-xl"),str=o(" \u2014 "),tV=a("a"),ltr=o("TFTransfoXLModel"),itr=o(" (Transformer-XL model)"),dtr=l(),f0=a("li"),Ype=a("strong"),ctr=o("vit"),ftr=o(" \u2014 "),aV=a("a"),mtr=o("TFViTModel"),gtr=o(" (ViT model)"),htr=l(),m0=a("li"),Kpe=a("strong"),ptr=o("vit_mae"),_tr=o(" \u2014 "),nV=a("a"),utr=o("TFViTMAEModel"),btr=o(" (ViTMAE model)"),Ftr=l(),g0=a("li"),Zpe=a("strong"),vtr=o("wav2vec2"),Ttr=o(" \u2014 "),sV=a("a"),Mtr=o("TFWav2Vec2Model"),Etr=o(" (Wav2Vec2 model)"),Ctr=l(),h0=a("li"),e_e=a("strong"),wtr=o("xlm"),Atr=o(" \u2014 "),lV=a("a"),ytr=o("TFXLMModel"),Ltr=o(" (XLM model)"),xtr=l(),p0=a("li"),o_e=a("strong"),ktr=o("xlm-roberta"),Str=o(" \u2014 "),iV=a("a"),Rtr=o("TFXLMRobertaModel"),Btr=o(" (XLM-RoBERTa model)"),Ptr=l(),_0=a("li"),r_e=a("strong"),$tr=o("xlnet"),Itr=o(" \u2014 "),dV=a("a"),qtr=o("TFXLNetModel"),Ntr=o(" (XLNet model)"),jtr=l(),t_e=a("p"),Dtr=o("Examples:"),Gtr=l(),f(cw.$$.fragment),yBe=l(),uc=a("h2"),u0=a("a"),a_e=a("span"),f(fw.$$.fragment),Otr=l(),n_e=a("span"),Vtr=o("TFAutoModelForPreTraining"),LBe=l(),vr=a("div"),f(mw.$$.fragment),Xtr=l(),bc=a("p"),ztr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),cV=a("a"),Qtr=o("from_pretrained()"),Wtr=o(" class method or the "),fV=a("a"),Htr=o("from_config()"),Utr=o(` class
method.`),Jtr=l(),gw=a("p"),Ytr=o("This class cannot be instantiated directly using "),s_e=a("code"),Ktr=o("__init__()"),Ztr=o(" (throws an error)."),ear=l(),ht=a("div"),f(hw.$$.fragment),oar=l(),l_e=a("p"),rar=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),tar=l(),Fc=a("p"),aar=o(`Note:
Loading a model from its configuration file does `),i_e=a("strong"),nar=o("not"),sar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mV=a("a"),lar=o("from_pretrained()"),iar=o(" to load the model weights."),dar=l(),d_e=a("p"),car=o("Examples:"),far=l(),f(pw.$$.fragment),mar=l(),po=a("div"),f(_w.$$.fragment),gar=l(),c_e=a("p"),har=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),par=l(),un=a("p"),_ar=o("The model class to instantiate is selected based on the "),f_e=a("code"),uar=o("model_type"),bar=o(` property of the config object (either
passed as an argument or loaded from `),m_e=a("code"),Far=o("pretrained_model_name_or_path"),Tar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g_e=a("code"),Mar=o("pretrained_model_name_or_path"),Ear=o(":"),Car=l(),H=a("ul"),b0=a("li"),h_e=a("strong"),war=o("albert"),Aar=o(" \u2014 "),gV=a("a"),yar=o("TFAlbertForPreTraining"),Lar=o(" (ALBERT model)"),xar=l(),F0=a("li"),p_e=a("strong"),kar=o("bart"),Sar=o(" \u2014 "),hV=a("a"),Rar=o("TFBartForConditionalGeneration"),Bar=o(" (BART model)"),Par=l(),v0=a("li"),__e=a("strong"),$ar=o("bert"),Iar=o(" \u2014 "),pV=a("a"),qar=o("TFBertForPreTraining"),Nar=o(" (BERT model)"),jar=l(),T0=a("li"),u_e=a("strong"),Dar=o("camembert"),Gar=o(" \u2014 "),_V=a("a"),Oar=o("TFCamembertForMaskedLM"),Var=o(" (CamemBERT model)"),Xar=l(),M0=a("li"),b_e=a("strong"),zar=o("ctrl"),Qar=o(" \u2014 "),uV=a("a"),War=o("TFCTRLLMHeadModel"),Har=o(" (CTRL model)"),Uar=l(),E0=a("li"),F_e=a("strong"),Jar=o("distilbert"),Yar=o(" \u2014 "),bV=a("a"),Kar=o("TFDistilBertForMaskedLM"),Zar=o(" (DistilBERT model)"),enr=l(),C0=a("li"),v_e=a("strong"),onr=o("electra"),rnr=o(" \u2014 "),FV=a("a"),tnr=o("TFElectraForPreTraining"),anr=o(" (ELECTRA model)"),nnr=l(),w0=a("li"),T_e=a("strong"),snr=o("flaubert"),lnr=o(" \u2014 "),vV=a("a"),inr=o("TFFlaubertWithLMHeadModel"),dnr=o(" (FlauBERT model)"),cnr=l(),A0=a("li"),M_e=a("strong"),fnr=o("funnel"),mnr=o(" \u2014 "),TV=a("a"),gnr=o("TFFunnelForPreTraining"),hnr=o(" (Funnel Transformer model)"),pnr=l(),y0=a("li"),E_e=a("strong"),_nr=o("gpt2"),unr=o(" \u2014 "),MV=a("a"),bnr=o("TFGPT2LMHeadModel"),Fnr=o(" (OpenAI GPT-2 model)"),vnr=l(),L0=a("li"),C_e=a("strong"),Tnr=o("layoutlm"),Mnr=o(" \u2014 "),EV=a("a"),Enr=o("TFLayoutLMForMaskedLM"),Cnr=o(" (LayoutLM model)"),wnr=l(),x0=a("li"),w_e=a("strong"),Anr=o("lxmert"),ynr=o(" \u2014 "),CV=a("a"),Lnr=o("TFLxmertForPreTraining"),xnr=o(" (LXMERT model)"),knr=l(),k0=a("li"),A_e=a("strong"),Snr=o("mobilebert"),Rnr=o(" \u2014 "),wV=a("a"),Bnr=o("TFMobileBertForPreTraining"),Pnr=o(" (MobileBERT model)"),$nr=l(),S0=a("li"),y_e=a("strong"),Inr=o("mpnet"),qnr=o(" \u2014 "),AV=a("a"),Nnr=o("TFMPNetForMaskedLM"),jnr=o(" (MPNet model)"),Dnr=l(),R0=a("li"),L_e=a("strong"),Gnr=o("openai-gpt"),Onr=o(" \u2014 "),yV=a("a"),Vnr=o("TFOpenAIGPTLMHeadModel"),Xnr=o(" (OpenAI GPT model)"),znr=l(),B0=a("li"),x_e=a("strong"),Qnr=o("roberta"),Wnr=o(" \u2014 "),LV=a("a"),Hnr=o("TFRobertaForMaskedLM"),Unr=o(" (RoBERTa model)"),Jnr=l(),P0=a("li"),k_e=a("strong"),Ynr=o("t5"),Knr=o(" \u2014 "),xV=a("a"),Znr=o("TFT5ForConditionalGeneration"),esr=o(" (T5 model)"),osr=l(),$0=a("li"),S_e=a("strong"),rsr=o("tapas"),tsr=o(" \u2014 "),kV=a("a"),asr=o("TFTapasForMaskedLM"),nsr=o(" (TAPAS model)"),ssr=l(),I0=a("li"),R_e=a("strong"),lsr=o("transfo-xl"),isr=o(" \u2014 "),SV=a("a"),dsr=o("TFTransfoXLLMHeadModel"),csr=o(" (Transformer-XL model)"),fsr=l(),q0=a("li"),B_e=a("strong"),msr=o("vit_mae"),gsr=o(" \u2014 "),RV=a("a"),hsr=o("TFViTMAEForPreTraining"),psr=o(" (ViTMAE model)"),_sr=l(),N0=a("li"),P_e=a("strong"),usr=o("xlm"),bsr=o(" \u2014 "),BV=a("a"),Fsr=o("TFXLMWithLMHeadModel"),vsr=o(" (XLM model)"),Tsr=l(),j0=a("li"),$_e=a("strong"),Msr=o("xlm-roberta"),Esr=o(" \u2014 "),PV=a("a"),Csr=o("TFXLMRobertaForMaskedLM"),wsr=o(" (XLM-RoBERTa model)"),Asr=l(),D0=a("li"),I_e=a("strong"),ysr=o("xlnet"),Lsr=o(" \u2014 "),$V=a("a"),xsr=o("TFXLNetLMHeadModel"),ksr=o(" (XLNet model)"),Ssr=l(),q_e=a("p"),Rsr=o("Examples:"),Bsr=l(),f(uw.$$.fragment),xBe=l(),vc=a("h2"),G0=a("a"),N_e=a("span"),f(bw.$$.fragment),Psr=l(),j_e=a("span"),$sr=o("TFAutoModelForCausalLM"),kBe=l(),Tr=a("div"),f(Fw.$$.fragment),Isr=l(),Tc=a("p"),qsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),IV=a("a"),Nsr=o("from_pretrained()"),jsr=o(" class method or the "),qV=a("a"),Dsr=o("from_config()"),Gsr=o(` class
method.`),Osr=l(),vw=a("p"),Vsr=o("This class cannot be instantiated directly using "),D_e=a("code"),Xsr=o("__init__()"),zsr=o(" (throws an error)."),Qsr=l(),pt=a("div"),f(Tw.$$.fragment),Wsr=l(),G_e=a("p"),Hsr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Usr=l(),Mc=a("p"),Jsr=o(`Note:
Loading a model from its configuration file does `),O_e=a("strong"),Ysr=o("not"),Ksr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NV=a("a"),Zsr=o("from_pretrained()"),elr=o(" to load the model weights."),olr=l(),V_e=a("p"),rlr=o("Examples:"),tlr=l(),f(Mw.$$.fragment),alr=l(),_o=a("div"),f(Ew.$$.fragment),nlr=l(),X_e=a("p"),slr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),llr=l(),bn=a("p"),ilr=o("The model class to instantiate is selected based on the "),z_e=a("code"),dlr=o("model_type"),clr=o(` property of the config object (either
passed as an argument or loaded from `),Q_e=a("code"),flr=o("pretrained_model_name_or_path"),mlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W_e=a("code"),glr=o("pretrained_model_name_or_path"),hlr=o(":"),plr=l(),fe=a("ul"),O0=a("li"),H_e=a("strong"),_lr=o("bert"),ulr=o(" \u2014 "),jV=a("a"),blr=o("TFBertLMHeadModel"),Flr=o(" (BERT model)"),vlr=l(),V0=a("li"),U_e=a("strong"),Tlr=o("camembert"),Mlr=o(" \u2014 "),DV=a("a"),Elr=o("TFCamembertForCausalLM"),Clr=o(" (CamemBERT model)"),wlr=l(),X0=a("li"),J_e=a("strong"),Alr=o("ctrl"),ylr=o(" \u2014 "),GV=a("a"),Llr=o("TFCTRLLMHeadModel"),xlr=o(" (CTRL model)"),klr=l(),z0=a("li"),Y_e=a("strong"),Slr=o("gpt2"),Rlr=o(" \u2014 "),OV=a("a"),Blr=o("TFGPT2LMHeadModel"),Plr=o(" (OpenAI GPT-2 model)"),$lr=l(),Q0=a("li"),K_e=a("strong"),Ilr=o("gptj"),qlr=o(" \u2014 "),VV=a("a"),Nlr=o("TFGPTJForCausalLM"),jlr=o(" (GPT-J model)"),Dlr=l(),W0=a("li"),Z_e=a("strong"),Glr=o("openai-gpt"),Olr=o(" \u2014 "),XV=a("a"),Vlr=o("TFOpenAIGPTLMHeadModel"),Xlr=o(" (OpenAI GPT model)"),zlr=l(),H0=a("li"),eue=a("strong"),Qlr=o("rembert"),Wlr=o(" \u2014 "),zV=a("a"),Hlr=o("TFRemBertForCausalLM"),Ulr=o(" (RemBERT model)"),Jlr=l(),U0=a("li"),oue=a("strong"),Ylr=o("roberta"),Klr=o(" \u2014 "),QV=a("a"),Zlr=o("TFRobertaForCausalLM"),eir=o(" (RoBERTa model)"),oir=l(),J0=a("li"),rue=a("strong"),rir=o("roformer"),tir=o(" \u2014 "),WV=a("a"),air=o("TFRoFormerForCausalLM"),nir=o(" (RoFormer model)"),sir=l(),Y0=a("li"),tue=a("strong"),lir=o("transfo-xl"),iir=o(" \u2014 "),HV=a("a"),dir=o("TFTransfoXLLMHeadModel"),cir=o(" (Transformer-XL model)"),fir=l(),K0=a("li"),aue=a("strong"),mir=o("xlm"),gir=o(" \u2014 "),UV=a("a"),hir=o("TFXLMWithLMHeadModel"),pir=o(" (XLM model)"),_ir=l(),Z0=a("li"),nue=a("strong"),uir=o("xlnet"),bir=o(" \u2014 "),JV=a("a"),Fir=o("TFXLNetLMHeadModel"),vir=o(" (XLNet model)"),Tir=l(),sue=a("p"),Mir=o("Examples:"),Eir=l(),f(Cw.$$.fragment),SBe=l(),Ec=a("h2"),eT=a("a"),lue=a("span"),f(ww.$$.fragment),Cir=l(),iue=a("span"),wir=o("TFAutoModelForImageClassification"),RBe=l(),Mr=a("div"),f(Aw.$$.fragment),Air=l(),Cc=a("p"),yir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),YV=a("a"),Lir=o("from_pretrained()"),xir=o(" class method or the "),KV=a("a"),kir=o("from_config()"),Sir=o(` class
method.`),Rir=l(),yw=a("p"),Bir=o("This class cannot be instantiated directly using "),due=a("code"),Pir=o("__init__()"),$ir=o(" (throws an error)."),Iir=l(),_t=a("div"),f(Lw.$$.fragment),qir=l(),cue=a("p"),Nir=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),jir=l(),wc=a("p"),Dir=o(`Note:
Loading a model from its configuration file does `),fue=a("strong"),Gir=o("not"),Oir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZV=a("a"),Vir=o("from_pretrained()"),Xir=o(" to load the model weights."),zir=l(),mue=a("p"),Qir=o("Examples:"),Wir=l(),f(xw.$$.fragment),Hir=l(),uo=a("div"),f(kw.$$.fragment),Uir=l(),gue=a("p"),Jir=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Yir=l(),Fn=a("p"),Kir=o("The model class to instantiate is selected based on the "),hue=a("code"),Zir=o("model_type"),edr=o(` property of the config object (either
passed as an argument or loaded from `),pue=a("code"),odr=o("pretrained_model_name_or_path"),rdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ue=a("code"),tdr=o("pretrained_model_name_or_path"),adr=o(":"),ndr=l(),Sw=a("ul"),oT=a("li"),uue=a("strong"),sdr=o("convnext"),ldr=o(" \u2014 "),eX=a("a"),idr=o("TFConvNextForImageClassification"),ddr=o(" (ConvNext model)"),cdr=l(),rT=a("li"),bue=a("strong"),fdr=o("vit"),mdr=o(" \u2014 "),oX=a("a"),gdr=o("TFViTForImageClassification"),hdr=o(" (ViT model)"),pdr=l(),Fue=a("p"),_dr=o("Examples:"),udr=l(),f(Rw.$$.fragment),BBe=l(),Ac=a("h2"),tT=a("a"),vue=a("span"),f(Bw.$$.fragment),bdr=l(),Tue=a("span"),Fdr=o("TFAutoModelForMaskedLM"),PBe=l(),Er=a("div"),f(Pw.$$.fragment),vdr=l(),yc=a("p"),Tdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),rX=a("a"),Mdr=o("from_pretrained()"),Edr=o(" class method or the "),tX=a("a"),Cdr=o("from_config()"),wdr=o(` class
method.`),Adr=l(),$w=a("p"),ydr=o("This class cannot be instantiated directly using "),Mue=a("code"),Ldr=o("__init__()"),xdr=o(" (throws an error)."),kdr=l(),ut=a("div"),f(Iw.$$.fragment),Sdr=l(),Eue=a("p"),Rdr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Bdr=l(),Lc=a("p"),Pdr=o(`Note:
Loading a model from its configuration file does `),Cue=a("strong"),$dr=o("not"),Idr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aX=a("a"),qdr=o("from_pretrained()"),Ndr=o(" to load the model weights."),jdr=l(),wue=a("p"),Ddr=o("Examples:"),Gdr=l(),f(qw.$$.fragment),Odr=l(),bo=a("div"),f(Nw.$$.fragment),Vdr=l(),Aue=a("p"),Xdr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),zdr=l(),vn=a("p"),Qdr=o("The model class to instantiate is selected based on the "),yue=a("code"),Wdr=o("model_type"),Hdr=o(` property of the config object (either
passed as an argument or loaded from `),Lue=a("code"),Udr=o("pretrained_model_name_or_path"),Jdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xue=a("code"),Ydr=o("pretrained_model_name_or_path"),Kdr=o(":"),Zdr=l(),J=a("ul"),aT=a("li"),kue=a("strong"),ecr=o("albert"),ocr=o(" \u2014 "),nX=a("a"),rcr=o("TFAlbertForMaskedLM"),tcr=o(" (ALBERT model)"),acr=l(),nT=a("li"),Sue=a("strong"),ncr=o("bert"),scr=o(" \u2014 "),sX=a("a"),lcr=o("TFBertForMaskedLM"),icr=o(" (BERT model)"),dcr=l(),sT=a("li"),Rue=a("strong"),ccr=o("camembert"),fcr=o(" \u2014 "),lX=a("a"),mcr=o("TFCamembertForMaskedLM"),gcr=o(" (CamemBERT model)"),hcr=l(),lT=a("li"),Bue=a("strong"),pcr=o("convbert"),_cr=o(" \u2014 "),iX=a("a"),ucr=o("TFConvBertForMaskedLM"),bcr=o(" (ConvBERT model)"),Fcr=l(),iT=a("li"),Pue=a("strong"),vcr=o("deberta"),Tcr=o(" \u2014 "),dX=a("a"),Mcr=o("TFDebertaForMaskedLM"),Ecr=o(" (DeBERTa model)"),Ccr=l(),dT=a("li"),$ue=a("strong"),wcr=o("deberta-v2"),Acr=o(" \u2014 "),cX=a("a"),ycr=o("TFDebertaV2ForMaskedLM"),Lcr=o(" (DeBERTa-v2 model)"),xcr=l(),cT=a("li"),Iue=a("strong"),kcr=o("distilbert"),Scr=o(" \u2014 "),fX=a("a"),Rcr=o("TFDistilBertForMaskedLM"),Bcr=o(" (DistilBERT model)"),Pcr=l(),fT=a("li"),que=a("strong"),$cr=o("electra"),Icr=o(" \u2014 "),mX=a("a"),qcr=o("TFElectraForMaskedLM"),Ncr=o(" (ELECTRA model)"),jcr=l(),mT=a("li"),Nue=a("strong"),Dcr=o("flaubert"),Gcr=o(" \u2014 "),gX=a("a"),Ocr=o("TFFlaubertWithLMHeadModel"),Vcr=o(" (FlauBERT model)"),Xcr=l(),gT=a("li"),jue=a("strong"),zcr=o("funnel"),Qcr=o(" \u2014 "),hX=a("a"),Wcr=o("TFFunnelForMaskedLM"),Hcr=o(" (Funnel Transformer model)"),Ucr=l(),hT=a("li"),Due=a("strong"),Jcr=o("layoutlm"),Ycr=o(" \u2014 "),pX=a("a"),Kcr=o("TFLayoutLMForMaskedLM"),Zcr=o(" (LayoutLM model)"),efr=l(),pT=a("li"),Gue=a("strong"),ofr=o("longformer"),rfr=o(" \u2014 "),_X=a("a"),tfr=o("TFLongformerForMaskedLM"),afr=o(" (Longformer model)"),nfr=l(),_T=a("li"),Oue=a("strong"),sfr=o("mobilebert"),lfr=o(" \u2014 "),uX=a("a"),ifr=o("TFMobileBertForMaskedLM"),dfr=o(" (MobileBERT model)"),cfr=l(),uT=a("li"),Vue=a("strong"),ffr=o("mpnet"),mfr=o(" \u2014 "),bX=a("a"),gfr=o("TFMPNetForMaskedLM"),hfr=o(" (MPNet model)"),pfr=l(),bT=a("li"),Xue=a("strong"),_fr=o("rembert"),ufr=o(" \u2014 "),FX=a("a"),bfr=o("TFRemBertForMaskedLM"),Ffr=o(" (RemBERT model)"),vfr=l(),FT=a("li"),zue=a("strong"),Tfr=o("roberta"),Mfr=o(" \u2014 "),vX=a("a"),Efr=o("TFRobertaForMaskedLM"),Cfr=o(" (RoBERTa model)"),wfr=l(),vT=a("li"),Que=a("strong"),Afr=o("roformer"),yfr=o(" \u2014 "),TX=a("a"),Lfr=o("TFRoFormerForMaskedLM"),xfr=o(" (RoFormer model)"),kfr=l(),TT=a("li"),Wue=a("strong"),Sfr=o("tapas"),Rfr=o(" \u2014 "),MX=a("a"),Bfr=o("TFTapasForMaskedLM"),Pfr=o(" (TAPAS model)"),$fr=l(),MT=a("li"),Hue=a("strong"),Ifr=o("xlm"),qfr=o(" \u2014 "),EX=a("a"),Nfr=o("TFXLMWithLMHeadModel"),jfr=o(" (XLM model)"),Dfr=l(),ET=a("li"),Uue=a("strong"),Gfr=o("xlm-roberta"),Ofr=o(" \u2014 "),CX=a("a"),Vfr=o("TFXLMRobertaForMaskedLM"),Xfr=o(" (XLM-RoBERTa model)"),zfr=l(),Jue=a("p"),Qfr=o("Examples:"),Wfr=l(),f(jw.$$.fragment),$Be=l(),xc=a("h2"),CT=a("a"),Yue=a("span"),f(Dw.$$.fragment),Hfr=l(),Kue=a("span"),Ufr=o("TFAutoModelForSeq2SeqLM"),IBe=l(),Cr=a("div"),f(Gw.$$.fragment),Jfr=l(),kc=a("p"),Yfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),wX=a("a"),Kfr=o("from_pretrained()"),Zfr=o(" class method or the "),AX=a("a"),emr=o("from_config()"),omr=o(` class
method.`),rmr=l(),Ow=a("p"),tmr=o("This class cannot be instantiated directly using "),Zue=a("code"),amr=o("__init__()"),nmr=o(" (throws an error)."),smr=l(),bt=a("div"),f(Vw.$$.fragment),lmr=l(),e1e=a("p"),imr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),dmr=l(),Sc=a("p"),cmr=o(`Note:
Loading a model from its configuration file does `),o1e=a("strong"),fmr=o("not"),mmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yX=a("a"),gmr=o("from_pretrained()"),hmr=o(" to load the model weights."),pmr=l(),r1e=a("p"),_mr=o("Examples:"),umr=l(),f(Xw.$$.fragment),bmr=l(),Fo=a("div"),f(zw.$$.fragment),Fmr=l(),t1e=a("p"),vmr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Tmr=l(),Tn=a("p"),Mmr=o("The model class to instantiate is selected based on the "),a1e=a("code"),Emr=o("model_type"),Cmr=o(` property of the config object (either
passed as an argument or loaded from `),n1e=a("code"),wmr=o("pretrained_model_name_or_path"),Amr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s1e=a("code"),ymr=o("pretrained_model_name_or_path"),Lmr=o(":"),xmr=l(),be=a("ul"),wT=a("li"),l1e=a("strong"),kmr=o("bart"),Smr=o(" \u2014 "),LX=a("a"),Rmr=o("TFBartForConditionalGeneration"),Bmr=o(" (BART model)"),Pmr=l(),AT=a("li"),i1e=a("strong"),$mr=o("blenderbot"),Imr=o(" \u2014 "),xX=a("a"),qmr=o("TFBlenderbotForConditionalGeneration"),Nmr=o(" (Blenderbot model)"),jmr=l(),yT=a("li"),d1e=a("strong"),Dmr=o("blenderbot-small"),Gmr=o(" \u2014 "),kX=a("a"),Omr=o("TFBlenderbotSmallForConditionalGeneration"),Vmr=o(" (BlenderbotSmall model)"),Xmr=l(),LT=a("li"),c1e=a("strong"),zmr=o("encoder-decoder"),Qmr=o(" \u2014 "),SX=a("a"),Wmr=o("TFEncoderDecoderModel"),Hmr=o(" (Encoder decoder model)"),Umr=l(),xT=a("li"),f1e=a("strong"),Jmr=o("led"),Ymr=o(" \u2014 "),RX=a("a"),Kmr=o("TFLEDForConditionalGeneration"),Zmr=o(" (LED model)"),egr=l(),kT=a("li"),m1e=a("strong"),ogr=o("marian"),rgr=o(" \u2014 "),BX=a("a"),tgr=o("TFMarianMTModel"),agr=o(" (Marian model)"),ngr=l(),ST=a("li"),g1e=a("strong"),sgr=o("mbart"),lgr=o(" \u2014 "),PX=a("a"),igr=o("TFMBartForConditionalGeneration"),dgr=o(" (mBART model)"),cgr=l(),RT=a("li"),h1e=a("strong"),fgr=o("mt5"),mgr=o(" \u2014 "),$X=a("a"),ggr=o("TFMT5ForConditionalGeneration"),hgr=o(" (mT5 model)"),pgr=l(),BT=a("li"),p1e=a("strong"),_gr=o("pegasus"),ugr=o(" \u2014 "),IX=a("a"),bgr=o("TFPegasusForConditionalGeneration"),Fgr=o(" (Pegasus model)"),vgr=l(),PT=a("li"),_1e=a("strong"),Tgr=o("t5"),Mgr=o(" \u2014 "),qX=a("a"),Egr=o("TFT5ForConditionalGeneration"),Cgr=o(" (T5 model)"),wgr=l(),u1e=a("p"),Agr=o("Examples:"),ygr=l(),f(Qw.$$.fragment),qBe=l(),Rc=a("h2"),$T=a("a"),b1e=a("span"),f(Ww.$$.fragment),Lgr=l(),F1e=a("span"),xgr=o("TFAutoModelForSequenceClassification"),NBe=l(),wr=a("div"),f(Hw.$$.fragment),kgr=l(),Bc=a("p"),Sgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),NX=a("a"),Rgr=o("from_pretrained()"),Bgr=o(" class method or the "),jX=a("a"),Pgr=o("from_config()"),$gr=o(` class
method.`),Igr=l(),Uw=a("p"),qgr=o("This class cannot be instantiated directly using "),v1e=a("code"),Ngr=o("__init__()"),jgr=o(" (throws an error)."),Dgr=l(),Ft=a("div"),f(Jw.$$.fragment),Ggr=l(),T1e=a("p"),Ogr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Vgr=l(),Pc=a("p"),Xgr=o(`Note:
Loading a model from its configuration file does `),M1e=a("strong"),zgr=o("not"),Qgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DX=a("a"),Wgr=o("from_pretrained()"),Hgr=o(" to load the model weights."),Ugr=l(),E1e=a("p"),Jgr=o("Examples:"),Ygr=l(),f(Yw.$$.fragment),Kgr=l(),vo=a("div"),f(Kw.$$.fragment),Zgr=l(),C1e=a("p"),ehr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),ohr=l(),Mn=a("p"),rhr=o("The model class to instantiate is selected based on the "),w1e=a("code"),thr=o("model_type"),ahr=o(` property of the config object (either
passed as an argument or loaded from `),A1e=a("code"),nhr=o("pretrained_model_name_or_path"),shr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y1e=a("code"),lhr=o("pretrained_model_name_or_path"),ihr=o(":"),dhr=l(),V=a("ul"),IT=a("li"),L1e=a("strong"),chr=o("albert"),fhr=o(" \u2014 "),GX=a("a"),mhr=o("TFAlbertForSequenceClassification"),ghr=o(" (ALBERT model)"),hhr=l(),qT=a("li"),x1e=a("strong"),phr=o("bert"),_hr=o(" \u2014 "),OX=a("a"),uhr=o("TFBertForSequenceClassification"),bhr=o(" (BERT model)"),Fhr=l(),NT=a("li"),k1e=a("strong"),vhr=o("camembert"),Thr=o(" \u2014 "),VX=a("a"),Mhr=o("TFCamembertForSequenceClassification"),Ehr=o(" (CamemBERT model)"),Chr=l(),jT=a("li"),S1e=a("strong"),whr=o("convbert"),Ahr=o(" \u2014 "),XX=a("a"),yhr=o("TFConvBertForSequenceClassification"),Lhr=o(" (ConvBERT model)"),xhr=l(),DT=a("li"),R1e=a("strong"),khr=o("ctrl"),Shr=o(" \u2014 "),zX=a("a"),Rhr=o("TFCTRLForSequenceClassification"),Bhr=o(" (CTRL model)"),Phr=l(),GT=a("li"),B1e=a("strong"),$hr=o("deberta"),Ihr=o(" \u2014 "),QX=a("a"),qhr=o("TFDebertaForSequenceClassification"),Nhr=o(" (DeBERTa model)"),jhr=l(),OT=a("li"),P1e=a("strong"),Dhr=o("deberta-v2"),Ghr=o(" \u2014 "),WX=a("a"),Ohr=o("TFDebertaV2ForSequenceClassification"),Vhr=o(" (DeBERTa-v2 model)"),Xhr=l(),VT=a("li"),$1e=a("strong"),zhr=o("distilbert"),Qhr=o(" \u2014 "),HX=a("a"),Whr=o("TFDistilBertForSequenceClassification"),Hhr=o(" (DistilBERT model)"),Uhr=l(),XT=a("li"),I1e=a("strong"),Jhr=o("electra"),Yhr=o(" \u2014 "),UX=a("a"),Khr=o("TFElectraForSequenceClassification"),Zhr=o(" (ELECTRA model)"),epr=l(),zT=a("li"),q1e=a("strong"),opr=o("flaubert"),rpr=o(" \u2014 "),JX=a("a"),tpr=o("TFFlaubertForSequenceClassification"),apr=o(" (FlauBERT model)"),npr=l(),QT=a("li"),N1e=a("strong"),spr=o("funnel"),lpr=o(" \u2014 "),YX=a("a"),ipr=o("TFFunnelForSequenceClassification"),dpr=o(" (Funnel Transformer model)"),cpr=l(),WT=a("li"),j1e=a("strong"),fpr=o("gpt2"),mpr=o(" \u2014 "),KX=a("a"),gpr=o("TFGPT2ForSequenceClassification"),hpr=o(" (OpenAI GPT-2 model)"),ppr=l(),HT=a("li"),D1e=a("strong"),_pr=o("gptj"),upr=o(" \u2014 "),ZX=a("a"),bpr=o("TFGPTJForSequenceClassification"),Fpr=o(" (GPT-J model)"),vpr=l(),UT=a("li"),G1e=a("strong"),Tpr=o("layoutlm"),Mpr=o(" \u2014 "),ez=a("a"),Epr=o("TFLayoutLMForSequenceClassification"),Cpr=o(" (LayoutLM model)"),wpr=l(),JT=a("li"),O1e=a("strong"),Apr=o("longformer"),ypr=o(" \u2014 "),oz=a("a"),Lpr=o("TFLongformerForSequenceClassification"),xpr=o(" (Longformer model)"),kpr=l(),YT=a("li"),V1e=a("strong"),Spr=o("mobilebert"),Rpr=o(" \u2014 "),rz=a("a"),Bpr=o("TFMobileBertForSequenceClassification"),Ppr=o(" (MobileBERT model)"),$pr=l(),KT=a("li"),X1e=a("strong"),Ipr=o("mpnet"),qpr=o(" \u2014 "),tz=a("a"),Npr=o("TFMPNetForSequenceClassification"),jpr=o(" (MPNet model)"),Dpr=l(),ZT=a("li"),z1e=a("strong"),Gpr=o("openai-gpt"),Opr=o(" \u2014 "),az=a("a"),Vpr=o("TFOpenAIGPTForSequenceClassification"),Xpr=o(" (OpenAI GPT model)"),zpr=l(),e8=a("li"),Q1e=a("strong"),Qpr=o("rembert"),Wpr=o(" \u2014 "),nz=a("a"),Hpr=o("TFRemBertForSequenceClassification"),Upr=o(" (RemBERT model)"),Jpr=l(),o8=a("li"),W1e=a("strong"),Ypr=o("roberta"),Kpr=o(" \u2014 "),sz=a("a"),Zpr=o("TFRobertaForSequenceClassification"),e_r=o(" (RoBERTa model)"),o_r=l(),r8=a("li"),H1e=a("strong"),r_r=o("roformer"),t_r=o(" \u2014 "),lz=a("a"),a_r=o("TFRoFormerForSequenceClassification"),n_r=o(" (RoFormer model)"),s_r=l(),t8=a("li"),U1e=a("strong"),l_r=o("tapas"),i_r=o(" \u2014 "),iz=a("a"),d_r=o("TFTapasForSequenceClassification"),c_r=o(" (TAPAS model)"),f_r=l(),a8=a("li"),J1e=a("strong"),m_r=o("transfo-xl"),g_r=o(" \u2014 "),dz=a("a"),h_r=o("TFTransfoXLForSequenceClassification"),p_r=o(" (Transformer-XL model)"),__r=l(),n8=a("li"),Y1e=a("strong"),u_r=o("xlm"),b_r=o(" \u2014 "),cz=a("a"),F_r=o("TFXLMForSequenceClassification"),v_r=o(" (XLM model)"),T_r=l(),s8=a("li"),K1e=a("strong"),M_r=o("xlm-roberta"),E_r=o(" \u2014 "),fz=a("a"),C_r=o("TFXLMRobertaForSequenceClassification"),w_r=o(" (XLM-RoBERTa model)"),A_r=l(),l8=a("li"),Z1e=a("strong"),y_r=o("xlnet"),L_r=o(" \u2014 "),mz=a("a"),x_r=o("TFXLNetForSequenceClassification"),k_r=o(" (XLNet model)"),S_r=l(),ebe=a("p"),R_r=o("Examples:"),B_r=l(),f(Zw.$$.fragment),jBe=l(),$c=a("h2"),i8=a("a"),obe=a("span"),f(eA.$$.fragment),P_r=l(),rbe=a("span"),$_r=o("TFAutoModelForMultipleChoice"),DBe=l(),Ar=a("div"),f(oA.$$.fragment),I_r=l(),Ic=a("p"),q_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),gz=a("a"),N_r=o("from_pretrained()"),j_r=o(" class method or the "),hz=a("a"),D_r=o("from_config()"),G_r=o(` class
method.`),O_r=l(),rA=a("p"),V_r=o("This class cannot be instantiated directly using "),tbe=a("code"),X_r=o("__init__()"),z_r=o(" (throws an error)."),Q_r=l(),vt=a("div"),f(tA.$$.fragment),W_r=l(),abe=a("p"),H_r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),U_r=l(),qc=a("p"),J_r=o(`Note:
Loading a model from its configuration file does `),nbe=a("strong"),Y_r=o("not"),K_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pz=a("a"),Z_r=o("from_pretrained()"),eur=o(" to load the model weights."),our=l(),sbe=a("p"),rur=o("Examples:"),tur=l(),f(aA.$$.fragment),aur=l(),To=a("div"),f(nA.$$.fragment),nur=l(),lbe=a("p"),sur=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),lur=l(),En=a("p"),iur=o("The model class to instantiate is selected based on the "),ibe=a("code"),dur=o("model_type"),cur=o(` property of the config object (either
passed as an argument or loaded from `),dbe=a("code"),fur=o("pretrained_model_name_or_path"),mur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cbe=a("code"),gur=o("pretrained_model_name_or_path"),hur=o(":"),pur=l(),se=a("ul"),d8=a("li"),fbe=a("strong"),_ur=o("albert"),uur=o(" \u2014 "),_z=a("a"),bur=o("TFAlbertForMultipleChoice"),Fur=o(" (ALBERT model)"),vur=l(),c8=a("li"),mbe=a("strong"),Tur=o("bert"),Mur=o(" \u2014 "),uz=a("a"),Eur=o("TFBertForMultipleChoice"),Cur=o(" (BERT model)"),wur=l(),f8=a("li"),gbe=a("strong"),Aur=o("camembert"),yur=o(" \u2014 "),bz=a("a"),Lur=o("TFCamembertForMultipleChoice"),xur=o(" (CamemBERT model)"),kur=l(),m8=a("li"),hbe=a("strong"),Sur=o("convbert"),Rur=o(" \u2014 "),Fz=a("a"),Bur=o("TFConvBertForMultipleChoice"),Pur=o(" (ConvBERT model)"),$ur=l(),g8=a("li"),pbe=a("strong"),Iur=o("distilbert"),qur=o(" \u2014 "),vz=a("a"),Nur=o("TFDistilBertForMultipleChoice"),jur=o(" (DistilBERT model)"),Dur=l(),h8=a("li"),_be=a("strong"),Gur=o("electra"),Our=o(" \u2014 "),Tz=a("a"),Vur=o("TFElectraForMultipleChoice"),Xur=o(" (ELECTRA model)"),zur=l(),p8=a("li"),ube=a("strong"),Qur=o("flaubert"),Wur=o(" \u2014 "),Mz=a("a"),Hur=o("TFFlaubertForMultipleChoice"),Uur=o(" (FlauBERT model)"),Jur=l(),_8=a("li"),bbe=a("strong"),Yur=o("funnel"),Kur=o(" \u2014 "),Ez=a("a"),Zur=o("TFFunnelForMultipleChoice"),e1r=o(" (Funnel Transformer model)"),o1r=l(),u8=a("li"),Fbe=a("strong"),r1r=o("longformer"),t1r=o(" \u2014 "),Cz=a("a"),a1r=o("TFLongformerForMultipleChoice"),n1r=o(" (Longformer model)"),s1r=l(),b8=a("li"),vbe=a("strong"),l1r=o("mobilebert"),i1r=o(" \u2014 "),wz=a("a"),d1r=o("TFMobileBertForMultipleChoice"),c1r=o(" (MobileBERT model)"),f1r=l(),F8=a("li"),Tbe=a("strong"),m1r=o("mpnet"),g1r=o(" \u2014 "),Az=a("a"),h1r=o("TFMPNetForMultipleChoice"),p1r=o(" (MPNet model)"),_1r=l(),v8=a("li"),Mbe=a("strong"),u1r=o("rembert"),b1r=o(" \u2014 "),yz=a("a"),F1r=o("TFRemBertForMultipleChoice"),v1r=o(" (RemBERT model)"),T1r=l(),T8=a("li"),Ebe=a("strong"),M1r=o("roberta"),E1r=o(" \u2014 "),Lz=a("a"),C1r=o("TFRobertaForMultipleChoice"),w1r=o(" (RoBERTa model)"),A1r=l(),M8=a("li"),Cbe=a("strong"),y1r=o("roformer"),L1r=o(" \u2014 "),xz=a("a"),x1r=o("TFRoFormerForMultipleChoice"),k1r=o(" (RoFormer model)"),S1r=l(),E8=a("li"),wbe=a("strong"),R1r=o("xlm"),B1r=o(" \u2014 "),kz=a("a"),P1r=o("TFXLMForMultipleChoice"),$1r=o(" (XLM model)"),I1r=l(),C8=a("li"),Abe=a("strong"),q1r=o("xlm-roberta"),N1r=o(" \u2014 "),Sz=a("a"),j1r=o("TFXLMRobertaForMultipleChoice"),D1r=o(" (XLM-RoBERTa model)"),G1r=l(),w8=a("li"),ybe=a("strong"),O1r=o("xlnet"),V1r=o(" \u2014 "),Rz=a("a"),X1r=o("TFXLNetForMultipleChoice"),z1r=o(" (XLNet model)"),Q1r=l(),Lbe=a("p"),W1r=o("Examples:"),H1r=l(),f(sA.$$.fragment),GBe=l(),Nc=a("h2"),A8=a("a"),xbe=a("span"),f(lA.$$.fragment),U1r=l(),kbe=a("span"),J1r=o("TFAutoModelForTableQuestionAnswering"),OBe=l(),yr=a("div"),f(iA.$$.fragment),Y1r=l(),jc=a("p"),K1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Bz=a("a"),Z1r=o("from_pretrained()"),ebr=o(" class method or the "),Pz=a("a"),obr=o("from_config()"),rbr=o(` class
method.`),tbr=l(),dA=a("p"),abr=o("This class cannot be instantiated directly using "),Sbe=a("code"),nbr=o("__init__()"),sbr=o(" (throws an error)."),lbr=l(),Tt=a("div"),f(cA.$$.fragment),ibr=l(),Rbe=a("p"),dbr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),cbr=l(),Dc=a("p"),fbr=o(`Note:
Loading a model from its configuration file does `),Bbe=a("strong"),mbr=o("not"),gbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$z=a("a"),hbr=o("from_pretrained()"),pbr=o(" to load the model weights."),_br=l(),Pbe=a("p"),ubr=o("Examples:"),bbr=l(),f(fA.$$.fragment),Fbr=l(),Mo=a("div"),f(mA.$$.fragment),vbr=l(),$be=a("p"),Tbr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Mbr=l(),Cn=a("p"),Ebr=o("The model class to instantiate is selected based on the "),Ibe=a("code"),Cbr=o("model_type"),wbr=o(` property of the config object (either
passed as an argument or loaded from `),qbe=a("code"),Abr=o("pretrained_model_name_or_path"),ybr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nbe=a("code"),Lbr=o("pretrained_model_name_or_path"),xbr=o(":"),kbr=l(),jbe=a("ul"),y8=a("li"),Dbe=a("strong"),Sbr=o("tapas"),Rbr=o(" \u2014 "),Iz=a("a"),Bbr=o("TFTapasForQuestionAnswering"),Pbr=o(" (TAPAS model)"),$br=l(),Gbe=a("p"),Ibr=o("Examples:"),qbr=l(),f(gA.$$.fragment),VBe=l(),Gc=a("h2"),L8=a("a"),Obe=a("span"),f(hA.$$.fragment),Nbr=l(),Vbe=a("span"),jbr=o("TFAutoModelForTokenClassification"),XBe=l(),Lr=a("div"),f(pA.$$.fragment),Dbr=l(),Oc=a("p"),Gbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),qz=a("a"),Obr=o("from_pretrained()"),Vbr=o(" class method or the "),Nz=a("a"),Xbr=o("from_config()"),zbr=o(` class
method.`),Qbr=l(),_A=a("p"),Wbr=o("This class cannot be instantiated directly using "),Xbe=a("code"),Hbr=o("__init__()"),Ubr=o(" (throws an error)."),Jbr=l(),Mt=a("div"),f(uA.$$.fragment),Ybr=l(),zbe=a("p"),Kbr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Zbr=l(),Vc=a("p"),e2r=o(`Note:
Loading a model from its configuration file does `),Qbe=a("strong"),o2r=o("not"),r2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jz=a("a"),t2r=o("from_pretrained()"),a2r=o(" to load the model weights."),n2r=l(),Wbe=a("p"),s2r=o("Examples:"),l2r=l(),f(bA.$$.fragment),i2r=l(),Eo=a("div"),f(FA.$$.fragment),d2r=l(),Hbe=a("p"),c2r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),f2r=l(),wn=a("p"),m2r=o("The model class to instantiate is selected based on the "),Ube=a("code"),g2r=o("model_type"),h2r=o(` property of the config object (either
passed as an argument or loaded from `),Jbe=a("code"),p2r=o("pretrained_model_name_or_path"),_2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ybe=a("code"),u2r=o("pretrained_model_name_or_path"),b2r=o(":"),F2r=l(),Y=a("ul"),x8=a("li"),Kbe=a("strong"),v2r=o("albert"),T2r=o(" \u2014 "),Dz=a("a"),M2r=o("TFAlbertForTokenClassification"),E2r=o(" (ALBERT model)"),C2r=l(),k8=a("li"),Zbe=a("strong"),w2r=o("bert"),A2r=o(" \u2014 "),Gz=a("a"),y2r=o("TFBertForTokenClassification"),L2r=o(" (BERT model)"),x2r=l(),S8=a("li"),e2e=a("strong"),k2r=o("camembert"),S2r=o(" \u2014 "),Oz=a("a"),R2r=o("TFCamembertForTokenClassification"),B2r=o(" (CamemBERT model)"),P2r=l(),R8=a("li"),o2e=a("strong"),$2r=o("convbert"),I2r=o(" \u2014 "),Vz=a("a"),q2r=o("TFConvBertForTokenClassification"),N2r=o(" (ConvBERT model)"),j2r=l(),B8=a("li"),r2e=a("strong"),D2r=o("deberta"),G2r=o(" \u2014 "),Xz=a("a"),O2r=o("TFDebertaForTokenClassification"),V2r=o(" (DeBERTa model)"),X2r=l(),P8=a("li"),t2e=a("strong"),z2r=o("deberta-v2"),Q2r=o(" \u2014 "),zz=a("a"),W2r=o("TFDebertaV2ForTokenClassification"),H2r=o(" (DeBERTa-v2 model)"),U2r=l(),$8=a("li"),a2e=a("strong"),J2r=o("distilbert"),Y2r=o(" \u2014 "),Qz=a("a"),K2r=o("TFDistilBertForTokenClassification"),Z2r=o(" (DistilBERT model)"),eFr=l(),I8=a("li"),n2e=a("strong"),oFr=o("electra"),rFr=o(" \u2014 "),Wz=a("a"),tFr=o("TFElectraForTokenClassification"),aFr=o(" (ELECTRA model)"),nFr=l(),q8=a("li"),s2e=a("strong"),sFr=o("flaubert"),lFr=o(" \u2014 "),Hz=a("a"),iFr=o("TFFlaubertForTokenClassification"),dFr=o(" (FlauBERT model)"),cFr=l(),N8=a("li"),l2e=a("strong"),fFr=o("funnel"),mFr=o(" \u2014 "),Uz=a("a"),gFr=o("TFFunnelForTokenClassification"),hFr=o(" (Funnel Transformer model)"),pFr=l(),j8=a("li"),i2e=a("strong"),_Fr=o("layoutlm"),uFr=o(" \u2014 "),Jz=a("a"),bFr=o("TFLayoutLMForTokenClassification"),FFr=o(" (LayoutLM model)"),vFr=l(),D8=a("li"),d2e=a("strong"),TFr=o("longformer"),MFr=o(" \u2014 "),Yz=a("a"),EFr=o("TFLongformerForTokenClassification"),CFr=o(" (Longformer model)"),wFr=l(),G8=a("li"),c2e=a("strong"),AFr=o("mobilebert"),yFr=o(" \u2014 "),Kz=a("a"),LFr=o("TFMobileBertForTokenClassification"),xFr=o(" (MobileBERT model)"),kFr=l(),O8=a("li"),f2e=a("strong"),SFr=o("mpnet"),RFr=o(" \u2014 "),Zz=a("a"),BFr=o("TFMPNetForTokenClassification"),PFr=o(" (MPNet model)"),$Fr=l(),V8=a("li"),m2e=a("strong"),IFr=o("rembert"),qFr=o(" \u2014 "),eQ=a("a"),NFr=o("TFRemBertForTokenClassification"),jFr=o(" (RemBERT model)"),DFr=l(),X8=a("li"),g2e=a("strong"),GFr=o("roberta"),OFr=o(" \u2014 "),oQ=a("a"),VFr=o("TFRobertaForTokenClassification"),XFr=o(" (RoBERTa model)"),zFr=l(),z8=a("li"),h2e=a("strong"),QFr=o("roformer"),WFr=o(" \u2014 "),rQ=a("a"),HFr=o("TFRoFormerForTokenClassification"),UFr=o(" (RoFormer model)"),JFr=l(),Q8=a("li"),p2e=a("strong"),YFr=o("xlm"),KFr=o(" \u2014 "),tQ=a("a"),ZFr=o("TFXLMForTokenClassification"),evr=o(" (XLM model)"),ovr=l(),W8=a("li"),_2e=a("strong"),rvr=o("xlm-roberta"),tvr=o(" \u2014 "),aQ=a("a"),avr=o("TFXLMRobertaForTokenClassification"),nvr=o(" (XLM-RoBERTa model)"),svr=l(),H8=a("li"),u2e=a("strong"),lvr=o("xlnet"),ivr=o(" \u2014 "),nQ=a("a"),dvr=o("TFXLNetForTokenClassification"),cvr=o(" (XLNet model)"),fvr=l(),b2e=a("p"),mvr=o("Examples:"),gvr=l(),f(vA.$$.fragment),zBe=l(),Xc=a("h2"),U8=a("a"),F2e=a("span"),f(TA.$$.fragment),hvr=l(),v2e=a("span"),pvr=o("TFAutoModelForQuestionAnswering"),QBe=l(),xr=a("div"),f(MA.$$.fragment),_vr=l(),zc=a("p"),uvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),sQ=a("a"),bvr=o("from_pretrained()"),Fvr=o(" class method or the "),lQ=a("a"),vvr=o("from_config()"),Tvr=o(` class
method.`),Mvr=l(),EA=a("p"),Evr=o("This class cannot be instantiated directly using "),T2e=a("code"),Cvr=o("__init__()"),wvr=o(" (throws an error)."),Avr=l(),Et=a("div"),f(CA.$$.fragment),yvr=l(),M2e=a("p"),Lvr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),xvr=l(),Qc=a("p"),kvr=o(`Note:
Loading a model from its configuration file does `),E2e=a("strong"),Svr=o("not"),Rvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iQ=a("a"),Bvr=o("from_pretrained()"),Pvr=o(" to load the model weights."),$vr=l(),C2e=a("p"),Ivr=o("Examples:"),qvr=l(),f(wA.$$.fragment),Nvr=l(),Co=a("div"),f(AA.$$.fragment),jvr=l(),w2e=a("p"),Dvr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Gvr=l(),An=a("p"),Ovr=o("The model class to instantiate is selected based on the "),A2e=a("code"),Vvr=o("model_type"),Xvr=o(` property of the config object (either
passed as an argument or loaded from `),y2e=a("code"),zvr=o("pretrained_model_name_or_path"),Qvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L2e=a("code"),Wvr=o("pretrained_model_name_or_path"),Hvr=o(":"),Uvr=l(),K=a("ul"),J8=a("li"),x2e=a("strong"),Jvr=o("albert"),Yvr=o(" \u2014 "),dQ=a("a"),Kvr=o("TFAlbertForQuestionAnswering"),Zvr=o(" (ALBERT model)"),e6r=l(),Y8=a("li"),k2e=a("strong"),o6r=o("bert"),r6r=o(" \u2014 "),cQ=a("a"),t6r=o("TFBertForQuestionAnswering"),a6r=o(" (BERT model)"),n6r=l(),K8=a("li"),S2e=a("strong"),s6r=o("camembert"),l6r=o(" \u2014 "),fQ=a("a"),i6r=o("TFCamembertForQuestionAnswering"),d6r=o(" (CamemBERT model)"),c6r=l(),Z8=a("li"),R2e=a("strong"),f6r=o("convbert"),m6r=o(" \u2014 "),mQ=a("a"),g6r=o("TFConvBertForQuestionAnswering"),h6r=o(" (ConvBERT model)"),p6r=l(),e7=a("li"),B2e=a("strong"),_6r=o("deberta"),u6r=o(" \u2014 "),gQ=a("a"),b6r=o("TFDebertaForQuestionAnswering"),F6r=o(" (DeBERTa model)"),v6r=l(),o7=a("li"),P2e=a("strong"),T6r=o("deberta-v2"),M6r=o(" \u2014 "),hQ=a("a"),E6r=o("TFDebertaV2ForQuestionAnswering"),C6r=o(" (DeBERTa-v2 model)"),w6r=l(),r7=a("li"),$2e=a("strong"),A6r=o("distilbert"),y6r=o(" \u2014 "),pQ=a("a"),L6r=o("TFDistilBertForQuestionAnswering"),x6r=o(" (DistilBERT model)"),k6r=l(),t7=a("li"),I2e=a("strong"),S6r=o("electra"),R6r=o(" \u2014 "),_Q=a("a"),B6r=o("TFElectraForQuestionAnswering"),P6r=o(" (ELECTRA model)"),$6r=l(),a7=a("li"),q2e=a("strong"),I6r=o("flaubert"),q6r=o(" \u2014 "),uQ=a("a"),N6r=o("TFFlaubertForQuestionAnsweringSimple"),j6r=o(" (FlauBERT model)"),D6r=l(),n7=a("li"),N2e=a("strong"),G6r=o("funnel"),O6r=o(" \u2014 "),bQ=a("a"),V6r=o("TFFunnelForQuestionAnswering"),X6r=o(" (Funnel Transformer model)"),z6r=l(),s7=a("li"),j2e=a("strong"),Q6r=o("gptj"),W6r=o(" \u2014 "),FQ=a("a"),H6r=o("TFGPTJForQuestionAnswering"),U6r=o(" (GPT-J model)"),J6r=l(),l7=a("li"),D2e=a("strong"),Y6r=o("longformer"),K6r=o(" \u2014 "),vQ=a("a"),Z6r=o("TFLongformerForQuestionAnswering"),e0r=o(" (Longformer model)"),o0r=l(),i7=a("li"),G2e=a("strong"),r0r=o("mobilebert"),t0r=o(" \u2014 "),TQ=a("a"),a0r=o("TFMobileBertForQuestionAnswering"),n0r=o(" (MobileBERT model)"),s0r=l(),d7=a("li"),O2e=a("strong"),l0r=o("mpnet"),i0r=o(" \u2014 "),MQ=a("a"),d0r=o("TFMPNetForQuestionAnswering"),c0r=o(" (MPNet model)"),f0r=l(),c7=a("li"),V2e=a("strong"),m0r=o("rembert"),g0r=o(" \u2014 "),EQ=a("a"),h0r=o("TFRemBertForQuestionAnswering"),p0r=o(" (RemBERT model)"),_0r=l(),f7=a("li"),X2e=a("strong"),u0r=o("roberta"),b0r=o(" \u2014 "),CQ=a("a"),F0r=o("TFRobertaForQuestionAnswering"),v0r=o(" (RoBERTa model)"),T0r=l(),m7=a("li"),z2e=a("strong"),M0r=o("roformer"),E0r=o(" \u2014 "),wQ=a("a"),C0r=o("TFRoFormerForQuestionAnswering"),w0r=o(" (RoFormer model)"),A0r=l(),g7=a("li"),Q2e=a("strong"),y0r=o("xlm"),L0r=o(" \u2014 "),AQ=a("a"),x0r=o("TFXLMForQuestionAnsweringSimple"),k0r=o(" (XLM model)"),S0r=l(),h7=a("li"),W2e=a("strong"),R0r=o("xlm-roberta"),B0r=o(" \u2014 "),yQ=a("a"),P0r=o("TFXLMRobertaForQuestionAnswering"),$0r=o(" (XLM-RoBERTa model)"),I0r=l(),p7=a("li"),H2e=a("strong"),q0r=o("xlnet"),N0r=o(" \u2014 "),LQ=a("a"),j0r=o("TFXLNetForQuestionAnsweringSimple"),D0r=o(" (XLNet model)"),G0r=l(),U2e=a("p"),O0r=o("Examples:"),V0r=l(),f(yA.$$.fragment),WBe=l(),Wc=a("h2"),_7=a("a"),J2e=a("span"),f(LA.$$.fragment),X0r=l(),Y2e=a("span"),z0r=o("TFAutoModelForVision2Seq"),HBe=l(),kr=a("div"),f(xA.$$.fragment),Q0r=l(),Hc=a("p"),W0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),xQ=a("a"),H0r=o("from_pretrained()"),U0r=o(" class method or the "),kQ=a("a"),J0r=o("from_config()"),Y0r=o(` class
method.`),K0r=l(),kA=a("p"),Z0r=o("This class cannot be instantiated directly using "),K2e=a("code"),eTr=o("__init__()"),oTr=o(" (throws an error)."),rTr=l(),Ct=a("div"),f(SA.$$.fragment),tTr=l(),Z2e=a("p"),aTr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),nTr=l(),Uc=a("p"),sTr=o(`Note:
Loading a model from its configuration file does `),eFe=a("strong"),lTr=o("not"),iTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SQ=a("a"),dTr=o("from_pretrained()"),cTr=o(" to load the model weights."),fTr=l(),oFe=a("p"),mTr=o("Examples:"),gTr=l(),f(RA.$$.fragment),hTr=l(),wo=a("div"),f(BA.$$.fragment),pTr=l(),rFe=a("p"),_Tr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),uTr=l(),yn=a("p"),bTr=o("The model class to instantiate is selected based on the "),tFe=a("code"),FTr=o("model_type"),vTr=o(` property of the config object (either
passed as an argument or loaded from `),aFe=a("code"),TTr=o("pretrained_model_name_or_path"),MTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nFe=a("code"),ETr=o("pretrained_model_name_or_path"),CTr=o(":"),wTr=l(),sFe=a("ul"),u7=a("li"),lFe=a("strong"),ATr=o("vision-encoder-decoder"),yTr=o(" \u2014 "),RQ=a("a"),LTr=o("TFVisionEncoderDecoderModel"),xTr=o(" (Vision Encoder decoder model)"),kTr=l(),iFe=a("p"),STr=o("Examples:"),RTr=l(),f(PA.$$.fragment),UBe=l(),Jc=a("h2"),b7=a("a"),dFe=a("span"),f($A.$$.fragment),BTr=l(),cFe=a("span"),PTr=o("TFAutoModelForSpeechSeq2Seq"),JBe=l(),Sr=a("div"),f(IA.$$.fragment),$Tr=l(),Yc=a("p"),ITr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),BQ=a("a"),qTr=o("from_pretrained()"),NTr=o(" class method or the "),PQ=a("a"),jTr=o("from_config()"),DTr=o(` class
method.`),GTr=l(),qA=a("p"),OTr=o("This class cannot be instantiated directly using "),fFe=a("code"),VTr=o("__init__()"),XTr=o(" (throws an error)."),zTr=l(),wt=a("div"),f(NA.$$.fragment),QTr=l(),mFe=a("p"),WTr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),HTr=l(),Kc=a("p"),UTr=o(`Note:
Loading a model from its configuration file does `),gFe=a("strong"),JTr=o("not"),YTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$Q=a("a"),KTr=o("from_pretrained()"),ZTr=o(" to load the model weights."),e8r=l(),hFe=a("p"),o8r=o("Examples:"),r8r=l(),f(jA.$$.fragment),t8r=l(),Ao=a("div"),f(DA.$$.fragment),a8r=l(),pFe=a("p"),n8r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),s8r=l(),Ln=a("p"),l8r=o("The model class to instantiate is selected based on the "),_Fe=a("code"),i8r=o("model_type"),d8r=o(` property of the config object (either
passed as an argument or loaded from `),uFe=a("code"),c8r=o("pretrained_model_name_or_path"),f8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bFe=a("code"),m8r=o("pretrained_model_name_or_path"),g8r=o(":"),h8r=l(),FFe=a("ul"),F7=a("li"),vFe=a("strong"),p8r=o("speech_to_text"),_8r=o(" \u2014 "),IQ=a("a"),u8r=o("TFSpeech2TextForConditionalGeneration"),b8r=o(" (Speech2Text model)"),F8r=l(),TFe=a("p"),v8r=o("Examples:"),T8r=l(),f(GA.$$.fragment),YBe=l(),Zc=a("h2"),v7=a("a"),MFe=a("span"),f(OA.$$.fragment),M8r=l(),EFe=a("span"),E8r=o("FlaxAutoModel"),KBe=l(),Rr=a("div"),f(VA.$$.fragment),C8r=l(),ef=a("p"),w8r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),qQ=a("a"),A8r=o("from_pretrained()"),y8r=o(" class method or the "),NQ=a("a"),L8r=o("from_config()"),x8r=o(` class
method.`),k8r=l(),XA=a("p"),S8r=o("This class cannot be instantiated directly using "),CFe=a("code"),R8r=o("__init__()"),B8r=o(" (throws an error)."),P8r=l(),At=a("div"),f(zA.$$.fragment),$8r=l(),wFe=a("p"),I8r=o("Instantiates one of the base model classes of the library from a configuration."),q8r=l(),of=a("p"),N8r=o(`Note:
Loading a model from its configuration file does `),AFe=a("strong"),j8r=o("not"),D8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jQ=a("a"),G8r=o("from_pretrained()"),O8r=o(" to load the model weights."),V8r=l(),yFe=a("p"),X8r=o("Examples:"),z8r=l(),f(QA.$$.fragment),Q8r=l(),yo=a("div"),f(WA.$$.fragment),W8r=l(),LFe=a("p"),H8r=o("Instantiate one of the base model classes of the library from a pretrained model."),U8r=l(),xn=a("p"),J8r=o("The model class to instantiate is selected based on the "),xFe=a("code"),Y8r=o("model_type"),K8r=o(` property of the config object (either
passed as an argument or loaded from `),kFe=a("code"),Z8r=o("pretrained_model_name_or_path"),e7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SFe=a("code"),o7r=o("pretrained_model_name_or_path"),r7r=o(":"),t7r=l(),z=a("ul"),T7=a("li"),RFe=a("strong"),a7r=o("albert"),n7r=o(" \u2014 "),DQ=a("a"),s7r=o("FlaxAlbertModel"),l7r=o(" (ALBERT model)"),i7r=l(),M7=a("li"),BFe=a("strong"),d7r=o("bart"),c7r=o(" \u2014 "),GQ=a("a"),f7r=o("FlaxBartModel"),m7r=o(" (BART model)"),g7r=l(),E7=a("li"),PFe=a("strong"),h7r=o("beit"),p7r=o(" \u2014 "),OQ=a("a"),_7r=o("FlaxBeitModel"),u7r=o(" (BEiT model)"),b7r=l(),C7=a("li"),$Fe=a("strong"),F7r=o("bert"),v7r=o(" \u2014 "),VQ=a("a"),T7r=o("FlaxBertModel"),M7r=o(" (BERT model)"),E7r=l(),w7=a("li"),IFe=a("strong"),C7r=o("big_bird"),w7r=o(" \u2014 "),XQ=a("a"),A7r=o("FlaxBigBirdModel"),y7r=o(" (BigBird model)"),L7r=l(),A7=a("li"),qFe=a("strong"),x7r=o("blenderbot"),k7r=o(" \u2014 "),zQ=a("a"),S7r=o("FlaxBlenderbotModel"),R7r=o(" (Blenderbot model)"),B7r=l(),y7=a("li"),NFe=a("strong"),P7r=o("blenderbot-small"),$7r=o(" \u2014 "),QQ=a("a"),I7r=o("FlaxBlenderbotSmallModel"),q7r=o(" (BlenderbotSmall model)"),N7r=l(),L7=a("li"),jFe=a("strong"),j7r=o("clip"),D7r=o(" \u2014 "),WQ=a("a"),G7r=o("FlaxCLIPModel"),O7r=o(" (CLIP model)"),V7r=l(),x7=a("li"),DFe=a("strong"),X7r=o("distilbert"),z7r=o(" \u2014 "),HQ=a("a"),Q7r=o("FlaxDistilBertModel"),W7r=o(" (DistilBERT model)"),H7r=l(),k7=a("li"),GFe=a("strong"),U7r=o("electra"),J7r=o(" \u2014 "),UQ=a("a"),Y7r=o("FlaxElectraModel"),K7r=o(" (ELECTRA model)"),Z7r=l(),S7=a("li"),OFe=a("strong"),eMr=o("gpt2"),oMr=o(" \u2014 "),JQ=a("a"),rMr=o("FlaxGPT2Model"),tMr=o(" (OpenAI GPT-2 model)"),aMr=l(),R7=a("li"),VFe=a("strong"),nMr=o("gpt_neo"),sMr=o(" \u2014 "),YQ=a("a"),lMr=o("FlaxGPTNeoModel"),iMr=o(" (GPT Neo model)"),dMr=l(),B7=a("li"),XFe=a("strong"),cMr=o("gptj"),fMr=o(" \u2014 "),KQ=a("a"),mMr=o("FlaxGPTJModel"),gMr=o(" (GPT-J model)"),hMr=l(),P7=a("li"),zFe=a("strong"),pMr=o("marian"),_Mr=o(" \u2014 "),ZQ=a("a"),uMr=o("FlaxMarianModel"),bMr=o(" (Marian model)"),FMr=l(),$7=a("li"),QFe=a("strong"),vMr=o("mbart"),TMr=o(" \u2014 "),eW=a("a"),MMr=o("FlaxMBartModel"),EMr=o(" (mBART model)"),CMr=l(),I7=a("li"),WFe=a("strong"),wMr=o("mt5"),AMr=o(" \u2014 "),oW=a("a"),yMr=o("FlaxMT5Model"),LMr=o(" (mT5 model)"),xMr=l(),q7=a("li"),HFe=a("strong"),kMr=o("pegasus"),SMr=o(" \u2014 "),rW=a("a"),RMr=o("FlaxPegasusModel"),BMr=o(" (Pegasus model)"),PMr=l(),N7=a("li"),UFe=a("strong"),$Mr=o("roberta"),IMr=o(" \u2014 "),tW=a("a"),qMr=o("FlaxRobertaModel"),NMr=o(" (RoBERTa model)"),jMr=l(),j7=a("li"),JFe=a("strong"),DMr=o("roformer"),GMr=o(" \u2014 "),aW=a("a"),OMr=o("FlaxRoFormerModel"),VMr=o(" (RoFormer model)"),XMr=l(),D7=a("li"),YFe=a("strong"),zMr=o("t5"),QMr=o(" \u2014 "),nW=a("a"),WMr=o("FlaxT5Model"),HMr=o(" (T5 model)"),UMr=l(),G7=a("li"),KFe=a("strong"),JMr=o("vision-text-dual-encoder"),YMr=o(" \u2014 "),sW=a("a"),KMr=o("FlaxVisionTextDualEncoderModel"),ZMr=o(" (VisionTextDualEncoder model)"),e4r=l(),O7=a("li"),ZFe=a("strong"),o4r=o("vit"),r4r=o(" \u2014 "),lW=a("a"),t4r=o("FlaxViTModel"),a4r=o(" (ViT model)"),n4r=l(),V7=a("li"),eve=a("strong"),s4r=o("wav2vec2"),l4r=o(" \u2014 "),iW=a("a"),i4r=o("FlaxWav2Vec2Model"),d4r=o(" (Wav2Vec2 model)"),c4r=l(),X7=a("li"),ove=a("strong"),f4r=o("xglm"),m4r=o(" \u2014 "),dW=a("a"),g4r=o("FlaxXGLMModel"),h4r=o(" (XGLM model)"),p4r=l(),z7=a("li"),rve=a("strong"),_4r=o("xlm-roberta"),u4r=o(" \u2014 "),cW=a("a"),b4r=o("FlaxXLMRobertaModel"),F4r=o(" (XLM-RoBERTa model)"),v4r=l(),tve=a("p"),T4r=o("Examples:"),M4r=l(),f(HA.$$.fragment),ZBe=l(),rf=a("h2"),Q7=a("a"),ave=a("span"),f(UA.$$.fragment),E4r=l(),nve=a("span"),C4r=o("FlaxAutoModelForCausalLM"),ePe=l(),Br=a("div"),f(JA.$$.fragment),w4r=l(),tf=a("p"),A4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),fW=a("a"),y4r=o("from_pretrained()"),L4r=o(" class method or the "),mW=a("a"),x4r=o("from_config()"),k4r=o(` class
method.`),S4r=l(),YA=a("p"),R4r=o("This class cannot be instantiated directly using "),sve=a("code"),B4r=o("__init__()"),P4r=o(" (throws an error)."),$4r=l(),yt=a("div"),f(KA.$$.fragment),I4r=l(),lve=a("p"),q4r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),N4r=l(),af=a("p"),j4r=o(`Note:
Loading a model from its configuration file does `),ive=a("strong"),D4r=o("not"),G4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gW=a("a"),O4r=o("from_pretrained()"),V4r=o(" to load the model weights."),X4r=l(),dve=a("p"),z4r=o("Examples:"),Q4r=l(),f(ZA.$$.fragment),W4r=l(),Lo=a("div"),f(ey.$$.fragment),H4r=l(),cve=a("p"),U4r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),J4r=l(),kn=a("p"),Y4r=o("The model class to instantiate is selected based on the "),fve=a("code"),K4r=o("model_type"),Z4r=o(` property of the config object (either
passed as an argument or loaded from `),mve=a("code"),eEr=o("pretrained_model_name_or_path"),oEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gve=a("code"),rEr=o("pretrained_model_name_or_path"),tEr=o(":"),aEr=l(),ca=a("ul"),W7=a("li"),hve=a("strong"),nEr=o("bart"),sEr=o(" \u2014 "),hW=a("a"),lEr=o("FlaxBartForCausalLM"),iEr=o(" (BART model)"),dEr=l(),H7=a("li"),pve=a("strong"),cEr=o("gpt2"),fEr=o(" \u2014 "),pW=a("a"),mEr=o("FlaxGPT2LMHeadModel"),gEr=o(" (OpenAI GPT-2 model)"),hEr=l(),U7=a("li"),_ve=a("strong"),pEr=o("gpt_neo"),_Er=o(" \u2014 "),_W=a("a"),uEr=o("FlaxGPTNeoForCausalLM"),bEr=o(" (GPT Neo model)"),FEr=l(),J7=a("li"),uve=a("strong"),vEr=o("gptj"),TEr=o(" \u2014 "),uW=a("a"),MEr=o("FlaxGPTJForCausalLM"),EEr=o(" (GPT-J model)"),CEr=l(),Y7=a("li"),bve=a("strong"),wEr=o("xglm"),AEr=o(" \u2014 "),bW=a("a"),yEr=o("FlaxXGLMForCausalLM"),LEr=o(" (XGLM model)"),xEr=l(),Fve=a("p"),kEr=o("Examples:"),SEr=l(),f(oy.$$.fragment),oPe=l(),nf=a("h2"),K7=a("a"),vve=a("span"),f(ry.$$.fragment),REr=l(),Tve=a("span"),BEr=o("FlaxAutoModelForPreTraining"),rPe=l(),Pr=a("div"),f(ty.$$.fragment),PEr=l(),sf=a("p"),$Er=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),FW=a("a"),IEr=o("from_pretrained()"),qEr=o(" class method or the "),vW=a("a"),NEr=o("from_config()"),jEr=o(` class
method.`),DEr=l(),ay=a("p"),GEr=o("This class cannot be instantiated directly using "),Mve=a("code"),OEr=o("__init__()"),VEr=o(" (throws an error)."),XEr=l(),Lt=a("div"),f(ny.$$.fragment),zEr=l(),Eve=a("p"),QEr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),WEr=l(),lf=a("p"),HEr=o(`Note:
Loading a model from its configuration file does `),Cve=a("strong"),UEr=o("not"),JEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TW=a("a"),YEr=o("from_pretrained()"),KEr=o(" to load the model weights."),ZEr=l(),wve=a("p"),eCr=o("Examples:"),oCr=l(),f(sy.$$.fragment),rCr=l(),xo=a("div"),f(ly.$$.fragment),tCr=l(),Ave=a("p"),aCr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),nCr=l(),Sn=a("p"),sCr=o("The model class to instantiate is selected based on the "),yve=a("code"),lCr=o("model_type"),iCr=o(` property of the config object (either
passed as an argument or loaded from `),Lve=a("code"),dCr=o("pretrained_model_name_or_path"),cCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xve=a("code"),fCr=o("pretrained_model_name_or_path"),mCr=o(":"),gCr=l(),me=a("ul"),Z7=a("li"),kve=a("strong"),hCr=o("albert"),pCr=o(" \u2014 "),MW=a("a"),_Cr=o("FlaxAlbertForPreTraining"),uCr=o(" (ALBERT model)"),bCr=l(),eM=a("li"),Sve=a("strong"),FCr=o("bart"),vCr=o(" \u2014 "),EW=a("a"),TCr=o("FlaxBartForConditionalGeneration"),MCr=o(" (BART model)"),ECr=l(),oM=a("li"),Rve=a("strong"),CCr=o("bert"),wCr=o(" \u2014 "),CW=a("a"),ACr=o("FlaxBertForPreTraining"),yCr=o(" (BERT model)"),LCr=l(),rM=a("li"),Bve=a("strong"),xCr=o("big_bird"),kCr=o(" \u2014 "),wW=a("a"),SCr=o("FlaxBigBirdForPreTraining"),RCr=o(" (BigBird model)"),BCr=l(),tM=a("li"),Pve=a("strong"),PCr=o("electra"),$Cr=o(" \u2014 "),AW=a("a"),ICr=o("FlaxElectraForPreTraining"),qCr=o(" (ELECTRA model)"),NCr=l(),aM=a("li"),$ve=a("strong"),jCr=o("mbart"),DCr=o(" \u2014 "),yW=a("a"),GCr=o("FlaxMBartForConditionalGeneration"),OCr=o(" (mBART model)"),VCr=l(),nM=a("li"),Ive=a("strong"),XCr=o("mt5"),zCr=o(" \u2014 "),LW=a("a"),QCr=o("FlaxMT5ForConditionalGeneration"),WCr=o(" (mT5 model)"),HCr=l(),sM=a("li"),qve=a("strong"),UCr=o("roberta"),JCr=o(" \u2014 "),xW=a("a"),YCr=o("FlaxRobertaForMaskedLM"),KCr=o(" (RoBERTa model)"),ZCr=l(),lM=a("li"),Nve=a("strong"),e5r=o("roformer"),o5r=o(" \u2014 "),kW=a("a"),r5r=o("FlaxRoFormerForMaskedLM"),t5r=o(" (RoFormer model)"),a5r=l(),iM=a("li"),jve=a("strong"),n5r=o("t5"),s5r=o(" \u2014 "),SW=a("a"),l5r=o("FlaxT5ForConditionalGeneration"),i5r=o(" (T5 model)"),d5r=l(),dM=a("li"),Dve=a("strong"),c5r=o("wav2vec2"),f5r=o(" \u2014 "),RW=a("a"),m5r=o("FlaxWav2Vec2ForPreTraining"),g5r=o(" (Wav2Vec2 model)"),h5r=l(),cM=a("li"),Gve=a("strong"),p5r=o("xlm-roberta"),_5r=o(" \u2014 "),BW=a("a"),u5r=o("FlaxXLMRobertaForMaskedLM"),b5r=o(" (XLM-RoBERTa model)"),F5r=l(),Ove=a("p"),v5r=o("Examples:"),T5r=l(),f(iy.$$.fragment),tPe=l(),df=a("h2"),fM=a("a"),Vve=a("span"),f(dy.$$.fragment),M5r=l(),Xve=a("span"),E5r=o("FlaxAutoModelForMaskedLM"),aPe=l(),$r=a("div"),f(cy.$$.fragment),C5r=l(),cf=a("p"),w5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),PW=a("a"),A5r=o("from_pretrained()"),y5r=o(" class method or the "),$W=a("a"),L5r=o("from_config()"),x5r=o(` class
method.`),k5r=l(),fy=a("p"),S5r=o("This class cannot be instantiated directly using "),zve=a("code"),R5r=o("__init__()"),B5r=o(" (throws an error)."),P5r=l(),xt=a("div"),f(my.$$.fragment),$5r=l(),Qve=a("p"),I5r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),q5r=l(),ff=a("p"),N5r=o(`Note:
Loading a model from its configuration file does `),Wve=a("strong"),j5r=o("not"),D5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IW=a("a"),G5r=o("from_pretrained()"),O5r=o(" to load the model weights."),V5r=l(),Hve=a("p"),X5r=o("Examples:"),z5r=l(),f(gy.$$.fragment),Q5r=l(),ko=a("div"),f(hy.$$.fragment),W5r=l(),Uve=a("p"),H5r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),U5r=l(),Rn=a("p"),J5r=o("The model class to instantiate is selected based on the "),Jve=a("code"),Y5r=o("model_type"),K5r=o(` property of the config object (either
passed as an argument or loaded from `),Yve=a("code"),Z5r=o("pretrained_model_name_or_path"),e3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kve=a("code"),o3r=o("pretrained_model_name_or_path"),r3r=o(":"),t3r=l(),Fe=a("ul"),mM=a("li"),Zve=a("strong"),a3r=o("albert"),n3r=o(" \u2014 "),qW=a("a"),s3r=o("FlaxAlbertForMaskedLM"),l3r=o(" (ALBERT model)"),i3r=l(),gM=a("li"),e6e=a("strong"),d3r=o("bart"),c3r=o(" \u2014 "),NW=a("a"),f3r=o("FlaxBartForConditionalGeneration"),m3r=o(" (BART model)"),g3r=l(),hM=a("li"),o6e=a("strong"),h3r=o("bert"),p3r=o(" \u2014 "),jW=a("a"),_3r=o("FlaxBertForMaskedLM"),u3r=o(" (BERT model)"),b3r=l(),pM=a("li"),r6e=a("strong"),F3r=o("big_bird"),v3r=o(" \u2014 "),DW=a("a"),T3r=o("FlaxBigBirdForMaskedLM"),M3r=o(" (BigBird model)"),E3r=l(),_M=a("li"),t6e=a("strong"),C3r=o("distilbert"),w3r=o(" \u2014 "),GW=a("a"),A3r=o("FlaxDistilBertForMaskedLM"),y3r=o(" (DistilBERT model)"),L3r=l(),uM=a("li"),a6e=a("strong"),x3r=o("electra"),k3r=o(" \u2014 "),OW=a("a"),S3r=o("FlaxElectraForMaskedLM"),R3r=o(" (ELECTRA model)"),B3r=l(),bM=a("li"),n6e=a("strong"),P3r=o("mbart"),$3r=o(" \u2014 "),VW=a("a"),I3r=o("FlaxMBartForConditionalGeneration"),q3r=o(" (mBART model)"),N3r=l(),FM=a("li"),s6e=a("strong"),j3r=o("roberta"),D3r=o(" \u2014 "),XW=a("a"),G3r=o("FlaxRobertaForMaskedLM"),O3r=o(" (RoBERTa model)"),V3r=l(),vM=a("li"),l6e=a("strong"),X3r=o("roformer"),z3r=o(" \u2014 "),zW=a("a"),Q3r=o("FlaxRoFormerForMaskedLM"),W3r=o(" (RoFormer model)"),H3r=l(),TM=a("li"),i6e=a("strong"),U3r=o("xlm-roberta"),J3r=o(" \u2014 "),QW=a("a"),Y3r=o("FlaxXLMRobertaForMaskedLM"),K3r=o(" (XLM-RoBERTa model)"),Z3r=l(),d6e=a("p"),ewr=o("Examples:"),owr=l(),f(py.$$.fragment),nPe=l(),mf=a("h2"),MM=a("a"),c6e=a("span"),f(_y.$$.fragment),rwr=l(),f6e=a("span"),twr=o("FlaxAutoModelForSeq2SeqLM"),sPe=l(),Ir=a("div"),f(uy.$$.fragment),awr=l(),gf=a("p"),nwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),WW=a("a"),swr=o("from_pretrained()"),lwr=o(" class method or the "),HW=a("a"),iwr=o("from_config()"),dwr=o(` class
method.`),cwr=l(),by=a("p"),fwr=o("This class cannot be instantiated directly using "),m6e=a("code"),mwr=o("__init__()"),gwr=o(" (throws an error)."),hwr=l(),kt=a("div"),f(Fy.$$.fragment),pwr=l(),g6e=a("p"),_wr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),uwr=l(),hf=a("p"),bwr=o(`Note:
Loading a model from its configuration file does `),h6e=a("strong"),Fwr=o("not"),vwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UW=a("a"),Twr=o("from_pretrained()"),Mwr=o(" to load the model weights."),Ewr=l(),p6e=a("p"),Cwr=o("Examples:"),wwr=l(),f(vy.$$.fragment),Awr=l(),So=a("div"),f(Ty.$$.fragment),ywr=l(),_6e=a("p"),Lwr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),xwr=l(),Bn=a("p"),kwr=o("The model class to instantiate is selected based on the "),u6e=a("code"),Swr=o("model_type"),Rwr=o(` property of the config object (either
passed as an argument or loaded from `),b6e=a("code"),Bwr=o("pretrained_model_name_or_path"),Pwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F6e=a("code"),$wr=o("pretrained_model_name_or_path"),Iwr=o(":"),qwr=l(),Ee=a("ul"),EM=a("li"),v6e=a("strong"),Nwr=o("bart"),jwr=o(" \u2014 "),JW=a("a"),Dwr=o("FlaxBartForConditionalGeneration"),Gwr=o(" (BART model)"),Owr=l(),CM=a("li"),T6e=a("strong"),Vwr=o("blenderbot"),Xwr=o(" \u2014 "),YW=a("a"),zwr=o("FlaxBlenderbotForConditionalGeneration"),Qwr=o(" (Blenderbot model)"),Wwr=l(),wM=a("li"),M6e=a("strong"),Hwr=o("blenderbot-small"),Uwr=o(" \u2014 "),KW=a("a"),Jwr=o("FlaxBlenderbotSmallForConditionalGeneration"),Ywr=o(" (BlenderbotSmall model)"),Kwr=l(),AM=a("li"),E6e=a("strong"),Zwr=o("encoder-decoder"),eAr=o(" \u2014 "),ZW=a("a"),oAr=o("FlaxEncoderDecoderModel"),rAr=o(" (Encoder decoder model)"),tAr=l(),yM=a("li"),C6e=a("strong"),aAr=o("marian"),nAr=o(" \u2014 "),eH=a("a"),sAr=o("FlaxMarianMTModel"),lAr=o(" (Marian model)"),iAr=l(),LM=a("li"),w6e=a("strong"),dAr=o("mbart"),cAr=o(" \u2014 "),oH=a("a"),fAr=o("FlaxMBartForConditionalGeneration"),mAr=o(" (mBART model)"),gAr=l(),xM=a("li"),A6e=a("strong"),hAr=o("mt5"),pAr=o(" \u2014 "),rH=a("a"),_Ar=o("FlaxMT5ForConditionalGeneration"),uAr=o(" (mT5 model)"),bAr=l(),kM=a("li"),y6e=a("strong"),FAr=o("pegasus"),vAr=o(" \u2014 "),tH=a("a"),TAr=o("FlaxPegasusForConditionalGeneration"),MAr=o(" (Pegasus model)"),EAr=l(),SM=a("li"),L6e=a("strong"),CAr=o("t5"),wAr=o(" \u2014 "),aH=a("a"),AAr=o("FlaxT5ForConditionalGeneration"),yAr=o(" (T5 model)"),LAr=l(),x6e=a("p"),xAr=o("Examples:"),kAr=l(),f(My.$$.fragment),lPe=l(),pf=a("h2"),RM=a("a"),k6e=a("span"),f(Ey.$$.fragment),SAr=l(),S6e=a("span"),RAr=o("FlaxAutoModelForSequenceClassification"),iPe=l(),qr=a("div"),f(Cy.$$.fragment),BAr=l(),_f=a("p"),PAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),nH=a("a"),$Ar=o("from_pretrained()"),IAr=o(" class method or the "),sH=a("a"),qAr=o("from_config()"),NAr=o(` class
method.`),jAr=l(),wy=a("p"),DAr=o("This class cannot be instantiated directly using "),R6e=a("code"),GAr=o("__init__()"),OAr=o(" (throws an error)."),VAr=l(),St=a("div"),f(Ay.$$.fragment),XAr=l(),B6e=a("p"),zAr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),QAr=l(),uf=a("p"),WAr=o(`Note:
Loading a model from its configuration file does `),P6e=a("strong"),HAr=o("not"),UAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lH=a("a"),JAr=o("from_pretrained()"),YAr=o(" to load the model weights."),KAr=l(),$6e=a("p"),ZAr=o("Examples:"),eyr=l(),f(yy.$$.fragment),oyr=l(),Ro=a("div"),f(Ly.$$.fragment),ryr=l(),I6e=a("p"),tyr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),ayr=l(),Pn=a("p"),nyr=o("The model class to instantiate is selected based on the "),q6e=a("code"),syr=o("model_type"),lyr=o(` property of the config object (either
passed as an argument or loaded from `),N6e=a("code"),iyr=o("pretrained_model_name_or_path"),dyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j6e=a("code"),cyr=o("pretrained_model_name_or_path"),fyr=o(":"),myr=l(),ve=a("ul"),BM=a("li"),D6e=a("strong"),gyr=o("albert"),hyr=o(" \u2014 "),iH=a("a"),pyr=o("FlaxAlbertForSequenceClassification"),_yr=o(" (ALBERT model)"),uyr=l(),PM=a("li"),G6e=a("strong"),byr=o("bart"),Fyr=o(" \u2014 "),dH=a("a"),vyr=o("FlaxBartForSequenceClassification"),Tyr=o(" (BART model)"),Myr=l(),$M=a("li"),O6e=a("strong"),Eyr=o("bert"),Cyr=o(" \u2014 "),cH=a("a"),wyr=o("FlaxBertForSequenceClassification"),Ayr=o(" (BERT model)"),yyr=l(),IM=a("li"),V6e=a("strong"),Lyr=o("big_bird"),xyr=o(" \u2014 "),fH=a("a"),kyr=o("FlaxBigBirdForSequenceClassification"),Syr=o(" (BigBird model)"),Ryr=l(),qM=a("li"),X6e=a("strong"),Byr=o("distilbert"),Pyr=o(" \u2014 "),mH=a("a"),$yr=o("FlaxDistilBertForSequenceClassification"),Iyr=o(" (DistilBERT model)"),qyr=l(),NM=a("li"),z6e=a("strong"),Nyr=o("electra"),jyr=o(" \u2014 "),gH=a("a"),Dyr=o("FlaxElectraForSequenceClassification"),Gyr=o(" (ELECTRA model)"),Oyr=l(),jM=a("li"),Q6e=a("strong"),Vyr=o("mbart"),Xyr=o(" \u2014 "),hH=a("a"),zyr=o("FlaxMBartForSequenceClassification"),Qyr=o(" (mBART model)"),Wyr=l(),DM=a("li"),W6e=a("strong"),Hyr=o("roberta"),Uyr=o(" \u2014 "),pH=a("a"),Jyr=o("FlaxRobertaForSequenceClassification"),Yyr=o(" (RoBERTa model)"),Kyr=l(),GM=a("li"),H6e=a("strong"),Zyr=o("roformer"),eLr=o(" \u2014 "),_H=a("a"),oLr=o("FlaxRoFormerForSequenceClassification"),rLr=o(" (RoFormer model)"),tLr=l(),OM=a("li"),U6e=a("strong"),aLr=o("xlm-roberta"),nLr=o(" \u2014 "),uH=a("a"),sLr=o("FlaxXLMRobertaForSequenceClassification"),lLr=o(" (XLM-RoBERTa model)"),iLr=l(),J6e=a("p"),dLr=o("Examples:"),cLr=l(),f(xy.$$.fragment),dPe=l(),bf=a("h2"),VM=a("a"),Y6e=a("span"),f(ky.$$.fragment),fLr=l(),K6e=a("span"),mLr=o("FlaxAutoModelForQuestionAnswering"),cPe=l(),Nr=a("div"),f(Sy.$$.fragment),gLr=l(),Ff=a("p"),hLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),bH=a("a"),pLr=o("from_pretrained()"),_Lr=o(" class method or the "),FH=a("a"),uLr=o("from_config()"),bLr=o(` class
method.`),FLr=l(),Ry=a("p"),vLr=o("This class cannot be instantiated directly using "),Z6e=a("code"),TLr=o("__init__()"),MLr=o(" (throws an error)."),ELr=l(),Rt=a("div"),f(By.$$.fragment),CLr=l(),e0e=a("p"),wLr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),ALr=l(),vf=a("p"),yLr=o(`Note:
Loading a model from its configuration file does `),o0e=a("strong"),LLr=o("not"),xLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vH=a("a"),kLr=o("from_pretrained()"),SLr=o(" to load the model weights."),RLr=l(),r0e=a("p"),BLr=o("Examples:"),PLr=l(),f(Py.$$.fragment),$Lr=l(),Bo=a("div"),f($y.$$.fragment),ILr=l(),t0e=a("p"),qLr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),NLr=l(),$n=a("p"),jLr=o("The model class to instantiate is selected based on the "),a0e=a("code"),DLr=o("model_type"),GLr=o(` property of the config object (either
passed as an argument or loaded from `),n0e=a("code"),OLr=o("pretrained_model_name_or_path"),VLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s0e=a("code"),XLr=o("pretrained_model_name_or_path"),zLr=o(":"),QLr=l(),Te=a("ul"),XM=a("li"),l0e=a("strong"),WLr=o("albert"),HLr=o(" \u2014 "),TH=a("a"),ULr=o("FlaxAlbertForQuestionAnswering"),JLr=o(" (ALBERT model)"),YLr=l(),zM=a("li"),i0e=a("strong"),KLr=o("bart"),ZLr=o(" \u2014 "),MH=a("a"),e9r=o("FlaxBartForQuestionAnswering"),o9r=o(" (BART model)"),r9r=l(),QM=a("li"),d0e=a("strong"),t9r=o("bert"),a9r=o(" \u2014 "),EH=a("a"),n9r=o("FlaxBertForQuestionAnswering"),s9r=o(" (BERT model)"),l9r=l(),WM=a("li"),c0e=a("strong"),i9r=o("big_bird"),d9r=o(" \u2014 "),CH=a("a"),c9r=o("FlaxBigBirdForQuestionAnswering"),f9r=o(" (BigBird model)"),m9r=l(),HM=a("li"),f0e=a("strong"),g9r=o("distilbert"),h9r=o(" \u2014 "),wH=a("a"),p9r=o("FlaxDistilBertForQuestionAnswering"),_9r=o(" (DistilBERT model)"),u9r=l(),UM=a("li"),m0e=a("strong"),b9r=o("electra"),F9r=o(" \u2014 "),AH=a("a"),v9r=o("FlaxElectraForQuestionAnswering"),T9r=o(" (ELECTRA model)"),M9r=l(),JM=a("li"),g0e=a("strong"),E9r=o("mbart"),C9r=o(" \u2014 "),yH=a("a"),w9r=o("FlaxMBartForQuestionAnswering"),A9r=o(" (mBART model)"),y9r=l(),YM=a("li"),h0e=a("strong"),L9r=o("roberta"),x9r=o(" \u2014 "),LH=a("a"),k9r=o("FlaxRobertaForQuestionAnswering"),S9r=o(" (RoBERTa model)"),R9r=l(),KM=a("li"),p0e=a("strong"),B9r=o("roformer"),P9r=o(" \u2014 "),xH=a("a"),$9r=o("FlaxRoFormerForQuestionAnswering"),I9r=o(" (RoFormer model)"),q9r=l(),ZM=a("li"),_0e=a("strong"),N9r=o("xlm-roberta"),j9r=o(" \u2014 "),kH=a("a"),D9r=o("FlaxXLMRobertaForQuestionAnswering"),G9r=o(" (XLM-RoBERTa model)"),O9r=l(),u0e=a("p"),V9r=o("Examples:"),X9r=l(),f(Iy.$$.fragment),fPe=l(),Tf=a("h2"),e4=a("a"),b0e=a("span"),f(qy.$$.fragment),z9r=l(),F0e=a("span"),Q9r=o("FlaxAutoModelForTokenClassification"),mPe=l(),jr=a("div"),f(Ny.$$.fragment),W9r=l(),Mf=a("p"),H9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),SH=a("a"),U9r=o("from_pretrained()"),J9r=o(" class method or the "),RH=a("a"),Y9r=o("from_config()"),K9r=o(` class
method.`),Z9r=l(),jy=a("p"),exr=o("This class cannot be instantiated directly using "),v0e=a("code"),oxr=o("__init__()"),rxr=o(" (throws an error)."),txr=l(),Bt=a("div"),f(Dy.$$.fragment),axr=l(),T0e=a("p"),nxr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),sxr=l(),Ef=a("p"),lxr=o(`Note:
Loading a model from its configuration file does `),M0e=a("strong"),ixr=o("not"),dxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BH=a("a"),cxr=o("from_pretrained()"),fxr=o(" to load the model weights."),mxr=l(),E0e=a("p"),gxr=o("Examples:"),hxr=l(),f(Gy.$$.fragment),pxr=l(),Po=a("div"),f(Oy.$$.fragment),_xr=l(),C0e=a("p"),uxr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),bxr=l(),In=a("p"),Fxr=o("The model class to instantiate is selected based on the "),w0e=a("code"),vxr=o("model_type"),Txr=o(` property of the config object (either
passed as an argument or loaded from `),A0e=a("code"),Mxr=o("pretrained_model_name_or_path"),Exr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y0e=a("code"),Cxr=o("pretrained_model_name_or_path"),wxr=o(":"),Axr=l(),Be=a("ul"),o4=a("li"),L0e=a("strong"),yxr=o("albert"),Lxr=o(" \u2014 "),PH=a("a"),xxr=o("FlaxAlbertForTokenClassification"),kxr=o(" (ALBERT model)"),Sxr=l(),r4=a("li"),x0e=a("strong"),Rxr=o("bert"),Bxr=o(" \u2014 "),$H=a("a"),Pxr=o("FlaxBertForTokenClassification"),$xr=o(" (BERT model)"),Ixr=l(),t4=a("li"),k0e=a("strong"),qxr=o("big_bird"),Nxr=o(" \u2014 "),IH=a("a"),jxr=o("FlaxBigBirdForTokenClassification"),Dxr=o(" (BigBird model)"),Gxr=l(),a4=a("li"),S0e=a("strong"),Oxr=o("distilbert"),Vxr=o(" \u2014 "),qH=a("a"),Xxr=o("FlaxDistilBertForTokenClassification"),zxr=o(" (DistilBERT model)"),Qxr=l(),n4=a("li"),R0e=a("strong"),Wxr=o("electra"),Hxr=o(" \u2014 "),NH=a("a"),Uxr=o("FlaxElectraForTokenClassification"),Jxr=o(" (ELECTRA model)"),Yxr=l(),s4=a("li"),B0e=a("strong"),Kxr=o("roberta"),Zxr=o(" \u2014 "),jH=a("a"),ekr=o("FlaxRobertaForTokenClassification"),okr=o(" (RoBERTa model)"),rkr=l(),l4=a("li"),P0e=a("strong"),tkr=o("roformer"),akr=o(" \u2014 "),DH=a("a"),nkr=o("FlaxRoFormerForTokenClassification"),skr=o(" (RoFormer model)"),lkr=l(),i4=a("li"),$0e=a("strong"),ikr=o("xlm-roberta"),dkr=o(" \u2014 "),GH=a("a"),ckr=o("FlaxXLMRobertaForTokenClassification"),fkr=o(" (XLM-RoBERTa model)"),mkr=l(),I0e=a("p"),gkr=o("Examples:"),hkr=l(),f(Vy.$$.fragment),gPe=l(),Cf=a("h2"),d4=a("a"),q0e=a("span"),f(Xy.$$.fragment),pkr=l(),N0e=a("span"),_kr=o("FlaxAutoModelForMultipleChoice"),hPe=l(),Dr=a("div"),f(zy.$$.fragment),ukr=l(),wf=a("p"),bkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),OH=a("a"),Fkr=o("from_pretrained()"),vkr=o(" class method or the "),VH=a("a"),Tkr=o("from_config()"),Mkr=o(` class
method.`),Ekr=l(),Qy=a("p"),Ckr=o("This class cannot be instantiated directly using "),j0e=a("code"),wkr=o("__init__()"),Akr=o(" (throws an error)."),ykr=l(),Pt=a("div"),f(Wy.$$.fragment),Lkr=l(),D0e=a("p"),xkr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),kkr=l(),Af=a("p"),Skr=o(`Note:
Loading a model from its configuration file does `),G0e=a("strong"),Rkr=o("not"),Bkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XH=a("a"),Pkr=o("from_pretrained()"),$kr=o(" to load the model weights."),Ikr=l(),O0e=a("p"),qkr=o("Examples:"),Nkr=l(),f(Hy.$$.fragment),jkr=l(),$o=a("div"),f(Uy.$$.fragment),Dkr=l(),V0e=a("p"),Gkr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Okr=l(),qn=a("p"),Vkr=o("The model class to instantiate is selected based on the "),X0e=a("code"),Xkr=o("model_type"),zkr=o(` property of the config object (either
passed as an argument or loaded from `),z0e=a("code"),Qkr=o("pretrained_model_name_or_path"),Wkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q0e=a("code"),Hkr=o("pretrained_model_name_or_path"),Ukr=o(":"),Jkr=l(),Pe=a("ul"),c4=a("li"),W0e=a("strong"),Ykr=o("albert"),Kkr=o(" \u2014 "),zH=a("a"),Zkr=o("FlaxAlbertForMultipleChoice"),eSr=o(" (ALBERT model)"),oSr=l(),f4=a("li"),H0e=a("strong"),rSr=o("bert"),tSr=o(" \u2014 "),QH=a("a"),aSr=o("FlaxBertForMultipleChoice"),nSr=o(" (BERT model)"),sSr=l(),m4=a("li"),U0e=a("strong"),lSr=o("big_bird"),iSr=o(" \u2014 "),WH=a("a"),dSr=o("FlaxBigBirdForMultipleChoice"),cSr=o(" (BigBird model)"),fSr=l(),g4=a("li"),J0e=a("strong"),mSr=o("distilbert"),gSr=o(" \u2014 "),HH=a("a"),hSr=o("FlaxDistilBertForMultipleChoice"),pSr=o(" (DistilBERT model)"),_Sr=l(),h4=a("li"),Y0e=a("strong"),uSr=o("electra"),bSr=o(" \u2014 "),UH=a("a"),FSr=o("FlaxElectraForMultipleChoice"),vSr=o(" (ELECTRA model)"),TSr=l(),p4=a("li"),K0e=a("strong"),MSr=o("roberta"),ESr=o(" \u2014 "),JH=a("a"),CSr=o("FlaxRobertaForMultipleChoice"),wSr=o(" (RoBERTa model)"),ASr=l(),_4=a("li"),Z0e=a("strong"),ySr=o("roformer"),LSr=o(" \u2014 "),YH=a("a"),xSr=o("FlaxRoFormerForMultipleChoice"),kSr=o(" (RoFormer model)"),SSr=l(),u4=a("li"),eTe=a("strong"),RSr=o("xlm-roberta"),BSr=o(" \u2014 "),KH=a("a"),PSr=o("FlaxXLMRobertaForMultipleChoice"),$Sr=o(" (XLM-RoBERTa model)"),ISr=l(),oTe=a("p"),qSr=o("Examples:"),NSr=l(),f(Jy.$$.fragment),pPe=l(),yf=a("h2"),b4=a("a"),rTe=a("span"),f(Yy.$$.fragment),jSr=l(),tTe=a("span"),DSr=o("FlaxAutoModelForNextSentencePrediction"),_Pe=l(),Gr=a("div"),f(Ky.$$.fragment),GSr=l(),Lf=a("p"),OSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),ZH=a("a"),VSr=o("from_pretrained()"),XSr=o(" class method or the "),eU=a("a"),zSr=o("from_config()"),QSr=o(` class
method.`),WSr=l(),Zy=a("p"),HSr=o("This class cannot be instantiated directly using "),aTe=a("code"),USr=o("__init__()"),JSr=o(" (throws an error)."),YSr=l(),$t=a("div"),f(eL.$$.fragment),KSr=l(),nTe=a("p"),ZSr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),eRr=l(),xf=a("p"),oRr=o(`Note:
Loading a model from its configuration file does `),sTe=a("strong"),rRr=o("not"),tRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oU=a("a"),aRr=o("from_pretrained()"),nRr=o(" to load the model weights."),sRr=l(),lTe=a("p"),lRr=o("Examples:"),iRr=l(),f(oL.$$.fragment),dRr=l(),Io=a("div"),f(rL.$$.fragment),cRr=l(),iTe=a("p"),fRr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),mRr=l(),Nn=a("p"),gRr=o("The model class to instantiate is selected based on the "),dTe=a("code"),hRr=o("model_type"),pRr=o(` property of the config object (either
passed as an argument or loaded from `),cTe=a("code"),_Rr=o("pretrained_model_name_or_path"),uRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fTe=a("code"),bRr=o("pretrained_model_name_or_path"),FRr=o(":"),vRr=l(),mTe=a("ul"),F4=a("li"),gTe=a("strong"),TRr=o("bert"),MRr=o(" \u2014 "),rU=a("a"),ERr=o("FlaxBertForNextSentencePrediction"),CRr=o(" (BERT model)"),wRr=l(),hTe=a("p"),ARr=o("Examples:"),yRr=l(),f(tL.$$.fragment),uPe=l(),kf=a("h2"),v4=a("a"),pTe=a("span"),f(aL.$$.fragment),LRr=l(),_Te=a("span"),xRr=o("FlaxAutoModelForImageClassification"),bPe=l(),Or=a("div"),f(nL.$$.fragment),kRr=l(),Sf=a("p"),SRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),tU=a("a"),RRr=o("from_pretrained()"),BRr=o(" class method or the "),aU=a("a"),PRr=o("from_config()"),$Rr=o(` class
method.`),IRr=l(),sL=a("p"),qRr=o("This class cannot be instantiated directly using "),uTe=a("code"),NRr=o("__init__()"),jRr=o(" (throws an error)."),DRr=l(),It=a("div"),f(lL.$$.fragment),GRr=l(),bTe=a("p"),ORr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),VRr=l(),Rf=a("p"),XRr=o(`Note:
Loading a model from its configuration file does `),FTe=a("strong"),zRr=o("not"),QRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nU=a("a"),WRr=o("from_pretrained()"),HRr=o(" to load the model weights."),URr=l(),vTe=a("p"),JRr=o("Examples:"),YRr=l(),f(iL.$$.fragment),KRr=l(),qo=a("div"),f(dL.$$.fragment),ZRr=l(),TTe=a("p"),eBr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),oBr=l(),jn=a("p"),rBr=o("The model class to instantiate is selected based on the "),MTe=a("code"),tBr=o("model_type"),aBr=o(` property of the config object (either
passed as an argument or loaded from `),ETe=a("code"),nBr=o("pretrained_model_name_or_path"),sBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CTe=a("code"),lBr=o("pretrained_model_name_or_path"),iBr=o(":"),dBr=l(),cL=a("ul"),T4=a("li"),wTe=a("strong"),cBr=o("beit"),fBr=o(" \u2014 "),sU=a("a"),mBr=o("FlaxBeitForImageClassification"),gBr=o(" (BEiT model)"),hBr=l(),M4=a("li"),ATe=a("strong"),pBr=o("vit"),_Br=o(" \u2014 "),lU=a("a"),uBr=o("FlaxViTForImageClassification"),bBr=o(" (ViT model)"),FBr=l(),yTe=a("p"),vBr=o("Examples:"),TBr=l(),f(fL.$$.fragment),FPe=l(),Bf=a("h2"),E4=a("a"),LTe=a("span"),f(mL.$$.fragment),MBr=l(),xTe=a("span"),EBr=o("FlaxAutoModelForVision2Seq"),vPe=l(),Vr=a("div"),f(gL.$$.fragment),CBr=l(),Pf=a("p"),wBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),iU=a("a"),ABr=o("from_pretrained()"),yBr=o(" class method or the "),dU=a("a"),LBr=o("from_config()"),xBr=o(` class
method.`),kBr=l(),hL=a("p"),SBr=o("This class cannot be instantiated directly using "),kTe=a("code"),RBr=o("__init__()"),BBr=o(" (throws an error)."),PBr=l(),qt=a("div"),f(pL.$$.fragment),$Br=l(),STe=a("p"),IBr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),qBr=l(),$f=a("p"),NBr=o(`Note:
Loading a model from its configuration file does `),RTe=a("strong"),jBr=o("not"),DBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cU=a("a"),GBr=o("from_pretrained()"),OBr=o(" to load the model weights."),VBr=l(),BTe=a("p"),XBr=o("Examples:"),zBr=l(),f(_L.$$.fragment),QBr=l(),No=a("div"),f(uL.$$.fragment),WBr=l(),PTe=a("p"),HBr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),UBr=l(),Dn=a("p"),JBr=o("The model class to instantiate is selected based on the "),$Te=a("code"),YBr=o("model_type"),KBr=o(` property of the config object (either
passed as an argument or loaded from `),ITe=a("code"),ZBr=o("pretrained_model_name_or_path"),ePr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qTe=a("code"),oPr=o("pretrained_model_name_or_path"),rPr=o(":"),tPr=l(),NTe=a("ul"),C4=a("li"),jTe=a("strong"),aPr=o("vision-encoder-decoder"),nPr=o(" \u2014 "),fU=a("a"),sPr=o("FlaxVisionEncoderDecoderModel"),lPr=o(" (Vision Encoder decoder model)"),iPr=l(),DTe=a("p"),dPr=o("Examples:"),cPr=l(),f(bL.$$.fragment),this.h()},l(c){const u=HEt('[data-svelte="svelte-1phssyn"]',document.head);Z=n(u,"META",{name:!0,content:!0}),u.forEach(t),io=i(c),de=n(c,"H1",{class:!0});var FL=s(de);Ce=n(FL,"A",{id:!0,class:!0,href:!0});var GTe=s(Ce);lo=n(GTe,"SPAN",{});var OTe=s(lo);m(ge.$$.fragment,OTe),OTe.forEach(t),GTe.forEach(t),Me=i(FL),Xo=n(FL,"SPAN",{});var mPr=s(Xo);qi=r(mPr,"Auto Classes"),mPr.forEach(t),FL.forEach(t),Nf=i(c),fa=n(c,"P",{});var MPe=s(fa);Ni=r(MPe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ji=n(MPe,"CODE",{});var gPr=s(ji);CE=r(gPr,"from_pretrained()"),gPr.forEach(t),jf=r(MPe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),MPe.forEach(t),xe=i(c),co=n(c,"P",{});var w4=s(co);Di=r(w4,"Instantiating one of "),Gn=n(w4,"A",{href:!0});var hPr=s(Gn);wE=r(hPr,"AutoConfig"),hPr.forEach(t),On=r(w4,", "),Vn=n(w4,"A",{href:!0});var pPr=s(Vn);AE=r(pPr,"AutoModel"),pPr.forEach(t),Gi=r(w4,`, and
`),Xn=n(w4,"A",{href:!0});var _Pr=s(Xn);yE=r(_Pr,"AutoTokenizer"),_Pr.forEach(t),Oi=r(w4," will directly create a class of the relevant architecture. For instance"),w4.forEach(t),Df=i(c),m(Da.$$.fragment,c),fo=i(c),ue=n(c,"P",{});var EPe=s(ue);u9=r(EPe,"will create a model that is an instance of "),Vi=n(EPe,"A",{href:!0});var uPr=s(Vi);b9=r(uPr,"BertModel"),uPr.forEach(t),F9=r(EPe,"."),EPe.forEach(t),zo=i(c),Ga=n(c,"P",{});var CPe=s(Ga);v9=r(CPe,"There is one class of "),Gf=n(CPe,"CODE",{});var bPr=s(Gf);T9=r(bPr,"AutoModel"),bPr.forEach(t),BIe=r(CPe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),CPe.forEach(t),vRe=i(c),Xi=n(c,"H2",{class:!0});var wPe=s(Xi);Of=n(wPe,"A",{id:!0,class:!0,href:!0});var FPr=s(Of);nY=n(FPr,"SPAN",{});var vPr=s(nY);m(LE.$$.fragment,vPr),vPr.forEach(t),FPr.forEach(t),PIe=i(wPe),sY=n(wPe,"SPAN",{});var TPr=s(sY);$Ie=r(TPr,"Extending the Auto Classes"),TPr.forEach(t),wPe.forEach(t),TRe=i(c),zn=n(c,"P",{});var mU=s(zn);IIe=r(mU,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),lY=n(mU,"CODE",{});var MPr=s(lY);qIe=r(MPr,"NewModel"),MPr.forEach(t),NIe=r(mU,", make sure you have a "),iY=n(mU,"CODE",{});var EPr=s(iY);jIe=r(EPr,"NewModelConfig"),EPr.forEach(t),DIe=r(mU,` then you can add those to the auto
classes like this:`),mU.forEach(t),MRe=i(c),m(xE.$$.fragment,c),ERe=i(c),M9=n(c,"P",{});var CPr=s(M9);GIe=r(CPr,"You will then be able to use the auto classes like you would usually do!"),CPr.forEach(t),CRe=i(c),m(Vf.$$.fragment,c),wRe=i(c),zi=n(c,"H2",{class:!0});var APe=s(zi);Xf=n(APe,"A",{id:!0,class:!0,href:!0});var wPr=s(Xf);dY=n(wPr,"SPAN",{});var APr=s(dY);m(kE.$$.fragment,APr),APr.forEach(t),wPr.forEach(t),OIe=i(APe),cY=n(APe,"SPAN",{});var yPr=s(cY);VIe=r(yPr,"AutoConfig"),yPr.forEach(t),APe.forEach(t),ARe=i(c),Qo=n(c,"DIV",{class:!0});var Vs=s(Qo);m(SE.$$.fragment,Vs),XIe=i(Vs),RE=n(Vs,"P",{});var yPe=s(RE);zIe=r(yPe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),E9=n(yPe,"A",{href:!0});var LPr=s(E9);QIe=r(LPr,"from_pretrained()"),LPr.forEach(t),WIe=r(yPe," class method."),yPe.forEach(t),HIe=i(Vs),BE=n(Vs,"P",{});var LPe=s(BE);UIe=r(LPe,"This class cannot be instantiated directly using "),fY=n(LPe,"CODE",{});var xPr=s(fY);JIe=r(xPr,"__init__()"),xPr.forEach(t),YIe=r(LPe," (throws an error)."),LPe.forEach(t),KIe=i(Vs),mo=n(Vs,"DIV",{class:!0});var ga=s(mo);m(PE.$$.fragment,ga),ZIe=i(ga),mY=n(ga,"P",{});var kPr=s(mY);eqe=r(kPr,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),kPr.forEach(t),oqe=i(ga),Qi=n(ga,"P",{});var gU=s(Qi);rqe=r(gU,"The configuration class to instantiate is selected based on the "),gY=n(gU,"CODE",{});var SPr=s(gY);tqe=r(SPr,"model_type"),SPr.forEach(t),aqe=r(gU,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),hY=n(gU,"CODE",{});var RPr=s(hY);nqe=r(RPr,"pretrained_model_name_or_path"),RPr.forEach(t),sqe=r(gU,":"),gU.forEach(t),lqe=i(ga),F=n(ga,"UL",{});var v=s(F);zf=n(v,"LI",{});var VTe=s(zf);pY=n(VTe,"STRONG",{});var BPr=s(pY);iqe=r(BPr,"albert"),BPr.forEach(t),dqe=r(VTe," \u2014 "),C9=n(VTe,"A",{href:!0});var PPr=s(C9);cqe=r(PPr,"AlbertConfig"),PPr.forEach(t),fqe=r(VTe," (ALBERT model)"),VTe.forEach(t),mqe=i(v),Qf=n(v,"LI",{});var XTe=s(Qf);_Y=n(XTe,"STRONG",{});var $Pr=s(_Y);gqe=r($Pr,"bart"),$Pr.forEach(t),hqe=r(XTe," \u2014 "),w9=n(XTe,"A",{href:!0});var IPr=s(w9);pqe=r(IPr,"BartConfig"),IPr.forEach(t),_qe=r(XTe," (BART model)"),XTe.forEach(t),uqe=i(v),Wf=n(v,"LI",{});var zTe=s(Wf);uY=n(zTe,"STRONG",{});var qPr=s(uY);bqe=r(qPr,"beit"),qPr.forEach(t),Fqe=r(zTe," \u2014 "),A9=n(zTe,"A",{href:!0});var NPr=s(A9);vqe=r(NPr,"BeitConfig"),NPr.forEach(t),Tqe=r(zTe," (BEiT model)"),zTe.forEach(t),Mqe=i(v),Hf=n(v,"LI",{});var QTe=s(Hf);bY=n(QTe,"STRONG",{});var jPr=s(bY);Eqe=r(jPr,"bert"),jPr.forEach(t),Cqe=r(QTe," \u2014 "),y9=n(QTe,"A",{href:!0});var DPr=s(y9);wqe=r(DPr,"BertConfig"),DPr.forEach(t),Aqe=r(QTe," (BERT model)"),QTe.forEach(t),yqe=i(v),Uf=n(v,"LI",{});var WTe=s(Uf);FY=n(WTe,"STRONG",{});var GPr=s(FY);Lqe=r(GPr,"bert-generation"),GPr.forEach(t),xqe=r(WTe," \u2014 "),L9=n(WTe,"A",{href:!0});var OPr=s(L9);kqe=r(OPr,"BertGenerationConfig"),OPr.forEach(t),Sqe=r(WTe," (Bert Generation model)"),WTe.forEach(t),Rqe=i(v),Jf=n(v,"LI",{});var HTe=s(Jf);vY=n(HTe,"STRONG",{});var VPr=s(vY);Bqe=r(VPr,"big_bird"),VPr.forEach(t),Pqe=r(HTe," \u2014 "),x9=n(HTe,"A",{href:!0});var XPr=s(x9);$qe=r(XPr,"BigBirdConfig"),XPr.forEach(t),Iqe=r(HTe," (BigBird model)"),HTe.forEach(t),qqe=i(v),Yf=n(v,"LI",{});var UTe=s(Yf);TY=n(UTe,"STRONG",{});var zPr=s(TY);Nqe=r(zPr,"bigbird_pegasus"),zPr.forEach(t),jqe=r(UTe," \u2014 "),k9=n(UTe,"A",{href:!0});var QPr=s(k9);Dqe=r(QPr,"BigBirdPegasusConfig"),QPr.forEach(t),Gqe=r(UTe," (BigBirdPegasus model)"),UTe.forEach(t),Oqe=i(v),Kf=n(v,"LI",{});var JTe=s(Kf);MY=n(JTe,"STRONG",{});var WPr=s(MY);Vqe=r(WPr,"blenderbot"),WPr.forEach(t),Xqe=r(JTe," \u2014 "),S9=n(JTe,"A",{href:!0});var HPr=s(S9);zqe=r(HPr,"BlenderbotConfig"),HPr.forEach(t),Qqe=r(JTe," (Blenderbot model)"),JTe.forEach(t),Wqe=i(v),Zf=n(v,"LI",{});var YTe=s(Zf);EY=n(YTe,"STRONG",{});var UPr=s(EY);Hqe=r(UPr,"blenderbot-small"),UPr.forEach(t),Uqe=r(YTe," \u2014 "),R9=n(YTe,"A",{href:!0});var JPr=s(R9);Jqe=r(JPr,"BlenderbotSmallConfig"),JPr.forEach(t),Yqe=r(YTe," (BlenderbotSmall model)"),YTe.forEach(t),Kqe=i(v),em=n(v,"LI",{});var KTe=s(em);CY=n(KTe,"STRONG",{});var YPr=s(CY);Zqe=r(YPr,"camembert"),YPr.forEach(t),eNe=r(KTe," \u2014 "),B9=n(KTe,"A",{href:!0});var KPr=s(B9);oNe=r(KPr,"CamembertConfig"),KPr.forEach(t),rNe=r(KTe," (CamemBERT model)"),KTe.forEach(t),tNe=i(v),om=n(v,"LI",{});var ZTe=s(om);wY=n(ZTe,"STRONG",{});var ZPr=s(wY);aNe=r(ZPr,"canine"),ZPr.forEach(t),nNe=r(ZTe," \u2014 "),P9=n(ZTe,"A",{href:!0});var e$r=s(P9);sNe=r(e$r,"CanineConfig"),e$r.forEach(t),lNe=r(ZTe," (Canine model)"),ZTe.forEach(t),iNe=i(v),rm=n(v,"LI",{});var e8e=s(rm);AY=n(e8e,"STRONG",{});var o$r=s(AY);dNe=r(o$r,"clip"),o$r.forEach(t),cNe=r(e8e," \u2014 "),$9=n(e8e,"A",{href:!0});var r$r=s($9);fNe=r(r$r,"CLIPConfig"),r$r.forEach(t),mNe=r(e8e," (CLIP model)"),e8e.forEach(t),gNe=i(v),tm=n(v,"LI",{});var o8e=s(tm);yY=n(o8e,"STRONG",{});var t$r=s(yY);hNe=r(t$r,"convbert"),t$r.forEach(t),pNe=r(o8e," \u2014 "),I9=n(o8e,"A",{href:!0});var a$r=s(I9);_Ne=r(a$r,"ConvBertConfig"),a$r.forEach(t),uNe=r(o8e," (ConvBERT model)"),o8e.forEach(t),bNe=i(v),am=n(v,"LI",{});var r8e=s(am);LY=n(r8e,"STRONG",{});var n$r=s(LY);FNe=r(n$r,"convnext"),n$r.forEach(t),vNe=r(r8e," \u2014 "),q9=n(r8e,"A",{href:!0});var s$r=s(q9);TNe=r(s$r,"ConvNextConfig"),s$r.forEach(t),MNe=r(r8e," (ConvNext model)"),r8e.forEach(t),ENe=i(v),nm=n(v,"LI",{});var t8e=s(nm);xY=n(t8e,"STRONG",{});var l$r=s(xY);CNe=r(l$r,"ctrl"),l$r.forEach(t),wNe=r(t8e," \u2014 "),N9=n(t8e,"A",{href:!0});var i$r=s(N9);ANe=r(i$r,"CTRLConfig"),i$r.forEach(t),yNe=r(t8e," (CTRL model)"),t8e.forEach(t),LNe=i(v),sm=n(v,"LI",{});var a8e=s(sm);kY=n(a8e,"STRONG",{});var d$r=s(kY);xNe=r(d$r,"data2vec-audio"),d$r.forEach(t),kNe=r(a8e," \u2014 "),j9=n(a8e,"A",{href:!0});var c$r=s(j9);SNe=r(c$r,"Data2VecAudioConfig"),c$r.forEach(t),RNe=r(a8e," (Data2VecAudio model)"),a8e.forEach(t),BNe=i(v),lm=n(v,"LI",{});var n8e=s(lm);SY=n(n8e,"STRONG",{});var f$r=s(SY);PNe=r(f$r,"data2vec-text"),f$r.forEach(t),$Ne=r(n8e," \u2014 "),D9=n(n8e,"A",{href:!0});var m$r=s(D9);INe=r(m$r,"Data2VecTextConfig"),m$r.forEach(t),qNe=r(n8e," (Data2VecText model)"),n8e.forEach(t),NNe=i(v),im=n(v,"LI",{});var s8e=s(im);RY=n(s8e,"STRONG",{});var g$r=s(RY);jNe=r(g$r,"deberta"),g$r.forEach(t),DNe=r(s8e," \u2014 "),G9=n(s8e,"A",{href:!0});var h$r=s(G9);GNe=r(h$r,"DebertaConfig"),h$r.forEach(t),ONe=r(s8e," (DeBERTa model)"),s8e.forEach(t),VNe=i(v),dm=n(v,"LI",{});var l8e=s(dm);BY=n(l8e,"STRONG",{});var p$r=s(BY);XNe=r(p$r,"deberta-v2"),p$r.forEach(t),zNe=r(l8e," \u2014 "),O9=n(l8e,"A",{href:!0});var _$r=s(O9);QNe=r(_$r,"DebertaV2Config"),_$r.forEach(t),WNe=r(l8e," (DeBERTa-v2 model)"),l8e.forEach(t),HNe=i(v),cm=n(v,"LI",{});var i8e=s(cm);PY=n(i8e,"STRONG",{});var u$r=s(PY);UNe=r(u$r,"decision_transformer"),u$r.forEach(t),JNe=r(i8e," \u2014 "),V9=n(i8e,"A",{href:!0});var b$r=s(V9);YNe=r(b$r,"DecisionTransformerConfig"),b$r.forEach(t),KNe=r(i8e," (Decision Transformer model)"),i8e.forEach(t),ZNe=i(v),fm=n(v,"LI",{});var d8e=s(fm);$Y=n(d8e,"STRONG",{});var F$r=s($Y);eje=r(F$r,"deit"),F$r.forEach(t),oje=r(d8e," \u2014 "),X9=n(d8e,"A",{href:!0});var v$r=s(X9);rje=r(v$r,"DeiTConfig"),v$r.forEach(t),tje=r(d8e," (DeiT model)"),d8e.forEach(t),aje=i(v),mm=n(v,"LI",{});var c8e=s(mm);IY=n(c8e,"STRONG",{});var T$r=s(IY);nje=r(T$r,"detr"),T$r.forEach(t),sje=r(c8e," \u2014 "),z9=n(c8e,"A",{href:!0});var M$r=s(z9);lje=r(M$r,"DetrConfig"),M$r.forEach(t),ije=r(c8e," (DETR model)"),c8e.forEach(t),dje=i(v),gm=n(v,"LI",{});var f8e=s(gm);qY=n(f8e,"STRONG",{});var E$r=s(qY);cje=r(E$r,"distilbert"),E$r.forEach(t),fje=r(f8e," \u2014 "),Q9=n(f8e,"A",{href:!0});var C$r=s(Q9);mje=r(C$r,"DistilBertConfig"),C$r.forEach(t),gje=r(f8e," (DistilBERT model)"),f8e.forEach(t),hje=i(v),hm=n(v,"LI",{});var m8e=s(hm);NY=n(m8e,"STRONG",{});var w$r=s(NY);pje=r(w$r,"dpr"),w$r.forEach(t),_je=r(m8e," \u2014 "),W9=n(m8e,"A",{href:!0});var A$r=s(W9);uje=r(A$r,"DPRConfig"),A$r.forEach(t),bje=r(m8e," (DPR model)"),m8e.forEach(t),Fje=i(v),pm=n(v,"LI",{});var g8e=s(pm);jY=n(g8e,"STRONG",{});var y$r=s(jY);vje=r(y$r,"dpt"),y$r.forEach(t),Tje=r(g8e," \u2014 "),H9=n(g8e,"A",{href:!0});var L$r=s(H9);Mje=r(L$r,"DPTConfig"),L$r.forEach(t),Eje=r(g8e," (DPT model)"),g8e.forEach(t),Cje=i(v),_m=n(v,"LI",{});var h8e=s(_m);DY=n(h8e,"STRONG",{});var x$r=s(DY);wje=r(x$r,"electra"),x$r.forEach(t),Aje=r(h8e," \u2014 "),U9=n(h8e,"A",{href:!0});var k$r=s(U9);yje=r(k$r,"ElectraConfig"),k$r.forEach(t),Lje=r(h8e," (ELECTRA model)"),h8e.forEach(t),xje=i(v),um=n(v,"LI",{});var p8e=s(um);GY=n(p8e,"STRONG",{});var S$r=s(GY);kje=r(S$r,"encoder-decoder"),S$r.forEach(t),Sje=r(p8e," \u2014 "),J9=n(p8e,"A",{href:!0});var R$r=s(J9);Rje=r(R$r,"EncoderDecoderConfig"),R$r.forEach(t),Bje=r(p8e," (Encoder decoder model)"),p8e.forEach(t),Pje=i(v),bm=n(v,"LI",{});var _8e=s(bm);OY=n(_8e,"STRONG",{});var B$r=s(OY);$je=r(B$r,"flaubert"),B$r.forEach(t),Ije=r(_8e," \u2014 "),Y9=n(_8e,"A",{href:!0});var P$r=s(Y9);qje=r(P$r,"FlaubertConfig"),P$r.forEach(t),Nje=r(_8e," (FlauBERT model)"),_8e.forEach(t),jje=i(v),Fm=n(v,"LI",{});var u8e=s(Fm);VY=n(u8e,"STRONG",{});var $$r=s(VY);Dje=r($$r,"fnet"),$$r.forEach(t),Gje=r(u8e," \u2014 "),K9=n(u8e,"A",{href:!0});var I$r=s(K9);Oje=r(I$r,"FNetConfig"),I$r.forEach(t),Vje=r(u8e," (FNet model)"),u8e.forEach(t),Xje=i(v),vm=n(v,"LI",{});var b8e=s(vm);XY=n(b8e,"STRONG",{});var q$r=s(XY);zje=r(q$r,"fsmt"),q$r.forEach(t),Qje=r(b8e," \u2014 "),Z9=n(b8e,"A",{href:!0});var N$r=s(Z9);Wje=r(N$r,"FSMTConfig"),N$r.forEach(t),Hje=r(b8e," (FairSeq Machine-Translation model)"),b8e.forEach(t),Uje=i(v),Tm=n(v,"LI",{});var F8e=s(Tm);zY=n(F8e,"STRONG",{});var j$r=s(zY);Jje=r(j$r,"funnel"),j$r.forEach(t),Yje=r(F8e," \u2014 "),ex=n(F8e,"A",{href:!0});var D$r=s(ex);Kje=r(D$r,"FunnelConfig"),D$r.forEach(t),Zje=r(F8e," (Funnel Transformer model)"),F8e.forEach(t),eDe=i(v),Mm=n(v,"LI",{});var v8e=s(Mm);QY=n(v8e,"STRONG",{});var G$r=s(QY);oDe=r(G$r,"glpn"),G$r.forEach(t),rDe=r(v8e," \u2014 "),ox=n(v8e,"A",{href:!0});var O$r=s(ox);tDe=r(O$r,"GLPNConfig"),O$r.forEach(t),aDe=r(v8e," (GLPN model)"),v8e.forEach(t),nDe=i(v),Em=n(v,"LI",{});var T8e=s(Em);WY=n(T8e,"STRONG",{});var V$r=s(WY);sDe=r(V$r,"gpt2"),V$r.forEach(t),lDe=r(T8e," \u2014 "),rx=n(T8e,"A",{href:!0});var X$r=s(rx);iDe=r(X$r,"GPT2Config"),X$r.forEach(t),dDe=r(T8e," (OpenAI GPT-2 model)"),T8e.forEach(t),cDe=i(v),Cm=n(v,"LI",{});var M8e=s(Cm);HY=n(M8e,"STRONG",{});var z$r=s(HY);fDe=r(z$r,"gpt_neo"),z$r.forEach(t),mDe=r(M8e," \u2014 "),tx=n(M8e,"A",{href:!0});var Q$r=s(tx);gDe=r(Q$r,"GPTNeoConfig"),Q$r.forEach(t),hDe=r(M8e," (GPT Neo model)"),M8e.forEach(t),pDe=i(v),wm=n(v,"LI",{});var E8e=s(wm);UY=n(E8e,"STRONG",{});var W$r=s(UY);_De=r(W$r,"gptj"),W$r.forEach(t),uDe=r(E8e," \u2014 "),ax=n(E8e,"A",{href:!0});var H$r=s(ax);bDe=r(H$r,"GPTJConfig"),H$r.forEach(t),FDe=r(E8e," (GPT-J model)"),E8e.forEach(t),vDe=i(v),Am=n(v,"LI",{});var C8e=s(Am);JY=n(C8e,"STRONG",{});var U$r=s(JY);TDe=r(U$r,"hubert"),U$r.forEach(t),MDe=r(C8e," \u2014 "),nx=n(C8e,"A",{href:!0});var J$r=s(nx);EDe=r(J$r,"HubertConfig"),J$r.forEach(t),CDe=r(C8e," (Hubert model)"),C8e.forEach(t),wDe=i(v),ym=n(v,"LI",{});var w8e=s(ym);YY=n(w8e,"STRONG",{});var Y$r=s(YY);ADe=r(Y$r,"ibert"),Y$r.forEach(t),yDe=r(w8e," \u2014 "),sx=n(w8e,"A",{href:!0});var K$r=s(sx);LDe=r(K$r,"IBertConfig"),K$r.forEach(t),xDe=r(w8e," (I-BERT model)"),w8e.forEach(t),kDe=i(v),Lm=n(v,"LI",{});var A8e=s(Lm);KY=n(A8e,"STRONG",{});var Z$r=s(KY);SDe=r(Z$r,"imagegpt"),Z$r.forEach(t),RDe=r(A8e," \u2014 "),lx=n(A8e,"A",{href:!0});var eIr=s(lx);BDe=r(eIr,"ImageGPTConfig"),eIr.forEach(t),PDe=r(A8e," (ImageGPT model)"),A8e.forEach(t),$De=i(v),xm=n(v,"LI",{});var y8e=s(xm);ZY=n(y8e,"STRONG",{});var oIr=s(ZY);IDe=r(oIr,"layoutlm"),oIr.forEach(t),qDe=r(y8e," \u2014 "),ix=n(y8e,"A",{href:!0});var rIr=s(ix);NDe=r(rIr,"LayoutLMConfig"),rIr.forEach(t),jDe=r(y8e," (LayoutLM model)"),y8e.forEach(t),DDe=i(v),km=n(v,"LI",{});var L8e=s(km);eK=n(L8e,"STRONG",{});var tIr=s(eK);GDe=r(tIr,"layoutlmv2"),tIr.forEach(t),ODe=r(L8e," \u2014 "),dx=n(L8e,"A",{href:!0});var aIr=s(dx);VDe=r(aIr,"LayoutLMv2Config"),aIr.forEach(t),XDe=r(L8e," (LayoutLMv2 model)"),L8e.forEach(t),zDe=i(v),Sm=n(v,"LI",{});var x8e=s(Sm);oK=n(x8e,"STRONG",{});var nIr=s(oK);QDe=r(nIr,"led"),nIr.forEach(t),WDe=r(x8e," \u2014 "),cx=n(x8e,"A",{href:!0});var sIr=s(cx);HDe=r(sIr,"LEDConfig"),sIr.forEach(t),UDe=r(x8e," (LED model)"),x8e.forEach(t),JDe=i(v),Rm=n(v,"LI",{});var k8e=s(Rm);rK=n(k8e,"STRONG",{});var lIr=s(rK);YDe=r(lIr,"longformer"),lIr.forEach(t),KDe=r(k8e," \u2014 "),fx=n(k8e,"A",{href:!0});var iIr=s(fx);ZDe=r(iIr,"LongformerConfig"),iIr.forEach(t),eGe=r(k8e," (Longformer model)"),k8e.forEach(t),oGe=i(v),Bm=n(v,"LI",{});var S8e=s(Bm);tK=n(S8e,"STRONG",{});var dIr=s(tK);rGe=r(dIr,"luke"),dIr.forEach(t),tGe=r(S8e," \u2014 "),mx=n(S8e,"A",{href:!0});var cIr=s(mx);aGe=r(cIr,"LukeConfig"),cIr.forEach(t),nGe=r(S8e," (LUKE model)"),S8e.forEach(t),sGe=i(v),Pm=n(v,"LI",{});var R8e=s(Pm);aK=n(R8e,"STRONG",{});var fIr=s(aK);lGe=r(fIr,"lxmert"),fIr.forEach(t),iGe=r(R8e," \u2014 "),gx=n(R8e,"A",{href:!0});var mIr=s(gx);dGe=r(mIr,"LxmertConfig"),mIr.forEach(t),cGe=r(R8e," (LXMERT model)"),R8e.forEach(t),fGe=i(v),$m=n(v,"LI",{});var B8e=s($m);nK=n(B8e,"STRONG",{});var gIr=s(nK);mGe=r(gIr,"m2m_100"),gIr.forEach(t),gGe=r(B8e," \u2014 "),hx=n(B8e,"A",{href:!0});var hIr=s(hx);hGe=r(hIr,"M2M100Config"),hIr.forEach(t),pGe=r(B8e," (M2M100 model)"),B8e.forEach(t),_Ge=i(v),Im=n(v,"LI",{});var P8e=s(Im);sK=n(P8e,"STRONG",{});var pIr=s(sK);uGe=r(pIr,"marian"),pIr.forEach(t),bGe=r(P8e," \u2014 "),px=n(P8e,"A",{href:!0});var _Ir=s(px);FGe=r(_Ir,"MarianConfig"),_Ir.forEach(t),vGe=r(P8e," (Marian model)"),P8e.forEach(t),TGe=i(v),qm=n(v,"LI",{});var $8e=s(qm);lK=n($8e,"STRONG",{});var uIr=s(lK);MGe=r(uIr,"maskformer"),uIr.forEach(t),EGe=r($8e," \u2014 "),_x=n($8e,"A",{href:!0});var bIr=s(_x);CGe=r(bIr,"MaskFormerConfig"),bIr.forEach(t),wGe=r($8e," (MaskFormer model)"),$8e.forEach(t),AGe=i(v),Nm=n(v,"LI",{});var I8e=s(Nm);iK=n(I8e,"STRONG",{});var FIr=s(iK);yGe=r(FIr,"mbart"),FIr.forEach(t),LGe=r(I8e," \u2014 "),ux=n(I8e,"A",{href:!0});var vIr=s(ux);xGe=r(vIr,"MBartConfig"),vIr.forEach(t),kGe=r(I8e," (mBART model)"),I8e.forEach(t),SGe=i(v),jm=n(v,"LI",{});var q8e=s(jm);dK=n(q8e,"STRONG",{});var TIr=s(dK);RGe=r(TIr,"megatron-bert"),TIr.forEach(t),BGe=r(q8e," \u2014 "),bx=n(q8e,"A",{href:!0});var MIr=s(bx);PGe=r(MIr,"MegatronBertConfig"),MIr.forEach(t),$Ge=r(q8e," (MegatronBert model)"),q8e.forEach(t),IGe=i(v),Dm=n(v,"LI",{});var N8e=s(Dm);cK=n(N8e,"STRONG",{});var EIr=s(cK);qGe=r(EIr,"mobilebert"),EIr.forEach(t),NGe=r(N8e," \u2014 "),Fx=n(N8e,"A",{href:!0});var CIr=s(Fx);jGe=r(CIr,"MobileBertConfig"),CIr.forEach(t),DGe=r(N8e," (MobileBERT model)"),N8e.forEach(t),GGe=i(v),Gm=n(v,"LI",{});var j8e=s(Gm);fK=n(j8e,"STRONG",{});var wIr=s(fK);OGe=r(wIr,"mpnet"),wIr.forEach(t),VGe=r(j8e," \u2014 "),vx=n(j8e,"A",{href:!0});var AIr=s(vx);XGe=r(AIr,"MPNetConfig"),AIr.forEach(t),zGe=r(j8e," (MPNet model)"),j8e.forEach(t),QGe=i(v),Om=n(v,"LI",{});var D8e=s(Om);mK=n(D8e,"STRONG",{});var yIr=s(mK);WGe=r(yIr,"mt5"),yIr.forEach(t),HGe=r(D8e," \u2014 "),Tx=n(D8e,"A",{href:!0});var LIr=s(Tx);UGe=r(LIr,"MT5Config"),LIr.forEach(t),JGe=r(D8e," (mT5 model)"),D8e.forEach(t),YGe=i(v),Vm=n(v,"LI",{});var G8e=s(Vm);gK=n(G8e,"STRONG",{});var xIr=s(gK);KGe=r(xIr,"nystromformer"),xIr.forEach(t),ZGe=r(G8e," \u2014 "),Mx=n(G8e,"A",{href:!0});var kIr=s(Mx);eOe=r(kIr,"NystromformerConfig"),kIr.forEach(t),oOe=r(G8e," (Nystromformer model)"),G8e.forEach(t),rOe=i(v),Xm=n(v,"LI",{});var O8e=s(Xm);hK=n(O8e,"STRONG",{});var SIr=s(hK);tOe=r(SIr,"openai-gpt"),SIr.forEach(t),aOe=r(O8e," \u2014 "),Ex=n(O8e,"A",{href:!0});var RIr=s(Ex);nOe=r(RIr,"OpenAIGPTConfig"),RIr.forEach(t),sOe=r(O8e," (OpenAI GPT model)"),O8e.forEach(t),lOe=i(v),zm=n(v,"LI",{});var V8e=s(zm);pK=n(V8e,"STRONG",{});var BIr=s(pK);iOe=r(BIr,"pegasus"),BIr.forEach(t),dOe=r(V8e," \u2014 "),Cx=n(V8e,"A",{href:!0});var PIr=s(Cx);cOe=r(PIr,"PegasusConfig"),PIr.forEach(t),fOe=r(V8e," (Pegasus model)"),V8e.forEach(t),mOe=i(v),Qm=n(v,"LI",{});var X8e=s(Qm);_K=n(X8e,"STRONG",{});var $Ir=s(_K);gOe=r($Ir,"perceiver"),$Ir.forEach(t),hOe=r(X8e," \u2014 "),wx=n(X8e,"A",{href:!0});var IIr=s(wx);pOe=r(IIr,"PerceiverConfig"),IIr.forEach(t),_Oe=r(X8e," (Perceiver model)"),X8e.forEach(t),uOe=i(v),Wm=n(v,"LI",{});var z8e=s(Wm);uK=n(z8e,"STRONG",{});var qIr=s(uK);bOe=r(qIr,"plbart"),qIr.forEach(t),FOe=r(z8e," \u2014 "),Ax=n(z8e,"A",{href:!0});var NIr=s(Ax);vOe=r(NIr,"PLBartConfig"),NIr.forEach(t),TOe=r(z8e," (PLBart model)"),z8e.forEach(t),MOe=i(v),Hm=n(v,"LI",{});var Q8e=s(Hm);bK=n(Q8e,"STRONG",{});var jIr=s(bK);EOe=r(jIr,"poolformer"),jIr.forEach(t),COe=r(Q8e," \u2014 "),yx=n(Q8e,"A",{href:!0});var DIr=s(yx);wOe=r(DIr,"PoolFormerConfig"),DIr.forEach(t),AOe=r(Q8e," (PoolFormer model)"),Q8e.forEach(t),yOe=i(v),Um=n(v,"LI",{});var W8e=s(Um);FK=n(W8e,"STRONG",{});var GIr=s(FK);LOe=r(GIr,"prophetnet"),GIr.forEach(t),xOe=r(W8e," \u2014 "),Lx=n(W8e,"A",{href:!0});var OIr=s(Lx);kOe=r(OIr,"ProphetNetConfig"),OIr.forEach(t),SOe=r(W8e," (ProphetNet model)"),W8e.forEach(t),ROe=i(v),Jm=n(v,"LI",{});var H8e=s(Jm);vK=n(H8e,"STRONG",{});var VIr=s(vK);BOe=r(VIr,"qdqbert"),VIr.forEach(t),POe=r(H8e," \u2014 "),xx=n(H8e,"A",{href:!0});var XIr=s(xx);$Oe=r(XIr,"QDQBertConfig"),XIr.forEach(t),IOe=r(H8e," (QDQBert model)"),H8e.forEach(t),qOe=i(v),Ym=n(v,"LI",{});var U8e=s(Ym);TK=n(U8e,"STRONG",{});var zIr=s(TK);NOe=r(zIr,"rag"),zIr.forEach(t),jOe=r(U8e," \u2014 "),kx=n(U8e,"A",{href:!0});var QIr=s(kx);DOe=r(QIr,"RagConfig"),QIr.forEach(t),GOe=r(U8e," (RAG model)"),U8e.forEach(t),OOe=i(v),Km=n(v,"LI",{});var J8e=s(Km);MK=n(J8e,"STRONG",{});var WIr=s(MK);VOe=r(WIr,"realm"),WIr.forEach(t),XOe=r(J8e," \u2014 "),Sx=n(J8e,"A",{href:!0});var HIr=s(Sx);zOe=r(HIr,"RealmConfig"),HIr.forEach(t),QOe=r(J8e," (Realm model)"),J8e.forEach(t),WOe=i(v),Zm=n(v,"LI",{});var Y8e=s(Zm);EK=n(Y8e,"STRONG",{});var UIr=s(EK);HOe=r(UIr,"reformer"),UIr.forEach(t),UOe=r(Y8e," \u2014 "),Rx=n(Y8e,"A",{href:!0});var JIr=s(Rx);JOe=r(JIr,"ReformerConfig"),JIr.forEach(t),YOe=r(Y8e," (Reformer model)"),Y8e.forEach(t),KOe=i(v),eg=n(v,"LI",{});var K8e=s(eg);CK=n(K8e,"STRONG",{});var YIr=s(CK);ZOe=r(YIr,"regnet"),YIr.forEach(t),eVe=r(K8e," \u2014 "),Bx=n(K8e,"A",{href:!0});var KIr=s(Bx);oVe=r(KIr,"RegNetConfig"),KIr.forEach(t),rVe=r(K8e," (RegNet model)"),K8e.forEach(t),tVe=i(v),og=n(v,"LI",{});var Z8e=s(og);wK=n(Z8e,"STRONG",{});var ZIr=s(wK);aVe=r(ZIr,"rembert"),ZIr.forEach(t),nVe=r(Z8e," \u2014 "),Px=n(Z8e,"A",{href:!0});var eqr=s(Px);sVe=r(eqr,"RemBertConfig"),eqr.forEach(t),lVe=r(Z8e," (RemBERT model)"),Z8e.forEach(t),iVe=i(v),rg=n(v,"LI",{});var e7e=s(rg);AK=n(e7e,"STRONG",{});var oqr=s(AK);dVe=r(oqr,"resnet"),oqr.forEach(t),cVe=r(e7e," \u2014 "),$x=n(e7e,"A",{href:!0});var rqr=s($x);fVe=r(rqr,"ResNetConfig"),rqr.forEach(t),mVe=r(e7e," (ResNet model)"),e7e.forEach(t),gVe=i(v),tg=n(v,"LI",{});var o7e=s(tg);yK=n(o7e,"STRONG",{});var tqr=s(yK);hVe=r(tqr,"retribert"),tqr.forEach(t),pVe=r(o7e," \u2014 "),Ix=n(o7e,"A",{href:!0});var aqr=s(Ix);_Ve=r(aqr,"RetriBertConfig"),aqr.forEach(t),uVe=r(o7e," (RetriBERT model)"),o7e.forEach(t),bVe=i(v),ag=n(v,"LI",{});var r7e=s(ag);LK=n(r7e,"STRONG",{});var nqr=s(LK);FVe=r(nqr,"roberta"),nqr.forEach(t),vVe=r(r7e," \u2014 "),qx=n(r7e,"A",{href:!0});var sqr=s(qx);TVe=r(sqr,"RobertaConfig"),sqr.forEach(t),MVe=r(r7e," (RoBERTa model)"),r7e.forEach(t),EVe=i(v),ng=n(v,"LI",{});var t7e=s(ng);xK=n(t7e,"STRONG",{});var lqr=s(xK);CVe=r(lqr,"roformer"),lqr.forEach(t),wVe=r(t7e," \u2014 "),Nx=n(t7e,"A",{href:!0});var iqr=s(Nx);AVe=r(iqr,"RoFormerConfig"),iqr.forEach(t),yVe=r(t7e," (RoFormer model)"),t7e.forEach(t),LVe=i(v),sg=n(v,"LI",{});var a7e=s(sg);kK=n(a7e,"STRONG",{});var dqr=s(kK);xVe=r(dqr,"segformer"),dqr.forEach(t),kVe=r(a7e," \u2014 "),jx=n(a7e,"A",{href:!0});var cqr=s(jx);SVe=r(cqr,"SegformerConfig"),cqr.forEach(t),RVe=r(a7e," (SegFormer model)"),a7e.forEach(t),BVe=i(v),lg=n(v,"LI",{});var n7e=s(lg);SK=n(n7e,"STRONG",{});var fqr=s(SK);PVe=r(fqr,"sew"),fqr.forEach(t),$Ve=r(n7e," \u2014 "),Dx=n(n7e,"A",{href:!0});var mqr=s(Dx);IVe=r(mqr,"SEWConfig"),mqr.forEach(t),qVe=r(n7e," (SEW model)"),n7e.forEach(t),NVe=i(v),ig=n(v,"LI",{});var s7e=s(ig);RK=n(s7e,"STRONG",{});var gqr=s(RK);jVe=r(gqr,"sew-d"),gqr.forEach(t),DVe=r(s7e," \u2014 "),Gx=n(s7e,"A",{href:!0});var hqr=s(Gx);GVe=r(hqr,"SEWDConfig"),hqr.forEach(t),OVe=r(s7e," (SEW-D model)"),s7e.forEach(t),VVe=i(v),dg=n(v,"LI",{});var l7e=s(dg);BK=n(l7e,"STRONG",{});var pqr=s(BK);XVe=r(pqr,"speech-encoder-decoder"),pqr.forEach(t),zVe=r(l7e," \u2014 "),Ox=n(l7e,"A",{href:!0});var _qr=s(Ox);QVe=r(_qr,"SpeechEncoderDecoderConfig"),_qr.forEach(t),WVe=r(l7e," (Speech Encoder decoder model)"),l7e.forEach(t),HVe=i(v),cg=n(v,"LI",{});var i7e=s(cg);PK=n(i7e,"STRONG",{});var uqr=s(PK);UVe=r(uqr,"speech_to_text"),uqr.forEach(t),JVe=r(i7e," \u2014 "),Vx=n(i7e,"A",{href:!0});var bqr=s(Vx);YVe=r(bqr,"Speech2TextConfig"),bqr.forEach(t),KVe=r(i7e," (Speech2Text model)"),i7e.forEach(t),ZVe=i(v),fg=n(v,"LI",{});var d7e=s(fg);$K=n(d7e,"STRONG",{});var Fqr=s($K);eXe=r(Fqr,"speech_to_text_2"),Fqr.forEach(t),oXe=r(d7e," \u2014 "),Xx=n(d7e,"A",{href:!0});var vqr=s(Xx);rXe=r(vqr,"Speech2Text2Config"),vqr.forEach(t),tXe=r(d7e," (Speech2Text2 model)"),d7e.forEach(t),aXe=i(v),mg=n(v,"LI",{});var c7e=s(mg);IK=n(c7e,"STRONG",{});var Tqr=s(IK);nXe=r(Tqr,"splinter"),Tqr.forEach(t),sXe=r(c7e," \u2014 "),zx=n(c7e,"A",{href:!0});var Mqr=s(zx);lXe=r(Mqr,"SplinterConfig"),Mqr.forEach(t),iXe=r(c7e," (Splinter model)"),c7e.forEach(t),dXe=i(v),gg=n(v,"LI",{});var f7e=s(gg);qK=n(f7e,"STRONG",{});var Eqr=s(qK);cXe=r(Eqr,"squeezebert"),Eqr.forEach(t),fXe=r(f7e," \u2014 "),Qx=n(f7e,"A",{href:!0});var Cqr=s(Qx);mXe=r(Cqr,"SqueezeBertConfig"),Cqr.forEach(t),gXe=r(f7e," (SqueezeBERT model)"),f7e.forEach(t),hXe=i(v),hg=n(v,"LI",{});var m7e=s(hg);NK=n(m7e,"STRONG",{});var wqr=s(NK);pXe=r(wqr,"swin"),wqr.forEach(t),_Xe=r(m7e," \u2014 "),Wx=n(m7e,"A",{href:!0});var Aqr=s(Wx);uXe=r(Aqr,"SwinConfig"),Aqr.forEach(t),bXe=r(m7e," (Swin model)"),m7e.forEach(t),FXe=i(v),pg=n(v,"LI",{});var g7e=s(pg);jK=n(g7e,"STRONG",{});var yqr=s(jK);vXe=r(yqr,"t5"),yqr.forEach(t),TXe=r(g7e," \u2014 "),Hx=n(g7e,"A",{href:!0});var Lqr=s(Hx);MXe=r(Lqr,"T5Config"),Lqr.forEach(t),EXe=r(g7e," (T5 model)"),g7e.forEach(t),CXe=i(v),_g=n(v,"LI",{});var h7e=s(_g);DK=n(h7e,"STRONG",{});var xqr=s(DK);wXe=r(xqr,"tapas"),xqr.forEach(t),AXe=r(h7e," \u2014 "),Ux=n(h7e,"A",{href:!0});var kqr=s(Ux);yXe=r(kqr,"TapasConfig"),kqr.forEach(t),LXe=r(h7e," (TAPAS model)"),h7e.forEach(t),xXe=i(v),ug=n(v,"LI",{});var p7e=s(ug);GK=n(p7e,"STRONG",{});var Sqr=s(GK);kXe=r(Sqr,"tapex"),Sqr.forEach(t),SXe=r(p7e," \u2014 "),Jx=n(p7e,"A",{href:!0});var Rqr=s(Jx);RXe=r(Rqr,"BartConfig"),Rqr.forEach(t),BXe=r(p7e," (TAPEX model)"),p7e.forEach(t),PXe=i(v),bg=n(v,"LI",{});var _7e=s(bg);OK=n(_7e,"STRONG",{});var Bqr=s(OK);$Xe=r(Bqr,"transfo-xl"),Bqr.forEach(t),IXe=r(_7e," \u2014 "),Yx=n(_7e,"A",{href:!0});var Pqr=s(Yx);qXe=r(Pqr,"TransfoXLConfig"),Pqr.forEach(t),NXe=r(_7e," (Transformer-XL model)"),_7e.forEach(t),jXe=i(v),Fg=n(v,"LI",{});var u7e=s(Fg);VK=n(u7e,"STRONG",{});var $qr=s(VK);DXe=r($qr,"trocr"),$qr.forEach(t),GXe=r(u7e," \u2014 "),Kx=n(u7e,"A",{href:!0});var Iqr=s(Kx);OXe=r(Iqr,"TrOCRConfig"),Iqr.forEach(t),VXe=r(u7e," (TrOCR model)"),u7e.forEach(t),XXe=i(v),vg=n(v,"LI",{});var b7e=s(vg);XK=n(b7e,"STRONG",{});var qqr=s(XK);zXe=r(qqr,"unispeech"),qqr.forEach(t),QXe=r(b7e," \u2014 "),Zx=n(b7e,"A",{href:!0});var Nqr=s(Zx);WXe=r(Nqr,"UniSpeechConfig"),Nqr.forEach(t),HXe=r(b7e," (UniSpeech model)"),b7e.forEach(t),UXe=i(v),Tg=n(v,"LI",{});var F7e=s(Tg);zK=n(F7e,"STRONG",{});var jqr=s(zK);JXe=r(jqr,"unispeech-sat"),jqr.forEach(t),YXe=r(F7e," \u2014 "),ek=n(F7e,"A",{href:!0});var Dqr=s(ek);KXe=r(Dqr,"UniSpeechSatConfig"),Dqr.forEach(t),ZXe=r(F7e," (UniSpeechSat model)"),F7e.forEach(t),eze=i(v),Mg=n(v,"LI",{});var v7e=s(Mg);QK=n(v7e,"STRONG",{});var Gqr=s(QK);oze=r(Gqr,"van"),Gqr.forEach(t),rze=r(v7e," \u2014 "),ok=n(v7e,"A",{href:!0});var Oqr=s(ok);tze=r(Oqr,"VanConfig"),Oqr.forEach(t),aze=r(v7e," (VAN model)"),v7e.forEach(t),nze=i(v),Eg=n(v,"LI",{});var T7e=s(Eg);WK=n(T7e,"STRONG",{});var Vqr=s(WK);sze=r(Vqr,"vilt"),Vqr.forEach(t),lze=r(T7e," \u2014 "),rk=n(T7e,"A",{href:!0});var Xqr=s(rk);ize=r(Xqr,"ViltConfig"),Xqr.forEach(t),dze=r(T7e," (ViLT model)"),T7e.forEach(t),cze=i(v),Cg=n(v,"LI",{});var M7e=s(Cg);HK=n(M7e,"STRONG",{});var zqr=s(HK);fze=r(zqr,"vision-encoder-decoder"),zqr.forEach(t),mze=r(M7e," \u2014 "),tk=n(M7e,"A",{href:!0});var Qqr=s(tk);gze=r(Qqr,"VisionEncoderDecoderConfig"),Qqr.forEach(t),hze=r(M7e," (Vision Encoder decoder model)"),M7e.forEach(t),pze=i(v),wg=n(v,"LI",{});var E7e=s(wg);UK=n(E7e,"STRONG",{});var Wqr=s(UK);_ze=r(Wqr,"vision-text-dual-encoder"),Wqr.forEach(t),uze=r(E7e," \u2014 "),ak=n(E7e,"A",{href:!0});var Hqr=s(ak);bze=r(Hqr,"VisionTextDualEncoderConfig"),Hqr.forEach(t),Fze=r(E7e," (VisionTextDualEncoder model)"),E7e.forEach(t),vze=i(v),Ag=n(v,"LI",{});var C7e=s(Ag);JK=n(C7e,"STRONG",{});var Uqr=s(JK);Tze=r(Uqr,"visual_bert"),Uqr.forEach(t),Mze=r(C7e," \u2014 "),nk=n(C7e,"A",{href:!0});var Jqr=s(nk);Eze=r(Jqr,"VisualBertConfig"),Jqr.forEach(t),Cze=r(C7e," (VisualBert model)"),C7e.forEach(t),wze=i(v),yg=n(v,"LI",{});var w7e=s(yg);YK=n(w7e,"STRONG",{});var Yqr=s(YK);Aze=r(Yqr,"vit"),Yqr.forEach(t),yze=r(w7e," \u2014 "),sk=n(w7e,"A",{href:!0});var Kqr=s(sk);Lze=r(Kqr,"ViTConfig"),Kqr.forEach(t),xze=r(w7e," (ViT model)"),w7e.forEach(t),kze=i(v),Lg=n(v,"LI",{});var A7e=s(Lg);KK=n(A7e,"STRONG",{});var Zqr=s(KK);Sze=r(Zqr,"vit_mae"),Zqr.forEach(t),Rze=r(A7e," \u2014 "),lk=n(A7e,"A",{href:!0});var eNr=s(lk);Bze=r(eNr,"ViTMAEConfig"),eNr.forEach(t),Pze=r(A7e," (ViTMAE model)"),A7e.forEach(t),$ze=i(v),xg=n(v,"LI",{});var y7e=s(xg);ZK=n(y7e,"STRONG",{});var oNr=s(ZK);Ize=r(oNr,"wav2vec2"),oNr.forEach(t),qze=r(y7e," \u2014 "),ik=n(y7e,"A",{href:!0});var rNr=s(ik);Nze=r(rNr,"Wav2Vec2Config"),rNr.forEach(t),jze=r(y7e," (Wav2Vec2 model)"),y7e.forEach(t),Dze=i(v),kg=n(v,"LI",{});var L7e=s(kg);eZ=n(L7e,"STRONG",{});var tNr=s(eZ);Gze=r(tNr,"wavlm"),tNr.forEach(t),Oze=r(L7e," \u2014 "),dk=n(L7e,"A",{href:!0});var aNr=s(dk);Vze=r(aNr,"WavLMConfig"),aNr.forEach(t),Xze=r(L7e," (WavLM model)"),L7e.forEach(t),zze=i(v),Sg=n(v,"LI",{});var x7e=s(Sg);oZ=n(x7e,"STRONG",{});var nNr=s(oZ);Qze=r(nNr,"xglm"),nNr.forEach(t),Wze=r(x7e," \u2014 "),ck=n(x7e,"A",{href:!0});var sNr=s(ck);Hze=r(sNr,"XGLMConfig"),sNr.forEach(t),Uze=r(x7e," (XGLM model)"),x7e.forEach(t),Jze=i(v),Rg=n(v,"LI",{});var k7e=s(Rg);rZ=n(k7e,"STRONG",{});var lNr=s(rZ);Yze=r(lNr,"xlm"),lNr.forEach(t),Kze=r(k7e," \u2014 "),fk=n(k7e,"A",{href:!0});var iNr=s(fk);Zze=r(iNr,"XLMConfig"),iNr.forEach(t),eQe=r(k7e," (XLM model)"),k7e.forEach(t),oQe=i(v),Bg=n(v,"LI",{});var S7e=s(Bg);tZ=n(S7e,"STRONG",{});var dNr=s(tZ);rQe=r(dNr,"xlm-prophetnet"),dNr.forEach(t),tQe=r(S7e," \u2014 "),mk=n(S7e,"A",{href:!0});var cNr=s(mk);aQe=r(cNr,"XLMProphetNetConfig"),cNr.forEach(t),nQe=r(S7e," (XLMProphetNet model)"),S7e.forEach(t),sQe=i(v),Pg=n(v,"LI",{});var R7e=s(Pg);aZ=n(R7e,"STRONG",{});var fNr=s(aZ);lQe=r(fNr,"xlm-roberta"),fNr.forEach(t),iQe=r(R7e," \u2014 "),gk=n(R7e,"A",{href:!0});var mNr=s(gk);dQe=r(mNr,"XLMRobertaConfig"),mNr.forEach(t),cQe=r(R7e," (XLM-RoBERTa model)"),R7e.forEach(t),fQe=i(v),$g=n(v,"LI",{});var B7e=s($g);nZ=n(B7e,"STRONG",{});var gNr=s(nZ);mQe=r(gNr,"xlm-roberta-xl"),gNr.forEach(t),gQe=r(B7e," \u2014 "),hk=n(B7e,"A",{href:!0});var hNr=s(hk);hQe=r(hNr,"XLMRobertaXLConfig"),hNr.forEach(t),pQe=r(B7e," (XLM-RoBERTa-XL model)"),B7e.forEach(t),_Qe=i(v),Ig=n(v,"LI",{});var P7e=s(Ig);sZ=n(P7e,"STRONG",{});var pNr=s(sZ);uQe=r(pNr,"xlnet"),pNr.forEach(t),bQe=r(P7e," \u2014 "),pk=n(P7e,"A",{href:!0});var _Nr=s(pk);FQe=r(_Nr,"XLNetConfig"),_Nr.forEach(t),vQe=r(P7e," (XLNet model)"),P7e.forEach(t),TQe=i(v),qg=n(v,"LI",{});var $7e=s(qg);lZ=n($7e,"STRONG",{});var uNr=s(lZ);MQe=r(uNr,"yoso"),uNr.forEach(t),EQe=r($7e," \u2014 "),_k=n($7e,"A",{href:!0});var bNr=s(_k);CQe=r(bNr,"YosoConfig"),bNr.forEach(t),wQe=r($7e," (YOSO model)"),$7e.forEach(t),v.forEach(t),AQe=i(ga),iZ=n(ga,"P",{});var FNr=s(iZ);yQe=r(FNr,"Examples:"),FNr.forEach(t),LQe=i(ga),m($E.$$.fragment,ga),ga.forEach(t),xQe=i(Vs),Ng=n(Vs,"DIV",{class:!0});var xPe=s(Ng);m(IE.$$.fragment,xPe),kQe=i(xPe),dZ=n(xPe,"P",{});var vNr=s(dZ);SQe=r(vNr,"Register a new configuration for this class."),vNr.forEach(t),xPe.forEach(t),Vs.forEach(t),yRe=i(c),Wi=n(c,"H2",{class:!0});var kPe=s(Wi);jg=n(kPe,"A",{id:!0,class:!0,href:!0});var TNr=s(jg);cZ=n(TNr,"SPAN",{});var MNr=s(cZ);m(qE.$$.fragment,MNr),MNr.forEach(t),TNr.forEach(t),RQe=i(kPe),fZ=n(kPe,"SPAN",{});var ENr=s(fZ);BQe=r(ENr,"AutoTokenizer"),ENr.forEach(t),kPe.forEach(t),LRe=i(c),Wo=n(c,"DIV",{class:!0});var Xs=s(Wo);m(NE.$$.fragment,Xs),PQe=i(Xs),jE=n(Xs,"P",{});var SPe=s(jE);$Qe=r(SPe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),uk=n(SPe,"A",{href:!0});var CNr=s(uk);IQe=r(CNr,"AutoTokenizer.from_pretrained()"),CNr.forEach(t),qQe=r(SPe," class method."),SPe.forEach(t),NQe=i(Xs),DE=n(Xs,"P",{});var RPe=s(DE);jQe=r(RPe,"This class cannot be instantiated directly using "),mZ=n(RPe,"CODE",{});var wNr=s(mZ);DQe=r(wNr,"__init__()"),wNr.forEach(t),GQe=r(RPe," (throws an error)."),RPe.forEach(t),OQe=i(Xs),go=n(Xs,"DIV",{class:!0});var ha=s(go);m(GE.$$.fragment,ha),VQe=i(ha),gZ=n(ha,"P",{});var ANr=s(gZ);XQe=r(ANr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),ANr.forEach(t),zQe=i(ha),Oa=n(ha,"P",{});var A4=s(Oa);QQe=r(A4,"The tokenizer class to instantiate is selected based on the "),hZ=n(A4,"CODE",{});var yNr=s(hZ);WQe=r(yNr,"model_type"),yNr.forEach(t),HQe=r(A4,` property of the config object (either
passed as an argument or loaded from `),pZ=n(A4,"CODE",{});var LNr=s(pZ);UQe=r(LNr,"pretrained_model_name_or_path"),LNr.forEach(t),JQe=r(A4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Z=n(A4,"CODE",{});var xNr=s(_Z);YQe=r(xNr,"pretrained_model_name_or_path"),xNr.forEach(t),KQe=r(A4,":"),A4.forEach(t),ZQe=i(ha),E=n(ha,"UL",{});var C=s(E);Qn=n(C,"LI",{});var vL=s(Qn);uZ=n(vL,"STRONG",{});var kNr=s(uZ);eWe=r(kNr,"albert"),kNr.forEach(t),oWe=r(vL," \u2014 "),bk=n(vL,"A",{href:!0});var SNr=s(bk);rWe=r(SNr,"AlbertTokenizer"),SNr.forEach(t),tWe=r(vL," or "),Fk=n(vL,"A",{href:!0});var RNr=s(Fk);aWe=r(RNr,"AlbertTokenizerFast"),RNr.forEach(t),nWe=r(vL," (ALBERT model)"),vL.forEach(t),sWe=i(C),Wn=n(C,"LI",{});var TL=s(Wn);bZ=n(TL,"STRONG",{});var BNr=s(bZ);lWe=r(BNr,"bart"),BNr.forEach(t),iWe=r(TL," \u2014 "),vk=n(TL,"A",{href:!0});var PNr=s(vk);dWe=r(PNr,"BartTokenizer"),PNr.forEach(t),cWe=r(TL," or "),Tk=n(TL,"A",{href:!0});var $Nr=s(Tk);fWe=r($Nr,"BartTokenizerFast"),$Nr.forEach(t),mWe=r(TL," (BART model)"),TL.forEach(t),gWe=i(C),Hn=n(C,"LI",{});var ML=s(Hn);FZ=n(ML,"STRONG",{});var INr=s(FZ);hWe=r(INr,"barthez"),INr.forEach(t),pWe=r(ML," \u2014 "),Mk=n(ML,"A",{href:!0});var qNr=s(Mk);_We=r(qNr,"BarthezTokenizer"),qNr.forEach(t),uWe=r(ML," or "),Ek=n(ML,"A",{href:!0});var NNr=s(Ek);bWe=r(NNr,"BarthezTokenizerFast"),NNr.forEach(t),FWe=r(ML," (BARThez model)"),ML.forEach(t),vWe=i(C),Dg=n(C,"LI",{});var I7e=s(Dg);vZ=n(I7e,"STRONG",{});var jNr=s(vZ);TWe=r(jNr,"bartpho"),jNr.forEach(t),MWe=r(I7e," \u2014 "),Ck=n(I7e,"A",{href:!0});var DNr=s(Ck);EWe=r(DNr,"BartphoTokenizer"),DNr.forEach(t),CWe=r(I7e," (BARTpho model)"),I7e.forEach(t),wWe=i(C),Un=n(C,"LI",{});var EL=s(Un);TZ=n(EL,"STRONG",{});var GNr=s(TZ);AWe=r(GNr,"bert"),GNr.forEach(t),yWe=r(EL," \u2014 "),wk=n(EL,"A",{href:!0});var ONr=s(wk);LWe=r(ONr,"BertTokenizer"),ONr.forEach(t),xWe=r(EL," or "),Ak=n(EL,"A",{href:!0});var VNr=s(Ak);kWe=r(VNr,"BertTokenizerFast"),VNr.forEach(t),SWe=r(EL," (BERT model)"),EL.forEach(t),RWe=i(C),Gg=n(C,"LI",{});var q7e=s(Gg);MZ=n(q7e,"STRONG",{});var XNr=s(MZ);BWe=r(XNr,"bert-generation"),XNr.forEach(t),PWe=r(q7e," \u2014 "),yk=n(q7e,"A",{href:!0});var zNr=s(yk);$We=r(zNr,"BertGenerationTokenizer"),zNr.forEach(t),IWe=r(q7e," (Bert Generation model)"),q7e.forEach(t),qWe=i(C),Og=n(C,"LI",{});var N7e=s(Og);EZ=n(N7e,"STRONG",{});var QNr=s(EZ);NWe=r(QNr,"bert-japanese"),QNr.forEach(t),jWe=r(N7e," \u2014 "),Lk=n(N7e,"A",{href:!0});var WNr=s(Lk);DWe=r(WNr,"BertJapaneseTokenizer"),WNr.forEach(t),GWe=r(N7e," (BertJapanese model)"),N7e.forEach(t),OWe=i(C),Vg=n(C,"LI",{});var j7e=s(Vg);CZ=n(j7e,"STRONG",{});var HNr=s(CZ);VWe=r(HNr,"bertweet"),HNr.forEach(t),XWe=r(j7e," \u2014 "),xk=n(j7e,"A",{href:!0});var UNr=s(xk);zWe=r(UNr,"BertweetTokenizer"),UNr.forEach(t),QWe=r(j7e," (Bertweet model)"),j7e.forEach(t),WWe=i(C),Jn=n(C,"LI",{});var CL=s(Jn);wZ=n(CL,"STRONG",{});var JNr=s(wZ);HWe=r(JNr,"big_bird"),JNr.forEach(t),UWe=r(CL," \u2014 "),kk=n(CL,"A",{href:!0});var YNr=s(kk);JWe=r(YNr,"BigBirdTokenizer"),YNr.forEach(t),YWe=r(CL," or "),Sk=n(CL,"A",{href:!0});var KNr=s(Sk);KWe=r(KNr,"BigBirdTokenizerFast"),KNr.forEach(t),ZWe=r(CL," (BigBird model)"),CL.forEach(t),eHe=i(C),Yn=n(C,"LI",{});var wL=s(Yn);AZ=n(wL,"STRONG",{});var ZNr=s(AZ);oHe=r(ZNr,"bigbird_pegasus"),ZNr.forEach(t),rHe=r(wL," \u2014 "),Rk=n(wL,"A",{href:!0});var ejr=s(Rk);tHe=r(ejr,"PegasusTokenizer"),ejr.forEach(t),aHe=r(wL," or "),Bk=n(wL,"A",{href:!0});var ojr=s(Bk);nHe=r(ojr,"PegasusTokenizerFast"),ojr.forEach(t),sHe=r(wL," (BigBirdPegasus model)"),wL.forEach(t),lHe=i(C),Kn=n(C,"LI",{});var AL=s(Kn);yZ=n(AL,"STRONG",{});var rjr=s(yZ);iHe=r(rjr,"blenderbot"),rjr.forEach(t),dHe=r(AL," \u2014 "),Pk=n(AL,"A",{href:!0});var tjr=s(Pk);cHe=r(tjr,"BlenderbotTokenizer"),tjr.forEach(t),fHe=r(AL," or "),$k=n(AL,"A",{href:!0});var ajr=s($k);mHe=r(ajr,"BlenderbotTokenizerFast"),ajr.forEach(t),gHe=r(AL," (Blenderbot model)"),AL.forEach(t),hHe=i(C),Xg=n(C,"LI",{});var D7e=s(Xg);LZ=n(D7e,"STRONG",{});var njr=s(LZ);pHe=r(njr,"blenderbot-small"),njr.forEach(t),_He=r(D7e," \u2014 "),Ik=n(D7e,"A",{href:!0});var sjr=s(Ik);uHe=r(sjr,"BlenderbotSmallTokenizer"),sjr.forEach(t),bHe=r(D7e," (BlenderbotSmall model)"),D7e.forEach(t),FHe=i(C),zg=n(C,"LI",{});var G7e=s(zg);xZ=n(G7e,"STRONG",{});var ljr=s(xZ);vHe=r(ljr,"byt5"),ljr.forEach(t),THe=r(G7e," \u2014 "),qk=n(G7e,"A",{href:!0});var ijr=s(qk);MHe=r(ijr,"ByT5Tokenizer"),ijr.forEach(t),EHe=r(G7e," (ByT5 model)"),G7e.forEach(t),CHe=i(C),Zn=n(C,"LI",{});var yL=s(Zn);kZ=n(yL,"STRONG",{});var djr=s(kZ);wHe=r(djr,"camembert"),djr.forEach(t),AHe=r(yL," \u2014 "),Nk=n(yL,"A",{href:!0});var cjr=s(Nk);yHe=r(cjr,"CamembertTokenizer"),cjr.forEach(t),LHe=r(yL," or "),jk=n(yL,"A",{href:!0});var fjr=s(jk);xHe=r(fjr,"CamembertTokenizerFast"),fjr.forEach(t),kHe=r(yL," (CamemBERT model)"),yL.forEach(t),SHe=i(C),Qg=n(C,"LI",{});var O7e=s(Qg);SZ=n(O7e,"STRONG",{});var mjr=s(SZ);RHe=r(mjr,"canine"),mjr.forEach(t),BHe=r(O7e," \u2014 "),Dk=n(O7e,"A",{href:!0});var gjr=s(Dk);PHe=r(gjr,"CanineTokenizer"),gjr.forEach(t),$He=r(O7e," (Canine model)"),O7e.forEach(t),IHe=i(C),es=n(C,"LI",{});var LL=s(es);RZ=n(LL,"STRONG",{});var hjr=s(RZ);qHe=r(hjr,"clip"),hjr.forEach(t),NHe=r(LL," \u2014 "),Gk=n(LL,"A",{href:!0});var pjr=s(Gk);jHe=r(pjr,"CLIPTokenizer"),pjr.forEach(t),DHe=r(LL," or "),Ok=n(LL,"A",{href:!0});var _jr=s(Ok);GHe=r(_jr,"CLIPTokenizerFast"),_jr.forEach(t),OHe=r(LL," (CLIP model)"),LL.forEach(t),VHe=i(C),os=n(C,"LI",{});var xL=s(os);BZ=n(xL,"STRONG",{});var ujr=s(BZ);XHe=r(ujr,"convbert"),ujr.forEach(t),zHe=r(xL," \u2014 "),Vk=n(xL,"A",{href:!0});var bjr=s(Vk);QHe=r(bjr,"ConvBertTokenizer"),bjr.forEach(t),WHe=r(xL," or "),Xk=n(xL,"A",{href:!0});var Fjr=s(Xk);HHe=r(Fjr,"ConvBertTokenizerFast"),Fjr.forEach(t),UHe=r(xL," (ConvBERT model)"),xL.forEach(t),JHe=i(C),rs=n(C,"LI",{});var kL=s(rs);PZ=n(kL,"STRONG",{});var vjr=s(PZ);YHe=r(vjr,"cpm"),vjr.forEach(t),KHe=r(kL," \u2014 "),zk=n(kL,"A",{href:!0});var Tjr=s(zk);ZHe=r(Tjr,"CpmTokenizer"),Tjr.forEach(t),eUe=r(kL," or "),$Z=n(kL,"CODE",{});var Mjr=s($Z);oUe=r(Mjr,"CpmTokenizerFast"),Mjr.forEach(t),rUe=r(kL," (CPM model)"),kL.forEach(t),tUe=i(C),Wg=n(C,"LI",{});var V7e=s(Wg);IZ=n(V7e,"STRONG",{});var Ejr=s(IZ);aUe=r(Ejr,"ctrl"),Ejr.forEach(t),nUe=r(V7e," \u2014 "),Qk=n(V7e,"A",{href:!0});var Cjr=s(Qk);sUe=r(Cjr,"CTRLTokenizer"),Cjr.forEach(t),lUe=r(V7e," (CTRL model)"),V7e.forEach(t),iUe=i(C),ts=n(C,"LI",{});var SL=s(ts);qZ=n(SL,"STRONG",{});var wjr=s(qZ);dUe=r(wjr,"deberta"),wjr.forEach(t),cUe=r(SL," \u2014 "),Wk=n(SL,"A",{href:!0});var Ajr=s(Wk);fUe=r(Ajr,"DebertaTokenizer"),Ajr.forEach(t),mUe=r(SL," or "),Hk=n(SL,"A",{href:!0});var yjr=s(Hk);gUe=r(yjr,"DebertaTokenizerFast"),yjr.forEach(t),hUe=r(SL," (DeBERTa model)"),SL.forEach(t),pUe=i(C),Hg=n(C,"LI",{});var X7e=s(Hg);NZ=n(X7e,"STRONG",{});var Ljr=s(NZ);_Ue=r(Ljr,"deberta-v2"),Ljr.forEach(t),uUe=r(X7e," \u2014 "),Uk=n(X7e,"A",{href:!0});var xjr=s(Uk);bUe=r(xjr,"DebertaV2Tokenizer"),xjr.forEach(t),FUe=r(X7e," (DeBERTa-v2 model)"),X7e.forEach(t),vUe=i(C),as=n(C,"LI",{});var RL=s(as);jZ=n(RL,"STRONG",{});var kjr=s(jZ);TUe=r(kjr,"distilbert"),kjr.forEach(t),MUe=r(RL," \u2014 "),Jk=n(RL,"A",{href:!0});var Sjr=s(Jk);EUe=r(Sjr,"DistilBertTokenizer"),Sjr.forEach(t),CUe=r(RL," or "),Yk=n(RL,"A",{href:!0});var Rjr=s(Yk);wUe=r(Rjr,"DistilBertTokenizerFast"),Rjr.forEach(t),AUe=r(RL," (DistilBERT model)"),RL.forEach(t),yUe=i(C),ns=n(C,"LI",{});var BL=s(ns);DZ=n(BL,"STRONG",{});var Bjr=s(DZ);LUe=r(Bjr,"dpr"),Bjr.forEach(t),xUe=r(BL," \u2014 "),Kk=n(BL,"A",{href:!0});var Pjr=s(Kk);kUe=r(Pjr,"DPRQuestionEncoderTokenizer"),Pjr.forEach(t),SUe=r(BL," or "),Zk=n(BL,"A",{href:!0});var $jr=s(Zk);RUe=r($jr,"DPRQuestionEncoderTokenizerFast"),$jr.forEach(t),BUe=r(BL," (DPR model)"),BL.forEach(t),PUe=i(C),ss=n(C,"LI",{});var PL=s(ss);GZ=n(PL,"STRONG",{});var Ijr=s(GZ);$Ue=r(Ijr,"electra"),Ijr.forEach(t),IUe=r(PL," \u2014 "),eS=n(PL,"A",{href:!0});var qjr=s(eS);qUe=r(qjr,"ElectraTokenizer"),qjr.forEach(t),NUe=r(PL," or "),oS=n(PL,"A",{href:!0});var Njr=s(oS);jUe=r(Njr,"ElectraTokenizerFast"),Njr.forEach(t),DUe=r(PL," (ELECTRA model)"),PL.forEach(t),GUe=i(C),Ug=n(C,"LI",{});var z7e=s(Ug);OZ=n(z7e,"STRONG",{});var jjr=s(OZ);OUe=r(jjr,"flaubert"),jjr.forEach(t),VUe=r(z7e," \u2014 "),rS=n(z7e,"A",{href:!0});var Djr=s(rS);XUe=r(Djr,"FlaubertTokenizer"),Djr.forEach(t),zUe=r(z7e," (FlauBERT model)"),z7e.forEach(t),QUe=i(C),ls=n(C,"LI",{});var $L=s(ls);VZ=n($L,"STRONG",{});var Gjr=s(VZ);WUe=r(Gjr,"fnet"),Gjr.forEach(t),HUe=r($L," \u2014 "),tS=n($L,"A",{href:!0});var Ojr=s(tS);UUe=r(Ojr,"FNetTokenizer"),Ojr.forEach(t),JUe=r($L," or "),aS=n($L,"A",{href:!0});var Vjr=s(aS);YUe=r(Vjr,"FNetTokenizerFast"),Vjr.forEach(t),KUe=r($L," (FNet model)"),$L.forEach(t),ZUe=i(C),Jg=n(C,"LI",{});var Q7e=s(Jg);XZ=n(Q7e,"STRONG",{});var Xjr=s(XZ);eJe=r(Xjr,"fsmt"),Xjr.forEach(t),oJe=r(Q7e," \u2014 "),nS=n(Q7e,"A",{href:!0});var zjr=s(nS);rJe=r(zjr,"FSMTTokenizer"),zjr.forEach(t),tJe=r(Q7e," (FairSeq Machine-Translation model)"),Q7e.forEach(t),aJe=i(C),is=n(C,"LI",{});var IL=s(is);zZ=n(IL,"STRONG",{});var Qjr=s(zZ);nJe=r(Qjr,"funnel"),Qjr.forEach(t),sJe=r(IL," \u2014 "),sS=n(IL,"A",{href:!0});var Wjr=s(sS);lJe=r(Wjr,"FunnelTokenizer"),Wjr.forEach(t),iJe=r(IL," or "),lS=n(IL,"A",{href:!0});var Hjr=s(lS);dJe=r(Hjr,"FunnelTokenizerFast"),Hjr.forEach(t),cJe=r(IL," (Funnel Transformer model)"),IL.forEach(t),fJe=i(C),ds=n(C,"LI",{});var qL=s(ds);QZ=n(qL,"STRONG",{});var Ujr=s(QZ);mJe=r(Ujr,"gpt2"),Ujr.forEach(t),gJe=r(qL," \u2014 "),iS=n(qL,"A",{href:!0});var Jjr=s(iS);hJe=r(Jjr,"GPT2Tokenizer"),Jjr.forEach(t),pJe=r(qL," or "),dS=n(qL,"A",{href:!0});var Yjr=s(dS);_Je=r(Yjr,"GPT2TokenizerFast"),Yjr.forEach(t),uJe=r(qL," (OpenAI GPT-2 model)"),qL.forEach(t),bJe=i(C),cs=n(C,"LI",{});var NL=s(cs);WZ=n(NL,"STRONG",{});var Kjr=s(WZ);FJe=r(Kjr,"gpt_neo"),Kjr.forEach(t),vJe=r(NL," \u2014 "),cS=n(NL,"A",{href:!0});var Zjr=s(cS);TJe=r(Zjr,"GPT2Tokenizer"),Zjr.forEach(t),MJe=r(NL," or "),fS=n(NL,"A",{href:!0});var eDr=s(fS);EJe=r(eDr,"GPT2TokenizerFast"),eDr.forEach(t),CJe=r(NL," (GPT Neo model)"),NL.forEach(t),wJe=i(C),fs=n(C,"LI",{});var jL=s(fs);HZ=n(jL,"STRONG",{});var oDr=s(HZ);AJe=r(oDr,"gptj"),oDr.forEach(t),yJe=r(jL," \u2014 "),mS=n(jL,"A",{href:!0});var rDr=s(mS);LJe=r(rDr,"GPT2Tokenizer"),rDr.forEach(t),xJe=r(jL," or "),gS=n(jL,"A",{href:!0});var tDr=s(gS);kJe=r(tDr,"GPT2TokenizerFast"),tDr.forEach(t),SJe=r(jL," (GPT-J model)"),jL.forEach(t),RJe=i(C),ms=n(C,"LI",{});var DL=s(ms);UZ=n(DL,"STRONG",{});var aDr=s(UZ);BJe=r(aDr,"herbert"),aDr.forEach(t),PJe=r(DL," \u2014 "),hS=n(DL,"A",{href:!0});var nDr=s(hS);$Je=r(nDr,"HerbertTokenizer"),nDr.forEach(t),IJe=r(DL," or "),pS=n(DL,"A",{href:!0});var sDr=s(pS);qJe=r(sDr,"HerbertTokenizerFast"),sDr.forEach(t),NJe=r(DL," (HerBERT model)"),DL.forEach(t),jJe=i(C),Yg=n(C,"LI",{});var W7e=s(Yg);JZ=n(W7e,"STRONG",{});var lDr=s(JZ);DJe=r(lDr,"hubert"),lDr.forEach(t),GJe=r(W7e," \u2014 "),_S=n(W7e,"A",{href:!0});var iDr=s(_S);OJe=r(iDr,"Wav2Vec2CTCTokenizer"),iDr.forEach(t),VJe=r(W7e," (Hubert model)"),W7e.forEach(t),XJe=i(C),gs=n(C,"LI",{});var GL=s(gs);YZ=n(GL,"STRONG",{});var dDr=s(YZ);zJe=r(dDr,"ibert"),dDr.forEach(t),QJe=r(GL," \u2014 "),uS=n(GL,"A",{href:!0});var cDr=s(uS);WJe=r(cDr,"RobertaTokenizer"),cDr.forEach(t),HJe=r(GL," or "),bS=n(GL,"A",{href:!0});var fDr=s(bS);UJe=r(fDr,"RobertaTokenizerFast"),fDr.forEach(t),JJe=r(GL," (I-BERT model)"),GL.forEach(t),YJe=i(C),hs=n(C,"LI",{});var OL=s(hs);KZ=n(OL,"STRONG",{});var mDr=s(KZ);KJe=r(mDr,"layoutlm"),mDr.forEach(t),ZJe=r(OL," \u2014 "),FS=n(OL,"A",{href:!0});var gDr=s(FS);eYe=r(gDr,"LayoutLMTokenizer"),gDr.forEach(t),oYe=r(OL," or "),vS=n(OL,"A",{href:!0});var hDr=s(vS);rYe=r(hDr,"LayoutLMTokenizerFast"),hDr.forEach(t),tYe=r(OL," (LayoutLM model)"),OL.forEach(t),aYe=i(C),ps=n(C,"LI",{});var VL=s(ps);ZZ=n(VL,"STRONG",{});var pDr=s(ZZ);nYe=r(pDr,"layoutlmv2"),pDr.forEach(t),sYe=r(VL," \u2014 "),TS=n(VL,"A",{href:!0});var _Dr=s(TS);lYe=r(_Dr,"LayoutLMv2Tokenizer"),_Dr.forEach(t),iYe=r(VL," or "),MS=n(VL,"A",{href:!0});var uDr=s(MS);dYe=r(uDr,"LayoutLMv2TokenizerFast"),uDr.forEach(t),cYe=r(VL," (LayoutLMv2 model)"),VL.forEach(t),fYe=i(C),_s=n(C,"LI",{});var XL=s(_s);eee=n(XL,"STRONG",{});var bDr=s(eee);mYe=r(bDr,"layoutxlm"),bDr.forEach(t),gYe=r(XL," \u2014 "),ES=n(XL,"A",{href:!0});var FDr=s(ES);hYe=r(FDr,"LayoutXLMTokenizer"),FDr.forEach(t),pYe=r(XL," or "),CS=n(XL,"A",{href:!0});var vDr=s(CS);_Ye=r(vDr,"LayoutXLMTokenizerFast"),vDr.forEach(t),uYe=r(XL," (LayoutXLM model)"),XL.forEach(t),bYe=i(C),us=n(C,"LI",{});var zL=s(us);oee=n(zL,"STRONG",{});var TDr=s(oee);FYe=r(TDr,"led"),TDr.forEach(t),vYe=r(zL," \u2014 "),wS=n(zL,"A",{href:!0});var MDr=s(wS);TYe=r(MDr,"LEDTokenizer"),MDr.forEach(t),MYe=r(zL," or "),AS=n(zL,"A",{href:!0});var EDr=s(AS);EYe=r(EDr,"LEDTokenizerFast"),EDr.forEach(t),CYe=r(zL," (LED model)"),zL.forEach(t),wYe=i(C),bs=n(C,"LI",{});var QL=s(bs);ree=n(QL,"STRONG",{});var CDr=s(ree);AYe=r(CDr,"longformer"),CDr.forEach(t),yYe=r(QL," \u2014 "),yS=n(QL,"A",{href:!0});var wDr=s(yS);LYe=r(wDr,"LongformerTokenizer"),wDr.forEach(t),xYe=r(QL," or "),LS=n(QL,"A",{href:!0});var ADr=s(LS);kYe=r(ADr,"LongformerTokenizerFast"),ADr.forEach(t),SYe=r(QL," (Longformer model)"),QL.forEach(t),RYe=i(C),Kg=n(C,"LI",{});var H7e=s(Kg);tee=n(H7e,"STRONG",{});var yDr=s(tee);BYe=r(yDr,"luke"),yDr.forEach(t),PYe=r(H7e," \u2014 "),xS=n(H7e,"A",{href:!0});var LDr=s(xS);$Ye=r(LDr,"LukeTokenizer"),LDr.forEach(t),IYe=r(H7e," (LUKE model)"),H7e.forEach(t),qYe=i(C),Fs=n(C,"LI",{});var WL=s(Fs);aee=n(WL,"STRONG",{});var xDr=s(aee);NYe=r(xDr,"lxmert"),xDr.forEach(t),jYe=r(WL," \u2014 "),kS=n(WL,"A",{href:!0});var kDr=s(kS);DYe=r(kDr,"LxmertTokenizer"),kDr.forEach(t),GYe=r(WL," or "),SS=n(WL,"A",{href:!0});var SDr=s(SS);OYe=r(SDr,"LxmertTokenizerFast"),SDr.forEach(t),VYe=r(WL," (LXMERT model)"),WL.forEach(t),XYe=i(C),Zg=n(C,"LI",{});var U7e=s(Zg);nee=n(U7e,"STRONG",{});var RDr=s(nee);zYe=r(RDr,"m2m_100"),RDr.forEach(t),QYe=r(U7e," \u2014 "),RS=n(U7e,"A",{href:!0});var BDr=s(RS);WYe=r(BDr,"M2M100Tokenizer"),BDr.forEach(t),HYe=r(U7e," (M2M100 model)"),U7e.forEach(t),UYe=i(C),eh=n(C,"LI",{});var J7e=s(eh);see=n(J7e,"STRONG",{});var PDr=s(see);JYe=r(PDr,"marian"),PDr.forEach(t),YYe=r(J7e," \u2014 "),BS=n(J7e,"A",{href:!0});var $Dr=s(BS);KYe=r($Dr,"MarianTokenizer"),$Dr.forEach(t),ZYe=r(J7e," (Marian model)"),J7e.forEach(t),eKe=i(C),vs=n(C,"LI",{});var HL=s(vs);lee=n(HL,"STRONG",{});var IDr=s(lee);oKe=r(IDr,"mbart"),IDr.forEach(t),rKe=r(HL," \u2014 "),PS=n(HL,"A",{href:!0});var qDr=s(PS);tKe=r(qDr,"MBartTokenizer"),qDr.forEach(t),aKe=r(HL," or "),$S=n(HL,"A",{href:!0});var NDr=s($S);nKe=r(NDr,"MBartTokenizerFast"),NDr.forEach(t),sKe=r(HL," (mBART model)"),HL.forEach(t),lKe=i(C),Ts=n(C,"LI",{});var UL=s(Ts);iee=n(UL,"STRONG",{});var jDr=s(iee);iKe=r(jDr,"mbart50"),jDr.forEach(t),dKe=r(UL," \u2014 "),IS=n(UL,"A",{href:!0});var DDr=s(IS);cKe=r(DDr,"MBart50Tokenizer"),DDr.forEach(t),fKe=r(UL," or "),qS=n(UL,"A",{href:!0});var GDr=s(qS);mKe=r(GDr,"MBart50TokenizerFast"),GDr.forEach(t),gKe=r(UL," (mBART-50 model)"),UL.forEach(t),hKe=i(C),oh=n(C,"LI",{});var Y7e=s(oh);dee=n(Y7e,"STRONG",{});var ODr=s(dee);pKe=r(ODr,"mluke"),ODr.forEach(t),_Ke=r(Y7e," \u2014 "),NS=n(Y7e,"A",{href:!0});var VDr=s(NS);uKe=r(VDr,"MLukeTokenizer"),VDr.forEach(t),bKe=r(Y7e," (mLUKE model)"),Y7e.forEach(t),FKe=i(C),Ms=n(C,"LI",{});var JL=s(Ms);cee=n(JL,"STRONG",{});var XDr=s(cee);vKe=r(XDr,"mobilebert"),XDr.forEach(t),TKe=r(JL," \u2014 "),jS=n(JL,"A",{href:!0});var zDr=s(jS);MKe=r(zDr,"MobileBertTokenizer"),zDr.forEach(t),EKe=r(JL," or "),DS=n(JL,"A",{href:!0});var QDr=s(DS);CKe=r(QDr,"MobileBertTokenizerFast"),QDr.forEach(t),wKe=r(JL," (MobileBERT model)"),JL.forEach(t),AKe=i(C),Es=n(C,"LI",{});var YL=s(Es);fee=n(YL,"STRONG",{});var WDr=s(fee);yKe=r(WDr,"mpnet"),WDr.forEach(t),LKe=r(YL," \u2014 "),GS=n(YL,"A",{href:!0});var HDr=s(GS);xKe=r(HDr,"MPNetTokenizer"),HDr.forEach(t),kKe=r(YL," or "),OS=n(YL,"A",{href:!0});var UDr=s(OS);SKe=r(UDr,"MPNetTokenizerFast"),UDr.forEach(t),RKe=r(YL," (MPNet model)"),YL.forEach(t),BKe=i(C),Cs=n(C,"LI",{});var KL=s(Cs);mee=n(KL,"STRONG",{});var JDr=s(mee);PKe=r(JDr,"mt5"),JDr.forEach(t),$Ke=r(KL," \u2014 "),VS=n(KL,"A",{href:!0});var YDr=s(VS);IKe=r(YDr,"MT5Tokenizer"),YDr.forEach(t),qKe=r(KL," or "),XS=n(KL,"A",{href:!0});var KDr=s(XS);NKe=r(KDr,"MT5TokenizerFast"),KDr.forEach(t),jKe=r(KL," (mT5 model)"),KL.forEach(t),DKe=i(C),ws=n(C,"LI",{});var ZL=s(ws);gee=n(ZL,"STRONG",{});var ZDr=s(gee);GKe=r(ZDr,"openai-gpt"),ZDr.forEach(t),OKe=r(ZL," \u2014 "),zS=n(ZL,"A",{href:!0});var eGr=s(zS);VKe=r(eGr,"OpenAIGPTTokenizer"),eGr.forEach(t),XKe=r(ZL," or "),QS=n(ZL,"A",{href:!0});var oGr=s(QS);zKe=r(oGr,"OpenAIGPTTokenizerFast"),oGr.forEach(t),QKe=r(ZL," (OpenAI GPT model)"),ZL.forEach(t),WKe=i(C),As=n(C,"LI",{});var e9=s(As);hee=n(e9,"STRONG",{});var rGr=s(hee);HKe=r(rGr,"pegasus"),rGr.forEach(t),UKe=r(e9," \u2014 "),WS=n(e9,"A",{href:!0});var tGr=s(WS);JKe=r(tGr,"PegasusTokenizer"),tGr.forEach(t),YKe=r(e9," or "),HS=n(e9,"A",{href:!0});var aGr=s(HS);KKe=r(aGr,"PegasusTokenizerFast"),aGr.forEach(t),ZKe=r(e9," (Pegasus model)"),e9.forEach(t),eZe=i(C),rh=n(C,"LI",{});var K7e=s(rh);pee=n(K7e,"STRONG",{});var nGr=s(pee);oZe=r(nGr,"perceiver"),nGr.forEach(t),rZe=r(K7e," \u2014 "),US=n(K7e,"A",{href:!0});var sGr=s(US);tZe=r(sGr,"PerceiverTokenizer"),sGr.forEach(t),aZe=r(K7e," (Perceiver model)"),K7e.forEach(t),nZe=i(C),th=n(C,"LI",{});var Z7e=s(th);_ee=n(Z7e,"STRONG",{});var lGr=s(_ee);sZe=r(lGr,"phobert"),lGr.forEach(t),lZe=r(Z7e," \u2014 "),JS=n(Z7e,"A",{href:!0});var iGr=s(JS);iZe=r(iGr,"PhobertTokenizer"),iGr.forEach(t),dZe=r(Z7e," (PhoBERT model)"),Z7e.forEach(t),cZe=i(C),ah=n(C,"LI",{});var eMe=s(ah);uee=n(eMe,"STRONG",{});var dGr=s(uee);fZe=r(dGr,"plbart"),dGr.forEach(t),mZe=r(eMe," \u2014 "),YS=n(eMe,"A",{href:!0});var cGr=s(YS);gZe=r(cGr,"PLBartTokenizer"),cGr.forEach(t),hZe=r(eMe," (PLBart model)"),eMe.forEach(t),pZe=i(C),nh=n(C,"LI",{});var oMe=s(nh);bee=n(oMe,"STRONG",{});var fGr=s(bee);_Ze=r(fGr,"prophetnet"),fGr.forEach(t),uZe=r(oMe," \u2014 "),KS=n(oMe,"A",{href:!0});var mGr=s(KS);bZe=r(mGr,"ProphetNetTokenizer"),mGr.forEach(t),FZe=r(oMe," (ProphetNet model)"),oMe.forEach(t),vZe=i(C),ys=n(C,"LI",{});var o9=s(ys);Fee=n(o9,"STRONG",{});var gGr=s(Fee);TZe=r(gGr,"qdqbert"),gGr.forEach(t),MZe=r(o9," \u2014 "),ZS=n(o9,"A",{href:!0});var hGr=s(ZS);EZe=r(hGr,"BertTokenizer"),hGr.forEach(t),CZe=r(o9," or "),eR=n(o9,"A",{href:!0});var pGr=s(eR);wZe=r(pGr,"BertTokenizerFast"),pGr.forEach(t),AZe=r(o9," (QDQBert model)"),o9.forEach(t),yZe=i(C),sh=n(C,"LI",{});var rMe=s(sh);vee=n(rMe,"STRONG",{});var _Gr=s(vee);LZe=r(_Gr,"rag"),_Gr.forEach(t),xZe=r(rMe," \u2014 "),oR=n(rMe,"A",{href:!0});var uGr=s(oR);kZe=r(uGr,"RagTokenizer"),uGr.forEach(t),SZe=r(rMe," (RAG model)"),rMe.forEach(t),RZe=i(C),Ls=n(C,"LI",{});var r9=s(Ls);Tee=n(r9,"STRONG",{});var bGr=s(Tee);BZe=r(bGr,"realm"),bGr.forEach(t),PZe=r(r9," \u2014 "),rR=n(r9,"A",{href:!0});var FGr=s(rR);$Ze=r(FGr,"RealmTokenizer"),FGr.forEach(t),IZe=r(r9," or "),tR=n(r9,"A",{href:!0});var vGr=s(tR);qZe=r(vGr,"RealmTokenizerFast"),vGr.forEach(t),NZe=r(r9," (Realm model)"),r9.forEach(t),jZe=i(C),xs=n(C,"LI",{});var t9=s(xs);Mee=n(t9,"STRONG",{});var TGr=s(Mee);DZe=r(TGr,"reformer"),TGr.forEach(t),GZe=r(t9," \u2014 "),aR=n(t9,"A",{href:!0});var MGr=s(aR);OZe=r(MGr,"ReformerTokenizer"),MGr.forEach(t),VZe=r(t9," or "),nR=n(t9,"A",{href:!0});var EGr=s(nR);XZe=r(EGr,"ReformerTokenizerFast"),EGr.forEach(t),zZe=r(t9," (Reformer model)"),t9.forEach(t),QZe=i(C),ks=n(C,"LI",{});var a9=s(ks);Eee=n(a9,"STRONG",{});var CGr=s(Eee);WZe=r(CGr,"rembert"),CGr.forEach(t),HZe=r(a9," \u2014 "),sR=n(a9,"A",{href:!0});var wGr=s(sR);UZe=r(wGr,"RemBertTokenizer"),wGr.forEach(t),JZe=r(a9," or "),lR=n(a9,"A",{href:!0});var AGr=s(lR);YZe=r(AGr,"RemBertTokenizerFast"),AGr.forEach(t),KZe=r(a9," (RemBERT model)"),a9.forEach(t),ZZe=i(C),Ss=n(C,"LI",{});var n9=s(Ss);Cee=n(n9,"STRONG",{});var yGr=s(Cee);eeo=r(yGr,"retribert"),yGr.forEach(t),oeo=r(n9," \u2014 "),iR=n(n9,"A",{href:!0});var LGr=s(iR);reo=r(LGr,"RetriBertTokenizer"),LGr.forEach(t),teo=r(n9," or "),dR=n(n9,"A",{href:!0});var xGr=s(dR);aeo=r(xGr,"RetriBertTokenizerFast"),xGr.forEach(t),neo=r(n9," (RetriBERT model)"),n9.forEach(t),seo=i(C),Rs=n(C,"LI",{});var s9=s(Rs);wee=n(s9,"STRONG",{});var kGr=s(wee);leo=r(kGr,"roberta"),kGr.forEach(t),ieo=r(s9," \u2014 "),cR=n(s9,"A",{href:!0});var SGr=s(cR);deo=r(SGr,"RobertaTokenizer"),SGr.forEach(t),ceo=r(s9," or "),fR=n(s9,"A",{href:!0});var RGr=s(fR);feo=r(RGr,"RobertaTokenizerFast"),RGr.forEach(t),meo=r(s9," (RoBERTa model)"),s9.forEach(t),geo=i(C),Bs=n(C,"LI",{});var l9=s(Bs);Aee=n(l9,"STRONG",{});var BGr=s(Aee);heo=r(BGr,"roformer"),BGr.forEach(t),peo=r(l9," \u2014 "),mR=n(l9,"A",{href:!0});var PGr=s(mR);_eo=r(PGr,"RoFormerTokenizer"),PGr.forEach(t),ueo=r(l9," or "),gR=n(l9,"A",{href:!0});var $Gr=s(gR);beo=r($Gr,"RoFormerTokenizerFast"),$Gr.forEach(t),Feo=r(l9," (RoFormer model)"),l9.forEach(t),veo=i(C),lh=n(C,"LI",{});var tMe=s(lh);yee=n(tMe,"STRONG",{});var IGr=s(yee);Teo=r(IGr,"speech_to_text"),IGr.forEach(t),Meo=r(tMe," \u2014 "),hR=n(tMe,"A",{href:!0});var qGr=s(hR);Eeo=r(qGr,"Speech2TextTokenizer"),qGr.forEach(t),Ceo=r(tMe," (Speech2Text model)"),tMe.forEach(t),weo=i(C),ih=n(C,"LI",{});var aMe=s(ih);Lee=n(aMe,"STRONG",{});var NGr=s(Lee);Aeo=r(NGr,"speech_to_text_2"),NGr.forEach(t),yeo=r(aMe," \u2014 "),pR=n(aMe,"A",{href:!0});var jGr=s(pR);Leo=r(jGr,"Speech2Text2Tokenizer"),jGr.forEach(t),xeo=r(aMe," (Speech2Text2 model)"),aMe.forEach(t),keo=i(C),Ps=n(C,"LI",{});var i9=s(Ps);xee=n(i9,"STRONG",{});var DGr=s(xee);Seo=r(DGr,"splinter"),DGr.forEach(t),Reo=r(i9," \u2014 "),_R=n(i9,"A",{href:!0});var GGr=s(_R);Beo=r(GGr,"SplinterTokenizer"),GGr.forEach(t),Peo=r(i9," or "),uR=n(i9,"A",{href:!0});var OGr=s(uR);$eo=r(OGr,"SplinterTokenizerFast"),OGr.forEach(t),Ieo=r(i9," (Splinter model)"),i9.forEach(t),qeo=i(C),$s=n(C,"LI",{});var d9=s($s);kee=n(d9,"STRONG",{});var VGr=s(kee);Neo=r(VGr,"squeezebert"),VGr.forEach(t),jeo=r(d9," \u2014 "),bR=n(d9,"A",{href:!0});var XGr=s(bR);Deo=r(XGr,"SqueezeBertTokenizer"),XGr.forEach(t),Geo=r(d9," or "),FR=n(d9,"A",{href:!0});var zGr=s(FR);Oeo=r(zGr,"SqueezeBertTokenizerFast"),zGr.forEach(t),Veo=r(d9," (SqueezeBERT model)"),d9.forEach(t),Xeo=i(C),Is=n(C,"LI",{});var c9=s(Is);See=n(c9,"STRONG",{});var QGr=s(See);zeo=r(QGr,"t5"),QGr.forEach(t),Qeo=r(c9," \u2014 "),vR=n(c9,"A",{href:!0});var WGr=s(vR);Weo=r(WGr,"T5Tokenizer"),WGr.forEach(t),Heo=r(c9," or "),TR=n(c9,"A",{href:!0});var HGr=s(TR);Ueo=r(HGr,"T5TokenizerFast"),HGr.forEach(t),Jeo=r(c9," (T5 model)"),c9.forEach(t),Yeo=i(C),dh=n(C,"LI",{});var nMe=s(dh);Ree=n(nMe,"STRONG",{});var UGr=s(Ree);Keo=r(UGr,"tapas"),UGr.forEach(t),Zeo=r(nMe," \u2014 "),MR=n(nMe,"A",{href:!0});var JGr=s(MR);eoo=r(JGr,"TapasTokenizer"),JGr.forEach(t),ooo=r(nMe," (TAPAS model)"),nMe.forEach(t),roo=i(C),ch=n(C,"LI",{});var sMe=s(ch);Bee=n(sMe,"STRONG",{});var YGr=s(Bee);too=r(YGr,"tapex"),YGr.forEach(t),aoo=r(sMe," \u2014 "),ER=n(sMe,"A",{href:!0});var KGr=s(ER);noo=r(KGr,"TapexTokenizer"),KGr.forEach(t),soo=r(sMe," (TAPEX model)"),sMe.forEach(t),loo=i(C),fh=n(C,"LI",{});var lMe=s(fh);Pee=n(lMe,"STRONG",{});var ZGr=s(Pee);ioo=r(ZGr,"transfo-xl"),ZGr.forEach(t),doo=r(lMe," \u2014 "),CR=n(lMe,"A",{href:!0});var eOr=s(CR);coo=r(eOr,"TransfoXLTokenizer"),eOr.forEach(t),foo=r(lMe," (Transformer-XL model)"),lMe.forEach(t),moo=i(C),mh=n(C,"LI",{});var iMe=s(mh);$ee=n(iMe,"STRONG",{});var oOr=s($ee);goo=r(oOr,"wav2vec2"),oOr.forEach(t),hoo=r(iMe," \u2014 "),wR=n(iMe,"A",{href:!0});var rOr=s(wR);poo=r(rOr,"Wav2Vec2CTCTokenizer"),rOr.forEach(t),_oo=r(iMe," (Wav2Vec2 model)"),iMe.forEach(t),uoo=i(C),gh=n(C,"LI",{});var dMe=s(gh);Iee=n(dMe,"STRONG",{});var tOr=s(Iee);boo=r(tOr,"wav2vec2_phoneme"),tOr.forEach(t),Foo=r(dMe," \u2014 "),AR=n(dMe,"A",{href:!0});var aOr=s(AR);voo=r(aOr,"Wav2Vec2PhonemeCTCTokenizer"),aOr.forEach(t),Too=r(dMe," (Wav2Vec2Phoneme model)"),dMe.forEach(t),Moo=i(C),qs=n(C,"LI",{});var f9=s(qs);qee=n(f9,"STRONG",{});var nOr=s(qee);Eoo=r(nOr,"xglm"),nOr.forEach(t),Coo=r(f9," \u2014 "),yR=n(f9,"A",{href:!0});var sOr=s(yR);woo=r(sOr,"XGLMTokenizer"),sOr.forEach(t),Aoo=r(f9," or "),LR=n(f9,"A",{href:!0});var lOr=s(LR);yoo=r(lOr,"XGLMTokenizerFast"),lOr.forEach(t),Loo=r(f9," (XGLM model)"),f9.forEach(t),xoo=i(C),hh=n(C,"LI",{});var cMe=s(hh);Nee=n(cMe,"STRONG",{});var iOr=s(Nee);koo=r(iOr,"xlm"),iOr.forEach(t),Soo=r(cMe," \u2014 "),xR=n(cMe,"A",{href:!0});var dOr=s(xR);Roo=r(dOr,"XLMTokenizer"),dOr.forEach(t),Boo=r(cMe," (XLM model)"),cMe.forEach(t),Poo=i(C),ph=n(C,"LI",{});var fMe=s(ph);jee=n(fMe,"STRONG",{});var cOr=s(jee);$oo=r(cOr,"xlm-prophetnet"),cOr.forEach(t),Ioo=r(fMe," \u2014 "),kR=n(fMe,"A",{href:!0});var fOr=s(kR);qoo=r(fOr,"XLMProphetNetTokenizer"),fOr.forEach(t),Noo=r(fMe," (XLMProphetNet model)"),fMe.forEach(t),joo=i(C),Ns=n(C,"LI",{});var m9=s(Ns);Dee=n(m9,"STRONG",{});var mOr=s(Dee);Doo=r(mOr,"xlm-roberta"),mOr.forEach(t),Goo=r(m9," \u2014 "),SR=n(m9,"A",{href:!0});var gOr=s(SR);Ooo=r(gOr,"XLMRobertaTokenizer"),gOr.forEach(t),Voo=r(m9," or "),RR=n(m9,"A",{href:!0});var hOr=s(RR);Xoo=r(hOr,"XLMRobertaTokenizerFast"),hOr.forEach(t),zoo=r(m9," (XLM-RoBERTa model)"),m9.forEach(t),Qoo=i(C),js=n(C,"LI",{});var g9=s(js);Gee=n(g9,"STRONG",{});var pOr=s(Gee);Woo=r(pOr,"xlnet"),pOr.forEach(t),Hoo=r(g9," \u2014 "),BR=n(g9,"A",{href:!0});var _Or=s(BR);Uoo=r(_Or,"XLNetTokenizer"),_Or.forEach(t),Joo=r(g9," or "),PR=n(g9,"A",{href:!0});var uOr=s(PR);Yoo=r(uOr,"XLNetTokenizerFast"),uOr.forEach(t),Koo=r(g9," (XLNet model)"),g9.forEach(t),C.forEach(t),Zoo=i(ha),Oee=n(ha,"P",{});var bOr=s(Oee);ero=r(bOr,"Examples:"),bOr.forEach(t),oro=i(ha),m(OE.$$.fragment,ha),ha.forEach(t),rro=i(Xs),_h=n(Xs,"DIV",{class:!0});var BPe=s(_h);m(VE.$$.fragment,BPe),tro=i(BPe),Vee=n(BPe,"P",{});var FOr=s(Vee);aro=r(FOr,"Register a new tokenizer in this mapping."),FOr.forEach(t),BPe.forEach(t),Xs.forEach(t),xRe=i(c),Hi=n(c,"H2",{class:!0});var PPe=s(Hi);uh=n(PPe,"A",{id:!0,class:!0,href:!0});var vOr=s(uh);Xee=n(vOr,"SPAN",{});var TOr=s(Xee);m(XE.$$.fragment,TOr),TOr.forEach(t),vOr.forEach(t),nro=i(PPe),zee=n(PPe,"SPAN",{});var MOr=s(zee);sro=r(MOr,"AutoFeatureExtractor"),MOr.forEach(t),PPe.forEach(t),kRe=i(c),Ho=n(c,"DIV",{class:!0});var zs=s(Ho);m(zE.$$.fragment,zs),lro=i(zs),QE=n(zs,"P",{});var $Pe=s(QE);iro=r($Pe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),$R=n($Pe,"A",{href:!0});var EOr=s($R);dro=r(EOr,"AutoFeatureExtractor.from_pretrained()"),EOr.forEach(t),cro=r($Pe," class method."),$Pe.forEach(t),fro=i(zs),WE=n(zs,"P",{});var IPe=s(WE);mro=r(IPe,"This class cannot be instantiated directly using "),Qee=n(IPe,"CODE",{});var COr=s(Qee);gro=r(COr,"__init__()"),COr.forEach(t),hro=r(IPe," (throws an error)."),IPe.forEach(t),pro=i(zs),$e=n(zs,"DIV",{class:!0});var Nt=s($e);m(HE.$$.fragment,Nt),_ro=i(Nt),Wee=n(Nt,"P",{});var wOr=s(Wee);uro=r(wOr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),wOr.forEach(t),bro=i(Nt),Va=n(Nt,"P",{});var y4=s(Va);Fro=r(y4,"The feature extractor class to instantiate is selected based on the "),Hee=n(y4,"CODE",{});var AOr=s(Hee);vro=r(AOr,"model_type"),AOr.forEach(t),Tro=r(y4,` property of the config object
(either passed as an argument or loaded from `),Uee=n(y4,"CODE",{});var yOr=s(Uee);Mro=r(yOr,"pretrained_model_name_or_path"),yOr.forEach(t),Ero=r(y4,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Jee=n(y4,"CODE",{});var LOr=s(Jee);Cro=r(LOr,"pretrained_model_name_or_path"),LOr.forEach(t),wro=r(y4,":"),y4.forEach(t),Aro=i(Nt),ee=n(Nt,"UL",{});var ae=s(ee);bh=n(ae,"LI",{});var mMe=s(bh);Yee=n(mMe,"STRONG",{});var xOr=s(Yee);yro=r(xOr,"beit"),xOr.forEach(t),Lro=r(mMe," \u2014 "),IR=n(mMe,"A",{href:!0});var kOr=s(IR);xro=r(kOr,"BeitFeatureExtractor"),kOr.forEach(t),kro=r(mMe," (BEiT model)"),mMe.forEach(t),Sro=i(ae),Fh=n(ae,"LI",{});var gMe=s(Fh);Kee=n(gMe,"STRONG",{});var SOr=s(Kee);Rro=r(SOr,"clip"),SOr.forEach(t),Bro=r(gMe," \u2014 "),qR=n(gMe,"A",{href:!0});var ROr=s(qR);Pro=r(ROr,"CLIPFeatureExtractor"),ROr.forEach(t),$ro=r(gMe," (CLIP model)"),gMe.forEach(t),Iro=i(ae),vh=n(ae,"LI",{});var hMe=s(vh);Zee=n(hMe,"STRONG",{});var BOr=s(Zee);qro=r(BOr,"convnext"),BOr.forEach(t),Nro=r(hMe," \u2014 "),NR=n(hMe,"A",{href:!0});var POr=s(NR);jro=r(POr,"ConvNextFeatureExtractor"),POr.forEach(t),Dro=r(hMe," (ConvNext model)"),hMe.forEach(t),Gro=i(ae),Th=n(ae,"LI",{});var pMe=s(Th);eoe=n(pMe,"STRONG",{});var $Or=s(eoe);Oro=r($Or,"deit"),$Or.forEach(t),Vro=r(pMe," \u2014 "),jR=n(pMe,"A",{href:!0});var IOr=s(jR);Xro=r(IOr,"DeiTFeatureExtractor"),IOr.forEach(t),zro=r(pMe," (DeiT model)"),pMe.forEach(t),Qro=i(ae),Mh=n(ae,"LI",{});var _Me=s(Mh);ooe=n(_Me,"STRONG",{});var qOr=s(ooe);Wro=r(qOr,"detr"),qOr.forEach(t),Hro=r(_Me," \u2014 "),DR=n(_Me,"A",{href:!0});var NOr=s(DR);Uro=r(NOr,"DetrFeatureExtractor"),NOr.forEach(t),Jro=r(_Me," (DETR model)"),_Me.forEach(t),Yro=i(ae),Eh=n(ae,"LI",{});var uMe=s(Eh);roe=n(uMe,"STRONG",{});var jOr=s(roe);Kro=r(jOr,"hubert"),jOr.forEach(t),Zro=r(uMe," \u2014 "),GR=n(uMe,"A",{href:!0});var DOr=s(GR);eto=r(DOr,"Wav2Vec2FeatureExtractor"),DOr.forEach(t),oto=r(uMe," (Hubert model)"),uMe.forEach(t),rto=i(ae),Ch=n(ae,"LI",{});var bMe=s(Ch);toe=n(bMe,"STRONG",{});var GOr=s(toe);tto=r(GOr,"layoutlmv2"),GOr.forEach(t),ato=r(bMe," \u2014 "),OR=n(bMe,"A",{href:!0});var OOr=s(OR);nto=r(OOr,"LayoutLMv2FeatureExtractor"),OOr.forEach(t),sto=r(bMe," (LayoutLMv2 model)"),bMe.forEach(t),lto=i(ae),wh=n(ae,"LI",{});var FMe=s(wh);aoe=n(FMe,"STRONG",{});var VOr=s(aoe);ito=r(VOr,"maskformer"),VOr.forEach(t),dto=r(FMe," \u2014 "),VR=n(FMe,"A",{href:!0});var XOr=s(VR);cto=r(XOr,"MaskFormerFeatureExtractor"),XOr.forEach(t),fto=r(FMe," (MaskFormer model)"),FMe.forEach(t),mto=i(ae),Ah=n(ae,"LI",{});var vMe=s(Ah);noe=n(vMe,"STRONG",{});var zOr=s(noe);gto=r(zOr,"perceiver"),zOr.forEach(t),hto=r(vMe," \u2014 "),XR=n(vMe,"A",{href:!0});var QOr=s(XR);pto=r(QOr,"PerceiverFeatureExtractor"),QOr.forEach(t),_to=r(vMe," (Perceiver model)"),vMe.forEach(t),uto=i(ae),yh=n(ae,"LI",{});var TMe=s(yh);soe=n(TMe,"STRONG",{});var WOr=s(soe);bto=r(WOr,"poolformer"),WOr.forEach(t),Fto=r(TMe," \u2014 "),zR=n(TMe,"A",{href:!0});var HOr=s(zR);vto=r(HOr,"PoolFormerFeatureExtractor"),HOr.forEach(t),Tto=r(TMe," (PoolFormer model)"),TMe.forEach(t),Mto=i(ae),Lh=n(ae,"LI",{});var MMe=s(Lh);loe=n(MMe,"STRONG",{});var UOr=s(loe);Eto=r(UOr,"regnet"),UOr.forEach(t),Cto=r(MMe," \u2014 "),QR=n(MMe,"A",{href:!0});var JOr=s(QR);wto=r(JOr,"ConvNextFeatureExtractor"),JOr.forEach(t),Ato=r(MMe," (RegNet model)"),MMe.forEach(t),yto=i(ae),xh=n(ae,"LI",{});var EMe=s(xh);ioe=n(EMe,"STRONG",{});var YOr=s(ioe);Lto=r(YOr,"resnet"),YOr.forEach(t),xto=r(EMe," \u2014 "),WR=n(EMe,"A",{href:!0});var KOr=s(WR);kto=r(KOr,"ConvNextFeatureExtractor"),KOr.forEach(t),Sto=r(EMe," (ResNet model)"),EMe.forEach(t),Rto=i(ae),kh=n(ae,"LI",{});var CMe=s(kh);doe=n(CMe,"STRONG",{});var ZOr=s(doe);Bto=r(ZOr,"segformer"),ZOr.forEach(t),Pto=r(CMe," \u2014 "),HR=n(CMe,"A",{href:!0});var eVr=s(HR);$to=r(eVr,"SegformerFeatureExtractor"),eVr.forEach(t),Ito=r(CMe," (SegFormer model)"),CMe.forEach(t),qto=i(ae),Sh=n(ae,"LI",{});var wMe=s(Sh);coe=n(wMe,"STRONG",{});var oVr=s(coe);Nto=r(oVr,"speech_to_text"),oVr.forEach(t),jto=r(wMe," \u2014 "),UR=n(wMe,"A",{href:!0});var rVr=s(UR);Dto=r(rVr,"Speech2TextFeatureExtractor"),rVr.forEach(t),Gto=r(wMe," (Speech2Text model)"),wMe.forEach(t),Oto=i(ae),Rh=n(ae,"LI",{});var AMe=s(Rh);foe=n(AMe,"STRONG",{});var tVr=s(foe);Vto=r(tVr,"swin"),tVr.forEach(t),Xto=r(AMe," \u2014 "),JR=n(AMe,"A",{href:!0});var aVr=s(JR);zto=r(aVr,"ViTFeatureExtractor"),aVr.forEach(t),Qto=r(AMe," (Swin model)"),AMe.forEach(t),Wto=i(ae),Bh=n(ae,"LI",{});var yMe=s(Bh);moe=n(yMe,"STRONG",{});var nVr=s(moe);Hto=r(nVr,"van"),nVr.forEach(t),Uto=r(yMe," \u2014 "),YR=n(yMe,"A",{href:!0});var sVr=s(YR);Jto=r(sVr,"ConvNextFeatureExtractor"),sVr.forEach(t),Yto=r(yMe," (VAN model)"),yMe.forEach(t),Kto=i(ae),Ph=n(ae,"LI",{});var LMe=s(Ph);goe=n(LMe,"STRONG",{});var lVr=s(goe);Zto=r(lVr,"vit"),lVr.forEach(t),eao=r(LMe," \u2014 "),KR=n(LMe,"A",{href:!0});var iVr=s(KR);oao=r(iVr,"ViTFeatureExtractor"),iVr.forEach(t),rao=r(LMe," (ViT model)"),LMe.forEach(t),tao=i(ae),$h=n(ae,"LI",{});var xMe=s($h);hoe=n(xMe,"STRONG",{});var dVr=s(hoe);aao=r(dVr,"vit_mae"),dVr.forEach(t),nao=r(xMe," \u2014 "),ZR=n(xMe,"A",{href:!0});var cVr=s(ZR);sao=r(cVr,"ViTFeatureExtractor"),cVr.forEach(t),lao=r(xMe," (ViTMAE model)"),xMe.forEach(t),iao=i(ae),Ih=n(ae,"LI",{});var kMe=s(Ih);poe=n(kMe,"STRONG",{});var fVr=s(poe);dao=r(fVr,"wav2vec2"),fVr.forEach(t),cao=r(kMe," \u2014 "),eB=n(kMe,"A",{href:!0});var mVr=s(eB);fao=r(mVr,"Wav2Vec2FeatureExtractor"),mVr.forEach(t),mao=r(kMe," (Wav2Vec2 model)"),kMe.forEach(t),ae.forEach(t),gao=i(Nt),m(qh.$$.fragment,Nt),hao=i(Nt),_oe=n(Nt,"P",{});var gVr=s(_oe);pao=r(gVr,"Examples:"),gVr.forEach(t),_ao=i(Nt),m(UE.$$.fragment,Nt),Nt.forEach(t),uao=i(zs),Nh=n(zs,"DIV",{class:!0});var qPe=s(Nh);m(JE.$$.fragment,qPe),bao=i(qPe),uoe=n(qPe,"P",{});var hVr=s(uoe);Fao=r(hVr,"Register a new feature extractor for this class."),hVr.forEach(t),qPe.forEach(t),zs.forEach(t),SRe=i(c),Ui=n(c,"H2",{class:!0});var NPe=s(Ui);jh=n(NPe,"A",{id:!0,class:!0,href:!0});var pVr=s(jh);boe=n(pVr,"SPAN",{});var _Vr=s(boe);m(YE.$$.fragment,_Vr),_Vr.forEach(t),pVr.forEach(t),vao=i(NPe),Foe=n(NPe,"SPAN",{});var uVr=s(Foe);Tao=r(uVr,"AutoProcessor"),uVr.forEach(t),NPe.forEach(t),RRe=i(c),Uo=n(c,"DIV",{class:!0});var Qs=s(Uo);m(KE.$$.fragment,Qs),Mao=i(Qs),ZE=n(Qs,"P",{});var jPe=s(ZE);Eao=r(jPe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),oB=n(jPe,"A",{href:!0});var bVr=s(oB);Cao=r(bVr,"AutoProcessor.from_pretrained()"),bVr.forEach(t),wao=r(jPe," class method."),jPe.forEach(t),Aao=i(Qs),eC=n(Qs,"P",{});var DPe=s(eC);yao=r(DPe,"This class cannot be instantiated directly using "),voe=n(DPe,"CODE",{});var FVr=s(voe);Lao=r(FVr,"__init__()"),FVr.forEach(t),xao=r(DPe," (throws an error)."),DPe.forEach(t),kao=i(Qs),Ie=n(Qs,"DIV",{class:!0});var jt=s(Ie);m(oC.$$.fragment,jt),Sao=i(jt),Toe=n(jt,"P",{});var vVr=s(Toe);Rao=r(vVr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),vVr.forEach(t),Bao=i(jt),Ji=n(jt,"P",{});var hU=s(Ji);Pao=r(hU,"The processor class to instantiate is selected based on the "),Moe=n(hU,"CODE",{});var TVr=s(Moe);$ao=r(TVr,"model_type"),TVr.forEach(t),Iao=r(hU,` property of the config object (either
passed as an argument or loaded from `),Eoe=n(hU,"CODE",{});var MVr=s(Eoe);qao=r(MVr,"pretrained_model_name_or_path"),MVr.forEach(t),Nao=r(hU," if possible):"),hU.forEach(t),jao=i(jt),ke=n(jt,"UL",{});var jo=s(ke);Dh=n(jo,"LI",{});var SMe=s(Dh);Coe=n(SMe,"STRONG",{});var EVr=s(Coe);Dao=r(EVr,"clip"),EVr.forEach(t),Gao=r(SMe," \u2014 "),rB=n(SMe,"A",{href:!0});var CVr=s(rB);Oao=r(CVr,"CLIPProcessor"),CVr.forEach(t),Vao=r(SMe," (CLIP model)"),SMe.forEach(t),Xao=i(jo),Gh=n(jo,"LI",{});var RMe=s(Gh);woe=n(RMe,"STRONG",{});var wVr=s(woe);zao=r(wVr,"layoutlmv2"),wVr.forEach(t),Qao=r(RMe," \u2014 "),tB=n(RMe,"A",{href:!0});var AVr=s(tB);Wao=r(AVr,"LayoutLMv2Processor"),AVr.forEach(t),Hao=r(RMe," (LayoutLMv2 model)"),RMe.forEach(t),Uao=i(jo),Oh=n(jo,"LI",{});var BMe=s(Oh);Aoe=n(BMe,"STRONG",{});var yVr=s(Aoe);Jao=r(yVr,"layoutxlm"),yVr.forEach(t),Yao=r(BMe," \u2014 "),aB=n(BMe,"A",{href:!0});var LVr=s(aB);Kao=r(LVr,"LayoutXLMProcessor"),LVr.forEach(t),Zao=r(BMe," (LayoutXLM model)"),BMe.forEach(t),eno=i(jo),Vh=n(jo,"LI",{});var PMe=s(Vh);yoe=n(PMe,"STRONG",{});var xVr=s(yoe);ono=r(xVr,"speech_to_text"),xVr.forEach(t),rno=r(PMe," \u2014 "),nB=n(PMe,"A",{href:!0});var kVr=s(nB);tno=r(kVr,"Speech2TextProcessor"),kVr.forEach(t),ano=r(PMe," (Speech2Text model)"),PMe.forEach(t),nno=i(jo),Xh=n(jo,"LI",{});var $Me=s(Xh);Loe=n($Me,"STRONG",{});var SVr=s(Loe);sno=r(SVr,"speech_to_text_2"),SVr.forEach(t),lno=r($Me," \u2014 "),sB=n($Me,"A",{href:!0});var RVr=s(sB);ino=r(RVr,"Speech2Text2Processor"),RVr.forEach(t),dno=r($Me," (Speech2Text2 model)"),$Me.forEach(t),cno=i(jo),zh=n(jo,"LI",{});var IMe=s(zh);xoe=n(IMe,"STRONG",{});var BVr=s(xoe);fno=r(BVr,"trocr"),BVr.forEach(t),mno=r(IMe," \u2014 "),lB=n(IMe,"A",{href:!0});var PVr=s(lB);gno=r(PVr,"TrOCRProcessor"),PVr.forEach(t),hno=r(IMe," (TrOCR model)"),IMe.forEach(t),pno=i(jo),Qh=n(jo,"LI",{});var qMe=s(Qh);koe=n(qMe,"STRONG",{});var $Vr=s(koe);_no=r($Vr,"vision-text-dual-encoder"),$Vr.forEach(t),uno=r(qMe," \u2014 "),iB=n(qMe,"A",{href:!0});var IVr=s(iB);bno=r(IVr,"VisionTextDualEncoderProcessor"),IVr.forEach(t),Fno=r(qMe," (VisionTextDualEncoder model)"),qMe.forEach(t),vno=i(jo),Wh=n(jo,"LI",{});var NMe=s(Wh);Soe=n(NMe,"STRONG",{});var qVr=s(Soe);Tno=r(qVr,"wav2vec2"),qVr.forEach(t),Mno=r(NMe," \u2014 "),dB=n(NMe,"A",{href:!0});var NVr=s(dB);Eno=r(NVr,"Wav2Vec2Processor"),NVr.forEach(t),Cno=r(NMe," (Wav2Vec2 model)"),NMe.forEach(t),jo.forEach(t),wno=i(jt),m(Hh.$$.fragment,jt),Ano=i(jt),Roe=n(jt,"P",{});var jVr=s(Roe);yno=r(jVr,"Examples:"),jVr.forEach(t),Lno=i(jt),m(rC.$$.fragment,jt),jt.forEach(t),xno=i(Qs),Uh=n(Qs,"DIV",{class:!0});var GPe=s(Uh);m(tC.$$.fragment,GPe),kno=i(GPe),Boe=n(GPe,"P",{});var DVr=s(Boe);Sno=r(DVr,"Register a new processor for this class."),DVr.forEach(t),GPe.forEach(t),Qs.forEach(t),BRe=i(c),Yi=n(c,"H2",{class:!0});var OPe=s(Yi);Jh=n(OPe,"A",{id:!0,class:!0,href:!0});var GVr=s(Jh);Poe=n(GVr,"SPAN",{});var OVr=s(Poe);m(aC.$$.fragment,OVr),OVr.forEach(t),GVr.forEach(t),Rno=i(OPe),$oe=n(OPe,"SPAN",{});var VVr=s($oe);Bno=r(VVr,"AutoModel"),VVr.forEach(t),OPe.forEach(t),PRe=i(c),Jo=n(c,"DIV",{class:!0});var Ws=s(Jo);m(nC.$$.fragment,Ws),Pno=i(Ws),Ki=n(Ws,"P",{});var pU=s(Ki);$no=r(pU,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),cB=n(pU,"A",{href:!0});var XVr=s(cB);Ino=r(XVr,"from_pretrained()"),XVr.forEach(t),qno=r(pU," class method or the "),fB=n(pU,"A",{href:!0});var zVr=s(fB);Nno=r(zVr,"from_config()"),zVr.forEach(t),jno=r(pU,` class
method.`),pU.forEach(t),Dno=i(Ws),sC=n(Ws,"P",{});var VPe=s(sC);Gno=r(VPe,"This class cannot be instantiated directly using "),Ioe=n(VPe,"CODE",{});var QVr=s(Ioe);Ono=r(QVr,"__init__()"),QVr.forEach(t),Vno=r(VPe," (throws an error)."),VPe.forEach(t),Xno=i(Ws),Xr=n(Ws,"DIV",{class:!0});var Hs=s(Xr);m(lC.$$.fragment,Hs),zno=i(Hs),qoe=n(Hs,"P",{});var WVr=s(qoe);Qno=r(WVr,"Instantiates one of the base model classes of the library from a configuration."),WVr.forEach(t),Wno=i(Hs),Zi=n(Hs,"P",{});var _U=s(Zi);Hno=r(_U,`Note:
Loading a model from its configuration file does `),Noe=n(_U,"STRONG",{});var HVr=s(Noe);Uno=r(HVr,"not"),HVr.forEach(t),Jno=r(_U,` load the model weights. It only affects the
model\u2019s configuration. Use `),mB=n(_U,"A",{href:!0});var UVr=s(mB);Yno=r(UVr,"from_pretrained()"),UVr.forEach(t),Kno=r(_U," to load the model weights."),_U.forEach(t),Zno=i(Hs),joe=n(Hs,"P",{});var JVr=s(joe);eso=r(JVr,"Examples:"),JVr.forEach(t),oso=i(Hs),m(iC.$$.fragment,Hs),Hs.forEach(t),rso=i(Ws),qe=n(Ws,"DIV",{class:!0});var Dt=s(qe);m(dC.$$.fragment,Dt),tso=i(Dt),Doe=n(Dt,"P",{});var YVr=s(Doe);aso=r(YVr,"Instantiate one of the base model classes of the library from a pretrained model."),YVr.forEach(t),nso=i(Dt),Xa=n(Dt,"P",{});var L4=s(Xa);sso=r(L4,"The model class to instantiate is selected based on the "),Goe=n(L4,"CODE",{});var KVr=s(Goe);lso=r(KVr,"model_type"),KVr.forEach(t),iso=r(L4,` property of the config object (either
passed as an argument or loaded from `),Ooe=n(L4,"CODE",{});var ZVr=s(Ooe);dso=r(ZVr,"pretrained_model_name_or_path"),ZVr.forEach(t),cso=r(L4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Voe=n(L4,"CODE",{});var eXr=s(Voe);fso=r(eXr,"pretrained_model_name_or_path"),eXr.forEach(t),mso=r(L4,":"),L4.forEach(t),gso=i(Dt),T=n(Dt,"UL",{});var M=s(T);Yh=n(M,"LI",{});var jMe=s(Yh);Xoe=n(jMe,"STRONG",{});var oXr=s(Xoe);hso=r(oXr,"albert"),oXr.forEach(t),pso=r(jMe," \u2014 "),gB=n(jMe,"A",{href:!0});var rXr=s(gB);_so=r(rXr,"AlbertModel"),rXr.forEach(t),uso=r(jMe," (ALBERT model)"),jMe.forEach(t),bso=i(M),Kh=n(M,"LI",{});var DMe=s(Kh);zoe=n(DMe,"STRONG",{});var tXr=s(zoe);Fso=r(tXr,"bart"),tXr.forEach(t),vso=r(DMe," \u2014 "),hB=n(DMe,"A",{href:!0});var aXr=s(hB);Tso=r(aXr,"BartModel"),aXr.forEach(t),Mso=r(DMe," (BART model)"),DMe.forEach(t),Eso=i(M),Zh=n(M,"LI",{});var GMe=s(Zh);Qoe=n(GMe,"STRONG",{});var nXr=s(Qoe);Cso=r(nXr,"beit"),nXr.forEach(t),wso=r(GMe," \u2014 "),pB=n(GMe,"A",{href:!0});var sXr=s(pB);Aso=r(sXr,"BeitModel"),sXr.forEach(t),yso=r(GMe," (BEiT model)"),GMe.forEach(t),Lso=i(M),ep=n(M,"LI",{});var OMe=s(ep);Woe=n(OMe,"STRONG",{});var lXr=s(Woe);xso=r(lXr,"bert"),lXr.forEach(t),kso=r(OMe," \u2014 "),_B=n(OMe,"A",{href:!0});var iXr=s(_B);Sso=r(iXr,"BertModel"),iXr.forEach(t),Rso=r(OMe," (BERT model)"),OMe.forEach(t),Bso=i(M),op=n(M,"LI",{});var VMe=s(op);Hoe=n(VMe,"STRONG",{});var dXr=s(Hoe);Pso=r(dXr,"bert-generation"),dXr.forEach(t),$so=r(VMe," \u2014 "),uB=n(VMe,"A",{href:!0});var cXr=s(uB);Iso=r(cXr,"BertGenerationEncoder"),cXr.forEach(t),qso=r(VMe," (Bert Generation model)"),VMe.forEach(t),Nso=i(M),rp=n(M,"LI",{});var XMe=s(rp);Uoe=n(XMe,"STRONG",{});var fXr=s(Uoe);jso=r(fXr,"big_bird"),fXr.forEach(t),Dso=r(XMe," \u2014 "),bB=n(XMe,"A",{href:!0});var mXr=s(bB);Gso=r(mXr,"BigBirdModel"),mXr.forEach(t),Oso=r(XMe," (BigBird model)"),XMe.forEach(t),Vso=i(M),tp=n(M,"LI",{});var zMe=s(tp);Joe=n(zMe,"STRONG",{});var gXr=s(Joe);Xso=r(gXr,"bigbird_pegasus"),gXr.forEach(t),zso=r(zMe," \u2014 "),FB=n(zMe,"A",{href:!0});var hXr=s(FB);Qso=r(hXr,"BigBirdPegasusModel"),hXr.forEach(t),Wso=r(zMe," (BigBirdPegasus model)"),zMe.forEach(t),Hso=i(M),ap=n(M,"LI",{});var QMe=s(ap);Yoe=n(QMe,"STRONG",{});var pXr=s(Yoe);Uso=r(pXr,"blenderbot"),pXr.forEach(t),Jso=r(QMe," \u2014 "),vB=n(QMe,"A",{href:!0});var _Xr=s(vB);Yso=r(_Xr,"BlenderbotModel"),_Xr.forEach(t),Kso=r(QMe," (Blenderbot model)"),QMe.forEach(t),Zso=i(M),np=n(M,"LI",{});var WMe=s(np);Koe=n(WMe,"STRONG",{});var uXr=s(Koe);elo=r(uXr,"blenderbot-small"),uXr.forEach(t),olo=r(WMe," \u2014 "),TB=n(WMe,"A",{href:!0});var bXr=s(TB);rlo=r(bXr,"BlenderbotSmallModel"),bXr.forEach(t),tlo=r(WMe," (BlenderbotSmall model)"),WMe.forEach(t),alo=i(M),sp=n(M,"LI",{});var HMe=s(sp);Zoe=n(HMe,"STRONG",{});var FXr=s(Zoe);nlo=r(FXr,"camembert"),FXr.forEach(t),slo=r(HMe," \u2014 "),MB=n(HMe,"A",{href:!0});var vXr=s(MB);llo=r(vXr,"CamembertModel"),vXr.forEach(t),ilo=r(HMe," (CamemBERT model)"),HMe.forEach(t),dlo=i(M),lp=n(M,"LI",{});var UMe=s(lp);ere=n(UMe,"STRONG",{});var TXr=s(ere);clo=r(TXr,"canine"),TXr.forEach(t),flo=r(UMe," \u2014 "),EB=n(UMe,"A",{href:!0});var MXr=s(EB);mlo=r(MXr,"CanineModel"),MXr.forEach(t),glo=r(UMe," (Canine model)"),UMe.forEach(t),hlo=i(M),ip=n(M,"LI",{});var JMe=s(ip);ore=n(JMe,"STRONG",{});var EXr=s(ore);plo=r(EXr,"clip"),EXr.forEach(t),_lo=r(JMe," \u2014 "),CB=n(JMe,"A",{href:!0});var CXr=s(CB);ulo=r(CXr,"CLIPModel"),CXr.forEach(t),blo=r(JMe," (CLIP model)"),JMe.forEach(t),Flo=i(M),dp=n(M,"LI",{});var YMe=s(dp);rre=n(YMe,"STRONG",{});var wXr=s(rre);vlo=r(wXr,"convbert"),wXr.forEach(t),Tlo=r(YMe," \u2014 "),wB=n(YMe,"A",{href:!0});var AXr=s(wB);Mlo=r(AXr,"ConvBertModel"),AXr.forEach(t),Elo=r(YMe," (ConvBERT model)"),YMe.forEach(t),Clo=i(M),cp=n(M,"LI",{});var KMe=s(cp);tre=n(KMe,"STRONG",{});var yXr=s(tre);wlo=r(yXr,"convnext"),yXr.forEach(t),Alo=r(KMe," \u2014 "),AB=n(KMe,"A",{href:!0});var LXr=s(AB);ylo=r(LXr,"ConvNextModel"),LXr.forEach(t),Llo=r(KMe," (ConvNext model)"),KMe.forEach(t),xlo=i(M),fp=n(M,"LI",{});var ZMe=s(fp);are=n(ZMe,"STRONG",{});var xXr=s(are);klo=r(xXr,"ctrl"),xXr.forEach(t),Slo=r(ZMe," \u2014 "),yB=n(ZMe,"A",{href:!0});var kXr=s(yB);Rlo=r(kXr,"CTRLModel"),kXr.forEach(t),Blo=r(ZMe," (CTRL model)"),ZMe.forEach(t),Plo=i(M),mp=n(M,"LI",{});var e4e=s(mp);nre=n(e4e,"STRONG",{});var SXr=s(nre);$lo=r(SXr,"data2vec-audio"),SXr.forEach(t),Ilo=r(e4e," \u2014 "),LB=n(e4e,"A",{href:!0});var RXr=s(LB);qlo=r(RXr,"Data2VecAudioModel"),RXr.forEach(t),Nlo=r(e4e," (Data2VecAudio model)"),e4e.forEach(t),jlo=i(M),gp=n(M,"LI",{});var o4e=s(gp);sre=n(o4e,"STRONG",{});var BXr=s(sre);Dlo=r(BXr,"data2vec-text"),BXr.forEach(t),Glo=r(o4e," \u2014 "),xB=n(o4e,"A",{href:!0});var PXr=s(xB);Olo=r(PXr,"Data2VecTextModel"),PXr.forEach(t),Vlo=r(o4e," (Data2VecText model)"),o4e.forEach(t),Xlo=i(M),hp=n(M,"LI",{});var r4e=s(hp);lre=n(r4e,"STRONG",{});var $Xr=s(lre);zlo=r($Xr,"deberta"),$Xr.forEach(t),Qlo=r(r4e," \u2014 "),kB=n(r4e,"A",{href:!0});var IXr=s(kB);Wlo=r(IXr,"DebertaModel"),IXr.forEach(t),Hlo=r(r4e," (DeBERTa model)"),r4e.forEach(t),Ulo=i(M),pp=n(M,"LI",{});var t4e=s(pp);ire=n(t4e,"STRONG",{});var qXr=s(ire);Jlo=r(qXr,"deberta-v2"),qXr.forEach(t),Ylo=r(t4e," \u2014 "),SB=n(t4e,"A",{href:!0});var NXr=s(SB);Klo=r(NXr,"DebertaV2Model"),NXr.forEach(t),Zlo=r(t4e," (DeBERTa-v2 model)"),t4e.forEach(t),eio=i(M),_p=n(M,"LI",{});var a4e=s(_p);dre=n(a4e,"STRONG",{});var jXr=s(dre);oio=r(jXr,"decision_transformer"),jXr.forEach(t),rio=r(a4e," \u2014 "),RB=n(a4e,"A",{href:!0});var DXr=s(RB);tio=r(DXr,"DecisionTransformerModel"),DXr.forEach(t),aio=r(a4e," (Decision Transformer model)"),a4e.forEach(t),nio=i(M),up=n(M,"LI",{});var n4e=s(up);cre=n(n4e,"STRONG",{});var GXr=s(cre);sio=r(GXr,"deit"),GXr.forEach(t),lio=r(n4e," \u2014 "),BB=n(n4e,"A",{href:!0});var OXr=s(BB);iio=r(OXr,"DeiTModel"),OXr.forEach(t),dio=r(n4e," (DeiT model)"),n4e.forEach(t),cio=i(M),bp=n(M,"LI",{});var s4e=s(bp);fre=n(s4e,"STRONG",{});var VXr=s(fre);fio=r(VXr,"detr"),VXr.forEach(t),mio=r(s4e," \u2014 "),PB=n(s4e,"A",{href:!0});var XXr=s(PB);gio=r(XXr,"DetrModel"),XXr.forEach(t),hio=r(s4e," (DETR model)"),s4e.forEach(t),pio=i(M),Fp=n(M,"LI",{});var l4e=s(Fp);mre=n(l4e,"STRONG",{});var zXr=s(mre);_io=r(zXr,"distilbert"),zXr.forEach(t),uio=r(l4e," \u2014 "),$B=n(l4e,"A",{href:!0});var QXr=s($B);bio=r(QXr,"DistilBertModel"),QXr.forEach(t),Fio=r(l4e," (DistilBERT model)"),l4e.forEach(t),vio=i(M),vp=n(M,"LI",{});var i4e=s(vp);gre=n(i4e,"STRONG",{});var WXr=s(gre);Tio=r(WXr,"dpr"),WXr.forEach(t),Mio=r(i4e," \u2014 "),IB=n(i4e,"A",{href:!0});var HXr=s(IB);Eio=r(HXr,"DPRQuestionEncoder"),HXr.forEach(t),Cio=r(i4e," (DPR model)"),i4e.forEach(t),wio=i(M),Tp=n(M,"LI",{});var d4e=s(Tp);hre=n(d4e,"STRONG",{});var UXr=s(hre);Aio=r(UXr,"dpt"),UXr.forEach(t),yio=r(d4e," \u2014 "),qB=n(d4e,"A",{href:!0});var JXr=s(qB);Lio=r(JXr,"DPTModel"),JXr.forEach(t),xio=r(d4e," (DPT model)"),d4e.forEach(t),kio=i(M),Mp=n(M,"LI",{});var c4e=s(Mp);pre=n(c4e,"STRONG",{});var YXr=s(pre);Sio=r(YXr,"electra"),YXr.forEach(t),Rio=r(c4e," \u2014 "),NB=n(c4e,"A",{href:!0});var KXr=s(NB);Bio=r(KXr,"ElectraModel"),KXr.forEach(t),Pio=r(c4e," (ELECTRA model)"),c4e.forEach(t),$io=i(M),Ep=n(M,"LI",{});var f4e=s(Ep);_re=n(f4e,"STRONG",{});var ZXr=s(_re);Iio=r(ZXr,"flaubert"),ZXr.forEach(t),qio=r(f4e," \u2014 "),jB=n(f4e,"A",{href:!0});var ezr=s(jB);Nio=r(ezr,"FlaubertModel"),ezr.forEach(t),jio=r(f4e," (FlauBERT model)"),f4e.forEach(t),Dio=i(M),Cp=n(M,"LI",{});var m4e=s(Cp);ure=n(m4e,"STRONG",{});var ozr=s(ure);Gio=r(ozr,"fnet"),ozr.forEach(t),Oio=r(m4e," \u2014 "),DB=n(m4e,"A",{href:!0});var rzr=s(DB);Vio=r(rzr,"FNetModel"),rzr.forEach(t),Xio=r(m4e," (FNet model)"),m4e.forEach(t),zio=i(M),wp=n(M,"LI",{});var g4e=s(wp);bre=n(g4e,"STRONG",{});var tzr=s(bre);Qio=r(tzr,"fsmt"),tzr.forEach(t),Wio=r(g4e," \u2014 "),GB=n(g4e,"A",{href:!0});var azr=s(GB);Hio=r(azr,"FSMTModel"),azr.forEach(t),Uio=r(g4e," (FairSeq Machine-Translation model)"),g4e.forEach(t),Jio=i(M),Ds=n(M,"LI",{});var h9=s(Ds);Fre=n(h9,"STRONG",{});var nzr=s(Fre);Yio=r(nzr,"funnel"),nzr.forEach(t),Kio=r(h9," \u2014 "),OB=n(h9,"A",{href:!0});var szr=s(OB);Zio=r(szr,"FunnelModel"),szr.forEach(t),edo=r(h9," or "),VB=n(h9,"A",{href:!0});var lzr=s(VB);odo=r(lzr,"FunnelBaseModel"),lzr.forEach(t),rdo=r(h9," (Funnel Transformer model)"),h9.forEach(t),tdo=i(M),Ap=n(M,"LI",{});var h4e=s(Ap);vre=n(h4e,"STRONG",{});var izr=s(vre);ado=r(izr,"glpn"),izr.forEach(t),ndo=r(h4e," \u2014 "),XB=n(h4e,"A",{href:!0});var dzr=s(XB);sdo=r(dzr,"GLPNModel"),dzr.forEach(t),ldo=r(h4e," (GLPN model)"),h4e.forEach(t),ido=i(M),yp=n(M,"LI",{});var p4e=s(yp);Tre=n(p4e,"STRONG",{});var czr=s(Tre);ddo=r(czr,"gpt2"),czr.forEach(t),cdo=r(p4e," \u2014 "),zB=n(p4e,"A",{href:!0});var fzr=s(zB);fdo=r(fzr,"GPT2Model"),fzr.forEach(t),mdo=r(p4e," (OpenAI GPT-2 model)"),p4e.forEach(t),gdo=i(M),Lp=n(M,"LI",{});var _4e=s(Lp);Mre=n(_4e,"STRONG",{});var mzr=s(Mre);hdo=r(mzr,"gpt_neo"),mzr.forEach(t),pdo=r(_4e," \u2014 "),QB=n(_4e,"A",{href:!0});var gzr=s(QB);_do=r(gzr,"GPTNeoModel"),gzr.forEach(t),udo=r(_4e," (GPT Neo model)"),_4e.forEach(t),bdo=i(M),xp=n(M,"LI",{});var u4e=s(xp);Ere=n(u4e,"STRONG",{});var hzr=s(Ere);Fdo=r(hzr,"gptj"),hzr.forEach(t),vdo=r(u4e," \u2014 "),WB=n(u4e,"A",{href:!0});var pzr=s(WB);Tdo=r(pzr,"GPTJModel"),pzr.forEach(t),Mdo=r(u4e," (GPT-J model)"),u4e.forEach(t),Edo=i(M),kp=n(M,"LI",{});var b4e=s(kp);Cre=n(b4e,"STRONG",{});var _zr=s(Cre);Cdo=r(_zr,"hubert"),_zr.forEach(t),wdo=r(b4e," \u2014 "),HB=n(b4e,"A",{href:!0});var uzr=s(HB);Ado=r(uzr,"HubertModel"),uzr.forEach(t),ydo=r(b4e," (Hubert model)"),b4e.forEach(t),Ldo=i(M),Sp=n(M,"LI",{});var F4e=s(Sp);wre=n(F4e,"STRONG",{});var bzr=s(wre);xdo=r(bzr,"ibert"),bzr.forEach(t),kdo=r(F4e," \u2014 "),UB=n(F4e,"A",{href:!0});var Fzr=s(UB);Sdo=r(Fzr,"IBertModel"),Fzr.forEach(t),Rdo=r(F4e," (I-BERT model)"),F4e.forEach(t),Bdo=i(M),Rp=n(M,"LI",{});var v4e=s(Rp);Are=n(v4e,"STRONG",{});var vzr=s(Are);Pdo=r(vzr,"imagegpt"),vzr.forEach(t),$do=r(v4e," \u2014 "),JB=n(v4e,"A",{href:!0});var Tzr=s(JB);Ido=r(Tzr,"ImageGPTModel"),Tzr.forEach(t),qdo=r(v4e," (ImageGPT model)"),v4e.forEach(t),Ndo=i(M),Bp=n(M,"LI",{});var T4e=s(Bp);yre=n(T4e,"STRONG",{});var Mzr=s(yre);jdo=r(Mzr,"layoutlm"),Mzr.forEach(t),Ddo=r(T4e," \u2014 "),YB=n(T4e,"A",{href:!0});var Ezr=s(YB);Gdo=r(Ezr,"LayoutLMModel"),Ezr.forEach(t),Odo=r(T4e," (LayoutLM model)"),T4e.forEach(t),Vdo=i(M),Pp=n(M,"LI",{});var M4e=s(Pp);Lre=n(M4e,"STRONG",{});var Czr=s(Lre);Xdo=r(Czr,"layoutlmv2"),Czr.forEach(t),zdo=r(M4e," \u2014 "),KB=n(M4e,"A",{href:!0});var wzr=s(KB);Qdo=r(wzr,"LayoutLMv2Model"),wzr.forEach(t),Wdo=r(M4e," (LayoutLMv2 model)"),M4e.forEach(t),Hdo=i(M),$p=n(M,"LI",{});var E4e=s($p);xre=n(E4e,"STRONG",{});var Azr=s(xre);Udo=r(Azr,"led"),Azr.forEach(t),Jdo=r(E4e," \u2014 "),ZB=n(E4e,"A",{href:!0});var yzr=s(ZB);Ydo=r(yzr,"LEDModel"),yzr.forEach(t),Kdo=r(E4e," (LED model)"),E4e.forEach(t),Zdo=i(M),Ip=n(M,"LI",{});var C4e=s(Ip);kre=n(C4e,"STRONG",{});var Lzr=s(kre);eco=r(Lzr,"longformer"),Lzr.forEach(t),oco=r(C4e," \u2014 "),eP=n(C4e,"A",{href:!0});var xzr=s(eP);rco=r(xzr,"LongformerModel"),xzr.forEach(t),tco=r(C4e," (Longformer model)"),C4e.forEach(t),aco=i(M),qp=n(M,"LI",{});var w4e=s(qp);Sre=n(w4e,"STRONG",{});var kzr=s(Sre);nco=r(kzr,"luke"),kzr.forEach(t),sco=r(w4e," \u2014 "),oP=n(w4e,"A",{href:!0});var Szr=s(oP);lco=r(Szr,"LukeModel"),Szr.forEach(t),ico=r(w4e," (LUKE model)"),w4e.forEach(t),dco=i(M),Np=n(M,"LI",{});var A4e=s(Np);Rre=n(A4e,"STRONG",{});var Rzr=s(Rre);cco=r(Rzr,"lxmert"),Rzr.forEach(t),fco=r(A4e," \u2014 "),rP=n(A4e,"A",{href:!0});var Bzr=s(rP);mco=r(Bzr,"LxmertModel"),Bzr.forEach(t),gco=r(A4e," (LXMERT model)"),A4e.forEach(t),hco=i(M),jp=n(M,"LI",{});var y4e=s(jp);Bre=n(y4e,"STRONG",{});var Pzr=s(Bre);pco=r(Pzr,"m2m_100"),Pzr.forEach(t),_co=r(y4e," \u2014 "),tP=n(y4e,"A",{href:!0});var $zr=s(tP);uco=r($zr,"M2M100Model"),$zr.forEach(t),bco=r(y4e," (M2M100 model)"),y4e.forEach(t),Fco=i(M),Dp=n(M,"LI",{});var L4e=s(Dp);Pre=n(L4e,"STRONG",{});var Izr=s(Pre);vco=r(Izr,"marian"),Izr.forEach(t),Tco=r(L4e," \u2014 "),aP=n(L4e,"A",{href:!0});var qzr=s(aP);Mco=r(qzr,"MarianModel"),qzr.forEach(t),Eco=r(L4e," (Marian model)"),L4e.forEach(t),Cco=i(M),Gp=n(M,"LI",{});var x4e=s(Gp);$re=n(x4e,"STRONG",{});var Nzr=s($re);wco=r(Nzr,"maskformer"),Nzr.forEach(t),Aco=r(x4e," \u2014 "),nP=n(x4e,"A",{href:!0});var jzr=s(nP);yco=r(jzr,"MaskFormerModel"),jzr.forEach(t),Lco=r(x4e," (MaskFormer model)"),x4e.forEach(t),xco=i(M),Op=n(M,"LI",{});var k4e=s(Op);Ire=n(k4e,"STRONG",{});var Dzr=s(Ire);kco=r(Dzr,"mbart"),Dzr.forEach(t),Sco=r(k4e," \u2014 "),sP=n(k4e,"A",{href:!0});var Gzr=s(sP);Rco=r(Gzr,"MBartModel"),Gzr.forEach(t),Bco=r(k4e," (mBART model)"),k4e.forEach(t),Pco=i(M),Vp=n(M,"LI",{});var S4e=s(Vp);qre=n(S4e,"STRONG",{});var Ozr=s(qre);$co=r(Ozr,"megatron-bert"),Ozr.forEach(t),Ico=r(S4e," \u2014 "),lP=n(S4e,"A",{href:!0});var Vzr=s(lP);qco=r(Vzr,"MegatronBertModel"),Vzr.forEach(t),Nco=r(S4e," (MegatronBert model)"),S4e.forEach(t),jco=i(M),Xp=n(M,"LI",{});var R4e=s(Xp);Nre=n(R4e,"STRONG",{});var Xzr=s(Nre);Dco=r(Xzr,"mobilebert"),Xzr.forEach(t),Gco=r(R4e," \u2014 "),iP=n(R4e,"A",{href:!0});var zzr=s(iP);Oco=r(zzr,"MobileBertModel"),zzr.forEach(t),Vco=r(R4e," (MobileBERT model)"),R4e.forEach(t),Xco=i(M),zp=n(M,"LI",{});var B4e=s(zp);jre=n(B4e,"STRONG",{});var Qzr=s(jre);zco=r(Qzr,"mpnet"),Qzr.forEach(t),Qco=r(B4e," \u2014 "),dP=n(B4e,"A",{href:!0});var Wzr=s(dP);Wco=r(Wzr,"MPNetModel"),Wzr.forEach(t),Hco=r(B4e," (MPNet model)"),B4e.forEach(t),Uco=i(M),Qp=n(M,"LI",{});var P4e=s(Qp);Dre=n(P4e,"STRONG",{});var Hzr=s(Dre);Jco=r(Hzr,"mt5"),Hzr.forEach(t),Yco=r(P4e," \u2014 "),cP=n(P4e,"A",{href:!0});var Uzr=s(cP);Kco=r(Uzr,"MT5Model"),Uzr.forEach(t),Zco=r(P4e," (mT5 model)"),P4e.forEach(t),efo=i(M),Wp=n(M,"LI",{});var $4e=s(Wp);Gre=n($4e,"STRONG",{});var Jzr=s(Gre);ofo=r(Jzr,"nystromformer"),Jzr.forEach(t),rfo=r($4e," \u2014 "),fP=n($4e,"A",{href:!0});var Yzr=s(fP);tfo=r(Yzr,"NystromformerModel"),Yzr.forEach(t),afo=r($4e," (Nystromformer model)"),$4e.forEach(t),nfo=i(M),Hp=n(M,"LI",{});var I4e=s(Hp);Ore=n(I4e,"STRONG",{});var Kzr=s(Ore);sfo=r(Kzr,"openai-gpt"),Kzr.forEach(t),lfo=r(I4e," \u2014 "),mP=n(I4e,"A",{href:!0});var Zzr=s(mP);ifo=r(Zzr,"OpenAIGPTModel"),Zzr.forEach(t),dfo=r(I4e," (OpenAI GPT model)"),I4e.forEach(t),cfo=i(M),Up=n(M,"LI",{});var q4e=s(Up);Vre=n(q4e,"STRONG",{});var eQr=s(Vre);ffo=r(eQr,"pegasus"),eQr.forEach(t),mfo=r(q4e," \u2014 "),gP=n(q4e,"A",{href:!0});var oQr=s(gP);gfo=r(oQr,"PegasusModel"),oQr.forEach(t),hfo=r(q4e," (Pegasus model)"),q4e.forEach(t),pfo=i(M),Jp=n(M,"LI",{});var N4e=s(Jp);Xre=n(N4e,"STRONG",{});var rQr=s(Xre);_fo=r(rQr,"perceiver"),rQr.forEach(t),ufo=r(N4e," \u2014 "),hP=n(N4e,"A",{href:!0});var tQr=s(hP);bfo=r(tQr,"PerceiverModel"),tQr.forEach(t),Ffo=r(N4e," (Perceiver model)"),N4e.forEach(t),vfo=i(M),Yp=n(M,"LI",{});var j4e=s(Yp);zre=n(j4e,"STRONG",{});var aQr=s(zre);Tfo=r(aQr,"plbart"),aQr.forEach(t),Mfo=r(j4e," \u2014 "),pP=n(j4e,"A",{href:!0});var nQr=s(pP);Efo=r(nQr,"PLBartModel"),nQr.forEach(t),Cfo=r(j4e," (PLBart model)"),j4e.forEach(t),wfo=i(M),Kp=n(M,"LI",{});var D4e=s(Kp);Qre=n(D4e,"STRONG",{});var sQr=s(Qre);Afo=r(sQr,"poolformer"),sQr.forEach(t),yfo=r(D4e," \u2014 "),_P=n(D4e,"A",{href:!0});var lQr=s(_P);Lfo=r(lQr,"PoolFormerModel"),lQr.forEach(t),xfo=r(D4e," (PoolFormer model)"),D4e.forEach(t),kfo=i(M),Zp=n(M,"LI",{});var G4e=s(Zp);Wre=n(G4e,"STRONG",{});var iQr=s(Wre);Sfo=r(iQr,"prophetnet"),iQr.forEach(t),Rfo=r(G4e," \u2014 "),uP=n(G4e,"A",{href:!0});var dQr=s(uP);Bfo=r(dQr,"ProphetNetModel"),dQr.forEach(t),Pfo=r(G4e," (ProphetNet model)"),G4e.forEach(t),$fo=i(M),e_=n(M,"LI",{});var O4e=s(e_);Hre=n(O4e,"STRONG",{});var cQr=s(Hre);Ifo=r(cQr,"qdqbert"),cQr.forEach(t),qfo=r(O4e," \u2014 "),bP=n(O4e,"A",{href:!0});var fQr=s(bP);Nfo=r(fQr,"QDQBertModel"),fQr.forEach(t),jfo=r(O4e," (QDQBert model)"),O4e.forEach(t),Dfo=i(M),o_=n(M,"LI",{});var V4e=s(o_);Ure=n(V4e,"STRONG",{});var mQr=s(Ure);Gfo=r(mQr,"reformer"),mQr.forEach(t),Ofo=r(V4e," \u2014 "),FP=n(V4e,"A",{href:!0});var gQr=s(FP);Vfo=r(gQr,"ReformerModel"),gQr.forEach(t),Xfo=r(V4e," (Reformer model)"),V4e.forEach(t),zfo=i(M),r_=n(M,"LI",{});var X4e=s(r_);Jre=n(X4e,"STRONG",{});var hQr=s(Jre);Qfo=r(hQr,"regnet"),hQr.forEach(t),Wfo=r(X4e," \u2014 "),vP=n(X4e,"A",{href:!0});var pQr=s(vP);Hfo=r(pQr,"RegNetModel"),pQr.forEach(t),Ufo=r(X4e," (RegNet model)"),X4e.forEach(t),Jfo=i(M),t_=n(M,"LI",{});var z4e=s(t_);Yre=n(z4e,"STRONG",{});var _Qr=s(Yre);Yfo=r(_Qr,"rembert"),_Qr.forEach(t),Kfo=r(z4e," \u2014 "),TP=n(z4e,"A",{href:!0});var uQr=s(TP);Zfo=r(uQr,"RemBertModel"),uQr.forEach(t),emo=r(z4e," (RemBERT model)"),z4e.forEach(t),omo=i(M),a_=n(M,"LI",{});var Q4e=s(a_);Kre=n(Q4e,"STRONG",{});var bQr=s(Kre);rmo=r(bQr,"resnet"),bQr.forEach(t),tmo=r(Q4e," \u2014 "),MP=n(Q4e,"A",{href:!0});var FQr=s(MP);amo=r(FQr,"ResNetModel"),FQr.forEach(t),nmo=r(Q4e," (ResNet model)"),Q4e.forEach(t),smo=i(M),n_=n(M,"LI",{});var W4e=s(n_);Zre=n(W4e,"STRONG",{});var vQr=s(Zre);lmo=r(vQr,"retribert"),vQr.forEach(t),imo=r(W4e," \u2014 "),EP=n(W4e,"A",{href:!0});var TQr=s(EP);dmo=r(TQr,"RetriBertModel"),TQr.forEach(t),cmo=r(W4e," (RetriBERT model)"),W4e.forEach(t),fmo=i(M),s_=n(M,"LI",{});var H4e=s(s_);ete=n(H4e,"STRONG",{});var MQr=s(ete);mmo=r(MQr,"roberta"),MQr.forEach(t),gmo=r(H4e," \u2014 "),CP=n(H4e,"A",{href:!0});var EQr=s(CP);hmo=r(EQr,"RobertaModel"),EQr.forEach(t),pmo=r(H4e," (RoBERTa model)"),H4e.forEach(t),_mo=i(M),l_=n(M,"LI",{});var U4e=s(l_);ote=n(U4e,"STRONG",{});var CQr=s(ote);umo=r(CQr,"roformer"),CQr.forEach(t),bmo=r(U4e," \u2014 "),wP=n(U4e,"A",{href:!0});var wQr=s(wP);Fmo=r(wQr,"RoFormerModel"),wQr.forEach(t),vmo=r(U4e," (RoFormer model)"),U4e.forEach(t),Tmo=i(M),i_=n(M,"LI",{});var J4e=s(i_);rte=n(J4e,"STRONG",{});var AQr=s(rte);Mmo=r(AQr,"segformer"),AQr.forEach(t),Emo=r(J4e," \u2014 "),AP=n(J4e,"A",{href:!0});var yQr=s(AP);Cmo=r(yQr,"SegformerModel"),yQr.forEach(t),wmo=r(J4e," (SegFormer model)"),J4e.forEach(t),Amo=i(M),d_=n(M,"LI",{});var Y4e=s(d_);tte=n(Y4e,"STRONG",{});var LQr=s(tte);ymo=r(LQr,"sew"),LQr.forEach(t),Lmo=r(Y4e," \u2014 "),yP=n(Y4e,"A",{href:!0});var xQr=s(yP);xmo=r(xQr,"SEWModel"),xQr.forEach(t),kmo=r(Y4e," (SEW model)"),Y4e.forEach(t),Smo=i(M),c_=n(M,"LI",{});var K4e=s(c_);ate=n(K4e,"STRONG",{});var kQr=s(ate);Rmo=r(kQr,"sew-d"),kQr.forEach(t),Bmo=r(K4e," \u2014 "),LP=n(K4e,"A",{href:!0});var SQr=s(LP);Pmo=r(SQr,"SEWDModel"),SQr.forEach(t),$mo=r(K4e," (SEW-D model)"),K4e.forEach(t),Imo=i(M),f_=n(M,"LI",{});var Z4e=s(f_);nte=n(Z4e,"STRONG",{});var RQr=s(nte);qmo=r(RQr,"speech_to_text"),RQr.forEach(t),Nmo=r(Z4e," \u2014 "),xP=n(Z4e,"A",{href:!0});var BQr=s(xP);jmo=r(BQr,"Speech2TextModel"),BQr.forEach(t),Dmo=r(Z4e," (Speech2Text model)"),Z4e.forEach(t),Gmo=i(M),m_=n(M,"LI",{});var eEe=s(m_);ste=n(eEe,"STRONG",{});var PQr=s(ste);Omo=r(PQr,"splinter"),PQr.forEach(t),Vmo=r(eEe," \u2014 "),kP=n(eEe,"A",{href:!0});var $Qr=s(kP);Xmo=r($Qr,"SplinterModel"),$Qr.forEach(t),zmo=r(eEe," (Splinter model)"),eEe.forEach(t),Qmo=i(M),g_=n(M,"LI",{});var oEe=s(g_);lte=n(oEe,"STRONG",{});var IQr=s(lte);Wmo=r(IQr,"squeezebert"),IQr.forEach(t),Hmo=r(oEe," \u2014 "),SP=n(oEe,"A",{href:!0});var qQr=s(SP);Umo=r(qQr,"SqueezeBertModel"),qQr.forEach(t),Jmo=r(oEe," (SqueezeBERT model)"),oEe.forEach(t),Ymo=i(M),h_=n(M,"LI",{});var rEe=s(h_);ite=n(rEe,"STRONG",{});var NQr=s(ite);Kmo=r(NQr,"swin"),NQr.forEach(t),Zmo=r(rEe," \u2014 "),RP=n(rEe,"A",{href:!0});var jQr=s(RP);ego=r(jQr,"SwinModel"),jQr.forEach(t),ogo=r(rEe," (Swin model)"),rEe.forEach(t),rgo=i(M),p_=n(M,"LI",{});var tEe=s(p_);dte=n(tEe,"STRONG",{});var DQr=s(dte);tgo=r(DQr,"t5"),DQr.forEach(t),ago=r(tEe," \u2014 "),BP=n(tEe,"A",{href:!0});var GQr=s(BP);ngo=r(GQr,"T5Model"),GQr.forEach(t),sgo=r(tEe," (T5 model)"),tEe.forEach(t),lgo=i(M),__=n(M,"LI",{});var aEe=s(__);cte=n(aEe,"STRONG",{});var OQr=s(cte);igo=r(OQr,"tapas"),OQr.forEach(t),dgo=r(aEe," \u2014 "),PP=n(aEe,"A",{href:!0});var VQr=s(PP);cgo=r(VQr,"TapasModel"),VQr.forEach(t),fgo=r(aEe," (TAPAS model)"),aEe.forEach(t),mgo=i(M),u_=n(M,"LI",{});var nEe=s(u_);fte=n(nEe,"STRONG",{});var XQr=s(fte);ggo=r(XQr,"transfo-xl"),XQr.forEach(t),hgo=r(nEe," \u2014 "),$P=n(nEe,"A",{href:!0});var zQr=s($P);pgo=r(zQr,"TransfoXLModel"),zQr.forEach(t),_go=r(nEe," (Transformer-XL model)"),nEe.forEach(t),ugo=i(M),b_=n(M,"LI",{});var sEe=s(b_);mte=n(sEe,"STRONG",{});var QQr=s(mte);bgo=r(QQr,"unispeech"),QQr.forEach(t),Fgo=r(sEe," \u2014 "),IP=n(sEe,"A",{href:!0});var WQr=s(IP);vgo=r(WQr,"UniSpeechModel"),WQr.forEach(t),Tgo=r(sEe," (UniSpeech model)"),sEe.forEach(t),Mgo=i(M),F_=n(M,"LI",{});var lEe=s(F_);gte=n(lEe,"STRONG",{});var HQr=s(gte);Ego=r(HQr,"unispeech-sat"),HQr.forEach(t),Cgo=r(lEe," \u2014 "),qP=n(lEe,"A",{href:!0});var UQr=s(qP);wgo=r(UQr,"UniSpeechSatModel"),UQr.forEach(t),Ago=r(lEe," (UniSpeechSat model)"),lEe.forEach(t),ygo=i(M),v_=n(M,"LI",{});var iEe=s(v_);hte=n(iEe,"STRONG",{});var JQr=s(hte);Lgo=r(JQr,"van"),JQr.forEach(t),xgo=r(iEe," \u2014 "),NP=n(iEe,"A",{href:!0});var YQr=s(NP);kgo=r(YQr,"VanModel"),YQr.forEach(t),Sgo=r(iEe," (VAN model)"),iEe.forEach(t),Rgo=i(M),T_=n(M,"LI",{});var dEe=s(T_);pte=n(dEe,"STRONG",{});var KQr=s(pte);Bgo=r(KQr,"vilt"),KQr.forEach(t),Pgo=r(dEe," \u2014 "),jP=n(dEe,"A",{href:!0});var ZQr=s(jP);$go=r(ZQr,"ViltModel"),ZQr.forEach(t),Igo=r(dEe," (ViLT model)"),dEe.forEach(t),qgo=i(M),M_=n(M,"LI",{});var cEe=s(M_);_te=n(cEe,"STRONG",{});var eWr=s(_te);Ngo=r(eWr,"vision-text-dual-encoder"),eWr.forEach(t),jgo=r(cEe," \u2014 "),DP=n(cEe,"A",{href:!0});var oWr=s(DP);Dgo=r(oWr,"VisionTextDualEncoderModel"),oWr.forEach(t),Ggo=r(cEe," (VisionTextDualEncoder model)"),cEe.forEach(t),Ogo=i(M),E_=n(M,"LI",{});var fEe=s(E_);ute=n(fEe,"STRONG",{});var rWr=s(ute);Vgo=r(rWr,"visual_bert"),rWr.forEach(t),Xgo=r(fEe," \u2014 "),GP=n(fEe,"A",{href:!0});var tWr=s(GP);zgo=r(tWr,"VisualBertModel"),tWr.forEach(t),Qgo=r(fEe," (VisualBert model)"),fEe.forEach(t),Wgo=i(M),C_=n(M,"LI",{});var mEe=s(C_);bte=n(mEe,"STRONG",{});var aWr=s(bte);Hgo=r(aWr,"vit"),aWr.forEach(t),Ugo=r(mEe," \u2014 "),OP=n(mEe,"A",{href:!0});var nWr=s(OP);Jgo=r(nWr,"ViTModel"),nWr.forEach(t),Ygo=r(mEe," (ViT model)"),mEe.forEach(t),Kgo=i(M),w_=n(M,"LI",{});var gEe=s(w_);Fte=n(gEe,"STRONG",{});var sWr=s(Fte);Zgo=r(sWr,"vit_mae"),sWr.forEach(t),eho=r(gEe," \u2014 "),VP=n(gEe,"A",{href:!0});var lWr=s(VP);oho=r(lWr,"ViTMAEModel"),lWr.forEach(t),rho=r(gEe," (ViTMAE model)"),gEe.forEach(t),tho=i(M),A_=n(M,"LI",{});var hEe=s(A_);vte=n(hEe,"STRONG",{});var iWr=s(vte);aho=r(iWr,"wav2vec2"),iWr.forEach(t),nho=r(hEe," \u2014 "),XP=n(hEe,"A",{href:!0});var dWr=s(XP);sho=r(dWr,"Wav2Vec2Model"),dWr.forEach(t),lho=r(hEe," (Wav2Vec2 model)"),hEe.forEach(t),iho=i(M),y_=n(M,"LI",{});var pEe=s(y_);Tte=n(pEe,"STRONG",{});var cWr=s(Tte);dho=r(cWr,"wavlm"),cWr.forEach(t),cho=r(pEe," \u2014 "),zP=n(pEe,"A",{href:!0});var fWr=s(zP);fho=r(fWr,"WavLMModel"),fWr.forEach(t),mho=r(pEe," (WavLM model)"),pEe.forEach(t),gho=i(M),L_=n(M,"LI",{});var _Ee=s(L_);Mte=n(_Ee,"STRONG",{});var mWr=s(Mte);hho=r(mWr,"xglm"),mWr.forEach(t),pho=r(_Ee," \u2014 "),QP=n(_Ee,"A",{href:!0});var gWr=s(QP);_ho=r(gWr,"XGLMModel"),gWr.forEach(t),uho=r(_Ee," (XGLM model)"),_Ee.forEach(t),bho=i(M),x_=n(M,"LI",{});var uEe=s(x_);Ete=n(uEe,"STRONG",{});var hWr=s(Ete);Fho=r(hWr,"xlm"),hWr.forEach(t),vho=r(uEe," \u2014 "),WP=n(uEe,"A",{href:!0});var pWr=s(WP);Tho=r(pWr,"XLMModel"),pWr.forEach(t),Mho=r(uEe," (XLM model)"),uEe.forEach(t),Eho=i(M),k_=n(M,"LI",{});var bEe=s(k_);Cte=n(bEe,"STRONG",{});var _Wr=s(Cte);Cho=r(_Wr,"xlm-prophetnet"),_Wr.forEach(t),who=r(bEe," \u2014 "),HP=n(bEe,"A",{href:!0});var uWr=s(HP);Aho=r(uWr,"XLMProphetNetModel"),uWr.forEach(t),yho=r(bEe," (XLMProphetNet model)"),bEe.forEach(t),Lho=i(M),S_=n(M,"LI",{});var FEe=s(S_);wte=n(FEe,"STRONG",{});var bWr=s(wte);xho=r(bWr,"xlm-roberta"),bWr.forEach(t),kho=r(FEe," \u2014 "),UP=n(FEe,"A",{href:!0});var FWr=s(UP);Sho=r(FWr,"XLMRobertaModel"),FWr.forEach(t),Rho=r(FEe," (XLM-RoBERTa model)"),FEe.forEach(t),Bho=i(M),R_=n(M,"LI",{});var vEe=s(R_);Ate=n(vEe,"STRONG",{});var vWr=s(Ate);Pho=r(vWr,"xlm-roberta-xl"),vWr.forEach(t),$ho=r(vEe," \u2014 "),JP=n(vEe,"A",{href:!0});var TWr=s(JP);Iho=r(TWr,"XLMRobertaXLModel"),TWr.forEach(t),qho=r(vEe," (XLM-RoBERTa-XL model)"),vEe.forEach(t),Nho=i(M),B_=n(M,"LI",{});var TEe=s(B_);yte=n(TEe,"STRONG",{});var MWr=s(yte);jho=r(MWr,"xlnet"),MWr.forEach(t),Dho=r(TEe," \u2014 "),YP=n(TEe,"A",{href:!0});var EWr=s(YP);Gho=r(EWr,"XLNetModel"),EWr.forEach(t),Oho=r(TEe," (XLNet model)"),TEe.forEach(t),Vho=i(M),P_=n(M,"LI",{});var MEe=s(P_);Lte=n(MEe,"STRONG",{});var CWr=s(Lte);Xho=r(CWr,"yoso"),CWr.forEach(t),zho=r(MEe," \u2014 "),KP=n(MEe,"A",{href:!0});var wWr=s(KP);Qho=r(wWr,"YosoModel"),wWr.forEach(t),Who=r(MEe," (YOSO model)"),MEe.forEach(t),M.forEach(t),Hho=i(Dt),$_=n(Dt,"P",{});var EEe=s($_);Uho=r(EEe,"The model is set in evaluation mode by default using "),xte=n(EEe,"CODE",{});var AWr=s(xte);Jho=r(AWr,"model.eval()"),AWr.forEach(t),Yho=r(EEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kte=n(EEe,"CODE",{});var yWr=s(kte);Kho=r(yWr,"model.train()"),yWr.forEach(t),EEe.forEach(t),Zho=i(Dt),Ste=n(Dt,"P",{});var LWr=s(Ste);epo=r(LWr,"Examples:"),LWr.forEach(t),opo=i(Dt),m(cC.$$.fragment,Dt),Dt.forEach(t),Ws.forEach(t),$Re=i(c),ed=n(c,"H2",{class:!0});var XPe=s(ed);I_=n(XPe,"A",{id:!0,class:!0,href:!0});var xWr=s(I_);Rte=n(xWr,"SPAN",{});var kWr=s(Rte);m(fC.$$.fragment,kWr),kWr.forEach(t),xWr.forEach(t),rpo=i(XPe),Bte=n(XPe,"SPAN",{});var SWr=s(Bte);tpo=r(SWr,"AutoModelForPreTraining"),SWr.forEach(t),XPe.forEach(t),IRe=i(c),Yo=n(c,"DIV",{class:!0});var Us=s(Yo);m(mC.$$.fragment,Us),apo=i(Us),od=n(Us,"P",{});var uU=s(od);npo=r(uU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),ZP=n(uU,"A",{href:!0});var RWr=s(ZP);spo=r(RWr,"from_pretrained()"),RWr.forEach(t),lpo=r(uU," class method or the "),e$=n(uU,"A",{href:!0});var BWr=s(e$);ipo=r(BWr,"from_config()"),BWr.forEach(t),dpo=r(uU,` class
method.`),uU.forEach(t),cpo=i(Us),gC=n(Us,"P",{});var zPe=s(gC);fpo=r(zPe,"This class cannot be instantiated directly using "),Pte=n(zPe,"CODE",{});var PWr=s(Pte);mpo=r(PWr,"__init__()"),PWr.forEach(t),gpo=r(zPe," (throws an error)."),zPe.forEach(t),hpo=i(Us),zr=n(Us,"DIV",{class:!0});var Js=s(zr);m(hC.$$.fragment,Js),ppo=i(Js),$te=n(Js,"P",{});var $Wr=s($te);_po=r($Wr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),$Wr.forEach(t),upo=i(Js),rd=n(Js,"P",{});var bU=s(rd);bpo=r(bU,`Note:
Loading a model from its configuration file does `),Ite=n(bU,"STRONG",{});var IWr=s(Ite);Fpo=r(IWr,"not"),IWr.forEach(t),vpo=r(bU,` load the model weights. It only affects the
model\u2019s configuration. Use `),o$=n(bU,"A",{href:!0});var qWr=s(o$);Tpo=r(qWr,"from_pretrained()"),qWr.forEach(t),Mpo=r(bU," to load the model weights."),bU.forEach(t),Epo=i(Js),qte=n(Js,"P",{});var NWr=s(qte);Cpo=r(NWr,"Examples:"),NWr.forEach(t),wpo=i(Js),m(pC.$$.fragment,Js),Js.forEach(t),Apo=i(Us),Ne=n(Us,"DIV",{class:!0});var Gt=s(Ne);m(_C.$$.fragment,Gt),ypo=i(Gt),Nte=n(Gt,"P",{});var jWr=s(Nte);Lpo=r(jWr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),jWr.forEach(t),xpo=i(Gt),za=n(Gt,"P",{});var x4=s(za);kpo=r(x4,"The model class to instantiate is selected based on the "),jte=n(x4,"CODE",{});var DWr=s(jte);Spo=r(DWr,"model_type"),DWr.forEach(t),Rpo=r(x4,` property of the config object (either
passed as an argument or loaded from `),Dte=n(x4,"CODE",{});var GWr=s(Dte);Bpo=r(GWr,"pretrained_model_name_or_path"),GWr.forEach(t),Ppo=r(x4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gte=n(x4,"CODE",{});var OWr=s(Gte);$po=r(OWr,"pretrained_model_name_or_path"),OWr.forEach(t),Ipo=r(x4,":"),x4.forEach(t),qpo=i(Gt),S=n(Gt,"UL",{});var B=s(S);q_=n(B,"LI",{});var CEe=s(q_);Ote=n(CEe,"STRONG",{});var VWr=s(Ote);Npo=r(VWr,"albert"),VWr.forEach(t),jpo=r(CEe," \u2014 "),r$=n(CEe,"A",{href:!0});var XWr=s(r$);Dpo=r(XWr,"AlbertForPreTraining"),XWr.forEach(t),Gpo=r(CEe," (ALBERT model)"),CEe.forEach(t),Opo=i(B),N_=n(B,"LI",{});var wEe=s(N_);Vte=n(wEe,"STRONG",{});var zWr=s(Vte);Vpo=r(zWr,"bart"),zWr.forEach(t),Xpo=r(wEe," \u2014 "),t$=n(wEe,"A",{href:!0});var QWr=s(t$);zpo=r(QWr,"BartForConditionalGeneration"),QWr.forEach(t),Qpo=r(wEe," (BART model)"),wEe.forEach(t),Wpo=i(B),j_=n(B,"LI",{});var AEe=s(j_);Xte=n(AEe,"STRONG",{});var WWr=s(Xte);Hpo=r(WWr,"bert"),WWr.forEach(t),Upo=r(AEe," \u2014 "),a$=n(AEe,"A",{href:!0});var HWr=s(a$);Jpo=r(HWr,"BertForPreTraining"),HWr.forEach(t),Ypo=r(AEe," (BERT model)"),AEe.forEach(t),Kpo=i(B),D_=n(B,"LI",{});var yEe=s(D_);zte=n(yEe,"STRONG",{});var UWr=s(zte);Zpo=r(UWr,"big_bird"),UWr.forEach(t),e_o=r(yEe," \u2014 "),n$=n(yEe,"A",{href:!0});var JWr=s(n$);o_o=r(JWr,"BigBirdForPreTraining"),JWr.forEach(t),r_o=r(yEe," (BigBird model)"),yEe.forEach(t),t_o=i(B),G_=n(B,"LI",{});var LEe=s(G_);Qte=n(LEe,"STRONG",{});var YWr=s(Qte);a_o=r(YWr,"camembert"),YWr.forEach(t),n_o=r(LEe," \u2014 "),s$=n(LEe,"A",{href:!0});var KWr=s(s$);s_o=r(KWr,"CamembertForMaskedLM"),KWr.forEach(t),l_o=r(LEe," (CamemBERT model)"),LEe.forEach(t),i_o=i(B),O_=n(B,"LI",{});var xEe=s(O_);Wte=n(xEe,"STRONG",{});var ZWr=s(Wte);d_o=r(ZWr,"ctrl"),ZWr.forEach(t),c_o=r(xEe," \u2014 "),l$=n(xEe,"A",{href:!0});var eHr=s(l$);f_o=r(eHr,"CTRLLMHeadModel"),eHr.forEach(t),m_o=r(xEe," (CTRL model)"),xEe.forEach(t),g_o=i(B),V_=n(B,"LI",{});var kEe=s(V_);Hte=n(kEe,"STRONG",{});var oHr=s(Hte);h_o=r(oHr,"data2vec-text"),oHr.forEach(t),p_o=r(kEe," \u2014 "),i$=n(kEe,"A",{href:!0});var rHr=s(i$);__o=r(rHr,"Data2VecTextForMaskedLM"),rHr.forEach(t),u_o=r(kEe," (Data2VecText model)"),kEe.forEach(t),b_o=i(B),X_=n(B,"LI",{});var SEe=s(X_);Ute=n(SEe,"STRONG",{});var tHr=s(Ute);F_o=r(tHr,"deberta"),tHr.forEach(t),v_o=r(SEe," \u2014 "),d$=n(SEe,"A",{href:!0});var aHr=s(d$);T_o=r(aHr,"DebertaForMaskedLM"),aHr.forEach(t),M_o=r(SEe," (DeBERTa model)"),SEe.forEach(t),E_o=i(B),z_=n(B,"LI",{});var REe=s(z_);Jte=n(REe,"STRONG",{});var nHr=s(Jte);C_o=r(nHr,"deberta-v2"),nHr.forEach(t),w_o=r(REe," \u2014 "),c$=n(REe,"A",{href:!0});var sHr=s(c$);A_o=r(sHr,"DebertaV2ForMaskedLM"),sHr.forEach(t),y_o=r(REe," (DeBERTa-v2 model)"),REe.forEach(t),L_o=i(B),Q_=n(B,"LI",{});var BEe=s(Q_);Yte=n(BEe,"STRONG",{});var lHr=s(Yte);x_o=r(lHr,"distilbert"),lHr.forEach(t),k_o=r(BEe," \u2014 "),f$=n(BEe,"A",{href:!0});var iHr=s(f$);S_o=r(iHr,"DistilBertForMaskedLM"),iHr.forEach(t),R_o=r(BEe," (DistilBERT model)"),BEe.forEach(t),B_o=i(B),W_=n(B,"LI",{});var PEe=s(W_);Kte=n(PEe,"STRONG",{});var dHr=s(Kte);P_o=r(dHr,"electra"),dHr.forEach(t),$_o=r(PEe," \u2014 "),m$=n(PEe,"A",{href:!0});var cHr=s(m$);I_o=r(cHr,"ElectraForPreTraining"),cHr.forEach(t),q_o=r(PEe," (ELECTRA model)"),PEe.forEach(t),N_o=i(B),H_=n(B,"LI",{});var $Ee=s(H_);Zte=n($Ee,"STRONG",{});var fHr=s(Zte);j_o=r(fHr,"flaubert"),fHr.forEach(t),D_o=r($Ee," \u2014 "),g$=n($Ee,"A",{href:!0});var mHr=s(g$);G_o=r(mHr,"FlaubertWithLMHeadModel"),mHr.forEach(t),O_o=r($Ee," (FlauBERT model)"),$Ee.forEach(t),V_o=i(B),U_=n(B,"LI",{});var IEe=s(U_);eae=n(IEe,"STRONG",{});var gHr=s(eae);X_o=r(gHr,"fnet"),gHr.forEach(t),z_o=r(IEe," \u2014 "),h$=n(IEe,"A",{href:!0});var hHr=s(h$);Q_o=r(hHr,"FNetForPreTraining"),hHr.forEach(t),W_o=r(IEe," (FNet model)"),IEe.forEach(t),H_o=i(B),J_=n(B,"LI",{});var qEe=s(J_);oae=n(qEe,"STRONG",{});var pHr=s(oae);U_o=r(pHr,"fsmt"),pHr.forEach(t),J_o=r(qEe," \u2014 "),p$=n(qEe,"A",{href:!0});var _Hr=s(p$);Y_o=r(_Hr,"FSMTForConditionalGeneration"),_Hr.forEach(t),K_o=r(qEe," (FairSeq Machine-Translation model)"),qEe.forEach(t),Z_o=i(B),Y_=n(B,"LI",{});var NEe=s(Y_);rae=n(NEe,"STRONG",{});var uHr=s(rae);euo=r(uHr,"funnel"),uHr.forEach(t),ouo=r(NEe," \u2014 "),_$=n(NEe,"A",{href:!0});var bHr=s(_$);ruo=r(bHr,"FunnelForPreTraining"),bHr.forEach(t),tuo=r(NEe," (Funnel Transformer model)"),NEe.forEach(t),auo=i(B),K_=n(B,"LI",{});var jEe=s(K_);tae=n(jEe,"STRONG",{});var FHr=s(tae);nuo=r(FHr,"gpt2"),FHr.forEach(t),suo=r(jEe," \u2014 "),u$=n(jEe,"A",{href:!0});var vHr=s(u$);luo=r(vHr,"GPT2LMHeadModel"),vHr.forEach(t),iuo=r(jEe," (OpenAI GPT-2 model)"),jEe.forEach(t),duo=i(B),Z_=n(B,"LI",{});var DEe=s(Z_);aae=n(DEe,"STRONG",{});var THr=s(aae);cuo=r(THr,"ibert"),THr.forEach(t),fuo=r(DEe," \u2014 "),b$=n(DEe,"A",{href:!0});var MHr=s(b$);muo=r(MHr,"IBertForMaskedLM"),MHr.forEach(t),guo=r(DEe," (I-BERT model)"),DEe.forEach(t),huo=i(B),eu=n(B,"LI",{});var GEe=s(eu);nae=n(GEe,"STRONG",{});var EHr=s(nae);puo=r(EHr,"layoutlm"),EHr.forEach(t),_uo=r(GEe," \u2014 "),F$=n(GEe,"A",{href:!0});var CHr=s(F$);uuo=r(CHr,"LayoutLMForMaskedLM"),CHr.forEach(t),buo=r(GEe," (LayoutLM model)"),GEe.forEach(t),Fuo=i(B),ou=n(B,"LI",{});var OEe=s(ou);sae=n(OEe,"STRONG",{});var wHr=s(sae);vuo=r(wHr,"longformer"),wHr.forEach(t),Tuo=r(OEe," \u2014 "),v$=n(OEe,"A",{href:!0});var AHr=s(v$);Muo=r(AHr,"LongformerForMaskedLM"),AHr.forEach(t),Euo=r(OEe," (Longformer model)"),OEe.forEach(t),Cuo=i(B),ru=n(B,"LI",{});var VEe=s(ru);lae=n(VEe,"STRONG",{});var yHr=s(lae);wuo=r(yHr,"lxmert"),yHr.forEach(t),Auo=r(VEe," \u2014 "),T$=n(VEe,"A",{href:!0});var LHr=s(T$);yuo=r(LHr,"LxmertForPreTraining"),LHr.forEach(t),Luo=r(VEe," (LXMERT model)"),VEe.forEach(t),xuo=i(B),tu=n(B,"LI",{});var XEe=s(tu);iae=n(XEe,"STRONG",{});var xHr=s(iae);kuo=r(xHr,"megatron-bert"),xHr.forEach(t),Suo=r(XEe," \u2014 "),M$=n(XEe,"A",{href:!0});var kHr=s(M$);Ruo=r(kHr,"MegatronBertForPreTraining"),kHr.forEach(t),Buo=r(XEe," (MegatronBert model)"),XEe.forEach(t),Puo=i(B),au=n(B,"LI",{});var zEe=s(au);dae=n(zEe,"STRONG",{});var SHr=s(dae);$uo=r(SHr,"mobilebert"),SHr.forEach(t),Iuo=r(zEe," \u2014 "),E$=n(zEe,"A",{href:!0});var RHr=s(E$);quo=r(RHr,"MobileBertForPreTraining"),RHr.forEach(t),Nuo=r(zEe," (MobileBERT model)"),zEe.forEach(t),juo=i(B),nu=n(B,"LI",{});var QEe=s(nu);cae=n(QEe,"STRONG",{});var BHr=s(cae);Duo=r(BHr,"mpnet"),BHr.forEach(t),Guo=r(QEe," \u2014 "),C$=n(QEe,"A",{href:!0});var PHr=s(C$);Ouo=r(PHr,"MPNetForMaskedLM"),PHr.forEach(t),Vuo=r(QEe," (MPNet model)"),QEe.forEach(t),Xuo=i(B),su=n(B,"LI",{});var WEe=s(su);fae=n(WEe,"STRONG",{});var $Hr=s(fae);zuo=r($Hr,"openai-gpt"),$Hr.forEach(t),Quo=r(WEe," \u2014 "),w$=n(WEe,"A",{href:!0});var IHr=s(w$);Wuo=r(IHr,"OpenAIGPTLMHeadModel"),IHr.forEach(t),Huo=r(WEe," (OpenAI GPT model)"),WEe.forEach(t),Uuo=i(B),lu=n(B,"LI",{});var HEe=s(lu);mae=n(HEe,"STRONG",{});var qHr=s(mae);Juo=r(qHr,"retribert"),qHr.forEach(t),Yuo=r(HEe," \u2014 "),A$=n(HEe,"A",{href:!0});var NHr=s(A$);Kuo=r(NHr,"RetriBertModel"),NHr.forEach(t),Zuo=r(HEe," (RetriBERT model)"),HEe.forEach(t),e1o=i(B),iu=n(B,"LI",{});var UEe=s(iu);gae=n(UEe,"STRONG",{});var jHr=s(gae);o1o=r(jHr,"roberta"),jHr.forEach(t),r1o=r(UEe," \u2014 "),y$=n(UEe,"A",{href:!0});var DHr=s(y$);t1o=r(DHr,"RobertaForMaskedLM"),DHr.forEach(t),a1o=r(UEe," (RoBERTa model)"),UEe.forEach(t),n1o=i(B),du=n(B,"LI",{});var JEe=s(du);hae=n(JEe,"STRONG",{});var GHr=s(hae);s1o=r(GHr,"squeezebert"),GHr.forEach(t),l1o=r(JEe," \u2014 "),L$=n(JEe,"A",{href:!0});var OHr=s(L$);i1o=r(OHr,"SqueezeBertForMaskedLM"),OHr.forEach(t),d1o=r(JEe," (SqueezeBERT model)"),JEe.forEach(t),c1o=i(B),cu=n(B,"LI",{});var YEe=s(cu);pae=n(YEe,"STRONG",{});var VHr=s(pae);f1o=r(VHr,"t5"),VHr.forEach(t),m1o=r(YEe," \u2014 "),x$=n(YEe,"A",{href:!0});var XHr=s(x$);g1o=r(XHr,"T5ForConditionalGeneration"),XHr.forEach(t),h1o=r(YEe," (T5 model)"),YEe.forEach(t),p1o=i(B),fu=n(B,"LI",{});var KEe=s(fu);_ae=n(KEe,"STRONG",{});var zHr=s(_ae);_1o=r(zHr,"tapas"),zHr.forEach(t),u1o=r(KEe," \u2014 "),k$=n(KEe,"A",{href:!0});var QHr=s(k$);b1o=r(QHr,"TapasForMaskedLM"),QHr.forEach(t),F1o=r(KEe," (TAPAS model)"),KEe.forEach(t),v1o=i(B),mu=n(B,"LI",{});var ZEe=s(mu);uae=n(ZEe,"STRONG",{});var WHr=s(uae);T1o=r(WHr,"transfo-xl"),WHr.forEach(t),M1o=r(ZEe," \u2014 "),S$=n(ZEe,"A",{href:!0});var HHr=s(S$);E1o=r(HHr,"TransfoXLLMHeadModel"),HHr.forEach(t),C1o=r(ZEe," (Transformer-XL model)"),ZEe.forEach(t),w1o=i(B),gu=n(B,"LI",{});var eCe=s(gu);bae=n(eCe,"STRONG",{});var UHr=s(bae);A1o=r(UHr,"unispeech"),UHr.forEach(t),y1o=r(eCe," \u2014 "),R$=n(eCe,"A",{href:!0});var JHr=s(R$);L1o=r(JHr,"UniSpeechForPreTraining"),JHr.forEach(t),x1o=r(eCe," (UniSpeech model)"),eCe.forEach(t),k1o=i(B),hu=n(B,"LI",{});var oCe=s(hu);Fae=n(oCe,"STRONG",{});var YHr=s(Fae);S1o=r(YHr,"unispeech-sat"),YHr.forEach(t),R1o=r(oCe," \u2014 "),B$=n(oCe,"A",{href:!0});var KHr=s(B$);B1o=r(KHr,"UniSpeechSatForPreTraining"),KHr.forEach(t),P1o=r(oCe," (UniSpeechSat model)"),oCe.forEach(t),$1o=i(B),pu=n(B,"LI",{});var rCe=s(pu);vae=n(rCe,"STRONG",{});var ZHr=s(vae);I1o=r(ZHr,"visual_bert"),ZHr.forEach(t),q1o=r(rCe," \u2014 "),P$=n(rCe,"A",{href:!0});var eUr=s(P$);N1o=r(eUr,"VisualBertForPreTraining"),eUr.forEach(t),j1o=r(rCe," (VisualBert model)"),rCe.forEach(t),D1o=i(B),_u=n(B,"LI",{});var tCe=s(_u);Tae=n(tCe,"STRONG",{});var oUr=s(Tae);G1o=r(oUr,"vit_mae"),oUr.forEach(t),O1o=r(tCe," \u2014 "),$$=n(tCe,"A",{href:!0});var rUr=s($$);V1o=r(rUr,"ViTMAEForPreTraining"),rUr.forEach(t),X1o=r(tCe," (ViTMAE model)"),tCe.forEach(t),z1o=i(B),uu=n(B,"LI",{});var aCe=s(uu);Mae=n(aCe,"STRONG",{});var tUr=s(Mae);Q1o=r(tUr,"wav2vec2"),tUr.forEach(t),W1o=r(aCe," \u2014 "),I$=n(aCe,"A",{href:!0});var aUr=s(I$);H1o=r(aUr,"Wav2Vec2ForPreTraining"),aUr.forEach(t),U1o=r(aCe," (Wav2Vec2 model)"),aCe.forEach(t),J1o=i(B),bu=n(B,"LI",{});var nCe=s(bu);Eae=n(nCe,"STRONG",{});var nUr=s(Eae);Y1o=r(nUr,"xlm"),nUr.forEach(t),K1o=r(nCe," \u2014 "),q$=n(nCe,"A",{href:!0});var sUr=s(q$);Z1o=r(sUr,"XLMWithLMHeadModel"),sUr.forEach(t),ebo=r(nCe," (XLM model)"),nCe.forEach(t),obo=i(B),Fu=n(B,"LI",{});var sCe=s(Fu);Cae=n(sCe,"STRONG",{});var lUr=s(Cae);rbo=r(lUr,"xlm-roberta"),lUr.forEach(t),tbo=r(sCe," \u2014 "),N$=n(sCe,"A",{href:!0});var iUr=s(N$);abo=r(iUr,"XLMRobertaForMaskedLM"),iUr.forEach(t),nbo=r(sCe," (XLM-RoBERTa model)"),sCe.forEach(t),sbo=i(B),vu=n(B,"LI",{});var lCe=s(vu);wae=n(lCe,"STRONG",{});var dUr=s(wae);lbo=r(dUr,"xlm-roberta-xl"),dUr.forEach(t),ibo=r(lCe," \u2014 "),j$=n(lCe,"A",{href:!0});var cUr=s(j$);dbo=r(cUr,"XLMRobertaXLForMaskedLM"),cUr.forEach(t),cbo=r(lCe," (XLM-RoBERTa-XL model)"),lCe.forEach(t),fbo=i(B),Tu=n(B,"LI",{});var iCe=s(Tu);Aae=n(iCe,"STRONG",{});var fUr=s(Aae);mbo=r(fUr,"xlnet"),fUr.forEach(t),gbo=r(iCe," \u2014 "),D$=n(iCe,"A",{href:!0});var mUr=s(D$);hbo=r(mUr,"XLNetLMHeadModel"),mUr.forEach(t),pbo=r(iCe," (XLNet model)"),iCe.forEach(t),B.forEach(t),_bo=i(Gt),Mu=n(Gt,"P",{});var dCe=s(Mu);ubo=r(dCe,"The model is set in evaluation mode by default using "),yae=n(dCe,"CODE",{});var gUr=s(yae);bbo=r(gUr,"model.eval()"),gUr.forEach(t),Fbo=r(dCe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lae=n(dCe,"CODE",{});var hUr=s(Lae);vbo=r(hUr,"model.train()"),hUr.forEach(t),dCe.forEach(t),Tbo=i(Gt),xae=n(Gt,"P",{});var pUr=s(xae);Mbo=r(pUr,"Examples:"),pUr.forEach(t),Ebo=i(Gt),m(uC.$$.fragment,Gt),Gt.forEach(t),Us.forEach(t),qRe=i(c),td=n(c,"H2",{class:!0});var QPe=s(td);Eu=n(QPe,"A",{id:!0,class:!0,href:!0});var _Ur=s(Eu);kae=n(_Ur,"SPAN",{});var uUr=s(kae);m(bC.$$.fragment,uUr),uUr.forEach(t),_Ur.forEach(t),Cbo=i(QPe),Sae=n(QPe,"SPAN",{});var bUr=s(Sae);wbo=r(bUr,"AutoModelForCausalLM"),bUr.forEach(t),QPe.forEach(t),NRe=i(c),Ko=n(c,"DIV",{class:!0});var Ys=s(Ko);m(FC.$$.fragment,Ys),Abo=i(Ys),ad=n(Ys,"P",{});var FU=s(ad);ybo=r(FU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),G$=n(FU,"A",{href:!0});var FUr=s(G$);Lbo=r(FUr,"from_pretrained()"),FUr.forEach(t),xbo=r(FU," class method or the "),O$=n(FU,"A",{href:!0});var vUr=s(O$);kbo=r(vUr,"from_config()"),vUr.forEach(t),Sbo=r(FU,` class
method.`),FU.forEach(t),Rbo=i(Ys),vC=n(Ys,"P",{});var WPe=s(vC);Bbo=r(WPe,"This class cannot be instantiated directly using "),Rae=n(WPe,"CODE",{});var TUr=s(Rae);Pbo=r(TUr,"__init__()"),TUr.forEach(t),$bo=r(WPe," (throws an error)."),WPe.forEach(t),Ibo=i(Ys),Qr=n(Ys,"DIV",{class:!0});var Ks=s(Qr);m(TC.$$.fragment,Ks),qbo=i(Ks),Bae=n(Ks,"P",{});var MUr=s(Bae);Nbo=r(MUr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),MUr.forEach(t),jbo=i(Ks),nd=n(Ks,"P",{});var vU=s(nd);Dbo=r(vU,`Note:
Loading a model from its configuration file does `),Pae=n(vU,"STRONG",{});var EUr=s(Pae);Gbo=r(EUr,"not"),EUr.forEach(t),Obo=r(vU,` load the model weights. It only affects the
model\u2019s configuration. Use `),V$=n(vU,"A",{href:!0});var CUr=s(V$);Vbo=r(CUr,"from_pretrained()"),CUr.forEach(t),Xbo=r(vU," to load the model weights."),vU.forEach(t),zbo=i(Ks),$ae=n(Ks,"P",{});var wUr=s($ae);Qbo=r(wUr,"Examples:"),wUr.forEach(t),Wbo=i(Ks),m(MC.$$.fragment,Ks),Ks.forEach(t),Hbo=i(Ys),je=n(Ys,"DIV",{class:!0});var Ot=s(je);m(EC.$$.fragment,Ot),Ubo=i(Ot),Iae=n(Ot,"P",{});var AUr=s(Iae);Jbo=r(AUr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),AUr.forEach(t),Ybo=i(Ot),Qa=n(Ot,"P",{});var k4=s(Qa);Kbo=r(k4,"The model class to instantiate is selected based on the "),qae=n(k4,"CODE",{});var yUr=s(qae);Zbo=r(yUr,"model_type"),yUr.forEach(t),e2o=r(k4,` property of the config object (either
passed as an argument or loaded from `),Nae=n(k4,"CODE",{});var LUr=s(Nae);o2o=r(LUr,"pretrained_model_name_or_path"),LUr.forEach(t),r2o=r(k4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jae=n(k4,"CODE",{});var xUr=s(jae);t2o=r(xUr,"pretrained_model_name_or_path"),xUr.forEach(t),a2o=r(k4,":"),k4.forEach(t),n2o=i(Ot),$=n(Ot,"UL",{});var q=s($);Cu=n(q,"LI",{});var cCe=s(Cu);Dae=n(cCe,"STRONG",{});var kUr=s(Dae);s2o=r(kUr,"bart"),kUr.forEach(t),l2o=r(cCe," \u2014 "),X$=n(cCe,"A",{href:!0});var SUr=s(X$);i2o=r(SUr,"BartForCausalLM"),SUr.forEach(t),d2o=r(cCe," (BART model)"),cCe.forEach(t),c2o=i(q),wu=n(q,"LI",{});var fCe=s(wu);Gae=n(fCe,"STRONG",{});var RUr=s(Gae);f2o=r(RUr,"bert"),RUr.forEach(t),m2o=r(fCe," \u2014 "),z$=n(fCe,"A",{href:!0});var BUr=s(z$);g2o=r(BUr,"BertLMHeadModel"),BUr.forEach(t),h2o=r(fCe," (BERT model)"),fCe.forEach(t),p2o=i(q),Au=n(q,"LI",{});var mCe=s(Au);Oae=n(mCe,"STRONG",{});var PUr=s(Oae);_2o=r(PUr,"bert-generation"),PUr.forEach(t),u2o=r(mCe," \u2014 "),Q$=n(mCe,"A",{href:!0});var $Ur=s(Q$);b2o=r($Ur,"BertGenerationDecoder"),$Ur.forEach(t),F2o=r(mCe," (Bert Generation model)"),mCe.forEach(t),v2o=i(q),yu=n(q,"LI",{});var gCe=s(yu);Vae=n(gCe,"STRONG",{});var IUr=s(Vae);T2o=r(IUr,"big_bird"),IUr.forEach(t),M2o=r(gCe," \u2014 "),W$=n(gCe,"A",{href:!0});var qUr=s(W$);E2o=r(qUr,"BigBirdForCausalLM"),qUr.forEach(t),C2o=r(gCe," (BigBird model)"),gCe.forEach(t),w2o=i(q),Lu=n(q,"LI",{});var hCe=s(Lu);Xae=n(hCe,"STRONG",{});var NUr=s(Xae);A2o=r(NUr,"bigbird_pegasus"),NUr.forEach(t),y2o=r(hCe," \u2014 "),H$=n(hCe,"A",{href:!0});var jUr=s(H$);L2o=r(jUr,"BigBirdPegasusForCausalLM"),jUr.forEach(t),x2o=r(hCe," (BigBirdPegasus model)"),hCe.forEach(t),k2o=i(q),xu=n(q,"LI",{});var pCe=s(xu);zae=n(pCe,"STRONG",{});var DUr=s(zae);S2o=r(DUr,"blenderbot"),DUr.forEach(t),R2o=r(pCe," \u2014 "),U$=n(pCe,"A",{href:!0});var GUr=s(U$);B2o=r(GUr,"BlenderbotForCausalLM"),GUr.forEach(t),P2o=r(pCe," (Blenderbot model)"),pCe.forEach(t),$2o=i(q),ku=n(q,"LI",{});var _Ce=s(ku);Qae=n(_Ce,"STRONG",{});var OUr=s(Qae);I2o=r(OUr,"blenderbot-small"),OUr.forEach(t),q2o=r(_Ce," \u2014 "),J$=n(_Ce,"A",{href:!0});var VUr=s(J$);N2o=r(VUr,"BlenderbotSmallForCausalLM"),VUr.forEach(t),j2o=r(_Ce," (BlenderbotSmall model)"),_Ce.forEach(t),D2o=i(q),Su=n(q,"LI",{});var uCe=s(Su);Wae=n(uCe,"STRONG",{});var XUr=s(Wae);G2o=r(XUr,"camembert"),XUr.forEach(t),O2o=r(uCe," \u2014 "),Y$=n(uCe,"A",{href:!0});var zUr=s(Y$);V2o=r(zUr,"CamembertForCausalLM"),zUr.forEach(t),X2o=r(uCe," (CamemBERT model)"),uCe.forEach(t),z2o=i(q),Ru=n(q,"LI",{});var bCe=s(Ru);Hae=n(bCe,"STRONG",{});var QUr=s(Hae);Q2o=r(QUr,"ctrl"),QUr.forEach(t),W2o=r(bCe," \u2014 "),K$=n(bCe,"A",{href:!0});var WUr=s(K$);H2o=r(WUr,"CTRLLMHeadModel"),WUr.forEach(t),U2o=r(bCe," (CTRL model)"),bCe.forEach(t),J2o=i(q),Bu=n(q,"LI",{});var FCe=s(Bu);Uae=n(FCe,"STRONG",{});var HUr=s(Uae);Y2o=r(HUr,"data2vec-text"),HUr.forEach(t),K2o=r(FCe," \u2014 "),Z$=n(FCe,"A",{href:!0});var UUr=s(Z$);Z2o=r(UUr,"Data2VecTextForCausalLM"),UUr.forEach(t),eFo=r(FCe," (Data2VecText model)"),FCe.forEach(t),oFo=i(q),Pu=n(q,"LI",{});var vCe=s(Pu);Jae=n(vCe,"STRONG",{});var JUr=s(Jae);rFo=r(JUr,"electra"),JUr.forEach(t),tFo=r(vCe," \u2014 "),eI=n(vCe,"A",{href:!0});var YUr=s(eI);aFo=r(YUr,"ElectraForCausalLM"),YUr.forEach(t),nFo=r(vCe," (ELECTRA model)"),vCe.forEach(t),sFo=i(q),$u=n(q,"LI",{});var TCe=s($u);Yae=n(TCe,"STRONG",{});var KUr=s(Yae);lFo=r(KUr,"gpt2"),KUr.forEach(t),iFo=r(TCe," \u2014 "),oI=n(TCe,"A",{href:!0});var ZUr=s(oI);dFo=r(ZUr,"GPT2LMHeadModel"),ZUr.forEach(t),cFo=r(TCe," (OpenAI GPT-2 model)"),TCe.forEach(t),fFo=i(q),Iu=n(q,"LI",{});var MCe=s(Iu);Kae=n(MCe,"STRONG",{});var eJr=s(Kae);mFo=r(eJr,"gpt_neo"),eJr.forEach(t),gFo=r(MCe," \u2014 "),rI=n(MCe,"A",{href:!0});var oJr=s(rI);hFo=r(oJr,"GPTNeoForCausalLM"),oJr.forEach(t),pFo=r(MCe," (GPT Neo model)"),MCe.forEach(t),_Fo=i(q),qu=n(q,"LI",{});var ECe=s(qu);Zae=n(ECe,"STRONG",{});var rJr=s(Zae);uFo=r(rJr,"gptj"),rJr.forEach(t),bFo=r(ECe," \u2014 "),tI=n(ECe,"A",{href:!0});var tJr=s(tI);FFo=r(tJr,"GPTJForCausalLM"),tJr.forEach(t),vFo=r(ECe," (GPT-J model)"),ECe.forEach(t),TFo=i(q),Nu=n(q,"LI",{});var CCe=s(Nu);ene=n(CCe,"STRONG",{});var aJr=s(ene);MFo=r(aJr,"marian"),aJr.forEach(t),EFo=r(CCe," \u2014 "),aI=n(CCe,"A",{href:!0});var nJr=s(aI);CFo=r(nJr,"MarianForCausalLM"),nJr.forEach(t),wFo=r(CCe," (Marian model)"),CCe.forEach(t),AFo=i(q),ju=n(q,"LI",{});var wCe=s(ju);one=n(wCe,"STRONG",{});var sJr=s(one);yFo=r(sJr,"mbart"),sJr.forEach(t),LFo=r(wCe," \u2014 "),nI=n(wCe,"A",{href:!0});var lJr=s(nI);xFo=r(lJr,"MBartForCausalLM"),lJr.forEach(t),kFo=r(wCe," (mBART model)"),wCe.forEach(t),SFo=i(q),Du=n(q,"LI",{});var ACe=s(Du);rne=n(ACe,"STRONG",{});var iJr=s(rne);RFo=r(iJr,"megatron-bert"),iJr.forEach(t),BFo=r(ACe," \u2014 "),sI=n(ACe,"A",{href:!0});var dJr=s(sI);PFo=r(dJr,"MegatronBertForCausalLM"),dJr.forEach(t),$Fo=r(ACe," (MegatronBert model)"),ACe.forEach(t),IFo=i(q),Gu=n(q,"LI",{});var yCe=s(Gu);tne=n(yCe,"STRONG",{});var cJr=s(tne);qFo=r(cJr,"openai-gpt"),cJr.forEach(t),NFo=r(yCe," \u2014 "),lI=n(yCe,"A",{href:!0});var fJr=s(lI);jFo=r(fJr,"OpenAIGPTLMHeadModel"),fJr.forEach(t),DFo=r(yCe," (OpenAI GPT model)"),yCe.forEach(t),GFo=i(q),Ou=n(q,"LI",{});var LCe=s(Ou);ane=n(LCe,"STRONG",{});var mJr=s(ane);OFo=r(mJr,"pegasus"),mJr.forEach(t),VFo=r(LCe," \u2014 "),iI=n(LCe,"A",{href:!0});var gJr=s(iI);XFo=r(gJr,"PegasusForCausalLM"),gJr.forEach(t),zFo=r(LCe," (Pegasus model)"),LCe.forEach(t),QFo=i(q),Vu=n(q,"LI",{});var xCe=s(Vu);nne=n(xCe,"STRONG",{});var hJr=s(nne);WFo=r(hJr,"plbart"),hJr.forEach(t),HFo=r(xCe," \u2014 "),dI=n(xCe,"A",{href:!0});var pJr=s(dI);UFo=r(pJr,"PLBartForCausalLM"),pJr.forEach(t),JFo=r(xCe," (PLBart model)"),xCe.forEach(t),YFo=i(q),Xu=n(q,"LI",{});var kCe=s(Xu);sne=n(kCe,"STRONG",{});var _Jr=s(sne);KFo=r(_Jr,"prophetnet"),_Jr.forEach(t),ZFo=r(kCe," \u2014 "),cI=n(kCe,"A",{href:!0});var uJr=s(cI);evo=r(uJr,"ProphetNetForCausalLM"),uJr.forEach(t),ovo=r(kCe," (ProphetNet model)"),kCe.forEach(t),rvo=i(q),zu=n(q,"LI",{});var SCe=s(zu);lne=n(SCe,"STRONG",{});var bJr=s(lne);tvo=r(bJr,"qdqbert"),bJr.forEach(t),avo=r(SCe," \u2014 "),fI=n(SCe,"A",{href:!0});var FJr=s(fI);nvo=r(FJr,"QDQBertLMHeadModel"),FJr.forEach(t),svo=r(SCe," (QDQBert model)"),SCe.forEach(t),lvo=i(q),Qu=n(q,"LI",{});var RCe=s(Qu);ine=n(RCe,"STRONG",{});var vJr=s(ine);ivo=r(vJr,"reformer"),vJr.forEach(t),dvo=r(RCe," \u2014 "),mI=n(RCe,"A",{href:!0});var TJr=s(mI);cvo=r(TJr,"ReformerModelWithLMHead"),TJr.forEach(t),fvo=r(RCe," (Reformer model)"),RCe.forEach(t),mvo=i(q),Wu=n(q,"LI",{});var BCe=s(Wu);dne=n(BCe,"STRONG",{});var MJr=s(dne);gvo=r(MJr,"rembert"),MJr.forEach(t),hvo=r(BCe," \u2014 "),gI=n(BCe,"A",{href:!0});var EJr=s(gI);pvo=r(EJr,"RemBertForCausalLM"),EJr.forEach(t),_vo=r(BCe," (RemBERT model)"),BCe.forEach(t),uvo=i(q),Hu=n(q,"LI",{});var PCe=s(Hu);cne=n(PCe,"STRONG",{});var CJr=s(cne);bvo=r(CJr,"roberta"),CJr.forEach(t),Fvo=r(PCe," \u2014 "),hI=n(PCe,"A",{href:!0});var wJr=s(hI);vvo=r(wJr,"RobertaForCausalLM"),wJr.forEach(t),Tvo=r(PCe," (RoBERTa model)"),PCe.forEach(t),Mvo=i(q),Uu=n(q,"LI",{});var $Ce=s(Uu);fne=n($Ce,"STRONG",{});var AJr=s(fne);Evo=r(AJr,"roformer"),AJr.forEach(t),Cvo=r($Ce," \u2014 "),pI=n($Ce,"A",{href:!0});var yJr=s(pI);wvo=r(yJr,"RoFormerForCausalLM"),yJr.forEach(t),Avo=r($Ce," (RoFormer model)"),$Ce.forEach(t),yvo=i(q),Ju=n(q,"LI",{});var ICe=s(Ju);mne=n(ICe,"STRONG",{});var LJr=s(mne);Lvo=r(LJr,"speech_to_text_2"),LJr.forEach(t),xvo=r(ICe," \u2014 "),_I=n(ICe,"A",{href:!0});var xJr=s(_I);kvo=r(xJr,"Speech2Text2ForCausalLM"),xJr.forEach(t),Svo=r(ICe," (Speech2Text2 model)"),ICe.forEach(t),Rvo=i(q),Yu=n(q,"LI",{});var qCe=s(Yu);gne=n(qCe,"STRONG",{});var kJr=s(gne);Bvo=r(kJr,"transfo-xl"),kJr.forEach(t),Pvo=r(qCe," \u2014 "),uI=n(qCe,"A",{href:!0});var SJr=s(uI);$vo=r(SJr,"TransfoXLLMHeadModel"),SJr.forEach(t),Ivo=r(qCe," (Transformer-XL model)"),qCe.forEach(t),qvo=i(q),Ku=n(q,"LI",{});var NCe=s(Ku);hne=n(NCe,"STRONG",{});var RJr=s(hne);Nvo=r(RJr,"trocr"),RJr.forEach(t),jvo=r(NCe," \u2014 "),bI=n(NCe,"A",{href:!0});var BJr=s(bI);Dvo=r(BJr,"TrOCRForCausalLM"),BJr.forEach(t),Gvo=r(NCe," (TrOCR model)"),NCe.forEach(t),Ovo=i(q),Zu=n(q,"LI",{});var jCe=s(Zu);pne=n(jCe,"STRONG",{});var PJr=s(pne);Vvo=r(PJr,"xglm"),PJr.forEach(t),Xvo=r(jCe," \u2014 "),FI=n(jCe,"A",{href:!0});var $Jr=s(FI);zvo=r($Jr,"XGLMForCausalLM"),$Jr.forEach(t),Qvo=r(jCe," (XGLM model)"),jCe.forEach(t),Wvo=i(q),e1=n(q,"LI",{});var DCe=s(e1);_ne=n(DCe,"STRONG",{});var IJr=s(_ne);Hvo=r(IJr,"xlm"),IJr.forEach(t),Uvo=r(DCe," \u2014 "),vI=n(DCe,"A",{href:!0});var qJr=s(vI);Jvo=r(qJr,"XLMWithLMHeadModel"),qJr.forEach(t),Yvo=r(DCe," (XLM model)"),DCe.forEach(t),Kvo=i(q),o1=n(q,"LI",{});var GCe=s(o1);une=n(GCe,"STRONG",{});var NJr=s(une);Zvo=r(NJr,"xlm-prophetnet"),NJr.forEach(t),e6o=r(GCe," \u2014 "),TI=n(GCe,"A",{href:!0});var jJr=s(TI);o6o=r(jJr,"XLMProphetNetForCausalLM"),jJr.forEach(t),r6o=r(GCe," (XLMProphetNet model)"),GCe.forEach(t),t6o=i(q),r1=n(q,"LI",{});var OCe=s(r1);bne=n(OCe,"STRONG",{});var DJr=s(bne);a6o=r(DJr,"xlm-roberta"),DJr.forEach(t),n6o=r(OCe," \u2014 "),MI=n(OCe,"A",{href:!0});var GJr=s(MI);s6o=r(GJr,"XLMRobertaForCausalLM"),GJr.forEach(t),l6o=r(OCe," (XLM-RoBERTa model)"),OCe.forEach(t),i6o=i(q),t1=n(q,"LI",{});var VCe=s(t1);Fne=n(VCe,"STRONG",{});var OJr=s(Fne);d6o=r(OJr,"xlm-roberta-xl"),OJr.forEach(t),c6o=r(VCe," \u2014 "),EI=n(VCe,"A",{href:!0});var VJr=s(EI);f6o=r(VJr,"XLMRobertaXLForCausalLM"),VJr.forEach(t),m6o=r(VCe," (XLM-RoBERTa-XL model)"),VCe.forEach(t),g6o=i(q),a1=n(q,"LI",{});var XCe=s(a1);vne=n(XCe,"STRONG",{});var XJr=s(vne);h6o=r(XJr,"xlnet"),XJr.forEach(t),p6o=r(XCe," \u2014 "),CI=n(XCe,"A",{href:!0});var zJr=s(CI);_6o=r(zJr,"XLNetLMHeadModel"),zJr.forEach(t),u6o=r(XCe," (XLNet model)"),XCe.forEach(t),q.forEach(t),b6o=i(Ot),n1=n(Ot,"P",{});var zCe=s(n1);F6o=r(zCe,"The model is set in evaluation mode by default using "),Tne=n(zCe,"CODE",{});var QJr=s(Tne);v6o=r(QJr,"model.eval()"),QJr.forEach(t),T6o=r(zCe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mne=n(zCe,"CODE",{});var WJr=s(Mne);M6o=r(WJr,"model.train()"),WJr.forEach(t),zCe.forEach(t),E6o=i(Ot),Ene=n(Ot,"P",{});var HJr=s(Ene);C6o=r(HJr,"Examples:"),HJr.forEach(t),w6o=i(Ot),m(CC.$$.fragment,Ot),Ot.forEach(t),Ys.forEach(t),jRe=i(c),sd=n(c,"H2",{class:!0});var HPe=s(sd);s1=n(HPe,"A",{id:!0,class:!0,href:!0});var UJr=s(s1);Cne=n(UJr,"SPAN",{});var JJr=s(Cne);m(wC.$$.fragment,JJr),JJr.forEach(t),UJr.forEach(t),A6o=i(HPe),wne=n(HPe,"SPAN",{});var YJr=s(wne);y6o=r(YJr,"AutoModelForMaskedLM"),YJr.forEach(t),HPe.forEach(t),DRe=i(c),Zo=n(c,"DIV",{class:!0});var Zs=s(Zo);m(AC.$$.fragment,Zs),L6o=i(Zs),ld=n(Zs,"P",{});var TU=s(ld);x6o=r(TU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),wI=n(TU,"A",{href:!0});var KJr=s(wI);k6o=r(KJr,"from_pretrained()"),KJr.forEach(t),S6o=r(TU," class method or the "),AI=n(TU,"A",{href:!0});var ZJr=s(AI);R6o=r(ZJr,"from_config()"),ZJr.forEach(t),B6o=r(TU,` class
method.`),TU.forEach(t),P6o=i(Zs),yC=n(Zs,"P",{});var UPe=s(yC);$6o=r(UPe,"This class cannot be instantiated directly using "),Ane=n(UPe,"CODE",{});var eYr=s(Ane);I6o=r(eYr,"__init__()"),eYr.forEach(t),q6o=r(UPe," (throws an error)."),UPe.forEach(t),N6o=i(Zs),Wr=n(Zs,"DIV",{class:!0});var el=s(Wr);m(LC.$$.fragment,el),j6o=i(el),yne=n(el,"P",{});var oYr=s(yne);D6o=r(oYr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),oYr.forEach(t),G6o=i(el),id=n(el,"P",{});var MU=s(id);O6o=r(MU,`Note:
Loading a model from its configuration file does `),Lne=n(MU,"STRONG",{});var rYr=s(Lne);V6o=r(rYr,"not"),rYr.forEach(t),X6o=r(MU,` load the model weights. It only affects the
model\u2019s configuration. Use `),yI=n(MU,"A",{href:!0});var tYr=s(yI);z6o=r(tYr,"from_pretrained()"),tYr.forEach(t),Q6o=r(MU," to load the model weights."),MU.forEach(t),W6o=i(el),xne=n(el,"P",{});var aYr=s(xne);H6o=r(aYr,"Examples:"),aYr.forEach(t),U6o=i(el),m(xC.$$.fragment,el),el.forEach(t),J6o=i(Zs),De=n(Zs,"DIV",{class:!0});var Vt=s(De);m(kC.$$.fragment,Vt),Y6o=i(Vt),kne=n(Vt,"P",{});var nYr=s(kne);K6o=r(nYr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),nYr.forEach(t),Z6o=i(Vt),Wa=n(Vt,"P",{});var S4=s(Wa);e0o=r(S4,"The model class to instantiate is selected based on the "),Sne=n(S4,"CODE",{});var sYr=s(Sne);o0o=r(sYr,"model_type"),sYr.forEach(t),r0o=r(S4,` property of the config object (either
passed as an argument or loaded from `),Rne=n(S4,"CODE",{});var lYr=s(Rne);t0o=r(lYr,"pretrained_model_name_or_path"),lYr.forEach(t),a0o=r(S4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bne=n(S4,"CODE",{});var iYr=s(Bne);n0o=r(iYr,"pretrained_model_name_or_path"),iYr.forEach(t),s0o=r(S4,":"),S4.forEach(t),l0o=i(Vt),I=n(Vt,"UL",{});var N=s(I);l1=n(N,"LI",{});var QCe=s(l1);Pne=n(QCe,"STRONG",{});var dYr=s(Pne);i0o=r(dYr,"albert"),dYr.forEach(t),d0o=r(QCe," \u2014 "),LI=n(QCe,"A",{href:!0});var cYr=s(LI);c0o=r(cYr,"AlbertForMaskedLM"),cYr.forEach(t),f0o=r(QCe," (ALBERT model)"),QCe.forEach(t),m0o=i(N),i1=n(N,"LI",{});var WCe=s(i1);$ne=n(WCe,"STRONG",{});var fYr=s($ne);g0o=r(fYr,"bart"),fYr.forEach(t),h0o=r(WCe," \u2014 "),xI=n(WCe,"A",{href:!0});var mYr=s(xI);p0o=r(mYr,"BartForConditionalGeneration"),mYr.forEach(t),_0o=r(WCe," (BART model)"),WCe.forEach(t),u0o=i(N),d1=n(N,"LI",{});var HCe=s(d1);Ine=n(HCe,"STRONG",{});var gYr=s(Ine);b0o=r(gYr,"bert"),gYr.forEach(t),F0o=r(HCe," \u2014 "),kI=n(HCe,"A",{href:!0});var hYr=s(kI);v0o=r(hYr,"BertForMaskedLM"),hYr.forEach(t),T0o=r(HCe," (BERT model)"),HCe.forEach(t),M0o=i(N),c1=n(N,"LI",{});var UCe=s(c1);qne=n(UCe,"STRONG",{});var pYr=s(qne);E0o=r(pYr,"big_bird"),pYr.forEach(t),C0o=r(UCe," \u2014 "),SI=n(UCe,"A",{href:!0});var _Yr=s(SI);w0o=r(_Yr,"BigBirdForMaskedLM"),_Yr.forEach(t),A0o=r(UCe," (BigBird model)"),UCe.forEach(t),y0o=i(N),f1=n(N,"LI",{});var JCe=s(f1);Nne=n(JCe,"STRONG",{});var uYr=s(Nne);L0o=r(uYr,"camembert"),uYr.forEach(t),x0o=r(JCe," \u2014 "),RI=n(JCe,"A",{href:!0});var bYr=s(RI);k0o=r(bYr,"CamembertForMaskedLM"),bYr.forEach(t),S0o=r(JCe," (CamemBERT model)"),JCe.forEach(t),R0o=i(N),m1=n(N,"LI",{});var YCe=s(m1);jne=n(YCe,"STRONG",{});var FYr=s(jne);B0o=r(FYr,"convbert"),FYr.forEach(t),P0o=r(YCe," \u2014 "),BI=n(YCe,"A",{href:!0});var vYr=s(BI);$0o=r(vYr,"ConvBertForMaskedLM"),vYr.forEach(t),I0o=r(YCe," (ConvBERT model)"),YCe.forEach(t),q0o=i(N),g1=n(N,"LI",{});var KCe=s(g1);Dne=n(KCe,"STRONG",{});var TYr=s(Dne);N0o=r(TYr,"data2vec-text"),TYr.forEach(t),j0o=r(KCe," \u2014 "),PI=n(KCe,"A",{href:!0});var MYr=s(PI);D0o=r(MYr,"Data2VecTextForMaskedLM"),MYr.forEach(t),G0o=r(KCe," (Data2VecText model)"),KCe.forEach(t),O0o=i(N),h1=n(N,"LI",{});var ZCe=s(h1);Gne=n(ZCe,"STRONG",{});var EYr=s(Gne);V0o=r(EYr,"deberta"),EYr.forEach(t),X0o=r(ZCe," \u2014 "),$I=n(ZCe,"A",{href:!0});var CYr=s($I);z0o=r(CYr,"DebertaForMaskedLM"),CYr.forEach(t),Q0o=r(ZCe," (DeBERTa model)"),ZCe.forEach(t),W0o=i(N),p1=n(N,"LI",{});var e5e=s(p1);One=n(e5e,"STRONG",{});var wYr=s(One);H0o=r(wYr,"deberta-v2"),wYr.forEach(t),U0o=r(e5e," \u2014 "),II=n(e5e,"A",{href:!0});var AYr=s(II);J0o=r(AYr,"DebertaV2ForMaskedLM"),AYr.forEach(t),Y0o=r(e5e," (DeBERTa-v2 model)"),e5e.forEach(t),K0o=i(N),_1=n(N,"LI",{});var o5e=s(_1);Vne=n(o5e,"STRONG",{});var yYr=s(Vne);Z0o=r(yYr,"distilbert"),yYr.forEach(t),eTo=r(o5e," \u2014 "),qI=n(o5e,"A",{href:!0});var LYr=s(qI);oTo=r(LYr,"DistilBertForMaskedLM"),LYr.forEach(t),rTo=r(o5e," (DistilBERT model)"),o5e.forEach(t),tTo=i(N),u1=n(N,"LI",{});var r5e=s(u1);Xne=n(r5e,"STRONG",{});var xYr=s(Xne);aTo=r(xYr,"electra"),xYr.forEach(t),nTo=r(r5e," \u2014 "),NI=n(r5e,"A",{href:!0});var kYr=s(NI);sTo=r(kYr,"ElectraForMaskedLM"),kYr.forEach(t),lTo=r(r5e," (ELECTRA model)"),r5e.forEach(t),iTo=i(N),b1=n(N,"LI",{});var t5e=s(b1);zne=n(t5e,"STRONG",{});var SYr=s(zne);dTo=r(SYr,"flaubert"),SYr.forEach(t),cTo=r(t5e," \u2014 "),jI=n(t5e,"A",{href:!0});var RYr=s(jI);fTo=r(RYr,"FlaubertWithLMHeadModel"),RYr.forEach(t),mTo=r(t5e," (FlauBERT model)"),t5e.forEach(t),gTo=i(N),F1=n(N,"LI",{});var a5e=s(F1);Qne=n(a5e,"STRONG",{});var BYr=s(Qne);hTo=r(BYr,"fnet"),BYr.forEach(t),pTo=r(a5e," \u2014 "),DI=n(a5e,"A",{href:!0});var PYr=s(DI);_To=r(PYr,"FNetForMaskedLM"),PYr.forEach(t),uTo=r(a5e," (FNet model)"),a5e.forEach(t),bTo=i(N),v1=n(N,"LI",{});var n5e=s(v1);Wne=n(n5e,"STRONG",{});var $Yr=s(Wne);FTo=r($Yr,"funnel"),$Yr.forEach(t),vTo=r(n5e," \u2014 "),GI=n(n5e,"A",{href:!0});var IYr=s(GI);TTo=r(IYr,"FunnelForMaskedLM"),IYr.forEach(t),MTo=r(n5e," (Funnel Transformer model)"),n5e.forEach(t),ETo=i(N),T1=n(N,"LI",{});var s5e=s(T1);Hne=n(s5e,"STRONG",{});var qYr=s(Hne);CTo=r(qYr,"ibert"),qYr.forEach(t),wTo=r(s5e," \u2014 "),OI=n(s5e,"A",{href:!0});var NYr=s(OI);ATo=r(NYr,"IBertForMaskedLM"),NYr.forEach(t),yTo=r(s5e," (I-BERT model)"),s5e.forEach(t),LTo=i(N),M1=n(N,"LI",{});var l5e=s(M1);Une=n(l5e,"STRONG",{});var jYr=s(Une);xTo=r(jYr,"layoutlm"),jYr.forEach(t),kTo=r(l5e," \u2014 "),VI=n(l5e,"A",{href:!0});var DYr=s(VI);STo=r(DYr,"LayoutLMForMaskedLM"),DYr.forEach(t),RTo=r(l5e," (LayoutLM model)"),l5e.forEach(t),BTo=i(N),E1=n(N,"LI",{});var i5e=s(E1);Jne=n(i5e,"STRONG",{});var GYr=s(Jne);PTo=r(GYr,"longformer"),GYr.forEach(t),$To=r(i5e," \u2014 "),XI=n(i5e,"A",{href:!0});var OYr=s(XI);ITo=r(OYr,"LongformerForMaskedLM"),OYr.forEach(t),qTo=r(i5e," (Longformer model)"),i5e.forEach(t),NTo=i(N),C1=n(N,"LI",{});var d5e=s(C1);Yne=n(d5e,"STRONG",{});var VYr=s(Yne);jTo=r(VYr,"mbart"),VYr.forEach(t),DTo=r(d5e," \u2014 "),zI=n(d5e,"A",{href:!0});var XYr=s(zI);GTo=r(XYr,"MBartForConditionalGeneration"),XYr.forEach(t),OTo=r(d5e," (mBART model)"),d5e.forEach(t),VTo=i(N),w1=n(N,"LI",{});var c5e=s(w1);Kne=n(c5e,"STRONG",{});var zYr=s(Kne);XTo=r(zYr,"megatron-bert"),zYr.forEach(t),zTo=r(c5e," \u2014 "),QI=n(c5e,"A",{href:!0});var QYr=s(QI);QTo=r(QYr,"MegatronBertForMaskedLM"),QYr.forEach(t),WTo=r(c5e," (MegatronBert model)"),c5e.forEach(t),HTo=i(N),A1=n(N,"LI",{});var f5e=s(A1);Zne=n(f5e,"STRONG",{});var WYr=s(Zne);UTo=r(WYr,"mobilebert"),WYr.forEach(t),JTo=r(f5e," \u2014 "),WI=n(f5e,"A",{href:!0});var HYr=s(WI);YTo=r(HYr,"MobileBertForMaskedLM"),HYr.forEach(t),KTo=r(f5e," (MobileBERT model)"),f5e.forEach(t),ZTo=i(N),y1=n(N,"LI",{});var m5e=s(y1);ese=n(m5e,"STRONG",{});var UYr=s(ese);e8o=r(UYr,"mpnet"),UYr.forEach(t),o8o=r(m5e," \u2014 "),HI=n(m5e,"A",{href:!0});var JYr=s(HI);r8o=r(JYr,"MPNetForMaskedLM"),JYr.forEach(t),t8o=r(m5e," (MPNet model)"),m5e.forEach(t),a8o=i(N),L1=n(N,"LI",{});var g5e=s(L1);ose=n(g5e,"STRONG",{});var YYr=s(ose);n8o=r(YYr,"nystromformer"),YYr.forEach(t),s8o=r(g5e," \u2014 "),UI=n(g5e,"A",{href:!0});var KYr=s(UI);l8o=r(KYr,"NystromformerForMaskedLM"),KYr.forEach(t),i8o=r(g5e," (Nystromformer model)"),g5e.forEach(t),d8o=i(N),x1=n(N,"LI",{});var h5e=s(x1);rse=n(h5e,"STRONG",{});var ZYr=s(rse);c8o=r(ZYr,"perceiver"),ZYr.forEach(t),f8o=r(h5e," \u2014 "),JI=n(h5e,"A",{href:!0});var eKr=s(JI);m8o=r(eKr,"PerceiverForMaskedLM"),eKr.forEach(t),g8o=r(h5e," (Perceiver model)"),h5e.forEach(t),h8o=i(N),k1=n(N,"LI",{});var p5e=s(k1);tse=n(p5e,"STRONG",{});var oKr=s(tse);p8o=r(oKr,"qdqbert"),oKr.forEach(t),_8o=r(p5e," \u2014 "),YI=n(p5e,"A",{href:!0});var rKr=s(YI);u8o=r(rKr,"QDQBertForMaskedLM"),rKr.forEach(t),b8o=r(p5e," (QDQBert model)"),p5e.forEach(t),F8o=i(N),S1=n(N,"LI",{});var _5e=s(S1);ase=n(_5e,"STRONG",{});var tKr=s(ase);v8o=r(tKr,"reformer"),tKr.forEach(t),T8o=r(_5e," \u2014 "),KI=n(_5e,"A",{href:!0});var aKr=s(KI);M8o=r(aKr,"ReformerForMaskedLM"),aKr.forEach(t),E8o=r(_5e," (Reformer model)"),_5e.forEach(t),C8o=i(N),R1=n(N,"LI",{});var u5e=s(R1);nse=n(u5e,"STRONG",{});var nKr=s(nse);w8o=r(nKr,"rembert"),nKr.forEach(t),A8o=r(u5e," \u2014 "),ZI=n(u5e,"A",{href:!0});var sKr=s(ZI);y8o=r(sKr,"RemBertForMaskedLM"),sKr.forEach(t),L8o=r(u5e," (RemBERT model)"),u5e.forEach(t),x8o=i(N),B1=n(N,"LI",{});var b5e=s(B1);sse=n(b5e,"STRONG",{});var lKr=s(sse);k8o=r(lKr,"roberta"),lKr.forEach(t),S8o=r(b5e," \u2014 "),eq=n(b5e,"A",{href:!0});var iKr=s(eq);R8o=r(iKr,"RobertaForMaskedLM"),iKr.forEach(t),B8o=r(b5e," (RoBERTa model)"),b5e.forEach(t),P8o=i(N),P1=n(N,"LI",{});var F5e=s(P1);lse=n(F5e,"STRONG",{});var dKr=s(lse);$8o=r(dKr,"roformer"),dKr.forEach(t),I8o=r(F5e," \u2014 "),oq=n(F5e,"A",{href:!0});var cKr=s(oq);q8o=r(cKr,"RoFormerForMaskedLM"),cKr.forEach(t),N8o=r(F5e," (RoFormer model)"),F5e.forEach(t),j8o=i(N),$1=n(N,"LI",{});var v5e=s($1);ise=n(v5e,"STRONG",{});var fKr=s(ise);D8o=r(fKr,"squeezebert"),fKr.forEach(t),G8o=r(v5e," \u2014 "),rq=n(v5e,"A",{href:!0});var mKr=s(rq);O8o=r(mKr,"SqueezeBertForMaskedLM"),mKr.forEach(t),V8o=r(v5e," (SqueezeBERT model)"),v5e.forEach(t),X8o=i(N),I1=n(N,"LI",{});var T5e=s(I1);dse=n(T5e,"STRONG",{});var gKr=s(dse);z8o=r(gKr,"tapas"),gKr.forEach(t),Q8o=r(T5e," \u2014 "),tq=n(T5e,"A",{href:!0});var hKr=s(tq);W8o=r(hKr,"TapasForMaskedLM"),hKr.forEach(t),H8o=r(T5e," (TAPAS model)"),T5e.forEach(t),U8o=i(N),q1=n(N,"LI",{});var M5e=s(q1);cse=n(M5e,"STRONG",{});var pKr=s(cse);J8o=r(pKr,"wav2vec2"),pKr.forEach(t),Y8o=r(M5e," \u2014 "),fse=n(M5e,"CODE",{});var _Kr=s(fse);K8o=r(_Kr,"Wav2Vec2ForMaskedLM"),_Kr.forEach(t),Z8o=r(M5e," (Wav2Vec2 model)"),M5e.forEach(t),e7o=i(N),N1=n(N,"LI",{});var E5e=s(N1);mse=n(E5e,"STRONG",{});var uKr=s(mse);o7o=r(uKr,"xlm"),uKr.forEach(t),r7o=r(E5e," \u2014 "),aq=n(E5e,"A",{href:!0});var bKr=s(aq);t7o=r(bKr,"XLMWithLMHeadModel"),bKr.forEach(t),a7o=r(E5e," (XLM model)"),E5e.forEach(t),n7o=i(N),j1=n(N,"LI",{});var C5e=s(j1);gse=n(C5e,"STRONG",{});var FKr=s(gse);s7o=r(FKr,"xlm-roberta"),FKr.forEach(t),l7o=r(C5e," \u2014 "),nq=n(C5e,"A",{href:!0});var vKr=s(nq);i7o=r(vKr,"XLMRobertaForMaskedLM"),vKr.forEach(t),d7o=r(C5e," (XLM-RoBERTa model)"),C5e.forEach(t),c7o=i(N),D1=n(N,"LI",{});var w5e=s(D1);hse=n(w5e,"STRONG",{});var TKr=s(hse);f7o=r(TKr,"xlm-roberta-xl"),TKr.forEach(t),m7o=r(w5e," \u2014 "),sq=n(w5e,"A",{href:!0});var MKr=s(sq);g7o=r(MKr,"XLMRobertaXLForMaskedLM"),MKr.forEach(t),h7o=r(w5e," (XLM-RoBERTa-XL model)"),w5e.forEach(t),p7o=i(N),G1=n(N,"LI",{});var A5e=s(G1);pse=n(A5e,"STRONG",{});var EKr=s(pse);_7o=r(EKr,"yoso"),EKr.forEach(t),u7o=r(A5e," \u2014 "),lq=n(A5e,"A",{href:!0});var CKr=s(lq);b7o=r(CKr,"YosoForMaskedLM"),CKr.forEach(t),F7o=r(A5e," (YOSO model)"),A5e.forEach(t),N.forEach(t),v7o=i(Vt),O1=n(Vt,"P",{});var y5e=s(O1);T7o=r(y5e,"The model is set in evaluation mode by default using "),_se=n(y5e,"CODE",{});var wKr=s(_se);M7o=r(wKr,"model.eval()"),wKr.forEach(t),E7o=r(y5e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),use=n(y5e,"CODE",{});var AKr=s(use);C7o=r(AKr,"model.train()"),AKr.forEach(t),y5e.forEach(t),w7o=i(Vt),bse=n(Vt,"P",{});var yKr=s(bse);A7o=r(yKr,"Examples:"),yKr.forEach(t),y7o=i(Vt),m(SC.$$.fragment,Vt),Vt.forEach(t),Zs.forEach(t),GRe=i(c),dd=n(c,"H2",{class:!0});var JPe=s(dd);V1=n(JPe,"A",{id:!0,class:!0,href:!0});var LKr=s(V1);Fse=n(LKr,"SPAN",{});var xKr=s(Fse);m(RC.$$.fragment,xKr),xKr.forEach(t),LKr.forEach(t),L7o=i(JPe),vse=n(JPe,"SPAN",{});var kKr=s(vse);x7o=r(kKr,"AutoModelForSeq2SeqLM"),kKr.forEach(t),JPe.forEach(t),ORe=i(c),er=n(c,"DIV",{class:!0});var ol=s(er);m(BC.$$.fragment,ol),k7o=i(ol),cd=n(ol,"P",{});var EU=s(cd);S7o=r(EU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),iq=n(EU,"A",{href:!0});var SKr=s(iq);R7o=r(SKr,"from_pretrained()"),SKr.forEach(t),B7o=r(EU," class method or the "),dq=n(EU,"A",{href:!0});var RKr=s(dq);P7o=r(RKr,"from_config()"),RKr.forEach(t),$7o=r(EU,` class
method.`),EU.forEach(t),I7o=i(ol),PC=n(ol,"P",{});var YPe=s(PC);q7o=r(YPe,"This class cannot be instantiated directly using "),Tse=n(YPe,"CODE",{});var BKr=s(Tse);N7o=r(BKr,"__init__()"),BKr.forEach(t),j7o=r(YPe," (throws an error)."),YPe.forEach(t),D7o=i(ol),Hr=n(ol,"DIV",{class:!0});var rl=s(Hr);m($C.$$.fragment,rl),G7o=i(rl),Mse=n(rl,"P",{});var PKr=s(Mse);O7o=r(PKr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),PKr.forEach(t),V7o=i(rl),fd=n(rl,"P",{});var CU=s(fd);X7o=r(CU,`Note:
Loading a model from its configuration file does `),Ese=n(CU,"STRONG",{});var $Kr=s(Ese);z7o=r($Kr,"not"),$Kr.forEach(t),Q7o=r(CU,` load the model weights. It only affects the
model\u2019s configuration. Use `),cq=n(CU,"A",{href:!0});var IKr=s(cq);W7o=r(IKr,"from_pretrained()"),IKr.forEach(t),H7o=r(CU," to load the model weights."),CU.forEach(t),U7o=i(rl),Cse=n(rl,"P",{});var qKr=s(Cse);J7o=r(qKr,"Examples:"),qKr.forEach(t),Y7o=i(rl),m(IC.$$.fragment,rl),rl.forEach(t),K7o=i(ol),Ge=n(ol,"DIV",{class:!0});var Xt=s(Ge);m(qC.$$.fragment,Xt),Z7o=i(Xt),wse=n(Xt,"P",{});var NKr=s(wse);eMo=r(NKr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),NKr.forEach(t),oMo=i(Xt),Ha=n(Xt,"P",{});var R4=s(Ha);rMo=r(R4,"The model class to instantiate is selected based on the "),Ase=n(R4,"CODE",{});var jKr=s(Ase);tMo=r(jKr,"model_type"),jKr.forEach(t),aMo=r(R4,` property of the config object (either
passed as an argument or loaded from `),yse=n(R4,"CODE",{});var DKr=s(yse);nMo=r(DKr,"pretrained_model_name_or_path"),DKr.forEach(t),sMo=r(R4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lse=n(R4,"CODE",{});var GKr=s(Lse);lMo=r(GKr,"pretrained_model_name_or_path"),GKr.forEach(t),iMo=r(R4,":"),R4.forEach(t),dMo=i(Xt),ne=n(Xt,"UL",{});var le=s(ne);X1=n(le,"LI",{});var L5e=s(X1);xse=n(L5e,"STRONG",{});var OKr=s(xse);cMo=r(OKr,"bart"),OKr.forEach(t),fMo=r(L5e," \u2014 "),fq=n(L5e,"A",{href:!0});var VKr=s(fq);mMo=r(VKr,"BartForConditionalGeneration"),VKr.forEach(t),gMo=r(L5e," (BART model)"),L5e.forEach(t),hMo=i(le),z1=n(le,"LI",{});var x5e=s(z1);kse=n(x5e,"STRONG",{});var XKr=s(kse);pMo=r(XKr,"bigbird_pegasus"),XKr.forEach(t),_Mo=r(x5e," \u2014 "),mq=n(x5e,"A",{href:!0});var zKr=s(mq);uMo=r(zKr,"BigBirdPegasusForConditionalGeneration"),zKr.forEach(t),bMo=r(x5e," (BigBirdPegasus model)"),x5e.forEach(t),FMo=i(le),Q1=n(le,"LI",{});var k5e=s(Q1);Sse=n(k5e,"STRONG",{});var QKr=s(Sse);vMo=r(QKr,"blenderbot"),QKr.forEach(t),TMo=r(k5e," \u2014 "),gq=n(k5e,"A",{href:!0});var WKr=s(gq);MMo=r(WKr,"BlenderbotForConditionalGeneration"),WKr.forEach(t),EMo=r(k5e," (Blenderbot model)"),k5e.forEach(t),CMo=i(le),W1=n(le,"LI",{});var S5e=s(W1);Rse=n(S5e,"STRONG",{});var HKr=s(Rse);wMo=r(HKr,"blenderbot-small"),HKr.forEach(t),AMo=r(S5e," \u2014 "),hq=n(S5e,"A",{href:!0});var UKr=s(hq);yMo=r(UKr,"BlenderbotSmallForConditionalGeneration"),UKr.forEach(t),LMo=r(S5e," (BlenderbotSmall model)"),S5e.forEach(t),xMo=i(le),H1=n(le,"LI",{});var R5e=s(H1);Bse=n(R5e,"STRONG",{});var JKr=s(Bse);kMo=r(JKr,"encoder-decoder"),JKr.forEach(t),SMo=r(R5e," \u2014 "),pq=n(R5e,"A",{href:!0});var YKr=s(pq);RMo=r(YKr,"EncoderDecoderModel"),YKr.forEach(t),BMo=r(R5e," (Encoder decoder model)"),R5e.forEach(t),PMo=i(le),U1=n(le,"LI",{});var B5e=s(U1);Pse=n(B5e,"STRONG",{});var KKr=s(Pse);$Mo=r(KKr,"fsmt"),KKr.forEach(t),IMo=r(B5e," \u2014 "),_q=n(B5e,"A",{href:!0});var ZKr=s(_q);qMo=r(ZKr,"FSMTForConditionalGeneration"),ZKr.forEach(t),NMo=r(B5e," (FairSeq Machine-Translation model)"),B5e.forEach(t),jMo=i(le),J1=n(le,"LI",{});var P5e=s(J1);$se=n(P5e,"STRONG",{});var eZr=s($se);DMo=r(eZr,"led"),eZr.forEach(t),GMo=r(P5e," \u2014 "),uq=n(P5e,"A",{href:!0});var oZr=s(uq);OMo=r(oZr,"LEDForConditionalGeneration"),oZr.forEach(t),VMo=r(P5e," (LED model)"),P5e.forEach(t),XMo=i(le),Y1=n(le,"LI",{});var $5e=s(Y1);Ise=n($5e,"STRONG",{});var rZr=s(Ise);zMo=r(rZr,"m2m_100"),rZr.forEach(t),QMo=r($5e," \u2014 "),bq=n($5e,"A",{href:!0});var tZr=s(bq);WMo=r(tZr,"M2M100ForConditionalGeneration"),tZr.forEach(t),HMo=r($5e," (M2M100 model)"),$5e.forEach(t),UMo=i(le),K1=n(le,"LI",{});var I5e=s(K1);qse=n(I5e,"STRONG",{});var aZr=s(qse);JMo=r(aZr,"marian"),aZr.forEach(t),YMo=r(I5e," \u2014 "),Fq=n(I5e,"A",{href:!0});var nZr=s(Fq);KMo=r(nZr,"MarianMTModel"),nZr.forEach(t),ZMo=r(I5e," (Marian model)"),I5e.forEach(t),e4o=i(le),Z1=n(le,"LI",{});var q5e=s(Z1);Nse=n(q5e,"STRONG",{});var sZr=s(Nse);o4o=r(sZr,"mbart"),sZr.forEach(t),r4o=r(q5e," \u2014 "),vq=n(q5e,"A",{href:!0});var lZr=s(vq);t4o=r(lZr,"MBartForConditionalGeneration"),lZr.forEach(t),a4o=r(q5e," (mBART model)"),q5e.forEach(t),n4o=i(le),eb=n(le,"LI",{});var N5e=s(eb);jse=n(N5e,"STRONG",{});var iZr=s(jse);s4o=r(iZr,"mt5"),iZr.forEach(t),l4o=r(N5e," \u2014 "),Tq=n(N5e,"A",{href:!0});var dZr=s(Tq);i4o=r(dZr,"MT5ForConditionalGeneration"),dZr.forEach(t),d4o=r(N5e," (mT5 model)"),N5e.forEach(t),c4o=i(le),ob=n(le,"LI",{});var j5e=s(ob);Dse=n(j5e,"STRONG",{});var cZr=s(Dse);f4o=r(cZr,"pegasus"),cZr.forEach(t),m4o=r(j5e," \u2014 "),Mq=n(j5e,"A",{href:!0});var fZr=s(Mq);g4o=r(fZr,"PegasusForConditionalGeneration"),fZr.forEach(t),h4o=r(j5e," (Pegasus model)"),j5e.forEach(t),p4o=i(le),rb=n(le,"LI",{});var D5e=s(rb);Gse=n(D5e,"STRONG",{});var mZr=s(Gse);_4o=r(mZr,"plbart"),mZr.forEach(t),u4o=r(D5e," \u2014 "),Eq=n(D5e,"A",{href:!0});var gZr=s(Eq);b4o=r(gZr,"PLBartForConditionalGeneration"),gZr.forEach(t),F4o=r(D5e," (PLBart model)"),D5e.forEach(t),v4o=i(le),tb=n(le,"LI",{});var G5e=s(tb);Ose=n(G5e,"STRONG",{});var hZr=s(Ose);T4o=r(hZr,"prophetnet"),hZr.forEach(t),M4o=r(G5e," \u2014 "),Cq=n(G5e,"A",{href:!0});var pZr=s(Cq);E4o=r(pZr,"ProphetNetForConditionalGeneration"),pZr.forEach(t),C4o=r(G5e," (ProphetNet model)"),G5e.forEach(t),w4o=i(le),ab=n(le,"LI",{});var O5e=s(ab);Vse=n(O5e,"STRONG",{});var _Zr=s(Vse);A4o=r(_Zr,"t5"),_Zr.forEach(t),y4o=r(O5e," \u2014 "),wq=n(O5e,"A",{href:!0});var uZr=s(wq);L4o=r(uZr,"T5ForConditionalGeneration"),uZr.forEach(t),x4o=r(O5e," (T5 model)"),O5e.forEach(t),k4o=i(le),nb=n(le,"LI",{});var V5e=s(nb);Xse=n(V5e,"STRONG",{});var bZr=s(Xse);S4o=r(bZr,"tapex"),bZr.forEach(t),R4o=r(V5e," \u2014 "),Aq=n(V5e,"A",{href:!0});var FZr=s(Aq);B4o=r(FZr,"BartForConditionalGeneration"),FZr.forEach(t),P4o=r(V5e," (TAPEX model)"),V5e.forEach(t),$4o=i(le),sb=n(le,"LI",{});var X5e=s(sb);zse=n(X5e,"STRONG",{});var vZr=s(zse);I4o=r(vZr,"xlm-prophetnet"),vZr.forEach(t),q4o=r(X5e," \u2014 "),yq=n(X5e,"A",{href:!0});var TZr=s(yq);N4o=r(TZr,"XLMProphetNetForConditionalGeneration"),TZr.forEach(t),j4o=r(X5e," (XLMProphetNet model)"),X5e.forEach(t),le.forEach(t),D4o=i(Xt),lb=n(Xt,"P",{});var z5e=s(lb);G4o=r(z5e,"The model is set in evaluation mode by default using "),Qse=n(z5e,"CODE",{});var MZr=s(Qse);O4o=r(MZr,"model.eval()"),MZr.forEach(t),V4o=r(z5e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wse=n(z5e,"CODE",{});var EZr=s(Wse);X4o=r(EZr,"model.train()"),EZr.forEach(t),z5e.forEach(t),z4o=i(Xt),Hse=n(Xt,"P",{});var CZr=s(Hse);Q4o=r(CZr,"Examples:"),CZr.forEach(t),W4o=i(Xt),m(NC.$$.fragment,Xt),Xt.forEach(t),ol.forEach(t),VRe=i(c),md=n(c,"H2",{class:!0});var KPe=s(md);ib=n(KPe,"A",{id:!0,class:!0,href:!0});var wZr=s(ib);Use=n(wZr,"SPAN",{});var AZr=s(Use);m(jC.$$.fragment,AZr),AZr.forEach(t),wZr.forEach(t),H4o=i(KPe),Jse=n(KPe,"SPAN",{});var yZr=s(Jse);U4o=r(yZr,"AutoModelForSequenceClassification"),yZr.forEach(t),KPe.forEach(t),XRe=i(c),or=n(c,"DIV",{class:!0});var tl=s(or);m(DC.$$.fragment,tl),J4o=i(tl),gd=n(tl,"P",{});var wU=s(gd);Y4o=r(wU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Lq=n(wU,"A",{href:!0});var LZr=s(Lq);K4o=r(LZr,"from_pretrained()"),LZr.forEach(t),Z4o=r(wU," class method or the "),xq=n(wU,"A",{href:!0});var xZr=s(xq);eEo=r(xZr,"from_config()"),xZr.forEach(t),oEo=r(wU,` class
method.`),wU.forEach(t),rEo=i(tl),GC=n(tl,"P",{});var ZPe=s(GC);tEo=r(ZPe,"This class cannot be instantiated directly using "),Yse=n(ZPe,"CODE",{});var kZr=s(Yse);aEo=r(kZr,"__init__()"),kZr.forEach(t),nEo=r(ZPe," (throws an error)."),ZPe.forEach(t),sEo=i(tl),Ur=n(tl,"DIV",{class:!0});var al=s(Ur);m(OC.$$.fragment,al),lEo=i(al),Kse=n(al,"P",{});var SZr=s(Kse);iEo=r(SZr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),SZr.forEach(t),dEo=i(al),hd=n(al,"P",{});var AU=s(hd);cEo=r(AU,`Note:
Loading a model from its configuration file does `),Zse=n(AU,"STRONG",{});var RZr=s(Zse);fEo=r(RZr,"not"),RZr.forEach(t),mEo=r(AU,` load the model weights. It only affects the
model\u2019s configuration. Use `),kq=n(AU,"A",{href:!0});var BZr=s(kq);gEo=r(BZr,"from_pretrained()"),BZr.forEach(t),hEo=r(AU," to load the model weights."),AU.forEach(t),pEo=i(al),ele=n(al,"P",{});var PZr=s(ele);_Eo=r(PZr,"Examples:"),PZr.forEach(t),uEo=i(al),m(VC.$$.fragment,al),al.forEach(t),bEo=i(tl),Oe=n(tl,"DIV",{class:!0});var zt=s(Oe);m(XC.$$.fragment,zt),FEo=i(zt),ole=n(zt,"P",{});var $Zr=s(ole);vEo=r($Zr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),$Zr.forEach(t),TEo=i(zt),Ua=n(zt,"P",{});var B4=s(Ua);MEo=r(B4,"The model class to instantiate is selected based on the "),rle=n(B4,"CODE",{});var IZr=s(rle);EEo=r(IZr,"model_type"),IZr.forEach(t),CEo=r(B4,` property of the config object (either
passed as an argument or loaded from `),tle=n(B4,"CODE",{});var qZr=s(tle);wEo=r(qZr,"pretrained_model_name_or_path"),qZr.forEach(t),AEo=r(B4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ale=n(B4,"CODE",{});var NZr=s(ale);yEo=r(NZr,"pretrained_model_name_or_path"),NZr.forEach(t),LEo=r(B4,":"),B4.forEach(t),xEo=i(zt),y=n(zt,"UL",{});var L=s(y);db=n(L,"LI",{});var Q5e=s(db);nle=n(Q5e,"STRONG",{});var jZr=s(nle);kEo=r(jZr,"albert"),jZr.forEach(t),SEo=r(Q5e," \u2014 "),Sq=n(Q5e,"A",{href:!0});var DZr=s(Sq);REo=r(DZr,"AlbertForSequenceClassification"),DZr.forEach(t),BEo=r(Q5e," (ALBERT model)"),Q5e.forEach(t),PEo=i(L),cb=n(L,"LI",{});var W5e=s(cb);sle=n(W5e,"STRONG",{});var GZr=s(sle);$Eo=r(GZr,"bart"),GZr.forEach(t),IEo=r(W5e," \u2014 "),Rq=n(W5e,"A",{href:!0});var OZr=s(Rq);qEo=r(OZr,"BartForSequenceClassification"),OZr.forEach(t),NEo=r(W5e," (BART model)"),W5e.forEach(t),jEo=i(L),fb=n(L,"LI",{});var H5e=s(fb);lle=n(H5e,"STRONG",{});var VZr=s(lle);DEo=r(VZr,"bert"),VZr.forEach(t),GEo=r(H5e," \u2014 "),Bq=n(H5e,"A",{href:!0});var XZr=s(Bq);OEo=r(XZr,"BertForSequenceClassification"),XZr.forEach(t),VEo=r(H5e," (BERT model)"),H5e.forEach(t),XEo=i(L),mb=n(L,"LI",{});var U5e=s(mb);ile=n(U5e,"STRONG",{});var zZr=s(ile);zEo=r(zZr,"big_bird"),zZr.forEach(t),QEo=r(U5e," \u2014 "),Pq=n(U5e,"A",{href:!0});var QZr=s(Pq);WEo=r(QZr,"BigBirdForSequenceClassification"),QZr.forEach(t),HEo=r(U5e," (BigBird model)"),U5e.forEach(t),UEo=i(L),gb=n(L,"LI",{});var J5e=s(gb);dle=n(J5e,"STRONG",{});var WZr=s(dle);JEo=r(WZr,"bigbird_pegasus"),WZr.forEach(t),YEo=r(J5e," \u2014 "),$q=n(J5e,"A",{href:!0});var HZr=s($q);KEo=r(HZr,"BigBirdPegasusForSequenceClassification"),HZr.forEach(t),ZEo=r(J5e," (BigBirdPegasus model)"),J5e.forEach(t),eCo=i(L),hb=n(L,"LI",{});var Y5e=s(hb);cle=n(Y5e,"STRONG",{});var UZr=s(cle);oCo=r(UZr,"camembert"),UZr.forEach(t),rCo=r(Y5e," \u2014 "),Iq=n(Y5e,"A",{href:!0});var JZr=s(Iq);tCo=r(JZr,"CamembertForSequenceClassification"),JZr.forEach(t),aCo=r(Y5e," (CamemBERT model)"),Y5e.forEach(t),nCo=i(L),pb=n(L,"LI",{});var K5e=s(pb);fle=n(K5e,"STRONG",{});var YZr=s(fle);sCo=r(YZr,"canine"),YZr.forEach(t),lCo=r(K5e," \u2014 "),qq=n(K5e,"A",{href:!0});var KZr=s(qq);iCo=r(KZr,"CanineForSequenceClassification"),KZr.forEach(t),dCo=r(K5e," (Canine model)"),K5e.forEach(t),cCo=i(L),_b=n(L,"LI",{});var Z5e=s(_b);mle=n(Z5e,"STRONG",{});var ZZr=s(mle);fCo=r(ZZr,"convbert"),ZZr.forEach(t),mCo=r(Z5e," \u2014 "),Nq=n(Z5e,"A",{href:!0});var eet=s(Nq);gCo=r(eet,"ConvBertForSequenceClassification"),eet.forEach(t),hCo=r(Z5e," (ConvBERT model)"),Z5e.forEach(t),pCo=i(L),ub=n(L,"LI",{});var e3e=s(ub);gle=n(e3e,"STRONG",{});var oet=s(gle);_Co=r(oet,"ctrl"),oet.forEach(t),uCo=r(e3e," \u2014 "),jq=n(e3e,"A",{href:!0});var ret=s(jq);bCo=r(ret,"CTRLForSequenceClassification"),ret.forEach(t),FCo=r(e3e," (CTRL model)"),e3e.forEach(t),vCo=i(L),bb=n(L,"LI",{});var o3e=s(bb);hle=n(o3e,"STRONG",{});var tet=s(hle);TCo=r(tet,"data2vec-text"),tet.forEach(t),MCo=r(o3e," \u2014 "),Dq=n(o3e,"A",{href:!0});var aet=s(Dq);ECo=r(aet,"Data2VecTextForSequenceClassification"),aet.forEach(t),CCo=r(o3e," (Data2VecText model)"),o3e.forEach(t),wCo=i(L),Fb=n(L,"LI",{});var r3e=s(Fb);ple=n(r3e,"STRONG",{});var net=s(ple);ACo=r(net,"deberta"),net.forEach(t),yCo=r(r3e," \u2014 "),Gq=n(r3e,"A",{href:!0});var set=s(Gq);LCo=r(set,"DebertaForSequenceClassification"),set.forEach(t),xCo=r(r3e," (DeBERTa model)"),r3e.forEach(t),kCo=i(L),vb=n(L,"LI",{});var t3e=s(vb);_le=n(t3e,"STRONG",{});var iet=s(_le);SCo=r(iet,"deberta-v2"),iet.forEach(t),RCo=r(t3e," \u2014 "),Oq=n(t3e,"A",{href:!0});var det=s(Oq);BCo=r(det,"DebertaV2ForSequenceClassification"),det.forEach(t),PCo=r(t3e," (DeBERTa-v2 model)"),t3e.forEach(t),$Co=i(L),Tb=n(L,"LI",{});var a3e=s(Tb);ule=n(a3e,"STRONG",{});var cet=s(ule);ICo=r(cet,"distilbert"),cet.forEach(t),qCo=r(a3e," \u2014 "),Vq=n(a3e,"A",{href:!0});var fet=s(Vq);NCo=r(fet,"DistilBertForSequenceClassification"),fet.forEach(t),jCo=r(a3e," (DistilBERT model)"),a3e.forEach(t),DCo=i(L),Mb=n(L,"LI",{});var n3e=s(Mb);ble=n(n3e,"STRONG",{});var met=s(ble);GCo=r(met,"electra"),met.forEach(t),OCo=r(n3e," \u2014 "),Xq=n(n3e,"A",{href:!0});var get=s(Xq);VCo=r(get,"ElectraForSequenceClassification"),get.forEach(t),XCo=r(n3e," (ELECTRA model)"),n3e.forEach(t),zCo=i(L),Eb=n(L,"LI",{});var s3e=s(Eb);Fle=n(s3e,"STRONG",{});var het=s(Fle);QCo=r(het,"flaubert"),het.forEach(t),WCo=r(s3e," \u2014 "),zq=n(s3e,"A",{href:!0});var pet=s(zq);HCo=r(pet,"FlaubertForSequenceClassification"),pet.forEach(t),UCo=r(s3e," (FlauBERT model)"),s3e.forEach(t),JCo=i(L),Cb=n(L,"LI",{});var l3e=s(Cb);vle=n(l3e,"STRONG",{});var _et=s(vle);YCo=r(_et,"fnet"),_et.forEach(t),KCo=r(l3e," \u2014 "),Qq=n(l3e,"A",{href:!0});var uet=s(Qq);ZCo=r(uet,"FNetForSequenceClassification"),uet.forEach(t),e5o=r(l3e," (FNet model)"),l3e.forEach(t),o5o=i(L),wb=n(L,"LI",{});var i3e=s(wb);Tle=n(i3e,"STRONG",{});var bet=s(Tle);r5o=r(bet,"funnel"),bet.forEach(t),t5o=r(i3e," \u2014 "),Wq=n(i3e,"A",{href:!0});var Fet=s(Wq);a5o=r(Fet,"FunnelForSequenceClassification"),Fet.forEach(t),n5o=r(i3e," (Funnel Transformer model)"),i3e.forEach(t),s5o=i(L),Ab=n(L,"LI",{});var d3e=s(Ab);Mle=n(d3e,"STRONG",{});var vet=s(Mle);l5o=r(vet,"gpt2"),vet.forEach(t),i5o=r(d3e," \u2014 "),Hq=n(d3e,"A",{href:!0});var Tet=s(Hq);d5o=r(Tet,"GPT2ForSequenceClassification"),Tet.forEach(t),c5o=r(d3e," (OpenAI GPT-2 model)"),d3e.forEach(t),f5o=i(L),yb=n(L,"LI",{});var c3e=s(yb);Ele=n(c3e,"STRONG",{});var Met=s(Ele);m5o=r(Met,"gpt_neo"),Met.forEach(t),g5o=r(c3e," \u2014 "),Uq=n(c3e,"A",{href:!0});var Eet=s(Uq);h5o=r(Eet,"GPTNeoForSequenceClassification"),Eet.forEach(t),p5o=r(c3e," (GPT Neo model)"),c3e.forEach(t),_5o=i(L),Lb=n(L,"LI",{});var f3e=s(Lb);Cle=n(f3e,"STRONG",{});var Cet=s(Cle);u5o=r(Cet,"gptj"),Cet.forEach(t),b5o=r(f3e," \u2014 "),Jq=n(f3e,"A",{href:!0});var wet=s(Jq);F5o=r(wet,"GPTJForSequenceClassification"),wet.forEach(t),v5o=r(f3e," (GPT-J model)"),f3e.forEach(t),T5o=i(L),xb=n(L,"LI",{});var m3e=s(xb);wle=n(m3e,"STRONG",{});var Aet=s(wle);M5o=r(Aet,"ibert"),Aet.forEach(t),E5o=r(m3e," \u2014 "),Yq=n(m3e,"A",{href:!0});var yet=s(Yq);C5o=r(yet,"IBertForSequenceClassification"),yet.forEach(t),w5o=r(m3e," (I-BERT model)"),m3e.forEach(t),A5o=i(L),kb=n(L,"LI",{});var g3e=s(kb);Ale=n(g3e,"STRONG",{});var Let=s(Ale);y5o=r(Let,"layoutlm"),Let.forEach(t),L5o=r(g3e," \u2014 "),Kq=n(g3e,"A",{href:!0});var xet=s(Kq);x5o=r(xet,"LayoutLMForSequenceClassification"),xet.forEach(t),k5o=r(g3e," (LayoutLM model)"),g3e.forEach(t),S5o=i(L),Sb=n(L,"LI",{});var h3e=s(Sb);yle=n(h3e,"STRONG",{});var ket=s(yle);R5o=r(ket,"layoutlmv2"),ket.forEach(t),B5o=r(h3e," \u2014 "),Zq=n(h3e,"A",{href:!0});var Set=s(Zq);P5o=r(Set,"LayoutLMv2ForSequenceClassification"),Set.forEach(t),$5o=r(h3e," (LayoutLMv2 model)"),h3e.forEach(t),I5o=i(L),Rb=n(L,"LI",{});var p3e=s(Rb);Lle=n(p3e,"STRONG",{});var Ret=s(Lle);q5o=r(Ret,"led"),Ret.forEach(t),N5o=r(p3e," \u2014 "),eN=n(p3e,"A",{href:!0});var Bet=s(eN);j5o=r(Bet,"LEDForSequenceClassification"),Bet.forEach(t),D5o=r(p3e," (LED model)"),p3e.forEach(t),G5o=i(L),Bb=n(L,"LI",{});var _3e=s(Bb);xle=n(_3e,"STRONG",{});var Pet=s(xle);O5o=r(Pet,"longformer"),Pet.forEach(t),V5o=r(_3e," \u2014 "),oN=n(_3e,"A",{href:!0});var $et=s(oN);X5o=r($et,"LongformerForSequenceClassification"),$et.forEach(t),z5o=r(_3e," (Longformer model)"),_3e.forEach(t),Q5o=i(L),Pb=n(L,"LI",{});var u3e=s(Pb);kle=n(u3e,"STRONG",{});var Iet=s(kle);W5o=r(Iet,"mbart"),Iet.forEach(t),H5o=r(u3e," \u2014 "),rN=n(u3e,"A",{href:!0});var qet=s(rN);U5o=r(qet,"MBartForSequenceClassification"),qet.forEach(t),J5o=r(u3e," (mBART model)"),u3e.forEach(t),Y5o=i(L),$b=n(L,"LI",{});var b3e=s($b);Sle=n(b3e,"STRONG",{});var Net=s(Sle);K5o=r(Net,"megatron-bert"),Net.forEach(t),Z5o=r(b3e," \u2014 "),tN=n(b3e,"A",{href:!0});var jet=s(tN);e3o=r(jet,"MegatronBertForSequenceClassification"),jet.forEach(t),o3o=r(b3e," (MegatronBert model)"),b3e.forEach(t),r3o=i(L),Ib=n(L,"LI",{});var F3e=s(Ib);Rle=n(F3e,"STRONG",{});var Det=s(Rle);t3o=r(Det,"mobilebert"),Det.forEach(t),a3o=r(F3e," \u2014 "),aN=n(F3e,"A",{href:!0});var Get=s(aN);n3o=r(Get,"MobileBertForSequenceClassification"),Get.forEach(t),s3o=r(F3e," (MobileBERT model)"),F3e.forEach(t),l3o=i(L),qb=n(L,"LI",{});var v3e=s(qb);Ble=n(v3e,"STRONG",{});var Oet=s(Ble);i3o=r(Oet,"mpnet"),Oet.forEach(t),d3o=r(v3e," \u2014 "),nN=n(v3e,"A",{href:!0});var Vet=s(nN);c3o=r(Vet,"MPNetForSequenceClassification"),Vet.forEach(t),f3o=r(v3e," (MPNet model)"),v3e.forEach(t),m3o=i(L),Nb=n(L,"LI",{});var T3e=s(Nb);Ple=n(T3e,"STRONG",{});var Xet=s(Ple);g3o=r(Xet,"nystromformer"),Xet.forEach(t),h3o=r(T3e," \u2014 "),sN=n(T3e,"A",{href:!0});var zet=s(sN);p3o=r(zet,"NystromformerForSequenceClassification"),zet.forEach(t),_3o=r(T3e," (Nystromformer model)"),T3e.forEach(t),u3o=i(L),jb=n(L,"LI",{});var M3e=s(jb);$le=n(M3e,"STRONG",{});var Qet=s($le);b3o=r(Qet,"openai-gpt"),Qet.forEach(t),F3o=r(M3e," \u2014 "),lN=n(M3e,"A",{href:!0});var Wet=s(lN);v3o=r(Wet,"OpenAIGPTForSequenceClassification"),Wet.forEach(t),T3o=r(M3e," (OpenAI GPT model)"),M3e.forEach(t),M3o=i(L),Db=n(L,"LI",{});var E3e=s(Db);Ile=n(E3e,"STRONG",{});var Het=s(Ile);E3o=r(Het,"perceiver"),Het.forEach(t),C3o=r(E3e," \u2014 "),iN=n(E3e,"A",{href:!0});var Uet=s(iN);w3o=r(Uet,"PerceiverForSequenceClassification"),Uet.forEach(t),A3o=r(E3e," (Perceiver model)"),E3e.forEach(t),y3o=i(L),Gb=n(L,"LI",{});var C3e=s(Gb);qle=n(C3e,"STRONG",{});var Jet=s(qle);L3o=r(Jet,"plbart"),Jet.forEach(t),x3o=r(C3e," \u2014 "),dN=n(C3e,"A",{href:!0});var Yet=s(dN);k3o=r(Yet,"PLBartForSequenceClassification"),Yet.forEach(t),S3o=r(C3e," (PLBart model)"),C3e.forEach(t),R3o=i(L),Ob=n(L,"LI",{});var w3e=s(Ob);Nle=n(w3e,"STRONG",{});var Ket=s(Nle);B3o=r(Ket,"qdqbert"),Ket.forEach(t),P3o=r(w3e," \u2014 "),cN=n(w3e,"A",{href:!0});var Zet=s(cN);$3o=r(Zet,"QDQBertForSequenceClassification"),Zet.forEach(t),I3o=r(w3e," (QDQBert model)"),w3e.forEach(t),q3o=i(L),Vb=n(L,"LI",{});var A3e=s(Vb);jle=n(A3e,"STRONG",{});var eot=s(jle);N3o=r(eot,"reformer"),eot.forEach(t),j3o=r(A3e," \u2014 "),fN=n(A3e,"A",{href:!0});var oot=s(fN);D3o=r(oot,"ReformerForSequenceClassification"),oot.forEach(t),G3o=r(A3e," (Reformer model)"),A3e.forEach(t),O3o=i(L),Xb=n(L,"LI",{});var y3e=s(Xb);Dle=n(y3e,"STRONG",{});var rot=s(Dle);V3o=r(rot,"rembert"),rot.forEach(t),X3o=r(y3e," \u2014 "),mN=n(y3e,"A",{href:!0});var tot=s(mN);z3o=r(tot,"RemBertForSequenceClassification"),tot.forEach(t),Q3o=r(y3e," (RemBERT model)"),y3e.forEach(t),W3o=i(L),zb=n(L,"LI",{});var L3e=s(zb);Gle=n(L3e,"STRONG",{});var aot=s(Gle);H3o=r(aot,"roberta"),aot.forEach(t),U3o=r(L3e," \u2014 "),gN=n(L3e,"A",{href:!0});var not=s(gN);J3o=r(not,"RobertaForSequenceClassification"),not.forEach(t),Y3o=r(L3e," (RoBERTa model)"),L3e.forEach(t),K3o=i(L),Qb=n(L,"LI",{});var x3e=s(Qb);Ole=n(x3e,"STRONG",{});var sot=s(Ole);Z3o=r(sot,"roformer"),sot.forEach(t),ewo=r(x3e," \u2014 "),hN=n(x3e,"A",{href:!0});var lot=s(hN);owo=r(lot,"RoFormerForSequenceClassification"),lot.forEach(t),rwo=r(x3e," (RoFormer model)"),x3e.forEach(t),two=i(L),Wb=n(L,"LI",{});var k3e=s(Wb);Vle=n(k3e,"STRONG",{});var iot=s(Vle);awo=r(iot,"squeezebert"),iot.forEach(t),nwo=r(k3e," \u2014 "),pN=n(k3e,"A",{href:!0});var dot=s(pN);swo=r(dot,"SqueezeBertForSequenceClassification"),dot.forEach(t),lwo=r(k3e," (SqueezeBERT model)"),k3e.forEach(t),iwo=i(L),Hb=n(L,"LI",{});var S3e=s(Hb);Xle=n(S3e,"STRONG",{});var cot=s(Xle);dwo=r(cot,"tapas"),cot.forEach(t),cwo=r(S3e," \u2014 "),_N=n(S3e,"A",{href:!0});var fot=s(_N);fwo=r(fot,"TapasForSequenceClassification"),fot.forEach(t),mwo=r(S3e," (TAPAS model)"),S3e.forEach(t),gwo=i(L),Ub=n(L,"LI",{});var R3e=s(Ub);zle=n(R3e,"STRONG",{});var mot=s(zle);hwo=r(mot,"tapex"),mot.forEach(t),pwo=r(R3e," \u2014 "),uN=n(R3e,"A",{href:!0});var got=s(uN);_wo=r(got,"BartForSequenceClassification"),got.forEach(t),uwo=r(R3e," (TAPEX model)"),R3e.forEach(t),bwo=i(L),Jb=n(L,"LI",{});var B3e=s(Jb);Qle=n(B3e,"STRONG",{});var hot=s(Qle);Fwo=r(hot,"transfo-xl"),hot.forEach(t),vwo=r(B3e," \u2014 "),bN=n(B3e,"A",{href:!0});var pot=s(bN);Two=r(pot,"TransfoXLForSequenceClassification"),pot.forEach(t),Mwo=r(B3e," (Transformer-XL model)"),B3e.forEach(t),Ewo=i(L),Yb=n(L,"LI",{});var P3e=s(Yb);Wle=n(P3e,"STRONG",{});var _ot=s(Wle);Cwo=r(_ot,"xlm"),_ot.forEach(t),wwo=r(P3e," \u2014 "),FN=n(P3e,"A",{href:!0});var uot=s(FN);Awo=r(uot,"XLMForSequenceClassification"),uot.forEach(t),ywo=r(P3e," (XLM model)"),P3e.forEach(t),Lwo=i(L),Kb=n(L,"LI",{});var $3e=s(Kb);Hle=n($3e,"STRONG",{});var bot=s(Hle);xwo=r(bot,"xlm-roberta"),bot.forEach(t),kwo=r($3e," \u2014 "),vN=n($3e,"A",{href:!0});var Fot=s(vN);Swo=r(Fot,"XLMRobertaForSequenceClassification"),Fot.forEach(t),Rwo=r($3e," (XLM-RoBERTa model)"),$3e.forEach(t),Bwo=i(L),Zb=n(L,"LI",{});var I3e=s(Zb);Ule=n(I3e,"STRONG",{});var vot=s(Ule);Pwo=r(vot,"xlm-roberta-xl"),vot.forEach(t),$wo=r(I3e," \u2014 "),TN=n(I3e,"A",{href:!0});var Tot=s(TN);Iwo=r(Tot,"XLMRobertaXLForSequenceClassification"),Tot.forEach(t),qwo=r(I3e," (XLM-RoBERTa-XL model)"),I3e.forEach(t),Nwo=i(L),e2=n(L,"LI",{});var q3e=s(e2);Jle=n(q3e,"STRONG",{});var Mot=s(Jle);jwo=r(Mot,"xlnet"),Mot.forEach(t),Dwo=r(q3e," \u2014 "),MN=n(q3e,"A",{href:!0});var Eot=s(MN);Gwo=r(Eot,"XLNetForSequenceClassification"),Eot.forEach(t),Owo=r(q3e," (XLNet model)"),q3e.forEach(t),Vwo=i(L),o2=n(L,"LI",{});var N3e=s(o2);Yle=n(N3e,"STRONG",{});var Cot=s(Yle);Xwo=r(Cot,"yoso"),Cot.forEach(t),zwo=r(N3e," \u2014 "),EN=n(N3e,"A",{href:!0});var wot=s(EN);Qwo=r(wot,"YosoForSequenceClassification"),wot.forEach(t),Wwo=r(N3e," (YOSO model)"),N3e.forEach(t),L.forEach(t),Hwo=i(zt),r2=n(zt,"P",{});var j3e=s(r2);Uwo=r(j3e,"The model is set in evaluation mode by default using "),Kle=n(j3e,"CODE",{});var Aot=s(Kle);Jwo=r(Aot,"model.eval()"),Aot.forEach(t),Ywo=r(j3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zle=n(j3e,"CODE",{});var yot=s(Zle);Kwo=r(yot,"model.train()"),yot.forEach(t),j3e.forEach(t),Zwo=i(zt),eie=n(zt,"P",{});var Lot=s(eie);eAo=r(Lot,"Examples:"),Lot.forEach(t),oAo=i(zt),m(zC.$$.fragment,zt),zt.forEach(t),tl.forEach(t),zRe=i(c),pd=n(c,"H2",{class:!0});var e$e=s(pd);t2=n(e$e,"A",{id:!0,class:!0,href:!0});var xot=s(t2);oie=n(xot,"SPAN",{});var kot=s(oie);m(QC.$$.fragment,kot),kot.forEach(t),xot.forEach(t),rAo=i(e$e),rie=n(e$e,"SPAN",{});var Sot=s(rie);tAo=r(Sot,"AutoModelForMultipleChoice"),Sot.forEach(t),e$e.forEach(t),QRe=i(c),rr=n(c,"DIV",{class:!0});var nl=s(rr);m(WC.$$.fragment,nl),aAo=i(nl),_d=n(nl,"P",{});var yU=s(_d);nAo=r(yU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),CN=n(yU,"A",{href:!0});var Rot=s(CN);sAo=r(Rot,"from_pretrained()"),Rot.forEach(t),lAo=r(yU," class method or the "),wN=n(yU,"A",{href:!0});var Bot=s(wN);iAo=r(Bot,"from_config()"),Bot.forEach(t),dAo=r(yU,` class
method.`),yU.forEach(t),cAo=i(nl),HC=n(nl,"P",{});var o$e=s(HC);fAo=r(o$e,"This class cannot be instantiated directly using "),tie=n(o$e,"CODE",{});var Pot=s(tie);mAo=r(Pot,"__init__()"),Pot.forEach(t),gAo=r(o$e," (throws an error)."),o$e.forEach(t),hAo=i(nl),Jr=n(nl,"DIV",{class:!0});var sl=s(Jr);m(UC.$$.fragment,sl),pAo=i(sl),aie=n(sl,"P",{});var $ot=s(aie);_Ao=r($ot,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),$ot.forEach(t),uAo=i(sl),ud=n(sl,"P",{});var LU=s(ud);bAo=r(LU,`Note:
Loading a model from its configuration file does `),nie=n(LU,"STRONG",{});var Iot=s(nie);FAo=r(Iot,"not"),Iot.forEach(t),vAo=r(LU,` load the model weights. It only affects the
model\u2019s configuration. Use `),AN=n(LU,"A",{href:!0});var qot=s(AN);TAo=r(qot,"from_pretrained()"),qot.forEach(t),MAo=r(LU," to load the model weights."),LU.forEach(t),EAo=i(sl),sie=n(sl,"P",{});var Not=s(sie);CAo=r(Not,"Examples:"),Not.forEach(t),wAo=i(sl),m(JC.$$.fragment,sl),sl.forEach(t),AAo=i(nl),Ve=n(nl,"DIV",{class:!0});var Qt=s(Ve);m(YC.$$.fragment,Qt),yAo=i(Qt),lie=n(Qt,"P",{});var jot=s(lie);LAo=r(jot,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),jot.forEach(t),xAo=i(Qt),Ja=n(Qt,"P",{});var P4=s(Ja);kAo=r(P4,"The model class to instantiate is selected based on the "),iie=n(P4,"CODE",{});var Dot=s(iie);SAo=r(Dot,"model_type"),Dot.forEach(t),RAo=r(P4,` property of the config object (either
passed as an argument or loaded from `),die=n(P4,"CODE",{});var Got=s(die);BAo=r(Got,"pretrained_model_name_or_path"),Got.forEach(t),PAo=r(P4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cie=n(P4,"CODE",{});var Oot=s(cie);$Ao=r(Oot,"pretrained_model_name_or_path"),Oot.forEach(t),IAo=r(P4,":"),P4.forEach(t),qAo=i(Qt),G=n(Qt,"UL",{});var O=s(G);a2=n(O,"LI",{});var D3e=s(a2);fie=n(D3e,"STRONG",{});var Vot=s(fie);NAo=r(Vot,"albert"),Vot.forEach(t),jAo=r(D3e," \u2014 "),yN=n(D3e,"A",{href:!0});var Xot=s(yN);DAo=r(Xot,"AlbertForMultipleChoice"),Xot.forEach(t),GAo=r(D3e," (ALBERT model)"),D3e.forEach(t),OAo=i(O),n2=n(O,"LI",{});var G3e=s(n2);mie=n(G3e,"STRONG",{});var zot=s(mie);VAo=r(zot,"bert"),zot.forEach(t),XAo=r(G3e," \u2014 "),LN=n(G3e,"A",{href:!0});var Qot=s(LN);zAo=r(Qot,"BertForMultipleChoice"),Qot.forEach(t),QAo=r(G3e," (BERT model)"),G3e.forEach(t),WAo=i(O),s2=n(O,"LI",{});var O3e=s(s2);gie=n(O3e,"STRONG",{});var Wot=s(gie);HAo=r(Wot,"big_bird"),Wot.forEach(t),UAo=r(O3e," \u2014 "),xN=n(O3e,"A",{href:!0});var Hot=s(xN);JAo=r(Hot,"BigBirdForMultipleChoice"),Hot.forEach(t),YAo=r(O3e," (BigBird model)"),O3e.forEach(t),KAo=i(O),l2=n(O,"LI",{});var V3e=s(l2);hie=n(V3e,"STRONG",{});var Uot=s(hie);ZAo=r(Uot,"camembert"),Uot.forEach(t),eyo=r(V3e," \u2014 "),kN=n(V3e,"A",{href:!0});var Jot=s(kN);oyo=r(Jot,"CamembertForMultipleChoice"),Jot.forEach(t),ryo=r(V3e," (CamemBERT model)"),V3e.forEach(t),tyo=i(O),i2=n(O,"LI",{});var X3e=s(i2);pie=n(X3e,"STRONG",{});var Yot=s(pie);ayo=r(Yot,"canine"),Yot.forEach(t),nyo=r(X3e," \u2014 "),SN=n(X3e,"A",{href:!0});var Kot=s(SN);syo=r(Kot,"CanineForMultipleChoice"),Kot.forEach(t),lyo=r(X3e," (Canine model)"),X3e.forEach(t),iyo=i(O),d2=n(O,"LI",{});var z3e=s(d2);_ie=n(z3e,"STRONG",{});var Zot=s(_ie);dyo=r(Zot,"convbert"),Zot.forEach(t),cyo=r(z3e," \u2014 "),RN=n(z3e,"A",{href:!0});var ert=s(RN);fyo=r(ert,"ConvBertForMultipleChoice"),ert.forEach(t),myo=r(z3e," (ConvBERT model)"),z3e.forEach(t),gyo=i(O),c2=n(O,"LI",{});var Q3e=s(c2);uie=n(Q3e,"STRONG",{});var ort=s(uie);hyo=r(ort,"data2vec-text"),ort.forEach(t),pyo=r(Q3e," \u2014 "),BN=n(Q3e,"A",{href:!0});var rrt=s(BN);_yo=r(rrt,"Data2VecTextForMultipleChoice"),rrt.forEach(t),uyo=r(Q3e," (Data2VecText model)"),Q3e.forEach(t),byo=i(O),f2=n(O,"LI",{});var W3e=s(f2);bie=n(W3e,"STRONG",{});var trt=s(bie);Fyo=r(trt,"distilbert"),trt.forEach(t),vyo=r(W3e," \u2014 "),PN=n(W3e,"A",{href:!0});var art=s(PN);Tyo=r(art,"DistilBertForMultipleChoice"),art.forEach(t),Myo=r(W3e," (DistilBERT model)"),W3e.forEach(t),Eyo=i(O),m2=n(O,"LI",{});var H3e=s(m2);Fie=n(H3e,"STRONG",{});var nrt=s(Fie);Cyo=r(nrt,"electra"),nrt.forEach(t),wyo=r(H3e," \u2014 "),$N=n(H3e,"A",{href:!0});var srt=s($N);Ayo=r(srt,"ElectraForMultipleChoice"),srt.forEach(t),yyo=r(H3e," (ELECTRA model)"),H3e.forEach(t),Lyo=i(O),g2=n(O,"LI",{});var U3e=s(g2);vie=n(U3e,"STRONG",{});var lrt=s(vie);xyo=r(lrt,"flaubert"),lrt.forEach(t),kyo=r(U3e," \u2014 "),IN=n(U3e,"A",{href:!0});var irt=s(IN);Syo=r(irt,"FlaubertForMultipleChoice"),irt.forEach(t),Ryo=r(U3e," (FlauBERT model)"),U3e.forEach(t),Byo=i(O),h2=n(O,"LI",{});var J3e=s(h2);Tie=n(J3e,"STRONG",{});var drt=s(Tie);Pyo=r(drt,"fnet"),drt.forEach(t),$yo=r(J3e," \u2014 "),qN=n(J3e,"A",{href:!0});var crt=s(qN);Iyo=r(crt,"FNetForMultipleChoice"),crt.forEach(t),qyo=r(J3e," (FNet model)"),J3e.forEach(t),Nyo=i(O),p2=n(O,"LI",{});var Y3e=s(p2);Mie=n(Y3e,"STRONG",{});var frt=s(Mie);jyo=r(frt,"funnel"),frt.forEach(t),Dyo=r(Y3e," \u2014 "),NN=n(Y3e,"A",{href:!0});var mrt=s(NN);Gyo=r(mrt,"FunnelForMultipleChoice"),mrt.forEach(t),Oyo=r(Y3e," (Funnel Transformer model)"),Y3e.forEach(t),Vyo=i(O),_2=n(O,"LI",{});var K3e=s(_2);Eie=n(K3e,"STRONG",{});var grt=s(Eie);Xyo=r(grt,"ibert"),grt.forEach(t),zyo=r(K3e," \u2014 "),jN=n(K3e,"A",{href:!0});var hrt=s(jN);Qyo=r(hrt,"IBertForMultipleChoice"),hrt.forEach(t),Wyo=r(K3e," (I-BERT model)"),K3e.forEach(t),Hyo=i(O),u2=n(O,"LI",{});var Z3e=s(u2);Cie=n(Z3e,"STRONG",{});var prt=s(Cie);Uyo=r(prt,"longformer"),prt.forEach(t),Jyo=r(Z3e," \u2014 "),DN=n(Z3e,"A",{href:!0});var _rt=s(DN);Yyo=r(_rt,"LongformerForMultipleChoice"),_rt.forEach(t),Kyo=r(Z3e," (Longformer model)"),Z3e.forEach(t),Zyo=i(O),b2=n(O,"LI",{});var ewe=s(b2);wie=n(ewe,"STRONG",{});var urt=s(wie);eLo=r(urt,"megatron-bert"),urt.forEach(t),oLo=r(ewe," \u2014 "),GN=n(ewe,"A",{href:!0});var brt=s(GN);rLo=r(brt,"MegatronBertForMultipleChoice"),brt.forEach(t),tLo=r(ewe," (MegatronBert model)"),ewe.forEach(t),aLo=i(O),F2=n(O,"LI",{});var owe=s(F2);Aie=n(owe,"STRONG",{});var Frt=s(Aie);nLo=r(Frt,"mobilebert"),Frt.forEach(t),sLo=r(owe," \u2014 "),ON=n(owe,"A",{href:!0});var vrt=s(ON);lLo=r(vrt,"MobileBertForMultipleChoice"),vrt.forEach(t),iLo=r(owe," (MobileBERT model)"),owe.forEach(t),dLo=i(O),v2=n(O,"LI",{});var rwe=s(v2);yie=n(rwe,"STRONG",{});var Trt=s(yie);cLo=r(Trt,"mpnet"),Trt.forEach(t),fLo=r(rwe," \u2014 "),VN=n(rwe,"A",{href:!0});var Mrt=s(VN);mLo=r(Mrt,"MPNetForMultipleChoice"),Mrt.forEach(t),gLo=r(rwe," (MPNet model)"),rwe.forEach(t),hLo=i(O),T2=n(O,"LI",{});var twe=s(T2);Lie=n(twe,"STRONG",{});var Ert=s(Lie);pLo=r(Ert,"nystromformer"),Ert.forEach(t),_Lo=r(twe," \u2014 "),XN=n(twe,"A",{href:!0});var Crt=s(XN);uLo=r(Crt,"NystromformerForMultipleChoice"),Crt.forEach(t),bLo=r(twe," (Nystromformer model)"),twe.forEach(t),FLo=i(O),M2=n(O,"LI",{});var awe=s(M2);xie=n(awe,"STRONG",{});var wrt=s(xie);vLo=r(wrt,"qdqbert"),wrt.forEach(t),TLo=r(awe," \u2014 "),zN=n(awe,"A",{href:!0});var Art=s(zN);MLo=r(Art,"QDQBertForMultipleChoice"),Art.forEach(t),ELo=r(awe," (QDQBert model)"),awe.forEach(t),CLo=i(O),E2=n(O,"LI",{});var nwe=s(E2);kie=n(nwe,"STRONG",{});var yrt=s(kie);wLo=r(yrt,"rembert"),yrt.forEach(t),ALo=r(nwe," \u2014 "),QN=n(nwe,"A",{href:!0});var Lrt=s(QN);yLo=r(Lrt,"RemBertForMultipleChoice"),Lrt.forEach(t),LLo=r(nwe," (RemBERT model)"),nwe.forEach(t),xLo=i(O),C2=n(O,"LI",{});var swe=s(C2);Sie=n(swe,"STRONG",{});var xrt=s(Sie);kLo=r(xrt,"roberta"),xrt.forEach(t),SLo=r(swe," \u2014 "),WN=n(swe,"A",{href:!0});var krt=s(WN);RLo=r(krt,"RobertaForMultipleChoice"),krt.forEach(t),BLo=r(swe," (RoBERTa model)"),swe.forEach(t),PLo=i(O),w2=n(O,"LI",{});var lwe=s(w2);Rie=n(lwe,"STRONG",{});var Srt=s(Rie);$Lo=r(Srt,"roformer"),Srt.forEach(t),ILo=r(lwe," \u2014 "),HN=n(lwe,"A",{href:!0});var Rrt=s(HN);qLo=r(Rrt,"RoFormerForMultipleChoice"),Rrt.forEach(t),NLo=r(lwe," (RoFormer model)"),lwe.forEach(t),jLo=i(O),A2=n(O,"LI",{});var iwe=s(A2);Bie=n(iwe,"STRONG",{});var Brt=s(Bie);DLo=r(Brt,"squeezebert"),Brt.forEach(t),GLo=r(iwe," \u2014 "),UN=n(iwe,"A",{href:!0});var Prt=s(UN);OLo=r(Prt,"SqueezeBertForMultipleChoice"),Prt.forEach(t),VLo=r(iwe," (SqueezeBERT model)"),iwe.forEach(t),XLo=i(O),y2=n(O,"LI",{});var dwe=s(y2);Pie=n(dwe,"STRONG",{});var $rt=s(Pie);zLo=r($rt,"xlm"),$rt.forEach(t),QLo=r(dwe," \u2014 "),JN=n(dwe,"A",{href:!0});var Irt=s(JN);WLo=r(Irt,"XLMForMultipleChoice"),Irt.forEach(t),HLo=r(dwe," (XLM model)"),dwe.forEach(t),ULo=i(O),L2=n(O,"LI",{});var cwe=s(L2);$ie=n(cwe,"STRONG",{});var qrt=s($ie);JLo=r(qrt,"xlm-roberta"),qrt.forEach(t),YLo=r(cwe," \u2014 "),YN=n(cwe,"A",{href:!0});var Nrt=s(YN);KLo=r(Nrt,"XLMRobertaForMultipleChoice"),Nrt.forEach(t),ZLo=r(cwe," (XLM-RoBERTa model)"),cwe.forEach(t),e9o=i(O),x2=n(O,"LI",{});var fwe=s(x2);Iie=n(fwe,"STRONG",{});var jrt=s(Iie);o9o=r(jrt,"xlm-roberta-xl"),jrt.forEach(t),r9o=r(fwe," \u2014 "),KN=n(fwe,"A",{href:!0});var Drt=s(KN);t9o=r(Drt,"XLMRobertaXLForMultipleChoice"),Drt.forEach(t),a9o=r(fwe," (XLM-RoBERTa-XL model)"),fwe.forEach(t),n9o=i(O),k2=n(O,"LI",{});var mwe=s(k2);qie=n(mwe,"STRONG",{});var Grt=s(qie);s9o=r(Grt,"xlnet"),Grt.forEach(t),l9o=r(mwe," \u2014 "),ZN=n(mwe,"A",{href:!0});var Ort=s(ZN);i9o=r(Ort,"XLNetForMultipleChoice"),Ort.forEach(t),d9o=r(mwe," (XLNet model)"),mwe.forEach(t),c9o=i(O),S2=n(O,"LI",{});var gwe=s(S2);Nie=n(gwe,"STRONG",{});var Vrt=s(Nie);f9o=r(Vrt,"yoso"),Vrt.forEach(t),m9o=r(gwe," \u2014 "),ej=n(gwe,"A",{href:!0});var Xrt=s(ej);g9o=r(Xrt,"YosoForMultipleChoice"),Xrt.forEach(t),h9o=r(gwe," (YOSO model)"),gwe.forEach(t),O.forEach(t),p9o=i(Qt),R2=n(Qt,"P",{});var hwe=s(R2);_9o=r(hwe,"The model is set in evaluation mode by default using "),jie=n(hwe,"CODE",{});var zrt=s(jie);u9o=r(zrt,"model.eval()"),zrt.forEach(t),b9o=r(hwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Die=n(hwe,"CODE",{});var Qrt=s(Die);F9o=r(Qrt,"model.train()"),Qrt.forEach(t),hwe.forEach(t),v9o=i(Qt),Gie=n(Qt,"P",{});var Wrt=s(Gie);T9o=r(Wrt,"Examples:"),Wrt.forEach(t),M9o=i(Qt),m(KC.$$.fragment,Qt),Qt.forEach(t),nl.forEach(t),WRe=i(c),bd=n(c,"H2",{class:!0});var r$e=s(bd);B2=n(r$e,"A",{id:!0,class:!0,href:!0});var Hrt=s(B2);Oie=n(Hrt,"SPAN",{});var Urt=s(Oie);m(ZC.$$.fragment,Urt),Urt.forEach(t),Hrt.forEach(t),E9o=i(r$e),Vie=n(r$e,"SPAN",{});var Jrt=s(Vie);C9o=r(Jrt,"AutoModelForNextSentencePrediction"),Jrt.forEach(t),r$e.forEach(t),HRe=i(c),tr=n(c,"DIV",{class:!0});var ll=s(tr);m(e5.$$.fragment,ll),w9o=i(ll),Fd=n(ll,"P",{});var xU=s(Fd);A9o=r(xU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),oj=n(xU,"A",{href:!0});var Yrt=s(oj);y9o=r(Yrt,"from_pretrained()"),Yrt.forEach(t),L9o=r(xU," class method or the "),rj=n(xU,"A",{href:!0});var Krt=s(rj);x9o=r(Krt,"from_config()"),Krt.forEach(t),k9o=r(xU,` class
method.`),xU.forEach(t),S9o=i(ll),o5=n(ll,"P",{});var t$e=s(o5);R9o=r(t$e,"This class cannot be instantiated directly using "),Xie=n(t$e,"CODE",{});var Zrt=s(Xie);B9o=r(Zrt,"__init__()"),Zrt.forEach(t),P9o=r(t$e," (throws an error)."),t$e.forEach(t),$9o=i(ll),Yr=n(ll,"DIV",{class:!0});var il=s(Yr);m(r5.$$.fragment,il),I9o=i(il),zie=n(il,"P",{});var ett=s(zie);q9o=r(ett,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),ett.forEach(t),N9o=i(il),vd=n(il,"P",{});var kU=s(vd);j9o=r(kU,`Note:
Loading a model from its configuration file does `),Qie=n(kU,"STRONG",{});var ott=s(Qie);D9o=r(ott,"not"),ott.forEach(t),G9o=r(kU,` load the model weights. It only affects the
model\u2019s configuration. Use `),tj=n(kU,"A",{href:!0});var rtt=s(tj);O9o=r(rtt,"from_pretrained()"),rtt.forEach(t),V9o=r(kU," to load the model weights."),kU.forEach(t),X9o=i(il),Wie=n(il,"P",{});var ttt=s(Wie);z9o=r(ttt,"Examples:"),ttt.forEach(t),Q9o=i(il),m(t5.$$.fragment,il),il.forEach(t),W9o=i(ll),Xe=n(ll,"DIV",{class:!0});var Wt=s(Xe);m(a5.$$.fragment,Wt),H9o=i(Wt),Hie=n(Wt,"P",{});var att=s(Hie);U9o=r(att,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),att.forEach(t),J9o=i(Wt),Ya=n(Wt,"P",{});var $4=s(Ya);Y9o=r($4,"The model class to instantiate is selected based on the "),Uie=n($4,"CODE",{});var ntt=s(Uie);K9o=r(ntt,"model_type"),ntt.forEach(t),Z9o=r($4,` property of the config object (either
passed as an argument or loaded from `),Jie=n($4,"CODE",{});var stt=s(Jie);exo=r(stt,"pretrained_model_name_or_path"),stt.forEach(t),oxo=r($4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yie=n($4,"CODE",{});var ltt=s(Yie);rxo=r(ltt,"pretrained_model_name_or_path"),ltt.forEach(t),txo=r($4,":"),$4.forEach(t),axo=i(Wt),da=n(Wt,"UL",{});var dl=s(da);P2=n(dl,"LI",{});var pwe=s(P2);Kie=n(pwe,"STRONG",{});var itt=s(Kie);nxo=r(itt,"bert"),itt.forEach(t),sxo=r(pwe," \u2014 "),aj=n(pwe,"A",{href:!0});var dtt=s(aj);lxo=r(dtt,"BertForNextSentencePrediction"),dtt.forEach(t),ixo=r(pwe," (BERT model)"),pwe.forEach(t),dxo=i(dl),$2=n(dl,"LI",{});var _we=s($2);Zie=n(_we,"STRONG",{});var ctt=s(Zie);cxo=r(ctt,"fnet"),ctt.forEach(t),fxo=r(_we," \u2014 "),nj=n(_we,"A",{href:!0});var ftt=s(nj);mxo=r(ftt,"FNetForNextSentencePrediction"),ftt.forEach(t),gxo=r(_we," (FNet model)"),_we.forEach(t),hxo=i(dl),I2=n(dl,"LI",{});var uwe=s(I2);ede=n(uwe,"STRONG",{});var mtt=s(ede);pxo=r(mtt,"megatron-bert"),mtt.forEach(t),_xo=r(uwe," \u2014 "),sj=n(uwe,"A",{href:!0});var gtt=s(sj);uxo=r(gtt,"MegatronBertForNextSentencePrediction"),gtt.forEach(t),bxo=r(uwe," (MegatronBert model)"),uwe.forEach(t),Fxo=i(dl),q2=n(dl,"LI",{});var bwe=s(q2);ode=n(bwe,"STRONG",{});var htt=s(ode);vxo=r(htt,"mobilebert"),htt.forEach(t),Txo=r(bwe," \u2014 "),lj=n(bwe,"A",{href:!0});var ptt=s(lj);Mxo=r(ptt,"MobileBertForNextSentencePrediction"),ptt.forEach(t),Exo=r(bwe," (MobileBERT model)"),bwe.forEach(t),Cxo=i(dl),N2=n(dl,"LI",{});var Fwe=s(N2);rde=n(Fwe,"STRONG",{});var _tt=s(rde);wxo=r(_tt,"qdqbert"),_tt.forEach(t),Axo=r(Fwe," \u2014 "),ij=n(Fwe,"A",{href:!0});var utt=s(ij);yxo=r(utt,"QDQBertForNextSentencePrediction"),utt.forEach(t),Lxo=r(Fwe," (QDQBert model)"),Fwe.forEach(t),dl.forEach(t),xxo=i(Wt),j2=n(Wt,"P",{});var vwe=s(j2);kxo=r(vwe,"The model is set in evaluation mode by default using "),tde=n(vwe,"CODE",{});var btt=s(tde);Sxo=r(btt,"model.eval()"),btt.forEach(t),Rxo=r(vwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ade=n(vwe,"CODE",{});var Ftt=s(ade);Bxo=r(Ftt,"model.train()"),Ftt.forEach(t),vwe.forEach(t),Pxo=i(Wt),nde=n(Wt,"P",{});var vtt=s(nde);$xo=r(vtt,"Examples:"),vtt.forEach(t),Ixo=i(Wt),m(n5.$$.fragment,Wt),Wt.forEach(t),ll.forEach(t),URe=i(c),Td=n(c,"H2",{class:!0});var a$e=s(Td);D2=n(a$e,"A",{id:!0,class:!0,href:!0});var Ttt=s(D2);sde=n(Ttt,"SPAN",{});var Mtt=s(sde);m(s5.$$.fragment,Mtt),Mtt.forEach(t),Ttt.forEach(t),qxo=i(a$e),lde=n(a$e,"SPAN",{});var Ett=s(lde);Nxo=r(Ett,"AutoModelForTokenClassification"),Ett.forEach(t),a$e.forEach(t),JRe=i(c),ar=n(c,"DIV",{class:!0});var cl=s(ar);m(l5.$$.fragment,cl),jxo=i(cl),Md=n(cl,"P",{});var SU=s(Md);Dxo=r(SU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),dj=n(SU,"A",{href:!0});var Ctt=s(dj);Gxo=r(Ctt,"from_pretrained()"),Ctt.forEach(t),Oxo=r(SU," class method or the "),cj=n(SU,"A",{href:!0});var wtt=s(cj);Vxo=r(wtt,"from_config()"),wtt.forEach(t),Xxo=r(SU,` class
method.`),SU.forEach(t),zxo=i(cl),i5=n(cl,"P",{});var n$e=s(i5);Qxo=r(n$e,"This class cannot be instantiated directly using "),ide=n(n$e,"CODE",{});var Att=s(ide);Wxo=r(Att,"__init__()"),Att.forEach(t),Hxo=r(n$e," (throws an error)."),n$e.forEach(t),Uxo=i(cl),Kr=n(cl,"DIV",{class:!0});var fl=s(Kr);m(d5.$$.fragment,fl),Jxo=i(fl),dde=n(fl,"P",{});var ytt=s(dde);Yxo=r(ytt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),ytt.forEach(t),Kxo=i(fl),Ed=n(fl,"P",{});var RU=s(Ed);Zxo=r(RU,`Note:
Loading a model from its configuration file does `),cde=n(RU,"STRONG",{});var Ltt=s(cde);eko=r(Ltt,"not"),Ltt.forEach(t),oko=r(RU,` load the model weights. It only affects the
model\u2019s configuration. Use `),fj=n(RU,"A",{href:!0});var xtt=s(fj);rko=r(xtt,"from_pretrained()"),xtt.forEach(t),tko=r(RU," to load the model weights."),RU.forEach(t),ako=i(fl),fde=n(fl,"P",{});var ktt=s(fde);nko=r(ktt,"Examples:"),ktt.forEach(t),sko=i(fl),m(c5.$$.fragment,fl),fl.forEach(t),lko=i(cl),ze=n(cl,"DIV",{class:!0});var Ht=s(ze);m(f5.$$.fragment,Ht),iko=i(Ht),mde=n(Ht,"P",{});var Stt=s(mde);dko=r(Stt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Stt.forEach(t),cko=i(Ht),Ka=n(Ht,"P",{});var I4=s(Ka);fko=r(I4,"The model class to instantiate is selected based on the "),gde=n(I4,"CODE",{});var Rtt=s(gde);mko=r(Rtt,"model_type"),Rtt.forEach(t),gko=r(I4,` property of the config object (either
passed as an argument or loaded from `),hde=n(I4,"CODE",{});var Btt=s(hde);hko=r(Btt,"pretrained_model_name_or_path"),Btt.forEach(t),pko=r(I4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pde=n(I4,"CODE",{});var Ptt=s(pde);_ko=r(Ptt,"pretrained_model_name_or_path"),Ptt.forEach(t),uko=r(I4,":"),I4.forEach(t),bko=i(Ht),j=n(Ht,"UL",{});var D=s(j);G2=n(D,"LI",{});var Twe=s(G2);_de=n(Twe,"STRONG",{});var $tt=s(_de);Fko=r($tt,"albert"),$tt.forEach(t),vko=r(Twe," \u2014 "),mj=n(Twe,"A",{href:!0});var Itt=s(mj);Tko=r(Itt,"AlbertForTokenClassification"),Itt.forEach(t),Mko=r(Twe," (ALBERT model)"),Twe.forEach(t),Eko=i(D),O2=n(D,"LI",{});var Mwe=s(O2);ude=n(Mwe,"STRONG",{});var qtt=s(ude);Cko=r(qtt,"bert"),qtt.forEach(t),wko=r(Mwe," \u2014 "),gj=n(Mwe,"A",{href:!0});var Ntt=s(gj);Ako=r(Ntt,"BertForTokenClassification"),Ntt.forEach(t),yko=r(Mwe," (BERT model)"),Mwe.forEach(t),Lko=i(D),V2=n(D,"LI",{});var Ewe=s(V2);bde=n(Ewe,"STRONG",{});var jtt=s(bde);xko=r(jtt,"big_bird"),jtt.forEach(t),kko=r(Ewe," \u2014 "),hj=n(Ewe,"A",{href:!0});var Dtt=s(hj);Sko=r(Dtt,"BigBirdForTokenClassification"),Dtt.forEach(t),Rko=r(Ewe," (BigBird model)"),Ewe.forEach(t),Bko=i(D),X2=n(D,"LI",{});var Cwe=s(X2);Fde=n(Cwe,"STRONG",{});var Gtt=s(Fde);Pko=r(Gtt,"camembert"),Gtt.forEach(t),$ko=r(Cwe," \u2014 "),pj=n(Cwe,"A",{href:!0});var Ott=s(pj);Iko=r(Ott,"CamembertForTokenClassification"),Ott.forEach(t),qko=r(Cwe," (CamemBERT model)"),Cwe.forEach(t),Nko=i(D),z2=n(D,"LI",{});var wwe=s(z2);vde=n(wwe,"STRONG",{});var Vtt=s(vde);jko=r(Vtt,"canine"),Vtt.forEach(t),Dko=r(wwe," \u2014 "),_j=n(wwe,"A",{href:!0});var Xtt=s(_j);Gko=r(Xtt,"CanineForTokenClassification"),Xtt.forEach(t),Oko=r(wwe," (Canine model)"),wwe.forEach(t),Vko=i(D),Q2=n(D,"LI",{});var Awe=s(Q2);Tde=n(Awe,"STRONG",{});var ztt=s(Tde);Xko=r(ztt,"convbert"),ztt.forEach(t),zko=r(Awe," \u2014 "),uj=n(Awe,"A",{href:!0});var Qtt=s(uj);Qko=r(Qtt,"ConvBertForTokenClassification"),Qtt.forEach(t),Wko=r(Awe," (ConvBERT model)"),Awe.forEach(t),Hko=i(D),W2=n(D,"LI",{});var ywe=s(W2);Mde=n(ywe,"STRONG",{});var Wtt=s(Mde);Uko=r(Wtt,"data2vec-text"),Wtt.forEach(t),Jko=r(ywe," \u2014 "),bj=n(ywe,"A",{href:!0});var Htt=s(bj);Yko=r(Htt,"Data2VecTextForTokenClassification"),Htt.forEach(t),Kko=r(ywe," (Data2VecText model)"),ywe.forEach(t),Zko=i(D),H2=n(D,"LI",{});var Lwe=s(H2);Ede=n(Lwe,"STRONG",{});var Utt=s(Ede);eSo=r(Utt,"deberta"),Utt.forEach(t),oSo=r(Lwe," \u2014 "),Fj=n(Lwe,"A",{href:!0});var Jtt=s(Fj);rSo=r(Jtt,"DebertaForTokenClassification"),Jtt.forEach(t),tSo=r(Lwe," (DeBERTa model)"),Lwe.forEach(t),aSo=i(D),U2=n(D,"LI",{});var xwe=s(U2);Cde=n(xwe,"STRONG",{});var Ytt=s(Cde);nSo=r(Ytt,"deberta-v2"),Ytt.forEach(t),sSo=r(xwe," \u2014 "),vj=n(xwe,"A",{href:!0});var Ktt=s(vj);lSo=r(Ktt,"DebertaV2ForTokenClassification"),Ktt.forEach(t),iSo=r(xwe," (DeBERTa-v2 model)"),xwe.forEach(t),dSo=i(D),J2=n(D,"LI",{});var kwe=s(J2);wde=n(kwe,"STRONG",{});var Ztt=s(wde);cSo=r(Ztt,"distilbert"),Ztt.forEach(t),fSo=r(kwe," \u2014 "),Tj=n(kwe,"A",{href:!0});var eat=s(Tj);mSo=r(eat,"DistilBertForTokenClassification"),eat.forEach(t),gSo=r(kwe," (DistilBERT model)"),kwe.forEach(t),hSo=i(D),Y2=n(D,"LI",{});var Swe=s(Y2);Ade=n(Swe,"STRONG",{});var oat=s(Ade);pSo=r(oat,"electra"),oat.forEach(t),_So=r(Swe," \u2014 "),Mj=n(Swe,"A",{href:!0});var rat=s(Mj);uSo=r(rat,"ElectraForTokenClassification"),rat.forEach(t),bSo=r(Swe," (ELECTRA model)"),Swe.forEach(t),FSo=i(D),K2=n(D,"LI",{});var Rwe=s(K2);yde=n(Rwe,"STRONG",{});var tat=s(yde);vSo=r(tat,"flaubert"),tat.forEach(t),TSo=r(Rwe," \u2014 "),Ej=n(Rwe,"A",{href:!0});var aat=s(Ej);MSo=r(aat,"FlaubertForTokenClassification"),aat.forEach(t),ESo=r(Rwe," (FlauBERT model)"),Rwe.forEach(t),CSo=i(D),Z2=n(D,"LI",{});var Bwe=s(Z2);Lde=n(Bwe,"STRONG",{});var nat=s(Lde);wSo=r(nat,"fnet"),nat.forEach(t),ASo=r(Bwe," \u2014 "),Cj=n(Bwe,"A",{href:!0});var sat=s(Cj);ySo=r(sat,"FNetForTokenClassification"),sat.forEach(t),LSo=r(Bwe," (FNet model)"),Bwe.forEach(t),xSo=i(D),eF=n(D,"LI",{});var Pwe=s(eF);xde=n(Pwe,"STRONG",{});var lat=s(xde);kSo=r(lat,"funnel"),lat.forEach(t),SSo=r(Pwe," \u2014 "),wj=n(Pwe,"A",{href:!0});var iat=s(wj);RSo=r(iat,"FunnelForTokenClassification"),iat.forEach(t),BSo=r(Pwe," (Funnel Transformer model)"),Pwe.forEach(t),PSo=i(D),oF=n(D,"LI",{});var $we=s(oF);kde=n($we,"STRONG",{});var dat=s(kde);$So=r(dat,"gpt2"),dat.forEach(t),ISo=r($we," \u2014 "),Aj=n($we,"A",{href:!0});var cat=s(Aj);qSo=r(cat,"GPT2ForTokenClassification"),cat.forEach(t),NSo=r($we," (OpenAI GPT-2 model)"),$we.forEach(t),jSo=i(D),rF=n(D,"LI",{});var Iwe=s(rF);Sde=n(Iwe,"STRONG",{});var fat=s(Sde);DSo=r(fat,"ibert"),fat.forEach(t),GSo=r(Iwe," \u2014 "),yj=n(Iwe,"A",{href:!0});var mat=s(yj);OSo=r(mat,"IBertForTokenClassification"),mat.forEach(t),VSo=r(Iwe," (I-BERT model)"),Iwe.forEach(t),XSo=i(D),tF=n(D,"LI",{});var qwe=s(tF);Rde=n(qwe,"STRONG",{});var gat=s(Rde);zSo=r(gat,"layoutlm"),gat.forEach(t),QSo=r(qwe," \u2014 "),Lj=n(qwe,"A",{href:!0});var hat=s(Lj);WSo=r(hat,"LayoutLMForTokenClassification"),hat.forEach(t),HSo=r(qwe," (LayoutLM model)"),qwe.forEach(t),USo=i(D),aF=n(D,"LI",{});var Nwe=s(aF);Bde=n(Nwe,"STRONG",{});var pat=s(Bde);JSo=r(pat,"layoutlmv2"),pat.forEach(t),YSo=r(Nwe," \u2014 "),xj=n(Nwe,"A",{href:!0});var _at=s(xj);KSo=r(_at,"LayoutLMv2ForTokenClassification"),_at.forEach(t),ZSo=r(Nwe," (LayoutLMv2 model)"),Nwe.forEach(t),eRo=i(D),nF=n(D,"LI",{});var jwe=s(nF);Pde=n(jwe,"STRONG",{});var uat=s(Pde);oRo=r(uat,"longformer"),uat.forEach(t),rRo=r(jwe," \u2014 "),kj=n(jwe,"A",{href:!0});var bat=s(kj);tRo=r(bat,"LongformerForTokenClassification"),bat.forEach(t),aRo=r(jwe," (Longformer model)"),jwe.forEach(t),nRo=i(D),sF=n(D,"LI",{});var Dwe=s(sF);$de=n(Dwe,"STRONG",{});var Fat=s($de);sRo=r(Fat,"megatron-bert"),Fat.forEach(t),lRo=r(Dwe," \u2014 "),Sj=n(Dwe,"A",{href:!0});var vat=s(Sj);iRo=r(vat,"MegatronBertForTokenClassification"),vat.forEach(t),dRo=r(Dwe," (MegatronBert model)"),Dwe.forEach(t),cRo=i(D),lF=n(D,"LI",{});var Gwe=s(lF);Ide=n(Gwe,"STRONG",{});var Tat=s(Ide);fRo=r(Tat,"mobilebert"),Tat.forEach(t),mRo=r(Gwe," \u2014 "),Rj=n(Gwe,"A",{href:!0});var Mat=s(Rj);gRo=r(Mat,"MobileBertForTokenClassification"),Mat.forEach(t),hRo=r(Gwe," (MobileBERT model)"),Gwe.forEach(t),pRo=i(D),iF=n(D,"LI",{});var Owe=s(iF);qde=n(Owe,"STRONG",{});var Eat=s(qde);_Ro=r(Eat,"mpnet"),Eat.forEach(t),uRo=r(Owe," \u2014 "),Bj=n(Owe,"A",{href:!0});var Cat=s(Bj);bRo=r(Cat,"MPNetForTokenClassification"),Cat.forEach(t),FRo=r(Owe," (MPNet model)"),Owe.forEach(t),vRo=i(D),dF=n(D,"LI",{});var Vwe=s(dF);Nde=n(Vwe,"STRONG",{});var wat=s(Nde);TRo=r(wat,"nystromformer"),wat.forEach(t),MRo=r(Vwe," \u2014 "),Pj=n(Vwe,"A",{href:!0});var Aat=s(Pj);ERo=r(Aat,"NystromformerForTokenClassification"),Aat.forEach(t),CRo=r(Vwe," (Nystromformer model)"),Vwe.forEach(t),wRo=i(D),cF=n(D,"LI",{});var Xwe=s(cF);jde=n(Xwe,"STRONG",{});var yat=s(jde);ARo=r(yat,"qdqbert"),yat.forEach(t),yRo=r(Xwe," \u2014 "),$j=n(Xwe,"A",{href:!0});var Lat=s($j);LRo=r(Lat,"QDQBertForTokenClassification"),Lat.forEach(t),xRo=r(Xwe," (QDQBert model)"),Xwe.forEach(t),kRo=i(D),fF=n(D,"LI",{});var zwe=s(fF);Dde=n(zwe,"STRONG",{});var xat=s(Dde);SRo=r(xat,"rembert"),xat.forEach(t),RRo=r(zwe," \u2014 "),Ij=n(zwe,"A",{href:!0});var kat=s(Ij);BRo=r(kat,"RemBertForTokenClassification"),kat.forEach(t),PRo=r(zwe," (RemBERT model)"),zwe.forEach(t),$Ro=i(D),mF=n(D,"LI",{});var Qwe=s(mF);Gde=n(Qwe,"STRONG",{});var Sat=s(Gde);IRo=r(Sat,"roberta"),Sat.forEach(t),qRo=r(Qwe," \u2014 "),qj=n(Qwe,"A",{href:!0});var Rat=s(qj);NRo=r(Rat,"RobertaForTokenClassification"),Rat.forEach(t),jRo=r(Qwe," (RoBERTa model)"),Qwe.forEach(t),DRo=i(D),gF=n(D,"LI",{});var Wwe=s(gF);Ode=n(Wwe,"STRONG",{});var Bat=s(Ode);GRo=r(Bat,"roformer"),Bat.forEach(t),ORo=r(Wwe," \u2014 "),Nj=n(Wwe,"A",{href:!0});var Pat=s(Nj);VRo=r(Pat,"RoFormerForTokenClassification"),Pat.forEach(t),XRo=r(Wwe," (RoFormer model)"),Wwe.forEach(t),zRo=i(D),hF=n(D,"LI",{});var Hwe=s(hF);Vde=n(Hwe,"STRONG",{});var $at=s(Vde);QRo=r($at,"squeezebert"),$at.forEach(t),WRo=r(Hwe," \u2014 "),jj=n(Hwe,"A",{href:!0});var Iat=s(jj);HRo=r(Iat,"SqueezeBertForTokenClassification"),Iat.forEach(t),URo=r(Hwe," (SqueezeBERT model)"),Hwe.forEach(t),JRo=i(D),pF=n(D,"LI",{});var Uwe=s(pF);Xde=n(Uwe,"STRONG",{});var qat=s(Xde);YRo=r(qat,"xlm"),qat.forEach(t),KRo=r(Uwe," \u2014 "),Dj=n(Uwe,"A",{href:!0});var Nat=s(Dj);ZRo=r(Nat,"XLMForTokenClassification"),Nat.forEach(t),eBo=r(Uwe," (XLM model)"),Uwe.forEach(t),oBo=i(D),_F=n(D,"LI",{});var Jwe=s(_F);zde=n(Jwe,"STRONG",{});var jat=s(zde);rBo=r(jat,"xlm-roberta"),jat.forEach(t),tBo=r(Jwe," \u2014 "),Gj=n(Jwe,"A",{href:!0});var Dat=s(Gj);aBo=r(Dat,"XLMRobertaForTokenClassification"),Dat.forEach(t),nBo=r(Jwe," (XLM-RoBERTa model)"),Jwe.forEach(t),sBo=i(D),uF=n(D,"LI",{});var Ywe=s(uF);Qde=n(Ywe,"STRONG",{});var Gat=s(Qde);lBo=r(Gat,"xlm-roberta-xl"),Gat.forEach(t),iBo=r(Ywe," \u2014 "),Oj=n(Ywe,"A",{href:!0});var Oat=s(Oj);dBo=r(Oat,"XLMRobertaXLForTokenClassification"),Oat.forEach(t),cBo=r(Ywe," (XLM-RoBERTa-XL model)"),Ywe.forEach(t),fBo=i(D),bF=n(D,"LI",{});var Kwe=s(bF);Wde=n(Kwe,"STRONG",{});var Vat=s(Wde);mBo=r(Vat,"xlnet"),Vat.forEach(t),gBo=r(Kwe," \u2014 "),Vj=n(Kwe,"A",{href:!0});var Xat=s(Vj);hBo=r(Xat,"XLNetForTokenClassification"),Xat.forEach(t),pBo=r(Kwe," (XLNet model)"),Kwe.forEach(t),_Bo=i(D),FF=n(D,"LI",{});var Zwe=s(FF);Hde=n(Zwe,"STRONG",{});var zat=s(Hde);uBo=r(zat,"yoso"),zat.forEach(t),bBo=r(Zwe," \u2014 "),Xj=n(Zwe,"A",{href:!0});var Qat=s(Xj);FBo=r(Qat,"YosoForTokenClassification"),Qat.forEach(t),vBo=r(Zwe," (YOSO model)"),Zwe.forEach(t),D.forEach(t),TBo=i(Ht),vF=n(Ht,"P",{});var eAe=s(vF);MBo=r(eAe,"The model is set in evaluation mode by default using "),Ude=n(eAe,"CODE",{});var Wat=s(Ude);EBo=r(Wat,"model.eval()"),Wat.forEach(t),CBo=r(eAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jde=n(eAe,"CODE",{});var Hat=s(Jde);wBo=r(Hat,"model.train()"),Hat.forEach(t),eAe.forEach(t),ABo=i(Ht),Yde=n(Ht,"P",{});var Uat=s(Yde);yBo=r(Uat,"Examples:"),Uat.forEach(t),LBo=i(Ht),m(m5.$$.fragment,Ht),Ht.forEach(t),cl.forEach(t),YRe=i(c),Cd=n(c,"H2",{class:!0});var s$e=s(Cd);TF=n(s$e,"A",{id:!0,class:!0,href:!0});var Jat=s(TF);Kde=n(Jat,"SPAN",{});var Yat=s(Kde);m(g5.$$.fragment,Yat),Yat.forEach(t),Jat.forEach(t),xBo=i(s$e),Zde=n(s$e,"SPAN",{});var Kat=s(Zde);kBo=r(Kat,"AutoModelForQuestionAnswering"),Kat.forEach(t),s$e.forEach(t),KRe=i(c),nr=n(c,"DIV",{class:!0});var ml=s(nr);m(h5.$$.fragment,ml),SBo=i(ml),wd=n(ml,"P",{});var BU=s(wd);RBo=r(BU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),zj=n(BU,"A",{href:!0});var Zat=s(zj);BBo=r(Zat,"from_pretrained()"),Zat.forEach(t),PBo=r(BU," class method or the "),Qj=n(BU,"A",{href:!0});var ent=s(Qj);$Bo=r(ent,"from_config()"),ent.forEach(t),IBo=r(BU,` class
method.`),BU.forEach(t),qBo=i(ml),p5=n(ml,"P",{});var l$e=s(p5);NBo=r(l$e,"This class cannot be instantiated directly using "),ece=n(l$e,"CODE",{});var ont=s(ece);jBo=r(ont,"__init__()"),ont.forEach(t),DBo=r(l$e," (throws an error)."),l$e.forEach(t),GBo=i(ml),Zr=n(ml,"DIV",{class:!0});var gl=s(Zr);m(_5.$$.fragment,gl),OBo=i(gl),oce=n(gl,"P",{});var rnt=s(oce);VBo=r(rnt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),rnt.forEach(t),XBo=i(gl),Ad=n(gl,"P",{});var PU=s(Ad);zBo=r(PU,`Note:
Loading a model from its configuration file does `),rce=n(PU,"STRONG",{});var tnt=s(rce);QBo=r(tnt,"not"),tnt.forEach(t),WBo=r(PU,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wj=n(PU,"A",{href:!0});var ant=s(Wj);HBo=r(ant,"from_pretrained()"),ant.forEach(t),UBo=r(PU," to load the model weights."),PU.forEach(t),JBo=i(gl),tce=n(gl,"P",{});var nnt=s(tce);YBo=r(nnt,"Examples:"),nnt.forEach(t),KBo=i(gl),m(u5.$$.fragment,gl),gl.forEach(t),ZBo=i(ml),Qe=n(ml,"DIV",{class:!0});var Ut=s(Qe);m(b5.$$.fragment,Ut),ePo=i(Ut),ace=n(Ut,"P",{});var snt=s(ace);oPo=r(snt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),snt.forEach(t),rPo=i(Ut),Za=n(Ut,"P",{});var q4=s(Za);tPo=r(q4,"The model class to instantiate is selected based on the "),nce=n(q4,"CODE",{});var lnt=s(nce);aPo=r(lnt,"model_type"),lnt.forEach(t),nPo=r(q4,` property of the config object (either
passed as an argument or loaded from `),sce=n(q4,"CODE",{});var int=s(sce);sPo=r(int,"pretrained_model_name_or_path"),int.forEach(t),lPo=r(q4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lce=n(q4,"CODE",{});var dnt=s(lce);iPo=r(dnt,"pretrained_model_name_or_path"),dnt.forEach(t),dPo=r(q4,":"),q4.forEach(t),cPo=i(Ut),R=n(Ut,"UL",{});var P=s(R);MF=n(P,"LI",{});var oAe=s(MF);ice=n(oAe,"STRONG",{});var cnt=s(ice);fPo=r(cnt,"albert"),cnt.forEach(t),mPo=r(oAe," \u2014 "),Hj=n(oAe,"A",{href:!0});var fnt=s(Hj);gPo=r(fnt,"AlbertForQuestionAnswering"),fnt.forEach(t),hPo=r(oAe," (ALBERT model)"),oAe.forEach(t),pPo=i(P),EF=n(P,"LI",{});var rAe=s(EF);dce=n(rAe,"STRONG",{});var mnt=s(dce);_Po=r(mnt,"bart"),mnt.forEach(t),uPo=r(rAe," \u2014 "),Uj=n(rAe,"A",{href:!0});var gnt=s(Uj);bPo=r(gnt,"BartForQuestionAnswering"),gnt.forEach(t),FPo=r(rAe," (BART model)"),rAe.forEach(t),vPo=i(P),CF=n(P,"LI",{});var tAe=s(CF);cce=n(tAe,"STRONG",{});var hnt=s(cce);TPo=r(hnt,"bert"),hnt.forEach(t),MPo=r(tAe," \u2014 "),Jj=n(tAe,"A",{href:!0});var pnt=s(Jj);EPo=r(pnt,"BertForQuestionAnswering"),pnt.forEach(t),CPo=r(tAe," (BERT model)"),tAe.forEach(t),wPo=i(P),wF=n(P,"LI",{});var aAe=s(wF);fce=n(aAe,"STRONG",{});var _nt=s(fce);APo=r(_nt,"big_bird"),_nt.forEach(t),yPo=r(aAe," \u2014 "),Yj=n(aAe,"A",{href:!0});var unt=s(Yj);LPo=r(unt,"BigBirdForQuestionAnswering"),unt.forEach(t),xPo=r(aAe," (BigBird model)"),aAe.forEach(t),kPo=i(P),AF=n(P,"LI",{});var nAe=s(AF);mce=n(nAe,"STRONG",{});var bnt=s(mce);SPo=r(bnt,"bigbird_pegasus"),bnt.forEach(t),RPo=r(nAe," \u2014 "),Kj=n(nAe,"A",{href:!0});var Fnt=s(Kj);BPo=r(Fnt,"BigBirdPegasusForQuestionAnswering"),Fnt.forEach(t),PPo=r(nAe," (BigBirdPegasus model)"),nAe.forEach(t),$Po=i(P),yF=n(P,"LI",{});var sAe=s(yF);gce=n(sAe,"STRONG",{});var vnt=s(gce);IPo=r(vnt,"camembert"),vnt.forEach(t),qPo=r(sAe," \u2014 "),Zj=n(sAe,"A",{href:!0});var Tnt=s(Zj);NPo=r(Tnt,"CamembertForQuestionAnswering"),Tnt.forEach(t),jPo=r(sAe," (CamemBERT model)"),sAe.forEach(t),DPo=i(P),LF=n(P,"LI",{});var lAe=s(LF);hce=n(lAe,"STRONG",{});var Mnt=s(hce);GPo=r(Mnt,"canine"),Mnt.forEach(t),OPo=r(lAe," \u2014 "),eD=n(lAe,"A",{href:!0});var Ent=s(eD);VPo=r(Ent,"CanineForQuestionAnswering"),Ent.forEach(t),XPo=r(lAe," (Canine model)"),lAe.forEach(t),zPo=i(P),xF=n(P,"LI",{});var iAe=s(xF);pce=n(iAe,"STRONG",{});var Cnt=s(pce);QPo=r(Cnt,"convbert"),Cnt.forEach(t),WPo=r(iAe," \u2014 "),oD=n(iAe,"A",{href:!0});var wnt=s(oD);HPo=r(wnt,"ConvBertForQuestionAnswering"),wnt.forEach(t),UPo=r(iAe," (ConvBERT model)"),iAe.forEach(t),JPo=i(P),kF=n(P,"LI",{});var dAe=s(kF);_ce=n(dAe,"STRONG",{});var Ant=s(_ce);YPo=r(Ant,"data2vec-text"),Ant.forEach(t),KPo=r(dAe," \u2014 "),rD=n(dAe,"A",{href:!0});var ynt=s(rD);ZPo=r(ynt,"Data2VecTextForQuestionAnswering"),ynt.forEach(t),e$o=r(dAe," (Data2VecText model)"),dAe.forEach(t),o$o=i(P),SF=n(P,"LI",{});var cAe=s(SF);uce=n(cAe,"STRONG",{});var Lnt=s(uce);r$o=r(Lnt,"deberta"),Lnt.forEach(t),t$o=r(cAe," \u2014 "),tD=n(cAe,"A",{href:!0});var xnt=s(tD);a$o=r(xnt,"DebertaForQuestionAnswering"),xnt.forEach(t),n$o=r(cAe," (DeBERTa model)"),cAe.forEach(t),s$o=i(P),RF=n(P,"LI",{});var fAe=s(RF);bce=n(fAe,"STRONG",{});var knt=s(bce);l$o=r(knt,"deberta-v2"),knt.forEach(t),i$o=r(fAe," \u2014 "),aD=n(fAe,"A",{href:!0});var Snt=s(aD);d$o=r(Snt,"DebertaV2ForQuestionAnswering"),Snt.forEach(t),c$o=r(fAe," (DeBERTa-v2 model)"),fAe.forEach(t),f$o=i(P),BF=n(P,"LI",{});var mAe=s(BF);Fce=n(mAe,"STRONG",{});var Rnt=s(Fce);m$o=r(Rnt,"distilbert"),Rnt.forEach(t),g$o=r(mAe," \u2014 "),nD=n(mAe,"A",{href:!0});var Bnt=s(nD);h$o=r(Bnt,"DistilBertForQuestionAnswering"),Bnt.forEach(t),p$o=r(mAe," (DistilBERT model)"),mAe.forEach(t),_$o=i(P),PF=n(P,"LI",{});var gAe=s(PF);vce=n(gAe,"STRONG",{});var Pnt=s(vce);u$o=r(Pnt,"electra"),Pnt.forEach(t),b$o=r(gAe," \u2014 "),sD=n(gAe,"A",{href:!0});var $nt=s(sD);F$o=r($nt,"ElectraForQuestionAnswering"),$nt.forEach(t),v$o=r(gAe," (ELECTRA model)"),gAe.forEach(t),T$o=i(P),$F=n(P,"LI",{});var hAe=s($F);Tce=n(hAe,"STRONG",{});var Int=s(Tce);M$o=r(Int,"flaubert"),Int.forEach(t),E$o=r(hAe," \u2014 "),lD=n(hAe,"A",{href:!0});var qnt=s(lD);C$o=r(qnt,"FlaubertForQuestionAnsweringSimple"),qnt.forEach(t),w$o=r(hAe," (FlauBERT model)"),hAe.forEach(t),A$o=i(P),IF=n(P,"LI",{});var pAe=s(IF);Mce=n(pAe,"STRONG",{});var Nnt=s(Mce);y$o=r(Nnt,"fnet"),Nnt.forEach(t),L$o=r(pAe," \u2014 "),iD=n(pAe,"A",{href:!0});var jnt=s(iD);x$o=r(jnt,"FNetForQuestionAnswering"),jnt.forEach(t),k$o=r(pAe," (FNet model)"),pAe.forEach(t),S$o=i(P),qF=n(P,"LI",{});var _Ae=s(qF);Ece=n(_Ae,"STRONG",{});var Dnt=s(Ece);R$o=r(Dnt,"funnel"),Dnt.forEach(t),B$o=r(_Ae," \u2014 "),dD=n(_Ae,"A",{href:!0});var Gnt=s(dD);P$o=r(Gnt,"FunnelForQuestionAnswering"),Gnt.forEach(t),$$o=r(_Ae," (Funnel Transformer model)"),_Ae.forEach(t),I$o=i(P),NF=n(P,"LI",{});var uAe=s(NF);Cce=n(uAe,"STRONG",{});var Ont=s(Cce);q$o=r(Ont,"gptj"),Ont.forEach(t),N$o=r(uAe," \u2014 "),cD=n(uAe,"A",{href:!0});var Vnt=s(cD);j$o=r(Vnt,"GPTJForQuestionAnswering"),Vnt.forEach(t),D$o=r(uAe," (GPT-J model)"),uAe.forEach(t),G$o=i(P),jF=n(P,"LI",{});var bAe=s(jF);wce=n(bAe,"STRONG",{});var Xnt=s(wce);O$o=r(Xnt,"ibert"),Xnt.forEach(t),V$o=r(bAe," \u2014 "),fD=n(bAe,"A",{href:!0});var znt=s(fD);X$o=r(znt,"IBertForQuestionAnswering"),znt.forEach(t),z$o=r(bAe," (I-BERT model)"),bAe.forEach(t),Q$o=i(P),DF=n(P,"LI",{});var FAe=s(DF);Ace=n(FAe,"STRONG",{});var Qnt=s(Ace);W$o=r(Qnt,"layoutlmv2"),Qnt.forEach(t),H$o=r(FAe," \u2014 "),mD=n(FAe,"A",{href:!0});var Wnt=s(mD);U$o=r(Wnt,"LayoutLMv2ForQuestionAnswering"),Wnt.forEach(t),J$o=r(FAe," (LayoutLMv2 model)"),FAe.forEach(t),Y$o=i(P),GF=n(P,"LI",{});var vAe=s(GF);yce=n(vAe,"STRONG",{});var Hnt=s(yce);K$o=r(Hnt,"led"),Hnt.forEach(t),Z$o=r(vAe," \u2014 "),gD=n(vAe,"A",{href:!0});var Unt=s(gD);eIo=r(Unt,"LEDForQuestionAnswering"),Unt.forEach(t),oIo=r(vAe," (LED model)"),vAe.forEach(t),rIo=i(P),OF=n(P,"LI",{});var TAe=s(OF);Lce=n(TAe,"STRONG",{});var Jnt=s(Lce);tIo=r(Jnt,"longformer"),Jnt.forEach(t),aIo=r(TAe," \u2014 "),hD=n(TAe,"A",{href:!0});var Ynt=s(hD);nIo=r(Ynt,"LongformerForQuestionAnswering"),Ynt.forEach(t),sIo=r(TAe," (Longformer model)"),TAe.forEach(t),lIo=i(P),VF=n(P,"LI",{});var MAe=s(VF);xce=n(MAe,"STRONG",{});var Knt=s(xce);iIo=r(Knt,"lxmert"),Knt.forEach(t),dIo=r(MAe," \u2014 "),pD=n(MAe,"A",{href:!0});var Znt=s(pD);cIo=r(Znt,"LxmertForQuestionAnswering"),Znt.forEach(t),fIo=r(MAe," (LXMERT model)"),MAe.forEach(t),mIo=i(P),XF=n(P,"LI",{});var EAe=s(XF);kce=n(EAe,"STRONG",{});var est=s(kce);gIo=r(est,"mbart"),est.forEach(t),hIo=r(EAe," \u2014 "),_D=n(EAe,"A",{href:!0});var ost=s(_D);pIo=r(ost,"MBartForQuestionAnswering"),ost.forEach(t),_Io=r(EAe," (mBART model)"),EAe.forEach(t),uIo=i(P),zF=n(P,"LI",{});var CAe=s(zF);Sce=n(CAe,"STRONG",{});var rst=s(Sce);bIo=r(rst,"megatron-bert"),rst.forEach(t),FIo=r(CAe," \u2014 "),uD=n(CAe,"A",{href:!0});var tst=s(uD);vIo=r(tst,"MegatronBertForQuestionAnswering"),tst.forEach(t),TIo=r(CAe," (MegatronBert model)"),CAe.forEach(t),MIo=i(P),QF=n(P,"LI",{});var wAe=s(QF);Rce=n(wAe,"STRONG",{});var ast=s(Rce);EIo=r(ast,"mobilebert"),ast.forEach(t),CIo=r(wAe," \u2014 "),bD=n(wAe,"A",{href:!0});var nst=s(bD);wIo=r(nst,"MobileBertForQuestionAnswering"),nst.forEach(t),AIo=r(wAe," (MobileBERT model)"),wAe.forEach(t),yIo=i(P),WF=n(P,"LI",{});var AAe=s(WF);Bce=n(AAe,"STRONG",{});var sst=s(Bce);LIo=r(sst,"mpnet"),sst.forEach(t),xIo=r(AAe," \u2014 "),FD=n(AAe,"A",{href:!0});var lst=s(FD);kIo=r(lst,"MPNetForQuestionAnswering"),lst.forEach(t),SIo=r(AAe," (MPNet model)"),AAe.forEach(t),RIo=i(P),HF=n(P,"LI",{});var yAe=s(HF);Pce=n(yAe,"STRONG",{});var ist=s(Pce);BIo=r(ist,"nystromformer"),ist.forEach(t),PIo=r(yAe," \u2014 "),vD=n(yAe,"A",{href:!0});var dst=s(vD);$Io=r(dst,"NystromformerForQuestionAnswering"),dst.forEach(t),IIo=r(yAe," (Nystromformer model)"),yAe.forEach(t),qIo=i(P),UF=n(P,"LI",{});var LAe=s(UF);$ce=n(LAe,"STRONG",{});var cst=s($ce);NIo=r(cst,"qdqbert"),cst.forEach(t),jIo=r(LAe," \u2014 "),TD=n(LAe,"A",{href:!0});var fst=s(TD);DIo=r(fst,"QDQBertForQuestionAnswering"),fst.forEach(t),GIo=r(LAe," (QDQBert model)"),LAe.forEach(t),OIo=i(P),JF=n(P,"LI",{});var xAe=s(JF);Ice=n(xAe,"STRONG",{});var mst=s(Ice);VIo=r(mst,"reformer"),mst.forEach(t),XIo=r(xAe," \u2014 "),MD=n(xAe,"A",{href:!0});var gst=s(MD);zIo=r(gst,"ReformerForQuestionAnswering"),gst.forEach(t),QIo=r(xAe," (Reformer model)"),xAe.forEach(t),WIo=i(P),YF=n(P,"LI",{});var kAe=s(YF);qce=n(kAe,"STRONG",{});var hst=s(qce);HIo=r(hst,"rembert"),hst.forEach(t),UIo=r(kAe," \u2014 "),ED=n(kAe,"A",{href:!0});var pst=s(ED);JIo=r(pst,"RemBertForQuestionAnswering"),pst.forEach(t),YIo=r(kAe," (RemBERT model)"),kAe.forEach(t),KIo=i(P),KF=n(P,"LI",{});var SAe=s(KF);Nce=n(SAe,"STRONG",{});var _st=s(Nce);ZIo=r(_st,"roberta"),_st.forEach(t),eqo=r(SAe," \u2014 "),CD=n(SAe,"A",{href:!0});var ust=s(CD);oqo=r(ust,"RobertaForQuestionAnswering"),ust.forEach(t),rqo=r(SAe," (RoBERTa model)"),SAe.forEach(t),tqo=i(P),ZF=n(P,"LI",{});var RAe=s(ZF);jce=n(RAe,"STRONG",{});var bst=s(jce);aqo=r(bst,"roformer"),bst.forEach(t),nqo=r(RAe," \u2014 "),wD=n(RAe,"A",{href:!0});var Fst=s(wD);sqo=r(Fst,"RoFormerForQuestionAnswering"),Fst.forEach(t),lqo=r(RAe," (RoFormer model)"),RAe.forEach(t),iqo=i(P),ev=n(P,"LI",{});var BAe=s(ev);Dce=n(BAe,"STRONG",{});var vst=s(Dce);dqo=r(vst,"splinter"),vst.forEach(t),cqo=r(BAe," \u2014 "),AD=n(BAe,"A",{href:!0});var Tst=s(AD);fqo=r(Tst,"SplinterForQuestionAnswering"),Tst.forEach(t),mqo=r(BAe," (Splinter model)"),BAe.forEach(t),gqo=i(P),ov=n(P,"LI",{});var PAe=s(ov);Gce=n(PAe,"STRONG",{});var Mst=s(Gce);hqo=r(Mst,"squeezebert"),Mst.forEach(t),pqo=r(PAe," \u2014 "),yD=n(PAe,"A",{href:!0});var Est=s(yD);_qo=r(Est,"SqueezeBertForQuestionAnswering"),Est.forEach(t),uqo=r(PAe," (SqueezeBERT model)"),PAe.forEach(t),bqo=i(P),rv=n(P,"LI",{});var $Ae=s(rv);Oce=n($Ae,"STRONG",{});var Cst=s(Oce);Fqo=r(Cst,"xlm"),Cst.forEach(t),vqo=r($Ae," \u2014 "),LD=n($Ae,"A",{href:!0});var wst=s(LD);Tqo=r(wst,"XLMForQuestionAnsweringSimple"),wst.forEach(t),Mqo=r($Ae," (XLM model)"),$Ae.forEach(t),Eqo=i(P),tv=n(P,"LI",{});var IAe=s(tv);Vce=n(IAe,"STRONG",{});var Ast=s(Vce);Cqo=r(Ast,"xlm-roberta"),Ast.forEach(t),wqo=r(IAe," \u2014 "),xD=n(IAe,"A",{href:!0});var yst=s(xD);Aqo=r(yst,"XLMRobertaForQuestionAnswering"),yst.forEach(t),yqo=r(IAe," (XLM-RoBERTa model)"),IAe.forEach(t),Lqo=i(P),av=n(P,"LI",{});var qAe=s(av);Xce=n(qAe,"STRONG",{});var Lst=s(Xce);xqo=r(Lst,"xlm-roberta-xl"),Lst.forEach(t),kqo=r(qAe," \u2014 "),kD=n(qAe,"A",{href:!0});var xst=s(kD);Sqo=r(xst,"XLMRobertaXLForQuestionAnswering"),xst.forEach(t),Rqo=r(qAe," (XLM-RoBERTa-XL model)"),qAe.forEach(t),Bqo=i(P),nv=n(P,"LI",{});var NAe=s(nv);zce=n(NAe,"STRONG",{});var kst=s(zce);Pqo=r(kst,"xlnet"),kst.forEach(t),$qo=r(NAe," \u2014 "),SD=n(NAe,"A",{href:!0});var Sst=s(SD);Iqo=r(Sst,"XLNetForQuestionAnsweringSimple"),Sst.forEach(t),qqo=r(NAe," (XLNet model)"),NAe.forEach(t),Nqo=i(P),sv=n(P,"LI",{});var jAe=s(sv);Qce=n(jAe,"STRONG",{});var Rst=s(Qce);jqo=r(Rst,"yoso"),Rst.forEach(t),Dqo=r(jAe," \u2014 "),RD=n(jAe,"A",{href:!0});var Bst=s(RD);Gqo=r(Bst,"YosoForQuestionAnswering"),Bst.forEach(t),Oqo=r(jAe," (YOSO model)"),jAe.forEach(t),P.forEach(t),Vqo=i(Ut),lv=n(Ut,"P",{});var DAe=s(lv);Xqo=r(DAe,"The model is set in evaluation mode by default using "),Wce=n(DAe,"CODE",{});var Pst=s(Wce);zqo=r(Pst,"model.eval()"),Pst.forEach(t),Qqo=r(DAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hce=n(DAe,"CODE",{});var $st=s(Hce);Wqo=r($st,"model.train()"),$st.forEach(t),DAe.forEach(t),Hqo=i(Ut),Uce=n(Ut,"P",{});var Ist=s(Uce);Uqo=r(Ist,"Examples:"),Ist.forEach(t),Jqo=i(Ut),m(F5.$$.fragment,Ut),Ut.forEach(t),ml.forEach(t),ZRe=i(c),yd=n(c,"H2",{class:!0});var i$e=s(yd);iv=n(i$e,"A",{id:!0,class:!0,href:!0});var qst=s(iv);Jce=n(qst,"SPAN",{});var Nst=s(Jce);m(v5.$$.fragment,Nst),Nst.forEach(t),qst.forEach(t),Yqo=i(i$e),Yce=n(i$e,"SPAN",{});var jst=s(Yce);Kqo=r(jst,"AutoModelForTableQuestionAnswering"),jst.forEach(t),i$e.forEach(t),eBe=i(c),sr=n(c,"DIV",{class:!0});var hl=s(sr);m(T5.$$.fragment,hl),Zqo=i(hl),Ld=n(hl,"P",{});var $U=s(Ld);eNo=r($U,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),BD=n($U,"A",{href:!0});var Dst=s(BD);oNo=r(Dst,"from_pretrained()"),Dst.forEach(t),rNo=r($U," class method or the "),PD=n($U,"A",{href:!0});var Gst=s(PD);tNo=r(Gst,"from_config()"),Gst.forEach(t),aNo=r($U,` class
method.`),$U.forEach(t),nNo=i(hl),M5=n(hl,"P",{});var d$e=s(M5);sNo=r(d$e,"This class cannot be instantiated directly using "),Kce=n(d$e,"CODE",{});var Ost=s(Kce);lNo=r(Ost,"__init__()"),Ost.forEach(t),iNo=r(d$e," (throws an error)."),d$e.forEach(t),dNo=i(hl),et=n(hl,"DIV",{class:!0});var pl=s(et);m(E5.$$.fragment,pl),cNo=i(pl),Zce=n(pl,"P",{});var Vst=s(Zce);fNo=r(Vst,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Vst.forEach(t),mNo=i(pl),xd=n(pl,"P",{});var IU=s(xd);gNo=r(IU,`Note:
Loading a model from its configuration file does `),efe=n(IU,"STRONG",{});var Xst=s(efe);hNo=r(Xst,"not"),Xst.forEach(t),pNo=r(IU,` load the model weights. It only affects the
model\u2019s configuration. Use `),$D=n(IU,"A",{href:!0});var zst=s($D);_No=r(zst,"from_pretrained()"),zst.forEach(t),uNo=r(IU," to load the model weights."),IU.forEach(t),bNo=i(pl),ofe=n(pl,"P",{});var Qst=s(ofe);FNo=r(Qst,"Examples:"),Qst.forEach(t),vNo=i(pl),m(C5.$$.fragment,pl),pl.forEach(t),TNo=i(hl),We=n(hl,"DIV",{class:!0});var Jt=s(We);m(w5.$$.fragment,Jt),MNo=i(Jt),rfe=n(Jt,"P",{});var Wst=s(rfe);ENo=r(Wst,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Wst.forEach(t),CNo=i(Jt),en=n(Jt,"P",{});var N4=s(en);wNo=r(N4,"The model class to instantiate is selected based on the "),tfe=n(N4,"CODE",{});var Hst=s(tfe);ANo=r(Hst,"model_type"),Hst.forEach(t),yNo=r(N4,` property of the config object (either
passed as an argument or loaded from `),afe=n(N4,"CODE",{});var Ust=s(afe);LNo=r(Ust,"pretrained_model_name_or_path"),Ust.forEach(t),xNo=r(N4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nfe=n(N4,"CODE",{});var Jst=s(nfe);kNo=r(Jst,"pretrained_model_name_or_path"),Jst.forEach(t),SNo=r(N4,":"),N4.forEach(t),RNo=i(Jt),sfe=n(Jt,"UL",{});var Yst=s(sfe);dv=n(Yst,"LI",{});var GAe=s(dv);lfe=n(GAe,"STRONG",{});var Kst=s(lfe);BNo=r(Kst,"tapas"),Kst.forEach(t),PNo=r(GAe," \u2014 "),ID=n(GAe,"A",{href:!0});var Zst=s(ID);$No=r(Zst,"TapasForQuestionAnswering"),Zst.forEach(t),INo=r(GAe," (TAPAS model)"),GAe.forEach(t),Yst.forEach(t),qNo=i(Jt),cv=n(Jt,"P",{});var OAe=s(cv);NNo=r(OAe,"The model is set in evaluation mode by default using "),ife=n(OAe,"CODE",{});var elt=s(ife);jNo=r(elt,"model.eval()"),elt.forEach(t),DNo=r(OAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dfe=n(OAe,"CODE",{});var olt=s(dfe);GNo=r(olt,"model.train()"),olt.forEach(t),OAe.forEach(t),ONo=i(Jt),cfe=n(Jt,"P",{});var rlt=s(cfe);VNo=r(rlt,"Examples:"),rlt.forEach(t),XNo=i(Jt),m(A5.$$.fragment,Jt),Jt.forEach(t),hl.forEach(t),oBe=i(c),kd=n(c,"H2",{class:!0});var c$e=s(kd);fv=n(c$e,"A",{id:!0,class:!0,href:!0});var tlt=s(fv);ffe=n(tlt,"SPAN",{});var alt=s(ffe);m(y5.$$.fragment,alt),alt.forEach(t),tlt.forEach(t),zNo=i(c$e),mfe=n(c$e,"SPAN",{});var nlt=s(mfe);QNo=r(nlt,"AutoModelForImageClassification"),nlt.forEach(t),c$e.forEach(t),rBe=i(c),lr=n(c,"DIV",{class:!0});var _l=s(lr);m(L5.$$.fragment,_l),WNo=i(_l),Sd=n(_l,"P",{});var qU=s(Sd);HNo=r(qU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),qD=n(qU,"A",{href:!0});var slt=s(qD);UNo=r(slt,"from_pretrained()"),slt.forEach(t),JNo=r(qU," class method or the "),ND=n(qU,"A",{href:!0});var llt=s(ND);YNo=r(llt,"from_config()"),llt.forEach(t),KNo=r(qU,` class
method.`),qU.forEach(t),ZNo=i(_l),x5=n(_l,"P",{});var f$e=s(x5);ejo=r(f$e,"This class cannot be instantiated directly using "),gfe=n(f$e,"CODE",{});var ilt=s(gfe);ojo=r(ilt,"__init__()"),ilt.forEach(t),rjo=r(f$e," (throws an error)."),f$e.forEach(t),tjo=i(_l),ot=n(_l,"DIV",{class:!0});var ul=s(ot);m(k5.$$.fragment,ul),ajo=i(ul),hfe=n(ul,"P",{});var dlt=s(hfe);njo=r(dlt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),dlt.forEach(t),sjo=i(ul),Rd=n(ul,"P",{});var NU=s(Rd);ljo=r(NU,`Note:
Loading a model from its configuration file does `),pfe=n(NU,"STRONG",{});var clt=s(pfe);ijo=r(clt,"not"),clt.forEach(t),djo=r(NU,` load the model weights. It only affects the
model\u2019s configuration. Use `),jD=n(NU,"A",{href:!0});var flt=s(jD);cjo=r(flt,"from_pretrained()"),flt.forEach(t),fjo=r(NU," to load the model weights."),NU.forEach(t),mjo=i(ul),_fe=n(ul,"P",{});var mlt=s(_fe);gjo=r(mlt,"Examples:"),mlt.forEach(t),hjo=i(ul),m(S5.$$.fragment,ul),ul.forEach(t),pjo=i(_l),He=n(_l,"DIV",{class:!0});var Yt=s(He);m(R5.$$.fragment,Yt),_jo=i(Yt),ufe=n(Yt,"P",{});var glt=s(ufe);ujo=r(glt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),glt.forEach(t),bjo=i(Yt),on=n(Yt,"P",{});var j4=s(on);Fjo=r(j4,"The model class to instantiate is selected based on the "),bfe=n(j4,"CODE",{});var hlt=s(bfe);vjo=r(hlt,"model_type"),hlt.forEach(t),Tjo=r(j4,` property of the config object (either
passed as an argument or loaded from `),Ffe=n(j4,"CODE",{});var plt=s(Ffe);Mjo=r(plt,"pretrained_model_name_or_path"),plt.forEach(t),Ejo=r(j4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vfe=n(j4,"CODE",{});var _lt=s(vfe);Cjo=r(_lt,"pretrained_model_name_or_path"),_lt.forEach(t),wjo=r(j4,":"),j4.forEach(t),Ajo=i(Yt),ce=n(Yt,"UL",{});var he=s(ce);mv=n(he,"LI",{});var VAe=s(mv);Tfe=n(VAe,"STRONG",{});var ult=s(Tfe);yjo=r(ult,"beit"),ult.forEach(t),Ljo=r(VAe," \u2014 "),DD=n(VAe,"A",{href:!0});var blt=s(DD);xjo=r(blt,"BeitForImageClassification"),blt.forEach(t),kjo=r(VAe," (BEiT model)"),VAe.forEach(t),Sjo=i(he),gv=n(he,"LI",{});var XAe=s(gv);Mfe=n(XAe,"STRONG",{});var Flt=s(Mfe);Rjo=r(Flt,"convnext"),Flt.forEach(t),Bjo=r(XAe," \u2014 "),GD=n(XAe,"A",{href:!0});var vlt=s(GD);Pjo=r(vlt,"ConvNextForImageClassification"),vlt.forEach(t),$jo=r(XAe," (ConvNext model)"),XAe.forEach(t),Ijo=i(he),Gs=n(he,"LI",{});var p9=s(Gs);Efe=n(p9,"STRONG",{});var Tlt=s(Efe);qjo=r(Tlt,"deit"),Tlt.forEach(t),Njo=r(p9," \u2014 "),OD=n(p9,"A",{href:!0});var Mlt=s(OD);jjo=r(Mlt,"DeiTForImageClassification"),Mlt.forEach(t),Djo=r(p9," or "),VD=n(p9,"A",{href:!0});var Elt=s(VD);Gjo=r(Elt,"DeiTForImageClassificationWithTeacher"),Elt.forEach(t),Ojo=r(p9," (DeiT model)"),p9.forEach(t),Vjo=i(he),hv=n(he,"LI",{});var zAe=s(hv);Cfe=n(zAe,"STRONG",{});var Clt=s(Cfe);Xjo=r(Clt,"imagegpt"),Clt.forEach(t),zjo=r(zAe," \u2014 "),XD=n(zAe,"A",{href:!0});var wlt=s(XD);Qjo=r(wlt,"ImageGPTForImageClassification"),wlt.forEach(t),Wjo=r(zAe," (ImageGPT model)"),zAe.forEach(t),Hjo=i(he),ma=n(he,"LI",{});var If=s(ma);wfe=n(If,"STRONG",{});var Alt=s(wfe);Ujo=r(Alt,"perceiver"),Alt.forEach(t),Jjo=r(If," \u2014 "),zD=n(If,"A",{href:!0});var ylt=s(zD);Yjo=r(ylt,"PerceiverForImageClassificationLearned"),ylt.forEach(t),Kjo=r(If," or "),QD=n(If,"A",{href:!0});var Llt=s(QD);Zjo=r(Llt,"PerceiverForImageClassificationFourier"),Llt.forEach(t),eDo=r(If," or "),WD=n(If,"A",{href:!0});var xlt=s(WD);oDo=r(xlt,"PerceiverForImageClassificationConvProcessing"),xlt.forEach(t),rDo=r(If," (Perceiver model)"),If.forEach(t),tDo=i(he),pv=n(he,"LI",{});var QAe=s(pv);Afe=n(QAe,"STRONG",{});var klt=s(Afe);aDo=r(klt,"poolformer"),klt.forEach(t),nDo=r(QAe," \u2014 "),HD=n(QAe,"A",{href:!0});var Slt=s(HD);sDo=r(Slt,"PoolFormerForImageClassification"),Slt.forEach(t),lDo=r(QAe," (PoolFormer model)"),QAe.forEach(t),iDo=i(he),_v=n(he,"LI",{});var WAe=s(_v);yfe=n(WAe,"STRONG",{});var Rlt=s(yfe);dDo=r(Rlt,"regnet"),Rlt.forEach(t),cDo=r(WAe," \u2014 "),UD=n(WAe,"A",{href:!0});var Blt=s(UD);fDo=r(Blt,"RegNetForImageClassification"),Blt.forEach(t),mDo=r(WAe," (RegNet model)"),WAe.forEach(t),gDo=i(he),uv=n(he,"LI",{});var HAe=s(uv);Lfe=n(HAe,"STRONG",{});var Plt=s(Lfe);hDo=r(Plt,"resnet"),Plt.forEach(t),pDo=r(HAe," \u2014 "),JD=n(HAe,"A",{href:!0});var $lt=s(JD);_Do=r($lt,"ResNetForImageClassification"),$lt.forEach(t),uDo=r(HAe," (ResNet model)"),HAe.forEach(t),bDo=i(he),bv=n(he,"LI",{});var UAe=s(bv);xfe=n(UAe,"STRONG",{});var Ilt=s(xfe);FDo=r(Ilt,"segformer"),Ilt.forEach(t),vDo=r(UAe," \u2014 "),YD=n(UAe,"A",{href:!0});var qlt=s(YD);TDo=r(qlt,"SegformerForImageClassification"),qlt.forEach(t),MDo=r(UAe," (SegFormer model)"),UAe.forEach(t),EDo=i(he),Fv=n(he,"LI",{});var JAe=s(Fv);kfe=n(JAe,"STRONG",{});var Nlt=s(kfe);CDo=r(Nlt,"swin"),Nlt.forEach(t),wDo=r(JAe," \u2014 "),KD=n(JAe,"A",{href:!0});var jlt=s(KD);ADo=r(jlt,"SwinForImageClassification"),jlt.forEach(t),yDo=r(JAe," (Swin model)"),JAe.forEach(t),LDo=i(he),vv=n(he,"LI",{});var YAe=s(vv);Sfe=n(YAe,"STRONG",{});var Dlt=s(Sfe);xDo=r(Dlt,"van"),Dlt.forEach(t),kDo=r(YAe," \u2014 "),ZD=n(YAe,"A",{href:!0});var Glt=s(ZD);SDo=r(Glt,"VanForImageClassification"),Glt.forEach(t),RDo=r(YAe," (VAN model)"),YAe.forEach(t),BDo=i(he),Tv=n(he,"LI",{});var KAe=s(Tv);Rfe=n(KAe,"STRONG",{});var Olt=s(Rfe);PDo=r(Olt,"vit"),Olt.forEach(t),$Do=r(KAe," \u2014 "),eG=n(KAe,"A",{href:!0});var Vlt=s(eG);IDo=r(Vlt,"ViTForImageClassification"),Vlt.forEach(t),qDo=r(KAe," (ViT model)"),KAe.forEach(t),he.forEach(t),NDo=i(Yt),Mv=n(Yt,"P",{});var ZAe=s(Mv);jDo=r(ZAe,"The model is set in evaluation mode by default using "),Bfe=n(ZAe,"CODE",{});var Xlt=s(Bfe);DDo=r(Xlt,"model.eval()"),Xlt.forEach(t),GDo=r(ZAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pfe=n(ZAe,"CODE",{});var zlt=s(Pfe);ODo=r(zlt,"model.train()"),zlt.forEach(t),ZAe.forEach(t),VDo=i(Yt),$fe=n(Yt,"P",{});var Qlt=s($fe);XDo=r(Qlt,"Examples:"),Qlt.forEach(t),zDo=i(Yt),m(B5.$$.fragment,Yt),Yt.forEach(t),_l.forEach(t),tBe=i(c),Bd=n(c,"H2",{class:!0});var m$e=s(Bd);Ev=n(m$e,"A",{id:!0,class:!0,href:!0});var Wlt=s(Ev);Ife=n(Wlt,"SPAN",{});var Hlt=s(Ife);m(P5.$$.fragment,Hlt),Hlt.forEach(t),Wlt.forEach(t),QDo=i(m$e),qfe=n(m$e,"SPAN",{});var Ult=s(qfe);WDo=r(Ult,"AutoModelForVision2Seq"),Ult.forEach(t),m$e.forEach(t),aBe=i(c),ir=n(c,"DIV",{class:!0});var bl=s(ir);m($5.$$.fragment,bl),HDo=i(bl),Pd=n(bl,"P",{});var jU=s(Pd);UDo=r(jU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),oG=n(jU,"A",{href:!0});var Jlt=s(oG);JDo=r(Jlt,"from_pretrained()"),Jlt.forEach(t),YDo=r(jU," class method or the "),rG=n(jU,"A",{href:!0});var Ylt=s(rG);KDo=r(Ylt,"from_config()"),Ylt.forEach(t),ZDo=r(jU,` class
method.`),jU.forEach(t),eGo=i(bl),I5=n(bl,"P",{});var g$e=s(I5);oGo=r(g$e,"This class cannot be instantiated directly using "),Nfe=n(g$e,"CODE",{});var Klt=s(Nfe);rGo=r(Klt,"__init__()"),Klt.forEach(t),tGo=r(g$e," (throws an error)."),g$e.forEach(t),aGo=i(bl),rt=n(bl,"DIV",{class:!0});var Fl=s(rt);m(q5.$$.fragment,Fl),nGo=i(Fl),jfe=n(Fl,"P",{});var Zlt=s(jfe);sGo=r(Zlt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Zlt.forEach(t),lGo=i(Fl),$d=n(Fl,"P",{});var DU=s($d);iGo=r(DU,`Note:
Loading a model from its configuration file does `),Dfe=n(DU,"STRONG",{});var eit=s(Dfe);dGo=r(eit,"not"),eit.forEach(t),cGo=r(DU,` load the model weights. It only affects the
model\u2019s configuration. Use `),tG=n(DU,"A",{href:!0});var oit=s(tG);fGo=r(oit,"from_pretrained()"),oit.forEach(t),mGo=r(DU," to load the model weights."),DU.forEach(t),gGo=i(Fl),Gfe=n(Fl,"P",{});var rit=s(Gfe);hGo=r(rit,"Examples:"),rit.forEach(t),pGo=i(Fl),m(N5.$$.fragment,Fl),Fl.forEach(t),_Go=i(bl),Ue=n(bl,"DIV",{class:!0});var Kt=s(Ue);m(j5.$$.fragment,Kt),uGo=i(Kt),Ofe=n(Kt,"P",{});var tit=s(Ofe);bGo=r(tit,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),tit.forEach(t),FGo=i(Kt),rn=n(Kt,"P",{});var D4=s(rn);vGo=r(D4,"The model class to instantiate is selected based on the "),Vfe=n(D4,"CODE",{});var ait=s(Vfe);TGo=r(ait,"model_type"),ait.forEach(t),MGo=r(D4,` property of the config object (either
passed as an argument or loaded from `),Xfe=n(D4,"CODE",{});var nit=s(Xfe);EGo=r(nit,"pretrained_model_name_or_path"),nit.forEach(t),CGo=r(D4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zfe=n(D4,"CODE",{});var sit=s(zfe);wGo=r(sit,"pretrained_model_name_or_path"),sit.forEach(t),AGo=r(D4,":"),D4.forEach(t),yGo=i(Kt),Qfe=n(Kt,"UL",{});var lit=s(Qfe);Cv=n(lit,"LI",{});var eye=s(Cv);Wfe=n(eye,"STRONG",{});var iit=s(Wfe);LGo=r(iit,"vision-encoder-decoder"),iit.forEach(t),xGo=r(eye," \u2014 "),aG=n(eye,"A",{href:!0});var dit=s(aG);kGo=r(dit,"VisionEncoderDecoderModel"),dit.forEach(t),SGo=r(eye," (Vision Encoder decoder model)"),eye.forEach(t),lit.forEach(t),RGo=i(Kt),wv=n(Kt,"P",{});var oye=s(wv);BGo=r(oye,"The model is set in evaluation mode by default using "),Hfe=n(oye,"CODE",{});var cit=s(Hfe);PGo=r(cit,"model.eval()"),cit.forEach(t),$Go=r(oye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ufe=n(oye,"CODE",{});var fit=s(Ufe);IGo=r(fit,"model.train()"),fit.forEach(t),oye.forEach(t),qGo=i(Kt),Jfe=n(Kt,"P",{});var mit=s(Jfe);NGo=r(mit,"Examples:"),mit.forEach(t),jGo=i(Kt),m(D5.$$.fragment,Kt),Kt.forEach(t),bl.forEach(t),nBe=i(c),Id=n(c,"H2",{class:!0});var h$e=s(Id);Av=n(h$e,"A",{id:!0,class:!0,href:!0});var git=s(Av);Yfe=n(git,"SPAN",{});var hit=s(Yfe);m(G5.$$.fragment,hit),hit.forEach(t),git.forEach(t),DGo=i(h$e),Kfe=n(h$e,"SPAN",{});var pit=s(Kfe);GGo=r(pit,"AutoModelForAudioClassification"),pit.forEach(t),h$e.forEach(t),sBe=i(c),dr=n(c,"DIV",{class:!0});var vl=s(dr);m(O5.$$.fragment,vl),OGo=i(vl),qd=n(vl,"P",{});var GU=s(qd);VGo=r(GU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),nG=n(GU,"A",{href:!0});var _it=s(nG);XGo=r(_it,"from_pretrained()"),_it.forEach(t),zGo=r(GU," class method or the "),sG=n(GU,"A",{href:!0});var uit=s(sG);QGo=r(uit,"from_config()"),uit.forEach(t),WGo=r(GU,` class
method.`),GU.forEach(t),HGo=i(vl),V5=n(vl,"P",{});var p$e=s(V5);UGo=r(p$e,"This class cannot be instantiated directly using "),Zfe=n(p$e,"CODE",{});var bit=s(Zfe);JGo=r(bit,"__init__()"),bit.forEach(t),YGo=r(p$e," (throws an error)."),p$e.forEach(t),KGo=i(vl),tt=n(vl,"DIV",{class:!0});var Tl=s(tt);m(X5.$$.fragment,Tl),ZGo=i(Tl),eme=n(Tl,"P",{});var Fit=s(eme);eOo=r(Fit,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Fit.forEach(t),oOo=i(Tl),Nd=n(Tl,"P",{});var OU=s(Nd);rOo=r(OU,`Note:
Loading a model from its configuration file does `),ome=n(OU,"STRONG",{});var vit=s(ome);tOo=r(vit,"not"),vit.forEach(t),aOo=r(OU,` load the model weights. It only affects the
model\u2019s configuration. Use `),lG=n(OU,"A",{href:!0});var Tit=s(lG);nOo=r(Tit,"from_pretrained()"),Tit.forEach(t),sOo=r(OU," to load the model weights."),OU.forEach(t),lOo=i(Tl),rme=n(Tl,"P",{});var Mit=s(rme);iOo=r(Mit,"Examples:"),Mit.forEach(t),dOo=i(Tl),m(z5.$$.fragment,Tl),Tl.forEach(t),cOo=i(vl),Je=n(vl,"DIV",{class:!0});var Zt=s(Je);m(Q5.$$.fragment,Zt),fOo=i(Zt),tme=n(Zt,"P",{});var Eit=s(tme);mOo=r(Eit,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Eit.forEach(t),gOo=i(Zt),tn=n(Zt,"P",{});var G4=s(tn);hOo=r(G4,"The model class to instantiate is selected based on the "),ame=n(G4,"CODE",{});var Cit=s(ame);pOo=r(Cit,"model_type"),Cit.forEach(t),_Oo=r(G4,` property of the config object (either
passed as an argument or loaded from `),nme=n(G4,"CODE",{});var wit=s(nme);uOo=r(wit,"pretrained_model_name_or_path"),wit.forEach(t),bOo=r(G4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sme=n(G4,"CODE",{});var Ait=s(sme);FOo=r(Ait,"pretrained_model_name_or_path"),Ait.forEach(t),vOo=r(G4,":"),G4.forEach(t),TOo=i(Zt),Se=n(Zt,"UL",{});var Do=s(Se);yv=n(Do,"LI",{});var rye=s(yv);lme=n(rye,"STRONG",{});var yit=s(lme);MOo=r(yit,"data2vec-audio"),yit.forEach(t),EOo=r(rye," \u2014 "),iG=n(rye,"A",{href:!0});var Lit=s(iG);COo=r(Lit,"Data2VecAudioForSequenceClassification"),Lit.forEach(t),wOo=r(rye," (Data2VecAudio model)"),rye.forEach(t),AOo=i(Do),Lv=n(Do,"LI",{});var tye=s(Lv);ime=n(tye,"STRONG",{});var xit=s(ime);yOo=r(xit,"hubert"),xit.forEach(t),LOo=r(tye," \u2014 "),dG=n(tye,"A",{href:!0});var kit=s(dG);xOo=r(kit,"HubertForSequenceClassification"),kit.forEach(t),kOo=r(tye," (Hubert model)"),tye.forEach(t),SOo=i(Do),xv=n(Do,"LI",{});var aye=s(xv);dme=n(aye,"STRONG",{});var Sit=s(dme);ROo=r(Sit,"sew"),Sit.forEach(t),BOo=r(aye," \u2014 "),cG=n(aye,"A",{href:!0});var Rit=s(cG);POo=r(Rit,"SEWForSequenceClassification"),Rit.forEach(t),$Oo=r(aye," (SEW model)"),aye.forEach(t),IOo=i(Do),kv=n(Do,"LI",{});var nye=s(kv);cme=n(nye,"STRONG",{});var Bit=s(cme);qOo=r(Bit,"sew-d"),Bit.forEach(t),NOo=r(nye," \u2014 "),fG=n(nye,"A",{href:!0});var Pit=s(fG);jOo=r(Pit,"SEWDForSequenceClassification"),Pit.forEach(t),DOo=r(nye," (SEW-D model)"),nye.forEach(t),GOo=i(Do),Sv=n(Do,"LI",{});var sye=s(Sv);fme=n(sye,"STRONG",{});var $it=s(fme);OOo=r($it,"unispeech"),$it.forEach(t),VOo=r(sye," \u2014 "),mG=n(sye,"A",{href:!0});var Iit=s(mG);XOo=r(Iit,"UniSpeechForSequenceClassification"),Iit.forEach(t),zOo=r(sye," (UniSpeech model)"),sye.forEach(t),QOo=i(Do),Rv=n(Do,"LI",{});var lye=s(Rv);mme=n(lye,"STRONG",{});var qit=s(mme);WOo=r(qit,"unispeech-sat"),qit.forEach(t),HOo=r(lye," \u2014 "),gG=n(lye,"A",{href:!0});var Nit=s(gG);UOo=r(Nit,"UniSpeechSatForSequenceClassification"),Nit.forEach(t),JOo=r(lye," (UniSpeechSat model)"),lye.forEach(t),YOo=i(Do),Bv=n(Do,"LI",{});var iye=s(Bv);gme=n(iye,"STRONG",{});var jit=s(gme);KOo=r(jit,"wav2vec2"),jit.forEach(t),ZOo=r(iye," \u2014 "),hG=n(iye,"A",{href:!0});var Dit=s(hG);eVo=r(Dit,"Wav2Vec2ForSequenceClassification"),Dit.forEach(t),oVo=r(iye," (Wav2Vec2 model)"),iye.forEach(t),rVo=i(Do),Pv=n(Do,"LI",{});var dye=s(Pv);hme=n(dye,"STRONG",{});var Git=s(hme);tVo=r(Git,"wavlm"),Git.forEach(t),aVo=r(dye," \u2014 "),pG=n(dye,"A",{href:!0});var Oit=s(pG);nVo=r(Oit,"WavLMForSequenceClassification"),Oit.forEach(t),sVo=r(dye," (WavLM model)"),dye.forEach(t),Do.forEach(t),lVo=i(Zt),$v=n(Zt,"P",{});var cye=s($v);iVo=r(cye,"The model is set in evaluation mode by default using "),pme=n(cye,"CODE",{});var Vit=s(pme);dVo=r(Vit,"model.eval()"),Vit.forEach(t),cVo=r(cye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_me=n(cye,"CODE",{});var Xit=s(_me);fVo=r(Xit,"model.train()"),Xit.forEach(t),cye.forEach(t),mVo=i(Zt),ume=n(Zt,"P",{});var zit=s(ume);gVo=r(zit,"Examples:"),zit.forEach(t),hVo=i(Zt),m(W5.$$.fragment,Zt),Zt.forEach(t),vl.forEach(t),lBe=i(c),jd=n(c,"H2",{class:!0});var _$e=s(jd);Iv=n(_$e,"A",{id:!0,class:!0,href:!0});var Qit=s(Iv);bme=n(Qit,"SPAN",{});var Wit=s(bme);m(H5.$$.fragment,Wit),Wit.forEach(t),Qit.forEach(t),pVo=i(_$e),Fme=n(_$e,"SPAN",{});var Hit=s(Fme);_Vo=r(Hit,"AutoModelForAudioFrameClassification"),Hit.forEach(t),_$e.forEach(t),iBe=i(c),cr=n(c,"DIV",{class:!0});var Ml=s(cr);m(U5.$$.fragment,Ml),uVo=i(Ml),Dd=n(Ml,"P",{});var VU=s(Dd);bVo=r(VU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),_G=n(VU,"A",{href:!0});var Uit=s(_G);FVo=r(Uit,"from_pretrained()"),Uit.forEach(t),vVo=r(VU," class method or the "),uG=n(VU,"A",{href:!0});var Jit=s(uG);TVo=r(Jit,"from_config()"),Jit.forEach(t),MVo=r(VU,` class
method.`),VU.forEach(t),EVo=i(Ml),J5=n(Ml,"P",{});var u$e=s(J5);CVo=r(u$e,"This class cannot be instantiated directly using "),vme=n(u$e,"CODE",{});var Yit=s(vme);wVo=r(Yit,"__init__()"),Yit.forEach(t),AVo=r(u$e," (throws an error)."),u$e.forEach(t),yVo=i(Ml),at=n(Ml,"DIV",{class:!0});var El=s(at);m(Y5.$$.fragment,El),LVo=i(El),Tme=n(El,"P",{});var Kit=s(Tme);xVo=r(Kit,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Kit.forEach(t),kVo=i(El),Gd=n(El,"P",{});var XU=s(Gd);SVo=r(XU,`Note:
Loading a model from its configuration file does `),Mme=n(XU,"STRONG",{});var Zit=s(Mme);RVo=r(Zit,"not"),Zit.forEach(t),BVo=r(XU,` load the model weights. It only affects the
model\u2019s configuration. Use `),bG=n(XU,"A",{href:!0});var edt=s(bG);PVo=r(edt,"from_pretrained()"),edt.forEach(t),$Vo=r(XU," to load the model weights."),XU.forEach(t),IVo=i(El),Eme=n(El,"P",{});var odt=s(Eme);qVo=r(odt,"Examples:"),odt.forEach(t),NVo=i(El),m(K5.$$.fragment,El),El.forEach(t),jVo=i(Ml),Ye=n(Ml,"DIV",{class:!0});var ea=s(Ye);m(Z5.$$.fragment,ea),DVo=i(ea),Cme=n(ea,"P",{});var rdt=s(Cme);GVo=r(rdt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),rdt.forEach(t),OVo=i(ea),an=n(ea,"P",{});var O4=s(an);VVo=r(O4,"The model class to instantiate is selected based on the "),wme=n(O4,"CODE",{});var tdt=s(wme);XVo=r(tdt,"model_type"),tdt.forEach(t),zVo=r(O4,` property of the config object (either
passed as an argument or loaded from `),Ame=n(O4,"CODE",{});var adt=s(Ame);QVo=r(adt,"pretrained_model_name_or_path"),adt.forEach(t),WVo=r(O4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yme=n(O4,"CODE",{});var ndt=s(yme);HVo=r(ndt,"pretrained_model_name_or_path"),ndt.forEach(t),UVo=r(O4,":"),O4.forEach(t),JVo=i(ea),nn=n(ea,"UL",{});var V4=s(nn);qv=n(V4,"LI",{});var fye=s(qv);Lme=n(fye,"STRONG",{});var sdt=s(Lme);YVo=r(sdt,"data2vec-audio"),sdt.forEach(t),KVo=r(fye," \u2014 "),FG=n(fye,"A",{href:!0});var ldt=s(FG);ZVo=r(ldt,"Data2VecAudioForAudioFrameClassification"),ldt.forEach(t),eXo=r(fye," (Data2VecAudio model)"),fye.forEach(t),oXo=i(V4),Nv=n(V4,"LI",{});var mye=s(Nv);xme=n(mye,"STRONG",{});var idt=s(xme);rXo=r(idt,"unispeech-sat"),idt.forEach(t),tXo=r(mye," \u2014 "),vG=n(mye,"A",{href:!0});var ddt=s(vG);aXo=r(ddt,"UniSpeechSatForAudioFrameClassification"),ddt.forEach(t),nXo=r(mye," (UniSpeechSat model)"),mye.forEach(t),sXo=i(V4),jv=n(V4,"LI",{});var gye=s(jv);kme=n(gye,"STRONG",{});var cdt=s(kme);lXo=r(cdt,"wav2vec2"),cdt.forEach(t),iXo=r(gye," \u2014 "),TG=n(gye,"A",{href:!0});var fdt=s(TG);dXo=r(fdt,"Wav2Vec2ForAudioFrameClassification"),fdt.forEach(t),cXo=r(gye," (Wav2Vec2 model)"),gye.forEach(t),fXo=i(V4),Dv=n(V4,"LI",{});var hye=s(Dv);Sme=n(hye,"STRONG",{});var mdt=s(Sme);mXo=r(mdt,"wavlm"),mdt.forEach(t),gXo=r(hye," \u2014 "),MG=n(hye,"A",{href:!0});var gdt=s(MG);hXo=r(gdt,"WavLMForAudioFrameClassification"),gdt.forEach(t),pXo=r(hye," (WavLM model)"),hye.forEach(t),V4.forEach(t),_Xo=i(ea),Gv=n(ea,"P",{});var pye=s(Gv);uXo=r(pye,"The model is set in evaluation mode by default using "),Rme=n(pye,"CODE",{});var hdt=s(Rme);bXo=r(hdt,"model.eval()"),hdt.forEach(t),FXo=r(pye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bme=n(pye,"CODE",{});var pdt=s(Bme);vXo=r(pdt,"model.train()"),pdt.forEach(t),pye.forEach(t),TXo=i(ea),Pme=n(ea,"P",{});var _dt=s(Pme);MXo=r(_dt,"Examples:"),_dt.forEach(t),EXo=i(ea),m(e3.$$.fragment,ea),ea.forEach(t),Ml.forEach(t),dBe=i(c),Od=n(c,"H2",{class:!0});var b$e=s(Od);Ov=n(b$e,"A",{id:!0,class:!0,href:!0});var udt=s(Ov);$me=n(udt,"SPAN",{});var bdt=s($me);m(o3.$$.fragment,bdt),bdt.forEach(t),udt.forEach(t),CXo=i(b$e),Ime=n(b$e,"SPAN",{});var Fdt=s(Ime);wXo=r(Fdt,"AutoModelForCTC"),Fdt.forEach(t),b$e.forEach(t),cBe=i(c),fr=n(c,"DIV",{class:!0});var Cl=s(fr);m(r3.$$.fragment,Cl),AXo=i(Cl),Vd=n(Cl,"P",{});var zU=s(Vd);yXo=r(zU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),EG=n(zU,"A",{href:!0});var vdt=s(EG);LXo=r(vdt,"from_pretrained()"),vdt.forEach(t),xXo=r(zU," class method or the "),CG=n(zU,"A",{href:!0});var Tdt=s(CG);kXo=r(Tdt,"from_config()"),Tdt.forEach(t),SXo=r(zU,` class
method.`),zU.forEach(t),RXo=i(Cl),t3=n(Cl,"P",{});var F$e=s(t3);BXo=r(F$e,"This class cannot be instantiated directly using "),qme=n(F$e,"CODE",{});var Mdt=s(qme);PXo=r(Mdt,"__init__()"),Mdt.forEach(t),$Xo=r(F$e," (throws an error)."),F$e.forEach(t),IXo=i(Cl),nt=n(Cl,"DIV",{class:!0});var wl=s(nt);m(a3.$$.fragment,wl),qXo=i(wl),Nme=n(wl,"P",{});var Edt=s(Nme);NXo=r(Edt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Edt.forEach(t),jXo=i(wl),Xd=n(wl,"P",{});var QU=s(Xd);DXo=r(QU,`Note:
Loading a model from its configuration file does `),jme=n(QU,"STRONG",{});var Cdt=s(jme);GXo=r(Cdt,"not"),Cdt.forEach(t),OXo=r(QU,` load the model weights. It only affects the
model\u2019s configuration. Use `),wG=n(QU,"A",{href:!0});var wdt=s(wG);VXo=r(wdt,"from_pretrained()"),wdt.forEach(t),XXo=r(QU," to load the model weights."),QU.forEach(t),zXo=i(wl),Dme=n(wl,"P",{});var Adt=s(Dme);QXo=r(Adt,"Examples:"),Adt.forEach(t),WXo=i(wl),m(n3.$$.fragment,wl),wl.forEach(t),HXo=i(Cl),Ke=n(Cl,"DIV",{class:!0});var oa=s(Ke);m(s3.$$.fragment,oa),UXo=i(oa),Gme=n(oa,"P",{});var ydt=s(Gme);JXo=r(ydt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),ydt.forEach(t),YXo=i(oa),sn=n(oa,"P",{});var X4=s(sn);KXo=r(X4,"The model class to instantiate is selected based on the "),Ome=n(X4,"CODE",{});var Ldt=s(Ome);ZXo=r(Ldt,"model_type"),Ldt.forEach(t),ezo=r(X4,` property of the config object (either
passed as an argument or loaded from `),Vme=n(X4,"CODE",{});var xdt=s(Vme);ozo=r(xdt,"pretrained_model_name_or_path"),xdt.forEach(t),rzo=r(X4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xme=n(X4,"CODE",{});var kdt=s(Xme);tzo=r(kdt,"pretrained_model_name_or_path"),kdt.forEach(t),azo=r(X4,":"),X4.forEach(t),nzo=i(oa),Re=n(oa,"UL",{});var Go=s(Re);Vv=n(Go,"LI",{});var _ye=s(Vv);zme=n(_ye,"STRONG",{});var Sdt=s(zme);szo=r(Sdt,"data2vec-audio"),Sdt.forEach(t),lzo=r(_ye," \u2014 "),AG=n(_ye,"A",{href:!0});var Rdt=s(AG);izo=r(Rdt,"Data2VecAudioForCTC"),Rdt.forEach(t),dzo=r(_ye," (Data2VecAudio model)"),_ye.forEach(t),czo=i(Go),Xv=n(Go,"LI",{});var uye=s(Xv);Qme=n(uye,"STRONG",{});var Bdt=s(Qme);fzo=r(Bdt,"hubert"),Bdt.forEach(t),mzo=r(uye," \u2014 "),yG=n(uye,"A",{href:!0});var Pdt=s(yG);gzo=r(Pdt,"HubertForCTC"),Pdt.forEach(t),hzo=r(uye," (Hubert model)"),uye.forEach(t),pzo=i(Go),zv=n(Go,"LI",{});var bye=s(zv);Wme=n(bye,"STRONG",{});var $dt=s(Wme);_zo=r($dt,"sew"),$dt.forEach(t),uzo=r(bye," \u2014 "),LG=n(bye,"A",{href:!0});var Idt=s(LG);bzo=r(Idt,"SEWForCTC"),Idt.forEach(t),Fzo=r(bye," (SEW model)"),bye.forEach(t),vzo=i(Go),Qv=n(Go,"LI",{});var Fye=s(Qv);Hme=n(Fye,"STRONG",{});var qdt=s(Hme);Tzo=r(qdt,"sew-d"),qdt.forEach(t),Mzo=r(Fye," \u2014 "),xG=n(Fye,"A",{href:!0});var Ndt=s(xG);Ezo=r(Ndt,"SEWDForCTC"),Ndt.forEach(t),Czo=r(Fye," (SEW-D model)"),Fye.forEach(t),wzo=i(Go),Wv=n(Go,"LI",{});var vye=s(Wv);Ume=n(vye,"STRONG",{});var jdt=s(Ume);Azo=r(jdt,"unispeech"),jdt.forEach(t),yzo=r(vye," \u2014 "),kG=n(vye,"A",{href:!0});var Ddt=s(kG);Lzo=r(Ddt,"UniSpeechForCTC"),Ddt.forEach(t),xzo=r(vye," (UniSpeech model)"),vye.forEach(t),kzo=i(Go),Hv=n(Go,"LI",{});var Tye=s(Hv);Jme=n(Tye,"STRONG",{});var Gdt=s(Jme);Szo=r(Gdt,"unispeech-sat"),Gdt.forEach(t),Rzo=r(Tye," \u2014 "),SG=n(Tye,"A",{href:!0});var Odt=s(SG);Bzo=r(Odt,"UniSpeechSatForCTC"),Odt.forEach(t),Pzo=r(Tye," (UniSpeechSat model)"),Tye.forEach(t),$zo=i(Go),Uv=n(Go,"LI",{});var Mye=s(Uv);Yme=n(Mye,"STRONG",{});var Vdt=s(Yme);Izo=r(Vdt,"wav2vec2"),Vdt.forEach(t),qzo=r(Mye," \u2014 "),RG=n(Mye,"A",{href:!0});var Xdt=s(RG);Nzo=r(Xdt,"Wav2Vec2ForCTC"),Xdt.forEach(t),jzo=r(Mye," (Wav2Vec2 model)"),Mye.forEach(t),Dzo=i(Go),Jv=n(Go,"LI",{});var Eye=s(Jv);Kme=n(Eye,"STRONG",{});var zdt=s(Kme);Gzo=r(zdt,"wavlm"),zdt.forEach(t),Ozo=r(Eye," \u2014 "),BG=n(Eye,"A",{href:!0});var Qdt=s(BG);Vzo=r(Qdt,"WavLMForCTC"),Qdt.forEach(t),Xzo=r(Eye," (WavLM model)"),Eye.forEach(t),Go.forEach(t),zzo=i(oa),Yv=n(oa,"P",{});var Cye=s(Yv);Qzo=r(Cye,"The model is set in evaluation mode by default using "),Zme=n(Cye,"CODE",{});var Wdt=s(Zme);Wzo=r(Wdt,"model.eval()"),Wdt.forEach(t),Hzo=r(Cye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ege=n(Cye,"CODE",{});var Hdt=s(ege);Uzo=r(Hdt,"model.train()"),Hdt.forEach(t),Cye.forEach(t),Jzo=i(oa),oge=n(oa,"P",{});var Udt=s(oge);Yzo=r(Udt,"Examples:"),Udt.forEach(t),Kzo=i(oa),m(l3.$$.fragment,oa),oa.forEach(t),Cl.forEach(t),fBe=i(c),zd=n(c,"H2",{class:!0});var v$e=s(zd);Kv=n(v$e,"A",{id:!0,class:!0,href:!0});var Jdt=s(Kv);rge=n(Jdt,"SPAN",{});var Ydt=s(rge);m(i3.$$.fragment,Ydt),Ydt.forEach(t),Jdt.forEach(t),Zzo=i(v$e),tge=n(v$e,"SPAN",{});var Kdt=s(tge);eQo=r(Kdt,"AutoModelForSpeechSeq2Seq"),Kdt.forEach(t),v$e.forEach(t),mBe=i(c),mr=n(c,"DIV",{class:!0});var Al=s(mr);m(d3.$$.fragment,Al),oQo=i(Al),Qd=n(Al,"P",{});var WU=s(Qd);rQo=r(WU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),PG=n(WU,"A",{href:!0});var Zdt=s(PG);tQo=r(Zdt,"from_pretrained()"),Zdt.forEach(t),aQo=r(WU," class method or the "),$G=n(WU,"A",{href:!0});var ect=s($G);nQo=r(ect,"from_config()"),ect.forEach(t),sQo=r(WU,` class
method.`),WU.forEach(t),lQo=i(Al),c3=n(Al,"P",{});var T$e=s(c3);iQo=r(T$e,"This class cannot be instantiated directly using "),age=n(T$e,"CODE",{});var oct=s(age);dQo=r(oct,"__init__()"),oct.forEach(t),cQo=r(T$e," (throws an error)."),T$e.forEach(t),fQo=i(Al),st=n(Al,"DIV",{class:!0});var yl=s(st);m(f3.$$.fragment,yl),mQo=i(yl),nge=n(yl,"P",{});var rct=s(nge);gQo=r(rct,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),rct.forEach(t),hQo=i(yl),Wd=n(yl,"P",{});var HU=s(Wd);pQo=r(HU,`Note:
Loading a model from its configuration file does `),sge=n(HU,"STRONG",{});var tct=s(sge);_Qo=r(tct,"not"),tct.forEach(t),uQo=r(HU,` load the model weights. It only affects the
model\u2019s configuration. Use `),IG=n(HU,"A",{href:!0});var act=s(IG);bQo=r(act,"from_pretrained()"),act.forEach(t),FQo=r(HU," to load the model weights."),HU.forEach(t),vQo=i(yl),lge=n(yl,"P",{});var nct=s(lge);TQo=r(nct,"Examples:"),nct.forEach(t),MQo=i(yl),m(m3.$$.fragment,yl),yl.forEach(t),EQo=i(Al),Ze=n(Al,"DIV",{class:!0});var ra=s(Ze);m(g3.$$.fragment,ra),CQo=i(ra),ige=n(ra,"P",{});var sct=s(ige);wQo=r(sct,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),sct.forEach(t),AQo=i(ra),ln=n(ra,"P",{});var z4=s(ln);yQo=r(z4,"The model class to instantiate is selected based on the "),dge=n(z4,"CODE",{});var lct=s(dge);LQo=r(lct,"model_type"),lct.forEach(t),xQo=r(z4,` property of the config object (either
passed as an argument or loaded from `),cge=n(z4,"CODE",{});var ict=s(cge);kQo=r(ict,"pretrained_model_name_or_path"),ict.forEach(t),SQo=r(z4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fge=n(z4,"CODE",{});var dct=s(fge);RQo=r(dct,"pretrained_model_name_or_path"),dct.forEach(t),BQo=r(z4,":"),z4.forEach(t),PQo=i(ra),h3=n(ra,"UL",{});var M$e=s(h3);Zv=n(M$e,"LI",{});var wye=s(Zv);mge=n(wye,"STRONG",{});var cct=s(mge);$Qo=r(cct,"speech-encoder-decoder"),cct.forEach(t),IQo=r(wye," \u2014 "),qG=n(wye,"A",{href:!0});var fct=s(qG);qQo=r(fct,"SpeechEncoderDecoderModel"),fct.forEach(t),NQo=r(wye," (Speech Encoder decoder model)"),wye.forEach(t),jQo=i(M$e),e6=n(M$e,"LI",{});var Aye=s(e6);gge=n(Aye,"STRONG",{});var mct=s(gge);DQo=r(mct,"speech_to_text"),mct.forEach(t),GQo=r(Aye," \u2014 "),NG=n(Aye,"A",{href:!0});var gct=s(NG);OQo=r(gct,"Speech2TextForConditionalGeneration"),gct.forEach(t),VQo=r(Aye," (Speech2Text model)"),Aye.forEach(t),M$e.forEach(t),XQo=i(ra),o6=n(ra,"P",{});var yye=s(o6);zQo=r(yye,"The model is set in evaluation mode by default using "),hge=n(yye,"CODE",{});var hct=s(hge);QQo=r(hct,"model.eval()"),hct.forEach(t),WQo=r(yye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pge=n(yye,"CODE",{});var pct=s(pge);HQo=r(pct,"model.train()"),pct.forEach(t),yye.forEach(t),UQo=i(ra),_ge=n(ra,"P",{});var _ct=s(_ge);JQo=r(_ct,"Examples:"),_ct.forEach(t),YQo=i(ra),m(p3.$$.fragment,ra),ra.forEach(t),Al.forEach(t),gBe=i(c),Hd=n(c,"H2",{class:!0});var E$e=s(Hd);r6=n(E$e,"A",{id:!0,class:!0,href:!0});var uct=s(r6);uge=n(uct,"SPAN",{});var bct=s(uge);m(_3.$$.fragment,bct),bct.forEach(t),uct.forEach(t),KQo=i(E$e),bge=n(E$e,"SPAN",{});var Fct=s(bge);ZQo=r(Fct,"AutoModelForAudioXVector"),Fct.forEach(t),E$e.forEach(t),hBe=i(c),gr=n(c,"DIV",{class:!0});var Ll=s(gr);m(u3.$$.fragment,Ll),eWo=i(Ll),Ud=n(Ll,"P",{});var UU=s(Ud);oWo=r(UU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),jG=n(UU,"A",{href:!0});var vct=s(jG);rWo=r(vct,"from_pretrained()"),vct.forEach(t),tWo=r(UU," class method or the "),DG=n(UU,"A",{href:!0});var Tct=s(DG);aWo=r(Tct,"from_config()"),Tct.forEach(t),nWo=r(UU,` class
method.`),UU.forEach(t),sWo=i(Ll),b3=n(Ll,"P",{});var C$e=s(b3);lWo=r(C$e,"This class cannot be instantiated directly using "),Fge=n(C$e,"CODE",{});var Mct=s(Fge);iWo=r(Mct,"__init__()"),Mct.forEach(t),dWo=r(C$e," (throws an error)."),C$e.forEach(t),cWo=i(Ll),lt=n(Ll,"DIV",{class:!0});var xl=s(lt);m(F3.$$.fragment,xl),fWo=i(xl),vge=n(xl,"P",{});var Ect=s(vge);mWo=r(Ect,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Ect.forEach(t),gWo=i(xl),Jd=n(xl,"P",{});var JU=s(Jd);hWo=r(JU,`Note:
Loading a model from its configuration file does `),Tge=n(JU,"STRONG",{});var Cct=s(Tge);pWo=r(Cct,"not"),Cct.forEach(t),_Wo=r(JU,` load the model weights. It only affects the
model\u2019s configuration. Use `),GG=n(JU,"A",{href:!0});var wct=s(GG);uWo=r(wct,"from_pretrained()"),wct.forEach(t),bWo=r(JU," to load the model weights."),JU.forEach(t),FWo=i(xl),Mge=n(xl,"P",{});var Act=s(Mge);vWo=r(Act,"Examples:"),Act.forEach(t),TWo=i(xl),m(v3.$$.fragment,xl),xl.forEach(t),MWo=i(Ll),eo=n(Ll,"DIV",{class:!0});var ta=s(eo);m(T3.$$.fragment,ta),EWo=i(ta),Ege=n(ta,"P",{});var yct=s(Ege);CWo=r(yct,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),yct.forEach(t),wWo=i(ta),dn=n(ta,"P",{});var Q4=s(dn);AWo=r(Q4,"The model class to instantiate is selected based on the "),Cge=n(Q4,"CODE",{});var Lct=s(Cge);yWo=r(Lct,"model_type"),Lct.forEach(t),LWo=r(Q4,` property of the config object (either
passed as an argument or loaded from `),wge=n(Q4,"CODE",{});var xct=s(wge);xWo=r(xct,"pretrained_model_name_or_path"),xct.forEach(t),kWo=r(Q4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Age=n(Q4,"CODE",{});var kct=s(Age);SWo=r(kct,"pretrained_model_name_or_path"),kct.forEach(t),RWo=r(Q4,":"),Q4.forEach(t),BWo=i(ta),cn=n(ta,"UL",{});var W4=s(cn);t6=n(W4,"LI",{});var Lye=s(t6);yge=n(Lye,"STRONG",{});var Sct=s(yge);PWo=r(Sct,"data2vec-audio"),Sct.forEach(t),$Wo=r(Lye," \u2014 "),OG=n(Lye,"A",{href:!0});var Rct=s(OG);IWo=r(Rct,"Data2VecAudioForXVector"),Rct.forEach(t),qWo=r(Lye," (Data2VecAudio model)"),Lye.forEach(t),NWo=i(W4),a6=n(W4,"LI",{});var xye=s(a6);Lge=n(xye,"STRONG",{});var Bct=s(Lge);jWo=r(Bct,"unispeech-sat"),Bct.forEach(t),DWo=r(xye," \u2014 "),VG=n(xye,"A",{href:!0});var Pct=s(VG);GWo=r(Pct,"UniSpeechSatForXVector"),Pct.forEach(t),OWo=r(xye," (UniSpeechSat model)"),xye.forEach(t),VWo=i(W4),n6=n(W4,"LI",{});var kye=s(n6);xge=n(kye,"STRONG",{});var $ct=s(xge);XWo=r($ct,"wav2vec2"),$ct.forEach(t),zWo=r(kye," \u2014 "),XG=n(kye,"A",{href:!0});var Ict=s(XG);QWo=r(Ict,"Wav2Vec2ForXVector"),Ict.forEach(t),WWo=r(kye," (Wav2Vec2 model)"),kye.forEach(t),HWo=i(W4),s6=n(W4,"LI",{});var Sye=s(s6);kge=n(Sye,"STRONG",{});var qct=s(kge);UWo=r(qct,"wavlm"),qct.forEach(t),JWo=r(Sye," \u2014 "),zG=n(Sye,"A",{href:!0});var Nct=s(zG);YWo=r(Nct,"WavLMForXVector"),Nct.forEach(t),KWo=r(Sye," (WavLM model)"),Sye.forEach(t),W4.forEach(t),ZWo=i(ta),l6=n(ta,"P",{});var Rye=s(l6);eHo=r(Rye,"The model is set in evaluation mode by default using "),Sge=n(Rye,"CODE",{});var jct=s(Sge);oHo=r(jct,"model.eval()"),jct.forEach(t),rHo=r(Rye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rge=n(Rye,"CODE",{});var Dct=s(Rge);tHo=r(Dct,"model.train()"),Dct.forEach(t),Rye.forEach(t),aHo=i(ta),Bge=n(ta,"P",{});var Gct=s(Bge);nHo=r(Gct,"Examples:"),Gct.forEach(t),sHo=i(ta),m(M3.$$.fragment,ta),ta.forEach(t),Ll.forEach(t),pBe=i(c),Yd=n(c,"H2",{class:!0});var w$e=s(Yd);i6=n(w$e,"A",{id:!0,class:!0,href:!0});var Oct=s(i6);Pge=n(Oct,"SPAN",{});var Vct=s(Pge);m(E3.$$.fragment,Vct),Vct.forEach(t),Oct.forEach(t),lHo=i(w$e),$ge=n(w$e,"SPAN",{});var Xct=s($ge);iHo=r(Xct,"AutoModelForMaskedImageModeling"),Xct.forEach(t),w$e.forEach(t),_Be=i(c),hr=n(c,"DIV",{class:!0});var kl=s(hr);m(C3.$$.fragment,kl),dHo=i(kl),Kd=n(kl,"P",{});var YU=s(Kd);cHo=r(YU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),QG=n(YU,"A",{href:!0});var zct=s(QG);fHo=r(zct,"from_pretrained()"),zct.forEach(t),mHo=r(YU," class method or the "),WG=n(YU,"A",{href:!0});var Qct=s(WG);gHo=r(Qct,"from_config()"),Qct.forEach(t),hHo=r(YU,` class
method.`),YU.forEach(t),pHo=i(kl),w3=n(kl,"P",{});var A$e=s(w3);_Ho=r(A$e,"This class cannot be instantiated directly using "),Ige=n(A$e,"CODE",{});var Wct=s(Ige);uHo=r(Wct,"__init__()"),Wct.forEach(t),bHo=r(A$e," (throws an error)."),A$e.forEach(t),FHo=i(kl),it=n(kl,"DIV",{class:!0});var Sl=s(it);m(A3.$$.fragment,Sl),vHo=i(Sl),qge=n(Sl,"P",{});var Hct=s(qge);THo=r(Hct,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Hct.forEach(t),MHo=i(Sl),Zd=n(Sl,"P",{});var KU=s(Zd);EHo=r(KU,`Note:
Loading a model from its configuration file does `),Nge=n(KU,"STRONG",{});var Uct=s(Nge);CHo=r(Uct,"not"),Uct.forEach(t),wHo=r(KU,` load the model weights. It only affects the
model\u2019s configuration. Use `),HG=n(KU,"A",{href:!0});var Jct=s(HG);AHo=r(Jct,"from_pretrained()"),Jct.forEach(t),yHo=r(KU," to load the model weights."),KU.forEach(t),LHo=i(Sl),jge=n(Sl,"P",{});var Yct=s(jge);xHo=r(Yct,"Examples:"),Yct.forEach(t),kHo=i(Sl),m(y3.$$.fragment,Sl),Sl.forEach(t),SHo=i(kl),oo=n(kl,"DIV",{class:!0});var aa=s(oo);m(L3.$$.fragment,aa),RHo=i(aa),Dge=n(aa,"P",{});var Kct=s(Dge);BHo=r(Kct,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Kct.forEach(t),PHo=i(aa),fn=n(aa,"P",{});var H4=s(fn);$Ho=r(H4,"The model class to instantiate is selected based on the "),Gge=n(H4,"CODE",{});var Zct=s(Gge);IHo=r(Zct,"model_type"),Zct.forEach(t),qHo=r(H4,` property of the config object (either
passed as an argument or loaded from `),Oge=n(H4,"CODE",{});var eft=s(Oge);NHo=r(eft,"pretrained_model_name_or_path"),eft.forEach(t),jHo=r(H4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vge=n(H4,"CODE",{});var oft=s(Vge);DHo=r(oft,"pretrained_model_name_or_path"),oft.forEach(t),GHo=r(H4,":"),H4.forEach(t),OHo=i(aa),ec=n(aa,"UL",{});var ZU=s(ec);d6=n(ZU,"LI",{});var Bye=s(d6);Xge=n(Bye,"STRONG",{});var rft=s(Xge);VHo=r(rft,"deit"),rft.forEach(t),XHo=r(Bye," \u2014 "),UG=n(Bye,"A",{href:!0});var tft=s(UG);zHo=r(tft,"DeiTForMaskedImageModeling"),tft.forEach(t),QHo=r(Bye," (DeiT model)"),Bye.forEach(t),WHo=i(ZU),c6=n(ZU,"LI",{});var Pye=s(c6);zge=n(Pye,"STRONG",{});var aft=s(zge);HHo=r(aft,"swin"),aft.forEach(t),UHo=r(Pye," \u2014 "),JG=n(Pye,"A",{href:!0});var nft=s(JG);JHo=r(nft,"SwinForMaskedImageModeling"),nft.forEach(t),YHo=r(Pye," (Swin model)"),Pye.forEach(t),KHo=i(ZU),f6=n(ZU,"LI",{});var $ye=s(f6);Qge=n($ye,"STRONG",{});var sft=s(Qge);ZHo=r(sft,"vit"),sft.forEach(t),eUo=r($ye," \u2014 "),YG=n($ye,"A",{href:!0});var lft=s(YG);oUo=r(lft,"ViTForMaskedImageModeling"),lft.forEach(t),rUo=r($ye," (ViT model)"),$ye.forEach(t),ZU.forEach(t),tUo=i(aa),m6=n(aa,"P",{});var Iye=s(m6);aUo=r(Iye,"The model is set in evaluation mode by default using "),Wge=n(Iye,"CODE",{});var ift=s(Wge);nUo=r(ift,"model.eval()"),ift.forEach(t),sUo=r(Iye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hge=n(Iye,"CODE",{});var dft=s(Hge);lUo=r(dft,"model.train()"),dft.forEach(t),Iye.forEach(t),iUo=i(aa),Uge=n(aa,"P",{});var cft=s(Uge);dUo=r(cft,"Examples:"),cft.forEach(t),cUo=i(aa),m(x3.$$.fragment,aa),aa.forEach(t),kl.forEach(t),uBe=i(c),oc=n(c,"H2",{class:!0});var y$e=s(oc);g6=n(y$e,"A",{id:!0,class:!0,href:!0});var fft=s(g6);Jge=n(fft,"SPAN",{});var mft=s(Jge);m(k3.$$.fragment,mft),mft.forEach(t),fft.forEach(t),fUo=i(y$e),Yge=n(y$e,"SPAN",{});var gft=s(Yge);mUo=r(gft,"AutoModelForObjectDetection"),gft.forEach(t),y$e.forEach(t),bBe=i(c),pr=n(c,"DIV",{class:!0});var Rl=s(pr);m(S3.$$.fragment,Rl),gUo=i(Rl),rc=n(Rl,"P",{});var eJ=s(rc);hUo=r(eJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),KG=n(eJ,"A",{href:!0});var hft=s(KG);pUo=r(hft,"from_pretrained()"),hft.forEach(t),_Uo=r(eJ," class method or the "),ZG=n(eJ,"A",{href:!0});var pft=s(ZG);uUo=r(pft,"from_config()"),pft.forEach(t),bUo=r(eJ,` class
method.`),eJ.forEach(t),FUo=i(Rl),R3=n(Rl,"P",{});var L$e=s(R3);vUo=r(L$e,"This class cannot be instantiated directly using "),Kge=n(L$e,"CODE",{});var _ft=s(Kge);TUo=r(_ft,"__init__()"),_ft.forEach(t),MUo=r(L$e," (throws an error)."),L$e.forEach(t),EUo=i(Rl),dt=n(Rl,"DIV",{class:!0});var Bl=s(dt);m(B3.$$.fragment,Bl),CUo=i(Bl),Zge=n(Bl,"P",{});var uft=s(Zge);wUo=r(uft,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),uft.forEach(t),AUo=i(Bl),tc=n(Bl,"P",{});var oJ=s(tc);yUo=r(oJ,`Note:
Loading a model from its configuration file does `),ehe=n(oJ,"STRONG",{});var bft=s(ehe);LUo=r(bft,"not"),bft.forEach(t),xUo=r(oJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),eO=n(oJ,"A",{href:!0});var Fft=s(eO);kUo=r(Fft,"from_pretrained()"),Fft.forEach(t),SUo=r(oJ," to load the model weights."),oJ.forEach(t),RUo=i(Bl),ohe=n(Bl,"P",{});var vft=s(ohe);BUo=r(vft,"Examples:"),vft.forEach(t),PUo=i(Bl),m(P3.$$.fragment,Bl),Bl.forEach(t),$Uo=i(Rl),ro=n(Rl,"DIV",{class:!0});var na=s(ro);m($3.$$.fragment,na),IUo=i(na),rhe=n(na,"P",{});var Tft=s(rhe);qUo=r(Tft,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Tft.forEach(t),NUo=i(na),mn=n(na,"P",{});var U4=s(mn);jUo=r(U4,"The model class to instantiate is selected based on the "),the=n(U4,"CODE",{});var Mft=s(the);DUo=r(Mft,"model_type"),Mft.forEach(t),GUo=r(U4,` property of the config object (either
passed as an argument or loaded from `),ahe=n(U4,"CODE",{});var Eft=s(ahe);OUo=r(Eft,"pretrained_model_name_or_path"),Eft.forEach(t),VUo=r(U4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nhe=n(U4,"CODE",{});var Cft=s(nhe);XUo=r(Cft,"pretrained_model_name_or_path"),Cft.forEach(t),zUo=r(U4,":"),U4.forEach(t),QUo=i(na),she=n(na,"UL",{});var wft=s(she);h6=n(wft,"LI",{});var qye=s(h6);lhe=n(qye,"STRONG",{});var Aft=s(lhe);WUo=r(Aft,"detr"),Aft.forEach(t),HUo=r(qye," \u2014 "),oO=n(qye,"A",{href:!0});var yft=s(oO);UUo=r(yft,"DetrForObjectDetection"),yft.forEach(t),JUo=r(qye," (DETR model)"),qye.forEach(t),wft.forEach(t),YUo=i(na),p6=n(na,"P",{});var Nye=s(p6);KUo=r(Nye,"The model is set in evaluation mode by default using "),ihe=n(Nye,"CODE",{});var Lft=s(ihe);ZUo=r(Lft,"model.eval()"),Lft.forEach(t),eJo=r(Nye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dhe=n(Nye,"CODE",{});var xft=s(dhe);oJo=r(xft,"model.train()"),xft.forEach(t),Nye.forEach(t),rJo=i(na),che=n(na,"P",{});var kft=s(che);tJo=r(kft,"Examples:"),kft.forEach(t),aJo=i(na),m(I3.$$.fragment,na),na.forEach(t),Rl.forEach(t),FBe=i(c),ac=n(c,"H2",{class:!0});var x$e=s(ac);_6=n(x$e,"A",{id:!0,class:!0,href:!0});var Sft=s(_6);fhe=n(Sft,"SPAN",{});var Rft=s(fhe);m(q3.$$.fragment,Rft),Rft.forEach(t),Sft.forEach(t),nJo=i(x$e),mhe=n(x$e,"SPAN",{});var Bft=s(mhe);sJo=r(Bft,"AutoModelForImageSegmentation"),Bft.forEach(t),x$e.forEach(t),vBe=i(c),_r=n(c,"DIV",{class:!0});var Pl=s(_r);m(N3.$$.fragment,Pl),lJo=i(Pl),nc=n(Pl,"P",{});var rJ=s(nc);iJo=r(rJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),rO=n(rJ,"A",{href:!0});var Pft=s(rO);dJo=r(Pft,"from_pretrained()"),Pft.forEach(t),cJo=r(rJ," class method or the "),tO=n(rJ,"A",{href:!0});var $ft=s(tO);fJo=r($ft,"from_config()"),$ft.forEach(t),mJo=r(rJ,` class
method.`),rJ.forEach(t),gJo=i(Pl),j3=n(Pl,"P",{});var k$e=s(j3);hJo=r(k$e,"This class cannot be instantiated directly using "),ghe=n(k$e,"CODE",{});var Ift=s(ghe);pJo=r(Ift,"__init__()"),Ift.forEach(t),_Jo=r(k$e," (throws an error)."),k$e.forEach(t),uJo=i(Pl),ct=n(Pl,"DIV",{class:!0});var $l=s(ct);m(D3.$$.fragment,$l),bJo=i($l),hhe=n($l,"P",{});var qft=s(hhe);FJo=r(qft,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),qft.forEach(t),vJo=i($l),sc=n($l,"P",{});var tJ=s(sc);TJo=r(tJ,`Note:
Loading a model from its configuration file does `),phe=n(tJ,"STRONG",{});var Nft=s(phe);MJo=r(Nft,"not"),Nft.forEach(t),EJo=r(tJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),aO=n(tJ,"A",{href:!0});var jft=s(aO);CJo=r(jft,"from_pretrained()"),jft.forEach(t),wJo=r(tJ," to load the model weights."),tJ.forEach(t),AJo=i($l),_he=n($l,"P",{});var Dft=s(_he);yJo=r(Dft,"Examples:"),Dft.forEach(t),LJo=i($l),m(G3.$$.fragment,$l),$l.forEach(t),xJo=i(Pl),to=n(Pl,"DIV",{class:!0});var sa=s(to);m(O3.$$.fragment,sa),kJo=i(sa),uhe=n(sa,"P",{});var Gft=s(uhe);SJo=r(Gft,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Gft.forEach(t),RJo=i(sa),gn=n(sa,"P",{});var J4=s(gn);BJo=r(J4,"The model class to instantiate is selected based on the "),bhe=n(J4,"CODE",{});var Oft=s(bhe);PJo=r(Oft,"model_type"),Oft.forEach(t),$Jo=r(J4,` property of the config object (either
passed as an argument or loaded from `),Fhe=n(J4,"CODE",{});var Vft=s(Fhe);IJo=r(Vft,"pretrained_model_name_or_path"),Vft.forEach(t),qJo=r(J4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vhe=n(J4,"CODE",{});var Xft=s(vhe);NJo=r(Xft,"pretrained_model_name_or_path"),Xft.forEach(t),jJo=r(J4,":"),J4.forEach(t),DJo=i(sa),The=n(sa,"UL",{});var zft=s(The);u6=n(zft,"LI",{});var jye=s(u6);Mhe=n(jye,"STRONG",{});var Qft=s(Mhe);GJo=r(Qft,"detr"),Qft.forEach(t),OJo=r(jye," \u2014 "),nO=n(jye,"A",{href:!0});var Wft=s(nO);VJo=r(Wft,"DetrForSegmentation"),Wft.forEach(t),XJo=r(jye," (DETR model)"),jye.forEach(t),zft.forEach(t),zJo=i(sa),b6=n(sa,"P",{});var Dye=s(b6);QJo=r(Dye,"The model is set in evaluation mode by default using "),Ehe=n(Dye,"CODE",{});var Hft=s(Ehe);WJo=r(Hft,"model.eval()"),Hft.forEach(t),HJo=r(Dye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Che=n(Dye,"CODE",{});var Uft=s(Che);UJo=r(Uft,"model.train()"),Uft.forEach(t),Dye.forEach(t),JJo=i(sa),whe=n(sa,"P",{});var Jft=s(whe);YJo=r(Jft,"Examples:"),Jft.forEach(t),KJo=i(sa),m(V3.$$.fragment,sa),sa.forEach(t),Pl.forEach(t),TBe=i(c),lc=n(c,"H2",{class:!0});var S$e=s(lc);F6=n(S$e,"A",{id:!0,class:!0,href:!0});var Yft=s(F6);Ahe=n(Yft,"SPAN",{});var Kft=s(Ahe);m(X3.$$.fragment,Kft),Kft.forEach(t),Yft.forEach(t),ZJo=i(S$e),yhe=n(S$e,"SPAN",{});var Zft=s(yhe);eYo=r(Zft,"AutoModelForSemanticSegmentation"),Zft.forEach(t),S$e.forEach(t),MBe=i(c),ur=n(c,"DIV",{class:!0});var Il=s(ur);m(z3.$$.fragment,Il),oYo=i(Il),ic=n(Il,"P",{});var aJ=s(ic);rYo=r(aJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),sO=n(aJ,"A",{href:!0});var emt=s(sO);tYo=r(emt,"from_pretrained()"),emt.forEach(t),aYo=r(aJ," class method or the "),lO=n(aJ,"A",{href:!0});var omt=s(lO);nYo=r(omt,"from_config()"),omt.forEach(t),sYo=r(aJ,` class
method.`),aJ.forEach(t),lYo=i(Il),Q3=n(Il,"P",{});var R$e=s(Q3);iYo=r(R$e,"This class cannot be instantiated directly using "),Lhe=n(R$e,"CODE",{});var rmt=s(Lhe);dYo=r(rmt,"__init__()"),rmt.forEach(t),cYo=r(R$e," (throws an error)."),R$e.forEach(t),fYo=i(Il),ft=n(Il,"DIV",{class:!0});var ql=s(ft);m(W3.$$.fragment,ql),mYo=i(ql),xhe=n(ql,"P",{});var tmt=s(xhe);gYo=r(tmt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),tmt.forEach(t),hYo=i(ql),dc=n(ql,"P",{});var nJ=s(dc);pYo=r(nJ,`Note:
Loading a model from its configuration file does `),khe=n(nJ,"STRONG",{});var amt=s(khe);_Yo=r(amt,"not"),amt.forEach(t),uYo=r(nJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),iO=n(nJ,"A",{href:!0});var nmt=s(iO);bYo=r(nmt,"from_pretrained()"),nmt.forEach(t),FYo=r(nJ," to load the model weights."),nJ.forEach(t),vYo=i(ql),She=n(ql,"P",{});var smt=s(She);TYo=r(smt,"Examples:"),smt.forEach(t),MYo=i(ql),m(H3.$$.fragment,ql),ql.forEach(t),EYo=i(Il),ao=n(Il,"DIV",{class:!0});var la=s(ao);m(U3.$$.fragment,la),CYo=i(la),Rhe=n(la,"P",{});var lmt=s(Rhe);wYo=r(lmt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),lmt.forEach(t),AYo=i(la),hn=n(la,"P",{});var Y4=s(hn);yYo=r(Y4,"The model class to instantiate is selected based on the "),Bhe=n(Y4,"CODE",{});var imt=s(Bhe);LYo=r(imt,"model_type"),imt.forEach(t),xYo=r(Y4,` property of the config object (either
passed as an argument or loaded from `),Phe=n(Y4,"CODE",{});var dmt=s(Phe);kYo=r(dmt,"pretrained_model_name_or_path"),dmt.forEach(t),SYo=r(Y4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$he=n(Y4,"CODE",{});var cmt=s($he);RYo=r(cmt,"pretrained_model_name_or_path"),cmt.forEach(t),BYo=r(Y4,":"),Y4.forEach(t),PYo=i(la),cc=n(la,"UL",{});var sJ=s(cc);v6=n(sJ,"LI",{});var Gye=s(v6);Ihe=n(Gye,"STRONG",{});var fmt=s(Ihe);$Yo=r(fmt,"beit"),fmt.forEach(t),IYo=r(Gye," \u2014 "),dO=n(Gye,"A",{href:!0});var mmt=s(dO);qYo=r(mmt,"BeitForSemanticSegmentation"),mmt.forEach(t),NYo=r(Gye," (BEiT model)"),Gye.forEach(t),jYo=i(sJ),T6=n(sJ,"LI",{});var Oye=s(T6);qhe=n(Oye,"STRONG",{});var gmt=s(qhe);DYo=r(gmt,"dpt"),gmt.forEach(t),GYo=r(Oye," \u2014 "),cO=n(Oye,"A",{href:!0});var hmt=s(cO);OYo=r(hmt,"DPTForSemanticSegmentation"),hmt.forEach(t),VYo=r(Oye," (DPT model)"),Oye.forEach(t),XYo=i(sJ),M6=n(sJ,"LI",{});var Vye=s(M6);Nhe=n(Vye,"STRONG",{});var pmt=s(Nhe);zYo=r(pmt,"segformer"),pmt.forEach(t),QYo=r(Vye," \u2014 "),fO=n(Vye,"A",{href:!0});var _mt=s(fO);WYo=r(_mt,"SegformerForSemanticSegmentation"),_mt.forEach(t),HYo=r(Vye," (SegFormer model)"),Vye.forEach(t),sJ.forEach(t),UYo=i(la),E6=n(la,"P",{});var Xye=s(E6);JYo=r(Xye,"The model is set in evaluation mode by default using "),jhe=n(Xye,"CODE",{});var umt=s(jhe);YYo=r(umt,"model.eval()"),umt.forEach(t),KYo=r(Xye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dhe=n(Xye,"CODE",{});var bmt=s(Dhe);ZYo=r(bmt,"model.train()"),bmt.forEach(t),Xye.forEach(t),eKo=i(la),Ghe=n(la,"P",{});var Fmt=s(Ghe);oKo=r(Fmt,"Examples:"),Fmt.forEach(t),rKo=i(la),m(J3.$$.fragment,la),la.forEach(t),Il.forEach(t),EBe=i(c),fc=n(c,"H2",{class:!0});var B$e=s(fc);C6=n(B$e,"A",{id:!0,class:!0,href:!0});var vmt=s(C6);Ohe=n(vmt,"SPAN",{});var Tmt=s(Ohe);m(Y3.$$.fragment,Tmt),Tmt.forEach(t),vmt.forEach(t),tKo=i(B$e),Vhe=n(B$e,"SPAN",{});var Mmt=s(Vhe);aKo=r(Mmt,"AutoModelForInstanceSegmentation"),Mmt.forEach(t),B$e.forEach(t),CBe=i(c),br=n(c,"DIV",{class:!0});var Nl=s(br);m(K3.$$.fragment,Nl),nKo=i(Nl),mc=n(Nl,"P",{});var lJ=s(mc);sKo=r(lJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),mO=n(lJ,"A",{href:!0});var Emt=s(mO);lKo=r(Emt,"from_pretrained()"),Emt.forEach(t),iKo=r(lJ," class method or the "),gO=n(lJ,"A",{href:!0});var Cmt=s(gO);dKo=r(Cmt,"from_config()"),Cmt.forEach(t),cKo=r(lJ,` class
method.`),lJ.forEach(t),fKo=i(Nl),Z3=n(Nl,"P",{});var P$e=s(Z3);mKo=r(P$e,"This class cannot be instantiated directly using "),Xhe=n(P$e,"CODE",{});var wmt=s(Xhe);gKo=r(wmt,"__init__()"),wmt.forEach(t),hKo=r(P$e," (throws an error)."),P$e.forEach(t),pKo=i(Nl),mt=n(Nl,"DIV",{class:!0});var jl=s(mt);m(ew.$$.fragment,jl),_Ko=i(jl),zhe=n(jl,"P",{});var Amt=s(zhe);uKo=r(Amt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Amt.forEach(t),bKo=i(jl),gc=n(jl,"P",{});var iJ=s(gc);FKo=r(iJ,`Note:
Loading a model from its configuration file does `),Qhe=n(iJ,"STRONG",{});var ymt=s(Qhe);vKo=r(ymt,"not"),ymt.forEach(t),TKo=r(iJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),hO=n(iJ,"A",{href:!0});var Lmt=s(hO);MKo=r(Lmt,"from_pretrained()"),Lmt.forEach(t),EKo=r(iJ," to load the model weights."),iJ.forEach(t),CKo=i(jl),Whe=n(jl,"P",{});var xmt=s(Whe);wKo=r(xmt,"Examples:"),xmt.forEach(t),AKo=i(jl),m(ow.$$.fragment,jl),jl.forEach(t),yKo=i(Nl),no=n(Nl,"DIV",{class:!0});var ia=s(no);m(rw.$$.fragment,ia),LKo=i(ia),Hhe=n(ia,"P",{});var kmt=s(Hhe);xKo=r(kmt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),kmt.forEach(t),kKo=i(ia),pn=n(ia,"P",{});var K4=s(pn);SKo=r(K4,"The model class to instantiate is selected based on the "),Uhe=n(K4,"CODE",{});var Smt=s(Uhe);RKo=r(Smt,"model_type"),Smt.forEach(t),BKo=r(K4,` property of the config object (either
passed as an argument or loaded from `),Jhe=n(K4,"CODE",{});var Rmt=s(Jhe);PKo=r(Rmt,"pretrained_model_name_or_path"),Rmt.forEach(t),$Ko=r(K4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yhe=n(K4,"CODE",{});var Bmt=s(Yhe);IKo=r(Bmt,"pretrained_model_name_or_path"),Bmt.forEach(t),qKo=r(K4,":"),K4.forEach(t),NKo=i(ia),Khe=n(ia,"UL",{});var Pmt=s(Khe);w6=n(Pmt,"LI",{});var zye=s(w6);Zhe=n(zye,"STRONG",{});var $mt=s(Zhe);jKo=r($mt,"maskformer"),$mt.forEach(t),DKo=r(zye," \u2014 "),pO=n(zye,"A",{href:!0});var Imt=s(pO);GKo=r(Imt,"MaskFormerForInstanceSegmentation"),Imt.forEach(t),OKo=r(zye," (MaskFormer model)"),zye.forEach(t),Pmt.forEach(t),VKo=i(ia),A6=n(ia,"P",{});var Qye=s(A6);XKo=r(Qye,"The model is set in evaluation mode by default using "),epe=n(Qye,"CODE",{});var qmt=s(epe);zKo=r(qmt,"model.eval()"),qmt.forEach(t),QKo=r(Qye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ope=n(Qye,"CODE",{});var Nmt=s(ope);WKo=r(Nmt,"model.train()"),Nmt.forEach(t),Qye.forEach(t),HKo=i(ia),rpe=n(ia,"P",{});var jmt=s(rpe);UKo=r(jmt,"Examples:"),jmt.forEach(t),JKo=i(ia),m(tw.$$.fragment,ia),ia.forEach(t),Nl.forEach(t),wBe=i(c),hc=n(c,"H2",{class:!0});var $$e=s(hc);y6=n($$e,"A",{id:!0,class:!0,href:!0});var Dmt=s(y6);tpe=n(Dmt,"SPAN",{});var Gmt=s(tpe);m(aw.$$.fragment,Gmt),Gmt.forEach(t),Dmt.forEach(t),YKo=i($$e),ape=n($$e,"SPAN",{});var Omt=s(ape);KKo=r(Omt,"TFAutoModel"),Omt.forEach(t),$$e.forEach(t),ABe=i(c),Fr=n(c,"DIV",{class:!0});var Dl=s(Fr);m(nw.$$.fragment,Dl),ZKo=i(Dl),pc=n(Dl,"P",{});var dJ=s(pc);eZo=r(dJ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),_O=n(dJ,"A",{href:!0});var Vmt=s(_O);oZo=r(Vmt,"from_pretrained()"),Vmt.forEach(t),rZo=r(dJ," class method or the "),uO=n(dJ,"A",{href:!0});var Xmt=s(uO);tZo=r(Xmt,"from_config()"),Xmt.forEach(t),aZo=r(dJ,` class
method.`),dJ.forEach(t),nZo=i(Dl),sw=n(Dl,"P",{});var I$e=s(sw);sZo=r(I$e,"This class cannot be instantiated directly using "),npe=n(I$e,"CODE",{});var zmt=s(npe);lZo=r(zmt,"__init__()"),zmt.forEach(t),iZo=r(I$e," (throws an error)."),I$e.forEach(t),dZo=i(Dl),gt=n(Dl,"DIV",{class:!0});var Gl=s(gt);m(lw.$$.fragment,Gl),cZo=i(Gl),spe=n(Gl,"P",{});var Qmt=s(spe);fZo=r(Qmt,"Instantiates one of the base model classes of the library from a configuration."),Qmt.forEach(t),mZo=i(Gl),_c=n(Gl,"P",{});var cJ=s(_c);gZo=r(cJ,`Note:
Loading a model from its configuration file does `),lpe=n(cJ,"STRONG",{});var Wmt=s(lpe);hZo=r(Wmt,"not"),Wmt.forEach(t),pZo=r(cJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),bO=n(cJ,"A",{href:!0});var Hmt=s(bO);_Zo=r(Hmt,"from_pretrained()"),Hmt.forEach(t),uZo=r(cJ," to load the model weights."),cJ.forEach(t),bZo=i(Gl),ipe=n(Gl,"P",{});var Umt=s(ipe);FZo=r(Umt,"Examples:"),Umt.forEach(t),vZo=i(Gl),m(iw.$$.fragment,Gl),Gl.forEach(t),TZo=i(Dl),ho=n(Dl,"DIV",{class:!0});var pa=s(ho);m(dw.$$.fragment,pa),MZo=i(pa),dpe=n(pa,"P",{});var Jmt=s(dpe);EZo=r(Jmt,"Instantiate one of the base model classes of the library from a pretrained model."),Jmt.forEach(t),CZo=i(pa),_n=n(pa,"P",{});var Z4=s(_n);wZo=r(Z4,"The model class to instantiate is selected based on the "),cpe=n(Z4,"CODE",{});var Ymt=s(cpe);AZo=r(Ymt,"model_type"),Ymt.forEach(t),yZo=r(Z4,` property of the config object (either
passed as an argument or loaded from `),fpe=n(Z4,"CODE",{});var Kmt=s(fpe);LZo=r(Kmt,"pretrained_model_name_or_path"),Kmt.forEach(t),xZo=r(Z4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mpe=n(Z4,"CODE",{});var Zmt=s(mpe);kZo=r(Zmt,"pretrained_model_name_or_path"),Zmt.forEach(t),SZo=r(Z4,":"),Z4.forEach(t),RZo=i(pa),x=n(pa,"UL",{});var k=s(x);L6=n(k,"LI",{});var Wye=s(L6);gpe=n(Wye,"STRONG",{});var egt=s(gpe);BZo=r(egt,"albert"),egt.forEach(t),PZo=r(Wye," \u2014 "),FO=n(Wye,"A",{href:!0});var ogt=s(FO);$Zo=r(ogt,"TFAlbertModel"),ogt.forEach(t),IZo=r(Wye," (ALBERT model)"),Wye.forEach(t),qZo=i(k),x6=n(k,"LI",{});var Hye=s(x6);hpe=n(Hye,"STRONG",{});var rgt=s(hpe);NZo=r(rgt,"bart"),rgt.forEach(t),jZo=r(Hye," \u2014 "),vO=n(Hye,"A",{href:!0});var tgt=s(vO);DZo=r(tgt,"TFBartModel"),tgt.forEach(t),GZo=r(Hye," (BART model)"),Hye.forEach(t),OZo=i(k),k6=n(k,"LI",{});var Uye=s(k6);ppe=n(Uye,"STRONG",{});var agt=s(ppe);VZo=r(agt,"bert"),agt.forEach(t),XZo=r(Uye," \u2014 "),TO=n(Uye,"A",{href:!0});var ngt=s(TO);zZo=r(ngt,"TFBertModel"),ngt.forEach(t),QZo=r(Uye," (BERT model)"),Uye.forEach(t),WZo=i(k),S6=n(k,"LI",{});var Jye=s(S6);_pe=n(Jye,"STRONG",{});var sgt=s(_pe);HZo=r(sgt,"blenderbot"),sgt.forEach(t),UZo=r(Jye," \u2014 "),MO=n(Jye,"A",{href:!0});var lgt=s(MO);JZo=r(lgt,"TFBlenderbotModel"),lgt.forEach(t),YZo=r(Jye," (Blenderbot model)"),Jye.forEach(t),KZo=i(k),R6=n(k,"LI",{});var Yye=s(R6);upe=n(Yye,"STRONG",{});var igt=s(upe);ZZo=r(igt,"blenderbot-small"),igt.forEach(t),eer=r(Yye," \u2014 "),EO=n(Yye,"A",{href:!0});var dgt=s(EO);oer=r(dgt,"TFBlenderbotSmallModel"),dgt.forEach(t),rer=r(Yye," (BlenderbotSmall model)"),Yye.forEach(t),ter=i(k),B6=n(k,"LI",{});var Kye=s(B6);bpe=n(Kye,"STRONG",{});var cgt=s(bpe);aer=r(cgt,"camembert"),cgt.forEach(t),ner=r(Kye," \u2014 "),CO=n(Kye,"A",{href:!0});var fgt=s(CO);ser=r(fgt,"TFCamembertModel"),fgt.forEach(t),ler=r(Kye," (CamemBERT model)"),Kye.forEach(t),ier=i(k),P6=n(k,"LI",{});var Zye=s(P6);Fpe=n(Zye,"STRONG",{});var mgt=s(Fpe);der=r(mgt,"clip"),mgt.forEach(t),cer=r(Zye," \u2014 "),wO=n(Zye,"A",{href:!0});var ggt=s(wO);fer=r(ggt,"TFCLIPModel"),ggt.forEach(t),mer=r(Zye," (CLIP model)"),Zye.forEach(t),ger=i(k),$6=n(k,"LI",{});var eLe=s($6);vpe=n(eLe,"STRONG",{});var hgt=s(vpe);her=r(hgt,"convbert"),hgt.forEach(t),per=r(eLe," \u2014 "),AO=n(eLe,"A",{href:!0});var pgt=s(AO);_er=r(pgt,"TFConvBertModel"),pgt.forEach(t),uer=r(eLe," (ConvBERT model)"),eLe.forEach(t),ber=i(k),I6=n(k,"LI",{});var oLe=s(I6);Tpe=n(oLe,"STRONG",{});var _gt=s(Tpe);Fer=r(_gt,"convnext"),_gt.forEach(t),ver=r(oLe," \u2014 "),yO=n(oLe,"A",{href:!0});var ugt=s(yO);Ter=r(ugt,"TFConvNextModel"),ugt.forEach(t),Mer=r(oLe," (ConvNext model)"),oLe.forEach(t),Eer=i(k),q6=n(k,"LI",{});var rLe=s(q6);Mpe=n(rLe,"STRONG",{});var bgt=s(Mpe);Cer=r(bgt,"ctrl"),bgt.forEach(t),wer=r(rLe," \u2014 "),LO=n(rLe,"A",{href:!0});var Fgt=s(LO);Aer=r(Fgt,"TFCTRLModel"),Fgt.forEach(t),yer=r(rLe," (CTRL model)"),rLe.forEach(t),Ler=i(k),N6=n(k,"LI",{});var tLe=s(N6);Epe=n(tLe,"STRONG",{});var vgt=s(Epe);xer=r(vgt,"deberta"),vgt.forEach(t),ker=r(tLe," \u2014 "),xO=n(tLe,"A",{href:!0});var Tgt=s(xO);Ser=r(Tgt,"TFDebertaModel"),Tgt.forEach(t),Rer=r(tLe," (DeBERTa model)"),tLe.forEach(t),Ber=i(k),j6=n(k,"LI",{});var aLe=s(j6);Cpe=n(aLe,"STRONG",{});var Mgt=s(Cpe);Per=r(Mgt,"deberta-v2"),Mgt.forEach(t),$er=r(aLe," \u2014 "),kO=n(aLe,"A",{href:!0});var Egt=s(kO);Ier=r(Egt,"TFDebertaV2Model"),Egt.forEach(t),qer=r(aLe," (DeBERTa-v2 model)"),aLe.forEach(t),Ner=i(k),D6=n(k,"LI",{});var nLe=s(D6);wpe=n(nLe,"STRONG",{});var Cgt=s(wpe);jer=r(Cgt,"distilbert"),Cgt.forEach(t),Der=r(nLe," \u2014 "),SO=n(nLe,"A",{href:!0});var wgt=s(SO);Ger=r(wgt,"TFDistilBertModel"),wgt.forEach(t),Oer=r(nLe," (DistilBERT model)"),nLe.forEach(t),Ver=i(k),G6=n(k,"LI",{});var sLe=s(G6);Ape=n(sLe,"STRONG",{});var Agt=s(Ape);Xer=r(Agt,"dpr"),Agt.forEach(t),zer=r(sLe," \u2014 "),RO=n(sLe,"A",{href:!0});var ygt=s(RO);Qer=r(ygt,"TFDPRQuestionEncoder"),ygt.forEach(t),Wer=r(sLe," (DPR model)"),sLe.forEach(t),Her=i(k),O6=n(k,"LI",{});var lLe=s(O6);ype=n(lLe,"STRONG",{});var Lgt=s(ype);Uer=r(Lgt,"electra"),Lgt.forEach(t),Jer=r(lLe," \u2014 "),BO=n(lLe,"A",{href:!0});var xgt=s(BO);Yer=r(xgt,"TFElectraModel"),xgt.forEach(t),Ker=r(lLe," (ELECTRA model)"),lLe.forEach(t),Zer=i(k),V6=n(k,"LI",{});var iLe=s(V6);Lpe=n(iLe,"STRONG",{});var kgt=s(Lpe);eor=r(kgt,"flaubert"),kgt.forEach(t),oor=r(iLe," \u2014 "),PO=n(iLe,"A",{href:!0});var Sgt=s(PO);ror=r(Sgt,"TFFlaubertModel"),Sgt.forEach(t),tor=r(iLe," (FlauBERT model)"),iLe.forEach(t),aor=i(k),Os=n(k,"LI",{});var _9=s(Os);xpe=n(_9,"STRONG",{});var Rgt=s(xpe);nor=r(Rgt,"funnel"),Rgt.forEach(t),sor=r(_9," \u2014 "),$O=n(_9,"A",{href:!0});var Bgt=s($O);lor=r(Bgt,"TFFunnelModel"),Bgt.forEach(t),ior=r(_9," or "),IO=n(_9,"A",{href:!0});var Pgt=s(IO);dor=r(Pgt,"TFFunnelBaseModel"),Pgt.forEach(t),cor=r(_9," (Funnel Transformer model)"),_9.forEach(t),mor=i(k),X6=n(k,"LI",{});var dLe=s(X6);kpe=n(dLe,"STRONG",{});var $gt=s(kpe);gor=r($gt,"gpt2"),$gt.forEach(t),hor=r(dLe," \u2014 "),qO=n(dLe,"A",{href:!0});var Igt=s(qO);por=r(Igt,"TFGPT2Model"),Igt.forEach(t),_or=r(dLe," (OpenAI GPT-2 model)"),dLe.forEach(t),uor=i(k),z6=n(k,"LI",{});var cLe=s(z6);Spe=n(cLe,"STRONG",{});var qgt=s(Spe);bor=r(qgt,"gptj"),qgt.forEach(t),For=r(cLe," \u2014 "),NO=n(cLe,"A",{href:!0});var Ngt=s(NO);vor=r(Ngt,"TFGPTJModel"),Ngt.forEach(t),Tor=r(cLe," (GPT-J model)"),cLe.forEach(t),Mor=i(k),Q6=n(k,"LI",{});var fLe=s(Q6);Rpe=n(fLe,"STRONG",{});var jgt=s(Rpe);Eor=r(jgt,"hubert"),jgt.forEach(t),Cor=r(fLe," \u2014 "),jO=n(fLe,"A",{href:!0});var Dgt=s(jO);wor=r(Dgt,"TFHubertModel"),Dgt.forEach(t),Aor=r(fLe," (Hubert model)"),fLe.forEach(t),yor=i(k),W6=n(k,"LI",{});var mLe=s(W6);Bpe=n(mLe,"STRONG",{});var Ggt=s(Bpe);Lor=r(Ggt,"layoutlm"),Ggt.forEach(t),xor=r(mLe," \u2014 "),DO=n(mLe,"A",{href:!0});var Ogt=s(DO);kor=r(Ogt,"TFLayoutLMModel"),Ogt.forEach(t),Sor=r(mLe," (LayoutLM model)"),mLe.forEach(t),Ror=i(k),H6=n(k,"LI",{});var gLe=s(H6);Ppe=n(gLe,"STRONG",{});var Vgt=s(Ppe);Bor=r(Vgt,"led"),Vgt.forEach(t),Por=r(gLe," \u2014 "),GO=n(gLe,"A",{href:!0});var Xgt=s(GO);$or=r(Xgt,"TFLEDModel"),Xgt.forEach(t),Ior=r(gLe," (LED model)"),gLe.forEach(t),qor=i(k),U6=n(k,"LI",{});var hLe=s(U6);$pe=n(hLe,"STRONG",{});var zgt=s($pe);Nor=r(zgt,"longformer"),zgt.forEach(t),jor=r(hLe," \u2014 "),OO=n(hLe,"A",{href:!0});var Qgt=s(OO);Dor=r(Qgt,"TFLongformerModel"),Qgt.forEach(t),Gor=r(hLe," (Longformer model)"),hLe.forEach(t),Oor=i(k),J6=n(k,"LI",{});var pLe=s(J6);Ipe=n(pLe,"STRONG",{});var Wgt=s(Ipe);Vor=r(Wgt,"lxmert"),Wgt.forEach(t),Xor=r(pLe," \u2014 "),VO=n(pLe,"A",{href:!0});var Hgt=s(VO);zor=r(Hgt,"TFLxmertModel"),Hgt.forEach(t),Qor=r(pLe," (LXMERT model)"),pLe.forEach(t),Wor=i(k),Y6=n(k,"LI",{});var _Le=s(Y6);qpe=n(_Le,"STRONG",{});var Ugt=s(qpe);Hor=r(Ugt,"marian"),Ugt.forEach(t),Uor=r(_Le," \u2014 "),XO=n(_Le,"A",{href:!0});var Jgt=s(XO);Jor=r(Jgt,"TFMarianModel"),Jgt.forEach(t),Yor=r(_Le," (Marian model)"),_Le.forEach(t),Kor=i(k),K6=n(k,"LI",{});var uLe=s(K6);Npe=n(uLe,"STRONG",{});var Ygt=s(Npe);Zor=r(Ygt,"mbart"),Ygt.forEach(t),err=r(uLe," \u2014 "),zO=n(uLe,"A",{href:!0});var Kgt=s(zO);orr=r(Kgt,"TFMBartModel"),Kgt.forEach(t),rrr=r(uLe," (mBART model)"),uLe.forEach(t),trr=i(k),Z6=n(k,"LI",{});var bLe=s(Z6);jpe=n(bLe,"STRONG",{});var Zgt=s(jpe);arr=r(Zgt,"mobilebert"),Zgt.forEach(t),nrr=r(bLe," \u2014 "),QO=n(bLe,"A",{href:!0});var eht=s(QO);srr=r(eht,"TFMobileBertModel"),eht.forEach(t),lrr=r(bLe," (MobileBERT model)"),bLe.forEach(t),irr=i(k),e0=n(k,"LI",{});var FLe=s(e0);Dpe=n(FLe,"STRONG",{});var oht=s(Dpe);drr=r(oht,"mpnet"),oht.forEach(t),crr=r(FLe," \u2014 "),WO=n(FLe,"A",{href:!0});var rht=s(WO);frr=r(rht,"TFMPNetModel"),rht.forEach(t),mrr=r(FLe," (MPNet model)"),FLe.forEach(t),grr=i(k),o0=n(k,"LI",{});var vLe=s(o0);Gpe=n(vLe,"STRONG",{});var tht=s(Gpe);hrr=r(tht,"mt5"),tht.forEach(t),prr=r(vLe," \u2014 "),HO=n(vLe,"A",{href:!0});var aht=s(HO);_rr=r(aht,"TFMT5Model"),aht.forEach(t),urr=r(vLe," (mT5 model)"),vLe.forEach(t),brr=i(k),r0=n(k,"LI",{});var TLe=s(r0);Ope=n(TLe,"STRONG",{});var nht=s(Ope);Frr=r(nht,"openai-gpt"),nht.forEach(t),vrr=r(TLe," \u2014 "),UO=n(TLe,"A",{href:!0});var sht=s(UO);Trr=r(sht,"TFOpenAIGPTModel"),sht.forEach(t),Mrr=r(TLe," (OpenAI GPT model)"),TLe.forEach(t),Err=i(k),t0=n(k,"LI",{});var MLe=s(t0);Vpe=n(MLe,"STRONG",{});var lht=s(Vpe);Crr=r(lht,"pegasus"),lht.forEach(t),wrr=r(MLe," \u2014 "),JO=n(MLe,"A",{href:!0});var iht=s(JO);Arr=r(iht,"TFPegasusModel"),iht.forEach(t),yrr=r(MLe," (Pegasus model)"),MLe.forEach(t),Lrr=i(k),a0=n(k,"LI",{});var ELe=s(a0);Xpe=n(ELe,"STRONG",{});var dht=s(Xpe);xrr=r(dht,"rembert"),dht.forEach(t),krr=r(ELe," \u2014 "),YO=n(ELe,"A",{href:!0});var cht=s(YO);Srr=r(cht,"TFRemBertModel"),cht.forEach(t),Rrr=r(ELe," (RemBERT model)"),ELe.forEach(t),Brr=i(k),n0=n(k,"LI",{});var CLe=s(n0);zpe=n(CLe,"STRONG",{});var fht=s(zpe);Prr=r(fht,"roberta"),fht.forEach(t),$rr=r(CLe," \u2014 "),KO=n(CLe,"A",{href:!0});var mht=s(KO);Irr=r(mht,"TFRobertaModel"),mht.forEach(t),qrr=r(CLe," (RoBERTa model)"),CLe.forEach(t),Nrr=i(k),s0=n(k,"LI",{});var wLe=s(s0);Qpe=n(wLe,"STRONG",{});var ght=s(Qpe);jrr=r(ght,"roformer"),ght.forEach(t),Drr=r(wLe," \u2014 "),ZO=n(wLe,"A",{href:!0});var hht=s(ZO);Grr=r(hht,"TFRoFormerModel"),hht.forEach(t),Orr=r(wLe," (RoFormer model)"),wLe.forEach(t),Vrr=i(k),l0=n(k,"LI",{});var ALe=s(l0);Wpe=n(ALe,"STRONG",{});var pht=s(Wpe);Xrr=r(pht,"speech_to_text"),pht.forEach(t),zrr=r(ALe," \u2014 "),eV=n(ALe,"A",{href:!0});var _ht=s(eV);Qrr=r(_ht,"TFSpeech2TextModel"),_ht.forEach(t),Wrr=r(ALe," (Speech2Text model)"),ALe.forEach(t),Hrr=i(k),i0=n(k,"LI",{});var yLe=s(i0);Hpe=n(yLe,"STRONG",{});var uht=s(Hpe);Urr=r(uht,"t5"),uht.forEach(t),Jrr=r(yLe," \u2014 "),oV=n(yLe,"A",{href:!0});var bht=s(oV);Yrr=r(bht,"TFT5Model"),bht.forEach(t),Krr=r(yLe," (T5 model)"),yLe.forEach(t),Zrr=i(k),d0=n(k,"LI",{});var LLe=s(d0);Upe=n(LLe,"STRONG",{});var Fht=s(Upe);etr=r(Fht,"tapas"),Fht.forEach(t),otr=r(LLe," \u2014 "),rV=n(LLe,"A",{href:!0});var vht=s(rV);rtr=r(vht,"TFTapasModel"),vht.forEach(t),ttr=r(LLe," (TAPAS model)"),LLe.forEach(t),atr=i(k),c0=n(k,"LI",{});var xLe=s(c0);Jpe=n(xLe,"STRONG",{});var Tht=s(Jpe);ntr=r(Tht,"transfo-xl"),Tht.forEach(t),str=r(xLe," \u2014 "),tV=n(xLe,"A",{href:!0});var Mht=s(tV);ltr=r(Mht,"TFTransfoXLModel"),Mht.forEach(t),itr=r(xLe," (Transformer-XL model)"),xLe.forEach(t),dtr=i(k),f0=n(k,"LI",{});var kLe=s(f0);Ype=n(kLe,"STRONG",{});var Eht=s(Ype);ctr=r(Eht,"vit"),Eht.forEach(t),ftr=r(kLe," \u2014 "),aV=n(kLe,"A",{href:!0});var Cht=s(aV);mtr=r(Cht,"TFViTModel"),Cht.forEach(t),gtr=r(kLe," (ViT model)"),kLe.forEach(t),htr=i(k),m0=n(k,"LI",{});var SLe=s(m0);Kpe=n(SLe,"STRONG",{});var wht=s(Kpe);ptr=r(wht,"vit_mae"),wht.forEach(t),_tr=r(SLe," \u2014 "),nV=n(SLe,"A",{href:!0});var Aht=s(nV);utr=r(Aht,"TFViTMAEModel"),Aht.forEach(t),btr=r(SLe," (ViTMAE model)"),SLe.forEach(t),Ftr=i(k),g0=n(k,"LI",{});var RLe=s(g0);Zpe=n(RLe,"STRONG",{});var yht=s(Zpe);vtr=r(yht,"wav2vec2"),yht.forEach(t),Ttr=r(RLe," \u2014 "),sV=n(RLe,"A",{href:!0});var Lht=s(sV);Mtr=r(Lht,"TFWav2Vec2Model"),Lht.forEach(t),Etr=r(RLe," (Wav2Vec2 model)"),RLe.forEach(t),Ctr=i(k),h0=n(k,"LI",{});var BLe=s(h0);e_e=n(BLe,"STRONG",{});var xht=s(e_e);wtr=r(xht,"xlm"),xht.forEach(t),Atr=r(BLe," \u2014 "),lV=n(BLe,"A",{href:!0});var kht=s(lV);ytr=r(kht,"TFXLMModel"),kht.forEach(t),Ltr=r(BLe," (XLM model)"),BLe.forEach(t),xtr=i(k),p0=n(k,"LI",{});var PLe=s(p0);o_e=n(PLe,"STRONG",{});var Sht=s(o_e);ktr=r(Sht,"xlm-roberta"),Sht.forEach(t),Str=r(PLe," \u2014 "),iV=n(PLe,"A",{href:!0});var Rht=s(iV);Rtr=r(Rht,"TFXLMRobertaModel"),Rht.forEach(t),Btr=r(PLe," (XLM-RoBERTa model)"),PLe.forEach(t),Ptr=i(k),_0=n(k,"LI",{});var $Le=s(_0);r_e=n($Le,"STRONG",{});var Bht=s(r_e);$tr=r(Bht,"xlnet"),Bht.forEach(t),Itr=r($Le," \u2014 "),dV=n($Le,"A",{href:!0});var Pht=s(dV);qtr=r(Pht,"TFXLNetModel"),Pht.forEach(t),Ntr=r($Le," (XLNet model)"),$Le.forEach(t),k.forEach(t),jtr=i(pa),t_e=n(pa,"P",{});var $ht=s(t_e);Dtr=r($ht,"Examples:"),$ht.forEach(t),Gtr=i(pa),m(cw.$$.fragment,pa),pa.forEach(t),Dl.forEach(t),yBe=i(c),uc=n(c,"H2",{class:!0});var q$e=s(uc);u0=n(q$e,"A",{id:!0,class:!0,href:!0});var Iht=s(u0);a_e=n(Iht,"SPAN",{});var qht=s(a_e);m(fw.$$.fragment,qht),qht.forEach(t),Iht.forEach(t),Otr=i(q$e),n_e=n(q$e,"SPAN",{});var Nht=s(n_e);Vtr=r(Nht,"TFAutoModelForPreTraining"),Nht.forEach(t),q$e.forEach(t),LBe=i(c),vr=n(c,"DIV",{class:!0});var Ol=s(vr);m(mw.$$.fragment,Ol),Xtr=i(Ol),bc=n(Ol,"P",{});var fJ=s(bc);ztr=r(fJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),cV=n(fJ,"A",{href:!0});var jht=s(cV);Qtr=r(jht,"from_pretrained()"),jht.forEach(t),Wtr=r(fJ," class method or the "),fV=n(fJ,"A",{href:!0});var Dht=s(fV);Htr=r(Dht,"from_config()"),Dht.forEach(t),Utr=r(fJ,` class
method.`),fJ.forEach(t),Jtr=i(Ol),gw=n(Ol,"P",{});var N$e=s(gw);Ytr=r(N$e,"This class cannot be instantiated directly using "),s_e=n(N$e,"CODE",{});var Ght=s(s_e);Ktr=r(Ght,"__init__()"),Ght.forEach(t),Ztr=r(N$e," (throws an error)."),N$e.forEach(t),ear=i(Ol),ht=n(Ol,"DIV",{class:!0});var Vl=s(ht);m(hw.$$.fragment,Vl),oar=i(Vl),l_e=n(Vl,"P",{});var Oht=s(l_e);rar=r(Oht,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Oht.forEach(t),tar=i(Vl),Fc=n(Vl,"P",{});var mJ=s(Fc);aar=r(mJ,`Note:
Loading a model from its configuration file does `),i_e=n(mJ,"STRONG",{});var Vht=s(i_e);nar=r(Vht,"not"),Vht.forEach(t),sar=r(mJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),mV=n(mJ,"A",{href:!0});var Xht=s(mV);lar=r(Xht,"from_pretrained()"),Xht.forEach(t),iar=r(mJ," to load the model weights."),mJ.forEach(t),dar=i(Vl),d_e=n(Vl,"P",{});var zht=s(d_e);car=r(zht,"Examples:"),zht.forEach(t),far=i(Vl),m(pw.$$.fragment,Vl),Vl.forEach(t),mar=i(Ol),po=n(Ol,"DIV",{class:!0});var _a=s(po);m(_w.$$.fragment,_a),gar=i(_a),c_e=n(_a,"P",{});var Qht=s(c_e);har=r(Qht,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Qht.forEach(t),par=i(_a),un=n(_a,"P",{});var eE=s(un);_ar=r(eE,"The model class to instantiate is selected based on the "),f_e=n(eE,"CODE",{});var Wht=s(f_e);uar=r(Wht,"model_type"),Wht.forEach(t),bar=r(eE,` property of the config object (either
passed as an argument or loaded from `),m_e=n(eE,"CODE",{});var Hht=s(m_e);Far=r(Hht,"pretrained_model_name_or_path"),Hht.forEach(t),Tar=r(eE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g_e=n(eE,"CODE",{});var Uht=s(g_e);Mar=r(Uht,"pretrained_model_name_or_path"),Uht.forEach(t),Ear=r(eE,":"),eE.forEach(t),Car=i(_a),H=n(_a,"UL",{});var U=s(H);b0=n(U,"LI",{});var ILe=s(b0);h_e=n(ILe,"STRONG",{});var Jht=s(h_e);war=r(Jht,"albert"),Jht.forEach(t),Aar=r(ILe," \u2014 "),gV=n(ILe,"A",{href:!0});var Yht=s(gV);yar=r(Yht,"TFAlbertForPreTraining"),Yht.forEach(t),Lar=r(ILe," (ALBERT model)"),ILe.forEach(t),xar=i(U),F0=n(U,"LI",{});var qLe=s(F0);p_e=n(qLe,"STRONG",{});var Kht=s(p_e);kar=r(Kht,"bart"),Kht.forEach(t),Sar=r(qLe," \u2014 "),hV=n(qLe,"A",{href:!0});var Zht=s(hV);Rar=r(Zht,"TFBartForConditionalGeneration"),Zht.forEach(t),Bar=r(qLe," (BART model)"),qLe.forEach(t),Par=i(U),v0=n(U,"LI",{});var NLe=s(v0);__e=n(NLe,"STRONG",{});var ept=s(__e);$ar=r(ept,"bert"),ept.forEach(t),Iar=r(NLe," \u2014 "),pV=n(NLe,"A",{href:!0});var opt=s(pV);qar=r(opt,"TFBertForPreTraining"),opt.forEach(t),Nar=r(NLe," (BERT model)"),NLe.forEach(t),jar=i(U),T0=n(U,"LI",{});var jLe=s(T0);u_e=n(jLe,"STRONG",{});var rpt=s(u_e);Dar=r(rpt,"camembert"),rpt.forEach(t),Gar=r(jLe," \u2014 "),_V=n(jLe,"A",{href:!0});var tpt=s(_V);Oar=r(tpt,"TFCamembertForMaskedLM"),tpt.forEach(t),Var=r(jLe," (CamemBERT model)"),jLe.forEach(t),Xar=i(U),M0=n(U,"LI",{});var DLe=s(M0);b_e=n(DLe,"STRONG",{});var apt=s(b_e);zar=r(apt,"ctrl"),apt.forEach(t),Qar=r(DLe," \u2014 "),uV=n(DLe,"A",{href:!0});var npt=s(uV);War=r(npt,"TFCTRLLMHeadModel"),npt.forEach(t),Har=r(DLe," (CTRL model)"),DLe.forEach(t),Uar=i(U),E0=n(U,"LI",{});var GLe=s(E0);F_e=n(GLe,"STRONG",{});var spt=s(F_e);Jar=r(spt,"distilbert"),spt.forEach(t),Yar=r(GLe," \u2014 "),bV=n(GLe,"A",{href:!0});var lpt=s(bV);Kar=r(lpt,"TFDistilBertForMaskedLM"),lpt.forEach(t),Zar=r(GLe," (DistilBERT model)"),GLe.forEach(t),enr=i(U),C0=n(U,"LI",{});var OLe=s(C0);v_e=n(OLe,"STRONG",{});var ipt=s(v_e);onr=r(ipt,"electra"),ipt.forEach(t),rnr=r(OLe," \u2014 "),FV=n(OLe,"A",{href:!0});var dpt=s(FV);tnr=r(dpt,"TFElectraForPreTraining"),dpt.forEach(t),anr=r(OLe," (ELECTRA model)"),OLe.forEach(t),nnr=i(U),w0=n(U,"LI",{});var VLe=s(w0);T_e=n(VLe,"STRONG",{});var cpt=s(T_e);snr=r(cpt,"flaubert"),cpt.forEach(t),lnr=r(VLe," \u2014 "),vV=n(VLe,"A",{href:!0});var fpt=s(vV);inr=r(fpt,"TFFlaubertWithLMHeadModel"),fpt.forEach(t),dnr=r(VLe," (FlauBERT model)"),VLe.forEach(t),cnr=i(U),A0=n(U,"LI",{});var XLe=s(A0);M_e=n(XLe,"STRONG",{});var mpt=s(M_e);fnr=r(mpt,"funnel"),mpt.forEach(t),mnr=r(XLe," \u2014 "),TV=n(XLe,"A",{href:!0});var gpt=s(TV);gnr=r(gpt,"TFFunnelForPreTraining"),gpt.forEach(t),hnr=r(XLe," (Funnel Transformer model)"),XLe.forEach(t),pnr=i(U),y0=n(U,"LI",{});var zLe=s(y0);E_e=n(zLe,"STRONG",{});var hpt=s(E_e);_nr=r(hpt,"gpt2"),hpt.forEach(t),unr=r(zLe," \u2014 "),MV=n(zLe,"A",{href:!0});var ppt=s(MV);bnr=r(ppt,"TFGPT2LMHeadModel"),ppt.forEach(t),Fnr=r(zLe," (OpenAI GPT-2 model)"),zLe.forEach(t),vnr=i(U),L0=n(U,"LI",{});var QLe=s(L0);C_e=n(QLe,"STRONG",{});var _pt=s(C_e);Tnr=r(_pt,"layoutlm"),_pt.forEach(t),Mnr=r(QLe," \u2014 "),EV=n(QLe,"A",{href:!0});var upt=s(EV);Enr=r(upt,"TFLayoutLMForMaskedLM"),upt.forEach(t),Cnr=r(QLe," (LayoutLM model)"),QLe.forEach(t),wnr=i(U),x0=n(U,"LI",{});var WLe=s(x0);w_e=n(WLe,"STRONG",{});var bpt=s(w_e);Anr=r(bpt,"lxmert"),bpt.forEach(t),ynr=r(WLe," \u2014 "),CV=n(WLe,"A",{href:!0});var Fpt=s(CV);Lnr=r(Fpt,"TFLxmertForPreTraining"),Fpt.forEach(t),xnr=r(WLe," (LXMERT model)"),WLe.forEach(t),knr=i(U),k0=n(U,"LI",{});var HLe=s(k0);A_e=n(HLe,"STRONG",{});var vpt=s(A_e);Snr=r(vpt,"mobilebert"),vpt.forEach(t),Rnr=r(HLe," \u2014 "),wV=n(HLe,"A",{href:!0});var Tpt=s(wV);Bnr=r(Tpt,"TFMobileBertForPreTraining"),Tpt.forEach(t),Pnr=r(HLe," (MobileBERT model)"),HLe.forEach(t),$nr=i(U),S0=n(U,"LI",{});var ULe=s(S0);y_e=n(ULe,"STRONG",{});var Mpt=s(y_e);Inr=r(Mpt,"mpnet"),Mpt.forEach(t),qnr=r(ULe," \u2014 "),AV=n(ULe,"A",{href:!0});var Ept=s(AV);Nnr=r(Ept,"TFMPNetForMaskedLM"),Ept.forEach(t),jnr=r(ULe," (MPNet model)"),ULe.forEach(t),Dnr=i(U),R0=n(U,"LI",{});var JLe=s(R0);L_e=n(JLe,"STRONG",{});var Cpt=s(L_e);Gnr=r(Cpt,"openai-gpt"),Cpt.forEach(t),Onr=r(JLe," \u2014 "),yV=n(JLe,"A",{href:!0});var wpt=s(yV);Vnr=r(wpt,"TFOpenAIGPTLMHeadModel"),wpt.forEach(t),Xnr=r(JLe," (OpenAI GPT model)"),JLe.forEach(t),znr=i(U),B0=n(U,"LI",{});var YLe=s(B0);x_e=n(YLe,"STRONG",{});var Apt=s(x_e);Qnr=r(Apt,"roberta"),Apt.forEach(t),Wnr=r(YLe," \u2014 "),LV=n(YLe,"A",{href:!0});var ypt=s(LV);Hnr=r(ypt,"TFRobertaForMaskedLM"),ypt.forEach(t),Unr=r(YLe," (RoBERTa model)"),YLe.forEach(t),Jnr=i(U),P0=n(U,"LI",{});var KLe=s(P0);k_e=n(KLe,"STRONG",{});var Lpt=s(k_e);Ynr=r(Lpt,"t5"),Lpt.forEach(t),Knr=r(KLe," \u2014 "),xV=n(KLe,"A",{href:!0});var xpt=s(xV);Znr=r(xpt,"TFT5ForConditionalGeneration"),xpt.forEach(t),esr=r(KLe," (T5 model)"),KLe.forEach(t),osr=i(U),$0=n(U,"LI",{});var ZLe=s($0);S_e=n(ZLe,"STRONG",{});var kpt=s(S_e);rsr=r(kpt,"tapas"),kpt.forEach(t),tsr=r(ZLe," \u2014 "),kV=n(ZLe,"A",{href:!0});var Spt=s(kV);asr=r(Spt,"TFTapasForMaskedLM"),Spt.forEach(t),nsr=r(ZLe," (TAPAS model)"),ZLe.forEach(t),ssr=i(U),I0=n(U,"LI",{});var e9e=s(I0);R_e=n(e9e,"STRONG",{});var Rpt=s(R_e);lsr=r(Rpt,"transfo-xl"),Rpt.forEach(t),isr=r(e9e," \u2014 "),SV=n(e9e,"A",{href:!0});var Bpt=s(SV);dsr=r(Bpt,"TFTransfoXLLMHeadModel"),Bpt.forEach(t),csr=r(e9e," (Transformer-XL model)"),e9e.forEach(t),fsr=i(U),q0=n(U,"LI",{});var o9e=s(q0);B_e=n(o9e,"STRONG",{});var Ppt=s(B_e);msr=r(Ppt,"vit_mae"),Ppt.forEach(t),gsr=r(o9e," \u2014 "),RV=n(o9e,"A",{href:!0});var $pt=s(RV);hsr=r($pt,"TFViTMAEForPreTraining"),$pt.forEach(t),psr=r(o9e," (ViTMAE model)"),o9e.forEach(t),_sr=i(U),N0=n(U,"LI",{});var r9e=s(N0);P_e=n(r9e,"STRONG",{});var Ipt=s(P_e);usr=r(Ipt,"xlm"),Ipt.forEach(t),bsr=r(r9e," \u2014 "),BV=n(r9e,"A",{href:!0});var qpt=s(BV);Fsr=r(qpt,"TFXLMWithLMHeadModel"),qpt.forEach(t),vsr=r(r9e," (XLM model)"),r9e.forEach(t),Tsr=i(U),j0=n(U,"LI",{});var t9e=s(j0);$_e=n(t9e,"STRONG",{});var Npt=s($_e);Msr=r(Npt,"xlm-roberta"),Npt.forEach(t),Esr=r(t9e," \u2014 "),PV=n(t9e,"A",{href:!0});var jpt=s(PV);Csr=r(jpt,"TFXLMRobertaForMaskedLM"),jpt.forEach(t),wsr=r(t9e," (XLM-RoBERTa model)"),t9e.forEach(t),Asr=i(U),D0=n(U,"LI",{});var a9e=s(D0);I_e=n(a9e,"STRONG",{});var Dpt=s(I_e);ysr=r(Dpt,"xlnet"),Dpt.forEach(t),Lsr=r(a9e," \u2014 "),$V=n(a9e,"A",{href:!0});var Gpt=s($V);xsr=r(Gpt,"TFXLNetLMHeadModel"),Gpt.forEach(t),ksr=r(a9e," (XLNet model)"),a9e.forEach(t),U.forEach(t),Ssr=i(_a),q_e=n(_a,"P",{});var Opt=s(q_e);Rsr=r(Opt,"Examples:"),Opt.forEach(t),Bsr=i(_a),m(uw.$$.fragment,_a),_a.forEach(t),Ol.forEach(t),xBe=i(c),vc=n(c,"H2",{class:!0});var j$e=s(vc);G0=n(j$e,"A",{id:!0,class:!0,href:!0});var Vpt=s(G0);N_e=n(Vpt,"SPAN",{});var Xpt=s(N_e);m(bw.$$.fragment,Xpt),Xpt.forEach(t),Vpt.forEach(t),Psr=i(j$e),j_e=n(j$e,"SPAN",{});var zpt=s(j_e);$sr=r(zpt,"TFAutoModelForCausalLM"),zpt.forEach(t),j$e.forEach(t),kBe=i(c),Tr=n(c,"DIV",{class:!0});var Xl=s(Tr);m(Fw.$$.fragment,Xl),Isr=i(Xl),Tc=n(Xl,"P",{});var gJ=s(Tc);qsr=r(gJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),IV=n(gJ,"A",{href:!0});var Qpt=s(IV);Nsr=r(Qpt,"from_pretrained()"),Qpt.forEach(t),jsr=r(gJ," class method or the "),qV=n(gJ,"A",{href:!0});var Wpt=s(qV);Dsr=r(Wpt,"from_config()"),Wpt.forEach(t),Gsr=r(gJ,` class
method.`),gJ.forEach(t),Osr=i(Xl),vw=n(Xl,"P",{});var D$e=s(vw);Vsr=r(D$e,"This class cannot be instantiated directly using "),D_e=n(D$e,"CODE",{});var Hpt=s(D_e);Xsr=r(Hpt,"__init__()"),Hpt.forEach(t),zsr=r(D$e," (throws an error)."),D$e.forEach(t),Qsr=i(Xl),pt=n(Xl,"DIV",{class:!0});var zl=s(pt);m(Tw.$$.fragment,zl),Wsr=i(zl),G_e=n(zl,"P",{});var Upt=s(G_e);Hsr=r(Upt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Upt.forEach(t),Usr=i(zl),Mc=n(zl,"P",{});var hJ=s(Mc);Jsr=r(hJ,`Note:
Loading a model from its configuration file does `),O_e=n(hJ,"STRONG",{});var Jpt=s(O_e);Ysr=r(Jpt,"not"),Jpt.forEach(t),Ksr=r(hJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),NV=n(hJ,"A",{href:!0});var Ypt=s(NV);Zsr=r(Ypt,"from_pretrained()"),Ypt.forEach(t),elr=r(hJ," to load the model weights."),hJ.forEach(t),olr=i(zl),V_e=n(zl,"P",{});var Kpt=s(V_e);rlr=r(Kpt,"Examples:"),Kpt.forEach(t),tlr=i(zl),m(Mw.$$.fragment,zl),zl.forEach(t),alr=i(Xl),_o=n(Xl,"DIV",{class:!0});var ua=s(_o);m(Ew.$$.fragment,ua),nlr=i(ua),X_e=n(ua,"P",{});var Zpt=s(X_e);slr=r(Zpt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Zpt.forEach(t),llr=i(ua),bn=n(ua,"P",{});var oE=s(bn);ilr=r(oE,"The model class to instantiate is selected based on the "),z_e=n(oE,"CODE",{});var e_t=s(z_e);dlr=r(e_t,"model_type"),e_t.forEach(t),clr=r(oE,` property of the config object (either
passed as an argument or loaded from `),Q_e=n(oE,"CODE",{});var o_t=s(Q_e);flr=r(o_t,"pretrained_model_name_or_path"),o_t.forEach(t),mlr=r(oE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W_e=n(oE,"CODE",{});var r_t=s(W_e);glr=r(r_t,"pretrained_model_name_or_path"),r_t.forEach(t),hlr=r(oE,":"),oE.forEach(t),plr=i(ua),fe=n(ua,"UL",{});var pe=s(fe);O0=n(pe,"LI",{});var n9e=s(O0);H_e=n(n9e,"STRONG",{});var t_t=s(H_e);_lr=r(t_t,"bert"),t_t.forEach(t),ulr=r(n9e," \u2014 "),jV=n(n9e,"A",{href:!0});var a_t=s(jV);blr=r(a_t,"TFBertLMHeadModel"),a_t.forEach(t),Flr=r(n9e," (BERT model)"),n9e.forEach(t),vlr=i(pe),V0=n(pe,"LI",{});var s9e=s(V0);U_e=n(s9e,"STRONG",{});var n_t=s(U_e);Tlr=r(n_t,"camembert"),n_t.forEach(t),Mlr=r(s9e," \u2014 "),DV=n(s9e,"A",{href:!0});var s_t=s(DV);Elr=r(s_t,"TFCamembertForCausalLM"),s_t.forEach(t),Clr=r(s9e," (CamemBERT model)"),s9e.forEach(t),wlr=i(pe),X0=n(pe,"LI",{});var l9e=s(X0);J_e=n(l9e,"STRONG",{});var l_t=s(J_e);Alr=r(l_t,"ctrl"),l_t.forEach(t),ylr=r(l9e," \u2014 "),GV=n(l9e,"A",{href:!0});var i_t=s(GV);Llr=r(i_t,"TFCTRLLMHeadModel"),i_t.forEach(t),xlr=r(l9e," (CTRL model)"),l9e.forEach(t),klr=i(pe),z0=n(pe,"LI",{});var i9e=s(z0);Y_e=n(i9e,"STRONG",{});var d_t=s(Y_e);Slr=r(d_t,"gpt2"),d_t.forEach(t),Rlr=r(i9e," \u2014 "),OV=n(i9e,"A",{href:!0});var c_t=s(OV);Blr=r(c_t,"TFGPT2LMHeadModel"),c_t.forEach(t),Plr=r(i9e," (OpenAI GPT-2 model)"),i9e.forEach(t),$lr=i(pe),Q0=n(pe,"LI",{});var d9e=s(Q0);K_e=n(d9e,"STRONG",{});var f_t=s(K_e);Ilr=r(f_t,"gptj"),f_t.forEach(t),qlr=r(d9e," \u2014 "),VV=n(d9e,"A",{href:!0});var m_t=s(VV);Nlr=r(m_t,"TFGPTJForCausalLM"),m_t.forEach(t),jlr=r(d9e," (GPT-J model)"),d9e.forEach(t),Dlr=i(pe),W0=n(pe,"LI",{});var c9e=s(W0);Z_e=n(c9e,"STRONG",{});var g_t=s(Z_e);Glr=r(g_t,"openai-gpt"),g_t.forEach(t),Olr=r(c9e," \u2014 "),XV=n(c9e,"A",{href:!0});var h_t=s(XV);Vlr=r(h_t,"TFOpenAIGPTLMHeadModel"),h_t.forEach(t),Xlr=r(c9e," (OpenAI GPT model)"),c9e.forEach(t),zlr=i(pe),H0=n(pe,"LI",{});var f9e=s(H0);eue=n(f9e,"STRONG",{});var p_t=s(eue);Qlr=r(p_t,"rembert"),p_t.forEach(t),Wlr=r(f9e," \u2014 "),zV=n(f9e,"A",{href:!0});var __t=s(zV);Hlr=r(__t,"TFRemBertForCausalLM"),__t.forEach(t),Ulr=r(f9e," (RemBERT model)"),f9e.forEach(t),Jlr=i(pe),U0=n(pe,"LI",{});var m9e=s(U0);oue=n(m9e,"STRONG",{});var u_t=s(oue);Ylr=r(u_t,"roberta"),u_t.forEach(t),Klr=r(m9e," \u2014 "),QV=n(m9e,"A",{href:!0});var b_t=s(QV);Zlr=r(b_t,"TFRobertaForCausalLM"),b_t.forEach(t),eir=r(m9e," (RoBERTa model)"),m9e.forEach(t),oir=i(pe),J0=n(pe,"LI",{});var g9e=s(J0);rue=n(g9e,"STRONG",{});var F_t=s(rue);rir=r(F_t,"roformer"),F_t.forEach(t),tir=r(g9e," \u2014 "),WV=n(g9e,"A",{href:!0});var v_t=s(WV);air=r(v_t,"TFRoFormerForCausalLM"),v_t.forEach(t),nir=r(g9e," (RoFormer model)"),g9e.forEach(t),sir=i(pe),Y0=n(pe,"LI",{});var h9e=s(Y0);tue=n(h9e,"STRONG",{});var T_t=s(tue);lir=r(T_t,"transfo-xl"),T_t.forEach(t),iir=r(h9e," \u2014 "),HV=n(h9e,"A",{href:!0});var M_t=s(HV);dir=r(M_t,"TFTransfoXLLMHeadModel"),M_t.forEach(t),cir=r(h9e," (Transformer-XL model)"),h9e.forEach(t),fir=i(pe),K0=n(pe,"LI",{});var p9e=s(K0);aue=n(p9e,"STRONG",{});var E_t=s(aue);mir=r(E_t,"xlm"),E_t.forEach(t),gir=r(p9e," \u2014 "),UV=n(p9e,"A",{href:!0});var C_t=s(UV);hir=r(C_t,"TFXLMWithLMHeadModel"),C_t.forEach(t),pir=r(p9e," (XLM model)"),p9e.forEach(t),_ir=i(pe),Z0=n(pe,"LI",{});var _9e=s(Z0);nue=n(_9e,"STRONG",{});var w_t=s(nue);uir=r(w_t,"xlnet"),w_t.forEach(t),bir=r(_9e," \u2014 "),JV=n(_9e,"A",{href:!0});var A_t=s(JV);Fir=r(A_t,"TFXLNetLMHeadModel"),A_t.forEach(t),vir=r(_9e," (XLNet model)"),_9e.forEach(t),pe.forEach(t),Tir=i(ua),sue=n(ua,"P",{});var y_t=s(sue);Mir=r(y_t,"Examples:"),y_t.forEach(t),Eir=i(ua),m(Cw.$$.fragment,ua),ua.forEach(t),Xl.forEach(t),SBe=i(c),Ec=n(c,"H2",{class:!0});var G$e=s(Ec);eT=n(G$e,"A",{id:!0,class:!0,href:!0});var L_t=s(eT);lue=n(L_t,"SPAN",{});var x_t=s(lue);m(ww.$$.fragment,x_t),x_t.forEach(t),L_t.forEach(t),Cir=i(G$e),iue=n(G$e,"SPAN",{});var k_t=s(iue);wir=r(k_t,"TFAutoModelForImageClassification"),k_t.forEach(t),G$e.forEach(t),RBe=i(c),Mr=n(c,"DIV",{class:!0});var Ql=s(Mr);m(Aw.$$.fragment,Ql),Air=i(Ql),Cc=n(Ql,"P",{});var pJ=s(Cc);yir=r(pJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),YV=n(pJ,"A",{href:!0});var S_t=s(YV);Lir=r(S_t,"from_pretrained()"),S_t.forEach(t),xir=r(pJ," class method or the "),KV=n(pJ,"A",{href:!0});var R_t=s(KV);kir=r(R_t,"from_config()"),R_t.forEach(t),Sir=r(pJ,` class
method.`),pJ.forEach(t),Rir=i(Ql),yw=n(Ql,"P",{});var O$e=s(yw);Bir=r(O$e,"This class cannot be instantiated directly using "),due=n(O$e,"CODE",{});var B_t=s(due);Pir=r(B_t,"__init__()"),B_t.forEach(t),$ir=r(O$e," (throws an error)."),O$e.forEach(t),Iir=i(Ql),_t=n(Ql,"DIV",{class:!0});var Wl=s(_t);m(Lw.$$.fragment,Wl),qir=i(Wl),cue=n(Wl,"P",{});var P_t=s(cue);Nir=r(P_t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),P_t.forEach(t),jir=i(Wl),wc=n(Wl,"P",{});var _J=s(wc);Dir=r(_J,`Note:
Loading a model from its configuration file does `),fue=n(_J,"STRONG",{});var $_t=s(fue);Gir=r($_t,"not"),$_t.forEach(t),Oir=r(_J,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZV=n(_J,"A",{href:!0});var I_t=s(ZV);Vir=r(I_t,"from_pretrained()"),I_t.forEach(t),Xir=r(_J," to load the model weights."),_J.forEach(t),zir=i(Wl),mue=n(Wl,"P",{});var q_t=s(mue);Qir=r(q_t,"Examples:"),q_t.forEach(t),Wir=i(Wl),m(xw.$$.fragment,Wl),Wl.forEach(t),Hir=i(Ql),uo=n(Ql,"DIV",{class:!0});var ba=s(uo);m(kw.$$.fragment,ba),Uir=i(ba),gue=n(ba,"P",{});var N_t=s(gue);Jir=r(N_t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),N_t.forEach(t),Yir=i(ba),Fn=n(ba,"P",{});var rE=s(Fn);Kir=r(rE,"The model class to instantiate is selected based on the "),hue=n(rE,"CODE",{});var j_t=s(hue);Zir=r(j_t,"model_type"),j_t.forEach(t),edr=r(rE,` property of the config object (either
passed as an argument or loaded from `),pue=n(rE,"CODE",{});var D_t=s(pue);odr=r(D_t,"pretrained_model_name_or_path"),D_t.forEach(t),rdr=r(rE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ue=n(rE,"CODE",{});var G_t=s(_ue);tdr=r(G_t,"pretrained_model_name_or_path"),G_t.forEach(t),adr=r(rE,":"),rE.forEach(t),ndr=i(ba),Sw=n(ba,"UL",{});var V$e=s(Sw);oT=n(V$e,"LI",{});var u9e=s(oT);uue=n(u9e,"STRONG",{});var O_t=s(uue);sdr=r(O_t,"convnext"),O_t.forEach(t),ldr=r(u9e," \u2014 "),eX=n(u9e,"A",{href:!0});var V_t=s(eX);idr=r(V_t,"TFConvNextForImageClassification"),V_t.forEach(t),ddr=r(u9e," (ConvNext model)"),u9e.forEach(t),cdr=i(V$e),rT=n(V$e,"LI",{});var b9e=s(rT);bue=n(b9e,"STRONG",{});var X_t=s(bue);fdr=r(X_t,"vit"),X_t.forEach(t),mdr=r(b9e," \u2014 "),oX=n(b9e,"A",{href:!0});var z_t=s(oX);gdr=r(z_t,"TFViTForImageClassification"),z_t.forEach(t),hdr=r(b9e," (ViT model)"),b9e.forEach(t),V$e.forEach(t),pdr=i(ba),Fue=n(ba,"P",{});var Q_t=s(Fue);_dr=r(Q_t,"Examples:"),Q_t.forEach(t),udr=i(ba),m(Rw.$$.fragment,ba),ba.forEach(t),Ql.forEach(t),BBe=i(c),Ac=n(c,"H2",{class:!0});var X$e=s(Ac);tT=n(X$e,"A",{id:!0,class:!0,href:!0});var W_t=s(tT);vue=n(W_t,"SPAN",{});var H_t=s(vue);m(Bw.$$.fragment,H_t),H_t.forEach(t),W_t.forEach(t),bdr=i(X$e),Tue=n(X$e,"SPAN",{});var U_t=s(Tue);Fdr=r(U_t,"TFAutoModelForMaskedLM"),U_t.forEach(t),X$e.forEach(t),PBe=i(c),Er=n(c,"DIV",{class:!0});var Hl=s(Er);m(Pw.$$.fragment,Hl),vdr=i(Hl),yc=n(Hl,"P",{});var uJ=s(yc);Tdr=r(uJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),rX=n(uJ,"A",{href:!0});var J_t=s(rX);Mdr=r(J_t,"from_pretrained()"),J_t.forEach(t),Edr=r(uJ," class method or the "),tX=n(uJ,"A",{href:!0});var Y_t=s(tX);Cdr=r(Y_t,"from_config()"),Y_t.forEach(t),wdr=r(uJ,` class
method.`),uJ.forEach(t),Adr=i(Hl),$w=n(Hl,"P",{});var z$e=s($w);ydr=r(z$e,"This class cannot be instantiated directly using "),Mue=n(z$e,"CODE",{});var K_t=s(Mue);Ldr=r(K_t,"__init__()"),K_t.forEach(t),xdr=r(z$e," (throws an error)."),z$e.forEach(t),kdr=i(Hl),ut=n(Hl,"DIV",{class:!0});var Ul=s(ut);m(Iw.$$.fragment,Ul),Sdr=i(Ul),Eue=n(Ul,"P",{});var Z_t=s(Eue);Rdr=r(Z_t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Z_t.forEach(t),Bdr=i(Ul),Lc=n(Ul,"P",{});var bJ=s(Lc);Pdr=r(bJ,`Note:
Loading a model from its configuration file does `),Cue=n(bJ,"STRONG",{});var eut=s(Cue);$dr=r(eut,"not"),eut.forEach(t),Idr=r(bJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),aX=n(bJ,"A",{href:!0});var out=s(aX);qdr=r(out,"from_pretrained()"),out.forEach(t),Ndr=r(bJ," to load the model weights."),bJ.forEach(t),jdr=i(Ul),wue=n(Ul,"P",{});var rut=s(wue);Ddr=r(rut,"Examples:"),rut.forEach(t),Gdr=i(Ul),m(qw.$$.fragment,Ul),Ul.forEach(t),Odr=i(Hl),bo=n(Hl,"DIV",{class:!0});var Fa=s(bo);m(Nw.$$.fragment,Fa),Vdr=i(Fa),Aue=n(Fa,"P",{});var tut=s(Aue);Xdr=r(tut,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),tut.forEach(t),zdr=i(Fa),vn=n(Fa,"P",{});var tE=s(vn);Qdr=r(tE,"The model class to instantiate is selected based on the "),yue=n(tE,"CODE",{});var aut=s(yue);Wdr=r(aut,"model_type"),aut.forEach(t),Hdr=r(tE,` property of the config object (either
passed as an argument or loaded from `),Lue=n(tE,"CODE",{});var nut=s(Lue);Udr=r(nut,"pretrained_model_name_or_path"),nut.forEach(t),Jdr=r(tE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xue=n(tE,"CODE",{});var sut=s(xue);Ydr=r(sut,"pretrained_model_name_or_path"),sut.forEach(t),Kdr=r(tE,":"),tE.forEach(t),Zdr=i(Fa),J=n(Fa,"UL",{});var oe=s(J);aT=n(oe,"LI",{});var F9e=s(aT);kue=n(F9e,"STRONG",{});var lut=s(kue);ecr=r(lut,"albert"),lut.forEach(t),ocr=r(F9e," \u2014 "),nX=n(F9e,"A",{href:!0});var iut=s(nX);rcr=r(iut,"TFAlbertForMaskedLM"),iut.forEach(t),tcr=r(F9e," (ALBERT model)"),F9e.forEach(t),acr=i(oe),nT=n(oe,"LI",{});var v9e=s(nT);Sue=n(v9e,"STRONG",{});var dut=s(Sue);ncr=r(dut,"bert"),dut.forEach(t),scr=r(v9e," \u2014 "),sX=n(v9e,"A",{href:!0});var cut=s(sX);lcr=r(cut,"TFBertForMaskedLM"),cut.forEach(t),icr=r(v9e," (BERT model)"),v9e.forEach(t),dcr=i(oe),sT=n(oe,"LI",{});var T9e=s(sT);Rue=n(T9e,"STRONG",{});var fut=s(Rue);ccr=r(fut,"camembert"),fut.forEach(t),fcr=r(T9e," \u2014 "),lX=n(T9e,"A",{href:!0});var mut=s(lX);mcr=r(mut,"TFCamembertForMaskedLM"),mut.forEach(t),gcr=r(T9e," (CamemBERT model)"),T9e.forEach(t),hcr=i(oe),lT=n(oe,"LI",{});var M9e=s(lT);Bue=n(M9e,"STRONG",{});var gut=s(Bue);pcr=r(gut,"convbert"),gut.forEach(t),_cr=r(M9e," \u2014 "),iX=n(M9e,"A",{href:!0});var hut=s(iX);ucr=r(hut,"TFConvBertForMaskedLM"),hut.forEach(t),bcr=r(M9e," (ConvBERT model)"),M9e.forEach(t),Fcr=i(oe),iT=n(oe,"LI",{});var E9e=s(iT);Pue=n(E9e,"STRONG",{});var put=s(Pue);vcr=r(put,"deberta"),put.forEach(t),Tcr=r(E9e," \u2014 "),dX=n(E9e,"A",{href:!0});var _ut=s(dX);Mcr=r(_ut,"TFDebertaForMaskedLM"),_ut.forEach(t),Ecr=r(E9e," (DeBERTa model)"),E9e.forEach(t),Ccr=i(oe),dT=n(oe,"LI",{});var C9e=s(dT);$ue=n(C9e,"STRONG",{});var uut=s($ue);wcr=r(uut,"deberta-v2"),uut.forEach(t),Acr=r(C9e," \u2014 "),cX=n(C9e,"A",{href:!0});var but=s(cX);ycr=r(but,"TFDebertaV2ForMaskedLM"),but.forEach(t),Lcr=r(C9e," (DeBERTa-v2 model)"),C9e.forEach(t),xcr=i(oe),cT=n(oe,"LI",{});var w9e=s(cT);Iue=n(w9e,"STRONG",{});var Fut=s(Iue);kcr=r(Fut,"distilbert"),Fut.forEach(t),Scr=r(w9e," \u2014 "),fX=n(w9e,"A",{href:!0});var vut=s(fX);Rcr=r(vut,"TFDistilBertForMaskedLM"),vut.forEach(t),Bcr=r(w9e," (DistilBERT model)"),w9e.forEach(t),Pcr=i(oe),fT=n(oe,"LI",{});var A9e=s(fT);que=n(A9e,"STRONG",{});var Tut=s(que);$cr=r(Tut,"electra"),Tut.forEach(t),Icr=r(A9e," \u2014 "),mX=n(A9e,"A",{href:!0});var Mut=s(mX);qcr=r(Mut,"TFElectraForMaskedLM"),Mut.forEach(t),Ncr=r(A9e," (ELECTRA model)"),A9e.forEach(t),jcr=i(oe),mT=n(oe,"LI",{});var y9e=s(mT);Nue=n(y9e,"STRONG",{});var Eut=s(Nue);Dcr=r(Eut,"flaubert"),Eut.forEach(t),Gcr=r(y9e," \u2014 "),gX=n(y9e,"A",{href:!0});var Cut=s(gX);Ocr=r(Cut,"TFFlaubertWithLMHeadModel"),Cut.forEach(t),Vcr=r(y9e," (FlauBERT model)"),y9e.forEach(t),Xcr=i(oe),gT=n(oe,"LI",{});var L9e=s(gT);jue=n(L9e,"STRONG",{});var wut=s(jue);zcr=r(wut,"funnel"),wut.forEach(t),Qcr=r(L9e," \u2014 "),hX=n(L9e,"A",{href:!0});var Aut=s(hX);Wcr=r(Aut,"TFFunnelForMaskedLM"),Aut.forEach(t),Hcr=r(L9e," (Funnel Transformer model)"),L9e.forEach(t),Ucr=i(oe),hT=n(oe,"LI",{});var x9e=s(hT);Due=n(x9e,"STRONG",{});var yut=s(Due);Jcr=r(yut,"layoutlm"),yut.forEach(t),Ycr=r(x9e," \u2014 "),pX=n(x9e,"A",{href:!0});var Lut=s(pX);Kcr=r(Lut,"TFLayoutLMForMaskedLM"),Lut.forEach(t),Zcr=r(x9e," (LayoutLM model)"),x9e.forEach(t),efr=i(oe),pT=n(oe,"LI",{});var k9e=s(pT);Gue=n(k9e,"STRONG",{});var xut=s(Gue);ofr=r(xut,"longformer"),xut.forEach(t),rfr=r(k9e," \u2014 "),_X=n(k9e,"A",{href:!0});var kut=s(_X);tfr=r(kut,"TFLongformerForMaskedLM"),kut.forEach(t),afr=r(k9e," (Longformer model)"),k9e.forEach(t),nfr=i(oe),_T=n(oe,"LI",{});var S9e=s(_T);Oue=n(S9e,"STRONG",{});var Sut=s(Oue);sfr=r(Sut,"mobilebert"),Sut.forEach(t),lfr=r(S9e," \u2014 "),uX=n(S9e,"A",{href:!0});var Rut=s(uX);ifr=r(Rut,"TFMobileBertForMaskedLM"),Rut.forEach(t),dfr=r(S9e," (MobileBERT model)"),S9e.forEach(t),cfr=i(oe),uT=n(oe,"LI",{});var R9e=s(uT);Vue=n(R9e,"STRONG",{});var But=s(Vue);ffr=r(But,"mpnet"),But.forEach(t),mfr=r(R9e," \u2014 "),bX=n(R9e,"A",{href:!0});var Put=s(bX);gfr=r(Put,"TFMPNetForMaskedLM"),Put.forEach(t),hfr=r(R9e," (MPNet model)"),R9e.forEach(t),pfr=i(oe),bT=n(oe,"LI",{});var B9e=s(bT);Xue=n(B9e,"STRONG",{});var $ut=s(Xue);_fr=r($ut,"rembert"),$ut.forEach(t),ufr=r(B9e," \u2014 "),FX=n(B9e,"A",{href:!0});var Iut=s(FX);bfr=r(Iut,"TFRemBertForMaskedLM"),Iut.forEach(t),Ffr=r(B9e," (RemBERT model)"),B9e.forEach(t),vfr=i(oe),FT=n(oe,"LI",{});var P9e=s(FT);zue=n(P9e,"STRONG",{});var qut=s(zue);Tfr=r(qut,"roberta"),qut.forEach(t),Mfr=r(P9e," \u2014 "),vX=n(P9e,"A",{href:!0});var Nut=s(vX);Efr=r(Nut,"TFRobertaForMaskedLM"),Nut.forEach(t),Cfr=r(P9e," (RoBERTa model)"),P9e.forEach(t),wfr=i(oe),vT=n(oe,"LI",{});var $9e=s(vT);Que=n($9e,"STRONG",{});var jut=s(Que);Afr=r(jut,"roformer"),jut.forEach(t),yfr=r($9e," \u2014 "),TX=n($9e,"A",{href:!0});var Dut=s(TX);Lfr=r(Dut,"TFRoFormerForMaskedLM"),Dut.forEach(t),xfr=r($9e," (RoFormer model)"),$9e.forEach(t),kfr=i(oe),TT=n(oe,"LI",{});var I9e=s(TT);Wue=n(I9e,"STRONG",{});var Gut=s(Wue);Sfr=r(Gut,"tapas"),Gut.forEach(t),Rfr=r(I9e," \u2014 "),MX=n(I9e,"A",{href:!0});var Out=s(MX);Bfr=r(Out,"TFTapasForMaskedLM"),Out.forEach(t),Pfr=r(I9e," (TAPAS model)"),I9e.forEach(t),$fr=i(oe),MT=n(oe,"LI",{});var q9e=s(MT);Hue=n(q9e,"STRONG",{});var Vut=s(Hue);Ifr=r(Vut,"xlm"),Vut.forEach(t),qfr=r(q9e," \u2014 "),EX=n(q9e,"A",{href:!0});var Xut=s(EX);Nfr=r(Xut,"TFXLMWithLMHeadModel"),Xut.forEach(t),jfr=r(q9e," (XLM model)"),q9e.forEach(t),Dfr=i(oe),ET=n(oe,"LI",{});var N9e=s(ET);Uue=n(N9e,"STRONG",{});var zut=s(Uue);Gfr=r(zut,"xlm-roberta"),zut.forEach(t),Ofr=r(N9e," \u2014 "),CX=n(N9e,"A",{href:!0});var Qut=s(CX);Vfr=r(Qut,"TFXLMRobertaForMaskedLM"),Qut.forEach(t),Xfr=r(N9e," (XLM-RoBERTa model)"),N9e.forEach(t),oe.forEach(t),zfr=i(Fa),Jue=n(Fa,"P",{});var Wut=s(Jue);Qfr=r(Wut,"Examples:"),Wut.forEach(t),Wfr=i(Fa),m(jw.$$.fragment,Fa),Fa.forEach(t),Hl.forEach(t),$Be=i(c),xc=n(c,"H2",{class:!0});var Q$e=s(xc);CT=n(Q$e,"A",{id:!0,class:!0,href:!0});var Hut=s(CT);Yue=n(Hut,"SPAN",{});var Uut=s(Yue);m(Dw.$$.fragment,Uut),Uut.forEach(t),Hut.forEach(t),Hfr=i(Q$e),Kue=n(Q$e,"SPAN",{});var Jut=s(Kue);Ufr=r(Jut,"TFAutoModelForSeq2SeqLM"),Jut.forEach(t),Q$e.forEach(t),IBe=i(c),Cr=n(c,"DIV",{class:!0});var Jl=s(Cr);m(Gw.$$.fragment,Jl),Jfr=i(Jl),kc=n(Jl,"P",{});var FJ=s(kc);Yfr=r(FJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),wX=n(FJ,"A",{href:!0});var Yut=s(wX);Kfr=r(Yut,"from_pretrained()"),Yut.forEach(t),Zfr=r(FJ," class method or the "),AX=n(FJ,"A",{href:!0});var Kut=s(AX);emr=r(Kut,"from_config()"),Kut.forEach(t),omr=r(FJ,` class
method.`),FJ.forEach(t),rmr=i(Jl),Ow=n(Jl,"P",{});var W$e=s(Ow);tmr=r(W$e,"This class cannot be instantiated directly using "),Zue=n(W$e,"CODE",{});var Zut=s(Zue);amr=r(Zut,"__init__()"),Zut.forEach(t),nmr=r(W$e," (throws an error)."),W$e.forEach(t),smr=i(Jl),bt=n(Jl,"DIV",{class:!0});var Yl=s(bt);m(Vw.$$.fragment,Yl),lmr=i(Yl),e1e=n(Yl,"P",{});var e1t=s(e1e);imr=r(e1t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),e1t.forEach(t),dmr=i(Yl),Sc=n(Yl,"P",{});var vJ=s(Sc);cmr=r(vJ,`Note:
Loading a model from its configuration file does `),o1e=n(vJ,"STRONG",{});var o1t=s(o1e);fmr=r(o1t,"not"),o1t.forEach(t),mmr=r(vJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),yX=n(vJ,"A",{href:!0});var r1t=s(yX);gmr=r(r1t,"from_pretrained()"),r1t.forEach(t),hmr=r(vJ," to load the model weights."),vJ.forEach(t),pmr=i(Yl),r1e=n(Yl,"P",{});var t1t=s(r1e);_mr=r(t1t,"Examples:"),t1t.forEach(t),umr=i(Yl),m(Xw.$$.fragment,Yl),Yl.forEach(t),bmr=i(Jl),Fo=n(Jl,"DIV",{class:!0});var va=s(Fo);m(zw.$$.fragment,va),Fmr=i(va),t1e=n(va,"P",{});var a1t=s(t1e);vmr=r(a1t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),a1t.forEach(t),Tmr=i(va),Tn=n(va,"P",{});var aE=s(Tn);Mmr=r(aE,"The model class to instantiate is selected based on the "),a1e=n(aE,"CODE",{});var n1t=s(a1e);Emr=r(n1t,"model_type"),n1t.forEach(t),Cmr=r(aE,` property of the config object (either
passed as an argument or loaded from `),n1e=n(aE,"CODE",{});var s1t=s(n1e);wmr=r(s1t,"pretrained_model_name_or_path"),s1t.forEach(t),Amr=r(aE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s1e=n(aE,"CODE",{});var l1t=s(s1e);ymr=r(l1t,"pretrained_model_name_or_path"),l1t.forEach(t),Lmr=r(aE,":"),aE.forEach(t),xmr=i(va),be=n(va,"UL",{});var we=s(be);wT=n(we,"LI",{});var j9e=s(wT);l1e=n(j9e,"STRONG",{});var i1t=s(l1e);kmr=r(i1t,"bart"),i1t.forEach(t),Smr=r(j9e," \u2014 "),LX=n(j9e,"A",{href:!0});var d1t=s(LX);Rmr=r(d1t,"TFBartForConditionalGeneration"),d1t.forEach(t),Bmr=r(j9e," (BART model)"),j9e.forEach(t),Pmr=i(we),AT=n(we,"LI",{});var D9e=s(AT);i1e=n(D9e,"STRONG",{});var c1t=s(i1e);$mr=r(c1t,"blenderbot"),c1t.forEach(t),Imr=r(D9e," \u2014 "),xX=n(D9e,"A",{href:!0});var f1t=s(xX);qmr=r(f1t,"TFBlenderbotForConditionalGeneration"),f1t.forEach(t),Nmr=r(D9e," (Blenderbot model)"),D9e.forEach(t),jmr=i(we),yT=n(we,"LI",{});var G9e=s(yT);d1e=n(G9e,"STRONG",{});var m1t=s(d1e);Dmr=r(m1t,"blenderbot-small"),m1t.forEach(t),Gmr=r(G9e," \u2014 "),kX=n(G9e,"A",{href:!0});var g1t=s(kX);Omr=r(g1t,"TFBlenderbotSmallForConditionalGeneration"),g1t.forEach(t),Vmr=r(G9e," (BlenderbotSmall model)"),G9e.forEach(t),Xmr=i(we),LT=n(we,"LI",{});var O9e=s(LT);c1e=n(O9e,"STRONG",{});var h1t=s(c1e);zmr=r(h1t,"encoder-decoder"),h1t.forEach(t),Qmr=r(O9e," \u2014 "),SX=n(O9e,"A",{href:!0});var p1t=s(SX);Wmr=r(p1t,"TFEncoderDecoderModel"),p1t.forEach(t),Hmr=r(O9e," (Encoder decoder model)"),O9e.forEach(t),Umr=i(we),xT=n(we,"LI",{});var V9e=s(xT);f1e=n(V9e,"STRONG",{});var _1t=s(f1e);Jmr=r(_1t,"led"),_1t.forEach(t),Ymr=r(V9e," \u2014 "),RX=n(V9e,"A",{href:!0});var u1t=s(RX);Kmr=r(u1t,"TFLEDForConditionalGeneration"),u1t.forEach(t),Zmr=r(V9e," (LED model)"),V9e.forEach(t),egr=i(we),kT=n(we,"LI",{});var X9e=s(kT);m1e=n(X9e,"STRONG",{});var b1t=s(m1e);ogr=r(b1t,"marian"),b1t.forEach(t),rgr=r(X9e," \u2014 "),BX=n(X9e,"A",{href:!0});var F1t=s(BX);tgr=r(F1t,"TFMarianMTModel"),F1t.forEach(t),agr=r(X9e," (Marian model)"),X9e.forEach(t),ngr=i(we),ST=n(we,"LI",{});var z9e=s(ST);g1e=n(z9e,"STRONG",{});var v1t=s(g1e);sgr=r(v1t,"mbart"),v1t.forEach(t),lgr=r(z9e," \u2014 "),PX=n(z9e,"A",{href:!0});var T1t=s(PX);igr=r(T1t,"TFMBartForConditionalGeneration"),T1t.forEach(t),dgr=r(z9e," (mBART model)"),z9e.forEach(t),cgr=i(we),RT=n(we,"LI",{});var Q9e=s(RT);h1e=n(Q9e,"STRONG",{});var M1t=s(h1e);fgr=r(M1t,"mt5"),M1t.forEach(t),mgr=r(Q9e," \u2014 "),$X=n(Q9e,"A",{href:!0});var E1t=s($X);ggr=r(E1t,"TFMT5ForConditionalGeneration"),E1t.forEach(t),hgr=r(Q9e," (mT5 model)"),Q9e.forEach(t),pgr=i(we),BT=n(we,"LI",{});var W9e=s(BT);p1e=n(W9e,"STRONG",{});var C1t=s(p1e);_gr=r(C1t,"pegasus"),C1t.forEach(t),ugr=r(W9e," \u2014 "),IX=n(W9e,"A",{href:!0});var w1t=s(IX);bgr=r(w1t,"TFPegasusForConditionalGeneration"),w1t.forEach(t),Fgr=r(W9e," (Pegasus model)"),W9e.forEach(t),vgr=i(we),PT=n(we,"LI",{});var H9e=s(PT);_1e=n(H9e,"STRONG",{});var A1t=s(_1e);Tgr=r(A1t,"t5"),A1t.forEach(t),Mgr=r(H9e," \u2014 "),qX=n(H9e,"A",{href:!0});var y1t=s(qX);Egr=r(y1t,"TFT5ForConditionalGeneration"),y1t.forEach(t),Cgr=r(H9e," (T5 model)"),H9e.forEach(t),we.forEach(t),wgr=i(va),u1e=n(va,"P",{});var L1t=s(u1e);Agr=r(L1t,"Examples:"),L1t.forEach(t),ygr=i(va),m(Qw.$$.fragment,va),va.forEach(t),Jl.forEach(t),qBe=i(c),Rc=n(c,"H2",{class:!0});var H$e=s(Rc);$T=n(H$e,"A",{id:!0,class:!0,href:!0});var x1t=s($T);b1e=n(x1t,"SPAN",{});var k1t=s(b1e);m(Ww.$$.fragment,k1t),k1t.forEach(t),x1t.forEach(t),Lgr=i(H$e),F1e=n(H$e,"SPAN",{});var S1t=s(F1e);xgr=r(S1t,"TFAutoModelForSequenceClassification"),S1t.forEach(t),H$e.forEach(t),NBe=i(c),wr=n(c,"DIV",{class:!0});var Kl=s(wr);m(Hw.$$.fragment,Kl),kgr=i(Kl),Bc=n(Kl,"P",{});var TJ=s(Bc);Sgr=r(TJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),NX=n(TJ,"A",{href:!0});var R1t=s(NX);Rgr=r(R1t,"from_pretrained()"),R1t.forEach(t),Bgr=r(TJ," class method or the "),jX=n(TJ,"A",{href:!0});var B1t=s(jX);Pgr=r(B1t,"from_config()"),B1t.forEach(t),$gr=r(TJ,` class
method.`),TJ.forEach(t),Igr=i(Kl),Uw=n(Kl,"P",{});var U$e=s(Uw);qgr=r(U$e,"This class cannot be instantiated directly using "),v1e=n(U$e,"CODE",{});var P1t=s(v1e);Ngr=r(P1t,"__init__()"),P1t.forEach(t),jgr=r(U$e," (throws an error)."),U$e.forEach(t),Dgr=i(Kl),Ft=n(Kl,"DIV",{class:!0});var Zl=s(Ft);m(Jw.$$.fragment,Zl),Ggr=i(Zl),T1e=n(Zl,"P",{});var $1t=s(T1e);Ogr=r($1t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),$1t.forEach(t),Vgr=i(Zl),Pc=n(Zl,"P",{});var MJ=s(Pc);Xgr=r(MJ,`Note:
Loading a model from its configuration file does `),M1e=n(MJ,"STRONG",{});var I1t=s(M1e);zgr=r(I1t,"not"),I1t.forEach(t),Qgr=r(MJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),DX=n(MJ,"A",{href:!0});var q1t=s(DX);Wgr=r(q1t,"from_pretrained()"),q1t.forEach(t),Hgr=r(MJ," to load the model weights."),MJ.forEach(t),Ugr=i(Zl),E1e=n(Zl,"P",{});var N1t=s(E1e);Jgr=r(N1t,"Examples:"),N1t.forEach(t),Ygr=i(Zl),m(Yw.$$.fragment,Zl),Zl.forEach(t),Kgr=i(Kl),vo=n(Kl,"DIV",{class:!0});var Ta=s(vo);m(Kw.$$.fragment,Ta),Zgr=i(Ta),C1e=n(Ta,"P",{});var j1t=s(C1e);ehr=r(j1t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),j1t.forEach(t),ohr=i(Ta),Mn=n(Ta,"P",{});var nE=s(Mn);rhr=r(nE,"The model class to instantiate is selected based on the "),w1e=n(nE,"CODE",{});var D1t=s(w1e);thr=r(D1t,"model_type"),D1t.forEach(t),ahr=r(nE,` property of the config object (either
passed as an argument or loaded from `),A1e=n(nE,"CODE",{});var G1t=s(A1e);nhr=r(G1t,"pretrained_model_name_or_path"),G1t.forEach(t),shr=r(nE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y1e=n(nE,"CODE",{});var O1t=s(y1e);lhr=r(O1t,"pretrained_model_name_or_path"),O1t.forEach(t),ihr=r(nE,":"),nE.forEach(t),dhr=i(Ta),V=n(Ta,"UL",{});var Q=s(V);IT=n(Q,"LI",{});var U9e=s(IT);L1e=n(U9e,"STRONG",{});var V1t=s(L1e);chr=r(V1t,"albert"),V1t.forEach(t),fhr=r(U9e," \u2014 "),GX=n(U9e,"A",{href:!0});var X1t=s(GX);mhr=r(X1t,"TFAlbertForSequenceClassification"),X1t.forEach(t),ghr=r(U9e," (ALBERT model)"),U9e.forEach(t),hhr=i(Q),qT=n(Q,"LI",{});var J9e=s(qT);x1e=n(J9e,"STRONG",{});var z1t=s(x1e);phr=r(z1t,"bert"),z1t.forEach(t),_hr=r(J9e," \u2014 "),OX=n(J9e,"A",{href:!0});var Q1t=s(OX);uhr=r(Q1t,"TFBertForSequenceClassification"),Q1t.forEach(t),bhr=r(J9e," (BERT model)"),J9e.forEach(t),Fhr=i(Q),NT=n(Q,"LI",{});var Y9e=s(NT);k1e=n(Y9e,"STRONG",{});var W1t=s(k1e);vhr=r(W1t,"camembert"),W1t.forEach(t),Thr=r(Y9e," \u2014 "),VX=n(Y9e,"A",{href:!0});var H1t=s(VX);Mhr=r(H1t,"TFCamembertForSequenceClassification"),H1t.forEach(t),Ehr=r(Y9e," (CamemBERT model)"),Y9e.forEach(t),Chr=i(Q),jT=n(Q,"LI",{});var K9e=s(jT);S1e=n(K9e,"STRONG",{});var U1t=s(S1e);whr=r(U1t,"convbert"),U1t.forEach(t),Ahr=r(K9e," \u2014 "),XX=n(K9e,"A",{href:!0});var J1t=s(XX);yhr=r(J1t,"TFConvBertForSequenceClassification"),J1t.forEach(t),Lhr=r(K9e," (ConvBERT model)"),K9e.forEach(t),xhr=i(Q),DT=n(Q,"LI",{});var Z9e=s(DT);R1e=n(Z9e,"STRONG",{});var Y1t=s(R1e);khr=r(Y1t,"ctrl"),Y1t.forEach(t),Shr=r(Z9e," \u2014 "),zX=n(Z9e,"A",{href:!0});var K1t=s(zX);Rhr=r(K1t,"TFCTRLForSequenceClassification"),K1t.forEach(t),Bhr=r(Z9e," (CTRL model)"),Z9e.forEach(t),Phr=i(Q),GT=n(Q,"LI",{});var exe=s(GT);B1e=n(exe,"STRONG",{});var Z1t=s(B1e);$hr=r(Z1t,"deberta"),Z1t.forEach(t),Ihr=r(exe," \u2014 "),QX=n(exe,"A",{href:!0});var ebt=s(QX);qhr=r(ebt,"TFDebertaForSequenceClassification"),ebt.forEach(t),Nhr=r(exe," (DeBERTa model)"),exe.forEach(t),jhr=i(Q),OT=n(Q,"LI",{});var oxe=s(OT);P1e=n(oxe,"STRONG",{});var obt=s(P1e);Dhr=r(obt,"deberta-v2"),obt.forEach(t),Ghr=r(oxe," \u2014 "),WX=n(oxe,"A",{href:!0});var rbt=s(WX);Ohr=r(rbt,"TFDebertaV2ForSequenceClassification"),rbt.forEach(t),Vhr=r(oxe," (DeBERTa-v2 model)"),oxe.forEach(t),Xhr=i(Q),VT=n(Q,"LI",{});var rxe=s(VT);$1e=n(rxe,"STRONG",{});var tbt=s($1e);zhr=r(tbt,"distilbert"),tbt.forEach(t),Qhr=r(rxe," \u2014 "),HX=n(rxe,"A",{href:!0});var abt=s(HX);Whr=r(abt,"TFDistilBertForSequenceClassification"),abt.forEach(t),Hhr=r(rxe," (DistilBERT model)"),rxe.forEach(t),Uhr=i(Q),XT=n(Q,"LI",{});var txe=s(XT);I1e=n(txe,"STRONG",{});var nbt=s(I1e);Jhr=r(nbt,"electra"),nbt.forEach(t),Yhr=r(txe," \u2014 "),UX=n(txe,"A",{href:!0});var sbt=s(UX);Khr=r(sbt,"TFElectraForSequenceClassification"),sbt.forEach(t),Zhr=r(txe," (ELECTRA model)"),txe.forEach(t),epr=i(Q),zT=n(Q,"LI",{});var axe=s(zT);q1e=n(axe,"STRONG",{});var lbt=s(q1e);opr=r(lbt,"flaubert"),lbt.forEach(t),rpr=r(axe," \u2014 "),JX=n(axe,"A",{href:!0});var ibt=s(JX);tpr=r(ibt,"TFFlaubertForSequenceClassification"),ibt.forEach(t),apr=r(axe," (FlauBERT model)"),axe.forEach(t),npr=i(Q),QT=n(Q,"LI",{});var nxe=s(QT);N1e=n(nxe,"STRONG",{});var dbt=s(N1e);spr=r(dbt,"funnel"),dbt.forEach(t),lpr=r(nxe," \u2014 "),YX=n(nxe,"A",{href:!0});var cbt=s(YX);ipr=r(cbt,"TFFunnelForSequenceClassification"),cbt.forEach(t),dpr=r(nxe," (Funnel Transformer model)"),nxe.forEach(t),cpr=i(Q),WT=n(Q,"LI",{});var sxe=s(WT);j1e=n(sxe,"STRONG",{});var fbt=s(j1e);fpr=r(fbt,"gpt2"),fbt.forEach(t),mpr=r(sxe," \u2014 "),KX=n(sxe,"A",{href:!0});var mbt=s(KX);gpr=r(mbt,"TFGPT2ForSequenceClassification"),mbt.forEach(t),hpr=r(sxe," (OpenAI GPT-2 model)"),sxe.forEach(t),ppr=i(Q),HT=n(Q,"LI",{});var lxe=s(HT);D1e=n(lxe,"STRONG",{});var gbt=s(D1e);_pr=r(gbt,"gptj"),gbt.forEach(t),upr=r(lxe," \u2014 "),ZX=n(lxe,"A",{href:!0});var hbt=s(ZX);bpr=r(hbt,"TFGPTJForSequenceClassification"),hbt.forEach(t),Fpr=r(lxe," (GPT-J model)"),lxe.forEach(t),vpr=i(Q),UT=n(Q,"LI",{});var ixe=s(UT);G1e=n(ixe,"STRONG",{});var pbt=s(G1e);Tpr=r(pbt,"layoutlm"),pbt.forEach(t),Mpr=r(ixe," \u2014 "),ez=n(ixe,"A",{href:!0});var _bt=s(ez);Epr=r(_bt,"TFLayoutLMForSequenceClassification"),_bt.forEach(t),Cpr=r(ixe," (LayoutLM model)"),ixe.forEach(t),wpr=i(Q),JT=n(Q,"LI",{});var dxe=s(JT);O1e=n(dxe,"STRONG",{});var ubt=s(O1e);Apr=r(ubt,"longformer"),ubt.forEach(t),ypr=r(dxe," \u2014 "),oz=n(dxe,"A",{href:!0});var bbt=s(oz);Lpr=r(bbt,"TFLongformerForSequenceClassification"),bbt.forEach(t),xpr=r(dxe," (Longformer model)"),dxe.forEach(t),kpr=i(Q),YT=n(Q,"LI",{});var cxe=s(YT);V1e=n(cxe,"STRONG",{});var Fbt=s(V1e);Spr=r(Fbt,"mobilebert"),Fbt.forEach(t),Rpr=r(cxe," \u2014 "),rz=n(cxe,"A",{href:!0});var vbt=s(rz);Bpr=r(vbt,"TFMobileBertForSequenceClassification"),vbt.forEach(t),Ppr=r(cxe," (MobileBERT model)"),cxe.forEach(t),$pr=i(Q),KT=n(Q,"LI",{});var fxe=s(KT);X1e=n(fxe,"STRONG",{});var Tbt=s(X1e);Ipr=r(Tbt,"mpnet"),Tbt.forEach(t),qpr=r(fxe," \u2014 "),tz=n(fxe,"A",{href:!0});var Mbt=s(tz);Npr=r(Mbt,"TFMPNetForSequenceClassification"),Mbt.forEach(t),jpr=r(fxe," (MPNet model)"),fxe.forEach(t),Dpr=i(Q),ZT=n(Q,"LI",{});var mxe=s(ZT);z1e=n(mxe,"STRONG",{});var Ebt=s(z1e);Gpr=r(Ebt,"openai-gpt"),Ebt.forEach(t),Opr=r(mxe," \u2014 "),az=n(mxe,"A",{href:!0});var Cbt=s(az);Vpr=r(Cbt,"TFOpenAIGPTForSequenceClassification"),Cbt.forEach(t),Xpr=r(mxe," (OpenAI GPT model)"),mxe.forEach(t),zpr=i(Q),e8=n(Q,"LI",{});var gxe=s(e8);Q1e=n(gxe,"STRONG",{});var wbt=s(Q1e);Qpr=r(wbt,"rembert"),wbt.forEach(t),Wpr=r(gxe," \u2014 "),nz=n(gxe,"A",{href:!0});var Abt=s(nz);Hpr=r(Abt,"TFRemBertForSequenceClassification"),Abt.forEach(t),Upr=r(gxe," (RemBERT model)"),gxe.forEach(t),Jpr=i(Q),o8=n(Q,"LI",{});var hxe=s(o8);W1e=n(hxe,"STRONG",{});var ybt=s(W1e);Ypr=r(ybt,"roberta"),ybt.forEach(t),Kpr=r(hxe," \u2014 "),sz=n(hxe,"A",{href:!0});var Lbt=s(sz);Zpr=r(Lbt,"TFRobertaForSequenceClassification"),Lbt.forEach(t),e_r=r(hxe," (RoBERTa model)"),hxe.forEach(t),o_r=i(Q),r8=n(Q,"LI",{});var pxe=s(r8);H1e=n(pxe,"STRONG",{});var xbt=s(H1e);r_r=r(xbt,"roformer"),xbt.forEach(t),t_r=r(pxe," \u2014 "),lz=n(pxe,"A",{href:!0});var kbt=s(lz);a_r=r(kbt,"TFRoFormerForSequenceClassification"),kbt.forEach(t),n_r=r(pxe," (RoFormer model)"),pxe.forEach(t),s_r=i(Q),t8=n(Q,"LI",{});var _xe=s(t8);U1e=n(_xe,"STRONG",{});var Sbt=s(U1e);l_r=r(Sbt,"tapas"),Sbt.forEach(t),i_r=r(_xe," \u2014 "),iz=n(_xe,"A",{href:!0});var Rbt=s(iz);d_r=r(Rbt,"TFTapasForSequenceClassification"),Rbt.forEach(t),c_r=r(_xe," (TAPAS model)"),_xe.forEach(t),f_r=i(Q),a8=n(Q,"LI",{});var uxe=s(a8);J1e=n(uxe,"STRONG",{});var Bbt=s(J1e);m_r=r(Bbt,"transfo-xl"),Bbt.forEach(t),g_r=r(uxe," \u2014 "),dz=n(uxe,"A",{href:!0});var Pbt=s(dz);h_r=r(Pbt,"TFTransfoXLForSequenceClassification"),Pbt.forEach(t),p_r=r(uxe," (Transformer-XL model)"),uxe.forEach(t),__r=i(Q),n8=n(Q,"LI",{});var bxe=s(n8);Y1e=n(bxe,"STRONG",{});var $bt=s(Y1e);u_r=r($bt,"xlm"),$bt.forEach(t),b_r=r(bxe," \u2014 "),cz=n(bxe,"A",{href:!0});var Ibt=s(cz);F_r=r(Ibt,"TFXLMForSequenceClassification"),Ibt.forEach(t),v_r=r(bxe," (XLM model)"),bxe.forEach(t),T_r=i(Q),s8=n(Q,"LI",{});var Fxe=s(s8);K1e=n(Fxe,"STRONG",{});var qbt=s(K1e);M_r=r(qbt,"xlm-roberta"),qbt.forEach(t),E_r=r(Fxe," \u2014 "),fz=n(Fxe,"A",{href:!0});var Nbt=s(fz);C_r=r(Nbt,"TFXLMRobertaForSequenceClassification"),Nbt.forEach(t),w_r=r(Fxe," (XLM-RoBERTa model)"),Fxe.forEach(t),A_r=i(Q),l8=n(Q,"LI",{});var vxe=s(l8);Z1e=n(vxe,"STRONG",{});var jbt=s(Z1e);y_r=r(jbt,"xlnet"),jbt.forEach(t),L_r=r(vxe," \u2014 "),mz=n(vxe,"A",{href:!0});var Dbt=s(mz);x_r=r(Dbt,"TFXLNetForSequenceClassification"),Dbt.forEach(t),k_r=r(vxe," (XLNet model)"),vxe.forEach(t),Q.forEach(t),S_r=i(Ta),ebe=n(Ta,"P",{});var Gbt=s(ebe);R_r=r(Gbt,"Examples:"),Gbt.forEach(t),B_r=i(Ta),m(Zw.$$.fragment,Ta),Ta.forEach(t),Kl.forEach(t),jBe=i(c),$c=n(c,"H2",{class:!0});var J$e=s($c);i8=n(J$e,"A",{id:!0,class:!0,href:!0});var Obt=s(i8);obe=n(Obt,"SPAN",{});var Vbt=s(obe);m(eA.$$.fragment,Vbt),Vbt.forEach(t),Obt.forEach(t),P_r=i(J$e),rbe=n(J$e,"SPAN",{});var Xbt=s(rbe);$_r=r(Xbt,"TFAutoModelForMultipleChoice"),Xbt.forEach(t),J$e.forEach(t),DBe=i(c),Ar=n(c,"DIV",{class:!0});var ei=s(Ar);m(oA.$$.fragment,ei),I_r=i(ei),Ic=n(ei,"P",{});var EJ=s(Ic);q_r=r(EJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),gz=n(EJ,"A",{href:!0});var zbt=s(gz);N_r=r(zbt,"from_pretrained()"),zbt.forEach(t),j_r=r(EJ," class method or the "),hz=n(EJ,"A",{href:!0});var Qbt=s(hz);D_r=r(Qbt,"from_config()"),Qbt.forEach(t),G_r=r(EJ,` class
method.`),EJ.forEach(t),O_r=i(ei),rA=n(ei,"P",{});var Y$e=s(rA);V_r=r(Y$e,"This class cannot be instantiated directly using "),tbe=n(Y$e,"CODE",{});var Wbt=s(tbe);X_r=r(Wbt,"__init__()"),Wbt.forEach(t),z_r=r(Y$e," (throws an error)."),Y$e.forEach(t),Q_r=i(ei),vt=n(ei,"DIV",{class:!0});var oi=s(vt);m(tA.$$.fragment,oi),W_r=i(oi),abe=n(oi,"P",{});var Hbt=s(abe);H_r=r(Hbt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Hbt.forEach(t),U_r=i(oi),qc=n(oi,"P",{});var CJ=s(qc);J_r=r(CJ,`Note:
Loading a model from its configuration file does `),nbe=n(CJ,"STRONG",{});var Ubt=s(nbe);Y_r=r(Ubt,"not"),Ubt.forEach(t),K_r=r(CJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),pz=n(CJ,"A",{href:!0});var Jbt=s(pz);Z_r=r(Jbt,"from_pretrained()"),Jbt.forEach(t),eur=r(CJ," to load the model weights."),CJ.forEach(t),our=i(oi),sbe=n(oi,"P",{});var Ybt=s(sbe);rur=r(Ybt,"Examples:"),Ybt.forEach(t),tur=i(oi),m(aA.$$.fragment,oi),oi.forEach(t),aur=i(ei),To=n(ei,"DIV",{class:!0});var Ma=s(To);m(nA.$$.fragment,Ma),nur=i(Ma),lbe=n(Ma,"P",{});var Kbt=s(lbe);sur=r(Kbt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Kbt.forEach(t),lur=i(Ma),En=n(Ma,"P",{});var sE=s(En);iur=r(sE,"The model class to instantiate is selected based on the "),ibe=n(sE,"CODE",{});var Zbt=s(ibe);dur=r(Zbt,"model_type"),Zbt.forEach(t),cur=r(sE,` property of the config object (either
passed as an argument or loaded from `),dbe=n(sE,"CODE",{});var e2t=s(dbe);fur=r(e2t,"pretrained_model_name_or_path"),e2t.forEach(t),mur=r(sE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cbe=n(sE,"CODE",{});var o2t=s(cbe);gur=r(o2t,"pretrained_model_name_or_path"),o2t.forEach(t),hur=r(sE,":"),sE.forEach(t),pur=i(Ma),se=n(Ma,"UL",{});var ie=s(se);d8=n(ie,"LI",{});var Txe=s(d8);fbe=n(Txe,"STRONG",{});var r2t=s(fbe);_ur=r(r2t,"albert"),r2t.forEach(t),uur=r(Txe," \u2014 "),_z=n(Txe,"A",{href:!0});var t2t=s(_z);bur=r(t2t,"TFAlbertForMultipleChoice"),t2t.forEach(t),Fur=r(Txe," (ALBERT model)"),Txe.forEach(t),vur=i(ie),c8=n(ie,"LI",{});var Mxe=s(c8);mbe=n(Mxe,"STRONG",{});var a2t=s(mbe);Tur=r(a2t,"bert"),a2t.forEach(t),Mur=r(Mxe," \u2014 "),uz=n(Mxe,"A",{href:!0});var n2t=s(uz);Eur=r(n2t,"TFBertForMultipleChoice"),n2t.forEach(t),Cur=r(Mxe," (BERT model)"),Mxe.forEach(t),wur=i(ie),f8=n(ie,"LI",{});var Exe=s(f8);gbe=n(Exe,"STRONG",{});var s2t=s(gbe);Aur=r(s2t,"camembert"),s2t.forEach(t),yur=r(Exe," \u2014 "),bz=n(Exe,"A",{href:!0});var l2t=s(bz);Lur=r(l2t,"TFCamembertForMultipleChoice"),l2t.forEach(t),xur=r(Exe," (CamemBERT model)"),Exe.forEach(t),kur=i(ie),m8=n(ie,"LI",{});var Cxe=s(m8);hbe=n(Cxe,"STRONG",{});var i2t=s(hbe);Sur=r(i2t,"convbert"),i2t.forEach(t),Rur=r(Cxe," \u2014 "),Fz=n(Cxe,"A",{href:!0});var d2t=s(Fz);Bur=r(d2t,"TFConvBertForMultipleChoice"),d2t.forEach(t),Pur=r(Cxe," (ConvBERT model)"),Cxe.forEach(t),$ur=i(ie),g8=n(ie,"LI",{});var wxe=s(g8);pbe=n(wxe,"STRONG",{});var c2t=s(pbe);Iur=r(c2t,"distilbert"),c2t.forEach(t),qur=r(wxe," \u2014 "),vz=n(wxe,"A",{href:!0});var f2t=s(vz);Nur=r(f2t,"TFDistilBertForMultipleChoice"),f2t.forEach(t),jur=r(wxe," (DistilBERT model)"),wxe.forEach(t),Dur=i(ie),h8=n(ie,"LI",{});var Axe=s(h8);_be=n(Axe,"STRONG",{});var m2t=s(_be);Gur=r(m2t,"electra"),m2t.forEach(t),Our=r(Axe," \u2014 "),Tz=n(Axe,"A",{href:!0});var g2t=s(Tz);Vur=r(g2t,"TFElectraForMultipleChoice"),g2t.forEach(t),Xur=r(Axe," (ELECTRA model)"),Axe.forEach(t),zur=i(ie),p8=n(ie,"LI",{});var yxe=s(p8);ube=n(yxe,"STRONG",{});var h2t=s(ube);Qur=r(h2t,"flaubert"),h2t.forEach(t),Wur=r(yxe," \u2014 "),Mz=n(yxe,"A",{href:!0});var p2t=s(Mz);Hur=r(p2t,"TFFlaubertForMultipleChoice"),p2t.forEach(t),Uur=r(yxe," (FlauBERT model)"),yxe.forEach(t),Jur=i(ie),_8=n(ie,"LI",{});var Lxe=s(_8);bbe=n(Lxe,"STRONG",{});var _2t=s(bbe);Yur=r(_2t,"funnel"),_2t.forEach(t),Kur=r(Lxe," \u2014 "),Ez=n(Lxe,"A",{href:!0});var u2t=s(Ez);Zur=r(u2t,"TFFunnelForMultipleChoice"),u2t.forEach(t),e1r=r(Lxe," (Funnel Transformer model)"),Lxe.forEach(t),o1r=i(ie),u8=n(ie,"LI",{});var xxe=s(u8);Fbe=n(xxe,"STRONG",{});var b2t=s(Fbe);r1r=r(b2t,"longformer"),b2t.forEach(t),t1r=r(xxe," \u2014 "),Cz=n(xxe,"A",{href:!0});var F2t=s(Cz);a1r=r(F2t,"TFLongformerForMultipleChoice"),F2t.forEach(t),n1r=r(xxe," (Longformer model)"),xxe.forEach(t),s1r=i(ie),b8=n(ie,"LI",{});var kxe=s(b8);vbe=n(kxe,"STRONG",{});var v2t=s(vbe);l1r=r(v2t,"mobilebert"),v2t.forEach(t),i1r=r(kxe," \u2014 "),wz=n(kxe,"A",{href:!0});var T2t=s(wz);d1r=r(T2t,"TFMobileBertForMultipleChoice"),T2t.forEach(t),c1r=r(kxe," (MobileBERT model)"),kxe.forEach(t),f1r=i(ie),F8=n(ie,"LI",{});var Sxe=s(F8);Tbe=n(Sxe,"STRONG",{});var M2t=s(Tbe);m1r=r(M2t,"mpnet"),M2t.forEach(t),g1r=r(Sxe," \u2014 "),Az=n(Sxe,"A",{href:!0});var E2t=s(Az);h1r=r(E2t,"TFMPNetForMultipleChoice"),E2t.forEach(t),p1r=r(Sxe," (MPNet model)"),Sxe.forEach(t),_1r=i(ie),v8=n(ie,"LI",{});var Rxe=s(v8);Mbe=n(Rxe,"STRONG",{});var C2t=s(Mbe);u1r=r(C2t,"rembert"),C2t.forEach(t),b1r=r(Rxe," \u2014 "),yz=n(Rxe,"A",{href:!0});var w2t=s(yz);F1r=r(w2t,"TFRemBertForMultipleChoice"),w2t.forEach(t),v1r=r(Rxe," (RemBERT model)"),Rxe.forEach(t),T1r=i(ie),T8=n(ie,"LI",{});var Bxe=s(T8);Ebe=n(Bxe,"STRONG",{});var A2t=s(Ebe);M1r=r(A2t,"roberta"),A2t.forEach(t),E1r=r(Bxe," \u2014 "),Lz=n(Bxe,"A",{href:!0});var y2t=s(Lz);C1r=r(y2t,"TFRobertaForMultipleChoice"),y2t.forEach(t),w1r=r(Bxe," (RoBERTa model)"),Bxe.forEach(t),A1r=i(ie),M8=n(ie,"LI",{});var Pxe=s(M8);Cbe=n(Pxe,"STRONG",{});var L2t=s(Cbe);y1r=r(L2t,"roformer"),L2t.forEach(t),L1r=r(Pxe," \u2014 "),xz=n(Pxe,"A",{href:!0});var x2t=s(xz);x1r=r(x2t,"TFRoFormerForMultipleChoice"),x2t.forEach(t),k1r=r(Pxe," (RoFormer model)"),Pxe.forEach(t),S1r=i(ie),E8=n(ie,"LI",{});var $xe=s(E8);wbe=n($xe,"STRONG",{});var k2t=s(wbe);R1r=r(k2t,"xlm"),k2t.forEach(t),B1r=r($xe," \u2014 "),kz=n($xe,"A",{href:!0});var S2t=s(kz);P1r=r(S2t,"TFXLMForMultipleChoice"),S2t.forEach(t),$1r=r($xe," (XLM model)"),$xe.forEach(t),I1r=i(ie),C8=n(ie,"LI",{});var Ixe=s(C8);Abe=n(Ixe,"STRONG",{});var R2t=s(Abe);q1r=r(R2t,"xlm-roberta"),R2t.forEach(t),N1r=r(Ixe," \u2014 "),Sz=n(Ixe,"A",{href:!0});var B2t=s(Sz);j1r=r(B2t,"TFXLMRobertaForMultipleChoice"),B2t.forEach(t),D1r=r(Ixe," (XLM-RoBERTa model)"),Ixe.forEach(t),G1r=i(ie),w8=n(ie,"LI",{});var qxe=s(w8);ybe=n(qxe,"STRONG",{});var P2t=s(ybe);O1r=r(P2t,"xlnet"),P2t.forEach(t),V1r=r(qxe," \u2014 "),Rz=n(qxe,"A",{href:!0});var $2t=s(Rz);X1r=r($2t,"TFXLNetForMultipleChoice"),$2t.forEach(t),z1r=r(qxe," (XLNet model)"),qxe.forEach(t),ie.forEach(t),Q1r=i(Ma),Lbe=n(Ma,"P",{});var I2t=s(Lbe);W1r=r(I2t,"Examples:"),I2t.forEach(t),H1r=i(Ma),m(sA.$$.fragment,Ma),Ma.forEach(t),ei.forEach(t),GBe=i(c),Nc=n(c,"H2",{class:!0});var K$e=s(Nc);A8=n(K$e,"A",{id:!0,class:!0,href:!0});var q2t=s(A8);xbe=n(q2t,"SPAN",{});var N2t=s(xbe);m(lA.$$.fragment,N2t),N2t.forEach(t),q2t.forEach(t),U1r=i(K$e),kbe=n(K$e,"SPAN",{});var j2t=s(kbe);J1r=r(j2t,"TFAutoModelForTableQuestionAnswering"),j2t.forEach(t),K$e.forEach(t),OBe=i(c),yr=n(c,"DIV",{class:!0});var ri=s(yr);m(iA.$$.fragment,ri),Y1r=i(ri),jc=n(ri,"P",{});var wJ=s(jc);K1r=r(wJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Bz=n(wJ,"A",{href:!0});var D2t=s(Bz);Z1r=r(D2t,"from_pretrained()"),D2t.forEach(t),ebr=r(wJ," class method or the "),Pz=n(wJ,"A",{href:!0});var G2t=s(Pz);obr=r(G2t,"from_config()"),G2t.forEach(t),rbr=r(wJ,` class
method.`),wJ.forEach(t),tbr=i(ri),dA=n(ri,"P",{});var Z$e=s(dA);abr=r(Z$e,"This class cannot be instantiated directly using "),Sbe=n(Z$e,"CODE",{});var O2t=s(Sbe);nbr=r(O2t,"__init__()"),O2t.forEach(t),sbr=r(Z$e," (throws an error)."),Z$e.forEach(t),lbr=i(ri),Tt=n(ri,"DIV",{class:!0});var ti=s(Tt);m(cA.$$.fragment,ti),ibr=i(ti),Rbe=n(ti,"P",{});var V2t=s(Rbe);dbr=r(V2t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),V2t.forEach(t),cbr=i(ti),Dc=n(ti,"P",{});var AJ=s(Dc);fbr=r(AJ,`Note:
Loading a model from its configuration file does `),Bbe=n(AJ,"STRONG",{});var X2t=s(Bbe);mbr=r(X2t,"not"),X2t.forEach(t),gbr=r(AJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),$z=n(AJ,"A",{href:!0});var z2t=s($z);hbr=r(z2t,"from_pretrained()"),z2t.forEach(t),pbr=r(AJ," to load the model weights."),AJ.forEach(t),_br=i(ti),Pbe=n(ti,"P",{});var Q2t=s(Pbe);ubr=r(Q2t,"Examples:"),Q2t.forEach(t),bbr=i(ti),m(fA.$$.fragment,ti),ti.forEach(t),Fbr=i(ri),Mo=n(ri,"DIV",{class:!0});var Ea=s(Mo);m(mA.$$.fragment,Ea),vbr=i(Ea),$be=n(Ea,"P",{});var W2t=s($be);Tbr=r(W2t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),W2t.forEach(t),Mbr=i(Ea),Cn=n(Ea,"P",{});var lE=s(Cn);Ebr=r(lE,"The model class to instantiate is selected based on the "),Ibe=n(lE,"CODE",{});var H2t=s(Ibe);Cbr=r(H2t,"model_type"),H2t.forEach(t),wbr=r(lE,` property of the config object (either
passed as an argument or loaded from `),qbe=n(lE,"CODE",{});var U2t=s(qbe);Abr=r(U2t,"pretrained_model_name_or_path"),U2t.forEach(t),ybr=r(lE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nbe=n(lE,"CODE",{});var J2t=s(Nbe);Lbr=r(J2t,"pretrained_model_name_or_path"),J2t.forEach(t),xbr=r(lE,":"),lE.forEach(t),kbr=i(Ea),jbe=n(Ea,"UL",{});var Y2t=s(jbe);y8=n(Y2t,"LI",{});var Nxe=s(y8);Dbe=n(Nxe,"STRONG",{});var K2t=s(Dbe);Sbr=r(K2t,"tapas"),K2t.forEach(t),Rbr=r(Nxe," \u2014 "),Iz=n(Nxe,"A",{href:!0});var Z2t=s(Iz);Bbr=r(Z2t,"TFTapasForQuestionAnswering"),Z2t.forEach(t),Pbr=r(Nxe," (TAPAS model)"),Nxe.forEach(t),Y2t.forEach(t),$br=i(Ea),Gbe=n(Ea,"P",{});var eFt=s(Gbe);Ibr=r(eFt,"Examples:"),eFt.forEach(t),qbr=i(Ea),m(gA.$$.fragment,Ea),Ea.forEach(t),ri.forEach(t),VBe=i(c),Gc=n(c,"H2",{class:!0});var eIe=s(Gc);L8=n(eIe,"A",{id:!0,class:!0,href:!0});var oFt=s(L8);Obe=n(oFt,"SPAN",{});var rFt=s(Obe);m(hA.$$.fragment,rFt),rFt.forEach(t),oFt.forEach(t),Nbr=i(eIe),Vbe=n(eIe,"SPAN",{});var tFt=s(Vbe);jbr=r(tFt,"TFAutoModelForTokenClassification"),tFt.forEach(t),eIe.forEach(t),XBe=i(c),Lr=n(c,"DIV",{class:!0});var ai=s(Lr);m(pA.$$.fragment,ai),Dbr=i(ai),Oc=n(ai,"P",{});var yJ=s(Oc);Gbr=r(yJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),qz=n(yJ,"A",{href:!0});var aFt=s(qz);Obr=r(aFt,"from_pretrained()"),aFt.forEach(t),Vbr=r(yJ," class method or the "),Nz=n(yJ,"A",{href:!0});var nFt=s(Nz);Xbr=r(nFt,"from_config()"),nFt.forEach(t),zbr=r(yJ,` class
method.`),yJ.forEach(t),Qbr=i(ai),_A=n(ai,"P",{});var oIe=s(_A);Wbr=r(oIe,"This class cannot be instantiated directly using "),Xbe=n(oIe,"CODE",{});var sFt=s(Xbe);Hbr=r(sFt,"__init__()"),sFt.forEach(t),Ubr=r(oIe," (throws an error)."),oIe.forEach(t),Jbr=i(ai),Mt=n(ai,"DIV",{class:!0});var ni=s(Mt);m(uA.$$.fragment,ni),Ybr=i(ni),zbe=n(ni,"P",{});var lFt=s(zbe);Kbr=r(lFt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),lFt.forEach(t),Zbr=i(ni),Vc=n(ni,"P",{});var LJ=s(Vc);e2r=r(LJ,`Note:
Loading a model from its configuration file does `),Qbe=n(LJ,"STRONG",{});var iFt=s(Qbe);o2r=r(iFt,"not"),iFt.forEach(t),r2r=r(LJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),jz=n(LJ,"A",{href:!0});var dFt=s(jz);t2r=r(dFt,"from_pretrained()"),dFt.forEach(t),a2r=r(LJ," to load the model weights."),LJ.forEach(t),n2r=i(ni),Wbe=n(ni,"P",{});var cFt=s(Wbe);s2r=r(cFt,"Examples:"),cFt.forEach(t),l2r=i(ni),m(bA.$$.fragment,ni),ni.forEach(t),i2r=i(ai),Eo=n(ai,"DIV",{class:!0});var Ca=s(Eo);m(FA.$$.fragment,Ca),d2r=i(Ca),Hbe=n(Ca,"P",{});var fFt=s(Hbe);c2r=r(fFt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),fFt.forEach(t),f2r=i(Ca),wn=n(Ca,"P",{});var iE=s(wn);m2r=r(iE,"The model class to instantiate is selected based on the "),Ube=n(iE,"CODE",{});var mFt=s(Ube);g2r=r(mFt,"model_type"),mFt.forEach(t),h2r=r(iE,` property of the config object (either
passed as an argument or loaded from `),Jbe=n(iE,"CODE",{});var gFt=s(Jbe);p2r=r(gFt,"pretrained_model_name_or_path"),gFt.forEach(t),_2r=r(iE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ybe=n(iE,"CODE",{});var hFt=s(Ybe);u2r=r(hFt,"pretrained_model_name_or_path"),hFt.forEach(t),b2r=r(iE,":"),iE.forEach(t),F2r=i(Ca),Y=n(Ca,"UL",{});var re=s(Y);x8=n(re,"LI",{});var jxe=s(x8);Kbe=n(jxe,"STRONG",{});var pFt=s(Kbe);v2r=r(pFt,"albert"),pFt.forEach(t),T2r=r(jxe," \u2014 "),Dz=n(jxe,"A",{href:!0});var _Ft=s(Dz);M2r=r(_Ft,"TFAlbertForTokenClassification"),_Ft.forEach(t),E2r=r(jxe," (ALBERT model)"),jxe.forEach(t),C2r=i(re),k8=n(re,"LI",{});var Dxe=s(k8);Zbe=n(Dxe,"STRONG",{});var uFt=s(Zbe);w2r=r(uFt,"bert"),uFt.forEach(t),A2r=r(Dxe," \u2014 "),Gz=n(Dxe,"A",{href:!0});var bFt=s(Gz);y2r=r(bFt,"TFBertForTokenClassification"),bFt.forEach(t),L2r=r(Dxe," (BERT model)"),Dxe.forEach(t),x2r=i(re),S8=n(re,"LI",{});var Gxe=s(S8);e2e=n(Gxe,"STRONG",{});var FFt=s(e2e);k2r=r(FFt,"camembert"),FFt.forEach(t),S2r=r(Gxe," \u2014 "),Oz=n(Gxe,"A",{href:!0});var vFt=s(Oz);R2r=r(vFt,"TFCamembertForTokenClassification"),vFt.forEach(t),B2r=r(Gxe," (CamemBERT model)"),Gxe.forEach(t),P2r=i(re),R8=n(re,"LI",{});var Oxe=s(R8);o2e=n(Oxe,"STRONG",{});var TFt=s(o2e);$2r=r(TFt,"convbert"),TFt.forEach(t),I2r=r(Oxe," \u2014 "),Vz=n(Oxe,"A",{href:!0});var MFt=s(Vz);q2r=r(MFt,"TFConvBertForTokenClassification"),MFt.forEach(t),N2r=r(Oxe," (ConvBERT model)"),Oxe.forEach(t),j2r=i(re),B8=n(re,"LI",{});var Vxe=s(B8);r2e=n(Vxe,"STRONG",{});var EFt=s(r2e);D2r=r(EFt,"deberta"),EFt.forEach(t),G2r=r(Vxe," \u2014 "),Xz=n(Vxe,"A",{href:!0});var CFt=s(Xz);O2r=r(CFt,"TFDebertaForTokenClassification"),CFt.forEach(t),V2r=r(Vxe," (DeBERTa model)"),Vxe.forEach(t),X2r=i(re),P8=n(re,"LI",{});var Xxe=s(P8);t2e=n(Xxe,"STRONG",{});var wFt=s(t2e);z2r=r(wFt,"deberta-v2"),wFt.forEach(t),Q2r=r(Xxe," \u2014 "),zz=n(Xxe,"A",{href:!0});var AFt=s(zz);W2r=r(AFt,"TFDebertaV2ForTokenClassification"),AFt.forEach(t),H2r=r(Xxe," (DeBERTa-v2 model)"),Xxe.forEach(t),U2r=i(re),$8=n(re,"LI",{});var zxe=s($8);a2e=n(zxe,"STRONG",{});var yFt=s(a2e);J2r=r(yFt,"distilbert"),yFt.forEach(t),Y2r=r(zxe," \u2014 "),Qz=n(zxe,"A",{href:!0});var LFt=s(Qz);K2r=r(LFt,"TFDistilBertForTokenClassification"),LFt.forEach(t),Z2r=r(zxe," (DistilBERT model)"),zxe.forEach(t),eFr=i(re),I8=n(re,"LI",{});var Qxe=s(I8);n2e=n(Qxe,"STRONG",{});var xFt=s(n2e);oFr=r(xFt,"electra"),xFt.forEach(t),rFr=r(Qxe," \u2014 "),Wz=n(Qxe,"A",{href:!0});var kFt=s(Wz);tFr=r(kFt,"TFElectraForTokenClassification"),kFt.forEach(t),aFr=r(Qxe," (ELECTRA model)"),Qxe.forEach(t),nFr=i(re),q8=n(re,"LI",{});var Wxe=s(q8);s2e=n(Wxe,"STRONG",{});var SFt=s(s2e);sFr=r(SFt,"flaubert"),SFt.forEach(t),lFr=r(Wxe," \u2014 "),Hz=n(Wxe,"A",{href:!0});var RFt=s(Hz);iFr=r(RFt,"TFFlaubertForTokenClassification"),RFt.forEach(t),dFr=r(Wxe," (FlauBERT model)"),Wxe.forEach(t),cFr=i(re),N8=n(re,"LI",{});var Hxe=s(N8);l2e=n(Hxe,"STRONG",{});var BFt=s(l2e);fFr=r(BFt,"funnel"),BFt.forEach(t),mFr=r(Hxe," \u2014 "),Uz=n(Hxe,"A",{href:!0});var PFt=s(Uz);gFr=r(PFt,"TFFunnelForTokenClassification"),PFt.forEach(t),hFr=r(Hxe," (Funnel Transformer model)"),Hxe.forEach(t),pFr=i(re),j8=n(re,"LI",{});var Uxe=s(j8);i2e=n(Uxe,"STRONG",{});var $Ft=s(i2e);_Fr=r($Ft,"layoutlm"),$Ft.forEach(t),uFr=r(Uxe," \u2014 "),Jz=n(Uxe,"A",{href:!0});var IFt=s(Jz);bFr=r(IFt,"TFLayoutLMForTokenClassification"),IFt.forEach(t),FFr=r(Uxe," (LayoutLM model)"),Uxe.forEach(t),vFr=i(re),D8=n(re,"LI",{});var Jxe=s(D8);d2e=n(Jxe,"STRONG",{});var qFt=s(d2e);TFr=r(qFt,"longformer"),qFt.forEach(t),MFr=r(Jxe," \u2014 "),Yz=n(Jxe,"A",{href:!0});var NFt=s(Yz);EFr=r(NFt,"TFLongformerForTokenClassification"),NFt.forEach(t),CFr=r(Jxe," (Longformer model)"),Jxe.forEach(t),wFr=i(re),G8=n(re,"LI",{});var Yxe=s(G8);c2e=n(Yxe,"STRONG",{});var jFt=s(c2e);AFr=r(jFt,"mobilebert"),jFt.forEach(t),yFr=r(Yxe," \u2014 "),Kz=n(Yxe,"A",{href:!0});var DFt=s(Kz);LFr=r(DFt,"TFMobileBertForTokenClassification"),DFt.forEach(t),xFr=r(Yxe," (MobileBERT model)"),Yxe.forEach(t),kFr=i(re),O8=n(re,"LI",{});var Kxe=s(O8);f2e=n(Kxe,"STRONG",{});var GFt=s(f2e);SFr=r(GFt,"mpnet"),GFt.forEach(t),RFr=r(Kxe," \u2014 "),Zz=n(Kxe,"A",{href:!0});var OFt=s(Zz);BFr=r(OFt,"TFMPNetForTokenClassification"),OFt.forEach(t),PFr=r(Kxe," (MPNet model)"),Kxe.forEach(t),$Fr=i(re),V8=n(re,"LI",{});var Zxe=s(V8);m2e=n(Zxe,"STRONG",{});var VFt=s(m2e);IFr=r(VFt,"rembert"),VFt.forEach(t),qFr=r(Zxe," \u2014 "),eQ=n(Zxe,"A",{href:!0});var XFt=s(eQ);NFr=r(XFt,"TFRemBertForTokenClassification"),XFt.forEach(t),jFr=r(Zxe," (RemBERT model)"),Zxe.forEach(t),DFr=i(re),X8=n(re,"LI",{});var eke=s(X8);g2e=n(eke,"STRONG",{});var zFt=s(g2e);GFr=r(zFt,"roberta"),zFt.forEach(t),OFr=r(eke," \u2014 "),oQ=n(eke,"A",{href:!0});var QFt=s(oQ);VFr=r(QFt,"TFRobertaForTokenClassification"),QFt.forEach(t),XFr=r(eke," (RoBERTa model)"),eke.forEach(t),zFr=i(re),z8=n(re,"LI",{});var oke=s(z8);h2e=n(oke,"STRONG",{});var WFt=s(h2e);QFr=r(WFt,"roformer"),WFt.forEach(t),WFr=r(oke," \u2014 "),rQ=n(oke,"A",{href:!0});var HFt=s(rQ);HFr=r(HFt,"TFRoFormerForTokenClassification"),HFt.forEach(t),UFr=r(oke," (RoFormer model)"),oke.forEach(t),JFr=i(re),Q8=n(re,"LI",{});var rke=s(Q8);p2e=n(rke,"STRONG",{});var UFt=s(p2e);YFr=r(UFt,"xlm"),UFt.forEach(t),KFr=r(rke," \u2014 "),tQ=n(rke,"A",{href:!0});var JFt=s(tQ);ZFr=r(JFt,"TFXLMForTokenClassification"),JFt.forEach(t),evr=r(rke," (XLM model)"),rke.forEach(t),ovr=i(re),W8=n(re,"LI",{});var tke=s(W8);_2e=n(tke,"STRONG",{});var YFt=s(_2e);rvr=r(YFt,"xlm-roberta"),YFt.forEach(t),tvr=r(tke," \u2014 "),aQ=n(tke,"A",{href:!0});var KFt=s(aQ);avr=r(KFt,"TFXLMRobertaForTokenClassification"),KFt.forEach(t),nvr=r(tke," (XLM-RoBERTa model)"),tke.forEach(t),svr=i(re),H8=n(re,"LI",{});var ake=s(H8);u2e=n(ake,"STRONG",{});var ZFt=s(u2e);lvr=r(ZFt,"xlnet"),ZFt.forEach(t),ivr=r(ake," \u2014 "),nQ=n(ake,"A",{href:!0});var evt=s(nQ);dvr=r(evt,"TFXLNetForTokenClassification"),evt.forEach(t),cvr=r(ake," (XLNet model)"),ake.forEach(t),re.forEach(t),fvr=i(Ca),b2e=n(Ca,"P",{});var ovt=s(b2e);mvr=r(ovt,"Examples:"),ovt.forEach(t),gvr=i(Ca),m(vA.$$.fragment,Ca),Ca.forEach(t),ai.forEach(t),zBe=i(c),Xc=n(c,"H2",{class:!0});var rIe=s(Xc);U8=n(rIe,"A",{id:!0,class:!0,href:!0});var rvt=s(U8);F2e=n(rvt,"SPAN",{});var tvt=s(F2e);m(TA.$$.fragment,tvt),tvt.forEach(t),rvt.forEach(t),hvr=i(rIe),v2e=n(rIe,"SPAN",{});var avt=s(v2e);pvr=r(avt,"TFAutoModelForQuestionAnswering"),avt.forEach(t),rIe.forEach(t),QBe=i(c),xr=n(c,"DIV",{class:!0});var si=s(xr);m(MA.$$.fragment,si),_vr=i(si),zc=n(si,"P",{});var xJ=s(zc);uvr=r(xJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),sQ=n(xJ,"A",{href:!0});var nvt=s(sQ);bvr=r(nvt,"from_pretrained()"),nvt.forEach(t),Fvr=r(xJ," class method or the "),lQ=n(xJ,"A",{href:!0});var svt=s(lQ);vvr=r(svt,"from_config()"),svt.forEach(t),Tvr=r(xJ,` class
method.`),xJ.forEach(t),Mvr=i(si),EA=n(si,"P",{});var tIe=s(EA);Evr=r(tIe,"This class cannot be instantiated directly using "),T2e=n(tIe,"CODE",{});var lvt=s(T2e);Cvr=r(lvt,"__init__()"),lvt.forEach(t),wvr=r(tIe," (throws an error)."),tIe.forEach(t),Avr=i(si),Et=n(si,"DIV",{class:!0});var li=s(Et);m(CA.$$.fragment,li),yvr=i(li),M2e=n(li,"P",{});var ivt=s(M2e);Lvr=r(ivt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),ivt.forEach(t),xvr=i(li),Qc=n(li,"P",{});var kJ=s(Qc);kvr=r(kJ,`Note:
Loading a model from its configuration file does `),E2e=n(kJ,"STRONG",{});var dvt=s(E2e);Svr=r(dvt,"not"),dvt.forEach(t),Rvr=r(kJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),iQ=n(kJ,"A",{href:!0});var cvt=s(iQ);Bvr=r(cvt,"from_pretrained()"),cvt.forEach(t),Pvr=r(kJ," to load the model weights."),kJ.forEach(t),$vr=i(li),C2e=n(li,"P",{});var fvt=s(C2e);Ivr=r(fvt,"Examples:"),fvt.forEach(t),qvr=i(li),m(wA.$$.fragment,li),li.forEach(t),Nvr=i(si),Co=n(si,"DIV",{class:!0});var wa=s(Co);m(AA.$$.fragment,wa),jvr=i(wa),w2e=n(wa,"P",{});var mvt=s(w2e);Dvr=r(mvt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),mvt.forEach(t),Gvr=i(wa),An=n(wa,"P",{});var dE=s(An);Ovr=r(dE,"The model class to instantiate is selected based on the "),A2e=n(dE,"CODE",{});var gvt=s(A2e);Vvr=r(gvt,"model_type"),gvt.forEach(t),Xvr=r(dE,` property of the config object (either
passed as an argument or loaded from `),y2e=n(dE,"CODE",{});var hvt=s(y2e);zvr=r(hvt,"pretrained_model_name_or_path"),hvt.forEach(t),Qvr=r(dE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L2e=n(dE,"CODE",{});var pvt=s(L2e);Wvr=r(pvt,"pretrained_model_name_or_path"),pvt.forEach(t),Hvr=r(dE,":"),dE.forEach(t),Uvr=i(wa),K=n(wa,"UL",{});var te=s(K);J8=n(te,"LI",{});var nke=s(J8);x2e=n(nke,"STRONG",{});var _vt=s(x2e);Jvr=r(_vt,"albert"),_vt.forEach(t),Yvr=r(nke," \u2014 "),dQ=n(nke,"A",{href:!0});var uvt=s(dQ);Kvr=r(uvt,"TFAlbertForQuestionAnswering"),uvt.forEach(t),Zvr=r(nke," (ALBERT model)"),nke.forEach(t),e6r=i(te),Y8=n(te,"LI",{});var ske=s(Y8);k2e=n(ske,"STRONG",{});var bvt=s(k2e);o6r=r(bvt,"bert"),bvt.forEach(t),r6r=r(ske," \u2014 "),cQ=n(ske,"A",{href:!0});var Fvt=s(cQ);t6r=r(Fvt,"TFBertForQuestionAnswering"),Fvt.forEach(t),a6r=r(ske," (BERT model)"),ske.forEach(t),n6r=i(te),K8=n(te,"LI",{});var lke=s(K8);S2e=n(lke,"STRONG",{});var vvt=s(S2e);s6r=r(vvt,"camembert"),vvt.forEach(t),l6r=r(lke," \u2014 "),fQ=n(lke,"A",{href:!0});var Tvt=s(fQ);i6r=r(Tvt,"TFCamembertForQuestionAnswering"),Tvt.forEach(t),d6r=r(lke," (CamemBERT model)"),lke.forEach(t),c6r=i(te),Z8=n(te,"LI",{});var ike=s(Z8);R2e=n(ike,"STRONG",{});var Mvt=s(R2e);f6r=r(Mvt,"convbert"),Mvt.forEach(t),m6r=r(ike," \u2014 "),mQ=n(ike,"A",{href:!0});var Evt=s(mQ);g6r=r(Evt,"TFConvBertForQuestionAnswering"),Evt.forEach(t),h6r=r(ike," (ConvBERT model)"),ike.forEach(t),p6r=i(te),e7=n(te,"LI",{});var dke=s(e7);B2e=n(dke,"STRONG",{});var Cvt=s(B2e);_6r=r(Cvt,"deberta"),Cvt.forEach(t),u6r=r(dke," \u2014 "),gQ=n(dke,"A",{href:!0});var wvt=s(gQ);b6r=r(wvt,"TFDebertaForQuestionAnswering"),wvt.forEach(t),F6r=r(dke," (DeBERTa model)"),dke.forEach(t),v6r=i(te),o7=n(te,"LI",{});var cke=s(o7);P2e=n(cke,"STRONG",{});var Avt=s(P2e);T6r=r(Avt,"deberta-v2"),Avt.forEach(t),M6r=r(cke," \u2014 "),hQ=n(cke,"A",{href:!0});var yvt=s(hQ);E6r=r(yvt,"TFDebertaV2ForQuestionAnswering"),yvt.forEach(t),C6r=r(cke," (DeBERTa-v2 model)"),cke.forEach(t),w6r=i(te),r7=n(te,"LI",{});var fke=s(r7);$2e=n(fke,"STRONG",{});var Lvt=s($2e);A6r=r(Lvt,"distilbert"),Lvt.forEach(t),y6r=r(fke," \u2014 "),pQ=n(fke,"A",{href:!0});var xvt=s(pQ);L6r=r(xvt,"TFDistilBertForQuestionAnswering"),xvt.forEach(t),x6r=r(fke," (DistilBERT model)"),fke.forEach(t),k6r=i(te),t7=n(te,"LI",{});var mke=s(t7);I2e=n(mke,"STRONG",{});var kvt=s(I2e);S6r=r(kvt,"electra"),kvt.forEach(t),R6r=r(mke," \u2014 "),_Q=n(mke,"A",{href:!0});var Svt=s(_Q);B6r=r(Svt,"TFElectraForQuestionAnswering"),Svt.forEach(t),P6r=r(mke," (ELECTRA model)"),mke.forEach(t),$6r=i(te),a7=n(te,"LI",{});var gke=s(a7);q2e=n(gke,"STRONG",{});var Rvt=s(q2e);I6r=r(Rvt,"flaubert"),Rvt.forEach(t),q6r=r(gke," \u2014 "),uQ=n(gke,"A",{href:!0});var Bvt=s(uQ);N6r=r(Bvt,"TFFlaubertForQuestionAnsweringSimple"),Bvt.forEach(t),j6r=r(gke," (FlauBERT model)"),gke.forEach(t),D6r=i(te),n7=n(te,"LI",{});var hke=s(n7);N2e=n(hke,"STRONG",{});var Pvt=s(N2e);G6r=r(Pvt,"funnel"),Pvt.forEach(t),O6r=r(hke," \u2014 "),bQ=n(hke,"A",{href:!0});var $vt=s(bQ);V6r=r($vt,"TFFunnelForQuestionAnswering"),$vt.forEach(t),X6r=r(hke," (Funnel Transformer model)"),hke.forEach(t),z6r=i(te),s7=n(te,"LI",{});var pke=s(s7);j2e=n(pke,"STRONG",{});var Ivt=s(j2e);Q6r=r(Ivt,"gptj"),Ivt.forEach(t),W6r=r(pke," \u2014 "),FQ=n(pke,"A",{href:!0});var qvt=s(FQ);H6r=r(qvt,"TFGPTJForQuestionAnswering"),qvt.forEach(t),U6r=r(pke," (GPT-J model)"),pke.forEach(t),J6r=i(te),l7=n(te,"LI",{});var _ke=s(l7);D2e=n(_ke,"STRONG",{});var Nvt=s(D2e);Y6r=r(Nvt,"longformer"),Nvt.forEach(t),K6r=r(_ke," \u2014 "),vQ=n(_ke,"A",{href:!0});var jvt=s(vQ);Z6r=r(jvt,"TFLongformerForQuestionAnswering"),jvt.forEach(t),e0r=r(_ke," (Longformer model)"),_ke.forEach(t),o0r=i(te),i7=n(te,"LI",{});var uke=s(i7);G2e=n(uke,"STRONG",{});var Dvt=s(G2e);r0r=r(Dvt,"mobilebert"),Dvt.forEach(t),t0r=r(uke," \u2014 "),TQ=n(uke,"A",{href:!0});var Gvt=s(TQ);a0r=r(Gvt,"TFMobileBertForQuestionAnswering"),Gvt.forEach(t),n0r=r(uke," (MobileBERT model)"),uke.forEach(t),s0r=i(te),d7=n(te,"LI",{});var bke=s(d7);O2e=n(bke,"STRONG",{});var Ovt=s(O2e);l0r=r(Ovt,"mpnet"),Ovt.forEach(t),i0r=r(bke," \u2014 "),MQ=n(bke,"A",{href:!0});var Vvt=s(MQ);d0r=r(Vvt,"TFMPNetForQuestionAnswering"),Vvt.forEach(t),c0r=r(bke," (MPNet model)"),bke.forEach(t),f0r=i(te),c7=n(te,"LI",{});var Fke=s(c7);V2e=n(Fke,"STRONG",{});var Xvt=s(V2e);m0r=r(Xvt,"rembert"),Xvt.forEach(t),g0r=r(Fke," \u2014 "),EQ=n(Fke,"A",{href:!0});var zvt=s(EQ);h0r=r(zvt,"TFRemBertForQuestionAnswering"),zvt.forEach(t),p0r=r(Fke," (RemBERT model)"),Fke.forEach(t),_0r=i(te),f7=n(te,"LI",{});var vke=s(f7);X2e=n(vke,"STRONG",{});var Qvt=s(X2e);u0r=r(Qvt,"roberta"),Qvt.forEach(t),b0r=r(vke," \u2014 "),CQ=n(vke,"A",{href:!0});var Wvt=s(CQ);F0r=r(Wvt,"TFRobertaForQuestionAnswering"),Wvt.forEach(t),v0r=r(vke," (RoBERTa model)"),vke.forEach(t),T0r=i(te),m7=n(te,"LI",{});var Tke=s(m7);z2e=n(Tke,"STRONG",{});var Hvt=s(z2e);M0r=r(Hvt,"roformer"),Hvt.forEach(t),E0r=r(Tke," \u2014 "),wQ=n(Tke,"A",{href:!0});var Uvt=s(wQ);C0r=r(Uvt,"TFRoFormerForQuestionAnswering"),Uvt.forEach(t),w0r=r(Tke," (RoFormer model)"),Tke.forEach(t),A0r=i(te),g7=n(te,"LI",{});var Mke=s(g7);Q2e=n(Mke,"STRONG",{});var Jvt=s(Q2e);y0r=r(Jvt,"xlm"),Jvt.forEach(t),L0r=r(Mke," \u2014 "),AQ=n(Mke,"A",{href:!0});var Yvt=s(AQ);x0r=r(Yvt,"TFXLMForQuestionAnsweringSimple"),Yvt.forEach(t),k0r=r(Mke," (XLM model)"),Mke.forEach(t),S0r=i(te),h7=n(te,"LI",{});var Eke=s(h7);W2e=n(Eke,"STRONG",{});var Kvt=s(W2e);R0r=r(Kvt,"xlm-roberta"),Kvt.forEach(t),B0r=r(Eke," \u2014 "),yQ=n(Eke,"A",{href:!0});var Zvt=s(yQ);P0r=r(Zvt,"TFXLMRobertaForQuestionAnswering"),Zvt.forEach(t),$0r=r(Eke," (XLM-RoBERTa model)"),Eke.forEach(t),I0r=i(te),p7=n(te,"LI",{});var Cke=s(p7);H2e=n(Cke,"STRONG",{});var e6t=s(H2e);q0r=r(e6t,"xlnet"),e6t.forEach(t),N0r=r(Cke," \u2014 "),LQ=n(Cke,"A",{href:!0});var o6t=s(LQ);j0r=r(o6t,"TFXLNetForQuestionAnsweringSimple"),o6t.forEach(t),D0r=r(Cke," (XLNet model)"),Cke.forEach(t),te.forEach(t),G0r=i(wa),U2e=n(wa,"P",{});var r6t=s(U2e);O0r=r(r6t,"Examples:"),r6t.forEach(t),V0r=i(wa),m(yA.$$.fragment,wa),wa.forEach(t),si.forEach(t),WBe=i(c),Wc=n(c,"H2",{class:!0});var aIe=s(Wc);_7=n(aIe,"A",{id:!0,class:!0,href:!0});var t6t=s(_7);J2e=n(t6t,"SPAN",{});var a6t=s(J2e);m(LA.$$.fragment,a6t),a6t.forEach(t),t6t.forEach(t),X0r=i(aIe),Y2e=n(aIe,"SPAN",{});var n6t=s(Y2e);z0r=r(n6t,"TFAutoModelForVision2Seq"),n6t.forEach(t),aIe.forEach(t),HBe=i(c),kr=n(c,"DIV",{class:!0});var ii=s(kr);m(xA.$$.fragment,ii),Q0r=i(ii),Hc=n(ii,"P",{});var SJ=s(Hc);W0r=r(SJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),xQ=n(SJ,"A",{href:!0});var s6t=s(xQ);H0r=r(s6t,"from_pretrained()"),s6t.forEach(t),U0r=r(SJ," class method or the "),kQ=n(SJ,"A",{href:!0});var l6t=s(kQ);J0r=r(l6t,"from_config()"),l6t.forEach(t),Y0r=r(SJ,` class
method.`),SJ.forEach(t),K0r=i(ii),kA=n(ii,"P",{});var nIe=s(kA);Z0r=r(nIe,"This class cannot be instantiated directly using "),K2e=n(nIe,"CODE",{});var i6t=s(K2e);eTr=r(i6t,"__init__()"),i6t.forEach(t),oTr=r(nIe," (throws an error)."),nIe.forEach(t),rTr=i(ii),Ct=n(ii,"DIV",{class:!0});var di=s(Ct);m(SA.$$.fragment,di),tTr=i(di),Z2e=n(di,"P",{});var d6t=s(Z2e);aTr=r(d6t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),d6t.forEach(t),nTr=i(di),Uc=n(di,"P",{});var RJ=s(Uc);sTr=r(RJ,`Note:
Loading a model from its configuration file does `),eFe=n(RJ,"STRONG",{});var c6t=s(eFe);lTr=r(c6t,"not"),c6t.forEach(t),iTr=r(RJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),SQ=n(RJ,"A",{href:!0});var f6t=s(SQ);dTr=r(f6t,"from_pretrained()"),f6t.forEach(t),cTr=r(RJ," to load the model weights."),RJ.forEach(t),fTr=i(di),oFe=n(di,"P",{});var m6t=s(oFe);mTr=r(m6t,"Examples:"),m6t.forEach(t),gTr=i(di),m(RA.$$.fragment,di),di.forEach(t),hTr=i(ii),wo=n(ii,"DIV",{class:!0});var Aa=s(wo);m(BA.$$.fragment,Aa),pTr=i(Aa),rFe=n(Aa,"P",{});var g6t=s(rFe);_Tr=r(g6t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),g6t.forEach(t),uTr=i(Aa),yn=n(Aa,"P",{});var cE=s(yn);bTr=r(cE,"The model class to instantiate is selected based on the "),tFe=n(cE,"CODE",{});var h6t=s(tFe);FTr=r(h6t,"model_type"),h6t.forEach(t),vTr=r(cE,` property of the config object (either
passed as an argument or loaded from `),aFe=n(cE,"CODE",{});var p6t=s(aFe);TTr=r(p6t,"pretrained_model_name_or_path"),p6t.forEach(t),MTr=r(cE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nFe=n(cE,"CODE",{});var _6t=s(nFe);ETr=r(_6t,"pretrained_model_name_or_path"),_6t.forEach(t),CTr=r(cE,":"),cE.forEach(t),wTr=i(Aa),sFe=n(Aa,"UL",{});var u6t=s(sFe);u7=n(u6t,"LI",{});var wke=s(u7);lFe=n(wke,"STRONG",{});var b6t=s(lFe);ATr=r(b6t,"vision-encoder-decoder"),b6t.forEach(t),yTr=r(wke," \u2014 "),RQ=n(wke,"A",{href:!0});var F6t=s(RQ);LTr=r(F6t,"TFVisionEncoderDecoderModel"),F6t.forEach(t),xTr=r(wke," (Vision Encoder decoder model)"),wke.forEach(t),u6t.forEach(t),kTr=i(Aa),iFe=n(Aa,"P",{});var v6t=s(iFe);STr=r(v6t,"Examples:"),v6t.forEach(t),RTr=i(Aa),m(PA.$$.fragment,Aa),Aa.forEach(t),ii.forEach(t),UBe=i(c),Jc=n(c,"H2",{class:!0});var sIe=s(Jc);b7=n(sIe,"A",{id:!0,class:!0,href:!0});var T6t=s(b7);dFe=n(T6t,"SPAN",{});var M6t=s(dFe);m($A.$$.fragment,M6t),M6t.forEach(t),T6t.forEach(t),BTr=i(sIe),cFe=n(sIe,"SPAN",{});var E6t=s(cFe);PTr=r(E6t,"TFAutoModelForSpeechSeq2Seq"),E6t.forEach(t),sIe.forEach(t),JBe=i(c),Sr=n(c,"DIV",{class:!0});var ci=s(Sr);m(IA.$$.fragment,ci),$Tr=i(ci),Yc=n(ci,"P",{});var BJ=s(Yc);ITr=r(BJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),BQ=n(BJ,"A",{href:!0});var C6t=s(BQ);qTr=r(C6t,"from_pretrained()"),C6t.forEach(t),NTr=r(BJ," class method or the "),PQ=n(BJ,"A",{href:!0});var w6t=s(PQ);jTr=r(w6t,"from_config()"),w6t.forEach(t),DTr=r(BJ,` class
method.`),BJ.forEach(t),GTr=i(ci),qA=n(ci,"P",{});var lIe=s(qA);OTr=r(lIe,"This class cannot be instantiated directly using "),fFe=n(lIe,"CODE",{});var A6t=s(fFe);VTr=r(A6t,"__init__()"),A6t.forEach(t),XTr=r(lIe," (throws an error)."),lIe.forEach(t),zTr=i(ci),wt=n(ci,"DIV",{class:!0});var fi=s(wt);m(NA.$$.fragment,fi),QTr=i(fi),mFe=n(fi,"P",{});var y6t=s(mFe);WTr=r(y6t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),y6t.forEach(t),HTr=i(fi),Kc=n(fi,"P",{});var PJ=s(Kc);UTr=r(PJ,`Note:
Loading a model from its configuration file does `),gFe=n(PJ,"STRONG",{});var L6t=s(gFe);JTr=r(L6t,"not"),L6t.forEach(t),YTr=r(PJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),$Q=n(PJ,"A",{href:!0});var x6t=s($Q);KTr=r(x6t,"from_pretrained()"),x6t.forEach(t),ZTr=r(PJ," to load the model weights."),PJ.forEach(t),e8r=i(fi),hFe=n(fi,"P",{});var k6t=s(hFe);o8r=r(k6t,"Examples:"),k6t.forEach(t),r8r=i(fi),m(jA.$$.fragment,fi),fi.forEach(t),t8r=i(ci),Ao=n(ci,"DIV",{class:!0});var ya=s(Ao);m(DA.$$.fragment,ya),a8r=i(ya),pFe=n(ya,"P",{});var S6t=s(pFe);n8r=r(S6t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),S6t.forEach(t),s8r=i(ya),Ln=n(ya,"P",{});var fE=s(Ln);l8r=r(fE,"The model class to instantiate is selected based on the "),_Fe=n(fE,"CODE",{});var R6t=s(_Fe);i8r=r(R6t,"model_type"),R6t.forEach(t),d8r=r(fE,` property of the config object (either
passed as an argument or loaded from `),uFe=n(fE,"CODE",{});var B6t=s(uFe);c8r=r(B6t,"pretrained_model_name_or_path"),B6t.forEach(t),f8r=r(fE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bFe=n(fE,"CODE",{});var P6t=s(bFe);m8r=r(P6t,"pretrained_model_name_or_path"),P6t.forEach(t),g8r=r(fE,":"),fE.forEach(t),h8r=i(ya),FFe=n(ya,"UL",{});var $6t=s(FFe);F7=n($6t,"LI",{});var Ake=s(F7);vFe=n(Ake,"STRONG",{});var I6t=s(vFe);p8r=r(I6t,"speech_to_text"),I6t.forEach(t),_8r=r(Ake," \u2014 "),IQ=n(Ake,"A",{href:!0});var q6t=s(IQ);u8r=r(q6t,"TFSpeech2TextForConditionalGeneration"),q6t.forEach(t),b8r=r(Ake," (Speech2Text model)"),Ake.forEach(t),$6t.forEach(t),F8r=i(ya),TFe=n(ya,"P",{});var N6t=s(TFe);v8r=r(N6t,"Examples:"),N6t.forEach(t),T8r=i(ya),m(GA.$$.fragment,ya),ya.forEach(t),ci.forEach(t),YBe=i(c),Zc=n(c,"H2",{class:!0});var iIe=s(Zc);v7=n(iIe,"A",{id:!0,class:!0,href:!0});var j6t=s(v7);MFe=n(j6t,"SPAN",{});var D6t=s(MFe);m(OA.$$.fragment,D6t),D6t.forEach(t),j6t.forEach(t),M8r=i(iIe),EFe=n(iIe,"SPAN",{});var G6t=s(EFe);E8r=r(G6t,"FlaxAutoModel"),G6t.forEach(t),iIe.forEach(t),KBe=i(c),Rr=n(c,"DIV",{class:!0});var mi=s(Rr);m(VA.$$.fragment,mi),C8r=i(mi),ef=n(mi,"P",{});var $J=s(ef);w8r=r($J,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),qQ=n($J,"A",{href:!0});var O6t=s(qQ);A8r=r(O6t,"from_pretrained()"),O6t.forEach(t),y8r=r($J," class method or the "),NQ=n($J,"A",{href:!0});var V6t=s(NQ);L8r=r(V6t,"from_config()"),V6t.forEach(t),x8r=r($J,` class
method.`),$J.forEach(t),k8r=i(mi),XA=n(mi,"P",{});var dIe=s(XA);S8r=r(dIe,"This class cannot be instantiated directly using "),CFe=n(dIe,"CODE",{});var X6t=s(CFe);R8r=r(X6t,"__init__()"),X6t.forEach(t),B8r=r(dIe," (throws an error)."),dIe.forEach(t),P8r=i(mi),At=n(mi,"DIV",{class:!0});var gi=s(At);m(zA.$$.fragment,gi),$8r=i(gi),wFe=n(gi,"P",{});var z6t=s(wFe);I8r=r(z6t,"Instantiates one of the base model classes of the library from a configuration."),z6t.forEach(t),q8r=i(gi),of=n(gi,"P",{});var IJ=s(of);N8r=r(IJ,`Note:
Loading a model from its configuration file does `),AFe=n(IJ,"STRONG",{});var Q6t=s(AFe);j8r=r(Q6t,"not"),Q6t.forEach(t),D8r=r(IJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),jQ=n(IJ,"A",{href:!0});var W6t=s(jQ);G8r=r(W6t,"from_pretrained()"),W6t.forEach(t),O8r=r(IJ," to load the model weights."),IJ.forEach(t),V8r=i(gi),yFe=n(gi,"P",{});var H6t=s(yFe);X8r=r(H6t,"Examples:"),H6t.forEach(t),z8r=i(gi),m(QA.$$.fragment,gi),gi.forEach(t),Q8r=i(mi),yo=n(mi,"DIV",{class:!0});var La=s(yo);m(WA.$$.fragment,La),W8r=i(La),LFe=n(La,"P",{});var U6t=s(LFe);H8r=r(U6t,"Instantiate one of the base model classes of the library from a pretrained model."),U6t.forEach(t),U8r=i(La),xn=n(La,"P",{});var mE=s(xn);J8r=r(mE,"The model class to instantiate is selected based on the "),xFe=n(mE,"CODE",{});var J6t=s(xFe);Y8r=r(J6t,"model_type"),J6t.forEach(t),K8r=r(mE,` property of the config object (either
passed as an argument or loaded from `),kFe=n(mE,"CODE",{});var Y6t=s(kFe);Z8r=r(Y6t,"pretrained_model_name_or_path"),Y6t.forEach(t),e7r=r(mE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SFe=n(mE,"CODE",{});var K6t=s(SFe);o7r=r(K6t,"pretrained_model_name_or_path"),K6t.forEach(t),r7r=r(mE,":"),mE.forEach(t),t7r=i(La),z=n(La,"UL",{});var W=s(z);T7=n(W,"LI",{});var yke=s(T7);RFe=n(yke,"STRONG",{});var Z6t=s(RFe);a7r=r(Z6t,"albert"),Z6t.forEach(t),n7r=r(yke," \u2014 "),DQ=n(yke,"A",{href:!0});var e0t=s(DQ);s7r=r(e0t,"FlaxAlbertModel"),e0t.forEach(t),l7r=r(yke," (ALBERT model)"),yke.forEach(t),i7r=i(W),M7=n(W,"LI",{});var Lke=s(M7);BFe=n(Lke,"STRONG",{});var o0t=s(BFe);d7r=r(o0t,"bart"),o0t.forEach(t),c7r=r(Lke," \u2014 "),GQ=n(Lke,"A",{href:!0});var r0t=s(GQ);f7r=r(r0t,"FlaxBartModel"),r0t.forEach(t),m7r=r(Lke," (BART model)"),Lke.forEach(t),g7r=i(W),E7=n(W,"LI",{});var xke=s(E7);PFe=n(xke,"STRONG",{});var t0t=s(PFe);h7r=r(t0t,"beit"),t0t.forEach(t),p7r=r(xke," \u2014 "),OQ=n(xke,"A",{href:!0});var a0t=s(OQ);_7r=r(a0t,"FlaxBeitModel"),a0t.forEach(t),u7r=r(xke," (BEiT model)"),xke.forEach(t),b7r=i(W),C7=n(W,"LI",{});var kke=s(C7);$Fe=n(kke,"STRONG",{});var n0t=s($Fe);F7r=r(n0t,"bert"),n0t.forEach(t),v7r=r(kke," \u2014 "),VQ=n(kke,"A",{href:!0});var s0t=s(VQ);T7r=r(s0t,"FlaxBertModel"),s0t.forEach(t),M7r=r(kke," (BERT model)"),kke.forEach(t),E7r=i(W),w7=n(W,"LI",{});var Ske=s(w7);IFe=n(Ske,"STRONG",{});var l0t=s(IFe);C7r=r(l0t,"big_bird"),l0t.forEach(t),w7r=r(Ske," \u2014 "),XQ=n(Ske,"A",{href:!0});var i0t=s(XQ);A7r=r(i0t,"FlaxBigBirdModel"),i0t.forEach(t),y7r=r(Ske," (BigBird model)"),Ske.forEach(t),L7r=i(W),A7=n(W,"LI",{});var Rke=s(A7);qFe=n(Rke,"STRONG",{});var d0t=s(qFe);x7r=r(d0t,"blenderbot"),d0t.forEach(t),k7r=r(Rke," \u2014 "),zQ=n(Rke,"A",{href:!0});var c0t=s(zQ);S7r=r(c0t,"FlaxBlenderbotModel"),c0t.forEach(t),R7r=r(Rke," (Blenderbot model)"),Rke.forEach(t),B7r=i(W),y7=n(W,"LI",{});var Bke=s(y7);NFe=n(Bke,"STRONG",{});var f0t=s(NFe);P7r=r(f0t,"blenderbot-small"),f0t.forEach(t),$7r=r(Bke," \u2014 "),QQ=n(Bke,"A",{href:!0});var m0t=s(QQ);I7r=r(m0t,"FlaxBlenderbotSmallModel"),m0t.forEach(t),q7r=r(Bke," (BlenderbotSmall model)"),Bke.forEach(t),N7r=i(W),L7=n(W,"LI",{});var Pke=s(L7);jFe=n(Pke,"STRONG",{});var g0t=s(jFe);j7r=r(g0t,"clip"),g0t.forEach(t),D7r=r(Pke," \u2014 "),WQ=n(Pke,"A",{href:!0});var h0t=s(WQ);G7r=r(h0t,"FlaxCLIPModel"),h0t.forEach(t),O7r=r(Pke," (CLIP model)"),Pke.forEach(t),V7r=i(W),x7=n(W,"LI",{});var $ke=s(x7);DFe=n($ke,"STRONG",{});var p0t=s(DFe);X7r=r(p0t,"distilbert"),p0t.forEach(t),z7r=r($ke," \u2014 "),HQ=n($ke,"A",{href:!0});var _0t=s(HQ);Q7r=r(_0t,"FlaxDistilBertModel"),_0t.forEach(t),W7r=r($ke," (DistilBERT model)"),$ke.forEach(t),H7r=i(W),k7=n(W,"LI",{});var Ike=s(k7);GFe=n(Ike,"STRONG",{});var u0t=s(GFe);U7r=r(u0t,"electra"),u0t.forEach(t),J7r=r(Ike," \u2014 "),UQ=n(Ike,"A",{href:!0});var b0t=s(UQ);Y7r=r(b0t,"FlaxElectraModel"),b0t.forEach(t),K7r=r(Ike," (ELECTRA model)"),Ike.forEach(t),Z7r=i(W),S7=n(W,"LI",{});var qke=s(S7);OFe=n(qke,"STRONG",{});var F0t=s(OFe);eMr=r(F0t,"gpt2"),F0t.forEach(t),oMr=r(qke," \u2014 "),JQ=n(qke,"A",{href:!0});var v0t=s(JQ);rMr=r(v0t,"FlaxGPT2Model"),v0t.forEach(t),tMr=r(qke," (OpenAI GPT-2 model)"),qke.forEach(t),aMr=i(W),R7=n(W,"LI",{});var Nke=s(R7);VFe=n(Nke,"STRONG",{});var T0t=s(VFe);nMr=r(T0t,"gpt_neo"),T0t.forEach(t),sMr=r(Nke," \u2014 "),YQ=n(Nke,"A",{href:!0});var M0t=s(YQ);lMr=r(M0t,"FlaxGPTNeoModel"),M0t.forEach(t),iMr=r(Nke," (GPT Neo model)"),Nke.forEach(t),dMr=i(W),B7=n(W,"LI",{});var jke=s(B7);XFe=n(jke,"STRONG",{});var E0t=s(XFe);cMr=r(E0t,"gptj"),E0t.forEach(t),fMr=r(jke," \u2014 "),KQ=n(jke,"A",{href:!0});var C0t=s(KQ);mMr=r(C0t,"FlaxGPTJModel"),C0t.forEach(t),gMr=r(jke," (GPT-J model)"),jke.forEach(t),hMr=i(W),P7=n(W,"LI",{});var Dke=s(P7);zFe=n(Dke,"STRONG",{});var w0t=s(zFe);pMr=r(w0t,"marian"),w0t.forEach(t),_Mr=r(Dke," \u2014 "),ZQ=n(Dke,"A",{href:!0});var A0t=s(ZQ);uMr=r(A0t,"FlaxMarianModel"),A0t.forEach(t),bMr=r(Dke," (Marian model)"),Dke.forEach(t),FMr=i(W),$7=n(W,"LI",{});var Gke=s($7);QFe=n(Gke,"STRONG",{});var y0t=s(QFe);vMr=r(y0t,"mbart"),y0t.forEach(t),TMr=r(Gke," \u2014 "),eW=n(Gke,"A",{href:!0});var L0t=s(eW);MMr=r(L0t,"FlaxMBartModel"),L0t.forEach(t),EMr=r(Gke," (mBART model)"),Gke.forEach(t),CMr=i(W),I7=n(W,"LI",{});var Oke=s(I7);WFe=n(Oke,"STRONG",{});var x0t=s(WFe);wMr=r(x0t,"mt5"),x0t.forEach(t),AMr=r(Oke," \u2014 "),oW=n(Oke,"A",{href:!0});var k0t=s(oW);yMr=r(k0t,"FlaxMT5Model"),k0t.forEach(t),LMr=r(Oke," (mT5 model)"),Oke.forEach(t),xMr=i(W),q7=n(W,"LI",{});var Vke=s(q7);HFe=n(Vke,"STRONG",{});var S0t=s(HFe);kMr=r(S0t,"pegasus"),S0t.forEach(t),SMr=r(Vke," \u2014 "),rW=n(Vke,"A",{href:!0});var R0t=s(rW);RMr=r(R0t,"FlaxPegasusModel"),R0t.forEach(t),BMr=r(Vke," (Pegasus model)"),Vke.forEach(t),PMr=i(W),N7=n(W,"LI",{});var Xke=s(N7);UFe=n(Xke,"STRONG",{});var B0t=s(UFe);$Mr=r(B0t,"roberta"),B0t.forEach(t),IMr=r(Xke," \u2014 "),tW=n(Xke,"A",{href:!0});var P0t=s(tW);qMr=r(P0t,"FlaxRobertaModel"),P0t.forEach(t),NMr=r(Xke," (RoBERTa model)"),Xke.forEach(t),jMr=i(W),j7=n(W,"LI",{});var zke=s(j7);JFe=n(zke,"STRONG",{});var $0t=s(JFe);DMr=r($0t,"roformer"),$0t.forEach(t),GMr=r(zke," \u2014 "),aW=n(zke,"A",{href:!0});var I0t=s(aW);OMr=r(I0t,"FlaxRoFormerModel"),I0t.forEach(t),VMr=r(zke," (RoFormer model)"),zke.forEach(t),XMr=i(W),D7=n(W,"LI",{});var Qke=s(D7);YFe=n(Qke,"STRONG",{});var q0t=s(YFe);zMr=r(q0t,"t5"),q0t.forEach(t),QMr=r(Qke," \u2014 "),nW=n(Qke,"A",{href:!0});var N0t=s(nW);WMr=r(N0t,"FlaxT5Model"),N0t.forEach(t),HMr=r(Qke," (T5 model)"),Qke.forEach(t),UMr=i(W),G7=n(W,"LI",{});var Wke=s(G7);KFe=n(Wke,"STRONG",{});var j0t=s(KFe);JMr=r(j0t,"vision-text-dual-encoder"),j0t.forEach(t),YMr=r(Wke," \u2014 "),sW=n(Wke,"A",{href:!0});var D0t=s(sW);KMr=r(D0t,"FlaxVisionTextDualEncoderModel"),D0t.forEach(t),ZMr=r(Wke," (VisionTextDualEncoder model)"),Wke.forEach(t),e4r=i(W),O7=n(W,"LI",{});var Hke=s(O7);ZFe=n(Hke,"STRONG",{});var G0t=s(ZFe);o4r=r(G0t,"vit"),G0t.forEach(t),r4r=r(Hke," \u2014 "),lW=n(Hke,"A",{href:!0});var O0t=s(lW);t4r=r(O0t,"FlaxViTModel"),O0t.forEach(t),a4r=r(Hke," (ViT model)"),Hke.forEach(t),n4r=i(W),V7=n(W,"LI",{});var Uke=s(V7);eve=n(Uke,"STRONG",{});var V0t=s(eve);s4r=r(V0t,"wav2vec2"),V0t.forEach(t),l4r=r(Uke," \u2014 "),iW=n(Uke,"A",{href:!0});var X0t=s(iW);i4r=r(X0t,"FlaxWav2Vec2Model"),X0t.forEach(t),d4r=r(Uke," (Wav2Vec2 model)"),Uke.forEach(t),c4r=i(W),X7=n(W,"LI",{});var Jke=s(X7);ove=n(Jke,"STRONG",{});var z0t=s(ove);f4r=r(z0t,"xglm"),z0t.forEach(t),m4r=r(Jke," \u2014 "),dW=n(Jke,"A",{href:!0});var Q0t=s(dW);g4r=r(Q0t,"FlaxXGLMModel"),Q0t.forEach(t),h4r=r(Jke," (XGLM model)"),Jke.forEach(t),p4r=i(W),z7=n(W,"LI",{});var Yke=s(z7);rve=n(Yke,"STRONG",{});var W0t=s(rve);_4r=r(W0t,"xlm-roberta"),W0t.forEach(t),u4r=r(Yke," \u2014 "),cW=n(Yke,"A",{href:!0});var H0t=s(cW);b4r=r(H0t,"FlaxXLMRobertaModel"),H0t.forEach(t),F4r=r(Yke," (XLM-RoBERTa model)"),Yke.forEach(t),W.forEach(t),v4r=i(La),tve=n(La,"P",{});var U0t=s(tve);T4r=r(U0t,"Examples:"),U0t.forEach(t),M4r=i(La),m(HA.$$.fragment,La),La.forEach(t),mi.forEach(t),ZBe=i(c),rf=n(c,"H2",{class:!0});var cIe=s(rf);Q7=n(cIe,"A",{id:!0,class:!0,href:!0});var J0t=s(Q7);ave=n(J0t,"SPAN",{});var Y0t=s(ave);m(UA.$$.fragment,Y0t),Y0t.forEach(t),J0t.forEach(t),E4r=i(cIe),nve=n(cIe,"SPAN",{});var K0t=s(nve);C4r=r(K0t,"FlaxAutoModelForCausalLM"),K0t.forEach(t),cIe.forEach(t),ePe=i(c),Br=n(c,"DIV",{class:!0});var hi=s(Br);m(JA.$$.fragment,hi),w4r=i(hi),tf=n(hi,"P",{});var qJ=s(tf);A4r=r(qJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),fW=n(qJ,"A",{href:!0});var Z0t=s(fW);y4r=r(Z0t,"from_pretrained()"),Z0t.forEach(t),L4r=r(qJ," class method or the "),mW=n(qJ,"A",{href:!0});var eTt=s(mW);x4r=r(eTt,"from_config()"),eTt.forEach(t),k4r=r(qJ,` class
method.`),qJ.forEach(t),S4r=i(hi),YA=n(hi,"P",{});var fIe=s(YA);R4r=r(fIe,"This class cannot be instantiated directly using "),sve=n(fIe,"CODE",{});var oTt=s(sve);B4r=r(oTt,"__init__()"),oTt.forEach(t),P4r=r(fIe," (throws an error)."),fIe.forEach(t),$4r=i(hi),yt=n(hi,"DIV",{class:!0});var pi=s(yt);m(KA.$$.fragment,pi),I4r=i(pi),lve=n(pi,"P",{});var rTt=s(lve);q4r=r(rTt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),rTt.forEach(t),N4r=i(pi),af=n(pi,"P",{});var NJ=s(af);j4r=r(NJ,`Note:
Loading a model from its configuration file does `),ive=n(NJ,"STRONG",{});var tTt=s(ive);D4r=r(tTt,"not"),tTt.forEach(t),G4r=r(NJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),gW=n(NJ,"A",{href:!0});var aTt=s(gW);O4r=r(aTt,"from_pretrained()"),aTt.forEach(t),V4r=r(NJ," to load the model weights."),NJ.forEach(t),X4r=i(pi),dve=n(pi,"P",{});var nTt=s(dve);z4r=r(nTt,"Examples:"),nTt.forEach(t),Q4r=i(pi),m(ZA.$$.fragment,pi),pi.forEach(t),W4r=i(hi),Lo=n(hi,"DIV",{class:!0});var xa=s(Lo);m(ey.$$.fragment,xa),H4r=i(xa),cve=n(xa,"P",{});var sTt=s(cve);U4r=r(sTt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),sTt.forEach(t),J4r=i(xa),kn=n(xa,"P",{});var gE=s(kn);Y4r=r(gE,"The model class to instantiate is selected based on the "),fve=n(gE,"CODE",{});var lTt=s(fve);K4r=r(lTt,"model_type"),lTt.forEach(t),Z4r=r(gE,` property of the config object (either
passed as an argument or loaded from `),mve=n(gE,"CODE",{});var iTt=s(mve);eEr=r(iTt,"pretrained_model_name_or_path"),iTt.forEach(t),oEr=r(gE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gve=n(gE,"CODE",{});var dTt=s(gve);rEr=r(dTt,"pretrained_model_name_or_path"),dTt.forEach(t),tEr=r(gE,":"),gE.forEach(t),aEr=i(xa),ca=n(xa,"UL",{});var _i=s(ca);W7=n(_i,"LI",{});var Kke=s(W7);hve=n(Kke,"STRONG",{});var cTt=s(hve);nEr=r(cTt,"bart"),cTt.forEach(t),sEr=r(Kke," \u2014 "),hW=n(Kke,"A",{href:!0});var fTt=s(hW);lEr=r(fTt,"FlaxBartForCausalLM"),fTt.forEach(t),iEr=r(Kke," (BART model)"),Kke.forEach(t),dEr=i(_i),H7=n(_i,"LI",{});var Zke=s(H7);pve=n(Zke,"STRONG",{});var mTt=s(pve);cEr=r(mTt,"gpt2"),mTt.forEach(t),fEr=r(Zke," \u2014 "),pW=n(Zke,"A",{href:!0});var gTt=s(pW);mEr=r(gTt,"FlaxGPT2LMHeadModel"),gTt.forEach(t),gEr=r(Zke," (OpenAI GPT-2 model)"),Zke.forEach(t),hEr=i(_i),U7=n(_i,"LI",{});var eSe=s(U7);_ve=n(eSe,"STRONG",{});var hTt=s(_ve);pEr=r(hTt,"gpt_neo"),hTt.forEach(t),_Er=r(eSe," \u2014 "),_W=n(eSe,"A",{href:!0});var pTt=s(_W);uEr=r(pTt,"FlaxGPTNeoForCausalLM"),pTt.forEach(t),bEr=r(eSe," (GPT Neo model)"),eSe.forEach(t),FEr=i(_i),J7=n(_i,"LI",{});var oSe=s(J7);uve=n(oSe,"STRONG",{});var _Tt=s(uve);vEr=r(_Tt,"gptj"),_Tt.forEach(t),TEr=r(oSe," \u2014 "),uW=n(oSe,"A",{href:!0});var uTt=s(uW);MEr=r(uTt,"FlaxGPTJForCausalLM"),uTt.forEach(t),EEr=r(oSe," (GPT-J model)"),oSe.forEach(t),CEr=i(_i),Y7=n(_i,"LI",{});var rSe=s(Y7);bve=n(rSe,"STRONG",{});var bTt=s(bve);wEr=r(bTt,"xglm"),bTt.forEach(t),AEr=r(rSe," \u2014 "),bW=n(rSe,"A",{href:!0});var FTt=s(bW);yEr=r(FTt,"FlaxXGLMForCausalLM"),FTt.forEach(t),LEr=r(rSe," (XGLM model)"),rSe.forEach(t),_i.forEach(t),xEr=i(xa),Fve=n(xa,"P",{});var vTt=s(Fve);kEr=r(vTt,"Examples:"),vTt.forEach(t),SEr=i(xa),m(oy.$$.fragment,xa),xa.forEach(t),hi.forEach(t),oPe=i(c),nf=n(c,"H2",{class:!0});var mIe=s(nf);K7=n(mIe,"A",{id:!0,class:!0,href:!0});var TTt=s(K7);vve=n(TTt,"SPAN",{});var MTt=s(vve);m(ry.$$.fragment,MTt),MTt.forEach(t),TTt.forEach(t),REr=i(mIe),Tve=n(mIe,"SPAN",{});var ETt=s(Tve);BEr=r(ETt,"FlaxAutoModelForPreTraining"),ETt.forEach(t),mIe.forEach(t),rPe=i(c),Pr=n(c,"DIV",{class:!0});var ui=s(Pr);m(ty.$$.fragment,ui),PEr=i(ui),sf=n(ui,"P",{});var jJ=s(sf);$Er=r(jJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),FW=n(jJ,"A",{href:!0});var CTt=s(FW);IEr=r(CTt,"from_pretrained()"),CTt.forEach(t),qEr=r(jJ," class method or the "),vW=n(jJ,"A",{href:!0});var wTt=s(vW);NEr=r(wTt,"from_config()"),wTt.forEach(t),jEr=r(jJ,` class
method.`),jJ.forEach(t),DEr=i(ui),ay=n(ui,"P",{});var gIe=s(ay);GEr=r(gIe,"This class cannot be instantiated directly using "),Mve=n(gIe,"CODE",{});var ATt=s(Mve);OEr=r(ATt,"__init__()"),ATt.forEach(t),VEr=r(gIe," (throws an error)."),gIe.forEach(t),XEr=i(ui),Lt=n(ui,"DIV",{class:!0});var bi=s(Lt);m(ny.$$.fragment,bi),zEr=i(bi),Eve=n(bi,"P",{});var yTt=s(Eve);QEr=r(yTt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),yTt.forEach(t),WEr=i(bi),lf=n(bi,"P",{});var DJ=s(lf);HEr=r(DJ,`Note:
Loading a model from its configuration file does `),Cve=n(DJ,"STRONG",{});var LTt=s(Cve);UEr=r(LTt,"not"),LTt.forEach(t),JEr=r(DJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),TW=n(DJ,"A",{href:!0});var xTt=s(TW);YEr=r(xTt,"from_pretrained()"),xTt.forEach(t),KEr=r(DJ," to load the model weights."),DJ.forEach(t),ZEr=i(bi),wve=n(bi,"P",{});var kTt=s(wve);eCr=r(kTt,"Examples:"),kTt.forEach(t),oCr=i(bi),m(sy.$$.fragment,bi),bi.forEach(t),rCr=i(ui),xo=n(ui,"DIV",{class:!0});var ka=s(xo);m(ly.$$.fragment,ka),tCr=i(ka),Ave=n(ka,"P",{});var STt=s(Ave);aCr=r(STt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),STt.forEach(t),nCr=i(ka),Sn=n(ka,"P",{});var hE=s(Sn);sCr=r(hE,"The model class to instantiate is selected based on the "),yve=n(hE,"CODE",{});var RTt=s(yve);lCr=r(RTt,"model_type"),RTt.forEach(t),iCr=r(hE,` property of the config object (either
passed as an argument or loaded from `),Lve=n(hE,"CODE",{});var BTt=s(Lve);dCr=r(BTt,"pretrained_model_name_or_path"),BTt.forEach(t),cCr=r(hE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xve=n(hE,"CODE",{});var PTt=s(xve);fCr=r(PTt,"pretrained_model_name_or_path"),PTt.forEach(t),mCr=r(hE,":"),hE.forEach(t),gCr=i(ka),me=n(ka,"UL",{});var _e=s(me);Z7=n(_e,"LI",{});var tSe=s(Z7);kve=n(tSe,"STRONG",{});var $Tt=s(kve);hCr=r($Tt,"albert"),$Tt.forEach(t),pCr=r(tSe," \u2014 "),MW=n(tSe,"A",{href:!0});var ITt=s(MW);_Cr=r(ITt,"FlaxAlbertForPreTraining"),ITt.forEach(t),uCr=r(tSe," (ALBERT model)"),tSe.forEach(t),bCr=i(_e),eM=n(_e,"LI",{});var aSe=s(eM);Sve=n(aSe,"STRONG",{});var qTt=s(Sve);FCr=r(qTt,"bart"),qTt.forEach(t),vCr=r(aSe," \u2014 "),EW=n(aSe,"A",{href:!0});var NTt=s(EW);TCr=r(NTt,"FlaxBartForConditionalGeneration"),NTt.forEach(t),MCr=r(aSe," (BART model)"),aSe.forEach(t),ECr=i(_e),oM=n(_e,"LI",{});var nSe=s(oM);Rve=n(nSe,"STRONG",{});var jTt=s(Rve);CCr=r(jTt,"bert"),jTt.forEach(t),wCr=r(nSe," \u2014 "),CW=n(nSe,"A",{href:!0});var DTt=s(CW);ACr=r(DTt,"FlaxBertForPreTraining"),DTt.forEach(t),yCr=r(nSe," (BERT model)"),nSe.forEach(t),LCr=i(_e),rM=n(_e,"LI",{});var sSe=s(rM);Bve=n(sSe,"STRONG",{});var GTt=s(Bve);xCr=r(GTt,"big_bird"),GTt.forEach(t),kCr=r(sSe," \u2014 "),wW=n(sSe,"A",{href:!0});var OTt=s(wW);SCr=r(OTt,"FlaxBigBirdForPreTraining"),OTt.forEach(t),RCr=r(sSe," (BigBird model)"),sSe.forEach(t),BCr=i(_e),tM=n(_e,"LI",{});var lSe=s(tM);Pve=n(lSe,"STRONG",{});var VTt=s(Pve);PCr=r(VTt,"electra"),VTt.forEach(t),$Cr=r(lSe," \u2014 "),AW=n(lSe,"A",{href:!0});var XTt=s(AW);ICr=r(XTt,"FlaxElectraForPreTraining"),XTt.forEach(t),qCr=r(lSe," (ELECTRA model)"),lSe.forEach(t),NCr=i(_e),aM=n(_e,"LI",{});var iSe=s(aM);$ve=n(iSe,"STRONG",{});var zTt=s($ve);jCr=r(zTt,"mbart"),zTt.forEach(t),DCr=r(iSe," \u2014 "),yW=n(iSe,"A",{href:!0});var QTt=s(yW);GCr=r(QTt,"FlaxMBartForConditionalGeneration"),QTt.forEach(t),OCr=r(iSe," (mBART model)"),iSe.forEach(t),VCr=i(_e),nM=n(_e,"LI",{});var dSe=s(nM);Ive=n(dSe,"STRONG",{});var WTt=s(Ive);XCr=r(WTt,"mt5"),WTt.forEach(t),zCr=r(dSe," \u2014 "),LW=n(dSe,"A",{href:!0});var HTt=s(LW);QCr=r(HTt,"FlaxMT5ForConditionalGeneration"),HTt.forEach(t),WCr=r(dSe," (mT5 model)"),dSe.forEach(t),HCr=i(_e),sM=n(_e,"LI",{});var cSe=s(sM);qve=n(cSe,"STRONG",{});var UTt=s(qve);UCr=r(UTt,"roberta"),UTt.forEach(t),JCr=r(cSe," \u2014 "),xW=n(cSe,"A",{href:!0});var JTt=s(xW);YCr=r(JTt,"FlaxRobertaForMaskedLM"),JTt.forEach(t),KCr=r(cSe," (RoBERTa model)"),cSe.forEach(t),ZCr=i(_e),lM=n(_e,"LI",{});var fSe=s(lM);Nve=n(fSe,"STRONG",{});var YTt=s(Nve);e5r=r(YTt,"roformer"),YTt.forEach(t),o5r=r(fSe," \u2014 "),kW=n(fSe,"A",{href:!0});var KTt=s(kW);r5r=r(KTt,"FlaxRoFormerForMaskedLM"),KTt.forEach(t),t5r=r(fSe," (RoFormer model)"),fSe.forEach(t),a5r=i(_e),iM=n(_e,"LI",{});var mSe=s(iM);jve=n(mSe,"STRONG",{});var ZTt=s(jve);n5r=r(ZTt,"t5"),ZTt.forEach(t),s5r=r(mSe," \u2014 "),SW=n(mSe,"A",{href:!0});var e8t=s(SW);l5r=r(e8t,"FlaxT5ForConditionalGeneration"),e8t.forEach(t),i5r=r(mSe," (T5 model)"),mSe.forEach(t),d5r=i(_e),dM=n(_e,"LI",{});var gSe=s(dM);Dve=n(gSe,"STRONG",{});var o8t=s(Dve);c5r=r(o8t,"wav2vec2"),o8t.forEach(t),f5r=r(gSe," \u2014 "),RW=n(gSe,"A",{href:!0});var r8t=s(RW);m5r=r(r8t,"FlaxWav2Vec2ForPreTraining"),r8t.forEach(t),g5r=r(gSe," (Wav2Vec2 model)"),gSe.forEach(t),h5r=i(_e),cM=n(_e,"LI",{});var hSe=s(cM);Gve=n(hSe,"STRONG",{});var t8t=s(Gve);p5r=r(t8t,"xlm-roberta"),t8t.forEach(t),_5r=r(hSe," \u2014 "),BW=n(hSe,"A",{href:!0});var a8t=s(BW);u5r=r(a8t,"FlaxXLMRobertaForMaskedLM"),a8t.forEach(t),b5r=r(hSe," (XLM-RoBERTa model)"),hSe.forEach(t),_e.forEach(t),F5r=i(ka),Ove=n(ka,"P",{});var n8t=s(Ove);v5r=r(n8t,"Examples:"),n8t.forEach(t),T5r=i(ka),m(iy.$$.fragment,ka),ka.forEach(t),ui.forEach(t),tPe=i(c),df=n(c,"H2",{class:!0});var hIe=s(df);fM=n(hIe,"A",{id:!0,class:!0,href:!0});var s8t=s(fM);Vve=n(s8t,"SPAN",{});var l8t=s(Vve);m(dy.$$.fragment,l8t),l8t.forEach(t),s8t.forEach(t),M5r=i(hIe),Xve=n(hIe,"SPAN",{});var i8t=s(Xve);E5r=r(i8t,"FlaxAutoModelForMaskedLM"),i8t.forEach(t),hIe.forEach(t),aPe=i(c),$r=n(c,"DIV",{class:!0});var Fi=s($r);m(cy.$$.fragment,Fi),C5r=i(Fi),cf=n(Fi,"P",{});var GJ=s(cf);w5r=r(GJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),PW=n(GJ,"A",{href:!0});var d8t=s(PW);A5r=r(d8t,"from_pretrained()"),d8t.forEach(t),y5r=r(GJ," class method or the "),$W=n(GJ,"A",{href:!0});var c8t=s($W);L5r=r(c8t,"from_config()"),c8t.forEach(t),x5r=r(GJ,` class
method.`),GJ.forEach(t),k5r=i(Fi),fy=n(Fi,"P",{});var pIe=s(fy);S5r=r(pIe,"This class cannot be instantiated directly using "),zve=n(pIe,"CODE",{});var f8t=s(zve);R5r=r(f8t,"__init__()"),f8t.forEach(t),B5r=r(pIe," (throws an error)."),pIe.forEach(t),P5r=i(Fi),xt=n(Fi,"DIV",{class:!0});var vi=s(xt);m(my.$$.fragment,vi),$5r=i(vi),Qve=n(vi,"P",{});var m8t=s(Qve);I5r=r(m8t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),m8t.forEach(t),q5r=i(vi),ff=n(vi,"P",{});var OJ=s(ff);N5r=r(OJ,`Note:
Loading a model from its configuration file does `),Wve=n(OJ,"STRONG",{});var g8t=s(Wve);j5r=r(g8t,"not"),g8t.forEach(t),D5r=r(OJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),IW=n(OJ,"A",{href:!0});var h8t=s(IW);G5r=r(h8t,"from_pretrained()"),h8t.forEach(t),O5r=r(OJ," to load the model weights."),OJ.forEach(t),V5r=i(vi),Hve=n(vi,"P",{});var p8t=s(Hve);X5r=r(p8t,"Examples:"),p8t.forEach(t),z5r=i(vi),m(gy.$$.fragment,vi),vi.forEach(t),Q5r=i(Fi),ko=n(Fi,"DIV",{class:!0});var Sa=s(ko);m(hy.$$.fragment,Sa),W5r=i(Sa),Uve=n(Sa,"P",{});var _8t=s(Uve);H5r=r(_8t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),_8t.forEach(t),U5r=i(Sa),Rn=n(Sa,"P",{});var pE=s(Rn);J5r=r(pE,"The model class to instantiate is selected based on the "),Jve=n(pE,"CODE",{});var u8t=s(Jve);Y5r=r(u8t,"model_type"),u8t.forEach(t),K5r=r(pE,` property of the config object (either
passed as an argument or loaded from `),Yve=n(pE,"CODE",{});var b8t=s(Yve);Z5r=r(b8t,"pretrained_model_name_or_path"),b8t.forEach(t),e3r=r(pE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kve=n(pE,"CODE",{});var F8t=s(Kve);o3r=r(F8t,"pretrained_model_name_or_path"),F8t.forEach(t),r3r=r(pE,":"),pE.forEach(t),t3r=i(Sa),Fe=n(Sa,"UL",{});var Ae=s(Fe);mM=n(Ae,"LI",{});var pSe=s(mM);Zve=n(pSe,"STRONG",{});var v8t=s(Zve);a3r=r(v8t,"albert"),v8t.forEach(t),n3r=r(pSe," \u2014 "),qW=n(pSe,"A",{href:!0});var T8t=s(qW);s3r=r(T8t,"FlaxAlbertForMaskedLM"),T8t.forEach(t),l3r=r(pSe," (ALBERT model)"),pSe.forEach(t),i3r=i(Ae),gM=n(Ae,"LI",{});var _Se=s(gM);e6e=n(_Se,"STRONG",{});var M8t=s(e6e);d3r=r(M8t,"bart"),M8t.forEach(t),c3r=r(_Se," \u2014 "),NW=n(_Se,"A",{href:!0});var E8t=s(NW);f3r=r(E8t,"FlaxBartForConditionalGeneration"),E8t.forEach(t),m3r=r(_Se," (BART model)"),_Se.forEach(t),g3r=i(Ae),hM=n(Ae,"LI",{});var uSe=s(hM);o6e=n(uSe,"STRONG",{});var C8t=s(o6e);h3r=r(C8t,"bert"),C8t.forEach(t),p3r=r(uSe," \u2014 "),jW=n(uSe,"A",{href:!0});var w8t=s(jW);_3r=r(w8t,"FlaxBertForMaskedLM"),w8t.forEach(t),u3r=r(uSe," (BERT model)"),uSe.forEach(t),b3r=i(Ae),pM=n(Ae,"LI",{});var bSe=s(pM);r6e=n(bSe,"STRONG",{});var A8t=s(r6e);F3r=r(A8t,"big_bird"),A8t.forEach(t),v3r=r(bSe," \u2014 "),DW=n(bSe,"A",{href:!0});var y8t=s(DW);T3r=r(y8t,"FlaxBigBirdForMaskedLM"),y8t.forEach(t),M3r=r(bSe," (BigBird model)"),bSe.forEach(t),E3r=i(Ae),_M=n(Ae,"LI",{});var FSe=s(_M);t6e=n(FSe,"STRONG",{});var L8t=s(t6e);C3r=r(L8t,"distilbert"),L8t.forEach(t),w3r=r(FSe," \u2014 "),GW=n(FSe,"A",{href:!0});var x8t=s(GW);A3r=r(x8t,"FlaxDistilBertForMaskedLM"),x8t.forEach(t),y3r=r(FSe," (DistilBERT model)"),FSe.forEach(t),L3r=i(Ae),uM=n(Ae,"LI",{});var vSe=s(uM);a6e=n(vSe,"STRONG",{});var k8t=s(a6e);x3r=r(k8t,"electra"),k8t.forEach(t),k3r=r(vSe," \u2014 "),OW=n(vSe,"A",{href:!0});var S8t=s(OW);S3r=r(S8t,"FlaxElectraForMaskedLM"),S8t.forEach(t),R3r=r(vSe," (ELECTRA model)"),vSe.forEach(t),B3r=i(Ae),bM=n(Ae,"LI",{});var TSe=s(bM);n6e=n(TSe,"STRONG",{});var R8t=s(n6e);P3r=r(R8t,"mbart"),R8t.forEach(t),$3r=r(TSe," \u2014 "),VW=n(TSe,"A",{href:!0});var B8t=s(VW);I3r=r(B8t,"FlaxMBartForConditionalGeneration"),B8t.forEach(t),q3r=r(TSe," (mBART model)"),TSe.forEach(t),N3r=i(Ae),FM=n(Ae,"LI",{});var MSe=s(FM);s6e=n(MSe,"STRONG",{});var P8t=s(s6e);j3r=r(P8t,"roberta"),P8t.forEach(t),D3r=r(MSe," \u2014 "),XW=n(MSe,"A",{href:!0});var $8t=s(XW);G3r=r($8t,"FlaxRobertaForMaskedLM"),$8t.forEach(t),O3r=r(MSe," (RoBERTa model)"),MSe.forEach(t),V3r=i(Ae),vM=n(Ae,"LI",{});var ESe=s(vM);l6e=n(ESe,"STRONG",{});var I8t=s(l6e);X3r=r(I8t,"roformer"),I8t.forEach(t),z3r=r(ESe," \u2014 "),zW=n(ESe,"A",{href:!0});var q8t=s(zW);Q3r=r(q8t,"FlaxRoFormerForMaskedLM"),q8t.forEach(t),W3r=r(ESe," (RoFormer model)"),ESe.forEach(t),H3r=i(Ae),TM=n(Ae,"LI",{});var CSe=s(TM);i6e=n(CSe,"STRONG",{});var N8t=s(i6e);U3r=r(N8t,"xlm-roberta"),N8t.forEach(t),J3r=r(CSe," \u2014 "),QW=n(CSe,"A",{href:!0});var j8t=s(QW);Y3r=r(j8t,"FlaxXLMRobertaForMaskedLM"),j8t.forEach(t),K3r=r(CSe," (XLM-RoBERTa model)"),CSe.forEach(t),Ae.forEach(t),Z3r=i(Sa),d6e=n(Sa,"P",{});var D8t=s(d6e);ewr=r(D8t,"Examples:"),D8t.forEach(t),owr=i(Sa),m(py.$$.fragment,Sa),Sa.forEach(t),Fi.forEach(t),nPe=i(c),mf=n(c,"H2",{class:!0});var _Ie=s(mf);MM=n(_Ie,"A",{id:!0,class:!0,href:!0});var G8t=s(MM);c6e=n(G8t,"SPAN",{});var O8t=s(c6e);m(_y.$$.fragment,O8t),O8t.forEach(t),G8t.forEach(t),rwr=i(_Ie),f6e=n(_Ie,"SPAN",{});var V8t=s(f6e);twr=r(V8t,"FlaxAutoModelForSeq2SeqLM"),V8t.forEach(t),_Ie.forEach(t),sPe=i(c),Ir=n(c,"DIV",{class:!0});var Ti=s(Ir);m(uy.$$.fragment,Ti),awr=i(Ti),gf=n(Ti,"P",{});var VJ=s(gf);nwr=r(VJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),WW=n(VJ,"A",{href:!0});var X8t=s(WW);swr=r(X8t,"from_pretrained()"),X8t.forEach(t),lwr=r(VJ," class method or the "),HW=n(VJ,"A",{href:!0});var z8t=s(HW);iwr=r(z8t,"from_config()"),z8t.forEach(t),dwr=r(VJ,` class
method.`),VJ.forEach(t),cwr=i(Ti),by=n(Ti,"P",{});var uIe=s(by);fwr=r(uIe,"This class cannot be instantiated directly using "),m6e=n(uIe,"CODE",{});var Q8t=s(m6e);mwr=r(Q8t,"__init__()"),Q8t.forEach(t),gwr=r(uIe," (throws an error)."),uIe.forEach(t),hwr=i(Ti),kt=n(Ti,"DIV",{class:!0});var Mi=s(kt);m(Fy.$$.fragment,Mi),pwr=i(Mi),g6e=n(Mi,"P",{});var W8t=s(g6e);_wr=r(W8t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),W8t.forEach(t),uwr=i(Mi),hf=n(Mi,"P",{});var XJ=s(hf);bwr=r(XJ,`Note:
Loading a model from its configuration file does `),h6e=n(XJ,"STRONG",{});var H8t=s(h6e);Fwr=r(H8t,"not"),H8t.forEach(t),vwr=r(XJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),UW=n(XJ,"A",{href:!0});var U8t=s(UW);Twr=r(U8t,"from_pretrained()"),U8t.forEach(t),Mwr=r(XJ," to load the model weights."),XJ.forEach(t),Ewr=i(Mi),p6e=n(Mi,"P",{});var J8t=s(p6e);Cwr=r(J8t,"Examples:"),J8t.forEach(t),wwr=i(Mi),m(vy.$$.fragment,Mi),Mi.forEach(t),Awr=i(Ti),So=n(Ti,"DIV",{class:!0});var Ra=s(So);m(Ty.$$.fragment,Ra),ywr=i(Ra),_6e=n(Ra,"P",{});var Y8t=s(_6e);Lwr=r(Y8t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Y8t.forEach(t),xwr=i(Ra),Bn=n(Ra,"P",{});var _E=s(Bn);kwr=r(_E,"The model class to instantiate is selected based on the "),u6e=n(_E,"CODE",{});var K8t=s(u6e);Swr=r(K8t,"model_type"),K8t.forEach(t),Rwr=r(_E,` property of the config object (either
passed as an argument or loaded from `),b6e=n(_E,"CODE",{});var Z8t=s(b6e);Bwr=r(Z8t,"pretrained_model_name_or_path"),Z8t.forEach(t),Pwr=r(_E,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F6e=n(_E,"CODE",{});var e7t=s(F6e);$wr=r(e7t,"pretrained_model_name_or_path"),e7t.forEach(t),Iwr=r(_E,":"),_E.forEach(t),qwr=i(Ra),Ee=n(Ra,"UL",{});var so=s(Ee);EM=n(so,"LI",{});var wSe=s(EM);v6e=n(wSe,"STRONG",{});var o7t=s(v6e);Nwr=r(o7t,"bart"),o7t.forEach(t),jwr=r(wSe," \u2014 "),JW=n(wSe,"A",{href:!0});var r7t=s(JW);Dwr=r(r7t,"FlaxBartForConditionalGeneration"),r7t.forEach(t),Gwr=r(wSe," (BART model)"),wSe.forEach(t),Owr=i(so),CM=n(so,"LI",{});var ASe=s(CM);T6e=n(ASe,"STRONG",{});var t7t=s(T6e);Vwr=r(t7t,"blenderbot"),t7t.forEach(t),Xwr=r(ASe," \u2014 "),YW=n(ASe,"A",{href:!0});var a7t=s(YW);zwr=r(a7t,"FlaxBlenderbotForConditionalGeneration"),a7t.forEach(t),Qwr=r(ASe," (Blenderbot model)"),ASe.forEach(t),Wwr=i(so),wM=n(so,"LI",{});var ySe=s(wM);M6e=n(ySe,"STRONG",{});var n7t=s(M6e);Hwr=r(n7t,"blenderbot-small"),n7t.forEach(t),Uwr=r(ySe," \u2014 "),KW=n(ySe,"A",{href:!0});var s7t=s(KW);Jwr=r(s7t,"FlaxBlenderbotSmallForConditionalGeneration"),s7t.forEach(t),Ywr=r(ySe," (BlenderbotSmall model)"),ySe.forEach(t),Kwr=i(so),AM=n(so,"LI",{});var LSe=s(AM);E6e=n(LSe,"STRONG",{});var l7t=s(E6e);Zwr=r(l7t,"encoder-decoder"),l7t.forEach(t),eAr=r(LSe," \u2014 "),ZW=n(LSe,"A",{href:!0});var i7t=s(ZW);oAr=r(i7t,"FlaxEncoderDecoderModel"),i7t.forEach(t),rAr=r(LSe," (Encoder decoder model)"),LSe.forEach(t),tAr=i(so),yM=n(so,"LI",{});var xSe=s(yM);C6e=n(xSe,"STRONG",{});var d7t=s(C6e);aAr=r(d7t,"marian"),d7t.forEach(t),nAr=r(xSe," \u2014 "),eH=n(xSe,"A",{href:!0});var c7t=s(eH);sAr=r(c7t,"FlaxMarianMTModel"),c7t.forEach(t),lAr=r(xSe," (Marian model)"),xSe.forEach(t),iAr=i(so),LM=n(so,"LI",{});var kSe=s(LM);w6e=n(kSe,"STRONG",{});var f7t=s(w6e);dAr=r(f7t,"mbart"),f7t.forEach(t),cAr=r(kSe," \u2014 "),oH=n(kSe,"A",{href:!0});var m7t=s(oH);fAr=r(m7t,"FlaxMBartForConditionalGeneration"),m7t.forEach(t),mAr=r(kSe," (mBART model)"),kSe.forEach(t),gAr=i(so),xM=n(so,"LI",{});var SSe=s(xM);A6e=n(SSe,"STRONG",{});var g7t=s(A6e);hAr=r(g7t,"mt5"),g7t.forEach(t),pAr=r(SSe," \u2014 "),rH=n(SSe,"A",{href:!0});var h7t=s(rH);_Ar=r(h7t,"FlaxMT5ForConditionalGeneration"),h7t.forEach(t),uAr=r(SSe," (mT5 model)"),SSe.forEach(t),bAr=i(so),kM=n(so,"LI",{});var RSe=s(kM);y6e=n(RSe,"STRONG",{});var p7t=s(y6e);FAr=r(p7t,"pegasus"),p7t.forEach(t),vAr=r(RSe," \u2014 "),tH=n(RSe,"A",{href:!0});var _7t=s(tH);TAr=r(_7t,"FlaxPegasusForConditionalGeneration"),_7t.forEach(t),MAr=r(RSe," (Pegasus model)"),RSe.forEach(t),EAr=i(so),SM=n(so,"LI",{});var BSe=s(SM);L6e=n(BSe,"STRONG",{});var u7t=s(L6e);CAr=r(u7t,"t5"),u7t.forEach(t),wAr=r(BSe," \u2014 "),aH=n(BSe,"A",{href:!0});var b7t=s(aH);AAr=r(b7t,"FlaxT5ForConditionalGeneration"),b7t.forEach(t),yAr=r(BSe," (T5 model)"),BSe.forEach(t),so.forEach(t),LAr=i(Ra),x6e=n(Ra,"P",{});var F7t=s(x6e);xAr=r(F7t,"Examples:"),F7t.forEach(t),kAr=i(Ra),m(My.$$.fragment,Ra),Ra.forEach(t),Ti.forEach(t),lPe=i(c),pf=n(c,"H2",{class:!0});var bIe=s(pf);RM=n(bIe,"A",{id:!0,class:!0,href:!0});var v7t=s(RM);k6e=n(v7t,"SPAN",{});var T7t=s(k6e);m(Ey.$$.fragment,T7t),T7t.forEach(t),v7t.forEach(t),SAr=i(bIe),S6e=n(bIe,"SPAN",{});var M7t=s(S6e);RAr=r(M7t,"FlaxAutoModelForSequenceClassification"),M7t.forEach(t),bIe.forEach(t),iPe=i(c),qr=n(c,"DIV",{class:!0});var Ei=s(qr);m(Cy.$$.fragment,Ei),BAr=i(Ei),_f=n(Ei,"P",{});var zJ=s(_f);PAr=r(zJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),nH=n(zJ,"A",{href:!0});var E7t=s(nH);$Ar=r(E7t,"from_pretrained()"),E7t.forEach(t),IAr=r(zJ," class method or the "),sH=n(zJ,"A",{href:!0});var C7t=s(sH);qAr=r(C7t,"from_config()"),C7t.forEach(t),NAr=r(zJ,` class
method.`),zJ.forEach(t),jAr=i(Ei),wy=n(Ei,"P",{});var FIe=s(wy);DAr=r(FIe,"This class cannot be instantiated directly using "),R6e=n(FIe,"CODE",{});var w7t=s(R6e);GAr=r(w7t,"__init__()"),w7t.forEach(t),OAr=r(FIe," (throws an error)."),FIe.forEach(t),VAr=i(Ei),St=n(Ei,"DIV",{class:!0});var Ci=s(St);m(Ay.$$.fragment,Ci),XAr=i(Ci),B6e=n(Ci,"P",{});var A7t=s(B6e);zAr=r(A7t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),A7t.forEach(t),QAr=i(Ci),uf=n(Ci,"P",{});var QJ=s(uf);WAr=r(QJ,`Note:
Loading a model from its configuration file does `),P6e=n(QJ,"STRONG",{});var y7t=s(P6e);HAr=r(y7t,"not"),y7t.forEach(t),UAr=r(QJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),lH=n(QJ,"A",{href:!0});var L7t=s(lH);JAr=r(L7t,"from_pretrained()"),L7t.forEach(t),YAr=r(QJ," to load the model weights."),QJ.forEach(t),KAr=i(Ci),$6e=n(Ci,"P",{});var x7t=s($6e);ZAr=r(x7t,"Examples:"),x7t.forEach(t),eyr=i(Ci),m(yy.$$.fragment,Ci),Ci.forEach(t),oyr=i(Ei),Ro=n(Ei,"DIV",{class:!0});var Ba=s(Ro);m(Ly.$$.fragment,Ba),ryr=i(Ba),I6e=n(Ba,"P",{});var k7t=s(I6e);tyr=r(k7t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),k7t.forEach(t),ayr=i(Ba),Pn=n(Ba,"P",{});var uE=s(Pn);nyr=r(uE,"The model class to instantiate is selected based on the "),q6e=n(uE,"CODE",{});var S7t=s(q6e);syr=r(S7t,"model_type"),S7t.forEach(t),lyr=r(uE,` property of the config object (either
passed as an argument or loaded from `),N6e=n(uE,"CODE",{});var R7t=s(N6e);iyr=r(R7t,"pretrained_model_name_or_path"),R7t.forEach(t),dyr=r(uE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j6e=n(uE,"CODE",{});var B7t=s(j6e);cyr=r(B7t,"pretrained_model_name_or_path"),B7t.forEach(t),fyr=r(uE,":"),uE.forEach(t),myr=i(Ba),ve=n(Ba,"UL",{});var ye=s(ve);BM=n(ye,"LI",{});var PSe=s(BM);D6e=n(PSe,"STRONG",{});var P7t=s(D6e);gyr=r(P7t,"albert"),P7t.forEach(t),hyr=r(PSe," \u2014 "),iH=n(PSe,"A",{href:!0});var $7t=s(iH);pyr=r($7t,"FlaxAlbertForSequenceClassification"),$7t.forEach(t),_yr=r(PSe," (ALBERT model)"),PSe.forEach(t),uyr=i(ye),PM=n(ye,"LI",{});var $Se=s(PM);G6e=n($Se,"STRONG",{});var I7t=s(G6e);byr=r(I7t,"bart"),I7t.forEach(t),Fyr=r($Se," \u2014 "),dH=n($Se,"A",{href:!0});var q7t=s(dH);vyr=r(q7t,"FlaxBartForSequenceClassification"),q7t.forEach(t),Tyr=r($Se," (BART model)"),$Se.forEach(t),Myr=i(ye),$M=n(ye,"LI",{});var ISe=s($M);O6e=n(ISe,"STRONG",{});var N7t=s(O6e);Eyr=r(N7t,"bert"),N7t.forEach(t),Cyr=r(ISe," \u2014 "),cH=n(ISe,"A",{href:!0});var j7t=s(cH);wyr=r(j7t,"FlaxBertForSequenceClassification"),j7t.forEach(t),Ayr=r(ISe," (BERT model)"),ISe.forEach(t),yyr=i(ye),IM=n(ye,"LI",{});var qSe=s(IM);V6e=n(qSe,"STRONG",{});var D7t=s(V6e);Lyr=r(D7t,"big_bird"),D7t.forEach(t),xyr=r(qSe," \u2014 "),fH=n(qSe,"A",{href:!0});var G7t=s(fH);kyr=r(G7t,"FlaxBigBirdForSequenceClassification"),G7t.forEach(t),Syr=r(qSe," (BigBird model)"),qSe.forEach(t),Ryr=i(ye),qM=n(ye,"LI",{});var NSe=s(qM);X6e=n(NSe,"STRONG",{});var O7t=s(X6e);Byr=r(O7t,"distilbert"),O7t.forEach(t),Pyr=r(NSe," \u2014 "),mH=n(NSe,"A",{href:!0});var V7t=s(mH);$yr=r(V7t,"FlaxDistilBertForSequenceClassification"),V7t.forEach(t),Iyr=r(NSe," (DistilBERT model)"),NSe.forEach(t),qyr=i(ye),NM=n(ye,"LI",{});var jSe=s(NM);z6e=n(jSe,"STRONG",{});var X7t=s(z6e);Nyr=r(X7t,"electra"),X7t.forEach(t),jyr=r(jSe," \u2014 "),gH=n(jSe,"A",{href:!0});var z7t=s(gH);Dyr=r(z7t,"FlaxElectraForSequenceClassification"),z7t.forEach(t),Gyr=r(jSe," (ELECTRA model)"),jSe.forEach(t),Oyr=i(ye),jM=n(ye,"LI",{});var DSe=s(jM);Q6e=n(DSe,"STRONG",{});var Q7t=s(Q6e);Vyr=r(Q7t,"mbart"),Q7t.forEach(t),Xyr=r(DSe," \u2014 "),hH=n(DSe,"A",{href:!0});var W7t=s(hH);zyr=r(W7t,"FlaxMBartForSequenceClassification"),W7t.forEach(t),Qyr=r(DSe," (mBART model)"),DSe.forEach(t),Wyr=i(ye),DM=n(ye,"LI",{});var GSe=s(DM);W6e=n(GSe,"STRONG",{});var H7t=s(W6e);Hyr=r(H7t,"roberta"),H7t.forEach(t),Uyr=r(GSe," \u2014 "),pH=n(GSe,"A",{href:!0});var U7t=s(pH);Jyr=r(U7t,"FlaxRobertaForSequenceClassification"),U7t.forEach(t),Yyr=r(GSe," (RoBERTa model)"),GSe.forEach(t),Kyr=i(ye),GM=n(ye,"LI",{});var OSe=s(GM);H6e=n(OSe,"STRONG",{});var J7t=s(H6e);Zyr=r(J7t,"roformer"),J7t.forEach(t),eLr=r(OSe," \u2014 "),_H=n(OSe,"A",{href:!0});var Y7t=s(_H);oLr=r(Y7t,"FlaxRoFormerForSequenceClassification"),Y7t.forEach(t),rLr=r(OSe," (RoFormer model)"),OSe.forEach(t),tLr=i(ye),OM=n(ye,"LI",{});var VSe=s(OM);U6e=n(VSe,"STRONG",{});var K7t=s(U6e);aLr=r(K7t,"xlm-roberta"),K7t.forEach(t),nLr=r(VSe," \u2014 "),uH=n(VSe,"A",{href:!0});var Z7t=s(uH);sLr=r(Z7t,"FlaxXLMRobertaForSequenceClassification"),Z7t.forEach(t),lLr=r(VSe," (XLM-RoBERTa model)"),VSe.forEach(t),ye.forEach(t),iLr=i(Ba),J6e=n(Ba,"P",{});var eMt=s(J6e);dLr=r(eMt,"Examples:"),eMt.forEach(t),cLr=i(Ba),m(xy.$$.fragment,Ba),Ba.forEach(t),Ei.forEach(t),dPe=i(c),bf=n(c,"H2",{class:!0});var vIe=s(bf);VM=n(vIe,"A",{id:!0,class:!0,href:!0});var oMt=s(VM);Y6e=n(oMt,"SPAN",{});var rMt=s(Y6e);m(ky.$$.fragment,rMt),rMt.forEach(t),oMt.forEach(t),fLr=i(vIe),K6e=n(vIe,"SPAN",{});var tMt=s(K6e);mLr=r(tMt,"FlaxAutoModelForQuestionAnswering"),tMt.forEach(t),vIe.forEach(t),cPe=i(c),Nr=n(c,"DIV",{class:!0});var wi=s(Nr);m(Sy.$$.fragment,wi),gLr=i(wi),Ff=n(wi,"P",{});var WJ=s(Ff);hLr=r(WJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),bH=n(WJ,"A",{href:!0});var aMt=s(bH);pLr=r(aMt,"from_pretrained()"),aMt.forEach(t),_Lr=r(WJ," class method or the "),FH=n(WJ,"A",{href:!0});var nMt=s(FH);uLr=r(nMt,"from_config()"),nMt.forEach(t),bLr=r(WJ,` class
method.`),WJ.forEach(t),FLr=i(wi),Ry=n(wi,"P",{});var TIe=s(Ry);vLr=r(TIe,"This class cannot be instantiated directly using "),Z6e=n(TIe,"CODE",{});var sMt=s(Z6e);TLr=r(sMt,"__init__()"),sMt.forEach(t),MLr=r(TIe," (throws an error)."),TIe.forEach(t),ELr=i(wi),Rt=n(wi,"DIV",{class:!0});var Ai=s(Rt);m(By.$$.fragment,Ai),CLr=i(Ai),e0e=n(Ai,"P",{});var lMt=s(e0e);wLr=r(lMt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),lMt.forEach(t),ALr=i(Ai),vf=n(Ai,"P",{});var HJ=s(vf);yLr=r(HJ,`Note:
Loading a model from its configuration file does `),o0e=n(HJ,"STRONG",{});var iMt=s(o0e);LLr=r(iMt,"not"),iMt.forEach(t),xLr=r(HJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),vH=n(HJ,"A",{href:!0});var dMt=s(vH);kLr=r(dMt,"from_pretrained()"),dMt.forEach(t),SLr=r(HJ," to load the model weights."),HJ.forEach(t),RLr=i(Ai),r0e=n(Ai,"P",{});var cMt=s(r0e);BLr=r(cMt,"Examples:"),cMt.forEach(t),PLr=i(Ai),m(Py.$$.fragment,Ai),Ai.forEach(t),$Lr=i(wi),Bo=n(wi,"DIV",{class:!0});var Pa=s(Bo);m($y.$$.fragment,Pa),ILr=i(Pa),t0e=n(Pa,"P",{});var fMt=s(t0e);qLr=r(fMt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),fMt.forEach(t),NLr=i(Pa),$n=n(Pa,"P",{});var bE=s($n);jLr=r(bE,"The model class to instantiate is selected based on the "),a0e=n(bE,"CODE",{});var mMt=s(a0e);DLr=r(mMt,"model_type"),mMt.forEach(t),GLr=r(bE,` property of the config object (either
passed as an argument or loaded from `),n0e=n(bE,"CODE",{});var gMt=s(n0e);OLr=r(gMt,"pretrained_model_name_or_path"),gMt.forEach(t),VLr=r(bE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s0e=n(bE,"CODE",{});var hMt=s(s0e);XLr=r(hMt,"pretrained_model_name_or_path"),hMt.forEach(t),zLr=r(bE,":"),bE.forEach(t),QLr=i(Pa),Te=n(Pa,"UL",{});var Le=s(Te);XM=n(Le,"LI",{});var XSe=s(XM);l0e=n(XSe,"STRONG",{});var pMt=s(l0e);WLr=r(pMt,"albert"),pMt.forEach(t),HLr=r(XSe," \u2014 "),TH=n(XSe,"A",{href:!0});var _Mt=s(TH);ULr=r(_Mt,"FlaxAlbertForQuestionAnswering"),_Mt.forEach(t),JLr=r(XSe," (ALBERT model)"),XSe.forEach(t),YLr=i(Le),zM=n(Le,"LI",{});var zSe=s(zM);i0e=n(zSe,"STRONG",{});var uMt=s(i0e);KLr=r(uMt,"bart"),uMt.forEach(t),ZLr=r(zSe," \u2014 "),MH=n(zSe,"A",{href:!0});var bMt=s(MH);e9r=r(bMt,"FlaxBartForQuestionAnswering"),bMt.forEach(t),o9r=r(zSe," (BART model)"),zSe.forEach(t),r9r=i(Le),QM=n(Le,"LI",{});var QSe=s(QM);d0e=n(QSe,"STRONG",{});var FMt=s(d0e);t9r=r(FMt,"bert"),FMt.forEach(t),a9r=r(QSe," \u2014 "),EH=n(QSe,"A",{href:!0});var vMt=s(EH);n9r=r(vMt,"FlaxBertForQuestionAnswering"),vMt.forEach(t),s9r=r(QSe," (BERT model)"),QSe.forEach(t),l9r=i(Le),WM=n(Le,"LI",{});var WSe=s(WM);c0e=n(WSe,"STRONG",{});var TMt=s(c0e);i9r=r(TMt,"big_bird"),TMt.forEach(t),d9r=r(WSe," \u2014 "),CH=n(WSe,"A",{href:!0});var MMt=s(CH);c9r=r(MMt,"FlaxBigBirdForQuestionAnswering"),MMt.forEach(t),f9r=r(WSe," (BigBird model)"),WSe.forEach(t),m9r=i(Le),HM=n(Le,"LI",{});var HSe=s(HM);f0e=n(HSe,"STRONG",{});var EMt=s(f0e);g9r=r(EMt,"distilbert"),EMt.forEach(t),h9r=r(HSe," \u2014 "),wH=n(HSe,"A",{href:!0});var CMt=s(wH);p9r=r(CMt,"FlaxDistilBertForQuestionAnswering"),CMt.forEach(t),_9r=r(HSe," (DistilBERT model)"),HSe.forEach(t),u9r=i(Le),UM=n(Le,"LI",{});var USe=s(UM);m0e=n(USe,"STRONG",{});var wMt=s(m0e);b9r=r(wMt,"electra"),wMt.forEach(t),F9r=r(USe," \u2014 "),AH=n(USe,"A",{href:!0});var AMt=s(AH);v9r=r(AMt,"FlaxElectraForQuestionAnswering"),AMt.forEach(t),T9r=r(USe," (ELECTRA model)"),USe.forEach(t),M9r=i(Le),JM=n(Le,"LI",{});var JSe=s(JM);g0e=n(JSe,"STRONG",{});var yMt=s(g0e);E9r=r(yMt,"mbart"),yMt.forEach(t),C9r=r(JSe," \u2014 "),yH=n(JSe,"A",{href:!0});var LMt=s(yH);w9r=r(LMt,"FlaxMBartForQuestionAnswering"),LMt.forEach(t),A9r=r(JSe," (mBART model)"),JSe.forEach(t),y9r=i(Le),YM=n(Le,"LI",{});var YSe=s(YM);h0e=n(YSe,"STRONG",{});var xMt=s(h0e);L9r=r(xMt,"roberta"),xMt.forEach(t),x9r=r(YSe," \u2014 "),LH=n(YSe,"A",{href:!0});var kMt=s(LH);k9r=r(kMt,"FlaxRobertaForQuestionAnswering"),kMt.forEach(t),S9r=r(YSe," (RoBERTa model)"),YSe.forEach(t),R9r=i(Le),KM=n(Le,"LI",{});var KSe=s(KM);p0e=n(KSe,"STRONG",{});var SMt=s(p0e);B9r=r(SMt,"roformer"),SMt.forEach(t),P9r=r(KSe," \u2014 "),xH=n(KSe,"A",{href:!0});var RMt=s(xH);$9r=r(RMt,"FlaxRoFormerForQuestionAnswering"),RMt.forEach(t),I9r=r(KSe," (RoFormer model)"),KSe.forEach(t),q9r=i(Le),ZM=n(Le,"LI",{});var ZSe=s(ZM);_0e=n(ZSe,"STRONG",{});var BMt=s(_0e);N9r=r(BMt,"xlm-roberta"),BMt.forEach(t),j9r=r(ZSe," \u2014 "),kH=n(ZSe,"A",{href:!0});var PMt=s(kH);D9r=r(PMt,"FlaxXLMRobertaForQuestionAnswering"),PMt.forEach(t),G9r=r(ZSe," (XLM-RoBERTa model)"),ZSe.forEach(t),Le.forEach(t),O9r=i(Pa),u0e=n(Pa,"P",{});var $Mt=s(u0e);V9r=r($Mt,"Examples:"),$Mt.forEach(t),X9r=i(Pa),m(Iy.$$.fragment,Pa),Pa.forEach(t),wi.forEach(t),fPe=i(c),Tf=n(c,"H2",{class:!0});var MIe=s(Tf);e4=n(MIe,"A",{id:!0,class:!0,href:!0});var IMt=s(e4);b0e=n(IMt,"SPAN",{});var qMt=s(b0e);m(qy.$$.fragment,qMt),qMt.forEach(t),IMt.forEach(t),z9r=i(MIe),F0e=n(MIe,"SPAN",{});var NMt=s(F0e);Q9r=r(NMt,"FlaxAutoModelForTokenClassification"),NMt.forEach(t),MIe.forEach(t),mPe=i(c),jr=n(c,"DIV",{class:!0});var yi=s(jr);m(Ny.$$.fragment,yi),W9r=i(yi),Mf=n(yi,"P",{});var UJ=s(Mf);H9r=r(UJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),SH=n(UJ,"A",{href:!0});var jMt=s(SH);U9r=r(jMt,"from_pretrained()"),jMt.forEach(t),J9r=r(UJ," class method or the "),RH=n(UJ,"A",{href:!0});var DMt=s(RH);Y9r=r(DMt,"from_config()"),DMt.forEach(t),K9r=r(UJ,` class
method.`),UJ.forEach(t),Z9r=i(yi),jy=n(yi,"P",{});var EIe=s(jy);exr=r(EIe,"This class cannot be instantiated directly using "),v0e=n(EIe,"CODE",{});var GMt=s(v0e);oxr=r(GMt,"__init__()"),GMt.forEach(t),rxr=r(EIe," (throws an error)."),EIe.forEach(t),txr=i(yi),Bt=n(yi,"DIV",{class:!0});var Li=s(Bt);m(Dy.$$.fragment,Li),axr=i(Li),T0e=n(Li,"P",{});var OMt=s(T0e);nxr=r(OMt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),OMt.forEach(t),sxr=i(Li),Ef=n(Li,"P",{});var JJ=s(Ef);lxr=r(JJ,`Note:
Loading a model from its configuration file does `),M0e=n(JJ,"STRONG",{});var VMt=s(M0e);ixr=r(VMt,"not"),VMt.forEach(t),dxr=r(JJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),BH=n(JJ,"A",{href:!0});var XMt=s(BH);cxr=r(XMt,"from_pretrained()"),XMt.forEach(t),fxr=r(JJ," to load the model weights."),JJ.forEach(t),mxr=i(Li),E0e=n(Li,"P",{});var zMt=s(E0e);gxr=r(zMt,"Examples:"),zMt.forEach(t),hxr=i(Li),m(Gy.$$.fragment,Li),Li.forEach(t),pxr=i(yi),Po=n(yi,"DIV",{class:!0});var $a=s(Po);m(Oy.$$.fragment,$a),_xr=i($a),C0e=n($a,"P",{});var QMt=s(C0e);uxr=r(QMt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),QMt.forEach(t),bxr=i($a),In=n($a,"P",{});var FE=s(In);Fxr=r(FE,"The model class to instantiate is selected based on the "),w0e=n(FE,"CODE",{});var WMt=s(w0e);vxr=r(WMt,"model_type"),WMt.forEach(t),Txr=r(FE,` property of the config object (either
passed as an argument or loaded from `),A0e=n(FE,"CODE",{});var HMt=s(A0e);Mxr=r(HMt,"pretrained_model_name_or_path"),HMt.forEach(t),Exr=r(FE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y0e=n(FE,"CODE",{});var UMt=s(y0e);Cxr=r(UMt,"pretrained_model_name_or_path"),UMt.forEach(t),wxr=r(FE,":"),FE.forEach(t),Axr=i($a),Be=n($a,"UL",{});var Oo=s(Be);o4=n(Oo,"LI",{});var eRe=s(o4);L0e=n(eRe,"STRONG",{});var JMt=s(L0e);yxr=r(JMt,"albert"),JMt.forEach(t),Lxr=r(eRe," \u2014 "),PH=n(eRe,"A",{href:!0});var YMt=s(PH);xxr=r(YMt,"FlaxAlbertForTokenClassification"),YMt.forEach(t),kxr=r(eRe," (ALBERT model)"),eRe.forEach(t),Sxr=i(Oo),r4=n(Oo,"LI",{});var oRe=s(r4);x0e=n(oRe,"STRONG",{});var KMt=s(x0e);Rxr=r(KMt,"bert"),KMt.forEach(t),Bxr=r(oRe," \u2014 "),$H=n(oRe,"A",{href:!0});var ZMt=s($H);Pxr=r(ZMt,"FlaxBertForTokenClassification"),ZMt.forEach(t),$xr=r(oRe," (BERT model)"),oRe.forEach(t),Ixr=i(Oo),t4=n(Oo,"LI",{});var rRe=s(t4);k0e=n(rRe,"STRONG",{});var e4t=s(k0e);qxr=r(e4t,"big_bird"),e4t.forEach(t),Nxr=r(rRe," \u2014 "),IH=n(rRe,"A",{href:!0});var o4t=s(IH);jxr=r(o4t,"FlaxBigBirdForTokenClassification"),o4t.forEach(t),Dxr=r(rRe," (BigBird model)"),rRe.forEach(t),Gxr=i(Oo),a4=n(Oo,"LI",{});var tRe=s(a4);S0e=n(tRe,"STRONG",{});var r4t=s(S0e);Oxr=r(r4t,"distilbert"),r4t.forEach(t),Vxr=r(tRe," \u2014 "),qH=n(tRe,"A",{href:!0});var t4t=s(qH);Xxr=r(t4t,"FlaxDistilBertForTokenClassification"),t4t.forEach(t),zxr=r(tRe," (DistilBERT model)"),tRe.forEach(t),Qxr=i(Oo),n4=n(Oo,"LI",{});var aRe=s(n4);R0e=n(aRe,"STRONG",{});var a4t=s(R0e);Wxr=r(a4t,"electra"),a4t.forEach(t),Hxr=r(aRe," \u2014 "),NH=n(aRe,"A",{href:!0});var n4t=s(NH);Uxr=r(n4t,"FlaxElectraForTokenClassification"),n4t.forEach(t),Jxr=r(aRe," (ELECTRA model)"),aRe.forEach(t),Yxr=i(Oo),s4=n(Oo,"LI",{});var nRe=s(s4);B0e=n(nRe,"STRONG",{});var s4t=s(B0e);Kxr=r(s4t,"roberta"),s4t.forEach(t),Zxr=r(nRe," \u2014 "),jH=n(nRe,"A",{href:!0});var l4t=s(jH);ekr=r(l4t,"FlaxRobertaForTokenClassification"),l4t.forEach(t),okr=r(nRe," (RoBERTa model)"),nRe.forEach(t),rkr=i(Oo),l4=n(Oo,"LI",{});var sRe=s(l4);P0e=n(sRe,"STRONG",{});var i4t=s(P0e);tkr=r(i4t,"roformer"),i4t.forEach(t),akr=r(sRe," \u2014 "),DH=n(sRe,"A",{href:!0});var d4t=s(DH);nkr=r(d4t,"FlaxRoFormerForTokenClassification"),d4t.forEach(t),skr=r(sRe," (RoFormer model)"),sRe.forEach(t),lkr=i(Oo),i4=n(Oo,"LI",{});var lRe=s(i4);$0e=n(lRe,"STRONG",{});var c4t=s($0e);ikr=r(c4t,"xlm-roberta"),c4t.forEach(t),dkr=r(lRe," \u2014 "),GH=n(lRe,"A",{href:!0});var f4t=s(GH);ckr=r(f4t,"FlaxXLMRobertaForTokenClassification"),f4t.forEach(t),fkr=r(lRe," (XLM-RoBERTa model)"),lRe.forEach(t),Oo.forEach(t),mkr=i($a),I0e=n($a,"P",{});var m4t=s(I0e);gkr=r(m4t,"Examples:"),m4t.forEach(t),hkr=i($a),m(Vy.$$.fragment,$a),$a.forEach(t),yi.forEach(t),gPe=i(c),Cf=n(c,"H2",{class:!0});var CIe=s(Cf);d4=n(CIe,"A",{id:!0,class:!0,href:!0});var g4t=s(d4);q0e=n(g4t,"SPAN",{});var h4t=s(q0e);m(Xy.$$.fragment,h4t),h4t.forEach(t),g4t.forEach(t),pkr=i(CIe),N0e=n(CIe,"SPAN",{});var p4t=s(N0e);_kr=r(p4t,"FlaxAutoModelForMultipleChoice"),p4t.forEach(t),CIe.forEach(t),hPe=i(c),Dr=n(c,"DIV",{class:!0});var xi=s(Dr);m(zy.$$.fragment,xi),ukr=i(xi),wf=n(xi,"P",{});var YJ=s(wf);bkr=r(YJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),OH=n(YJ,"A",{href:!0});var _4t=s(OH);Fkr=r(_4t,"from_pretrained()"),_4t.forEach(t),vkr=r(YJ," class method or the "),VH=n(YJ,"A",{href:!0});var u4t=s(VH);Tkr=r(u4t,"from_config()"),u4t.forEach(t),Mkr=r(YJ,` class
method.`),YJ.forEach(t),Ekr=i(xi),Qy=n(xi,"P",{});var wIe=s(Qy);Ckr=r(wIe,"This class cannot be instantiated directly using "),j0e=n(wIe,"CODE",{});var b4t=s(j0e);wkr=r(b4t,"__init__()"),b4t.forEach(t),Akr=r(wIe," (throws an error)."),wIe.forEach(t),ykr=i(xi),Pt=n(xi,"DIV",{class:!0});var ki=s(Pt);m(Wy.$$.fragment,ki),Lkr=i(ki),D0e=n(ki,"P",{});var F4t=s(D0e);xkr=r(F4t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),F4t.forEach(t),kkr=i(ki),Af=n(ki,"P",{});var KJ=s(Af);Skr=r(KJ,`Note:
Loading a model from its configuration file does `),G0e=n(KJ,"STRONG",{});var v4t=s(G0e);Rkr=r(v4t,"not"),v4t.forEach(t),Bkr=r(KJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),XH=n(KJ,"A",{href:!0});var T4t=s(XH);Pkr=r(T4t,"from_pretrained()"),T4t.forEach(t),$kr=r(KJ," to load the model weights."),KJ.forEach(t),Ikr=i(ki),O0e=n(ki,"P",{});var M4t=s(O0e);qkr=r(M4t,"Examples:"),M4t.forEach(t),Nkr=i(ki),m(Hy.$$.fragment,ki),ki.forEach(t),jkr=i(xi),$o=n(xi,"DIV",{class:!0});var Ia=s($o);m(Uy.$$.fragment,Ia),Dkr=i(Ia),V0e=n(Ia,"P",{});var E4t=s(V0e);Gkr=r(E4t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),E4t.forEach(t),Okr=i(Ia),qn=n(Ia,"P",{});var vE=s(qn);Vkr=r(vE,"The model class to instantiate is selected based on the "),X0e=n(vE,"CODE",{});var C4t=s(X0e);Xkr=r(C4t,"model_type"),C4t.forEach(t),zkr=r(vE,` property of the config object (either
passed as an argument or loaded from `),z0e=n(vE,"CODE",{});var w4t=s(z0e);Qkr=r(w4t,"pretrained_model_name_or_path"),w4t.forEach(t),Wkr=r(vE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q0e=n(vE,"CODE",{});var A4t=s(Q0e);Hkr=r(A4t,"pretrained_model_name_or_path"),A4t.forEach(t),Ukr=r(vE,":"),vE.forEach(t),Jkr=i(Ia),Pe=n(Ia,"UL",{});var Vo=s(Pe);c4=n(Vo,"LI",{});var iRe=s(c4);W0e=n(iRe,"STRONG",{});var y4t=s(W0e);Ykr=r(y4t,"albert"),y4t.forEach(t),Kkr=r(iRe," \u2014 "),zH=n(iRe,"A",{href:!0});var L4t=s(zH);Zkr=r(L4t,"FlaxAlbertForMultipleChoice"),L4t.forEach(t),eSr=r(iRe," (ALBERT model)"),iRe.forEach(t),oSr=i(Vo),f4=n(Vo,"LI",{});var dRe=s(f4);H0e=n(dRe,"STRONG",{});var x4t=s(H0e);rSr=r(x4t,"bert"),x4t.forEach(t),tSr=r(dRe," \u2014 "),QH=n(dRe,"A",{href:!0});var k4t=s(QH);aSr=r(k4t,"FlaxBertForMultipleChoice"),k4t.forEach(t),nSr=r(dRe," (BERT model)"),dRe.forEach(t),sSr=i(Vo),m4=n(Vo,"LI",{});var cRe=s(m4);U0e=n(cRe,"STRONG",{});var S4t=s(U0e);lSr=r(S4t,"big_bird"),S4t.forEach(t),iSr=r(cRe," \u2014 "),WH=n(cRe,"A",{href:!0});var R4t=s(WH);dSr=r(R4t,"FlaxBigBirdForMultipleChoice"),R4t.forEach(t),cSr=r(cRe," (BigBird model)"),cRe.forEach(t),fSr=i(Vo),g4=n(Vo,"LI",{});var fRe=s(g4);J0e=n(fRe,"STRONG",{});var B4t=s(J0e);mSr=r(B4t,"distilbert"),B4t.forEach(t),gSr=r(fRe," \u2014 "),HH=n(fRe,"A",{href:!0});var P4t=s(HH);hSr=r(P4t,"FlaxDistilBertForMultipleChoice"),P4t.forEach(t),pSr=r(fRe," (DistilBERT model)"),fRe.forEach(t),_Sr=i(Vo),h4=n(Vo,"LI",{});var mRe=s(h4);Y0e=n(mRe,"STRONG",{});var $4t=s(Y0e);uSr=r($4t,"electra"),$4t.forEach(t),bSr=r(mRe," \u2014 "),UH=n(mRe,"A",{href:!0});var I4t=s(UH);FSr=r(I4t,"FlaxElectraForMultipleChoice"),I4t.forEach(t),vSr=r(mRe," (ELECTRA model)"),mRe.forEach(t),TSr=i(Vo),p4=n(Vo,"LI",{});var gRe=s(p4);K0e=n(gRe,"STRONG",{});var q4t=s(K0e);MSr=r(q4t,"roberta"),q4t.forEach(t),ESr=r(gRe," \u2014 "),JH=n(gRe,"A",{href:!0});var N4t=s(JH);CSr=r(N4t,"FlaxRobertaForMultipleChoice"),N4t.forEach(t),wSr=r(gRe," (RoBERTa model)"),gRe.forEach(t),ASr=i(Vo),_4=n(Vo,"LI",{});var hRe=s(_4);Z0e=n(hRe,"STRONG",{});var j4t=s(Z0e);ySr=r(j4t,"roformer"),j4t.forEach(t),LSr=r(hRe," \u2014 "),YH=n(hRe,"A",{href:!0});var D4t=s(YH);xSr=r(D4t,"FlaxRoFormerForMultipleChoice"),D4t.forEach(t),kSr=r(hRe," (RoFormer model)"),hRe.forEach(t),SSr=i(Vo),u4=n(Vo,"LI",{});var pRe=s(u4);eTe=n(pRe,"STRONG",{});var G4t=s(eTe);RSr=r(G4t,"xlm-roberta"),G4t.forEach(t),BSr=r(pRe," \u2014 "),KH=n(pRe,"A",{href:!0});var O4t=s(KH);PSr=r(O4t,"FlaxXLMRobertaForMultipleChoice"),O4t.forEach(t),$Sr=r(pRe," (XLM-RoBERTa model)"),pRe.forEach(t),Vo.forEach(t),ISr=i(Ia),oTe=n(Ia,"P",{});var V4t=s(oTe);qSr=r(V4t,"Examples:"),V4t.forEach(t),NSr=i(Ia),m(Jy.$$.fragment,Ia),Ia.forEach(t),xi.forEach(t),pPe=i(c),yf=n(c,"H2",{class:!0});var AIe=s(yf);b4=n(AIe,"A",{id:!0,class:!0,href:!0});var X4t=s(b4);rTe=n(X4t,"SPAN",{});var z4t=s(rTe);m(Yy.$$.fragment,z4t),z4t.forEach(t),X4t.forEach(t),jSr=i(AIe),tTe=n(AIe,"SPAN",{});var Q4t=s(tTe);DSr=r(Q4t,"FlaxAutoModelForNextSentencePrediction"),Q4t.forEach(t),AIe.forEach(t),_Pe=i(c),Gr=n(c,"DIV",{class:!0});var Si=s(Gr);m(Ky.$$.fragment,Si),GSr=i(Si),Lf=n(Si,"P",{});var ZJ=s(Lf);OSr=r(ZJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),ZH=n(ZJ,"A",{href:!0});var W4t=s(ZH);VSr=r(W4t,"from_pretrained()"),W4t.forEach(t),XSr=r(ZJ," class method or the "),eU=n(ZJ,"A",{href:!0});var H4t=s(eU);zSr=r(H4t,"from_config()"),H4t.forEach(t),QSr=r(ZJ,` class
method.`),ZJ.forEach(t),WSr=i(Si),Zy=n(Si,"P",{});var yIe=s(Zy);HSr=r(yIe,"This class cannot be instantiated directly using "),aTe=n(yIe,"CODE",{});var U4t=s(aTe);USr=r(U4t,"__init__()"),U4t.forEach(t),JSr=r(yIe," (throws an error)."),yIe.forEach(t),YSr=i(Si),$t=n(Si,"DIV",{class:!0});var Ri=s($t);m(eL.$$.fragment,Ri),KSr=i(Ri),nTe=n(Ri,"P",{});var J4t=s(nTe);ZSr=r(J4t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),J4t.forEach(t),eRr=i(Ri),xf=n(Ri,"P",{});var eY=s(xf);oRr=r(eY,`Note:
Loading a model from its configuration file does `),sTe=n(eY,"STRONG",{});var Y4t=s(sTe);rRr=r(Y4t,"not"),Y4t.forEach(t),tRr=r(eY,` load the model weights. It only affects the
model\u2019s configuration. Use `),oU=n(eY,"A",{href:!0});var K4t=s(oU);aRr=r(K4t,"from_pretrained()"),K4t.forEach(t),nRr=r(eY," to load the model weights."),eY.forEach(t),sRr=i(Ri),lTe=n(Ri,"P",{});var Z4t=s(lTe);lRr=r(Z4t,"Examples:"),Z4t.forEach(t),iRr=i(Ri),m(oL.$$.fragment,Ri),Ri.forEach(t),dRr=i(Si),Io=n(Si,"DIV",{class:!0});var qa=s(Io);m(rL.$$.fragment,qa),cRr=i(qa),iTe=n(qa,"P",{});var eEt=s(iTe);fRr=r(eEt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),eEt.forEach(t),mRr=i(qa),Nn=n(qa,"P",{});var TE=s(Nn);gRr=r(TE,"The model class to instantiate is selected based on the "),dTe=n(TE,"CODE",{});var oEt=s(dTe);hRr=r(oEt,"model_type"),oEt.forEach(t),pRr=r(TE,` property of the config object (either
passed as an argument or loaded from `),cTe=n(TE,"CODE",{});var rEt=s(cTe);_Rr=r(rEt,"pretrained_model_name_or_path"),rEt.forEach(t),uRr=r(TE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fTe=n(TE,"CODE",{});var tEt=s(fTe);bRr=r(tEt,"pretrained_model_name_or_path"),tEt.forEach(t),FRr=r(TE,":"),TE.forEach(t),vRr=i(qa),mTe=n(qa,"UL",{});var aEt=s(mTe);F4=n(aEt,"LI",{});var _Re=s(F4);gTe=n(_Re,"STRONG",{});var nEt=s(gTe);TRr=r(nEt,"bert"),nEt.forEach(t),MRr=r(_Re," \u2014 "),rU=n(_Re,"A",{href:!0});var sEt=s(rU);ERr=r(sEt,"FlaxBertForNextSentencePrediction"),sEt.forEach(t),CRr=r(_Re," (BERT model)"),_Re.forEach(t),aEt.forEach(t),wRr=i(qa),hTe=n(qa,"P",{});var lEt=s(hTe);ARr=r(lEt,"Examples:"),lEt.forEach(t),yRr=i(qa),m(tL.$$.fragment,qa),qa.forEach(t),Si.forEach(t),uPe=i(c),kf=n(c,"H2",{class:!0});var LIe=s(kf);v4=n(LIe,"A",{id:!0,class:!0,href:!0});var iEt=s(v4);pTe=n(iEt,"SPAN",{});var dEt=s(pTe);m(aL.$$.fragment,dEt),dEt.forEach(t),iEt.forEach(t),LRr=i(LIe),_Te=n(LIe,"SPAN",{});var cEt=s(_Te);xRr=r(cEt,"FlaxAutoModelForImageClassification"),cEt.forEach(t),LIe.forEach(t),bPe=i(c),Or=n(c,"DIV",{class:!0});var Bi=s(Or);m(nL.$$.fragment,Bi),kRr=i(Bi),Sf=n(Bi,"P",{});var oY=s(Sf);SRr=r(oY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),tU=n(oY,"A",{href:!0});var fEt=s(tU);RRr=r(fEt,"from_pretrained()"),fEt.forEach(t),BRr=r(oY," class method or the "),aU=n(oY,"A",{href:!0});var mEt=s(aU);PRr=r(mEt,"from_config()"),mEt.forEach(t),$Rr=r(oY,` class
method.`),oY.forEach(t),IRr=i(Bi),sL=n(Bi,"P",{});var xIe=s(sL);qRr=r(xIe,"This class cannot be instantiated directly using "),uTe=n(xIe,"CODE",{});var gEt=s(uTe);NRr=r(gEt,"__init__()"),gEt.forEach(t),jRr=r(xIe," (throws an error)."),xIe.forEach(t),DRr=i(Bi),It=n(Bi,"DIV",{class:!0});var Pi=s(It);m(lL.$$.fragment,Pi),GRr=i(Pi),bTe=n(Pi,"P",{});var hEt=s(bTe);ORr=r(hEt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),hEt.forEach(t),VRr=i(Pi),Rf=n(Pi,"P",{});var rY=s(Rf);XRr=r(rY,`Note:
Loading a model from its configuration file does `),FTe=n(rY,"STRONG",{});var pEt=s(FTe);zRr=r(pEt,"not"),pEt.forEach(t),QRr=r(rY,` load the model weights. It only affects the
model\u2019s configuration. Use `),nU=n(rY,"A",{href:!0});var _Et=s(nU);WRr=r(_Et,"from_pretrained()"),_Et.forEach(t),HRr=r(rY," to load the model weights."),rY.forEach(t),URr=i(Pi),vTe=n(Pi,"P",{});var uEt=s(vTe);JRr=r(uEt,"Examples:"),uEt.forEach(t),YRr=i(Pi),m(iL.$$.fragment,Pi),Pi.forEach(t),KRr=i(Bi),qo=n(Bi,"DIV",{class:!0});var Na=s(qo);m(dL.$$.fragment,Na),ZRr=i(Na),TTe=n(Na,"P",{});var bEt=s(TTe);eBr=r(bEt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),bEt.forEach(t),oBr=i(Na),jn=n(Na,"P",{});var ME=s(jn);rBr=r(ME,"The model class to instantiate is selected based on the "),MTe=n(ME,"CODE",{});var FEt=s(MTe);tBr=r(FEt,"model_type"),FEt.forEach(t),aBr=r(ME,` property of the config object (either
passed as an argument or loaded from `),ETe=n(ME,"CODE",{});var vEt=s(ETe);nBr=r(vEt,"pretrained_model_name_or_path"),vEt.forEach(t),sBr=r(ME,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CTe=n(ME,"CODE",{});var TEt=s(CTe);lBr=r(TEt,"pretrained_model_name_or_path"),TEt.forEach(t),iBr=r(ME,":"),ME.forEach(t),dBr=i(Na),cL=n(Na,"UL",{});var kIe=s(cL);T4=n(kIe,"LI",{});var uRe=s(T4);wTe=n(uRe,"STRONG",{});var MEt=s(wTe);cBr=r(MEt,"beit"),MEt.forEach(t),fBr=r(uRe," \u2014 "),sU=n(uRe,"A",{href:!0});var EEt=s(sU);mBr=r(EEt,"FlaxBeitForImageClassification"),EEt.forEach(t),gBr=r(uRe," (BEiT model)"),uRe.forEach(t),hBr=i(kIe),M4=n(kIe,"LI",{});var bRe=s(M4);ATe=n(bRe,"STRONG",{});var CEt=s(ATe);pBr=r(CEt,"vit"),CEt.forEach(t),_Br=r(bRe," \u2014 "),lU=n(bRe,"A",{href:!0});var wEt=s(lU);uBr=r(wEt,"FlaxViTForImageClassification"),wEt.forEach(t),bBr=r(bRe," (ViT model)"),bRe.forEach(t),kIe.forEach(t),FBr=i(Na),yTe=n(Na,"P",{});var AEt=s(yTe);vBr=r(AEt,"Examples:"),AEt.forEach(t),TBr=i(Na),m(fL.$$.fragment,Na),Na.forEach(t),Bi.forEach(t),FPe=i(c),Bf=n(c,"H2",{class:!0});var SIe=s(Bf);E4=n(SIe,"A",{id:!0,class:!0,href:!0});var yEt=s(E4);LTe=n(yEt,"SPAN",{});var LEt=s(LTe);m(mL.$$.fragment,LEt),LEt.forEach(t),yEt.forEach(t),MBr=i(SIe),xTe=n(SIe,"SPAN",{});var xEt=s(xTe);EBr=r(xEt,"FlaxAutoModelForVision2Seq"),xEt.forEach(t),SIe.forEach(t),vPe=i(c),Vr=n(c,"DIV",{class:!0});var $i=s(Vr);m(gL.$$.fragment,$i),CBr=i($i),Pf=n($i,"P",{});var tY=s(Pf);wBr=r(tY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),iU=n(tY,"A",{href:!0});var kEt=s(iU);ABr=r(kEt,"from_pretrained()"),kEt.forEach(t),yBr=r(tY," class method or the "),dU=n(tY,"A",{href:!0});var SEt=s(dU);LBr=r(SEt,"from_config()"),SEt.forEach(t),xBr=r(tY,` class
method.`),tY.forEach(t),kBr=i($i),hL=n($i,"P",{});var RIe=s(hL);SBr=r(RIe,"This class cannot be instantiated directly using "),kTe=n(RIe,"CODE",{});var REt=s(kTe);RBr=r(REt,"__init__()"),REt.forEach(t),BBr=r(RIe," (throws an error)."),RIe.forEach(t),PBr=i($i),qt=n($i,"DIV",{class:!0});var Ii=s(qt);m(pL.$$.fragment,Ii),$Br=i(Ii),STe=n(Ii,"P",{});var BEt=s(STe);IBr=r(BEt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),BEt.forEach(t),qBr=i(Ii),$f=n(Ii,"P",{});var aY=s($f);NBr=r(aY,`Note:
Loading a model from its configuration file does `),RTe=n(aY,"STRONG",{});var PEt=s(RTe);jBr=r(PEt,"not"),PEt.forEach(t),DBr=r(aY,` load the model weights. It only affects the
model\u2019s configuration. Use `),cU=n(aY,"A",{href:!0});var $Et=s(cU);GBr=r($Et,"from_pretrained()"),$Et.forEach(t),OBr=r(aY," to load the model weights."),aY.forEach(t),VBr=i(Ii),BTe=n(Ii,"P",{});var IEt=s(BTe);XBr=r(IEt,"Examples:"),IEt.forEach(t),zBr=i(Ii),m(_L.$$.fragment,Ii),Ii.forEach(t),QBr=i($i),No=n($i,"DIV",{class:!0});var ja=s(No);m(uL.$$.fragment,ja),WBr=i(ja),PTe=n(ja,"P",{});var qEt=s(PTe);HBr=r(qEt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),qEt.forEach(t),UBr=i(ja),Dn=n(ja,"P",{});var EE=s(Dn);JBr=r(EE,"The model class to instantiate is selected based on the "),$Te=n(EE,"CODE",{});var NEt=s($Te);YBr=r(NEt,"model_type"),NEt.forEach(t),KBr=r(EE,` property of the config object (either
passed as an argument or loaded from `),ITe=n(EE,"CODE",{});var jEt=s(ITe);ZBr=r(jEt,"pretrained_model_name_or_path"),jEt.forEach(t),ePr=r(EE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qTe=n(EE,"CODE",{});var DEt=s(qTe);oPr=r(DEt,"pretrained_model_name_or_path"),DEt.forEach(t),rPr=r(EE,":"),EE.forEach(t),tPr=i(ja),NTe=n(ja,"UL",{});var GEt=s(NTe);C4=n(GEt,"LI",{});var FRe=s(C4);jTe=n(FRe,"STRONG",{});var OEt=s(jTe);aPr=r(OEt,"vision-encoder-decoder"),OEt.forEach(t),nPr=r(FRe," \u2014 "),fU=n(FRe,"A",{href:!0});var VEt=s(fU);sPr=r(VEt,"FlaxVisionEncoderDecoderModel"),VEt.forEach(t),lPr=r(FRe," (Vision Encoder decoder model)"),FRe.forEach(t),GEt.forEach(t),iPr=i(ja),DTe=n(ja,"P",{});var XEt=s(DTe);dPr=r(XEt,"Examples:"),XEt.forEach(t),cPr=i(ja),m(bL.$$.fragment,ja),ja.forEach(t),$i.forEach(t),this.h()},h(){d(Z,"name","hf:doc:metadata"),d(Z,"content",JSON.stringify(eCt)),d(Ce,"id","auto-classes"),d(Ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ce,"href","#auto-classes"),d(de,"class","relative group"),d(Gn,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.AutoConfig"),d(Vn,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.AutoModel"),d(Xn,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.AutoTokenizer"),d(Vi,"href","/docs/transformers/pr_16780/en/model_doc/bert#transformers.BertModel"),d(Of,"id","extending-the-auto-classes"),d(Of,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Of,"href","#extending-the-auto-classes"),d(Xi,"class","relative group"),d(Xf,"id","transformers.AutoConfig"),d(Xf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Xf,"href","#transformers.AutoConfig"),d(zi,"class","relative group"),d(E9,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d(C9,"href","/docs/transformers/pr_16780/en/model_doc/albert#transformers.AlbertConfig"),d(w9,"href","/docs/transformers/pr_16780/en/model_doc/bart#transformers.BartConfig"),d(A9,"href","/docs/transformers/pr_16780/en/model_doc/beit#transformers.BeitConfig"),d(y9,"href","/docs/transformers/pr_16780/en/model_doc/bert#transformers.BertConfig"),d(L9,"href","/docs/transformers/pr_16780/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d(x9,"href","/docs/transformers/pr_16780/en/model_doc/big_bird#transformers.BigBirdConfig"),d(k9,"href","/docs/transformers/pr_16780/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d(S9,"href","/docs/transformers/pr_16780/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d(R9,"href","/docs/transformers/pr_16780/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d(B9,"href","/docs/transformers/pr_16780/en/model_doc/camembert#transformers.CamembertConfig"),d(P9,"href","/docs/transformers/pr_16780/en/model_doc/canine#transformers.CanineConfig"),d($9,"href","/docs/transformers/pr_16780/en/model_doc/clip#transformers.CLIPConfig"),d(I9,"href","/docs/transformers/pr_16780/en/model_doc/convbert#transformers.ConvBertConfig"),d(q9,"href","/docs/transformers/pr_16780/en/model_doc/convnext#transformers.ConvNextConfig"),d(N9,"href","/docs/transformers/pr_16780/en/model_doc/ctrl#transformers.CTRLConfig"),d(j9,"href","/docs/transformers/pr_16780/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(D9,"href","/docs/transformers/pr_16780/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d(G9,"href","/docs/transformers/pr_16780/en/model_doc/deberta#transformers.DebertaConfig"),d(O9,"href","/docs/transformers/pr_16780/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d(V9,"href","/docs/transformers/pr_16780/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),d(X9,"href","/docs/transformers/pr_16780/en/model_doc/deit#transformers.DeiTConfig"),d(z9,"href","/docs/transformers/pr_16780/en/model_doc/detr#transformers.DetrConfig"),d(Q9,"href","/docs/transformers/pr_16780/en/model_doc/distilbert#transformers.DistilBertConfig"),d(W9,"href","/docs/transformers/pr_16780/en/model_doc/dpr#transformers.DPRConfig"),d(H9,"href","/docs/transformers/pr_16780/en/model_doc/dpt#transformers.DPTConfig"),d(U9,"href","/docs/transformers/pr_16780/en/model_doc/electra#transformers.ElectraConfig"),d(J9,"href","/docs/transformers/pr_16780/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d(Y9,"href","/docs/transformers/pr_16780/en/model_doc/flaubert#transformers.FlaubertConfig"),d(K9,"href","/docs/transformers/pr_16780/en/model_doc/fnet#transformers.FNetConfig"),d(Z9,"href","/docs/transformers/pr_16780/en/model_doc/fsmt#transformers.FSMTConfig"),d(ex,"href","/docs/transformers/pr_16780/en/model_doc/funnel#transformers.FunnelConfig"),d(ox,"href","/docs/transformers/pr_16780/en/model_doc/glpn#transformers.GLPNConfig"),d(rx,"href","/docs/transformers/pr_16780/en/model_doc/gpt2#transformers.GPT2Config"),d(tx,"href","/docs/transformers/pr_16780/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d(ax,"href","/docs/transformers/pr_16780/en/model_doc/gptj#transformers.GPTJConfig"),d(nx,"href","/docs/transformers/pr_16780/en/model_doc/hubert#transformers.HubertConfig"),d(sx,"href","/docs/transformers/pr_16780/en/model_doc/ibert#transformers.IBertConfig"),d(lx,"href","/docs/transformers/pr_16780/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(ix,"href","/docs/transformers/pr_16780/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(dx,"href","/docs/transformers/pr_16780/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(cx,"href","/docs/transformers/pr_16780/en/model_doc/led#transformers.LEDConfig"),d(fx,"href","/docs/transformers/pr_16780/en/model_doc/longformer#transformers.LongformerConfig"),d(mx,"href","/docs/transformers/pr_16780/en/model_doc/luke#transformers.LukeConfig"),d(gx,"href","/docs/transformers/pr_16780/en/model_doc/lxmert#transformers.LxmertConfig"),d(hx,"href","/docs/transformers/pr_16780/en/model_doc/m2m_100#transformers.M2M100Config"),d(px,"href","/docs/transformers/pr_16780/en/model_doc/marian#transformers.MarianConfig"),d(_x,"href","/docs/transformers/pr_16780/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(ux,"href","/docs/transformers/pr_16780/en/model_doc/mbart#transformers.MBartConfig"),d(bx,"href","/docs/transformers/pr_16780/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(Fx,"href","/docs/transformers/pr_16780/en/model_doc/mobilebert#transformers.MobileBertConfig"),d(vx,"href","/docs/transformers/pr_16780/en/model_doc/mpnet#transformers.MPNetConfig"),d(Tx,"href","/docs/transformers/pr_16780/en/model_doc/mt5#transformers.MT5Config"),d(Mx,"href","/docs/transformers/pr_16780/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(Ex,"href","/docs/transformers/pr_16780/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(Cx,"href","/docs/transformers/pr_16780/en/model_doc/pegasus#transformers.PegasusConfig"),d(wx,"href","/docs/transformers/pr_16780/en/model_doc/perceiver#transformers.PerceiverConfig"),d(Ax,"href","/docs/transformers/pr_16780/en/model_doc/plbart#transformers.PLBartConfig"),d(yx,"href","/docs/transformers/pr_16780/en/model_doc/poolformer#transformers.PoolFormerConfig"),d(Lx,"href","/docs/transformers/pr_16780/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d(xx,"href","/docs/transformers/pr_16780/en/model_doc/qdqbert#transformers.QDQBertConfig"),d(kx,"href","/docs/transformers/pr_16780/en/model_doc/rag#transformers.RagConfig"),d(Sx,"href","/docs/transformers/pr_16780/en/model_doc/realm#transformers.RealmConfig"),d(Rx,"href","/docs/transformers/pr_16780/en/model_doc/reformer#transformers.ReformerConfig"),d(Bx,"href","/docs/transformers/pr_16780/en/model_doc/regnet#transformers.RegNetConfig"),d(Px,"href","/docs/transformers/pr_16780/en/model_doc/rembert#transformers.RemBertConfig"),d($x,"href","/docs/transformers/pr_16780/en/model_doc/resnet#transformers.ResNetConfig"),d(Ix,"href","/docs/transformers/pr_16780/en/model_doc/retribert#transformers.RetriBertConfig"),d(qx,"href","/docs/transformers/pr_16780/en/model_doc/roberta#transformers.RobertaConfig"),d(Nx,"href","/docs/transformers/pr_16780/en/model_doc/roformer#transformers.RoFormerConfig"),d(jx,"href","/docs/transformers/pr_16780/en/model_doc/segformer#transformers.SegformerConfig"),d(Dx,"href","/docs/transformers/pr_16780/en/model_doc/sew#transformers.SEWConfig"),d(Gx,"href","/docs/transformers/pr_16780/en/model_doc/sew-d#transformers.SEWDConfig"),d(Ox,"href","/docs/transformers/pr_16780/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d(Vx,"href","/docs/transformers/pr_16780/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d(Xx,"href","/docs/transformers/pr_16780/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d(zx,"href","/docs/transformers/pr_16780/en/model_doc/splinter#transformers.SplinterConfig"),d(Qx,"href","/docs/transformers/pr_16780/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d(Wx,"href","/docs/transformers/pr_16780/en/model_doc/swin#transformers.SwinConfig"),d(Hx,"href","/docs/transformers/pr_16780/en/model_doc/t5#transformers.T5Config"),d(Ux,"href","/docs/transformers/pr_16780/en/model_doc/tapas#transformers.TapasConfig"),d(Jx,"href","/docs/transformers/pr_16780/en/model_doc/bart#transformers.BartConfig"),d(Yx,"href","/docs/transformers/pr_16780/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d(Kx,"href","/docs/transformers/pr_16780/en/model_doc/trocr#transformers.TrOCRConfig"),d(Zx,"href","/docs/transformers/pr_16780/en/model_doc/unispeech#transformers.UniSpeechConfig"),d(ek,"href","/docs/transformers/pr_16780/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(ok,"href","/docs/transformers/pr_16780/en/model_doc/van#transformers.VanConfig"),d(rk,"href","/docs/transformers/pr_16780/en/model_doc/vilt#transformers.ViltConfig"),d(tk,"href","/docs/transformers/pr_16780/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d(ak,"href","/docs/transformers/pr_16780/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d(nk,"href","/docs/transformers/pr_16780/en/model_doc/visual_bert#transformers.VisualBertConfig"),d(sk,"href","/docs/transformers/pr_16780/en/model_doc/vit#transformers.ViTConfig"),d(lk,"href","/docs/transformers/pr_16780/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(ik,"href","/docs/transformers/pr_16780/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d(dk,"href","/docs/transformers/pr_16780/en/model_doc/wavlm#transformers.WavLMConfig"),d(ck,"href","/docs/transformers/pr_16780/en/model_doc/xglm#transformers.XGLMConfig"),d(fk,"href","/docs/transformers/pr_16780/en/model_doc/xlm#transformers.XLMConfig"),d(mk,"href","/docs/transformers/pr_16780/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(gk,"href","/docs/transformers/pr_16780/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d(hk,"href","/docs/transformers/pr_16780/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d(pk,"href","/docs/transformers/pr_16780/en/model_doc/xlnet#transformers.XLNetConfig"),d(_k,"href","/docs/transformers/pr_16780/en/model_doc/yoso#transformers.YosoConfig"),d(mo,"class","docstring"),d(Ng,"class","docstring"),d(Qo,"class","docstring"),d(jg,"id","transformers.AutoTokenizer"),d(jg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(jg,"href","#transformers.AutoTokenizer"),d(Wi,"class","relative group"),d(uk,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(bk,"href","/docs/transformers/pr_16780/en/model_doc/albert#transformers.AlbertTokenizer"),d(Fk,"href","/docs/transformers/pr_16780/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(vk,"href","/docs/transformers/pr_16780/en/model_doc/bart#transformers.BartTokenizer"),d(Tk,"href","/docs/transformers/pr_16780/en/model_doc/bart#transformers.BartTokenizerFast"),d(Mk,"href","/docs/transformers/pr_16780/en/model_doc/barthez#transformers.BarthezTokenizer"),d(Ek,"href","/docs/transformers/pr_16780/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(Ck,"href","/docs/transformers/pr_16780/en/model_doc/bartpho#transformers.BartphoTokenizer"),d(wk,"href","/docs/transformers/pr_16780/en/model_doc/bert#transformers.BertTokenizer"),d(Ak,"href","/docs/transformers/pr_16780/en/model_doc/bert#transformers.BertTokenizerFast"),d(yk,"href","/docs/transformers/pr_16780/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d(Lk,"href","/docs/transformers/pr_16780/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d(xk,"href","/docs/transformers/pr_16780/en/model_doc/bertweet#transformers.BertweetTokenizer"),d(kk,"href","/docs/transformers/pr_16780/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d(Sk,"href","/docs/transformers/pr_16780/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d(Rk,"href","/docs/transformers/pr_16780/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(Bk,"href","/docs/transformers/pr_16780/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(Pk,"href","/docs/transformers/pr_16780/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d($k,"href","/docs/transformers/pr_16780/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d(Ik,"href","/docs/transformers/pr_16780/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d(qk,"href","/docs/transformers/pr_16780/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(Nk,"href","/docs/transformers/pr_16780/en/model_doc/camembert#transformers.CamembertTokenizer"),d(jk,"href","/docs/transformers/pr_16780/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(Dk,"href","/docs/transformers/pr_16780/en/model_doc/canine#transformers.CanineTokenizer"),d(Gk,"href","/docs/transformers/pr_16780/en/model_doc/clip#transformers.CLIPTokenizer"),d(Ok,"href","/docs/transformers/pr_16780/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(Vk,"href","/docs/transformers/pr_16780/en/model_doc/convbert#transformers.ConvBertTokenizer"),d(Xk,"href","/docs/transformers/pr_16780/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d(zk,"href","/docs/transformers/pr_16780/en/model_doc/cpm#transformers.CpmTokenizer"),d(Qk,"href","/docs/transformers/pr_16780/en/model_doc/ctrl#transformers.CTRLTokenizer"),d(Wk,"href","/docs/transformers/pr_16780/en/model_doc/deberta#transformers.DebertaTokenizer"),d(Hk,"href","/docs/transformers/pr_16780/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d(Uk,"href","/docs/transformers/pr_16780/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d(Jk,"href","/docs/transformers/pr_16780/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d(Yk,"href","/docs/transformers/pr_16780/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d(Kk,"href","/docs/transformers/pr_16780/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d(Zk,"href","/docs/transformers/pr_16780/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(eS,"href","/docs/transformers/pr_16780/en/model_doc/electra#transformers.ElectraTokenizer"),d(oS,"href","/docs/transformers/pr_16780/en/model_doc/electra#transformers.ElectraTokenizerFast"),d(rS,"href","/docs/transformers/pr_16780/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d(tS,"href","/docs/transformers/pr_16780/en/model_doc/fnet#transformers.FNetTokenizer"),d(aS,"href","/docs/transformers/pr_16780/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(nS,"href","/docs/transformers/pr_16780/en/model_doc/fsmt#transformers.FSMTTokenizer"),d(sS,"href","/docs/transformers/pr_16780/en/model_doc/funnel#transformers.FunnelTokenizer"),d(lS,"href","/docs/transformers/pr_16780/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(iS,"href","/docs/transformers/pr_16780/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(dS,"href","/docs/transformers/pr_16780/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(cS,"href","/docs/transformers/pr_16780/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(fS,"href","/docs/transformers/pr_16780/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(mS,"href","/docs/transformers/pr_16780/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(gS,"href","/docs/transformers/pr_16780/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(hS,"href","/docs/transformers/pr_16780/en/model_doc/herbert#transformers.HerbertTokenizer"),d(pS,"href","/docs/transformers/pr_16780/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d(_S,"href","/docs/transformers/pr_16780/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(uS,"href","/docs/transformers/pr_16780/en/model_doc/roberta#transformers.RobertaTokenizer"),d(bS,"href","/docs/transformers/pr_16780/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(FS,"href","/docs/transformers/pr_16780/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(vS,"href","/docs/transformers/pr_16780/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d(TS,"href","/docs/transformers/pr_16780/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(MS,"href","/docs/transformers/pr_16780/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d(ES,"href","/docs/transformers/pr_16780/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(CS,"href","/docs/transformers/pr_16780/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d(wS,"href","/docs/transformers/pr_16780/en/model_doc/led#transformers.LEDTokenizer"),d(AS,"href","/docs/transformers/pr_16780/en/model_doc/led#transformers.LEDTokenizerFast"),d(yS,"href","/docs/transformers/pr_16780/en/model_doc/longformer#transformers.LongformerTokenizer"),d(LS,"href","/docs/transformers/pr_16780/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d(xS,"href","/docs/transformers/pr_16780/en/model_doc/luke#transformers.LukeTokenizer"),d(kS,"href","/docs/transformers/pr_16780/en/model_doc/lxmert#transformers.LxmertTokenizer"),d(SS,"href","/docs/transformers/pr_16780/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(RS,"href","/docs/transformers/pr_16780/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d(BS,"href","/docs/transformers/pr_16780/en/model_doc/marian#transformers.MarianTokenizer"),d(PS,"href","/docs/transformers/pr_16780/en/model_doc/mbart#transformers.MBartTokenizer"),d($S,"href","/docs/transformers/pr_16780/en/model_doc/mbart#transformers.MBartTokenizerFast"),d(IS,"href","/docs/transformers/pr_16780/en/model_doc/mbart#transformers.MBart50Tokenizer"),d(qS,"href","/docs/transformers/pr_16780/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(NS,"href","/docs/transformers/pr_16780/en/model_doc/mluke#transformers.MLukeTokenizer"),d(jS,"href","/docs/transformers/pr_16780/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(DS,"href","/docs/transformers/pr_16780/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(GS,"href","/docs/transformers/pr_16780/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(OS,"href","/docs/transformers/pr_16780/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d(VS,"href","/docs/transformers/pr_16780/en/model_doc/mt5#transformers.T5Tokenizer"),d(XS,"href","/docs/transformers/pr_16780/en/model_doc/mt5#transformers.T5TokenizerFast"),d(zS,"href","/docs/transformers/pr_16780/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d(QS,"href","/docs/transformers/pr_16780/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d(WS,"href","/docs/transformers/pr_16780/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(HS,"href","/docs/transformers/pr_16780/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(US,"href","/docs/transformers/pr_16780/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d(JS,"href","/docs/transformers/pr_16780/en/model_doc/phobert#transformers.PhobertTokenizer"),d(YS,"href","/docs/transformers/pr_16780/en/model_doc/plbart#transformers.PLBartTokenizer"),d(KS,"href","/docs/transformers/pr_16780/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d(ZS,"href","/docs/transformers/pr_16780/en/model_doc/bert#transformers.BertTokenizer"),d(eR,"href","/docs/transformers/pr_16780/en/model_doc/bert#transformers.BertTokenizerFast"),d(oR,"href","/docs/transformers/pr_16780/en/model_doc/rag#transformers.RagTokenizer"),d(rR,"href","/docs/transformers/pr_16780/en/model_doc/realm#transformers.RealmTokenizer"),d(tR,"href","/docs/transformers/pr_16780/en/model_doc/realm#transformers.RealmTokenizerFast"),d(aR,"href","/docs/transformers/pr_16780/en/model_doc/reformer#transformers.ReformerTokenizer"),d(nR,"href","/docs/transformers/pr_16780/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d(sR,"href","/docs/transformers/pr_16780/en/model_doc/rembert#transformers.RemBertTokenizer"),d(lR,"href","/docs/transformers/pr_16780/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d(iR,"href","/docs/transformers/pr_16780/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(dR,"href","/docs/transformers/pr_16780/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d(cR,"href","/docs/transformers/pr_16780/en/model_doc/roberta#transformers.RobertaTokenizer"),d(fR,"href","/docs/transformers/pr_16780/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(mR,"href","/docs/transformers/pr_16780/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(gR,"href","/docs/transformers/pr_16780/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(hR,"href","/docs/transformers/pr_16780/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(pR,"href","/docs/transformers/pr_16780/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d(_R,"href","/docs/transformers/pr_16780/en/model_doc/splinter#transformers.SplinterTokenizer"),d(uR,"href","/docs/transformers/pr_16780/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d(bR,"href","/docs/transformers/pr_16780/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d(FR,"href","/docs/transformers/pr_16780/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(vR,"href","/docs/transformers/pr_16780/en/model_doc/mt5#transformers.T5Tokenizer"),d(TR,"href","/docs/transformers/pr_16780/en/model_doc/mt5#transformers.T5TokenizerFast"),d(MR,"href","/docs/transformers/pr_16780/en/model_doc/tapas#transformers.TapasTokenizer"),d(ER,"href","/docs/transformers/pr_16780/en/model_doc/tapex#transformers.TapexTokenizer"),d(CR,"href","/docs/transformers/pr_16780/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(wR,"href","/docs/transformers/pr_16780/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(AR,"href","/docs/transformers/pr_16780/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d(yR,"href","/docs/transformers/pr_16780/en/model_doc/xglm#transformers.XGLMTokenizer"),d(LR,"href","/docs/transformers/pr_16780/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(xR,"href","/docs/transformers/pr_16780/en/model_doc/xlm#transformers.XLMTokenizer"),d(kR,"href","/docs/transformers/pr_16780/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d(SR,"href","/docs/transformers/pr_16780/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(RR,"href","/docs/transformers/pr_16780/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(BR,"href","/docs/transformers/pr_16780/en/model_doc/xlnet#transformers.XLNetTokenizer"),d(PR,"href","/docs/transformers/pr_16780/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(go,"class","docstring"),d(_h,"class","docstring"),d(Wo,"class","docstring"),d(uh,"id","transformers.AutoFeatureExtractor"),d(uh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(uh,"href","#transformers.AutoFeatureExtractor"),d(Hi,"class","relative group"),d($R,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(IR,"href","/docs/transformers/pr_16780/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(qR,"href","/docs/transformers/pr_16780/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(NR,"href","/docs/transformers/pr_16780/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(jR,"href","/docs/transformers/pr_16780/en/model_doc/deit#transformers.DeiTFeatureExtractor"),d(DR,"href","/docs/transformers/pr_16780/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(GR,"href","/docs/transformers/pr_16780/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(OR,"href","/docs/transformers/pr_16780/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),d(VR,"href","/docs/transformers/pr_16780/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),d(XR,"href","/docs/transformers/pr_16780/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),d(zR,"href","/docs/transformers/pr_16780/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),d(QR,"href","/docs/transformers/pr_16780/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(WR,"href","/docs/transformers/pr_16780/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(HR,"href","/docs/transformers/pr_16780/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),d(UR,"href","/docs/transformers/pr_16780/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d(JR,"href","/docs/transformers/pr_16780/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(YR,"href","/docs/transformers/pr_16780/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(KR,"href","/docs/transformers/pr_16780/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(ZR,"href","/docs/transformers/pr_16780/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(eB,"href","/docs/transformers/pr_16780/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d($e,"class","docstring"),d(Nh,"class","docstring"),d(Ho,"class","docstring"),d(jh,"id","transformers.AutoProcessor"),d(jh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(jh,"href","#transformers.AutoProcessor"),d(Ui,"class","relative group"),d(oB,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(rB,"href","/docs/transformers/pr_16780/en/model_doc/clip#transformers.CLIPProcessor"),d(tB,"href","/docs/transformers/pr_16780/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d(aB,"href","/docs/transformers/pr_16780/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(nB,"href","/docs/transformers/pr_16780/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d(sB,"href","/docs/transformers/pr_16780/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d(lB,"href","/docs/transformers/pr_16780/en/model_doc/trocr#transformers.TrOCRProcessor"),d(iB,"href","/docs/transformers/pr_16780/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(dB,"href","/docs/transformers/pr_16780/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(Ie,"class","docstring"),d(Uh,"class","docstring"),d(Uo,"class","docstring"),d(Jh,"id","transformers.AutoModel"),d(Jh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Jh,"href","#transformers.AutoModel"),d(Yi,"class","relative group"),d(cB,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(fB,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(mB,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Xr,"class","docstring"),d(gB,"href","/docs/transformers/pr_16780/en/model_doc/albert#transformers.AlbertModel"),d(hB,"href","/docs/transformers/pr_16780/en/model_doc/bart#transformers.BartModel"),d(pB,"href","/docs/transformers/pr_16780/en/model_doc/beit#transformers.BeitModel"),d(_B,"href","/docs/transformers/pr_16780/en/model_doc/bert#transformers.BertModel"),d(uB,"href","/docs/transformers/pr_16780/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d(bB,"href","/docs/transformers/pr_16780/en/model_doc/big_bird#transformers.BigBirdModel"),d(FB,"href","/docs/transformers/pr_16780/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(vB,"href","/docs/transformers/pr_16780/en/model_doc/blenderbot#transformers.BlenderbotModel"),d(TB,"href","/docs/transformers/pr_16780/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d(MB,"href","/docs/transformers/pr_16780/en/model_doc/camembert#transformers.CamembertModel"),d(EB,"href","/docs/transformers/pr_16780/en/model_doc/canine#transformers.CanineModel"),d(CB,"href","/docs/transformers/pr_16780/en/model_doc/clip#transformers.CLIPModel"),d(wB,"href","/docs/transformers/pr_16780/en/model_doc/convbert#transformers.ConvBertModel"),d(AB,"href","/docs/transformers/pr_16780/en/model_doc/convnext#transformers.ConvNextModel"),d(yB,"href","/docs/transformers/pr_16780/en/model_doc/ctrl#transformers.CTRLModel"),d(LB,"href","/docs/transformers/pr_16780/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d(xB,"href","/docs/transformers/pr_16780/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(kB,"href","/docs/transformers/pr_16780/en/model_doc/deberta#transformers.DebertaModel"),d(SB,"href","/docs/transformers/pr_16780/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d(RB,"href","/docs/transformers/pr_16780/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),d(BB,"href","/docs/transformers/pr_16780/en/model_doc/deit#transformers.DeiTModel"),d(PB,"href","/docs/transformers/pr_16780/en/model_doc/detr#transformers.DetrModel"),d($B,"href","/docs/transformers/pr_16780/en/model_doc/distilbert#transformers.DistilBertModel"),d(IB,"href","/docs/transformers/pr_16780/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d(qB,"href","/docs/transformers/pr_16780/en/model_doc/dpt#transformers.DPTModel"),d(NB,"href","/docs/transformers/pr_16780/en/model_doc/electra#transformers.ElectraModel"),d(jB,"href","/docs/transformers/pr_16780/en/model_doc/flaubert#transformers.FlaubertModel"),d(DB,"href","/docs/transformers/pr_16780/en/model_doc/fnet#transformers.FNetModel"),d(GB,"href","/docs/transformers/pr_16780/en/model_doc/fsmt#transformers.FSMTModel"),d(OB,"href","/docs/transformers/pr_16780/en/model_doc/funnel#transformers.FunnelModel"),d(VB,"href","/docs/transformers/pr_16780/en/model_doc/funnel#transformers.FunnelBaseModel"),d(XB,"href","/docs/transformers/pr_16780/en/model_doc/glpn#transformers.GLPNModel"),d(zB,"href","/docs/transformers/pr_16780/en/model_doc/gpt2#transformers.GPT2Model"),d(QB,"href","/docs/transformers/pr_16780/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d(WB,"href","/docs/transformers/pr_16780/en/model_doc/gptj#transformers.GPTJModel"),d(HB,"href","/docs/transformers/pr_16780/en/model_doc/hubert#transformers.HubertModel"),d(UB,"href","/docs/transformers/pr_16780/en/model_doc/ibert#transformers.IBertModel"),d(JB,"href","/docs/transformers/pr_16780/en/model_doc/imagegpt#transformers.ImageGPTModel"),d(YB,"href","/docs/transformers/pr_16780/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(KB,"href","/docs/transformers/pr_16780/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d(ZB,"href","/docs/transformers/pr_16780/en/model_doc/led#transformers.LEDModel"),d(eP,"href","/docs/transformers/pr_16780/en/model_doc/longformer#transformers.LongformerModel"),d(oP,"href","/docs/transformers/pr_16780/en/model_doc/luke#transformers.LukeModel"),d(rP,"href","/docs/transformers/pr_16780/en/model_doc/lxmert#transformers.LxmertModel"),d(tP,"href","/docs/transformers/pr_16780/en/model_doc/m2m_100#transformers.M2M100Model"),d(aP,"href","/docs/transformers/pr_16780/en/model_doc/marian#transformers.MarianModel"),d(nP,"href","/docs/transformers/pr_16780/en/model_doc/maskformer#transformers.MaskFormerModel"),d(sP,"href","/docs/transformers/pr_16780/en/model_doc/mbart#transformers.MBartModel"),d(lP,"href","/docs/transformers/pr_16780/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(iP,"href","/docs/transformers/pr_16780/en/model_doc/mobilebert#transformers.MobileBertModel"),d(dP,"href","/docs/transformers/pr_16780/en/model_doc/mpnet#transformers.MPNetModel"),d(cP,"href","/docs/transformers/pr_16780/en/model_doc/mt5#transformers.MT5Model"),d(fP,"href","/docs/transformers/pr_16780/en/model_doc/nystromformer#transformers.NystromformerModel"),d(mP,"href","/docs/transformers/pr_16780/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d(gP,"href","/docs/transformers/pr_16780/en/model_doc/pegasus#transformers.PegasusModel"),d(hP,"href","/docs/transformers/pr_16780/en/model_doc/perceiver#transformers.PerceiverModel"),d(pP,"href","/docs/transformers/pr_16780/en/model_doc/plbart#transformers.PLBartModel"),d(_P,"href","/docs/transformers/pr_16780/en/model_doc/poolformer#transformers.PoolFormerModel"),d(uP,"href","/docs/transformers/pr_16780/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(bP,"href","/docs/transformers/pr_16780/en/model_doc/qdqbert#transformers.QDQBertModel"),d(FP,"href","/docs/transformers/pr_16780/en/model_doc/reformer#transformers.ReformerModel"),d(vP,"href","/docs/transformers/pr_16780/en/model_doc/regnet#transformers.RegNetModel"),d(TP,"href","/docs/transformers/pr_16780/en/model_doc/rembert#transformers.RemBertModel"),d(MP,"href","/docs/transformers/pr_16780/en/model_doc/resnet#transformers.ResNetModel"),d(EP,"href","/docs/transformers/pr_16780/en/model_doc/retribert#transformers.RetriBertModel"),d(CP,"href","/docs/transformers/pr_16780/en/model_doc/roberta#transformers.RobertaModel"),d(wP,"href","/docs/transformers/pr_16780/en/model_doc/roformer#transformers.RoFormerModel"),d(AP,"href","/docs/transformers/pr_16780/en/model_doc/segformer#transformers.SegformerModel"),d(yP,"href","/docs/transformers/pr_16780/en/model_doc/sew#transformers.SEWModel"),d(LP,"href","/docs/transformers/pr_16780/en/model_doc/sew-d#transformers.SEWDModel"),d(xP,"href","/docs/transformers/pr_16780/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d(kP,"href","/docs/transformers/pr_16780/en/model_doc/splinter#transformers.SplinterModel"),d(SP,"href","/docs/transformers/pr_16780/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d(RP,"href","/docs/transformers/pr_16780/en/model_doc/swin#transformers.SwinModel"),d(BP,"href","/docs/transformers/pr_16780/en/model_doc/t5#transformers.T5Model"),d(PP,"href","/docs/transformers/pr_16780/en/model_doc/tapas#transformers.TapasModel"),d($P,"href","/docs/transformers/pr_16780/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d(IP,"href","/docs/transformers/pr_16780/en/model_doc/unispeech#transformers.UniSpeechModel"),d(qP,"href","/docs/transformers/pr_16780/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(NP,"href","/docs/transformers/pr_16780/en/model_doc/van#transformers.VanModel"),d(jP,"href","/docs/transformers/pr_16780/en/model_doc/vilt#transformers.ViltModel"),d(DP,"href","/docs/transformers/pr_16780/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(GP,"href","/docs/transformers/pr_16780/en/model_doc/visual_bert#transformers.VisualBertModel"),d(OP,"href","/docs/transformers/pr_16780/en/model_doc/vit#transformers.ViTModel"),d(VP,"href","/docs/transformers/pr_16780/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(XP,"href","/docs/transformers/pr_16780/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d(zP,"href","/docs/transformers/pr_16780/en/model_doc/wavlm#transformers.WavLMModel"),d(QP,"href","/docs/transformers/pr_16780/en/model_doc/xglm#transformers.XGLMModel"),d(WP,"href","/docs/transformers/pr_16780/en/model_doc/xlm#transformers.XLMModel"),d(HP,"href","/docs/transformers/pr_16780/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d(UP,"href","/docs/transformers/pr_16780/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d(JP,"href","/docs/transformers/pr_16780/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d(YP,"href","/docs/transformers/pr_16780/en/model_doc/xlnet#transformers.XLNetModel"),d(KP,"href","/docs/transformers/pr_16780/en/model_doc/yoso#transformers.YosoModel"),d(qe,"class","docstring"),d(Jo,"class","docstring"),d(I_,"id","transformers.AutoModelForPreTraining"),d(I_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(I_,"href","#transformers.AutoModelForPreTraining"),d(ed,"class","relative group"),d(ZP,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(e$,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(o$,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zr,"class","docstring"),d(r$,"href","/docs/transformers/pr_16780/en/model_doc/albert#transformers.AlbertForPreTraining"),d(t$,"href","/docs/transformers/pr_16780/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(a$,"href","/docs/transformers/pr_16780/en/model_doc/bert#transformers.BertForPreTraining"),d(n$,"href","/docs/transformers/pr_16780/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d(s$,"href","/docs/transformers/pr_16780/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(l$,"href","/docs/transformers/pr_16780/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(i$,"href","/docs/transformers/pr_16780/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(d$,"href","/docs/transformers/pr_16780/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(c$,"href","/docs/transformers/pr_16780/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(f$,"href","/docs/transformers/pr_16780/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(m$,"href","/docs/transformers/pr_16780/en/model_doc/electra#transformers.ElectraForPreTraining"),d(g$,"href","/docs/transformers/pr_16780/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(h$,"href","/docs/transformers/pr_16780/en/model_doc/fnet#transformers.FNetForPreTraining"),d(p$,"href","/docs/transformers/pr_16780/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(_$,"href","/docs/transformers/pr_16780/en/model_doc/funnel#transformers.FunnelForPreTraining"),d(u$,"href","/docs/transformers/pr_16780/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(b$,"href","/docs/transformers/pr_16780/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(F$,"href","/docs/transformers/pr_16780/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(v$,"href","/docs/transformers/pr_16780/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(T$,"href","/docs/transformers/pr_16780/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d(M$,"href","/docs/transformers/pr_16780/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d(E$,"href","/docs/transformers/pr_16780/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d(C$,"href","/docs/transformers/pr_16780/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(w$,"href","/docs/transformers/pr_16780/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(A$,"href","/docs/transformers/pr_16780/en/model_doc/retribert#transformers.RetriBertModel"),d(y$,"href","/docs/transformers/pr_16780/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(L$,"href","/docs/transformers/pr_16780/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(x$,"href","/docs/transformers/pr_16780/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(k$,"href","/docs/transformers/pr_16780/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(S$,"href","/docs/transformers/pr_16780/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(R$,"href","/docs/transformers/pr_16780/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d(B$,"href","/docs/transformers/pr_16780/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d(P$,"href","/docs/transformers/pr_16780/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d($$,"href","/docs/transformers/pr_16780/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(I$,"href","/docs/transformers/pr_16780/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d(q$,"href","/docs/transformers/pr_16780/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(N$,"href","/docs/transformers/pr_16780/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(j$,"href","/docs/transformers/pr_16780/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(D$,"href","/docs/transformers/pr_16780/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(Ne,"class","docstring"),d(Yo,"class","docstring"),d(Eu,"id","transformers.AutoModelForCausalLM"),d(Eu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Eu,"href","#transformers.AutoModelForCausalLM"),d(td,"class","relative group"),d(G$,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(O$,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(V$,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Qr,"class","docstring"),d(X$,"href","/docs/transformers/pr_16780/en/model_doc/bart#transformers.BartForCausalLM"),d(z$,"href","/docs/transformers/pr_16780/en/model_doc/bert#transformers.BertLMHeadModel"),d(Q$,"href","/docs/transformers/pr_16780/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(W$,"href","/docs/transformers/pr_16780/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d(H$,"href","/docs/transformers/pr_16780/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d(U$,"href","/docs/transformers/pr_16780/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d(J$,"href","/docs/transformers/pr_16780/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d(Y$,"href","/docs/transformers/pr_16780/en/model_doc/camembert#transformers.CamembertForCausalLM"),d(K$,"href","/docs/transformers/pr_16780/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(Z$,"href","/docs/transformers/pr_16780/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d(eI,"href","/docs/transformers/pr_16780/en/model_doc/electra#transformers.ElectraForCausalLM"),d(oI,"href","/docs/transformers/pr_16780/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(rI,"href","/docs/transformers/pr_16780/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(tI,"href","/docs/transformers/pr_16780/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(aI,"href","/docs/transformers/pr_16780/en/model_doc/marian#transformers.MarianForCausalLM"),d(nI,"href","/docs/transformers/pr_16780/en/model_doc/mbart#transformers.MBartForCausalLM"),d(sI,"href","/docs/transformers/pr_16780/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d(lI,"href","/docs/transformers/pr_16780/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(iI,"href","/docs/transformers/pr_16780/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d(dI,"href","/docs/transformers/pr_16780/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(cI,"href","/docs/transformers/pr_16780/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d(fI,"href","/docs/transformers/pr_16780/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d(mI,"href","/docs/transformers/pr_16780/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d(gI,"href","/docs/transformers/pr_16780/en/model_doc/rembert#transformers.RemBertForCausalLM"),d(hI,"href","/docs/transformers/pr_16780/en/model_doc/roberta#transformers.RobertaForCausalLM"),d(pI,"href","/docs/transformers/pr_16780/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d(_I,"href","/docs/transformers/pr_16780/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d(uI,"href","/docs/transformers/pr_16780/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(bI,"href","/docs/transformers/pr_16780/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(FI,"href","/docs/transformers/pr_16780/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(vI,"href","/docs/transformers/pr_16780/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(TI,"href","/docs/transformers/pr_16780/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d(MI,"href","/docs/transformers/pr_16780/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(EI,"href","/docs/transformers/pr_16780/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d(CI,"href","/docs/transformers/pr_16780/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(je,"class","docstring"),d(Ko,"class","docstring"),d(s1,"id","transformers.AutoModelForMaskedLM"),d(s1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(s1,"href","#transformers.AutoModelForMaskedLM"),d(sd,"class","relative group"),d(wI,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(AI,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(yI,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Wr,"class","docstring"),d(LI,"href","/docs/transformers/pr_16780/en/model_doc/albert#transformers.AlbertForMaskedLM"),d(xI,"href","/docs/transformers/pr_16780/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(kI,"href","/docs/transformers/pr_16780/en/model_doc/bert#transformers.BertForMaskedLM"),d(SI,"href","/docs/transformers/pr_16780/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d(RI,"href","/docs/transformers/pr_16780/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(BI,"href","/docs/transformers/pr_16780/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d(PI,"href","/docs/transformers/pr_16780/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d($I,"href","/docs/transformers/pr_16780/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(II,"href","/docs/transformers/pr_16780/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(qI,"href","/docs/transformers/pr_16780/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(NI,"href","/docs/transformers/pr_16780/en/model_doc/electra#transformers.ElectraForMaskedLM"),d(jI,"href","/docs/transformers/pr_16780/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(DI,"href","/docs/transformers/pr_16780/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(GI,"href","/docs/transformers/pr_16780/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(OI,"href","/docs/transformers/pr_16780/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(VI,"href","/docs/transformers/pr_16780/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(XI,"href","/docs/transformers/pr_16780/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(zI,"href","/docs/transformers/pr_16780/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(QI,"href","/docs/transformers/pr_16780/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(WI,"href","/docs/transformers/pr_16780/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d(HI,"href","/docs/transformers/pr_16780/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(UI,"href","/docs/transformers/pr_16780/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d(JI,"href","/docs/transformers/pr_16780/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d(YI,"href","/docs/transformers/pr_16780/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d(KI,"href","/docs/transformers/pr_16780/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(ZI,"href","/docs/transformers/pr_16780/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d(eq,"href","/docs/transformers/pr_16780/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(oq,"href","/docs/transformers/pr_16780/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(rq,"href","/docs/transformers/pr_16780/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(tq,"href","/docs/transformers/pr_16780/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(aq,"href","/docs/transformers/pr_16780/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(nq,"href","/docs/transformers/pr_16780/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(sq,"href","/docs/transformers/pr_16780/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(lq,"href","/docs/transformers/pr_16780/en/model_doc/yoso#transformers.YosoForMaskedLM"),d(De,"class","docstring"),d(Zo,"class","docstring"),d(V1,"id","transformers.AutoModelForSeq2SeqLM"),d(V1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(V1,"href","#transformers.AutoModelForSeq2SeqLM"),d(dd,"class","relative group"),d(iq,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dq,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(cq,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Hr,"class","docstring"),d(fq,"href","/docs/transformers/pr_16780/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(mq,"href","/docs/transformers/pr_16780/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d(gq,"href","/docs/transformers/pr_16780/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(hq,"href","/docs/transformers/pr_16780/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d(pq,"href","/docs/transformers/pr_16780/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d(_q,"href","/docs/transformers/pr_16780/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(uq,"href","/docs/transformers/pr_16780/en/model_doc/led#transformers.LEDForConditionalGeneration"),d(bq,"href","/docs/transformers/pr_16780/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(Fq,"href","/docs/transformers/pr_16780/en/model_doc/marian#transformers.MarianMTModel"),d(vq,"href","/docs/transformers/pr_16780/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(Tq,"href","/docs/transformers/pr_16780/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d(Mq,"href","/docs/transformers/pr_16780/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d(Eq,"href","/docs/transformers/pr_16780/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d(Cq,"href","/docs/transformers/pr_16780/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d(wq,"href","/docs/transformers/pr_16780/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(Aq,"href","/docs/transformers/pr_16780/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(yq,"href","/docs/transformers/pr_16780/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(Ge,"class","docstring"),d(er,"class","docstring"),d(ib,"id","transformers.AutoModelForSequenceClassification"),d(ib,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ib,"href","#transformers.AutoModelForSequenceClassification"),d(md,"class","relative group"),d(Lq,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xq,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(kq,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ur,"class","docstring"),d(Sq,"href","/docs/transformers/pr_16780/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d(Rq,"href","/docs/transformers/pr_16780/en/model_doc/bart#transformers.BartForSequenceClassification"),d(Bq,"href","/docs/transformers/pr_16780/en/model_doc/bert#transformers.BertForSequenceClassification"),d(Pq,"href","/docs/transformers/pr_16780/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d($q,"href","/docs/transformers/pr_16780/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d(Iq,"href","/docs/transformers/pr_16780/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d(qq,"href","/docs/transformers/pr_16780/en/model_doc/canine#transformers.CanineForSequenceClassification"),d(Nq,"href","/docs/transformers/pr_16780/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d(jq,"href","/docs/transformers/pr_16780/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(Dq,"href","/docs/transformers/pr_16780/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d(Gq,"href","/docs/transformers/pr_16780/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(Oq,"href","/docs/transformers/pr_16780/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d(Vq,"href","/docs/transformers/pr_16780/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d(Xq,"href","/docs/transformers/pr_16780/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d(zq,"href","/docs/transformers/pr_16780/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d(Qq,"href","/docs/transformers/pr_16780/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d(Wq,"href","/docs/transformers/pr_16780/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d(Hq,"href","/docs/transformers/pr_16780/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(Uq,"href","/docs/transformers/pr_16780/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d(Jq,"href","/docs/transformers/pr_16780/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d(Yq,"href","/docs/transformers/pr_16780/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d(Kq,"href","/docs/transformers/pr_16780/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d(Zq,"href","/docs/transformers/pr_16780/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(eN,"href","/docs/transformers/pr_16780/en/model_doc/led#transformers.LEDForSequenceClassification"),d(oN,"href","/docs/transformers/pr_16780/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(rN,"href","/docs/transformers/pr_16780/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(tN,"href","/docs/transformers/pr_16780/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(aN,"href","/docs/transformers/pr_16780/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(nN,"href","/docs/transformers/pr_16780/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(sN,"href","/docs/transformers/pr_16780/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(lN,"href","/docs/transformers/pr_16780/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(iN,"href","/docs/transformers/pr_16780/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(dN,"href","/docs/transformers/pr_16780/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(cN,"href","/docs/transformers/pr_16780/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(fN,"href","/docs/transformers/pr_16780/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(mN,"href","/docs/transformers/pr_16780/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(gN,"href","/docs/transformers/pr_16780/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(hN,"href","/docs/transformers/pr_16780/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d(pN,"href","/docs/transformers/pr_16780/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d(_N,"href","/docs/transformers/pr_16780/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d(uN,"href","/docs/transformers/pr_16780/en/model_doc/bart#transformers.BartForSequenceClassification"),d(bN,"href","/docs/transformers/pr_16780/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d(FN,"href","/docs/transformers/pr_16780/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d(vN,"href","/docs/transformers/pr_16780/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d(TN,"href","/docs/transformers/pr_16780/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d(MN,"href","/docs/transformers/pr_16780/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d(EN,"href","/docs/transformers/pr_16780/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(Oe,"class","docstring"),d(or,"class","docstring"),d(t2,"id","transformers.AutoModelForMultipleChoice"),d(t2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(t2,"href","#transformers.AutoModelForMultipleChoice"),d(pd,"class","relative group"),d(CN,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wN,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(AN,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Jr,"class","docstring"),d(yN,"href","/docs/transformers/pr_16780/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d(LN,"href","/docs/transformers/pr_16780/en/model_doc/bert#transformers.BertForMultipleChoice"),d(xN,"href","/docs/transformers/pr_16780/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d(kN,"href","/docs/transformers/pr_16780/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d(SN,"href","/docs/transformers/pr_16780/en/model_doc/canine#transformers.CanineForMultipleChoice"),d(RN,"href","/docs/transformers/pr_16780/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d(BN,"href","/docs/transformers/pr_16780/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d(PN,"href","/docs/transformers/pr_16780/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d($N,"href","/docs/transformers/pr_16780/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d(IN,"href","/docs/transformers/pr_16780/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d(qN,"href","/docs/transformers/pr_16780/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(NN,"href","/docs/transformers/pr_16780/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d(jN,"href","/docs/transformers/pr_16780/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d(DN,"href","/docs/transformers/pr_16780/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d(GN,"href","/docs/transformers/pr_16780/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(ON,"href","/docs/transformers/pr_16780/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(VN,"href","/docs/transformers/pr_16780/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(XN,"href","/docs/transformers/pr_16780/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(zN,"href","/docs/transformers/pr_16780/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d(QN,"href","/docs/transformers/pr_16780/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d(WN,"href","/docs/transformers/pr_16780/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d(HN,"href","/docs/transformers/pr_16780/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(UN,"href","/docs/transformers/pr_16780/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(JN,"href","/docs/transformers/pr_16780/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d(YN,"href","/docs/transformers/pr_16780/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d(KN,"href","/docs/transformers/pr_16780/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d(ZN,"href","/docs/transformers/pr_16780/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d(ej,"href","/docs/transformers/pr_16780/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(Ve,"class","docstring"),d(rr,"class","docstring"),d(B2,"id","transformers.AutoModelForNextSentencePrediction"),d(B2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(B2,"href","#transformers.AutoModelForNextSentencePrediction"),d(bd,"class","relative group"),d(oj,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(rj,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(tj,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Yr,"class","docstring"),d(aj,"href","/docs/transformers/pr_16780/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(nj,"href","/docs/transformers/pr_16780/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(sj,"href","/docs/transformers/pr_16780/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(lj,"href","/docs/transformers/pr_16780/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(ij,"href","/docs/transformers/pr_16780/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(Xe,"class","docstring"),d(tr,"class","docstring"),d(D2,"id","transformers.AutoModelForTokenClassification"),d(D2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(D2,"href","#transformers.AutoModelForTokenClassification"),d(Td,"class","relative group"),d(dj,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(cj,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(fj,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Kr,"class","docstring"),d(mj,"href","/docs/transformers/pr_16780/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(gj,"href","/docs/transformers/pr_16780/en/model_doc/bert#transformers.BertForTokenClassification"),d(hj,"href","/docs/transformers/pr_16780/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d(pj,"href","/docs/transformers/pr_16780/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d(_j,"href","/docs/transformers/pr_16780/en/model_doc/canine#transformers.CanineForTokenClassification"),d(uj,"href","/docs/transformers/pr_16780/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(bj,"href","/docs/transformers/pr_16780/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d(Fj,"href","/docs/transformers/pr_16780/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(vj,"href","/docs/transformers/pr_16780/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(Tj,"href","/docs/transformers/pr_16780/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d(Mj,"href","/docs/transformers/pr_16780/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(Ej,"href","/docs/transformers/pr_16780/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d(Cj,"href","/docs/transformers/pr_16780/en/model_doc/fnet#transformers.FNetForTokenClassification"),d(wj,"href","/docs/transformers/pr_16780/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d(Aj,"href","/docs/transformers/pr_16780/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d(yj,"href","/docs/transformers/pr_16780/en/model_doc/ibert#transformers.IBertForTokenClassification"),d(Lj,"href","/docs/transformers/pr_16780/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d(xj,"href","/docs/transformers/pr_16780/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d(kj,"href","/docs/transformers/pr_16780/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d(Sj,"href","/docs/transformers/pr_16780/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d(Rj,"href","/docs/transformers/pr_16780/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d(Bj,"href","/docs/transformers/pr_16780/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d(Pj,"href","/docs/transformers/pr_16780/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d($j,"href","/docs/transformers/pr_16780/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d(Ij,"href","/docs/transformers/pr_16780/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d(qj,"href","/docs/transformers/pr_16780/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d(Nj,"href","/docs/transformers/pr_16780/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d(jj,"href","/docs/transformers/pr_16780/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d(Dj,"href","/docs/transformers/pr_16780/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(Gj,"href","/docs/transformers/pr_16780/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d(Oj,"href","/docs/transformers/pr_16780/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(Vj,"href","/docs/transformers/pr_16780/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(Xj,"href","/docs/transformers/pr_16780/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(ze,"class","docstring"),d(ar,"class","docstring"),d(TF,"id","transformers.AutoModelForQuestionAnswering"),d(TF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(TF,"href","#transformers.AutoModelForQuestionAnswering"),d(Cd,"class","relative group"),d(zj,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Qj,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Wj,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Zr,"class","docstring"),d(Hj,"href","/docs/transformers/pr_16780/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d(Uj,"href","/docs/transformers/pr_16780/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(Jj,"href","/docs/transformers/pr_16780/en/model_doc/bert#transformers.BertForQuestionAnswering"),d(Yj,"href","/docs/transformers/pr_16780/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d(Kj,"href","/docs/transformers/pr_16780/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d(Zj,"href","/docs/transformers/pr_16780/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d(eD,"href","/docs/transformers/pr_16780/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(oD,"href","/docs/transformers/pr_16780/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d(rD,"href","/docs/transformers/pr_16780/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d(tD,"href","/docs/transformers/pr_16780/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d(aD,"href","/docs/transformers/pr_16780/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(nD,"href","/docs/transformers/pr_16780/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d(sD,"href","/docs/transformers/pr_16780/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(lD,"href","/docs/transformers/pr_16780/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(iD,"href","/docs/transformers/pr_16780/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(dD,"href","/docs/transformers/pr_16780/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(cD,"href","/docs/transformers/pr_16780/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(fD,"href","/docs/transformers/pr_16780/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(mD,"href","/docs/transformers/pr_16780/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(gD,"href","/docs/transformers/pr_16780/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(hD,"href","/docs/transformers/pr_16780/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d(pD,"href","/docs/transformers/pr_16780/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d(_D,"href","/docs/transformers/pr_16780/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d(uD,"href","/docs/transformers/pr_16780/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(bD,"href","/docs/transformers/pr_16780/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(FD,"href","/docs/transformers/pr_16780/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(vD,"href","/docs/transformers/pr_16780/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(TD,"href","/docs/transformers/pr_16780/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d(MD,"href","/docs/transformers/pr_16780/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(ED,"href","/docs/transformers/pr_16780/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d(CD,"href","/docs/transformers/pr_16780/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(wD,"href","/docs/transformers/pr_16780/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d(AD,"href","/docs/transformers/pr_16780/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d(yD,"href","/docs/transformers/pr_16780/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d(LD,"href","/docs/transformers/pr_16780/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(xD,"href","/docs/transformers/pr_16780/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d(kD,"href","/docs/transformers/pr_16780/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d(SD,"href","/docs/transformers/pr_16780/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d(RD,"href","/docs/transformers/pr_16780/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(Qe,"class","docstring"),d(nr,"class","docstring"),d(iv,"id","transformers.AutoModelForTableQuestionAnswering"),d(iv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(iv,"href","#transformers.AutoModelForTableQuestionAnswering"),d(yd,"class","relative group"),d(BD,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(PD,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d($D,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(et,"class","docstring"),d(ID,"href","/docs/transformers/pr_16780/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(We,"class","docstring"),d(sr,"class","docstring"),d(fv,"id","transformers.AutoModelForImageClassification"),d(fv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(fv,"href","#transformers.AutoModelForImageClassification"),d(kd,"class","relative group"),d(qD,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ND,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(jD,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ot,"class","docstring"),d(DD,"href","/docs/transformers/pr_16780/en/model_doc/beit#transformers.BeitForImageClassification"),d(GD,"href","/docs/transformers/pr_16780/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(OD,"href","/docs/transformers/pr_16780/en/model_doc/deit#transformers.DeiTForImageClassification"),d(VD,"href","/docs/transformers/pr_16780/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d(XD,"href","/docs/transformers/pr_16780/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d(zD,"href","/docs/transformers/pr_16780/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d(QD,"href","/docs/transformers/pr_16780/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d(WD,"href","/docs/transformers/pr_16780/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d(HD,"href","/docs/transformers/pr_16780/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(UD,"href","/docs/transformers/pr_16780/en/model_doc/regnet#transformers.RegNetForImageClassification"),d(JD,"href","/docs/transformers/pr_16780/en/model_doc/resnet#transformers.ResNetForImageClassification"),d(YD,"href","/docs/transformers/pr_16780/en/model_doc/segformer#transformers.SegformerForImageClassification"),d(KD,"href","/docs/transformers/pr_16780/en/model_doc/swin#transformers.SwinForImageClassification"),d(ZD,"href","/docs/transformers/pr_16780/en/model_doc/van#transformers.VanForImageClassification"),d(eG,"href","/docs/transformers/pr_16780/en/model_doc/vit#transformers.ViTForImageClassification"),d(He,"class","docstring"),d(lr,"class","docstring"),d(Ev,"id","transformers.AutoModelForVision2Seq"),d(Ev,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ev,"href","#transformers.AutoModelForVision2Seq"),d(Bd,"class","relative group"),d(oG,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(rG,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(tG,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(rt,"class","docstring"),d(aG,"href","/docs/transformers/pr_16780/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(Ue,"class","docstring"),d(ir,"class","docstring"),d(Av,"id","transformers.AutoModelForAudioClassification"),d(Av,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Av,"href","#transformers.AutoModelForAudioClassification"),d(Id,"class","relative group"),d(nG,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(sG,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(lG,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tt,"class","docstring"),d(iG,"href","/docs/transformers/pr_16780/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(dG,"href","/docs/transformers/pr_16780/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d(cG,"href","/docs/transformers/pr_16780/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(fG,"href","/docs/transformers/pr_16780/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d(mG,"href","/docs/transformers/pr_16780/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(gG,"href","/docs/transformers/pr_16780/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d(hG,"href","/docs/transformers/pr_16780/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d(pG,"href","/docs/transformers/pr_16780/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(Je,"class","docstring"),d(dr,"class","docstring"),d(Iv,"id","transformers.AutoModelForAudioFrameClassification"),d(Iv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Iv,"href","#transformers.AutoModelForAudioFrameClassification"),d(jd,"class","relative group"),d(_G,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(uG,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(bG,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(at,"class","docstring"),d(FG,"href","/docs/transformers/pr_16780/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d(vG,"href","/docs/transformers/pr_16780/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d(TG,"href","/docs/transformers/pr_16780/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(MG,"href","/docs/transformers/pr_16780/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(Ye,"class","docstring"),d(cr,"class","docstring"),d(Ov,"id","transformers.AutoModelForCTC"),d(Ov,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ov,"href","#transformers.AutoModelForCTC"),d(Od,"class","relative group"),d(EG,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(CG,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(wG,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nt,"class","docstring"),d(AG,"href","/docs/transformers/pr_16780/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d(yG,"href","/docs/transformers/pr_16780/en/model_doc/hubert#transformers.HubertForCTC"),d(LG,"href","/docs/transformers/pr_16780/en/model_doc/sew#transformers.SEWForCTC"),d(xG,"href","/docs/transformers/pr_16780/en/model_doc/sew-d#transformers.SEWDForCTC"),d(kG,"href","/docs/transformers/pr_16780/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d(SG,"href","/docs/transformers/pr_16780/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(RG,"href","/docs/transformers/pr_16780/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d(BG,"href","/docs/transformers/pr_16780/en/model_doc/wavlm#transformers.WavLMForCTC"),d(Ke,"class","docstring"),d(fr,"class","docstring"),d(Kv,"id","transformers.AutoModelForSpeechSeq2Seq"),d(Kv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Kv,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(zd,"class","relative group"),d(PG,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($G,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(IG,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(st,"class","docstring"),d(qG,"href","/docs/transformers/pr_16780/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(NG,"href","/docs/transformers/pr_16780/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(Ze,"class","docstring"),d(mr,"class","docstring"),d(r6,"id","transformers.AutoModelForAudioXVector"),d(r6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(r6,"href","#transformers.AutoModelForAudioXVector"),d(Hd,"class","relative group"),d(jG,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(DG,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(GG,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lt,"class","docstring"),d(OG,"href","/docs/transformers/pr_16780/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(VG,"href","/docs/transformers/pr_16780/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(XG,"href","/docs/transformers/pr_16780/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(zG,"href","/docs/transformers/pr_16780/en/model_doc/wavlm#transformers.WavLMForXVector"),d(eo,"class","docstring"),d(gr,"class","docstring"),d(i6,"id","transformers.AutoModelForMaskedImageModeling"),d(i6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(i6,"href","#transformers.AutoModelForMaskedImageModeling"),d(Yd,"class","relative group"),d(QG,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(WG,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(HG,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(it,"class","docstring"),d(UG,"href","/docs/transformers/pr_16780/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(JG,"href","/docs/transformers/pr_16780/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d(YG,"href","/docs/transformers/pr_16780/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(oo,"class","docstring"),d(hr,"class","docstring"),d(g6,"id","transformers.AutoModelForObjectDetection"),d(g6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(g6,"href","#transformers.AutoModelForObjectDetection"),d(oc,"class","relative group"),d(KG,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ZG,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(eO,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dt,"class","docstring"),d(oO,"href","/docs/transformers/pr_16780/en/model_doc/detr#transformers.DetrForObjectDetection"),d(ro,"class","docstring"),d(pr,"class","docstring"),d(_6,"id","transformers.AutoModelForImageSegmentation"),d(_6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(_6,"href","#transformers.AutoModelForImageSegmentation"),d(ac,"class","relative group"),d(rO,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tO,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(aO,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ct,"class","docstring"),d(nO,"href","/docs/transformers/pr_16780/en/model_doc/detr#transformers.DetrForSegmentation"),d(to,"class","docstring"),d(_r,"class","docstring"),d(F6,"id","transformers.AutoModelForSemanticSegmentation"),d(F6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(F6,"href","#transformers.AutoModelForSemanticSegmentation"),d(lc,"class","relative group"),d(sO,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lO,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(iO,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ft,"class","docstring"),d(dO,"href","/docs/transformers/pr_16780/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(cO,"href","/docs/transformers/pr_16780/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),d(fO,"href","/docs/transformers/pr_16780/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(ao,"class","docstring"),d(ur,"class","docstring"),d(C6,"id","transformers.AutoModelForInstanceSegmentation"),d(C6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(C6,"href","#transformers.AutoModelForInstanceSegmentation"),d(fc,"class","relative group"),d(mO,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gO,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(hO,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mt,"class","docstring"),d(pO,"href","/docs/transformers/pr_16780/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),d(no,"class","docstring"),d(br,"class","docstring"),d(y6,"id","transformers.TFAutoModel"),d(y6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(y6,"href","#transformers.TFAutoModel"),d(hc,"class","relative group"),d(_O,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(uO,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(bO,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gt,"class","docstring"),d(FO,"href","/docs/transformers/pr_16780/en/model_doc/albert#transformers.TFAlbertModel"),d(vO,"href","/docs/transformers/pr_16780/en/model_doc/bart#transformers.TFBartModel"),d(TO,"href","/docs/transformers/pr_16780/en/model_doc/bert#transformers.TFBertModel"),d(MO,"href","/docs/transformers/pr_16780/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d(EO,"href","/docs/transformers/pr_16780/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d(CO,"href","/docs/transformers/pr_16780/en/model_doc/camembert#transformers.TFCamembertModel"),d(wO,"href","/docs/transformers/pr_16780/en/model_doc/clip#transformers.TFCLIPModel"),d(AO,"href","/docs/transformers/pr_16780/en/model_doc/convbert#transformers.TFConvBertModel"),d(yO,"href","/docs/transformers/pr_16780/en/model_doc/convnext#transformers.TFConvNextModel"),d(LO,"href","/docs/transformers/pr_16780/en/model_doc/ctrl#transformers.TFCTRLModel"),d(xO,"href","/docs/transformers/pr_16780/en/model_doc/deberta#transformers.TFDebertaModel"),d(kO,"href","/docs/transformers/pr_16780/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d(SO,"href","/docs/transformers/pr_16780/en/model_doc/distilbert#transformers.TFDistilBertModel"),d(RO,"href","/docs/transformers/pr_16780/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d(BO,"href","/docs/transformers/pr_16780/en/model_doc/electra#transformers.TFElectraModel"),d(PO,"href","/docs/transformers/pr_16780/en/model_doc/flaubert#transformers.TFFlaubertModel"),d($O,"href","/docs/transformers/pr_16780/en/model_doc/funnel#transformers.TFFunnelModel"),d(IO,"href","/docs/transformers/pr_16780/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d(qO,"href","/docs/transformers/pr_16780/en/model_doc/gpt2#transformers.TFGPT2Model"),d(NO,"href","/docs/transformers/pr_16780/en/model_doc/gptj#transformers.TFGPTJModel"),d(jO,"href","/docs/transformers/pr_16780/en/model_doc/hubert#transformers.TFHubertModel"),d(DO,"href","/docs/transformers/pr_16780/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(GO,"href","/docs/transformers/pr_16780/en/model_doc/led#transformers.TFLEDModel"),d(OO,"href","/docs/transformers/pr_16780/en/model_doc/longformer#transformers.TFLongformerModel"),d(VO,"href","/docs/transformers/pr_16780/en/model_doc/lxmert#transformers.TFLxmertModel"),d(XO,"href","/docs/transformers/pr_16780/en/model_doc/marian#transformers.TFMarianModel"),d(zO,"href","/docs/transformers/pr_16780/en/model_doc/mbart#transformers.TFMBartModel"),d(QO,"href","/docs/transformers/pr_16780/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d(WO,"href","/docs/transformers/pr_16780/en/model_doc/mpnet#transformers.TFMPNetModel"),d(HO,"href","/docs/transformers/pr_16780/en/model_doc/mt5#transformers.TFMT5Model"),d(UO,"href","/docs/transformers/pr_16780/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(JO,"href","/docs/transformers/pr_16780/en/model_doc/pegasus#transformers.TFPegasusModel"),d(YO,"href","/docs/transformers/pr_16780/en/model_doc/rembert#transformers.TFRemBertModel"),d(KO,"href","/docs/transformers/pr_16780/en/model_doc/roberta#transformers.TFRobertaModel"),d(ZO,"href","/docs/transformers/pr_16780/en/model_doc/roformer#transformers.TFRoFormerModel"),d(eV,"href","/docs/transformers/pr_16780/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d(oV,"href","/docs/transformers/pr_16780/en/model_doc/t5#transformers.TFT5Model"),d(rV,"href","/docs/transformers/pr_16780/en/model_doc/tapas#transformers.TFTapasModel"),d(tV,"href","/docs/transformers/pr_16780/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(aV,"href","/docs/transformers/pr_16780/en/model_doc/vit#transformers.TFViTModel"),d(nV,"href","/docs/transformers/pr_16780/en/model_doc/vit_mae#transformers.TFViTMAEModel"),d(sV,"href","/docs/transformers/pr_16780/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d(lV,"href","/docs/transformers/pr_16780/en/model_doc/xlm#transformers.TFXLMModel"),d(iV,"href","/docs/transformers/pr_16780/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(dV,"href","/docs/transformers/pr_16780/en/model_doc/xlnet#transformers.TFXLNetModel"),d(ho,"class","docstring"),d(Fr,"class","docstring"),d(u0,"id","transformers.TFAutoModelForPreTraining"),d(u0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(u0,"href","#transformers.TFAutoModelForPreTraining"),d(uc,"class","relative group"),d(cV,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(fV,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(mV,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ht,"class","docstring"),d(gV,"href","/docs/transformers/pr_16780/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d(hV,"href","/docs/transformers/pr_16780/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(pV,"href","/docs/transformers/pr_16780/en/model_doc/bert#transformers.TFBertForPreTraining"),d(_V,"href","/docs/transformers/pr_16780/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(uV,"href","/docs/transformers/pr_16780/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(bV,"href","/docs/transformers/pr_16780/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(FV,"href","/docs/transformers/pr_16780/en/model_doc/electra#transformers.TFElectraForPreTraining"),d(vV,"href","/docs/transformers/pr_16780/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(TV,"href","/docs/transformers/pr_16780/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d(MV,"href","/docs/transformers/pr_16780/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(EV,"href","/docs/transformers/pr_16780/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(CV,"href","/docs/transformers/pr_16780/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d(wV,"href","/docs/transformers/pr_16780/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d(AV,"href","/docs/transformers/pr_16780/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(yV,"href","/docs/transformers/pr_16780/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(LV,"href","/docs/transformers/pr_16780/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(xV,"href","/docs/transformers/pr_16780/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(kV,"href","/docs/transformers/pr_16780/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(SV,"href","/docs/transformers/pr_16780/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(RV,"href","/docs/transformers/pr_16780/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),d(BV,"href","/docs/transformers/pr_16780/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(PV,"href","/docs/transformers/pr_16780/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d($V,"href","/docs/transformers/pr_16780/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(po,"class","docstring"),d(vr,"class","docstring"),d(G0,"id","transformers.TFAutoModelForCausalLM"),d(G0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(G0,"href","#transformers.TFAutoModelForCausalLM"),d(vc,"class","relative group"),d(IV,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qV,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(NV,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pt,"class","docstring"),d(jV,"href","/docs/transformers/pr_16780/en/model_doc/bert#transformers.TFBertLMHeadModel"),d(DV,"href","/docs/transformers/pr_16780/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),d(GV,"href","/docs/transformers/pr_16780/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(OV,"href","/docs/transformers/pr_16780/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(VV,"href","/docs/transformers/pr_16780/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),d(XV,"href","/docs/transformers/pr_16780/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(zV,"href","/docs/transformers/pr_16780/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d(QV,"href","/docs/transformers/pr_16780/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d(WV,"href","/docs/transformers/pr_16780/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d(HV,"href","/docs/transformers/pr_16780/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(UV,"href","/docs/transformers/pr_16780/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(JV,"href","/docs/transformers/pr_16780/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(_o,"class","docstring"),d(Tr,"class","docstring"),d(eT,"id","transformers.TFAutoModelForImageClassification"),d(eT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(eT,"href","#transformers.TFAutoModelForImageClassification"),d(Ec,"class","relative group"),d(YV,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(KV,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(ZV,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_t,"class","docstring"),d(eX,"href","/docs/transformers/pr_16780/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d(oX,"href","/docs/transformers/pr_16780/en/model_doc/vit#transformers.TFViTForImageClassification"),d(uo,"class","docstring"),d(Mr,"class","docstring"),d(tT,"id","transformers.TFAutoModelForMaskedLM"),d(tT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(tT,"href","#transformers.TFAutoModelForMaskedLM"),d(Ac,"class","relative group"),d(rX,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tX,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(aX,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ut,"class","docstring"),d(nX,"href","/docs/transformers/pr_16780/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(sX,"href","/docs/transformers/pr_16780/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(lX,"href","/docs/transformers/pr_16780/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(iX,"href","/docs/transformers/pr_16780/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d(dX,"href","/docs/transformers/pr_16780/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(cX,"href","/docs/transformers/pr_16780/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d(fX,"href","/docs/transformers/pr_16780/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(mX,"href","/docs/transformers/pr_16780/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d(gX,"href","/docs/transformers/pr_16780/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(hX,"href","/docs/transformers/pr_16780/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d(pX,"href","/docs/transformers/pr_16780/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(_X,"href","/docs/transformers/pr_16780/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(uX,"href","/docs/transformers/pr_16780/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(bX,"href","/docs/transformers/pr_16780/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(FX,"href","/docs/transformers/pr_16780/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d(vX,"href","/docs/transformers/pr_16780/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(TX,"href","/docs/transformers/pr_16780/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d(MX,"href","/docs/transformers/pr_16780/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(EX,"href","/docs/transformers/pr_16780/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(CX,"href","/docs/transformers/pr_16780/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(bo,"class","docstring"),d(Er,"class","docstring"),d(CT,"id","transformers.TFAutoModelForSeq2SeqLM"),d(CT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(CT,"href","#transformers.TFAutoModelForSeq2SeqLM"),d(xc,"class","relative group"),d(wX,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(AX,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(yX,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bt,"class","docstring"),d(LX,"href","/docs/transformers/pr_16780/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(xX,"href","/docs/transformers/pr_16780/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d(kX,"href","/docs/transformers/pr_16780/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d(SX,"href","/docs/transformers/pr_16780/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d(RX,"href","/docs/transformers/pr_16780/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d(BX,"href","/docs/transformers/pr_16780/en/model_doc/marian#transformers.TFMarianMTModel"),d(PX,"href","/docs/transformers/pr_16780/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d($X,"href","/docs/transformers/pr_16780/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d(IX,"href","/docs/transformers/pr_16780/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d(qX,"href","/docs/transformers/pr_16780/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(Fo,"class","docstring"),d(Cr,"class","docstring"),d($T,"id","transformers.TFAutoModelForSequenceClassification"),d($T,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($T,"href","#transformers.TFAutoModelForSequenceClassification"),d(Rc,"class","relative group"),d(NX,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(jX,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(DX,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ft,"class","docstring"),d(GX,"href","/docs/transformers/pr_16780/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d(OX,"href","/docs/transformers/pr_16780/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d(VX,"href","/docs/transformers/pr_16780/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(XX,"href","/docs/transformers/pr_16780/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d(zX,"href","/docs/transformers/pr_16780/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(QX,"href","/docs/transformers/pr_16780/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d(WX,"href","/docs/transformers/pr_16780/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(HX,"href","/docs/transformers/pr_16780/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d(UX,"href","/docs/transformers/pr_16780/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(JX,"href","/docs/transformers/pr_16780/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d(YX,"href","/docs/transformers/pr_16780/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d(KX,"href","/docs/transformers/pr_16780/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d(ZX,"href","/docs/transformers/pr_16780/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),d(ez,"href","/docs/transformers/pr_16780/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d(oz,"href","/docs/transformers/pr_16780/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d(rz,"href","/docs/transformers/pr_16780/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d(tz,"href","/docs/transformers/pr_16780/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d(az,"href","/docs/transformers/pr_16780/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d(nz,"href","/docs/transformers/pr_16780/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(sz,"href","/docs/transformers/pr_16780/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(lz,"href","/docs/transformers/pr_16780/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d(iz,"href","/docs/transformers/pr_16780/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(dz,"href","/docs/transformers/pr_16780/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(cz,"href","/docs/transformers/pr_16780/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(fz,"href","/docs/transformers/pr_16780/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d(mz,"href","/docs/transformers/pr_16780/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(vo,"class","docstring"),d(wr,"class","docstring"),d(i8,"id","transformers.TFAutoModelForMultipleChoice"),d(i8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(i8,"href","#transformers.TFAutoModelForMultipleChoice"),d($c,"class","relative group"),d(gz,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(hz,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(pz,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vt,"class","docstring"),d(_z,"href","/docs/transformers/pr_16780/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(uz,"href","/docs/transformers/pr_16780/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(bz,"href","/docs/transformers/pr_16780/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d(Fz,"href","/docs/transformers/pr_16780/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d(vz,"href","/docs/transformers/pr_16780/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d(Tz,"href","/docs/transformers/pr_16780/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d(Mz,"href","/docs/transformers/pr_16780/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(Ez,"href","/docs/transformers/pr_16780/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d(Cz,"href","/docs/transformers/pr_16780/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(wz,"href","/docs/transformers/pr_16780/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d(Az,"href","/docs/transformers/pr_16780/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d(yz,"href","/docs/transformers/pr_16780/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d(Lz,"href","/docs/transformers/pr_16780/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d(xz,"href","/docs/transformers/pr_16780/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d(kz,"href","/docs/transformers/pr_16780/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d(Sz,"href","/docs/transformers/pr_16780/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d(Rz,"href","/docs/transformers/pr_16780/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(To,"class","docstring"),d(Ar,"class","docstring"),d(A8,"id","transformers.TFAutoModelForTableQuestionAnswering"),d(A8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(A8,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(Nc,"class","relative group"),d(Bz,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Pz,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d($z,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Tt,"class","docstring"),d(Iz,"href","/docs/transformers/pr_16780/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(Mo,"class","docstring"),d(yr,"class","docstring"),d(L8,"id","transformers.TFAutoModelForTokenClassification"),d(L8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(L8,"href","#transformers.TFAutoModelForTokenClassification"),d(Gc,"class","relative group"),d(qz,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Nz,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(jz,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Mt,"class","docstring"),d(Dz,"href","/docs/transformers/pr_16780/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(Gz,"href","/docs/transformers/pr_16780/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(Oz,"href","/docs/transformers/pr_16780/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(Vz,"href","/docs/transformers/pr_16780/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d(Xz,"href","/docs/transformers/pr_16780/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(zz,"href","/docs/transformers/pr_16780/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(Qz,"href","/docs/transformers/pr_16780/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d(Wz,"href","/docs/transformers/pr_16780/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d(Hz,"href","/docs/transformers/pr_16780/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d(Uz,"href","/docs/transformers/pr_16780/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d(Jz,"href","/docs/transformers/pr_16780/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d(Yz,"href","/docs/transformers/pr_16780/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d(Kz,"href","/docs/transformers/pr_16780/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d(Zz,"href","/docs/transformers/pr_16780/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d(eQ,"href","/docs/transformers/pr_16780/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d(oQ,"href","/docs/transformers/pr_16780/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d(rQ,"href","/docs/transformers/pr_16780/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d(tQ,"href","/docs/transformers/pr_16780/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(aQ,"href","/docs/transformers/pr_16780/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d(nQ,"href","/docs/transformers/pr_16780/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(Eo,"class","docstring"),d(Lr,"class","docstring"),d(U8,"id","transformers.TFAutoModelForQuestionAnswering"),d(U8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(U8,"href","#transformers.TFAutoModelForQuestionAnswering"),d(Xc,"class","relative group"),d(sQ,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lQ,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(iQ,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Et,"class","docstring"),d(dQ,"href","/docs/transformers/pr_16780/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d(cQ,"href","/docs/transformers/pr_16780/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(fQ,"href","/docs/transformers/pr_16780/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d(mQ,"href","/docs/transformers/pr_16780/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d(gQ,"href","/docs/transformers/pr_16780/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d(hQ,"href","/docs/transformers/pr_16780/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d(pQ,"href","/docs/transformers/pr_16780/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d(_Q,"href","/docs/transformers/pr_16780/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(uQ,"href","/docs/transformers/pr_16780/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d(bQ,"href","/docs/transformers/pr_16780/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(FQ,"href","/docs/transformers/pr_16780/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),d(vQ,"href","/docs/transformers/pr_16780/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d(TQ,"href","/docs/transformers/pr_16780/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d(MQ,"href","/docs/transformers/pr_16780/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(EQ,"href","/docs/transformers/pr_16780/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d(CQ,"href","/docs/transformers/pr_16780/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d(wQ,"href","/docs/transformers/pr_16780/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d(AQ,"href","/docs/transformers/pr_16780/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d(yQ,"href","/docs/transformers/pr_16780/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d(LQ,"href","/docs/transformers/pr_16780/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(Co,"class","docstring"),d(xr,"class","docstring"),d(_7,"id","transformers.TFAutoModelForVision2Seq"),d(_7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(_7,"href","#transformers.TFAutoModelForVision2Seq"),d(Wc,"class","relative group"),d(xQ,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kQ,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(SQ,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ct,"class","docstring"),d(RQ,"href","/docs/transformers/pr_16780/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(wo,"class","docstring"),d(kr,"class","docstring"),d(b7,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(b7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(b7,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(Jc,"class","relative group"),d(BQ,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(PQ,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d($Q,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wt,"class","docstring"),d(IQ,"href","/docs/transformers/pr_16780/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(Ao,"class","docstring"),d(Sr,"class","docstring"),d(v7,"id","transformers.FlaxAutoModel"),d(v7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(v7,"href","#transformers.FlaxAutoModel"),d(Zc,"class","relative group"),d(qQ,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(NQ,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(jQ,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(At,"class","docstring"),d(DQ,"href","/docs/transformers/pr_16780/en/model_doc/albert#transformers.FlaxAlbertModel"),d(GQ,"href","/docs/transformers/pr_16780/en/model_doc/bart#transformers.FlaxBartModel"),d(OQ,"href","/docs/transformers/pr_16780/en/model_doc/beit#transformers.FlaxBeitModel"),d(VQ,"href","/docs/transformers/pr_16780/en/model_doc/bert#transformers.FlaxBertModel"),d(XQ,"href","/docs/transformers/pr_16780/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(zQ,"href","/docs/transformers/pr_16780/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(QQ,"href","/docs/transformers/pr_16780/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d(WQ,"href","/docs/transformers/pr_16780/en/model_doc/clip#transformers.FlaxCLIPModel"),d(HQ,"href","/docs/transformers/pr_16780/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d(UQ,"href","/docs/transformers/pr_16780/en/model_doc/electra#transformers.FlaxElectraModel"),d(JQ,"href","/docs/transformers/pr_16780/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d(YQ,"href","/docs/transformers/pr_16780/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d(KQ,"href","/docs/transformers/pr_16780/en/model_doc/gptj#transformers.FlaxGPTJModel"),d(ZQ,"href","/docs/transformers/pr_16780/en/model_doc/marian#transformers.FlaxMarianModel"),d(eW,"href","/docs/transformers/pr_16780/en/model_doc/mbart#transformers.FlaxMBartModel"),d(oW,"href","/docs/transformers/pr_16780/en/model_doc/mt5#transformers.FlaxMT5Model"),d(rW,"href","/docs/transformers/pr_16780/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d(tW,"href","/docs/transformers/pr_16780/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(aW,"href","/docs/transformers/pr_16780/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d(nW,"href","/docs/transformers/pr_16780/en/model_doc/t5#transformers.FlaxT5Model"),d(sW,"href","/docs/transformers/pr_16780/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(lW,"href","/docs/transformers/pr_16780/en/model_doc/vit#transformers.FlaxViTModel"),d(iW,"href","/docs/transformers/pr_16780/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(dW,"href","/docs/transformers/pr_16780/en/model_doc/xglm#transformers.FlaxXGLMModel"),d(cW,"href","/docs/transformers/pr_16780/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),d(yo,"class","docstring"),d(Rr,"class","docstring"),d(Q7,"id","transformers.FlaxAutoModelForCausalLM"),d(Q7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Q7,"href","#transformers.FlaxAutoModelForCausalLM"),d(rf,"class","relative group"),d(fW,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mW,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(gW,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yt,"class","docstring"),d(hW,"href","/docs/transformers/pr_16780/en/model_doc/bart#transformers.FlaxBartForCausalLM"),d(pW,"href","/docs/transformers/pr_16780/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(_W,"href","/docs/transformers/pr_16780/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d(uW,"href","/docs/transformers/pr_16780/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(bW,"href","/docs/transformers/pr_16780/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(Lo,"class","docstring"),d(Br,"class","docstring"),d(K7,"id","transformers.FlaxAutoModelForPreTraining"),d(K7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(K7,"href","#transformers.FlaxAutoModelForPreTraining"),d(nf,"class","relative group"),d(FW,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vW,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(TW,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Lt,"class","docstring"),d(MW,"href","/docs/transformers/pr_16780/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d(EW,"href","/docs/transformers/pr_16780/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(CW,"href","/docs/transformers/pr_16780/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(wW,"href","/docs/transformers/pr_16780/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d(AW,"href","/docs/transformers/pr_16780/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(yW,"href","/docs/transformers/pr_16780/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(LW,"href","/docs/transformers/pr_16780/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(xW,"href","/docs/transformers/pr_16780/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(kW,"href","/docs/transformers/pr_16780/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(SW,"href","/docs/transformers/pr_16780/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(RW,"href","/docs/transformers/pr_16780/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d(BW,"href","/docs/transformers/pr_16780/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(xo,"class","docstring"),d(Pr,"class","docstring"),d(fM,"id","transformers.FlaxAutoModelForMaskedLM"),d(fM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(fM,"href","#transformers.FlaxAutoModelForMaskedLM"),d(df,"class","relative group"),d(PW,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($W,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(IW,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xt,"class","docstring"),d(qW,"href","/docs/transformers/pr_16780/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d(NW,"href","/docs/transformers/pr_16780/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(jW,"href","/docs/transformers/pr_16780/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d(DW,"href","/docs/transformers/pr_16780/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(GW,"href","/docs/transformers/pr_16780/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d(OW,"href","/docs/transformers/pr_16780/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(VW,"href","/docs/transformers/pr_16780/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(XW,"href","/docs/transformers/pr_16780/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(zW,"href","/docs/transformers/pr_16780/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(QW,"href","/docs/transformers/pr_16780/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(ko,"class","docstring"),d($r,"class","docstring"),d(MM,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d(MM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(MM,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(mf,"class","relative group"),d(WW,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(HW,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(UW,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kt,"class","docstring"),d(JW,"href","/docs/transformers/pr_16780/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(YW,"href","/docs/transformers/pr_16780/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d(KW,"href","/docs/transformers/pr_16780/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d(ZW,"href","/docs/transformers/pr_16780/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d(eH,"href","/docs/transformers/pr_16780/en/model_doc/marian#transformers.FlaxMarianMTModel"),d(oH,"href","/docs/transformers/pr_16780/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(rH,"href","/docs/transformers/pr_16780/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(tH,"href","/docs/transformers/pr_16780/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(aH,"href","/docs/transformers/pr_16780/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(So,"class","docstring"),d(Ir,"class","docstring"),d(RM,"id","transformers.FlaxAutoModelForSequenceClassification"),d(RM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(RM,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(pf,"class","relative group"),d(nH,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(sH,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(lH,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(St,"class","docstring"),d(iH,"href","/docs/transformers/pr_16780/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(dH,"href","/docs/transformers/pr_16780/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d(cH,"href","/docs/transformers/pr_16780/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(fH,"href","/docs/transformers/pr_16780/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d(mH,"href","/docs/transformers/pr_16780/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(gH,"href","/docs/transformers/pr_16780/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d(hH,"href","/docs/transformers/pr_16780/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(pH,"href","/docs/transformers/pr_16780/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(_H,"href","/docs/transformers/pr_16780/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(uH,"href","/docs/transformers/pr_16780/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),d(Ro,"class","docstring"),d(qr,"class","docstring"),d(VM,"id","transformers.FlaxAutoModelForQuestionAnswering"),d(VM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(VM,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(bf,"class","relative group"),d(bH,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(FH,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(vH,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Rt,"class","docstring"),d(TH,"href","/docs/transformers/pr_16780/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d(MH,"href","/docs/transformers/pr_16780/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(EH,"href","/docs/transformers/pr_16780/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d(CH,"href","/docs/transformers/pr_16780/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(wH,"href","/docs/transformers/pr_16780/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d(AH,"href","/docs/transformers/pr_16780/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(yH,"href","/docs/transformers/pr_16780/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d(LH,"href","/docs/transformers/pr_16780/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(xH,"href","/docs/transformers/pr_16780/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d(kH,"href","/docs/transformers/pr_16780/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),d(Bo,"class","docstring"),d(Nr,"class","docstring"),d(e4,"id","transformers.FlaxAutoModelForTokenClassification"),d(e4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(e4,"href","#transformers.FlaxAutoModelForTokenClassification"),d(Tf,"class","relative group"),d(SH,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(RH,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(BH,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Bt,"class","docstring"),d(PH,"href","/docs/transformers/pr_16780/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d($H,"href","/docs/transformers/pr_16780/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(IH,"href","/docs/transformers/pr_16780/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d(qH,"href","/docs/transformers/pr_16780/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(NH,"href","/docs/transformers/pr_16780/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d(jH,"href","/docs/transformers/pr_16780/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(DH,"href","/docs/transformers/pr_16780/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d(GH,"href","/docs/transformers/pr_16780/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),d(Po,"class","docstring"),d(jr,"class","docstring"),d(d4,"id","transformers.FlaxAutoModelForMultipleChoice"),d(d4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(d4,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(Cf,"class","relative group"),d(OH,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(VH,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(XH,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Pt,"class","docstring"),d(zH,"href","/docs/transformers/pr_16780/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d(QH,"href","/docs/transformers/pr_16780/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d(WH,"href","/docs/transformers/pr_16780/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(HH,"href","/docs/transformers/pr_16780/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d(UH,"href","/docs/transformers/pr_16780/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d(JH,"href","/docs/transformers/pr_16780/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d(YH,"href","/docs/transformers/pr_16780/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d(KH,"href","/docs/transformers/pr_16780/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),d($o,"class","docstring"),d(Dr,"class","docstring"),d(b4,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(b4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(b4,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(yf,"class","relative group"),d(ZH,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(eU,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(oU,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($t,"class","docstring"),d(rU,"href","/docs/transformers/pr_16780/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d(Io,"class","docstring"),d(Gr,"class","docstring"),d(v4,"id","transformers.FlaxAutoModelForImageClassification"),d(v4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(v4,"href","#transformers.FlaxAutoModelForImageClassification"),d(kf,"class","relative group"),d(tU,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(aU,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(nU,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(It,"class","docstring"),d(sU,"href","/docs/transformers/pr_16780/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d(lU,"href","/docs/transformers/pr_16780/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(qo,"class","docstring"),d(Or,"class","docstring"),d(E4,"id","transformers.FlaxAutoModelForVision2Seq"),d(E4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(E4,"href","#transformers.FlaxAutoModelForVision2Seq"),d(Bf,"class","relative group"),d(iU,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dU,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(cU,"href","/docs/transformers/pr_16780/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qt,"class","docstring"),d(fU,"href","/docs/transformers/pr_16780/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(No,"class","docstring"),d(Vr,"class","docstring")},m(c,u){e(document.head,Z),b(c,io,u),b(c,de,u),e(de,Ce),e(Ce,lo),g(ge,lo,null),e(de,Me),e(de,Xo),e(Xo,qi),b(c,Nf,u),b(c,fa,u),e(fa,Ni),e(fa,ji),e(ji,CE),e(fa,jf),b(c,xe,u),b(c,co,u),e(co,Di),e(co,Gn),e(Gn,wE),e(co,On),e(co,Vn),e(Vn,AE),e(co,Gi),e(co,Xn),e(Xn,yE),e(co,Oi),b(c,Df,u),g(Da,c,u),b(c,fo,u),b(c,ue,u),e(ue,u9),e(ue,Vi),e(Vi,b9),e(ue,F9),b(c,zo,u),b(c,Ga,u),e(Ga,v9),e(Ga,Gf),e(Gf,T9),e(Ga,BIe),b(c,vRe,u),b(c,Xi,u),e(Xi,Of),e(Of,nY),g(LE,nY,null),e(Xi,PIe),e(Xi,sY),e(sY,$Ie),b(c,TRe,u),b(c,zn,u),e(zn,IIe),e(zn,lY),e(lY,qIe),e(zn,NIe),e(zn,iY),e(iY,jIe),e(zn,DIe),b(c,MRe,u),g(xE,c,u),b(c,ERe,u),b(c,M9,u),e(M9,GIe),b(c,CRe,u),g(Vf,c,u),b(c,wRe,u),b(c,zi,u),e(zi,Xf),e(Xf,dY),g(kE,dY,null),e(zi,OIe),e(zi,cY),e(cY,VIe),b(c,ARe,u),b(c,Qo,u),g(SE,Qo,null),e(Qo,XIe),e(Qo,RE),e(RE,zIe),e(RE,E9),e(E9,QIe),e(RE,WIe),e(Qo,HIe),e(Qo,BE),e(BE,UIe),e(BE,fY),e(fY,JIe),e(BE,YIe),e(Qo,KIe),e(Qo,mo),g(PE,mo,null),e(mo,ZIe),e(mo,mY),e(mY,eqe),e(mo,oqe),e(mo,Qi),e(Qi,rqe),e(Qi,gY),e(gY,tqe),e(Qi,aqe),e(Qi,hY),e(hY,nqe),e(Qi,sqe),e(mo,lqe),e(mo,F),e(F,zf),e(zf,pY),e(pY,iqe),e(zf,dqe),e(zf,C9),e(C9,cqe),e(zf,fqe),e(F,mqe),e(F,Qf),e(Qf,_Y),e(_Y,gqe),e(Qf,hqe),e(Qf,w9),e(w9,pqe),e(Qf,_qe),e(F,uqe),e(F,Wf),e(Wf,uY),e(uY,bqe),e(Wf,Fqe),e(Wf,A9),e(A9,vqe),e(Wf,Tqe),e(F,Mqe),e(F,Hf),e(Hf,bY),e(bY,Eqe),e(Hf,Cqe),e(Hf,y9),e(y9,wqe),e(Hf,Aqe),e(F,yqe),e(F,Uf),e(Uf,FY),e(FY,Lqe),e(Uf,xqe),e(Uf,L9),e(L9,kqe),e(Uf,Sqe),e(F,Rqe),e(F,Jf),e(Jf,vY),e(vY,Bqe),e(Jf,Pqe),e(Jf,x9),e(x9,$qe),e(Jf,Iqe),e(F,qqe),e(F,Yf),e(Yf,TY),e(TY,Nqe),e(Yf,jqe),e(Yf,k9),e(k9,Dqe),e(Yf,Gqe),e(F,Oqe),e(F,Kf),e(Kf,MY),e(MY,Vqe),e(Kf,Xqe),e(Kf,S9),e(S9,zqe),e(Kf,Qqe),e(F,Wqe),e(F,Zf),e(Zf,EY),e(EY,Hqe),e(Zf,Uqe),e(Zf,R9),e(R9,Jqe),e(Zf,Yqe),e(F,Kqe),e(F,em),e(em,CY),e(CY,Zqe),e(em,eNe),e(em,B9),e(B9,oNe),e(em,rNe),e(F,tNe),e(F,om),e(om,wY),e(wY,aNe),e(om,nNe),e(om,P9),e(P9,sNe),e(om,lNe),e(F,iNe),e(F,rm),e(rm,AY),e(AY,dNe),e(rm,cNe),e(rm,$9),e($9,fNe),e(rm,mNe),e(F,gNe),e(F,tm),e(tm,yY),e(yY,hNe),e(tm,pNe),e(tm,I9),e(I9,_Ne),e(tm,uNe),e(F,bNe),e(F,am),e(am,LY),e(LY,FNe),e(am,vNe),e(am,q9),e(q9,TNe),e(am,MNe),e(F,ENe),e(F,nm),e(nm,xY),e(xY,CNe),e(nm,wNe),e(nm,N9),e(N9,ANe),e(nm,yNe),e(F,LNe),e(F,sm),e(sm,kY),e(kY,xNe),e(sm,kNe),e(sm,j9),e(j9,SNe),e(sm,RNe),e(F,BNe),e(F,lm),e(lm,SY),e(SY,PNe),e(lm,$Ne),e(lm,D9),e(D9,INe),e(lm,qNe),e(F,NNe),e(F,im),e(im,RY),e(RY,jNe),e(im,DNe),e(im,G9),e(G9,GNe),e(im,ONe),e(F,VNe),e(F,dm),e(dm,BY),e(BY,XNe),e(dm,zNe),e(dm,O9),e(O9,QNe),e(dm,WNe),e(F,HNe),e(F,cm),e(cm,PY),e(PY,UNe),e(cm,JNe),e(cm,V9),e(V9,YNe),e(cm,KNe),e(F,ZNe),e(F,fm),e(fm,$Y),e($Y,eje),e(fm,oje),e(fm,X9),e(X9,rje),e(fm,tje),e(F,aje),e(F,mm),e(mm,IY),e(IY,nje),e(mm,sje),e(mm,z9),e(z9,lje),e(mm,ije),e(F,dje),e(F,gm),e(gm,qY),e(qY,cje),e(gm,fje),e(gm,Q9),e(Q9,mje),e(gm,gje),e(F,hje),e(F,hm),e(hm,NY),e(NY,pje),e(hm,_je),e(hm,W9),e(W9,uje),e(hm,bje),e(F,Fje),e(F,pm),e(pm,jY),e(jY,vje),e(pm,Tje),e(pm,H9),e(H9,Mje),e(pm,Eje),e(F,Cje),e(F,_m),e(_m,DY),e(DY,wje),e(_m,Aje),e(_m,U9),e(U9,yje),e(_m,Lje),e(F,xje),e(F,um),e(um,GY),e(GY,kje),e(um,Sje),e(um,J9),e(J9,Rje),e(um,Bje),e(F,Pje),e(F,bm),e(bm,OY),e(OY,$je),e(bm,Ije),e(bm,Y9),e(Y9,qje),e(bm,Nje),e(F,jje),e(F,Fm),e(Fm,VY),e(VY,Dje),e(Fm,Gje),e(Fm,K9),e(K9,Oje),e(Fm,Vje),e(F,Xje),e(F,vm),e(vm,XY),e(XY,zje),e(vm,Qje),e(vm,Z9),e(Z9,Wje),e(vm,Hje),e(F,Uje),e(F,Tm),e(Tm,zY),e(zY,Jje),e(Tm,Yje),e(Tm,ex),e(ex,Kje),e(Tm,Zje),e(F,eDe),e(F,Mm),e(Mm,QY),e(QY,oDe),e(Mm,rDe),e(Mm,ox),e(ox,tDe),e(Mm,aDe),e(F,nDe),e(F,Em),e(Em,WY),e(WY,sDe),e(Em,lDe),e(Em,rx),e(rx,iDe),e(Em,dDe),e(F,cDe),e(F,Cm),e(Cm,HY),e(HY,fDe),e(Cm,mDe),e(Cm,tx),e(tx,gDe),e(Cm,hDe),e(F,pDe),e(F,wm),e(wm,UY),e(UY,_De),e(wm,uDe),e(wm,ax),e(ax,bDe),e(wm,FDe),e(F,vDe),e(F,Am),e(Am,JY),e(JY,TDe),e(Am,MDe),e(Am,nx),e(nx,EDe),e(Am,CDe),e(F,wDe),e(F,ym),e(ym,YY),e(YY,ADe),e(ym,yDe),e(ym,sx),e(sx,LDe),e(ym,xDe),e(F,kDe),e(F,Lm),e(Lm,KY),e(KY,SDe),e(Lm,RDe),e(Lm,lx),e(lx,BDe),e(Lm,PDe),e(F,$De),e(F,xm),e(xm,ZY),e(ZY,IDe),e(xm,qDe),e(xm,ix),e(ix,NDe),e(xm,jDe),e(F,DDe),e(F,km),e(km,eK),e(eK,GDe),e(km,ODe),e(km,dx),e(dx,VDe),e(km,XDe),e(F,zDe),e(F,Sm),e(Sm,oK),e(oK,QDe),e(Sm,WDe),e(Sm,cx),e(cx,HDe),e(Sm,UDe),e(F,JDe),e(F,Rm),e(Rm,rK),e(rK,YDe),e(Rm,KDe),e(Rm,fx),e(fx,ZDe),e(Rm,eGe),e(F,oGe),e(F,Bm),e(Bm,tK),e(tK,rGe),e(Bm,tGe),e(Bm,mx),e(mx,aGe),e(Bm,nGe),e(F,sGe),e(F,Pm),e(Pm,aK),e(aK,lGe),e(Pm,iGe),e(Pm,gx),e(gx,dGe),e(Pm,cGe),e(F,fGe),e(F,$m),e($m,nK),e(nK,mGe),e($m,gGe),e($m,hx),e(hx,hGe),e($m,pGe),e(F,_Ge),e(F,Im),e(Im,sK),e(sK,uGe),e(Im,bGe),e(Im,px),e(px,FGe),e(Im,vGe),e(F,TGe),e(F,qm),e(qm,lK),e(lK,MGe),e(qm,EGe),e(qm,_x),e(_x,CGe),e(qm,wGe),e(F,AGe),e(F,Nm),e(Nm,iK),e(iK,yGe),e(Nm,LGe),e(Nm,ux),e(ux,xGe),e(Nm,kGe),e(F,SGe),e(F,jm),e(jm,dK),e(dK,RGe),e(jm,BGe),e(jm,bx),e(bx,PGe),e(jm,$Ge),e(F,IGe),e(F,Dm),e(Dm,cK),e(cK,qGe),e(Dm,NGe),e(Dm,Fx),e(Fx,jGe),e(Dm,DGe),e(F,GGe),e(F,Gm),e(Gm,fK),e(fK,OGe),e(Gm,VGe),e(Gm,vx),e(vx,XGe),e(Gm,zGe),e(F,QGe),e(F,Om),e(Om,mK),e(mK,WGe),e(Om,HGe),e(Om,Tx),e(Tx,UGe),e(Om,JGe),e(F,YGe),e(F,Vm),e(Vm,gK),e(gK,KGe),e(Vm,ZGe),e(Vm,Mx),e(Mx,eOe),e(Vm,oOe),e(F,rOe),e(F,Xm),e(Xm,hK),e(hK,tOe),e(Xm,aOe),e(Xm,Ex),e(Ex,nOe),e(Xm,sOe),e(F,lOe),e(F,zm),e(zm,pK),e(pK,iOe),e(zm,dOe),e(zm,Cx),e(Cx,cOe),e(zm,fOe),e(F,mOe),e(F,Qm),e(Qm,_K),e(_K,gOe),e(Qm,hOe),e(Qm,wx),e(wx,pOe),e(Qm,_Oe),e(F,uOe),e(F,Wm),e(Wm,uK),e(uK,bOe),e(Wm,FOe),e(Wm,Ax),e(Ax,vOe),e(Wm,TOe),e(F,MOe),e(F,Hm),e(Hm,bK),e(bK,EOe),e(Hm,COe),e(Hm,yx),e(yx,wOe),e(Hm,AOe),e(F,yOe),e(F,Um),e(Um,FK),e(FK,LOe),e(Um,xOe),e(Um,Lx),e(Lx,kOe),e(Um,SOe),e(F,ROe),e(F,Jm),e(Jm,vK),e(vK,BOe),e(Jm,POe),e(Jm,xx),e(xx,$Oe),e(Jm,IOe),e(F,qOe),e(F,Ym),e(Ym,TK),e(TK,NOe),e(Ym,jOe),e(Ym,kx),e(kx,DOe),e(Ym,GOe),e(F,OOe),e(F,Km),e(Km,MK),e(MK,VOe),e(Km,XOe),e(Km,Sx),e(Sx,zOe),e(Km,QOe),e(F,WOe),e(F,Zm),e(Zm,EK),e(EK,HOe),e(Zm,UOe),e(Zm,Rx),e(Rx,JOe),e(Zm,YOe),e(F,KOe),e(F,eg),e(eg,CK),e(CK,ZOe),e(eg,eVe),e(eg,Bx),e(Bx,oVe),e(eg,rVe),e(F,tVe),e(F,og),e(og,wK),e(wK,aVe),e(og,nVe),e(og,Px),e(Px,sVe),e(og,lVe),e(F,iVe),e(F,rg),e(rg,AK),e(AK,dVe),e(rg,cVe),e(rg,$x),e($x,fVe),e(rg,mVe),e(F,gVe),e(F,tg),e(tg,yK),e(yK,hVe),e(tg,pVe),e(tg,Ix),e(Ix,_Ve),e(tg,uVe),e(F,bVe),e(F,ag),e(ag,LK),e(LK,FVe),e(ag,vVe),e(ag,qx),e(qx,TVe),e(ag,MVe),e(F,EVe),e(F,ng),e(ng,xK),e(xK,CVe),e(ng,wVe),e(ng,Nx),e(Nx,AVe),e(ng,yVe),e(F,LVe),e(F,sg),e(sg,kK),e(kK,xVe),e(sg,kVe),e(sg,jx),e(jx,SVe),e(sg,RVe),e(F,BVe),e(F,lg),e(lg,SK),e(SK,PVe),e(lg,$Ve),e(lg,Dx),e(Dx,IVe),e(lg,qVe),e(F,NVe),e(F,ig),e(ig,RK),e(RK,jVe),e(ig,DVe),e(ig,Gx),e(Gx,GVe),e(ig,OVe),e(F,VVe),e(F,dg),e(dg,BK),e(BK,XVe),e(dg,zVe),e(dg,Ox),e(Ox,QVe),e(dg,WVe),e(F,HVe),e(F,cg),e(cg,PK),e(PK,UVe),e(cg,JVe),e(cg,Vx),e(Vx,YVe),e(cg,KVe),e(F,ZVe),e(F,fg),e(fg,$K),e($K,eXe),e(fg,oXe),e(fg,Xx),e(Xx,rXe),e(fg,tXe),e(F,aXe),e(F,mg),e(mg,IK),e(IK,nXe),e(mg,sXe),e(mg,zx),e(zx,lXe),e(mg,iXe),e(F,dXe),e(F,gg),e(gg,qK),e(qK,cXe),e(gg,fXe),e(gg,Qx),e(Qx,mXe),e(gg,gXe),e(F,hXe),e(F,hg),e(hg,NK),e(NK,pXe),e(hg,_Xe),e(hg,Wx),e(Wx,uXe),e(hg,bXe),e(F,FXe),e(F,pg),e(pg,jK),e(jK,vXe),e(pg,TXe),e(pg,Hx),e(Hx,MXe),e(pg,EXe),e(F,CXe),e(F,_g),e(_g,DK),e(DK,wXe),e(_g,AXe),e(_g,Ux),e(Ux,yXe),e(_g,LXe),e(F,xXe),e(F,ug),e(ug,GK),e(GK,kXe),e(ug,SXe),e(ug,Jx),e(Jx,RXe),e(ug,BXe),e(F,PXe),e(F,bg),e(bg,OK),e(OK,$Xe),e(bg,IXe),e(bg,Yx),e(Yx,qXe),e(bg,NXe),e(F,jXe),e(F,Fg),e(Fg,VK),e(VK,DXe),e(Fg,GXe),e(Fg,Kx),e(Kx,OXe),e(Fg,VXe),e(F,XXe),e(F,vg),e(vg,XK),e(XK,zXe),e(vg,QXe),e(vg,Zx),e(Zx,WXe),e(vg,HXe),e(F,UXe),e(F,Tg),e(Tg,zK),e(zK,JXe),e(Tg,YXe),e(Tg,ek),e(ek,KXe),e(Tg,ZXe),e(F,eze),e(F,Mg),e(Mg,QK),e(QK,oze),e(Mg,rze),e(Mg,ok),e(ok,tze),e(Mg,aze),e(F,nze),e(F,Eg),e(Eg,WK),e(WK,sze),e(Eg,lze),e(Eg,rk),e(rk,ize),e(Eg,dze),e(F,cze),e(F,Cg),e(Cg,HK),e(HK,fze),e(Cg,mze),e(Cg,tk),e(tk,gze),e(Cg,hze),e(F,pze),e(F,wg),e(wg,UK),e(UK,_ze),e(wg,uze),e(wg,ak),e(ak,bze),e(wg,Fze),e(F,vze),e(F,Ag),e(Ag,JK),e(JK,Tze),e(Ag,Mze),e(Ag,nk),e(nk,Eze),e(Ag,Cze),e(F,wze),e(F,yg),e(yg,YK),e(YK,Aze),e(yg,yze),e(yg,sk),e(sk,Lze),e(yg,xze),e(F,kze),e(F,Lg),e(Lg,KK),e(KK,Sze),e(Lg,Rze),e(Lg,lk),e(lk,Bze),e(Lg,Pze),e(F,$ze),e(F,xg),e(xg,ZK),e(ZK,Ize),e(xg,qze),e(xg,ik),e(ik,Nze),e(xg,jze),e(F,Dze),e(F,kg),e(kg,eZ),e(eZ,Gze),e(kg,Oze),e(kg,dk),e(dk,Vze),e(kg,Xze),e(F,zze),e(F,Sg),e(Sg,oZ),e(oZ,Qze),e(Sg,Wze),e(Sg,ck),e(ck,Hze),e(Sg,Uze),e(F,Jze),e(F,Rg),e(Rg,rZ),e(rZ,Yze),e(Rg,Kze),e(Rg,fk),e(fk,Zze),e(Rg,eQe),e(F,oQe),e(F,Bg),e(Bg,tZ),e(tZ,rQe),e(Bg,tQe),e(Bg,mk),e(mk,aQe),e(Bg,nQe),e(F,sQe),e(F,Pg),e(Pg,aZ),e(aZ,lQe),e(Pg,iQe),e(Pg,gk),e(gk,dQe),e(Pg,cQe),e(F,fQe),e(F,$g),e($g,nZ),e(nZ,mQe),e($g,gQe),e($g,hk),e(hk,hQe),e($g,pQe),e(F,_Qe),e(F,Ig),e(Ig,sZ),e(sZ,uQe),e(Ig,bQe),e(Ig,pk),e(pk,FQe),e(Ig,vQe),e(F,TQe),e(F,qg),e(qg,lZ),e(lZ,MQe),e(qg,EQe),e(qg,_k),e(_k,CQe),e(qg,wQe),e(mo,AQe),e(mo,iZ),e(iZ,yQe),e(mo,LQe),g($E,mo,null),e(Qo,xQe),e(Qo,Ng),g(IE,Ng,null),e(Ng,kQe),e(Ng,dZ),e(dZ,SQe),b(c,yRe,u),b(c,Wi,u),e(Wi,jg),e(jg,cZ),g(qE,cZ,null),e(Wi,RQe),e(Wi,fZ),e(fZ,BQe),b(c,LRe,u),b(c,Wo,u),g(NE,Wo,null),e(Wo,PQe),e(Wo,jE),e(jE,$Qe),e(jE,uk),e(uk,IQe),e(jE,qQe),e(Wo,NQe),e(Wo,DE),e(DE,jQe),e(DE,mZ),e(mZ,DQe),e(DE,GQe),e(Wo,OQe),e(Wo,go),g(GE,go,null),e(go,VQe),e(go,gZ),e(gZ,XQe),e(go,zQe),e(go,Oa),e(Oa,QQe),e(Oa,hZ),e(hZ,WQe),e(Oa,HQe),e(Oa,pZ),e(pZ,UQe),e(Oa,JQe),e(Oa,_Z),e(_Z,YQe),e(Oa,KQe),e(go,ZQe),e(go,E),e(E,Qn),e(Qn,uZ),e(uZ,eWe),e(Qn,oWe),e(Qn,bk),e(bk,rWe),e(Qn,tWe),e(Qn,Fk),e(Fk,aWe),e(Qn,nWe),e(E,sWe),e(E,Wn),e(Wn,bZ),e(bZ,lWe),e(Wn,iWe),e(Wn,vk),e(vk,dWe),e(Wn,cWe),e(Wn,Tk),e(Tk,fWe),e(Wn,mWe),e(E,gWe),e(E,Hn),e(Hn,FZ),e(FZ,hWe),e(Hn,pWe),e(Hn,Mk),e(Mk,_We),e(Hn,uWe),e(Hn,Ek),e(Ek,bWe),e(Hn,FWe),e(E,vWe),e(E,Dg),e(Dg,vZ),e(vZ,TWe),e(Dg,MWe),e(Dg,Ck),e(Ck,EWe),e(Dg,CWe),e(E,wWe),e(E,Un),e(Un,TZ),e(TZ,AWe),e(Un,yWe),e(Un,wk),e(wk,LWe),e(Un,xWe),e(Un,Ak),e(Ak,kWe),e(Un,SWe),e(E,RWe),e(E,Gg),e(Gg,MZ),e(MZ,BWe),e(Gg,PWe),e(Gg,yk),e(yk,$We),e(Gg,IWe),e(E,qWe),e(E,Og),e(Og,EZ),e(EZ,NWe),e(Og,jWe),e(Og,Lk),e(Lk,DWe),e(Og,GWe),e(E,OWe),e(E,Vg),e(Vg,CZ),e(CZ,VWe),e(Vg,XWe),e(Vg,xk),e(xk,zWe),e(Vg,QWe),e(E,WWe),e(E,Jn),e(Jn,wZ),e(wZ,HWe),e(Jn,UWe),e(Jn,kk),e(kk,JWe),e(Jn,YWe),e(Jn,Sk),e(Sk,KWe),e(Jn,ZWe),e(E,eHe),e(E,Yn),e(Yn,AZ),e(AZ,oHe),e(Yn,rHe),e(Yn,Rk),e(Rk,tHe),e(Yn,aHe),e(Yn,Bk),e(Bk,nHe),e(Yn,sHe),e(E,lHe),e(E,Kn),e(Kn,yZ),e(yZ,iHe),e(Kn,dHe),e(Kn,Pk),e(Pk,cHe),e(Kn,fHe),e(Kn,$k),e($k,mHe),e(Kn,gHe),e(E,hHe),e(E,Xg),e(Xg,LZ),e(LZ,pHe),e(Xg,_He),e(Xg,Ik),e(Ik,uHe),e(Xg,bHe),e(E,FHe),e(E,zg),e(zg,xZ),e(xZ,vHe),e(zg,THe),e(zg,qk),e(qk,MHe),e(zg,EHe),e(E,CHe),e(E,Zn),e(Zn,kZ),e(kZ,wHe),e(Zn,AHe),e(Zn,Nk),e(Nk,yHe),e(Zn,LHe),e(Zn,jk),e(jk,xHe),e(Zn,kHe),e(E,SHe),e(E,Qg),e(Qg,SZ),e(SZ,RHe),e(Qg,BHe),e(Qg,Dk),e(Dk,PHe),e(Qg,$He),e(E,IHe),e(E,es),e(es,RZ),e(RZ,qHe),e(es,NHe),e(es,Gk),e(Gk,jHe),e(es,DHe),e(es,Ok),e(Ok,GHe),e(es,OHe),e(E,VHe),e(E,os),e(os,BZ),e(BZ,XHe),e(os,zHe),e(os,Vk),e(Vk,QHe),e(os,WHe),e(os,Xk),e(Xk,HHe),e(os,UHe),e(E,JHe),e(E,rs),e(rs,PZ),e(PZ,YHe),e(rs,KHe),e(rs,zk),e(zk,ZHe),e(rs,eUe),e(rs,$Z),e($Z,oUe),e(rs,rUe),e(E,tUe),e(E,Wg),e(Wg,IZ),e(IZ,aUe),e(Wg,nUe),e(Wg,Qk),e(Qk,sUe),e(Wg,lUe),e(E,iUe),e(E,ts),e(ts,qZ),e(qZ,dUe),e(ts,cUe),e(ts,Wk),e(Wk,fUe),e(ts,mUe),e(ts,Hk),e(Hk,gUe),e(ts,hUe),e(E,pUe),e(E,Hg),e(Hg,NZ),e(NZ,_Ue),e(Hg,uUe),e(Hg,Uk),e(Uk,bUe),e(Hg,FUe),e(E,vUe),e(E,as),e(as,jZ),e(jZ,TUe),e(as,MUe),e(as,Jk),e(Jk,EUe),e(as,CUe),e(as,Yk),e(Yk,wUe),e(as,AUe),e(E,yUe),e(E,ns),e(ns,DZ),e(DZ,LUe),e(ns,xUe),e(ns,Kk),e(Kk,kUe),e(ns,SUe),e(ns,Zk),e(Zk,RUe),e(ns,BUe),e(E,PUe),e(E,ss),e(ss,GZ),e(GZ,$Ue),e(ss,IUe),e(ss,eS),e(eS,qUe),e(ss,NUe),e(ss,oS),e(oS,jUe),e(ss,DUe),e(E,GUe),e(E,Ug),e(Ug,OZ),e(OZ,OUe),e(Ug,VUe),e(Ug,rS),e(rS,XUe),e(Ug,zUe),e(E,QUe),e(E,ls),e(ls,VZ),e(VZ,WUe),e(ls,HUe),e(ls,tS),e(tS,UUe),e(ls,JUe),e(ls,aS),e(aS,YUe),e(ls,KUe),e(E,ZUe),e(E,Jg),e(Jg,XZ),e(XZ,eJe),e(Jg,oJe),e(Jg,nS),e(nS,rJe),e(Jg,tJe),e(E,aJe),e(E,is),e(is,zZ),e(zZ,nJe),e(is,sJe),e(is,sS),e(sS,lJe),e(is,iJe),e(is,lS),e(lS,dJe),e(is,cJe),e(E,fJe),e(E,ds),e(ds,QZ),e(QZ,mJe),e(ds,gJe),e(ds,iS),e(iS,hJe),e(ds,pJe),e(ds,dS),e(dS,_Je),e(ds,uJe),e(E,bJe),e(E,cs),e(cs,WZ),e(WZ,FJe),e(cs,vJe),e(cs,cS),e(cS,TJe),e(cs,MJe),e(cs,fS),e(fS,EJe),e(cs,CJe),e(E,wJe),e(E,fs),e(fs,HZ),e(HZ,AJe),e(fs,yJe),e(fs,mS),e(mS,LJe),e(fs,xJe),e(fs,gS),e(gS,kJe),e(fs,SJe),e(E,RJe),e(E,ms),e(ms,UZ),e(UZ,BJe),e(ms,PJe),e(ms,hS),e(hS,$Je),e(ms,IJe),e(ms,pS),e(pS,qJe),e(ms,NJe),e(E,jJe),e(E,Yg),e(Yg,JZ),e(JZ,DJe),e(Yg,GJe),e(Yg,_S),e(_S,OJe),e(Yg,VJe),e(E,XJe),e(E,gs),e(gs,YZ),e(YZ,zJe),e(gs,QJe),e(gs,uS),e(uS,WJe),e(gs,HJe),e(gs,bS),e(bS,UJe),e(gs,JJe),e(E,YJe),e(E,hs),e(hs,KZ),e(KZ,KJe),e(hs,ZJe),e(hs,FS),e(FS,eYe),e(hs,oYe),e(hs,vS),e(vS,rYe),e(hs,tYe),e(E,aYe),e(E,ps),e(ps,ZZ),e(ZZ,nYe),e(ps,sYe),e(ps,TS),e(TS,lYe),e(ps,iYe),e(ps,MS),e(MS,dYe),e(ps,cYe),e(E,fYe),e(E,_s),e(_s,eee),e(eee,mYe),e(_s,gYe),e(_s,ES),e(ES,hYe),e(_s,pYe),e(_s,CS),e(CS,_Ye),e(_s,uYe),e(E,bYe),e(E,us),e(us,oee),e(oee,FYe),e(us,vYe),e(us,wS),e(wS,TYe),e(us,MYe),e(us,AS),e(AS,EYe),e(us,CYe),e(E,wYe),e(E,bs),e(bs,ree),e(ree,AYe),e(bs,yYe),e(bs,yS),e(yS,LYe),e(bs,xYe),e(bs,LS),e(LS,kYe),e(bs,SYe),e(E,RYe),e(E,Kg),e(Kg,tee),e(tee,BYe),e(Kg,PYe),e(Kg,xS),e(xS,$Ye),e(Kg,IYe),e(E,qYe),e(E,Fs),e(Fs,aee),e(aee,NYe),e(Fs,jYe),e(Fs,kS),e(kS,DYe),e(Fs,GYe),e(Fs,SS),e(SS,OYe),e(Fs,VYe),e(E,XYe),e(E,Zg),e(Zg,nee),e(nee,zYe),e(Zg,QYe),e(Zg,RS),e(RS,WYe),e(Zg,HYe),e(E,UYe),e(E,eh),e(eh,see),e(see,JYe),e(eh,YYe),e(eh,BS),e(BS,KYe),e(eh,ZYe),e(E,eKe),e(E,vs),e(vs,lee),e(lee,oKe),e(vs,rKe),e(vs,PS),e(PS,tKe),e(vs,aKe),e(vs,$S),e($S,nKe),e(vs,sKe),e(E,lKe),e(E,Ts),e(Ts,iee),e(iee,iKe),e(Ts,dKe),e(Ts,IS),e(IS,cKe),e(Ts,fKe),e(Ts,qS),e(qS,mKe),e(Ts,gKe),e(E,hKe),e(E,oh),e(oh,dee),e(dee,pKe),e(oh,_Ke),e(oh,NS),e(NS,uKe),e(oh,bKe),e(E,FKe),e(E,Ms),e(Ms,cee),e(cee,vKe),e(Ms,TKe),e(Ms,jS),e(jS,MKe),e(Ms,EKe),e(Ms,DS),e(DS,CKe),e(Ms,wKe),e(E,AKe),e(E,Es),e(Es,fee),e(fee,yKe),e(Es,LKe),e(Es,GS),e(GS,xKe),e(Es,kKe),e(Es,OS),e(OS,SKe),e(Es,RKe),e(E,BKe),e(E,Cs),e(Cs,mee),e(mee,PKe),e(Cs,$Ke),e(Cs,VS),e(VS,IKe),e(Cs,qKe),e(Cs,XS),e(XS,NKe),e(Cs,jKe),e(E,DKe),e(E,ws),e(ws,gee),e(gee,GKe),e(ws,OKe),e(ws,zS),e(zS,VKe),e(ws,XKe),e(ws,QS),e(QS,zKe),e(ws,QKe),e(E,WKe),e(E,As),e(As,hee),e(hee,HKe),e(As,UKe),e(As,WS),e(WS,JKe),e(As,YKe),e(As,HS),e(HS,KKe),e(As,ZKe),e(E,eZe),e(E,rh),e(rh,pee),e(pee,oZe),e(rh,rZe),e(rh,US),e(US,tZe),e(rh,aZe),e(E,nZe),e(E,th),e(th,_ee),e(_ee,sZe),e(th,lZe),e(th,JS),e(JS,iZe),e(th,dZe),e(E,cZe),e(E,ah),e(ah,uee),e(uee,fZe),e(ah,mZe),e(ah,YS),e(YS,gZe),e(ah,hZe),e(E,pZe),e(E,nh),e(nh,bee),e(bee,_Ze),e(nh,uZe),e(nh,KS),e(KS,bZe),e(nh,FZe),e(E,vZe),e(E,ys),e(ys,Fee),e(Fee,TZe),e(ys,MZe),e(ys,ZS),e(ZS,EZe),e(ys,CZe),e(ys,eR),e(eR,wZe),e(ys,AZe),e(E,yZe),e(E,sh),e(sh,vee),e(vee,LZe),e(sh,xZe),e(sh,oR),e(oR,kZe),e(sh,SZe),e(E,RZe),e(E,Ls),e(Ls,Tee),e(Tee,BZe),e(Ls,PZe),e(Ls,rR),e(rR,$Ze),e(Ls,IZe),e(Ls,tR),e(tR,qZe),e(Ls,NZe),e(E,jZe),e(E,xs),e(xs,Mee),e(Mee,DZe),e(xs,GZe),e(xs,aR),e(aR,OZe),e(xs,VZe),e(xs,nR),e(nR,XZe),e(xs,zZe),e(E,QZe),e(E,ks),e(ks,Eee),e(Eee,WZe),e(ks,HZe),e(ks,sR),e(sR,UZe),e(ks,JZe),e(ks,lR),e(lR,YZe),e(ks,KZe),e(E,ZZe),e(E,Ss),e(Ss,Cee),e(Cee,eeo),e(Ss,oeo),e(Ss,iR),e(iR,reo),e(Ss,teo),e(Ss,dR),e(dR,aeo),e(Ss,neo),e(E,seo),e(E,Rs),e(Rs,wee),e(wee,leo),e(Rs,ieo),e(Rs,cR),e(cR,deo),e(Rs,ceo),e(Rs,fR),e(fR,feo),e(Rs,meo),e(E,geo),e(E,Bs),e(Bs,Aee),e(Aee,heo),e(Bs,peo),e(Bs,mR),e(mR,_eo),e(Bs,ueo),e(Bs,gR),e(gR,beo),e(Bs,Feo),e(E,veo),e(E,lh),e(lh,yee),e(yee,Teo),e(lh,Meo),e(lh,hR),e(hR,Eeo),e(lh,Ceo),e(E,weo),e(E,ih),e(ih,Lee),e(Lee,Aeo),e(ih,yeo),e(ih,pR),e(pR,Leo),e(ih,xeo),e(E,keo),e(E,Ps),e(Ps,xee),e(xee,Seo),e(Ps,Reo),e(Ps,_R),e(_R,Beo),e(Ps,Peo),e(Ps,uR),e(uR,$eo),e(Ps,Ieo),e(E,qeo),e(E,$s),e($s,kee),e(kee,Neo),e($s,jeo),e($s,bR),e(bR,Deo),e($s,Geo),e($s,FR),e(FR,Oeo),e($s,Veo),e(E,Xeo),e(E,Is),e(Is,See),e(See,zeo),e(Is,Qeo),e(Is,vR),e(vR,Weo),e(Is,Heo),e(Is,TR),e(TR,Ueo),e(Is,Jeo),e(E,Yeo),e(E,dh),e(dh,Ree),e(Ree,Keo),e(dh,Zeo),e(dh,MR),e(MR,eoo),e(dh,ooo),e(E,roo),e(E,ch),e(ch,Bee),e(Bee,too),e(ch,aoo),e(ch,ER),e(ER,noo),e(ch,soo),e(E,loo),e(E,fh),e(fh,Pee),e(Pee,ioo),e(fh,doo),e(fh,CR),e(CR,coo),e(fh,foo),e(E,moo),e(E,mh),e(mh,$ee),e($ee,goo),e(mh,hoo),e(mh,wR),e(wR,poo),e(mh,_oo),e(E,uoo),e(E,gh),e(gh,Iee),e(Iee,boo),e(gh,Foo),e(gh,AR),e(AR,voo),e(gh,Too),e(E,Moo),e(E,qs),e(qs,qee),e(qee,Eoo),e(qs,Coo),e(qs,yR),e(yR,woo),e(qs,Aoo),e(qs,LR),e(LR,yoo),e(qs,Loo),e(E,xoo),e(E,hh),e(hh,Nee),e(Nee,koo),e(hh,Soo),e(hh,xR),e(xR,Roo),e(hh,Boo),e(E,Poo),e(E,ph),e(ph,jee),e(jee,$oo),e(ph,Ioo),e(ph,kR),e(kR,qoo),e(ph,Noo),e(E,joo),e(E,Ns),e(Ns,Dee),e(Dee,Doo),e(Ns,Goo),e(Ns,SR),e(SR,Ooo),e(Ns,Voo),e(Ns,RR),e(RR,Xoo),e(Ns,zoo),e(E,Qoo),e(E,js),e(js,Gee),e(Gee,Woo),e(js,Hoo),e(js,BR),e(BR,Uoo),e(js,Joo),e(js,PR),e(PR,Yoo),e(js,Koo),e(go,Zoo),e(go,Oee),e(Oee,ero),e(go,oro),g(OE,go,null),e(Wo,rro),e(Wo,_h),g(VE,_h,null),e(_h,tro),e(_h,Vee),e(Vee,aro),b(c,xRe,u),b(c,Hi,u),e(Hi,uh),e(uh,Xee),g(XE,Xee,null),e(Hi,nro),e(Hi,zee),e(zee,sro),b(c,kRe,u),b(c,Ho,u),g(zE,Ho,null),e(Ho,lro),e(Ho,QE),e(QE,iro),e(QE,$R),e($R,dro),e(QE,cro),e(Ho,fro),e(Ho,WE),e(WE,mro),e(WE,Qee),e(Qee,gro),e(WE,hro),e(Ho,pro),e(Ho,$e),g(HE,$e,null),e($e,_ro),e($e,Wee),e(Wee,uro),e($e,bro),e($e,Va),e(Va,Fro),e(Va,Hee),e(Hee,vro),e(Va,Tro),e(Va,Uee),e(Uee,Mro),e(Va,Ero),e(Va,Jee),e(Jee,Cro),e(Va,wro),e($e,Aro),e($e,ee),e(ee,bh),e(bh,Yee),e(Yee,yro),e(bh,Lro),e(bh,IR),e(IR,xro),e(bh,kro),e(ee,Sro),e(ee,Fh),e(Fh,Kee),e(Kee,Rro),e(Fh,Bro),e(Fh,qR),e(qR,Pro),e(Fh,$ro),e(ee,Iro),e(ee,vh),e(vh,Zee),e(Zee,qro),e(vh,Nro),e(vh,NR),e(NR,jro),e(vh,Dro),e(ee,Gro),e(ee,Th),e(Th,eoe),e(eoe,Oro),e(Th,Vro),e(Th,jR),e(jR,Xro),e(Th,zro),e(ee,Qro),e(ee,Mh),e(Mh,ooe),e(ooe,Wro),e(Mh,Hro),e(Mh,DR),e(DR,Uro),e(Mh,Jro),e(ee,Yro),e(ee,Eh),e(Eh,roe),e(roe,Kro),e(Eh,Zro),e(Eh,GR),e(GR,eto),e(Eh,oto),e(ee,rto),e(ee,Ch),e(Ch,toe),e(toe,tto),e(Ch,ato),e(Ch,OR),e(OR,nto),e(Ch,sto),e(ee,lto),e(ee,wh),e(wh,aoe),e(aoe,ito),e(wh,dto),e(wh,VR),e(VR,cto),e(wh,fto),e(ee,mto),e(ee,Ah),e(Ah,noe),e(noe,gto),e(Ah,hto),e(Ah,XR),e(XR,pto),e(Ah,_to),e(ee,uto),e(ee,yh),e(yh,soe),e(soe,bto),e(yh,Fto),e(yh,zR),e(zR,vto),e(yh,Tto),e(ee,Mto),e(ee,Lh),e(Lh,loe),e(loe,Eto),e(Lh,Cto),e(Lh,QR),e(QR,wto),e(Lh,Ato),e(ee,yto),e(ee,xh),e(xh,ioe),e(ioe,Lto),e(xh,xto),e(xh,WR),e(WR,kto),e(xh,Sto),e(ee,Rto),e(ee,kh),e(kh,doe),e(doe,Bto),e(kh,Pto),e(kh,HR),e(HR,$to),e(kh,Ito),e(ee,qto),e(ee,Sh),e(Sh,coe),e(coe,Nto),e(Sh,jto),e(Sh,UR),e(UR,Dto),e(Sh,Gto),e(ee,Oto),e(ee,Rh),e(Rh,foe),e(foe,Vto),e(Rh,Xto),e(Rh,JR),e(JR,zto),e(Rh,Qto),e(ee,Wto),e(ee,Bh),e(Bh,moe),e(moe,Hto),e(Bh,Uto),e(Bh,YR),e(YR,Jto),e(Bh,Yto),e(ee,Kto),e(ee,Ph),e(Ph,goe),e(goe,Zto),e(Ph,eao),e(Ph,KR),e(KR,oao),e(Ph,rao),e(ee,tao),e(ee,$h),e($h,hoe),e(hoe,aao),e($h,nao),e($h,ZR),e(ZR,sao),e($h,lao),e(ee,iao),e(ee,Ih),e(Ih,poe),e(poe,dao),e(Ih,cao),e(Ih,eB),e(eB,fao),e(Ih,mao),e($e,gao),g(qh,$e,null),e($e,hao),e($e,_oe),e(_oe,pao),e($e,_ao),g(UE,$e,null),e(Ho,uao),e(Ho,Nh),g(JE,Nh,null),e(Nh,bao),e(Nh,uoe),e(uoe,Fao),b(c,SRe,u),b(c,Ui,u),e(Ui,jh),e(jh,boe),g(YE,boe,null),e(Ui,vao),e(Ui,Foe),e(Foe,Tao),b(c,RRe,u),b(c,Uo,u),g(KE,Uo,null),e(Uo,Mao),e(Uo,ZE),e(ZE,Eao),e(ZE,oB),e(oB,Cao),e(ZE,wao),e(Uo,Aao),e(Uo,eC),e(eC,yao),e(eC,voe),e(voe,Lao),e(eC,xao),e(Uo,kao),e(Uo,Ie),g(oC,Ie,null),e(Ie,Sao),e(Ie,Toe),e(Toe,Rao),e(Ie,Bao),e(Ie,Ji),e(Ji,Pao),e(Ji,Moe),e(Moe,$ao),e(Ji,Iao),e(Ji,Eoe),e(Eoe,qao),e(Ji,Nao),e(Ie,jao),e(Ie,ke),e(ke,Dh),e(Dh,Coe),e(Coe,Dao),e(Dh,Gao),e(Dh,rB),e(rB,Oao),e(Dh,Vao),e(ke,Xao),e(ke,Gh),e(Gh,woe),e(woe,zao),e(Gh,Qao),e(Gh,tB),e(tB,Wao),e(Gh,Hao),e(ke,Uao),e(ke,Oh),e(Oh,Aoe),e(Aoe,Jao),e(Oh,Yao),e(Oh,aB),e(aB,Kao),e(Oh,Zao),e(ke,eno),e(ke,Vh),e(Vh,yoe),e(yoe,ono),e(Vh,rno),e(Vh,nB),e(nB,tno),e(Vh,ano),e(ke,nno),e(ke,Xh),e(Xh,Loe),e(Loe,sno),e(Xh,lno),e(Xh,sB),e(sB,ino),e(Xh,dno),e(ke,cno),e(ke,zh),e(zh,xoe),e(xoe,fno),e(zh,mno),e(zh,lB),e(lB,gno),e(zh,hno),e(ke,pno),e(ke,Qh),e(Qh,koe),e(koe,_no),e(Qh,uno),e(Qh,iB),e(iB,bno),e(Qh,Fno),e(ke,vno),e(ke,Wh),e(Wh,Soe),e(Soe,Tno),e(Wh,Mno),e(Wh,dB),e(dB,Eno),e(Wh,Cno),e(Ie,wno),g(Hh,Ie,null),e(Ie,Ano),e(Ie,Roe),e(Roe,yno),e(Ie,Lno),g(rC,Ie,null),e(Uo,xno),e(Uo,Uh),g(tC,Uh,null),e(Uh,kno),e(Uh,Boe),e(Boe,Sno),b(c,BRe,u),b(c,Yi,u),e(Yi,Jh),e(Jh,Poe),g(aC,Poe,null),e(Yi,Rno),e(Yi,$oe),e($oe,Bno),b(c,PRe,u),b(c,Jo,u),g(nC,Jo,null),e(Jo,Pno),e(Jo,Ki),e(Ki,$no),e(Ki,cB),e(cB,Ino),e(Ki,qno),e(Ki,fB),e(fB,Nno),e(Ki,jno),e(Jo,Dno),e(Jo,sC),e(sC,Gno),e(sC,Ioe),e(Ioe,Ono),e(sC,Vno),e(Jo,Xno),e(Jo,Xr),g(lC,Xr,null),e(Xr,zno),e(Xr,qoe),e(qoe,Qno),e(Xr,Wno),e(Xr,Zi),e(Zi,Hno),e(Zi,Noe),e(Noe,Uno),e(Zi,Jno),e(Zi,mB),e(mB,Yno),e(Zi,Kno),e(Xr,Zno),e(Xr,joe),e(joe,eso),e(Xr,oso),g(iC,Xr,null),e(Jo,rso),e(Jo,qe),g(dC,qe,null),e(qe,tso),e(qe,Doe),e(Doe,aso),e(qe,nso),e(qe,Xa),e(Xa,sso),e(Xa,Goe),e(Goe,lso),e(Xa,iso),e(Xa,Ooe),e(Ooe,dso),e(Xa,cso),e(Xa,Voe),e(Voe,fso),e(Xa,mso),e(qe,gso),e(qe,T),e(T,Yh),e(Yh,Xoe),e(Xoe,hso),e(Yh,pso),e(Yh,gB),e(gB,_so),e(Yh,uso),e(T,bso),e(T,Kh),e(Kh,zoe),e(zoe,Fso),e(Kh,vso),e(Kh,hB),e(hB,Tso),e(Kh,Mso),e(T,Eso),e(T,Zh),e(Zh,Qoe),e(Qoe,Cso),e(Zh,wso),e(Zh,pB),e(pB,Aso),e(Zh,yso),e(T,Lso),e(T,ep),e(ep,Woe),e(Woe,xso),e(ep,kso),e(ep,_B),e(_B,Sso),e(ep,Rso),e(T,Bso),e(T,op),e(op,Hoe),e(Hoe,Pso),e(op,$so),e(op,uB),e(uB,Iso),e(op,qso),e(T,Nso),e(T,rp),e(rp,Uoe),e(Uoe,jso),e(rp,Dso),e(rp,bB),e(bB,Gso),e(rp,Oso),e(T,Vso),e(T,tp),e(tp,Joe),e(Joe,Xso),e(tp,zso),e(tp,FB),e(FB,Qso),e(tp,Wso),e(T,Hso),e(T,ap),e(ap,Yoe),e(Yoe,Uso),e(ap,Jso),e(ap,vB),e(vB,Yso),e(ap,Kso),e(T,Zso),e(T,np),e(np,Koe),e(Koe,elo),e(np,olo),e(np,TB),e(TB,rlo),e(np,tlo),e(T,alo),e(T,sp),e(sp,Zoe),e(Zoe,nlo),e(sp,slo),e(sp,MB),e(MB,llo),e(sp,ilo),e(T,dlo),e(T,lp),e(lp,ere),e(ere,clo),e(lp,flo),e(lp,EB),e(EB,mlo),e(lp,glo),e(T,hlo),e(T,ip),e(ip,ore),e(ore,plo),e(ip,_lo),e(ip,CB),e(CB,ulo),e(ip,blo),e(T,Flo),e(T,dp),e(dp,rre),e(rre,vlo),e(dp,Tlo),e(dp,wB),e(wB,Mlo),e(dp,Elo),e(T,Clo),e(T,cp),e(cp,tre),e(tre,wlo),e(cp,Alo),e(cp,AB),e(AB,ylo),e(cp,Llo),e(T,xlo),e(T,fp),e(fp,are),e(are,klo),e(fp,Slo),e(fp,yB),e(yB,Rlo),e(fp,Blo),e(T,Plo),e(T,mp),e(mp,nre),e(nre,$lo),e(mp,Ilo),e(mp,LB),e(LB,qlo),e(mp,Nlo),e(T,jlo),e(T,gp),e(gp,sre),e(sre,Dlo),e(gp,Glo),e(gp,xB),e(xB,Olo),e(gp,Vlo),e(T,Xlo),e(T,hp),e(hp,lre),e(lre,zlo),e(hp,Qlo),e(hp,kB),e(kB,Wlo),e(hp,Hlo),e(T,Ulo),e(T,pp),e(pp,ire),e(ire,Jlo),e(pp,Ylo),e(pp,SB),e(SB,Klo),e(pp,Zlo),e(T,eio),e(T,_p),e(_p,dre),e(dre,oio),e(_p,rio),e(_p,RB),e(RB,tio),e(_p,aio),e(T,nio),e(T,up),e(up,cre),e(cre,sio),e(up,lio),e(up,BB),e(BB,iio),e(up,dio),e(T,cio),e(T,bp),e(bp,fre),e(fre,fio),e(bp,mio),e(bp,PB),e(PB,gio),e(bp,hio),e(T,pio),e(T,Fp),e(Fp,mre),e(mre,_io),e(Fp,uio),e(Fp,$B),e($B,bio),e(Fp,Fio),e(T,vio),e(T,vp),e(vp,gre),e(gre,Tio),e(vp,Mio),e(vp,IB),e(IB,Eio),e(vp,Cio),e(T,wio),e(T,Tp),e(Tp,hre),e(hre,Aio),e(Tp,yio),e(Tp,qB),e(qB,Lio),e(Tp,xio),e(T,kio),e(T,Mp),e(Mp,pre),e(pre,Sio),e(Mp,Rio),e(Mp,NB),e(NB,Bio),e(Mp,Pio),e(T,$io),e(T,Ep),e(Ep,_re),e(_re,Iio),e(Ep,qio),e(Ep,jB),e(jB,Nio),e(Ep,jio),e(T,Dio),e(T,Cp),e(Cp,ure),e(ure,Gio),e(Cp,Oio),e(Cp,DB),e(DB,Vio),e(Cp,Xio),e(T,zio),e(T,wp),e(wp,bre),e(bre,Qio),e(wp,Wio),e(wp,GB),e(GB,Hio),e(wp,Uio),e(T,Jio),e(T,Ds),e(Ds,Fre),e(Fre,Yio),e(Ds,Kio),e(Ds,OB),e(OB,Zio),e(Ds,edo),e(Ds,VB),e(VB,odo),e(Ds,rdo),e(T,tdo),e(T,Ap),e(Ap,vre),e(vre,ado),e(Ap,ndo),e(Ap,XB),e(XB,sdo),e(Ap,ldo),e(T,ido),e(T,yp),e(yp,Tre),e(Tre,ddo),e(yp,cdo),e(yp,zB),e(zB,fdo),e(yp,mdo),e(T,gdo),e(T,Lp),e(Lp,Mre),e(Mre,hdo),e(Lp,pdo),e(Lp,QB),e(QB,_do),e(Lp,udo),e(T,bdo),e(T,xp),e(xp,Ere),e(Ere,Fdo),e(xp,vdo),e(xp,WB),e(WB,Tdo),e(xp,Mdo),e(T,Edo),e(T,kp),e(kp,Cre),e(Cre,Cdo),e(kp,wdo),e(kp,HB),e(HB,Ado),e(kp,ydo),e(T,Ldo),e(T,Sp),e(Sp,wre),e(wre,xdo),e(Sp,kdo),e(Sp,UB),e(UB,Sdo),e(Sp,Rdo),e(T,Bdo),e(T,Rp),e(Rp,Are),e(Are,Pdo),e(Rp,$do),e(Rp,JB),e(JB,Ido),e(Rp,qdo),e(T,Ndo),e(T,Bp),e(Bp,yre),e(yre,jdo),e(Bp,Ddo),e(Bp,YB),e(YB,Gdo),e(Bp,Odo),e(T,Vdo),e(T,Pp),e(Pp,Lre),e(Lre,Xdo),e(Pp,zdo),e(Pp,KB),e(KB,Qdo),e(Pp,Wdo),e(T,Hdo),e(T,$p),e($p,xre),e(xre,Udo),e($p,Jdo),e($p,ZB),e(ZB,Ydo),e($p,Kdo),e(T,Zdo),e(T,Ip),e(Ip,kre),e(kre,eco),e(Ip,oco),e(Ip,eP),e(eP,rco),e(Ip,tco),e(T,aco),e(T,qp),e(qp,Sre),e(Sre,nco),e(qp,sco),e(qp,oP),e(oP,lco),e(qp,ico),e(T,dco),e(T,Np),e(Np,Rre),e(Rre,cco),e(Np,fco),e(Np,rP),e(rP,mco),e(Np,gco),e(T,hco),e(T,jp),e(jp,Bre),e(Bre,pco),e(jp,_co),e(jp,tP),e(tP,uco),e(jp,bco),e(T,Fco),e(T,Dp),e(Dp,Pre),e(Pre,vco),e(Dp,Tco),e(Dp,aP),e(aP,Mco),e(Dp,Eco),e(T,Cco),e(T,Gp),e(Gp,$re),e($re,wco),e(Gp,Aco),e(Gp,nP),e(nP,yco),e(Gp,Lco),e(T,xco),e(T,Op),e(Op,Ire),e(Ire,kco),e(Op,Sco),e(Op,sP),e(sP,Rco),e(Op,Bco),e(T,Pco),e(T,Vp),e(Vp,qre),e(qre,$co),e(Vp,Ico),e(Vp,lP),e(lP,qco),e(Vp,Nco),e(T,jco),e(T,Xp),e(Xp,Nre),e(Nre,Dco),e(Xp,Gco),e(Xp,iP),e(iP,Oco),e(Xp,Vco),e(T,Xco),e(T,zp),e(zp,jre),e(jre,zco),e(zp,Qco),e(zp,dP),e(dP,Wco),e(zp,Hco),e(T,Uco),e(T,Qp),e(Qp,Dre),e(Dre,Jco),e(Qp,Yco),e(Qp,cP),e(cP,Kco),e(Qp,Zco),e(T,efo),e(T,Wp),e(Wp,Gre),e(Gre,ofo),e(Wp,rfo),e(Wp,fP),e(fP,tfo),e(Wp,afo),e(T,nfo),e(T,Hp),e(Hp,Ore),e(Ore,sfo),e(Hp,lfo),e(Hp,mP),e(mP,ifo),e(Hp,dfo),e(T,cfo),e(T,Up),e(Up,Vre),e(Vre,ffo),e(Up,mfo),e(Up,gP),e(gP,gfo),e(Up,hfo),e(T,pfo),e(T,Jp),e(Jp,Xre),e(Xre,_fo),e(Jp,ufo),e(Jp,hP),e(hP,bfo),e(Jp,Ffo),e(T,vfo),e(T,Yp),e(Yp,zre),e(zre,Tfo),e(Yp,Mfo),e(Yp,pP),e(pP,Efo),e(Yp,Cfo),e(T,wfo),e(T,Kp),e(Kp,Qre),e(Qre,Afo),e(Kp,yfo),e(Kp,_P),e(_P,Lfo),e(Kp,xfo),e(T,kfo),e(T,Zp),e(Zp,Wre),e(Wre,Sfo),e(Zp,Rfo),e(Zp,uP),e(uP,Bfo),e(Zp,Pfo),e(T,$fo),e(T,e_),e(e_,Hre),e(Hre,Ifo),e(e_,qfo),e(e_,bP),e(bP,Nfo),e(e_,jfo),e(T,Dfo),e(T,o_),e(o_,Ure),e(Ure,Gfo),e(o_,Ofo),e(o_,FP),e(FP,Vfo),e(o_,Xfo),e(T,zfo),e(T,r_),e(r_,Jre),e(Jre,Qfo),e(r_,Wfo),e(r_,vP),e(vP,Hfo),e(r_,Ufo),e(T,Jfo),e(T,t_),e(t_,Yre),e(Yre,Yfo),e(t_,Kfo),e(t_,TP),e(TP,Zfo),e(t_,emo),e(T,omo),e(T,a_),e(a_,Kre),e(Kre,rmo),e(a_,tmo),e(a_,MP),e(MP,amo),e(a_,nmo),e(T,smo),e(T,n_),e(n_,Zre),e(Zre,lmo),e(n_,imo),e(n_,EP),e(EP,dmo),e(n_,cmo),e(T,fmo),e(T,s_),e(s_,ete),e(ete,mmo),e(s_,gmo),e(s_,CP),e(CP,hmo),e(s_,pmo),e(T,_mo),e(T,l_),e(l_,ote),e(ote,umo),e(l_,bmo),e(l_,wP),e(wP,Fmo),e(l_,vmo),e(T,Tmo),e(T,i_),e(i_,rte),e(rte,Mmo),e(i_,Emo),e(i_,AP),e(AP,Cmo),e(i_,wmo),e(T,Amo),e(T,d_),e(d_,tte),e(tte,ymo),e(d_,Lmo),e(d_,yP),e(yP,xmo),e(d_,kmo),e(T,Smo),e(T,c_),e(c_,ate),e(ate,Rmo),e(c_,Bmo),e(c_,LP),e(LP,Pmo),e(c_,$mo),e(T,Imo),e(T,f_),e(f_,nte),e(nte,qmo),e(f_,Nmo),e(f_,xP),e(xP,jmo),e(f_,Dmo),e(T,Gmo),e(T,m_),e(m_,ste),e(ste,Omo),e(m_,Vmo),e(m_,kP),e(kP,Xmo),e(m_,zmo),e(T,Qmo),e(T,g_),e(g_,lte),e(lte,Wmo),e(g_,Hmo),e(g_,SP),e(SP,Umo),e(g_,Jmo),e(T,Ymo),e(T,h_),e(h_,ite),e(ite,Kmo),e(h_,Zmo),e(h_,RP),e(RP,ego),e(h_,ogo),e(T,rgo),e(T,p_),e(p_,dte),e(dte,tgo),e(p_,ago),e(p_,BP),e(BP,ngo),e(p_,sgo),e(T,lgo),e(T,__),e(__,cte),e(cte,igo),e(__,dgo),e(__,PP),e(PP,cgo),e(__,fgo),e(T,mgo),e(T,u_),e(u_,fte),e(fte,ggo),e(u_,hgo),e(u_,$P),e($P,pgo),e(u_,_go),e(T,ugo),e(T,b_),e(b_,mte),e(mte,bgo),e(b_,Fgo),e(b_,IP),e(IP,vgo),e(b_,Tgo),e(T,Mgo),e(T,F_),e(F_,gte),e(gte,Ego),e(F_,Cgo),e(F_,qP),e(qP,wgo),e(F_,Ago),e(T,ygo),e(T,v_),e(v_,hte),e(hte,Lgo),e(v_,xgo),e(v_,NP),e(NP,kgo),e(v_,Sgo),e(T,Rgo),e(T,T_),e(T_,pte),e(pte,Bgo),e(T_,Pgo),e(T_,jP),e(jP,$go),e(T_,Igo),e(T,qgo),e(T,M_),e(M_,_te),e(_te,Ngo),e(M_,jgo),e(M_,DP),e(DP,Dgo),e(M_,Ggo),e(T,Ogo),e(T,E_),e(E_,ute),e(ute,Vgo),e(E_,Xgo),e(E_,GP),e(GP,zgo),e(E_,Qgo),e(T,Wgo),e(T,C_),e(C_,bte),e(bte,Hgo),e(C_,Ugo),e(C_,OP),e(OP,Jgo),e(C_,Ygo),e(T,Kgo),e(T,w_),e(w_,Fte),e(Fte,Zgo),e(w_,eho),e(w_,VP),e(VP,oho),e(w_,rho),e(T,tho),e(T,A_),e(A_,vte),e(vte,aho),e(A_,nho),e(A_,XP),e(XP,sho),e(A_,lho),e(T,iho),e(T,y_),e(y_,Tte),e(Tte,dho),e(y_,cho),e(y_,zP),e(zP,fho),e(y_,mho),e(T,gho),e(T,L_),e(L_,Mte),e(Mte,hho),e(L_,pho),e(L_,QP),e(QP,_ho),e(L_,uho),e(T,bho),e(T,x_),e(x_,Ete),e(Ete,Fho),e(x_,vho),e(x_,WP),e(WP,Tho),e(x_,Mho),e(T,Eho),e(T,k_),e(k_,Cte),e(Cte,Cho),e(k_,who),e(k_,HP),e(HP,Aho),e(k_,yho),e(T,Lho),e(T,S_),e(S_,wte),e(wte,xho),e(S_,kho),e(S_,UP),e(UP,Sho),e(S_,Rho),e(T,Bho),e(T,R_),e(R_,Ate),e(Ate,Pho),e(R_,$ho),e(R_,JP),e(JP,Iho),e(R_,qho),e(T,Nho),e(T,B_),e(B_,yte),e(yte,jho),e(B_,Dho),e(B_,YP),e(YP,Gho),e(B_,Oho),e(T,Vho),e(T,P_),e(P_,Lte),e(Lte,Xho),e(P_,zho),e(P_,KP),e(KP,Qho),e(P_,Who),e(qe,Hho),e(qe,$_),e($_,Uho),e($_,xte),e(xte,Jho),e($_,Yho),e($_,kte),e(kte,Kho),e(qe,Zho),e(qe,Ste),e(Ste,epo),e(qe,opo),g(cC,qe,null),b(c,$Re,u),b(c,ed,u),e(ed,I_),e(I_,Rte),g(fC,Rte,null),e(ed,rpo),e(ed,Bte),e(Bte,tpo),b(c,IRe,u),b(c,Yo,u),g(mC,Yo,null),e(Yo,apo),e(Yo,od),e(od,npo),e(od,ZP),e(ZP,spo),e(od,lpo),e(od,e$),e(e$,ipo),e(od,dpo),e(Yo,cpo),e(Yo,gC),e(gC,fpo),e(gC,Pte),e(Pte,mpo),e(gC,gpo),e(Yo,hpo),e(Yo,zr),g(hC,zr,null),e(zr,ppo),e(zr,$te),e($te,_po),e(zr,upo),e(zr,rd),e(rd,bpo),e(rd,Ite),e(Ite,Fpo),e(rd,vpo),e(rd,o$),e(o$,Tpo),e(rd,Mpo),e(zr,Epo),e(zr,qte),e(qte,Cpo),e(zr,wpo),g(pC,zr,null),e(Yo,Apo),e(Yo,Ne),g(_C,Ne,null),e(Ne,ypo),e(Ne,Nte),e(Nte,Lpo),e(Ne,xpo),e(Ne,za),e(za,kpo),e(za,jte),e(jte,Spo),e(za,Rpo),e(za,Dte),e(Dte,Bpo),e(za,Ppo),e(za,Gte),e(Gte,$po),e(za,Ipo),e(Ne,qpo),e(Ne,S),e(S,q_),e(q_,Ote),e(Ote,Npo),e(q_,jpo),e(q_,r$),e(r$,Dpo),e(q_,Gpo),e(S,Opo),e(S,N_),e(N_,Vte),e(Vte,Vpo),e(N_,Xpo),e(N_,t$),e(t$,zpo),e(N_,Qpo),e(S,Wpo),e(S,j_),e(j_,Xte),e(Xte,Hpo),e(j_,Upo),e(j_,a$),e(a$,Jpo),e(j_,Ypo),e(S,Kpo),e(S,D_),e(D_,zte),e(zte,Zpo),e(D_,e_o),e(D_,n$),e(n$,o_o),e(D_,r_o),e(S,t_o),e(S,G_),e(G_,Qte),e(Qte,a_o),e(G_,n_o),e(G_,s$),e(s$,s_o),e(G_,l_o),e(S,i_o),e(S,O_),e(O_,Wte),e(Wte,d_o),e(O_,c_o),e(O_,l$),e(l$,f_o),e(O_,m_o),e(S,g_o),e(S,V_),e(V_,Hte),e(Hte,h_o),e(V_,p_o),e(V_,i$),e(i$,__o),e(V_,u_o),e(S,b_o),e(S,X_),e(X_,Ute),e(Ute,F_o),e(X_,v_o),e(X_,d$),e(d$,T_o),e(X_,M_o),e(S,E_o),e(S,z_),e(z_,Jte),e(Jte,C_o),e(z_,w_o),e(z_,c$),e(c$,A_o),e(z_,y_o),e(S,L_o),e(S,Q_),e(Q_,Yte),e(Yte,x_o),e(Q_,k_o),e(Q_,f$),e(f$,S_o),e(Q_,R_o),e(S,B_o),e(S,W_),e(W_,Kte),e(Kte,P_o),e(W_,$_o),e(W_,m$),e(m$,I_o),e(W_,q_o),e(S,N_o),e(S,H_),e(H_,Zte),e(Zte,j_o),e(H_,D_o),e(H_,g$),e(g$,G_o),e(H_,O_o),e(S,V_o),e(S,U_),e(U_,eae),e(eae,X_o),e(U_,z_o),e(U_,h$),e(h$,Q_o),e(U_,W_o),e(S,H_o),e(S,J_),e(J_,oae),e(oae,U_o),e(J_,J_o),e(J_,p$),e(p$,Y_o),e(J_,K_o),e(S,Z_o),e(S,Y_),e(Y_,rae),e(rae,euo),e(Y_,ouo),e(Y_,_$),e(_$,ruo),e(Y_,tuo),e(S,auo),e(S,K_),e(K_,tae),e(tae,nuo),e(K_,suo),e(K_,u$),e(u$,luo),e(K_,iuo),e(S,duo),e(S,Z_),e(Z_,aae),e(aae,cuo),e(Z_,fuo),e(Z_,b$),e(b$,muo),e(Z_,guo),e(S,huo),e(S,eu),e(eu,nae),e(nae,puo),e(eu,_uo),e(eu,F$),e(F$,uuo),e(eu,buo),e(S,Fuo),e(S,ou),e(ou,sae),e(sae,vuo),e(ou,Tuo),e(ou,v$),e(v$,Muo),e(ou,Euo),e(S,Cuo),e(S,ru),e(ru,lae),e(lae,wuo),e(ru,Auo),e(ru,T$),e(T$,yuo),e(ru,Luo),e(S,xuo),e(S,tu),e(tu,iae),e(iae,kuo),e(tu,Suo),e(tu,M$),e(M$,Ruo),e(tu,Buo),e(S,Puo),e(S,au),e(au,dae),e(dae,$uo),e(au,Iuo),e(au,E$),e(E$,quo),e(au,Nuo),e(S,juo),e(S,nu),e(nu,cae),e(cae,Duo),e(nu,Guo),e(nu,C$),e(C$,Ouo),e(nu,Vuo),e(S,Xuo),e(S,su),e(su,fae),e(fae,zuo),e(su,Quo),e(su,w$),e(w$,Wuo),e(su,Huo),e(S,Uuo),e(S,lu),e(lu,mae),e(mae,Juo),e(lu,Yuo),e(lu,A$),e(A$,Kuo),e(lu,Zuo),e(S,e1o),e(S,iu),e(iu,gae),e(gae,o1o),e(iu,r1o),e(iu,y$),e(y$,t1o),e(iu,a1o),e(S,n1o),e(S,du),e(du,hae),e(hae,s1o),e(du,l1o),e(du,L$),e(L$,i1o),e(du,d1o),e(S,c1o),e(S,cu),e(cu,pae),e(pae,f1o),e(cu,m1o),e(cu,x$),e(x$,g1o),e(cu,h1o),e(S,p1o),e(S,fu),e(fu,_ae),e(_ae,_1o),e(fu,u1o),e(fu,k$),e(k$,b1o),e(fu,F1o),e(S,v1o),e(S,mu),e(mu,uae),e(uae,T1o),e(mu,M1o),e(mu,S$),e(S$,E1o),e(mu,C1o),e(S,w1o),e(S,gu),e(gu,bae),e(bae,A1o),e(gu,y1o),e(gu,R$),e(R$,L1o),e(gu,x1o),e(S,k1o),e(S,hu),e(hu,Fae),e(Fae,S1o),e(hu,R1o),e(hu,B$),e(B$,B1o),e(hu,P1o),e(S,$1o),e(S,pu),e(pu,vae),e(vae,I1o),e(pu,q1o),e(pu,P$),e(P$,N1o),e(pu,j1o),e(S,D1o),e(S,_u),e(_u,Tae),e(Tae,G1o),e(_u,O1o),e(_u,$$),e($$,V1o),e(_u,X1o),e(S,z1o),e(S,uu),e(uu,Mae),e(Mae,Q1o),e(uu,W1o),e(uu,I$),e(I$,H1o),e(uu,U1o),e(S,J1o),e(S,bu),e(bu,Eae),e(Eae,Y1o),e(bu,K1o),e(bu,q$),e(q$,Z1o),e(bu,ebo),e(S,obo),e(S,Fu),e(Fu,Cae),e(Cae,rbo),e(Fu,tbo),e(Fu,N$),e(N$,abo),e(Fu,nbo),e(S,sbo),e(S,vu),e(vu,wae),e(wae,lbo),e(vu,ibo),e(vu,j$),e(j$,dbo),e(vu,cbo),e(S,fbo),e(S,Tu),e(Tu,Aae),e(Aae,mbo),e(Tu,gbo),e(Tu,D$),e(D$,hbo),e(Tu,pbo),e(Ne,_bo),e(Ne,Mu),e(Mu,ubo),e(Mu,yae),e(yae,bbo),e(Mu,Fbo),e(Mu,Lae),e(Lae,vbo),e(Ne,Tbo),e(Ne,xae),e(xae,Mbo),e(Ne,Ebo),g(uC,Ne,null),b(c,qRe,u),b(c,td,u),e(td,Eu),e(Eu,kae),g(bC,kae,null),e(td,Cbo),e(td,Sae),e(Sae,wbo),b(c,NRe,u),b(c,Ko,u),g(FC,Ko,null),e(Ko,Abo),e(Ko,ad),e(ad,ybo),e(ad,G$),e(G$,Lbo),e(ad,xbo),e(ad,O$),e(O$,kbo),e(ad,Sbo),e(Ko,Rbo),e(Ko,vC),e(vC,Bbo),e(vC,Rae),e(Rae,Pbo),e(vC,$bo),e(Ko,Ibo),e(Ko,Qr),g(TC,Qr,null),e(Qr,qbo),e(Qr,Bae),e(Bae,Nbo),e(Qr,jbo),e(Qr,nd),e(nd,Dbo),e(nd,Pae),e(Pae,Gbo),e(nd,Obo),e(nd,V$),e(V$,Vbo),e(nd,Xbo),e(Qr,zbo),e(Qr,$ae),e($ae,Qbo),e(Qr,Wbo),g(MC,Qr,null),e(Ko,Hbo),e(Ko,je),g(EC,je,null),e(je,Ubo),e(je,Iae),e(Iae,Jbo),e(je,Ybo),e(je,Qa),e(Qa,Kbo),e(Qa,qae),e(qae,Zbo),e(Qa,e2o),e(Qa,Nae),e(Nae,o2o),e(Qa,r2o),e(Qa,jae),e(jae,t2o),e(Qa,a2o),e(je,n2o),e(je,$),e($,Cu),e(Cu,Dae),e(Dae,s2o),e(Cu,l2o),e(Cu,X$),e(X$,i2o),e(Cu,d2o),e($,c2o),e($,wu),e(wu,Gae),e(Gae,f2o),e(wu,m2o),e(wu,z$),e(z$,g2o),e(wu,h2o),e($,p2o),e($,Au),e(Au,Oae),e(Oae,_2o),e(Au,u2o),e(Au,Q$),e(Q$,b2o),e(Au,F2o),e($,v2o),e($,yu),e(yu,Vae),e(Vae,T2o),e(yu,M2o),e(yu,W$),e(W$,E2o),e(yu,C2o),e($,w2o),e($,Lu),e(Lu,Xae),e(Xae,A2o),e(Lu,y2o),e(Lu,H$),e(H$,L2o),e(Lu,x2o),e($,k2o),e($,xu),e(xu,zae),e(zae,S2o),e(xu,R2o),e(xu,U$),e(U$,B2o),e(xu,P2o),e($,$2o),e($,ku),e(ku,Qae),e(Qae,I2o),e(ku,q2o),e(ku,J$),e(J$,N2o),e(ku,j2o),e($,D2o),e($,Su),e(Su,Wae),e(Wae,G2o),e(Su,O2o),e(Su,Y$),e(Y$,V2o),e(Su,X2o),e($,z2o),e($,Ru),e(Ru,Hae),e(Hae,Q2o),e(Ru,W2o),e(Ru,K$),e(K$,H2o),e(Ru,U2o),e($,J2o),e($,Bu),e(Bu,Uae),e(Uae,Y2o),e(Bu,K2o),e(Bu,Z$),e(Z$,Z2o),e(Bu,eFo),e($,oFo),e($,Pu),e(Pu,Jae),e(Jae,rFo),e(Pu,tFo),e(Pu,eI),e(eI,aFo),e(Pu,nFo),e($,sFo),e($,$u),e($u,Yae),e(Yae,lFo),e($u,iFo),e($u,oI),e(oI,dFo),e($u,cFo),e($,fFo),e($,Iu),e(Iu,Kae),e(Kae,mFo),e(Iu,gFo),e(Iu,rI),e(rI,hFo),e(Iu,pFo),e($,_Fo),e($,qu),e(qu,Zae),e(Zae,uFo),e(qu,bFo),e(qu,tI),e(tI,FFo),e(qu,vFo),e($,TFo),e($,Nu),e(Nu,ene),e(ene,MFo),e(Nu,EFo),e(Nu,aI),e(aI,CFo),e(Nu,wFo),e($,AFo),e($,ju),e(ju,one),e(one,yFo),e(ju,LFo),e(ju,nI),e(nI,xFo),e(ju,kFo),e($,SFo),e($,Du),e(Du,rne),e(rne,RFo),e(Du,BFo),e(Du,sI),e(sI,PFo),e(Du,$Fo),e($,IFo),e($,Gu),e(Gu,tne),e(tne,qFo),e(Gu,NFo),e(Gu,lI),e(lI,jFo),e(Gu,DFo),e($,GFo),e($,Ou),e(Ou,ane),e(ane,OFo),e(Ou,VFo),e(Ou,iI),e(iI,XFo),e(Ou,zFo),e($,QFo),e($,Vu),e(Vu,nne),e(nne,WFo),e(Vu,HFo),e(Vu,dI),e(dI,UFo),e(Vu,JFo),e($,YFo),e($,Xu),e(Xu,sne),e(sne,KFo),e(Xu,ZFo),e(Xu,cI),e(cI,evo),e(Xu,ovo),e($,rvo),e($,zu),e(zu,lne),e(lne,tvo),e(zu,avo),e(zu,fI),e(fI,nvo),e(zu,svo),e($,lvo),e($,Qu),e(Qu,ine),e(ine,ivo),e(Qu,dvo),e(Qu,mI),e(mI,cvo),e(Qu,fvo),e($,mvo),e($,Wu),e(Wu,dne),e(dne,gvo),e(Wu,hvo),e(Wu,gI),e(gI,pvo),e(Wu,_vo),e($,uvo),e($,Hu),e(Hu,cne),e(cne,bvo),e(Hu,Fvo),e(Hu,hI),e(hI,vvo),e(Hu,Tvo),e($,Mvo),e($,Uu),e(Uu,fne),e(fne,Evo),e(Uu,Cvo),e(Uu,pI),e(pI,wvo),e(Uu,Avo),e($,yvo),e($,Ju),e(Ju,mne),e(mne,Lvo),e(Ju,xvo),e(Ju,_I),e(_I,kvo),e(Ju,Svo),e($,Rvo),e($,Yu),e(Yu,gne),e(gne,Bvo),e(Yu,Pvo),e(Yu,uI),e(uI,$vo),e(Yu,Ivo),e($,qvo),e($,Ku),e(Ku,hne),e(hne,Nvo),e(Ku,jvo),e(Ku,bI),e(bI,Dvo),e(Ku,Gvo),e($,Ovo),e($,Zu),e(Zu,pne),e(pne,Vvo),e(Zu,Xvo),e(Zu,FI),e(FI,zvo),e(Zu,Qvo),e($,Wvo),e($,e1),e(e1,_ne),e(_ne,Hvo),e(e1,Uvo),e(e1,vI),e(vI,Jvo),e(e1,Yvo),e($,Kvo),e($,o1),e(o1,une),e(une,Zvo),e(o1,e6o),e(o1,TI),e(TI,o6o),e(o1,r6o),e($,t6o),e($,r1),e(r1,bne),e(bne,a6o),e(r1,n6o),e(r1,MI),e(MI,s6o),e(r1,l6o),e($,i6o),e($,t1),e(t1,Fne),e(Fne,d6o),e(t1,c6o),e(t1,EI),e(EI,f6o),e(t1,m6o),e($,g6o),e($,a1),e(a1,vne),e(vne,h6o),e(a1,p6o),e(a1,CI),e(CI,_6o),e(a1,u6o),e(je,b6o),e(je,n1),e(n1,F6o),e(n1,Tne),e(Tne,v6o),e(n1,T6o),e(n1,Mne),e(Mne,M6o),e(je,E6o),e(je,Ene),e(Ene,C6o),e(je,w6o),g(CC,je,null),b(c,jRe,u),b(c,sd,u),e(sd,s1),e(s1,Cne),g(wC,Cne,null),e(sd,A6o),e(sd,wne),e(wne,y6o),b(c,DRe,u),b(c,Zo,u),g(AC,Zo,null),e(Zo,L6o),e(Zo,ld),e(ld,x6o),e(ld,wI),e(wI,k6o),e(ld,S6o),e(ld,AI),e(AI,R6o),e(ld,B6o),e(Zo,P6o),e(Zo,yC),e(yC,$6o),e(yC,Ane),e(Ane,I6o),e(yC,q6o),e(Zo,N6o),e(Zo,Wr),g(LC,Wr,null),e(Wr,j6o),e(Wr,yne),e(yne,D6o),e(Wr,G6o),e(Wr,id),e(id,O6o),e(id,Lne),e(Lne,V6o),e(id,X6o),e(id,yI),e(yI,z6o),e(id,Q6o),e(Wr,W6o),e(Wr,xne),e(xne,H6o),e(Wr,U6o),g(xC,Wr,null),e(Zo,J6o),e(Zo,De),g(kC,De,null),e(De,Y6o),e(De,kne),e(kne,K6o),e(De,Z6o),e(De,Wa),e(Wa,e0o),e(Wa,Sne),e(Sne,o0o),e(Wa,r0o),e(Wa,Rne),e(Rne,t0o),e(Wa,a0o),e(Wa,Bne),e(Bne,n0o),e(Wa,s0o),e(De,l0o),e(De,I),e(I,l1),e(l1,Pne),e(Pne,i0o),e(l1,d0o),e(l1,LI),e(LI,c0o),e(l1,f0o),e(I,m0o),e(I,i1),e(i1,$ne),e($ne,g0o),e(i1,h0o),e(i1,xI),e(xI,p0o),e(i1,_0o),e(I,u0o),e(I,d1),e(d1,Ine),e(Ine,b0o),e(d1,F0o),e(d1,kI),e(kI,v0o),e(d1,T0o),e(I,M0o),e(I,c1),e(c1,qne),e(qne,E0o),e(c1,C0o),e(c1,SI),e(SI,w0o),e(c1,A0o),e(I,y0o),e(I,f1),e(f1,Nne),e(Nne,L0o),e(f1,x0o),e(f1,RI),e(RI,k0o),e(f1,S0o),e(I,R0o),e(I,m1),e(m1,jne),e(jne,B0o),e(m1,P0o),e(m1,BI),e(BI,$0o),e(m1,I0o),e(I,q0o),e(I,g1),e(g1,Dne),e(Dne,N0o),e(g1,j0o),e(g1,PI),e(PI,D0o),e(g1,G0o),e(I,O0o),e(I,h1),e(h1,Gne),e(Gne,V0o),e(h1,X0o),e(h1,$I),e($I,z0o),e(h1,Q0o),e(I,W0o),e(I,p1),e(p1,One),e(One,H0o),e(p1,U0o),e(p1,II),e(II,J0o),e(p1,Y0o),e(I,K0o),e(I,_1),e(_1,Vne),e(Vne,Z0o),e(_1,eTo),e(_1,qI),e(qI,oTo),e(_1,rTo),e(I,tTo),e(I,u1),e(u1,Xne),e(Xne,aTo),e(u1,nTo),e(u1,NI),e(NI,sTo),e(u1,lTo),e(I,iTo),e(I,b1),e(b1,zne),e(zne,dTo),e(b1,cTo),e(b1,jI),e(jI,fTo),e(b1,mTo),e(I,gTo),e(I,F1),e(F1,Qne),e(Qne,hTo),e(F1,pTo),e(F1,DI),e(DI,_To),e(F1,uTo),e(I,bTo),e(I,v1),e(v1,Wne),e(Wne,FTo),e(v1,vTo),e(v1,GI),e(GI,TTo),e(v1,MTo),e(I,ETo),e(I,T1),e(T1,Hne),e(Hne,CTo),e(T1,wTo),e(T1,OI),e(OI,ATo),e(T1,yTo),e(I,LTo),e(I,M1),e(M1,Une),e(Une,xTo),e(M1,kTo),e(M1,VI),e(VI,STo),e(M1,RTo),e(I,BTo),e(I,E1),e(E1,Jne),e(Jne,PTo),e(E1,$To),e(E1,XI),e(XI,ITo),e(E1,qTo),e(I,NTo),e(I,C1),e(C1,Yne),e(Yne,jTo),e(C1,DTo),e(C1,zI),e(zI,GTo),e(C1,OTo),e(I,VTo),e(I,w1),e(w1,Kne),e(Kne,XTo),e(w1,zTo),e(w1,QI),e(QI,QTo),e(w1,WTo),e(I,HTo),e(I,A1),e(A1,Zne),e(Zne,UTo),e(A1,JTo),e(A1,WI),e(WI,YTo),e(A1,KTo),e(I,ZTo),e(I,y1),e(y1,ese),e(ese,e8o),e(y1,o8o),e(y1,HI),e(HI,r8o),e(y1,t8o),e(I,a8o),e(I,L1),e(L1,ose),e(ose,n8o),e(L1,s8o),e(L1,UI),e(UI,l8o),e(L1,i8o),e(I,d8o),e(I,x1),e(x1,rse),e(rse,c8o),e(x1,f8o),e(x1,JI),e(JI,m8o),e(x1,g8o),e(I,h8o),e(I,k1),e(k1,tse),e(tse,p8o),e(k1,_8o),e(k1,YI),e(YI,u8o),e(k1,b8o),e(I,F8o),e(I,S1),e(S1,ase),e(ase,v8o),e(S1,T8o),e(S1,KI),e(KI,M8o),e(S1,E8o),e(I,C8o),e(I,R1),e(R1,nse),e(nse,w8o),e(R1,A8o),e(R1,ZI),e(ZI,y8o),e(R1,L8o),e(I,x8o),e(I,B1),e(B1,sse),e(sse,k8o),e(B1,S8o),e(B1,eq),e(eq,R8o),e(B1,B8o),e(I,P8o),e(I,P1),e(P1,lse),e(lse,$8o),e(P1,I8o),e(P1,oq),e(oq,q8o),e(P1,N8o),e(I,j8o),e(I,$1),e($1,ise),e(ise,D8o),e($1,G8o),e($1,rq),e(rq,O8o),e($1,V8o),e(I,X8o),e(I,I1),e(I1,dse),e(dse,z8o),e(I1,Q8o),e(I1,tq),e(tq,W8o),e(I1,H8o),e(I,U8o),e(I,q1),e(q1,cse),e(cse,J8o),e(q1,Y8o),e(q1,fse),e(fse,K8o),e(q1,Z8o),e(I,e7o),e(I,N1),e(N1,mse),e(mse,o7o),e(N1,r7o),e(N1,aq),e(aq,t7o),e(N1,a7o),e(I,n7o),e(I,j1),e(j1,gse),e(gse,s7o),e(j1,l7o),e(j1,nq),e(nq,i7o),e(j1,d7o),e(I,c7o),e(I,D1),e(D1,hse),e(hse,f7o),e(D1,m7o),e(D1,sq),e(sq,g7o),e(D1,h7o),e(I,p7o),e(I,G1),e(G1,pse),e(pse,_7o),e(G1,u7o),e(G1,lq),e(lq,b7o),e(G1,F7o),e(De,v7o),e(De,O1),e(O1,T7o),e(O1,_se),e(_se,M7o),e(O1,E7o),e(O1,use),e(use,C7o),e(De,w7o),e(De,bse),e(bse,A7o),e(De,y7o),g(SC,De,null),b(c,GRe,u),b(c,dd,u),e(dd,V1),e(V1,Fse),g(RC,Fse,null),e(dd,L7o),e(dd,vse),e(vse,x7o),b(c,ORe,u),b(c,er,u),g(BC,er,null),e(er,k7o),e(er,cd),e(cd,S7o),e(cd,iq),e(iq,R7o),e(cd,B7o),e(cd,dq),e(dq,P7o),e(cd,$7o),e(er,I7o),e(er,PC),e(PC,q7o),e(PC,Tse),e(Tse,N7o),e(PC,j7o),e(er,D7o),e(er,Hr),g($C,Hr,null),e(Hr,G7o),e(Hr,Mse),e(Mse,O7o),e(Hr,V7o),e(Hr,fd),e(fd,X7o),e(fd,Ese),e(Ese,z7o),e(fd,Q7o),e(fd,cq),e(cq,W7o),e(fd,H7o),e(Hr,U7o),e(Hr,Cse),e(Cse,J7o),e(Hr,Y7o),g(IC,Hr,null),e(er,K7o),e(er,Ge),g(qC,Ge,null),e(Ge,Z7o),e(Ge,wse),e(wse,eMo),e(Ge,oMo),e(Ge,Ha),e(Ha,rMo),e(Ha,Ase),e(Ase,tMo),e(Ha,aMo),e(Ha,yse),e(yse,nMo),e(Ha,sMo),e(Ha,Lse),e(Lse,lMo),e(Ha,iMo),e(Ge,dMo),e(Ge,ne),e(ne,X1),e(X1,xse),e(xse,cMo),e(X1,fMo),e(X1,fq),e(fq,mMo),e(X1,gMo),e(ne,hMo),e(ne,z1),e(z1,kse),e(kse,pMo),e(z1,_Mo),e(z1,mq),e(mq,uMo),e(z1,bMo),e(ne,FMo),e(ne,Q1),e(Q1,Sse),e(Sse,vMo),e(Q1,TMo),e(Q1,gq),e(gq,MMo),e(Q1,EMo),e(ne,CMo),e(ne,W1),e(W1,Rse),e(Rse,wMo),e(W1,AMo),e(W1,hq),e(hq,yMo),e(W1,LMo),e(ne,xMo),e(ne,H1),e(H1,Bse),e(Bse,kMo),e(H1,SMo),e(H1,pq),e(pq,RMo),e(H1,BMo),e(ne,PMo),e(ne,U1),e(U1,Pse),e(Pse,$Mo),e(U1,IMo),e(U1,_q),e(_q,qMo),e(U1,NMo),e(ne,jMo),e(ne,J1),e(J1,$se),e($se,DMo),e(J1,GMo),e(J1,uq),e(uq,OMo),e(J1,VMo),e(ne,XMo),e(ne,Y1),e(Y1,Ise),e(Ise,zMo),e(Y1,QMo),e(Y1,bq),e(bq,WMo),e(Y1,HMo),e(ne,UMo),e(ne,K1),e(K1,qse),e(qse,JMo),e(K1,YMo),e(K1,Fq),e(Fq,KMo),e(K1,ZMo),e(ne,e4o),e(ne,Z1),e(Z1,Nse),e(Nse,o4o),e(Z1,r4o),e(Z1,vq),e(vq,t4o),e(Z1,a4o),e(ne,n4o),e(ne,eb),e(eb,jse),e(jse,s4o),e(eb,l4o),e(eb,Tq),e(Tq,i4o),e(eb,d4o),e(ne,c4o),e(ne,ob),e(ob,Dse),e(Dse,f4o),e(ob,m4o),e(ob,Mq),e(Mq,g4o),e(ob,h4o),e(ne,p4o),e(ne,rb),e(rb,Gse),e(Gse,_4o),e(rb,u4o),e(rb,Eq),e(Eq,b4o),e(rb,F4o),e(ne,v4o),e(ne,tb),e(tb,Ose),e(Ose,T4o),e(tb,M4o),e(tb,Cq),e(Cq,E4o),e(tb,C4o),e(ne,w4o),e(ne,ab),e(ab,Vse),e(Vse,A4o),e(ab,y4o),e(ab,wq),e(wq,L4o),e(ab,x4o),e(ne,k4o),e(ne,nb),e(nb,Xse),e(Xse,S4o),e(nb,R4o),e(nb,Aq),e(Aq,B4o),e(nb,P4o),e(ne,$4o),e(ne,sb),e(sb,zse),e(zse,I4o),e(sb,q4o),e(sb,yq),e(yq,N4o),e(sb,j4o),e(Ge,D4o),e(Ge,lb),e(lb,G4o),e(lb,Qse),e(Qse,O4o),e(lb,V4o),e(lb,Wse),e(Wse,X4o),e(Ge,z4o),e(Ge,Hse),e(Hse,Q4o),e(Ge,W4o),g(NC,Ge,null),b(c,VRe,u),b(c,md,u),e(md,ib),e(ib,Use),g(jC,Use,null),e(md,H4o),e(md,Jse),e(Jse,U4o),b(c,XRe,u),b(c,or,u),g(DC,or,null),e(or,J4o),e(or,gd),e(gd,Y4o),e(gd,Lq),e(Lq,K4o),e(gd,Z4o),e(gd,xq),e(xq,eEo),e(gd,oEo),e(or,rEo),e(or,GC),e(GC,tEo),e(GC,Yse),e(Yse,aEo),e(GC,nEo),e(or,sEo),e(or,Ur),g(OC,Ur,null),e(Ur,lEo),e(Ur,Kse),e(Kse,iEo),e(Ur,dEo),e(Ur,hd),e(hd,cEo),e(hd,Zse),e(Zse,fEo),e(hd,mEo),e(hd,kq),e(kq,gEo),e(hd,hEo),e(Ur,pEo),e(Ur,ele),e(ele,_Eo),e(Ur,uEo),g(VC,Ur,null),e(or,bEo),e(or,Oe),g(XC,Oe,null),e(Oe,FEo),e(Oe,ole),e(ole,vEo),e(Oe,TEo),e(Oe,Ua),e(Ua,MEo),e(Ua,rle),e(rle,EEo),e(Ua,CEo),e(Ua,tle),e(tle,wEo),e(Ua,AEo),e(Ua,ale),e(ale,yEo),e(Ua,LEo),e(Oe,xEo),e(Oe,y),e(y,db),e(db,nle),e(nle,kEo),e(db,SEo),e(db,Sq),e(Sq,REo),e(db,BEo),e(y,PEo),e(y,cb),e(cb,sle),e(sle,$Eo),e(cb,IEo),e(cb,Rq),e(Rq,qEo),e(cb,NEo),e(y,jEo),e(y,fb),e(fb,lle),e(lle,DEo),e(fb,GEo),e(fb,Bq),e(Bq,OEo),e(fb,VEo),e(y,XEo),e(y,mb),e(mb,ile),e(ile,zEo),e(mb,QEo),e(mb,Pq),e(Pq,WEo),e(mb,HEo),e(y,UEo),e(y,gb),e(gb,dle),e(dle,JEo),e(gb,YEo),e(gb,$q),e($q,KEo),e(gb,ZEo),e(y,eCo),e(y,hb),e(hb,cle),e(cle,oCo),e(hb,rCo),e(hb,Iq),e(Iq,tCo),e(hb,aCo),e(y,nCo),e(y,pb),e(pb,fle),e(fle,sCo),e(pb,lCo),e(pb,qq),e(qq,iCo),e(pb,dCo),e(y,cCo),e(y,_b),e(_b,mle),e(mle,fCo),e(_b,mCo),e(_b,Nq),e(Nq,gCo),e(_b,hCo),e(y,pCo),e(y,ub),e(ub,gle),e(gle,_Co),e(ub,uCo),e(ub,jq),e(jq,bCo),e(ub,FCo),e(y,vCo),e(y,bb),e(bb,hle),e(hle,TCo),e(bb,MCo),e(bb,Dq),e(Dq,ECo),e(bb,CCo),e(y,wCo),e(y,Fb),e(Fb,ple),e(ple,ACo),e(Fb,yCo),e(Fb,Gq),e(Gq,LCo),e(Fb,xCo),e(y,kCo),e(y,vb),e(vb,_le),e(_le,SCo),e(vb,RCo),e(vb,Oq),e(Oq,BCo),e(vb,PCo),e(y,$Co),e(y,Tb),e(Tb,ule),e(ule,ICo),e(Tb,qCo),e(Tb,Vq),e(Vq,NCo),e(Tb,jCo),e(y,DCo),e(y,Mb),e(Mb,ble),e(ble,GCo),e(Mb,OCo),e(Mb,Xq),e(Xq,VCo),e(Mb,XCo),e(y,zCo),e(y,Eb),e(Eb,Fle),e(Fle,QCo),e(Eb,WCo),e(Eb,zq),e(zq,HCo),e(Eb,UCo),e(y,JCo),e(y,Cb),e(Cb,vle),e(vle,YCo),e(Cb,KCo),e(Cb,Qq),e(Qq,ZCo),e(Cb,e5o),e(y,o5o),e(y,wb),e(wb,Tle),e(Tle,r5o),e(wb,t5o),e(wb,Wq),e(Wq,a5o),e(wb,n5o),e(y,s5o),e(y,Ab),e(Ab,Mle),e(Mle,l5o),e(Ab,i5o),e(Ab,Hq),e(Hq,d5o),e(Ab,c5o),e(y,f5o),e(y,yb),e(yb,Ele),e(Ele,m5o),e(yb,g5o),e(yb,Uq),e(Uq,h5o),e(yb,p5o),e(y,_5o),e(y,Lb),e(Lb,Cle),e(Cle,u5o),e(Lb,b5o),e(Lb,Jq),e(Jq,F5o),e(Lb,v5o),e(y,T5o),e(y,xb),e(xb,wle),e(wle,M5o),e(xb,E5o),e(xb,Yq),e(Yq,C5o),e(xb,w5o),e(y,A5o),e(y,kb),e(kb,Ale),e(Ale,y5o),e(kb,L5o),e(kb,Kq),e(Kq,x5o),e(kb,k5o),e(y,S5o),e(y,Sb),e(Sb,yle),e(yle,R5o),e(Sb,B5o),e(Sb,Zq),e(Zq,P5o),e(Sb,$5o),e(y,I5o),e(y,Rb),e(Rb,Lle),e(Lle,q5o),e(Rb,N5o),e(Rb,eN),e(eN,j5o),e(Rb,D5o),e(y,G5o),e(y,Bb),e(Bb,xle),e(xle,O5o),e(Bb,V5o),e(Bb,oN),e(oN,X5o),e(Bb,z5o),e(y,Q5o),e(y,Pb),e(Pb,kle),e(kle,W5o),e(Pb,H5o),e(Pb,rN),e(rN,U5o),e(Pb,J5o),e(y,Y5o),e(y,$b),e($b,Sle),e(Sle,K5o),e($b,Z5o),e($b,tN),e(tN,e3o),e($b,o3o),e(y,r3o),e(y,Ib),e(Ib,Rle),e(Rle,t3o),e(Ib,a3o),e(Ib,aN),e(aN,n3o),e(Ib,s3o),e(y,l3o),e(y,qb),e(qb,Ble),e(Ble,i3o),e(qb,d3o),e(qb,nN),e(nN,c3o),e(qb,f3o),e(y,m3o),e(y,Nb),e(Nb,Ple),e(Ple,g3o),e(Nb,h3o),e(Nb,sN),e(sN,p3o),e(Nb,_3o),e(y,u3o),e(y,jb),e(jb,$le),e($le,b3o),e(jb,F3o),e(jb,lN),e(lN,v3o),e(jb,T3o),e(y,M3o),e(y,Db),e(Db,Ile),e(Ile,E3o),e(Db,C3o),e(Db,iN),e(iN,w3o),e(Db,A3o),e(y,y3o),e(y,Gb),e(Gb,qle),e(qle,L3o),e(Gb,x3o),e(Gb,dN),e(dN,k3o),e(Gb,S3o),e(y,R3o),e(y,Ob),e(Ob,Nle),e(Nle,B3o),e(Ob,P3o),e(Ob,cN),e(cN,$3o),e(Ob,I3o),e(y,q3o),e(y,Vb),e(Vb,jle),e(jle,N3o),e(Vb,j3o),e(Vb,fN),e(fN,D3o),e(Vb,G3o),e(y,O3o),e(y,Xb),e(Xb,Dle),e(Dle,V3o),e(Xb,X3o),e(Xb,mN),e(mN,z3o),e(Xb,Q3o),e(y,W3o),e(y,zb),e(zb,Gle),e(Gle,H3o),e(zb,U3o),e(zb,gN),e(gN,J3o),e(zb,Y3o),e(y,K3o),e(y,Qb),e(Qb,Ole),e(Ole,Z3o),e(Qb,ewo),e(Qb,hN),e(hN,owo),e(Qb,rwo),e(y,two),e(y,Wb),e(Wb,Vle),e(Vle,awo),e(Wb,nwo),e(Wb,pN),e(pN,swo),e(Wb,lwo),e(y,iwo),e(y,Hb),e(Hb,Xle),e(Xle,dwo),e(Hb,cwo),e(Hb,_N),e(_N,fwo),e(Hb,mwo),e(y,gwo),e(y,Ub),e(Ub,zle),e(zle,hwo),e(Ub,pwo),e(Ub,uN),e(uN,_wo),e(Ub,uwo),e(y,bwo),e(y,Jb),e(Jb,Qle),e(Qle,Fwo),e(Jb,vwo),e(Jb,bN),e(bN,Two),e(Jb,Mwo),e(y,Ewo),e(y,Yb),e(Yb,Wle),e(Wle,Cwo),e(Yb,wwo),e(Yb,FN),e(FN,Awo),e(Yb,ywo),e(y,Lwo),e(y,Kb),e(Kb,Hle),e(Hle,xwo),e(Kb,kwo),e(Kb,vN),e(vN,Swo),e(Kb,Rwo),e(y,Bwo),e(y,Zb),e(Zb,Ule),e(Ule,Pwo),e(Zb,$wo),e(Zb,TN),e(TN,Iwo),e(Zb,qwo),e(y,Nwo),e(y,e2),e(e2,Jle),e(Jle,jwo),e(e2,Dwo),e(e2,MN),e(MN,Gwo),e(e2,Owo),e(y,Vwo),e(y,o2),e(o2,Yle),e(Yle,Xwo),e(o2,zwo),e(o2,EN),e(EN,Qwo),e(o2,Wwo),e(Oe,Hwo),e(Oe,r2),e(r2,Uwo),e(r2,Kle),e(Kle,Jwo),e(r2,Ywo),e(r2,Zle),e(Zle,Kwo),e(Oe,Zwo),e(Oe,eie),e(eie,eAo),e(Oe,oAo),g(zC,Oe,null),b(c,zRe,u),b(c,pd,u),e(pd,t2),e(t2,oie),g(QC,oie,null),e(pd,rAo),e(pd,rie),e(rie,tAo),b(c,QRe,u),b(c,rr,u),g(WC,rr,null),e(rr,aAo),e(rr,_d),e(_d,nAo),e(_d,CN),e(CN,sAo),e(_d,lAo),e(_d,wN),e(wN,iAo),e(_d,dAo),e(rr,cAo),e(rr,HC),e(HC,fAo),e(HC,tie),e(tie,mAo),e(HC,gAo),e(rr,hAo),e(rr,Jr),g(UC,Jr,null),e(Jr,pAo),e(Jr,aie),e(aie,_Ao),e(Jr,uAo),e(Jr,ud),e(ud,bAo),e(ud,nie),e(nie,FAo),e(ud,vAo),e(ud,AN),e(AN,TAo),e(ud,MAo),e(Jr,EAo),e(Jr,sie),e(sie,CAo),e(Jr,wAo),g(JC,Jr,null),e(rr,AAo),e(rr,Ve),g(YC,Ve,null),e(Ve,yAo),e(Ve,lie),e(lie,LAo),e(Ve,xAo),e(Ve,Ja),e(Ja,kAo),e(Ja,iie),e(iie,SAo),e(Ja,RAo),e(Ja,die),e(die,BAo),e(Ja,PAo),e(Ja,cie),e(cie,$Ao),e(Ja,IAo),e(Ve,qAo),e(Ve,G),e(G,a2),e(a2,fie),e(fie,NAo),e(a2,jAo),e(a2,yN),e(yN,DAo),e(a2,GAo),e(G,OAo),e(G,n2),e(n2,mie),e(mie,VAo),e(n2,XAo),e(n2,LN),e(LN,zAo),e(n2,QAo),e(G,WAo),e(G,s2),e(s2,gie),e(gie,HAo),e(s2,UAo),e(s2,xN),e(xN,JAo),e(s2,YAo),e(G,KAo),e(G,l2),e(l2,hie),e(hie,ZAo),e(l2,eyo),e(l2,kN),e(kN,oyo),e(l2,ryo),e(G,tyo),e(G,i2),e(i2,pie),e(pie,ayo),e(i2,nyo),e(i2,SN),e(SN,syo),e(i2,lyo),e(G,iyo),e(G,d2),e(d2,_ie),e(_ie,dyo),e(d2,cyo),e(d2,RN),e(RN,fyo),e(d2,myo),e(G,gyo),e(G,c2),e(c2,uie),e(uie,hyo),e(c2,pyo),e(c2,BN),e(BN,_yo),e(c2,uyo),e(G,byo),e(G,f2),e(f2,bie),e(bie,Fyo),e(f2,vyo),e(f2,PN),e(PN,Tyo),e(f2,Myo),e(G,Eyo),e(G,m2),e(m2,Fie),e(Fie,Cyo),e(m2,wyo),e(m2,$N),e($N,Ayo),e(m2,yyo),e(G,Lyo),e(G,g2),e(g2,vie),e(vie,xyo),e(g2,kyo),e(g2,IN),e(IN,Syo),e(g2,Ryo),e(G,Byo),e(G,h2),e(h2,Tie),e(Tie,Pyo),e(h2,$yo),e(h2,qN),e(qN,Iyo),e(h2,qyo),e(G,Nyo),e(G,p2),e(p2,Mie),e(Mie,jyo),e(p2,Dyo),e(p2,NN),e(NN,Gyo),e(p2,Oyo),e(G,Vyo),e(G,_2),e(_2,Eie),e(Eie,Xyo),e(_2,zyo),e(_2,jN),e(jN,Qyo),e(_2,Wyo),e(G,Hyo),e(G,u2),e(u2,Cie),e(Cie,Uyo),e(u2,Jyo),e(u2,DN),e(DN,Yyo),e(u2,Kyo),e(G,Zyo),e(G,b2),e(b2,wie),e(wie,eLo),e(b2,oLo),e(b2,GN),e(GN,rLo),e(b2,tLo),e(G,aLo),e(G,F2),e(F2,Aie),e(Aie,nLo),e(F2,sLo),e(F2,ON),e(ON,lLo),e(F2,iLo),e(G,dLo),e(G,v2),e(v2,yie),e(yie,cLo),e(v2,fLo),e(v2,VN),e(VN,mLo),e(v2,gLo),e(G,hLo),e(G,T2),e(T2,Lie),e(Lie,pLo),e(T2,_Lo),e(T2,XN),e(XN,uLo),e(T2,bLo),e(G,FLo),e(G,M2),e(M2,xie),e(xie,vLo),e(M2,TLo),e(M2,zN),e(zN,MLo),e(M2,ELo),e(G,CLo),e(G,E2),e(E2,kie),e(kie,wLo),e(E2,ALo),e(E2,QN),e(QN,yLo),e(E2,LLo),e(G,xLo),e(G,C2),e(C2,Sie),e(Sie,kLo),e(C2,SLo),e(C2,WN),e(WN,RLo),e(C2,BLo),e(G,PLo),e(G,w2),e(w2,Rie),e(Rie,$Lo),e(w2,ILo),e(w2,HN),e(HN,qLo),e(w2,NLo),e(G,jLo),e(G,A2),e(A2,Bie),e(Bie,DLo),e(A2,GLo),e(A2,UN),e(UN,OLo),e(A2,VLo),e(G,XLo),e(G,y2),e(y2,Pie),e(Pie,zLo),e(y2,QLo),e(y2,JN),e(JN,WLo),e(y2,HLo),e(G,ULo),e(G,L2),e(L2,$ie),e($ie,JLo),e(L2,YLo),e(L2,YN),e(YN,KLo),e(L2,ZLo),e(G,e9o),e(G,x2),e(x2,Iie),e(Iie,o9o),e(x2,r9o),e(x2,KN),e(KN,t9o),e(x2,a9o),e(G,n9o),e(G,k2),e(k2,qie),e(qie,s9o),e(k2,l9o),e(k2,ZN),e(ZN,i9o),e(k2,d9o),e(G,c9o),e(G,S2),e(S2,Nie),e(Nie,f9o),e(S2,m9o),e(S2,ej),e(ej,g9o),e(S2,h9o),e(Ve,p9o),e(Ve,R2),e(R2,_9o),e(R2,jie),e(jie,u9o),e(R2,b9o),e(R2,Die),e(Die,F9o),e(Ve,v9o),e(Ve,Gie),e(Gie,T9o),e(Ve,M9o),g(KC,Ve,null),b(c,WRe,u),b(c,bd,u),e(bd,B2),e(B2,Oie),g(ZC,Oie,null),e(bd,E9o),e(bd,Vie),e(Vie,C9o),b(c,HRe,u),b(c,tr,u),g(e5,tr,null),e(tr,w9o),e(tr,Fd),e(Fd,A9o),e(Fd,oj),e(oj,y9o),e(Fd,L9o),e(Fd,rj),e(rj,x9o),e(Fd,k9o),e(tr,S9o),e(tr,o5),e(o5,R9o),e(o5,Xie),e(Xie,B9o),e(o5,P9o),e(tr,$9o),e(tr,Yr),g(r5,Yr,null),e(Yr,I9o),e(Yr,zie),e(zie,q9o),e(Yr,N9o),e(Yr,vd),e(vd,j9o),e(vd,Qie),e(Qie,D9o),e(vd,G9o),e(vd,tj),e(tj,O9o),e(vd,V9o),e(Yr,X9o),e(Yr,Wie),e(Wie,z9o),e(Yr,Q9o),g(t5,Yr,null),e(tr,W9o),e(tr,Xe),g(a5,Xe,null),e(Xe,H9o),e(Xe,Hie),e(Hie,U9o),e(Xe,J9o),e(Xe,Ya),e(Ya,Y9o),e(Ya,Uie),e(Uie,K9o),e(Ya,Z9o),e(Ya,Jie),e(Jie,exo),e(Ya,oxo),e(Ya,Yie),e(Yie,rxo),e(Ya,txo),e(Xe,axo),e(Xe,da),e(da,P2),e(P2,Kie),e(Kie,nxo),e(P2,sxo),e(P2,aj),e(aj,lxo),e(P2,ixo),e(da,dxo),e(da,$2),e($2,Zie),e(Zie,cxo),e($2,fxo),e($2,nj),e(nj,mxo),e($2,gxo),e(da,hxo),e(da,I2),e(I2,ede),e(ede,pxo),e(I2,_xo),e(I2,sj),e(sj,uxo),e(I2,bxo),e(da,Fxo),e(da,q2),e(q2,ode),e(ode,vxo),e(q2,Txo),e(q2,lj),e(lj,Mxo),e(q2,Exo),e(da,Cxo),e(da,N2),e(N2,rde),e(rde,wxo),e(N2,Axo),e(N2,ij),e(ij,yxo),e(N2,Lxo),e(Xe,xxo),e(Xe,j2),e(j2,kxo),e(j2,tde),e(tde,Sxo),e(j2,Rxo),e(j2,ade),e(ade,Bxo),e(Xe,Pxo),e(Xe,nde),e(nde,$xo),e(Xe,Ixo),g(n5,Xe,null),b(c,URe,u),b(c,Td,u),e(Td,D2),e(D2,sde),g(s5,sde,null),e(Td,qxo),e(Td,lde),e(lde,Nxo),b(c,JRe,u),b(c,ar,u),g(l5,ar,null),e(ar,jxo),e(ar,Md),e(Md,Dxo),e(Md,dj),e(dj,Gxo),e(Md,Oxo),e(Md,cj),e(cj,Vxo),e(Md,Xxo),e(ar,zxo),e(ar,i5),e(i5,Qxo),e(i5,ide),e(ide,Wxo),e(i5,Hxo),e(ar,Uxo),e(ar,Kr),g(d5,Kr,null),e(Kr,Jxo),e(Kr,dde),e(dde,Yxo),e(Kr,Kxo),e(Kr,Ed),e(Ed,Zxo),e(Ed,cde),e(cde,eko),e(Ed,oko),e(Ed,fj),e(fj,rko),e(Ed,tko),e(Kr,ako),e(Kr,fde),e(fde,nko),e(Kr,sko),g(c5,Kr,null),e(ar,lko),e(ar,ze),g(f5,ze,null),e(ze,iko),e(ze,mde),e(mde,dko),e(ze,cko),e(ze,Ka),e(Ka,fko),e(Ka,gde),e(gde,mko),e(Ka,gko),e(Ka,hde),e(hde,hko),e(Ka,pko),e(Ka,pde),e(pde,_ko),e(Ka,uko),e(ze,bko),e(ze,j),e(j,G2),e(G2,_de),e(_de,Fko),e(G2,vko),e(G2,mj),e(mj,Tko),e(G2,Mko),e(j,Eko),e(j,O2),e(O2,ude),e(ude,Cko),e(O2,wko),e(O2,gj),e(gj,Ako),e(O2,yko),e(j,Lko),e(j,V2),e(V2,bde),e(bde,xko),e(V2,kko),e(V2,hj),e(hj,Sko),e(V2,Rko),e(j,Bko),e(j,X2),e(X2,Fde),e(Fde,Pko),e(X2,$ko),e(X2,pj),e(pj,Iko),e(X2,qko),e(j,Nko),e(j,z2),e(z2,vde),e(vde,jko),e(z2,Dko),e(z2,_j),e(_j,Gko),e(z2,Oko),e(j,Vko),e(j,Q2),e(Q2,Tde),e(Tde,Xko),e(Q2,zko),e(Q2,uj),e(uj,Qko),e(Q2,Wko),e(j,Hko),e(j,W2),e(W2,Mde),e(Mde,Uko),e(W2,Jko),e(W2,bj),e(bj,Yko),e(W2,Kko),e(j,Zko),e(j,H2),e(H2,Ede),e(Ede,eSo),e(H2,oSo),e(H2,Fj),e(Fj,rSo),e(H2,tSo),e(j,aSo),e(j,U2),e(U2,Cde),e(Cde,nSo),e(U2,sSo),e(U2,vj),e(vj,lSo),e(U2,iSo),e(j,dSo),e(j,J2),e(J2,wde),e(wde,cSo),e(J2,fSo),e(J2,Tj),e(Tj,mSo),e(J2,gSo),e(j,hSo),e(j,Y2),e(Y2,Ade),e(Ade,pSo),e(Y2,_So),e(Y2,Mj),e(Mj,uSo),e(Y2,bSo),e(j,FSo),e(j,K2),e(K2,yde),e(yde,vSo),e(K2,TSo),e(K2,Ej),e(Ej,MSo),e(K2,ESo),e(j,CSo),e(j,Z2),e(Z2,Lde),e(Lde,wSo),e(Z2,ASo),e(Z2,Cj),e(Cj,ySo),e(Z2,LSo),e(j,xSo),e(j,eF),e(eF,xde),e(xde,kSo),e(eF,SSo),e(eF,wj),e(wj,RSo),e(eF,BSo),e(j,PSo),e(j,oF),e(oF,kde),e(kde,$So),e(oF,ISo),e(oF,Aj),e(Aj,qSo),e(oF,NSo),e(j,jSo),e(j,rF),e(rF,Sde),e(Sde,DSo),e(rF,GSo),e(rF,yj),e(yj,OSo),e(rF,VSo),e(j,XSo),e(j,tF),e(tF,Rde),e(Rde,zSo),e(tF,QSo),e(tF,Lj),e(Lj,WSo),e(tF,HSo),e(j,USo),e(j,aF),e(aF,Bde),e(Bde,JSo),e(aF,YSo),e(aF,xj),e(xj,KSo),e(aF,ZSo),e(j,eRo),e(j,nF),e(nF,Pde),e(Pde,oRo),e(nF,rRo),e(nF,kj),e(kj,tRo),e(nF,aRo),e(j,nRo),e(j,sF),e(sF,$de),e($de,sRo),e(sF,lRo),e(sF,Sj),e(Sj,iRo),e(sF,dRo),e(j,cRo),e(j,lF),e(lF,Ide),e(Ide,fRo),e(lF,mRo),e(lF,Rj),e(Rj,gRo),e(lF,hRo),e(j,pRo),e(j,iF),e(iF,qde),e(qde,_Ro),e(iF,uRo),e(iF,Bj),e(Bj,bRo),e(iF,FRo),e(j,vRo),e(j,dF),e(dF,Nde),e(Nde,TRo),e(dF,MRo),e(dF,Pj),e(Pj,ERo),e(dF,CRo),e(j,wRo),e(j,cF),e(cF,jde),e(jde,ARo),e(cF,yRo),e(cF,$j),e($j,LRo),e(cF,xRo),e(j,kRo),e(j,fF),e(fF,Dde),e(Dde,SRo),e(fF,RRo),e(fF,Ij),e(Ij,BRo),e(fF,PRo),e(j,$Ro),e(j,mF),e(mF,Gde),e(Gde,IRo),e(mF,qRo),e(mF,qj),e(qj,NRo),e(mF,jRo),e(j,DRo),e(j,gF),e(gF,Ode),e(Ode,GRo),e(gF,ORo),e(gF,Nj),e(Nj,VRo),e(gF,XRo),e(j,zRo),e(j,hF),e(hF,Vde),e(Vde,QRo),e(hF,WRo),e(hF,jj),e(jj,HRo),e(hF,URo),e(j,JRo),e(j,pF),e(pF,Xde),e(Xde,YRo),e(pF,KRo),e(pF,Dj),e(Dj,ZRo),e(pF,eBo),e(j,oBo),e(j,_F),e(_F,zde),e(zde,rBo),e(_F,tBo),e(_F,Gj),e(Gj,aBo),e(_F,nBo),e(j,sBo),e(j,uF),e(uF,Qde),e(Qde,lBo),e(uF,iBo),e(uF,Oj),e(Oj,dBo),e(uF,cBo),e(j,fBo),e(j,bF),e(bF,Wde),e(Wde,mBo),e(bF,gBo),e(bF,Vj),e(Vj,hBo),e(bF,pBo),e(j,_Bo),e(j,FF),e(FF,Hde),e(Hde,uBo),e(FF,bBo),e(FF,Xj),e(Xj,FBo),e(FF,vBo),e(ze,TBo),e(ze,vF),e(vF,MBo),e(vF,Ude),e(Ude,EBo),e(vF,CBo),e(vF,Jde),e(Jde,wBo),e(ze,ABo),e(ze,Yde),e(Yde,yBo),e(ze,LBo),g(m5,ze,null),b(c,YRe,u),b(c,Cd,u),e(Cd,TF),e(TF,Kde),g(g5,Kde,null),e(Cd,xBo),e(Cd,Zde),e(Zde,kBo),b(c,KRe,u),b(c,nr,u),g(h5,nr,null),e(nr,SBo),e(nr,wd),e(wd,RBo),e(wd,zj),e(zj,BBo),e(wd,PBo),e(wd,Qj),e(Qj,$Bo),e(wd,IBo),e(nr,qBo),e(nr,p5),e(p5,NBo),e(p5,ece),e(ece,jBo),e(p5,DBo),e(nr,GBo),e(nr,Zr),g(_5,Zr,null),e(Zr,OBo),e(Zr,oce),e(oce,VBo),e(Zr,XBo),e(Zr,Ad),e(Ad,zBo),e(Ad,rce),e(rce,QBo),e(Ad,WBo),e(Ad,Wj),e(Wj,HBo),e(Ad,UBo),e(Zr,JBo),e(Zr,tce),e(tce,YBo),e(Zr,KBo),g(u5,Zr,null),e(nr,ZBo),e(nr,Qe),g(b5,Qe,null),e(Qe,ePo),e(Qe,ace),e(ace,oPo),e(Qe,rPo),e(Qe,Za),e(Za,tPo),e(Za,nce),e(nce,aPo),e(Za,nPo),e(Za,sce),e(sce,sPo),e(Za,lPo),e(Za,lce),e(lce,iPo),e(Za,dPo),e(Qe,cPo),e(Qe,R),e(R,MF),e(MF,ice),e(ice,fPo),e(MF,mPo),e(MF,Hj),e(Hj,gPo),e(MF,hPo),e(R,pPo),e(R,EF),e(EF,dce),e(dce,_Po),e(EF,uPo),e(EF,Uj),e(Uj,bPo),e(EF,FPo),e(R,vPo),e(R,CF),e(CF,cce),e(cce,TPo),e(CF,MPo),e(CF,Jj),e(Jj,EPo),e(CF,CPo),e(R,wPo),e(R,wF),e(wF,fce),e(fce,APo),e(wF,yPo),e(wF,Yj),e(Yj,LPo),e(wF,xPo),e(R,kPo),e(R,AF),e(AF,mce),e(mce,SPo),e(AF,RPo),e(AF,Kj),e(Kj,BPo),e(AF,PPo),e(R,$Po),e(R,yF),e(yF,gce),e(gce,IPo),e(yF,qPo),e(yF,Zj),e(Zj,NPo),e(yF,jPo),e(R,DPo),e(R,LF),e(LF,hce),e(hce,GPo),e(LF,OPo),e(LF,eD),e(eD,VPo),e(LF,XPo),e(R,zPo),e(R,xF),e(xF,pce),e(pce,QPo),e(xF,WPo),e(xF,oD),e(oD,HPo),e(xF,UPo),e(R,JPo),e(R,kF),e(kF,_ce),e(_ce,YPo),e(kF,KPo),e(kF,rD),e(rD,ZPo),e(kF,e$o),e(R,o$o),e(R,SF),e(SF,uce),e(uce,r$o),e(SF,t$o),e(SF,tD),e(tD,a$o),e(SF,n$o),e(R,s$o),e(R,RF),e(RF,bce),e(bce,l$o),e(RF,i$o),e(RF,aD),e(aD,d$o),e(RF,c$o),e(R,f$o),e(R,BF),e(BF,Fce),e(Fce,m$o),e(BF,g$o),e(BF,nD),e(nD,h$o),e(BF,p$o),e(R,_$o),e(R,PF),e(PF,vce),e(vce,u$o),e(PF,b$o),e(PF,sD),e(sD,F$o),e(PF,v$o),e(R,T$o),e(R,$F),e($F,Tce),e(Tce,M$o),e($F,E$o),e($F,lD),e(lD,C$o),e($F,w$o),e(R,A$o),e(R,IF),e(IF,Mce),e(Mce,y$o),e(IF,L$o),e(IF,iD),e(iD,x$o),e(IF,k$o),e(R,S$o),e(R,qF),e(qF,Ece),e(Ece,R$o),e(qF,B$o),e(qF,dD),e(dD,P$o),e(qF,$$o),e(R,I$o),e(R,NF),e(NF,Cce),e(Cce,q$o),e(NF,N$o),e(NF,cD),e(cD,j$o),e(NF,D$o),e(R,G$o),e(R,jF),e(jF,wce),e(wce,O$o),e(jF,V$o),e(jF,fD),e(fD,X$o),e(jF,z$o),e(R,Q$o),e(R,DF),e(DF,Ace),e(Ace,W$o),e(DF,H$o),e(DF,mD),e(mD,U$o),e(DF,J$o),e(R,Y$o),e(R,GF),e(GF,yce),e(yce,K$o),e(GF,Z$o),e(GF,gD),e(gD,eIo),e(GF,oIo),e(R,rIo),e(R,OF),e(OF,Lce),e(Lce,tIo),e(OF,aIo),e(OF,hD),e(hD,nIo),e(OF,sIo),e(R,lIo),e(R,VF),e(VF,xce),e(xce,iIo),e(VF,dIo),e(VF,pD),e(pD,cIo),e(VF,fIo),e(R,mIo),e(R,XF),e(XF,kce),e(kce,gIo),e(XF,hIo),e(XF,_D),e(_D,pIo),e(XF,_Io),e(R,uIo),e(R,zF),e(zF,Sce),e(Sce,bIo),e(zF,FIo),e(zF,uD),e(uD,vIo),e(zF,TIo),e(R,MIo),e(R,QF),e(QF,Rce),e(Rce,EIo),e(QF,CIo),e(QF,bD),e(bD,wIo),e(QF,AIo),e(R,yIo),e(R,WF),e(WF,Bce),e(Bce,LIo),e(WF,xIo),e(WF,FD),e(FD,kIo),e(WF,SIo),e(R,RIo),e(R,HF),e(HF,Pce),e(Pce,BIo),e(HF,PIo),e(HF,vD),e(vD,$Io),e(HF,IIo),e(R,qIo),e(R,UF),e(UF,$ce),e($ce,NIo),e(UF,jIo),e(UF,TD),e(TD,DIo),e(UF,GIo),e(R,OIo),e(R,JF),e(JF,Ice),e(Ice,VIo),e(JF,XIo),e(JF,MD),e(MD,zIo),e(JF,QIo),e(R,WIo),e(R,YF),e(YF,qce),e(qce,HIo),e(YF,UIo),e(YF,ED),e(ED,JIo),e(YF,YIo),e(R,KIo),e(R,KF),e(KF,Nce),e(Nce,ZIo),e(KF,eqo),e(KF,CD),e(CD,oqo),e(KF,rqo),e(R,tqo),e(R,ZF),e(ZF,jce),e(jce,aqo),e(ZF,nqo),e(ZF,wD),e(wD,sqo),e(ZF,lqo),e(R,iqo),e(R,ev),e(ev,Dce),e(Dce,dqo),e(ev,cqo),e(ev,AD),e(AD,fqo),e(ev,mqo),e(R,gqo),e(R,ov),e(ov,Gce),e(Gce,hqo),e(ov,pqo),e(ov,yD),e(yD,_qo),e(ov,uqo),e(R,bqo),e(R,rv),e(rv,Oce),e(Oce,Fqo),e(rv,vqo),e(rv,LD),e(LD,Tqo),e(rv,Mqo),e(R,Eqo),e(R,tv),e(tv,Vce),e(Vce,Cqo),e(tv,wqo),e(tv,xD),e(xD,Aqo),e(tv,yqo),e(R,Lqo),e(R,av),e(av,Xce),e(Xce,xqo),e(av,kqo),e(av,kD),e(kD,Sqo),e(av,Rqo),e(R,Bqo),e(R,nv),e(nv,zce),e(zce,Pqo),e(nv,$qo),e(nv,SD),e(SD,Iqo),e(nv,qqo),e(R,Nqo),e(R,sv),e(sv,Qce),e(Qce,jqo),e(sv,Dqo),e(sv,RD),e(RD,Gqo),e(sv,Oqo),e(Qe,Vqo),e(Qe,lv),e(lv,Xqo),e(lv,Wce),e(Wce,zqo),e(lv,Qqo),e(lv,Hce),e(Hce,Wqo),e(Qe,Hqo),e(Qe,Uce),e(Uce,Uqo),e(Qe,Jqo),g(F5,Qe,null),b(c,ZRe,u),b(c,yd,u),e(yd,iv),e(iv,Jce),g(v5,Jce,null),e(yd,Yqo),e(yd,Yce),e(Yce,Kqo),b(c,eBe,u),b(c,sr,u),g(T5,sr,null),e(sr,Zqo),e(sr,Ld),e(Ld,eNo),e(Ld,BD),e(BD,oNo),e(Ld,rNo),e(Ld,PD),e(PD,tNo),e(Ld,aNo),e(sr,nNo),e(sr,M5),e(M5,sNo),e(M5,Kce),e(Kce,lNo),e(M5,iNo),e(sr,dNo),e(sr,et),g(E5,et,null),e(et,cNo),e(et,Zce),e(Zce,fNo),e(et,mNo),e(et,xd),e(xd,gNo),e(xd,efe),e(efe,hNo),e(xd,pNo),e(xd,$D),e($D,_No),e(xd,uNo),e(et,bNo),e(et,ofe),e(ofe,FNo),e(et,vNo),g(C5,et,null),e(sr,TNo),e(sr,We),g(w5,We,null),e(We,MNo),e(We,rfe),e(rfe,ENo),e(We,CNo),e(We,en),e(en,wNo),e(en,tfe),e(tfe,ANo),e(en,yNo),e(en,afe),e(afe,LNo),e(en,xNo),e(en,nfe),e(nfe,kNo),e(en,SNo),e(We,RNo),e(We,sfe),e(sfe,dv),e(dv,lfe),e(lfe,BNo),e(dv,PNo),e(dv,ID),e(ID,$No),e(dv,INo),e(We,qNo),e(We,cv),e(cv,NNo),e(cv,ife),e(ife,jNo),e(cv,DNo),e(cv,dfe),e(dfe,GNo),e(We,ONo),e(We,cfe),e(cfe,VNo),e(We,XNo),g(A5,We,null),b(c,oBe,u),b(c,kd,u),e(kd,fv),e(fv,ffe),g(y5,ffe,null),e(kd,zNo),e(kd,mfe),e(mfe,QNo),b(c,rBe,u),b(c,lr,u),g(L5,lr,null),e(lr,WNo),e(lr,Sd),e(Sd,HNo),e(Sd,qD),e(qD,UNo),e(Sd,JNo),e(Sd,ND),e(ND,YNo),e(Sd,KNo),e(lr,ZNo),e(lr,x5),e(x5,ejo),e(x5,gfe),e(gfe,ojo),e(x5,rjo),e(lr,tjo),e(lr,ot),g(k5,ot,null),e(ot,ajo),e(ot,hfe),e(hfe,njo),e(ot,sjo),e(ot,Rd),e(Rd,ljo),e(Rd,pfe),e(pfe,ijo),e(Rd,djo),e(Rd,jD),e(jD,cjo),e(Rd,fjo),e(ot,mjo),e(ot,_fe),e(_fe,gjo),e(ot,hjo),g(S5,ot,null),e(lr,pjo),e(lr,He),g(R5,He,null),e(He,_jo),e(He,ufe),e(ufe,ujo),e(He,bjo),e(He,on),e(on,Fjo),e(on,bfe),e(bfe,vjo),e(on,Tjo),e(on,Ffe),e(Ffe,Mjo),e(on,Ejo),e(on,vfe),e(vfe,Cjo),e(on,wjo),e(He,Ajo),e(He,ce),e(ce,mv),e(mv,Tfe),e(Tfe,yjo),e(mv,Ljo),e(mv,DD),e(DD,xjo),e(mv,kjo),e(ce,Sjo),e(ce,gv),e(gv,Mfe),e(Mfe,Rjo),e(gv,Bjo),e(gv,GD),e(GD,Pjo),e(gv,$jo),e(ce,Ijo),e(ce,Gs),e(Gs,Efe),e(Efe,qjo),e(Gs,Njo),e(Gs,OD),e(OD,jjo),e(Gs,Djo),e(Gs,VD),e(VD,Gjo),e(Gs,Ojo),e(ce,Vjo),e(ce,hv),e(hv,Cfe),e(Cfe,Xjo),e(hv,zjo),e(hv,XD),e(XD,Qjo),e(hv,Wjo),e(ce,Hjo),e(ce,ma),e(ma,wfe),e(wfe,Ujo),e(ma,Jjo),e(ma,zD),e(zD,Yjo),e(ma,Kjo),e(ma,QD),e(QD,Zjo),e(ma,eDo),e(ma,WD),e(WD,oDo),e(ma,rDo),e(ce,tDo),e(ce,pv),e(pv,Afe),e(Afe,aDo),e(pv,nDo),e(pv,HD),e(HD,sDo),e(pv,lDo),e(ce,iDo),e(ce,_v),e(_v,yfe),e(yfe,dDo),e(_v,cDo),e(_v,UD),e(UD,fDo),e(_v,mDo),e(ce,gDo),e(ce,uv),e(uv,Lfe),e(Lfe,hDo),e(uv,pDo),e(uv,JD),e(JD,_Do),e(uv,uDo),e(ce,bDo),e(ce,bv),e(bv,xfe),e(xfe,FDo),e(bv,vDo),e(bv,YD),e(YD,TDo),e(bv,MDo),e(ce,EDo),e(ce,Fv),e(Fv,kfe),e(kfe,CDo),e(Fv,wDo),e(Fv,KD),e(KD,ADo),e(Fv,yDo),e(ce,LDo),e(ce,vv),e(vv,Sfe),e(Sfe,xDo),e(vv,kDo),e(vv,ZD),e(ZD,SDo),e(vv,RDo),e(ce,BDo),e(ce,Tv),e(Tv,Rfe),e(Rfe,PDo),e(Tv,$Do),e(Tv,eG),e(eG,IDo),e(Tv,qDo),e(He,NDo),e(He,Mv),e(Mv,jDo),e(Mv,Bfe),e(Bfe,DDo),e(Mv,GDo),e(Mv,Pfe),e(Pfe,ODo),e(He,VDo),e(He,$fe),e($fe,XDo),e(He,zDo),g(B5,He,null),b(c,tBe,u),b(c,Bd,u),e(Bd,Ev),e(Ev,Ife),g(P5,Ife,null),e(Bd,QDo),e(Bd,qfe),e(qfe,WDo),b(c,aBe,u),b(c,ir,u),g($5,ir,null),e(ir,HDo),e(ir,Pd),e(Pd,UDo),e(Pd,oG),e(oG,JDo),e(Pd,YDo),e(Pd,rG),e(rG,KDo),e(Pd,ZDo),e(ir,eGo),e(ir,I5),e(I5,oGo),e(I5,Nfe),e(Nfe,rGo),e(I5,tGo),e(ir,aGo),e(ir,rt),g(q5,rt,null),e(rt,nGo),e(rt,jfe),e(jfe,sGo),e(rt,lGo),e(rt,$d),e($d,iGo),e($d,Dfe),e(Dfe,dGo),e($d,cGo),e($d,tG),e(tG,fGo),e($d,mGo),e(rt,gGo),e(rt,Gfe),e(Gfe,hGo),e(rt,pGo),g(N5,rt,null),e(ir,_Go),e(ir,Ue),g(j5,Ue,null),e(Ue,uGo),e(Ue,Ofe),e(Ofe,bGo),e(Ue,FGo),e(Ue,rn),e(rn,vGo),e(rn,Vfe),e(Vfe,TGo),e(rn,MGo),e(rn,Xfe),e(Xfe,EGo),e(rn,CGo),e(rn,zfe),e(zfe,wGo),e(rn,AGo),e(Ue,yGo),e(Ue,Qfe),e(Qfe,Cv),e(Cv,Wfe),e(Wfe,LGo),e(Cv,xGo),e(Cv,aG),e(aG,kGo),e(Cv,SGo),e(Ue,RGo),e(Ue,wv),e(wv,BGo),e(wv,Hfe),e(Hfe,PGo),e(wv,$Go),e(wv,Ufe),e(Ufe,IGo),e(Ue,qGo),e(Ue,Jfe),e(Jfe,NGo),e(Ue,jGo),g(D5,Ue,null),b(c,nBe,u),b(c,Id,u),e(Id,Av),e(Av,Yfe),g(G5,Yfe,null),e(Id,DGo),e(Id,Kfe),e(Kfe,GGo),b(c,sBe,u),b(c,dr,u),g(O5,dr,null),e(dr,OGo),e(dr,qd),e(qd,VGo),e(qd,nG),e(nG,XGo),e(qd,zGo),e(qd,sG),e(sG,QGo),e(qd,WGo),e(dr,HGo),e(dr,V5),e(V5,UGo),e(V5,Zfe),e(Zfe,JGo),e(V5,YGo),e(dr,KGo),e(dr,tt),g(X5,tt,null),e(tt,ZGo),e(tt,eme),e(eme,eOo),e(tt,oOo),e(tt,Nd),e(Nd,rOo),e(Nd,ome),e(ome,tOo),e(Nd,aOo),e(Nd,lG),e(lG,nOo),e(Nd,sOo),e(tt,lOo),e(tt,rme),e(rme,iOo),e(tt,dOo),g(z5,tt,null),e(dr,cOo),e(dr,Je),g(Q5,Je,null),e(Je,fOo),e(Je,tme),e(tme,mOo),e(Je,gOo),e(Je,tn),e(tn,hOo),e(tn,ame),e(ame,pOo),e(tn,_Oo),e(tn,nme),e(nme,uOo),e(tn,bOo),e(tn,sme),e(sme,FOo),e(tn,vOo),e(Je,TOo),e(Je,Se),e(Se,yv),e(yv,lme),e(lme,MOo),e(yv,EOo),e(yv,iG),e(iG,COo),e(yv,wOo),e(Se,AOo),e(Se,Lv),e(Lv,ime),e(ime,yOo),e(Lv,LOo),e(Lv,dG),e(dG,xOo),e(Lv,kOo),e(Se,SOo),e(Se,xv),e(xv,dme),e(dme,ROo),e(xv,BOo),e(xv,cG),e(cG,POo),e(xv,$Oo),e(Se,IOo),e(Se,kv),e(kv,cme),e(cme,qOo),e(kv,NOo),e(kv,fG),e(fG,jOo),e(kv,DOo),e(Se,GOo),e(Se,Sv),e(Sv,fme),e(fme,OOo),e(Sv,VOo),e(Sv,mG),e(mG,XOo),e(Sv,zOo),e(Se,QOo),e(Se,Rv),e(Rv,mme),e(mme,WOo),e(Rv,HOo),e(Rv,gG),e(gG,UOo),e(Rv,JOo),e(Se,YOo),e(Se,Bv),e(Bv,gme),e(gme,KOo),e(Bv,ZOo),e(Bv,hG),e(hG,eVo),e(Bv,oVo),e(Se,rVo),e(Se,Pv),e(Pv,hme),e(hme,tVo),e(Pv,aVo),e(Pv,pG),e(pG,nVo),e(Pv,sVo),e(Je,lVo),e(Je,$v),e($v,iVo),e($v,pme),e(pme,dVo),e($v,cVo),e($v,_me),e(_me,fVo),e(Je,mVo),e(Je,ume),e(ume,gVo),e(Je,hVo),g(W5,Je,null),b(c,lBe,u),b(c,jd,u),e(jd,Iv),e(Iv,bme),g(H5,bme,null),e(jd,pVo),e(jd,Fme),e(Fme,_Vo),b(c,iBe,u),b(c,cr,u),g(U5,cr,null),e(cr,uVo),e(cr,Dd),e(Dd,bVo),e(Dd,_G),e(_G,FVo),e(Dd,vVo),e(Dd,uG),e(uG,TVo),e(Dd,MVo),e(cr,EVo),e(cr,J5),e(J5,CVo),e(J5,vme),e(vme,wVo),e(J5,AVo),e(cr,yVo),e(cr,at),g(Y5,at,null),e(at,LVo),e(at,Tme),e(Tme,xVo),e(at,kVo),e(at,Gd),e(Gd,SVo),e(Gd,Mme),e(Mme,RVo),e(Gd,BVo),e(Gd,bG),e(bG,PVo),e(Gd,$Vo),e(at,IVo),e(at,Eme),e(Eme,qVo),e(at,NVo),g(K5,at,null),e(cr,jVo),e(cr,Ye),g(Z5,Ye,null),e(Ye,DVo),e(Ye,Cme),e(Cme,GVo),e(Ye,OVo),e(Ye,an),e(an,VVo),e(an,wme),e(wme,XVo),e(an,zVo),e(an,Ame),e(Ame,QVo),e(an,WVo),e(an,yme),e(yme,HVo),e(an,UVo),e(Ye,JVo),e(Ye,nn),e(nn,qv),e(qv,Lme),e(Lme,YVo),e(qv,KVo),e(qv,FG),e(FG,ZVo),e(qv,eXo),e(nn,oXo),e(nn,Nv),e(Nv,xme),e(xme,rXo),e(Nv,tXo),e(Nv,vG),e(vG,aXo),e(Nv,nXo),e(nn,sXo),e(nn,jv),e(jv,kme),e(kme,lXo),e(jv,iXo),e(jv,TG),e(TG,dXo),e(jv,cXo),e(nn,fXo),e(nn,Dv),e(Dv,Sme),e(Sme,mXo),e(Dv,gXo),e(Dv,MG),e(MG,hXo),e(Dv,pXo),e(Ye,_Xo),e(Ye,Gv),e(Gv,uXo),e(Gv,Rme),e(Rme,bXo),e(Gv,FXo),e(Gv,Bme),e(Bme,vXo),e(Ye,TXo),e(Ye,Pme),e(Pme,MXo),e(Ye,EXo),g(e3,Ye,null),b(c,dBe,u),b(c,Od,u),e(Od,Ov),e(Ov,$me),g(o3,$me,null),e(Od,CXo),e(Od,Ime),e(Ime,wXo),b(c,cBe,u),b(c,fr,u),g(r3,fr,null),e(fr,AXo),e(fr,Vd),e(Vd,yXo),e(Vd,EG),e(EG,LXo),e(Vd,xXo),e(Vd,CG),e(CG,kXo),e(Vd,SXo),e(fr,RXo),e(fr,t3),e(t3,BXo),e(t3,qme),e(qme,PXo),e(t3,$Xo),e(fr,IXo),e(fr,nt),g(a3,nt,null),e(nt,qXo),e(nt,Nme),e(Nme,NXo),e(nt,jXo),e(nt,Xd),e(Xd,DXo),e(Xd,jme),e(jme,GXo),e(Xd,OXo),e(Xd,wG),e(wG,VXo),e(Xd,XXo),e(nt,zXo),e(nt,Dme),e(Dme,QXo),e(nt,WXo),g(n3,nt,null),e(fr,HXo),e(fr,Ke),g(s3,Ke,null),e(Ke,UXo),e(Ke,Gme),e(Gme,JXo),e(Ke,YXo),e(Ke,sn),e(sn,KXo),e(sn,Ome),e(Ome,ZXo),e(sn,ezo),e(sn,Vme),e(Vme,ozo),e(sn,rzo),e(sn,Xme),e(Xme,tzo),e(sn,azo),e(Ke,nzo),e(Ke,Re),e(Re,Vv),e(Vv,zme),e(zme,szo),e(Vv,lzo),e(Vv,AG),e(AG,izo),e(Vv,dzo),e(Re,czo),e(Re,Xv),e(Xv,Qme),e(Qme,fzo),e(Xv,mzo),e(Xv,yG),e(yG,gzo),e(Xv,hzo),e(Re,pzo),e(Re,zv),e(zv,Wme),e(Wme,_zo),e(zv,uzo),e(zv,LG),e(LG,bzo),e(zv,Fzo),e(Re,vzo),e(Re,Qv),e(Qv,Hme),e(Hme,Tzo),e(Qv,Mzo),e(Qv,xG),e(xG,Ezo),e(Qv,Czo),e(Re,wzo),e(Re,Wv),e(Wv,Ume),e(Ume,Azo),e(Wv,yzo),e(Wv,kG),e(kG,Lzo),e(Wv,xzo),e(Re,kzo),e(Re,Hv),e(Hv,Jme),e(Jme,Szo),e(Hv,Rzo),e(Hv,SG),e(SG,Bzo),e(Hv,Pzo),e(Re,$zo),e(Re,Uv),e(Uv,Yme),e(Yme,Izo),e(Uv,qzo),e(Uv,RG),e(RG,Nzo),e(Uv,jzo),e(Re,Dzo),e(Re,Jv),e(Jv,Kme),e(Kme,Gzo),e(Jv,Ozo),e(Jv,BG),e(BG,Vzo),e(Jv,Xzo),e(Ke,zzo),e(Ke,Yv),e(Yv,Qzo),e(Yv,Zme),e(Zme,Wzo),e(Yv,Hzo),e(Yv,ege),e(ege,Uzo),e(Ke,Jzo),e(Ke,oge),e(oge,Yzo),e(Ke,Kzo),g(l3,Ke,null),b(c,fBe,u),b(c,zd,u),e(zd,Kv),e(Kv,rge),g(i3,rge,null),e(zd,Zzo),e(zd,tge),e(tge,eQo),b(c,mBe,u),b(c,mr,u),g(d3,mr,null),e(mr,oQo),e(mr,Qd),e(Qd,rQo),e(Qd,PG),e(PG,tQo),e(Qd,aQo),e(Qd,$G),e($G,nQo),e(Qd,sQo),e(mr,lQo),e(mr,c3),e(c3,iQo),e(c3,age),e(age,dQo),e(c3,cQo),e(mr,fQo),e(mr,st),g(f3,st,null),e(st,mQo),e(st,nge),e(nge,gQo),e(st,hQo),e(st,Wd),e(Wd,pQo),e(Wd,sge),e(sge,_Qo),e(Wd,uQo),e(Wd,IG),e(IG,bQo),e(Wd,FQo),e(st,vQo),e(st,lge),e(lge,TQo),e(st,MQo),g(m3,st,null),e(mr,EQo),e(mr,Ze),g(g3,Ze,null),e(Ze,CQo),e(Ze,ige),e(ige,wQo),e(Ze,AQo),e(Ze,ln),e(ln,yQo),e(ln,dge),e(dge,LQo),e(ln,xQo),e(ln,cge),e(cge,kQo),e(ln,SQo),e(ln,fge),e(fge,RQo),e(ln,BQo),e(Ze,PQo),e(Ze,h3),e(h3,Zv),e(Zv,mge),e(mge,$Qo),e(Zv,IQo),e(Zv,qG),e(qG,qQo),e(Zv,NQo),e(h3,jQo),e(h3,e6),e(e6,gge),e(gge,DQo),e(e6,GQo),e(e6,NG),e(NG,OQo),e(e6,VQo),e(Ze,XQo),e(Ze,o6),e(o6,zQo),e(o6,hge),e(hge,QQo),e(o6,WQo),e(o6,pge),e(pge,HQo),e(Ze,UQo),e(Ze,_ge),e(_ge,JQo),e(Ze,YQo),g(p3,Ze,null),b(c,gBe,u),b(c,Hd,u),e(Hd,r6),e(r6,uge),g(_3,uge,null),e(Hd,KQo),e(Hd,bge),e(bge,ZQo),b(c,hBe,u),b(c,gr,u),g(u3,gr,null),e(gr,eWo),e(gr,Ud),e(Ud,oWo),e(Ud,jG),e(jG,rWo),e(Ud,tWo),e(Ud,DG),e(DG,aWo),e(Ud,nWo),e(gr,sWo),e(gr,b3),e(b3,lWo),e(b3,Fge),e(Fge,iWo),e(b3,dWo),e(gr,cWo),e(gr,lt),g(F3,lt,null),e(lt,fWo),e(lt,vge),e(vge,mWo),e(lt,gWo),e(lt,Jd),e(Jd,hWo),e(Jd,Tge),e(Tge,pWo),e(Jd,_Wo),e(Jd,GG),e(GG,uWo),e(Jd,bWo),e(lt,FWo),e(lt,Mge),e(Mge,vWo),e(lt,TWo),g(v3,lt,null),e(gr,MWo),e(gr,eo),g(T3,eo,null),e(eo,EWo),e(eo,Ege),e(Ege,CWo),e(eo,wWo),e(eo,dn),e(dn,AWo),e(dn,Cge),e(Cge,yWo),e(dn,LWo),e(dn,wge),e(wge,xWo),e(dn,kWo),e(dn,Age),e(Age,SWo),e(dn,RWo),e(eo,BWo),e(eo,cn),e(cn,t6),e(t6,yge),e(yge,PWo),e(t6,$Wo),e(t6,OG),e(OG,IWo),e(t6,qWo),e(cn,NWo),e(cn,a6),e(a6,Lge),e(Lge,jWo),e(a6,DWo),e(a6,VG),e(VG,GWo),e(a6,OWo),e(cn,VWo),e(cn,n6),e(n6,xge),e(xge,XWo),e(n6,zWo),e(n6,XG),e(XG,QWo),e(n6,WWo),e(cn,HWo),e(cn,s6),e(s6,kge),e(kge,UWo),e(s6,JWo),e(s6,zG),e(zG,YWo),e(s6,KWo),e(eo,ZWo),e(eo,l6),e(l6,eHo),e(l6,Sge),e(Sge,oHo),e(l6,rHo),e(l6,Rge),e(Rge,tHo),e(eo,aHo),e(eo,Bge),e(Bge,nHo),e(eo,sHo),g(M3,eo,null),b(c,pBe,u),b(c,Yd,u),e(Yd,i6),e(i6,Pge),g(E3,Pge,null),e(Yd,lHo),e(Yd,$ge),e($ge,iHo),b(c,_Be,u),b(c,hr,u),g(C3,hr,null),e(hr,dHo),e(hr,Kd),e(Kd,cHo),e(Kd,QG),e(QG,fHo),e(Kd,mHo),e(Kd,WG),e(WG,gHo),e(Kd,hHo),e(hr,pHo),e(hr,w3),e(w3,_Ho),e(w3,Ige),e(Ige,uHo),e(w3,bHo),e(hr,FHo),e(hr,it),g(A3,it,null),e(it,vHo),e(it,qge),e(qge,THo),e(it,MHo),e(it,Zd),e(Zd,EHo),e(Zd,Nge),e(Nge,CHo),e(Zd,wHo),e(Zd,HG),e(HG,AHo),e(Zd,yHo),e(it,LHo),e(it,jge),e(jge,xHo),e(it,kHo),g(y3,it,null),e(hr,SHo),e(hr,oo),g(L3,oo,null),e(oo,RHo),e(oo,Dge),e(Dge,BHo),e(oo,PHo),e(oo,fn),e(fn,$Ho),e(fn,Gge),e(Gge,IHo),e(fn,qHo),e(fn,Oge),e(Oge,NHo),e(fn,jHo),e(fn,Vge),e(Vge,DHo),e(fn,GHo),e(oo,OHo),e(oo,ec),e(ec,d6),e(d6,Xge),e(Xge,VHo),e(d6,XHo),e(d6,UG),e(UG,zHo),e(d6,QHo),e(ec,WHo),e(ec,c6),e(c6,zge),e(zge,HHo),e(c6,UHo),e(c6,JG),e(JG,JHo),e(c6,YHo),e(ec,KHo),e(ec,f6),e(f6,Qge),e(Qge,ZHo),e(f6,eUo),e(f6,YG),e(YG,oUo),e(f6,rUo),e(oo,tUo),e(oo,m6),e(m6,aUo),e(m6,Wge),e(Wge,nUo),e(m6,sUo),e(m6,Hge),e(Hge,lUo),e(oo,iUo),e(oo,Uge),e(Uge,dUo),e(oo,cUo),g(x3,oo,null),b(c,uBe,u),b(c,oc,u),e(oc,g6),e(g6,Jge),g(k3,Jge,null),e(oc,fUo),e(oc,Yge),e(Yge,mUo),b(c,bBe,u),b(c,pr,u),g(S3,pr,null),e(pr,gUo),e(pr,rc),e(rc,hUo),e(rc,KG),e(KG,pUo),e(rc,_Uo),e(rc,ZG),e(ZG,uUo),e(rc,bUo),e(pr,FUo),e(pr,R3),e(R3,vUo),e(R3,Kge),e(Kge,TUo),e(R3,MUo),e(pr,EUo),e(pr,dt),g(B3,dt,null),e(dt,CUo),e(dt,Zge),e(Zge,wUo),e(dt,AUo),e(dt,tc),e(tc,yUo),e(tc,ehe),e(ehe,LUo),e(tc,xUo),e(tc,eO),e(eO,kUo),e(tc,SUo),e(dt,RUo),e(dt,ohe),e(ohe,BUo),e(dt,PUo),g(P3,dt,null),e(pr,$Uo),e(pr,ro),g($3,ro,null),e(ro,IUo),e(ro,rhe),e(rhe,qUo),e(ro,NUo),e(ro,mn),e(mn,jUo),e(mn,the),e(the,DUo),e(mn,GUo),e(mn,ahe),e(ahe,OUo),e(mn,VUo),e(mn,nhe),e(nhe,XUo),e(mn,zUo),e(ro,QUo),e(ro,she),e(she,h6),e(h6,lhe),e(lhe,WUo),e(h6,HUo),e(h6,oO),e(oO,UUo),e(h6,JUo),e(ro,YUo),e(ro,p6),e(p6,KUo),e(p6,ihe),e(ihe,ZUo),e(p6,eJo),e(p6,dhe),e(dhe,oJo),e(ro,rJo),e(ro,che),e(che,tJo),e(ro,aJo),g(I3,ro,null),b(c,FBe,u),b(c,ac,u),e(ac,_6),e(_6,fhe),g(q3,fhe,null),e(ac,nJo),e(ac,mhe),e(mhe,sJo),b(c,vBe,u),b(c,_r,u),g(N3,_r,null),e(_r,lJo),e(_r,nc),e(nc,iJo),e(nc,rO),e(rO,dJo),e(nc,cJo),e(nc,tO),e(tO,fJo),e(nc,mJo),e(_r,gJo),e(_r,j3),e(j3,hJo),e(j3,ghe),e(ghe,pJo),e(j3,_Jo),e(_r,uJo),e(_r,ct),g(D3,ct,null),e(ct,bJo),e(ct,hhe),e(hhe,FJo),e(ct,vJo),e(ct,sc),e(sc,TJo),e(sc,phe),e(phe,MJo),e(sc,EJo),e(sc,aO),e(aO,CJo),e(sc,wJo),e(ct,AJo),e(ct,_he),e(_he,yJo),e(ct,LJo),g(G3,ct,null),e(_r,xJo),e(_r,to),g(O3,to,null),e(to,kJo),e(to,uhe),e(uhe,SJo),e(to,RJo),e(to,gn),e(gn,BJo),e(gn,bhe),e(bhe,PJo),e(gn,$Jo),e(gn,Fhe),e(Fhe,IJo),e(gn,qJo),e(gn,vhe),e(vhe,NJo),e(gn,jJo),e(to,DJo),e(to,The),e(The,u6),e(u6,Mhe),e(Mhe,GJo),e(u6,OJo),e(u6,nO),e(nO,VJo),e(u6,XJo),e(to,zJo),e(to,b6),e(b6,QJo),e(b6,Ehe),e(Ehe,WJo),e(b6,HJo),e(b6,Che),e(Che,UJo),e(to,JJo),e(to,whe),e(whe,YJo),e(to,KJo),g(V3,to,null),b(c,TBe,u),b(c,lc,u),e(lc,F6),e(F6,Ahe),g(X3,Ahe,null),e(lc,ZJo),e(lc,yhe),e(yhe,eYo),b(c,MBe,u),b(c,ur,u),g(z3,ur,null),e(ur,oYo),e(ur,ic),e(ic,rYo),e(ic,sO),e(sO,tYo),e(ic,aYo),e(ic,lO),e(lO,nYo),e(ic,sYo),e(ur,lYo),e(ur,Q3),e(Q3,iYo),e(Q3,Lhe),e(Lhe,dYo),e(Q3,cYo),e(ur,fYo),e(ur,ft),g(W3,ft,null),e(ft,mYo),e(ft,xhe),e(xhe,gYo),e(ft,hYo),e(ft,dc),e(dc,pYo),e(dc,khe),e(khe,_Yo),e(dc,uYo),e(dc,iO),e(iO,bYo),e(dc,FYo),e(ft,vYo),e(ft,She),e(She,TYo),e(ft,MYo),g(H3,ft,null),e(ur,EYo),e(ur,ao),g(U3,ao,null),e(ao,CYo),e(ao,Rhe),e(Rhe,wYo),e(ao,AYo),e(ao,hn),e(hn,yYo),e(hn,Bhe),e(Bhe,LYo),e(hn,xYo),e(hn,Phe),e(Phe,kYo),e(hn,SYo),e(hn,$he),e($he,RYo),e(hn,BYo),e(ao,PYo),e(ao,cc),e(cc,v6),e(v6,Ihe),e(Ihe,$Yo),e(v6,IYo),e(v6,dO),e(dO,qYo),e(v6,NYo),e(cc,jYo),e(cc,T6),e(T6,qhe),e(qhe,DYo),e(T6,GYo),e(T6,cO),e(cO,OYo),e(T6,VYo),e(cc,XYo),e(cc,M6),e(M6,Nhe),e(Nhe,zYo),e(M6,QYo),e(M6,fO),e(fO,WYo),e(M6,HYo),e(ao,UYo),e(ao,E6),e(E6,JYo),e(E6,jhe),e(jhe,YYo),e(E6,KYo),e(E6,Dhe),e(Dhe,ZYo),e(ao,eKo),e(ao,Ghe),e(Ghe,oKo),e(ao,rKo),g(J3,ao,null),b(c,EBe,u),b(c,fc,u),e(fc,C6),e(C6,Ohe),g(Y3,Ohe,null),e(fc,tKo),e(fc,Vhe),e(Vhe,aKo),b(c,CBe,u),b(c,br,u),g(K3,br,null),e(br,nKo),e(br,mc),e(mc,sKo),e(mc,mO),e(mO,lKo),e(mc,iKo),e(mc,gO),e(gO,dKo),e(mc,cKo),e(br,fKo),e(br,Z3),e(Z3,mKo),e(Z3,Xhe),e(Xhe,gKo),e(Z3,hKo),e(br,pKo),e(br,mt),g(ew,mt,null),e(mt,_Ko),e(mt,zhe),e(zhe,uKo),e(mt,bKo),e(mt,gc),e(gc,FKo),e(gc,Qhe),e(Qhe,vKo),e(gc,TKo),e(gc,hO),e(hO,MKo),e(gc,EKo),e(mt,CKo),e(mt,Whe),e(Whe,wKo),e(mt,AKo),g(ow,mt,null),e(br,yKo),e(br,no),g(rw,no,null),e(no,LKo),e(no,Hhe),e(Hhe,xKo),e(no,kKo),e(no,pn),e(pn,SKo),e(pn,Uhe),e(Uhe,RKo),e(pn,BKo),e(pn,Jhe),e(Jhe,PKo),e(pn,$Ko),e(pn,Yhe),e(Yhe,IKo),e(pn,qKo),e(no,NKo),e(no,Khe),e(Khe,w6),e(w6,Zhe),e(Zhe,jKo),e(w6,DKo),e(w6,pO),e(pO,GKo),e(w6,OKo),e(no,VKo),e(no,A6),e(A6,XKo),e(A6,epe),e(epe,zKo),e(A6,QKo),e(A6,ope),e(ope,WKo),e(no,HKo),e(no,rpe),e(rpe,UKo),e(no,JKo),g(tw,no,null),b(c,wBe,u),b(c,hc,u),e(hc,y6),e(y6,tpe),g(aw,tpe,null),e(hc,YKo),e(hc,ape),e(ape,KKo),b(c,ABe,u),b(c,Fr,u),g(nw,Fr,null),e(Fr,ZKo),e(Fr,pc),e(pc,eZo),e(pc,_O),e(_O,oZo),e(pc,rZo),e(pc,uO),e(uO,tZo),e(pc,aZo),e(Fr,nZo),e(Fr,sw),e(sw,sZo),e(sw,npe),e(npe,lZo),e(sw,iZo),e(Fr,dZo),e(Fr,gt),g(lw,gt,null),e(gt,cZo),e(gt,spe),e(spe,fZo),e(gt,mZo),e(gt,_c),e(_c,gZo),e(_c,lpe),e(lpe,hZo),e(_c,pZo),e(_c,bO),e(bO,_Zo),e(_c,uZo),e(gt,bZo),e(gt,ipe),e(ipe,FZo),e(gt,vZo),g(iw,gt,null),e(Fr,TZo),e(Fr,ho),g(dw,ho,null),e(ho,MZo),e(ho,dpe),e(dpe,EZo),e(ho,CZo),e(ho,_n),e(_n,wZo),e(_n,cpe),e(cpe,AZo),e(_n,yZo),e(_n,fpe),e(fpe,LZo),e(_n,xZo),e(_n,mpe),e(mpe,kZo),e(_n,SZo),e(ho,RZo),e(ho,x),e(x,L6),e(L6,gpe),e(gpe,BZo),e(L6,PZo),e(L6,FO),e(FO,$Zo),e(L6,IZo),e(x,qZo),e(x,x6),e(x6,hpe),e(hpe,NZo),e(x6,jZo),e(x6,vO),e(vO,DZo),e(x6,GZo),e(x,OZo),e(x,k6),e(k6,ppe),e(ppe,VZo),e(k6,XZo),e(k6,TO),e(TO,zZo),e(k6,QZo),e(x,WZo),e(x,S6),e(S6,_pe),e(_pe,HZo),e(S6,UZo),e(S6,MO),e(MO,JZo),e(S6,YZo),e(x,KZo),e(x,R6),e(R6,upe),e(upe,ZZo),e(R6,eer),e(R6,EO),e(EO,oer),e(R6,rer),e(x,ter),e(x,B6),e(B6,bpe),e(bpe,aer),e(B6,ner),e(B6,CO),e(CO,ser),e(B6,ler),e(x,ier),e(x,P6),e(P6,Fpe),e(Fpe,der),e(P6,cer),e(P6,wO),e(wO,fer),e(P6,mer),e(x,ger),e(x,$6),e($6,vpe),e(vpe,her),e($6,per),e($6,AO),e(AO,_er),e($6,uer),e(x,ber),e(x,I6),e(I6,Tpe),e(Tpe,Fer),e(I6,ver),e(I6,yO),e(yO,Ter),e(I6,Mer),e(x,Eer),e(x,q6),e(q6,Mpe),e(Mpe,Cer),e(q6,wer),e(q6,LO),e(LO,Aer),e(q6,yer),e(x,Ler),e(x,N6),e(N6,Epe),e(Epe,xer),e(N6,ker),e(N6,xO),e(xO,Ser),e(N6,Rer),e(x,Ber),e(x,j6),e(j6,Cpe),e(Cpe,Per),e(j6,$er),e(j6,kO),e(kO,Ier),e(j6,qer),e(x,Ner),e(x,D6),e(D6,wpe),e(wpe,jer),e(D6,Der),e(D6,SO),e(SO,Ger),e(D6,Oer),e(x,Ver),e(x,G6),e(G6,Ape),e(Ape,Xer),e(G6,zer),e(G6,RO),e(RO,Qer),e(G6,Wer),e(x,Her),e(x,O6),e(O6,ype),e(ype,Uer),e(O6,Jer),e(O6,BO),e(BO,Yer),e(O6,Ker),e(x,Zer),e(x,V6),e(V6,Lpe),e(Lpe,eor),e(V6,oor),e(V6,PO),e(PO,ror),e(V6,tor),e(x,aor),e(x,Os),e(Os,xpe),e(xpe,nor),e(Os,sor),e(Os,$O),e($O,lor),e(Os,ior),e(Os,IO),e(IO,dor),e(Os,cor),e(x,mor),e(x,X6),e(X6,kpe),e(kpe,gor),e(X6,hor),e(X6,qO),e(qO,por),e(X6,_or),e(x,uor),e(x,z6),e(z6,Spe),e(Spe,bor),e(z6,For),e(z6,NO),e(NO,vor),e(z6,Tor),e(x,Mor),e(x,Q6),e(Q6,Rpe),e(Rpe,Eor),e(Q6,Cor),e(Q6,jO),e(jO,wor),e(Q6,Aor),e(x,yor),e(x,W6),e(W6,Bpe),e(Bpe,Lor),e(W6,xor),e(W6,DO),e(DO,kor),e(W6,Sor),e(x,Ror),e(x,H6),e(H6,Ppe),e(Ppe,Bor),e(H6,Por),e(H6,GO),e(GO,$or),e(H6,Ior),e(x,qor),e(x,U6),e(U6,$pe),e($pe,Nor),e(U6,jor),e(U6,OO),e(OO,Dor),e(U6,Gor),e(x,Oor),e(x,J6),e(J6,Ipe),e(Ipe,Vor),e(J6,Xor),e(J6,VO),e(VO,zor),e(J6,Qor),e(x,Wor),e(x,Y6),e(Y6,qpe),e(qpe,Hor),e(Y6,Uor),e(Y6,XO),e(XO,Jor),e(Y6,Yor),e(x,Kor),e(x,K6),e(K6,Npe),e(Npe,Zor),e(K6,err),e(K6,zO),e(zO,orr),e(K6,rrr),e(x,trr),e(x,Z6),e(Z6,jpe),e(jpe,arr),e(Z6,nrr),e(Z6,QO),e(QO,srr),e(Z6,lrr),e(x,irr),e(x,e0),e(e0,Dpe),e(Dpe,drr),e(e0,crr),e(e0,WO),e(WO,frr),e(e0,mrr),e(x,grr),e(x,o0),e(o0,Gpe),e(Gpe,hrr),e(o0,prr),e(o0,HO),e(HO,_rr),e(o0,urr),e(x,brr),e(x,r0),e(r0,Ope),e(Ope,Frr),e(r0,vrr),e(r0,UO),e(UO,Trr),e(r0,Mrr),e(x,Err),e(x,t0),e(t0,Vpe),e(Vpe,Crr),e(t0,wrr),e(t0,JO),e(JO,Arr),e(t0,yrr),e(x,Lrr),e(x,a0),e(a0,Xpe),e(Xpe,xrr),e(a0,krr),e(a0,YO),e(YO,Srr),e(a0,Rrr),e(x,Brr),e(x,n0),e(n0,zpe),e(zpe,Prr),e(n0,$rr),e(n0,KO),e(KO,Irr),e(n0,qrr),e(x,Nrr),e(x,s0),e(s0,Qpe),e(Qpe,jrr),e(s0,Drr),e(s0,ZO),e(ZO,Grr),e(s0,Orr),e(x,Vrr),e(x,l0),e(l0,Wpe),e(Wpe,Xrr),e(l0,zrr),e(l0,eV),e(eV,Qrr),e(l0,Wrr),e(x,Hrr),e(x,i0),e(i0,Hpe),e(Hpe,Urr),e(i0,Jrr),e(i0,oV),e(oV,Yrr),e(i0,Krr),e(x,Zrr),e(x,d0),e(d0,Upe),e(Upe,etr),e(d0,otr),e(d0,rV),e(rV,rtr),e(d0,ttr),e(x,atr),e(x,c0),e(c0,Jpe),e(Jpe,ntr),e(c0,str),e(c0,tV),e(tV,ltr),e(c0,itr),e(x,dtr),e(x,f0),e(f0,Ype),e(Ype,ctr),e(f0,ftr),e(f0,aV),e(aV,mtr),e(f0,gtr),e(x,htr),e(x,m0),e(m0,Kpe),e(Kpe,ptr),e(m0,_tr),e(m0,nV),e(nV,utr),e(m0,btr),e(x,Ftr),e(x,g0),e(g0,Zpe),e(Zpe,vtr),e(g0,Ttr),e(g0,sV),e(sV,Mtr),e(g0,Etr),e(x,Ctr),e(x,h0),e(h0,e_e),e(e_e,wtr),e(h0,Atr),e(h0,lV),e(lV,ytr),e(h0,Ltr),e(x,xtr),e(x,p0),e(p0,o_e),e(o_e,ktr),e(p0,Str),e(p0,iV),e(iV,Rtr),e(p0,Btr),e(x,Ptr),e(x,_0),e(_0,r_e),e(r_e,$tr),e(_0,Itr),e(_0,dV),e(dV,qtr),e(_0,Ntr),e(ho,jtr),e(ho,t_e),e(t_e,Dtr),e(ho,Gtr),g(cw,ho,null),b(c,yBe,u),b(c,uc,u),e(uc,u0),e(u0,a_e),g(fw,a_e,null),e(uc,Otr),e(uc,n_e),e(n_e,Vtr),b(c,LBe,u),b(c,vr,u),g(mw,vr,null),e(vr,Xtr),e(vr,bc),e(bc,ztr),e(bc,cV),e(cV,Qtr),e(bc,Wtr),e(bc,fV),e(fV,Htr),e(bc,Utr),e(vr,Jtr),e(vr,gw),e(gw,Ytr),e(gw,s_e),e(s_e,Ktr),e(gw,Ztr),e(vr,ear),e(vr,ht),g(hw,ht,null),e(ht,oar),e(ht,l_e),e(l_e,rar),e(ht,tar),e(ht,Fc),e(Fc,aar),e(Fc,i_e),e(i_e,nar),e(Fc,sar),e(Fc,mV),e(mV,lar),e(Fc,iar),e(ht,dar),e(ht,d_e),e(d_e,car),e(ht,far),g(pw,ht,null),e(vr,mar),e(vr,po),g(_w,po,null),e(po,gar),e(po,c_e),e(c_e,har),e(po,par),e(po,un),e(un,_ar),e(un,f_e),e(f_e,uar),e(un,bar),e(un,m_e),e(m_e,Far),e(un,Tar),e(un,g_e),e(g_e,Mar),e(un,Ear),e(po,Car),e(po,H),e(H,b0),e(b0,h_e),e(h_e,war),e(b0,Aar),e(b0,gV),e(gV,yar),e(b0,Lar),e(H,xar),e(H,F0),e(F0,p_e),e(p_e,kar),e(F0,Sar),e(F0,hV),e(hV,Rar),e(F0,Bar),e(H,Par),e(H,v0),e(v0,__e),e(__e,$ar),e(v0,Iar),e(v0,pV),e(pV,qar),e(v0,Nar),e(H,jar),e(H,T0),e(T0,u_e),e(u_e,Dar),e(T0,Gar),e(T0,_V),e(_V,Oar),e(T0,Var),e(H,Xar),e(H,M0),e(M0,b_e),e(b_e,zar),e(M0,Qar),e(M0,uV),e(uV,War),e(M0,Har),e(H,Uar),e(H,E0),e(E0,F_e),e(F_e,Jar),e(E0,Yar),e(E0,bV),e(bV,Kar),e(E0,Zar),e(H,enr),e(H,C0),e(C0,v_e),e(v_e,onr),e(C0,rnr),e(C0,FV),e(FV,tnr),e(C0,anr),e(H,nnr),e(H,w0),e(w0,T_e),e(T_e,snr),e(w0,lnr),e(w0,vV),e(vV,inr),e(w0,dnr),e(H,cnr),e(H,A0),e(A0,M_e),e(M_e,fnr),e(A0,mnr),e(A0,TV),e(TV,gnr),e(A0,hnr),e(H,pnr),e(H,y0),e(y0,E_e),e(E_e,_nr),e(y0,unr),e(y0,MV),e(MV,bnr),e(y0,Fnr),e(H,vnr),e(H,L0),e(L0,C_e),e(C_e,Tnr),e(L0,Mnr),e(L0,EV),e(EV,Enr),e(L0,Cnr),e(H,wnr),e(H,x0),e(x0,w_e),e(w_e,Anr),e(x0,ynr),e(x0,CV),e(CV,Lnr),e(x0,xnr),e(H,knr),e(H,k0),e(k0,A_e),e(A_e,Snr),e(k0,Rnr),e(k0,wV),e(wV,Bnr),e(k0,Pnr),e(H,$nr),e(H,S0),e(S0,y_e),e(y_e,Inr),e(S0,qnr),e(S0,AV),e(AV,Nnr),e(S0,jnr),e(H,Dnr),e(H,R0),e(R0,L_e),e(L_e,Gnr),e(R0,Onr),e(R0,yV),e(yV,Vnr),e(R0,Xnr),e(H,znr),e(H,B0),e(B0,x_e),e(x_e,Qnr),e(B0,Wnr),e(B0,LV),e(LV,Hnr),e(B0,Unr),e(H,Jnr),e(H,P0),e(P0,k_e),e(k_e,Ynr),e(P0,Knr),e(P0,xV),e(xV,Znr),e(P0,esr),e(H,osr),e(H,$0),e($0,S_e),e(S_e,rsr),e($0,tsr),e($0,kV),e(kV,asr),e($0,nsr),e(H,ssr),e(H,I0),e(I0,R_e),e(R_e,lsr),e(I0,isr),e(I0,SV),e(SV,dsr),e(I0,csr),e(H,fsr),e(H,q0),e(q0,B_e),e(B_e,msr),e(q0,gsr),e(q0,RV),e(RV,hsr),e(q0,psr),e(H,_sr),e(H,N0),e(N0,P_e),e(P_e,usr),e(N0,bsr),e(N0,BV),e(BV,Fsr),e(N0,vsr),e(H,Tsr),e(H,j0),e(j0,$_e),e($_e,Msr),e(j0,Esr),e(j0,PV),e(PV,Csr),e(j0,wsr),e(H,Asr),e(H,D0),e(D0,I_e),e(I_e,ysr),e(D0,Lsr),e(D0,$V),e($V,xsr),e(D0,ksr),e(po,Ssr),e(po,q_e),e(q_e,Rsr),e(po,Bsr),g(uw,po,null),b(c,xBe,u),b(c,vc,u),e(vc,G0),e(G0,N_e),g(bw,N_e,null),e(vc,Psr),e(vc,j_e),e(j_e,$sr),b(c,kBe,u),b(c,Tr,u),g(Fw,Tr,null),e(Tr,Isr),e(Tr,Tc),e(Tc,qsr),e(Tc,IV),e(IV,Nsr),e(Tc,jsr),e(Tc,qV),e(qV,Dsr),e(Tc,Gsr),e(Tr,Osr),e(Tr,vw),e(vw,Vsr),e(vw,D_e),e(D_e,Xsr),e(vw,zsr),e(Tr,Qsr),e(Tr,pt),g(Tw,pt,null),e(pt,Wsr),e(pt,G_e),e(G_e,Hsr),e(pt,Usr),e(pt,Mc),e(Mc,Jsr),e(Mc,O_e),e(O_e,Ysr),e(Mc,Ksr),e(Mc,NV),e(NV,Zsr),e(Mc,elr),e(pt,olr),e(pt,V_e),e(V_e,rlr),e(pt,tlr),g(Mw,pt,null),e(Tr,alr),e(Tr,_o),g(Ew,_o,null),e(_o,nlr),e(_o,X_e),e(X_e,slr),e(_o,llr),e(_o,bn),e(bn,ilr),e(bn,z_e),e(z_e,dlr),e(bn,clr),e(bn,Q_e),e(Q_e,flr),e(bn,mlr),e(bn,W_e),e(W_e,glr),e(bn,hlr),e(_o,plr),e(_o,fe),e(fe,O0),e(O0,H_e),e(H_e,_lr),e(O0,ulr),e(O0,jV),e(jV,blr),e(O0,Flr),e(fe,vlr),e(fe,V0),e(V0,U_e),e(U_e,Tlr),e(V0,Mlr),e(V0,DV),e(DV,Elr),e(V0,Clr),e(fe,wlr),e(fe,X0),e(X0,J_e),e(J_e,Alr),e(X0,ylr),e(X0,GV),e(GV,Llr),e(X0,xlr),e(fe,klr),e(fe,z0),e(z0,Y_e),e(Y_e,Slr),e(z0,Rlr),e(z0,OV),e(OV,Blr),e(z0,Plr),e(fe,$lr),e(fe,Q0),e(Q0,K_e),e(K_e,Ilr),e(Q0,qlr),e(Q0,VV),e(VV,Nlr),e(Q0,jlr),e(fe,Dlr),e(fe,W0),e(W0,Z_e),e(Z_e,Glr),e(W0,Olr),e(W0,XV),e(XV,Vlr),e(W0,Xlr),e(fe,zlr),e(fe,H0),e(H0,eue),e(eue,Qlr),e(H0,Wlr),e(H0,zV),e(zV,Hlr),e(H0,Ulr),e(fe,Jlr),e(fe,U0),e(U0,oue),e(oue,Ylr),e(U0,Klr),e(U0,QV),e(QV,Zlr),e(U0,eir),e(fe,oir),e(fe,J0),e(J0,rue),e(rue,rir),e(J0,tir),e(J0,WV),e(WV,air),e(J0,nir),e(fe,sir),e(fe,Y0),e(Y0,tue),e(tue,lir),e(Y0,iir),e(Y0,HV),e(HV,dir),e(Y0,cir),e(fe,fir),e(fe,K0),e(K0,aue),e(aue,mir),e(K0,gir),e(K0,UV),e(UV,hir),e(K0,pir),e(fe,_ir),e(fe,Z0),e(Z0,nue),e(nue,uir),e(Z0,bir),e(Z0,JV),e(JV,Fir),e(Z0,vir),e(_o,Tir),e(_o,sue),e(sue,Mir),e(_o,Eir),g(Cw,_o,null),b(c,SBe,u),b(c,Ec,u),e(Ec,eT),e(eT,lue),g(ww,lue,null),e(Ec,Cir),e(Ec,iue),e(iue,wir),b(c,RBe,u),b(c,Mr,u),g(Aw,Mr,null),e(Mr,Air),e(Mr,Cc),e(Cc,yir),e(Cc,YV),e(YV,Lir),e(Cc,xir),e(Cc,KV),e(KV,kir),e(Cc,Sir),e(Mr,Rir),e(Mr,yw),e(yw,Bir),e(yw,due),e(due,Pir),e(yw,$ir),e(Mr,Iir),e(Mr,_t),g(Lw,_t,null),e(_t,qir),e(_t,cue),e(cue,Nir),e(_t,jir),e(_t,wc),e(wc,Dir),e(wc,fue),e(fue,Gir),e(wc,Oir),e(wc,ZV),e(ZV,Vir),e(wc,Xir),e(_t,zir),e(_t,mue),e(mue,Qir),e(_t,Wir),g(xw,_t,null),e(Mr,Hir),e(Mr,uo),g(kw,uo,null),e(uo,Uir),e(uo,gue),e(gue,Jir),e(uo,Yir),e(uo,Fn),e(Fn,Kir),e(Fn,hue),e(hue,Zir),e(Fn,edr),e(Fn,pue),e(pue,odr),e(Fn,rdr),e(Fn,_ue),e(_ue,tdr),e(Fn,adr),e(uo,ndr),e(uo,Sw),e(Sw,oT),e(oT,uue),e(uue,sdr),e(oT,ldr),e(oT,eX),e(eX,idr),e(oT,ddr),e(Sw,cdr),e(Sw,rT),e(rT,bue),e(bue,fdr),e(rT,mdr),e(rT,oX),e(oX,gdr),e(rT,hdr),e(uo,pdr),e(uo,Fue),e(Fue,_dr),e(uo,udr),g(Rw,uo,null),b(c,BBe,u),b(c,Ac,u),e(Ac,tT),e(tT,vue),g(Bw,vue,null),e(Ac,bdr),e(Ac,Tue),e(Tue,Fdr),b(c,PBe,u),b(c,Er,u),g(Pw,Er,null),e(Er,vdr),e(Er,yc),e(yc,Tdr),e(yc,rX),e(rX,Mdr),e(yc,Edr),e(yc,tX),e(tX,Cdr),e(yc,wdr),e(Er,Adr),e(Er,$w),e($w,ydr),e($w,Mue),e(Mue,Ldr),e($w,xdr),e(Er,kdr),e(Er,ut),g(Iw,ut,null),e(ut,Sdr),e(ut,Eue),e(Eue,Rdr),e(ut,Bdr),e(ut,Lc),e(Lc,Pdr),e(Lc,Cue),e(Cue,$dr),e(Lc,Idr),e(Lc,aX),e(aX,qdr),e(Lc,Ndr),e(ut,jdr),e(ut,wue),e(wue,Ddr),e(ut,Gdr),g(qw,ut,null),e(Er,Odr),e(Er,bo),g(Nw,bo,null),e(bo,Vdr),e(bo,Aue),e(Aue,Xdr),e(bo,zdr),e(bo,vn),e(vn,Qdr),e(vn,yue),e(yue,Wdr),e(vn,Hdr),e(vn,Lue),e(Lue,Udr),e(vn,Jdr),e(vn,xue),e(xue,Ydr),e(vn,Kdr),e(bo,Zdr),e(bo,J),e(J,aT),e(aT,kue),e(kue,ecr),e(aT,ocr),e(aT,nX),e(nX,rcr),e(aT,tcr),e(J,acr),e(J,nT),e(nT,Sue),e(Sue,ncr),e(nT,scr),e(nT,sX),e(sX,lcr),e(nT,icr),e(J,dcr),e(J,sT),e(sT,Rue),e(Rue,ccr),e(sT,fcr),e(sT,lX),e(lX,mcr),e(sT,gcr),e(J,hcr),e(J,lT),e(lT,Bue),e(Bue,pcr),e(lT,_cr),e(lT,iX),e(iX,ucr),e(lT,bcr),e(J,Fcr),e(J,iT),e(iT,Pue),e(Pue,vcr),e(iT,Tcr),e(iT,dX),e(dX,Mcr),e(iT,Ecr),e(J,Ccr),e(J,dT),e(dT,$ue),e($ue,wcr),e(dT,Acr),e(dT,cX),e(cX,ycr),e(dT,Lcr),e(J,xcr),e(J,cT),e(cT,Iue),e(Iue,kcr),e(cT,Scr),e(cT,fX),e(fX,Rcr),e(cT,Bcr),e(J,Pcr),e(J,fT),e(fT,que),e(que,$cr),e(fT,Icr),e(fT,mX),e(mX,qcr),e(fT,Ncr),e(J,jcr),e(J,mT),e(mT,Nue),e(Nue,Dcr),e(mT,Gcr),e(mT,gX),e(gX,Ocr),e(mT,Vcr),e(J,Xcr),e(J,gT),e(gT,jue),e(jue,zcr),e(gT,Qcr),e(gT,hX),e(hX,Wcr),e(gT,Hcr),e(J,Ucr),e(J,hT),e(hT,Due),e(Due,Jcr),e(hT,Ycr),e(hT,pX),e(pX,Kcr),e(hT,Zcr),e(J,efr),e(J,pT),e(pT,Gue),e(Gue,ofr),e(pT,rfr),e(pT,_X),e(_X,tfr),e(pT,afr),e(J,nfr),e(J,_T),e(_T,Oue),e(Oue,sfr),e(_T,lfr),e(_T,uX),e(uX,ifr),e(_T,dfr),e(J,cfr),e(J,uT),e(uT,Vue),e(Vue,ffr),e(uT,mfr),e(uT,bX),e(bX,gfr),e(uT,hfr),e(J,pfr),e(J,bT),e(bT,Xue),e(Xue,_fr),e(bT,ufr),e(bT,FX),e(FX,bfr),e(bT,Ffr),e(J,vfr),e(J,FT),e(FT,zue),e(zue,Tfr),e(FT,Mfr),e(FT,vX),e(vX,Efr),e(FT,Cfr),e(J,wfr),e(J,vT),e(vT,Que),e(Que,Afr),e(vT,yfr),e(vT,TX),e(TX,Lfr),e(vT,xfr),e(J,kfr),e(J,TT),e(TT,Wue),e(Wue,Sfr),e(TT,Rfr),e(TT,MX),e(MX,Bfr),e(TT,Pfr),e(J,$fr),e(J,MT),e(MT,Hue),e(Hue,Ifr),e(MT,qfr),e(MT,EX),e(EX,Nfr),e(MT,jfr),e(J,Dfr),e(J,ET),e(ET,Uue),e(Uue,Gfr),e(ET,Ofr),e(ET,CX),e(CX,Vfr),e(ET,Xfr),e(bo,zfr),e(bo,Jue),e(Jue,Qfr),e(bo,Wfr),g(jw,bo,null),b(c,$Be,u),b(c,xc,u),e(xc,CT),e(CT,Yue),g(Dw,Yue,null),e(xc,Hfr),e(xc,Kue),e(Kue,Ufr),b(c,IBe,u),b(c,Cr,u),g(Gw,Cr,null),e(Cr,Jfr),e(Cr,kc),e(kc,Yfr),e(kc,wX),e(wX,Kfr),e(kc,Zfr),e(kc,AX),e(AX,emr),e(kc,omr),e(Cr,rmr),e(Cr,Ow),e(Ow,tmr),e(Ow,Zue),e(Zue,amr),e(Ow,nmr),e(Cr,smr),e(Cr,bt),g(Vw,bt,null),e(bt,lmr),e(bt,e1e),e(e1e,imr),e(bt,dmr),e(bt,Sc),e(Sc,cmr),e(Sc,o1e),e(o1e,fmr),e(Sc,mmr),e(Sc,yX),e(yX,gmr),e(Sc,hmr),e(bt,pmr),e(bt,r1e),e(r1e,_mr),e(bt,umr),g(Xw,bt,null),e(Cr,bmr),e(Cr,Fo),g(zw,Fo,null),e(Fo,Fmr),e(Fo,t1e),e(t1e,vmr),e(Fo,Tmr),e(Fo,Tn),e(Tn,Mmr),e(Tn,a1e),e(a1e,Emr),e(Tn,Cmr),e(Tn,n1e),e(n1e,wmr),e(Tn,Amr),e(Tn,s1e),e(s1e,ymr),e(Tn,Lmr),e(Fo,xmr),e(Fo,be),e(be,wT),e(wT,l1e),e(l1e,kmr),e(wT,Smr),e(wT,LX),e(LX,Rmr),e(wT,Bmr),e(be,Pmr),e(be,AT),e(AT,i1e),e(i1e,$mr),e(AT,Imr),e(AT,xX),e(xX,qmr),e(AT,Nmr),e(be,jmr),e(be,yT),e(yT,d1e),e(d1e,Dmr),e(yT,Gmr),e(yT,kX),e(kX,Omr),e(yT,Vmr),e(be,Xmr),e(be,LT),e(LT,c1e),e(c1e,zmr),e(LT,Qmr),e(LT,SX),e(SX,Wmr),e(LT,Hmr),e(be,Umr),e(be,xT),e(xT,f1e),e(f1e,Jmr),e(xT,Ymr),e(xT,RX),e(RX,Kmr),e(xT,Zmr),e(be,egr),e(be,kT),e(kT,m1e),e(m1e,ogr),e(kT,rgr),e(kT,BX),e(BX,tgr),e(kT,agr),e(be,ngr),e(be,ST),e(ST,g1e),e(g1e,sgr),e(ST,lgr),e(ST,PX),e(PX,igr),e(ST,dgr),e(be,cgr),e(be,RT),e(RT,h1e),e(h1e,fgr),e(RT,mgr),e(RT,$X),e($X,ggr),e(RT,hgr),e(be,pgr),e(be,BT),e(BT,p1e),e(p1e,_gr),e(BT,ugr),e(BT,IX),e(IX,bgr),e(BT,Fgr),e(be,vgr),e(be,PT),e(PT,_1e),e(_1e,Tgr),e(PT,Mgr),e(PT,qX),e(qX,Egr),e(PT,Cgr),e(Fo,wgr),e(Fo,u1e),e(u1e,Agr),e(Fo,ygr),g(Qw,Fo,null),b(c,qBe,u),b(c,Rc,u),e(Rc,$T),e($T,b1e),g(Ww,b1e,null),e(Rc,Lgr),e(Rc,F1e),e(F1e,xgr),b(c,NBe,u),b(c,wr,u),g(Hw,wr,null),e(wr,kgr),e(wr,Bc),e(Bc,Sgr),e(Bc,NX),e(NX,Rgr),e(Bc,Bgr),e(Bc,jX),e(jX,Pgr),e(Bc,$gr),e(wr,Igr),e(wr,Uw),e(Uw,qgr),e(Uw,v1e),e(v1e,Ngr),e(Uw,jgr),e(wr,Dgr),e(wr,Ft),g(Jw,Ft,null),e(Ft,Ggr),e(Ft,T1e),e(T1e,Ogr),e(Ft,Vgr),e(Ft,Pc),e(Pc,Xgr),e(Pc,M1e),e(M1e,zgr),e(Pc,Qgr),e(Pc,DX),e(DX,Wgr),e(Pc,Hgr),e(Ft,Ugr),e(Ft,E1e),e(E1e,Jgr),e(Ft,Ygr),g(Yw,Ft,null),e(wr,Kgr),e(wr,vo),g(Kw,vo,null),e(vo,Zgr),e(vo,C1e),e(C1e,ehr),e(vo,ohr),e(vo,Mn),e(Mn,rhr),e(Mn,w1e),e(w1e,thr),e(Mn,ahr),e(Mn,A1e),e(A1e,nhr),e(Mn,shr),e(Mn,y1e),e(y1e,lhr),e(Mn,ihr),e(vo,dhr),e(vo,V),e(V,IT),e(IT,L1e),e(L1e,chr),e(IT,fhr),e(IT,GX),e(GX,mhr),e(IT,ghr),e(V,hhr),e(V,qT),e(qT,x1e),e(x1e,phr),e(qT,_hr),e(qT,OX),e(OX,uhr),e(qT,bhr),e(V,Fhr),e(V,NT),e(NT,k1e),e(k1e,vhr),e(NT,Thr),e(NT,VX),e(VX,Mhr),e(NT,Ehr),e(V,Chr),e(V,jT),e(jT,S1e),e(S1e,whr),e(jT,Ahr),e(jT,XX),e(XX,yhr),e(jT,Lhr),e(V,xhr),e(V,DT),e(DT,R1e),e(R1e,khr),e(DT,Shr),e(DT,zX),e(zX,Rhr),e(DT,Bhr),e(V,Phr),e(V,GT),e(GT,B1e),e(B1e,$hr),e(GT,Ihr),e(GT,QX),e(QX,qhr),e(GT,Nhr),e(V,jhr),e(V,OT),e(OT,P1e),e(P1e,Dhr),e(OT,Ghr),e(OT,WX),e(WX,Ohr),e(OT,Vhr),e(V,Xhr),e(V,VT),e(VT,$1e),e($1e,zhr),e(VT,Qhr),e(VT,HX),e(HX,Whr),e(VT,Hhr),e(V,Uhr),e(V,XT),e(XT,I1e),e(I1e,Jhr),e(XT,Yhr),e(XT,UX),e(UX,Khr),e(XT,Zhr),e(V,epr),e(V,zT),e(zT,q1e),e(q1e,opr),e(zT,rpr),e(zT,JX),e(JX,tpr),e(zT,apr),e(V,npr),e(V,QT),e(QT,N1e),e(N1e,spr),e(QT,lpr),e(QT,YX),e(YX,ipr),e(QT,dpr),e(V,cpr),e(V,WT),e(WT,j1e),e(j1e,fpr),e(WT,mpr),e(WT,KX),e(KX,gpr),e(WT,hpr),e(V,ppr),e(V,HT),e(HT,D1e),e(D1e,_pr),e(HT,upr),e(HT,ZX),e(ZX,bpr),e(HT,Fpr),e(V,vpr),e(V,UT),e(UT,G1e),e(G1e,Tpr),e(UT,Mpr),e(UT,ez),e(ez,Epr),e(UT,Cpr),e(V,wpr),e(V,JT),e(JT,O1e),e(O1e,Apr),e(JT,ypr),e(JT,oz),e(oz,Lpr),e(JT,xpr),e(V,kpr),e(V,YT),e(YT,V1e),e(V1e,Spr),e(YT,Rpr),e(YT,rz),e(rz,Bpr),e(YT,Ppr),e(V,$pr),e(V,KT),e(KT,X1e),e(X1e,Ipr),e(KT,qpr),e(KT,tz),e(tz,Npr),e(KT,jpr),e(V,Dpr),e(V,ZT),e(ZT,z1e),e(z1e,Gpr),e(ZT,Opr),e(ZT,az),e(az,Vpr),e(ZT,Xpr),e(V,zpr),e(V,e8),e(e8,Q1e),e(Q1e,Qpr),e(e8,Wpr),e(e8,nz),e(nz,Hpr),e(e8,Upr),e(V,Jpr),e(V,o8),e(o8,W1e),e(W1e,Ypr),e(o8,Kpr),e(o8,sz),e(sz,Zpr),e(o8,e_r),e(V,o_r),e(V,r8),e(r8,H1e),e(H1e,r_r),e(r8,t_r),e(r8,lz),e(lz,a_r),e(r8,n_r),e(V,s_r),e(V,t8),e(t8,U1e),e(U1e,l_r),e(t8,i_r),e(t8,iz),e(iz,d_r),e(t8,c_r),e(V,f_r),e(V,a8),e(a8,J1e),e(J1e,m_r),e(a8,g_r),e(a8,dz),e(dz,h_r),e(a8,p_r),e(V,__r),e(V,n8),e(n8,Y1e),e(Y1e,u_r),e(n8,b_r),e(n8,cz),e(cz,F_r),e(n8,v_r),e(V,T_r),e(V,s8),e(s8,K1e),e(K1e,M_r),e(s8,E_r),e(s8,fz),e(fz,C_r),e(s8,w_r),e(V,A_r),e(V,l8),e(l8,Z1e),e(Z1e,y_r),e(l8,L_r),e(l8,mz),e(mz,x_r),e(l8,k_r),e(vo,S_r),e(vo,ebe),e(ebe,R_r),e(vo,B_r),g(Zw,vo,null),b(c,jBe,u),b(c,$c,u),e($c,i8),e(i8,obe),g(eA,obe,null),e($c,P_r),e($c,rbe),e(rbe,$_r),b(c,DBe,u),b(c,Ar,u),g(oA,Ar,null),e(Ar,I_r),e(Ar,Ic),e(Ic,q_r),e(Ic,gz),e(gz,N_r),e(Ic,j_r),e(Ic,hz),e(hz,D_r),e(Ic,G_r),e(Ar,O_r),e(Ar,rA),e(rA,V_r),e(rA,tbe),e(tbe,X_r),e(rA,z_r),e(Ar,Q_r),e(Ar,vt),g(tA,vt,null),e(vt,W_r),e(vt,abe),e(abe,H_r),e(vt,U_r),e(vt,qc),e(qc,J_r),e(qc,nbe),e(nbe,Y_r),e(qc,K_r),e(qc,pz),e(pz,Z_r),e(qc,eur),e(vt,our),e(vt,sbe),e(sbe,rur),e(vt,tur),g(aA,vt,null),e(Ar,aur),e(Ar,To),g(nA,To,null),e(To,nur),e(To,lbe),e(lbe,sur),e(To,lur),e(To,En),e(En,iur),e(En,ibe),e(ibe,dur),e(En,cur),e(En,dbe),e(dbe,fur),e(En,mur),e(En,cbe),e(cbe,gur),e(En,hur),e(To,pur),e(To,se),e(se,d8),e(d8,fbe),e(fbe,_ur),e(d8,uur),e(d8,_z),e(_z,bur),e(d8,Fur),e(se,vur),e(se,c8),e(c8,mbe),e(mbe,Tur),e(c8,Mur),e(c8,uz),e(uz,Eur),e(c8,Cur),e(se,wur),e(se,f8),e(f8,gbe),e(gbe,Aur),e(f8,yur),e(f8,bz),e(bz,Lur),e(f8,xur),e(se,kur),e(se,m8),e(m8,hbe),e(hbe,Sur),e(m8,Rur),e(m8,Fz),e(Fz,Bur),e(m8,Pur),e(se,$ur),e(se,g8),e(g8,pbe),e(pbe,Iur),e(g8,qur),e(g8,vz),e(vz,Nur),e(g8,jur),e(se,Dur),e(se,h8),e(h8,_be),e(_be,Gur),e(h8,Our),e(h8,Tz),e(Tz,Vur),e(h8,Xur),e(se,zur),e(se,p8),e(p8,ube),e(ube,Qur),e(p8,Wur),e(p8,Mz),e(Mz,Hur),e(p8,Uur),e(se,Jur),e(se,_8),e(_8,bbe),e(bbe,Yur),e(_8,Kur),e(_8,Ez),e(Ez,Zur),e(_8,e1r),e(se,o1r),e(se,u8),e(u8,Fbe),e(Fbe,r1r),e(u8,t1r),e(u8,Cz),e(Cz,a1r),e(u8,n1r),e(se,s1r),e(se,b8),e(b8,vbe),e(vbe,l1r),e(b8,i1r),e(b8,wz),e(wz,d1r),e(b8,c1r),e(se,f1r),e(se,F8),e(F8,Tbe),e(Tbe,m1r),e(F8,g1r),e(F8,Az),e(Az,h1r),e(F8,p1r),e(se,_1r),e(se,v8),e(v8,Mbe),e(Mbe,u1r),e(v8,b1r),e(v8,yz),e(yz,F1r),e(v8,v1r),e(se,T1r),e(se,T8),e(T8,Ebe),e(Ebe,M1r),e(T8,E1r),e(T8,Lz),e(Lz,C1r),e(T8,w1r),e(se,A1r),e(se,M8),e(M8,Cbe),e(Cbe,y1r),e(M8,L1r),e(M8,xz),e(xz,x1r),e(M8,k1r),e(se,S1r),e(se,E8),e(E8,wbe),e(wbe,R1r),e(E8,B1r),e(E8,kz),e(kz,P1r),e(E8,$1r),e(se,I1r),e(se,C8),e(C8,Abe),e(Abe,q1r),e(C8,N1r),e(C8,Sz),e(Sz,j1r),e(C8,D1r),e(se,G1r),e(se,w8),e(w8,ybe),e(ybe,O1r),e(w8,V1r),e(w8,Rz),e(Rz,X1r),e(w8,z1r),e(To,Q1r),e(To,Lbe),e(Lbe,W1r),e(To,H1r),g(sA,To,null),b(c,GBe,u),b(c,Nc,u),e(Nc,A8),e(A8,xbe),g(lA,xbe,null),e(Nc,U1r),e(Nc,kbe),e(kbe,J1r),b(c,OBe,u),b(c,yr,u),g(iA,yr,null),e(yr,Y1r),e(yr,jc),e(jc,K1r),e(jc,Bz),e(Bz,Z1r),e(jc,ebr),e(jc,Pz),e(Pz,obr),e(jc,rbr),e(yr,tbr),e(yr,dA),e(dA,abr),e(dA,Sbe),e(Sbe,nbr),e(dA,sbr),e(yr,lbr),e(yr,Tt),g(cA,Tt,null),e(Tt,ibr),e(Tt,Rbe),e(Rbe,dbr),e(Tt,cbr),e(Tt,Dc),e(Dc,fbr),e(Dc,Bbe),e(Bbe,mbr),e(Dc,gbr),e(Dc,$z),e($z,hbr),e(Dc,pbr),e(Tt,_br),e(Tt,Pbe),e(Pbe,ubr),e(Tt,bbr),g(fA,Tt,null),e(yr,Fbr),e(yr,Mo),g(mA,Mo,null),e(Mo,vbr),e(Mo,$be),e($be,Tbr),e(Mo,Mbr),e(Mo,Cn),e(Cn,Ebr),e(Cn,Ibe),e(Ibe,Cbr),e(Cn,wbr),e(Cn,qbe),e(qbe,Abr),e(Cn,ybr),e(Cn,Nbe),e(Nbe,Lbr),e(Cn,xbr),e(Mo,kbr),e(Mo,jbe),e(jbe,y8),e(y8,Dbe),e(Dbe,Sbr),e(y8,Rbr),e(y8,Iz),e(Iz,Bbr),e(y8,Pbr),e(Mo,$br),e(Mo,Gbe),e(Gbe,Ibr),e(Mo,qbr),g(gA,Mo,null),b(c,VBe,u),b(c,Gc,u),e(Gc,L8),e(L8,Obe),g(hA,Obe,null),e(Gc,Nbr),e(Gc,Vbe),e(Vbe,jbr),b(c,XBe,u),b(c,Lr,u),g(pA,Lr,null),e(Lr,Dbr),e(Lr,Oc),e(Oc,Gbr),e(Oc,qz),e(qz,Obr),e(Oc,Vbr),e(Oc,Nz),e(Nz,Xbr),e(Oc,zbr),e(Lr,Qbr),e(Lr,_A),e(_A,Wbr),e(_A,Xbe),e(Xbe,Hbr),e(_A,Ubr),e(Lr,Jbr),e(Lr,Mt),g(uA,Mt,null),e(Mt,Ybr),e(Mt,zbe),e(zbe,Kbr),e(Mt,Zbr),e(Mt,Vc),e(Vc,e2r),e(Vc,Qbe),e(Qbe,o2r),e(Vc,r2r),e(Vc,jz),e(jz,t2r),e(Vc,a2r),e(Mt,n2r),e(Mt,Wbe),e(Wbe,s2r),e(Mt,l2r),g(bA,Mt,null),e(Lr,i2r),e(Lr,Eo),g(FA,Eo,null),e(Eo,d2r),e(Eo,Hbe),e(Hbe,c2r),e(Eo,f2r),e(Eo,wn),e(wn,m2r),e(wn,Ube),e(Ube,g2r),e(wn,h2r),e(wn,Jbe),e(Jbe,p2r),e(wn,_2r),e(wn,Ybe),e(Ybe,u2r),e(wn,b2r),e(Eo,F2r),e(Eo,Y),e(Y,x8),e(x8,Kbe),e(Kbe,v2r),e(x8,T2r),e(x8,Dz),e(Dz,M2r),e(x8,E2r),e(Y,C2r),e(Y,k8),e(k8,Zbe),e(Zbe,w2r),e(k8,A2r),e(k8,Gz),e(Gz,y2r),e(k8,L2r),e(Y,x2r),e(Y,S8),e(S8,e2e),e(e2e,k2r),e(S8,S2r),e(S8,Oz),e(Oz,R2r),e(S8,B2r),e(Y,P2r),e(Y,R8),e(R8,o2e),e(o2e,$2r),e(R8,I2r),e(R8,Vz),e(Vz,q2r),e(R8,N2r),e(Y,j2r),e(Y,B8),e(B8,r2e),e(r2e,D2r),e(B8,G2r),e(B8,Xz),e(Xz,O2r),e(B8,V2r),e(Y,X2r),e(Y,P8),e(P8,t2e),e(t2e,z2r),e(P8,Q2r),e(P8,zz),e(zz,W2r),e(P8,H2r),e(Y,U2r),e(Y,$8),e($8,a2e),e(a2e,J2r),e($8,Y2r),e($8,Qz),e(Qz,K2r),e($8,Z2r),e(Y,eFr),e(Y,I8),e(I8,n2e),e(n2e,oFr),e(I8,rFr),e(I8,Wz),e(Wz,tFr),e(I8,aFr),e(Y,nFr),e(Y,q8),e(q8,s2e),e(s2e,sFr),e(q8,lFr),e(q8,Hz),e(Hz,iFr),e(q8,dFr),e(Y,cFr),e(Y,N8),e(N8,l2e),e(l2e,fFr),e(N8,mFr),e(N8,Uz),e(Uz,gFr),e(N8,hFr),e(Y,pFr),e(Y,j8),e(j8,i2e),e(i2e,_Fr),e(j8,uFr),e(j8,Jz),e(Jz,bFr),e(j8,FFr),e(Y,vFr),e(Y,D8),e(D8,d2e),e(d2e,TFr),e(D8,MFr),e(D8,Yz),e(Yz,EFr),e(D8,CFr),e(Y,wFr),e(Y,G8),e(G8,c2e),e(c2e,AFr),e(G8,yFr),e(G8,Kz),e(Kz,LFr),e(G8,xFr),e(Y,kFr),e(Y,O8),e(O8,f2e),e(f2e,SFr),e(O8,RFr),e(O8,Zz),e(Zz,BFr),e(O8,PFr),e(Y,$Fr),e(Y,V8),e(V8,m2e),e(m2e,IFr),e(V8,qFr),e(V8,eQ),e(eQ,NFr),e(V8,jFr),e(Y,DFr),e(Y,X8),e(X8,g2e),e(g2e,GFr),e(X8,OFr),e(X8,oQ),e(oQ,VFr),e(X8,XFr),e(Y,zFr),e(Y,z8),e(z8,h2e),e(h2e,QFr),e(z8,WFr),e(z8,rQ),e(rQ,HFr),e(z8,UFr),e(Y,JFr),e(Y,Q8),e(Q8,p2e),e(p2e,YFr),e(Q8,KFr),e(Q8,tQ),e(tQ,ZFr),e(Q8,evr),e(Y,ovr),e(Y,W8),e(W8,_2e),e(_2e,rvr),e(W8,tvr),e(W8,aQ),e(aQ,avr),e(W8,nvr),e(Y,svr),e(Y,H8),e(H8,u2e),e(u2e,lvr),e(H8,ivr),e(H8,nQ),e(nQ,dvr),e(H8,cvr),e(Eo,fvr),e(Eo,b2e),e(b2e,mvr),e(Eo,gvr),g(vA,Eo,null),b(c,zBe,u),b(c,Xc,u),e(Xc,U8),e(U8,F2e),g(TA,F2e,null),e(Xc,hvr),e(Xc,v2e),e(v2e,pvr),b(c,QBe,u),b(c,xr,u),g(MA,xr,null),e(xr,_vr),e(xr,zc),e(zc,uvr),e(zc,sQ),e(sQ,bvr),e(zc,Fvr),e(zc,lQ),e(lQ,vvr),e(zc,Tvr),e(xr,Mvr),e(xr,EA),e(EA,Evr),e(EA,T2e),e(T2e,Cvr),e(EA,wvr),e(xr,Avr),e(xr,Et),g(CA,Et,null),e(Et,yvr),e(Et,M2e),e(M2e,Lvr),e(Et,xvr),e(Et,Qc),e(Qc,kvr),e(Qc,E2e),e(E2e,Svr),e(Qc,Rvr),e(Qc,iQ),e(iQ,Bvr),e(Qc,Pvr),e(Et,$vr),e(Et,C2e),e(C2e,Ivr),e(Et,qvr),g(wA,Et,null),e(xr,Nvr),e(xr,Co),g(AA,Co,null),e(Co,jvr),e(Co,w2e),e(w2e,Dvr),e(Co,Gvr),e(Co,An),e(An,Ovr),e(An,A2e),e(A2e,Vvr),e(An,Xvr),e(An,y2e),e(y2e,zvr),e(An,Qvr),e(An,L2e),e(L2e,Wvr),e(An,Hvr),e(Co,Uvr),e(Co,K),e(K,J8),e(J8,x2e),e(x2e,Jvr),e(J8,Yvr),e(J8,dQ),e(dQ,Kvr),e(J8,Zvr),e(K,e6r),e(K,Y8),e(Y8,k2e),e(k2e,o6r),e(Y8,r6r),e(Y8,cQ),e(cQ,t6r),e(Y8,a6r),e(K,n6r),e(K,K8),e(K8,S2e),e(S2e,s6r),e(K8,l6r),e(K8,fQ),e(fQ,i6r),e(K8,d6r),e(K,c6r),e(K,Z8),e(Z8,R2e),e(R2e,f6r),e(Z8,m6r),e(Z8,mQ),e(mQ,g6r),e(Z8,h6r),e(K,p6r),e(K,e7),e(e7,B2e),e(B2e,_6r),e(e7,u6r),e(e7,gQ),e(gQ,b6r),e(e7,F6r),e(K,v6r),e(K,o7),e(o7,P2e),e(P2e,T6r),e(o7,M6r),e(o7,hQ),e(hQ,E6r),e(o7,C6r),e(K,w6r),e(K,r7),e(r7,$2e),e($2e,A6r),e(r7,y6r),e(r7,pQ),e(pQ,L6r),e(r7,x6r),e(K,k6r),e(K,t7),e(t7,I2e),e(I2e,S6r),e(t7,R6r),e(t7,_Q),e(_Q,B6r),e(t7,P6r),e(K,$6r),e(K,a7),e(a7,q2e),e(q2e,I6r),e(a7,q6r),e(a7,uQ),e(uQ,N6r),e(a7,j6r),e(K,D6r),e(K,n7),e(n7,N2e),e(N2e,G6r),e(n7,O6r),e(n7,bQ),e(bQ,V6r),e(n7,X6r),e(K,z6r),e(K,s7),e(s7,j2e),e(j2e,Q6r),e(s7,W6r),e(s7,FQ),e(FQ,H6r),e(s7,U6r),e(K,J6r),e(K,l7),e(l7,D2e),e(D2e,Y6r),e(l7,K6r),e(l7,vQ),e(vQ,Z6r),e(l7,e0r),e(K,o0r),e(K,i7),e(i7,G2e),e(G2e,r0r),e(i7,t0r),e(i7,TQ),e(TQ,a0r),e(i7,n0r),e(K,s0r),e(K,d7),e(d7,O2e),e(O2e,l0r),e(d7,i0r),e(d7,MQ),e(MQ,d0r),e(d7,c0r),e(K,f0r),e(K,c7),e(c7,V2e),e(V2e,m0r),e(c7,g0r),e(c7,EQ),e(EQ,h0r),e(c7,p0r),e(K,_0r),e(K,f7),e(f7,X2e),e(X2e,u0r),e(f7,b0r),e(f7,CQ),e(CQ,F0r),e(f7,v0r),e(K,T0r),e(K,m7),e(m7,z2e),e(z2e,M0r),e(m7,E0r),e(m7,wQ),e(wQ,C0r),e(m7,w0r),e(K,A0r),e(K,g7),e(g7,Q2e),e(Q2e,y0r),e(g7,L0r),e(g7,AQ),e(AQ,x0r),e(g7,k0r),e(K,S0r),e(K,h7),e(h7,W2e),e(W2e,R0r),e(h7,B0r),e(h7,yQ),e(yQ,P0r),e(h7,$0r),e(K,I0r),e(K,p7),e(p7,H2e),e(H2e,q0r),e(p7,N0r),e(p7,LQ),e(LQ,j0r),e(p7,D0r),e(Co,G0r),e(Co,U2e),e(U2e,O0r),e(Co,V0r),g(yA,Co,null),b(c,WBe,u),b(c,Wc,u),e(Wc,_7),e(_7,J2e),g(LA,J2e,null),e(Wc,X0r),e(Wc,Y2e),e(Y2e,z0r),b(c,HBe,u),b(c,kr,u),g(xA,kr,null),e(kr,Q0r),e(kr,Hc),e(Hc,W0r),e(Hc,xQ),e(xQ,H0r),e(Hc,U0r),e(Hc,kQ),e(kQ,J0r),e(Hc,Y0r),e(kr,K0r),e(kr,kA),e(kA,Z0r),e(kA,K2e),e(K2e,eTr),e(kA,oTr),e(kr,rTr),e(kr,Ct),g(SA,Ct,null),e(Ct,tTr),e(Ct,Z2e),e(Z2e,aTr),e(Ct,nTr),e(Ct,Uc),e(Uc,sTr),e(Uc,eFe),e(eFe,lTr),e(Uc,iTr),e(Uc,SQ),e(SQ,dTr),e(Uc,cTr),e(Ct,fTr),e(Ct,oFe),e(oFe,mTr),e(Ct,gTr),g(RA,Ct,null),e(kr,hTr),e(kr,wo),g(BA,wo,null),e(wo,pTr),e(wo,rFe),e(rFe,_Tr),e(wo,uTr),e(wo,yn),e(yn,bTr),e(yn,tFe),e(tFe,FTr),e(yn,vTr),e(yn,aFe),e(aFe,TTr),e(yn,MTr),e(yn,nFe),e(nFe,ETr),e(yn,CTr),e(wo,wTr),e(wo,sFe),e(sFe,u7),e(u7,lFe),e(lFe,ATr),e(u7,yTr),e(u7,RQ),e(RQ,LTr),e(u7,xTr),e(wo,kTr),e(wo,iFe),e(iFe,STr),e(wo,RTr),g(PA,wo,null),b(c,UBe,u),b(c,Jc,u),e(Jc,b7),e(b7,dFe),g($A,dFe,null),e(Jc,BTr),e(Jc,cFe),e(cFe,PTr),b(c,JBe,u),b(c,Sr,u),g(IA,Sr,null),e(Sr,$Tr),e(Sr,Yc),e(Yc,ITr),e(Yc,BQ),e(BQ,qTr),e(Yc,NTr),e(Yc,PQ),e(PQ,jTr),e(Yc,DTr),e(Sr,GTr),e(Sr,qA),e(qA,OTr),e(qA,fFe),e(fFe,VTr),e(qA,XTr),e(Sr,zTr),e(Sr,wt),g(NA,wt,null),e(wt,QTr),e(wt,mFe),e(mFe,WTr),e(wt,HTr),e(wt,Kc),e(Kc,UTr),e(Kc,gFe),e(gFe,JTr),e(Kc,YTr),e(Kc,$Q),e($Q,KTr),e(Kc,ZTr),e(wt,e8r),e(wt,hFe),e(hFe,o8r),e(wt,r8r),g(jA,wt,null),e(Sr,t8r),e(Sr,Ao),g(DA,Ao,null),e(Ao,a8r),e(Ao,pFe),e(pFe,n8r),e(Ao,s8r),e(Ao,Ln),e(Ln,l8r),e(Ln,_Fe),e(_Fe,i8r),e(Ln,d8r),e(Ln,uFe),e(uFe,c8r),e(Ln,f8r),e(Ln,bFe),e(bFe,m8r),e(Ln,g8r),e(Ao,h8r),e(Ao,FFe),e(FFe,F7),e(F7,vFe),e(vFe,p8r),e(F7,_8r),e(F7,IQ),e(IQ,u8r),e(F7,b8r),e(Ao,F8r),e(Ao,TFe),e(TFe,v8r),e(Ao,T8r),g(GA,Ao,null),b(c,YBe,u),b(c,Zc,u),e(Zc,v7),e(v7,MFe),g(OA,MFe,null),e(Zc,M8r),e(Zc,EFe),e(EFe,E8r),b(c,KBe,u),b(c,Rr,u),g(VA,Rr,null),e(Rr,C8r),e(Rr,ef),e(ef,w8r),e(ef,qQ),e(qQ,A8r),e(ef,y8r),e(ef,NQ),e(NQ,L8r),e(ef,x8r),e(Rr,k8r),e(Rr,XA),e(XA,S8r),e(XA,CFe),e(CFe,R8r),e(XA,B8r),e(Rr,P8r),e(Rr,At),g(zA,At,null),e(At,$8r),e(At,wFe),e(wFe,I8r),e(At,q8r),e(At,of),e(of,N8r),e(of,AFe),e(AFe,j8r),e(of,D8r),e(of,jQ),e(jQ,G8r),e(of,O8r),e(At,V8r),e(At,yFe),e(yFe,X8r),e(At,z8r),g(QA,At,null),e(Rr,Q8r),e(Rr,yo),g(WA,yo,null),e(yo,W8r),e(yo,LFe),e(LFe,H8r),e(yo,U8r),e(yo,xn),e(xn,J8r),e(xn,xFe),e(xFe,Y8r),e(xn,K8r),e(xn,kFe),e(kFe,Z8r),e(xn,e7r),e(xn,SFe),e(SFe,o7r),e(xn,r7r),e(yo,t7r),e(yo,z),e(z,T7),e(T7,RFe),e(RFe,a7r),e(T7,n7r),e(T7,DQ),e(DQ,s7r),e(T7,l7r),e(z,i7r),e(z,M7),e(M7,BFe),e(BFe,d7r),e(M7,c7r),e(M7,GQ),e(GQ,f7r),e(M7,m7r),e(z,g7r),e(z,E7),e(E7,PFe),e(PFe,h7r),e(E7,p7r),e(E7,OQ),e(OQ,_7r),e(E7,u7r),e(z,b7r),e(z,C7),e(C7,$Fe),e($Fe,F7r),e(C7,v7r),e(C7,VQ),e(VQ,T7r),e(C7,M7r),e(z,E7r),e(z,w7),e(w7,IFe),e(IFe,C7r),e(w7,w7r),e(w7,XQ),e(XQ,A7r),e(w7,y7r),e(z,L7r),e(z,A7),e(A7,qFe),e(qFe,x7r),e(A7,k7r),e(A7,zQ),e(zQ,S7r),e(A7,R7r),e(z,B7r),e(z,y7),e(y7,NFe),e(NFe,P7r),e(y7,$7r),e(y7,QQ),e(QQ,I7r),e(y7,q7r),e(z,N7r),e(z,L7),e(L7,jFe),e(jFe,j7r),e(L7,D7r),e(L7,WQ),e(WQ,G7r),e(L7,O7r),e(z,V7r),e(z,x7),e(x7,DFe),e(DFe,X7r),e(x7,z7r),e(x7,HQ),e(HQ,Q7r),e(x7,W7r),e(z,H7r),e(z,k7),e(k7,GFe),e(GFe,U7r),e(k7,J7r),e(k7,UQ),e(UQ,Y7r),e(k7,K7r),e(z,Z7r),e(z,S7),e(S7,OFe),e(OFe,eMr),e(S7,oMr),e(S7,JQ),e(JQ,rMr),e(S7,tMr),e(z,aMr),e(z,R7),e(R7,VFe),e(VFe,nMr),e(R7,sMr),e(R7,YQ),e(YQ,lMr),e(R7,iMr),e(z,dMr),e(z,B7),e(B7,XFe),e(XFe,cMr),e(B7,fMr),e(B7,KQ),e(KQ,mMr),e(B7,gMr),e(z,hMr),e(z,P7),e(P7,zFe),e(zFe,pMr),e(P7,_Mr),e(P7,ZQ),e(ZQ,uMr),e(P7,bMr),e(z,FMr),e(z,$7),e($7,QFe),e(QFe,vMr),e($7,TMr),e($7,eW),e(eW,MMr),e($7,EMr),e(z,CMr),e(z,I7),e(I7,WFe),e(WFe,wMr),e(I7,AMr),e(I7,oW),e(oW,yMr),e(I7,LMr),e(z,xMr),e(z,q7),e(q7,HFe),e(HFe,kMr),e(q7,SMr),e(q7,rW),e(rW,RMr),e(q7,BMr),e(z,PMr),e(z,N7),e(N7,UFe),e(UFe,$Mr),e(N7,IMr),e(N7,tW),e(tW,qMr),e(N7,NMr),e(z,jMr),e(z,j7),e(j7,JFe),e(JFe,DMr),e(j7,GMr),e(j7,aW),e(aW,OMr),e(j7,VMr),e(z,XMr),e(z,D7),e(D7,YFe),e(YFe,zMr),e(D7,QMr),e(D7,nW),e(nW,WMr),e(D7,HMr),e(z,UMr),e(z,G7),e(G7,KFe),e(KFe,JMr),e(G7,YMr),e(G7,sW),e(sW,KMr),e(G7,ZMr),e(z,e4r),e(z,O7),e(O7,ZFe),e(ZFe,o4r),e(O7,r4r),e(O7,lW),e(lW,t4r),e(O7,a4r),e(z,n4r),e(z,V7),e(V7,eve),e(eve,s4r),e(V7,l4r),e(V7,iW),e(iW,i4r),e(V7,d4r),e(z,c4r),e(z,X7),e(X7,ove),e(ove,f4r),e(X7,m4r),e(X7,dW),e(dW,g4r),e(X7,h4r),e(z,p4r),e(z,z7),e(z7,rve),e(rve,_4r),e(z7,u4r),e(z7,cW),e(cW,b4r),e(z7,F4r),e(yo,v4r),e(yo,tve),e(tve,T4r),e(yo,M4r),g(HA,yo,null),b(c,ZBe,u),b(c,rf,u),e(rf,Q7),e(Q7,ave),g(UA,ave,null),e(rf,E4r),e(rf,nve),e(nve,C4r),b(c,ePe,u),b(c,Br,u),g(JA,Br,null),e(Br,w4r),e(Br,tf),e(tf,A4r),e(tf,fW),e(fW,y4r),e(tf,L4r),e(tf,mW),e(mW,x4r),e(tf,k4r),e(Br,S4r),e(Br,YA),e(YA,R4r),e(YA,sve),e(sve,B4r),e(YA,P4r),e(Br,$4r),e(Br,yt),g(KA,yt,null),e(yt,I4r),e(yt,lve),e(lve,q4r),e(yt,N4r),e(yt,af),e(af,j4r),e(af,ive),e(ive,D4r),e(af,G4r),e(af,gW),e(gW,O4r),e(af,V4r),e(yt,X4r),e(yt,dve),e(dve,z4r),e(yt,Q4r),g(ZA,yt,null),e(Br,W4r),e(Br,Lo),g(ey,Lo,null),e(Lo,H4r),e(Lo,cve),e(cve,U4r),e(Lo,J4r),e(Lo,kn),e(kn,Y4r),e(kn,fve),e(fve,K4r),e(kn,Z4r),e(kn,mve),e(mve,eEr),e(kn,oEr),e(kn,gve),e(gve,rEr),e(kn,tEr),e(Lo,aEr),e(Lo,ca),e(ca,W7),e(W7,hve),e(hve,nEr),e(W7,sEr),e(W7,hW),e(hW,lEr),e(W7,iEr),e(ca,dEr),e(ca,H7),e(H7,pve),e(pve,cEr),e(H7,fEr),e(H7,pW),e(pW,mEr),e(H7,gEr),e(ca,hEr),e(ca,U7),e(U7,_ve),e(_ve,pEr),e(U7,_Er),e(U7,_W),e(_W,uEr),e(U7,bEr),e(ca,FEr),e(ca,J7),e(J7,uve),e(uve,vEr),e(J7,TEr),e(J7,uW),e(uW,MEr),e(J7,EEr),e(ca,CEr),e(ca,Y7),e(Y7,bve),e(bve,wEr),e(Y7,AEr),e(Y7,bW),e(bW,yEr),e(Y7,LEr),e(Lo,xEr),e(Lo,Fve),e(Fve,kEr),e(Lo,SEr),g(oy,Lo,null),b(c,oPe,u),b(c,nf,u),e(nf,K7),e(K7,vve),g(ry,vve,null),e(nf,REr),e(nf,Tve),e(Tve,BEr),b(c,rPe,u),b(c,Pr,u),g(ty,Pr,null),e(Pr,PEr),e(Pr,sf),e(sf,$Er),e(sf,FW),e(FW,IEr),e(sf,qEr),e(sf,vW),e(vW,NEr),e(sf,jEr),e(Pr,DEr),e(Pr,ay),e(ay,GEr),e(ay,Mve),e(Mve,OEr),e(ay,VEr),e(Pr,XEr),e(Pr,Lt),g(ny,Lt,null),e(Lt,zEr),e(Lt,Eve),e(Eve,QEr),e(Lt,WEr),e(Lt,lf),e(lf,HEr),e(lf,Cve),e(Cve,UEr),e(lf,JEr),e(lf,TW),e(TW,YEr),e(lf,KEr),e(Lt,ZEr),e(Lt,wve),e(wve,eCr),e(Lt,oCr),g(sy,Lt,null),e(Pr,rCr),e(Pr,xo),g(ly,xo,null),e(xo,tCr),e(xo,Ave),e(Ave,aCr),e(xo,nCr),e(xo,Sn),e(Sn,sCr),e(Sn,yve),e(yve,lCr),e(Sn,iCr),e(Sn,Lve),e(Lve,dCr),e(Sn,cCr),e(Sn,xve),e(xve,fCr),e(Sn,mCr),e(xo,gCr),e(xo,me),e(me,Z7),e(Z7,kve),e(kve,hCr),e(Z7,pCr),e(Z7,MW),e(MW,_Cr),e(Z7,uCr),e(me,bCr),e(me,eM),e(eM,Sve),e(Sve,FCr),e(eM,vCr),e(eM,EW),e(EW,TCr),e(eM,MCr),e(me,ECr),e(me,oM),e(oM,Rve),e(Rve,CCr),e(oM,wCr),e(oM,CW),e(CW,ACr),e(oM,yCr),e(me,LCr),e(me,rM),e(rM,Bve),e(Bve,xCr),e(rM,kCr),e(rM,wW),e(wW,SCr),e(rM,RCr),e(me,BCr),e(me,tM),e(tM,Pve),e(Pve,PCr),e(tM,$Cr),e(tM,AW),e(AW,ICr),e(tM,qCr),e(me,NCr),e(me,aM),e(aM,$ve),e($ve,jCr),e(aM,DCr),e(aM,yW),e(yW,GCr),e(aM,OCr),e(me,VCr),e(me,nM),e(nM,Ive),e(Ive,XCr),e(nM,zCr),e(nM,LW),e(LW,QCr),e(nM,WCr),e(me,HCr),e(me,sM),e(sM,qve),e(qve,UCr),e(sM,JCr),e(sM,xW),e(xW,YCr),e(sM,KCr),e(me,ZCr),e(me,lM),e(lM,Nve),e(Nve,e5r),e(lM,o5r),e(lM,kW),e(kW,r5r),e(lM,t5r),e(me,a5r),e(me,iM),e(iM,jve),e(jve,n5r),e(iM,s5r),e(iM,SW),e(SW,l5r),e(iM,i5r),e(me,d5r),e(me,dM),e(dM,Dve),e(Dve,c5r),e(dM,f5r),e(dM,RW),e(RW,m5r),e(dM,g5r),e(me,h5r),e(me,cM),e(cM,Gve),e(Gve,p5r),e(cM,_5r),e(cM,BW),e(BW,u5r),e(cM,b5r),e(xo,F5r),e(xo,Ove),e(Ove,v5r),e(xo,T5r),g(iy,xo,null),b(c,tPe,u),b(c,df,u),e(df,fM),e(fM,Vve),g(dy,Vve,null),e(df,M5r),e(df,Xve),e(Xve,E5r),b(c,aPe,u),b(c,$r,u),g(cy,$r,null),e($r,C5r),e($r,cf),e(cf,w5r),e(cf,PW),e(PW,A5r),e(cf,y5r),e(cf,$W),e($W,L5r),e(cf,x5r),e($r,k5r),e($r,fy),e(fy,S5r),e(fy,zve),e(zve,R5r),e(fy,B5r),e($r,P5r),e($r,xt),g(my,xt,null),e(xt,$5r),e(xt,Qve),e(Qve,I5r),e(xt,q5r),e(xt,ff),e(ff,N5r),e(ff,Wve),e(Wve,j5r),e(ff,D5r),e(ff,IW),e(IW,G5r),e(ff,O5r),e(xt,V5r),e(xt,Hve),e(Hve,X5r),e(xt,z5r),g(gy,xt,null),e($r,Q5r),e($r,ko),g(hy,ko,null),e(ko,W5r),e(ko,Uve),e(Uve,H5r),e(ko,U5r),e(ko,Rn),e(Rn,J5r),e(Rn,Jve),e(Jve,Y5r),e(Rn,K5r),e(Rn,Yve),e(Yve,Z5r),e(Rn,e3r),e(Rn,Kve),e(Kve,o3r),e(Rn,r3r),e(ko,t3r),e(ko,Fe),e(Fe,mM),e(mM,Zve),e(Zve,a3r),e(mM,n3r),e(mM,qW),e(qW,s3r),e(mM,l3r),e(Fe,i3r),e(Fe,gM),e(gM,e6e),e(e6e,d3r),e(gM,c3r),e(gM,NW),e(NW,f3r),e(gM,m3r),e(Fe,g3r),e(Fe,hM),e(hM,o6e),e(o6e,h3r),e(hM,p3r),e(hM,jW),e(jW,_3r),e(hM,u3r),e(Fe,b3r),e(Fe,pM),e(pM,r6e),e(r6e,F3r),e(pM,v3r),e(pM,DW),e(DW,T3r),e(pM,M3r),e(Fe,E3r),e(Fe,_M),e(_M,t6e),e(t6e,C3r),e(_M,w3r),e(_M,GW),e(GW,A3r),e(_M,y3r),e(Fe,L3r),e(Fe,uM),e(uM,a6e),e(a6e,x3r),e(uM,k3r),e(uM,OW),e(OW,S3r),e(uM,R3r),e(Fe,B3r),e(Fe,bM),e(bM,n6e),e(n6e,P3r),e(bM,$3r),e(bM,VW),e(VW,I3r),e(bM,q3r),e(Fe,N3r),e(Fe,FM),e(FM,s6e),e(s6e,j3r),e(FM,D3r),e(FM,XW),e(XW,G3r),e(FM,O3r),e(Fe,V3r),e(Fe,vM),e(vM,l6e),e(l6e,X3r),e(vM,z3r),e(vM,zW),e(zW,Q3r),e(vM,W3r),e(Fe,H3r),e(Fe,TM),e(TM,i6e),e(i6e,U3r),e(TM,J3r),e(TM,QW),e(QW,Y3r),e(TM,K3r),e(ko,Z3r),e(ko,d6e),e(d6e,ewr),e(ko,owr),g(py,ko,null),b(c,nPe,u),b(c,mf,u),e(mf,MM),e(MM,c6e),g(_y,c6e,null),e(mf,rwr),e(mf,f6e),e(f6e,twr),b(c,sPe,u),b(c,Ir,u),g(uy,Ir,null),e(Ir,awr),e(Ir,gf),e(gf,nwr),e(gf,WW),e(WW,swr),e(gf,lwr),e(gf,HW),e(HW,iwr),e(gf,dwr),e(Ir,cwr),e(Ir,by),e(by,fwr),e(by,m6e),e(m6e,mwr),e(by,gwr),e(Ir,hwr),e(Ir,kt),g(Fy,kt,null),e(kt,pwr),e(kt,g6e),e(g6e,_wr),e(kt,uwr),e(kt,hf),e(hf,bwr),e(hf,h6e),e(h6e,Fwr),e(hf,vwr),e(hf,UW),e(UW,Twr),e(hf,Mwr),e(kt,Ewr),e(kt,p6e),e(p6e,Cwr),e(kt,wwr),g(vy,kt,null),e(Ir,Awr),e(Ir,So),g(Ty,So,null),e(So,ywr),e(So,_6e),e(_6e,Lwr),e(So,xwr),e(So,Bn),e(Bn,kwr),e(Bn,u6e),e(u6e,Swr),e(Bn,Rwr),e(Bn,b6e),e(b6e,Bwr),e(Bn,Pwr),e(Bn,F6e),e(F6e,$wr),e(Bn,Iwr),e(So,qwr),e(So,Ee),e(Ee,EM),e(EM,v6e),e(v6e,Nwr),e(EM,jwr),e(EM,JW),e(JW,Dwr),e(EM,Gwr),e(Ee,Owr),e(Ee,CM),e(CM,T6e),e(T6e,Vwr),e(CM,Xwr),e(CM,YW),e(YW,zwr),e(CM,Qwr),e(Ee,Wwr),e(Ee,wM),e(wM,M6e),e(M6e,Hwr),e(wM,Uwr),e(wM,KW),e(KW,Jwr),e(wM,Ywr),e(Ee,Kwr),e(Ee,AM),e(AM,E6e),e(E6e,Zwr),e(AM,eAr),e(AM,ZW),e(ZW,oAr),e(AM,rAr),e(Ee,tAr),e(Ee,yM),e(yM,C6e),e(C6e,aAr),e(yM,nAr),e(yM,eH),e(eH,sAr),e(yM,lAr),e(Ee,iAr),e(Ee,LM),e(LM,w6e),e(w6e,dAr),e(LM,cAr),e(LM,oH),e(oH,fAr),e(LM,mAr),e(Ee,gAr),e(Ee,xM),e(xM,A6e),e(A6e,hAr),e(xM,pAr),e(xM,rH),e(rH,_Ar),e(xM,uAr),e(Ee,bAr),e(Ee,kM),e(kM,y6e),e(y6e,FAr),e(kM,vAr),e(kM,tH),e(tH,TAr),e(kM,MAr),e(Ee,EAr),e(Ee,SM),e(SM,L6e),e(L6e,CAr),e(SM,wAr),e(SM,aH),e(aH,AAr),e(SM,yAr),e(So,LAr),e(So,x6e),e(x6e,xAr),e(So,kAr),g(My,So,null),b(c,lPe,u),b(c,pf,u),e(pf,RM),e(RM,k6e),g(Ey,k6e,null),e(pf,SAr),e(pf,S6e),e(S6e,RAr),b(c,iPe,u),b(c,qr,u),g(Cy,qr,null),e(qr,BAr),e(qr,_f),e(_f,PAr),e(_f,nH),e(nH,$Ar),e(_f,IAr),e(_f,sH),e(sH,qAr),e(_f,NAr),e(qr,jAr),e(qr,wy),e(wy,DAr),e(wy,R6e),e(R6e,GAr),e(wy,OAr),e(qr,VAr),e(qr,St),g(Ay,St,null),e(St,XAr),e(St,B6e),e(B6e,zAr),e(St,QAr),e(St,uf),e(uf,WAr),e(uf,P6e),e(P6e,HAr),e(uf,UAr),e(uf,lH),e(lH,JAr),e(uf,YAr),e(St,KAr),e(St,$6e),e($6e,ZAr),e(St,eyr),g(yy,St,null),e(qr,oyr),e(qr,Ro),g(Ly,Ro,null),e(Ro,ryr),e(Ro,I6e),e(I6e,tyr),e(Ro,ayr),e(Ro,Pn),e(Pn,nyr),e(Pn,q6e),e(q6e,syr),e(Pn,lyr),e(Pn,N6e),e(N6e,iyr),e(Pn,dyr),e(Pn,j6e),e(j6e,cyr),e(Pn,fyr),e(Ro,myr),e(Ro,ve),e(ve,BM),e(BM,D6e),e(D6e,gyr),e(BM,hyr),e(BM,iH),e(iH,pyr),e(BM,_yr),e(ve,uyr),e(ve,PM),e(PM,G6e),e(G6e,byr),e(PM,Fyr),e(PM,dH),e(dH,vyr),e(PM,Tyr),e(ve,Myr),e(ve,$M),e($M,O6e),e(O6e,Eyr),e($M,Cyr),e($M,cH),e(cH,wyr),e($M,Ayr),e(ve,yyr),e(ve,IM),e(IM,V6e),e(V6e,Lyr),e(IM,xyr),e(IM,fH),e(fH,kyr),e(IM,Syr),e(ve,Ryr),e(ve,qM),e(qM,X6e),e(X6e,Byr),e(qM,Pyr),e(qM,mH),e(mH,$yr),e(qM,Iyr),e(ve,qyr),e(ve,NM),e(NM,z6e),e(z6e,Nyr),e(NM,jyr),e(NM,gH),e(gH,Dyr),e(NM,Gyr),e(ve,Oyr),e(ve,jM),e(jM,Q6e),e(Q6e,Vyr),e(jM,Xyr),e(jM,hH),e(hH,zyr),e(jM,Qyr),e(ve,Wyr),e(ve,DM),e(DM,W6e),e(W6e,Hyr),e(DM,Uyr),e(DM,pH),e(pH,Jyr),e(DM,Yyr),e(ve,Kyr),e(ve,GM),e(GM,H6e),e(H6e,Zyr),e(GM,eLr),e(GM,_H),e(_H,oLr),e(GM,rLr),e(ve,tLr),e(ve,OM),e(OM,U6e),e(U6e,aLr),e(OM,nLr),e(OM,uH),e(uH,sLr),e(OM,lLr),e(Ro,iLr),e(Ro,J6e),e(J6e,dLr),e(Ro,cLr),g(xy,Ro,null),b(c,dPe,u),b(c,bf,u),e(bf,VM),e(VM,Y6e),g(ky,Y6e,null),e(bf,fLr),e(bf,K6e),e(K6e,mLr),b(c,cPe,u),b(c,Nr,u),g(Sy,Nr,null),e(Nr,gLr),e(Nr,Ff),e(Ff,hLr),e(Ff,bH),e(bH,pLr),e(Ff,_Lr),e(Ff,FH),e(FH,uLr),e(Ff,bLr),e(Nr,FLr),e(Nr,Ry),e(Ry,vLr),e(Ry,Z6e),e(Z6e,TLr),e(Ry,MLr),e(Nr,ELr),e(Nr,Rt),g(By,Rt,null),e(Rt,CLr),e(Rt,e0e),e(e0e,wLr),e(Rt,ALr),e(Rt,vf),e(vf,yLr),e(vf,o0e),e(o0e,LLr),e(vf,xLr),e(vf,vH),e(vH,kLr),e(vf,SLr),e(Rt,RLr),e(Rt,r0e),e(r0e,BLr),e(Rt,PLr),g(Py,Rt,null),e(Nr,$Lr),e(Nr,Bo),g($y,Bo,null),e(Bo,ILr),e(Bo,t0e),e(t0e,qLr),e(Bo,NLr),e(Bo,$n),e($n,jLr),e($n,a0e),e(a0e,DLr),e($n,GLr),e($n,n0e),e(n0e,OLr),e($n,VLr),e($n,s0e),e(s0e,XLr),e($n,zLr),e(Bo,QLr),e(Bo,Te),e(Te,XM),e(XM,l0e),e(l0e,WLr),e(XM,HLr),e(XM,TH),e(TH,ULr),e(XM,JLr),e(Te,YLr),e(Te,zM),e(zM,i0e),e(i0e,KLr),e(zM,ZLr),e(zM,MH),e(MH,e9r),e(zM,o9r),e(Te,r9r),e(Te,QM),e(QM,d0e),e(d0e,t9r),e(QM,a9r),e(QM,EH),e(EH,n9r),e(QM,s9r),e(Te,l9r),e(Te,WM),e(WM,c0e),e(c0e,i9r),e(WM,d9r),e(WM,CH),e(CH,c9r),e(WM,f9r),e(Te,m9r),e(Te,HM),e(HM,f0e),e(f0e,g9r),e(HM,h9r),e(HM,wH),e(wH,p9r),e(HM,_9r),e(Te,u9r),e(Te,UM),e(UM,m0e),e(m0e,b9r),e(UM,F9r),e(UM,AH),e(AH,v9r),e(UM,T9r),e(Te,M9r),e(Te,JM),e(JM,g0e),e(g0e,E9r),e(JM,C9r),e(JM,yH),e(yH,w9r),e(JM,A9r),e(Te,y9r),e(Te,YM),e(YM,h0e),e(h0e,L9r),e(YM,x9r),e(YM,LH),e(LH,k9r),e(YM,S9r),e(Te,R9r),e(Te,KM),e(KM,p0e),e(p0e,B9r),e(KM,P9r),e(KM,xH),e(xH,$9r),e(KM,I9r),e(Te,q9r),e(Te,ZM),e(ZM,_0e),e(_0e,N9r),e(ZM,j9r),e(ZM,kH),e(kH,D9r),e(ZM,G9r),e(Bo,O9r),e(Bo,u0e),e(u0e,V9r),e(Bo,X9r),g(Iy,Bo,null),b(c,fPe,u),b(c,Tf,u),e(Tf,e4),e(e4,b0e),g(qy,b0e,null),e(Tf,z9r),e(Tf,F0e),e(F0e,Q9r),b(c,mPe,u),b(c,jr,u),g(Ny,jr,null),e(jr,W9r),e(jr,Mf),e(Mf,H9r),e(Mf,SH),e(SH,U9r),e(Mf,J9r),e(Mf,RH),e(RH,Y9r),e(Mf,K9r),e(jr,Z9r),e(jr,jy),e(jy,exr),e(jy,v0e),e(v0e,oxr),e(jy,rxr),e(jr,txr),e(jr,Bt),g(Dy,Bt,null),e(Bt,axr),e(Bt,T0e),e(T0e,nxr),e(Bt,sxr),e(Bt,Ef),e(Ef,lxr),e(Ef,M0e),e(M0e,ixr),e(Ef,dxr),e(Ef,BH),e(BH,cxr),e(Ef,fxr),e(Bt,mxr),e(Bt,E0e),e(E0e,gxr),e(Bt,hxr),g(Gy,Bt,null),e(jr,pxr),e(jr,Po),g(Oy,Po,null),e(Po,_xr),e(Po,C0e),e(C0e,uxr),e(Po,bxr),e(Po,In),e(In,Fxr),e(In,w0e),e(w0e,vxr),e(In,Txr),e(In,A0e),e(A0e,Mxr),e(In,Exr),e(In,y0e),e(y0e,Cxr),e(In,wxr),e(Po,Axr),e(Po,Be),e(Be,o4),e(o4,L0e),e(L0e,yxr),e(o4,Lxr),e(o4,PH),e(PH,xxr),e(o4,kxr),e(Be,Sxr),e(Be,r4),e(r4,x0e),e(x0e,Rxr),e(r4,Bxr),e(r4,$H),e($H,Pxr),e(r4,$xr),e(Be,Ixr),e(Be,t4),e(t4,k0e),e(k0e,qxr),e(t4,Nxr),e(t4,IH),e(IH,jxr),e(t4,Dxr),e(Be,Gxr),e(Be,a4),e(a4,S0e),e(S0e,Oxr),e(a4,Vxr),e(a4,qH),e(qH,Xxr),e(a4,zxr),e(Be,Qxr),e(Be,n4),e(n4,R0e),e(R0e,Wxr),e(n4,Hxr),e(n4,NH),e(NH,Uxr),e(n4,Jxr),e(Be,Yxr),e(Be,s4),e(s4,B0e),e(B0e,Kxr),e(s4,Zxr),e(s4,jH),e(jH,ekr),e(s4,okr),e(Be,rkr),e(Be,l4),e(l4,P0e),e(P0e,tkr),e(l4,akr),e(l4,DH),e(DH,nkr),e(l4,skr),e(Be,lkr),e(Be,i4),e(i4,$0e),e($0e,ikr),e(i4,dkr),e(i4,GH),e(GH,ckr),e(i4,fkr),e(Po,mkr),e(Po,I0e),e(I0e,gkr),e(Po,hkr),g(Vy,Po,null),b(c,gPe,u),b(c,Cf,u),e(Cf,d4),e(d4,q0e),g(Xy,q0e,null),e(Cf,pkr),e(Cf,N0e),e(N0e,_kr),b(c,hPe,u),b(c,Dr,u),g(zy,Dr,null),e(Dr,ukr),e(Dr,wf),e(wf,bkr),e(wf,OH),e(OH,Fkr),e(wf,vkr),e(wf,VH),e(VH,Tkr),e(wf,Mkr),e(Dr,Ekr),e(Dr,Qy),e(Qy,Ckr),e(Qy,j0e),e(j0e,wkr),e(Qy,Akr),e(Dr,ykr),e(Dr,Pt),g(Wy,Pt,null),e(Pt,Lkr),e(Pt,D0e),e(D0e,xkr),e(Pt,kkr),e(Pt,Af),e(Af,Skr),e(Af,G0e),e(G0e,Rkr),e(Af,Bkr),e(Af,XH),e(XH,Pkr),e(Af,$kr),e(Pt,Ikr),e(Pt,O0e),e(O0e,qkr),e(Pt,Nkr),g(Hy,Pt,null),e(Dr,jkr),e(Dr,$o),g(Uy,$o,null),e($o,Dkr),e($o,V0e),e(V0e,Gkr),e($o,Okr),e($o,qn),e(qn,Vkr),e(qn,X0e),e(X0e,Xkr),e(qn,zkr),e(qn,z0e),e(z0e,Qkr),e(qn,Wkr),e(qn,Q0e),e(Q0e,Hkr),e(qn,Ukr),e($o,Jkr),e($o,Pe),e(Pe,c4),e(c4,W0e),e(W0e,Ykr),e(c4,Kkr),e(c4,zH),e(zH,Zkr),e(c4,eSr),e(Pe,oSr),e(Pe,f4),e(f4,H0e),e(H0e,rSr),e(f4,tSr),e(f4,QH),e(QH,aSr),e(f4,nSr),e(Pe,sSr),e(Pe,m4),e(m4,U0e),e(U0e,lSr),e(m4,iSr),e(m4,WH),e(WH,dSr),e(m4,cSr),e(Pe,fSr),e(Pe,g4),e(g4,J0e),e(J0e,mSr),e(g4,gSr),e(g4,HH),e(HH,hSr),e(g4,pSr),e(Pe,_Sr),e(Pe,h4),e(h4,Y0e),e(Y0e,uSr),e(h4,bSr),e(h4,UH),e(UH,FSr),e(h4,vSr),e(Pe,TSr),e(Pe,p4),e(p4,K0e),e(K0e,MSr),e(p4,ESr),e(p4,JH),e(JH,CSr),e(p4,wSr),e(Pe,ASr),e(Pe,_4),e(_4,Z0e),e(Z0e,ySr),e(_4,LSr),e(_4,YH),e(YH,xSr),e(_4,kSr),e(Pe,SSr),e(Pe,u4),e(u4,eTe),e(eTe,RSr),e(u4,BSr),e(u4,KH),e(KH,PSr),e(u4,$Sr),e($o,ISr),e($o,oTe),e(oTe,qSr),e($o,NSr),g(Jy,$o,null),b(c,pPe,u),b(c,yf,u),e(yf,b4),e(b4,rTe),g(Yy,rTe,null),e(yf,jSr),e(yf,tTe),e(tTe,DSr),b(c,_Pe,u),b(c,Gr,u),g(Ky,Gr,null),e(Gr,GSr),e(Gr,Lf),e(Lf,OSr),e(Lf,ZH),e(ZH,VSr),e(Lf,XSr),e(Lf,eU),e(eU,zSr),e(Lf,QSr),e(Gr,WSr),e(Gr,Zy),e(Zy,HSr),e(Zy,aTe),e(aTe,USr),e(Zy,JSr),e(Gr,YSr),e(Gr,$t),g(eL,$t,null),e($t,KSr),e($t,nTe),e(nTe,ZSr),e($t,eRr),e($t,xf),e(xf,oRr),e(xf,sTe),e(sTe,rRr),e(xf,tRr),e(xf,oU),e(oU,aRr),e(xf,nRr),e($t,sRr),e($t,lTe),e(lTe,lRr),e($t,iRr),g(oL,$t,null),e(Gr,dRr),e(Gr,Io),g(rL,Io,null),e(Io,cRr),e(Io,iTe),e(iTe,fRr),e(Io,mRr),e(Io,Nn),e(Nn,gRr),e(Nn,dTe),e(dTe,hRr),e(Nn,pRr),e(Nn,cTe),e(cTe,_Rr),e(Nn,uRr),e(Nn,fTe),e(fTe,bRr),e(Nn,FRr),e(Io,vRr),e(Io,mTe),e(mTe,F4),e(F4,gTe),e(gTe,TRr),e(F4,MRr),e(F4,rU),e(rU,ERr),e(F4,CRr),e(Io,wRr),e(Io,hTe),e(hTe,ARr),e(Io,yRr),g(tL,Io,null),b(c,uPe,u),b(c,kf,u),e(kf,v4),e(v4,pTe),g(aL,pTe,null),e(kf,LRr),e(kf,_Te),e(_Te,xRr),b(c,bPe,u),b(c,Or,u),g(nL,Or,null),e(Or,kRr),e(Or,Sf),e(Sf,SRr),e(Sf,tU),e(tU,RRr),e(Sf,BRr),e(Sf,aU),e(aU,PRr),e(Sf,$Rr),e(Or,IRr),e(Or,sL),e(sL,qRr),e(sL,uTe),e(uTe,NRr),e(sL,jRr),e(Or,DRr),e(Or,It),g(lL,It,null),e(It,GRr),e(It,bTe),e(bTe,ORr),e(It,VRr),e(It,Rf),e(Rf,XRr),e(Rf,FTe),e(FTe,zRr),e(Rf,QRr),e(Rf,nU),e(nU,WRr),e(Rf,HRr),e(It,URr),e(It,vTe),e(vTe,JRr),e(It,YRr),g(iL,It,null),e(Or,KRr),e(Or,qo),g(dL,qo,null),e(qo,ZRr),e(qo,TTe),e(TTe,eBr),e(qo,oBr),e(qo,jn),e(jn,rBr),e(jn,MTe),e(MTe,tBr),e(jn,aBr),e(jn,ETe),e(ETe,nBr),e(jn,sBr),e(jn,CTe),e(CTe,lBr),e(jn,iBr),e(qo,dBr),e(qo,cL),e(cL,T4),e(T4,wTe),e(wTe,cBr),e(T4,fBr),e(T4,sU),e(sU,mBr),e(T4,gBr),e(cL,hBr),e(cL,M4),e(M4,ATe),e(ATe,pBr),e(M4,_Br),e(M4,lU),e(lU,uBr),e(M4,bBr),e(qo,FBr),e(qo,yTe),e(yTe,vBr),e(qo,TBr),g(fL,qo,null),b(c,FPe,u),b(c,Bf,u),e(Bf,E4),e(E4,LTe),g(mL,LTe,null),e(Bf,MBr),e(Bf,xTe),e(xTe,EBr),b(c,vPe,u),b(c,Vr,u),g(gL,Vr,null),e(Vr,CBr),e(Vr,Pf),e(Pf,wBr),e(Pf,iU),e(iU,ABr),e(Pf,yBr),e(Pf,dU),e(dU,LBr),e(Pf,xBr),e(Vr,kBr),e(Vr,hL),e(hL,SBr),e(hL,kTe),e(kTe,RBr),e(hL,BBr),e(Vr,PBr),e(Vr,qt),g(pL,qt,null),e(qt,$Br),e(qt,STe),e(STe,IBr),e(qt,qBr),e(qt,$f),e($f,NBr),e($f,RTe),e(RTe,jBr),e($f,DBr),e($f,cU),e(cU,GBr),e($f,OBr),e(qt,VBr),e(qt,BTe),e(BTe,XBr),e(qt,zBr),g(_L,qt,null),e(Vr,QBr),e(Vr,No),g(uL,No,null),e(No,WBr),e(No,PTe),e(PTe,HBr),e(No,UBr),e(No,Dn),e(Dn,JBr),e(Dn,$Te),e($Te,YBr),e(Dn,KBr),e(Dn,ITe),e(ITe,ZBr),e(Dn,ePr),e(Dn,qTe),e(qTe,oPr),e(Dn,rPr),e(No,tPr),e(No,NTe),e(NTe,C4),e(C4,jTe),e(jTe,aPr),e(C4,nPr),e(C4,fU),e(fU,sPr),e(C4,lPr),e(No,iPr),e(No,DTe),e(DTe,dPr),e(No,cPr),g(bL,No,null),TPe=!0},p(c,[u]){const FL={};u&2&&(FL.$$scope={dirty:u,ctx:c}),Vf.$set(FL);const GTe={};u&2&&(GTe.$$scope={dirty:u,ctx:c}),qh.$set(GTe);const OTe={};u&2&&(OTe.$$scope={dirty:u,ctx:c}),Hh.$set(OTe)},i(c){TPe||(h(ge.$$.fragment,c),h(Da.$$.fragment,c),h(LE.$$.fragment,c),h(xE.$$.fragment,c),h(Vf.$$.fragment,c),h(kE.$$.fragment,c),h(SE.$$.fragment,c),h(PE.$$.fragment,c),h($E.$$.fragment,c),h(IE.$$.fragment,c),h(qE.$$.fragment,c),h(NE.$$.fragment,c),h(GE.$$.fragment,c),h(OE.$$.fragment,c),h(VE.$$.fragment,c),h(XE.$$.fragment,c),h(zE.$$.fragment,c),h(HE.$$.fragment,c),h(qh.$$.fragment,c),h(UE.$$.fragment,c),h(JE.$$.fragment,c),h(YE.$$.fragment,c),h(KE.$$.fragment,c),h(oC.$$.fragment,c),h(Hh.$$.fragment,c),h(rC.$$.fragment,c),h(tC.$$.fragment,c),h(aC.$$.fragment,c),h(nC.$$.fragment,c),h(lC.$$.fragment,c),h(iC.$$.fragment,c),h(dC.$$.fragment,c),h(cC.$$.fragment,c),h(fC.$$.fragment,c),h(mC.$$.fragment,c),h(hC.$$.fragment,c),h(pC.$$.fragment,c),h(_C.$$.fragment,c),h(uC.$$.fragment,c),h(bC.$$.fragment,c),h(FC.$$.fragment,c),h(TC.$$.fragment,c),h(MC.$$.fragment,c),h(EC.$$.fragment,c),h(CC.$$.fragment,c),h(wC.$$.fragment,c),h(AC.$$.fragment,c),h(LC.$$.fragment,c),h(xC.$$.fragment,c),h(kC.$$.fragment,c),h(SC.$$.fragment,c),h(RC.$$.fragment,c),h(BC.$$.fragment,c),h($C.$$.fragment,c),h(IC.$$.fragment,c),h(qC.$$.fragment,c),h(NC.$$.fragment,c),h(jC.$$.fragment,c),h(DC.$$.fragment,c),h(OC.$$.fragment,c),h(VC.$$.fragment,c),h(XC.$$.fragment,c),h(zC.$$.fragment,c),h(QC.$$.fragment,c),h(WC.$$.fragment,c),h(UC.$$.fragment,c),h(JC.$$.fragment,c),h(YC.$$.fragment,c),h(KC.$$.fragment,c),h(ZC.$$.fragment,c),h(e5.$$.fragment,c),h(r5.$$.fragment,c),h(t5.$$.fragment,c),h(a5.$$.fragment,c),h(n5.$$.fragment,c),h(s5.$$.fragment,c),h(l5.$$.fragment,c),h(d5.$$.fragment,c),h(c5.$$.fragment,c),h(f5.$$.fragment,c),h(m5.$$.fragment,c),h(g5.$$.fragment,c),h(h5.$$.fragment,c),h(_5.$$.fragment,c),h(u5.$$.fragment,c),h(b5.$$.fragment,c),h(F5.$$.fragment,c),h(v5.$$.fragment,c),h(T5.$$.fragment,c),h(E5.$$.fragment,c),h(C5.$$.fragment,c),h(w5.$$.fragment,c),h(A5.$$.fragment,c),h(y5.$$.fragment,c),h(L5.$$.fragment,c),h(k5.$$.fragment,c),h(S5.$$.fragment,c),h(R5.$$.fragment,c),h(B5.$$.fragment,c),h(P5.$$.fragment,c),h($5.$$.fragment,c),h(q5.$$.fragment,c),h(N5.$$.fragment,c),h(j5.$$.fragment,c),h(D5.$$.fragment,c),h(G5.$$.fragment,c),h(O5.$$.fragment,c),h(X5.$$.fragment,c),h(z5.$$.fragment,c),h(Q5.$$.fragment,c),h(W5.$$.fragment,c),h(H5.$$.fragment,c),h(U5.$$.fragment,c),h(Y5.$$.fragment,c),h(K5.$$.fragment,c),h(Z5.$$.fragment,c),h(e3.$$.fragment,c),h(o3.$$.fragment,c),h(r3.$$.fragment,c),h(a3.$$.fragment,c),h(n3.$$.fragment,c),h(s3.$$.fragment,c),h(l3.$$.fragment,c),h(i3.$$.fragment,c),h(d3.$$.fragment,c),h(f3.$$.fragment,c),h(m3.$$.fragment,c),h(g3.$$.fragment,c),h(p3.$$.fragment,c),h(_3.$$.fragment,c),h(u3.$$.fragment,c),h(F3.$$.fragment,c),h(v3.$$.fragment,c),h(T3.$$.fragment,c),h(M3.$$.fragment,c),h(E3.$$.fragment,c),h(C3.$$.fragment,c),h(A3.$$.fragment,c),h(y3.$$.fragment,c),h(L3.$$.fragment,c),h(x3.$$.fragment,c),h(k3.$$.fragment,c),h(S3.$$.fragment,c),h(B3.$$.fragment,c),h(P3.$$.fragment,c),h($3.$$.fragment,c),h(I3.$$.fragment,c),h(q3.$$.fragment,c),h(N3.$$.fragment,c),h(D3.$$.fragment,c),h(G3.$$.fragment,c),h(O3.$$.fragment,c),h(V3.$$.fragment,c),h(X3.$$.fragment,c),h(z3.$$.fragment,c),h(W3.$$.fragment,c),h(H3.$$.fragment,c),h(U3.$$.fragment,c),h(J3.$$.fragment,c),h(Y3.$$.fragment,c),h(K3.$$.fragment,c),h(ew.$$.fragment,c),h(ow.$$.fragment,c),h(rw.$$.fragment,c),h(tw.$$.fragment,c),h(aw.$$.fragment,c),h(nw.$$.fragment,c),h(lw.$$.fragment,c),h(iw.$$.fragment,c),h(dw.$$.fragment,c),h(cw.$$.fragment,c),h(fw.$$.fragment,c),h(mw.$$.fragment,c),h(hw.$$.fragment,c),h(pw.$$.fragment,c),h(_w.$$.fragment,c),h(uw.$$.fragment,c),h(bw.$$.fragment,c),h(Fw.$$.fragment,c),h(Tw.$$.fragment,c),h(Mw.$$.fragment,c),h(Ew.$$.fragment,c),h(Cw.$$.fragment,c),h(ww.$$.fragment,c),h(Aw.$$.fragment,c),h(Lw.$$.fragment,c),h(xw.$$.fragment,c),h(kw.$$.fragment,c),h(Rw.$$.fragment,c),h(Bw.$$.fragment,c),h(Pw.$$.fragment,c),h(Iw.$$.fragment,c),h(qw.$$.fragment,c),h(Nw.$$.fragment,c),h(jw.$$.fragment,c),h(Dw.$$.fragment,c),h(Gw.$$.fragment,c),h(Vw.$$.fragment,c),h(Xw.$$.fragment,c),h(zw.$$.fragment,c),h(Qw.$$.fragment,c),h(Ww.$$.fragment,c),h(Hw.$$.fragment,c),h(Jw.$$.fragment,c),h(Yw.$$.fragment,c),h(Kw.$$.fragment,c),h(Zw.$$.fragment,c),h(eA.$$.fragment,c),h(oA.$$.fragment,c),h(tA.$$.fragment,c),h(aA.$$.fragment,c),h(nA.$$.fragment,c),h(sA.$$.fragment,c),h(lA.$$.fragment,c),h(iA.$$.fragment,c),h(cA.$$.fragment,c),h(fA.$$.fragment,c),h(mA.$$.fragment,c),h(gA.$$.fragment,c),h(hA.$$.fragment,c),h(pA.$$.fragment,c),h(uA.$$.fragment,c),h(bA.$$.fragment,c),h(FA.$$.fragment,c),h(vA.$$.fragment,c),h(TA.$$.fragment,c),h(MA.$$.fragment,c),h(CA.$$.fragment,c),h(wA.$$.fragment,c),h(AA.$$.fragment,c),h(yA.$$.fragment,c),h(LA.$$.fragment,c),h(xA.$$.fragment,c),h(SA.$$.fragment,c),h(RA.$$.fragment,c),h(BA.$$.fragment,c),h(PA.$$.fragment,c),h($A.$$.fragment,c),h(IA.$$.fragment,c),h(NA.$$.fragment,c),h(jA.$$.fragment,c),h(DA.$$.fragment,c),h(GA.$$.fragment,c),h(OA.$$.fragment,c),h(VA.$$.fragment,c),h(zA.$$.fragment,c),h(QA.$$.fragment,c),h(WA.$$.fragment,c),h(HA.$$.fragment,c),h(UA.$$.fragment,c),h(JA.$$.fragment,c),h(KA.$$.fragment,c),h(ZA.$$.fragment,c),h(ey.$$.fragment,c),h(oy.$$.fragment,c),h(ry.$$.fragment,c),h(ty.$$.fragment,c),h(ny.$$.fragment,c),h(sy.$$.fragment,c),h(ly.$$.fragment,c),h(iy.$$.fragment,c),h(dy.$$.fragment,c),h(cy.$$.fragment,c),h(my.$$.fragment,c),h(gy.$$.fragment,c),h(hy.$$.fragment,c),h(py.$$.fragment,c),h(_y.$$.fragment,c),h(uy.$$.fragment,c),h(Fy.$$.fragment,c),h(vy.$$.fragment,c),h(Ty.$$.fragment,c),h(My.$$.fragment,c),h(Ey.$$.fragment,c),h(Cy.$$.fragment,c),h(Ay.$$.fragment,c),h(yy.$$.fragment,c),h(Ly.$$.fragment,c),h(xy.$$.fragment,c),h(ky.$$.fragment,c),h(Sy.$$.fragment,c),h(By.$$.fragment,c),h(Py.$$.fragment,c),h($y.$$.fragment,c),h(Iy.$$.fragment,c),h(qy.$$.fragment,c),h(Ny.$$.fragment,c),h(Dy.$$.fragment,c),h(Gy.$$.fragment,c),h(Oy.$$.fragment,c),h(Vy.$$.fragment,c),h(Xy.$$.fragment,c),h(zy.$$.fragment,c),h(Wy.$$.fragment,c),h(Hy.$$.fragment,c),h(Uy.$$.fragment,c),h(Jy.$$.fragment,c),h(Yy.$$.fragment,c),h(Ky.$$.fragment,c),h(eL.$$.fragment,c),h(oL.$$.fragment,c),h(rL.$$.fragment,c),h(tL.$$.fragment,c),h(aL.$$.fragment,c),h(nL.$$.fragment,c),h(lL.$$.fragment,c),h(iL.$$.fragment,c),h(dL.$$.fragment,c),h(fL.$$.fragment,c),h(mL.$$.fragment,c),h(gL.$$.fragment,c),h(pL.$$.fragment,c),h(_L.$$.fragment,c),h(uL.$$.fragment,c),h(bL.$$.fragment,c),TPe=!0)},o(c){p(ge.$$.fragment,c),p(Da.$$.fragment,c),p(LE.$$.fragment,c),p(xE.$$.fragment,c),p(Vf.$$.fragment,c),p(kE.$$.fragment,c),p(SE.$$.fragment,c),p(PE.$$.fragment,c),p($E.$$.fragment,c),p(IE.$$.fragment,c),p(qE.$$.fragment,c),p(NE.$$.fragment,c),p(GE.$$.fragment,c),p(OE.$$.fragment,c),p(VE.$$.fragment,c),p(XE.$$.fragment,c),p(zE.$$.fragment,c),p(HE.$$.fragment,c),p(qh.$$.fragment,c),p(UE.$$.fragment,c),p(JE.$$.fragment,c),p(YE.$$.fragment,c),p(KE.$$.fragment,c),p(oC.$$.fragment,c),p(Hh.$$.fragment,c),p(rC.$$.fragment,c),p(tC.$$.fragment,c),p(aC.$$.fragment,c),p(nC.$$.fragment,c),p(lC.$$.fragment,c),p(iC.$$.fragment,c),p(dC.$$.fragment,c),p(cC.$$.fragment,c),p(fC.$$.fragment,c),p(mC.$$.fragment,c),p(hC.$$.fragment,c),p(pC.$$.fragment,c),p(_C.$$.fragment,c),p(uC.$$.fragment,c),p(bC.$$.fragment,c),p(FC.$$.fragment,c),p(TC.$$.fragment,c),p(MC.$$.fragment,c),p(EC.$$.fragment,c),p(CC.$$.fragment,c),p(wC.$$.fragment,c),p(AC.$$.fragment,c),p(LC.$$.fragment,c),p(xC.$$.fragment,c),p(kC.$$.fragment,c),p(SC.$$.fragment,c),p(RC.$$.fragment,c),p(BC.$$.fragment,c),p($C.$$.fragment,c),p(IC.$$.fragment,c),p(qC.$$.fragment,c),p(NC.$$.fragment,c),p(jC.$$.fragment,c),p(DC.$$.fragment,c),p(OC.$$.fragment,c),p(VC.$$.fragment,c),p(XC.$$.fragment,c),p(zC.$$.fragment,c),p(QC.$$.fragment,c),p(WC.$$.fragment,c),p(UC.$$.fragment,c),p(JC.$$.fragment,c),p(YC.$$.fragment,c),p(KC.$$.fragment,c),p(ZC.$$.fragment,c),p(e5.$$.fragment,c),p(r5.$$.fragment,c),p(t5.$$.fragment,c),p(a5.$$.fragment,c),p(n5.$$.fragment,c),p(s5.$$.fragment,c),p(l5.$$.fragment,c),p(d5.$$.fragment,c),p(c5.$$.fragment,c),p(f5.$$.fragment,c),p(m5.$$.fragment,c),p(g5.$$.fragment,c),p(h5.$$.fragment,c),p(_5.$$.fragment,c),p(u5.$$.fragment,c),p(b5.$$.fragment,c),p(F5.$$.fragment,c),p(v5.$$.fragment,c),p(T5.$$.fragment,c),p(E5.$$.fragment,c),p(C5.$$.fragment,c),p(w5.$$.fragment,c),p(A5.$$.fragment,c),p(y5.$$.fragment,c),p(L5.$$.fragment,c),p(k5.$$.fragment,c),p(S5.$$.fragment,c),p(R5.$$.fragment,c),p(B5.$$.fragment,c),p(P5.$$.fragment,c),p($5.$$.fragment,c),p(q5.$$.fragment,c),p(N5.$$.fragment,c),p(j5.$$.fragment,c),p(D5.$$.fragment,c),p(G5.$$.fragment,c),p(O5.$$.fragment,c),p(X5.$$.fragment,c),p(z5.$$.fragment,c),p(Q5.$$.fragment,c),p(W5.$$.fragment,c),p(H5.$$.fragment,c),p(U5.$$.fragment,c),p(Y5.$$.fragment,c),p(K5.$$.fragment,c),p(Z5.$$.fragment,c),p(e3.$$.fragment,c),p(o3.$$.fragment,c),p(r3.$$.fragment,c),p(a3.$$.fragment,c),p(n3.$$.fragment,c),p(s3.$$.fragment,c),p(l3.$$.fragment,c),p(i3.$$.fragment,c),p(d3.$$.fragment,c),p(f3.$$.fragment,c),p(m3.$$.fragment,c),p(g3.$$.fragment,c),p(p3.$$.fragment,c),p(_3.$$.fragment,c),p(u3.$$.fragment,c),p(F3.$$.fragment,c),p(v3.$$.fragment,c),p(T3.$$.fragment,c),p(M3.$$.fragment,c),p(E3.$$.fragment,c),p(C3.$$.fragment,c),p(A3.$$.fragment,c),p(y3.$$.fragment,c),p(L3.$$.fragment,c),p(x3.$$.fragment,c),p(k3.$$.fragment,c),p(S3.$$.fragment,c),p(B3.$$.fragment,c),p(P3.$$.fragment,c),p($3.$$.fragment,c),p(I3.$$.fragment,c),p(q3.$$.fragment,c),p(N3.$$.fragment,c),p(D3.$$.fragment,c),p(G3.$$.fragment,c),p(O3.$$.fragment,c),p(V3.$$.fragment,c),p(X3.$$.fragment,c),p(z3.$$.fragment,c),p(W3.$$.fragment,c),p(H3.$$.fragment,c),p(U3.$$.fragment,c),p(J3.$$.fragment,c),p(Y3.$$.fragment,c),p(K3.$$.fragment,c),p(ew.$$.fragment,c),p(ow.$$.fragment,c),p(rw.$$.fragment,c),p(tw.$$.fragment,c),p(aw.$$.fragment,c),p(nw.$$.fragment,c),p(lw.$$.fragment,c),p(iw.$$.fragment,c),p(dw.$$.fragment,c),p(cw.$$.fragment,c),p(fw.$$.fragment,c),p(mw.$$.fragment,c),p(hw.$$.fragment,c),p(pw.$$.fragment,c),p(_w.$$.fragment,c),p(uw.$$.fragment,c),p(bw.$$.fragment,c),p(Fw.$$.fragment,c),p(Tw.$$.fragment,c),p(Mw.$$.fragment,c),p(Ew.$$.fragment,c),p(Cw.$$.fragment,c),p(ww.$$.fragment,c),p(Aw.$$.fragment,c),p(Lw.$$.fragment,c),p(xw.$$.fragment,c),p(kw.$$.fragment,c),p(Rw.$$.fragment,c),p(Bw.$$.fragment,c),p(Pw.$$.fragment,c),p(Iw.$$.fragment,c),p(qw.$$.fragment,c),p(Nw.$$.fragment,c),p(jw.$$.fragment,c),p(Dw.$$.fragment,c),p(Gw.$$.fragment,c),p(Vw.$$.fragment,c),p(Xw.$$.fragment,c),p(zw.$$.fragment,c),p(Qw.$$.fragment,c),p(Ww.$$.fragment,c),p(Hw.$$.fragment,c),p(Jw.$$.fragment,c),p(Yw.$$.fragment,c),p(Kw.$$.fragment,c),p(Zw.$$.fragment,c),p(eA.$$.fragment,c),p(oA.$$.fragment,c),p(tA.$$.fragment,c),p(aA.$$.fragment,c),p(nA.$$.fragment,c),p(sA.$$.fragment,c),p(lA.$$.fragment,c),p(iA.$$.fragment,c),p(cA.$$.fragment,c),p(fA.$$.fragment,c),p(mA.$$.fragment,c),p(gA.$$.fragment,c),p(hA.$$.fragment,c),p(pA.$$.fragment,c),p(uA.$$.fragment,c),p(bA.$$.fragment,c),p(FA.$$.fragment,c),p(vA.$$.fragment,c),p(TA.$$.fragment,c),p(MA.$$.fragment,c),p(CA.$$.fragment,c),p(wA.$$.fragment,c),p(AA.$$.fragment,c),p(yA.$$.fragment,c),p(LA.$$.fragment,c),p(xA.$$.fragment,c),p(SA.$$.fragment,c),p(RA.$$.fragment,c),p(BA.$$.fragment,c),p(PA.$$.fragment,c),p($A.$$.fragment,c),p(IA.$$.fragment,c),p(NA.$$.fragment,c),p(jA.$$.fragment,c),p(DA.$$.fragment,c),p(GA.$$.fragment,c),p(OA.$$.fragment,c),p(VA.$$.fragment,c),p(zA.$$.fragment,c),p(QA.$$.fragment,c),p(WA.$$.fragment,c),p(HA.$$.fragment,c),p(UA.$$.fragment,c),p(JA.$$.fragment,c),p(KA.$$.fragment,c),p(ZA.$$.fragment,c),p(ey.$$.fragment,c),p(oy.$$.fragment,c),p(ry.$$.fragment,c),p(ty.$$.fragment,c),p(ny.$$.fragment,c),p(sy.$$.fragment,c),p(ly.$$.fragment,c),p(iy.$$.fragment,c),p(dy.$$.fragment,c),p(cy.$$.fragment,c),p(my.$$.fragment,c),p(gy.$$.fragment,c),p(hy.$$.fragment,c),p(py.$$.fragment,c),p(_y.$$.fragment,c),p(uy.$$.fragment,c),p(Fy.$$.fragment,c),p(vy.$$.fragment,c),p(Ty.$$.fragment,c),p(My.$$.fragment,c),p(Ey.$$.fragment,c),p(Cy.$$.fragment,c),p(Ay.$$.fragment,c),p(yy.$$.fragment,c),p(Ly.$$.fragment,c),p(xy.$$.fragment,c),p(ky.$$.fragment,c),p(Sy.$$.fragment,c),p(By.$$.fragment,c),p(Py.$$.fragment,c),p($y.$$.fragment,c),p(Iy.$$.fragment,c),p(qy.$$.fragment,c),p(Ny.$$.fragment,c),p(Dy.$$.fragment,c),p(Gy.$$.fragment,c),p(Oy.$$.fragment,c),p(Vy.$$.fragment,c),p(Xy.$$.fragment,c),p(zy.$$.fragment,c),p(Wy.$$.fragment,c),p(Hy.$$.fragment,c),p(Uy.$$.fragment,c),p(Jy.$$.fragment,c),p(Yy.$$.fragment,c),p(Ky.$$.fragment,c),p(eL.$$.fragment,c),p(oL.$$.fragment,c),p(rL.$$.fragment,c),p(tL.$$.fragment,c),p(aL.$$.fragment,c),p(nL.$$.fragment,c),p(lL.$$.fragment,c),p(iL.$$.fragment,c),p(dL.$$.fragment,c),p(fL.$$.fragment,c),p(mL.$$.fragment,c),p(gL.$$.fragment,c),p(pL.$$.fragment,c),p(_L.$$.fragment,c),p(uL.$$.fragment,c),p(bL.$$.fragment,c),TPe=!1},d(c){t(Z),c&&t(io),c&&t(de),_(ge),c&&t(Nf),c&&t(fa),c&&t(xe),c&&t(co),c&&t(Df),_(Da,c),c&&t(fo),c&&t(ue),c&&t(zo),c&&t(Ga),c&&t(vRe),c&&t(Xi),_(LE),c&&t(TRe),c&&t(zn),c&&t(MRe),_(xE,c),c&&t(ERe),c&&t(M9),c&&t(CRe),_(Vf,c),c&&t(wRe),c&&t(zi),_(kE),c&&t(ARe),c&&t(Qo),_(SE),_(PE),_($E),_(IE),c&&t(yRe),c&&t(Wi),_(qE),c&&t(LRe),c&&t(Wo),_(NE),_(GE),_(OE),_(VE),c&&t(xRe),c&&t(Hi),_(XE),c&&t(kRe),c&&t(Ho),_(zE),_(HE),_(qh),_(UE),_(JE),c&&t(SRe),c&&t(Ui),_(YE),c&&t(RRe),c&&t(Uo),_(KE),_(oC),_(Hh),_(rC),_(tC),c&&t(BRe),c&&t(Yi),_(aC),c&&t(PRe),c&&t(Jo),_(nC),_(lC),_(iC),_(dC),_(cC),c&&t($Re),c&&t(ed),_(fC),c&&t(IRe),c&&t(Yo),_(mC),_(hC),_(pC),_(_C),_(uC),c&&t(qRe),c&&t(td),_(bC),c&&t(NRe),c&&t(Ko),_(FC),_(TC),_(MC),_(EC),_(CC),c&&t(jRe),c&&t(sd),_(wC),c&&t(DRe),c&&t(Zo),_(AC),_(LC),_(xC),_(kC),_(SC),c&&t(GRe),c&&t(dd),_(RC),c&&t(ORe),c&&t(er),_(BC),_($C),_(IC),_(qC),_(NC),c&&t(VRe),c&&t(md),_(jC),c&&t(XRe),c&&t(or),_(DC),_(OC),_(VC),_(XC),_(zC),c&&t(zRe),c&&t(pd),_(QC),c&&t(QRe),c&&t(rr),_(WC),_(UC),_(JC),_(YC),_(KC),c&&t(WRe),c&&t(bd),_(ZC),c&&t(HRe),c&&t(tr),_(e5),_(r5),_(t5),_(a5),_(n5),c&&t(URe),c&&t(Td),_(s5),c&&t(JRe),c&&t(ar),_(l5),_(d5),_(c5),_(f5),_(m5),c&&t(YRe),c&&t(Cd),_(g5),c&&t(KRe),c&&t(nr),_(h5),_(_5),_(u5),_(b5),_(F5),c&&t(ZRe),c&&t(yd),_(v5),c&&t(eBe),c&&t(sr),_(T5),_(E5),_(C5),_(w5),_(A5),c&&t(oBe),c&&t(kd),_(y5),c&&t(rBe),c&&t(lr),_(L5),_(k5),_(S5),_(R5),_(B5),c&&t(tBe),c&&t(Bd),_(P5),c&&t(aBe),c&&t(ir),_($5),_(q5),_(N5),_(j5),_(D5),c&&t(nBe),c&&t(Id),_(G5),c&&t(sBe),c&&t(dr),_(O5),_(X5),_(z5),_(Q5),_(W5),c&&t(lBe),c&&t(jd),_(H5),c&&t(iBe),c&&t(cr),_(U5),_(Y5),_(K5),_(Z5),_(e3),c&&t(dBe),c&&t(Od),_(o3),c&&t(cBe),c&&t(fr),_(r3),_(a3),_(n3),_(s3),_(l3),c&&t(fBe),c&&t(zd),_(i3),c&&t(mBe),c&&t(mr),_(d3),_(f3),_(m3),_(g3),_(p3),c&&t(gBe),c&&t(Hd),_(_3),c&&t(hBe),c&&t(gr),_(u3),_(F3),_(v3),_(T3),_(M3),c&&t(pBe),c&&t(Yd),_(E3),c&&t(_Be),c&&t(hr),_(C3),_(A3),_(y3),_(L3),_(x3),c&&t(uBe),c&&t(oc),_(k3),c&&t(bBe),c&&t(pr),_(S3),_(B3),_(P3),_($3),_(I3),c&&t(FBe),c&&t(ac),_(q3),c&&t(vBe),c&&t(_r),_(N3),_(D3),_(G3),_(O3),_(V3),c&&t(TBe),c&&t(lc),_(X3),c&&t(MBe),c&&t(ur),_(z3),_(W3),_(H3),_(U3),_(J3),c&&t(EBe),c&&t(fc),_(Y3),c&&t(CBe),c&&t(br),_(K3),_(ew),_(ow),_(rw),_(tw),c&&t(wBe),c&&t(hc),_(aw),c&&t(ABe),c&&t(Fr),_(nw),_(lw),_(iw),_(dw),_(cw),c&&t(yBe),c&&t(uc),_(fw),c&&t(LBe),c&&t(vr),_(mw),_(hw),_(pw),_(_w),_(uw),c&&t(xBe),c&&t(vc),_(bw),c&&t(kBe),c&&t(Tr),_(Fw),_(Tw),_(Mw),_(Ew),_(Cw),c&&t(SBe),c&&t(Ec),_(ww),c&&t(RBe),c&&t(Mr),_(Aw),_(Lw),_(xw),_(kw),_(Rw),c&&t(BBe),c&&t(Ac),_(Bw),c&&t(PBe),c&&t(Er),_(Pw),_(Iw),_(qw),_(Nw),_(jw),c&&t($Be),c&&t(xc),_(Dw),c&&t(IBe),c&&t(Cr),_(Gw),_(Vw),_(Xw),_(zw),_(Qw),c&&t(qBe),c&&t(Rc),_(Ww),c&&t(NBe),c&&t(wr),_(Hw),_(Jw),_(Yw),_(Kw),_(Zw),c&&t(jBe),c&&t($c),_(eA),c&&t(DBe),c&&t(Ar),_(oA),_(tA),_(aA),_(nA),_(sA),c&&t(GBe),c&&t(Nc),_(lA),c&&t(OBe),c&&t(yr),_(iA),_(cA),_(fA),_(mA),_(gA),c&&t(VBe),c&&t(Gc),_(hA),c&&t(XBe),c&&t(Lr),_(pA),_(uA),_(bA),_(FA),_(vA),c&&t(zBe),c&&t(Xc),_(TA),c&&t(QBe),c&&t(xr),_(MA),_(CA),_(wA),_(AA),_(yA),c&&t(WBe),c&&t(Wc),_(LA),c&&t(HBe),c&&t(kr),_(xA),_(SA),_(RA),_(BA),_(PA),c&&t(UBe),c&&t(Jc),_($A),c&&t(JBe),c&&t(Sr),_(IA),_(NA),_(jA),_(DA),_(GA),c&&t(YBe),c&&t(Zc),_(OA),c&&t(KBe),c&&t(Rr),_(VA),_(zA),_(QA),_(WA),_(HA),c&&t(ZBe),c&&t(rf),_(UA),c&&t(ePe),c&&t(Br),_(JA),_(KA),_(ZA),_(ey),_(oy),c&&t(oPe),c&&t(nf),_(ry),c&&t(rPe),c&&t(Pr),_(ty),_(ny),_(sy),_(ly),_(iy),c&&t(tPe),c&&t(df),_(dy),c&&t(aPe),c&&t($r),_(cy),_(my),_(gy),_(hy),_(py),c&&t(nPe),c&&t(mf),_(_y),c&&t(sPe),c&&t(Ir),_(uy),_(Fy),_(vy),_(Ty),_(My),c&&t(lPe),c&&t(pf),_(Ey),c&&t(iPe),c&&t(qr),_(Cy),_(Ay),_(yy),_(Ly),_(xy),c&&t(dPe),c&&t(bf),_(ky),c&&t(cPe),c&&t(Nr),_(Sy),_(By),_(Py),_($y),_(Iy),c&&t(fPe),c&&t(Tf),_(qy),c&&t(mPe),c&&t(jr),_(Ny),_(Dy),_(Gy),_(Oy),_(Vy),c&&t(gPe),c&&t(Cf),_(Xy),c&&t(hPe),c&&t(Dr),_(zy),_(Wy),_(Hy),_(Uy),_(Jy),c&&t(pPe),c&&t(yf),_(Yy),c&&t(_Pe),c&&t(Gr),_(Ky),_(eL),_(oL),_(rL),_(tL),c&&t(uPe),c&&t(kf),_(aL),c&&t(bPe),c&&t(Or),_(nL),_(lL),_(iL),_(dL),_(fL),c&&t(FPe),c&&t(Bf),_(mL),c&&t(vPe),c&&t(Vr),_(gL),_(pL),_(_L),_(uL),_(bL)}}}const eCt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function oCt(qf){return UEt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class lCt extends zEt{constructor(Z){super();QEt(this,Z,oCt,ZEt,WEt,{})}}export{lCt as default,eCt as metadata};
