import{S as F8t,i as C8t,s as M8t,e as a,k as l,w as f,t as o,M as E8t,c as n,d as t,m as i,a as s,x as m,h as r,b as c,F as e,g as b,y as g,q as h,o as p,B as _}from"../../chunks/vendor-4833417e.js";import{T as Rxr}from"../../chunks/Tip-fffd6df1.js";import{D as M}from"../../chunks/Docstring-4f315ed9.js";import{C as w}from"../../chunks/CodeBlock-6a3d1b46.js";import{I as X}from"../../chunks/IconCopyLink-4b81c553.js";import"../../chunks/CopyButton-dacfbfaf.js";function y8t(Xi){let J,Pe,de,ge,io,fe,Te,zo,Vi,Wf,ha,zi,Wi,n4,Qf,Le,co,Qi,Wn,s4,Qn,Hn,l4,Hi,Un,i4,Ui,Hf,Va;return{c(){J=a("p"),Pe=o("If your "),de=a("code"),ge=o("NewModelConfig"),io=o(" is a subclass of "),fe=a("code"),Te=o("PretrainedConfig"),zo=o(`, make sure its
`),Vi=a("code"),Wf=o("model_type"),ha=o(" attribute is set to the same key you use when registering the config (here "),zi=a("code"),Wi=o('"new-model"'),n4=o(")."),Qf=l(),Le=a("p"),co=o("Likewise, if your "),Qi=a("code"),Wn=o("NewModel"),s4=o(" is a subclass of "),Qn=a("a"),Hn=o("PreTrainedModel"),l4=o(`, make sure its
`),Hi=a("code"),Un=o("config_class"),i4=o(` attribute is set to the same class you use when registering the model (here
`),Ui=a("code"),Hf=o("NewModelConfig"),Va=o(")."),this.h()},l(fo){J=n(fo,"P",{});var he=s(J);Pe=r(he,"If your "),de=n(he,"CODE",{});var n9=s(de);ge=r(n9,"NewModelConfig"),n9.forEach(t),io=r(he," is a subclass of "),fe=n(he,"CODE",{});var Ji=s(fe);Te=r(Ji,"PretrainedConfig"),Ji.forEach(t),zo=r(he,`, make sure its
`),Vi=n(he,"CODE",{});var s9=s(Vi);Wf=r(s9,"model_type"),s9.forEach(t),ha=r(he," attribute is set to the same key you use when registering the config (here "),zi=n(he,"CODE",{});var l9=s(zi);Wi=r(l9,'"new-model"'),l9.forEach(t),n4=r(he,")."),he.forEach(t),Qf=i(fo),Le=n(fo,"P",{});var Wo=s(Le);co=r(Wo,"Likewise, if your "),Qi=n(Wo,"CODE",{});var za=s(Qi);Wn=r(za,"NewModel"),za.forEach(t),s4=r(Wo," is a subclass of "),Qn=n(Wo,"A",{href:!0});var i9=s(Qn);Hn=r(i9,"PreTrainedModel"),i9.forEach(t),l4=r(Wo,`, make sure its
`),Hi=n(Wo,"CODE",{});var Uf=s(Hi);Un=r(Uf,"config_class"),Uf.forEach(t),i4=r(Wo,` attribute is set to the same class you use when registering the model (here
`),Ui=n(Wo,"CODE",{});var d9=s(Ui);Hf=r(d9,"NewModelConfig"),d9.forEach(t),Va=r(Wo,")."),Wo.forEach(t),this.h()},h(){c(Qn,"href","/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel")},m(fo,he){b(fo,J,he),e(J,Pe),e(J,de),e(de,ge),e(J,io),e(J,fe),e(fe,Te),e(J,zo),e(J,Vi),e(Vi,Wf),e(J,ha),e(J,zi),e(zi,Wi),e(J,n4),b(fo,Qf,he),b(fo,Le,he),e(Le,co),e(Le,Qi),e(Qi,Wn),e(Le,s4),e(Le,Qn),e(Qn,Hn),e(Le,l4),e(Le,Hi),e(Hi,Un),e(Le,i4),e(Le,Ui),e(Ui,Hf),e(Le,Va)},d(fo){fo&&t(J),fo&&t(Qf),fo&&t(Le)}}}function w8t(Xi){let J,Pe,de,ge,io;return{c(){J=a("p"),Pe=o("Passing "),de=a("code"),ge=o("use_auth_token=True"),io=o(" is required when you want to use a private model.")},l(fe){J=n(fe,"P",{});var Te=s(J);Pe=r(Te,"Passing "),de=n(Te,"CODE",{});var zo=s(de);ge=r(zo,"use_auth_token=True"),zo.forEach(t),io=r(Te," is required when you want to use a private model."),Te.forEach(t)},m(fe,Te){b(fe,J,Te),e(J,Pe),e(J,de),e(de,ge),e(J,io)},d(fe){fe&&t(J)}}}function A8t(Xi){let J,Pe,de,ge,io;return{c(){J=a("p"),Pe=o("Passing "),de=a("code"),ge=o("use_auth_token=True"),io=o(" is required when you want to use a private model.")},l(fe){J=n(fe,"P",{});var Te=s(J);Pe=r(Te,"Passing "),de=n(Te,"CODE",{});var zo=s(de);ge=r(zo,"use_auth_token=True"),zo.forEach(t),io=r(Te," is required when you want to use a private model."),Te.forEach(t)},m(fe,Te){b(fe,J,Te),e(J,Pe),e(J,de),e(de,ge),e(J,io)},d(fe){fe&&t(J)}}}function L8t(Xi){let J,Pe,de,ge,io,fe,Te,zo,Vi,Wf,ha,zi,Wi,n4,Qf,Le,co,Qi,Wn,s4,Qn,Hn,l4,Hi,Un,i4,Ui,Hf,Va,fo,he,n9,Ji,s9,l9,Wo,za,i9,Uf,d9,s$e,Gxe,Yi,Jf,$Q,d4,l$e,IQ,i$e,Xxe,Jn,d$e,jQ,c$e,f$e,DQ,m$e,g$e,Vxe,c4,zxe,c9,h$e,Wxe,Yf,Qxe,Ki,Kf,NQ,f4,p$e,qQ,_$e,Hxe,Qo,m4,u$e,g4,b$e,f9,v$e,T$e,F$e,h4,C$e,OQ,M$e,E$e,y$e,mo,p4,w$e,GQ,A$e,L$e,Zi,B$e,XQ,x$e,k$e,VQ,R$e,S$e,P$e,v,Zf,zQ,$$e,I$e,m9,j$e,D$e,N$e,em,WQ,q$e,O$e,g9,G$e,X$e,V$e,om,QQ,z$e,W$e,h9,Q$e,H$e,U$e,rm,HQ,J$e,Y$e,p9,K$e,Z$e,eIe,tm,UQ,oIe,rIe,_9,tIe,aIe,nIe,am,JQ,sIe,lIe,u9,iIe,dIe,cIe,nm,YQ,fIe,mIe,b9,gIe,hIe,pIe,sm,KQ,_Ie,uIe,v9,bIe,vIe,TIe,lm,ZQ,FIe,CIe,T9,MIe,EIe,yIe,im,eH,wIe,AIe,F9,LIe,BIe,xIe,dm,oH,kIe,RIe,C9,SIe,PIe,$Ie,cm,rH,IIe,jIe,M9,DIe,NIe,qIe,fm,tH,OIe,GIe,E9,XIe,VIe,zIe,mm,aH,WIe,QIe,y9,HIe,UIe,JIe,gm,nH,YIe,KIe,w9,ZIe,eje,oje,hm,sH,rje,tje,A9,aje,nje,sje,pm,lH,lje,ije,L9,dje,cje,fje,_m,iH,mje,gje,B9,hje,pje,_je,um,dH,uje,bje,x9,vje,Tje,Fje,bm,cH,Cje,Mje,k9,Eje,yje,wje,vm,fH,Aje,Lje,R9,Bje,xje,kje,Tm,mH,Rje,Sje,S9,Pje,$je,Ije,Fm,gH,jje,Dje,P9,Nje,qje,Oje,Cm,hH,Gje,Xje,$9,Vje,zje,Wje,Mm,pH,Qje,Hje,I9,Uje,Jje,Yje,Em,_H,Kje,Zje,j9,eDe,oDe,rDe,ym,uH,tDe,aDe,D9,nDe,sDe,lDe,wm,bH,iDe,dDe,N9,cDe,fDe,mDe,Am,vH,gDe,hDe,q9,pDe,_De,uDe,Lm,TH,bDe,vDe,O9,TDe,FDe,CDe,Bm,FH,MDe,EDe,G9,yDe,wDe,ADe,xm,CH,LDe,BDe,X9,xDe,kDe,RDe,km,MH,SDe,PDe,V9,$De,IDe,jDe,Rm,EH,DDe,NDe,z9,qDe,ODe,GDe,Sm,yH,XDe,VDe,W9,zDe,WDe,QDe,Pm,wH,HDe,UDe,Q9,JDe,YDe,KDe,$m,AH,ZDe,eNe,H9,oNe,rNe,tNe,Im,LH,aNe,nNe,U9,sNe,lNe,iNe,jm,BH,dNe,cNe,J9,fNe,mNe,gNe,Dm,xH,hNe,pNe,Y9,_Ne,uNe,bNe,Nm,kH,vNe,TNe,K9,FNe,CNe,MNe,qm,RH,ENe,yNe,Z9,wNe,ANe,LNe,Om,SH,BNe,xNe,eB,kNe,RNe,SNe,Gm,PH,PNe,$Ne,oB,INe,jNe,DNe,Xm,$H,NNe,qNe,rB,ONe,GNe,XNe,Vm,IH,VNe,zNe,tB,WNe,QNe,HNe,zm,jH,UNe,JNe,aB,YNe,KNe,ZNe,Wm,DH,eqe,oqe,nB,rqe,tqe,aqe,Qm,NH,nqe,sqe,sB,lqe,iqe,dqe,Hm,qH,cqe,fqe,lB,mqe,gqe,hqe,Um,OH,pqe,_qe,iB,uqe,bqe,vqe,Jm,GH,Tqe,Fqe,dB,Cqe,Mqe,Eqe,Ym,XH,yqe,wqe,cB,Aqe,Lqe,Bqe,Km,VH,xqe,kqe,fB,Rqe,Sqe,Pqe,Zm,zH,$qe,Iqe,mB,jqe,Dqe,Nqe,eg,WH,qqe,Oqe,gB,Gqe,Xqe,Vqe,og,QH,zqe,Wqe,hB,Qqe,Hqe,Uqe,rg,HH,Jqe,Yqe,pB,Kqe,Zqe,eOe,tg,UH,oOe,rOe,_B,tOe,aOe,nOe,ag,JH,sOe,lOe,uB,iOe,dOe,cOe,ng,YH,fOe,mOe,bB,gOe,hOe,pOe,sg,KH,_Oe,uOe,vB,bOe,vOe,TOe,lg,ZH,FOe,COe,TB,MOe,EOe,yOe,ig,eU,wOe,AOe,FB,LOe,BOe,xOe,dg,oU,kOe,ROe,CB,SOe,POe,$Oe,cg,rU,IOe,jOe,MB,DOe,NOe,qOe,fg,tU,OOe,GOe,EB,XOe,VOe,zOe,mg,aU,WOe,QOe,yB,HOe,UOe,JOe,gg,nU,YOe,KOe,wB,ZOe,eGe,oGe,hg,sU,rGe,tGe,AB,aGe,nGe,sGe,pg,lU,lGe,iGe,LB,dGe,cGe,fGe,_g,iU,mGe,gGe,BB,hGe,pGe,_Ge,ug,dU,uGe,bGe,xB,vGe,TGe,FGe,bg,cU,CGe,MGe,kB,EGe,yGe,wGe,vg,fU,AGe,LGe,RB,BGe,xGe,kGe,Tg,mU,RGe,SGe,SB,PGe,$Ge,IGe,Fg,gU,jGe,DGe,PB,NGe,qGe,OGe,Cg,hU,GGe,XGe,$B,VGe,zGe,WGe,Mg,pU,QGe,HGe,IB,UGe,JGe,YGe,Eg,_U,KGe,ZGe,jB,eXe,oXe,rXe,yg,uU,tXe,aXe,DB,nXe,sXe,lXe,wg,bU,iXe,dXe,NB,cXe,fXe,mXe,Ag,vU,gXe,hXe,qB,pXe,_Xe,uXe,Lg,TU,bXe,vXe,OB,TXe,FXe,CXe,Bg,FU,MXe,EXe,GB,yXe,wXe,AXe,xg,CU,LXe,BXe,XB,xXe,kXe,RXe,kg,MU,SXe,PXe,VB,$Xe,IXe,jXe,Rg,EU,DXe,NXe,zB,qXe,OXe,GXe,Sg,yU,XXe,VXe,WB,zXe,WXe,QXe,Pg,wU,HXe,UXe,QB,JXe,YXe,KXe,$g,AU,ZXe,eVe,HB,oVe,rVe,tVe,Ig,LU,aVe,nVe,UB,sVe,lVe,iVe,jg,BU,dVe,cVe,JB,fVe,mVe,gVe,Dg,xU,hVe,pVe,YB,_Ve,uVe,bVe,kU,vVe,TVe,_4,FVe,Ng,u4,CVe,RU,MVe,Uxe,ed,qg,SU,b4,EVe,PU,yVe,Jxe,Ho,v4,wVe,T4,AVe,KB,LVe,BVe,xVe,F4,kVe,$U,RVe,SVe,PVe,go,C4,$Ve,IU,IVe,jVe,Wa,DVe,jU,NVe,qVe,DU,OVe,GVe,NU,XVe,VVe,zVe,E,Yn,qU,WVe,QVe,ZB,HVe,UVe,ex,JVe,YVe,KVe,Kn,OU,ZVe,eze,ox,oze,rze,rx,tze,aze,nze,Zn,GU,sze,lze,tx,ize,dze,ax,cze,fze,mze,Og,XU,gze,hze,nx,pze,_ze,uze,es,VU,bze,vze,sx,Tze,Fze,lx,Cze,Mze,Eze,Gg,zU,yze,wze,ix,Aze,Lze,Bze,Xg,WU,xze,kze,dx,Rze,Sze,Pze,Vg,QU,$ze,Ize,cx,jze,Dze,Nze,os,HU,qze,Oze,fx,Gze,Xze,mx,Vze,zze,Wze,rs,UU,Qze,Hze,gx,Uze,Jze,hx,Yze,Kze,Zze,ts,JU,eWe,oWe,px,rWe,tWe,_x,aWe,nWe,sWe,zg,YU,lWe,iWe,ux,dWe,cWe,fWe,Wg,KU,mWe,gWe,bx,hWe,pWe,_We,as,ZU,uWe,bWe,vx,vWe,TWe,Tx,FWe,CWe,MWe,Qg,eJ,EWe,yWe,Fx,wWe,AWe,LWe,ns,oJ,BWe,xWe,Cx,kWe,RWe,Mx,SWe,PWe,$We,ss,rJ,IWe,jWe,Ex,DWe,NWe,yx,qWe,OWe,GWe,ls,tJ,XWe,VWe,wx,zWe,WWe,aJ,QWe,HWe,UWe,Hg,nJ,JWe,YWe,Ax,KWe,ZWe,eQe,is,sJ,oQe,rQe,Lx,tQe,aQe,Bx,nQe,sQe,lQe,Ug,lJ,iQe,dQe,xx,cQe,fQe,mQe,ds,iJ,gQe,hQe,kx,pQe,_Qe,Rx,uQe,bQe,vQe,cs,dJ,TQe,FQe,Sx,CQe,MQe,Px,EQe,yQe,wQe,fs,cJ,AQe,LQe,$x,BQe,xQe,Ix,kQe,RQe,SQe,Jg,fJ,PQe,$Qe,jx,IQe,jQe,DQe,ms,mJ,NQe,qQe,Dx,OQe,GQe,Nx,XQe,VQe,zQe,Yg,gJ,WQe,QQe,qx,HQe,UQe,JQe,gs,hJ,YQe,KQe,Ox,ZQe,eHe,Gx,oHe,rHe,tHe,hs,pJ,aHe,nHe,Xx,sHe,lHe,Vx,iHe,dHe,cHe,ps,_J,fHe,mHe,zx,gHe,hHe,Wx,pHe,_He,uHe,_s,uJ,bHe,vHe,Qx,THe,FHe,Hx,CHe,MHe,EHe,Kg,bJ,yHe,wHe,Ux,AHe,LHe,BHe,us,vJ,xHe,kHe,Jx,RHe,SHe,Yx,PHe,$He,IHe,bs,TJ,jHe,DHe,Kx,NHe,qHe,Zx,OHe,GHe,XHe,vs,FJ,VHe,zHe,ek,WHe,QHe,ok,HHe,UHe,JHe,Ts,CJ,YHe,KHe,rk,ZHe,eUe,tk,oUe,rUe,tUe,Fs,MJ,aUe,nUe,ak,sUe,lUe,nk,iUe,dUe,cUe,Cs,EJ,fUe,mUe,sk,gUe,hUe,lk,pUe,_Ue,uUe,Zg,yJ,bUe,vUe,ik,TUe,FUe,CUe,Ms,wJ,MUe,EUe,dk,yUe,wUe,ck,AUe,LUe,BUe,eh,AJ,xUe,kUe,fk,RUe,SUe,PUe,oh,LJ,$Ue,IUe,mk,jUe,DUe,NUe,Es,BJ,qUe,OUe,gk,GUe,XUe,hk,VUe,zUe,WUe,ys,xJ,QUe,HUe,pk,UUe,JUe,_k,YUe,KUe,ZUe,rh,kJ,eJe,oJe,uk,rJe,tJe,aJe,ws,RJ,nJe,sJe,bk,lJe,iJe,vk,dJe,cJe,fJe,As,SJ,mJe,gJe,Tk,hJe,pJe,Fk,_Je,uJe,bJe,Ls,PJ,vJe,TJe,Ck,FJe,CJe,Mk,MJe,EJe,yJe,Bs,$J,wJe,AJe,Ek,LJe,BJe,yk,xJe,kJe,RJe,xs,IJ,SJe,PJe,wk,$Je,IJe,Ak,jJe,DJe,NJe,th,jJ,qJe,OJe,Lk,GJe,XJe,VJe,ah,DJ,zJe,WJe,Bk,QJe,HJe,UJe,nh,NJ,JJe,YJe,xk,KJe,ZJe,eYe,sh,qJ,oYe,rYe,kk,tYe,aYe,nYe,ks,OJ,sYe,lYe,Rk,iYe,dYe,Sk,cYe,fYe,mYe,lh,GJ,gYe,hYe,Pk,pYe,_Ye,uYe,Rs,XJ,bYe,vYe,$k,TYe,FYe,Ik,CYe,MYe,EYe,Ss,VJ,yYe,wYe,jk,AYe,LYe,Dk,BYe,xYe,kYe,Ps,zJ,RYe,SYe,Nk,PYe,$Ye,qk,IYe,jYe,DYe,$s,WJ,NYe,qYe,Ok,OYe,GYe,Gk,XYe,VYe,zYe,Is,QJ,WYe,QYe,Xk,HYe,UYe,Vk,JYe,YYe,KYe,js,HJ,ZYe,eKe,zk,oKe,rKe,Wk,tKe,aKe,nKe,ih,UJ,sKe,lKe,Qk,iKe,dKe,cKe,dh,JJ,fKe,mKe,Hk,gKe,hKe,pKe,Ds,YJ,_Ke,uKe,Uk,bKe,vKe,Jk,TKe,FKe,CKe,Ns,KJ,MKe,EKe,Yk,yKe,wKe,Kk,AKe,LKe,BKe,qs,ZJ,xKe,kKe,Zk,RKe,SKe,eR,PKe,$Ke,IKe,ch,eY,jKe,DKe,oR,NKe,qKe,OKe,fh,oY,GKe,XKe,rR,VKe,zKe,WKe,mh,rY,QKe,HKe,tR,UKe,JKe,YKe,gh,tY,KKe,ZKe,aR,eZe,oZe,rZe,Os,aY,tZe,aZe,nR,nZe,sZe,sR,lZe,iZe,dZe,hh,nY,cZe,fZe,lR,mZe,gZe,hZe,ph,sY,pZe,_Ze,iR,uZe,bZe,vZe,Gs,lY,TZe,FZe,dR,CZe,MZe,cR,EZe,yZe,wZe,Xs,iY,AZe,LZe,fR,BZe,xZe,mR,kZe,RZe,SZe,dY,PZe,$Ze,M4,IZe,_h,E4,jZe,cY,DZe,Yxe,od,uh,fY,y4,NZe,mY,qZe,Kxe,Uo,w4,OZe,A4,GZe,gR,XZe,VZe,zZe,L4,WZe,gY,QZe,HZe,UZe,$e,B4,JZe,hY,YZe,KZe,Qa,ZZe,pY,eeo,oeo,_Y,reo,teo,uY,aeo,neo,seo,ae,bh,bY,leo,ieo,hR,deo,ceo,feo,vh,vY,meo,geo,pR,heo,peo,_eo,Th,TY,ueo,beo,_R,veo,Teo,Feo,Fh,FY,Ceo,Meo,uR,Eeo,yeo,weo,Ch,CY,Aeo,Leo,bR,Beo,xeo,keo,Mh,MY,Reo,Seo,vR,Peo,$eo,Ieo,Eh,EY,jeo,Deo,TR,Neo,qeo,Oeo,yh,yY,Geo,Xeo,FR,Veo,zeo,Weo,wh,wY,Qeo,Heo,CR,Ueo,Jeo,Yeo,Ah,AY,Keo,Zeo,MR,eoo,ooo,roo,Lh,LY,too,aoo,ER,noo,soo,loo,Bh,BY,ioo,doo,yR,coo,foo,moo,xh,xY,goo,hoo,wR,poo,_oo,uoo,kh,kY,boo,voo,AR,Too,Foo,Coo,Rh,RY,Moo,Eoo,LR,yoo,woo,Aoo,Sh,SY,Loo,Boo,BR,xoo,koo,Roo,Ph,Soo,PY,Poo,$oo,x4,Ioo,$h,k4,joo,$Y,Doo,Zxe,rd,Ih,IY,R4,Noo,jY,qoo,eke,Jo,S4,Ooo,P4,Goo,xR,Xoo,Voo,zoo,$4,Woo,DY,Qoo,Hoo,Uoo,Ie,I4,Joo,NY,Yoo,Koo,td,Zoo,qY,ero,oro,OY,rro,tro,aro,Be,jh,GY,nro,sro,kR,lro,iro,dro,Dh,XY,cro,fro,RR,mro,gro,hro,Nh,VY,pro,_ro,SR,uro,bro,vro,qh,zY,Tro,Fro,PR,Cro,Mro,Ero,Oh,WY,yro,wro,$R,Aro,Lro,Bro,Gh,QY,xro,kro,IR,Rro,Sro,Pro,Xh,HY,$ro,Iro,jR,jro,Dro,Nro,Vh,UY,qro,Oro,DR,Gro,Xro,Vro,zh,zro,JY,Wro,Qro,j4,Hro,Wh,D4,Uro,YY,Jro,oke,ad,Qh,KY,N4,Yro,ZY,Kro,rke,Yo,q4,Zro,nd,eto,eK,oto,rto,oK,tto,ato,nto,O4,sto,rK,lto,ito,dto,Wr,G4,cto,tK,fto,mto,sd,gto,aK,hto,pto,nK,_to,uto,bto,sK,vto,Tto,X4,Fto,je,V4,Cto,lK,Mto,Eto,Ha,yto,iK,wto,Ato,dK,Lto,Bto,cK,xto,kto,Rto,F,Hh,fK,Sto,Pto,NR,$to,Ito,jto,Uh,mK,Dto,Nto,qR,qto,Oto,Gto,Jh,gK,Xto,Vto,OR,zto,Wto,Qto,Yh,hK,Hto,Uto,GR,Jto,Yto,Kto,Kh,pK,Zto,eao,XR,oao,rao,tao,Zh,_K,aao,nao,VR,sao,lao,iao,ep,uK,dao,cao,zR,fao,mao,gao,op,bK,hao,pao,WR,_ao,uao,bao,rp,vK,vao,Tao,QR,Fao,Cao,Mao,tp,TK,Eao,yao,HR,wao,Aao,Lao,ap,FK,Bao,xao,UR,kao,Rao,Sao,np,CK,Pao,$ao,JR,Iao,jao,Dao,sp,MK,Nao,qao,YR,Oao,Gao,Xao,lp,EK,Vao,zao,KR,Wao,Qao,Hao,ip,yK,Uao,Jao,ZR,Yao,Kao,Zao,dp,wK,eno,ono,eS,rno,tno,ano,cp,AK,nno,sno,oS,lno,ino,dno,fp,LK,cno,fno,rS,mno,gno,hno,mp,BK,pno,_no,tS,uno,bno,vno,gp,xK,Tno,Fno,aS,Cno,Mno,Eno,hp,kK,yno,wno,nS,Ano,Lno,Bno,pp,RK,xno,kno,sS,Rno,Sno,Pno,_p,SK,$no,Ino,lS,jno,Dno,Nno,up,PK,qno,Ono,iS,Gno,Xno,Vno,bp,$K,zno,Wno,dS,Qno,Hno,Uno,vp,IK,Jno,Yno,cS,Kno,Zno,eso,Tp,jK,oso,rso,fS,tso,aso,nso,Vs,DK,sso,lso,mS,iso,dso,gS,cso,fso,mso,Fp,NK,gso,hso,hS,pso,_so,uso,Cp,qK,bso,vso,pS,Tso,Fso,Cso,Mp,OK,Mso,Eso,_S,yso,wso,Aso,Ep,GK,Lso,Bso,uS,xso,kso,Rso,yp,XK,Sso,Pso,bS,$so,Iso,jso,wp,VK,Dso,Nso,vS,qso,Oso,Gso,Ap,zK,Xso,Vso,TS,zso,Wso,Qso,Lp,WK,Hso,Uso,FS,Jso,Yso,Kso,Bp,QK,Zso,elo,CS,olo,rlo,tlo,xp,HK,alo,nlo,MS,slo,llo,ilo,kp,UK,dlo,clo,ES,flo,mlo,glo,Rp,JK,hlo,plo,yS,_lo,ulo,blo,Sp,YK,vlo,Tlo,wS,Flo,Clo,Mlo,Pp,KK,Elo,ylo,AS,wlo,Alo,Llo,$p,ZK,Blo,xlo,LS,klo,Rlo,Slo,Ip,eZ,Plo,$lo,BS,Ilo,jlo,Dlo,jp,oZ,Nlo,qlo,xS,Olo,Glo,Xlo,Dp,rZ,Vlo,zlo,kS,Wlo,Qlo,Hlo,Np,tZ,Ulo,Jlo,RS,Ylo,Klo,Zlo,qp,aZ,eio,oio,SS,rio,tio,aio,Op,nZ,nio,sio,PS,lio,iio,dio,Gp,sZ,cio,fio,$S,mio,gio,hio,Xp,lZ,pio,_io,IS,uio,bio,vio,Vp,iZ,Tio,Fio,jS,Cio,Mio,Eio,zp,dZ,yio,wio,DS,Aio,Lio,Bio,Wp,cZ,xio,kio,NS,Rio,Sio,Pio,Qp,fZ,$io,Iio,qS,jio,Dio,Nio,Hp,mZ,qio,Oio,OS,Gio,Xio,Vio,Up,gZ,zio,Wio,GS,Qio,Hio,Uio,Jp,hZ,Jio,Yio,XS,Kio,Zio,edo,Yp,pZ,odo,rdo,VS,tdo,ado,ndo,Kp,_Z,sdo,ldo,zS,ido,ddo,cdo,Zp,uZ,fdo,mdo,WS,gdo,hdo,pdo,e_,bZ,_do,udo,QS,bdo,vdo,Tdo,o_,vZ,Fdo,Cdo,HS,Mdo,Edo,ydo,r_,TZ,wdo,Ado,US,Ldo,Bdo,xdo,t_,FZ,kdo,Rdo,JS,Sdo,Pdo,$do,a_,CZ,Ido,jdo,YS,Ddo,Ndo,qdo,n_,MZ,Odo,Gdo,KS,Xdo,Vdo,zdo,s_,EZ,Wdo,Qdo,ZS,Hdo,Udo,Jdo,l_,yZ,Ydo,Kdo,eP,Zdo,eco,oco,i_,wZ,rco,tco,oP,aco,nco,sco,d_,AZ,lco,ico,rP,dco,cco,fco,c_,LZ,mco,gco,tP,hco,pco,_co,f_,BZ,uco,bco,aP,vco,Tco,Fco,m_,xZ,Cco,Mco,nP,Eco,yco,wco,g_,kZ,Aco,Lco,sP,Bco,xco,kco,h_,RZ,Rco,Sco,lP,Pco,$co,Ico,p_,SZ,jco,Dco,iP,Nco,qco,Oco,__,PZ,Gco,Xco,dP,Vco,zco,Wco,u_,$Z,Qco,Hco,cP,Uco,Jco,Yco,b_,IZ,Kco,Zco,fP,efo,ofo,rfo,v_,jZ,tfo,afo,mP,nfo,sfo,lfo,T_,DZ,ifo,dfo,gP,cfo,ffo,mfo,F_,NZ,gfo,hfo,hP,pfo,_fo,ufo,C_,qZ,bfo,vfo,pP,Tfo,Ffo,Cfo,M_,OZ,Mfo,Efo,_P,yfo,wfo,Afo,E_,GZ,Lfo,Bfo,uP,xfo,kfo,Rfo,y_,XZ,Sfo,Pfo,bP,$fo,Ifo,jfo,w_,Dfo,VZ,Nfo,qfo,zZ,Ofo,Gfo,WZ,Xfo,Vfo,z4,tke,ld,A_,QZ,W4,zfo,HZ,Wfo,ake,Ko,Q4,Qfo,id,Hfo,UZ,Ufo,Jfo,JZ,Yfo,Kfo,Zfo,H4,emo,YZ,omo,rmo,tmo,Qr,U4,amo,KZ,nmo,smo,dd,lmo,ZZ,imo,dmo,eee,cmo,fmo,mmo,oee,gmo,hmo,J4,pmo,De,Y4,_mo,ree,umo,bmo,Ua,vmo,tee,Tmo,Fmo,aee,Cmo,Mmo,nee,Emo,ymo,wmo,k,L_,see,Amo,Lmo,vP,Bmo,xmo,kmo,B_,lee,Rmo,Smo,TP,Pmo,$mo,Imo,x_,iee,jmo,Dmo,FP,Nmo,qmo,Omo,k_,dee,Gmo,Xmo,CP,Vmo,zmo,Wmo,R_,cee,Qmo,Hmo,MP,Umo,Jmo,Ymo,S_,fee,Kmo,Zmo,EP,ego,ogo,rgo,P_,mee,tgo,ago,yP,ngo,sgo,lgo,$_,gee,igo,dgo,wP,cgo,fgo,mgo,I_,hee,ggo,hgo,AP,pgo,_go,ugo,j_,pee,bgo,vgo,LP,Tgo,Fgo,Cgo,D_,_ee,Mgo,Ego,BP,ygo,wgo,Ago,N_,uee,Lgo,Bgo,xP,xgo,kgo,Rgo,q_,bee,Sgo,Pgo,kP,$go,Igo,jgo,O_,vee,Dgo,Ngo,RP,qgo,Ogo,Ggo,G_,Tee,Xgo,Vgo,SP,zgo,Wgo,Qgo,X_,Fee,Hgo,Ugo,PP,Jgo,Ygo,Kgo,V_,Cee,Zgo,eho,$P,oho,rho,tho,z_,Mee,aho,nho,IP,sho,lho,iho,W_,Eee,dho,cho,jP,fho,mho,gho,Q_,yee,hho,pho,DP,_ho,uho,bho,H_,wee,vho,Tho,NP,Fho,Cho,Mho,U_,Aee,Eho,yho,qP,who,Aho,Lho,J_,Lee,Bho,xho,OP,kho,Rho,Sho,Y_,Bee,Pho,$ho,GP,Iho,jho,Dho,K_,xee,Nho,qho,XP,Oho,Gho,Xho,Z_,kee,Vho,zho,VP,Who,Qho,Hho,eu,Ree,Uho,Jho,zP,Yho,Kho,Zho,ou,See,epo,opo,WP,rpo,tpo,apo,ru,Pee,npo,spo,QP,lpo,ipo,dpo,tu,$ee,cpo,fpo,HP,mpo,gpo,hpo,au,Iee,ppo,_po,UP,upo,bpo,vpo,nu,jee,Tpo,Fpo,JP,Cpo,Mpo,Epo,su,Dee,ypo,wpo,YP,Apo,Lpo,Bpo,lu,Nee,xpo,kpo,KP,Rpo,Spo,Ppo,iu,qee,$po,Ipo,ZP,jpo,Dpo,Npo,du,Oee,qpo,Opo,e$,Gpo,Xpo,Vpo,cu,Gee,zpo,Wpo,o$,Qpo,Hpo,Upo,fu,Xee,Jpo,Ypo,r$,Kpo,Zpo,e_o,mu,Vee,o_o,r_o,t$,t_o,a_o,n_o,gu,s_o,zee,l_o,i_o,Wee,d_o,c_o,Qee,f_o,m_o,K4,nke,cd,hu,Hee,Z4,g_o,Uee,h_o,ske,Zo,eE,p_o,fd,__o,Jee,u_o,b_o,Yee,v_o,T_o,F_o,oE,C_o,Kee,M_o,E_o,y_o,Hr,rE,w_o,Zee,A_o,L_o,md,B_o,eoe,x_o,k_o,ooe,R_o,S_o,P_o,roe,$_o,I_o,tE,j_o,Ne,aE,D_o,toe,N_o,q_o,Ja,O_o,aoe,G_o,X_o,noe,V_o,z_o,soe,W_o,Q_o,H_o,$,pu,loe,U_o,J_o,a$,Y_o,K_o,Z_o,_u,ioe,euo,ouo,n$,ruo,tuo,auo,uu,doe,nuo,suo,s$,luo,iuo,duo,bu,coe,cuo,fuo,l$,muo,guo,huo,vu,foe,puo,_uo,i$,uuo,buo,vuo,Tu,moe,Tuo,Fuo,d$,Cuo,Muo,Euo,Fu,goe,yuo,wuo,c$,Auo,Luo,Buo,Cu,hoe,xuo,kuo,f$,Ruo,Suo,Puo,Mu,poe,$uo,Iuo,m$,juo,Duo,Nuo,Eu,_oe,quo,Ouo,g$,Guo,Xuo,Vuo,yu,uoe,zuo,Wuo,h$,Quo,Huo,Uuo,wu,boe,Juo,Yuo,p$,Kuo,Zuo,e1o,Au,voe,o1o,r1o,_$,t1o,a1o,n1o,Lu,Toe,s1o,l1o,u$,i1o,d1o,c1o,Bu,Foe,f1o,m1o,b$,g1o,h1o,p1o,xu,Coe,_1o,u1o,v$,b1o,v1o,T1o,ku,Moe,F1o,C1o,T$,M1o,E1o,y1o,Ru,Eoe,w1o,A1o,F$,L1o,B1o,x1o,Su,yoe,k1o,R1o,C$,S1o,P1o,$1o,Pu,woe,I1o,j1o,M$,D1o,N1o,q1o,$u,Aoe,O1o,G1o,E$,X1o,V1o,z1o,Iu,Loe,W1o,Q1o,y$,H1o,U1o,J1o,ju,Boe,Y1o,K1o,w$,Z1o,ebo,obo,Du,xoe,rbo,tbo,A$,abo,nbo,sbo,Nu,koe,lbo,ibo,L$,dbo,cbo,fbo,qu,Roe,mbo,gbo,B$,hbo,pbo,_bo,Ou,Soe,ubo,bbo,x$,vbo,Tbo,Fbo,Gu,Poe,Cbo,Mbo,k$,Ebo,ybo,wbo,Xu,$oe,Abo,Lbo,R$,Bbo,xbo,kbo,Vu,Ioe,Rbo,Sbo,S$,Pbo,$bo,Ibo,zu,joe,jbo,Dbo,P$,Nbo,qbo,Obo,Wu,Doe,Gbo,Xbo,$$,Vbo,zbo,Wbo,Qu,Noe,Qbo,Hbo,I$,Ubo,Jbo,Ybo,Hu,qoe,Kbo,Zbo,j$,e5o,o5o,r5o,Uu,Ooe,t5o,a5o,D$,n5o,s5o,l5o,Ju,i5o,Goe,d5o,c5o,Xoe,f5o,m5o,Voe,g5o,h5o,nE,lke,gd,Yu,zoe,sE,p5o,Woe,_5o,ike,er,lE,u5o,hd,b5o,Qoe,v5o,T5o,Hoe,F5o,C5o,M5o,iE,E5o,Uoe,y5o,w5o,A5o,Ur,dE,L5o,Joe,B5o,x5o,pd,k5o,Yoe,R5o,S5o,Koe,P5o,$5o,I5o,Zoe,j5o,D5o,cE,N5o,qe,fE,q5o,ere,O5o,G5o,Ya,X5o,ore,V5o,z5o,rre,W5o,Q5o,tre,H5o,U5o,J5o,I,Ku,are,Y5o,K5o,N$,Z5o,e2o,o2o,Zu,nre,r2o,t2o,q$,a2o,n2o,s2o,e1,sre,l2o,i2o,O$,d2o,c2o,f2o,o1,lre,m2o,g2o,G$,h2o,p2o,_2o,r1,ire,u2o,b2o,X$,v2o,T2o,F2o,t1,dre,C2o,M2o,V$,E2o,y2o,w2o,a1,cre,A2o,L2o,z$,B2o,x2o,k2o,n1,fre,R2o,S2o,W$,P2o,$2o,I2o,s1,mre,j2o,D2o,Q$,N2o,q2o,O2o,l1,gre,G2o,X2o,H$,V2o,z2o,W2o,i1,hre,Q2o,H2o,U$,U2o,J2o,Y2o,d1,pre,K2o,Z2o,J$,evo,ovo,rvo,c1,_re,tvo,avo,Y$,nvo,svo,lvo,f1,ure,ivo,dvo,K$,cvo,fvo,mvo,m1,bre,gvo,hvo,Z$,pvo,_vo,uvo,g1,vre,bvo,vvo,eI,Tvo,Fvo,Cvo,h1,Tre,Mvo,Evo,oI,yvo,wvo,Avo,p1,Fre,Lvo,Bvo,rI,xvo,kvo,Rvo,_1,Cre,Svo,Pvo,tI,$vo,Ivo,jvo,u1,Mre,Dvo,Nvo,aI,qvo,Ovo,Gvo,b1,Ere,Xvo,Vvo,nI,zvo,Wvo,Qvo,v1,yre,Hvo,Uvo,sI,Jvo,Yvo,Kvo,T1,wre,Zvo,e6o,lI,o6o,r6o,t6o,F1,Are,a6o,n6o,iI,s6o,l6o,i6o,C1,Lre,d6o,c6o,dI,f6o,m6o,g6o,M1,Bre,h6o,p6o,cI,_6o,u6o,b6o,E1,xre,v6o,T6o,fI,F6o,C6o,M6o,y1,kre,E6o,y6o,mI,w6o,A6o,L6o,w1,Rre,B6o,x6o,gI,k6o,R6o,S6o,A1,Sre,P6o,$6o,hI,I6o,j6o,D6o,L1,Pre,N6o,q6o,$re,O6o,G6o,X6o,B1,Ire,V6o,z6o,pI,W6o,Q6o,H6o,x1,jre,U6o,J6o,_I,Y6o,K6o,Z6o,k1,Dre,e0o,o0o,uI,r0o,t0o,a0o,R1,Nre,n0o,s0o,bI,l0o,i0o,d0o,S1,c0o,qre,f0o,m0o,Ore,g0o,h0o,Gre,p0o,_0o,mE,dke,_d,P1,Xre,gE,u0o,Vre,b0o,cke,or,hE,v0o,ud,T0o,zre,F0o,C0o,Wre,M0o,E0o,y0o,pE,w0o,Qre,A0o,L0o,B0o,Jr,_E,x0o,Hre,k0o,R0o,bd,S0o,Ure,P0o,$0o,Jre,I0o,j0o,D0o,Yre,N0o,q0o,uE,O0o,Oe,bE,G0o,Kre,X0o,V0o,Ka,z0o,Zre,W0o,Q0o,ete,H0o,U0o,ote,J0o,Y0o,K0o,ne,$1,rte,Z0o,eTo,vI,oTo,rTo,tTo,I1,tte,aTo,nTo,TI,sTo,lTo,iTo,j1,ate,dTo,cTo,FI,fTo,mTo,gTo,D1,nte,hTo,pTo,CI,_To,uTo,bTo,N1,ste,vTo,TTo,MI,FTo,CTo,MTo,q1,lte,ETo,yTo,EI,wTo,ATo,LTo,O1,ite,BTo,xTo,yI,kTo,RTo,STo,G1,dte,PTo,$To,wI,ITo,jTo,DTo,X1,cte,NTo,qTo,AI,OTo,GTo,XTo,V1,fte,VTo,zTo,LI,WTo,QTo,HTo,z1,mte,UTo,JTo,BI,YTo,KTo,ZTo,W1,gte,e8o,o8o,xI,r8o,t8o,a8o,Q1,hte,n8o,s8o,kI,l8o,i8o,d8o,H1,pte,c8o,f8o,RI,m8o,g8o,h8o,U1,_te,p8o,_8o,SI,u8o,b8o,v8o,J1,ute,T8o,F8o,PI,C8o,M8o,E8o,Y1,y8o,bte,w8o,A8o,vte,L8o,B8o,Tte,x8o,k8o,vE,fke,vd,K1,Fte,TE,R8o,Cte,S8o,mke,rr,FE,P8o,Td,$8o,Mte,I8o,j8o,Ete,D8o,N8o,q8o,CE,O8o,yte,G8o,X8o,V8o,Yr,ME,z8o,wte,W8o,Q8o,Fd,H8o,Ate,U8o,J8o,Lte,Y8o,K8o,Z8o,Bte,eFo,oFo,EE,rFo,Ge,yE,tFo,xte,aFo,nFo,Za,sFo,kte,lFo,iFo,Rte,dFo,cFo,Ste,fFo,mFo,gFo,A,Z1,Pte,hFo,pFo,$I,_Fo,uFo,bFo,eb,$te,vFo,TFo,II,FFo,CFo,MFo,ob,Ite,EFo,yFo,jI,wFo,AFo,LFo,rb,jte,BFo,xFo,DI,kFo,RFo,SFo,tb,Dte,PFo,$Fo,NI,IFo,jFo,DFo,ab,Nte,NFo,qFo,qI,OFo,GFo,XFo,nb,qte,VFo,zFo,OI,WFo,QFo,HFo,sb,Ote,UFo,JFo,GI,YFo,KFo,ZFo,lb,Gte,eCo,oCo,XI,rCo,tCo,aCo,ib,Xte,nCo,sCo,VI,lCo,iCo,dCo,db,Vte,cCo,fCo,zI,mCo,gCo,hCo,cb,zte,pCo,_Co,WI,uCo,bCo,vCo,fb,Wte,TCo,FCo,QI,CCo,MCo,ECo,mb,Qte,yCo,wCo,HI,ACo,LCo,BCo,gb,Hte,xCo,kCo,UI,RCo,SCo,PCo,hb,Ute,$Co,ICo,JI,jCo,DCo,NCo,pb,Jte,qCo,OCo,YI,GCo,XCo,VCo,_b,Yte,zCo,WCo,KI,QCo,HCo,UCo,ub,Kte,JCo,YCo,ZI,KCo,ZCo,eMo,bb,Zte,oMo,rMo,ej,tMo,aMo,nMo,vb,eae,sMo,lMo,oj,iMo,dMo,cMo,Tb,oae,fMo,mMo,rj,gMo,hMo,pMo,Fb,rae,_Mo,uMo,tj,bMo,vMo,TMo,Cb,tae,FMo,CMo,aj,MMo,EMo,yMo,Mb,aae,wMo,AMo,nj,LMo,BMo,xMo,Eb,nae,kMo,RMo,sj,SMo,PMo,$Mo,yb,sae,IMo,jMo,lj,DMo,NMo,qMo,wb,lae,OMo,GMo,ij,XMo,VMo,zMo,Ab,iae,WMo,QMo,dj,HMo,UMo,JMo,Lb,dae,YMo,KMo,cj,ZMo,e4o,o4o,Bb,cae,r4o,t4o,fj,a4o,n4o,s4o,xb,fae,l4o,i4o,mj,d4o,c4o,f4o,kb,mae,m4o,g4o,gj,h4o,p4o,_4o,Rb,gae,u4o,b4o,hj,v4o,T4o,F4o,Sb,hae,C4o,M4o,pj,E4o,y4o,w4o,Pb,pae,A4o,L4o,_j,B4o,x4o,k4o,$b,_ae,R4o,S4o,uj,P4o,$4o,I4o,Ib,uae,j4o,D4o,bj,N4o,q4o,O4o,jb,bae,G4o,X4o,vj,V4o,z4o,W4o,Db,vae,Q4o,H4o,Tj,U4o,J4o,Y4o,Nb,Tae,K4o,Z4o,Fj,eEo,oEo,rEo,qb,Fae,tEo,aEo,Cj,nEo,sEo,lEo,Ob,Cae,iEo,dEo,Mj,cEo,fEo,mEo,Gb,Mae,gEo,hEo,Ej,pEo,_Eo,uEo,Xb,Eae,bEo,vEo,yj,TEo,FEo,CEo,Vb,yae,MEo,EEo,wj,yEo,wEo,AEo,zb,LEo,wae,BEo,xEo,Aae,kEo,REo,Lae,SEo,PEo,wE,gke,Cd,Wb,Bae,AE,$Eo,xae,IEo,hke,tr,LE,jEo,Md,DEo,kae,NEo,qEo,Rae,OEo,GEo,XEo,BE,VEo,Sae,zEo,WEo,QEo,Kr,xE,HEo,Pae,UEo,JEo,Ed,YEo,$ae,KEo,ZEo,Iae,e3o,o3o,r3o,jae,t3o,a3o,kE,n3o,Xe,RE,s3o,Dae,l3o,i3o,en,d3o,Nae,c3o,f3o,qae,m3o,g3o,Oae,h3o,p3o,_3o,O,Qb,Gae,u3o,b3o,Aj,v3o,T3o,F3o,Hb,Xae,C3o,M3o,Lj,E3o,y3o,w3o,Ub,Vae,A3o,L3o,Bj,B3o,x3o,k3o,Jb,zae,R3o,S3o,xj,P3o,$3o,I3o,Yb,Wae,j3o,D3o,kj,N3o,q3o,O3o,Kb,Qae,G3o,X3o,Rj,V3o,z3o,W3o,Zb,Hae,Q3o,H3o,Sj,U3o,J3o,Y3o,e5,Uae,K3o,Z3o,Pj,eyo,oyo,ryo,o5,Jae,tyo,ayo,$j,nyo,syo,lyo,r5,Yae,iyo,dyo,Ij,cyo,fyo,myo,t5,Kae,gyo,hyo,jj,pyo,_yo,uyo,a5,Zae,byo,vyo,Dj,Tyo,Fyo,Cyo,n5,ene,Myo,Eyo,Nj,yyo,wyo,Ayo,s5,one,Lyo,Byo,qj,xyo,kyo,Ryo,l5,rne,Syo,Pyo,Oj,$yo,Iyo,jyo,i5,tne,Dyo,Nyo,Gj,qyo,Oyo,Gyo,d5,ane,Xyo,Vyo,Xj,zyo,Wyo,Qyo,c5,nne,Hyo,Uyo,Vj,Jyo,Yyo,Kyo,f5,sne,Zyo,ewo,zj,owo,rwo,two,m5,lne,awo,nwo,Wj,swo,lwo,iwo,g5,ine,dwo,cwo,Qj,fwo,mwo,gwo,h5,dne,hwo,pwo,Hj,_wo,uwo,bwo,p5,cne,vwo,Two,Uj,Fwo,Cwo,Mwo,_5,fne,Ewo,ywo,Jj,wwo,Awo,Lwo,u5,mne,Bwo,xwo,Yj,kwo,Rwo,Swo,b5,gne,Pwo,$wo,Kj,Iwo,jwo,Dwo,v5,hne,Nwo,qwo,Zj,Owo,Gwo,Xwo,T5,pne,Vwo,zwo,eD,Wwo,Qwo,Hwo,F5,Uwo,_ne,Jwo,Ywo,une,Kwo,Zwo,bne,eAo,oAo,SE,pke,yd,C5,vne,PE,rAo,Tne,tAo,_ke,ar,$E,aAo,wd,nAo,Fne,sAo,lAo,Cne,iAo,dAo,cAo,IE,fAo,Mne,mAo,gAo,hAo,Zr,jE,pAo,Ene,_Ao,uAo,Ad,bAo,yne,vAo,TAo,wne,FAo,CAo,MAo,Ane,EAo,yAo,DE,wAo,Ve,NE,AAo,Lne,LAo,BAo,on,xAo,Bne,kAo,RAo,xne,SAo,PAo,kne,$Ao,IAo,jAo,ma,M5,Rne,DAo,NAo,oD,qAo,OAo,GAo,E5,Sne,XAo,VAo,rD,zAo,WAo,QAo,y5,Pne,HAo,UAo,tD,JAo,YAo,KAo,w5,$ne,ZAo,eLo,aD,oLo,rLo,tLo,A5,Ine,aLo,nLo,nD,sLo,lLo,iLo,L5,dLo,jne,cLo,fLo,Dne,mLo,gLo,Nne,hLo,pLo,qE,uke,Ld,B5,qne,OE,_Lo,One,uLo,bke,nr,GE,bLo,Bd,vLo,Gne,TLo,FLo,Xne,CLo,MLo,ELo,XE,yLo,Vne,wLo,ALo,LLo,et,VE,BLo,zne,xLo,kLo,xd,RLo,Wne,SLo,PLo,Qne,$Lo,ILo,jLo,Hne,DLo,NLo,zE,qLo,ze,WE,OLo,Une,GLo,XLo,rn,VLo,Jne,zLo,WLo,Yne,QLo,HLo,Kne,ULo,JLo,YLo,N,x5,Zne,KLo,ZLo,sD,e7o,o7o,r7o,k5,ese,t7o,a7o,lD,n7o,s7o,l7o,R5,ose,i7o,d7o,iD,c7o,f7o,m7o,S5,rse,g7o,h7o,dD,p7o,_7o,u7o,P5,tse,b7o,v7o,cD,T7o,F7o,C7o,$5,ase,M7o,E7o,fD,y7o,w7o,A7o,I5,nse,L7o,B7o,mD,x7o,k7o,R7o,j5,sse,S7o,P7o,gD,$7o,I7o,j7o,D5,lse,D7o,N7o,hD,q7o,O7o,G7o,N5,ise,X7o,V7o,pD,z7o,W7o,Q7o,q5,dse,H7o,U7o,_D,J7o,Y7o,K7o,O5,cse,Z7o,e9o,uD,o9o,r9o,t9o,G5,fse,a9o,n9o,bD,s9o,l9o,i9o,X5,mse,d9o,c9o,vD,f9o,m9o,g9o,V5,gse,h9o,p9o,TD,_9o,u9o,b9o,z5,hse,v9o,T9o,FD,F9o,C9o,M9o,W5,pse,E9o,y9o,CD,w9o,A9o,L9o,Q5,_se,B9o,x9o,MD,k9o,R9o,S9o,H5,use,P9o,$9o,ED,I9o,j9o,D9o,U5,bse,N9o,q9o,yD,O9o,G9o,X9o,J5,vse,V9o,z9o,wD,W9o,Q9o,H9o,Y5,Tse,U9o,J9o,AD,Y9o,K9o,Z9o,K5,Fse,eBo,oBo,LD,rBo,tBo,aBo,Z5,Cse,nBo,sBo,BD,lBo,iBo,dBo,e2,Mse,cBo,fBo,xD,mBo,gBo,hBo,o2,Ese,pBo,_Bo,kD,uBo,bBo,vBo,r2,yse,TBo,FBo,RD,CBo,MBo,EBo,t2,wse,yBo,wBo,SD,ABo,LBo,BBo,a2,Ase,xBo,kBo,PD,RBo,SBo,PBo,n2,Lse,$Bo,IBo,$D,jBo,DBo,NBo,s2,Bse,qBo,OBo,ID,GBo,XBo,VBo,l2,xse,zBo,WBo,jD,QBo,HBo,UBo,i2,kse,JBo,YBo,DD,KBo,ZBo,exo,d2,oxo,Rse,rxo,txo,Sse,axo,nxo,Pse,sxo,lxo,QE,vke,kd,c2,$se,HE,ixo,Ise,dxo,Tke,sr,UE,cxo,Rd,fxo,jse,mxo,gxo,Dse,hxo,pxo,_xo,JE,uxo,Nse,bxo,vxo,Txo,ot,YE,Fxo,qse,Cxo,Mxo,Sd,Exo,Ose,yxo,wxo,Gse,Axo,Lxo,Bxo,Xse,xxo,kxo,KE,Rxo,We,ZE,Sxo,Vse,Pxo,$xo,tn,Ixo,zse,jxo,Dxo,Wse,Nxo,qxo,Qse,Oxo,Gxo,Xxo,R,f2,Hse,Vxo,zxo,ND,Wxo,Qxo,Hxo,m2,Use,Uxo,Jxo,qD,Yxo,Kxo,Zxo,g2,Jse,eko,oko,OD,rko,tko,ako,h2,Yse,nko,sko,GD,lko,iko,dko,p2,Kse,cko,fko,XD,mko,gko,hko,_2,Zse,pko,_ko,VD,uko,bko,vko,u2,ele,Tko,Fko,zD,Cko,Mko,Eko,b2,ole,yko,wko,WD,Ako,Lko,Bko,v2,rle,xko,kko,QD,Rko,Sko,Pko,T2,tle,$ko,Iko,HD,jko,Dko,Nko,F2,ale,qko,Oko,UD,Gko,Xko,Vko,C2,nle,zko,Wko,JD,Qko,Hko,Uko,M2,sle,Jko,Yko,YD,Kko,Zko,eRo,E2,lle,oRo,rRo,KD,tRo,aRo,nRo,y2,ile,sRo,lRo,ZD,iRo,dRo,cRo,w2,dle,fRo,mRo,eN,gRo,hRo,pRo,A2,cle,_Ro,uRo,oN,bRo,vRo,TRo,L2,fle,FRo,CRo,rN,MRo,ERo,yRo,B2,mle,wRo,ARo,tN,LRo,BRo,xRo,x2,gle,kRo,RRo,aN,SRo,PRo,$Ro,k2,hle,IRo,jRo,nN,DRo,NRo,qRo,R2,ple,ORo,GRo,sN,XRo,VRo,zRo,S2,_le,WRo,QRo,lN,HRo,URo,JRo,P2,ule,YRo,KRo,iN,ZRo,eSo,oSo,$2,ble,rSo,tSo,dN,aSo,nSo,sSo,I2,vle,lSo,iSo,cN,dSo,cSo,fSo,j2,Tle,mSo,gSo,fN,hSo,pSo,_So,D2,Fle,uSo,bSo,mN,vSo,TSo,FSo,N2,Cle,CSo,MSo,gN,ESo,ySo,wSo,q2,Mle,ASo,LSo,hN,BSo,xSo,kSo,O2,Ele,RSo,SSo,pN,PSo,$So,ISo,G2,yle,jSo,DSo,_N,NSo,qSo,OSo,X2,wle,GSo,XSo,uN,VSo,zSo,WSo,V2,Ale,QSo,HSo,bN,USo,JSo,YSo,z2,Lle,KSo,ZSo,vN,ePo,oPo,rPo,W2,Ble,tPo,aPo,TN,nPo,sPo,lPo,Q2,xle,iPo,dPo,FN,cPo,fPo,mPo,H2,kle,gPo,hPo,CN,pPo,_Po,uPo,U2,Rle,bPo,vPo,MN,TPo,FPo,CPo,J2,MPo,Sle,EPo,yPo,Ple,wPo,APo,$le,LPo,BPo,e3,Fke,Pd,Y2,Ile,o3,xPo,jle,kPo,Cke,lr,r3,RPo,$d,SPo,Dle,PPo,$Po,Nle,IPo,jPo,DPo,t3,NPo,qle,qPo,OPo,GPo,rt,a3,XPo,Ole,VPo,zPo,Id,WPo,Gle,QPo,HPo,Xle,UPo,JPo,YPo,Vle,KPo,ZPo,n3,e$o,Qe,s3,o$o,zle,r$o,t$o,an,a$o,Wle,n$o,s$o,Qle,l$o,i$o,Hle,d$o,c$o,f$o,Ule,K2,Jle,m$o,g$o,EN,h$o,p$o,_$o,Z2,u$o,Yle,b$o,v$o,Kle,T$o,F$o,Zle,C$o,M$o,l3,Mke,jd,ev,eie,i3,E$o,oie,y$o,Eke,ir,d3,w$o,Dd,A$o,rie,L$o,B$o,tie,x$o,k$o,R$o,c3,S$o,aie,P$o,$$o,I$o,tt,f3,j$o,nie,D$o,N$o,Nd,q$o,sie,O$o,G$o,lie,X$o,V$o,z$o,iie,W$o,Q$o,m3,H$o,He,g3,U$o,die,J$o,Y$o,nn,K$o,cie,Z$o,eIo,fie,oIo,rIo,mie,tIo,aIo,nIo,Fe,ov,gie,sIo,lIo,yN,iIo,dIo,cIo,rv,hie,fIo,mIo,wN,gIo,hIo,pIo,zs,pie,_Io,uIo,AN,bIo,vIo,LN,TIo,FIo,CIo,tv,_ie,MIo,EIo,BN,yIo,wIo,AIo,pa,uie,LIo,BIo,xN,xIo,kIo,kN,RIo,SIo,RN,PIo,$Io,IIo,av,bie,jIo,DIo,SN,NIo,qIo,OIo,nv,vie,GIo,XIo,PN,VIo,zIo,WIo,sv,Tie,QIo,HIo,$N,UIo,JIo,YIo,lv,Fie,KIo,ZIo,IN,ejo,ojo,rjo,iv,tjo,Cie,ajo,njo,Mie,sjo,ljo,Eie,ijo,djo,h3,yke,qd,dv,yie,p3,cjo,wie,fjo,wke,dr,_3,mjo,Od,gjo,Aie,hjo,pjo,Lie,_jo,ujo,bjo,u3,vjo,Bie,Tjo,Fjo,Cjo,at,b3,Mjo,xie,Ejo,yjo,Gd,wjo,kie,Ajo,Ljo,Rie,Bjo,xjo,kjo,Sie,Rjo,Sjo,v3,Pjo,Ue,T3,$jo,Pie,Ijo,jjo,sn,Djo,$ie,Njo,qjo,Iie,Ojo,Gjo,jie,Xjo,Vjo,zjo,Die,cv,Nie,Wjo,Qjo,jN,Hjo,Ujo,Jjo,fv,Yjo,qie,Kjo,Zjo,Oie,eDo,oDo,Gie,rDo,tDo,F3,Ake,Xd,mv,Xie,C3,aDo,Vie,nDo,Lke,cr,M3,sDo,Vd,lDo,zie,iDo,dDo,Wie,cDo,fDo,mDo,E3,gDo,Qie,hDo,pDo,_Do,nt,y3,uDo,Hie,bDo,vDo,zd,TDo,Uie,FDo,CDo,Jie,MDo,EDo,yDo,Yie,wDo,ADo,w3,LDo,Je,A3,BDo,Kie,xDo,kDo,ln,RDo,Zie,SDo,PDo,ede,$Do,IDo,ode,jDo,DDo,NDo,xe,gv,rde,qDo,ODo,DN,GDo,XDo,VDo,hv,tde,zDo,WDo,NN,QDo,HDo,UDo,pv,ade,JDo,YDo,qN,KDo,ZDo,eNo,_v,nde,oNo,rNo,ON,tNo,aNo,nNo,uv,sde,sNo,lNo,GN,iNo,dNo,cNo,bv,lde,fNo,mNo,XN,gNo,hNo,pNo,vv,ide,_No,uNo,VN,bNo,vNo,TNo,Tv,dde,FNo,CNo,zN,MNo,ENo,yNo,Fv,wNo,cde,ANo,LNo,fde,BNo,xNo,mde,kNo,RNo,L3,Bke,Wd,Cv,gde,B3,SNo,hde,PNo,xke,fr,x3,$No,Qd,INo,pde,jNo,DNo,_de,NNo,qNo,ONo,k3,GNo,ude,XNo,VNo,zNo,st,R3,WNo,bde,QNo,HNo,Hd,UNo,vde,JNo,YNo,Tde,KNo,ZNo,eqo,Fde,oqo,rqo,S3,tqo,Ye,P3,aqo,Cde,nqo,sqo,dn,lqo,Mde,iqo,dqo,Ede,cqo,fqo,yde,mqo,gqo,hqo,cn,Mv,wde,pqo,_qo,WN,uqo,bqo,vqo,Ev,Ade,Tqo,Fqo,QN,Cqo,Mqo,Eqo,yv,Lde,yqo,wqo,HN,Aqo,Lqo,Bqo,wv,Bde,xqo,kqo,UN,Rqo,Sqo,Pqo,Av,$qo,xde,Iqo,jqo,kde,Dqo,Nqo,Rde,qqo,Oqo,$3,kke,Ud,Lv,Sde,I3,Gqo,Pde,Xqo,Rke,mr,j3,Vqo,Jd,zqo,$de,Wqo,Qqo,Ide,Hqo,Uqo,Jqo,D3,Yqo,jde,Kqo,Zqo,eOo,lt,N3,oOo,Dde,rOo,tOo,Yd,aOo,Nde,nOo,sOo,qde,lOo,iOo,dOo,Ode,cOo,fOo,q3,mOo,Ke,O3,gOo,Gde,hOo,pOo,fn,_Oo,Xde,uOo,bOo,Vde,vOo,TOo,zde,FOo,COo,MOo,ke,Bv,Wde,EOo,yOo,JN,wOo,AOo,LOo,xv,Qde,BOo,xOo,YN,kOo,ROo,SOo,kv,Hde,POo,$Oo,KN,IOo,jOo,DOo,Rv,Ude,NOo,qOo,ZN,OOo,GOo,XOo,Sv,Jde,VOo,zOo,eq,WOo,QOo,HOo,Pv,Yde,UOo,JOo,oq,YOo,KOo,ZOo,$v,Kde,eGo,oGo,rq,rGo,tGo,aGo,Iv,Zde,nGo,sGo,tq,lGo,iGo,dGo,jv,cGo,ece,fGo,mGo,oce,gGo,hGo,rce,pGo,_Go,G3,Ske,Kd,Dv,tce,X3,uGo,ace,bGo,Pke,gr,V3,vGo,Zd,TGo,nce,FGo,CGo,sce,MGo,EGo,yGo,z3,wGo,lce,AGo,LGo,BGo,it,W3,xGo,ice,kGo,RGo,ec,SGo,dce,PGo,$Go,cce,IGo,jGo,DGo,fce,NGo,qGo,Q3,OGo,Ze,H3,GGo,mce,XGo,VGo,mn,zGo,gce,WGo,QGo,hce,HGo,UGo,pce,JGo,YGo,KGo,U3,Nv,_ce,ZGo,eXo,aq,oXo,rXo,tXo,qv,uce,aXo,nXo,nq,sXo,lXo,iXo,Ov,dXo,bce,cXo,fXo,vce,mXo,gXo,Tce,hXo,pXo,J3,$ke,oc,Gv,Fce,Y3,_Xo,Cce,uXo,Ike,hr,K3,bXo,rc,vXo,Mce,TXo,FXo,Ece,CXo,MXo,EXo,Z3,yXo,yce,wXo,AXo,LXo,dt,ey,BXo,wce,xXo,kXo,tc,RXo,Ace,SXo,PXo,Lce,$Xo,IXo,jXo,Bce,DXo,NXo,oy,qXo,eo,ry,OXo,xce,GXo,XXo,gn,VXo,kce,zXo,WXo,Rce,QXo,HXo,Sce,UXo,JXo,YXo,hn,Xv,Pce,KXo,ZXo,sq,eVo,oVo,rVo,Vv,$ce,tVo,aVo,lq,nVo,sVo,lVo,zv,Ice,iVo,dVo,iq,cVo,fVo,mVo,Wv,jce,gVo,hVo,dq,pVo,_Vo,uVo,Qv,bVo,Dce,vVo,TVo,Nce,FVo,CVo,qce,MVo,EVo,ty,jke,ac,Hv,Oce,ay,yVo,Gce,wVo,Dke,pr,ny,AVo,nc,LVo,Xce,BVo,xVo,Vce,kVo,RVo,SVo,sy,PVo,zce,$Vo,IVo,jVo,ct,ly,DVo,Wce,NVo,qVo,sc,OVo,Qce,GVo,XVo,Hce,VVo,zVo,WVo,Uce,QVo,HVo,iy,UVo,oo,dy,JVo,Jce,YVo,KVo,pn,ZVo,Yce,ezo,ozo,Kce,rzo,tzo,Zce,azo,nzo,szo,lc,Uv,efe,lzo,izo,cq,dzo,czo,fzo,Jv,ofe,mzo,gzo,fq,hzo,pzo,_zo,Yv,rfe,uzo,bzo,mq,vzo,Tzo,Fzo,Kv,Czo,tfe,Mzo,Ezo,afe,yzo,wzo,nfe,Azo,Lzo,cy,Nke,ic,Zv,sfe,fy,Bzo,lfe,xzo,qke,_r,my,kzo,dc,Rzo,ife,Szo,Pzo,dfe,$zo,Izo,jzo,gy,Dzo,cfe,Nzo,qzo,Ozo,ft,hy,Gzo,ffe,Xzo,Vzo,cc,zzo,mfe,Wzo,Qzo,gfe,Hzo,Uzo,Jzo,hfe,Yzo,Kzo,py,Zzo,ro,_y,eWo,pfe,oWo,rWo,_n,tWo,_fe,aWo,nWo,ufe,sWo,lWo,bfe,iWo,dWo,cWo,vfe,e6,Tfe,fWo,mWo,gq,gWo,hWo,pWo,o6,_Wo,Ffe,uWo,bWo,Cfe,vWo,TWo,Mfe,FWo,CWo,uy,Oke,fc,r6,Efe,by,MWo,yfe,EWo,Gke,ur,vy,yWo,mc,wWo,wfe,AWo,LWo,Afe,BWo,xWo,kWo,Ty,RWo,Lfe,SWo,PWo,$Wo,mt,Fy,IWo,Bfe,jWo,DWo,gc,NWo,xfe,qWo,OWo,kfe,GWo,XWo,VWo,Rfe,zWo,WWo,Cy,QWo,to,My,HWo,Sfe,UWo,JWo,un,YWo,Pfe,KWo,ZWo,$fe,eQo,oQo,Ife,rQo,tQo,aQo,jfe,t6,Dfe,nQo,sQo,hq,lQo,iQo,dQo,a6,cQo,Nfe,fQo,mQo,qfe,gQo,hQo,Ofe,pQo,_Qo,Ey,Xke,hc,n6,Gfe,yy,uQo,Xfe,bQo,Vke,br,wy,vQo,pc,TQo,Vfe,FQo,CQo,zfe,MQo,EQo,yQo,Ay,wQo,Wfe,AQo,LQo,BQo,gt,Ly,xQo,Qfe,kQo,RQo,_c,SQo,Hfe,PQo,$Qo,Ufe,IQo,jQo,DQo,Jfe,NQo,qQo,By,OQo,ao,xy,GQo,Yfe,XQo,VQo,bn,zQo,Kfe,WQo,QQo,Zfe,HQo,UQo,eme,JQo,YQo,KQo,ky,s6,ome,ZQo,eHo,pq,oHo,rHo,tHo,l6,rme,aHo,nHo,_q,sHo,lHo,iHo,i6,dHo,tme,cHo,fHo,ame,mHo,gHo,nme,hHo,pHo,Ry,zke,uc,d6,sme,Sy,_Ho,lme,uHo,Wke,vr,Py,bHo,bc,vHo,ime,THo,FHo,dme,CHo,MHo,EHo,$y,yHo,cme,wHo,AHo,LHo,ht,Iy,BHo,fme,xHo,kHo,vc,RHo,mme,SHo,PHo,gme,$Ho,IHo,jHo,hme,DHo,NHo,jy,qHo,no,Dy,OHo,pme,GHo,XHo,vn,VHo,_me,zHo,WHo,ume,QHo,HHo,bme,UHo,JHo,YHo,vme,c6,Tme,KHo,ZHo,uq,eUo,oUo,rUo,f6,tUo,Fme,aUo,nUo,Cme,sUo,lUo,Mme,iUo,dUo,Ny,Qke,Tc,m6,Eme,qy,cUo,yme,fUo,Hke,Tr,Oy,mUo,Fc,gUo,wme,hUo,pUo,Ame,_Uo,uUo,bUo,Gy,vUo,Lme,TUo,FUo,CUo,pt,Xy,MUo,Bme,EUo,yUo,Cc,wUo,xme,AUo,LUo,kme,BUo,xUo,kUo,Rme,RUo,SUo,Vy,PUo,ho,zy,$Uo,Sme,IUo,jUo,Tn,DUo,Pme,NUo,qUo,$me,OUo,GUo,Ime,XUo,VUo,zUo,B,g6,jme,WUo,QUo,bq,HUo,UUo,JUo,h6,Dme,YUo,KUo,vq,ZUo,eJo,oJo,p6,Nme,rJo,tJo,Tq,aJo,nJo,sJo,_6,qme,lJo,iJo,Fq,dJo,cJo,fJo,u6,Ome,mJo,gJo,Cq,hJo,pJo,_Jo,b6,Gme,uJo,bJo,Mq,vJo,TJo,FJo,v6,Xme,CJo,MJo,Eq,EJo,yJo,wJo,T6,Vme,AJo,LJo,yq,BJo,xJo,kJo,F6,zme,RJo,SJo,wq,PJo,$Jo,IJo,C6,Wme,jJo,DJo,Aq,NJo,qJo,OJo,M6,Qme,GJo,XJo,Lq,VJo,zJo,WJo,E6,Hme,QJo,HJo,Bq,UJo,JJo,YJo,y6,Ume,KJo,ZJo,xq,eYo,oYo,rYo,w6,Jme,tYo,aYo,kq,nYo,sYo,lYo,A6,Yme,iYo,dYo,Rq,cYo,fYo,mYo,L6,Kme,gYo,hYo,Sq,pYo,_Yo,uYo,Ws,Zme,bYo,vYo,Pq,TYo,FYo,$q,CYo,MYo,EYo,B6,ege,yYo,wYo,Iq,AYo,LYo,BYo,x6,oge,xYo,kYo,jq,RYo,SYo,PYo,k6,rge,$Yo,IYo,Dq,jYo,DYo,NYo,R6,tge,qYo,OYo,Nq,GYo,XYo,VYo,S6,age,zYo,WYo,qq,QYo,HYo,UYo,P6,nge,JYo,YYo,Oq,KYo,ZYo,eKo,$6,sge,oKo,rKo,Gq,tKo,aKo,nKo,I6,lge,sKo,lKo,Xq,iKo,dKo,cKo,j6,ige,fKo,mKo,Vq,gKo,hKo,pKo,D6,dge,_Ko,uKo,zq,bKo,vKo,TKo,N6,cge,FKo,CKo,Wq,MKo,EKo,yKo,q6,fge,wKo,AKo,Qq,LKo,BKo,xKo,O6,mge,kKo,RKo,Hq,SKo,PKo,$Ko,G6,gge,IKo,jKo,Uq,DKo,NKo,qKo,X6,hge,OKo,GKo,Jq,XKo,VKo,zKo,V6,pge,WKo,QKo,Yq,HKo,UKo,JKo,z6,_ge,YKo,KKo,Kq,ZKo,eZo,oZo,W6,uge,rZo,tZo,Zq,aZo,nZo,sZo,Q6,bge,lZo,iZo,eO,dZo,cZo,fZo,H6,vge,mZo,gZo,oO,hZo,pZo,_Zo,U6,Tge,uZo,bZo,rO,vZo,TZo,FZo,J6,Fge,CZo,MZo,tO,EZo,yZo,wZo,Y6,Cge,AZo,LZo,aO,BZo,xZo,kZo,K6,Mge,RZo,SZo,nO,PZo,$Zo,IZo,Z6,Ege,jZo,DZo,sO,NZo,qZo,OZo,yge,GZo,XZo,Wy,Uke,Mc,e0,wge,Qy,VZo,Age,zZo,Jke,Fr,Hy,WZo,Ec,QZo,Lge,HZo,UZo,Bge,JZo,YZo,KZo,Uy,ZZo,xge,eer,oer,rer,_t,Jy,ter,kge,aer,ner,yc,ser,Rge,ler,ier,Sge,der,cer,fer,Pge,mer,ger,Yy,her,po,Ky,per,$ge,_er,uer,Fn,ber,Ige,ver,Ter,jge,Fer,Cer,Dge,Mer,Eer,yer,H,o0,Nge,wer,Aer,lO,Ler,Ber,xer,r0,qge,ker,Rer,iO,Ser,Per,$er,t0,Oge,Ier,jer,dO,Der,Ner,qer,a0,Gge,Oer,Ger,cO,Xer,Ver,zer,n0,Xge,Wer,Qer,fO,Her,Uer,Jer,s0,Vge,Yer,Ker,mO,Zer,eor,oor,l0,zge,ror,tor,gO,aor,nor,sor,i0,Wge,lor,ior,hO,dor,cor,mor,d0,Qge,gor,hor,pO,por,_or,uor,c0,Hge,bor,vor,_O,Tor,For,Cor,f0,Uge,Mor,Eor,uO,yor,wor,Aor,m0,Jge,Lor,Bor,bO,xor,kor,Ror,g0,Yge,Sor,Por,vO,$or,Ior,jor,h0,Kge,Dor,Nor,TO,qor,Oor,Gor,p0,Zge,Xor,Vor,FO,zor,Wor,Qor,_0,ehe,Hor,Uor,CO,Jor,Yor,Kor,u0,ohe,Zor,err,MO,orr,rrr,trr,b0,rhe,arr,nrr,EO,srr,lrr,irr,v0,the,drr,crr,yO,frr,mrr,grr,T0,ahe,hrr,prr,wO,_rr,urr,brr,F0,nhe,vrr,Trr,AO,Frr,Crr,Mrr,C0,she,Err,yrr,LO,wrr,Arr,Lrr,lhe,Brr,xrr,Zy,Yke,wc,M0,ihe,ew,krr,dhe,Rrr,Kke,Cr,ow,Srr,Ac,Prr,che,$rr,Irr,fhe,jrr,Drr,Nrr,rw,qrr,mhe,Orr,Grr,Xrr,ut,tw,Vrr,ghe,zrr,Wrr,Lc,Qrr,hhe,Hrr,Urr,phe,Jrr,Yrr,Krr,_he,Zrr,etr,aw,otr,_o,nw,rtr,uhe,ttr,atr,Cn,ntr,bhe,str,ltr,vhe,itr,dtr,The,ctr,ftr,mtr,pe,E0,Fhe,gtr,htr,BO,ptr,_tr,utr,y0,Che,btr,vtr,xO,Ttr,Ftr,Ctr,w0,Mhe,Mtr,Etr,kO,ytr,wtr,Atr,A0,Ehe,Ltr,Btr,RO,xtr,ktr,Rtr,L0,yhe,Str,Ptr,SO,$tr,Itr,jtr,B0,whe,Dtr,Ntr,PO,qtr,Otr,Gtr,x0,Ahe,Xtr,Vtr,$O,ztr,Wtr,Qtr,k0,Lhe,Htr,Utr,IO,Jtr,Ytr,Ktr,R0,Bhe,Ztr,ear,jO,oar,rar,tar,S0,xhe,aar,nar,DO,sar,lar,iar,khe,dar,car,sw,Zke,Bc,P0,Rhe,lw,far,She,mar,eRe,Mr,iw,gar,xc,har,Phe,par,_ar,$he,uar,bar,Tar,dw,Far,Ihe,Car,Mar,Ear,bt,cw,yar,jhe,war,Aar,kc,Lar,Dhe,Bar,xar,Nhe,kar,Rar,Sar,qhe,Par,$ar,fw,Iar,uo,mw,jar,Ohe,Dar,Nar,Mn,qar,Ghe,Oar,Gar,Xhe,Xar,Var,Vhe,zar,War,Qar,gw,$0,zhe,Har,Uar,NO,Jar,Yar,Kar,I0,Whe,Zar,enr,qO,onr,rnr,tnr,Qhe,anr,nnr,hw,oRe,Rc,j0,Hhe,pw,snr,Uhe,lnr,rRe,Er,_w,inr,Sc,dnr,Jhe,cnr,fnr,Yhe,mnr,gnr,hnr,uw,pnr,Khe,_nr,unr,bnr,vt,bw,vnr,Zhe,Tnr,Fnr,Pc,Cnr,epe,Mnr,Enr,ope,ynr,wnr,Anr,rpe,Lnr,Bnr,vw,xnr,bo,Tw,knr,tpe,Rnr,Snr,En,Pnr,ape,$nr,Inr,npe,jnr,Dnr,spe,Nnr,qnr,Onr,Y,D0,lpe,Gnr,Xnr,OO,Vnr,znr,Wnr,N0,ipe,Qnr,Hnr,GO,Unr,Jnr,Ynr,q0,dpe,Knr,Znr,XO,esr,osr,rsr,O0,cpe,tsr,asr,VO,nsr,ssr,lsr,G0,fpe,isr,dsr,zO,csr,fsr,msr,X0,mpe,gsr,hsr,WO,psr,_sr,usr,V0,gpe,bsr,vsr,QO,Tsr,Fsr,Csr,z0,hpe,Msr,Esr,HO,ysr,wsr,Asr,W0,ppe,Lsr,Bsr,UO,xsr,ksr,Rsr,Q0,_pe,Ssr,Psr,JO,$sr,Isr,jsr,H0,upe,Dsr,Nsr,YO,qsr,Osr,Gsr,U0,bpe,Xsr,Vsr,KO,zsr,Wsr,Qsr,J0,vpe,Hsr,Usr,ZO,Jsr,Ysr,Ksr,Y0,Tpe,Zsr,elr,eG,olr,rlr,tlr,K0,Fpe,alr,nlr,oG,slr,llr,ilr,Z0,Cpe,dlr,clr,rG,flr,mlr,glr,eT,Mpe,hlr,plr,tG,_lr,ulr,blr,oT,Epe,vlr,Tlr,aG,Flr,Clr,Mlr,rT,ype,Elr,ylr,nG,wlr,Alr,Llr,tT,wpe,Blr,xlr,sG,klr,Rlr,Slr,Ape,Plr,$lr,Fw,tRe,$c,aT,Lpe,Cw,Ilr,Bpe,jlr,aRe,yr,Mw,Dlr,Ic,Nlr,xpe,qlr,Olr,kpe,Glr,Xlr,Vlr,Ew,zlr,Rpe,Wlr,Qlr,Hlr,Tt,yw,Ulr,Spe,Jlr,Ylr,jc,Klr,Ppe,Zlr,eir,$pe,oir,rir,tir,Ipe,air,nir,ww,sir,vo,Aw,lir,jpe,iir,dir,yn,cir,Dpe,fir,mir,Npe,gir,hir,qpe,pir,_ir,uir,_e,nT,Ope,bir,vir,lG,Tir,Fir,Cir,sT,Gpe,Mir,Eir,iG,yir,wir,Air,lT,Xpe,Lir,Bir,dG,xir,kir,Rir,iT,Vpe,Sir,Pir,cG,$ir,Iir,jir,dT,zpe,Dir,Nir,fG,qir,Oir,Gir,cT,Wpe,Xir,Vir,mG,zir,Wir,Qir,fT,Qpe,Hir,Uir,gG,Jir,Yir,Kir,mT,Hpe,Zir,edr,hG,odr,rdr,tdr,gT,Upe,adr,ndr,pG,sdr,ldr,idr,hT,Jpe,ddr,cdr,_G,fdr,mdr,gdr,Ype,hdr,pdr,Lw,nRe,Dc,pT,Kpe,Bw,_dr,Zpe,udr,sRe,wr,xw,bdr,Nc,vdr,e_e,Tdr,Fdr,o_e,Cdr,Mdr,Edr,kw,ydr,r_e,wdr,Adr,Ldr,Ft,Rw,Bdr,t_e,xdr,kdr,qc,Rdr,a_e,Sdr,Pdr,n_e,$dr,Idr,jdr,s_e,Ddr,Ndr,Sw,qdr,To,Pw,Odr,l_e,Gdr,Xdr,wn,Vdr,i_e,zdr,Wdr,d_e,Qdr,Hdr,c_e,Udr,Jdr,Ydr,V,_T,f_e,Kdr,Zdr,uG,ecr,ocr,rcr,uT,m_e,tcr,acr,bG,ncr,scr,lcr,bT,g_e,icr,dcr,vG,ccr,fcr,mcr,vT,h_e,gcr,hcr,TG,pcr,_cr,ucr,TT,p_e,bcr,vcr,FG,Tcr,Fcr,Ccr,FT,__e,Mcr,Ecr,CG,ycr,wcr,Acr,CT,u_e,Lcr,Bcr,MG,xcr,kcr,Rcr,MT,b_e,Scr,Pcr,EG,$cr,Icr,jcr,ET,v_e,Dcr,Ncr,yG,qcr,Ocr,Gcr,yT,T_e,Xcr,Vcr,wG,zcr,Wcr,Qcr,wT,F_e,Hcr,Ucr,AG,Jcr,Ycr,Kcr,AT,C_e,Zcr,efr,LG,ofr,rfr,tfr,LT,M_e,afr,nfr,BG,sfr,lfr,ifr,BT,E_e,dfr,cfr,xG,ffr,mfr,gfr,xT,y_e,hfr,pfr,kG,_fr,ufr,bfr,kT,w_e,vfr,Tfr,RG,Ffr,Cfr,Mfr,RT,A_e,Efr,yfr,SG,wfr,Afr,Lfr,ST,L_e,Bfr,xfr,PG,kfr,Rfr,Sfr,PT,B_e,Pfr,$fr,$G,Ifr,jfr,Dfr,$T,x_e,Nfr,qfr,IG,Ofr,Gfr,Xfr,IT,k_e,Vfr,zfr,jG,Wfr,Qfr,Hfr,jT,R_e,Ufr,Jfr,DG,Yfr,Kfr,Zfr,DT,S_e,emr,omr,NG,rmr,tmr,amr,NT,P_e,nmr,smr,qG,lmr,imr,dmr,qT,$_e,cmr,fmr,OG,mmr,gmr,hmr,I_e,pmr,_mr,$w,lRe,Oc,OT,j_e,Iw,umr,D_e,bmr,iRe,Ar,jw,vmr,Gc,Tmr,N_e,Fmr,Cmr,q_e,Mmr,Emr,ymr,Dw,wmr,O_e,Amr,Lmr,Bmr,Ct,Nw,xmr,G_e,kmr,Rmr,Xc,Smr,X_e,Pmr,$mr,V_e,Imr,jmr,Dmr,z_e,Nmr,qmr,qw,Omr,Fo,Ow,Gmr,W_e,Xmr,Vmr,An,zmr,Q_e,Wmr,Qmr,H_e,Hmr,Umr,U_e,Jmr,Ymr,Kmr,te,GT,J_e,Zmr,egr,GG,ogr,rgr,tgr,XT,Y_e,agr,ngr,XG,sgr,lgr,igr,VT,K_e,dgr,cgr,VG,fgr,mgr,ggr,zT,Z_e,hgr,pgr,zG,_gr,ugr,bgr,WT,eue,vgr,Tgr,WG,Fgr,Cgr,Mgr,QT,oue,Egr,ygr,QG,wgr,Agr,Lgr,HT,rue,Bgr,xgr,HG,kgr,Rgr,Sgr,UT,tue,Pgr,$gr,UG,Igr,jgr,Dgr,JT,aue,Ngr,qgr,JG,Ogr,Ggr,Xgr,YT,nue,Vgr,zgr,YG,Wgr,Qgr,Hgr,KT,sue,Ugr,Jgr,KG,Ygr,Kgr,Zgr,ZT,lue,ehr,ohr,ZG,rhr,thr,ahr,e8,iue,nhr,shr,eX,lhr,ihr,dhr,o8,due,chr,fhr,oX,mhr,ghr,hhr,r8,cue,phr,_hr,rX,uhr,bhr,vhr,t8,fue,Thr,Fhr,tX,Chr,Mhr,Ehr,a8,mue,yhr,whr,aX,Ahr,Lhr,Bhr,gue,xhr,khr,Gw,dRe,Vc,n8,hue,Xw,Rhr,pue,Shr,cRe,Lr,Vw,Phr,zc,$hr,_ue,Ihr,jhr,uue,Dhr,Nhr,qhr,zw,Ohr,bue,Ghr,Xhr,Vhr,Mt,Ww,zhr,vue,Whr,Qhr,Wc,Hhr,Tue,Uhr,Jhr,Fue,Yhr,Khr,Zhr,Cue,epr,opr,Qw,rpr,Co,Hw,tpr,Mue,apr,npr,Ln,spr,Eue,lpr,ipr,yue,dpr,cpr,wue,fpr,mpr,gpr,Aue,s8,Lue,hpr,ppr,nX,_pr,upr,bpr,Bue,vpr,Tpr,Uw,fRe,Qc,l8,xue,Jw,Fpr,kue,Cpr,mRe,Br,Yw,Mpr,Hc,Epr,Rue,ypr,wpr,Sue,Apr,Lpr,Bpr,Kw,xpr,Pue,kpr,Rpr,Spr,Et,Zw,Ppr,$ue,$pr,Ipr,Uc,jpr,Iue,Dpr,Npr,jue,qpr,Opr,Gpr,Due,Xpr,Vpr,eA,zpr,Mo,oA,Wpr,Nue,Qpr,Hpr,Bn,Upr,que,Jpr,Ypr,Oue,Kpr,Zpr,Gue,e_r,o_r,r_r,K,i8,Xue,t_r,a_r,sX,n_r,s_r,l_r,d8,Vue,i_r,d_r,lX,c_r,f_r,m_r,c8,zue,g_r,h_r,iX,p_r,__r,u_r,f8,Wue,b_r,v_r,dX,T_r,F_r,C_r,m8,Que,M_r,E_r,cX,y_r,w_r,A_r,g8,Hue,L_r,B_r,fX,x_r,k_r,R_r,h8,Uue,S_r,P_r,mX,$_r,I_r,j_r,p8,Jue,D_r,N_r,gX,q_r,O_r,G_r,_8,Yue,X_r,V_r,hX,z_r,W_r,Q_r,u8,Kue,H_r,U_r,pX,J_r,Y_r,K_r,b8,Zue,Z_r,eur,_X,our,rur,tur,v8,e1e,aur,nur,uX,sur,lur,iur,T8,o1e,dur,cur,bX,fur,mur,gur,F8,r1e,hur,pur,vX,_ur,uur,bur,C8,t1e,vur,Tur,TX,Fur,Cur,Mur,M8,a1e,Eur,yur,FX,wur,Aur,Lur,E8,n1e,Bur,xur,CX,kur,Rur,Sur,y8,s1e,Pur,$ur,MX,Iur,jur,Dur,w8,l1e,Nur,qur,EX,Our,Gur,Xur,A8,i1e,Vur,zur,yX,Wur,Qur,Hur,d1e,Uur,Jur,rA,gRe,Jc,L8,c1e,tA,Yur,f1e,Kur,hRe,xr,aA,Zur,Yc,e1r,m1e,o1r,r1r,g1e,t1r,a1r,n1r,nA,s1r,h1e,l1r,i1r,d1r,yt,sA,c1r,p1e,f1r,m1r,Kc,g1r,_1e,h1r,p1r,u1e,_1r,u1r,b1r,b1e,v1r,T1r,lA,F1r,Eo,iA,C1r,v1e,M1r,E1r,xn,y1r,T1e,w1r,A1r,F1e,L1r,B1r,C1e,x1r,k1r,R1r,Z,B8,M1e,S1r,P1r,wX,$1r,I1r,j1r,x8,E1e,D1r,N1r,AX,q1r,O1r,G1r,k8,y1e,X1r,V1r,LX,z1r,W1r,Q1r,R8,w1e,H1r,U1r,BX,J1r,Y1r,K1r,S8,A1e,Z1r,ebr,xX,obr,rbr,tbr,P8,L1e,abr,nbr,kX,sbr,lbr,ibr,$8,B1e,dbr,cbr,RX,fbr,mbr,gbr,I8,x1e,hbr,pbr,SX,_br,ubr,bbr,j8,k1e,vbr,Tbr,PX,Fbr,Cbr,Mbr,D8,R1e,Ebr,ybr,$X,wbr,Abr,Lbr,N8,S1e,Bbr,xbr,IX,kbr,Rbr,Sbr,q8,P1e,Pbr,$br,jX,Ibr,jbr,Dbr,O8,$1e,Nbr,qbr,DX,Obr,Gbr,Xbr,G8,I1e,Vbr,zbr,NX,Wbr,Qbr,Hbr,X8,j1e,Ubr,Jbr,qX,Ybr,Kbr,Zbr,V8,D1e,e5r,o5r,OX,r5r,t5r,a5r,z8,N1e,n5r,s5r,GX,l5r,i5r,d5r,W8,q1e,c5r,f5r,XX,m5r,g5r,h5r,Q8,O1e,p5r,_5r,VX,u5r,b5r,v5r,G1e,T5r,F5r,dA,pRe,Zc,H8,X1e,cA,C5r,V1e,M5r,_Re,kr,fA,E5r,ef,y5r,z1e,w5r,A5r,W1e,L5r,B5r,x5r,mA,k5r,Q1e,R5r,S5r,P5r,wt,gA,$5r,H1e,I5r,j5r,of,D5r,U1e,N5r,q5r,J1e,O5r,G5r,X5r,Y1e,V5r,z5r,hA,W5r,yo,pA,Q5r,K1e,H5r,U5r,kn,J5r,Z1e,Y5r,K5r,ebe,Z5r,e2r,obe,o2r,r2r,t2r,rbe,U8,tbe,a2r,n2r,zX,s2r,l2r,i2r,abe,d2r,c2r,_A,uRe,rf,J8,nbe,uA,f2r,sbe,m2r,bRe,Rr,bA,g2r,tf,h2r,lbe,p2r,_2r,ibe,u2r,b2r,v2r,vA,T2r,dbe,F2r,C2r,M2r,At,TA,E2r,cbe,y2r,w2r,af,A2r,fbe,L2r,B2r,mbe,x2r,k2r,R2r,gbe,S2r,P2r,FA,$2r,wo,CA,I2r,hbe,j2r,D2r,Rn,N2r,pbe,q2r,O2r,_be,G2r,X2r,ube,V2r,z2r,W2r,bbe,Y8,vbe,Q2r,H2r,WX,U2r,J2r,Y2r,Tbe,K2r,Z2r,MA,vRe,nf,K8,Fbe,EA,evr,Cbe,ovr,TRe,Sr,yA,rvr,sf,tvr,Mbe,avr,nvr,Ebe,svr,lvr,ivr,wA,dvr,ybe,cvr,fvr,mvr,Lt,AA,gvr,wbe,hvr,pvr,lf,_vr,Abe,uvr,bvr,Lbe,vvr,Tvr,Fvr,Bbe,Cvr,Mvr,LA,Evr,Ao,BA,yvr,xbe,wvr,Avr,Sn,Lvr,kbe,Bvr,xvr,Rbe,kvr,Rvr,Sbe,Svr,Pvr,$vr,z,Z8,Pbe,Ivr,jvr,QX,Dvr,Nvr,qvr,eF,$be,Ovr,Gvr,HX,Xvr,Vvr,zvr,oF,Ibe,Wvr,Qvr,UX,Hvr,Uvr,Jvr,rF,jbe,Yvr,Kvr,JX,Zvr,e6r,o6r,tF,Dbe,r6r,t6r,YX,a6r,n6r,s6r,aF,Nbe,l6r,i6r,KX,d6r,c6r,f6r,nF,qbe,m6r,g6r,ZX,h6r,p6r,_6r,sF,Obe,u6r,b6r,eV,v6r,T6r,F6r,lF,Gbe,C6r,M6r,oV,E6r,y6r,w6r,iF,Xbe,A6r,L6r,rV,B6r,x6r,k6r,dF,Vbe,R6r,S6r,tV,P6r,$6r,I6r,cF,zbe,j6r,D6r,aV,N6r,q6r,O6r,fF,Wbe,G6r,X6r,nV,V6r,z6r,W6r,mF,Qbe,Q6r,H6r,sV,U6r,J6r,Y6r,gF,Hbe,K6r,Z6r,lV,e0r,o0r,r0r,hF,Ube,t0r,a0r,iV,n0r,s0r,l0r,pF,Jbe,i0r,d0r,dV,c0r,f0r,m0r,_F,Ybe,g0r,h0r,cV,p0r,_0r,u0r,uF,Kbe,b0r,v0r,fV,T0r,F0r,C0r,bF,Zbe,M0r,E0r,mV,y0r,w0r,A0r,vF,e5e,L0r,B0r,gV,x0r,k0r,R0r,TF,o5e,S0r,P0r,hV,$0r,I0r,j0r,FF,r5e,D0r,N0r,pV,q0r,O0r,G0r,CF,t5e,X0r,V0r,_V,z0r,W0r,Q0r,MF,a5e,H0r,U0r,uV,J0r,Y0r,K0r,n5e,Z0r,eTr,xA,FRe,df,EF,s5e,kA,oTr,l5e,rTr,CRe,Pr,RA,tTr,cf,aTr,i5e,nTr,sTr,d5e,lTr,iTr,dTr,SA,cTr,c5e,fTr,mTr,gTr,Bt,PA,hTr,f5e,pTr,_Tr,ff,uTr,m5e,bTr,vTr,g5e,TTr,FTr,CTr,h5e,MTr,ETr,$A,yTr,Lo,IA,wTr,p5e,ATr,LTr,Pn,BTr,_5e,xTr,kTr,u5e,RTr,STr,b5e,PTr,$Tr,ITr,ga,yF,v5e,jTr,DTr,bV,NTr,qTr,OTr,wF,T5e,GTr,XTr,vV,VTr,zTr,WTr,AF,F5e,QTr,HTr,TV,UTr,JTr,YTr,LF,C5e,KTr,ZTr,FV,e8r,o8r,r8r,BF,M5e,t8r,a8r,CV,n8r,s8r,l8r,E5e,i8r,d8r,jA,MRe,mf,xF,y5e,DA,c8r,w5e,f8r,ERe,$r,NA,m8r,gf,g8r,A5e,h8r,p8r,L5e,_8r,u8r,b8r,qA,v8r,B5e,T8r,F8r,C8r,xt,OA,M8r,x5e,E8r,y8r,hf,w8r,k5e,A8r,L8r,R5e,B8r,x8r,k8r,S5e,R8r,S8r,GA,P8r,Bo,XA,$8r,P5e,I8r,j8r,$n,D8r,$5e,N8r,q8r,I5e,O8r,G8r,j5e,X8r,V8r,z8r,ce,kF,D5e,W8r,Q8r,MV,H8r,U8r,J8r,RF,N5e,Y8r,K8r,EV,Z8r,eFr,oFr,SF,q5e,rFr,tFr,yV,aFr,nFr,sFr,PF,O5e,lFr,iFr,wV,dFr,cFr,fFr,$F,G5e,mFr,gFr,AV,hFr,pFr,_Fr,IF,X5e,uFr,bFr,LV,vFr,TFr,FFr,jF,V5e,CFr,MFr,BV,EFr,yFr,wFr,DF,z5e,AFr,LFr,xV,BFr,xFr,kFr,NF,W5e,RFr,SFr,kV,PFr,$Fr,IFr,qF,Q5e,jFr,DFr,RV,NFr,qFr,OFr,OF,H5e,GFr,XFr,SV,VFr,zFr,WFr,GF,U5e,QFr,HFr,PV,UFr,JFr,YFr,J5e,KFr,ZFr,VA,yRe,pf,XF,Y5e,zA,eCr,K5e,oCr,wRe,Ir,WA,rCr,_f,tCr,Z5e,aCr,nCr,e2e,sCr,lCr,iCr,QA,dCr,o2e,cCr,fCr,mCr,kt,HA,gCr,r2e,hCr,pCr,uf,_Cr,t2e,uCr,bCr,a2e,vCr,TCr,FCr,n2e,CCr,MCr,UA,ECr,xo,JA,yCr,s2e,wCr,ACr,In,LCr,l2e,BCr,xCr,i2e,kCr,RCr,d2e,SCr,PCr,$Cr,ue,VF,c2e,ICr,jCr,$V,DCr,NCr,qCr,zF,f2e,OCr,GCr,IV,XCr,VCr,zCr,WF,m2e,WCr,QCr,jV,HCr,UCr,JCr,QF,g2e,YCr,KCr,DV,ZCr,eMr,oMr,HF,h2e,rMr,tMr,NV,aMr,nMr,sMr,UF,p2e,lMr,iMr,qV,dMr,cMr,fMr,JF,_2e,mMr,gMr,OV,hMr,pMr,_Mr,YF,u2e,uMr,bMr,GV,vMr,TMr,FMr,KF,b2e,CMr,MMr,XV,EMr,yMr,wMr,ZF,v2e,AMr,LMr,VV,BMr,xMr,kMr,T2e,RMr,SMr,YA,ARe,bf,eC,F2e,KA,PMr,C2e,$Mr,LRe,jr,ZA,IMr,vf,jMr,M2e,DMr,NMr,E2e,qMr,OMr,GMr,eL,XMr,y2e,VMr,zMr,WMr,Rt,oL,QMr,w2e,HMr,UMr,Tf,JMr,A2e,YMr,KMr,L2e,ZMr,e4r,o4r,B2e,r4r,t4r,rL,a4r,ko,tL,n4r,x2e,s4r,l4r,jn,i4r,k2e,d4r,c4r,R2e,f4r,m4r,S2e,g4r,h4r,p4r,Ce,oC,P2e,_4r,u4r,zV,b4r,v4r,T4r,rC,$2e,F4r,C4r,WV,M4r,E4r,y4r,tC,I2e,w4r,A4r,QV,L4r,B4r,x4r,aC,j2e,k4r,R4r,HV,S4r,P4r,$4r,nC,D2e,I4r,j4r,UV,D4r,N4r,q4r,sC,N2e,O4r,G4r,JV,X4r,V4r,z4r,lC,q2e,W4r,Q4r,YV,H4r,U4r,J4r,iC,O2e,Y4r,K4r,KV,Z4r,eEr,oEr,dC,G2e,rEr,tEr,ZV,aEr,nEr,sEr,X2e,lEr,iEr,aL,BRe,Ff,cC,V2e,nL,dEr,z2e,cEr,xRe,Dr,sL,fEr,Cf,mEr,W2e,gEr,hEr,Q2e,pEr,_Er,uEr,lL,bEr,H2e,vEr,TEr,FEr,St,iL,CEr,U2e,MEr,EEr,Mf,yEr,J2e,wEr,AEr,Y2e,LEr,BEr,xEr,K2e,kEr,REr,dL,SEr,Ro,cL,PEr,Z2e,$Er,IEr,Dn,jEr,eve,DEr,NEr,ove,qEr,OEr,rve,GEr,XEr,VEr,be,fC,tve,zEr,WEr,ez,QEr,HEr,UEr,mC,ave,JEr,YEr,oz,KEr,ZEr,e3r,gC,nve,o3r,r3r,rz,t3r,a3r,n3r,hC,sve,s3r,l3r,tz,i3r,d3r,c3r,pC,lve,f3r,m3r,az,g3r,h3r,p3r,_C,ive,_3r,u3r,nz,b3r,v3r,T3r,uC,dve,F3r,C3r,sz,M3r,E3r,y3r,bC,cve,w3r,A3r,lz,L3r,B3r,x3r,vC,fve,k3r,R3r,iz,S3r,P3r,$3r,TC,mve,I3r,j3r,dz,D3r,N3r,q3r,gve,O3r,G3r,fL,kRe,Ef,FC,hve,mL,X3r,pve,V3r,RRe,Nr,gL,z3r,yf,W3r,_ve,Q3r,H3r,uve,U3r,J3r,Y3r,hL,K3r,bve,Z3r,eyr,oyr,Pt,pL,ryr,vve,tyr,ayr,wf,nyr,Tve,syr,lyr,Fve,iyr,dyr,cyr,Cve,fyr,myr,_L,gyr,So,uL,hyr,Mve,pyr,_yr,Nn,uyr,Eve,byr,vyr,yve,Tyr,Fyr,wve,Cyr,Myr,Eyr,Ave,CC,Lve,yyr,wyr,cz,Ayr,Lyr,Byr,Bve,xyr,kyr,bL,SRe,Af,MC,xve,vL,Ryr,kve,Syr,PRe,qr,TL,Pyr,Lf,$yr,Rve,Iyr,jyr,Sve,Dyr,Nyr,qyr,FL,Oyr,Pve,Gyr,Xyr,Vyr,$t,CL,zyr,$ve,Wyr,Qyr,Bf,Hyr,Ive,Uyr,Jyr,jve,Yyr,Kyr,Zyr,Dve,ewr,owr,ML,rwr,Po,EL,twr,Nve,awr,nwr,qn,swr,qve,lwr,iwr,Ove,dwr,cwr,Gve,fwr,mwr,gwr,ve,EC,Xve,hwr,pwr,fz,_wr,uwr,bwr,yC,Vve,vwr,Twr,mz,Fwr,Cwr,Mwr,wC,zve,Ewr,ywr,gz,wwr,Awr,Lwr,AC,Wve,Bwr,xwr,hz,kwr,Rwr,Swr,LC,Qve,Pwr,$wr,pz,Iwr,jwr,Dwr,BC,Hve,Nwr,qwr,_z,Owr,Gwr,Xwr,xC,Uve,Vwr,zwr,uz,Wwr,Qwr,Hwr,kC,Jve,Uwr,Jwr,bz,Ywr,Kwr,Zwr,RC,Yve,eAr,oAr,vz,rAr,tAr,aAr,SC,Kve,nAr,sAr,Tz,lAr,iAr,dAr,Zve,cAr,fAr,yL,$Re,xf,PC,e6e,wL,mAr,o6e,gAr,IRe,Or,AL,hAr,kf,pAr,r6e,_Ar,uAr,t6e,bAr,vAr,TAr,LL,FAr,a6e,CAr,MAr,EAr,It,BL,yAr,n6e,wAr,AAr,Rf,LAr,s6e,BAr,xAr,l6e,kAr,RAr,SAr,i6e,PAr,$Ar,xL,IAr,$o,kL,jAr,d6e,DAr,NAr,On,qAr,c6e,OAr,GAr,f6e,XAr,VAr,m6e,zAr,WAr,QAr,Re,$C,g6e,HAr,UAr,Fz,JAr,YAr,KAr,IC,h6e,ZAr,eLr,Cz,oLr,rLr,tLr,jC,p6e,aLr,nLr,Mz,sLr,lLr,iLr,DC,_6e,dLr,cLr,Ez,fLr,mLr,gLr,NC,u6e,hLr,pLr,yz,_Lr,uLr,bLr,qC,b6e,vLr,TLr,wz,FLr,CLr,MLr,OC,v6e,ELr,yLr,Az,wLr,ALr,LLr,GC,T6e,BLr,xLr,Lz,kLr,RLr,SLr,F6e,PLr,$Lr,RL,jRe,Sf,XC,C6e,SL,ILr,M6e,jLr,DRe,Gr,PL,DLr,Pf,NLr,E6e,qLr,OLr,y6e,GLr,XLr,VLr,$L,zLr,w6e,WLr,QLr,HLr,jt,IL,ULr,A6e,JLr,YLr,$f,KLr,L6e,ZLr,e7r,B6e,o7r,r7r,t7r,x6e,a7r,n7r,jL,s7r,Io,DL,l7r,k6e,i7r,d7r,Gn,c7r,R6e,f7r,m7r,S6e,g7r,h7r,P6e,p7r,_7r,u7r,Se,VC,$6e,b7r,v7r,Bz,T7r,F7r,C7r,zC,I6e,M7r,E7r,xz,y7r,w7r,A7r,WC,j6e,L7r,B7r,kz,x7r,k7r,R7r,QC,D6e,S7r,P7r,Rz,$7r,I7r,j7r,HC,N6e,D7r,N7r,Sz,q7r,O7r,G7r,UC,q6e,X7r,V7r,Pz,z7r,W7r,Q7r,JC,O6e,H7r,U7r,$z,J7r,Y7r,K7r,YC,G6e,Z7r,e9r,Iz,o9r,r9r,t9r,X6e,a9r,n9r,NL,NRe,If,KC,V6e,qL,s9r,z6e,l9r,qRe,Xr,OL,i9r,jf,d9r,W6e,c9r,f9r,Q6e,m9r,g9r,h9r,GL,p9r,H6e,_9r,u9r,b9r,Dt,XL,v9r,U6e,T9r,F9r,Df,C9r,J6e,M9r,E9r,Y6e,y9r,w9r,A9r,K6e,L9r,B9r,VL,x9r,jo,zL,k9r,Z6e,R9r,S9r,Xn,P9r,e0e,$9r,I9r,o0e,j9r,D9r,r0e,N9r,q9r,O9r,t0e,ZC,a0e,G9r,X9r,jz,V9r,z9r,W9r,n0e,Q9r,H9r,WL,ORe,Nf,eM,s0e,QL,U9r,l0e,J9r,GRe,Vr,HL,Y9r,qf,K9r,i0e,Z9r,eBr,d0e,oBr,rBr,tBr,UL,aBr,c0e,nBr,sBr,lBr,Nt,JL,iBr,f0e,dBr,cBr,Of,fBr,m0e,mBr,gBr,g0e,hBr,pBr,_Br,h0e,uBr,bBr,YL,vBr,Do,KL,TBr,p0e,FBr,CBr,Vn,MBr,_0e,EBr,yBr,u0e,wBr,ABr,b0e,LBr,BBr,xBr,ZL,oM,v0e,kBr,RBr,Dz,SBr,PBr,$Br,rM,T0e,IBr,jBr,Nz,DBr,NBr,qBr,F0e,OBr,GBr,e7,XRe,Gf,tM,C0e,o7,XBr,M0e,VBr,VRe,zr,r7,zBr,Xf,WBr,E0e,QBr,HBr,y0e,UBr,JBr,YBr,t7,KBr,w0e,ZBr,exr,oxr,qt,a7,rxr,A0e,txr,axr,Vf,nxr,L0e,sxr,lxr,B0e,ixr,dxr,cxr,x0e,fxr,mxr,n7,gxr,No,s7,hxr,k0e,pxr,_xr,zn,uxr,R0e,bxr,vxr,S0e,Txr,Fxr,P0e,Cxr,Mxr,Exr,$0e,aM,I0e,yxr,wxr,qz,Axr,Lxr,Bxr,j0e,xxr,kxr,l7,zRe;return fe=new X({}),Va=new w({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),d4=new X({}),c4=new w({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Yf=new Rxr({props:{warning:"&lcub;true}",$$slots:{default:[y8t]},$$scope:{ctx:Xi}}}),f4=new X({}),m4=new M({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/configuration_auto.py#L527"}}),p4=new M({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/configuration_auto.py#L550",parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}]}}),_4=new w({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),u4=new M({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/configuration_auto.py#L672",parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}]}}),b4=new X({}),v4=new M({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/tokenization_auto.py#L352"}}),C4=new M({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/tokenization_auto.py#L366",parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16058/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}]}}),M4=new w({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),E4=new M({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/tokenization_auto.py#L562",parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}]}}),y4=new X({}),w4=new M({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/feature_extraction_auto.py#L170"}}),B4=new M({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/feature_extraction_auto.py#L184",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16058/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Ph=new Rxr({props:{$$slots:{default:[w8t]},$$scope:{ctx:Xi}}}),x4=new w({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),k4=new M({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/feature_extraction_auto.py#L311",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}]}}),R4=new X({}),S4=new M({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/processing_auto.py#L71"}}),I4=new M({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/processing_auto.py#L85",parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),zh=new Rxr({props:{$$slots:{default:[A8t]},$$scope:{ctx:Xi}}}),j4=new w({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),D4=new M({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/processing_auto.py#L238",parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}]}}),N4=new X({}),q4=new M({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L697"}}),G4=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),X4=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),V4=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),z4=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),W4=new X({}),Q4=new M({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L704"}}),U4=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),J4=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),Y4=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),K4=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Z4=new X({}),eE=new M({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L719"}}),rE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),tE=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),aE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),nE=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),sE=new X({}),lE=new M({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L726"}}),dE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code>(Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),cE=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),fE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),mE=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),gE=new X({}),hE=new M({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L733"}}),_E=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}]}}),uE=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),bE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),vE=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),TE=new X({}),FE=new M({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L742"}}),ME=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),EE=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),yE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),wE=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),AE=new X({}),LE=new M({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L776"}}),xE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),kE=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),RE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),SE=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),PE=new X({}),$E=new M({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L783"}}),jE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}]}}),DE=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),NE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),qE=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),OE=new X({}),GE=new M({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L769"}}),VE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),zE=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),WE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),QE=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),HE=new X({}),UE=new M({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L751"}}),YE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),KE=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),ZE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),e3=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),o3=new X({}),r3=new M({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L758"}}),a3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),n3=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),s3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),l3=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),i3=new X({}),d3=new M({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L792"}}),f3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16058/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),m3=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),g3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),h3=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),p3=new X({}),_3=new M({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L831"}}),b3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),v3=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),T3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),F3=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),C3=new X({}),M3=new M({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L838"}}),y3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),w3=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),A3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),L3=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),B3=new X({}),x3=new M({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L861"}}),R3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),S3=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),P3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),$3=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),I3=new X({}),j3=new M({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L845"}}),N3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),q3=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),O3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),G3=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),X3=new X({}),V3=new M({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L852"}}),W3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}]}}),Q3=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),H3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),J3=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Y3=new X({}),K3=new M({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L870"}}),ey=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),oy=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),ry=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ty=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ay=new X({}),ny=new M({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L877"}}),ly=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}]}}),iy=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),dy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),cy=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),fy=new X({}),my=new M({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L824"}}),hy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}]}}),py=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),_y=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),uy=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),by=new X({}),vy=new M({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L799"}}),Fy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}]}}),Cy=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),My=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ey=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),yy=new X({}),wy=new M({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L806"}}),Ly=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}]}}),By=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),xy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ry=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Sy=new X({}),Py=new M({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L815"}}),Iy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}]}}),jy=new w({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),Dy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ny=new w({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),qy=new X({}),Oy=new M({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_tf_auto.py#L373"}}),Xy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Vy=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),zy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Wy=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Qy=new X({}),Hy=new M({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_tf_auto.py#L380"}}),Jy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Yy=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),Ky=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Zy=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ew=new X({}),ow=new M({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_tf_auto.py#L395"}}),tw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),aw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),nw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),sw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),lw=new X({}),iw=new M({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_tf_auto.py#L402"}}),cw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),fw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),mw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),hw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),pw=new X({}),_w=new M({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),bw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),vw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),Tw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Fw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Cw=new X({}),Mw=new M({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_tf_auto.py#L423"}}),yw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),ww=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),Aw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Lw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Bw=new X({}),xw=new M({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),Rw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Sw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),Pw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),$w=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Iw=new X({}),jw=new M({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_tf_auto.py#L468"}}),Nw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),qw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),Ow=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Gw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Xw=new X({}),Vw=new M({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),Ww=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),Qw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),Hw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Uw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Jw=new X({}),Yw=new M({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_tf_auto.py#L459"}}),Zw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),eA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),oA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),rA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),tA=new X({}),aA=new M({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_tf_auto.py#L441"}}),sA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),lA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),iA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),dA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),cA=new X({}),fA=new M({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_tf_auto.py#L409"}}),gA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),hA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),pA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),_A=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),uA=new X({}),bA=new M({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_tf_auto.py#L484"}}),TA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}]}}),FA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),CA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),MA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),EA=new X({}),yA=new M({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_flax_auto.py#L237"}}),AA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),LA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),BA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),xA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),kA=new X({}),RA=new M({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),PA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),$A=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),IA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),jA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),DA=new X({}),NA=new M({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),OA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),GA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),XA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),VA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),zA=new X({}),WA=new M({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),HA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),UA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),JA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),YA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),KA=new X({}),ZA=new M({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),oL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),rL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),tL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),aL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),nL=new X({}),sL=new M({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),iL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),dL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),cL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),fL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),mL=new X({}),gL=new M({props:{name:"class transformers.FlaxAutoModelForSpeechSeq2Seq",anchor:"transformers.FlaxAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_flax_auto.py#L331"}}),pL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/speech-encoder-decoder#transformers.FlaxSpeechEncoderDecoderModel">FlaxSpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}]}}),_L=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSpeechSeq2Seq.from_config(config)`}}),uL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),bL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),vL=new X({}),TL=new M({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),CL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),ML=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),EL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),yL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),wL=new X({}),AL=new M({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),BL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),xL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),kL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),RL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),SL=new X({}),PL=new M({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),IL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),jL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),DL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),NL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),qL=new X({}),OL=new M({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),XL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}]}}),VL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),zL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),WL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),QL=new X({}),HL=new M({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),JL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),YL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),KL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),e7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),o7=new X({}),r7=new M({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),a7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),n7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),s7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),l7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){J=a("meta"),Pe=l(),de=a("h1"),ge=a("a"),io=a("span"),f(fe.$$.fragment),Te=l(),zo=a("span"),Vi=o("Auto Classes"),Wf=l(),ha=a("p"),zi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Wi=a("code"),n4=o("from_pretrained()"),Qf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Le=l(),co=a("p"),Qi=o("Instantiating one of "),Wn=a("a"),s4=o("AutoConfig"),Qn=o(", "),Hn=a("a"),l4=o("AutoModel"),Hi=o(`, and
`),Un=a("a"),i4=o("AutoTokenizer"),Ui=o(" will directly create a class of the relevant architecture. For instance"),Hf=l(),f(Va.$$.fragment),fo=l(),he=a("p"),n9=o("will create a model that is an instance of "),Ji=a("a"),s9=o("BertModel"),l9=o("."),Wo=l(),za=a("p"),i9=o("There is one class of "),Uf=a("code"),d9=o("AutoModel"),s$e=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Gxe=l(),Yi=a("h2"),Jf=a("a"),$Q=a("span"),f(d4.$$.fragment),l$e=l(),IQ=a("span"),i$e=o("Extending the Auto Classes"),Xxe=l(),Jn=a("p"),d$e=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),jQ=a("code"),c$e=o("NewModel"),f$e=o(", make sure you have a "),DQ=a("code"),m$e=o("NewModelConfig"),g$e=o(` then you can add those to the auto
classes like this:`),Vxe=l(),f(c4.$$.fragment),zxe=l(),c9=a("p"),h$e=o("You will then be able to use the auto classes like you would usually do!"),Wxe=l(),f(Yf.$$.fragment),Qxe=l(),Ki=a("h2"),Kf=a("a"),NQ=a("span"),f(f4.$$.fragment),p$e=l(),qQ=a("span"),_$e=o("AutoConfig"),Hxe=l(),Qo=a("div"),f(m4.$$.fragment),u$e=l(),g4=a("p"),b$e=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),f9=a("a"),v$e=o("from_pretrained()"),T$e=o(" class method."),F$e=l(),h4=a("p"),C$e=o("This class cannot be instantiated directly using "),OQ=a("code"),M$e=o("__init__()"),E$e=o(" (throws an error)."),y$e=l(),mo=a("div"),f(p4.$$.fragment),w$e=l(),GQ=a("p"),A$e=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),L$e=l(),Zi=a("p"),B$e=o("The configuration class to instantiate is selected based on the "),XQ=a("code"),x$e=o("model_type"),k$e=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),VQ=a("code"),R$e=o("pretrained_model_name_or_path"),S$e=o(":"),P$e=l(),v=a("ul"),Zf=a("li"),zQ=a("strong"),$$e=o("albert"),I$e=o(" \u2014 "),m9=a("a"),j$e=o("AlbertConfig"),D$e=o(" (ALBERT model)"),N$e=l(),em=a("li"),WQ=a("strong"),q$e=o("bart"),O$e=o(" \u2014 "),g9=a("a"),G$e=o("BartConfig"),X$e=o(" (BART model)"),V$e=l(),om=a("li"),QQ=a("strong"),z$e=o("beit"),W$e=o(" \u2014 "),h9=a("a"),Q$e=o("BeitConfig"),H$e=o(" (BEiT model)"),U$e=l(),rm=a("li"),HQ=a("strong"),J$e=o("bert"),Y$e=o(" \u2014 "),p9=a("a"),K$e=o("BertConfig"),Z$e=o(" (BERT model)"),eIe=l(),tm=a("li"),UQ=a("strong"),oIe=o("bert-generation"),rIe=o(" \u2014 "),_9=a("a"),tIe=o("BertGenerationConfig"),aIe=o(" (Bert Generation model)"),nIe=l(),am=a("li"),JQ=a("strong"),sIe=o("big_bird"),lIe=o(" \u2014 "),u9=a("a"),iIe=o("BigBirdConfig"),dIe=o(" (BigBird model)"),cIe=l(),nm=a("li"),YQ=a("strong"),fIe=o("bigbird_pegasus"),mIe=o(" \u2014 "),b9=a("a"),gIe=o("BigBirdPegasusConfig"),hIe=o(" (BigBirdPegasus model)"),pIe=l(),sm=a("li"),KQ=a("strong"),_Ie=o("blenderbot"),uIe=o(" \u2014 "),v9=a("a"),bIe=o("BlenderbotConfig"),vIe=o(" (Blenderbot model)"),TIe=l(),lm=a("li"),ZQ=a("strong"),FIe=o("blenderbot-small"),CIe=o(" \u2014 "),T9=a("a"),MIe=o("BlenderbotSmallConfig"),EIe=o(" (BlenderbotSmall model)"),yIe=l(),im=a("li"),eH=a("strong"),wIe=o("camembert"),AIe=o(" \u2014 "),F9=a("a"),LIe=o("CamembertConfig"),BIe=o(" (CamemBERT model)"),xIe=l(),dm=a("li"),oH=a("strong"),kIe=o("canine"),RIe=o(" \u2014 "),C9=a("a"),SIe=o("CanineConfig"),PIe=o(" (Canine model)"),$Ie=l(),cm=a("li"),rH=a("strong"),IIe=o("clip"),jIe=o(" \u2014 "),M9=a("a"),DIe=o("CLIPConfig"),NIe=o(" (CLIP model)"),qIe=l(),fm=a("li"),tH=a("strong"),OIe=o("convbert"),GIe=o(" \u2014 "),E9=a("a"),XIe=o("ConvBertConfig"),VIe=o(" (ConvBERT model)"),zIe=l(),mm=a("li"),aH=a("strong"),WIe=o("convnext"),QIe=o(" \u2014 "),y9=a("a"),HIe=o("ConvNextConfig"),UIe=o(" (ConvNext model)"),JIe=l(),gm=a("li"),nH=a("strong"),YIe=o("ctrl"),KIe=o(" \u2014 "),w9=a("a"),ZIe=o("CTRLConfig"),eje=o(" (CTRL model)"),oje=l(),hm=a("li"),sH=a("strong"),rje=o("data2vec-audio"),tje=o(" \u2014 "),A9=a("a"),aje=o("Data2VecAudioConfig"),nje=o(" (Data2VecAudio model)"),sje=l(),pm=a("li"),lH=a("strong"),lje=o("data2vec-text"),ije=o(" \u2014 "),L9=a("a"),dje=o("Data2VecTextConfig"),cje=o(" (Data2VecText model)"),fje=l(),_m=a("li"),iH=a("strong"),mje=o("deberta"),gje=o(" \u2014 "),B9=a("a"),hje=o("DebertaConfig"),pje=o(" (DeBERTa model)"),_je=l(),um=a("li"),dH=a("strong"),uje=o("deberta-v2"),bje=o(" \u2014 "),x9=a("a"),vje=o("DebertaV2Config"),Tje=o(" (DeBERTa-v2 model)"),Fje=l(),bm=a("li"),cH=a("strong"),Cje=o("deit"),Mje=o(" \u2014 "),k9=a("a"),Eje=o("DeiTConfig"),yje=o(" (DeiT model)"),wje=l(),vm=a("li"),fH=a("strong"),Aje=o("detr"),Lje=o(" \u2014 "),R9=a("a"),Bje=o("DetrConfig"),xje=o(" (DETR model)"),kje=l(),Tm=a("li"),mH=a("strong"),Rje=o("distilbert"),Sje=o(" \u2014 "),S9=a("a"),Pje=o("DistilBertConfig"),$je=o(" (DistilBERT model)"),Ije=l(),Fm=a("li"),gH=a("strong"),jje=o("dpr"),Dje=o(" \u2014 "),P9=a("a"),Nje=o("DPRConfig"),qje=o(" (DPR model)"),Oje=l(),Cm=a("li"),hH=a("strong"),Gje=o("electra"),Xje=o(" \u2014 "),$9=a("a"),Vje=o("ElectraConfig"),zje=o(" (ELECTRA model)"),Wje=l(),Mm=a("li"),pH=a("strong"),Qje=o("encoder-decoder"),Hje=o(" \u2014 "),I9=a("a"),Uje=o("EncoderDecoderConfig"),Jje=o(" (Encoder decoder model)"),Yje=l(),Em=a("li"),_H=a("strong"),Kje=o("flaubert"),Zje=o(" \u2014 "),j9=a("a"),eDe=o("FlaubertConfig"),oDe=o(" (FlauBERT model)"),rDe=l(),ym=a("li"),uH=a("strong"),tDe=o("fnet"),aDe=o(" \u2014 "),D9=a("a"),nDe=o("FNetConfig"),sDe=o(" (FNet model)"),lDe=l(),wm=a("li"),bH=a("strong"),iDe=o("fsmt"),dDe=o(" \u2014 "),N9=a("a"),cDe=o("FSMTConfig"),fDe=o(" (FairSeq Machine-Translation model)"),mDe=l(),Am=a("li"),vH=a("strong"),gDe=o("funnel"),hDe=o(" \u2014 "),q9=a("a"),pDe=o("FunnelConfig"),_De=o(" (Funnel Transformer model)"),uDe=l(),Lm=a("li"),TH=a("strong"),bDe=o("gpt2"),vDe=o(" \u2014 "),O9=a("a"),TDe=o("GPT2Config"),FDe=o(" (OpenAI GPT-2 model)"),CDe=l(),Bm=a("li"),FH=a("strong"),MDe=o("gpt_neo"),EDe=o(" \u2014 "),G9=a("a"),yDe=o("GPTNeoConfig"),wDe=o(" (GPT Neo model)"),ADe=l(),xm=a("li"),CH=a("strong"),LDe=o("gptj"),BDe=o(" \u2014 "),X9=a("a"),xDe=o("GPTJConfig"),kDe=o(" (GPT-J model)"),RDe=l(),km=a("li"),MH=a("strong"),SDe=o("hubert"),PDe=o(" \u2014 "),V9=a("a"),$De=o("HubertConfig"),IDe=o(" (Hubert model)"),jDe=l(),Rm=a("li"),EH=a("strong"),DDe=o("ibert"),NDe=o(" \u2014 "),z9=a("a"),qDe=o("IBertConfig"),ODe=o(" (I-BERT model)"),GDe=l(),Sm=a("li"),yH=a("strong"),XDe=o("imagegpt"),VDe=o(" \u2014 "),W9=a("a"),zDe=o("ImageGPTConfig"),WDe=o(" (ImageGPT model)"),QDe=l(),Pm=a("li"),wH=a("strong"),HDe=o("layoutlm"),UDe=o(" \u2014 "),Q9=a("a"),JDe=o("LayoutLMConfig"),YDe=o(" (LayoutLM model)"),KDe=l(),$m=a("li"),AH=a("strong"),ZDe=o("layoutlmv2"),eNe=o(" \u2014 "),H9=a("a"),oNe=o("LayoutLMv2Config"),rNe=o(" (LayoutLMv2 model)"),tNe=l(),Im=a("li"),LH=a("strong"),aNe=o("led"),nNe=o(" \u2014 "),U9=a("a"),sNe=o("LEDConfig"),lNe=o(" (LED model)"),iNe=l(),jm=a("li"),BH=a("strong"),dNe=o("longformer"),cNe=o(" \u2014 "),J9=a("a"),fNe=o("LongformerConfig"),mNe=o(" (Longformer model)"),gNe=l(),Dm=a("li"),xH=a("strong"),hNe=o("luke"),pNe=o(" \u2014 "),Y9=a("a"),_Ne=o("LukeConfig"),uNe=o(" (LUKE model)"),bNe=l(),Nm=a("li"),kH=a("strong"),vNe=o("lxmert"),TNe=o(" \u2014 "),K9=a("a"),FNe=o("LxmertConfig"),CNe=o(" (LXMERT model)"),MNe=l(),qm=a("li"),RH=a("strong"),ENe=o("m2m_100"),yNe=o(" \u2014 "),Z9=a("a"),wNe=o("M2M100Config"),ANe=o(" (M2M100 model)"),LNe=l(),Om=a("li"),SH=a("strong"),BNe=o("marian"),xNe=o(" \u2014 "),eB=a("a"),kNe=o("MarianConfig"),RNe=o(" (Marian model)"),SNe=l(),Gm=a("li"),PH=a("strong"),PNe=o("maskformer"),$Ne=o(" \u2014 "),oB=a("a"),INe=o("MaskFormerConfig"),jNe=o(" (MaskFormer model)"),DNe=l(),Xm=a("li"),$H=a("strong"),NNe=o("mbart"),qNe=o(" \u2014 "),rB=a("a"),ONe=o("MBartConfig"),GNe=o(" (mBART model)"),XNe=l(),Vm=a("li"),IH=a("strong"),VNe=o("megatron-bert"),zNe=o(" \u2014 "),tB=a("a"),WNe=o("MegatronBertConfig"),QNe=o(" (MegatronBert model)"),HNe=l(),zm=a("li"),jH=a("strong"),UNe=o("mobilebert"),JNe=o(" \u2014 "),aB=a("a"),YNe=o("MobileBertConfig"),KNe=o(" (MobileBERT model)"),ZNe=l(),Wm=a("li"),DH=a("strong"),eqe=o("mpnet"),oqe=o(" \u2014 "),nB=a("a"),rqe=o("MPNetConfig"),tqe=o(" (MPNet model)"),aqe=l(),Qm=a("li"),NH=a("strong"),nqe=o("mt5"),sqe=o(" \u2014 "),sB=a("a"),lqe=o("MT5Config"),iqe=o(" (mT5 model)"),dqe=l(),Hm=a("li"),qH=a("strong"),cqe=o("nystromformer"),fqe=o(" \u2014 "),lB=a("a"),mqe=o("NystromformerConfig"),gqe=o(" (Nystromformer model)"),hqe=l(),Um=a("li"),OH=a("strong"),pqe=o("openai-gpt"),_qe=o(" \u2014 "),iB=a("a"),uqe=o("OpenAIGPTConfig"),bqe=o(" (OpenAI GPT model)"),vqe=l(),Jm=a("li"),GH=a("strong"),Tqe=o("pegasus"),Fqe=o(" \u2014 "),dB=a("a"),Cqe=o("PegasusConfig"),Mqe=o(" (Pegasus model)"),Eqe=l(),Ym=a("li"),XH=a("strong"),yqe=o("perceiver"),wqe=o(" \u2014 "),cB=a("a"),Aqe=o("PerceiverConfig"),Lqe=o(" (Perceiver model)"),Bqe=l(),Km=a("li"),VH=a("strong"),xqe=o("plbart"),kqe=o(" \u2014 "),fB=a("a"),Rqe=o("PLBartConfig"),Sqe=o(" (PLBart model)"),Pqe=l(),Zm=a("li"),zH=a("strong"),$qe=o("poolformer"),Iqe=o(" \u2014 "),mB=a("a"),jqe=o("PoolFormerConfig"),Dqe=o(" (PoolFormer model)"),Nqe=l(),eg=a("li"),WH=a("strong"),qqe=o("prophetnet"),Oqe=o(" \u2014 "),gB=a("a"),Gqe=o("ProphetNetConfig"),Xqe=o(" (ProphetNet model)"),Vqe=l(),og=a("li"),QH=a("strong"),zqe=o("qdqbert"),Wqe=o(" \u2014 "),hB=a("a"),Qqe=o("QDQBertConfig"),Hqe=o(" (QDQBert model)"),Uqe=l(),rg=a("li"),HH=a("strong"),Jqe=o("rag"),Yqe=o(" \u2014 "),pB=a("a"),Kqe=o("RagConfig"),Zqe=o(" (RAG model)"),eOe=l(),tg=a("li"),UH=a("strong"),oOe=o("realm"),rOe=o(" \u2014 "),_B=a("a"),tOe=o("RealmConfig"),aOe=o(" (Realm model)"),nOe=l(),ag=a("li"),JH=a("strong"),sOe=o("reformer"),lOe=o(" \u2014 "),uB=a("a"),iOe=o("ReformerConfig"),dOe=o(" (Reformer model)"),cOe=l(),ng=a("li"),YH=a("strong"),fOe=o("rembert"),mOe=o(" \u2014 "),bB=a("a"),gOe=o("RemBertConfig"),hOe=o(" (RemBERT model)"),pOe=l(),sg=a("li"),KH=a("strong"),_Oe=o("retribert"),uOe=o(" \u2014 "),vB=a("a"),bOe=o("RetriBertConfig"),vOe=o(" (RetriBERT model)"),TOe=l(),lg=a("li"),ZH=a("strong"),FOe=o("roberta"),COe=o(" \u2014 "),TB=a("a"),MOe=o("RobertaConfig"),EOe=o(" (RoBERTa model)"),yOe=l(),ig=a("li"),eU=a("strong"),wOe=o("roformer"),AOe=o(" \u2014 "),FB=a("a"),LOe=o("RoFormerConfig"),BOe=o(" (RoFormer model)"),xOe=l(),dg=a("li"),oU=a("strong"),kOe=o("segformer"),ROe=o(" \u2014 "),CB=a("a"),SOe=o("SegformerConfig"),POe=o(" (SegFormer model)"),$Oe=l(),cg=a("li"),rU=a("strong"),IOe=o("sew"),jOe=o(" \u2014 "),MB=a("a"),DOe=o("SEWConfig"),NOe=o(" (SEW model)"),qOe=l(),fg=a("li"),tU=a("strong"),OOe=o("sew-d"),GOe=o(" \u2014 "),EB=a("a"),XOe=o("SEWDConfig"),VOe=o(" (SEW-D model)"),zOe=l(),mg=a("li"),aU=a("strong"),WOe=o("speech-encoder-decoder"),QOe=o(" \u2014 "),yB=a("a"),HOe=o("SpeechEncoderDecoderConfig"),UOe=o(" (Speech Encoder decoder model)"),JOe=l(),gg=a("li"),nU=a("strong"),YOe=o("speech_to_text"),KOe=o(" \u2014 "),wB=a("a"),ZOe=o("Speech2TextConfig"),eGe=o(" (Speech2Text model)"),oGe=l(),hg=a("li"),sU=a("strong"),rGe=o("speech_to_text_2"),tGe=o(" \u2014 "),AB=a("a"),aGe=o("Speech2Text2Config"),nGe=o(" (Speech2Text2 model)"),sGe=l(),pg=a("li"),lU=a("strong"),lGe=o("splinter"),iGe=o(" \u2014 "),LB=a("a"),dGe=o("SplinterConfig"),cGe=o(" (Splinter model)"),fGe=l(),_g=a("li"),iU=a("strong"),mGe=o("squeezebert"),gGe=o(" \u2014 "),BB=a("a"),hGe=o("SqueezeBertConfig"),pGe=o(" (SqueezeBERT model)"),_Ge=l(),ug=a("li"),dU=a("strong"),uGe=o("swin"),bGe=o(" \u2014 "),xB=a("a"),vGe=o("SwinConfig"),TGe=o(" (Swin model)"),FGe=l(),bg=a("li"),cU=a("strong"),CGe=o("t5"),MGe=o(" \u2014 "),kB=a("a"),EGe=o("T5Config"),yGe=o(" (T5 model)"),wGe=l(),vg=a("li"),fU=a("strong"),AGe=o("tapas"),LGe=o(" \u2014 "),RB=a("a"),BGe=o("TapasConfig"),xGe=o(" (TAPAS model)"),kGe=l(),Tg=a("li"),mU=a("strong"),RGe=o("transfo-xl"),SGe=o(" \u2014 "),SB=a("a"),PGe=o("TransfoXLConfig"),$Ge=o(" (Transformer-XL model)"),IGe=l(),Fg=a("li"),gU=a("strong"),jGe=o("trocr"),DGe=o(" \u2014 "),PB=a("a"),NGe=o("TrOCRConfig"),qGe=o(" (TrOCR model)"),OGe=l(),Cg=a("li"),hU=a("strong"),GGe=o("unispeech"),XGe=o(" \u2014 "),$B=a("a"),VGe=o("UniSpeechConfig"),zGe=o(" (UniSpeech model)"),WGe=l(),Mg=a("li"),pU=a("strong"),QGe=o("unispeech-sat"),HGe=o(" \u2014 "),IB=a("a"),UGe=o("UniSpeechSatConfig"),JGe=o(" (UniSpeechSat model)"),YGe=l(),Eg=a("li"),_U=a("strong"),KGe=o("vilt"),ZGe=o(" \u2014 "),jB=a("a"),eXe=o("ViltConfig"),oXe=o(" (ViLT model)"),rXe=l(),yg=a("li"),uU=a("strong"),tXe=o("vision-encoder-decoder"),aXe=o(" \u2014 "),DB=a("a"),nXe=o("VisionEncoderDecoderConfig"),sXe=o(" (Vision Encoder decoder model)"),lXe=l(),wg=a("li"),bU=a("strong"),iXe=o("vision-text-dual-encoder"),dXe=o(" \u2014 "),NB=a("a"),cXe=o("VisionTextDualEncoderConfig"),fXe=o(" (VisionTextDualEncoder model)"),mXe=l(),Ag=a("li"),vU=a("strong"),gXe=o("visual_bert"),hXe=o(" \u2014 "),qB=a("a"),pXe=o("VisualBertConfig"),_Xe=o(" (VisualBert model)"),uXe=l(),Lg=a("li"),TU=a("strong"),bXe=o("vit"),vXe=o(" \u2014 "),OB=a("a"),TXe=o("ViTConfig"),FXe=o(" (ViT model)"),CXe=l(),Bg=a("li"),FU=a("strong"),MXe=o("vit_mae"),EXe=o(" \u2014 "),GB=a("a"),yXe=o("ViTMAEConfig"),wXe=o(" (ViTMAE model)"),AXe=l(),xg=a("li"),CU=a("strong"),LXe=o("wav2vec2"),BXe=o(" \u2014 "),XB=a("a"),xXe=o("Wav2Vec2Config"),kXe=o(" (Wav2Vec2 model)"),RXe=l(),kg=a("li"),MU=a("strong"),SXe=o("wavlm"),PXe=o(" \u2014 "),VB=a("a"),$Xe=o("WavLMConfig"),IXe=o(" (WavLM model)"),jXe=l(),Rg=a("li"),EU=a("strong"),DXe=o("xglm"),NXe=o(" \u2014 "),zB=a("a"),qXe=o("XGLMConfig"),OXe=o(" (XGLM model)"),GXe=l(),Sg=a("li"),yU=a("strong"),XXe=o("xlm"),VXe=o(" \u2014 "),WB=a("a"),zXe=o("XLMConfig"),WXe=o(" (XLM model)"),QXe=l(),Pg=a("li"),wU=a("strong"),HXe=o("xlm-prophetnet"),UXe=o(" \u2014 "),QB=a("a"),JXe=o("XLMProphetNetConfig"),YXe=o(" (XLMProphetNet model)"),KXe=l(),$g=a("li"),AU=a("strong"),ZXe=o("xlm-roberta"),eVe=o(" \u2014 "),HB=a("a"),oVe=o("XLMRobertaConfig"),rVe=o(" (XLM-RoBERTa model)"),tVe=l(),Ig=a("li"),LU=a("strong"),aVe=o("xlm-roberta-xl"),nVe=o(" \u2014 "),UB=a("a"),sVe=o("XLMRobertaXLConfig"),lVe=o(" (XLM-RoBERTa-XL model)"),iVe=l(),jg=a("li"),BU=a("strong"),dVe=o("xlnet"),cVe=o(" \u2014 "),JB=a("a"),fVe=o("XLNetConfig"),mVe=o(" (XLNet model)"),gVe=l(),Dg=a("li"),xU=a("strong"),hVe=o("yoso"),pVe=o(" \u2014 "),YB=a("a"),_Ve=o("YosoConfig"),uVe=o(" (YOSO model)"),bVe=l(),kU=a("p"),vVe=o("Examples:"),TVe=l(),f(_4.$$.fragment),FVe=l(),Ng=a("div"),f(u4.$$.fragment),CVe=l(),RU=a("p"),MVe=o("Register a new configuration for this class."),Uxe=l(),ed=a("h2"),qg=a("a"),SU=a("span"),f(b4.$$.fragment),EVe=l(),PU=a("span"),yVe=o("AutoTokenizer"),Jxe=l(),Ho=a("div"),f(v4.$$.fragment),wVe=l(),T4=a("p"),AVe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),KB=a("a"),LVe=o("AutoTokenizer.from_pretrained()"),BVe=o(" class method."),xVe=l(),F4=a("p"),kVe=o("This class cannot be instantiated directly using "),$U=a("code"),RVe=o("__init__()"),SVe=o(" (throws an error)."),PVe=l(),go=a("div"),f(C4.$$.fragment),$Ve=l(),IU=a("p"),IVe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),jVe=l(),Wa=a("p"),DVe=o("The tokenizer class to instantiate is selected based on the "),jU=a("code"),NVe=o("model_type"),qVe=o(` property of the config object (either
passed as an argument or loaded from `),DU=a("code"),OVe=o("pretrained_model_name_or_path"),GVe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NU=a("code"),XVe=o("pretrained_model_name_or_path"),VVe=o(":"),zVe=l(),E=a("ul"),Yn=a("li"),qU=a("strong"),WVe=o("albert"),QVe=o(" \u2014 "),ZB=a("a"),HVe=o("AlbertTokenizer"),UVe=o(" or "),ex=a("a"),JVe=o("AlbertTokenizerFast"),YVe=o(" (ALBERT model)"),KVe=l(),Kn=a("li"),OU=a("strong"),ZVe=o("bart"),eze=o(" \u2014 "),ox=a("a"),oze=o("BartTokenizer"),rze=o(" or "),rx=a("a"),tze=o("BartTokenizerFast"),aze=o(" (BART model)"),nze=l(),Zn=a("li"),GU=a("strong"),sze=o("barthez"),lze=o(" \u2014 "),tx=a("a"),ize=o("BarthezTokenizer"),dze=o(" or "),ax=a("a"),cze=o("BarthezTokenizerFast"),fze=o(" (BARThez model)"),mze=l(),Og=a("li"),XU=a("strong"),gze=o("bartpho"),hze=o(" \u2014 "),nx=a("a"),pze=o("BartphoTokenizer"),_ze=o(" (BARTpho model)"),uze=l(),es=a("li"),VU=a("strong"),bze=o("bert"),vze=o(" \u2014 "),sx=a("a"),Tze=o("BertTokenizer"),Fze=o(" or "),lx=a("a"),Cze=o("BertTokenizerFast"),Mze=o(" (BERT model)"),Eze=l(),Gg=a("li"),zU=a("strong"),yze=o("bert-generation"),wze=o(" \u2014 "),ix=a("a"),Aze=o("BertGenerationTokenizer"),Lze=o(" (Bert Generation model)"),Bze=l(),Xg=a("li"),WU=a("strong"),xze=o("bert-japanese"),kze=o(" \u2014 "),dx=a("a"),Rze=o("BertJapaneseTokenizer"),Sze=o(" (BertJapanese model)"),Pze=l(),Vg=a("li"),QU=a("strong"),$ze=o("bertweet"),Ize=o(" \u2014 "),cx=a("a"),jze=o("BertweetTokenizer"),Dze=o(" (Bertweet model)"),Nze=l(),os=a("li"),HU=a("strong"),qze=o("big_bird"),Oze=o(" \u2014 "),fx=a("a"),Gze=o("BigBirdTokenizer"),Xze=o(" or "),mx=a("a"),Vze=o("BigBirdTokenizerFast"),zze=o(" (BigBird model)"),Wze=l(),rs=a("li"),UU=a("strong"),Qze=o("bigbird_pegasus"),Hze=o(" \u2014 "),gx=a("a"),Uze=o("PegasusTokenizer"),Jze=o(" or "),hx=a("a"),Yze=o("PegasusTokenizerFast"),Kze=o(" (BigBirdPegasus model)"),Zze=l(),ts=a("li"),JU=a("strong"),eWe=o("blenderbot"),oWe=o(" \u2014 "),px=a("a"),rWe=o("BlenderbotTokenizer"),tWe=o(" or "),_x=a("a"),aWe=o("BlenderbotTokenizerFast"),nWe=o(" (Blenderbot model)"),sWe=l(),zg=a("li"),YU=a("strong"),lWe=o("blenderbot-small"),iWe=o(" \u2014 "),ux=a("a"),dWe=o("BlenderbotSmallTokenizer"),cWe=o(" (BlenderbotSmall model)"),fWe=l(),Wg=a("li"),KU=a("strong"),mWe=o("byt5"),gWe=o(" \u2014 "),bx=a("a"),hWe=o("ByT5Tokenizer"),pWe=o(" (ByT5 model)"),_We=l(),as=a("li"),ZU=a("strong"),uWe=o("camembert"),bWe=o(" \u2014 "),vx=a("a"),vWe=o("CamembertTokenizer"),TWe=o(" or "),Tx=a("a"),FWe=o("CamembertTokenizerFast"),CWe=o(" (CamemBERT model)"),MWe=l(),Qg=a("li"),eJ=a("strong"),EWe=o("canine"),yWe=o(" \u2014 "),Fx=a("a"),wWe=o("CanineTokenizer"),AWe=o(" (Canine model)"),LWe=l(),ns=a("li"),oJ=a("strong"),BWe=o("clip"),xWe=o(" \u2014 "),Cx=a("a"),kWe=o("CLIPTokenizer"),RWe=o(" or "),Mx=a("a"),SWe=o("CLIPTokenizerFast"),PWe=o(" (CLIP model)"),$We=l(),ss=a("li"),rJ=a("strong"),IWe=o("convbert"),jWe=o(" \u2014 "),Ex=a("a"),DWe=o("ConvBertTokenizer"),NWe=o(" or "),yx=a("a"),qWe=o("ConvBertTokenizerFast"),OWe=o(" (ConvBERT model)"),GWe=l(),ls=a("li"),tJ=a("strong"),XWe=o("cpm"),VWe=o(" \u2014 "),wx=a("a"),zWe=o("CpmTokenizer"),WWe=o(" or "),aJ=a("code"),QWe=o("CpmTokenizerFast"),HWe=o(" (CPM model)"),UWe=l(),Hg=a("li"),nJ=a("strong"),JWe=o("ctrl"),YWe=o(" \u2014 "),Ax=a("a"),KWe=o("CTRLTokenizer"),ZWe=o(" (CTRL model)"),eQe=l(),is=a("li"),sJ=a("strong"),oQe=o("deberta"),rQe=o(" \u2014 "),Lx=a("a"),tQe=o("DebertaTokenizer"),aQe=o(" or "),Bx=a("a"),nQe=o("DebertaTokenizerFast"),sQe=o(" (DeBERTa model)"),lQe=l(),Ug=a("li"),lJ=a("strong"),iQe=o("deberta-v2"),dQe=o(" \u2014 "),xx=a("a"),cQe=o("DebertaV2Tokenizer"),fQe=o(" (DeBERTa-v2 model)"),mQe=l(),ds=a("li"),iJ=a("strong"),gQe=o("distilbert"),hQe=o(" \u2014 "),kx=a("a"),pQe=o("DistilBertTokenizer"),_Qe=o(" or "),Rx=a("a"),uQe=o("DistilBertTokenizerFast"),bQe=o(" (DistilBERT model)"),vQe=l(),cs=a("li"),dJ=a("strong"),TQe=o("dpr"),FQe=o(" \u2014 "),Sx=a("a"),CQe=o("DPRQuestionEncoderTokenizer"),MQe=o(" or "),Px=a("a"),EQe=o("DPRQuestionEncoderTokenizerFast"),yQe=o(" (DPR model)"),wQe=l(),fs=a("li"),cJ=a("strong"),AQe=o("electra"),LQe=o(" \u2014 "),$x=a("a"),BQe=o("ElectraTokenizer"),xQe=o(" or "),Ix=a("a"),kQe=o("ElectraTokenizerFast"),RQe=o(" (ELECTRA model)"),SQe=l(),Jg=a("li"),fJ=a("strong"),PQe=o("flaubert"),$Qe=o(" \u2014 "),jx=a("a"),IQe=o("FlaubertTokenizer"),jQe=o(" (FlauBERT model)"),DQe=l(),ms=a("li"),mJ=a("strong"),NQe=o("fnet"),qQe=o(" \u2014 "),Dx=a("a"),OQe=o("FNetTokenizer"),GQe=o(" or "),Nx=a("a"),XQe=o("FNetTokenizerFast"),VQe=o(" (FNet model)"),zQe=l(),Yg=a("li"),gJ=a("strong"),WQe=o("fsmt"),QQe=o(" \u2014 "),qx=a("a"),HQe=o("FSMTTokenizer"),UQe=o(" (FairSeq Machine-Translation model)"),JQe=l(),gs=a("li"),hJ=a("strong"),YQe=o("funnel"),KQe=o(" \u2014 "),Ox=a("a"),ZQe=o("FunnelTokenizer"),eHe=o(" or "),Gx=a("a"),oHe=o("FunnelTokenizerFast"),rHe=o(" (Funnel Transformer model)"),tHe=l(),hs=a("li"),pJ=a("strong"),aHe=o("gpt2"),nHe=o(" \u2014 "),Xx=a("a"),sHe=o("GPT2Tokenizer"),lHe=o(" or "),Vx=a("a"),iHe=o("GPT2TokenizerFast"),dHe=o(" (OpenAI GPT-2 model)"),cHe=l(),ps=a("li"),_J=a("strong"),fHe=o("gpt_neo"),mHe=o(" \u2014 "),zx=a("a"),gHe=o("GPT2Tokenizer"),hHe=o(" or "),Wx=a("a"),pHe=o("GPT2TokenizerFast"),_He=o(" (GPT Neo model)"),uHe=l(),_s=a("li"),uJ=a("strong"),bHe=o("herbert"),vHe=o(" \u2014 "),Qx=a("a"),THe=o("HerbertTokenizer"),FHe=o(" or "),Hx=a("a"),CHe=o("HerbertTokenizerFast"),MHe=o(" (HerBERT model)"),EHe=l(),Kg=a("li"),bJ=a("strong"),yHe=o("hubert"),wHe=o(" \u2014 "),Ux=a("a"),AHe=o("Wav2Vec2CTCTokenizer"),LHe=o(" (Hubert model)"),BHe=l(),us=a("li"),vJ=a("strong"),xHe=o("ibert"),kHe=o(" \u2014 "),Jx=a("a"),RHe=o("RobertaTokenizer"),SHe=o(" or "),Yx=a("a"),PHe=o("RobertaTokenizerFast"),$He=o(" (I-BERT model)"),IHe=l(),bs=a("li"),TJ=a("strong"),jHe=o("layoutlm"),DHe=o(" \u2014 "),Kx=a("a"),NHe=o("LayoutLMTokenizer"),qHe=o(" or "),Zx=a("a"),OHe=o("LayoutLMTokenizerFast"),GHe=o(" (LayoutLM model)"),XHe=l(),vs=a("li"),FJ=a("strong"),VHe=o("layoutlmv2"),zHe=o(" \u2014 "),ek=a("a"),WHe=o("LayoutLMv2Tokenizer"),QHe=o(" or "),ok=a("a"),HHe=o("LayoutLMv2TokenizerFast"),UHe=o(" (LayoutLMv2 model)"),JHe=l(),Ts=a("li"),CJ=a("strong"),YHe=o("layoutxlm"),KHe=o(" \u2014 "),rk=a("a"),ZHe=o("LayoutXLMTokenizer"),eUe=o(" or "),tk=a("a"),oUe=o("LayoutXLMTokenizerFast"),rUe=o(" (LayoutXLM model)"),tUe=l(),Fs=a("li"),MJ=a("strong"),aUe=o("led"),nUe=o(" \u2014 "),ak=a("a"),sUe=o("LEDTokenizer"),lUe=o(" or "),nk=a("a"),iUe=o("LEDTokenizerFast"),dUe=o(" (LED model)"),cUe=l(),Cs=a("li"),EJ=a("strong"),fUe=o("longformer"),mUe=o(" \u2014 "),sk=a("a"),gUe=o("LongformerTokenizer"),hUe=o(" or "),lk=a("a"),pUe=o("LongformerTokenizerFast"),_Ue=o(" (Longformer model)"),uUe=l(),Zg=a("li"),yJ=a("strong"),bUe=o("luke"),vUe=o(" \u2014 "),ik=a("a"),TUe=o("LukeTokenizer"),FUe=o(" (LUKE model)"),CUe=l(),Ms=a("li"),wJ=a("strong"),MUe=o("lxmert"),EUe=o(" \u2014 "),dk=a("a"),yUe=o("LxmertTokenizer"),wUe=o(" or "),ck=a("a"),AUe=o("LxmertTokenizerFast"),LUe=o(" (LXMERT model)"),BUe=l(),eh=a("li"),AJ=a("strong"),xUe=o("m2m_100"),kUe=o(" \u2014 "),fk=a("a"),RUe=o("M2M100Tokenizer"),SUe=o(" (M2M100 model)"),PUe=l(),oh=a("li"),LJ=a("strong"),$Ue=o("marian"),IUe=o(" \u2014 "),mk=a("a"),jUe=o("MarianTokenizer"),DUe=o(" (Marian model)"),NUe=l(),Es=a("li"),BJ=a("strong"),qUe=o("mbart"),OUe=o(" \u2014 "),gk=a("a"),GUe=o("MBartTokenizer"),XUe=o(" or "),hk=a("a"),VUe=o("MBartTokenizerFast"),zUe=o(" (mBART model)"),WUe=l(),ys=a("li"),xJ=a("strong"),QUe=o("mbart50"),HUe=o(" \u2014 "),pk=a("a"),UUe=o("MBart50Tokenizer"),JUe=o(" or "),_k=a("a"),YUe=o("MBart50TokenizerFast"),KUe=o(" (mBART-50 model)"),ZUe=l(),rh=a("li"),kJ=a("strong"),eJe=o("mluke"),oJe=o(" \u2014 "),uk=a("a"),rJe=o("MLukeTokenizer"),tJe=o(" (mLUKE model)"),aJe=l(),ws=a("li"),RJ=a("strong"),nJe=o("mobilebert"),sJe=o(" \u2014 "),bk=a("a"),lJe=o("MobileBertTokenizer"),iJe=o(" or "),vk=a("a"),dJe=o("MobileBertTokenizerFast"),cJe=o(" (MobileBERT model)"),fJe=l(),As=a("li"),SJ=a("strong"),mJe=o("mpnet"),gJe=o(" \u2014 "),Tk=a("a"),hJe=o("MPNetTokenizer"),pJe=o(" or "),Fk=a("a"),_Je=o("MPNetTokenizerFast"),uJe=o(" (MPNet model)"),bJe=l(),Ls=a("li"),PJ=a("strong"),vJe=o("mt5"),TJe=o(" \u2014 "),Ck=a("a"),FJe=o("MT5Tokenizer"),CJe=o(" or "),Mk=a("a"),MJe=o("MT5TokenizerFast"),EJe=o(" (mT5 model)"),yJe=l(),Bs=a("li"),$J=a("strong"),wJe=o("openai-gpt"),AJe=o(" \u2014 "),Ek=a("a"),LJe=o("OpenAIGPTTokenizer"),BJe=o(" or "),yk=a("a"),xJe=o("OpenAIGPTTokenizerFast"),kJe=o(" (OpenAI GPT model)"),RJe=l(),xs=a("li"),IJ=a("strong"),SJe=o("pegasus"),PJe=o(" \u2014 "),wk=a("a"),$Je=o("PegasusTokenizer"),IJe=o(" or "),Ak=a("a"),jJe=o("PegasusTokenizerFast"),DJe=o(" (Pegasus model)"),NJe=l(),th=a("li"),jJ=a("strong"),qJe=o("perceiver"),OJe=o(" \u2014 "),Lk=a("a"),GJe=o("PerceiverTokenizer"),XJe=o(" (Perceiver model)"),VJe=l(),ah=a("li"),DJ=a("strong"),zJe=o("phobert"),WJe=o(" \u2014 "),Bk=a("a"),QJe=o("PhobertTokenizer"),HJe=o(" (PhoBERT model)"),UJe=l(),nh=a("li"),NJ=a("strong"),JJe=o("plbart"),YJe=o(" \u2014 "),xk=a("a"),KJe=o("PLBartTokenizer"),ZJe=o(" (PLBart model)"),eYe=l(),sh=a("li"),qJ=a("strong"),oYe=o("prophetnet"),rYe=o(" \u2014 "),kk=a("a"),tYe=o("ProphetNetTokenizer"),aYe=o(" (ProphetNet model)"),nYe=l(),ks=a("li"),OJ=a("strong"),sYe=o("qdqbert"),lYe=o(" \u2014 "),Rk=a("a"),iYe=o("BertTokenizer"),dYe=o(" or "),Sk=a("a"),cYe=o("BertTokenizerFast"),fYe=o(" (QDQBert model)"),mYe=l(),lh=a("li"),GJ=a("strong"),gYe=o("rag"),hYe=o(" \u2014 "),Pk=a("a"),pYe=o("RagTokenizer"),_Ye=o(" (RAG model)"),uYe=l(),Rs=a("li"),XJ=a("strong"),bYe=o("realm"),vYe=o(" \u2014 "),$k=a("a"),TYe=o("RealmTokenizer"),FYe=o(" or "),Ik=a("a"),CYe=o("RealmTokenizerFast"),MYe=o(" (Realm model)"),EYe=l(),Ss=a("li"),VJ=a("strong"),yYe=o("reformer"),wYe=o(" \u2014 "),jk=a("a"),AYe=o("ReformerTokenizer"),LYe=o(" or "),Dk=a("a"),BYe=o("ReformerTokenizerFast"),xYe=o(" (Reformer model)"),kYe=l(),Ps=a("li"),zJ=a("strong"),RYe=o("rembert"),SYe=o(" \u2014 "),Nk=a("a"),PYe=o("RemBertTokenizer"),$Ye=o(" or "),qk=a("a"),IYe=o("RemBertTokenizerFast"),jYe=o(" (RemBERT model)"),DYe=l(),$s=a("li"),WJ=a("strong"),NYe=o("retribert"),qYe=o(" \u2014 "),Ok=a("a"),OYe=o("RetriBertTokenizer"),GYe=o(" or "),Gk=a("a"),XYe=o("RetriBertTokenizerFast"),VYe=o(" (RetriBERT model)"),zYe=l(),Is=a("li"),QJ=a("strong"),WYe=o("roberta"),QYe=o(" \u2014 "),Xk=a("a"),HYe=o("RobertaTokenizer"),UYe=o(" or "),Vk=a("a"),JYe=o("RobertaTokenizerFast"),YYe=o(" (RoBERTa model)"),KYe=l(),js=a("li"),HJ=a("strong"),ZYe=o("roformer"),eKe=o(" \u2014 "),zk=a("a"),oKe=o("RoFormerTokenizer"),rKe=o(" or "),Wk=a("a"),tKe=o("RoFormerTokenizerFast"),aKe=o(" (RoFormer model)"),nKe=l(),ih=a("li"),UJ=a("strong"),sKe=o("speech_to_text"),lKe=o(" \u2014 "),Qk=a("a"),iKe=o("Speech2TextTokenizer"),dKe=o(" (Speech2Text model)"),cKe=l(),dh=a("li"),JJ=a("strong"),fKe=o("speech_to_text_2"),mKe=o(" \u2014 "),Hk=a("a"),gKe=o("Speech2Text2Tokenizer"),hKe=o(" (Speech2Text2 model)"),pKe=l(),Ds=a("li"),YJ=a("strong"),_Ke=o("splinter"),uKe=o(" \u2014 "),Uk=a("a"),bKe=o("SplinterTokenizer"),vKe=o(" or "),Jk=a("a"),TKe=o("SplinterTokenizerFast"),FKe=o(" (Splinter model)"),CKe=l(),Ns=a("li"),KJ=a("strong"),MKe=o("squeezebert"),EKe=o(" \u2014 "),Yk=a("a"),yKe=o("SqueezeBertTokenizer"),wKe=o(" or "),Kk=a("a"),AKe=o("SqueezeBertTokenizerFast"),LKe=o(" (SqueezeBERT model)"),BKe=l(),qs=a("li"),ZJ=a("strong"),xKe=o("t5"),kKe=o(" \u2014 "),Zk=a("a"),RKe=o("T5Tokenizer"),SKe=o(" or "),eR=a("a"),PKe=o("T5TokenizerFast"),$Ke=o(" (T5 model)"),IKe=l(),ch=a("li"),eY=a("strong"),jKe=o("tapas"),DKe=o(" \u2014 "),oR=a("a"),NKe=o("TapasTokenizer"),qKe=o(" (TAPAS model)"),OKe=l(),fh=a("li"),oY=a("strong"),GKe=o("transfo-xl"),XKe=o(" \u2014 "),rR=a("a"),VKe=o("TransfoXLTokenizer"),zKe=o(" (Transformer-XL model)"),WKe=l(),mh=a("li"),rY=a("strong"),QKe=o("wav2vec2"),HKe=o(" \u2014 "),tR=a("a"),UKe=o("Wav2Vec2CTCTokenizer"),JKe=o(" (Wav2Vec2 model)"),YKe=l(),gh=a("li"),tY=a("strong"),KKe=o("wav2vec2_phoneme"),ZKe=o(" \u2014 "),aR=a("a"),eZe=o("Wav2Vec2PhonemeCTCTokenizer"),oZe=o(" (Wav2Vec2Phoneme model)"),rZe=l(),Os=a("li"),aY=a("strong"),tZe=o("xglm"),aZe=o(" \u2014 "),nR=a("a"),nZe=o("XGLMTokenizer"),sZe=o(" or "),sR=a("a"),lZe=o("XGLMTokenizerFast"),iZe=o(" (XGLM model)"),dZe=l(),hh=a("li"),nY=a("strong"),cZe=o("xlm"),fZe=o(" \u2014 "),lR=a("a"),mZe=o("XLMTokenizer"),gZe=o(" (XLM model)"),hZe=l(),ph=a("li"),sY=a("strong"),pZe=o("xlm-prophetnet"),_Ze=o(" \u2014 "),iR=a("a"),uZe=o("XLMProphetNetTokenizer"),bZe=o(" (XLMProphetNet model)"),vZe=l(),Gs=a("li"),lY=a("strong"),TZe=o("xlm-roberta"),FZe=o(" \u2014 "),dR=a("a"),CZe=o("XLMRobertaTokenizer"),MZe=o(" or "),cR=a("a"),EZe=o("XLMRobertaTokenizerFast"),yZe=o(" (XLM-RoBERTa model)"),wZe=l(),Xs=a("li"),iY=a("strong"),AZe=o("xlnet"),LZe=o(" \u2014 "),fR=a("a"),BZe=o("XLNetTokenizer"),xZe=o(" or "),mR=a("a"),kZe=o("XLNetTokenizerFast"),RZe=o(" (XLNet model)"),SZe=l(),dY=a("p"),PZe=o("Examples:"),$Ze=l(),f(M4.$$.fragment),IZe=l(),_h=a("div"),f(E4.$$.fragment),jZe=l(),cY=a("p"),DZe=o("Register a new tokenizer in this mapping."),Yxe=l(),od=a("h2"),uh=a("a"),fY=a("span"),f(y4.$$.fragment),NZe=l(),mY=a("span"),qZe=o("AutoFeatureExtractor"),Kxe=l(),Uo=a("div"),f(w4.$$.fragment),OZe=l(),A4=a("p"),GZe=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),gR=a("a"),XZe=o("AutoFeatureExtractor.from_pretrained()"),VZe=o(" class method."),zZe=l(),L4=a("p"),WZe=o("This class cannot be instantiated directly using "),gY=a("code"),QZe=o("__init__()"),HZe=o(" (throws an error)."),UZe=l(),$e=a("div"),f(B4.$$.fragment),JZe=l(),hY=a("p"),YZe=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),KZe=l(),Qa=a("p"),ZZe=o("The feature extractor class to instantiate is selected based on the "),pY=a("code"),eeo=o("model_type"),oeo=o(` property of the config object
(either passed as an argument or loaded from `),_Y=a("code"),reo=o("pretrained_model_name_or_path"),teo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),uY=a("code"),aeo=o("pretrained_model_name_or_path"),neo=o(":"),seo=l(),ae=a("ul"),bh=a("li"),bY=a("strong"),leo=o("beit"),ieo=o(" \u2014 "),hR=a("a"),deo=o("BeitFeatureExtractor"),ceo=o(" (BEiT model)"),feo=l(),vh=a("li"),vY=a("strong"),meo=o("clip"),geo=o(" \u2014 "),pR=a("a"),heo=o("CLIPFeatureExtractor"),peo=o(" (CLIP model)"),_eo=l(),Th=a("li"),TY=a("strong"),ueo=o("convnext"),beo=o(" \u2014 "),_R=a("a"),veo=o("ConvNextFeatureExtractor"),Teo=o(" (ConvNext model)"),Feo=l(),Fh=a("li"),FY=a("strong"),Ceo=o("deit"),Meo=o(" \u2014 "),uR=a("a"),Eeo=o("DeiTFeatureExtractor"),yeo=o(" (DeiT model)"),weo=l(),Ch=a("li"),CY=a("strong"),Aeo=o("detr"),Leo=o(" \u2014 "),bR=a("a"),Beo=o("DetrFeatureExtractor"),xeo=o(" (DETR model)"),keo=l(),Mh=a("li"),MY=a("strong"),Reo=o("hubert"),Seo=o(" \u2014 "),vR=a("a"),Peo=o("Wav2Vec2FeatureExtractor"),$eo=o(" (Hubert model)"),Ieo=l(),Eh=a("li"),EY=a("strong"),jeo=o("layoutlmv2"),Deo=o(" \u2014 "),TR=a("a"),Neo=o("LayoutLMv2FeatureExtractor"),qeo=o(" (LayoutLMv2 model)"),Oeo=l(),yh=a("li"),yY=a("strong"),Geo=o("maskformer"),Xeo=o(" \u2014 "),FR=a("a"),Veo=o("MaskFormerFeatureExtractor"),zeo=o(" (MaskFormer model)"),Weo=l(),wh=a("li"),wY=a("strong"),Qeo=o("perceiver"),Heo=o(" \u2014 "),CR=a("a"),Ueo=o("PerceiverFeatureExtractor"),Jeo=o(" (Perceiver model)"),Yeo=l(),Ah=a("li"),AY=a("strong"),Keo=o("poolformer"),Zeo=o(" \u2014 "),MR=a("a"),eoo=o("PoolFormerFeatureExtractor"),ooo=o(" (PoolFormer model)"),roo=l(),Lh=a("li"),LY=a("strong"),too=o("segformer"),aoo=o(" \u2014 "),ER=a("a"),noo=o("SegformerFeatureExtractor"),soo=o(" (SegFormer model)"),loo=l(),Bh=a("li"),BY=a("strong"),ioo=o("speech_to_text"),doo=o(" \u2014 "),yR=a("a"),coo=o("Speech2TextFeatureExtractor"),foo=o(" (Speech2Text model)"),moo=l(),xh=a("li"),xY=a("strong"),goo=o("swin"),hoo=o(" \u2014 "),wR=a("a"),poo=o("ViTFeatureExtractor"),_oo=o(" (Swin model)"),uoo=l(),kh=a("li"),kY=a("strong"),boo=o("vit"),voo=o(" \u2014 "),AR=a("a"),Too=o("ViTFeatureExtractor"),Foo=o(" (ViT model)"),Coo=l(),Rh=a("li"),RY=a("strong"),Moo=o("vit_mae"),Eoo=o(" \u2014 "),LR=a("a"),yoo=o("ViTFeatureExtractor"),woo=o(" (ViTMAE model)"),Aoo=l(),Sh=a("li"),SY=a("strong"),Loo=o("wav2vec2"),Boo=o(" \u2014 "),BR=a("a"),xoo=o("Wav2Vec2FeatureExtractor"),koo=o(" (Wav2Vec2 model)"),Roo=l(),f(Ph.$$.fragment),Soo=l(),PY=a("p"),Poo=o("Examples:"),$oo=l(),f(x4.$$.fragment),Ioo=l(),$h=a("div"),f(k4.$$.fragment),joo=l(),$Y=a("p"),Doo=o("Register a new feature extractor for this class."),Zxe=l(),rd=a("h2"),Ih=a("a"),IY=a("span"),f(R4.$$.fragment),Noo=l(),jY=a("span"),qoo=o("AutoProcessor"),eke=l(),Jo=a("div"),f(S4.$$.fragment),Ooo=l(),P4=a("p"),Goo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),xR=a("a"),Xoo=o("AutoProcessor.from_pretrained()"),Voo=o(" class method."),zoo=l(),$4=a("p"),Woo=o("This class cannot be instantiated directly using "),DY=a("code"),Qoo=o("__init__()"),Hoo=o(" (throws an error)."),Uoo=l(),Ie=a("div"),f(I4.$$.fragment),Joo=l(),NY=a("p"),Yoo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Koo=l(),td=a("p"),Zoo=o("The processor class to instantiate is selected based on the "),qY=a("code"),ero=o("model_type"),oro=o(` property of the config object (either
passed as an argument or loaded from `),OY=a("code"),rro=o("pretrained_model_name_or_path"),tro=o(" if possible):"),aro=l(),Be=a("ul"),jh=a("li"),GY=a("strong"),nro=o("clip"),sro=o(" \u2014 "),kR=a("a"),lro=o("CLIPProcessor"),iro=o(" (CLIP model)"),dro=l(),Dh=a("li"),XY=a("strong"),cro=o("layoutlmv2"),fro=o(" \u2014 "),RR=a("a"),mro=o("LayoutLMv2Processor"),gro=o(" (LayoutLMv2 model)"),hro=l(),Nh=a("li"),VY=a("strong"),pro=o("layoutxlm"),_ro=o(" \u2014 "),SR=a("a"),uro=o("LayoutXLMProcessor"),bro=o(" (LayoutXLM model)"),vro=l(),qh=a("li"),zY=a("strong"),Tro=o("speech_to_text"),Fro=o(" \u2014 "),PR=a("a"),Cro=o("Speech2TextProcessor"),Mro=o(" (Speech2Text model)"),Ero=l(),Oh=a("li"),WY=a("strong"),yro=o("speech_to_text_2"),wro=o(" \u2014 "),$R=a("a"),Aro=o("Speech2Text2Processor"),Lro=o(" (Speech2Text2 model)"),Bro=l(),Gh=a("li"),QY=a("strong"),xro=o("trocr"),kro=o(" \u2014 "),IR=a("a"),Rro=o("TrOCRProcessor"),Sro=o(" (TrOCR model)"),Pro=l(),Xh=a("li"),HY=a("strong"),$ro=o("vision-text-dual-encoder"),Iro=o(" \u2014 "),jR=a("a"),jro=o("VisionTextDualEncoderProcessor"),Dro=o(" (VisionTextDualEncoder model)"),Nro=l(),Vh=a("li"),UY=a("strong"),qro=o("wav2vec2"),Oro=o(" \u2014 "),DR=a("a"),Gro=o("Wav2Vec2Processor"),Xro=o(" (Wav2Vec2 model)"),Vro=l(),f(zh.$$.fragment),zro=l(),JY=a("p"),Wro=o("Examples:"),Qro=l(),f(j4.$$.fragment),Hro=l(),Wh=a("div"),f(D4.$$.fragment),Uro=l(),YY=a("p"),Jro=o("Register a new processor for this class."),oke=l(),ad=a("h2"),Qh=a("a"),KY=a("span"),f(N4.$$.fragment),Yro=l(),ZY=a("span"),Kro=o("AutoModel"),rke=l(),Yo=a("div"),f(q4.$$.fragment),Zro=l(),nd=a("p"),eto=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),eK=a("code"),oto=o("from_pretrained()"),rto=o("class method or the "),oK=a("code"),tto=o("from_config()"),ato=o(`class
method.`),nto=l(),O4=a("p"),sto=o("This class cannot be instantiated directly using "),rK=a("code"),lto=o("__init__()"),ito=o(" (throws an error)."),dto=l(),Wr=a("div"),f(G4.$$.fragment),cto=l(),tK=a("p"),fto=o("Instantiates one of the base model classes of the library from a configuration."),mto=l(),sd=a("p"),gto=o(`Note:
Loading a model from its configuration file does `),aK=a("strong"),hto=o("not"),pto=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nK=a("code"),_to=o("from_pretrained()"),uto=o("to load the model weights."),bto=l(),sK=a("p"),vto=o("Examples:"),Tto=l(),f(X4.$$.fragment),Fto=l(),je=a("div"),f(V4.$$.fragment),Cto=l(),lK=a("p"),Mto=o("Instantiate one of the base model classes of the library from a pretrained model."),Eto=l(),Ha=a("p"),yto=o("The model class to instantiate is selected based on the "),iK=a("code"),wto=o("model_type"),Ato=o(` property of the config object (either
passed as an argument or loaded from `),dK=a("code"),Lto=o("pretrained_model_name_or_path"),Bto=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cK=a("code"),xto=o("pretrained_model_name_or_path"),kto=o(":"),Rto=l(),F=a("ul"),Hh=a("li"),fK=a("strong"),Sto=o("albert"),Pto=o(" \u2014 "),NR=a("a"),$to=o("AlbertModel"),Ito=o(" (ALBERT model)"),jto=l(),Uh=a("li"),mK=a("strong"),Dto=o("bart"),Nto=o(" \u2014 "),qR=a("a"),qto=o("BartModel"),Oto=o(" (BART model)"),Gto=l(),Jh=a("li"),gK=a("strong"),Xto=o("beit"),Vto=o(" \u2014 "),OR=a("a"),zto=o("BeitModel"),Wto=o(" (BEiT model)"),Qto=l(),Yh=a("li"),hK=a("strong"),Hto=o("bert"),Uto=o(" \u2014 "),GR=a("a"),Jto=o("BertModel"),Yto=o(" (BERT model)"),Kto=l(),Kh=a("li"),pK=a("strong"),Zto=o("bert-generation"),eao=o(" \u2014 "),XR=a("a"),oao=o("BertGenerationEncoder"),rao=o(" (Bert Generation model)"),tao=l(),Zh=a("li"),_K=a("strong"),aao=o("big_bird"),nao=o(" \u2014 "),VR=a("a"),sao=o("BigBirdModel"),lao=o(" (BigBird model)"),iao=l(),ep=a("li"),uK=a("strong"),dao=o("bigbird_pegasus"),cao=o(" \u2014 "),zR=a("a"),fao=o("BigBirdPegasusModel"),mao=o(" (BigBirdPegasus model)"),gao=l(),op=a("li"),bK=a("strong"),hao=o("blenderbot"),pao=o(" \u2014 "),WR=a("a"),_ao=o("BlenderbotModel"),uao=o(" (Blenderbot model)"),bao=l(),rp=a("li"),vK=a("strong"),vao=o("blenderbot-small"),Tao=o(" \u2014 "),QR=a("a"),Fao=o("BlenderbotSmallModel"),Cao=o(" (BlenderbotSmall model)"),Mao=l(),tp=a("li"),TK=a("strong"),Eao=o("camembert"),yao=o(" \u2014 "),HR=a("a"),wao=o("CamembertModel"),Aao=o(" (CamemBERT model)"),Lao=l(),ap=a("li"),FK=a("strong"),Bao=o("canine"),xao=o(" \u2014 "),UR=a("a"),kao=o("CanineModel"),Rao=o(" (Canine model)"),Sao=l(),np=a("li"),CK=a("strong"),Pao=o("clip"),$ao=o(" \u2014 "),JR=a("a"),Iao=o("CLIPModel"),jao=o(" (CLIP model)"),Dao=l(),sp=a("li"),MK=a("strong"),Nao=o("convbert"),qao=o(" \u2014 "),YR=a("a"),Oao=o("ConvBertModel"),Gao=o(" (ConvBERT model)"),Xao=l(),lp=a("li"),EK=a("strong"),Vao=o("convnext"),zao=o(" \u2014 "),KR=a("a"),Wao=o("ConvNextModel"),Qao=o(" (ConvNext model)"),Hao=l(),ip=a("li"),yK=a("strong"),Uao=o("ctrl"),Jao=o(" \u2014 "),ZR=a("a"),Yao=o("CTRLModel"),Kao=o(" (CTRL model)"),Zao=l(),dp=a("li"),wK=a("strong"),eno=o("data2vec-audio"),ono=o(" \u2014 "),eS=a("a"),rno=o("Data2VecAudioModel"),tno=o(" (Data2VecAudio model)"),ano=l(),cp=a("li"),AK=a("strong"),nno=o("data2vec-text"),sno=o(" \u2014 "),oS=a("a"),lno=o("Data2VecTextModel"),ino=o(" (Data2VecText model)"),dno=l(),fp=a("li"),LK=a("strong"),cno=o("deberta"),fno=o(" \u2014 "),rS=a("a"),mno=o("DebertaModel"),gno=o(" (DeBERTa model)"),hno=l(),mp=a("li"),BK=a("strong"),pno=o("deberta-v2"),_no=o(" \u2014 "),tS=a("a"),uno=o("DebertaV2Model"),bno=o(" (DeBERTa-v2 model)"),vno=l(),gp=a("li"),xK=a("strong"),Tno=o("deit"),Fno=o(" \u2014 "),aS=a("a"),Cno=o("DeiTModel"),Mno=o(" (DeiT model)"),Eno=l(),hp=a("li"),kK=a("strong"),yno=o("detr"),wno=o(" \u2014 "),nS=a("a"),Ano=o("DetrModel"),Lno=o(" (DETR model)"),Bno=l(),pp=a("li"),RK=a("strong"),xno=o("distilbert"),kno=o(" \u2014 "),sS=a("a"),Rno=o("DistilBertModel"),Sno=o(" (DistilBERT model)"),Pno=l(),_p=a("li"),SK=a("strong"),$no=o("dpr"),Ino=o(" \u2014 "),lS=a("a"),jno=o("DPRQuestionEncoder"),Dno=o(" (DPR model)"),Nno=l(),up=a("li"),PK=a("strong"),qno=o("electra"),Ono=o(" \u2014 "),iS=a("a"),Gno=o("ElectraModel"),Xno=o(" (ELECTRA model)"),Vno=l(),bp=a("li"),$K=a("strong"),zno=o("flaubert"),Wno=o(" \u2014 "),dS=a("a"),Qno=o("FlaubertModel"),Hno=o(" (FlauBERT model)"),Uno=l(),vp=a("li"),IK=a("strong"),Jno=o("fnet"),Yno=o(" \u2014 "),cS=a("a"),Kno=o("FNetModel"),Zno=o(" (FNet model)"),eso=l(),Tp=a("li"),jK=a("strong"),oso=o("fsmt"),rso=o(" \u2014 "),fS=a("a"),tso=o("FSMTModel"),aso=o(" (FairSeq Machine-Translation model)"),nso=l(),Vs=a("li"),DK=a("strong"),sso=o("funnel"),lso=o(" \u2014 "),mS=a("a"),iso=o("FunnelModel"),dso=o(" or "),gS=a("a"),cso=o("FunnelBaseModel"),fso=o(" (Funnel Transformer model)"),mso=l(),Fp=a("li"),NK=a("strong"),gso=o("gpt2"),hso=o(" \u2014 "),hS=a("a"),pso=o("GPT2Model"),_so=o(" (OpenAI GPT-2 model)"),uso=l(),Cp=a("li"),qK=a("strong"),bso=o("gpt_neo"),vso=o(" \u2014 "),pS=a("a"),Tso=o("GPTNeoModel"),Fso=o(" (GPT Neo model)"),Cso=l(),Mp=a("li"),OK=a("strong"),Mso=o("gptj"),Eso=o(" \u2014 "),_S=a("a"),yso=o("GPTJModel"),wso=o(" (GPT-J model)"),Aso=l(),Ep=a("li"),GK=a("strong"),Lso=o("hubert"),Bso=o(" \u2014 "),uS=a("a"),xso=o("HubertModel"),kso=o(" (Hubert model)"),Rso=l(),yp=a("li"),XK=a("strong"),Sso=o("ibert"),Pso=o(" \u2014 "),bS=a("a"),$so=o("IBertModel"),Iso=o(" (I-BERT model)"),jso=l(),wp=a("li"),VK=a("strong"),Dso=o("imagegpt"),Nso=o(" \u2014 "),vS=a("a"),qso=o("ImageGPTModel"),Oso=o(" (ImageGPT model)"),Gso=l(),Ap=a("li"),zK=a("strong"),Xso=o("layoutlm"),Vso=o(" \u2014 "),TS=a("a"),zso=o("LayoutLMModel"),Wso=o(" (LayoutLM model)"),Qso=l(),Lp=a("li"),WK=a("strong"),Hso=o("layoutlmv2"),Uso=o(" \u2014 "),FS=a("a"),Jso=o("LayoutLMv2Model"),Yso=o(" (LayoutLMv2 model)"),Kso=l(),Bp=a("li"),QK=a("strong"),Zso=o("led"),elo=o(" \u2014 "),CS=a("a"),olo=o("LEDModel"),rlo=o(" (LED model)"),tlo=l(),xp=a("li"),HK=a("strong"),alo=o("longformer"),nlo=o(" \u2014 "),MS=a("a"),slo=o("LongformerModel"),llo=o(" (Longformer model)"),ilo=l(),kp=a("li"),UK=a("strong"),dlo=o("luke"),clo=o(" \u2014 "),ES=a("a"),flo=o("LukeModel"),mlo=o(" (LUKE model)"),glo=l(),Rp=a("li"),JK=a("strong"),hlo=o("lxmert"),plo=o(" \u2014 "),yS=a("a"),_lo=o("LxmertModel"),ulo=o(" (LXMERT model)"),blo=l(),Sp=a("li"),YK=a("strong"),vlo=o("m2m_100"),Tlo=o(" \u2014 "),wS=a("a"),Flo=o("M2M100Model"),Clo=o(" (M2M100 model)"),Mlo=l(),Pp=a("li"),KK=a("strong"),Elo=o("marian"),ylo=o(" \u2014 "),AS=a("a"),wlo=o("MarianModel"),Alo=o(" (Marian model)"),Llo=l(),$p=a("li"),ZK=a("strong"),Blo=o("maskformer"),xlo=o(" \u2014 "),LS=a("a"),klo=o("MaskFormerModel"),Rlo=o(" (MaskFormer model)"),Slo=l(),Ip=a("li"),eZ=a("strong"),Plo=o("mbart"),$lo=o(" \u2014 "),BS=a("a"),Ilo=o("MBartModel"),jlo=o(" (mBART model)"),Dlo=l(),jp=a("li"),oZ=a("strong"),Nlo=o("megatron-bert"),qlo=o(" \u2014 "),xS=a("a"),Olo=o("MegatronBertModel"),Glo=o(" (MegatronBert model)"),Xlo=l(),Dp=a("li"),rZ=a("strong"),Vlo=o("mobilebert"),zlo=o(" \u2014 "),kS=a("a"),Wlo=o("MobileBertModel"),Qlo=o(" (MobileBERT model)"),Hlo=l(),Np=a("li"),tZ=a("strong"),Ulo=o("mpnet"),Jlo=o(" \u2014 "),RS=a("a"),Ylo=o("MPNetModel"),Klo=o(" (MPNet model)"),Zlo=l(),qp=a("li"),aZ=a("strong"),eio=o("mt5"),oio=o(" \u2014 "),SS=a("a"),rio=o("MT5Model"),tio=o(" (mT5 model)"),aio=l(),Op=a("li"),nZ=a("strong"),nio=o("nystromformer"),sio=o(" \u2014 "),PS=a("a"),lio=o("NystromformerModel"),iio=o(" (Nystromformer model)"),dio=l(),Gp=a("li"),sZ=a("strong"),cio=o("openai-gpt"),fio=o(" \u2014 "),$S=a("a"),mio=o("OpenAIGPTModel"),gio=o(" (OpenAI GPT model)"),hio=l(),Xp=a("li"),lZ=a("strong"),pio=o("pegasus"),_io=o(" \u2014 "),IS=a("a"),uio=o("PegasusModel"),bio=o(" (Pegasus model)"),vio=l(),Vp=a("li"),iZ=a("strong"),Tio=o("perceiver"),Fio=o(" \u2014 "),jS=a("a"),Cio=o("PerceiverModel"),Mio=o(" (Perceiver model)"),Eio=l(),zp=a("li"),dZ=a("strong"),yio=o("plbart"),wio=o(" \u2014 "),DS=a("a"),Aio=o("PLBartModel"),Lio=o(" (PLBart model)"),Bio=l(),Wp=a("li"),cZ=a("strong"),xio=o("poolformer"),kio=o(" \u2014 "),NS=a("a"),Rio=o("PoolFormerModel"),Sio=o(" (PoolFormer model)"),Pio=l(),Qp=a("li"),fZ=a("strong"),$io=o("prophetnet"),Iio=o(" \u2014 "),qS=a("a"),jio=o("ProphetNetModel"),Dio=o(" (ProphetNet model)"),Nio=l(),Hp=a("li"),mZ=a("strong"),qio=o("qdqbert"),Oio=o(" \u2014 "),OS=a("a"),Gio=o("QDQBertModel"),Xio=o(" (QDQBert model)"),Vio=l(),Up=a("li"),gZ=a("strong"),zio=o("reformer"),Wio=o(" \u2014 "),GS=a("a"),Qio=o("ReformerModel"),Hio=o(" (Reformer model)"),Uio=l(),Jp=a("li"),hZ=a("strong"),Jio=o("rembert"),Yio=o(" \u2014 "),XS=a("a"),Kio=o("RemBertModel"),Zio=o(" (RemBERT model)"),edo=l(),Yp=a("li"),pZ=a("strong"),odo=o("retribert"),rdo=o(" \u2014 "),VS=a("a"),tdo=o("RetriBertModel"),ado=o(" (RetriBERT model)"),ndo=l(),Kp=a("li"),_Z=a("strong"),sdo=o("roberta"),ldo=o(" \u2014 "),zS=a("a"),ido=o("RobertaModel"),ddo=o(" (RoBERTa model)"),cdo=l(),Zp=a("li"),uZ=a("strong"),fdo=o("roformer"),mdo=o(" \u2014 "),WS=a("a"),gdo=o("RoFormerModel"),hdo=o(" (RoFormer model)"),pdo=l(),e_=a("li"),bZ=a("strong"),_do=o("segformer"),udo=o(" \u2014 "),QS=a("a"),bdo=o("SegformerModel"),vdo=o(" (SegFormer model)"),Tdo=l(),o_=a("li"),vZ=a("strong"),Fdo=o("sew"),Cdo=o(" \u2014 "),HS=a("a"),Mdo=o("SEWModel"),Edo=o(" (SEW model)"),ydo=l(),r_=a("li"),TZ=a("strong"),wdo=o("sew-d"),Ado=o(" \u2014 "),US=a("a"),Ldo=o("SEWDModel"),Bdo=o(" (SEW-D model)"),xdo=l(),t_=a("li"),FZ=a("strong"),kdo=o("speech_to_text"),Rdo=o(" \u2014 "),JS=a("a"),Sdo=o("Speech2TextModel"),Pdo=o(" (Speech2Text model)"),$do=l(),a_=a("li"),CZ=a("strong"),Ido=o("splinter"),jdo=o(" \u2014 "),YS=a("a"),Ddo=o("SplinterModel"),Ndo=o(" (Splinter model)"),qdo=l(),n_=a("li"),MZ=a("strong"),Odo=o("squeezebert"),Gdo=o(" \u2014 "),KS=a("a"),Xdo=o("SqueezeBertModel"),Vdo=o(" (SqueezeBERT model)"),zdo=l(),s_=a("li"),EZ=a("strong"),Wdo=o("swin"),Qdo=o(" \u2014 "),ZS=a("a"),Hdo=o("SwinModel"),Udo=o(" (Swin model)"),Jdo=l(),l_=a("li"),yZ=a("strong"),Ydo=o("t5"),Kdo=o(" \u2014 "),eP=a("a"),Zdo=o("T5Model"),eco=o(" (T5 model)"),oco=l(),i_=a("li"),wZ=a("strong"),rco=o("tapas"),tco=o(" \u2014 "),oP=a("a"),aco=o("TapasModel"),nco=o(" (TAPAS model)"),sco=l(),d_=a("li"),AZ=a("strong"),lco=o("transfo-xl"),ico=o(" \u2014 "),rP=a("a"),dco=o("TransfoXLModel"),cco=o(" (Transformer-XL model)"),fco=l(),c_=a("li"),LZ=a("strong"),mco=o("unispeech"),gco=o(" \u2014 "),tP=a("a"),hco=o("UniSpeechModel"),pco=o(" (UniSpeech model)"),_co=l(),f_=a("li"),BZ=a("strong"),uco=o("unispeech-sat"),bco=o(" \u2014 "),aP=a("a"),vco=o("UniSpeechSatModel"),Tco=o(" (UniSpeechSat model)"),Fco=l(),m_=a("li"),xZ=a("strong"),Cco=o("vilt"),Mco=o(" \u2014 "),nP=a("a"),Eco=o("ViltModel"),yco=o(" (ViLT model)"),wco=l(),g_=a("li"),kZ=a("strong"),Aco=o("vision-text-dual-encoder"),Lco=o(" \u2014 "),sP=a("a"),Bco=o("VisionTextDualEncoderModel"),xco=o(" (VisionTextDualEncoder model)"),kco=l(),h_=a("li"),RZ=a("strong"),Rco=o("visual_bert"),Sco=o(" \u2014 "),lP=a("a"),Pco=o("VisualBertModel"),$co=o(" (VisualBert model)"),Ico=l(),p_=a("li"),SZ=a("strong"),jco=o("vit"),Dco=o(" \u2014 "),iP=a("a"),Nco=o("ViTModel"),qco=o(" (ViT model)"),Oco=l(),__=a("li"),PZ=a("strong"),Gco=o("vit_mae"),Xco=o(" \u2014 "),dP=a("a"),Vco=o("ViTMAEModel"),zco=o(" (ViTMAE model)"),Wco=l(),u_=a("li"),$Z=a("strong"),Qco=o("wav2vec2"),Hco=o(" \u2014 "),cP=a("a"),Uco=o("Wav2Vec2Model"),Jco=o(" (Wav2Vec2 model)"),Yco=l(),b_=a("li"),IZ=a("strong"),Kco=o("wavlm"),Zco=o(" \u2014 "),fP=a("a"),efo=o("WavLMModel"),ofo=o(" (WavLM model)"),rfo=l(),v_=a("li"),jZ=a("strong"),tfo=o("xglm"),afo=o(" \u2014 "),mP=a("a"),nfo=o("XGLMModel"),sfo=o(" (XGLM model)"),lfo=l(),T_=a("li"),DZ=a("strong"),ifo=o("xlm"),dfo=o(" \u2014 "),gP=a("a"),cfo=o("XLMModel"),ffo=o(" (XLM model)"),mfo=l(),F_=a("li"),NZ=a("strong"),gfo=o("xlm-prophetnet"),hfo=o(" \u2014 "),hP=a("a"),pfo=o("XLMProphetNetModel"),_fo=o(" (XLMProphetNet model)"),ufo=l(),C_=a("li"),qZ=a("strong"),bfo=o("xlm-roberta"),vfo=o(" \u2014 "),pP=a("a"),Tfo=o("XLMRobertaModel"),Ffo=o(" (XLM-RoBERTa model)"),Cfo=l(),M_=a("li"),OZ=a("strong"),Mfo=o("xlm-roberta-xl"),Efo=o(" \u2014 "),_P=a("a"),yfo=o("XLMRobertaXLModel"),wfo=o(" (XLM-RoBERTa-XL model)"),Afo=l(),E_=a("li"),GZ=a("strong"),Lfo=o("xlnet"),Bfo=o(" \u2014 "),uP=a("a"),xfo=o("XLNetModel"),kfo=o(" (XLNet model)"),Rfo=l(),y_=a("li"),XZ=a("strong"),Sfo=o("yoso"),Pfo=o(" \u2014 "),bP=a("a"),$fo=o("YosoModel"),Ifo=o(" (YOSO model)"),jfo=l(),w_=a("p"),Dfo=o("The model is set in evaluation mode by default using "),VZ=a("code"),Nfo=o("model.eval()"),qfo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zZ=a("code"),Ofo=o("model.train()"),Gfo=l(),WZ=a("p"),Xfo=o("Examples:"),Vfo=l(),f(z4.$$.fragment),tke=l(),ld=a("h2"),A_=a("a"),QZ=a("span"),f(W4.$$.fragment),zfo=l(),HZ=a("span"),Wfo=o("AutoModelForPreTraining"),ake=l(),Ko=a("div"),f(Q4.$$.fragment),Qfo=l(),id=a("p"),Hfo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),UZ=a("code"),Ufo=o("from_pretrained()"),Jfo=o("class method or the "),JZ=a("code"),Yfo=o("from_config()"),Kfo=o(`class
method.`),Zfo=l(),H4=a("p"),emo=o("This class cannot be instantiated directly using "),YZ=a("code"),omo=o("__init__()"),rmo=o(" (throws an error)."),tmo=l(),Qr=a("div"),f(U4.$$.fragment),amo=l(),KZ=a("p"),nmo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),smo=l(),dd=a("p"),lmo=o(`Note:
Loading a model from its configuration file does `),ZZ=a("strong"),imo=o("not"),dmo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eee=a("code"),cmo=o("from_pretrained()"),fmo=o("to load the model weights."),mmo=l(),oee=a("p"),gmo=o("Examples:"),hmo=l(),f(J4.$$.fragment),pmo=l(),De=a("div"),f(Y4.$$.fragment),_mo=l(),ree=a("p"),umo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),bmo=l(),Ua=a("p"),vmo=o("The model class to instantiate is selected based on the "),tee=a("code"),Tmo=o("model_type"),Fmo=o(` property of the config object (either
passed as an argument or loaded from `),aee=a("code"),Cmo=o("pretrained_model_name_or_path"),Mmo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nee=a("code"),Emo=o("pretrained_model_name_or_path"),ymo=o(":"),wmo=l(),k=a("ul"),L_=a("li"),see=a("strong"),Amo=o("albert"),Lmo=o(" \u2014 "),vP=a("a"),Bmo=o("AlbertForPreTraining"),xmo=o(" (ALBERT model)"),kmo=l(),B_=a("li"),lee=a("strong"),Rmo=o("bart"),Smo=o(" \u2014 "),TP=a("a"),Pmo=o("BartForConditionalGeneration"),$mo=o(" (BART model)"),Imo=l(),x_=a("li"),iee=a("strong"),jmo=o("bert"),Dmo=o(" \u2014 "),FP=a("a"),Nmo=o("BertForPreTraining"),qmo=o(" (BERT model)"),Omo=l(),k_=a("li"),dee=a("strong"),Gmo=o("big_bird"),Xmo=o(" \u2014 "),CP=a("a"),Vmo=o("BigBirdForPreTraining"),zmo=o(" (BigBird model)"),Wmo=l(),R_=a("li"),cee=a("strong"),Qmo=o("camembert"),Hmo=o(" \u2014 "),MP=a("a"),Umo=o("CamembertForMaskedLM"),Jmo=o(" (CamemBERT model)"),Ymo=l(),S_=a("li"),fee=a("strong"),Kmo=o("ctrl"),Zmo=o(" \u2014 "),EP=a("a"),ego=o("CTRLLMHeadModel"),ogo=o(" (CTRL model)"),rgo=l(),P_=a("li"),mee=a("strong"),tgo=o("data2vec-text"),ago=o(" \u2014 "),yP=a("a"),ngo=o("Data2VecTextForMaskedLM"),sgo=o(" (Data2VecText model)"),lgo=l(),$_=a("li"),gee=a("strong"),igo=o("deberta"),dgo=o(" \u2014 "),wP=a("a"),cgo=o("DebertaForMaskedLM"),fgo=o(" (DeBERTa model)"),mgo=l(),I_=a("li"),hee=a("strong"),ggo=o("deberta-v2"),hgo=o(" \u2014 "),AP=a("a"),pgo=o("DebertaV2ForMaskedLM"),_go=o(" (DeBERTa-v2 model)"),ugo=l(),j_=a("li"),pee=a("strong"),bgo=o("distilbert"),vgo=o(" \u2014 "),LP=a("a"),Tgo=o("DistilBertForMaskedLM"),Fgo=o(" (DistilBERT model)"),Cgo=l(),D_=a("li"),_ee=a("strong"),Mgo=o("electra"),Ego=o(" \u2014 "),BP=a("a"),ygo=o("ElectraForPreTraining"),wgo=o(" (ELECTRA model)"),Ago=l(),N_=a("li"),uee=a("strong"),Lgo=o("flaubert"),Bgo=o(" \u2014 "),xP=a("a"),xgo=o("FlaubertWithLMHeadModel"),kgo=o(" (FlauBERT model)"),Rgo=l(),q_=a("li"),bee=a("strong"),Sgo=o("fnet"),Pgo=o(" \u2014 "),kP=a("a"),$go=o("FNetForPreTraining"),Igo=o(" (FNet model)"),jgo=l(),O_=a("li"),vee=a("strong"),Dgo=o("fsmt"),Ngo=o(" \u2014 "),RP=a("a"),qgo=o("FSMTForConditionalGeneration"),Ogo=o(" (FairSeq Machine-Translation model)"),Ggo=l(),G_=a("li"),Tee=a("strong"),Xgo=o("funnel"),Vgo=o(" \u2014 "),SP=a("a"),zgo=o("FunnelForPreTraining"),Wgo=o(" (Funnel Transformer model)"),Qgo=l(),X_=a("li"),Fee=a("strong"),Hgo=o("gpt2"),Ugo=o(" \u2014 "),PP=a("a"),Jgo=o("GPT2LMHeadModel"),Ygo=o(" (OpenAI GPT-2 model)"),Kgo=l(),V_=a("li"),Cee=a("strong"),Zgo=o("ibert"),eho=o(" \u2014 "),$P=a("a"),oho=o("IBertForMaskedLM"),rho=o(" (I-BERT model)"),tho=l(),z_=a("li"),Mee=a("strong"),aho=o("layoutlm"),nho=o(" \u2014 "),IP=a("a"),sho=o("LayoutLMForMaskedLM"),lho=o(" (LayoutLM model)"),iho=l(),W_=a("li"),Eee=a("strong"),dho=o("longformer"),cho=o(" \u2014 "),jP=a("a"),fho=o("LongformerForMaskedLM"),mho=o(" (Longformer model)"),gho=l(),Q_=a("li"),yee=a("strong"),hho=o("lxmert"),pho=o(" \u2014 "),DP=a("a"),_ho=o("LxmertForPreTraining"),uho=o(" (LXMERT model)"),bho=l(),H_=a("li"),wee=a("strong"),vho=o("megatron-bert"),Tho=o(" \u2014 "),NP=a("a"),Fho=o("MegatronBertForPreTraining"),Cho=o(" (MegatronBert model)"),Mho=l(),U_=a("li"),Aee=a("strong"),Eho=o("mobilebert"),yho=o(" \u2014 "),qP=a("a"),who=o("MobileBertForPreTraining"),Aho=o(" (MobileBERT model)"),Lho=l(),J_=a("li"),Lee=a("strong"),Bho=o("mpnet"),xho=o(" \u2014 "),OP=a("a"),kho=o("MPNetForMaskedLM"),Rho=o(" (MPNet model)"),Sho=l(),Y_=a("li"),Bee=a("strong"),Pho=o("openai-gpt"),$ho=o(" \u2014 "),GP=a("a"),Iho=o("OpenAIGPTLMHeadModel"),jho=o(" (OpenAI GPT model)"),Dho=l(),K_=a("li"),xee=a("strong"),Nho=o("retribert"),qho=o(" \u2014 "),XP=a("a"),Oho=o("RetriBertModel"),Gho=o(" (RetriBERT model)"),Xho=l(),Z_=a("li"),kee=a("strong"),Vho=o("roberta"),zho=o(" \u2014 "),VP=a("a"),Who=o("RobertaForMaskedLM"),Qho=o(" (RoBERTa model)"),Hho=l(),eu=a("li"),Ree=a("strong"),Uho=o("squeezebert"),Jho=o(" \u2014 "),zP=a("a"),Yho=o("SqueezeBertForMaskedLM"),Kho=o(" (SqueezeBERT model)"),Zho=l(),ou=a("li"),See=a("strong"),epo=o("t5"),opo=o(" \u2014 "),WP=a("a"),rpo=o("T5ForConditionalGeneration"),tpo=o(" (T5 model)"),apo=l(),ru=a("li"),Pee=a("strong"),npo=o("tapas"),spo=o(" \u2014 "),QP=a("a"),lpo=o("TapasForMaskedLM"),ipo=o(" (TAPAS model)"),dpo=l(),tu=a("li"),$ee=a("strong"),cpo=o("transfo-xl"),fpo=o(" \u2014 "),HP=a("a"),mpo=o("TransfoXLLMHeadModel"),gpo=o(" (Transformer-XL model)"),hpo=l(),au=a("li"),Iee=a("strong"),ppo=o("unispeech"),_po=o(" \u2014 "),UP=a("a"),upo=o("UniSpeechForPreTraining"),bpo=o(" (UniSpeech model)"),vpo=l(),nu=a("li"),jee=a("strong"),Tpo=o("unispeech-sat"),Fpo=o(" \u2014 "),JP=a("a"),Cpo=o("UniSpeechSatForPreTraining"),Mpo=o(" (UniSpeechSat model)"),Epo=l(),su=a("li"),Dee=a("strong"),ypo=o("visual_bert"),wpo=o(" \u2014 "),YP=a("a"),Apo=o("VisualBertForPreTraining"),Lpo=o(" (VisualBert model)"),Bpo=l(),lu=a("li"),Nee=a("strong"),xpo=o("vit_mae"),kpo=o(" \u2014 "),KP=a("a"),Rpo=o("ViTMAEForPreTraining"),Spo=o(" (ViTMAE model)"),Ppo=l(),iu=a("li"),qee=a("strong"),$po=o("wav2vec2"),Ipo=o(" \u2014 "),ZP=a("a"),jpo=o("Wav2Vec2ForPreTraining"),Dpo=o(" (Wav2Vec2 model)"),Npo=l(),du=a("li"),Oee=a("strong"),qpo=o("xlm"),Opo=o(" \u2014 "),e$=a("a"),Gpo=o("XLMWithLMHeadModel"),Xpo=o(" (XLM model)"),Vpo=l(),cu=a("li"),Gee=a("strong"),zpo=o("xlm-roberta"),Wpo=o(" \u2014 "),o$=a("a"),Qpo=o("XLMRobertaForMaskedLM"),Hpo=o(" (XLM-RoBERTa model)"),Upo=l(),fu=a("li"),Xee=a("strong"),Jpo=o("xlm-roberta-xl"),Ypo=o(" \u2014 "),r$=a("a"),Kpo=o("XLMRobertaXLForMaskedLM"),Zpo=o(" (XLM-RoBERTa-XL model)"),e_o=l(),mu=a("li"),Vee=a("strong"),o_o=o("xlnet"),r_o=o(" \u2014 "),t$=a("a"),t_o=o("XLNetLMHeadModel"),a_o=o(" (XLNet model)"),n_o=l(),gu=a("p"),s_o=o("The model is set in evaluation mode by default using "),zee=a("code"),l_o=o("model.eval()"),i_o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wee=a("code"),d_o=o("model.train()"),c_o=l(),Qee=a("p"),f_o=o("Examples:"),m_o=l(),f(K4.$$.fragment),nke=l(),cd=a("h2"),hu=a("a"),Hee=a("span"),f(Z4.$$.fragment),g_o=l(),Uee=a("span"),h_o=o("AutoModelForCausalLM"),ske=l(),Zo=a("div"),f(eE.$$.fragment),p_o=l(),fd=a("p"),__o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Jee=a("code"),u_o=o("from_pretrained()"),b_o=o("class method or the "),Yee=a("code"),v_o=o("from_config()"),T_o=o(`class
method.`),F_o=l(),oE=a("p"),C_o=o("This class cannot be instantiated directly using "),Kee=a("code"),M_o=o("__init__()"),E_o=o(" (throws an error)."),y_o=l(),Hr=a("div"),f(rE.$$.fragment),w_o=l(),Zee=a("p"),A_o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),L_o=l(),md=a("p"),B_o=o(`Note:
Loading a model from its configuration file does `),eoe=a("strong"),x_o=o("not"),k_o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ooe=a("code"),R_o=o("from_pretrained()"),S_o=o("to load the model weights."),P_o=l(),roe=a("p"),$_o=o("Examples:"),I_o=l(),f(tE.$$.fragment),j_o=l(),Ne=a("div"),f(aE.$$.fragment),D_o=l(),toe=a("p"),N_o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),q_o=l(),Ja=a("p"),O_o=o("The model class to instantiate is selected based on the "),aoe=a("code"),G_o=o("model_type"),X_o=o(` property of the config object (either
passed as an argument or loaded from `),noe=a("code"),V_o=o("pretrained_model_name_or_path"),z_o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),soe=a("code"),W_o=o("pretrained_model_name_or_path"),Q_o=o(":"),H_o=l(),$=a("ul"),pu=a("li"),loe=a("strong"),U_o=o("bart"),J_o=o(" \u2014 "),a$=a("a"),Y_o=o("BartForCausalLM"),K_o=o(" (BART model)"),Z_o=l(),_u=a("li"),ioe=a("strong"),euo=o("bert"),ouo=o(" \u2014 "),n$=a("a"),ruo=o("BertLMHeadModel"),tuo=o(" (BERT model)"),auo=l(),uu=a("li"),doe=a("strong"),nuo=o("bert-generation"),suo=o(" \u2014 "),s$=a("a"),luo=o("BertGenerationDecoder"),iuo=o(" (Bert Generation model)"),duo=l(),bu=a("li"),coe=a("strong"),cuo=o("big_bird"),fuo=o(" \u2014 "),l$=a("a"),muo=o("BigBirdForCausalLM"),guo=o(" (BigBird model)"),huo=l(),vu=a("li"),foe=a("strong"),puo=o("bigbird_pegasus"),_uo=o(" \u2014 "),i$=a("a"),uuo=o("BigBirdPegasusForCausalLM"),buo=o(" (BigBirdPegasus model)"),vuo=l(),Tu=a("li"),moe=a("strong"),Tuo=o("blenderbot"),Fuo=o(" \u2014 "),d$=a("a"),Cuo=o("BlenderbotForCausalLM"),Muo=o(" (Blenderbot model)"),Euo=l(),Fu=a("li"),goe=a("strong"),yuo=o("blenderbot-small"),wuo=o(" \u2014 "),c$=a("a"),Auo=o("BlenderbotSmallForCausalLM"),Luo=o(" (BlenderbotSmall model)"),Buo=l(),Cu=a("li"),hoe=a("strong"),xuo=o("camembert"),kuo=o(" \u2014 "),f$=a("a"),Ruo=o("CamembertForCausalLM"),Suo=o(" (CamemBERT model)"),Puo=l(),Mu=a("li"),poe=a("strong"),$uo=o("ctrl"),Iuo=o(" \u2014 "),m$=a("a"),juo=o("CTRLLMHeadModel"),Duo=o(" (CTRL model)"),Nuo=l(),Eu=a("li"),_oe=a("strong"),quo=o("data2vec-text"),Ouo=o(" \u2014 "),g$=a("a"),Guo=o("Data2VecTextForCausalLM"),Xuo=o(" (Data2VecText model)"),Vuo=l(),yu=a("li"),uoe=a("strong"),zuo=o("electra"),Wuo=o(" \u2014 "),h$=a("a"),Quo=o("ElectraForCausalLM"),Huo=o(" (ELECTRA model)"),Uuo=l(),wu=a("li"),boe=a("strong"),Juo=o("gpt2"),Yuo=o(" \u2014 "),p$=a("a"),Kuo=o("GPT2LMHeadModel"),Zuo=o(" (OpenAI GPT-2 model)"),e1o=l(),Au=a("li"),voe=a("strong"),o1o=o("gpt_neo"),r1o=o(" \u2014 "),_$=a("a"),t1o=o("GPTNeoForCausalLM"),a1o=o(" (GPT Neo model)"),n1o=l(),Lu=a("li"),Toe=a("strong"),s1o=o("gptj"),l1o=o(" \u2014 "),u$=a("a"),i1o=o("GPTJForCausalLM"),d1o=o(" (GPT-J model)"),c1o=l(),Bu=a("li"),Foe=a("strong"),f1o=o("marian"),m1o=o(" \u2014 "),b$=a("a"),g1o=o("MarianForCausalLM"),h1o=o(" (Marian model)"),p1o=l(),xu=a("li"),Coe=a("strong"),_1o=o("mbart"),u1o=o(" \u2014 "),v$=a("a"),b1o=o("MBartForCausalLM"),v1o=o(" (mBART model)"),T1o=l(),ku=a("li"),Moe=a("strong"),F1o=o("megatron-bert"),C1o=o(" \u2014 "),T$=a("a"),M1o=o("MegatronBertForCausalLM"),E1o=o(" (MegatronBert model)"),y1o=l(),Ru=a("li"),Eoe=a("strong"),w1o=o("openai-gpt"),A1o=o(" \u2014 "),F$=a("a"),L1o=o("OpenAIGPTLMHeadModel"),B1o=o(" (OpenAI GPT model)"),x1o=l(),Su=a("li"),yoe=a("strong"),k1o=o("pegasus"),R1o=o(" \u2014 "),C$=a("a"),S1o=o("PegasusForCausalLM"),P1o=o(" (Pegasus model)"),$1o=l(),Pu=a("li"),woe=a("strong"),I1o=o("plbart"),j1o=o(" \u2014 "),M$=a("a"),D1o=o("PLBartForCausalLM"),N1o=o(" (PLBart model)"),q1o=l(),$u=a("li"),Aoe=a("strong"),O1o=o("prophetnet"),G1o=o(" \u2014 "),E$=a("a"),X1o=o("ProphetNetForCausalLM"),V1o=o(" (ProphetNet model)"),z1o=l(),Iu=a("li"),Loe=a("strong"),W1o=o("qdqbert"),Q1o=o(" \u2014 "),y$=a("a"),H1o=o("QDQBertLMHeadModel"),U1o=o(" (QDQBert model)"),J1o=l(),ju=a("li"),Boe=a("strong"),Y1o=o("reformer"),K1o=o(" \u2014 "),w$=a("a"),Z1o=o("ReformerModelWithLMHead"),ebo=o(" (Reformer model)"),obo=l(),Du=a("li"),xoe=a("strong"),rbo=o("rembert"),tbo=o(" \u2014 "),A$=a("a"),abo=o("RemBertForCausalLM"),nbo=o(" (RemBERT model)"),sbo=l(),Nu=a("li"),koe=a("strong"),lbo=o("roberta"),ibo=o(" \u2014 "),L$=a("a"),dbo=o("RobertaForCausalLM"),cbo=o(" (RoBERTa model)"),fbo=l(),qu=a("li"),Roe=a("strong"),mbo=o("roformer"),gbo=o(" \u2014 "),B$=a("a"),hbo=o("RoFormerForCausalLM"),pbo=o(" (RoFormer model)"),_bo=l(),Ou=a("li"),Soe=a("strong"),ubo=o("speech_to_text_2"),bbo=o(" \u2014 "),x$=a("a"),vbo=o("Speech2Text2ForCausalLM"),Tbo=o(" (Speech2Text2 model)"),Fbo=l(),Gu=a("li"),Poe=a("strong"),Cbo=o("transfo-xl"),Mbo=o(" \u2014 "),k$=a("a"),Ebo=o("TransfoXLLMHeadModel"),ybo=o(" (Transformer-XL model)"),wbo=l(),Xu=a("li"),$oe=a("strong"),Abo=o("trocr"),Lbo=o(" \u2014 "),R$=a("a"),Bbo=o("TrOCRForCausalLM"),xbo=o(" (TrOCR model)"),kbo=l(),Vu=a("li"),Ioe=a("strong"),Rbo=o("xglm"),Sbo=o(" \u2014 "),S$=a("a"),Pbo=o("XGLMForCausalLM"),$bo=o(" (XGLM model)"),Ibo=l(),zu=a("li"),joe=a("strong"),jbo=o("xlm"),Dbo=o(" \u2014 "),P$=a("a"),Nbo=o("XLMWithLMHeadModel"),qbo=o(" (XLM model)"),Obo=l(),Wu=a("li"),Doe=a("strong"),Gbo=o("xlm-prophetnet"),Xbo=o(" \u2014 "),$$=a("a"),Vbo=o("XLMProphetNetForCausalLM"),zbo=o(" (XLMProphetNet model)"),Wbo=l(),Qu=a("li"),Noe=a("strong"),Qbo=o("xlm-roberta"),Hbo=o(" \u2014 "),I$=a("a"),Ubo=o("XLMRobertaForCausalLM"),Jbo=o(" (XLM-RoBERTa model)"),Ybo=l(),Hu=a("li"),qoe=a("strong"),Kbo=o("xlm-roberta-xl"),Zbo=o(" \u2014 "),j$=a("a"),e5o=o("XLMRobertaXLForCausalLM"),o5o=o(" (XLM-RoBERTa-XL model)"),r5o=l(),Uu=a("li"),Ooe=a("strong"),t5o=o("xlnet"),a5o=o(" \u2014 "),D$=a("a"),n5o=o("XLNetLMHeadModel"),s5o=o(" (XLNet model)"),l5o=l(),Ju=a("p"),i5o=o("The model is set in evaluation mode by default using "),Goe=a("code"),d5o=o("model.eval()"),c5o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xoe=a("code"),f5o=o("model.train()"),m5o=l(),Voe=a("p"),g5o=o("Examples:"),h5o=l(),f(nE.$$.fragment),lke=l(),gd=a("h2"),Yu=a("a"),zoe=a("span"),f(sE.$$.fragment),p5o=l(),Woe=a("span"),_5o=o("AutoModelForMaskedLM"),ike=l(),er=a("div"),f(lE.$$.fragment),u5o=l(),hd=a("p"),b5o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Qoe=a("code"),v5o=o("from_pretrained()"),T5o=o("class method or the "),Hoe=a("code"),F5o=o("from_config()"),C5o=o(`class
method.`),M5o=l(),iE=a("p"),E5o=o("This class cannot be instantiated directly using "),Uoe=a("code"),y5o=o("__init__()"),w5o=o(" (throws an error)."),A5o=l(),Ur=a("div"),f(dE.$$.fragment),L5o=l(),Joe=a("p"),B5o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),x5o=l(),pd=a("p"),k5o=o(`Note:
Loading a model from its configuration file does `),Yoe=a("strong"),R5o=o("not"),S5o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Koe=a("code"),P5o=o("from_pretrained()"),$5o=o("to load the model weights."),I5o=l(),Zoe=a("p"),j5o=o("Examples:"),D5o=l(),f(cE.$$.fragment),N5o=l(),qe=a("div"),f(fE.$$.fragment),q5o=l(),ere=a("p"),O5o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),G5o=l(),Ya=a("p"),X5o=o("The model class to instantiate is selected based on the "),ore=a("code"),V5o=o("model_type"),z5o=o(` property of the config object (either
passed as an argument or loaded from `),rre=a("code"),W5o=o("pretrained_model_name_or_path"),Q5o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tre=a("code"),H5o=o("pretrained_model_name_or_path"),U5o=o(":"),J5o=l(),I=a("ul"),Ku=a("li"),are=a("strong"),Y5o=o("albert"),K5o=o(" \u2014 "),N$=a("a"),Z5o=o("AlbertForMaskedLM"),e2o=o(" (ALBERT model)"),o2o=l(),Zu=a("li"),nre=a("strong"),r2o=o("bart"),t2o=o(" \u2014 "),q$=a("a"),a2o=o("BartForConditionalGeneration"),n2o=o(" (BART model)"),s2o=l(),e1=a("li"),sre=a("strong"),l2o=o("bert"),i2o=o(" \u2014 "),O$=a("a"),d2o=o("BertForMaskedLM"),c2o=o(" (BERT model)"),f2o=l(),o1=a("li"),lre=a("strong"),m2o=o("big_bird"),g2o=o(" \u2014 "),G$=a("a"),h2o=o("BigBirdForMaskedLM"),p2o=o(" (BigBird model)"),_2o=l(),r1=a("li"),ire=a("strong"),u2o=o("camembert"),b2o=o(" \u2014 "),X$=a("a"),v2o=o("CamembertForMaskedLM"),T2o=o(" (CamemBERT model)"),F2o=l(),t1=a("li"),dre=a("strong"),C2o=o("convbert"),M2o=o(" \u2014 "),V$=a("a"),E2o=o("ConvBertForMaskedLM"),y2o=o(" (ConvBERT model)"),w2o=l(),a1=a("li"),cre=a("strong"),A2o=o("data2vec-text"),L2o=o(" \u2014 "),z$=a("a"),B2o=o("Data2VecTextForMaskedLM"),x2o=o(" (Data2VecText model)"),k2o=l(),n1=a("li"),fre=a("strong"),R2o=o("deberta"),S2o=o(" \u2014 "),W$=a("a"),P2o=o("DebertaForMaskedLM"),$2o=o(" (DeBERTa model)"),I2o=l(),s1=a("li"),mre=a("strong"),j2o=o("deberta-v2"),D2o=o(" \u2014 "),Q$=a("a"),N2o=o("DebertaV2ForMaskedLM"),q2o=o(" (DeBERTa-v2 model)"),O2o=l(),l1=a("li"),gre=a("strong"),G2o=o("distilbert"),X2o=o(" \u2014 "),H$=a("a"),V2o=o("DistilBertForMaskedLM"),z2o=o(" (DistilBERT model)"),W2o=l(),i1=a("li"),hre=a("strong"),Q2o=o("electra"),H2o=o(" \u2014 "),U$=a("a"),U2o=o("ElectraForMaskedLM"),J2o=o(" (ELECTRA model)"),Y2o=l(),d1=a("li"),pre=a("strong"),K2o=o("flaubert"),Z2o=o(" \u2014 "),J$=a("a"),evo=o("FlaubertWithLMHeadModel"),ovo=o(" (FlauBERT model)"),rvo=l(),c1=a("li"),_re=a("strong"),tvo=o("fnet"),avo=o(" \u2014 "),Y$=a("a"),nvo=o("FNetForMaskedLM"),svo=o(" (FNet model)"),lvo=l(),f1=a("li"),ure=a("strong"),ivo=o("funnel"),dvo=o(" \u2014 "),K$=a("a"),cvo=o("FunnelForMaskedLM"),fvo=o(" (Funnel Transformer model)"),mvo=l(),m1=a("li"),bre=a("strong"),gvo=o("ibert"),hvo=o(" \u2014 "),Z$=a("a"),pvo=o("IBertForMaskedLM"),_vo=o(" (I-BERT model)"),uvo=l(),g1=a("li"),vre=a("strong"),bvo=o("layoutlm"),vvo=o(" \u2014 "),eI=a("a"),Tvo=o("LayoutLMForMaskedLM"),Fvo=o(" (LayoutLM model)"),Cvo=l(),h1=a("li"),Tre=a("strong"),Mvo=o("longformer"),Evo=o(" \u2014 "),oI=a("a"),yvo=o("LongformerForMaskedLM"),wvo=o(" (Longformer model)"),Avo=l(),p1=a("li"),Fre=a("strong"),Lvo=o("mbart"),Bvo=o(" \u2014 "),rI=a("a"),xvo=o("MBartForConditionalGeneration"),kvo=o(" (mBART model)"),Rvo=l(),_1=a("li"),Cre=a("strong"),Svo=o("megatron-bert"),Pvo=o(" \u2014 "),tI=a("a"),$vo=o("MegatronBertForMaskedLM"),Ivo=o(" (MegatronBert model)"),jvo=l(),u1=a("li"),Mre=a("strong"),Dvo=o("mobilebert"),Nvo=o(" \u2014 "),aI=a("a"),qvo=o("MobileBertForMaskedLM"),Ovo=o(" (MobileBERT model)"),Gvo=l(),b1=a("li"),Ere=a("strong"),Xvo=o("mpnet"),Vvo=o(" \u2014 "),nI=a("a"),zvo=o("MPNetForMaskedLM"),Wvo=o(" (MPNet model)"),Qvo=l(),v1=a("li"),yre=a("strong"),Hvo=o("nystromformer"),Uvo=o(" \u2014 "),sI=a("a"),Jvo=o("NystromformerForMaskedLM"),Yvo=o(" (Nystromformer model)"),Kvo=l(),T1=a("li"),wre=a("strong"),Zvo=o("perceiver"),e6o=o(" \u2014 "),lI=a("a"),o6o=o("PerceiverForMaskedLM"),r6o=o(" (Perceiver model)"),t6o=l(),F1=a("li"),Are=a("strong"),a6o=o("qdqbert"),n6o=o(" \u2014 "),iI=a("a"),s6o=o("QDQBertForMaskedLM"),l6o=o(" (QDQBert model)"),i6o=l(),C1=a("li"),Lre=a("strong"),d6o=o("reformer"),c6o=o(" \u2014 "),dI=a("a"),f6o=o("ReformerForMaskedLM"),m6o=o(" (Reformer model)"),g6o=l(),M1=a("li"),Bre=a("strong"),h6o=o("rembert"),p6o=o(" \u2014 "),cI=a("a"),_6o=o("RemBertForMaskedLM"),u6o=o(" (RemBERT model)"),b6o=l(),E1=a("li"),xre=a("strong"),v6o=o("roberta"),T6o=o(" \u2014 "),fI=a("a"),F6o=o("RobertaForMaskedLM"),C6o=o(" (RoBERTa model)"),M6o=l(),y1=a("li"),kre=a("strong"),E6o=o("roformer"),y6o=o(" \u2014 "),mI=a("a"),w6o=o("RoFormerForMaskedLM"),A6o=o(" (RoFormer model)"),L6o=l(),w1=a("li"),Rre=a("strong"),B6o=o("squeezebert"),x6o=o(" \u2014 "),gI=a("a"),k6o=o("SqueezeBertForMaskedLM"),R6o=o(" (SqueezeBERT model)"),S6o=l(),A1=a("li"),Sre=a("strong"),P6o=o("tapas"),$6o=o(" \u2014 "),hI=a("a"),I6o=o("TapasForMaskedLM"),j6o=o(" (TAPAS model)"),D6o=l(),L1=a("li"),Pre=a("strong"),N6o=o("wav2vec2"),q6o=o(" \u2014 "),$re=a("code"),O6o=o("Wav2Vec2ForMaskedLM"),G6o=o("(Wav2Vec2 model)"),X6o=l(),B1=a("li"),Ire=a("strong"),V6o=o("xlm"),z6o=o(" \u2014 "),pI=a("a"),W6o=o("XLMWithLMHeadModel"),Q6o=o(" (XLM model)"),H6o=l(),x1=a("li"),jre=a("strong"),U6o=o("xlm-roberta"),J6o=o(" \u2014 "),_I=a("a"),Y6o=o("XLMRobertaForMaskedLM"),K6o=o(" (XLM-RoBERTa model)"),Z6o=l(),k1=a("li"),Dre=a("strong"),e0o=o("xlm-roberta-xl"),o0o=o(" \u2014 "),uI=a("a"),r0o=o("XLMRobertaXLForMaskedLM"),t0o=o(" (XLM-RoBERTa-XL model)"),a0o=l(),R1=a("li"),Nre=a("strong"),n0o=o("yoso"),s0o=o(" \u2014 "),bI=a("a"),l0o=o("YosoForMaskedLM"),i0o=o(" (YOSO model)"),d0o=l(),S1=a("p"),c0o=o("The model is set in evaluation mode by default using "),qre=a("code"),f0o=o("model.eval()"),m0o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ore=a("code"),g0o=o("model.train()"),h0o=l(),Gre=a("p"),p0o=o("Examples:"),_0o=l(),f(mE.$$.fragment),dke=l(),_d=a("h2"),P1=a("a"),Xre=a("span"),f(gE.$$.fragment),u0o=l(),Vre=a("span"),b0o=o("AutoModelForSeq2SeqLM"),cke=l(),or=a("div"),f(hE.$$.fragment),v0o=l(),ud=a("p"),T0o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),zre=a("code"),F0o=o("from_pretrained()"),C0o=o("class method or the "),Wre=a("code"),M0o=o("from_config()"),E0o=o(`class
method.`),y0o=l(),pE=a("p"),w0o=o("This class cannot be instantiated directly using "),Qre=a("code"),A0o=o("__init__()"),L0o=o(" (throws an error)."),B0o=l(),Jr=a("div"),f(_E.$$.fragment),x0o=l(),Hre=a("p"),k0o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),R0o=l(),bd=a("p"),S0o=o(`Note:
Loading a model from its configuration file does `),Ure=a("strong"),P0o=o("not"),$0o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jre=a("code"),I0o=o("from_pretrained()"),j0o=o("to load the model weights."),D0o=l(),Yre=a("p"),N0o=o("Examples:"),q0o=l(),f(uE.$$.fragment),O0o=l(),Oe=a("div"),f(bE.$$.fragment),G0o=l(),Kre=a("p"),X0o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),V0o=l(),Ka=a("p"),z0o=o("The model class to instantiate is selected based on the "),Zre=a("code"),W0o=o("model_type"),Q0o=o(` property of the config object (either
passed as an argument or loaded from `),ete=a("code"),H0o=o("pretrained_model_name_or_path"),U0o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ote=a("code"),J0o=o("pretrained_model_name_or_path"),Y0o=o(":"),K0o=l(),ne=a("ul"),$1=a("li"),rte=a("strong"),Z0o=o("bart"),eTo=o(" \u2014 "),vI=a("a"),oTo=o("BartForConditionalGeneration"),rTo=o(" (BART model)"),tTo=l(),I1=a("li"),tte=a("strong"),aTo=o("bigbird_pegasus"),nTo=o(" \u2014 "),TI=a("a"),sTo=o("BigBirdPegasusForConditionalGeneration"),lTo=o(" (BigBirdPegasus model)"),iTo=l(),j1=a("li"),ate=a("strong"),dTo=o("blenderbot"),cTo=o(" \u2014 "),FI=a("a"),fTo=o("BlenderbotForConditionalGeneration"),mTo=o(" (Blenderbot model)"),gTo=l(),D1=a("li"),nte=a("strong"),hTo=o("blenderbot-small"),pTo=o(" \u2014 "),CI=a("a"),_To=o("BlenderbotSmallForConditionalGeneration"),uTo=o(" (BlenderbotSmall model)"),bTo=l(),N1=a("li"),ste=a("strong"),vTo=o("encoder-decoder"),TTo=o(" \u2014 "),MI=a("a"),FTo=o("EncoderDecoderModel"),CTo=o(" (Encoder decoder model)"),MTo=l(),q1=a("li"),lte=a("strong"),ETo=o("fsmt"),yTo=o(" \u2014 "),EI=a("a"),wTo=o("FSMTForConditionalGeneration"),ATo=o(" (FairSeq Machine-Translation model)"),LTo=l(),O1=a("li"),ite=a("strong"),BTo=o("led"),xTo=o(" \u2014 "),yI=a("a"),kTo=o("LEDForConditionalGeneration"),RTo=o(" (LED model)"),STo=l(),G1=a("li"),dte=a("strong"),PTo=o("m2m_100"),$To=o(" \u2014 "),wI=a("a"),ITo=o("M2M100ForConditionalGeneration"),jTo=o(" (M2M100 model)"),DTo=l(),X1=a("li"),cte=a("strong"),NTo=o("marian"),qTo=o(" \u2014 "),AI=a("a"),OTo=o("MarianMTModel"),GTo=o(" (Marian model)"),XTo=l(),V1=a("li"),fte=a("strong"),VTo=o("mbart"),zTo=o(" \u2014 "),LI=a("a"),WTo=o("MBartForConditionalGeneration"),QTo=o(" (mBART model)"),HTo=l(),z1=a("li"),mte=a("strong"),UTo=o("mt5"),JTo=o(" \u2014 "),BI=a("a"),YTo=o("MT5ForConditionalGeneration"),KTo=o(" (mT5 model)"),ZTo=l(),W1=a("li"),gte=a("strong"),e8o=o("pegasus"),o8o=o(" \u2014 "),xI=a("a"),r8o=o("PegasusForConditionalGeneration"),t8o=o(" (Pegasus model)"),a8o=l(),Q1=a("li"),hte=a("strong"),n8o=o("plbart"),s8o=o(" \u2014 "),kI=a("a"),l8o=o("PLBartForConditionalGeneration"),i8o=o(" (PLBart model)"),d8o=l(),H1=a("li"),pte=a("strong"),c8o=o("prophetnet"),f8o=o(" \u2014 "),RI=a("a"),m8o=o("ProphetNetForConditionalGeneration"),g8o=o(" (ProphetNet model)"),h8o=l(),U1=a("li"),_te=a("strong"),p8o=o("t5"),_8o=o(" \u2014 "),SI=a("a"),u8o=o("T5ForConditionalGeneration"),b8o=o(" (T5 model)"),v8o=l(),J1=a("li"),ute=a("strong"),T8o=o("xlm-prophetnet"),F8o=o(" \u2014 "),PI=a("a"),C8o=o("XLMProphetNetForConditionalGeneration"),M8o=o(" (XLMProphetNet model)"),E8o=l(),Y1=a("p"),y8o=o("The model is set in evaluation mode by default using "),bte=a("code"),w8o=o("model.eval()"),A8o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vte=a("code"),L8o=o("model.train()"),B8o=l(),Tte=a("p"),x8o=o("Examples:"),k8o=l(),f(vE.$$.fragment),fke=l(),vd=a("h2"),K1=a("a"),Fte=a("span"),f(TE.$$.fragment),R8o=l(),Cte=a("span"),S8o=o("AutoModelForSequenceClassification"),mke=l(),rr=a("div"),f(FE.$$.fragment),P8o=l(),Td=a("p"),$8o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Mte=a("code"),I8o=o("from_pretrained()"),j8o=o("class method or the "),Ete=a("code"),D8o=o("from_config()"),N8o=o(`class
method.`),q8o=l(),CE=a("p"),O8o=o("This class cannot be instantiated directly using "),yte=a("code"),G8o=o("__init__()"),X8o=o(" (throws an error)."),V8o=l(),Yr=a("div"),f(ME.$$.fragment),z8o=l(),wte=a("p"),W8o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Q8o=l(),Fd=a("p"),H8o=o(`Note:
Loading a model from its configuration file does `),Ate=a("strong"),U8o=o("not"),J8o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lte=a("code"),Y8o=o("from_pretrained()"),K8o=o("to load the model weights."),Z8o=l(),Bte=a("p"),eFo=o("Examples:"),oFo=l(),f(EE.$$.fragment),rFo=l(),Ge=a("div"),f(yE.$$.fragment),tFo=l(),xte=a("p"),aFo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),nFo=l(),Za=a("p"),sFo=o("The model class to instantiate is selected based on the "),kte=a("code"),lFo=o("model_type"),iFo=o(` property of the config object (either
passed as an argument or loaded from `),Rte=a("code"),dFo=o("pretrained_model_name_or_path"),cFo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ste=a("code"),fFo=o("pretrained_model_name_or_path"),mFo=o(":"),gFo=l(),A=a("ul"),Z1=a("li"),Pte=a("strong"),hFo=o("albert"),pFo=o(" \u2014 "),$I=a("a"),_Fo=o("AlbertForSequenceClassification"),uFo=o(" (ALBERT model)"),bFo=l(),eb=a("li"),$te=a("strong"),vFo=o("bart"),TFo=o(" \u2014 "),II=a("a"),FFo=o("BartForSequenceClassification"),CFo=o(" (BART model)"),MFo=l(),ob=a("li"),Ite=a("strong"),EFo=o("bert"),yFo=o(" \u2014 "),jI=a("a"),wFo=o("BertForSequenceClassification"),AFo=o(" (BERT model)"),LFo=l(),rb=a("li"),jte=a("strong"),BFo=o("big_bird"),xFo=o(" \u2014 "),DI=a("a"),kFo=o("BigBirdForSequenceClassification"),RFo=o(" (BigBird model)"),SFo=l(),tb=a("li"),Dte=a("strong"),PFo=o("bigbird_pegasus"),$Fo=o(" \u2014 "),NI=a("a"),IFo=o("BigBirdPegasusForSequenceClassification"),jFo=o(" (BigBirdPegasus model)"),DFo=l(),ab=a("li"),Nte=a("strong"),NFo=o("camembert"),qFo=o(" \u2014 "),qI=a("a"),OFo=o("CamembertForSequenceClassification"),GFo=o(" (CamemBERT model)"),XFo=l(),nb=a("li"),qte=a("strong"),VFo=o("canine"),zFo=o(" \u2014 "),OI=a("a"),WFo=o("CanineForSequenceClassification"),QFo=o(" (Canine model)"),HFo=l(),sb=a("li"),Ote=a("strong"),UFo=o("convbert"),JFo=o(" \u2014 "),GI=a("a"),YFo=o("ConvBertForSequenceClassification"),KFo=o(" (ConvBERT model)"),ZFo=l(),lb=a("li"),Gte=a("strong"),eCo=o("ctrl"),oCo=o(" \u2014 "),XI=a("a"),rCo=o("CTRLForSequenceClassification"),tCo=o(" (CTRL model)"),aCo=l(),ib=a("li"),Xte=a("strong"),nCo=o("data2vec-text"),sCo=o(" \u2014 "),VI=a("a"),lCo=o("Data2VecTextForSequenceClassification"),iCo=o(" (Data2VecText model)"),dCo=l(),db=a("li"),Vte=a("strong"),cCo=o("deberta"),fCo=o(" \u2014 "),zI=a("a"),mCo=o("DebertaForSequenceClassification"),gCo=o(" (DeBERTa model)"),hCo=l(),cb=a("li"),zte=a("strong"),pCo=o("deberta-v2"),_Co=o(" \u2014 "),WI=a("a"),uCo=o("DebertaV2ForSequenceClassification"),bCo=o(" (DeBERTa-v2 model)"),vCo=l(),fb=a("li"),Wte=a("strong"),TCo=o("distilbert"),FCo=o(" \u2014 "),QI=a("a"),CCo=o("DistilBertForSequenceClassification"),MCo=o(" (DistilBERT model)"),ECo=l(),mb=a("li"),Qte=a("strong"),yCo=o("electra"),wCo=o(" \u2014 "),HI=a("a"),ACo=o("ElectraForSequenceClassification"),LCo=o(" (ELECTRA model)"),BCo=l(),gb=a("li"),Hte=a("strong"),xCo=o("flaubert"),kCo=o(" \u2014 "),UI=a("a"),RCo=o("FlaubertForSequenceClassification"),SCo=o(" (FlauBERT model)"),PCo=l(),hb=a("li"),Ute=a("strong"),$Co=o("fnet"),ICo=o(" \u2014 "),JI=a("a"),jCo=o("FNetForSequenceClassification"),DCo=o(" (FNet model)"),NCo=l(),pb=a("li"),Jte=a("strong"),qCo=o("funnel"),OCo=o(" \u2014 "),YI=a("a"),GCo=o("FunnelForSequenceClassification"),XCo=o(" (Funnel Transformer model)"),VCo=l(),_b=a("li"),Yte=a("strong"),zCo=o("gpt2"),WCo=o(" \u2014 "),KI=a("a"),QCo=o("GPT2ForSequenceClassification"),HCo=o(" (OpenAI GPT-2 model)"),UCo=l(),ub=a("li"),Kte=a("strong"),JCo=o("gpt_neo"),YCo=o(" \u2014 "),ZI=a("a"),KCo=o("GPTNeoForSequenceClassification"),ZCo=o(" (GPT Neo model)"),eMo=l(),bb=a("li"),Zte=a("strong"),oMo=o("gptj"),rMo=o(" \u2014 "),ej=a("a"),tMo=o("GPTJForSequenceClassification"),aMo=o(" (GPT-J model)"),nMo=l(),vb=a("li"),eae=a("strong"),sMo=o("ibert"),lMo=o(" \u2014 "),oj=a("a"),iMo=o("IBertForSequenceClassification"),dMo=o(" (I-BERT model)"),cMo=l(),Tb=a("li"),oae=a("strong"),fMo=o("layoutlm"),mMo=o(" \u2014 "),rj=a("a"),gMo=o("LayoutLMForSequenceClassification"),hMo=o(" (LayoutLM model)"),pMo=l(),Fb=a("li"),rae=a("strong"),_Mo=o("layoutlmv2"),uMo=o(" \u2014 "),tj=a("a"),bMo=o("LayoutLMv2ForSequenceClassification"),vMo=o(" (LayoutLMv2 model)"),TMo=l(),Cb=a("li"),tae=a("strong"),FMo=o("led"),CMo=o(" \u2014 "),aj=a("a"),MMo=o("LEDForSequenceClassification"),EMo=o(" (LED model)"),yMo=l(),Mb=a("li"),aae=a("strong"),wMo=o("longformer"),AMo=o(" \u2014 "),nj=a("a"),LMo=o("LongformerForSequenceClassification"),BMo=o(" (Longformer model)"),xMo=l(),Eb=a("li"),nae=a("strong"),kMo=o("mbart"),RMo=o(" \u2014 "),sj=a("a"),SMo=o("MBartForSequenceClassification"),PMo=o(" (mBART model)"),$Mo=l(),yb=a("li"),sae=a("strong"),IMo=o("megatron-bert"),jMo=o(" \u2014 "),lj=a("a"),DMo=o("MegatronBertForSequenceClassification"),NMo=o(" (MegatronBert model)"),qMo=l(),wb=a("li"),lae=a("strong"),OMo=o("mobilebert"),GMo=o(" \u2014 "),ij=a("a"),XMo=o("MobileBertForSequenceClassification"),VMo=o(" (MobileBERT model)"),zMo=l(),Ab=a("li"),iae=a("strong"),WMo=o("mpnet"),QMo=o(" \u2014 "),dj=a("a"),HMo=o("MPNetForSequenceClassification"),UMo=o(" (MPNet model)"),JMo=l(),Lb=a("li"),dae=a("strong"),YMo=o("nystromformer"),KMo=o(" \u2014 "),cj=a("a"),ZMo=o("NystromformerForSequenceClassification"),e4o=o(" (Nystromformer model)"),o4o=l(),Bb=a("li"),cae=a("strong"),r4o=o("openai-gpt"),t4o=o(" \u2014 "),fj=a("a"),a4o=o("OpenAIGPTForSequenceClassification"),n4o=o(" (OpenAI GPT model)"),s4o=l(),xb=a("li"),fae=a("strong"),l4o=o("perceiver"),i4o=o(" \u2014 "),mj=a("a"),d4o=o("PerceiverForSequenceClassification"),c4o=o(" (Perceiver model)"),f4o=l(),kb=a("li"),mae=a("strong"),m4o=o("plbart"),g4o=o(" \u2014 "),gj=a("a"),h4o=o("PLBartForSequenceClassification"),p4o=o(" (PLBart model)"),_4o=l(),Rb=a("li"),gae=a("strong"),u4o=o("qdqbert"),b4o=o(" \u2014 "),hj=a("a"),v4o=o("QDQBertForSequenceClassification"),T4o=o(" (QDQBert model)"),F4o=l(),Sb=a("li"),hae=a("strong"),C4o=o("reformer"),M4o=o(" \u2014 "),pj=a("a"),E4o=o("ReformerForSequenceClassification"),y4o=o(" (Reformer model)"),w4o=l(),Pb=a("li"),pae=a("strong"),A4o=o("rembert"),L4o=o(" \u2014 "),_j=a("a"),B4o=o("RemBertForSequenceClassification"),x4o=o(" (RemBERT model)"),k4o=l(),$b=a("li"),_ae=a("strong"),R4o=o("roberta"),S4o=o(" \u2014 "),uj=a("a"),P4o=o("RobertaForSequenceClassification"),$4o=o(" (RoBERTa model)"),I4o=l(),Ib=a("li"),uae=a("strong"),j4o=o("roformer"),D4o=o(" \u2014 "),bj=a("a"),N4o=o("RoFormerForSequenceClassification"),q4o=o(" (RoFormer model)"),O4o=l(),jb=a("li"),bae=a("strong"),G4o=o("squeezebert"),X4o=o(" \u2014 "),vj=a("a"),V4o=o("SqueezeBertForSequenceClassification"),z4o=o(" (SqueezeBERT model)"),W4o=l(),Db=a("li"),vae=a("strong"),Q4o=o("tapas"),H4o=o(" \u2014 "),Tj=a("a"),U4o=o("TapasForSequenceClassification"),J4o=o(" (TAPAS model)"),Y4o=l(),Nb=a("li"),Tae=a("strong"),K4o=o("transfo-xl"),Z4o=o(" \u2014 "),Fj=a("a"),eEo=o("TransfoXLForSequenceClassification"),oEo=o(" (Transformer-XL model)"),rEo=l(),qb=a("li"),Fae=a("strong"),tEo=o("xlm"),aEo=o(" \u2014 "),Cj=a("a"),nEo=o("XLMForSequenceClassification"),sEo=o(" (XLM model)"),lEo=l(),Ob=a("li"),Cae=a("strong"),iEo=o("xlm-roberta"),dEo=o(" \u2014 "),Mj=a("a"),cEo=o("XLMRobertaForSequenceClassification"),fEo=o(" (XLM-RoBERTa model)"),mEo=l(),Gb=a("li"),Mae=a("strong"),gEo=o("xlm-roberta-xl"),hEo=o(" \u2014 "),Ej=a("a"),pEo=o("XLMRobertaXLForSequenceClassification"),_Eo=o(" (XLM-RoBERTa-XL model)"),uEo=l(),Xb=a("li"),Eae=a("strong"),bEo=o("xlnet"),vEo=o(" \u2014 "),yj=a("a"),TEo=o("XLNetForSequenceClassification"),FEo=o(" (XLNet model)"),CEo=l(),Vb=a("li"),yae=a("strong"),MEo=o("yoso"),EEo=o(" \u2014 "),wj=a("a"),yEo=o("YosoForSequenceClassification"),wEo=o(" (YOSO model)"),AEo=l(),zb=a("p"),LEo=o("The model is set in evaluation mode by default using "),wae=a("code"),BEo=o("model.eval()"),xEo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Aae=a("code"),kEo=o("model.train()"),REo=l(),Lae=a("p"),SEo=o("Examples:"),PEo=l(),f(wE.$$.fragment),gke=l(),Cd=a("h2"),Wb=a("a"),Bae=a("span"),f(AE.$$.fragment),$Eo=l(),xae=a("span"),IEo=o("AutoModelForMultipleChoice"),hke=l(),tr=a("div"),f(LE.$$.fragment),jEo=l(),Md=a("p"),DEo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),kae=a("code"),NEo=o("from_pretrained()"),qEo=o("class method or the "),Rae=a("code"),OEo=o("from_config()"),GEo=o(`class
method.`),XEo=l(),BE=a("p"),VEo=o("This class cannot be instantiated directly using "),Sae=a("code"),zEo=o("__init__()"),WEo=o(" (throws an error)."),QEo=l(),Kr=a("div"),f(xE.$$.fragment),HEo=l(),Pae=a("p"),UEo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),JEo=l(),Ed=a("p"),YEo=o(`Note:
Loading a model from its configuration file does `),$ae=a("strong"),KEo=o("not"),ZEo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Iae=a("code"),e3o=o("from_pretrained()"),o3o=o("to load the model weights."),r3o=l(),jae=a("p"),t3o=o("Examples:"),a3o=l(),f(kE.$$.fragment),n3o=l(),Xe=a("div"),f(RE.$$.fragment),s3o=l(),Dae=a("p"),l3o=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),i3o=l(),en=a("p"),d3o=o("The model class to instantiate is selected based on the "),Nae=a("code"),c3o=o("model_type"),f3o=o(` property of the config object (either
passed as an argument or loaded from `),qae=a("code"),m3o=o("pretrained_model_name_or_path"),g3o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oae=a("code"),h3o=o("pretrained_model_name_or_path"),p3o=o(":"),_3o=l(),O=a("ul"),Qb=a("li"),Gae=a("strong"),u3o=o("albert"),b3o=o(" \u2014 "),Aj=a("a"),v3o=o("AlbertForMultipleChoice"),T3o=o(" (ALBERT model)"),F3o=l(),Hb=a("li"),Xae=a("strong"),C3o=o("bert"),M3o=o(" \u2014 "),Lj=a("a"),E3o=o("BertForMultipleChoice"),y3o=o(" (BERT model)"),w3o=l(),Ub=a("li"),Vae=a("strong"),A3o=o("big_bird"),L3o=o(" \u2014 "),Bj=a("a"),B3o=o("BigBirdForMultipleChoice"),x3o=o(" (BigBird model)"),k3o=l(),Jb=a("li"),zae=a("strong"),R3o=o("camembert"),S3o=o(" \u2014 "),xj=a("a"),P3o=o("CamembertForMultipleChoice"),$3o=o(" (CamemBERT model)"),I3o=l(),Yb=a("li"),Wae=a("strong"),j3o=o("canine"),D3o=o(" \u2014 "),kj=a("a"),N3o=o("CanineForMultipleChoice"),q3o=o(" (Canine model)"),O3o=l(),Kb=a("li"),Qae=a("strong"),G3o=o("convbert"),X3o=o(" \u2014 "),Rj=a("a"),V3o=o("ConvBertForMultipleChoice"),z3o=o(" (ConvBERT model)"),W3o=l(),Zb=a("li"),Hae=a("strong"),Q3o=o("data2vec-text"),H3o=o(" \u2014 "),Sj=a("a"),U3o=o("Data2VecTextForMultipleChoice"),J3o=o(" (Data2VecText model)"),Y3o=l(),e5=a("li"),Uae=a("strong"),K3o=o("distilbert"),Z3o=o(" \u2014 "),Pj=a("a"),eyo=o("DistilBertForMultipleChoice"),oyo=o(" (DistilBERT model)"),ryo=l(),o5=a("li"),Jae=a("strong"),tyo=o("electra"),ayo=o(" \u2014 "),$j=a("a"),nyo=o("ElectraForMultipleChoice"),syo=o(" (ELECTRA model)"),lyo=l(),r5=a("li"),Yae=a("strong"),iyo=o("flaubert"),dyo=o(" \u2014 "),Ij=a("a"),cyo=o("FlaubertForMultipleChoice"),fyo=o(" (FlauBERT model)"),myo=l(),t5=a("li"),Kae=a("strong"),gyo=o("fnet"),hyo=o(" \u2014 "),jj=a("a"),pyo=o("FNetForMultipleChoice"),_yo=o(" (FNet model)"),uyo=l(),a5=a("li"),Zae=a("strong"),byo=o("funnel"),vyo=o(" \u2014 "),Dj=a("a"),Tyo=o("FunnelForMultipleChoice"),Fyo=o(" (Funnel Transformer model)"),Cyo=l(),n5=a("li"),ene=a("strong"),Myo=o("ibert"),Eyo=o(" \u2014 "),Nj=a("a"),yyo=o("IBertForMultipleChoice"),wyo=o(" (I-BERT model)"),Ayo=l(),s5=a("li"),one=a("strong"),Lyo=o("longformer"),Byo=o(" \u2014 "),qj=a("a"),xyo=o("LongformerForMultipleChoice"),kyo=o(" (Longformer model)"),Ryo=l(),l5=a("li"),rne=a("strong"),Syo=o("megatron-bert"),Pyo=o(" \u2014 "),Oj=a("a"),$yo=o("MegatronBertForMultipleChoice"),Iyo=o(" (MegatronBert model)"),jyo=l(),i5=a("li"),tne=a("strong"),Dyo=o("mobilebert"),Nyo=o(" \u2014 "),Gj=a("a"),qyo=o("MobileBertForMultipleChoice"),Oyo=o(" (MobileBERT model)"),Gyo=l(),d5=a("li"),ane=a("strong"),Xyo=o("mpnet"),Vyo=o(" \u2014 "),Xj=a("a"),zyo=o("MPNetForMultipleChoice"),Wyo=o(" (MPNet model)"),Qyo=l(),c5=a("li"),nne=a("strong"),Hyo=o("nystromformer"),Uyo=o(" \u2014 "),Vj=a("a"),Jyo=o("NystromformerForMultipleChoice"),Yyo=o(" (Nystromformer model)"),Kyo=l(),f5=a("li"),sne=a("strong"),Zyo=o("qdqbert"),ewo=o(" \u2014 "),zj=a("a"),owo=o("QDQBertForMultipleChoice"),rwo=o(" (QDQBert model)"),two=l(),m5=a("li"),lne=a("strong"),awo=o("rembert"),nwo=o(" \u2014 "),Wj=a("a"),swo=o("RemBertForMultipleChoice"),lwo=o(" (RemBERT model)"),iwo=l(),g5=a("li"),ine=a("strong"),dwo=o("roberta"),cwo=o(" \u2014 "),Qj=a("a"),fwo=o("RobertaForMultipleChoice"),mwo=o(" (RoBERTa model)"),gwo=l(),h5=a("li"),dne=a("strong"),hwo=o("roformer"),pwo=o(" \u2014 "),Hj=a("a"),_wo=o("RoFormerForMultipleChoice"),uwo=o(" (RoFormer model)"),bwo=l(),p5=a("li"),cne=a("strong"),vwo=o("squeezebert"),Two=o(" \u2014 "),Uj=a("a"),Fwo=o("SqueezeBertForMultipleChoice"),Cwo=o(" (SqueezeBERT model)"),Mwo=l(),_5=a("li"),fne=a("strong"),Ewo=o("xlm"),ywo=o(" \u2014 "),Jj=a("a"),wwo=o("XLMForMultipleChoice"),Awo=o(" (XLM model)"),Lwo=l(),u5=a("li"),mne=a("strong"),Bwo=o("xlm-roberta"),xwo=o(" \u2014 "),Yj=a("a"),kwo=o("XLMRobertaForMultipleChoice"),Rwo=o(" (XLM-RoBERTa model)"),Swo=l(),b5=a("li"),gne=a("strong"),Pwo=o("xlm-roberta-xl"),$wo=o(" \u2014 "),Kj=a("a"),Iwo=o("XLMRobertaXLForMultipleChoice"),jwo=o(" (XLM-RoBERTa-XL model)"),Dwo=l(),v5=a("li"),hne=a("strong"),Nwo=o("xlnet"),qwo=o(" \u2014 "),Zj=a("a"),Owo=o("XLNetForMultipleChoice"),Gwo=o(" (XLNet model)"),Xwo=l(),T5=a("li"),pne=a("strong"),Vwo=o("yoso"),zwo=o(" \u2014 "),eD=a("a"),Wwo=o("YosoForMultipleChoice"),Qwo=o(" (YOSO model)"),Hwo=l(),F5=a("p"),Uwo=o("The model is set in evaluation mode by default using "),_ne=a("code"),Jwo=o("model.eval()"),Ywo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),une=a("code"),Kwo=o("model.train()"),Zwo=l(),bne=a("p"),eAo=o("Examples:"),oAo=l(),f(SE.$$.fragment),pke=l(),yd=a("h2"),C5=a("a"),vne=a("span"),f(PE.$$.fragment),rAo=l(),Tne=a("span"),tAo=o("AutoModelForNextSentencePrediction"),_ke=l(),ar=a("div"),f($E.$$.fragment),aAo=l(),wd=a("p"),nAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Fne=a("code"),sAo=o("from_pretrained()"),lAo=o("class method or the "),Cne=a("code"),iAo=o("from_config()"),dAo=o(`class
method.`),cAo=l(),IE=a("p"),fAo=o("This class cannot be instantiated directly using "),Mne=a("code"),mAo=o("__init__()"),gAo=o(" (throws an error)."),hAo=l(),Zr=a("div"),f(jE.$$.fragment),pAo=l(),Ene=a("p"),_Ao=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),uAo=l(),Ad=a("p"),bAo=o(`Note:
Loading a model from its configuration file does `),yne=a("strong"),vAo=o("not"),TAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wne=a("code"),FAo=o("from_pretrained()"),CAo=o("to load the model weights."),MAo=l(),Ane=a("p"),EAo=o("Examples:"),yAo=l(),f(DE.$$.fragment),wAo=l(),Ve=a("div"),f(NE.$$.fragment),AAo=l(),Lne=a("p"),LAo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),BAo=l(),on=a("p"),xAo=o("The model class to instantiate is selected based on the "),Bne=a("code"),kAo=o("model_type"),RAo=o(` property of the config object (either
passed as an argument or loaded from `),xne=a("code"),SAo=o("pretrained_model_name_or_path"),PAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kne=a("code"),$Ao=o("pretrained_model_name_or_path"),IAo=o(":"),jAo=l(),ma=a("ul"),M5=a("li"),Rne=a("strong"),DAo=o("bert"),NAo=o(" \u2014 "),oD=a("a"),qAo=o("BertForNextSentencePrediction"),OAo=o(" (BERT model)"),GAo=l(),E5=a("li"),Sne=a("strong"),XAo=o("fnet"),VAo=o(" \u2014 "),rD=a("a"),zAo=o("FNetForNextSentencePrediction"),WAo=o(" (FNet model)"),QAo=l(),y5=a("li"),Pne=a("strong"),HAo=o("megatron-bert"),UAo=o(" \u2014 "),tD=a("a"),JAo=o("MegatronBertForNextSentencePrediction"),YAo=o(" (MegatronBert model)"),KAo=l(),w5=a("li"),$ne=a("strong"),ZAo=o("mobilebert"),eLo=o(" \u2014 "),aD=a("a"),oLo=o("MobileBertForNextSentencePrediction"),rLo=o(" (MobileBERT model)"),tLo=l(),A5=a("li"),Ine=a("strong"),aLo=o("qdqbert"),nLo=o(" \u2014 "),nD=a("a"),sLo=o("QDQBertForNextSentencePrediction"),lLo=o(" (QDQBert model)"),iLo=l(),L5=a("p"),dLo=o("The model is set in evaluation mode by default using "),jne=a("code"),cLo=o("model.eval()"),fLo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dne=a("code"),mLo=o("model.train()"),gLo=l(),Nne=a("p"),hLo=o("Examples:"),pLo=l(),f(qE.$$.fragment),uke=l(),Ld=a("h2"),B5=a("a"),qne=a("span"),f(OE.$$.fragment),_Lo=l(),One=a("span"),uLo=o("AutoModelForTokenClassification"),bke=l(),nr=a("div"),f(GE.$$.fragment),bLo=l(),Bd=a("p"),vLo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Gne=a("code"),TLo=o("from_pretrained()"),FLo=o("class method or the "),Xne=a("code"),CLo=o("from_config()"),MLo=o(`class
method.`),ELo=l(),XE=a("p"),yLo=o("This class cannot be instantiated directly using "),Vne=a("code"),wLo=o("__init__()"),ALo=o(" (throws an error)."),LLo=l(),et=a("div"),f(VE.$$.fragment),BLo=l(),zne=a("p"),xLo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),kLo=l(),xd=a("p"),RLo=o(`Note:
Loading a model from its configuration file does `),Wne=a("strong"),SLo=o("not"),PLo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qne=a("code"),$Lo=o("from_pretrained()"),ILo=o("to load the model weights."),jLo=l(),Hne=a("p"),DLo=o("Examples:"),NLo=l(),f(zE.$$.fragment),qLo=l(),ze=a("div"),f(WE.$$.fragment),OLo=l(),Une=a("p"),GLo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),XLo=l(),rn=a("p"),VLo=o("The model class to instantiate is selected based on the "),Jne=a("code"),zLo=o("model_type"),WLo=o(` property of the config object (either
passed as an argument or loaded from `),Yne=a("code"),QLo=o("pretrained_model_name_or_path"),HLo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kne=a("code"),ULo=o("pretrained_model_name_or_path"),JLo=o(":"),YLo=l(),N=a("ul"),x5=a("li"),Zne=a("strong"),KLo=o("albert"),ZLo=o(" \u2014 "),sD=a("a"),e7o=o("AlbertForTokenClassification"),o7o=o(" (ALBERT model)"),r7o=l(),k5=a("li"),ese=a("strong"),t7o=o("bert"),a7o=o(" \u2014 "),lD=a("a"),n7o=o("BertForTokenClassification"),s7o=o(" (BERT model)"),l7o=l(),R5=a("li"),ose=a("strong"),i7o=o("big_bird"),d7o=o(" \u2014 "),iD=a("a"),c7o=o("BigBirdForTokenClassification"),f7o=o(" (BigBird model)"),m7o=l(),S5=a("li"),rse=a("strong"),g7o=o("camembert"),h7o=o(" \u2014 "),dD=a("a"),p7o=o("CamembertForTokenClassification"),_7o=o(" (CamemBERT model)"),u7o=l(),P5=a("li"),tse=a("strong"),b7o=o("canine"),v7o=o(" \u2014 "),cD=a("a"),T7o=o("CanineForTokenClassification"),F7o=o(" (Canine model)"),C7o=l(),$5=a("li"),ase=a("strong"),M7o=o("convbert"),E7o=o(" \u2014 "),fD=a("a"),y7o=o("ConvBertForTokenClassification"),w7o=o(" (ConvBERT model)"),A7o=l(),I5=a("li"),nse=a("strong"),L7o=o("data2vec-text"),B7o=o(" \u2014 "),mD=a("a"),x7o=o("Data2VecTextForTokenClassification"),k7o=o(" (Data2VecText model)"),R7o=l(),j5=a("li"),sse=a("strong"),S7o=o("deberta"),P7o=o(" \u2014 "),gD=a("a"),$7o=o("DebertaForTokenClassification"),I7o=o(" (DeBERTa model)"),j7o=l(),D5=a("li"),lse=a("strong"),D7o=o("deberta-v2"),N7o=o(" \u2014 "),hD=a("a"),q7o=o("DebertaV2ForTokenClassification"),O7o=o(" (DeBERTa-v2 model)"),G7o=l(),N5=a("li"),ise=a("strong"),X7o=o("distilbert"),V7o=o(" \u2014 "),pD=a("a"),z7o=o("DistilBertForTokenClassification"),W7o=o(" (DistilBERT model)"),Q7o=l(),q5=a("li"),dse=a("strong"),H7o=o("electra"),U7o=o(" \u2014 "),_D=a("a"),J7o=o("ElectraForTokenClassification"),Y7o=o(" (ELECTRA model)"),K7o=l(),O5=a("li"),cse=a("strong"),Z7o=o("flaubert"),e9o=o(" \u2014 "),uD=a("a"),o9o=o("FlaubertForTokenClassification"),r9o=o(" (FlauBERT model)"),t9o=l(),G5=a("li"),fse=a("strong"),a9o=o("fnet"),n9o=o(" \u2014 "),bD=a("a"),s9o=o("FNetForTokenClassification"),l9o=o(" (FNet model)"),i9o=l(),X5=a("li"),mse=a("strong"),d9o=o("funnel"),c9o=o(" \u2014 "),vD=a("a"),f9o=o("FunnelForTokenClassification"),m9o=o(" (Funnel Transformer model)"),g9o=l(),V5=a("li"),gse=a("strong"),h9o=o("gpt2"),p9o=o(" \u2014 "),TD=a("a"),_9o=o("GPT2ForTokenClassification"),u9o=o(" (OpenAI GPT-2 model)"),b9o=l(),z5=a("li"),hse=a("strong"),v9o=o("ibert"),T9o=o(" \u2014 "),FD=a("a"),F9o=o("IBertForTokenClassification"),C9o=o(" (I-BERT model)"),M9o=l(),W5=a("li"),pse=a("strong"),E9o=o("layoutlm"),y9o=o(" \u2014 "),CD=a("a"),w9o=o("LayoutLMForTokenClassification"),A9o=o(" (LayoutLM model)"),L9o=l(),Q5=a("li"),_se=a("strong"),B9o=o("layoutlmv2"),x9o=o(" \u2014 "),MD=a("a"),k9o=o("LayoutLMv2ForTokenClassification"),R9o=o(" (LayoutLMv2 model)"),S9o=l(),H5=a("li"),use=a("strong"),P9o=o("longformer"),$9o=o(" \u2014 "),ED=a("a"),I9o=o("LongformerForTokenClassification"),j9o=o(" (Longformer model)"),D9o=l(),U5=a("li"),bse=a("strong"),N9o=o("megatron-bert"),q9o=o(" \u2014 "),yD=a("a"),O9o=o("MegatronBertForTokenClassification"),G9o=o(" (MegatronBert model)"),X9o=l(),J5=a("li"),vse=a("strong"),V9o=o("mobilebert"),z9o=o(" \u2014 "),wD=a("a"),W9o=o("MobileBertForTokenClassification"),Q9o=o(" (MobileBERT model)"),H9o=l(),Y5=a("li"),Tse=a("strong"),U9o=o("mpnet"),J9o=o(" \u2014 "),AD=a("a"),Y9o=o("MPNetForTokenClassification"),K9o=o(" (MPNet model)"),Z9o=l(),K5=a("li"),Fse=a("strong"),eBo=o("nystromformer"),oBo=o(" \u2014 "),LD=a("a"),rBo=o("NystromformerForTokenClassification"),tBo=o(" (Nystromformer model)"),aBo=l(),Z5=a("li"),Cse=a("strong"),nBo=o("qdqbert"),sBo=o(" \u2014 "),BD=a("a"),lBo=o("QDQBertForTokenClassification"),iBo=o(" (QDQBert model)"),dBo=l(),e2=a("li"),Mse=a("strong"),cBo=o("rembert"),fBo=o(" \u2014 "),xD=a("a"),mBo=o("RemBertForTokenClassification"),gBo=o(" (RemBERT model)"),hBo=l(),o2=a("li"),Ese=a("strong"),pBo=o("roberta"),_Bo=o(" \u2014 "),kD=a("a"),uBo=o("RobertaForTokenClassification"),bBo=o(" (RoBERTa model)"),vBo=l(),r2=a("li"),yse=a("strong"),TBo=o("roformer"),FBo=o(" \u2014 "),RD=a("a"),CBo=o("RoFormerForTokenClassification"),MBo=o(" (RoFormer model)"),EBo=l(),t2=a("li"),wse=a("strong"),yBo=o("squeezebert"),wBo=o(" \u2014 "),SD=a("a"),ABo=o("SqueezeBertForTokenClassification"),LBo=o(" (SqueezeBERT model)"),BBo=l(),a2=a("li"),Ase=a("strong"),xBo=o("xlm"),kBo=o(" \u2014 "),PD=a("a"),RBo=o("XLMForTokenClassification"),SBo=o(" (XLM model)"),PBo=l(),n2=a("li"),Lse=a("strong"),$Bo=o("xlm-roberta"),IBo=o(" \u2014 "),$D=a("a"),jBo=o("XLMRobertaForTokenClassification"),DBo=o(" (XLM-RoBERTa model)"),NBo=l(),s2=a("li"),Bse=a("strong"),qBo=o("xlm-roberta-xl"),OBo=o(" \u2014 "),ID=a("a"),GBo=o("XLMRobertaXLForTokenClassification"),XBo=o(" (XLM-RoBERTa-XL model)"),VBo=l(),l2=a("li"),xse=a("strong"),zBo=o("xlnet"),WBo=o(" \u2014 "),jD=a("a"),QBo=o("XLNetForTokenClassification"),HBo=o(" (XLNet model)"),UBo=l(),i2=a("li"),kse=a("strong"),JBo=o("yoso"),YBo=o(" \u2014 "),DD=a("a"),KBo=o("YosoForTokenClassification"),ZBo=o(" (YOSO model)"),exo=l(),d2=a("p"),oxo=o("The model is set in evaluation mode by default using "),Rse=a("code"),rxo=o("model.eval()"),txo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sse=a("code"),axo=o("model.train()"),nxo=l(),Pse=a("p"),sxo=o("Examples:"),lxo=l(),f(QE.$$.fragment),vke=l(),kd=a("h2"),c2=a("a"),$se=a("span"),f(HE.$$.fragment),ixo=l(),Ise=a("span"),dxo=o("AutoModelForQuestionAnswering"),Tke=l(),sr=a("div"),f(UE.$$.fragment),cxo=l(),Rd=a("p"),fxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),jse=a("code"),mxo=o("from_pretrained()"),gxo=o("class method or the "),Dse=a("code"),hxo=o("from_config()"),pxo=o(`class
method.`),_xo=l(),JE=a("p"),uxo=o("This class cannot be instantiated directly using "),Nse=a("code"),bxo=o("__init__()"),vxo=o(" (throws an error)."),Txo=l(),ot=a("div"),f(YE.$$.fragment),Fxo=l(),qse=a("p"),Cxo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Mxo=l(),Sd=a("p"),Exo=o(`Note:
Loading a model from its configuration file does `),Ose=a("strong"),yxo=o("not"),wxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Gse=a("code"),Axo=o("from_pretrained()"),Lxo=o("to load the model weights."),Bxo=l(),Xse=a("p"),xxo=o("Examples:"),kxo=l(),f(KE.$$.fragment),Rxo=l(),We=a("div"),f(ZE.$$.fragment),Sxo=l(),Vse=a("p"),Pxo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),$xo=l(),tn=a("p"),Ixo=o("The model class to instantiate is selected based on the "),zse=a("code"),jxo=o("model_type"),Dxo=o(` property of the config object (either
passed as an argument or loaded from `),Wse=a("code"),Nxo=o("pretrained_model_name_or_path"),qxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qse=a("code"),Oxo=o("pretrained_model_name_or_path"),Gxo=o(":"),Xxo=l(),R=a("ul"),f2=a("li"),Hse=a("strong"),Vxo=o("albert"),zxo=o(" \u2014 "),ND=a("a"),Wxo=o("AlbertForQuestionAnswering"),Qxo=o(" (ALBERT model)"),Hxo=l(),m2=a("li"),Use=a("strong"),Uxo=o("bart"),Jxo=o(" \u2014 "),qD=a("a"),Yxo=o("BartForQuestionAnswering"),Kxo=o(" (BART model)"),Zxo=l(),g2=a("li"),Jse=a("strong"),eko=o("bert"),oko=o(" \u2014 "),OD=a("a"),rko=o("BertForQuestionAnswering"),tko=o(" (BERT model)"),ako=l(),h2=a("li"),Yse=a("strong"),nko=o("big_bird"),sko=o(" \u2014 "),GD=a("a"),lko=o("BigBirdForQuestionAnswering"),iko=o(" (BigBird model)"),dko=l(),p2=a("li"),Kse=a("strong"),cko=o("bigbird_pegasus"),fko=o(" \u2014 "),XD=a("a"),mko=o("BigBirdPegasusForQuestionAnswering"),gko=o(" (BigBirdPegasus model)"),hko=l(),_2=a("li"),Zse=a("strong"),pko=o("camembert"),_ko=o(" \u2014 "),VD=a("a"),uko=o("CamembertForQuestionAnswering"),bko=o(" (CamemBERT model)"),vko=l(),u2=a("li"),ele=a("strong"),Tko=o("canine"),Fko=o(" \u2014 "),zD=a("a"),Cko=o("CanineForQuestionAnswering"),Mko=o(" (Canine model)"),Eko=l(),b2=a("li"),ole=a("strong"),yko=o("convbert"),wko=o(" \u2014 "),WD=a("a"),Ako=o("ConvBertForQuestionAnswering"),Lko=o(" (ConvBERT model)"),Bko=l(),v2=a("li"),rle=a("strong"),xko=o("data2vec-text"),kko=o(" \u2014 "),QD=a("a"),Rko=o("Data2VecTextForQuestionAnswering"),Sko=o(" (Data2VecText model)"),Pko=l(),T2=a("li"),tle=a("strong"),$ko=o("deberta"),Iko=o(" \u2014 "),HD=a("a"),jko=o("DebertaForQuestionAnswering"),Dko=o(" (DeBERTa model)"),Nko=l(),F2=a("li"),ale=a("strong"),qko=o("deberta-v2"),Oko=o(" \u2014 "),UD=a("a"),Gko=o("DebertaV2ForQuestionAnswering"),Xko=o(" (DeBERTa-v2 model)"),Vko=l(),C2=a("li"),nle=a("strong"),zko=o("distilbert"),Wko=o(" \u2014 "),JD=a("a"),Qko=o("DistilBertForQuestionAnswering"),Hko=o(" (DistilBERT model)"),Uko=l(),M2=a("li"),sle=a("strong"),Jko=o("electra"),Yko=o(" \u2014 "),YD=a("a"),Kko=o("ElectraForQuestionAnswering"),Zko=o(" (ELECTRA model)"),eRo=l(),E2=a("li"),lle=a("strong"),oRo=o("flaubert"),rRo=o(" \u2014 "),KD=a("a"),tRo=o("FlaubertForQuestionAnsweringSimple"),aRo=o(" (FlauBERT model)"),nRo=l(),y2=a("li"),ile=a("strong"),sRo=o("fnet"),lRo=o(" \u2014 "),ZD=a("a"),iRo=o("FNetForQuestionAnswering"),dRo=o(" (FNet model)"),cRo=l(),w2=a("li"),dle=a("strong"),fRo=o("funnel"),mRo=o(" \u2014 "),eN=a("a"),gRo=o("FunnelForQuestionAnswering"),hRo=o(" (Funnel Transformer model)"),pRo=l(),A2=a("li"),cle=a("strong"),_Ro=o("gptj"),uRo=o(" \u2014 "),oN=a("a"),bRo=o("GPTJForQuestionAnswering"),vRo=o(" (GPT-J model)"),TRo=l(),L2=a("li"),fle=a("strong"),FRo=o("ibert"),CRo=o(" \u2014 "),rN=a("a"),MRo=o("IBertForQuestionAnswering"),ERo=o(" (I-BERT model)"),yRo=l(),B2=a("li"),mle=a("strong"),wRo=o("layoutlmv2"),ARo=o(" \u2014 "),tN=a("a"),LRo=o("LayoutLMv2ForQuestionAnswering"),BRo=o(" (LayoutLMv2 model)"),xRo=l(),x2=a("li"),gle=a("strong"),kRo=o("led"),RRo=o(" \u2014 "),aN=a("a"),SRo=o("LEDForQuestionAnswering"),PRo=o(" (LED model)"),$Ro=l(),k2=a("li"),hle=a("strong"),IRo=o("longformer"),jRo=o(" \u2014 "),nN=a("a"),DRo=o("LongformerForQuestionAnswering"),NRo=o(" (Longformer model)"),qRo=l(),R2=a("li"),ple=a("strong"),ORo=o("lxmert"),GRo=o(" \u2014 "),sN=a("a"),XRo=o("LxmertForQuestionAnswering"),VRo=o(" (LXMERT model)"),zRo=l(),S2=a("li"),_le=a("strong"),WRo=o("mbart"),QRo=o(" \u2014 "),lN=a("a"),HRo=o("MBartForQuestionAnswering"),URo=o(" (mBART model)"),JRo=l(),P2=a("li"),ule=a("strong"),YRo=o("megatron-bert"),KRo=o(" \u2014 "),iN=a("a"),ZRo=o("MegatronBertForQuestionAnswering"),eSo=o(" (MegatronBert model)"),oSo=l(),$2=a("li"),ble=a("strong"),rSo=o("mobilebert"),tSo=o(" \u2014 "),dN=a("a"),aSo=o("MobileBertForQuestionAnswering"),nSo=o(" (MobileBERT model)"),sSo=l(),I2=a("li"),vle=a("strong"),lSo=o("mpnet"),iSo=o(" \u2014 "),cN=a("a"),dSo=o("MPNetForQuestionAnswering"),cSo=o(" (MPNet model)"),fSo=l(),j2=a("li"),Tle=a("strong"),mSo=o("nystromformer"),gSo=o(" \u2014 "),fN=a("a"),hSo=o("NystromformerForQuestionAnswering"),pSo=o(" (Nystromformer model)"),_So=l(),D2=a("li"),Fle=a("strong"),uSo=o("qdqbert"),bSo=o(" \u2014 "),mN=a("a"),vSo=o("QDQBertForQuestionAnswering"),TSo=o(" (QDQBert model)"),FSo=l(),N2=a("li"),Cle=a("strong"),CSo=o("reformer"),MSo=o(" \u2014 "),gN=a("a"),ESo=o("ReformerForQuestionAnswering"),ySo=o(" (Reformer model)"),wSo=l(),q2=a("li"),Mle=a("strong"),ASo=o("rembert"),LSo=o(" \u2014 "),hN=a("a"),BSo=o("RemBertForQuestionAnswering"),xSo=o(" (RemBERT model)"),kSo=l(),O2=a("li"),Ele=a("strong"),RSo=o("roberta"),SSo=o(" \u2014 "),pN=a("a"),PSo=o("RobertaForQuestionAnswering"),$So=o(" (RoBERTa model)"),ISo=l(),G2=a("li"),yle=a("strong"),jSo=o("roformer"),DSo=o(" \u2014 "),_N=a("a"),NSo=o("RoFormerForQuestionAnswering"),qSo=o(" (RoFormer model)"),OSo=l(),X2=a("li"),wle=a("strong"),GSo=o("splinter"),XSo=o(" \u2014 "),uN=a("a"),VSo=o("SplinterForQuestionAnswering"),zSo=o(" (Splinter model)"),WSo=l(),V2=a("li"),Ale=a("strong"),QSo=o("squeezebert"),HSo=o(" \u2014 "),bN=a("a"),USo=o("SqueezeBertForQuestionAnswering"),JSo=o(" (SqueezeBERT model)"),YSo=l(),z2=a("li"),Lle=a("strong"),KSo=o("xlm"),ZSo=o(" \u2014 "),vN=a("a"),ePo=o("XLMForQuestionAnsweringSimple"),oPo=o(" (XLM model)"),rPo=l(),W2=a("li"),Ble=a("strong"),tPo=o("xlm-roberta"),aPo=o(" \u2014 "),TN=a("a"),nPo=o("XLMRobertaForQuestionAnswering"),sPo=o(" (XLM-RoBERTa model)"),lPo=l(),Q2=a("li"),xle=a("strong"),iPo=o("xlm-roberta-xl"),dPo=o(" \u2014 "),FN=a("a"),cPo=o("XLMRobertaXLForQuestionAnswering"),fPo=o(" (XLM-RoBERTa-XL model)"),mPo=l(),H2=a("li"),kle=a("strong"),gPo=o("xlnet"),hPo=o(" \u2014 "),CN=a("a"),pPo=o("XLNetForQuestionAnsweringSimple"),_Po=o(" (XLNet model)"),uPo=l(),U2=a("li"),Rle=a("strong"),bPo=o("yoso"),vPo=o(" \u2014 "),MN=a("a"),TPo=o("YosoForQuestionAnswering"),FPo=o(" (YOSO model)"),CPo=l(),J2=a("p"),MPo=o("The model is set in evaluation mode by default using "),Sle=a("code"),EPo=o("model.eval()"),yPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ple=a("code"),wPo=o("model.train()"),APo=l(),$le=a("p"),LPo=o("Examples:"),BPo=l(),f(e3.$$.fragment),Fke=l(),Pd=a("h2"),Y2=a("a"),Ile=a("span"),f(o3.$$.fragment),xPo=l(),jle=a("span"),kPo=o("AutoModelForTableQuestionAnswering"),Cke=l(),lr=a("div"),f(r3.$$.fragment),RPo=l(),$d=a("p"),SPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Dle=a("code"),PPo=o("from_pretrained()"),$Po=o("class method or the "),Nle=a("code"),IPo=o("from_config()"),jPo=o(`class
method.`),DPo=l(),t3=a("p"),NPo=o("This class cannot be instantiated directly using "),qle=a("code"),qPo=o("__init__()"),OPo=o(" (throws an error)."),GPo=l(),rt=a("div"),f(a3.$$.fragment),XPo=l(),Ole=a("p"),VPo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),zPo=l(),Id=a("p"),WPo=o(`Note:
Loading a model from its configuration file does `),Gle=a("strong"),QPo=o("not"),HPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Xle=a("code"),UPo=o("from_pretrained()"),JPo=o("to load the model weights."),YPo=l(),Vle=a("p"),KPo=o("Examples:"),ZPo=l(),f(n3.$$.fragment),e$o=l(),Qe=a("div"),f(s3.$$.fragment),o$o=l(),zle=a("p"),r$o=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),t$o=l(),an=a("p"),a$o=o("The model class to instantiate is selected based on the "),Wle=a("code"),n$o=o("model_type"),s$o=o(` property of the config object (either
passed as an argument or loaded from `),Qle=a("code"),l$o=o("pretrained_model_name_or_path"),i$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hle=a("code"),d$o=o("pretrained_model_name_or_path"),c$o=o(":"),f$o=l(),Ule=a("ul"),K2=a("li"),Jle=a("strong"),m$o=o("tapas"),g$o=o(" \u2014 "),EN=a("a"),h$o=o("TapasForQuestionAnswering"),p$o=o(" (TAPAS model)"),_$o=l(),Z2=a("p"),u$o=o("The model is set in evaluation mode by default using "),Yle=a("code"),b$o=o("model.eval()"),v$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kle=a("code"),T$o=o("model.train()"),F$o=l(),Zle=a("p"),C$o=o("Examples:"),M$o=l(),f(l3.$$.fragment),Mke=l(),jd=a("h2"),ev=a("a"),eie=a("span"),f(i3.$$.fragment),E$o=l(),oie=a("span"),y$o=o("AutoModelForImageClassification"),Eke=l(),ir=a("div"),f(d3.$$.fragment),w$o=l(),Dd=a("p"),A$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),rie=a("code"),L$o=o("from_pretrained()"),B$o=o("class method or the "),tie=a("code"),x$o=o("from_config()"),k$o=o(`class
method.`),R$o=l(),c3=a("p"),S$o=o("This class cannot be instantiated directly using "),aie=a("code"),P$o=o("__init__()"),$$o=o(" (throws an error)."),I$o=l(),tt=a("div"),f(f3.$$.fragment),j$o=l(),nie=a("p"),D$o=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),N$o=l(),Nd=a("p"),q$o=o(`Note:
Loading a model from its configuration file does `),sie=a("strong"),O$o=o("not"),G$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lie=a("code"),X$o=o("from_pretrained()"),V$o=o("to load the model weights."),z$o=l(),iie=a("p"),W$o=o("Examples:"),Q$o=l(),f(m3.$$.fragment),H$o=l(),He=a("div"),f(g3.$$.fragment),U$o=l(),die=a("p"),J$o=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Y$o=l(),nn=a("p"),K$o=o("The model class to instantiate is selected based on the "),cie=a("code"),Z$o=o("model_type"),eIo=o(` property of the config object (either
passed as an argument or loaded from `),fie=a("code"),oIo=o("pretrained_model_name_or_path"),rIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mie=a("code"),tIo=o("pretrained_model_name_or_path"),aIo=o(":"),nIo=l(),Fe=a("ul"),ov=a("li"),gie=a("strong"),sIo=o("beit"),lIo=o(" \u2014 "),yN=a("a"),iIo=o("BeitForImageClassification"),dIo=o(" (BEiT model)"),cIo=l(),rv=a("li"),hie=a("strong"),fIo=o("convnext"),mIo=o(" \u2014 "),wN=a("a"),gIo=o("ConvNextForImageClassification"),hIo=o(" (ConvNext model)"),pIo=l(),zs=a("li"),pie=a("strong"),_Io=o("deit"),uIo=o(" \u2014 "),AN=a("a"),bIo=o("DeiTForImageClassification"),vIo=o(" or "),LN=a("a"),TIo=o("DeiTForImageClassificationWithTeacher"),FIo=o(" (DeiT model)"),CIo=l(),tv=a("li"),_ie=a("strong"),MIo=o("imagegpt"),EIo=o(" \u2014 "),BN=a("a"),yIo=o("ImageGPTForImageClassification"),wIo=o(" (ImageGPT model)"),AIo=l(),pa=a("li"),uie=a("strong"),LIo=o("perceiver"),BIo=o(" \u2014 "),xN=a("a"),xIo=o("PerceiverForImageClassificationLearned"),kIo=o(" or "),kN=a("a"),RIo=o("PerceiverForImageClassificationFourier"),SIo=o(" or "),RN=a("a"),PIo=o("PerceiverForImageClassificationConvProcessing"),$Io=o(" (Perceiver model)"),IIo=l(),av=a("li"),bie=a("strong"),jIo=o("poolformer"),DIo=o(" \u2014 "),SN=a("a"),NIo=o("PoolFormerForImageClassification"),qIo=o(" (PoolFormer model)"),OIo=l(),nv=a("li"),vie=a("strong"),GIo=o("segformer"),XIo=o(" \u2014 "),PN=a("a"),VIo=o("SegformerForImageClassification"),zIo=o(" (SegFormer model)"),WIo=l(),sv=a("li"),Tie=a("strong"),QIo=o("swin"),HIo=o(" \u2014 "),$N=a("a"),UIo=o("SwinForImageClassification"),JIo=o(" (Swin model)"),YIo=l(),lv=a("li"),Fie=a("strong"),KIo=o("vit"),ZIo=o(" \u2014 "),IN=a("a"),ejo=o("ViTForImageClassification"),ojo=o(" (ViT model)"),rjo=l(),iv=a("p"),tjo=o("The model is set in evaluation mode by default using "),Cie=a("code"),ajo=o("model.eval()"),njo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mie=a("code"),sjo=o("model.train()"),ljo=l(),Eie=a("p"),ijo=o("Examples:"),djo=l(),f(h3.$$.fragment),yke=l(),qd=a("h2"),dv=a("a"),yie=a("span"),f(p3.$$.fragment),cjo=l(),wie=a("span"),fjo=o("AutoModelForVision2Seq"),wke=l(),dr=a("div"),f(_3.$$.fragment),mjo=l(),Od=a("p"),gjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Aie=a("code"),hjo=o("from_pretrained()"),pjo=o("class method or the "),Lie=a("code"),_jo=o("from_config()"),ujo=o(`class
method.`),bjo=l(),u3=a("p"),vjo=o("This class cannot be instantiated directly using "),Bie=a("code"),Tjo=o("__init__()"),Fjo=o(" (throws an error)."),Cjo=l(),at=a("div"),f(b3.$$.fragment),Mjo=l(),xie=a("p"),Ejo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),yjo=l(),Gd=a("p"),wjo=o(`Note:
Loading a model from its configuration file does `),kie=a("strong"),Ajo=o("not"),Ljo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Rie=a("code"),Bjo=o("from_pretrained()"),xjo=o("to load the model weights."),kjo=l(),Sie=a("p"),Rjo=o("Examples:"),Sjo=l(),f(v3.$$.fragment),Pjo=l(),Ue=a("div"),f(T3.$$.fragment),$jo=l(),Pie=a("p"),Ijo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),jjo=l(),sn=a("p"),Djo=o("The model class to instantiate is selected based on the "),$ie=a("code"),Njo=o("model_type"),qjo=o(` property of the config object (either
passed as an argument or loaded from `),Iie=a("code"),Ojo=o("pretrained_model_name_or_path"),Gjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jie=a("code"),Xjo=o("pretrained_model_name_or_path"),Vjo=o(":"),zjo=l(),Die=a("ul"),cv=a("li"),Nie=a("strong"),Wjo=o("vision-encoder-decoder"),Qjo=o(" \u2014 "),jN=a("a"),Hjo=o("VisionEncoderDecoderModel"),Ujo=o(" (Vision Encoder decoder model)"),Jjo=l(),fv=a("p"),Yjo=o("The model is set in evaluation mode by default using "),qie=a("code"),Kjo=o("model.eval()"),Zjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oie=a("code"),eDo=o("model.train()"),oDo=l(),Gie=a("p"),rDo=o("Examples:"),tDo=l(),f(F3.$$.fragment),Ake=l(),Xd=a("h2"),mv=a("a"),Xie=a("span"),f(C3.$$.fragment),aDo=l(),Vie=a("span"),nDo=o("AutoModelForAudioClassification"),Lke=l(),cr=a("div"),f(M3.$$.fragment),sDo=l(),Vd=a("p"),lDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),zie=a("code"),iDo=o("from_pretrained()"),dDo=o("class method or the "),Wie=a("code"),cDo=o("from_config()"),fDo=o(`class
method.`),mDo=l(),E3=a("p"),gDo=o("This class cannot be instantiated directly using "),Qie=a("code"),hDo=o("__init__()"),pDo=o(" (throws an error)."),_Do=l(),nt=a("div"),f(y3.$$.fragment),uDo=l(),Hie=a("p"),bDo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),vDo=l(),zd=a("p"),TDo=o(`Note:
Loading a model from its configuration file does `),Uie=a("strong"),FDo=o("not"),CDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jie=a("code"),MDo=o("from_pretrained()"),EDo=o("to load the model weights."),yDo=l(),Yie=a("p"),wDo=o("Examples:"),ADo=l(),f(w3.$$.fragment),LDo=l(),Je=a("div"),f(A3.$$.fragment),BDo=l(),Kie=a("p"),xDo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),kDo=l(),ln=a("p"),RDo=o("The model class to instantiate is selected based on the "),Zie=a("code"),SDo=o("model_type"),PDo=o(` property of the config object (either
passed as an argument or loaded from `),ede=a("code"),$Do=o("pretrained_model_name_or_path"),IDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ode=a("code"),jDo=o("pretrained_model_name_or_path"),DDo=o(":"),NDo=l(),xe=a("ul"),gv=a("li"),rde=a("strong"),qDo=o("data2vec-audio"),ODo=o(" \u2014 "),DN=a("a"),GDo=o("Data2VecAudioForSequenceClassification"),XDo=o(" (Data2VecAudio model)"),VDo=l(),hv=a("li"),tde=a("strong"),zDo=o("hubert"),WDo=o(" \u2014 "),NN=a("a"),QDo=o("HubertForSequenceClassification"),HDo=o(" (Hubert model)"),UDo=l(),pv=a("li"),ade=a("strong"),JDo=o("sew"),YDo=o(" \u2014 "),qN=a("a"),KDo=o("SEWForSequenceClassification"),ZDo=o(" (SEW model)"),eNo=l(),_v=a("li"),nde=a("strong"),oNo=o("sew-d"),rNo=o(" \u2014 "),ON=a("a"),tNo=o("SEWDForSequenceClassification"),aNo=o(" (SEW-D model)"),nNo=l(),uv=a("li"),sde=a("strong"),sNo=o("unispeech"),lNo=o(" \u2014 "),GN=a("a"),iNo=o("UniSpeechForSequenceClassification"),dNo=o(" (UniSpeech model)"),cNo=l(),bv=a("li"),lde=a("strong"),fNo=o("unispeech-sat"),mNo=o(" \u2014 "),XN=a("a"),gNo=o("UniSpeechSatForSequenceClassification"),hNo=o(" (UniSpeechSat model)"),pNo=l(),vv=a("li"),ide=a("strong"),_No=o("wav2vec2"),uNo=o(" \u2014 "),VN=a("a"),bNo=o("Wav2Vec2ForSequenceClassification"),vNo=o(" (Wav2Vec2 model)"),TNo=l(),Tv=a("li"),dde=a("strong"),FNo=o("wavlm"),CNo=o(" \u2014 "),zN=a("a"),MNo=o("WavLMForSequenceClassification"),ENo=o(" (WavLM model)"),yNo=l(),Fv=a("p"),wNo=o("The model is set in evaluation mode by default using "),cde=a("code"),ANo=o("model.eval()"),LNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fde=a("code"),BNo=o("model.train()"),xNo=l(),mde=a("p"),kNo=o("Examples:"),RNo=l(),f(L3.$$.fragment),Bke=l(),Wd=a("h2"),Cv=a("a"),gde=a("span"),f(B3.$$.fragment),SNo=l(),hde=a("span"),PNo=o("AutoModelForAudioFrameClassification"),xke=l(),fr=a("div"),f(x3.$$.fragment),$No=l(),Qd=a("p"),INo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),pde=a("code"),jNo=o("from_pretrained()"),DNo=o("class method or the "),_de=a("code"),NNo=o("from_config()"),qNo=o(`class
method.`),ONo=l(),k3=a("p"),GNo=o("This class cannot be instantiated directly using "),ude=a("code"),XNo=o("__init__()"),VNo=o(" (throws an error)."),zNo=l(),st=a("div"),f(R3.$$.fragment),WNo=l(),bde=a("p"),QNo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),HNo=l(),Hd=a("p"),UNo=o(`Note:
Loading a model from its configuration file does `),vde=a("strong"),JNo=o("not"),YNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tde=a("code"),KNo=o("from_pretrained()"),ZNo=o("to load the model weights."),eqo=l(),Fde=a("p"),oqo=o("Examples:"),rqo=l(),f(S3.$$.fragment),tqo=l(),Ye=a("div"),f(P3.$$.fragment),aqo=l(),Cde=a("p"),nqo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),sqo=l(),dn=a("p"),lqo=o("The model class to instantiate is selected based on the "),Mde=a("code"),iqo=o("model_type"),dqo=o(` property of the config object (either
passed as an argument or loaded from `),Ede=a("code"),cqo=o("pretrained_model_name_or_path"),fqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yde=a("code"),mqo=o("pretrained_model_name_or_path"),gqo=o(":"),hqo=l(),cn=a("ul"),Mv=a("li"),wde=a("strong"),pqo=o("data2vec-audio"),_qo=o(" \u2014 "),WN=a("a"),uqo=o("Data2VecAudioForAudioFrameClassification"),bqo=o(" (Data2VecAudio model)"),vqo=l(),Ev=a("li"),Ade=a("strong"),Tqo=o("unispeech-sat"),Fqo=o(" \u2014 "),QN=a("a"),Cqo=o("UniSpeechSatForAudioFrameClassification"),Mqo=o(" (UniSpeechSat model)"),Eqo=l(),yv=a("li"),Lde=a("strong"),yqo=o("wav2vec2"),wqo=o(" \u2014 "),HN=a("a"),Aqo=o("Wav2Vec2ForAudioFrameClassification"),Lqo=o(" (Wav2Vec2 model)"),Bqo=l(),wv=a("li"),Bde=a("strong"),xqo=o("wavlm"),kqo=o(" \u2014 "),UN=a("a"),Rqo=o("WavLMForAudioFrameClassification"),Sqo=o(" (WavLM model)"),Pqo=l(),Av=a("p"),$qo=o("The model is set in evaluation mode by default using "),xde=a("code"),Iqo=o("model.eval()"),jqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kde=a("code"),Dqo=o("model.train()"),Nqo=l(),Rde=a("p"),qqo=o("Examples:"),Oqo=l(),f($3.$$.fragment),kke=l(),Ud=a("h2"),Lv=a("a"),Sde=a("span"),f(I3.$$.fragment),Gqo=l(),Pde=a("span"),Xqo=o("AutoModelForCTC"),Rke=l(),mr=a("div"),f(j3.$$.fragment),Vqo=l(),Jd=a("p"),zqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),$de=a("code"),Wqo=o("from_pretrained()"),Qqo=o("class method or the "),Ide=a("code"),Hqo=o("from_config()"),Uqo=o(`class
method.`),Jqo=l(),D3=a("p"),Yqo=o("This class cannot be instantiated directly using "),jde=a("code"),Kqo=o("__init__()"),Zqo=o(" (throws an error)."),eOo=l(),lt=a("div"),f(N3.$$.fragment),oOo=l(),Dde=a("p"),rOo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),tOo=l(),Yd=a("p"),aOo=o(`Note:
Loading a model from its configuration file does `),Nde=a("strong"),nOo=o("not"),sOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qde=a("code"),lOo=o("from_pretrained()"),iOo=o("to load the model weights."),dOo=l(),Ode=a("p"),cOo=o("Examples:"),fOo=l(),f(q3.$$.fragment),mOo=l(),Ke=a("div"),f(O3.$$.fragment),gOo=l(),Gde=a("p"),hOo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),pOo=l(),fn=a("p"),_Oo=o("The model class to instantiate is selected based on the "),Xde=a("code"),uOo=o("model_type"),bOo=o(` property of the config object (either
passed as an argument or loaded from `),Vde=a("code"),vOo=o("pretrained_model_name_or_path"),TOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zde=a("code"),FOo=o("pretrained_model_name_or_path"),COo=o(":"),MOo=l(),ke=a("ul"),Bv=a("li"),Wde=a("strong"),EOo=o("data2vec-audio"),yOo=o(" \u2014 "),JN=a("a"),wOo=o("Data2VecAudioForCTC"),AOo=o(" (Data2VecAudio model)"),LOo=l(),xv=a("li"),Qde=a("strong"),BOo=o("hubert"),xOo=o(" \u2014 "),YN=a("a"),kOo=o("HubertForCTC"),ROo=o(" (Hubert model)"),SOo=l(),kv=a("li"),Hde=a("strong"),POo=o("sew"),$Oo=o(" \u2014 "),KN=a("a"),IOo=o("SEWForCTC"),jOo=o(" (SEW model)"),DOo=l(),Rv=a("li"),Ude=a("strong"),NOo=o("sew-d"),qOo=o(" \u2014 "),ZN=a("a"),OOo=o("SEWDForCTC"),GOo=o(" (SEW-D model)"),XOo=l(),Sv=a("li"),Jde=a("strong"),VOo=o("unispeech"),zOo=o(" \u2014 "),eq=a("a"),WOo=o("UniSpeechForCTC"),QOo=o(" (UniSpeech model)"),HOo=l(),Pv=a("li"),Yde=a("strong"),UOo=o("unispeech-sat"),JOo=o(" \u2014 "),oq=a("a"),YOo=o("UniSpeechSatForCTC"),KOo=o(" (UniSpeechSat model)"),ZOo=l(),$v=a("li"),Kde=a("strong"),eGo=o("wav2vec2"),oGo=o(" \u2014 "),rq=a("a"),rGo=o("Wav2Vec2ForCTC"),tGo=o(" (Wav2Vec2 model)"),aGo=l(),Iv=a("li"),Zde=a("strong"),nGo=o("wavlm"),sGo=o(" \u2014 "),tq=a("a"),lGo=o("WavLMForCTC"),iGo=o(" (WavLM model)"),dGo=l(),jv=a("p"),cGo=o("The model is set in evaluation mode by default using "),ece=a("code"),fGo=o("model.eval()"),mGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oce=a("code"),gGo=o("model.train()"),hGo=l(),rce=a("p"),pGo=o("Examples:"),_Go=l(),f(G3.$$.fragment),Ske=l(),Kd=a("h2"),Dv=a("a"),tce=a("span"),f(X3.$$.fragment),uGo=l(),ace=a("span"),bGo=o("AutoModelForSpeechSeq2Seq"),Pke=l(),gr=a("div"),f(V3.$$.fragment),vGo=l(),Zd=a("p"),TGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),nce=a("code"),FGo=o("from_pretrained()"),CGo=o("class method or the "),sce=a("code"),MGo=o("from_config()"),EGo=o(`class
method.`),yGo=l(),z3=a("p"),wGo=o("This class cannot be instantiated directly using "),lce=a("code"),AGo=o("__init__()"),LGo=o(" (throws an error)."),BGo=l(),it=a("div"),f(W3.$$.fragment),xGo=l(),ice=a("p"),kGo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),RGo=l(),ec=a("p"),SGo=o(`Note:
Loading a model from its configuration file does `),dce=a("strong"),PGo=o("not"),$Go=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cce=a("code"),IGo=o("from_pretrained()"),jGo=o("to load the model weights."),DGo=l(),fce=a("p"),NGo=o("Examples:"),qGo=l(),f(Q3.$$.fragment),OGo=l(),Ze=a("div"),f(H3.$$.fragment),GGo=l(),mce=a("p"),XGo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),VGo=l(),mn=a("p"),zGo=o("The model class to instantiate is selected based on the "),gce=a("code"),WGo=o("model_type"),QGo=o(` property of the config object (either
passed as an argument or loaded from `),hce=a("code"),HGo=o("pretrained_model_name_or_path"),UGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pce=a("code"),JGo=o("pretrained_model_name_or_path"),YGo=o(":"),KGo=l(),U3=a("ul"),Nv=a("li"),_ce=a("strong"),ZGo=o("speech-encoder-decoder"),eXo=o(" \u2014 "),aq=a("a"),oXo=o("SpeechEncoderDecoderModel"),rXo=o(" (Speech Encoder decoder model)"),tXo=l(),qv=a("li"),uce=a("strong"),aXo=o("speech_to_text"),nXo=o(" \u2014 "),nq=a("a"),sXo=o("Speech2TextForConditionalGeneration"),lXo=o(" (Speech2Text model)"),iXo=l(),Ov=a("p"),dXo=o("The model is set in evaluation mode by default using "),bce=a("code"),cXo=o("model.eval()"),fXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vce=a("code"),mXo=o("model.train()"),gXo=l(),Tce=a("p"),hXo=o("Examples:"),pXo=l(),f(J3.$$.fragment),$ke=l(),oc=a("h2"),Gv=a("a"),Fce=a("span"),f(Y3.$$.fragment),_Xo=l(),Cce=a("span"),uXo=o("AutoModelForAudioXVector"),Ike=l(),hr=a("div"),f(K3.$$.fragment),bXo=l(),rc=a("p"),vXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),Mce=a("code"),TXo=o("from_pretrained()"),FXo=o("class method or the "),Ece=a("code"),CXo=o("from_config()"),MXo=o(`class
method.`),EXo=l(),Z3=a("p"),yXo=o("This class cannot be instantiated directly using "),yce=a("code"),wXo=o("__init__()"),AXo=o(" (throws an error)."),LXo=l(),dt=a("div"),f(ey.$$.fragment),BXo=l(),wce=a("p"),xXo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),kXo=l(),tc=a("p"),RXo=o(`Note:
Loading a model from its configuration file does `),Ace=a("strong"),SXo=o("not"),PXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lce=a("code"),$Xo=o("from_pretrained()"),IXo=o("to load the model weights."),jXo=l(),Bce=a("p"),DXo=o("Examples:"),NXo=l(),f(oy.$$.fragment),qXo=l(),eo=a("div"),f(ry.$$.fragment),OXo=l(),xce=a("p"),GXo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),XXo=l(),gn=a("p"),VXo=o("The model class to instantiate is selected based on the "),kce=a("code"),zXo=o("model_type"),WXo=o(` property of the config object (either
passed as an argument or loaded from `),Rce=a("code"),QXo=o("pretrained_model_name_or_path"),HXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sce=a("code"),UXo=o("pretrained_model_name_or_path"),JXo=o(":"),YXo=l(),hn=a("ul"),Xv=a("li"),Pce=a("strong"),KXo=o("data2vec-audio"),ZXo=o(" \u2014 "),sq=a("a"),eVo=o("Data2VecAudioForXVector"),oVo=o(" (Data2VecAudio model)"),rVo=l(),Vv=a("li"),$ce=a("strong"),tVo=o("unispeech-sat"),aVo=o(" \u2014 "),lq=a("a"),nVo=o("UniSpeechSatForXVector"),sVo=o(" (UniSpeechSat model)"),lVo=l(),zv=a("li"),Ice=a("strong"),iVo=o("wav2vec2"),dVo=o(" \u2014 "),iq=a("a"),cVo=o("Wav2Vec2ForXVector"),fVo=o(" (Wav2Vec2 model)"),mVo=l(),Wv=a("li"),jce=a("strong"),gVo=o("wavlm"),hVo=o(" \u2014 "),dq=a("a"),pVo=o("WavLMForXVector"),_Vo=o(" (WavLM model)"),uVo=l(),Qv=a("p"),bVo=o("The model is set in evaluation mode by default using "),Dce=a("code"),vVo=o("model.eval()"),TVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nce=a("code"),FVo=o("model.train()"),CVo=l(),qce=a("p"),MVo=o("Examples:"),EVo=l(),f(ty.$$.fragment),jke=l(),ac=a("h2"),Hv=a("a"),Oce=a("span"),f(ay.$$.fragment),yVo=l(),Gce=a("span"),wVo=o("AutoModelForMaskedImageModeling"),Dke=l(),pr=a("div"),f(ny.$$.fragment),AVo=l(),nc=a("p"),LVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Xce=a("code"),BVo=o("from_pretrained()"),xVo=o("class method or the "),Vce=a("code"),kVo=o("from_config()"),RVo=o(`class
method.`),SVo=l(),sy=a("p"),PVo=o("This class cannot be instantiated directly using "),zce=a("code"),$Vo=o("__init__()"),IVo=o(" (throws an error)."),jVo=l(),ct=a("div"),f(ly.$$.fragment),DVo=l(),Wce=a("p"),NVo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),qVo=l(),sc=a("p"),OVo=o(`Note:
Loading a model from its configuration file does `),Qce=a("strong"),GVo=o("not"),XVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hce=a("code"),VVo=o("from_pretrained()"),zVo=o("to load the model weights."),WVo=l(),Uce=a("p"),QVo=o("Examples:"),HVo=l(),f(iy.$$.fragment),UVo=l(),oo=a("div"),f(dy.$$.fragment),JVo=l(),Jce=a("p"),YVo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),KVo=l(),pn=a("p"),ZVo=o("The model class to instantiate is selected based on the "),Yce=a("code"),ezo=o("model_type"),ozo=o(` property of the config object (either
passed as an argument or loaded from `),Kce=a("code"),rzo=o("pretrained_model_name_or_path"),tzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zce=a("code"),azo=o("pretrained_model_name_or_path"),nzo=o(":"),szo=l(),lc=a("ul"),Uv=a("li"),efe=a("strong"),lzo=o("deit"),izo=o(" \u2014 "),cq=a("a"),dzo=o("DeiTForMaskedImageModeling"),czo=o(" (DeiT model)"),fzo=l(),Jv=a("li"),ofe=a("strong"),mzo=o("swin"),gzo=o(" \u2014 "),fq=a("a"),hzo=o("SwinForMaskedImageModeling"),pzo=o(" (Swin model)"),_zo=l(),Yv=a("li"),rfe=a("strong"),uzo=o("vit"),bzo=o(" \u2014 "),mq=a("a"),vzo=o("ViTForMaskedImageModeling"),Tzo=o(" (ViT model)"),Fzo=l(),Kv=a("p"),Czo=o("The model is set in evaluation mode by default using "),tfe=a("code"),Mzo=o("model.eval()"),Ezo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),afe=a("code"),yzo=o("model.train()"),wzo=l(),nfe=a("p"),Azo=o("Examples:"),Lzo=l(),f(cy.$$.fragment),Nke=l(),ic=a("h2"),Zv=a("a"),sfe=a("span"),f(fy.$$.fragment),Bzo=l(),lfe=a("span"),xzo=o("AutoModelForObjectDetection"),qke=l(),_r=a("div"),f(my.$$.fragment),kzo=l(),dc=a("p"),Rzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),ife=a("code"),Szo=o("from_pretrained()"),Pzo=o("class method or the "),dfe=a("code"),$zo=o("from_config()"),Izo=o(`class
method.`),jzo=l(),gy=a("p"),Dzo=o("This class cannot be instantiated directly using "),cfe=a("code"),Nzo=o("__init__()"),qzo=o(" (throws an error)."),Ozo=l(),ft=a("div"),f(hy.$$.fragment),Gzo=l(),ffe=a("p"),Xzo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Vzo=l(),cc=a("p"),zzo=o(`Note:
Loading a model from its configuration file does `),mfe=a("strong"),Wzo=o("not"),Qzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gfe=a("code"),Hzo=o("from_pretrained()"),Uzo=o("to load the model weights."),Jzo=l(),hfe=a("p"),Yzo=o("Examples:"),Kzo=l(),f(py.$$.fragment),Zzo=l(),ro=a("div"),f(_y.$$.fragment),eWo=l(),pfe=a("p"),oWo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),rWo=l(),_n=a("p"),tWo=o("The model class to instantiate is selected based on the "),_fe=a("code"),aWo=o("model_type"),nWo=o(` property of the config object (either
passed as an argument or loaded from `),ufe=a("code"),sWo=o("pretrained_model_name_or_path"),lWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bfe=a("code"),iWo=o("pretrained_model_name_or_path"),dWo=o(":"),cWo=l(),vfe=a("ul"),e6=a("li"),Tfe=a("strong"),fWo=o("detr"),mWo=o(" \u2014 "),gq=a("a"),gWo=o("DetrForObjectDetection"),hWo=o(" (DETR model)"),pWo=l(),o6=a("p"),_Wo=o("The model is set in evaluation mode by default using "),Ffe=a("code"),uWo=o("model.eval()"),bWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cfe=a("code"),vWo=o("model.train()"),TWo=l(),Mfe=a("p"),FWo=o("Examples:"),CWo=l(),f(uy.$$.fragment),Oke=l(),fc=a("h2"),r6=a("a"),Efe=a("span"),f(by.$$.fragment),MWo=l(),yfe=a("span"),EWo=o("AutoModelForImageSegmentation"),Gke=l(),ur=a("div"),f(vy.$$.fragment),yWo=l(),mc=a("p"),wWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),wfe=a("code"),AWo=o("from_pretrained()"),LWo=o("class method or the "),Afe=a("code"),BWo=o("from_config()"),xWo=o(`class
method.`),kWo=l(),Ty=a("p"),RWo=o("This class cannot be instantiated directly using "),Lfe=a("code"),SWo=o("__init__()"),PWo=o(" (throws an error)."),$Wo=l(),mt=a("div"),f(Fy.$$.fragment),IWo=l(),Bfe=a("p"),jWo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),DWo=l(),gc=a("p"),NWo=o(`Note:
Loading a model from its configuration file does `),xfe=a("strong"),qWo=o("not"),OWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kfe=a("code"),GWo=o("from_pretrained()"),XWo=o("to load the model weights."),VWo=l(),Rfe=a("p"),zWo=o("Examples:"),WWo=l(),f(Cy.$$.fragment),QWo=l(),to=a("div"),f(My.$$.fragment),HWo=l(),Sfe=a("p"),UWo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),JWo=l(),un=a("p"),YWo=o("The model class to instantiate is selected based on the "),Pfe=a("code"),KWo=o("model_type"),ZWo=o(` property of the config object (either
passed as an argument or loaded from `),$fe=a("code"),eQo=o("pretrained_model_name_or_path"),oQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ife=a("code"),rQo=o("pretrained_model_name_or_path"),tQo=o(":"),aQo=l(),jfe=a("ul"),t6=a("li"),Dfe=a("strong"),nQo=o("detr"),sQo=o(" \u2014 "),hq=a("a"),lQo=o("DetrForSegmentation"),iQo=o(" (DETR model)"),dQo=l(),a6=a("p"),cQo=o("The model is set in evaluation mode by default using "),Nfe=a("code"),fQo=o("model.eval()"),mQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qfe=a("code"),gQo=o("model.train()"),hQo=l(),Ofe=a("p"),pQo=o("Examples:"),_Qo=l(),f(Ey.$$.fragment),Xke=l(),hc=a("h2"),n6=a("a"),Gfe=a("span"),f(yy.$$.fragment),uQo=l(),Xfe=a("span"),bQo=o("AutoModelForSemanticSegmentation"),Vke=l(),br=a("div"),f(wy.$$.fragment),vQo=l(),pc=a("p"),TQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Vfe=a("code"),FQo=o("from_pretrained()"),CQo=o("class method or the "),zfe=a("code"),MQo=o("from_config()"),EQo=o(`class
method.`),yQo=l(),Ay=a("p"),wQo=o("This class cannot be instantiated directly using "),Wfe=a("code"),AQo=o("__init__()"),LQo=o(" (throws an error)."),BQo=l(),gt=a("div"),f(Ly.$$.fragment),xQo=l(),Qfe=a("p"),kQo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),RQo=l(),_c=a("p"),SQo=o(`Note:
Loading a model from its configuration file does `),Hfe=a("strong"),PQo=o("not"),$Qo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ufe=a("code"),IQo=o("from_pretrained()"),jQo=o("to load the model weights."),DQo=l(),Jfe=a("p"),NQo=o("Examples:"),qQo=l(),f(By.$$.fragment),OQo=l(),ao=a("div"),f(xy.$$.fragment),GQo=l(),Yfe=a("p"),XQo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),VQo=l(),bn=a("p"),zQo=o("The model class to instantiate is selected based on the "),Kfe=a("code"),WQo=o("model_type"),QQo=o(` property of the config object (either
passed as an argument or loaded from `),Zfe=a("code"),HQo=o("pretrained_model_name_or_path"),UQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eme=a("code"),JQo=o("pretrained_model_name_or_path"),YQo=o(":"),KQo=l(),ky=a("ul"),s6=a("li"),ome=a("strong"),ZQo=o("beit"),eHo=o(" \u2014 "),pq=a("a"),oHo=o("BeitForSemanticSegmentation"),rHo=o(" (BEiT model)"),tHo=l(),l6=a("li"),rme=a("strong"),aHo=o("segformer"),nHo=o(" \u2014 "),_q=a("a"),sHo=o("SegformerForSemanticSegmentation"),lHo=o(" (SegFormer model)"),iHo=l(),i6=a("p"),dHo=o("The model is set in evaluation mode by default using "),tme=a("code"),cHo=o("model.eval()"),fHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ame=a("code"),mHo=o("model.train()"),gHo=l(),nme=a("p"),hHo=o("Examples:"),pHo=l(),f(Ry.$$.fragment),zke=l(),uc=a("h2"),d6=a("a"),sme=a("span"),f(Sy.$$.fragment),_Ho=l(),lme=a("span"),uHo=o("AutoModelForInstanceSegmentation"),Wke=l(),vr=a("div"),f(Py.$$.fragment),bHo=l(),bc=a("p"),vHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),ime=a("code"),THo=o("from_pretrained()"),FHo=o("class method or the "),dme=a("code"),CHo=o("from_config()"),MHo=o(`class
method.`),EHo=l(),$y=a("p"),yHo=o("This class cannot be instantiated directly using "),cme=a("code"),wHo=o("__init__()"),AHo=o(" (throws an error)."),LHo=l(),ht=a("div"),f(Iy.$$.fragment),BHo=l(),fme=a("p"),xHo=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),kHo=l(),vc=a("p"),RHo=o(`Note:
Loading a model from its configuration file does `),mme=a("strong"),SHo=o("not"),PHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gme=a("code"),$Ho=o("from_pretrained()"),IHo=o("to load the model weights."),jHo=l(),hme=a("p"),DHo=o("Examples:"),NHo=l(),f(jy.$$.fragment),qHo=l(),no=a("div"),f(Dy.$$.fragment),OHo=l(),pme=a("p"),GHo=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),XHo=l(),vn=a("p"),VHo=o("The model class to instantiate is selected based on the "),_me=a("code"),zHo=o("model_type"),WHo=o(` property of the config object (either
passed as an argument or loaded from `),ume=a("code"),QHo=o("pretrained_model_name_or_path"),HHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bme=a("code"),UHo=o("pretrained_model_name_or_path"),JHo=o(":"),YHo=l(),vme=a("ul"),c6=a("li"),Tme=a("strong"),KHo=o("maskformer"),ZHo=o(" \u2014 "),uq=a("a"),eUo=o("MaskFormerForInstanceSegmentation"),oUo=o(" (MaskFormer model)"),rUo=l(),f6=a("p"),tUo=o("The model is set in evaluation mode by default using "),Fme=a("code"),aUo=o("model.eval()"),nUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cme=a("code"),sUo=o("model.train()"),lUo=l(),Mme=a("p"),iUo=o("Examples:"),dUo=l(),f(Ny.$$.fragment),Qke=l(),Tc=a("h2"),m6=a("a"),Eme=a("span"),f(qy.$$.fragment),cUo=l(),yme=a("span"),fUo=o("TFAutoModel"),Hke=l(),Tr=a("div"),f(Oy.$$.fragment),mUo=l(),Fc=a("p"),gUo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),wme=a("code"),hUo=o("from_pretrained()"),pUo=o("class method or the "),Ame=a("code"),_Uo=o("from_config()"),uUo=o(`class
method.`),bUo=l(),Gy=a("p"),vUo=o("This class cannot be instantiated directly using "),Lme=a("code"),TUo=o("__init__()"),FUo=o(" (throws an error)."),CUo=l(),pt=a("div"),f(Xy.$$.fragment),MUo=l(),Bme=a("p"),EUo=o("Instantiates one of the base model classes of the library from a configuration."),yUo=l(),Cc=a("p"),wUo=o(`Note:
Loading a model from its configuration file does `),xme=a("strong"),AUo=o("not"),LUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kme=a("code"),BUo=o("from_pretrained()"),xUo=o("to load the model weights."),kUo=l(),Rme=a("p"),RUo=o("Examples:"),SUo=l(),f(Vy.$$.fragment),PUo=l(),ho=a("div"),f(zy.$$.fragment),$Uo=l(),Sme=a("p"),IUo=o("Instantiate one of the base model classes of the library from a pretrained model."),jUo=l(),Tn=a("p"),DUo=o("The model class to instantiate is selected based on the "),Pme=a("code"),NUo=o("model_type"),qUo=o(` property of the config object (either
passed as an argument or loaded from `),$me=a("code"),OUo=o("pretrained_model_name_or_path"),GUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ime=a("code"),XUo=o("pretrained_model_name_or_path"),VUo=o(":"),zUo=l(),B=a("ul"),g6=a("li"),jme=a("strong"),WUo=o("albert"),QUo=o(" \u2014 "),bq=a("a"),HUo=o("TFAlbertModel"),UUo=o(" (ALBERT model)"),JUo=l(),h6=a("li"),Dme=a("strong"),YUo=o("bart"),KUo=o(" \u2014 "),vq=a("a"),ZUo=o("TFBartModel"),eJo=o(" (BART model)"),oJo=l(),p6=a("li"),Nme=a("strong"),rJo=o("bert"),tJo=o(" \u2014 "),Tq=a("a"),aJo=o("TFBertModel"),nJo=o(" (BERT model)"),sJo=l(),_6=a("li"),qme=a("strong"),lJo=o("blenderbot"),iJo=o(" \u2014 "),Fq=a("a"),dJo=o("TFBlenderbotModel"),cJo=o(" (Blenderbot model)"),fJo=l(),u6=a("li"),Ome=a("strong"),mJo=o("blenderbot-small"),gJo=o(" \u2014 "),Cq=a("a"),hJo=o("TFBlenderbotSmallModel"),pJo=o(" (BlenderbotSmall model)"),_Jo=l(),b6=a("li"),Gme=a("strong"),uJo=o("camembert"),bJo=o(" \u2014 "),Mq=a("a"),vJo=o("TFCamembertModel"),TJo=o(" (CamemBERT model)"),FJo=l(),v6=a("li"),Xme=a("strong"),CJo=o("clip"),MJo=o(" \u2014 "),Eq=a("a"),EJo=o("TFCLIPModel"),yJo=o(" (CLIP model)"),wJo=l(),T6=a("li"),Vme=a("strong"),AJo=o("convbert"),LJo=o(" \u2014 "),yq=a("a"),BJo=o("TFConvBertModel"),xJo=o(" (ConvBERT model)"),kJo=l(),F6=a("li"),zme=a("strong"),RJo=o("convnext"),SJo=o(" \u2014 "),wq=a("a"),PJo=o("TFConvNextModel"),$Jo=o(" (ConvNext model)"),IJo=l(),C6=a("li"),Wme=a("strong"),jJo=o("ctrl"),DJo=o(" \u2014 "),Aq=a("a"),NJo=o("TFCTRLModel"),qJo=o(" (CTRL model)"),OJo=l(),M6=a("li"),Qme=a("strong"),GJo=o("deberta"),XJo=o(" \u2014 "),Lq=a("a"),VJo=o("TFDebertaModel"),zJo=o(" (DeBERTa model)"),WJo=l(),E6=a("li"),Hme=a("strong"),QJo=o("deberta-v2"),HJo=o(" \u2014 "),Bq=a("a"),UJo=o("TFDebertaV2Model"),JJo=o(" (DeBERTa-v2 model)"),YJo=l(),y6=a("li"),Ume=a("strong"),KJo=o("distilbert"),ZJo=o(" \u2014 "),xq=a("a"),eYo=o("TFDistilBertModel"),oYo=o(" (DistilBERT model)"),rYo=l(),w6=a("li"),Jme=a("strong"),tYo=o("dpr"),aYo=o(" \u2014 "),kq=a("a"),nYo=o("TFDPRQuestionEncoder"),sYo=o(" (DPR model)"),lYo=l(),A6=a("li"),Yme=a("strong"),iYo=o("electra"),dYo=o(" \u2014 "),Rq=a("a"),cYo=o("TFElectraModel"),fYo=o(" (ELECTRA model)"),mYo=l(),L6=a("li"),Kme=a("strong"),gYo=o("flaubert"),hYo=o(" \u2014 "),Sq=a("a"),pYo=o("TFFlaubertModel"),_Yo=o(" (FlauBERT model)"),uYo=l(),Ws=a("li"),Zme=a("strong"),bYo=o("funnel"),vYo=o(" \u2014 "),Pq=a("a"),TYo=o("TFFunnelModel"),FYo=o(" or "),$q=a("a"),CYo=o("TFFunnelBaseModel"),MYo=o(" (Funnel Transformer model)"),EYo=l(),B6=a("li"),ege=a("strong"),yYo=o("gpt2"),wYo=o(" \u2014 "),Iq=a("a"),AYo=o("TFGPT2Model"),LYo=o(" (OpenAI GPT-2 model)"),BYo=l(),x6=a("li"),oge=a("strong"),xYo=o("hubert"),kYo=o(" \u2014 "),jq=a("a"),RYo=o("TFHubertModel"),SYo=o(" (Hubert model)"),PYo=l(),k6=a("li"),rge=a("strong"),$Yo=o("layoutlm"),IYo=o(" \u2014 "),Dq=a("a"),jYo=o("TFLayoutLMModel"),DYo=o(" (LayoutLM model)"),NYo=l(),R6=a("li"),tge=a("strong"),qYo=o("led"),OYo=o(" \u2014 "),Nq=a("a"),GYo=o("TFLEDModel"),XYo=o(" (LED model)"),VYo=l(),S6=a("li"),age=a("strong"),zYo=o("longformer"),WYo=o(" \u2014 "),qq=a("a"),QYo=o("TFLongformerModel"),HYo=o(" (Longformer model)"),UYo=l(),P6=a("li"),nge=a("strong"),JYo=o("lxmert"),YYo=o(" \u2014 "),Oq=a("a"),KYo=o("TFLxmertModel"),ZYo=o(" (LXMERT model)"),eKo=l(),$6=a("li"),sge=a("strong"),oKo=o("marian"),rKo=o(" \u2014 "),Gq=a("a"),tKo=o("TFMarianModel"),aKo=o(" (Marian model)"),nKo=l(),I6=a("li"),lge=a("strong"),sKo=o("mbart"),lKo=o(" \u2014 "),Xq=a("a"),iKo=o("TFMBartModel"),dKo=o(" (mBART model)"),cKo=l(),j6=a("li"),ige=a("strong"),fKo=o("mobilebert"),mKo=o(" \u2014 "),Vq=a("a"),gKo=o("TFMobileBertModel"),hKo=o(" (MobileBERT model)"),pKo=l(),D6=a("li"),dge=a("strong"),_Ko=o("mpnet"),uKo=o(" \u2014 "),zq=a("a"),bKo=o("TFMPNetModel"),vKo=o(" (MPNet model)"),TKo=l(),N6=a("li"),cge=a("strong"),FKo=o("mt5"),CKo=o(" \u2014 "),Wq=a("a"),MKo=o("TFMT5Model"),EKo=o(" (mT5 model)"),yKo=l(),q6=a("li"),fge=a("strong"),wKo=o("openai-gpt"),AKo=o(" \u2014 "),Qq=a("a"),LKo=o("TFOpenAIGPTModel"),BKo=o(" (OpenAI GPT model)"),xKo=l(),O6=a("li"),mge=a("strong"),kKo=o("pegasus"),RKo=o(" \u2014 "),Hq=a("a"),SKo=o("TFPegasusModel"),PKo=o(" (Pegasus model)"),$Ko=l(),G6=a("li"),gge=a("strong"),IKo=o("rembert"),jKo=o(" \u2014 "),Uq=a("a"),DKo=o("TFRemBertModel"),NKo=o(" (RemBERT model)"),qKo=l(),X6=a("li"),hge=a("strong"),OKo=o("roberta"),GKo=o(" \u2014 "),Jq=a("a"),XKo=o("TFRobertaModel"),VKo=o(" (RoBERTa model)"),zKo=l(),V6=a("li"),pge=a("strong"),WKo=o("roformer"),QKo=o(" \u2014 "),Yq=a("a"),HKo=o("TFRoFormerModel"),UKo=o(" (RoFormer model)"),JKo=l(),z6=a("li"),_ge=a("strong"),YKo=o("speech_to_text"),KKo=o(" \u2014 "),Kq=a("a"),ZKo=o("TFSpeech2TextModel"),eZo=o(" (Speech2Text model)"),oZo=l(),W6=a("li"),uge=a("strong"),rZo=o("t5"),tZo=o(" \u2014 "),Zq=a("a"),aZo=o("TFT5Model"),nZo=o(" (T5 model)"),sZo=l(),Q6=a("li"),bge=a("strong"),lZo=o("tapas"),iZo=o(" \u2014 "),eO=a("a"),dZo=o("TFTapasModel"),cZo=o(" (TAPAS model)"),fZo=l(),H6=a("li"),vge=a("strong"),mZo=o("transfo-xl"),gZo=o(" \u2014 "),oO=a("a"),hZo=o("TFTransfoXLModel"),pZo=o(" (Transformer-XL model)"),_Zo=l(),U6=a("li"),Tge=a("strong"),uZo=o("vit"),bZo=o(" \u2014 "),rO=a("a"),vZo=o("TFViTModel"),TZo=o(" (ViT model)"),FZo=l(),J6=a("li"),Fge=a("strong"),CZo=o("wav2vec2"),MZo=o(" \u2014 "),tO=a("a"),EZo=o("TFWav2Vec2Model"),yZo=o(" (Wav2Vec2 model)"),wZo=l(),Y6=a("li"),Cge=a("strong"),AZo=o("xlm"),LZo=o(" \u2014 "),aO=a("a"),BZo=o("TFXLMModel"),xZo=o(" (XLM model)"),kZo=l(),K6=a("li"),Mge=a("strong"),RZo=o("xlm-roberta"),SZo=o(" \u2014 "),nO=a("a"),PZo=o("TFXLMRobertaModel"),$Zo=o(" (XLM-RoBERTa model)"),IZo=l(),Z6=a("li"),Ege=a("strong"),jZo=o("xlnet"),DZo=o(" \u2014 "),sO=a("a"),NZo=o("TFXLNetModel"),qZo=o(" (XLNet model)"),OZo=l(),yge=a("p"),GZo=o("Examples:"),XZo=l(),f(Wy.$$.fragment),Uke=l(),Mc=a("h2"),e0=a("a"),wge=a("span"),f(Qy.$$.fragment),VZo=l(),Age=a("span"),zZo=o("TFAutoModelForPreTraining"),Jke=l(),Fr=a("div"),f(Hy.$$.fragment),WZo=l(),Ec=a("p"),QZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Lge=a("code"),HZo=o("from_pretrained()"),UZo=o("class method or the "),Bge=a("code"),JZo=o("from_config()"),YZo=o(`class
method.`),KZo=l(),Uy=a("p"),ZZo=o("This class cannot be instantiated directly using "),xge=a("code"),eer=o("__init__()"),oer=o(" (throws an error)."),rer=l(),_t=a("div"),f(Jy.$$.fragment),ter=l(),kge=a("p"),aer=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),ner=l(),yc=a("p"),ser=o(`Note:
Loading a model from its configuration file does `),Rge=a("strong"),ler=o("not"),ier=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Sge=a("code"),der=o("from_pretrained()"),cer=o("to load the model weights."),fer=l(),Pge=a("p"),mer=o("Examples:"),ger=l(),f(Yy.$$.fragment),her=l(),po=a("div"),f(Ky.$$.fragment),per=l(),$ge=a("p"),_er=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),uer=l(),Fn=a("p"),ber=o("The model class to instantiate is selected based on the "),Ige=a("code"),ver=o("model_type"),Ter=o(` property of the config object (either
passed as an argument or loaded from `),jge=a("code"),Fer=o("pretrained_model_name_or_path"),Cer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dge=a("code"),Mer=o("pretrained_model_name_or_path"),Eer=o(":"),yer=l(),H=a("ul"),o0=a("li"),Nge=a("strong"),wer=o("albert"),Aer=o(" \u2014 "),lO=a("a"),Ler=o("TFAlbertForPreTraining"),Ber=o(" (ALBERT model)"),xer=l(),r0=a("li"),qge=a("strong"),ker=o("bart"),Rer=o(" \u2014 "),iO=a("a"),Ser=o("TFBartForConditionalGeneration"),Per=o(" (BART model)"),$er=l(),t0=a("li"),Oge=a("strong"),Ier=o("bert"),jer=o(" \u2014 "),dO=a("a"),Der=o("TFBertForPreTraining"),Ner=o(" (BERT model)"),qer=l(),a0=a("li"),Gge=a("strong"),Oer=o("camembert"),Ger=o(" \u2014 "),cO=a("a"),Xer=o("TFCamembertForMaskedLM"),Ver=o(" (CamemBERT model)"),zer=l(),n0=a("li"),Xge=a("strong"),Wer=o("ctrl"),Qer=o(" \u2014 "),fO=a("a"),Her=o("TFCTRLLMHeadModel"),Uer=o(" (CTRL model)"),Jer=l(),s0=a("li"),Vge=a("strong"),Yer=o("distilbert"),Ker=o(" \u2014 "),mO=a("a"),Zer=o("TFDistilBertForMaskedLM"),eor=o(" (DistilBERT model)"),oor=l(),l0=a("li"),zge=a("strong"),ror=o("electra"),tor=o(" \u2014 "),gO=a("a"),aor=o("TFElectraForPreTraining"),nor=o(" (ELECTRA model)"),sor=l(),i0=a("li"),Wge=a("strong"),lor=o("flaubert"),ior=o(" \u2014 "),hO=a("a"),dor=o("TFFlaubertWithLMHeadModel"),cor=o(" (FlauBERT model)"),mor=l(),d0=a("li"),Qge=a("strong"),gor=o("funnel"),hor=o(" \u2014 "),pO=a("a"),por=o("TFFunnelForPreTraining"),_or=o(" (Funnel Transformer model)"),uor=l(),c0=a("li"),Hge=a("strong"),bor=o("gpt2"),vor=o(" \u2014 "),_O=a("a"),Tor=o("TFGPT2LMHeadModel"),For=o(" (OpenAI GPT-2 model)"),Cor=l(),f0=a("li"),Uge=a("strong"),Mor=o("layoutlm"),Eor=o(" \u2014 "),uO=a("a"),yor=o("TFLayoutLMForMaskedLM"),wor=o(" (LayoutLM model)"),Aor=l(),m0=a("li"),Jge=a("strong"),Lor=o("lxmert"),Bor=o(" \u2014 "),bO=a("a"),xor=o("TFLxmertForPreTraining"),kor=o(" (LXMERT model)"),Ror=l(),g0=a("li"),Yge=a("strong"),Sor=o("mobilebert"),Por=o(" \u2014 "),vO=a("a"),$or=o("TFMobileBertForPreTraining"),Ior=o(" (MobileBERT model)"),jor=l(),h0=a("li"),Kge=a("strong"),Dor=o("mpnet"),Nor=o(" \u2014 "),TO=a("a"),qor=o("TFMPNetForMaskedLM"),Oor=o(" (MPNet model)"),Gor=l(),p0=a("li"),Zge=a("strong"),Xor=o("openai-gpt"),Vor=o(" \u2014 "),FO=a("a"),zor=o("TFOpenAIGPTLMHeadModel"),Wor=o(" (OpenAI GPT model)"),Qor=l(),_0=a("li"),ehe=a("strong"),Hor=o("roberta"),Uor=o(" \u2014 "),CO=a("a"),Jor=o("TFRobertaForMaskedLM"),Yor=o(" (RoBERTa model)"),Kor=l(),u0=a("li"),ohe=a("strong"),Zor=o("t5"),err=o(" \u2014 "),MO=a("a"),orr=o("TFT5ForConditionalGeneration"),rrr=o(" (T5 model)"),trr=l(),b0=a("li"),rhe=a("strong"),arr=o("tapas"),nrr=o(" \u2014 "),EO=a("a"),srr=o("TFTapasForMaskedLM"),lrr=o(" (TAPAS model)"),irr=l(),v0=a("li"),the=a("strong"),drr=o("transfo-xl"),crr=o(" \u2014 "),yO=a("a"),frr=o("TFTransfoXLLMHeadModel"),mrr=o(" (Transformer-XL model)"),grr=l(),T0=a("li"),ahe=a("strong"),hrr=o("xlm"),prr=o(" \u2014 "),wO=a("a"),_rr=o("TFXLMWithLMHeadModel"),urr=o(" (XLM model)"),brr=l(),F0=a("li"),nhe=a("strong"),vrr=o("xlm-roberta"),Trr=o(" \u2014 "),AO=a("a"),Frr=o("TFXLMRobertaForMaskedLM"),Crr=o(" (XLM-RoBERTa model)"),Mrr=l(),C0=a("li"),she=a("strong"),Err=o("xlnet"),yrr=o(" \u2014 "),LO=a("a"),wrr=o("TFXLNetLMHeadModel"),Arr=o(" (XLNet model)"),Lrr=l(),lhe=a("p"),Brr=o("Examples:"),xrr=l(),f(Zy.$$.fragment),Yke=l(),wc=a("h2"),M0=a("a"),ihe=a("span"),f(ew.$$.fragment),krr=l(),dhe=a("span"),Rrr=o("TFAutoModelForCausalLM"),Kke=l(),Cr=a("div"),f(ow.$$.fragment),Srr=l(),Ac=a("p"),Prr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),che=a("code"),$rr=o("from_pretrained()"),Irr=o("class method or the "),fhe=a("code"),jrr=o("from_config()"),Drr=o(`class
method.`),Nrr=l(),rw=a("p"),qrr=o("This class cannot be instantiated directly using "),mhe=a("code"),Orr=o("__init__()"),Grr=o(" (throws an error)."),Xrr=l(),ut=a("div"),f(tw.$$.fragment),Vrr=l(),ghe=a("p"),zrr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Wrr=l(),Lc=a("p"),Qrr=o(`Note:
Loading a model from its configuration file does `),hhe=a("strong"),Hrr=o("not"),Urr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),phe=a("code"),Jrr=o("from_pretrained()"),Yrr=o("to load the model weights."),Krr=l(),_he=a("p"),Zrr=o("Examples:"),etr=l(),f(aw.$$.fragment),otr=l(),_o=a("div"),f(nw.$$.fragment),rtr=l(),uhe=a("p"),ttr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),atr=l(),Cn=a("p"),ntr=o("The model class to instantiate is selected based on the "),bhe=a("code"),str=o("model_type"),ltr=o(` property of the config object (either
passed as an argument or loaded from `),vhe=a("code"),itr=o("pretrained_model_name_or_path"),dtr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),The=a("code"),ctr=o("pretrained_model_name_or_path"),ftr=o(":"),mtr=l(),pe=a("ul"),E0=a("li"),Fhe=a("strong"),gtr=o("bert"),htr=o(" \u2014 "),BO=a("a"),ptr=o("TFBertLMHeadModel"),_tr=o(" (BERT model)"),utr=l(),y0=a("li"),Che=a("strong"),btr=o("ctrl"),vtr=o(" \u2014 "),xO=a("a"),Ttr=o("TFCTRLLMHeadModel"),Ftr=o(" (CTRL model)"),Ctr=l(),w0=a("li"),Mhe=a("strong"),Mtr=o("gpt2"),Etr=o(" \u2014 "),kO=a("a"),ytr=o("TFGPT2LMHeadModel"),wtr=o(" (OpenAI GPT-2 model)"),Atr=l(),A0=a("li"),Ehe=a("strong"),Ltr=o("openai-gpt"),Btr=o(" \u2014 "),RO=a("a"),xtr=o("TFOpenAIGPTLMHeadModel"),ktr=o(" (OpenAI GPT model)"),Rtr=l(),L0=a("li"),yhe=a("strong"),Str=o("rembert"),Ptr=o(" \u2014 "),SO=a("a"),$tr=o("TFRemBertForCausalLM"),Itr=o(" (RemBERT model)"),jtr=l(),B0=a("li"),whe=a("strong"),Dtr=o("roberta"),Ntr=o(" \u2014 "),PO=a("a"),qtr=o("TFRobertaForCausalLM"),Otr=o(" (RoBERTa model)"),Gtr=l(),x0=a("li"),Ahe=a("strong"),Xtr=o("roformer"),Vtr=o(" \u2014 "),$O=a("a"),ztr=o("TFRoFormerForCausalLM"),Wtr=o(" (RoFormer model)"),Qtr=l(),k0=a("li"),Lhe=a("strong"),Htr=o("transfo-xl"),Utr=o(" \u2014 "),IO=a("a"),Jtr=o("TFTransfoXLLMHeadModel"),Ytr=o(" (Transformer-XL model)"),Ktr=l(),R0=a("li"),Bhe=a("strong"),Ztr=o("xlm"),ear=o(" \u2014 "),jO=a("a"),oar=o("TFXLMWithLMHeadModel"),rar=o(" (XLM model)"),tar=l(),S0=a("li"),xhe=a("strong"),aar=o("xlnet"),nar=o(" \u2014 "),DO=a("a"),sar=o("TFXLNetLMHeadModel"),lar=o(" (XLNet model)"),iar=l(),khe=a("p"),dar=o("Examples:"),car=l(),f(sw.$$.fragment),Zke=l(),Bc=a("h2"),P0=a("a"),Rhe=a("span"),f(lw.$$.fragment),far=l(),She=a("span"),mar=o("TFAutoModelForImageClassification"),eRe=l(),Mr=a("div"),f(iw.$$.fragment),gar=l(),xc=a("p"),har=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Phe=a("code"),par=o("from_pretrained()"),_ar=o("class method or the "),$he=a("code"),uar=o("from_config()"),bar=o(`class
method.`),Tar=l(),dw=a("p"),Far=o("This class cannot be instantiated directly using "),Ihe=a("code"),Car=o("__init__()"),Mar=o(" (throws an error)."),Ear=l(),bt=a("div"),f(cw.$$.fragment),yar=l(),jhe=a("p"),war=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Aar=l(),kc=a("p"),Lar=o(`Note:
Loading a model from its configuration file does `),Dhe=a("strong"),Bar=o("not"),xar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nhe=a("code"),kar=o("from_pretrained()"),Rar=o("to load the model weights."),Sar=l(),qhe=a("p"),Par=o("Examples:"),$ar=l(),f(fw.$$.fragment),Iar=l(),uo=a("div"),f(mw.$$.fragment),jar=l(),Ohe=a("p"),Dar=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Nar=l(),Mn=a("p"),qar=o("The model class to instantiate is selected based on the "),Ghe=a("code"),Oar=o("model_type"),Gar=o(` property of the config object (either
passed as an argument or loaded from `),Xhe=a("code"),Xar=o("pretrained_model_name_or_path"),Var=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vhe=a("code"),zar=o("pretrained_model_name_or_path"),War=o(":"),Qar=l(),gw=a("ul"),$0=a("li"),zhe=a("strong"),Har=o("convnext"),Uar=o(" \u2014 "),NO=a("a"),Jar=o("TFConvNextForImageClassification"),Yar=o(" (ConvNext model)"),Kar=l(),I0=a("li"),Whe=a("strong"),Zar=o("vit"),enr=o(" \u2014 "),qO=a("a"),onr=o("TFViTForImageClassification"),rnr=o(" (ViT model)"),tnr=l(),Qhe=a("p"),anr=o("Examples:"),nnr=l(),f(hw.$$.fragment),oRe=l(),Rc=a("h2"),j0=a("a"),Hhe=a("span"),f(pw.$$.fragment),snr=l(),Uhe=a("span"),lnr=o("TFAutoModelForMaskedLM"),rRe=l(),Er=a("div"),f(_w.$$.fragment),inr=l(),Sc=a("p"),dnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Jhe=a("code"),cnr=o("from_pretrained()"),fnr=o("class method or the "),Yhe=a("code"),mnr=o("from_config()"),gnr=o(`class
method.`),hnr=l(),uw=a("p"),pnr=o("This class cannot be instantiated directly using "),Khe=a("code"),_nr=o("__init__()"),unr=o(" (throws an error)."),bnr=l(),vt=a("div"),f(bw.$$.fragment),vnr=l(),Zhe=a("p"),Tnr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Fnr=l(),Pc=a("p"),Cnr=o(`Note:
Loading a model from its configuration file does `),epe=a("strong"),Mnr=o("not"),Enr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ope=a("code"),ynr=o("from_pretrained()"),wnr=o("to load the model weights."),Anr=l(),rpe=a("p"),Lnr=o("Examples:"),Bnr=l(),f(vw.$$.fragment),xnr=l(),bo=a("div"),f(Tw.$$.fragment),knr=l(),tpe=a("p"),Rnr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Snr=l(),En=a("p"),Pnr=o("The model class to instantiate is selected based on the "),ape=a("code"),$nr=o("model_type"),Inr=o(` property of the config object (either
passed as an argument or loaded from `),npe=a("code"),jnr=o("pretrained_model_name_or_path"),Dnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),spe=a("code"),Nnr=o("pretrained_model_name_or_path"),qnr=o(":"),Onr=l(),Y=a("ul"),D0=a("li"),lpe=a("strong"),Gnr=o("albert"),Xnr=o(" \u2014 "),OO=a("a"),Vnr=o("TFAlbertForMaskedLM"),znr=o(" (ALBERT model)"),Wnr=l(),N0=a("li"),ipe=a("strong"),Qnr=o("bert"),Hnr=o(" \u2014 "),GO=a("a"),Unr=o("TFBertForMaskedLM"),Jnr=o(" (BERT model)"),Ynr=l(),q0=a("li"),dpe=a("strong"),Knr=o("camembert"),Znr=o(" \u2014 "),XO=a("a"),esr=o("TFCamembertForMaskedLM"),osr=o(" (CamemBERT model)"),rsr=l(),O0=a("li"),cpe=a("strong"),tsr=o("convbert"),asr=o(" \u2014 "),VO=a("a"),nsr=o("TFConvBertForMaskedLM"),ssr=o(" (ConvBERT model)"),lsr=l(),G0=a("li"),fpe=a("strong"),isr=o("deberta"),dsr=o(" \u2014 "),zO=a("a"),csr=o("TFDebertaForMaskedLM"),fsr=o(" (DeBERTa model)"),msr=l(),X0=a("li"),mpe=a("strong"),gsr=o("deberta-v2"),hsr=o(" \u2014 "),WO=a("a"),psr=o("TFDebertaV2ForMaskedLM"),_sr=o(" (DeBERTa-v2 model)"),usr=l(),V0=a("li"),gpe=a("strong"),bsr=o("distilbert"),vsr=o(" \u2014 "),QO=a("a"),Tsr=o("TFDistilBertForMaskedLM"),Fsr=o(" (DistilBERT model)"),Csr=l(),z0=a("li"),hpe=a("strong"),Msr=o("electra"),Esr=o(" \u2014 "),HO=a("a"),ysr=o("TFElectraForMaskedLM"),wsr=o(" (ELECTRA model)"),Asr=l(),W0=a("li"),ppe=a("strong"),Lsr=o("flaubert"),Bsr=o(" \u2014 "),UO=a("a"),xsr=o("TFFlaubertWithLMHeadModel"),ksr=o(" (FlauBERT model)"),Rsr=l(),Q0=a("li"),_pe=a("strong"),Ssr=o("funnel"),Psr=o(" \u2014 "),JO=a("a"),$sr=o("TFFunnelForMaskedLM"),Isr=o(" (Funnel Transformer model)"),jsr=l(),H0=a("li"),upe=a("strong"),Dsr=o("layoutlm"),Nsr=o(" \u2014 "),YO=a("a"),qsr=o("TFLayoutLMForMaskedLM"),Osr=o(" (LayoutLM model)"),Gsr=l(),U0=a("li"),bpe=a("strong"),Xsr=o("longformer"),Vsr=o(" \u2014 "),KO=a("a"),zsr=o("TFLongformerForMaskedLM"),Wsr=o(" (Longformer model)"),Qsr=l(),J0=a("li"),vpe=a("strong"),Hsr=o("mobilebert"),Usr=o(" \u2014 "),ZO=a("a"),Jsr=o("TFMobileBertForMaskedLM"),Ysr=o(" (MobileBERT model)"),Ksr=l(),Y0=a("li"),Tpe=a("strong"),Zsr=o("mpnet"),elr=o(" \u2014 "),eG=a("a"),olr=o("TFMPNetForMaskedLM"),rlr=o(" (MPNet model)"),tlr=l(),K0=a("li"),Fpe=a("strong"),alr=o("rembert"),nlr=o(" \u2014 "),oG=a("a"),slr=o("TFRemBertForMaskedLM"),llr=o(" (RemBERT model)"),ilr=l(),Z0=a("li"),Cpe=a("strong"),dlr=o("roberta"),clr=o(" \u2014 "),rG=a("a"),flr=o("TFRobertaForMaskedLM"),mlr=o(" (RoBERTa model)"),glr=l(),eT=a("li"),Mpe=a("strong"),hlr=o("roformer"),plr=o(" \u2014 "),tG=a("a"),_lr=o("TFRoFormerForMaskedLM"),ulr=o(" (RoFormer model)"),blr=l(),oT=a("li"),Epe=a("strong"),vlr=o("tapas"),Tlr=o(" \u2014 "),aG=a("a"),Flr=o("TFTapasForMaskedLM"),Clr=o(" (TAPAS model)"),Mlr=l(),rT=a("li"),ype=a("strong"),Elr=o("xlm"),ylr=o(" \u2014 "),nG=a("a"),wlr=o("TFXLMWithLMHeadModel"),Alr=o(" (XLM model)"),Llr=l(),tT=a("li"),wpe=a("strong"),Blr=o("xlm-roberta"),xlr=o(" \u2014 "),sG=a("a"),klr=o("TFXLMRobertaForMaskedLM"),Rlr=o(" (XLM-RoBERTa model)"),Slr=l(),Ape=a("p"),Plr=o("Examples:"),$lr=l(),f(Fw.$$.fragment),tRe=l(),$c=a("h2"),aT=a("a"),Lpe=a("span"),f(Cw.$$.fragment),Ilr=l(),Bpe=a("span"),jlr=o("TFAutoModelForSeq2SeqLM"),aRe=l(),yr=a("div"),f(Mw.$$.fragment),Dlr=l(),Ic=a("p"),Nlr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),xpe=a("code"),qlr=o("from_pretrained()"),Olr=o("class method or the "),kpe=a("code"),Glr=o("from_config()"),Xlr=o(`class
method.`),Vlr=l(),Ew=a("p"),zlr=o("This class cannot be instantiated directly using "),Rpe=a("code"),Wlr=o("__init__()"),Qlr=o(" (throws an error)."),Hlr=l(),Tt=a("div"),f(yw.$$.fragment),Ulr=l(),Spe=a("p"),Jlr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Ylr=l(),jc=a("p"),Klr=o(`Note:
Loading a model from its configuration file does `),Ppe=a("strong"),Zlr=o("not"),eir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$pe=a("code"),oir=o("from_pretrained()"),rir=o("to load the model weights."),tir=l(),Ipe=a("p"),air=o("Examples:"),nir=l(),f(ww.$$.fragment),sir=l(),vo=a("div"),f(Aw.$$.fragment),lir=l(),jpe=a("p"),iir=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),dir=l(),yn=a("p"),cir=o("The model class to instantiate is selected based on the "),Dpe=a("code"),fir=o("model_type"),mir=o(` property of the config object (either
passed as an argument or loaded from `),Npe=a("code"),gir=o("pretrained_model_name_or_path"),hir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qpe=a("code"),pir=o("pretrained_model_name_or_path"),_ir=o(":"),uir=l(),_e=a("ul"),nT=a("li"),Ope=a("strong"),bir=o("bart"),vir=o(" \u2014 "),lG=a("a"),Tir=o("TFBartForConditionalGeneration"),Fir=o(" (BART model)"),Cir=l(),sT=a("li"),Gpe=a("strong"),Mir=o("blenderbot"),Eir=o(" \u2014 "),iG=a("a"),yir=o("TFBlenderbotForConditionalGeneration"),wir=o(" (Blenderbot model)"),Air=l(),lT=a("li"),Xpe=a("strong"),Lir=o("blenderbot-small"),Bir=o(" \u2014 "),dG=a("a"),xir=o("TFBlenderbotSmallForConditionalGeneration"),kir=o(" (BlenderbotSmall model)"),Rir=l(),iT=a("li"),Vpe=a("strong"),Sir=o("encoder-decoder"),Pir=o(" \u2014 "),cG=a("a"),$ir=o("TFEncoderDecoderModel"),Iir=o(" (Encoder decoder model)"),jir=l(),dT=a("li"),zpe=a("strong"),Dir=o("led"),Nir=o(" \u2014 "),fG=a("a"),qir=o("TFLEDForConditionalGeneration"),Oir=o(" (LED model)"),Gir=l(),cT=a("li"),Wpe=a("strong"),Xir=o("marian"),Vir=o(" \u2014 "),mG=a("a"),zir=o("TFMarianMTModel"),Wir=o(" (Marian model)"),Qir=l(),fT=a("li"),Qpe=a("strong"),Hir=o("mbart"),Uir=o(" \u2014 "),gG=a("a"),Jir=o("TFMBartForConditionalGeneration"),Yir=o(" (mBART model)"),Kir=l(),mT=a("li"),Hpe=a("strong"),Zir=o("mt5"),edr=o(" \u2014 "),hG=a("a"),odr=o("TFMT5ForConditionalGeneration"),rdr=o(" (mT5 model)"),tdr=l(),gT=a("li"),Upe=a("strong"),adr=o("pegasus"),ndr=o(" \u2014 "),pG=a("a"),sdr=o("TFPegasusForConditionalGeneration"),ldr=o(" (Pegasus model)"),idr=l(),hT=a("li"),Jpe=a("strong"),ddr=o("t5"),cdr=o(" \u2014 "),_G=a("a"),fdr=o("TFT5ForConditionalGeneration"),mdr=o(" (T5 model)"),gdr=l(),Ype=a("p"),hdr=o("Examples:"),pdr=l(),f(Lw.$$.fragment),nRe=l(),Dc=a("h2"),pT=a("a"),Kpe=a("span"),f(Bw.$$.fragment),_dr=l(),Zpe=a("span"),udr=o("TFAutoModelForSequenceClassification"),sRe=l(),wr=a("div"),f(xw.$$.fragment),bdr=l(),Nc=a("p"),vdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),e_e=a("code"),Tdr=o("from_pretrained()"),Fdr=o("class method or the "),o_e=a("code"),Cdr=o("from_config()"),Mdr=o(`class
method.`),Edr=l(),kw=a("p"),ydr=o("This class cannot be instantiated directly using "),r_e=a("code"),wdr=o("__init__()"),Adr=o(" (throws an error)."),Ldr=l(),Ft=a("div"),f(Rw.$$.fragment),Bdr=l(),t_e=a("p"),xdr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),kdr=l(),qc=a("p"),Rdr=o(`Note:
Loading a model from its configuration file does `),a_e=a("strong"),Sdr=o("not"),Pdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),n_e=a("code"),$dr=o("from_pretrained()"),Idr=o("to load the model weights."),jdr=l(),s_e=a("p"),Ddr=o("Examples:"),Ndr=l(),f(Sw.$$.fragment),qdr=l(),To=a("div"),f(Pw.$$.fragment),Odr=l(),l_e=a("p"),Gdr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Xdr=l(),wn=a("p"),Vdr=o("The model class to instantiate is selected based on the "),i_e=a("code"),zdr=o("model_type"),Wdr=o(` property of the config object (either
passed as an argument or loaded from `),d_e=a("code"),Qdr=o("pretrained_model_name_or_path"),Hdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c_e=a("code"),Udr=o("pretrained_model_name_or_path"),Jdr=o(":"),Ydr=l(),V=a("ul"),_T=a("li"),f_e=a("strong"),Kdr=o("albert"),Zdr=o(" \u2014 "),uG=a("a"),ecr=o("TFAlbertForSequenceClassification"),ocr=o(" (ALBERT model)"),rcr=l(),uT=a("li"),m_e=a("strong"),tcr=o("bert"),acr=o(" \u2014 "),bG=a("a"),ncr=o("TFBertForSequenceClassification"),scr=o(" (BERT model)"),lcr=l(),bT=a("li"),g_e=a("strong"),icr=o("camembert"),dcr=o(" \u2014 "),vG=a("a"),ccr=o("TFCamembertForSequenceClassification"),fcr=o(" (CamemBERT model)"),mcr=l(),vT=a("li"),h_e=a("strong"),gcr=o("convbert"),hcr=o(" \u2014 "),TG=a("a"),pcr=o("TFConvBertForSequenceClassification"),_cr=o(" (ConvBERT model)"),ucr=l(),TT=a("li"),p_e=a("strong"),bcr=o("ctrl"),vcr=o(" \u2014 "),FG=a("a"),Tcr=o("TFCTRLForSequenceClassification"),Fcr=o(" (CTRL model)"),Ccr=l(),FT=a("li"),__e=a("strong"),Mcr=o("deberta"),Ecr=o(" \u2014 "),CG=a("a"),ycr=o("TFDebertaForSequenceClassification"),wcr=o(" (DeBERTa model)"),Acr=l(),CT=a("li"),u_e=a("strong"),Lcr=o("deberta-v2"),Bcr=o(" \u2014 "),MG=a("a"),xcr=o("TFDebertaV2ForSequenceClassification"),kcr=o(" (DeBERTa-v2 model)"),Rcr=l(),MT=a("li"),b_e=a("strong"),Scr=o("distilbert"),Pcr=o(" \u2014 "),EG=a("a"),$cr=o("TFDistilBertForSequenceClassification"),Icr=o(" (DistilBERT model)"),jcr=l(),ET=a("li"),v_e=a("strong"),Dcr=o("electra"),Ncr=o(" \u2014 "),yG=a("a"),qcr=o("TFElectraForSequenceClassification"),Ocr=o(" (ELECTRA model)"),Gcr=l(),yT=a("li"),T_e=a("strong"),Xcr=o("flaubert"),Vcr=o(" \u2014 "),wG=a("a"),zcr=o("TFFlaubertForSequenceClassification"),Wcr=o(" (FlauBERT model)"),Qcr=l(),wT=a("li"),F_e=a("strong"),Hcr=o("funnel"),Ucr=o(" \u2014 "),AG=a("a"),Jcr=o("TFFunnelForSequenceClassification"),Ycr=o(" (Funnel Transformer model)"),Kcr=l(),AT=a("li"),C_e=a("strong"),Zcr=o("gpt2"),efr=o(" \u2014 "),LG=a("a"),ofr=o("TFGPT2ForSequenceClassification"),rfr=o(" (OpenAI GPT-2 model)"),tfr=l(),LT=a("li"),M_e=a("strong"),afr=o("layoutlm"),nfr=o(" \u2014 "),BG=a("a"),sfr=o("TFLayoutLMForSequenceClassification"),lfr=o(" (LayoutLM model)"),ifr=l(),BT=a("li"),E_e=a("strong"),dfr=o("longformer"),cfr=o(" \u2014 "),xG=a("a"),ffr=o("TFLongformerForSequenceClassification"),mfr=o(" (Longformer model)"),gfr=l(),xT=a("li"),y_e=a("strong"),hfr=o("mobilebert"),pfr=o(" \u2014 "),kG=a("a"),_fr=o("TFMobileBertForSequenceClassification"),ufr=o(" (MobileBERT model)"),bfr=l(),kT=a("li"),w_e=a("strong"),vfr=o("mpnet"),Tfr=o(" \u2014 "),RG=a("a"),Ffr=o("TFMPNetForSequenceClassification"),Cfr=o(" (MPNet model)"),Mfr=l(),RT=a("li"),A_e=a("strong"),Efr=o("openai-gpt"),yfr=o(" \u2014 "),SG=a("a"),wfr=o("TFOpenAIGPTForSequenceClassification"),Afr=o(" (OpenAI GPT model)"),Lfr=l(),ST=a("li"),L_e=a("strong"),Bfr=o("rembert"),xfr=o(" \u2014 "),PG=a("a"),kfr=o("TFRemBertForSequenceClassification"),Rfr=o(" (RemBERT model)"),Sfr=l(),PT=a("li"),B_e=a("strong"),Pfr=o("roberta"),$fr=o(" \u2014 "),$G=a("a"),Ifr=o("TFRobertaForSequenceClassification"),jfr=o(" (RoBERTa model)"),Dfr=l(),$T=a("li"),x_e=a("strong"),Nfr=o("roformer"),qfr=o(" \u2014 "),IG=a("a"),Ofr=o("TFRoFormerForSequenceClassification"),Gfr=o(" (RoFormer model)"),Xfr=l(),IT=a("li"),k_e=a("strong"),Vfr=o("tapas"),zfr=o(" \u2014 "),jG=a("a"),Wfr=o("TFTapasForSequenceClassification"),Qfr=o(" (TAPAS model)"),Hfr=l(),jT=a("li"),R_e=a("strong"),Ufr=o("transfo-xl"),Jfr=o(" \u2014 "),DG=a("a"),Yfr=o("TFTransfoXLForSequenceClassification"),Kfr=o(" (Transformer-XL model)"),Zfr=l(),DT=a("li"),S_e=a("strong"),emr=o("xlm"),omr=o(" \u2014 "),NG=a("a"),rmr=o("TFXLMForSequenceClassification"),tmr=o(" (XLM model)"),amr=l(),NT=a("li"),P_e=a("strong"),nmr=o("xlm-roberta"),smr=o(" \u2014 "),qG=a("a"),lmr=o("TFXLMRobertaForSequenceClassification"),imr=o(" (XLM-RoBERTa model)"),dmr=l(),qT=a("li"),$_e=a("strong"),cmr=o("xlnet"),fmr=o(" \u2014 "),OG=a("a"),mmr=o("TFXLNetForSequenceClassification"),gmr=o(" (XLNet model)"),hmr=l(),I_e=a("p"),pmr=o("Examples:"),_mr=l(),f($w.$$.fragment),lRe=l(),Oc=a("h2"),OT=a("a"),j_e=a("span"),f(Iw.$$.fragment),umr=l(),D_e=a("span"),bmr=o("TFAutoModelForMultipleChoice"),iRe=l(),Ar=a("div"),f(jw.$$.fragment),vmr=l(),Gc=a("p"),Tmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),N_e=a("code"),Fmr=o("from_pretrained()"),Cmr=o("class method or the "),q_e=a("code"),Mmr=o("from_config()"),Emr=o(`class
method.`),ymr=l(),Dw=a("p"),wmr=o("This class cannot be instantiated directly using "),O_e=a("code"),Amr=o("__init__()"),Lmr=o(" (throws an error)."),Bmr=l(),Ct=a("div"),f(Nw.$$.fragment),xmr=l(),G_e=a("p"),kmr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Rmr=l(),Xc=a("p"),Smr=o(`Note:
Loading a model from its configuration file does `),X_e=a("strong"),Pmr=o("not"),$mr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),V_e=a("code"),Imr=o("from_pretrained()"),jmr=o("to load the model weights."),Dmr=l(),z_e=a("p"),Nmr=o("Examples:"),qmr=l(),f(qw.$$.fragment),Omr=l(),Fo=a("div"),f(Ow.$$.fragment),Gmr=l(),W_e=a("p"),Xmr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Vmr=l(),An=a("p"),zmr=o("The model class to instantiate is selected based on the "),Q_e=a("code"),Wmr=o("model_type"),Qmr=o(` property of the config object (either
passed as an argument or loaded from `),H_e=a("code"),Hmr=o("pretrained_model_name_or_path"),Umr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U_e=a("code"),Jmr=o("pretrained_model_name_or_path"),Ymr=o(":"),Kmr=l(),te=a("ul"),GT=a("li"),J_e=a("strong"),Zmr=o("albert"),egr=o(" \u2014 "),GG=a("a"),ogr=o("TFAlbertForMultipleChoice"),rgr=o(" (ALBERT model)"),tgr=l(),XT=a("li"),Y_e=a("strong"),agr=o("bert"),ngr=o(" \u2014 "),XG=a("a"),sgr=o("TFBertForMultipleChoice"),lgr=o(" (BERT model)"),igr=l(),VT=a("li"),K_e=a("strong"),dgr=o("camembert"),cgr=o(" \u2014 "),VG=a("a"),fgr=o("TFCamembertForMultipleChoice"),mgr=o(" (CamemBERT model)"),ggr=l(),zT=a("li"),Z_e=a("strong"),hgr=o("convbert"),pgr=o(" \u2014 "),zG=a("a"),_gr=o("TFConvBertForMultipleChoice"),ugr=o(" (ConvBERT model)"),bgr=l(),WT=a("li"),eue=a("strong"),vgr=o("distilbert"),Tgr=o(" \u2014 "),WG=a("a"),Fgr=o("TFDistilBertForMultipleChoice"),Cgr=o(" (DistilBERT model)"),Mgr=l(),QT=a("li"),oue=a("strong"),Egr=o("electra"),ygr=o(" \u2014 "),QG=a("a"),wgr=o("TFElectraForMultipleChoice"),Agr=o(" (ELECTRA model)"),Lgr=l(),HT=a("li"),rue=a("strong"),Bgr=o("flaubert"),xgr=o(" \u2014 "),HG=a("a"),kgr=o("TFFlaubertForMultipleChoice"),Rgr=o(" (FlauBERT model)"),Sgr=l(),UT=a("li"),tue=a("strong"),Pgr=o("funnel"),$gr=o(" \u2014 "),UG=a("a"),Igr=o("TFFunnelForMultipleChoice"),jgr=o(" (Funnel Transformer model)"),Dgr=l(),JT=a("li"),aue=a("strong"),Ngr=o("longformer"),qgr=o(" \u2014 "),JG=a("a"),Ogr=o("TFLongformerForMultipleChoice"),Ggr=o(" (Longformer model)"),Xgr=l(),YT=a("li"),nue=a("strong"),Vgr=o("mobilebert"),zgr=o(" \u2014 "),YG=a("a"),Wgr=o("TFMobileBertForMultipleChoice"),Qgr=o(" (MobileBERT model)"),Hgr=l(),KT=a("li"),sue=a("strong"),Ugr=o("mpnet"),Jgr=o(" \u2014 "),KG=a("a"),Ygr=o("TFMPNetForMultipleChoice"),Kgr=o(" (MPNet model)"),Zgr=l(),ZT=a("li"),lue=a("strong"),ehr=o("rembert"),ohr=o(" \u2014 "),ZG=a("a"),rhr=o("TFRemBertForMultipleChoice"),thr=o(" (RemBERT model)"),ahr=l(),e8=a("li"),iue=a("strong"),nhr=o("roberta"),shr=o(" \u2014 "),eX=a("a"),lhr=o("TFRobertaForMultipleChoice"),ihr=o(" (RoBERTa model)"),dhr=l(),o8=a("li"),due=a("strong"),chr=o("roformer"),fhr=o(" \u2014 "),oX=a("a"),mhr=o("TFRoFormerForMultipleChoice"),ghr=o(" (RoFormer model)"),hhr=l(),r8=a("li"),cue=a("strong"),phr=o("xlm"),_hr=o(" \u2014 "),rX=a("a"),uhr=o("TFXLMForMultipleChoice"),bhr=o(" (XLM model)"),vhr=l(),t8=a("li"),fue=a("strong"),Thr=o("xlm-roberta"),Fhr=o(" \u2014 "),tX=a("a"),Chr=o("TFXLMRobertaForMultipleChoice"),Mhr=o(" (XLM-RoBERTa model)"),Ehr=l(),a8=a("li"),mue=a("strong"),yhr=o("xlnet"),whr=o(" \u2014 "),aX=a("a"),Ahr=o("TFXLNetForMultipleChoice"),Lhr=o(" (XLNet model)"),Bhr=l(),gue=a("p"),xhr=o("Examples:"),khr=l(),f(Gw.$$.fragment),dRe=l(),Vc=a("h2"),n8=a("a"),hue=a("span"),f(Xw.$$.fragment),Rhr=l(),pue=a("span"),Shr=o("TFAutoModelForTableQuestionAnswering"),cRe=l(),Lr=a("div"),f(Vw.$$.fragment),Phr=l(),zc=a("p"),$hr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),_ue=a("code"),Ihr=o("from_pretrained()"),jhr=o("class method or the "),uue=a("code"),Dhr=o("from_config()"),Nhr=o(`class
method.`),qhr=l(),zw=a("p"),Ohr=o("This class cannot be instantiated directly using "),bue=a("code"),Ghr=o("__init__()"),Xhr=o(" (throws an error)."),Vhr=l(),Mt=a("div"),f(Ww.$$.fragment),zhr=l(),vue=a("p"),Whr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Qhr=l(),Wc=a("p"),Hhr=o(`Note:
Loading a model from its configuration file does `),Tue=a("strong"),Uhr=o("not"),Jhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fue=a("code"),Yhr=o("from_pretrained()"),Khr=o("to load the model weights."),Zhr=l(),Cue=a("p"),epr=o("Examples:"),opr=l(),f(Qw.$$.fragment),rpr=l(),Co=a("div"),f(Hw.$$.fragment),tpr=l(),Mue=a("p"),apr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),npr=l(),Ln=a("p"),spr=o("The model class to instantiate is selected based on the "),Eue=a("code"),lpr=o("model_type"),ipr=o(` property of the config object (either
passed as an argument or loaded from `),yue=a("code"),dpr=o("pretrained_model_name_or_path"),cpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wue=a("code"),fpr=o("pretrained_model_name_or_path"),mpr=o(":"),gpr=l(),Aue=a("ul"),s8=a("li"),Lue=a("strong"),hpr=o("tapas"),ppr=o(" \u2014 "),nX=a("a"),_pr=o("TFTapasForQuestionAnswering"),upr=o(" (TAPAS model)"),bpr=l(),Bue=a("p"),vpr=o("Examples:"),Tpr=l(),f(Uw.$$.fragment),fRe=l(),Qc=a("h2"),l8=a("a"),xue=a("span"),f(Jw.$$.fragment),Fpr=l(),kue=a("span"),Cpr=o("TFAutoModelForTokenClassification"),mRe=l(),Br=a("div"),f(Yw.$$.fragment),Mpr=l(),Hc=a("p"),Epr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Rue=a("code"),ypr=o("from_pretrained()"),wpr=o("class method or the "),Sue=a("code"),Apr=o("from_config()"),Lpr=o(`class
method.`),Bpr=l(),Kw=a("p"),xpr=o("This class cannot be instantiated directly using "),Pue=a("code"),kpr=o("__init__()"),Rpr=o(" (throws an error)."),Spr=l(),Et=a("div"),f(Zw.$$.fragment),Ppr=l(),$ue=a("p"),$pr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Ipr=l(),Uc=a("p"),jpr=o(`Note:
Loading a model from its configuration file does `),Iue=a("strong"),Dpr=o("not"),Npr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jue=a("code"),qpr=o("from_pretrained()"),Opr=o("to load the model weights."),Gpr=l(),Due=a("p"),Xpr=o("Examples:"),Vpr=l(),f(eA.$$.fragment),zpr=l(),Mo=a("div"),f(oA.$$.fragment),Wpr=l(),Nue=a("p"),Qpr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Hpr=l(),Bn=a("p"),Upr=o("The model class to instantiate is selected based on the "),que=a("code"),Jpr=o("model_type"),Ypr=o(` property of the config object (either
passed as an argument or loaded from `),Oue=a("code"),Kpr=o("pretrained_model_name_or_path"),Zpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gue=a("code"),e_r=o("pretrained_model_name_or_path"),o_r=o(":"),r_r=l(),K=a("ul"),i8=a("li"),Xue=a("strong"),t_r=o("albert"),a_r=o(" \u2014 "),sX=a("a"),n_r=o("TFAlbertForTokenClassification"),s_r=o(" (ALBERT model)"),l_r=l(),d8=a("li"),Vue=a("strong"),i_r=o("bert"),d_r=o(" \u2014 "),lX=a("a"),c_r=o("TFBertForTokenClassification"),f_r=o(" (BERT model)"),m_r=l(),c8=a("li"),zue=a("strong"),g_r=o("camembert"),h_r=o(" \u2014 "),iX=a("a"),p_r=o("TFCamembertForTokenClassification"),__r=o(" (CamemBERT model)"),u_r=l(),f8=a("li"),Wue=a("strong"),b_r=o("convbert"),v_r=o(" \u2014 "),dX=a("a"),T_r=o("TFConvBertForTokenClassification"),F_r=o(" (ConvBERT model)"),C_r=l(),m8=a("li"),Que=a("strong"),M_r=o("deberta"),E_r=o(" \u2014 "),cX=a("a"),y_r=o("TFDebertaForTokenClassification"),w_r=o(" (DeBERTa model)"),A_r=l(),g8=a("li"),Hue=a("strong"),L_r=o("deberta-v2"),B_r=o(" \u2014 "),fX=a("a"),x_r=o("TFDebertaV2ForTokenClassification"),k_r=o(" (DeBERTa-v2 model)"),R_r=l(),h8=a("li"),Uue=a("strong"),S_r=o("distilbert"),P_r=o(" \u2014 "),mX=a("a"),$_r=o("TFDistilBertForTokenClassification"),I_r=o(" (DistilBERT model)"),j_r=l(),p8=a("li"),Jue=a("strong"),D_r=o("electra"),N_r=o(" \u2014 "),gX=a("a"),q_r=o("TFElectraForTokenClassification"),O_r=o(" (ELECTRA model)"),G_r=l(),_8=a("li"),Yue=a("strong"),X_r=o("flaubert"),V_r=o(" \u2014 "),hX=a("a"),z_r=o("TFFlaubertForTokenClassification"),W_r=o(" (FlauBERT model)"),Q_r=l(),u8=a("li"),Kue=a("strong"),H_r=o("funnel"),U_r=o(" \u2014 "),pX=a("a"),J_r=o("TFFunnelForTokenClassification"),Y_r=o(" (Funnel Transformer model)"),K_r=l(),b8=a("li"),Zue=a("strong"),Z_r=o("layoutlm"),eur=o(" \u2014 "),_X=a("a"),our=o("TFLayoutLMForTokenClassification"),rur=o(" (LayoutLM model)"),tur=l(),v8=a("li"),e1e=a("strong"),aur=o("longformer"),nur=o(" \u2014 "),uX=a("a"),sur=o("TFLongformerForTokenClassification"),lur=o(" (Longformer model)"),iur=l(),T8=a("li"),o1e=a("strong"),dur=o("mobilebert"),cur=o(" \u2014 "),bX=a("a"),fur=o("TFMobileBertForTokenClassification"),mur=o(" (MobileBERT model)"),gur=l(),F8=a("li"),r1e=a("strong"),hur=o("mpnet"),pur=o(" \u2014 "),vX=a("a"),_ur=o("TFMPNetForTokenClassification"),uur=o(" (MPNet model)"),bur=l(),C8=a("li"),t1e=a("strong"),vur=o("rembert"),Tur=o(" \u2014 "),TX=a("a"),Fur=o("TFRemBertForTokenClassification"),Cur=o(" (RemBERT model)"),Mur=l(),M8=a("li"),a1e=a("strong"),Eur=o("roberta"),yur=o(" \u2014 "),FX=a("a"),wur=o("TFRobertaForTokenClassification"),Aur=o(" (RoBERTa model)"),Lur=l(),E8=a("li"),n1e=a("strong"),Bur=o("roformer"),xur=o(" \u2014 "),CX=a("a"),kur=o("TFRoFormerForTokenClassification"),Rur=o(" (RoFormer model)"),Sur=l(),y8=a("li"),s1e=a("strong"),Pur=o("xlm"),$ur=o(" \u2014 "),MX=a("a"),Iur=o("TFXLMForTokenClassification"),jur=o(" (XLM model)"),Dur=l(),w8=a("li"),l1e=a("strong"),Nur=o("xlm-roberta"),qur=o(" \u2014 "),EX=a("a"),Our=o("TFXLMRobertaForTokenClassification"),Gur=o(" (XLM-RoBERTa model)"),Xur=l(),A8=a("li"),i1e=a("strong"),Vur=o("xlnet"),zur=o(" \u2014 "),yX=a("a"),Wur=o("TFXLNetForTokenClassification"),Qur=o(" (XLNet model)"),Hur=l(),d1e=a("p"),Uur=o("Examples:"),Jur=l(),f(rA.$$.fragment),gRe=l(),Jc=a("h2"),L8=a("a"),c1e=a("span"),f(tA.$$.fragment),Yur=l(),f1e=a("span"),Kur=o("TFAutoModelForQuestionAnswering"),hRe=l(),xr=a("div"),f(aA.$$.fragment),Zur=l(),Yc=a("p"),e1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),m1e=a("code"),o1r=o("from_pretrained()"),r1r=o("class method or the "),g1e=a("code"),t1r=o("from_config()"),a1r=o(`class
method.`),n1r=l(),nA=a("p"),s1r=o("This class cannot be instantiated directly using "),h1e=a("code"),l1r=o("__init__()"),i1r=o(" (throws an error)."),d1r=l(),yt=a("div"),f(sA.$$.fragment),c1r=l(),p1e=a("p"),f1r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),m1r=l(),Kc=a("p"),g1r=o(`Note:
Loading a model from its configuration file does `),_1e=a("strong"),h1r=o("not"),p1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),u1e=a("code"),_1r=o("from_pretrained()"),u1r=o("to load the model weights."),b1r=l(),b1e=a("p"),v1r=o("Examples:"),T1r=l(),f(lA.$$.fragment),F1r=l(),Eo=a("div"),f(iA.$$.fragment),C1r=l(),v1e=a("p"),M1r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),E1r=l(),xn=a("p"),y1r=o("The model class to instantiate is selected based on the "),T1e=a("code"),w1r=o("model_type"),A1r=o(` property of the config object (either
passed as an argument or loaded from `),F1e=a("code"),L1r=o("pretrained_model_name_or_path"),B1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C1e=a("code"),x1r=o("pretrained_model_name_or_path"),k1r=o(":"),R1r=l(),Z=a("ul"),B8=a("li"),M1e=a("strong"),S1r=o("albert"),P1r=o(" \u2014 "),wX=a("a"),$1r=o("TFAlbertForQuestionAnswering"),I1r=o(" (ALBERT model)"),j1r=l(),x8=a("li"),E1e=a("strong"),D1r=o("bert"),N1r=o(" \u2014 "),AX=a("a"),q1r=o("TFBertForQuestionAnswering"),O1r=o(" (BERT model)"),G1r=l(),k8=a("li"),y1e=a("strong"),X1r=o("camembert"),V1r=o(" \u2014 "),LX=a("a"),z1r=o("TFCamembertForQuestionAnswering"),W1r=o(" (CamemBERT model)"),Q1r=l(),R8=a("li"),w1e=a("strong"),H1r=o("convbert"),U1r=o(" \u2014 "),BX=a("a"),J1r=o("TFConvBertForQuestionAnswering"),Y1r=o(" (ConvBERT model)"),K1r=l(),S8=a("li"),A1e=a("strong"),Z1r=o("deberta"),ebr=o(" \u2014 "),xX=a("a"),obr=o("TFDebertaForQuestionAnswering"),rbr=o(" (DeBERTa model)"),tbr=l(),P8=a("li"),L1e=a("strong"),abr=o("deberta-v2"),nbr=o(" \u2014 "),kX=a("a"),sbr=o("TFDebertaV2ForQuestionAnswering"),lbr=o(" (DeBERTa-v2 model)"),ibr=l(),$8=a("li"),B1e=a("strong"),dbr=o("distilbert"),cbr=o(" \u2014 "),RX=a("a"),fbr=o("TFDistilBertForQuestionAnswering"),mbr=o(" (DistilBERT model)"),gbr=l(),I8=a("li"),x1e=a("strong"),hbr=o("electra"),pbr=o(" \u2014 "),SX=a("a"),_br=o("TFElectraForQuestionAnswering"),ubr=o(" (ELECTRA model)"),bbr=l(),j8=a("li"),k1e=a("strong"),vbr=o("flaubert"),Tbr=o(" \u2014 "),PX=a("a"),Fbr=o("TFFlaubertForQuestionAnsweringSimple"),Cbr=o(" (FlauBERT model)"),Mbr=l(),D8=a("li"),R1e=a("strong"),Ebr=o("funnel"),ybr=o(" \u2014 "),$X=a("a"),wbr=o("TFFunnelForQuestionAnswering"),Abr=o(" (Funnel Transformer model)"),Lbr=l(),N8=a("li"),S1e=a("strong"),Bbr=o("longformer"),xbr=o(" \u2014 "),IX=a("a"),kbr=o("TFLongformerForQuestionAnswering"),Rbr=o(" (Longformer model)"),Sbr=l(),q8=a("li"),P1e=a("strong"),Pbr=o("mobilebert"),$br=o(" \u2014 "),jX=a("a"),Ibr=o("TFMobileBertForQuestionAnswering"),jbr=o(" (MobileBERT model)"),Dbr=l(),O8=a("li"),$1e=a("strong"),Nbr=o("mpnet"),qbr=o(" \u2014 "),DX=a("a"),Obr=o("TFMPNetForQuestionAnswering"),Gbr=o(" (MPNet model)"),Xbr=l(),G8=a("li"),I1e=a("strong"),Vbr=o("rembert"),zbr=o(" \u2014 "),NX=a("a"),Wbr=o("TFRemBertForQuestionAnswering"),Qbr=o(" (RemBERT model)"),Hbr=l(),X8=a("li"),j1e=a("strong"),Ubr=o("roberta"),Jbr=o(" \u2014 "),qX=a("a"),Ybr=o("TFRobertaForQuestionAnswering"),Kbr=o(" (RoBERTa model)"),Zbr=l(),V8=a("li"),D1e=a("strong"),e5r=o("roformer"),o5r=o(" \u2014 "),OX=a("a"),r5r=o("TFRoFormerForQuestionAnswering"),t5r=o(" (RoFormer model)"),a5r=l(),z8=a("li"),N1e=a("strong"),n5r=o("xlm"),s5r=o(" \u2014 "),GX=a("a"),l5r=o("TFXLMForQuestionAnsweringSimple"),i5r=o(" (XLM model)"),d5r=l(),W8=a("li"),q1e=a("strong"),c5r=o("xlm-roberta"),f5r=o(" \u2014 "),XX=a("a"),m5r=o("TFXLMRobertaForQuestionAnswering"),g5r=o(" (XLM-RoBERTa model)"),h5r=l(),Q8=a("li"),O1e=a("strong"),p5r=o("xlnet"),_5r=o(" \u2014 "),VX=a("a"),u5r=o("TFXLNetForQuestionAnsweringSimple"),b5r=o(" (XLNet model)"),v5r=l(),G1e=a("p"),T5r=o("Examples:"),F5r=l(),f(dA.$$.fragment),pRe=l(),Zc=a("h2"),H8=a("a"),X1e=a("span"),f(cA.$$.fragment),C5r=l(),V1e=a("span"),M5r=o("TFAutoModelForVision2Seq"),_Re=l(),kr=a("div"),f(fA.$$.fragment),E5r=l(),ef=a("p"),y5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),z1e=a("code"),w5r=o("from_pretrained()"),A5r=o("class method or the "),W1e=a("code"),L5r=o("from_config()"),B5r=o(`class
method.`),x5r=l(),mA=a("p"),k5r=o("This class cannot be instantiated directly using "),Q1e=a("code"),R5r=o("__init__()"),S5r=o(" (throws an error)."),P5r=l(),wt=a("div"),f(gA.$$.fragment),$5r=l(),H1e=a("p"),I5r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),j5r=l(),of=a("p"),D5r=o(`Note:
Loading a model from its configuration file does `),U1e=a("strong"),N5r=o("not"),q5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),J1e=a("code"),O5r=o("from_pretrained()"),G5r=o("to load the model weights."),X5r=l(),Y1e=a("p"),V5r=o("Examples:"),z5r=l(),f(hA.$$.fragment),W5r=l(),yo=a("div"),f(pA.$$.fragment),Q5r=l(),K1e=a("p"),H5r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),U5r=l(),kn=a("p"),J5r=o("The model class to instantiate is selected based on the "),Z1e=a("code"),Y5r=o("model_type"),K5r=o(` property of the config object (either
passed as an argument or loaded from `),ebe=a("code"),Z5r=o("pretrained_model_name_or_path"),e2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),obe=a("code"),o2r=o("pretrained_model_name_or_path"),r2r=o(":"),t2r=l(),rbe=a("ul"),U8=a("li"),tbe=a("strong"),a2r=o("vision-encoder-decoder"),n2r=o(" \u2014 "),zX=a("a"),s2r=o("TFVisionEncoderDecoderModel"),l2r=o(" (Vision Encoder decoder model)"),i2r=l(),abe=a("p"),d2r=o("Examples:"),c2r=l(),f(_A.$$.fragment),uRe=l(),rf=a("h2"),J8=a("a"),nbe=a("span"),f(uA.$$.fragment),f2r=l(),sbe=a("span"),m2r=o("TFAutoModelForSpeechSeq2Seq"),bRe=l(),Rr=a("div"),f(bA.$$.fragment),g2r=l(),tf=a("p"),h2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),lbe=a("code"),p2r=o("from_pretrained()"),_2r=o("class method or the "),ibe=a("code"),u2r=o("from_config()"),b2r=o(`class
method.`),v2r=l(),vA=a("p"),T2r=o("This class cannot be instantiated directly using "),dbe=a("code"),F2r=o("__init__()"),C2r=o(" (throws an error)."),M2r=l(),At=a("div"),f(TA.$$.fragment),E2r=l(),cbe=a("p"),y2r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),w2r=l(),af=a("p"),A2r=o(`Note:
Loading a model from its configuration file does `),fbe=a("strong"),L2r=o("not"),B2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mbe=a("code"),x2r=o("from_pretrained()"),k2r=o("to load the model weights."),R2r=l(),gbe=a("p"),S2r=o("Examples:"),P2r=l(),f(FA.$$.fragment),$2r=l(),wo=a("div"),f(CA.$$.fragment),I2r=l(),hbe=a("p"),j2r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),D2r=l(),Rn=a("p"),N2r=o("The model class to instantiate is selected based on the "),pbe=a("code"),q2r=o("model_type"),O2r=o(` property of the config object (either
passed as an argument or loaded from `),_be=a("code"),G2r=o("pretrained_model_name_or_path"),X2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ube=a("code"),V2r=o("pretrained_model_name_or_path"),z2r=o(":"),W2r=l(),bbe=a("ul"),Y8=a("li"),vbe=a("strong"),Q2r=o("speech_to_text"),H2r=o(" \u2014 "),WX=a("a"),U2r=o("TFSpeech2TextForConditionalGeneration"),J2r=o(" (Speech2Text model)"),Y2r=l(),Tbe=a("p"),K2r=o("Examples:"),Z2r=l(),f(MA.$$.fragment),vRe=l(),nf=a("h2"),K8=a("a"),Fbe=a("span"),f(EA.$$.fragment),evr=l(),Cbe=a("span"),ovr=o("FlaxAutoModel"),TRe=l(),Sr=a("div"),f(yA.$$.fragment),rvr=l(),sf=a("p"),tvr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Mbe=a("code"),avr=o("from_pretrained()"),nvr=o("class method or the "),Ebe=a("code"),svr=o("from_config()"),lvr=o(`class
method.`),ivr=l(),wA=a("p"),dvr=o("This class cannot be instantiated directly using "),ybe=a("code"),cvr=o("__init__()"),fvr=o(" (throws an error)."),mvr=l(),Lt=a("div"),f(AA.$$.fragment),gvr=l(),wbe=a("p"),hvr=o("Instantiates one of the base model classes of the library from a configuration."),pvr=l(),lf=a("p"),_vr=o(`Note:
Loading a model from its configuration file does `),Abe=a("strong"),uvr=o("not"),bvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lbe=a("code"),vvr=o("from_pretrained()"),Tvr=o("to load the model weights."),Fvr=l(),Bbe=a("p"),Cvr=o("Examples:"),Mvr=l(),f(LA.$$.fragment),Evr=l(),Ao=a("div"),f(BA.$$.fragment),yvr=l(),xbe=a("p"),wvr=o("Instantiate one of the base model classes of the library from a pretrained model."),Avr=l(),Sn=a("p"),Lvr=o("The model class to instantiate is selected based on the "),kbe=a("code"),Bvr=o("model_type"),xvr=o(` property of the config object (either
passed as an argument or loaded from `),Rbe=a("code"),kvr=o("pretrained_model_name_or_path"),Rvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sbe=a("code"),Svr=o("pretrained_model_name_or_path"),Pvr=o(":"),$vr=l(),z=a("ul"),Z8=a("li"),Pbe=a("strong"),Ivr=o("albert"),jvr=o(" \u2014 "),QX=a("a"),Dvr=o("FlaxAlbertModel"),Nvr=o(" (ALBERT model)"),qvr=l(),eF=a("li"),$be=a("strong"),Ovr=o("bart"),Gvr=o(" \u2014 "),HX=a("a"),Xvr=o("FlaxBartModel"),Vvr=o(" (BART model)"),zvr=l(),oF=a("li"),Ibe=a("strong"),Wvr=o("beit"),Qvr=o(" \u2014 "),UX=a("a"),Hvr=o("FlaxBeitModel"),Uvr=o(" (BEiT model)"),Jvr=l(),rF=a("li"),jbe=a("strong"),Yvr=o("bert"),Kvr=o(" \u2014 "),JX=a("a"),Zvr=o("FlaxBertModel"),e6r=o(" (BERT model)"),o6r=l(),tF=a("li"),Dbe=a("strong"),r6r=o("big_bird"),t6r=o(" \u2014 "),YX=a("a"),a6r=o("FlaxBigBirdModel"),n6r=o(" (BigBird model)"),s6r=l(),aF=a("li"),Nbe=a("strong"),l6r=o("blenderbot"),i6r=o(" \u2014 "),KX=a("a"),d6r=o("FlaxBlenderbotModel"),c6r=o(" (Blenderbot model)"),f6r=l(),nF=a("li"),qbe=a("strong"),m6r=o("blenderbot-small"),g6r=o(" \u2014 "),ZX=a("a"),h6r=o("FlaxBlenderbotSmallModel"),p6r=o(" (BlenderbotSmall model)"),_6r=l(),sF=a("li"),Obe=a("strong"),u6r=o("clip"),b6r=o(" \u2014 "),eV=a("a"),v6r=o("FlaxCLIPModel"),T6r=o(" (CLIP model)"),F6r=l(),lF=a("li"),Gbe=a("strong"),C6r=o("distilbert"),M6r=o(" \u2014 "),oV=a("a"),E6r=o("FlaxDistilBertModel"),y6r=o(" (DistilBERT model)"),w6r=l(),iF=a("li"),Xbe=a("strong"),A6r=o("electra"),L6r=o(" \u2014 "),rV=a("a"),B6r=o("FlaxElectraModel"),x6r=o(" (ELECTRA model)"),k6r=l(),dF=a("li"),Vbe=a("strong"),R6r=o("gpt2"),S6r=o(" \u2014 "),tV=a("a"),P6r=o("FlaxGPT2Model"),$6r=o(" (OpenAI GPT-2 model)"),I6r=l(),cF=a("li"),zbe=a("strong"),j6r=o("gpt_neo"),D6r=o(" \u2014 "),aV=a("a"),N6r=o("FlaxGPTNeoModel"),q6r=o(" (GPT Neo model)"),O6r=l(),fF=a("li"),Wbe=a("strong"),G6r=o("gptj"),X6r=o(" \u2014 "),nV=a("a"),V6r=o("FlaxGPTJModel"),z6r=o(" (GPT-J model)"),W6r=l(),mF=a("li"),Qbe=a("strong"),Q6r=o("marian"),H6r=o(" \u2014 "),sV=a("a"),U6r=o("FlaxMarianModel"),J6r=o(" (Marian model)"),Y6r=l(),gF=a("li"),Hbe=a("strong"),K6r=o("mbart"),Z6r=o(" \u2014 "),lV=a("a"),e0r=o("FlaxMBartModel"),o0r=o(" (mBART model)"),r0r=l(),hF=a("li"),Ube=a("strong"),t0r=o("mt5"),a0r=o(" \u2014 "),iV=a("a"),n0r=o("FlaxMT5Model"),s0r=o(" (mT5 model)"),l0r=l(),pF=a("li"),Jbe=a("strong"),i0r=o("pegasus"),d0r=o(" \u2014 "),dV=a("a"),c0r=o("FlaxPegasusModel"),f0r=o(" (Pegasus model)"),m0r=l(),_F=a("li"),Ybe=a("strong"),g0r=o("roberta"),h0r=o(" \u2014 "),cV=a("a"),p0r=o("FlaxRobertaModel"),_0r=o(" (RoBERTa model)"),u0r=l(),uF=a("li"),Kbe=a("strong"),b0r=o("roformer"),v0r=o(" \u2014 "),fV=a("a"),T0r=o("FlaxRoFormerModel"),F0r=o(" (RoFormer model)"),C0r=l(),bF=a("li"),Zbe=a("strong"),M0r=o("t5"),E0r=o(" \u2014 "),mV=a("a"),y0r=o("FlaxT5Model"),w0r=o(" (T5 model)"),A0r=l(),vF=a("li"),e5e=a("strong"),L0r=o("vision-text-dual-encoder"),B0r=o(" \u2014 "),gV=a("a"),x0r=o("FlaxVisionTextDualEncoderModel"),k0r=o(" (VisionTextDualEncoder model)"),R0r=l(),TF=a("li"),o5e=a("strong"),S0r=o("vit"),P0r=o(" \u2014 "),hV=a("a"),$0r=o("FlaxViTModel"),I0r=o(" (ViT model)"),j0r=l(),FF=a("li"),r5e=a("strong"),D0r=o("wav2vec2"),N0r=o(" \u2014 "),pV=a("a"),q0r=o("FlaxWav2Vec2Model"),O0r=o(" (Wav2Vec2 model)"),G0r=l(),CF=a("li"),t5e=a("strong"),X0r=o("xglm"),V0r=o(" \u2014 "),_V=a("a"),z0r=o("FlaxXGLMModel"),W0r=o(" (XGLM model)"),Q0r=l(),MF=a("li"),a5e=a("strong"),H0r=o("xlm-roberta"),U0r=o(" \u2014 "),uV=a("a"),J0r=o("FlaxXLMRobertaModel"),Y0r=o(" (XLM-RoBERTa model)"),K0r=l(),n5e=a("p"),Z0r=o("Examples:"),eTr=l(),f(xA.$$.fragment),FRe=l(),df=a("h2"),EF=a("a"),s5e=a("span"),f(kA.$$.fragment),oTr=l(),l5e=a("span"),rTr=o("FlaxAutoModelForCausalLM"),CRe=l(),Pr=a("div"),f(RA.$$.fragment),tTr=l(),cf=a("p"),aTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),i5e=a("code"),nTr=o("from_pretrained()"),sTr=o("class method or the "),d5e=a("code"),lTr=o("from_config()"),iTr=o(`class
method.`),dTr=l(),SA=a("p"),cTr=o("This class cannot be instantiated directly using "),c5e=a("code"),fTr=o("__init__()"),mTr=o(" (throws an error)."),gTr=l(),Bt=a("div"),f(PA.$$.fragment),hTr=l(),f5e=a("p"),pTr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),_Tr=l(),ff=a("p"),uTr=o(`Note:
Loading a model from its configuration file does `),m5e=a("strong"),bTr=o("not"),vTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),g5e=a("code"),TTr=o("from_pretrained()"),FTr=o("to load the model weights."),CTr=l(),h5e=a("p"),MTr=o("Examples:"),ETr=l(),f($A.$$.fragment),yTr=l(),Lo=a("div"),f(IA.$$.fragment),wTr=l(),p5e=a("p"),ATr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),LTr=l(),Pn=a("p"),BTr=o("The model class to instantiate is selected based on the "),_5e=a("code"),xTr=o("model_type"),kTr=o(` property of the config object (either
passed as an argument or loaded from `),u5e=a("code"),RTr=o("pretrained_model_name_or_path"),STr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b5e=a("code"),PTr=o("pretrained_model_name_or_path"),$Tr=o(":"),ITr=l(),ga=a("ul"),yF=a("li"),v5e=a("strong"),jTr=o("bart"),DTr=o(" \u2014 "),bV=a("a"),NTr=o("FlaxBartForCausalLM"),qTr=o(" (BART model)"),OTr=l(),wF=a("li"),T5e=a("strong"),GTr=o("gpt2"),XTr=o(" \u2014 "),vV=a("a"),VTr=o("FlaxGPT2LMHeadModel"),zTr=o(" (OpenAI GPT-2 model)"),WTr=l(),AF=a("li"),F5e=a("strong"),QTr=o("gpt_neo"),HTr=o(" \u2014 "),TV=a("a"),UTr=o("FlaxGPTNeoForCausalLM"),JTr=o(" (GPT Neo model)"),YTr=l(),LF=a("li"),C5e=a("strong"),KTr=o("gptj"),ZTr=o(" \u2014 "),FV=a("a"),e8r=o("FlaxGPTJForCausalLM"),o8r=o(" (GPT-J model)"),r8r=l(),BF=a("li"),M5e=a("strong"),t8r=o("xglm"),a8r=o(" \u2014 "),CV=a("a"),n8r=o("FlaxXGLMForCausalLM"),s8r=o(" (XGLM model)"),l8r=l(),E5e=a("p"),i8r=o("Examples:"),d8r=l(),f(jA.$$.fragment),MRe=l(),mf=a("h2"),xF=a("a"),y5e=a("span"),f(DA.$$.fragment),c8r=l(),w5e=a("span"),f8r=o("FlaxAutoModelForPreTraining"),ERe=l(),$r=a("div"),f(NA.$$.fragment),m8r=l(),gf=a("p"),g8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),A5e=a("code"),h8r=o("from_pretrained()"),p8r=o("class method or the "),L5e=a("code"),_8r=o("from_config()"),u8r=o(`class
method.`),b8r=l(),qA=a("p"),v8r=o("This class cannot be instantiated directly using "),B5e=a("code"),T8r=o("__init__()"),F8r=o(" (throws an error)."),C8r=l(),xt=a("div"),f(OA.$$.fragment),M8r=l(),x5e=a("p"),E8r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),y8r=l(),hf=a("p"),w8r=o(`Note:
Loading a model from its configuration file does `),k5e=a("strong"),A8r=o("not"),L8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),R5e=a("code"),B8r=o("from_pretrained()"),x8r=o("to load the model weights."),k8r=l(),S5e=a("p"),R8r=o("Examples:"),S8r=l(),f(GA.$$.fragment),P8r=l(),Bo=a("div"),f(XA.$$.fragment),$8r=l(),P5e=a("p"),I8r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),j8r=l(),$n=a("p"),D8r=o("The model class to instantiate is selected based on the "),$5e=a("code"),N8r=o("model_type"),q8r=o(` property of the config object (either
passed as an argument or loaded from `),I5e=a("code"),O8r=o("pretrained_model_name_or_path"),G8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j5e=a("code"),X8r=o("pretrained_model_name_or_path"),V8r=o(":"),z8r=l(),ce=a("ul"),kF=a("li"),D5e=a("strong"),W8r=o("albert"),Q8r=o(" \u2014 "),MV=a("a"),H8r=o("FlaxAlbertForPreTraining"),U8r=o(" (ALBERT model)"),J8r=l(),RF=a("li"),N5e=a("strong"),Y8r=o("bart"),K8r=o(" \u2014 "),EV=a("a"),Z8r=o("FlaxBartForConditionalGeneration"),eFr=o(" (BART model)"),oFr=l(),SF=a("li"),q5e=a("strong"),rFr=o("bert"),tFr=o(" \u2014 "),yV=a("a"),aFr=o("FlaxBertForPreTraining"),nFr=o(" (BERT model)"),sFr=l(),PF=a("li"),O5e=a("strong"),lFr=o("big_bird"),iFr=o(" \u2014 "),wV=a("a"),dFr=o("FlaxBigBirdForPreTraining"),cFr=o(" (BigBird model)"),fFr=l(),$F=a("li"),G5e=a("strong"),mFr=o("electra"),gFr=o(" \u2014 "),AV=a("a"),hFr=o("FlaxElectraForPreTraining"),pFr=o(" (ELECTRA model)"),_Fr=l(),IF=a("li"),X5e=a("strong"),uFr=o("mbart"),bFr=o(" \u2014 "),LV=a("a"),vFr=o("FlaxMBartForConditionalGeneration"),TFr=o(" (mBART model)"),FFr=l(),jF=a("li"),V5e=a("strong"),CFr=o("mt5"),MFr=o(" \u2014 "),BV=a("a"),EFr=o("FlaxMT5ForConditionalGeneration"),yFr=o(" (mT5 model)"),wFr=l(),DF=a("li"),z5e=a("strong"),AFr=o("roberta"),LFr=o(" \u2014 "),xV=a("a"),BFr=o("FlaxRobertaForMaskedLM"),xFr=o(" (RoBERTa model)"),kFr=l(),NF=a("li"),W5e=a("strong"),RFr=o("roformer"),SFr=o(" \u2014 "),kV=a("a"),PFr=o("FlaxRoFormerForMaskedLM"),$Fr=o(" (RoFormer model)"),IFr=l(),qF=a("li"),Q5e=a("strong"),jFr=o("t5"),DFr=o(" \u2014 "),RV=a("a"),NFr=o("FlaxT5ForConditionalGeneration"),qFr=o(" (T5 model)"),OFr=l(),OF=a("li"),H5e=a("strong"),GFr=o("wav2vec2"),XFr=o(" \u2014 "),SV=a("a"),VFr=o("FlaxWav2Vec2ForPreTraining"),zFr=o(" (Wav2Vec2 model)"),WFr=l(),GF=a("li"),U5e=a("strong"),QFr=o("xlm-roberta"),HFr=o(" \u2014 "),PV=a("a"),UFr=o("FlaxXLMRobertaForMaskedLM"),JFr=o(" (XLM-RoBERTa model)"),YFr=l(),J5e=a("p"),KFr=o("Examples:"),ZFr=l(),f(VA.$$.fragment),yRe=l(),pf=a("h2"),XF=a("a"),Y5e=a("span"),f(zA.$$.fragment),eCr=l(),K5e=a("span"),oCr=o("FlaxAutoModelForMaskedLM"),wRe=l(),Ir=a("div"),f(WA.$$.fragment),rCr=l(),_f=a("p"),tCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Z5e=a("code"),aCr=o("from_pretrained()"),nCr=o("class method or the "),e2e=a("code"),sCr=o("from_config()"),lCr=o(`class
method.`),iCr=l(),QA=a("p"),dCr=o("This class cannot be instantiated directly using "),o2e=a("code"),cCr=o("__init__()"),fCr=o(" (throws an error)."),mCr=l(),kt=a("div"),f(HA.$$.fragment),gCr=l(),r2e=a("p"),hCr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),pCr=l(),uf=a("p"),_Cr=o(`Note:
Loading a model from its configuration file does `),t2e=a("strong"),uCr=o("not"),bCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),a2e=a("code"),vCr=o("from_pretrained()"),TCr=o("to load the model weights."),FCr=l(),n2e=a("p"),CCr=o("Examples:"),MCr=l(),f(UA.$$.fragment),ECr=l(),xo=a("div"),f(JA.$$.fragment),yCr=l(),s2e=a("p"),wCr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),ACr=l(),In=a("p"),LCr=o("The model class to instantiate is selected based on the "),l2e=a("code"),BCr=o("model_type"),xCr=o(` property of the config object (either
passed as an argument or loaded from `),i2e=a("code"),kCr=o("pretrained_model_name_or_path"),RCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d2e=a("code"),SCr=o("pretrained_model_name_or_path"),PCr=o(":"),$Cr=l(),ue=a("ul"),VF=a("li"),c2e=a("strong"),ICr=o("albert"),jCr=o(" \u2014 "),$V=a("a"),DCr=o("FlaxAlbertForMaskedLM"),NCr=o(" (ALBERT model)"),qCr=l(),zF=a("li"),f2e=a("strong"),OCr=o("bart"),GCr=o(" \u2014 "),IV=a("a"),XCr=o("FlaxBartForConditionalGeneration"),VCr=o(" (BART model)"),zCr=l(),WF=a("li"),m2e=a("strong"),WCr=o("bert"),QCr=o(" \u2014 "),jV=a("a"),HCr=o("FlaxBertForMaskedLM"),UCr=o(" (BERT model)"),JCr=l(),QF=a("li"),g2e=a("strong"),YCr=o("big_bird"),KCr=o(" \u2014 "),DV=a("a"),ZCr=o("FlaxBigBirdForMaskedLM"),eMr=o(" (BigBird model)"),oMr=l(),HF=a("li"),h2e=a("strong"),rMr=o("distilbert"),tMr=o(" \u2014 "),NV=a("a"),aMr=o("FlaxDistilBertForMaskedLM"),nMr=o(" (DistilBERT model)"),sMr=l(),UF=a("li"),p2e=a("strong"),lMr=o("electra"),iMr=o(" \u2014 "),qV=a("a"),dMr=o("FlaxElectraForMaskedLM"),cMr=o(" (ELECTRA model)"),fMr=l(),JF=a("li"),_2e=a("strong"),mMr=o("mbart"),gMr=o(" \u2014 "),OV=a("a"),hMr=o("FlaxMBartForConditionalGeneration"),pMr=o(" (mBART model)"),_Mr=l(),YF=a("li"),u2e=a("strong"),uMr=o("roberta"),bMr=o(" \u2014 "),GV=a("a"),vMr=o("FlaxRobertaForMaskedLM"),TMr=o(" (RoBERTa model)"),FMr=l(),KF=a("li"),b2e=a("strong"),CMr=o("roformer"),MMr=o(" \u2014 "),XV=a("a"),EMr=o("FlaxRoFormerForMaskedLM"),yMr=o(" (RoFormer model)"),wMr=l(),ZF=a("li"),v2e=a("strong"),AMr=o("xlm-roberta"),LMr=o(" \u2014 "),VV=a("a"),BMr=o("FlaxXLMRobertaForMaskedLM"),xMr=o(" (XLM-RoBERTa model)"),kMr=l(),T2e=a("p"),RMr=o("Examples:"),SMr=l(),f(YA.$$.fragment),ARe=l(),bf=a("h2"),eC=a("a"),F2e=a("span"),f(KA.$$.fragment),PMr=l(),C2e=a("span"),$Mr=o("FlaxAutoModelForSeq2SeqLM"),LRe=l(),jr=a("div"),f(ZA.$$.fragment),IMr=l(),vf=a("p"),jMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),M2e=a("code"),DMr=o("from_pretrained()"),NMr=o("class method or the "),E2e=a("code"),qMr=o("from_config()"),OMr=o(`class
method.`),GMr=l(),eL=a("p"),XMr=o("This class cannot be instantiated directly using "),y2e=a("code"),VMr=o("__init__()"),zMr=o(" (throws an error)."),WMr=l(),Rt=a("div"),f(oL.$$.fragment),QMr=l(),w2e=a("p"),HMr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),UMr=l(),Tf=a("p"),JMr=o(`Note:
Loading a model from its configuration file does `),A2e=a("strong"),YMr=o("not"),KMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),L2e=a("code"),ZMr=o("from_pretrained()"),e4r=o("to load the model weights."),o4r=l(),B2e=a("p"),r4r=o("Examples:"),t4r=l(),f(rL.$$.fragment),a4r=l(),ko=a("div"),f(tL.$$.fragment),n4r=l(),x2e=a("p"),s4r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),l4r=l(),jn=a("p"),i4r=o("The model class to instantiate is selected based on the "),k2e=a("code"),d4r=o("model_type"),c4r=o(` property of the config object (either
passed as an argument or loaded from `),R2e=a("code"),f4r=o("pretrained_model_name_or_path"),m4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S2e=a("code"),g4r=o("pretrained_model_name_or_path"),h4r=o(":"),p4r=l(),Ce=a("ul"),oC=a("li"),P2e=a("strong"),_4r=o("bart"),u4r=o(" \u2014 "),zV=a("a"),b4r=o("FlaxBartForConditionalGeneration"),v4r=o(" (BART model)"),T4r=l(),rC=a("li"),$2e=a("strong"),F4r=o("blenderbot"),C4r=o(" \u2014 "),WV=a("a"),M4r=o("FlaxBlenderbotForConditionalGeneration"),E4r=o(" (Blenderbot model)"),y4r=l(),tC=a("li"),I2e=a("strong"),w4r=o("blenderbot-small"),A4r=o(" \u2014 "),QV=a("a"),L4r=o("FlaxBlenderbotSmallForConditionalGeneration"),B4r=o(" (BlenderbotSmall model)"),x4r=l(),aC=a("li"),j2e=a("strong"),k4r=o("encoder-decoder"),R4r=o(" \u2014 "),HV=a("a"),S4r=o("FlaxEncoderDecoderModel"),P4r=o(" (Encoder decoder model)"),$4r=l(),nC=a("li"),D2e=a("strong"),I4r=o("marian"),j4r=o(" \u2014 "),UV=a("a"),D4r=o("FlaxMarianMTModel"),N4r=o(" (Marian model)"),q4r=l(),sC=a("li"),N2e=a("strong"),O4r=o("mbart"),G4r=o(" \u2014 "),JV=a("a"),X4r=o("FlaxMBartForConditionalGeneration"),V4r=o(" (mBART model)"),z4r=l(),lC=a("li"),q2e=a("strong"),W4r=o("mt5"),Q4r=o(" \u2014 "),YV=a("a"),H4r=o("FlaxMT5ForConditionalGeneration"),U4r=o(" (mT5 model)"),J4r=l(),iC=a("li"),O2e=a("strong"),Y4r=o("pegasus"),K4r=o(" \u2014 "),KV=a("a"),Z4r=o("FlaxPegasusForConditionalGeneration"),eEr=o(" (Pegasus model)"),oEr=l(),dC=a("li"),G2e=a("strong"),rEr=o("t5"),tEr=o(" \u2014 "),ZV=a("a"),aEr=o("FlaxT5ForConditionalGeneration"),nEr=o(" (T5 model)"),sEr=l(),X2e=a("p"),lEr=o("Examples:"),iEr=l(),f(aL.$$.fragment),BRe=l(),Ff=a("h2"),cC=a("a"),V2e=a("span"),f(nL.$$.fragment),dEr=l(),z2e=a("span"),cEr=o("FlaxAutoModelForSequenceClassification"),xRe=l(),Dr=a("div"),f(sL.$$.fragment),fEr=l(),Cf=a("p"),mEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),W2e=a("code"),gEr=o("from_pretrained()"),hEr=o("class method or the "),Q2e=a("code"),pEr=o("from_config()"),_Er=o(`class
method.`),uEr=l(),lL=a("p"),bEr=o("This class cannot be instantiated directly using "),H2e=a("code"),vEr=o("__init__()"),TEr=o(" (throws an error)."),FEr=l(),St=a("div"),f(iL.$$.fragment),CEr=l(),U2e=a("p"),MEr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),EEr=l(),Mf=a("p"),yEr=o(`Note:
Loading a model from its configuration file does `),J2e=a("strong"),wEr=o("not"),AEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Y2e=a("code"),LEr=o("from_pretrained()"),BEr=o("to load the model weights."),xEr=l(),K2e=a("p"),kEr=o("Examples:"),REr=l(),f(dL.$$.fragment),SEr=l(),Ro=a("div"),f(cL.$$.fragment),PEr=l(),Z2e=a("p"),$Er=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),IEr=l(),Dn=a("p"),jEr=o("The model class to instantiate is selected based on the "),eve=a("code"),DEr=o("model_type"),NEr=o(` property of the config object (either
passed as an argument or loaded from `),ove=a("code"),qEr=o("pretrained_model_name_or_path"),OEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rve=a("code"),GEr=o("pretrained_model_name_or_path"),XEr=o(":"),VEr=l(),be=a("ul"),fC=a("li"),tve=a("strong"),zEr=o("albert"),WEr=o(" \u2014 "),ez=a("a"),QEr=o("FlaxAlbertForSequenceClassification"),HEr=o(" (ALBERT model)"),UEr=l(),mC=a("li"),ave=a("strong"),JEr=o("bart"),YEr=o(" \u2014 "),oz=a("a"),KEr=o("FlaxBartForSequenceClassification"),ZEr=o(" (BART model)"),e3r=l(),gC=a("li"),nve=a("strong"),o3r=o("bert"),r3r=o(" \u2014 "),rz=a("a"),t3r=o("FlaxBertForSequenceClassification"),a3r=o(" (BERT model)"),n3r=l(),hC=a("li"),sve=a("strong"),s3r=o("big_bird"),l3r=o(" \u2014 "),tz=a("a"),i3r=o("FlaxBigBirdForSequenceClassification"),d3r=o(" (BigBird model)"),c3r=l(),pC=a("li"),lve=a("strong"),f3r=o("distilbert"),m3r=o(" \u2014 "),az=a("a"),g3r=o("FlaxDistilBertForSequenceClassification"),h3r=o(" (DistilBERT model)"),p3r=l(),_C=a("li"),ive=a("strong"),_3r=o("electra"),u3r=o(" \u2014 "),nz=a("a"),b3r=o("FlaxElectraForSequenceClassification"),v3r=o(" (ELECTRA model)"),T3r=l(),uC=a("li"),dve=a("strong"),F3r=o("mbart"),C3r=o(" \u2014 "),sz=a("a"),M3r=o("FlaxMBartForSequenceClassification"),E3r=o(" (mBART model)"),y3r=l(),bC=a("li"),cve=a("strong"),w3r=o("roberta"),A3r=o(" \u2014 "),lz=a("a"),L3r=o("FlaxRobertaForSequenceClassification"),B3r=o(" (RoBERTa model)"),x3r=l(),vC=a("li"),fve=a("strong"),k3r=o("roformer"),R3r=o(" \u2014 "),iz=a("a"),S3r=o("FlaxRoFormerForSequenceClassification"),P3r=o(" (RoFormer model)"),$3r=l(),TC=a("li"),mve=a("strong"),I3r=o("xlm-roberta"),j3r=o(" \u2014 "),dz=a("a"),D3r=o("FlaxXLMRobertaForSequenceClassification"),N3r=o(" (XLM-RoBERTa model)"),q3r=l(),gve=a("p"),O3r=o("Examples:"),G3r=l(),f(fL.$$.fragment),kRe=l(),Ef=a("h2"),FC=a("a"),hve=a("span"),f(mL.$$.fragment),X3r=l(),pve=a("span"),V3r=o("FlaxAutoModelForSpeechSeq2Seq"),RRe=l(),Nr=a("div"),f(gL.$$.fragment),z3r=l(),yf=a("p"),W3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),_ve=a("code"),Q3r=o("from_pretrained()"),H3r=o("class method or the "),uve=a("code"),U3r=o("from_config()"),J3r=o(`class
method.`),Y3r=l(),hL=a("p"),K3r=o("This class cannot be instantiated directly using "),bve=a("code"),Z3r=o("__init__()"),eyr=o(" (throws an error)."),oyr=l(),Pt=a("div"),f(pL.$$.fragment),ryr=l(),vve=a("p"),tyr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),ayr=l(),wf=a("p"),nyr=o(`Note:
Loading a model from its configuration file does `),Tve=a("strong"),syr=o("not"),lyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fve=a("code"),iyr=o("from_pretrained()"),dyr=o("to load the model weights."),cyr=l(),Cve=a("p"),fyr=o("Examples:"),myr=l(),f(_L.$$.fragment),gyr=l(),So=a("div"),f(uL.$$.fragment),hyr=l(),Mve=a("p"),pyr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),_yr=l(),Nn=a("p"),uyr=o("The model class to instantiate is selected based on the "),Eve=a("code"),byr=o("model_type"),vyr=o(` property of the config object (either
passed as an argument or loaded from `),yve=a("code"),Tyr=o("pretrained_model_name_or_path"),Fyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wve=a("code"),Cyr=o("pretrained_model_name_or_path"),Myr=o(":"),Eyr=l(),Ave=a("ul"),CC=a("li"),Lve=a("strong"),yyr=o("speech-encoder-decoder"),wyr=o(" \u2014 "),cz=a("a"),Ayr=o("FlaxSpeechEncoderDecoderModel"),Lyr=o(" (Speech Encoder decoder model)"),Byr=l(),Bve=a("p"),xyr=o("Examples:"),kyr=l(),f(bL.$$.fragment),SRe=l(),Af=a("h2"),MC=a("a"),xve=a("span"),f(vL.$$.fragment),Ryr=l(),kve=a("span"),Syr=o("FlaxAutoModelForQuestionAnswering"),PRe=l(),qr=a("div"),f(TL.$$.fragment),Pyr=l(),Lf=a("p"),$yr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Rve=a("code"),Iyr=o("from_pretrained()"),jyr=o("class method or the "),Sve=a("code"),Dyr=o("from_config()"),Nyr=o(`class
method.`),qyr=l(),FL=a("p"),Oyr=o("This class cannot be instantiated directly using "),Pve=a("code"),Gyr=o("__init__()"),Xyr=o(" (throws an error)."),Vyr=l(),$t=a("div"),f(CL.$$.fragment),zyr=l(),$ve=a("p"),Wyr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Qyr=l(),Bf=a("p"),Hyr=o(`Note:
Loading a model from its configuration file does `),Ive=a("strong"),Uyr=o("not"),Jyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jve=a("code"),Yyr=o("from_pretrained()"),Kyr=o("to load the model weights."),Zyr=l(),Dve=a("p"),ewr=o("Examples:"),owr=l(),f(ML.$$.fragment),rwr=l(),Po=a("div"),f(EL.$$.fragment),twr=l(),Nve=a("p"),awr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),nwr=l(),qn=a("p"),swr=o("The model class to instantiate is selected based on the "),qve=a("code"),lwr=o("model_type"),iwr=o(` property of the config object (either
passed as an argument or loaded from `),Ove=a("code"),dwr=o("pretrained_model_name_or_path"),cwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gve=a("code"),fwr=o("pretrained_model_name_or_path"),mwr=o(":"),gwr=l(),ve=a("ul"),EC=a("li"),Xve=a("strong"),hwr=o("albert"),pwr=o(" \u2014 "),fz=a("a"),_wr=o("FlaxAlbertForQuestionAnswering"),uwr=o(" (ALBERT model)"),bwr=l(),yC=a("li"),Vve=a("strong"),vwr=o("bart"),Twr=o(" \u2014 "),mz=a("a"),Fwr=o("FlaxBartForQuestionAnswering"),Cwr=o(" (BART model)"),Mwr=l(),wC=a("li"),zve=a("strong"),Ewr=o("bert"),ywr=o(" \u2014 "),gz=a("a"),wwr=o("FlaxBertForQuestionAnswering"),Awr=o(" (BERT model)"),Lwr=l(),AC=a("li"),Wve=a("strong"),Bwr=o("big_bird"),xwr=o(" \u2014 "),hz=a("a"),kwr=o("FlaxBigBirdForQuestionAnswering"),Rwr=o(" (BigBird model)"),Swr=l(),LC=a("li"),Qve=a("strong"),Pwr=o("distilbert"),$wr=o(" \u2014 "),pz=a("a"),Iwr=o("FlaxDistilBertForQuestionAnswering"),jwr=o(" (DistilBERT model)"),Dwr=l(),BC=a("li"),Hve=a("strong"),Nwr=o("electra"),qwr=o(" \u2014 "),_z=a("a"),Owr=o("FlaxElectraForQuestionAnswering"),Gwr=o(" (ELECTRA model)"),Xwr=l(),xC=a("li"),Uve=a("strong"),Vwr=o("mbart"),zwr=o(" \u2014 "),uz=a("a"),Wwr=o("FlaxMBartForQuestionAnswering"),Qwr=o(" (mBART model)"),Hwr=l(),kC=a("li"),Jve=a("strong"),Uwr=o("roberta"),Jwr=o(" \u2014 "),bz=a("a"),Ywr=o("FlaxRobertaForQuestionAnswering"),Kwr=o(" (RoBERTa model)"),Zwr=l(),RC=a("li"),Yve=a("strong"),eAr=o("roformer"),oAr=o(" \u2014 "),vz=a("a"),rAr=o("FlaxRoFormerForQuestionAnswering"),tAr=o(" (RoFormer model)"),aAr=l(),SC=a("li"),Kve=a("strong"),nAr=o("xlm-roberta"),sAr=o(" \u2014 "),Tz=a("a"),lAr=o("FlaxXLMRobertaForQuestionAnswering"),iAr=o(" (XLM-RoBERTa model)"),dAr=l(),Zve=a("p"),cAr=o("Examples:"),fAr=l(),f(yL.$$.fragment),$Re=l(),xf=a("h2"),PC=a("a"),e6e=a("span"),f(wL.$$.fragment),mAr=l(),o6e=a("span"),gAr=o("FlaxAutoModelForTokenClassification"),IRe=l(),Or=a("div"),f(AL.$$.fragment),hAr=l(),kf=a("p"),pAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),r6e=a("code"),_Ar=o("from_pretrained()"),uAr=o("class method or the "),t6e=a("code"),bAr=o("from_config()"),vAr=o(`class
method.`),TAr=l(),LL=a("p"),FAr=o("This class cannot be instantiated directly using "),a6e=a("code"),CAr=o("__init__()"),MAr=o(" (throws an error)."),EAr=l(),It=a("div"),f(BL.$$.fragment),yAr=l(),n6e=a("p"),wAr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),AAr=l(),Rf=a("p"),LAr=o(`Note:
Loading a model from its configuration file does `),s6e=a("strong"),BAr=o("not"),xAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),l6e=a("code"),kAr=o("from_pretrained()"),RAr=o("to load the model weights."),SAr=l(),i6e=a("p"),PAr=o("Examples:"),$Ar=l(),f(xL.$$.fragment),IAr=l(),$o=a("div"),f(kL.$$.fragment),jAr=l(),d6e=a("p"),DAr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),NAr=l(),On=a("p"),qAr=o("The model class to instantiate is selected based on the "),c6e=a("code"),OAr=o("model_type"),GAr=o(` property of the config object (either
passed as an argument or loaded from `),f6e=a("code"),XAr=o("pretrained_model_name_or_path"),VAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m6e=a("code"),zAr=o("pretrained_model_name_or_path"),WAr=o(":"),QAr=l(),Re=a("ul"),$C=a("li"),g6e=a("strong"),HAr=o("albert"),UAr=o(" \u2014 "),Fz=a("a"),JAr=o("FlaxAlbertForTokenClassification"),YAr=o(" (ALBERT model)"),KAr=l(),IC=a("li"),h6e=a("strong"),ZAr=o("bert"),eLr=o(" \u2014 "),Cz=a("a"),oLr=o("FlaxBertForTokenClassification"),rLr=o(" (BERT model)"),tLr=l(),jC=a("li"),p6e=a("strong"),aLr=o("big_bird"),nLr=o(" \u2014 "),Mz=a("a"),sLr=o("FlaxBigBirdForTokenClassification"),lLr=o(" (BigBird model)"),iLr=l(),DC=a("li"),_6e=a("strong"),dLr=o("distilbert"),cLr=o(" \u2014 "),Ez=a("a"),fLr=o("FlaxDistilBertForTokenClassification"),mLr=o(" (DistilBERT model)"),gLr=l(),NC=a("li"),u6e=a("strong"),hLr=o("electra"),pLr=o(" \u2014 "),yz=a("a"),_Lr=o("FlaxElectraForTokenClassification"),uLr=o(" (ELECTRA model)"),bLr=l(),qC=a("li"),b6e=a("strong"),vLr=o("roberta"),TLr=o(" \u2014 "),wz=a("a"),FLr=o("FlaxRobertaForTokenClassification"),CLr=o(" (RoBERTa model)"),MLr=l(),OC=a("li"),v6e=a("strong"),ELr=o("roformer"),yLr=o(" \u2014 "),Az=a("a"),wLr=o("FlaxRoFormerForTokenClassification"),ALr=o(" (RoFormer model)"),LLr=l(),GC=a("li"),T6e=a("strong"),BLr=o("xlm-roberta"),xLr=o(" \u2014 "),Lz=a("a"),kLr=o("FlaxXLMRobertaForTokenClassification"),RLr=o(" (XLM-RoBERTa model)"),SLr=l(),F6e=a("p"),PLr=o("Examples:"),$Lr=l(),f(RL.$$.fragment),jRe=l(),Sf=a("h2"),XC=a("a"),C6e=a("span"),f(SL.$$.fragment),ILr=l(),M6e=a("span"),jLr=o("FlaxAutoModelForMultipleChoice"),DRe=l(),Gr=a("div"),f(PL.$$.fragment),DLr=l(),Pf=a("p"),NLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),E6e=a("code"),qLr=o("from_pretrained()"),OLr=o("class method or the "),y6e=a("code"),GLr=o("from_config()"),XLr=o(`class
method.`),VLr=l(),$L=a("p"),zLr=o("This class cannot be instantiated directly using "),w6e=a("code"),WLr=o("__init__()"),QLr=o(" (throws an error)."),HLr=l(),jt=a("div"),f(IL.$$.fragment),ULr=l(),A6e=a("p"),JLr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),YLr=l(),$f=a("p"),KLr=o(`Note:
Loading a model from its configuration file does `),L6e=a("strong"),ZLr=o("not"),e7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),B6e=a("code"),o7r=o("from_pretrained()"),r7r=o("to load the model weights."),t7r=l(),x6e=a("p"),a7r=o("Examples:"),n7r=l(),f(jL.$$.fragment),s7r=l(),Io=a("div"),f(DL.$$.fragment),l7r=l(),k6e=a("p"),i7r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),d7r=l(),Gn=a("p"),c7r=o("The model class to instantiate is selected based on the "),R6e=a("code"),f7r=o("model_type"),m7r=o(` property of the config object (either
passed as an argument or loaded from `),S6e=a("code"),g7r=o("pretrained_model_name_or_path"),h7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P6e=a("code"),p7r=o("pretrained_model_name_or_path"),_7r=o(":"),u7r=l(),Se=a("ul"),VC=a("li"),$6e=a("strong"),b7r=o("albert"),v7r=o(" \u2014 "),Bz=a("a"),T7r=o("FlaxAlbertForMultipleChoice"),F7r=o(" (ALBERT model)"),C7r=l(),zC=a("li"),I6e=a("strong"),M7r=o("bert"),E7r=o(" \u2014 "),xz=a("a"),y7r=o("FlaxBertForMultipleChoice"),w7r=o(" (BERT model)"),A7r=l(),WC=a("li"),j6e=a("strong"),L7r=o("big_bird"),B7r=o(" \u2014 "),kz=a("a"),x7r=o("FlaxBigBirdForMultipleChoice"),k7r=o(" (BigBird model)"),R7r=l(),QC=a("li"),D6e=a("strong"),S7r=o("distilbert"),P7r=o(" \u2014 "),Rz=a("a"),$7r=o("FlaxDistilBertForMultipleChoice"),I7r=o(" (DistilBERT model)"),j7r=l(),HC=a("li"),N6e=a("strong"),D7r=o("electra"),N7r=o(" \u2014 "),Sz=a("a"),q7r=o("FlaxElectraForMultipleChoice"),O7r=o(" (ELECTRA model)"),G7r=l(),UC=a("li"),q6e=a("strong"),X7r=o("roberta"),V7r=o(" \u2014 "),Pz=a("a"),z7r=o("FlaxRobertaForMultipleChoice"),W7r=o(" (RoBERTa model)"),Q7r=l(),JC=a("li"),O6e=a("strong"),H7r=o("roformer"),U7r=o(" \u2014 "),$z=a("a"),J7r=o("FlaxRoFormerForMultipleChoice"),Y7r=o(" (RoFormer model)"),K7r=l(),YC=a("li"),G6e=a("strong"),Z7r=o("xlm-roberta"),e9r=o(" \u2014 "),Iz=a("a"),o9r=o("FlaxXLMRobertaForMultipleChoice"),r9r=o(" (XLM-RoBERTa model)"),t9r=l(),X6e=a("p"),a9r=o("Examples:"),n9r=l(),f(NL.$$.fragment),NRe=l(),If=a("h2"),KC=a("a"),V6e=a("span"),f(qL.$$.fragment),s9r=l(),z6e=a("span"),l9r=o("FlaxAutoModelForNextSentencePrediction"),qRe=l(),Xr=a("div"),f(OL.$$.fragment),i9r=l(),jf=a("p"),d9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),W6e=a("code"),c9r=o("from_pretrained()"),f9r=o("class method or the "),Q6e=a("code"),m9r=o("from_config()"),g9r=o(`class
method.`),h9r=l(),GL=a("p"),p9r=o("This class cannot be instantiated directly using "),H6e=a("code"),_9r=o("__init__()"),u9r=o(" (throws an error)."),b9r=l(),Dt=a("div"),f(XL.$$.fragment),v9r=l(),U6e=a("p"),T9r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),F9r=l(),Df=a("p"),C9r=o(`Note:
Loading a model from its configuration file does `),J6e=a("strong"),M9r=o("not"),E9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Y6e=a("code"),y9r=o("from_pretrained()"),w9r=o("to load the model weights."),A9r=l(),K6e=a("p"),L9r=o("Examples:"),B9r=l(),f(VL.$$.fragment),x9r=l(),jo=a("div"),f(zL.$$.fragment),k9r=l(),Z6e=a("p"),R9r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),S9r=l(),Xn=a("p"),P9r=o("The model class to instantiate is selected based on the "),e0e=a("code"),$9r=o("model_type"),I9r=o(` property of the config object (either
passed as an argument or loaded from `),o0e=a("code"),j9r=o("pretrained_model_name_or_path"),D9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r0e=a("code"),N9r=o("pretrained_model_name_or_path"),q9r=o(":"),O9r=l(),t0e=a("ul"),ZC=a("li"),a0e=a("strong"),G9r=o("bert"),X9r=o(" \u2014 "),jz=a("a"),V9r=o("FlaxBertForNextSentencePrediction"),z9r=o(" (BERT model)"),W9r=l(),n0e=a("p"),Q9r=o("Examples:"),H9r=l(),f(WL.$$.fragment),ORe=l(),Nf=a("h2"),eM=a("a"),s0e=a("span"),f(QL.$$.fragment),U9r=l(),l0e=a("span"),J9r=o("FlaxAutoModelForImageClassification"),GRe=l(),Vr=a("div"),f(HL.$$.fragment),Y9r=l(),qf=a("p"),K9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),i0e=a("code"),Z9r=o("from_pretrained()"),eBr=o("class method or the "),d0e=a("code"),oBr=o("from_config()"),rBr=o(`class
method.`),tBr=l(),UL=a("p"),aBr=o("This class cannot be instantiated directly using "),c0e=a("code"),nBr=o("__init__()"),sBr=o(" (throws an error)."),lBr=l(),Nt=a("div"),f(JL.$$.fragment),iBr=l(),f0e=a("p"),dBr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),cBr=l(),Of=a("p"),fBr=o(`Note:
Loading a model from its configuration file does `),m0e=a("strong"),mBr=o("not"),gBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),g0e=a("code"),hBr=o("from_pretrained()"),pBr=o("to load the model weights."),_Br=l(),h0e=a("p"),uBr=o("Examples:"),bBr=l(),f(YL.$$.fragment),vBr=l(),Do=a("div"),f(KL.$$.fragment),TBr=l(),p0e=a("p"),FBr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),CBr=l(),Vn=a("p"),MBr=o("The model class to instantiate is selected based on the "),_0e=a("code"),EBr=o("model_type"),yBr=o(` property of the config object (either
passed as an argument or loaded from `),u0e=a("code"),wBr=o("pretrained_model_name_or_path"),ABr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b0e=a("code"),LBr=o("pretrained_model_name_or_path"),BBr=o(":"),xBr=l(),ZL=a("ul"),oM=a("li"),v0e=a("strong"),kBr=o("beit"),RBr=o(" \u2014 "),Dz=a("a"),SBr=o("FlaxBeitForImageClassification"),PBr=o(" (BEiT model)"),$Br=l(),rM=a("li"),T0e=a("strong"),IBr=o("vit"),jBr=o(" \u2014 "),Nz=a("a"),DBr=o("FlaxViTForImageClassification"),NBr=o(" (ViT model)"),qBr=l(),F0e=a("p"),OBr=o("Examples:"),GBr=l(),f(e7.$$.fragment),XRe=l(),Gf=a("h2"),tM=a("a"),C0e=a("span"),f(o7.$$.fragment),XBr=l(),M0e=a("span"),VBr=o("FlaxAutoModelForVision2Seq"),VRe=l(),zr=a("div"),f(r7.$$.fragment),zBr=l(),Xf=a("p"),WBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),E0e=a("code"),QBr=o("from_pretrained()"),HBr=o("class method or the "),y0e=a("code"),UBr=o("from_config()"),JBr=o(`class
method.`),YBr=l(),t7=a("p"),KBr=o("This class cannot be instantiated directly using "),w0e=a("code"),ZBr=o("__init__()"),exr=o(" (throws an error)."),oxr=l(),qt=a("div"),f(a7.$$.fragment),rxr=l(),A0e=a("p"),txr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),axr=l(),Vf=a("p"),nxr=o(`Note:
Loading a model from its configuration file does `),L0e=a("strong"),sxr=o("not"),lxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),B0e=a("code"),ixr=o("from_pretrained()"),dxr=o("to load the model weights."),cxr=l(),x0e=a("p"),fxr=o("Examples:"),mxr=l(),f(n7.$$.fragment),gxr=l(),No=a("div"),f(s7.$$.fragment),hxr=l(),k0e=a("p"),pxr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),_xr=l(),zn=a("p"),uxr=o("The model class to instantiate is selected based on the "),R0e=a("code"),bxr=o("model_type"),vxr=o(` property of the config object (either
passed as an argument or loaded from `),S0e=a("code"),Txr=o("pretrained_model_name_or_path"),Fxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P0e=a("code"),Cxr=o("pretrained_model_name_or_path"),Mxr=o(":"),Exr=l(),$0e=a("ul"),aM=a("li"),I0e=a("strong"),yxr=o("vision-encoder-decoder"),wxr=o(" \u2014 "),qz=a("a"),Axr=o("FlaxVisionEncoderDecoderModel"),Lxr=o(" (Vision Encoder decoder model)"),Bxr=l(),j0e=a("p"),xxr=o("Examples:"),kxr=l(),f(l7.$$.fragment),this.h()},l(d){const u=E8t('[data-svelte="svelte-1phssyn"]',document.head);J=n(u,"META",{name:!0,content:!0}),u.forEach(t),Pe=i(d),de=n(d,"H1",{class:!0});var i7=s(de);ge=n(i7,"A",{id:!0,class:!0,href:!0});var D0e=s(ge);io=n(D0e,"SPAN",{});var N0e=s(io);m(fe.$$.fragment,N0e),N0e.forEach(t),D0e.forEach(t),Te=i(i7),zo=n(i7,"SPAN",{});var Sxr=s(zo);Vi=r(Sxr,"Auto Classes"),Sxr.forEach(t),i7.forEach(t),Wf=i(d),ha=n(d,"P",{});var WRe=s(ha);zi=r(WRe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Wi=n(WRe,"CODE",{});var Pxr=s(Wi);n4=r(Pxr,"from_pretrained()"),Pxr.forEach(t),Qf=r(WRe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),WRe.forEach(t),Le=i(d),co=n(d,"P",{});var nM=s(co);Qi=r(nM,"Instantiating one of "),Wn=n(nM,"A",{href:!0});var $xr=s(Wn);s4=r($xr,"AutoConfig"),$xr.forEach(t),Qn=r(nM,", "),Hn=n(nM,"A",{href:!0});var Ixr=s(Hn);l4=r(Ixr,"AutoModel"),Ixr.forEach(t),Hi=r(nM,`, and
`),Un=n(nM,"A",{href:!0});var jxr=s(Un);i4=r(jxr,"AutoTokenizer"),jxr.forEach(t),Ui=r(nM," will directly create a class of the relevant architecture. For instance"),nM.forEach(t),Hf=i(d),m(Va.$$.fragment,d),fo=i(d),he=n(d,"P",{});var QRe=s(he);n9=r(QRe,"will create a model that is an instance of "),Ji=n(QRe,"A",{href:!0});var Dxr=s(Ji);s9=r(Dxr,"BertModel"),Dxr.forEach(t),l9=r(QRe,"."),QRe.forEach(t),Wo=i(d),za=n(d,"P",{});var HRe=s(za);i9=r(HRe,"There is one class of "),Uf=n(HRe,"CODE",{});var Nxr=s(Uf);d9=r(Nxr,"AutoModel"),Nxr.forEach(t),s$e=r(HRe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),HRe.forEach(t),Gxe=i(d),Yi=n(d,"H2",{class:!0});var URe=s(Yi);Jf=n(URe,"A",{id:!0,class:!0,href:!0});var qxr=s(Jf);$Q=n(qxr,"SPAN",{});var Oxr=s($Q);m(d4.$$.fragment,Oxr),Oxr.forEach(t),qxr.forEach(t),l$e=i(URe),IQ=n(URe,"SPAN",{});var Gxr=s(IQ);i$e=r(Gxr,"Extending the Auto Classes"),Gxr.forEach(t),URe.forEach(t),Xxe=i(d),Jn=n(d,"P",{});var Oz=s(Jn);d$e=r(Oz,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),jQ=n(Oz,"CODE",{});var Xxr=s(jQ);c$e=r(Xxr,"NewModel"),Xxr.forEach(t),f$e=r(Oz,", make sure you have a "),DQ=n(Oz,"CODE",{});var Vxr=s(DQ);m$e=r(Vxr,"NewModelConfig"),Vxr.forEach(t),g$e=r(Oz,` then you can add those to the auto
classes like this:`),Oz.forEach(t),Vxe=i(d),m(c4.$$.fragment,d),zxe=i(d),c9=n(d,"P",{});var zxr=s(c9);h$e=r(zxr,"You will then be able to use the auto classes like you would usually do!"),zxr.forEach(t),Wxe=i(d),m(Yf.$$.fragment,d),Qxe=i(d),Ki=n(d,"H2",{class:!0});var JRe=s(Ki);Kf=n(JRe,"A",{id:!0,class:!0,href:!0});var Wxr=s(Kf);NQ=n(Wxr,"SPAN",{});var Qxr=s(NQ);m(f4.$$.fragment,Qxr),Qxr.forEach(t),Wxr.forEach(t),p$e=i(JRe),qQ=n(JRe,"SPAN",{});var Hxr=s(qQ);_$e=r(Hxr,"AutoConfig"),Hxr.forEach(t),JRe.forEach(t),Hxe=i(d),Qo=n(d,"DIV",{class:!0});var Qs=s(Qo);m(m4.$$.fragment,Qs),u$e=i(Qs),g4=n(Qs,"P",{});var YRe=s(g4);b$e=r(YRe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),f9=n(YRe,"A",{href:!0});var Uxr=s(f9);v$e=r(Uxr,"from_pretrained()"),Uxr.forEach(t),T$e=r(YRe," class method."),YRe.forEach(t),F$e=i(Qs),h4=n(Qs,"P",{});var KRe=s(h4);C$e=r(KRe,"This class cannot be instantiated directly using "),OQ=n(KRe,"CODE",{});var Jxr=s(OQ);M$e=r(Jxr,"__init__()"),Jxr.forEach(t),E$e=r(KRe," (throws an error)."),KRe.forEach(t),y$e=i(Qs),mo=n(Qs,"DIV",{class:!0});var _a=s(mo);m(p4.$$.fragment,_a),w$e=i(_a),GQ=n(_a,"P",{});var Yxr=s(GQ);A$e=r(Yxr,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),Yxr.forEach(t),L$e=i(_a),Zi=n(_a,"P",{});var Gz=s(Zi);B$e=r(Gz,"The configuration class to instantiate is selected based on the "),XQ=n(Gz,"CODE",{});var Kxr=s(XQ);x$e=r(Kxr,"model_type"),Kxr.forEach(t),k$e=r(Gz,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),VQ=n(Gz,"CODE",{});var Zxr=s(VQ);R$e=r(Zxr,"pretrained_model_name_or_path"),Zxr.forEach(t),S$e=r(Gz,":"),Gz.forEach(t),P$e=i(_a),v=n(_a,"UL",{});var T=s(v);Zf=n(T,"LI",{});var q0e=s(Zf);zQ=n(q0e,"STRONG",{});var ekr=s(zQ);$$e=r(ekr,"albert"),ekr.forEach(t),I$e=r(q0e," \u2014 "),m9=n(q0e,"A",{href:!0});var okr=s(m9);j$e=r(okr,"AlbertConfig"),okr.forEach(t),D$e=r(q0e," (ALBERT model)"),q0e.forEach(t),N$e=i(T),em=n(T,"LI",{});var O0e=s(em);WQ=n(O0e,"STRONG",{});var rkr=s(WQ);q$e=r(rkr,"bart"),rkr.forEach(t),O$e=r(O0e," \u2014 "),g9=n(O0e,"A",{href:!0});var tkr=s(g9);G$e=r(tkr,"BartConfig"),tkr.forEach(t),X$e=r(O0e," (BART model)"),O0e.forEach(t),V$e=i(T),om=n(T,"LI",{});var G0e=s(om);QQ=n(G0e,"STRONG",{});var akr=s(QQ);z$e=r(akr,"beit"),akr.forEach(t),W$e=r(G0e," \u2014 "),h9=n(G0e,"A",{href:!0});var nkr=s(h9);Q$e=r(nkr,"BeitConfig"),nkr.forEach(t),H$e=r(G0e," (BEiT model)"),G0e.forEach(t),U$e=i(T),rm=n(T,"LI",{});var X0e=s(rm);HQ=n(X0e,"STRONG",{});var skr=s(HQ);J$e=r(skr,"bert"),skr.forEach(t),Y$e=r(X0e," \u2014 "),p9=n(X0e,"A",{href:!0});var lkr=s(p9);K$e=r(lkr,"BertConfig"),lkr.forEach(t),Z$e=r(X0e," (BERT model)"),X0e.forEach(t),eIe=i(T),tm=n(T,"LI",{});var V0e=s(tm);UQ=n(V0e,"STRONG",{});var ikr=s(UQ);oIe=r(ikr,"bert-generation"),ikr.forEach(t),rIe=r(V0e," \u2014 "),_9=n(V0e,"A",{href:!0});var dkr=s(_9);tIe=r(dkr,"BertGenerationConfig"),dkr.forEach(t),aIe=r(V0e," (Bert Generation model)"),V0e.forEach(t),nIe=i(T),am=n(T,"LI",{});var z0e=s(am);JQ=n(z0e,"STRONG",{});var ckr=s(JQ);sIe=r(ckr,"big_bird"),ckr.forEach(t),lIe=r(z0e," \u2014 "),u9=n(z0e,"A",{href:!0});var fkr=s(u9);iIe=r(fkr,"BigBirdConfig"),fkr.forEach(t),dIe=r(z0e," (BigBird model)"),z0e.forEach(t),cIe=i(T),nm=n(T,"LI",{});var W0e=s(nm);YQ=n(W0e,"STRONG",{});var mkr=s(YQ);fIe=r(mkr,"bigbird_pegasus"),mkr.forEach(t),mIe=r(W0e," \u2014 "),b9=n(W0e,"A",{href:!0});var gkr=s(b9);gIe=r(gkr,"BigBirdPegasusConfig"),gkr.forEach(t),hIe=r(W0e," (BigBirdPegasus model)"),W0e.forEach(t),pIe=i(T),sm=n(T,"LI",{});var Q0e=s(sm);KQ=n(Q0e,"STRONG",{});var hkr=s(KQ);_Ie=r(hkr,"blenderbot"),hkr.forEach(t),uIe=r(Q0e," \u2014 "),v9=n(Q0e,"A",{href:!0});var pkr=s(v9);bIe=r(pkr,"BlenderbotConfig"),pkr.forEach(t),vIe=r(Q0e," (Blenderbot model)"),Q0e.forEach(t),TIe=i(T),lm=n(T,"LI",{});var H0e=s(lm);ZQ=n(H0e,"STRONG",{});var _kr=s(ZQ);FIe=r(_kr,"blenderbot-small"),_kr.forEach(t),CIe=r(H0e," \u2014 "),T9=n(H0e,"A",{href:!0});var ukr=s(T9);MIe=r(ukr,"BlenderbotSmallConfig"),ukr.forEach(t),EIe=r(H0e," (BlenderbotSmall model)"),H0e.forEach(t),yIe=i(T),im=n(T,"LI",{});var U0e=s(im);eH=n(U0e,"STRONG",{});var bkr=s(eH);wIe=r(bkr,"camembert"),bkr.forEach(t),AIe=r(U0e," \u2014 "),F9=n(U0e,"A",{href:!0});var vkr=s(F9);LIe=r(vkr,"CamembertConfig"),vkr.forEach(t),BIe=r(U0e," (CamemBERT model)"),U0e.forEach(t),xIe=i(T),dm=n(T,"LI",{});var J0e=s(dm);oH=n(J0e,"STRONG",{});var Tkr=s(oH);kIe=r(Tkr,"canine"),Tkr.forEach(t),RIe=r(J0e," \u2014 "),C9=n(J0e,"A",{href:!0});var Fkr=s(C9);SIe=r(Fkr,"CanineConfig"),Fkr.forEach(t),PIe=r(J0e," (Canine model)"),J0e.forEach(t),$Ie=i(T),cm=n(T,"LI",{});var Y0e=s(cm);rH=n(Y0e,"STRONG",{});var Ckr=s(rH);IIe=r(Ckr,"clip"),Ckr.forEach(t),jIe=r(Y0e," \u2014 "),M9=n(Y0e,"A",{href:!0});var Mkr=s(M9);DIe=r(Mkr,"CLIPConfig"),Mkr.forEach(t),NIe=r(Y0e," (CLIP model)"),Y0e.forEach(t),qIe=i(T),fm=n(T,"LI",{});var K0e=s(fm);tH=n(K0e,"STRONG",{});var Ekr=s(tH);OIe=r(Ekr,"convbert"),Ekr.forEach(t),GIe=r(K0e," \u2014 "),E9=n(K0e,"A",{href:!0});var ykr=s(E9);XIe=r(ykr,"ConvBertConfig"),ykr.forEach(t),VIe=r(K0e," (ConvBERT model)"),K0e.forEach(t),zIe=i(T),mm=n(T,"LI",{});var Z0e=s(mm);aH=n(Z0e,"STRONG",{});var wkr=s(aH);WIe=r(wkr,"convnext"),wkr.forEach(t),QIe=r(Z0e," \u2014 "),y9=n(Z0e,"A",{href:!0});var Akr=s(y9);HIe=r(Akr,"ConvNextConfig"),Akr.forEach(t),UIe=r(Z0e," (ConvNext model)"),Z0e.forEach(t),JIe=i(T),gm=n(T,"LI",{});var eTe=s(gm);nH=n(eTe,"STRONG",{});var Lkr=s(nH);YIe=r(Lkr,"ctrl"),Lkr.forEach(t),KIe=r(eTe," \u2014 "),w9=n(eTe,"A",{href:!0});var Bkr=s(w9);ZIe=r(Bkr,"CTRLConfig"),Bkr.forEach(t),eje=r(eTe," (CTRL model)"),eTe.forEach(t),oje=i(T),hm=n(T,"LI",{});var oTe=s(hm);sH=n(oTe,"STRONG",{});var xkr=s(sH);rje=r(xkr,"data2vec-audio"),xkr.forEach(t),tje=r(oTe," \u2014 "),A9=n(oTe,"A",{href:!0});var kkr=s(A9);aje=r(kkr,"Data2VecAudioConfig"),kkr.forEach(t),nje=r(oTe," (Data2VecAudio model)"),oTe.forEach(t),sje=i(T),pm=n(T,"LI",{});var rTe=s(pm);lH=n(rTe,"STRONG",{});var Rkr=s(lH);lje=r(Rkr,"data2vec-text"),Rkr.forEach(t),ije=r(rTe," \u2014 "),L9=n(rTe,"A",{href:!0});var Skr=s(L9);dje=r(Skr,"Data2VecTextConfig"),Skr.forEach(t),cje=r(rTe," (Data2VecText model)"),rTe.forEach(t),fje=i(T),_m=n(T,"LI",{});var tTe=s(_m);iH=n(tTe,"STRONG",{});var Pkr=s(iH);mje=r(Pkr,"deberta"),Pkr.forEach(t),gje=r(tTe," \u2014 "),B9=n(tTe,"A",{href:!0});var $kr=s(B9);hje=r($kr,"DebertaConfig"),$kr.forEach(t),pje=r(tTe," (DeBERTa model)"),tTe.forEach(t),_je=i(T),um=n(T,"LI",{});var aTe=s(um);dH=n(aTe,"STRONG",{});var Ikr=s(dH);uje=r(Ikr,"deberta-v2"),Ikr.forEach(t),bje=r(aTe," \u2014 "),x9=n(aTe,"A",{href:!0});var jkr=s(x9);vje=r(jkr,"DebertaV2Config"),jkr.forEach(t),Tje=r(aTe," (DeBERTa-v2 model)"),aTe.forEach(t),Fje=i(T),bm=n(T,"LI",{});var nTe=s(bm);cH=n(nTe,"STRONG",{});var Dkr=s(cH);Cje=r(Dkr,"deit"),Dkr.forEach(t),Mje=r(nTe," \u2014 "),k9=n(nTe,"A",{href:!0});var Nkr=s(k9);Eje=r(Nkr,"DeiTConfig"),Nkr.forEach(t),yje=r(nTe," (DeiT model)"),nTe.forEach(t),wje=i(T),vm=n(T,"LI",{});var sTe=s(vm);fH=n(sTe,"STRONG",{});var qkr=s(fH);Aje=r(qkr,"detr"),qkr.forEach(t),Lje=r(sTe," \u2014 "),R9=n(sTe,"A",{href:!0});var Okr=s(R9);Bje=r(Okr,"DetrConfig"),Okr.forEach(t),xje=r(sTe," (DETR model)"),sTe.forEach(t),kje=i(T),Tm=n(T,"LI",{});var lTe=s(Tm);mH=n(lTe,"STRONG",{});var Gkr=s(mH);Rje=r(Gkr,"distilbert"),Gkr.forEach(t),Sje=r(lTe," \u2014 "),S9=n(lTe,"A",{href:!0});var Xkr=s(S9);Pje=r(Xkr,"DistilBertConfig"),Xkr.forEach(t),$je=r(lTe," (DistilBERT model)"),lTe.forEach(t),Ije=i(T),Fm=n(T,"LI",{});var iTe=s(Fm);gH=n(iTe,"STRONG",{});var Vkr=s(gH);jje=r(Vkr,"dpr"),Vkr.forEach(t),Dje=r(iTe," \u2014 "),P9=n(iTe,"A",{href:!0});var zkr=s(P9);Nje=r(zkr,"DPRConfig"),zkr.forEach(t),qje=r(iTe," (DPR model)"),iTe.forEach(t),Oje=i(T),Cm=n(T,"LI",{});var dTe=s(Cm);hH=n(dTe,"STRONG",{});var Wkr=s(hH);Gje=r(Wkr,"electra"),Wkr.forEach(t),Xje=r(dTe," \u2014 "),$9=n(dTe,"A",{href:!0});var Qkr=s($9);Vje=r(Qkr,"ElectraConfig"),Qkr.forEach(t),zje=r(dTe," (ELECTRA model)"),dTe.forEach(t),Wje=i(T),Mm=n(T,"LI",{});var cTe=s(Mm);pH=n(cTe,"STRONG",{});var Hkr=s(pH);Qje=r(Hkr,"encoder-decoder"),Hkr.forEach(t),Hje=r(cTe," \u2014 "),I9=n(cTe,"A",{href:!0});var Ukr=s(I9);Uje=r(Ukr,"EncoderDecoderConfig"),Ukr.forEach(t),Jje=r(cTe," (Encoder decoder model)"),cTe.forEach(t),Yje=i(T),Em=n(T,"LI",{});var fTe=s(Em);_H=n(fTe,"STRONG",{});var Jkr=s(_H);Kje=r(Jkr,"flaubert"),Jkr.forEach(t),Zje=r(fTe," \u2014 "),j9=n(fTe,"A",{href:!0});var Ykr=s(j9);eDe=r(Ykr,"FlaubertConfig"),Ykr.forEach(t),oDe=r(fTe," (FlauBERT model)"),fTe.forEach(t),rDe=i(T),ym=n(T,"LI",{});var mTe=s(ym);uH=n(mTe,"STRONG",{});var Kkr=s(uH);tDe=r(Kkr,"fnet"),Kkr.forEach(t),aDe=r(mTe," \u2014 "),D9=n(mTe,"A",{href:!0});var Zkr=s(D9);nDe=r(Zkr,"FNetConfig"),Zkr.forEach(t),sDe=r(mTe," (FNet model)"),mTe.forEach(t),lDe=i(T),wm=n(T,"LI",{});var gTe=s(wm);bH=n(gTe,"STRONG",{});var eRr=s(bH);iDe=r(eRr,"fsmt"),eRr.forEach(t),dDe=r(gTe," \u2014 "),N9=n(gTe,"A",{href:!0});var oRr=s(N9);cDe=r(oRr,"FSMTConfig"),oRr.forEach(t),fDe=r(gTe," (FairSeq Machine-Translation model)"),gTe.forEach(t),mDe=i(T),Am=n(T,"LI",{});var hTe=s(Am);vH=n(hTe,"STRONG",{});var rRr=s(vH);gDe=r(rRr,"funnel"),rRr.forEach(t),hDe=r(hTe," \u2014 "),q9=n(hTe,"A",{href:!0});var tRr=s(q9);pDe=r(tRr,"FunnelConfig"),tRr.forEach(t),_De=r(hTe," (Funnel Transformer model)"),hTe.forEach(t),uDe=i(T),Lm=n(T,"LI",{});var pTe=s(Lm);TH=n(pTe,"STRONG",{});var aRr=s(TH);bDe=r(aRr,"gpt2"),aRr.forEach(t),vDe=r(pTe," \u2014 "),O9=n(pTe,"A",{href:!0});var nRr=s(O9);TDe=r(nRr,"GPT2Config"),nRr.forEach(t),FDe=r(pTe," (OpenAI GPT-2 model)"),pTe.forEach(t),CDe=i(T),Bm=n(T,"LI",{});var _Te=s(Bm);FH=n(_Te,"STRONG",{});var sRr=s(FH);MDe=r(sRr,"gpt_neo"),sRr.forEach(t),EDe=r(_Te," \u2014 "),G9=n(_Te,"A",{href:!0});var lRr=s(G9);yDe=r(lRr,"GPTNeoConfig"),lRr.forEach(t),wDe=r(_Te," (GPT Neo model)"),_Te.forEach(t),ADe=i(T),xm=n(T,"LI",{});var uTe=s(xm);CH=n(uTe,"STRONG",{});var iRr=s(CH);LDe=r(iRr,"gptj"),iRr.forEach(t),BDe=r(uTe," \u2014 "),X9=n(uTe,"A",{href:!0});var dRr=s(X9);xDe=r(dRr,"GPTJConfig"),dRr.forEach(t),kDe=r(uTe," (GPT-J model)"),uTe.forEach(t),RDe=i(T),km=n(T,"LI",{});var bTe=s(km);MH=n(bTe,"STRONG",{});var cRr=s(MH);SDe=r(cRr,"hubert"),cRr.forEach(t),PDe=r(bTe," \u2014 "),V9=n(bTe,"A",{href:!0});var fRr=s(V9);$De=r(fRr,"HubertConfig"),fRr.forEach(t),IDe=r(bTe," (Hubert model)"),bTe.forEach(t),jDe=i(T),Rm=n(T,"LI",{});var vTe=s(Rm);EH=n(vTe,"STRONG",{});var mRr=s(EH);DDe=r(mRr,"ibert"),mRr.forEach(t),NDe=r(vTe," \u2014 "),z9=n(vTe,"A",{href:!0});var gRr=s(z9);qDe=r(gRr,"IBertConfig"),gRr.forEach(t),ODe=r(vTe," (I-BERT model)"),vTe.forEach(t),GDe=i(T),Sm=n(T,"LI",{});var TTe=s(Sm);yH=n(TTe,"STRONG",{});var hRr=s(yH);XDe=r(hRr,"imagegpt"),hRr.forEach(t),VDe=r(TTe," \u2014 "),W9=n(TTe,"A",{href:!0});var pRr=s(W9);zDe=r(pRr,"ImageGPTConfig"),pRr.forEach(t),WDe=r(TTe," (ImageGPT model)"),TTe.forEach(t),QDe=i(T),Pm=n(T,"LI",{});var FTe=s(Pm);wH=n(FTe,"STRONG",{});var _Rr=s(wH);HDe=r(_Rr,"layoutlm"),_Rr.forEach(t),UDe=r(FTe," \u2014 "),Q9=n(FTe,"A",{href:!0});var uRr=s(Q9);JDe=r(uRr,"LayoutLMConfig"),uRr.forEach(t),YDe=r(FTe," (LayoutLM model)"),FTe.forEach(t),KDe=i(T),$m=n(T,"LI",{});var CTe=s($m);AH=n(CTe,"STRONG",{});var bRr=s(AH);ZDe=r(bRr,"layoutlmv2"),bRr.forEach(t),eNe=r(CTe," \u2014 "),H9=n(CTe,"A",{href:!0});var vRr=s(H9);oNe=r(vRr,"LayoutLMv2Config"),vRr.forEach(t),rNe=r(CTe," (LayoutLMv2 model)"),CTe.forEach(t),tNe=i(T),Im=n(T,"LI",{});var MTe=s(Im);LH=n(MTe,"STRONG",{});var TRr=s(LH);aNe=r(TRr,"led"),TRr.forEach(t),nNe=r(MTe," \u2014 "),U9=n(MTe,"A",{href:!0});var FRr=s(U9);sNe=r(FRr,"LEDConfig"),FRr.forEach(t),lNe=r(MTe," (LED model)"),MTe.forEach(t),iNe=i(T),jm=n(T,"LI",{});var ETe=s(jm);BH=n(ETe,"STRONG",{});var CRr=s(BH);dNe=r(CRr,"longformer"),CRr.forEach(t),cNe=r(ETe," \u2014 "),J9=n(ETe,"A",{href:!0});var MRr=s(J9);fNe=r(MRr,"LongformerConfig"),MRr.forEach(t),mNe=r(ETe," (Longformer model)"),ETe.forEach(t),gNe=i(T),Dm=n(T,"LI",{});var yTe=s(Dm);xH=n(yTe,"STRONG",{});var ERr=s(xH);hNe=r(ERr,"luke"),ERr.forEach(t),pNe=r(yTe," \u2014 "),Y9=n(yTe,"A",{href:!0});var yRr=s(Y9);_Ne=r(yRr,"LukeConfig"),yRr.forEach(t),uNe=r(yTe," (LUKE model)"),yTe.forEach(t),bNe=i(T),Nm=n(T,"LI",{});var wTe=s(Nm);kH=n(wTe,"STRONG",{});var wRr=s(kH);vNe=r(wRr,"lxmert"),wRr.forEach(t),TNe=r(wTe," \u2014 "),K9=n(wTe,"A",{href:!0});var ARr=s(K9);FNe=r(ARr,"LxmertConfig"),ARr.forEach(t),CNe=r(wTe," (LXMERT model)"),wTe.forEach(t),MNe=i(T),qm=n(T,"LI",{});var ATe=s(qm);RH=n(ATe,"STRONG",{});var LRr=s(RH);ENe=r(LRr,"m2m_100"),LRr.forEach(t),yNe=r(ATe," \u2014 "),Z9=n(ATe,"A",{href:!0});var BRr=s(Z9);wNe=r(BRr,"M2M100Config"),BRr.forEach(t),ANe=r(ATe," (M2M100 model)"),ATe.forEach(t),LNe=i(T),Om=n(T,"LI",{});var LTe=s(Om);SH=n(LTe,"STRONG",{});var xRr=s(SH);BNe=r(xRr,"marian"),xRr.forEach(t),xNe=r(LTe," \u2014 "),eB=n(LTe,"A",{href:!0});var kRr=s(eB);kNe=r(kRr,"MarianConfig"),kRr.forEach(t),RNe=r(LTe," (Marian model)"),LTe.forEach(t),SNe=i(T),Gm=n(T,"LI",{});var BTe=s(Gm);PH=n(BTe,"STRONG",{});var RRr=s(PH);PNe=r(RRr,"maskformer"),RRr.forEach(t),$Ne=r(BTe," \u2014 "),oB=n(BTe,"A",{href:!0});var SRr=s(oB);INe=r(SRr,"MaskFormerConfig"),SRr.forEach(t),jNe=r(BTe," (MaskFormer model)"),BTe.forEach(t),DNe=i(T),Xm=n(T,"LI",{});var xTe=s(Xm);$H=n(xTe,"STRONG",{});var PRr=s($H);NNe=r(PRr,"mbart"),PRr.forEach(t),qNe=r(xTe," \u2014 "),rB=n(xTe,"A",{href:!0});var $Rr=s(rB);ONe=r($Rr,"MBartConfig"),$Rr.forEach(t),GNe=r(xTe," (mBART model)"),xTe.forEach(t),XNe=i(T),Vm=n(T,"LI",{});var kTe=s(Vm);IH=n(kTe,"STRONG",{});var IRr=s(IH);VNe=r(IRr,"megatron-bert"),IRr.forEach(t),zNe=r(kTe," \u2014 "),tB=n(kTe,"A",{href:!0});var jRr=s(tB);WNe=r(jRr,"MegatronBertConfig"),jRr.forEach(t),QNe=r(kTe," (MegatronBert model)"),kTe.forEach(t),HNe=i(T),zm=n(T,"LI",{});var RTe=s(zm);jH=n(RTe,"STRONG",{});var DRr=s(jH);UNe=r(DRr,"mobilebert"),DRr.forEach(t),JNe=r(RTe," \u2014 "),aB=n(RTe,"A",{href:!0});var NRr=s(aB);YNe=r(NRr,"MobileBertConfig"),NRr.forEach(t),KNe=r(RTe," (MobileBERT model)"),RTe.forEach(t),ZNe=i(T),Wm=n(T,"LI",{});var STe=s(Wm);DH=n(STe,"STRONG",{});var qRr=s(DH);eqe=r(qRr,"mpnet"),qRr.forEach(t),oqe=r(STe," \u2014 "),nB=n(STe,"A",{href:!0});var ORr=s(nB);rqe=r(ORr,"MPNetConfig"),ORr.forEach(t),tqe=r(STe," (MPNet model)"),STe.forEach(t),aqe=i(T),Qm=n(T,"LI",{});var PTe=s(Qm);NH=n(PTe,"STRONG",{});var GRr=s(NH);nqe=r(GRr,"mt5"),GRr.forEach(t),sqe=r(PTe," \u2014 "),sB=n(PTe,"A",{href:!0});var XRr=s(sB);lqe=r(XRr,"MT5Config"),XRr.forEach(t),iqe=r(PTe," (mT5 model)"),PTe.forEach(t),dqe=i(T),Hm=n(T,"LI",{});var $Te=s(Hm);qH=n($Te,"STRONG",{});var VRr=s(qH);cqe=r(VRr,"nystromformer"),VRr.forEach(t),fqe=r($Te," \u2014 "),lB=n($Te,"A",{href:!0});var zRr=s(lB);mqe=r(zRr,"NystromformerConfig"),zRr.forEach(t),gqe=r($Te," (Nystromformer model)"),$Te.forEach(t),hqe=i(T),Um=n(T,"LI",{});var ITe=s(Um);OH=n(ITe,"STRONG",{});var WRr=s(OH);pqe=r(WRr,"openai-gpt"),WRr.forEach(t),_qe=r(ITe," \u2014 "),iB=n(ITe,"A",{href:!0});var QRr=s(iB);uqe=r(QRr,"OpenAIGPTConfig"),QRr.forEach(t),bqe=r(ITe," (OpenAI GPT model)"),ITe.forEach(t),vqe=i(T),Jm=n(T,"LI",{});var jTe=s(Jm);GH=n(jTe,"STRONG",{});var HRr=s(GH);Tqe=r(HRr,"pegasus"),HRr.forEach(t),Fqe=r(jTe," \u2014 "),dB=n(jTe,"A",{href:!0});var URr=s(dB);Cqe=r(URr,"PegasusConfig"),URr.forEach(t),Mqe=r(jTe," (Pegasus model)"),jTe.forEach(t),Eqe=i(T),Ym=n(T,"LI",{});var DTe=s(Ym);XH=n(DTe,"STRONG",{});var JRr=s(XH);yqe=r(JRr,"perceiver"),JRr.forEach(t),wqe=r(DTe," \u2014 "),cB=n(DTe,"A",{href:!0});var YRr=s(cB);Aqe=r(YRr,"PerceiverConfig"),YRr.forEach(t),Lqe=r(DTe," (Perceiver model)"),DTe.forEach(t),Bqe=i(T),Km=n(T,"LI",{});var NTe=s(Km);VH=n(NTe,"STRONG",{});var KRr=s(VH);xqe=r(KRr,"plbart"),KRr.forEach(t),kqe=r(NTe," \u2014 "),fB=n(NTe,"A",{href:!0});var ZRr=s(fB);Rqe=r(ZRr,"PLBartConfig"),ZRr.forEach(t),Sqe=r(NTe," (PLBart model)"),NTe.forEach(t),Pqe=i(T),Zm=n(T,"LI",{});var qTe=s(Zm);zH=n(qTe,"STRONG",{});var eSr=s(zH);$qe=r(eSr,"poolformer"),eSr.forEach(t),Iqe=r(qTe," \u2014 "),mB=n(qTe,"A",{href:!0});var oSr=s(mB);jqe=r(oSr,"PoolFormerConfig"),oSr.forEach(t),Dqe=r(qTe," (PoolFormer model)"),qTe.forEach(t),Nqe=i(T),eg=n(T,"LI",{});var OTe=s(eg);WH=n(OTe,"STRONG",{});var rSr=s(WH);qqe=r(rSr,"prophetnet"),rSr.forEach(t),Oqe=r(OTe," \u2014 "),gB=n(OTe,"A",{href:!0});var tSr=s(gB);Gqe=r(tSr,"ProphetNetConfig"),tSr.forEach(t),Xqe=r(OTe," (ProphetNet model)"),OTe.forEach(t),Vqe=i(T),og=n(T,"LI",{});var GTe=s(og);QH=n(GTe,"STRONG",{});var aSr=s(QH);zqe=r(aSr,"qdqbert"),aSr.forEach(t),Wqe=r(GTe," \u2014 "),hB=n(GTe,"A",{href:!0});var nSr=s(hB);Qqe=r(nSr,"QDQBertConfig"),nSr.forEach(t),Hqe=r(GTe," (QDQBert model)"),GTe.forEach(t),Uqe=i(T),rg=n(T,"LI",{});var XTe=s(rg);HH=n(XTe,"STRONG",{});var sSr=s(HH);Jqe=r(sSr,"rag"),sSr.forEach(t),Yqe=r(XTe," \u2014 "),pB=n(XTe,"A",{href:!0});var lSr=s(pB);Kqe=r(lSr,"RagConfig"),lSr.forEach(t),Zqe=r(XTe," (RAG model)"),XTe.forEach(t),eOe=i(T),tg=n(T,"LI",{});var VTe=s(tg);UH=n(VTe,"STRONG",{});var iSr=s(UH);oOe=r(iSr,"realm"),iSr.forEach(t),rOe=r(VTe," \u2014 "),_B=n(VTe,"A",{href:!0});var dSr=s(_B);tOe=r(dSr,"RealmConfig"),dSr.forEach(t),aOe=r(VTe," (Realm model)"),VTe.forEach(t),nOe=i(T),ag=n(T,"LI",{});var zTe=s(ag);JH=n(zTe,"STRONG",{});var cSr=s(JH);sOe=r(cSr,"reformer"),cSr.forEach(t),lOe=r(zTe," \u2014 "),uB=n(zTe,"A",{href:!0});var fSr=s(uB);iOe=r(fSr,"ReformerConfig"),fSr.forEach(t),dOe=r(zTe," (Reformer model)"),zTe.forEach(t),cOe=i(T),ng=n(T,"LI",{});var WTe=s(ng);YH=n(WTe,"STRONG",{});var mSr=s(YH);fOe=r(mSr,"rembert"),mSr.forEach(t),mOe=r(WTe," \u2014 "),bB=n(WTe,"A",{href:!0});var gSr=s(bB);gOe=r(gSr,"RemBertConfig"),gSr.forEach(t),hOe=r(WTe," (RemBERT model)"),WTe.forEach(t),pOe=i(T),sg=n(T,"LI",{});var QTe=s(sg);KH=n(QTe,"STRONG",{});var hSr=s(KH);_Oe=r(hSr,"retribert"),hSr.forEach(t),uOe=r(QTe," \u2014 "),vB=n(QTe,"A",{href:!0});var pSr=s(vB);bOe=r(pSr,"RetriBertConfig"),pSr.forEach(t),vOe=r(QTe," (RetriBERT model)"),QTe.forEach(t),TOe=i(T),lg=n(T,"LI",{});var HTe=s(lg);ZH=n(HTe,"STRONG",{});var _Sr=s(ZH);FOe=r(_Sr,"roberta"),_Sr.forEach(t),COe=r(HTe," \u2014 "),TB=n(HTe,"A",{href:!0});var uSr=s(TB);MOe=r(uSr,"RobertaConfig"),uSr.forEach(t),EOe=r(HTe," (RoBERTa model)"),HTe.forEach(t),yOe=i(T),ig=n(T,"LI",{});var UTe=s(ig);eU=n(UTe,"STRONG",{});var bSr=s(eU);wOe=r(bSr,"roformer"),bSr.forEach(t),AOe=r(UTe," \u2014 "),FB=n(UTe,"A",{href:!0});var vSr=s(FB);LOe=r(vSr,"RoFormerConfig"),vSr.forEach(t),BOe=r(UTe," (RoFormer model)"),UTe.forEach(t),xOe=i(T),dg=n(T,"LI",{});var JTe=s(dg);oU=n(JTe,"STRONG",{});var TSr=s(oU);kOe=r(TSr,"segformer"),TSr.forEach(t),ROe=r(JTe," \u2014 "),CB=n(JTe,"A",{href:!0});var FSr=s(CB);SOe=r(FSr,"SegformerConfig"),FSr.forEach(t),POe=r(JTe," (SegFormer model)"),JTe.forEach(t),$Oe=i(T),cg=n(T,"LI",{});var YTe=s(cg);rU=n(YTe,"STRONG",{});var CSr=s(rU);IOe=r(CSr,"sew"),CSr.forEach(t),jOe=r(YTe," \u2014 "),MB=n(YTe,"A",{href:!0});var MSr=s(MB);DOe=r(MSr,"SEWConfig"),MSr.forEach(t),NOe=r(YTe," (SEW model)"),YTe.forEach(t),qOe=i(T),fg=n(T,"LI",{});var KTe=s(fg);tU=n(KTe,"STRONG",{});var ESr=s(tU);OOe=r(ESr,"sew-d"),ESr.forEach(t),GOe=r(KTe," \u2014 "),EB=n(KTe,"A",{href:!0});var ySr=s(EB);XOe=r(ySr,"SEWDConfig"),ySr.forEach(t),VOe=r(KTe," (SEW-D model)"),KTe.forEach(t),zOe=i(T),mg=n(T,"LI",{});var ZTe=s(mg);aU=n(ZTe,"STRONG",{});var wSr=s(aU);WOe=r(wSr,"speech-encoder-decoder"),wSr.forEach(t),QOe=r(ZTe," \u2014 "),yB=n(ZTe,"A",{href:!0});var ASr=s(yB);HOe=r(ASr,"SpeechEncoderDecoderConfig"),ASr.forEach(t),UOe=r(ZTe," (Speech Encoder decoder model)"),ZTe.forEach(t),JOe=i(T),gg=n(T,"LI",{});var e8e=s(gg);nU=n(e8e,"STRONG",{});var LSr=s(nU);YOe=r(LSr,"speech_to_text"),LSr.forEach(t),KOe=r(e8e," \u2014 "),wB=n(e8e,"A",{href:!0});var BSr=s(wB);ZOe=r(BSr,"Speech2TextConfig"),BSr.forEach(t),eGe=r(e8e," (Speech2Text model)"),e8e.forEach(t),oGe=i(T),hg=n(T,"LI",{});var o8e=s(hg);sU=n(o8e,"STRONG",{});var xSr=s(sU);rGe=r(xSr,"speech_to_text_2"),xSr.forEach(t),tGe=r(o8e," \u2014 "),AB=n(o8e,"A",{href:!0});var kSr=s(AB);aGe=r(kSr,"Speech2Text2Config"),kSr.forEach(t),nGe=r(o8e," (Speech2Text2 model)"),o8e.forEach(t),sGe=i(T),pg=n(T,"LI",{});var r8e=s(pg);lU=n(r8e,"STRONG",{});var RSr=s(lU);lGe=r(RSr,"splinter"),RSr.forEach(t),iGe=r(r8e," \u2014 "),LB=n(r8e,"A",{href:!0});var SSr=s(LB);dGe=r(SSr,"SplinterConfig"),SSr.forEach(t),cGe=r(r8e," (Splinter model)"),r8e.forEach(t),fGe=i(T),_g=n(T,"LI",{});var t8e=s(_g);iU=n(t8e,"STRONG",{});var PSr=s(iU);mGe=r(PSr,"squeezebert"),PSr.forEach(t),gGe=r(t8e," \u2014 "),BB=n(t8e,"A",{href:!0});var $Sr=s(BB);hGe=r($Sr,"SqueezeBertConfig"),$Sr.forEach(t),pGe=r(t8e," (SqueezeBERT model)"),t8e.forEach(t),_Ge=i(T),ug=n(T,"LI",{});var a8e=s(ug);dU=n(a8e,"STRONG",{});var ISr=s(dU);uGe=r(ISr,"swin"),ISr.forEach(t),bGe=r(a8e," \u2014 "),xB=n(a8e,"A",{href:!0});var jSr=s(xB);vGe=r(jSr,"SwinConfig"),jSr.forEach(t),TGe=r(a8e," (Swin model)"),a8e.forEach(t),FGe=i(T),bg=n(T,"LI",{});var n8e=s(bg);cU=n(n8e,"STRONG",{});var DSr=s(cU);CGe=r(DSr,"t5"),DSr.forEach(t),MGe=r(n8e," \u2014 "),kB=n(n8e,"A",{href:!0});var NSr=s(kB);EGe=r(NSr,"T5Config"),NSr.forEach(t),yGe=r(n8e," (T5 model)"),n8e.forEach(t),wGe=i(T),vg=n(T,"LI",{});var s8e=s(vg);fU=n(s8e,"STRONG",{});var qSr=s(fU);AGe=r(qSr,"tapas"),qSr.forEach(t),LGe=r(s8e," \u2014 "),RB=n(s8e,"A",{href:!0});var OSr=s(RB);BGe=r(OSr,"TapasConfig"),OSr.forEach(t),xGe=r(s8e," (TAPAS model)"),s8e.forEach(t),kGe=i(T),Tg=n(T,"LI",{});var l8e=s(Tg);mU=n(l8e,"STRONG",{});var GSr=s(mU);RGe=r(GSr,"transfo-xl"),GSr.forEach(t),SGe=r(l8e," \u2014 "),SB=n(l8e,"A",{href:!0});var XSr=s(SB);PGe=r(XSr,"TransfoXLConfig"),XSr.forEach(t),$Ge=r(l8e," (Transformer-XL model)"),l8e.forEach(t),IGe=i(T),Fg=n(T,"LI",{});var i8e=s(Fg);gU=n(i8e,"STRONG",{});var VSr=s(gU);jGe=r(VSr,"trocr"),VSr.forEach(t),DGe=r(i8e," \u2014 "),PB=n(i8e,"A",{href:!0});var zSr=s(PB);NGe=r(zSr,"TrOCRConfig"),zSr.forEach(t),qGe=r(i8e," (TrOCR model)"),i8e.forEach(t),OGe=i(T),Cg=n(T,"LI",{});var d8e=s(Cg);hU=n(d8e,"STRONG",{});var WSr=s(hU);GGe=r(WSr,"unispeech"),WSr.forEach(t),XGe=r(d8e," \u2014 "),$B=n(d8e,"A",{href:!0});var QSr=s($B);VGe=r(QSr,"UniSpeechConfig"),QSr.forEach(t),zGe=r(d8e," (UniSpeech model)"),d8e.forEach(t),WGe=i(T),Mg=n(T,"LI",{});var c8e=s(Mg);pU=n(c8e,"STRONG",{});var HSr=s(pU);QGe=r(HSr,"unispeech-sat"),HSr.forEach(t),HGe=r(c8e," \u2014 "),IB=n(c8e,"A",{href:!0});var USr=s(IB);UGe=r(USr,"UniSpeechSatConfig"),USr.forEach(t),JGe=r(c8e," (UniSpeechSat model)"),c8e.forEach(t),YGe=i(T),Eg=n(T,"LI",{});var f8e=s(Eg);_U=n(f8e,"STRONG",{});var JSr=s(_U);KGe=r(JSr,"vilt"),JSr.forEach(t),ZGe=r(f8e," \u2014 "),jB=n(f8e,"A",{href:!0});var YSr=s(jB);eXe=r(YSr,"ViltConfig"),YSr.forEach(t),oXe=r(f8e," (ViLT model)"),f8e.forEach(t),rXe=i(T),yg=n(T,"LI",{});var m8e=s(yg);uU=n(m8e,"STRONG",{});var KSr=s(uU);tXe=r(KSr,"vision-encoder-decoder"),KSr.forEach(t),aXe=r(m8e," \u2014 "),DB=n(m8e,"A",{href:!0});var ZSr=s(DB);nXe=r(ZSr,"VisionEncoderDecoderConfig"),ZSr.forEach(t),sXe=r(m8e," (Vision Encoder decoder model)"),m8e.forEach(t),lXe=i(T),wg=n(T,"LI",{});var g8e=s(wg);bU=n(g8e,"STRONG",{});var ePr=s(bU);iXe=r(ePr,"vision-text-dual-encoder"),ePr.forEach(t),dXe=r(g8e," \u2014 "),NB=n(g8e,"A",{href:!0});var oPr=s(NB);cXe=r(oPr,"VisionTextDualEncoderConfig"),oPr.forEach(t),fXe=r(g8e," (VisionTextDualEncoder model)"),g8e.forEach(t),mXe=i(T),Ag=n(T,"LI",{});var h8e=s(Ag);vU=n(h8e,"STRONG",{});var rPr=s(vU);gXe=r(rPr,"visual_bert"),rPr.forEach(t),hXe=r(h8e," \u2014 "),qB=n(h8e,"A",{href:!0});var tPr=s(qB);pXe=r(tPr,"VisualBertConfig"),tPr.forEach(t),_Xe=r(h8e," (VisualBert model)"),h8e.forEach(t),uXe=i(T),Lg=n(T,"LI",{});var p8e=s(Lg);TU=n(p8e,"STRONG",{});var aPr=s(TU);bXe=r(aPr,"vit"),aPr.forEach(t),vXe=r(p8e," \u2014 "),OB=n(p8e,"A",{href:!0});var nPr=s(OB);TXe=r(nPr,"ViTConfig"),nPr.forEach(t),FXe=r(p8e," (ViT model)"),p8e.forEach(t),CXe=i(T),Bg=n(T,"LI",{});var _8e=s(Bg);FU=n(_8e,"STRONG",{});var sPr=s(FU);MXe=r(sPr,"vit_mae"),sPr.forEach(t),EXe=r(_8e," \u2014 "),GB=n(_8e,"A",{href:!0});var lPr=s(GB);yXe=r(lPr,"ViTMAEConfig"),lPr.forEach(t),wXe=r(_8e," (ViTMAE model)"),_8e.forEach(t),AXe=i(T),xg=n(T,"LI",{});var u8e=s(xg);CU=n(u8e,"STRONG",{});var iPr=s(CU);LXe=r(iPr,"wav2vec2"),iPr.forEach(t),BXe=r(u8e," \u2014 "),XB=n(u8e,"A",{href:!0});var dPr=s(XB);xXe=r(dPr,"Wav2Vec2Config"),dPr.forEach(t),kXe=r(u8e," (Wav2Vec2 model)"),u8e.forEach(t),RXe=i(T),kg=n(T,"LI",{});var b8e=s(kg);MU=n(b8e,"STRONG",{});var cPr=s(MU);SXe=r(cPr,"wavlm"),cPr.forEach(t),PXe=r(b8e," \u2014 "),VB=n(b8e,"A",{href:!0});var fPr=s(VB);$Xe=r(fPr,"WavLMConfig"),fPr.forEach(t),IXe=r(b8e," (WavLM model)"),b8e.forEach(t),jXe=i(T),Rg=n(T,"LI",{});var v8e=s(Rg);EU=n(v8e,"STRONG",{});var mPr=s(EU);DXe=r(mPr,"xglm"),mPr.forEach(t),NXe=r(v8e," \u2014 "),zB=n(v8e,"A",{href:!0});var gPr=s(zB);qXe=r(gPr,"XGLMConfig"),gPr.forEach(t),OXe=r(v8e," (XGLM model)"),v8e.forEach(t),GXe=i(T),Sg=n(T,"LI",{});var T8e=s(Sg);yU=n(T8e,"STRONG",{});var hPr=s(yU);XXe=r(hPr,"xlm"),hPr.forEach(t),VXe=r(T8e," \u2014 "),WB=n(T8e,"A",{href:!0});var pPr=s(WB);zXe=r(pPr,"XLMConfig"),pPr.forEach(t),WXe=r(T8e," (XLM model)"),T8e.forEach(t),QXe=i(T),Pg=n(T,"LI",{});var F8e=s(Pg);wU=n(F8e,"STRONG",{});var _Pr=s(wU);HXe=r(_Pr,"xlm-prophetnet"),_Pr.forEach(t),UXe=r(F8e," \u2014 "),QB=n(F8e,"A",{href:!0});var uPr=s(QB);JXe=r(uPr,"XLMProphetNetConfig"),uPr.forEach(t),YXe=r(F8e," (XLMProphetNet model)"),F8e.forEach(t),KXe=i(T),$g=n(T,"LI",{});var C8e=s($g);AU=n(C8e,"STRONG",{});var bPr=s(AU);ZXe=r(bPr,"xlm-roberta"),bPr.forEach(t),eVe=r(C8e," \u2014 "),HB=n(C8e,"A",{href:!0});var vPr=s(HB);oVe=r(vPr,"XLMRobertaConfig"),vPr.forEach(t),rVe=r(C8e," (XLM-RoBERTa model)"),C8e.forEach(t),tVe=i(T),Ig=n(T,"LI",{});var M8e=s(Ig);LU=n(M8e,"STRONG",{});var TPr=s(LU);aVe=r(TPr,"xlm-roberta-xl"),TPr.forEach(t),nVe=r(M8e," \u2014 "),UB=n(M8e,"A",{href:!0});var FPr=s(UB);sVe=r(FPr,"XLMRobertaXLConfig"),FPr.forEach(t),lVe=r(M8e," (XLM-RoBERTa-XL model)"),M8e.forEach(t),iVe=i(T),jg=n(T,"LI",{});var E8e=s(jg);BU=n(E8e,"STRONG",{});var CPr=s(BU);dVe=r(CPr,"xlnet"),CPr.forEach(t),cVe=r(E8e," \u2014 "),JB=n(E8e,"A",{href:!0});var MPr=s(JB);fVe=r(MPr,"XLNetConfig"),MPr.forEach(t),mVe=r(E8e," (XLNet model)"),E8e.forEach(t),gVe=i(T),Dg=n(T,"LI",{});var y8e=s(Dg);xU=n(y8e,"STRONG",{});var EPr=s(xU);hVe=r(EPr,"yoso"),EPr.forEach(t),pVe=r(y8e," \u2014 "),YB=n(y8e,"A",{href:!0});var yPr=s(YB);_Ve=r(yPr,"YosoConfig"),yPr.forEach(t),uVe=r(y8e," (YOSO model)"),y8e.forEach(t),T.forEach(t),bVe=i(_a),kU=n(_a,"P",{});var wPr=s(kU);vVe=r(wPr,"Examples:"),wPr.forEach(t),TVe=i(_a),m(_4.$$.fragment,_a),_a.forEach(t),FVe=i(Qs),Ng=n(Qs,"DIV",{class:!0});var ZRe=s(Ng);m(u4.$$.fragment,ZRe),CVe=i(ZRe),RU=n(ZRe,"P",{});var APr=s(RU);MVe=r(APr,"Register a new configuration for this class."),APr.forEach(t),ZRe.forEach(t),Qs.forEach(t),Uxe=i(d),ed=n(d,"H2",{class:!0});var eSe=s(ed);qg=n(eSe,"A",{id:!0,class:!0,href:!0});var LPr=s(qg);SU=n(LPr,"SPAN",{});var BPr=s(SU);m(b4.$$.fragment,BPr),BPr.forEach(t),LPr.forEach(t),EVe=i(eSe),PU=n(eSe,"SPAN",{});var xPr=s(PU);yVe=r(xPr,"AutoTokenizer"),xPr.forEach(t),eSe.forEach(t),Jxe=i(d),Ho=n(d,"DIV",{class:!0});var Hs=s(Ho);m(v4.$$.fragment,Hs),wVe=i(Hs),T4=n(Hs,"P",{});var oSe=s(T4);AVe=r(oSe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),KB=n(oSe,"A",{href:!0});var kPr=s(KB);LVe=r(kPr,"AutoTokenizer.from_pretrained()"),kPr.forEach(t),BVe=r(oSe," class method."),oSe.forEach(t),xVe=i(Hs),F4=n(Hs,"P",{});var rSe=s(F4);kVe=r(rSe,"This class cannot be instantiated directly using "),$U=n(rSe,"CODE",{});var RPr=s($U);RVe=r(RPr,"__init__()"),RPr.forEach(t),SVe=r(rSe," (throws an error)."),rSe.forEach(t),PVe=i(Hs),go=n(Hs,"DIV",{class:!0});var ua=s(go);m(C4.$$.fragment,ua),$Ve=i(ua),IU=n(ua,"P",{});var SPr=s(IU);IVe=r(SPr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),SPr.forEach(t),jVe=i(ua),Wa=n(ua,"P",{});var sM=s(Wa);DVe=r(sM,"The tokenizer class to instantiate is selected based on the "),jU=n(sM,"CODE",{});var PPr=s(jU);NVe=r(PPr,"model_type"),PPr.forEach(t),qVe=r(sM,` property of the config object (either
passed as an argument or loaded from `),DU=n(sM,"CODE",{});var $Pr=s(DU);OVe=r($Pr,"pretrained_model_name_or_path"),$Pr.forEach(t),GVe=r(sM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NU=n(sM,"CODE",{});var IPr=s(NU);XVe=r(IPr,"pretrained_model_name_or_path"),IPr.forEach(t),VVe=r(sM,":"),sM.forEach(t),zVe=i(ua),E=n(ua,"UL",{});var y=s(E);Yn=n(y,"LI",{});var d7=s(Yn);qU=n(d7,"STRONG",{});var jPr=s(qU);WVe=r(jPr,"albert"),jPr.forEach(t),QVe=r(d7," \u2014 "),ZB=n(d7,"A",{href:!0});var DPr=s(ZB);HVe=r(DPr,"AlbertTokenizer"),DPr.forEach(t),UVe=r(d7," or "),ex=n(d7,"A",{href:!0});var NPr=s(ex);JVe=r(NPr,"AlbertTokenizerFast"),NPr.forEach(t),YVe=r(d7," (ALBERT model)"),d7.forEach(t),KVe=i(y),Kn=n(y,"LI",{});var c7=s(Kn);OU=n(c7,"STRONG",{});var qPr=s(OU);ZVe=r(qPr,"bart"),qPr.forEach(t),eze=r(c7," \u2014 "),ox=n(c7,"A",{href:!0});var OPr=s(ox);oze=r(OPr,"BartTokenizer"),OPr.forEach(t),rze=r(c7," or "),rx=n(c7,"A",{href:!0});var GPr=s(rx);tze=r(GPr,"BartTokenizerFast"),GPr.forEach(t),aze=r(c7," (BART model)"),c7.forEach(t),nze=i(y),Zn=n(y,"LI",{});var f7=s(Zn);GU=n(f7,"STRONG",{});var XPr=s(GU);sze=r(XPr,"barthez"),XPr.forEach(t),lze=r(f7," \u2014 "),tx=n(f7,"A",{href:!0});var VPr=s(tx);ize=r(VPr,"BarthezTokenizer"),VPr.forEach(t),dze=r(f7," or "),ax=n(f7,"A",{href:!0});var zPr=s(ax);cze=r(zPr,"BarthezTokenizerFast"),zPr.forEach(t),fze=r(f7," (BARThez model)"),f7.forEach(t),mze=i(y),Og=n(y,"LI",{});var w8e=s(Og);XU=n(w8e,"STRONG",{});var WPr=s(XU);gze=r(WPr,"bartpho"),WPr.forEach(t),hze=r(w8e," \u2014 "),nx=n(w8e,"A",{href:!0});var QPr=s(nx);pze=r(QPr,"BartphoTokenizer"),QPr.forEach(t),_ze=r(w8e," (BARTpho model)"),w8e.forEach(t),uze=i(y),es=n(y,"LI",{});var m7=s(es);VU=n(m7,"STRONG",{});var HPr=s(VU);bze=r(HPr,"bert"),HPr.forEach(t),vze=r(m7," \u2014 "),sx=n(m7,"A",{href:!0});var UPr=s(sx);Tze=r(UPr,"BertTokenizer"),UPr.forEach(t),Fze=r(m7," or "),lx=n(m7,"A",{href:!0});var JPr=s(lx);Cze=r(JPr,"BertTokenizerFast"),JPr.forEach(t),Mze=r(m7," (BERT model)"),m7.forEach(t),Eze=i(y),Gg=n(y,"LI",{});var A8e=s(Gg);zU=n(A8e,"STRONG",{});var YPr=s(zU);yze=r(YPr,"bert-generation"),YPr.forEach(t),wze=r(A8e," \u2014 "),ix=n(A8e,"A",{href:!0});var KPr=s(ix);Aze=r(KPr,"BertGenerationTokenizer"),KPr.forEach(t),Lze=r(A8e," (Bert Generation model)"),A8e.forEach(t),Bze=i(y),Xg=n(y,"LI",{});var L8e=s(Xg);WU=n(L8e,"STRONG",{});var ZPr=s(WU);xze=r(ZPr,"bert-japanese"),ZPr.forEach(t),kze=r(L8e," \u2014 "),dx=n(L8e,"A",{href:!0});var e$r=s(dx);Rze=r(e$r,"BertJapaneseTokenizer"),e$r.forEach(t),Sze=r(L8e," (BertJapanese model)"),L8e.forEach(t),Pze=i(y),Vg=n(y,"LI",{});var B8e=s(Vg);QU=n(B8e,"STRONG",{});var o$r=s(QU);$ze=r(o$r,"bertweet"),o$r.forEach(t),Ize=r(B8e," \u2014 "),cx=n(B8e,"A",{href:!0});var r$r=s(cx);jze=r(r$r,"BertweetTokenizer"),r$r.forEach(t),Dze=r(B8e," (Bertweet model)"),B8e.forEach(t),Nze=i(y),os=n(y,"LI",{});var g7=s(os);HU=n(g7,"STRONG",{});var t$r=s(HU);qze=r(t$r,"big_bird"),t$r.forEach(t),Oze=r(g7," \u2014 "),fx=n(g7,"A",{href:!0});var a$r=s(fx);Gze=r(a$r,"BigBirdTokenizer"),a$r.forEach(t),Xze=r(g7," or "),mx=n(g7,"A",{href:!0});var n$r=s(mx);Vze=r(n$r,"BigBirdTokenizerFast"),n$r.forEach(t),zze=r(g7," (BigBird model)"),g7.forEach(t),Wze=i(y),rs=n(y,"LI",{});var h7=s(rs);UU=n(h7,"STRONG",{});var s$r=s(UU);Qze=r(s$r,"bigbird_pegasus"),s$r.forEach(t),Hze=r(h7," \u2014 "),gx=n(h7,"A",{href:!0});var l$r=s(gx);Uze=r(l$r,"PegasusTokenizer"),l$r.forEach(t),Jze=r(h7," or "),hx=n(h7,"A",{href:!0});var i$r=s(hx);Yze=r(i$r,"PegasusTokenizerFast"),i$r.forEach(t),Kze=r(h7," (BigBirdPegasus model)"),h7.forEach(t),Zze=i(y),ts=n(y,"LI",{});var p7=s(ts);JU=n(p7,"STRONG",{});var d$r=s(JU);eWe=r(d$r,"blenderbot"),d$r.forEach(t),oWe=r(p7," \u2014 "),px=n(p7,"A",{href:!0});var c$r=s(px);rWe=r(c$r,"BlenderbotTokenizer"),c$r.forEach(t),tWe=r(p7," or "),_x=n(p7,"A",{href:!0});var f$r=s(_x);aWe=r(f$r,"BlenderbotTokenizerFast"),f$r.forEach(t),nWe=r(p7," (Blenderbot model)"),p7.forEach(t),sWe=i(y),zg=n(y,"LI",{});var x8e=s(zg);YU=n(x8e,"STRONG",{});var m$r=s(YU);lWe=r(m$r,"blenderbot-small"),m$r.forEach(t),iWe=r(x8e," \u2014 "),ux=n(x8e,"A",{href:!0});var g$r=s(ux);dWe=r(g$r,"BlenderbotSmallTokenizer"),g$r.forEach(t),cWe=r(x8e," (BlenderbotSmall model)"),x8e.forEach(t),fWe=i(y),Wg=n(y,"LI",{});var k8e=s(Wg);KU=n(k8e,"STRONG",{});var h$r=s(KU);mWe=r(h$r,"byt5"),h$r.forEach(t),gWe=r(k8e," \u2014 "),bx=n(k8e,"A",{href:!0});var p$r=s(bx);hWe=r(p$r,"ByT5Tokenizer"),p$r.forEach(t),pWe=r(k8e," (ByT5 model)"),k8e.forEach(t),_We=i(y),as=n(y,"LI",{});var _7=s(as);ZU=n(_7,"STRONG",{});var _$r=s(ZU);uWe=r(_$r,"camembert"),_$r.forEach(t),bWe=r(_7," \u2014 "),vx=n(_7,"A",{href:!0});var u$r=s(vx);vWe=r(u$r,"CamembertTokenizer"),u$r.forEach(t),TWe=r(_7," or "),Tx=n(_7,"A",{href:!0});var b$r=s(Tx);FWe=r(b$r,"CamembertTokenizerFast"),b$r.forEach(t),CWe=r(_7," (CamemBERT model)"),_7.forEach(t),MWe=i(y),Qg=n(y,"LI",{});var R8e=s(Qg);eJ=n(R8e,"STRONG",{});var v$r=s(eJ);EWe=r(v$r,"canine"),v$r.forEach(t),yWe=r(R8e," \u2014 "),Fx=n(R8e,"A",{href:!0});var T$r=s(Fx);wWe=r(T$r,"CanineTokenizer"),T$r.forEach(t),AWe=r(R8e," (Canine model)"),R8e.forEach(t),LWe=i(y),ns=n(y,"LI",{});var u7=s(ns);oJ=n(u7,"STRONG",{});var F$r=s(oJ);BWe=r(F$r,"clip"),F$r.forEach(t),xWe=r(u7," \u2014 "),Cx=n(u7,"A",{href:!0});var C$r=s(Cx);kWe=r(C$r,"CLIPTokenizer"),C$r.forEach(t),RWe=r(u7," or "),Mx=n(u7,"A",{href:!0});var M$r=s(Mx);SWe=r(M$r,"CLIPTokenizerFast"),M$r.forEach(t),PWe=r(u7," (CLIP model)"),u7.forEach(t),$We=i(y),ss=n(y,"LI",{});var b7=s(ss);rJ=n(b7,"STRONG",{});var E$r=s(rJ);IWe=r(E$r,"convbert"),E$r.forEach(t),jWe=r(b7," \u2014 "),Ex=n(b7,"A",{href:!0});var y$r=s(Ex);DWe=r(y$r,"ConvBertTokenizer"),y$r.forEach(t),NWe=r(b7," or "),yx=n(b7,"A",{href:!0});var w$r=s(yx);qWe=r(w$r,"ConvBertTokenizerFast"),w$r.forEach(t),OWe=r(b7," (ConvBERT model)"),b7.forEach(t),GWe=i(y),ls=n(y,"LI",{});var v7=s(ls);tJ=n(v7,"STRONG",{});var A$r=s(tJ);XWe=r(A$r,"cpm"),A$r.forEach(t),VWe=r(v7," \u2014 "),wx=n(v7,"A",{href:!0});var L$r=s(wx);zWe=r(L$r,"CpmTokenizer"),L$r.forEach(t),WWe=r(v7," or "),aJ=n(v7,"CODE",{});var B$r=s(aJ);QWe=r(B$r,"CpmTokenizerFast"),B$r.forEach(t),HWe=r(v7," (CPM model)"),v7.forEach(t),UWe=i(y),Hg=n(y,"LI",{});var S8e=s(Hg);nJ=n(S8e,"STRONG",{});var x$r=s(nJ);JWe=r(x$r,"ctrl"),x$r.forEach(t),YWe=r(S8e," \u2014 "),Ax=n(S8e,"A",{href:!0});var k$r=s(Ax);KWe=r(k$r,"CTRLTokenizer"),k$r.forEach(t),ZWe=r(S8e," (CTRL model)"),S8e.forEach(t),eQe=i(y),is=n(y,"LI",{});var T7=s(is);sJ=n(T7,"STRONG",{});var R$r=s(sJ);oQe=r(R$r,"deberta"),R$r.forEach(t),rQe=r(T7," \u2014 "),Lx=n(T7,"A",{href:!0});var S$r=s(Lx);tQe=r(S$r,"DebertaTokenizer"),S$r.forEach(t),aQe=r(T7," or "),Bx=n(T7,"A",{href:!0});var P$r=s(Bx);nQe=r(P$r,"DebertaTokenizerFast"),P$r.forEach(t),sQe=r(T7," (DeBERTa model)"),T7.forEach(t),lQe=i(y),Ug=n(y,"LI",{});var P8e=s(Ug);lJ=n(P8e,"STRONG",{});var $$r=s(lJ);iQe=r($$r,"deberta-v2"),$$r.forEach(t),dQe=r(P8e," \u2014 "),xx=n(P8e,"A",{href:!0});var I$r=s(xx);cQe=r(I$r,"DebertaV2Tokenizer"),I$r.forEach(t),fQe=r(P8e," (DeBERTa-v2 model)"),P8e.forEach(t),mQe=i(y),ds=n(y,"LI",{});var F7=s(ds);iJ=n(F7,"STRONG",{});var j$r=s(iJ);gQe=r(j$r,"distilbert"),j$r.forEach(t),hQe=r(F7," \u2014 "),kx=n(F7,"A",{href:!0});var D$r=s(kx);pQe=r(D$r,"DistilBertTokenizer"),D$r.forEach(t),_Qe=r(F7," or "),Rx=n(F7,"A",{href:!0});var N$r=s(Rx);uQe=r(N$r,"DistilBertTokenizerFast"),N$r.forEach(t),bQe=r(F7," (DistilBERT model)"),F7.forEach(t),vQe=i(y),cs=n(y,"LI",{});var C7=s(cs);dJ=n(C7,"STRONG",{});var q$r=s(dJ);TQe=r(q$r,"dpr"),q$r.forEach(t),FQe=r(C7," \u2014 "),Sx=n(C7,"A",{href:!0});var O$r=s(Sx);CQe=r(O$r,"DPRQuestionEncoderTokenizer"),O$r.forEach(t),MQe=r(C7," or "),Px=n(C7,"A",{href:!0});var G$r=s(Px);EQe=r(G$r,"DPRQuestionEncoderTokenizerFast"),G$r.forEach(t),yQe=r(C7," (DPR model)"),C7.forEach(t),wQe=i(y),fs=n(y,"LI",{});var M7=s(fs);cJ=n(M7,"STRONG",{});var X$r=s(cJ);AQe=r(X$r,"electra"),X$r.forEach(t),LQe=r(M7," \u2014 "),$x=n(M7,"A",{href:!0});var V$r=s($x);BQe=r(V$r,"ElectraTokenizer"),V$r.forEach(t),xQe=r(M7," or "),Ix=n(M7,"A",{href:!0});var z$r=s(Ix);kQe=r(z$r,"ElectraTokenizerFast"),z$r.forEach(t),RQe=r(M7," (ELECTRA model)"),M7.forEach(t),SQe=i(y),Jg=n(y,"LI",{});var $8e=s(Jg);fJ=n($8e,"STRONG",{});var W$r=s(fJ);PQe=r(W$r,"flaubert"),W$r.forEach(t),$Qe=r($8e," \u2014 "),jx=n($8e,"A",{href:!0});var Q$r=s(jx);IQe=r(Q$r,"FlaubertTokenizer"),Q$r.forEach(t),jQe=r($8e," (FlauBERT model)"),$8e.forEach(t),DQe=i(y),ms=n(y,"LI",{});var E7=s(ms);mJ=n(E7,"STRONG",{});var H$r=s(mJ);NQe=r(H$r,"fnet"),H$r.forEach(t),qQe=r(E7," \u2014 "),Dx=n(E7,"A",{href:!0});var U$r=s(Dx);OQe=r(U$r,"FNetTokenizer"),U$r.forEach(t),GQe=r(E7," or "),Nx=n(E7,"A",{href:!0});var J$r=s(Nx);XQe=r(J$r,"FNetTokenizerFast"),J$r.forEach(t),VQe=r(E7," (FNet model)"),E7.forEach(t),zQe=i(y),Yg=n(y,"LI",{});var I8e=s(Yg);gJ=n(I8e,"STRONG",{});var Y$r=s(gJ);WQe=r(Y$r,"fsmt"),Y$r.forEach(t),QQe=r(I8e," \u2014 "),qx=n(I8e,"A",{href:!0});var K$r=s(qx);HQe=r(K$r,"FSMTTokenizer"),K$r.forEach(t),UQe=r(I8e," (FairSeq Machine-Translation model)"),I8e.forEach(t),JQe=i(y),gs=n(y,"LI",{});var y7=s(gs);hJ=n(y7,"STRONG",{});var Z$r=s(hJ);YQe=r(Z$r,"funnel"),Z$r.forEach(t),KQe=r(y7," \u2014 "),Ox=n(y7,"A",{href:!0});var eIr=s(Ox);ZQe=r(eIr,"FunnelTokenizer"),eIr.forEach(t),eHe=r(y7," or "),Gx=n(y7,"A",{href:!0});var oIr=s(Gx);oHe=r(oIr,"FunnelTokenizerFast"),oIr.forEach(t),rHe=r(y7," (Funnel Transformer model)"),y7.forEach(t),tHe=i(y),hs=n(y,"LI",{});var w7=s(hs);pJ=n(w7,"STRONG",{});var rIr=s(pJ);aHe=r(rIr,"gpt2"),rIr.forEach(t),nHe=r(w7," \u2014 "),Xx=n(w7,"A",{href:!0});var tIr=s(Xx);sHe=r(tIr,"GPT2Tokenizer"),tIr.forEach(t),lHe=r(w7," or "),Vx=n(w7,"A",{href:!0});var aIr=s(Vx);iHe=r(aIr,"GPT2TokenizerFast"),aIr.forEach(t),dHe=r(w7," (OpenAI GPT-2 model)"),w7.forEach(t),cHe=i(y),ps=n(y,"LI",{});var A7=s(ps);_J=n(A7,"STRONG",{});var nIr=s(_J);fHe=r(nIr,"gpt_neo"),nIr.forEach(t),mHe=r(A7," \u2014 "),zx=n(A7,"A",{href:!0});var sIr=s(zx);gHe=r(sIr,"GPT2Tokenizer"),sIr.forEach(t),hHe=r(A7," or "),Wx=n(A7,"A",{href:!0});var lIr=s(Wx);pHe=r(lIr,"GPT2TokenizerFast"),lIr.forEach(t),_He=r(A7," (GPT Neo model)"),A7.forEach(t),uHe=i(y),_s=n(y,"LI",{});var L7=s(_s);uJ=n(L7,"STRONG",{});var iIr=s(uJ);bHe=r(iIr,"herbert"),iIr.forEach(t),vHe=r(L7," \u2014 "),Qx=n(L7,"A",{href:!0});var dIr=s(Qx);THe=r(dIr,"HerbertTokenizer"),dIr.forEach(t),FHe=r(L7," or "),Hx=n(L7,"A",{href:!0});var cIr=s(Hx);CHe=r(cIr,"HerbertTokenizerFast"),cIr.forEach(t),MHe=r(L7," (HerBERT model)"),L7.forEach(t),EHe=i(y),Kg=n(y,"LI",{});var j8e=s(Kg);bJ=n(j8e,"STRONG",{});var fIr=s(bJ);yHe=r(fIr,"hubert"),fIr.forEach(t),wHe=r(j8e," \u2014 "),Ux=n(j8e,"A",{href:!0});var mIr=s(Ux);AHe=r(mIr,"Wav2Vec2CTCTokenizer"),mIr.forEach(t),LHe=r(j8e," (Hubert model)"),j8e.forEach(t),BHe=i(y),us=n(y,"LI",{});var B7=s(us);vJ=n(B7,"STRONG",{});var gIr=s(vJ);xHe=r(gIr,"ibert"),gIr.forEach(t),kHe=r(B7," \u2014 "),Jx=n(B7,"A",{href:!0});var hIr=s(Jx);RHe=r(hIr,"RobertaTokenizer"),hIr.forEach(t),SHe=r(B7," or "),Yx=n(B7,"A",{href:!0});var pIr=s(Yx);PHe=r(pIr,"RobertaTokenizerFast"),pIr.forEach(t),$He=r(B7," (I-BERT model)"),B7.forEach(t),IHe=i(y),bs=n(y,"LI",{});var x7=s(bs);TJ=n(x7,"STRONG",{});var _Ir=s(TJ);jHe=r(_Ir,"layoutlm"),_Ir.forEach(t),DHe=r(x7," \u2014 "),Kx=n(x7,"A",{href:!0});var uIr=s(Kx);NHe=r(uIr,"LayoutLMTokenizer"),uIr.forEach(t),qHe=r(x7," or "),Zx=n(x7,"A",{href:!0});var bIr=s(Zx);OHe=r(bIr,"LayoutLMTokenizerFast"),bIr.forEach(t),GHe=r(x7," (LayoutLM model)"),x7.forEach(t),XHe=i(y),vs=n(y,"LI",{});var k7=s(vs);FJ=n(k7,"STRONG",{});var vIr=s(FJ);VHe=r(vIr,"layoutlmv2"),vIr.forEach(t),zHe=r(k7," \u2014 "),ek=n(k7,"A",{href:!0});var TIr=s(ek);WHe=r(TIr,"LayoutLMv2Tokenizer"),TIr.forEach(t),QHe=r(k7," or "),ok=n(k7,"A",{href:!0});var FIr=s(ok);HHe=r(FIr,"LayoutLMv2TokenizerFast"),FIr.forEach(t),UHe=r(k7," (LayoutLMv2 model)"),k7.forEach(t),JHe=i(y),Ts=n(y,"LI",{});var R7=s(Ts);CJ=n(R7,"STRONG",{});var CIr=s(CJ);YHe=r(CIr,"layoutxlm"),CIr.forEach(t),KHe=r(R7," \u2014 "),rk=n(R7,"A",{href:!0});var MIr=s(rk);ZHe=r(MIr,"LayoutXLMTokenizer"),MIr.forEach(t),eUe=r(R7," or "),tk=n(R7,"A",{href:!0});var EIr=s(tk);oUe=r(EIr,"LayoutXLMTokenizerFast"),EIr.forEach(t),rUe=r(R7," (LayoutXLM model)"),R7.forEach(t),tUe=i(y),Fs=n(y,"LI",{});var S7=s(Fs);MJ=n(S7,"STRONG",{});var yIr=s(MJ);aUe=r(yIr,"led"),yIr.forEach(t),nUe=r(S7," \u2014 "),ak=n(S7,"A",{href:!0});var wIr=s(ak);sUe=r(wIr,"LEDTokenizer"),wIr.forEach(t),lUe=r(S7," or "),nk=n(S7,"A",{href:!0});var AIr=s(nk);iUe=r(AIr,"LEDTokenizerFast"),AIr.forEach(t),dUe=r(S7," (LED model)"),S7.forEach(t),cUe=i(y),Cs=n(y,"LI",{});var P7=s(Cs);EJ=n(P7,"STRONG",{});var LIr=s(EJ);fUe=r(LIr,"longformer"),LIr.forEach(t),mUe=r(P7," \u2014 "),sk=n(P7,"A",{href:!0});var BIr=s(sk);gUe=r(BIr,"LongformerTokenizer"),BIr.forEach(t),hUe=r(P7," or "),lk=n(P7,"A",{href:!0});var xIr=s(lk);pUe=r(xIr,"LongformerTokenizerFast"),xIr.forEach(t),_Ue=r(P7," (Longformer model)"),P7.forEach(t),uUe=i(y),Zg=n(y,"LI",{});var D8e=s(Zg);yJ=n(D8e,"STRONG",{});var kIr=s(yJ);bUe=r(kIr,"luke"),kIr.forEach(t),vUe=r(D8e," \u2014 "),ik=n(D8e,"A",{href:!0});var RIr=s(ik);TUe=r(RIr,"LukeTokenizer"),RIr.forEach(t),FUe=r(D8e," (LUKE model)"),D8e.forEach(t),CUe=i(y),Ms=n(y,"LI",{});var $7=s(Ms);wJ=n($7,"STRONG",{});var SIr=s(wJ);MUe=r(SIr,"lxmert"),SIr.forEach(t),EUe=r($7," \u2014 "),dk=n($7,"A",{href:!0});var PIr=s(dk);yUe=r(PIr,"LxmertTokenizer"),PIr.forEach(t),wUe=r($7," or "),ck=n($7,"A",{href:!0});var $Ir=s(ck);AUe=r($Ir,"LxmertTokenizerFast"),$Ir.forEach(t),LUe=r($7," (LXMERT model)"),$7.forEach(t),BUe=i(y),eh=n(y,"LI",{});var N8e=s(eh);AJ=n(N8e,"STRONG",{});var IIr=s(AJ);xUe=r(IIr,"m2m_100"),IIr.forEach(t),kUe=r(N8e," \u2014 "),fk=n(N8e,"A",{href:!0});var jIr=s(fk);RUe=r(jIr,"M2M100Tokenizer"),jIr.forEach(t),SUe=r(N8e," (M2M100 model)"),N8e.forEach(t),PUe=i(y),oh=n(y,"LI",{});var q8e=s(oh);LJ=n(q8e,"STRONG",{});var DIr=s(LJ);$Ue=r(DIr,"marian"),DIr.forEach(t),IUe=r(q8e," \u2014 "),mk=n(q8e,"A",{href:!0});var NIr=s(mk);jUe=r(NIr,"MarianTokenizer"),NIr.forEach(t),DUe=r(q8e," (Marian model)"),q8e.forEach(t),NUe=i(y),Es=n(y,"LI",{});var I7=s(Es);BJ=n(I7,"STRONG",{});var qIr=s(BJ);qUe=r(qIr,"mbart"),qIr.forEach(t),OUe=r(I7," \u2014 "),gk=n(I7,"A",{href:!0});var OIr=s(gk);GUe=r(OIr,"MBartTokenizer"),OIr.forEach(t),XUe=r(I7," or "),hk=n(I7,"A",{href:!0});var GIr=s(hk);VUe=r(GIr,"MBartTokenizerFast"),GIr.forEach(t),zUe=r(I7," (mBART model)"),I7.forEach(t),WUe=i(y),ys=n(y,"LI",{});var j7=s(ys);xJ=n(j7,"STRONG",{});var XIr=s(xJ);QUe=r(XIr,"mbart50"),XIr.forEach(t),HUe=r(j7," \u2014 "),pk=n(j7,"A",{href:!0});var VIr=s(pk);UUe=r(VIr,"MBart50Tokenizer"),VIr.forEach(t),JUe=r(j7," or "),_k=n(j7,"A",{href:!0});var zIr=s(_k);YUe=r(zIr,"MBart50TokenizerFast"),zIr.forEach(t),KUe=r(j7," (mBART-50 model)"),j7.forEach(t),ZUe=i(y),rh=n(y,"LI",{});var O8e=s(rh);kJ=n(O8e,"STRONG",{});var WIr=s(kJ);eJe=r(WIr,"mluke"),WIr.forEach(t),oJe=r(O8e," \u2014 "),uk=n(O8e,"A",{href:!0});var QIr=s(uk);rJe=r(QIr,"MLukeTokenizer"),QIr.forEach(t),tJe=r(O8e," (mLUKE model)"),O8e.forEach(t),aJe=i(y),ws=n(y,"LI",{});var D7=s(ws);RJ=n(D7,"STRONG",{});var HIr=s(RJ);nJe=r(HIr,"mobilebert"),HIr.forEach(t),sJe=r(D7," \u2014 "),bk=n(D7,"A",{href:!0});var UIr=s(bk);lJe=r(UIr,"MobileBertTokenizer"),UIr.forEach(t),iJe=r(D7," or "),vk=n(D7,"A",{href:!0});var JIr=s(vk);dJe=r(JIr,"MobileBertTokenizerFast"),JIr.forEach(t),cJe=r(D7," (MobileBERT model)"),D7.forEach(t),fJe=i(y),As=n(y,"LI",{});var N7=s(As);SJ=n(N7,"STRONG",{});var YIr=s(SJ);mJe=r(YIr,"mpnet"),YIr.forEach(t),gJe=r(N7," \u2014 "),Tk=n(N7,"A",{href:!0});var KIr=s(Tk);hJe=r(KIr,"MPNetTokenizer"),KIr.forEach(t),pJe=r(N7," or "),Fk=n(N7,"A",{href:!0});var ZIr=s(Fk);_Je=r(ZIr,"MPNetTokenizerFast"),ZIr.forEach(t),uJe=r(N7," (MPNet model)"),N7.forEach(t),bJe=i(y),Ls=n(y,"LI",{});var q7=s(Ls);PJ=n(q7,"STRONG",{});var ejr=s(PJ);vJe=r(ejr,"mt5"),ejr.forEach(t),TJe=r(q7," \u2014 "),Ck=n(q7,"A",{href:!0});var ojr=s(Ck);FJe=r(ojr,"MT5Tokenizer"),ojr.forEach(t),CJe=r(q7," or "),Mk=n(q7,"A",{href:!0});var rjr=s(Mk);MJe=r(rjr,"MT5TokenizerFast"),rjr.forEach(t),EJe=r(q7," (mT5 model)"),q7.forEach(t),yJe=i(y),Bs=n(y,"LI",{});var O7=s(Bs);$J=n(O7,"STRONG",{});var tjr=s($J);wJe=r(tjr,"openai-gpt"),tjr.forEach(t),AJe=r(O7," \u2014 "),Ek=n(O7,"A",{href:!0});var ajr=s(Ek);LJe=r(ajr,"OpenAIGPTTokenizer"),ajr.forEach(t),BJe=r(O7," or "),yk=n(O7,"A",{href:!0});var njr=s(yk);xJe=r(njr,"OpenAIGPTTokenizerFast"),njr.forEach(t),kJe=r(O7," (OpenAI GPT model)"),O7.forEach(t),RJe=i(y),xs=n(y,"LI",{});var G7=s(xs);IJ=n(G7,"STRONG",{});var sjr=s(IJ);SJe=r(sjr,"pegasus"),sjr.forEach(t),PJe=r(G7," \u2014 "),wk=n(G7,"A",{href:!0});var ljr=s(wk);$Je=r(ljr,"PegasusTokenizer"),ljr.forEach(t),IJe=r(G7," or "),Ak=n(G7,"A",{href:!0});var ijr=s(Ak);jJe=r(ijr,"PegasusTokenizerFast"),ijr.forEach(t),DJe=r(G7," (Pegasus model)"),G7.forEach(t),NJe=i(y),th=n(y,"LI",{});var G8e=s(th);jJ=n(G8e,"STRONG",{});var djr=s(jJ);qJe=r(djr,"perceiver"),djr.forEach(t),OJe=r(G8e," \u2014 "),Lk=n(G8e,"A",{href:!0});var cjr=s(Lk);GJe=r(cjr,"PerceiverTokenizer"),cjr.forEach(t),XJe=r(G8e," (Perceiver model)"),G8e.forEach(t),VJe=i(y),ah=n(y,"LI",{});var X8e=s(ah);DJ=n(X8e,"STRONG",{});var fjr=s(DJ);zJe=r(fjr,"phobert"),fjr.forEach(t),WJe=r(X8e," \u2014 "),Bk=n(X8e,"A",{href:!0});var mjr=s(Bk);QJe=r(mjr,"PhobertTokenizer"),mjr.forEach(t),HJe=r(X8e," (PhoBERT model)"),X8e.forEach(t),UJe=i(y),nh=n(y,"LI",{});var V8e=s(nh);NJ=n(V8e,"STRONG",{});var gjr=s(NJ);JJe=r(gjr,"plbart"),gjr.forEach(t),YJe=r(V8e," \u2014 "),xk=n(V8e,"A",{href:!0});var hjr=s(xk);KJe=r(hjr,"PLBartTokenizer"),hjr.forEach(t),ZJe=r(V8e," (PLBart model)"),V8e.forEach(t),eYe=i(y),sh=n(y,"LI",{});var z8e=s(sh);qJ=n(z8e,"STRONG",{});var pjr=s(qJ);oYe=r(pjr,"prophetnet"),pjr.forEach(t),rYe=r(z8e," \u2014 "),kk=n(z8e,"A",{href:!0});var _jr=s(kk);tYe=r(_jr,"ProphetNetTokenizer"),_jr.forEach(t),aYe=r(z8e," (ProphetNet model)"),z8e.forEach(t),nYe=i(y),ks=n(y,"LI",{});var X7=s(ks);OJ=n(X7,"STRONG",{});var ujr=s(OJ);sYe=r(ujr,"qdqbert"),ujr.forEach(t),lYe=r(X7," \u2014 "),Rk=n(X7,"A",{href:!0});var bjr=s(Rk);iYe=r(bjr,"BertTokenizer"),bjr.forEach(t),dYe=r(X7," or "),Sk=n(X7,"A",{href:!0});var vjr=s(Sk);cYe=r(vjr,"BertTokenizerFast"),vjr.forEach(t),fYe=r(X7," (QDQBert model)"),X7.forEach(t),mYe=i(y),lh=n(y,"LI",{});var W8e=s(lh);GJ=n(W8e,"STRONG",{});var Tjr=s(GJ);gYe=r(Tjr,"rag"),Tjr.forEach(t),hYe=r(W8e," \u2014 "),Pk=n(W8e,"A",{href:!0});var Fjr=s(Pk);pYe=r(Fjr,"RagTokenizer"),Fjr.forEach(t),_Ye=r(W8e," (RAG model)"),W8e.forEach(t),uYe=i(y),Rs=n(y,"LI",{});var V7=s(Rs);XJ=n(V7,"STRONG",{});var Cjr=s(XJ);bYe=r(Cjr,"realm"),Cjr.forEach(t),vYe=r(V7," \u2014 "),$k=n(V7,"A",{href:!0});var Mjr=s($k);TYe=r(Mjr,"RealmTokenizer"),Mjr.forEach(t),FYe=r(V7," or "),Ik=n(V7,"A",{href:!0});var Ejr=s(Ik);CYe=r(Ejr,"RealmTokenizerFast"),Ejr.forEach(t),MYe=r(V7," (Realm model)"),V7.forEach(t),EYe=i(y),Ss=n(y,"LI",{});var z7=s(Ss);VJ=n(z7,"STRONG",{});var yjr=s(VJ);yYe=r(yjr,"reformer"),yjr.forEach(t),wYe=r(z7," \u2014 "),jk=n(z7,"A",{href:!0});var wjr=s(jk);AYe=r(wjr,"ReformerTokenizer"),wjr.forEach(t),LYe=r(z7," or "),Dk=n(z7,"A",{href:!0});var Ajr=s(Dk);BYe=r(Ajr,"ReformerTokenizerFast"),Ajr.forEach(t),xYe=r(z7," (Reformer model)"),z7.forEach(t),kYe=i(y),Ps=n(y,"LI",{});var W7=s(Ps);zJ=n(W7,"STRONG",{});var Ljr=s(zJ);RYe=r(Ljr,"rembert"),Ljr.forEach(t),SYe=r(W7," \u2014 "),Nk=n(W7,"A",{href:!0});var Bjr=s(Nk);PYe=r(Bjr,"RemBertTokenizer"),Bjr.forEach(t),$Ye=r(W7," or "),qk=n(W7,"A",{href:!0});var xjr=s(qk);IYe=r(xjr,"RemBertTokenizerFast"),xjr.forEach(t),jYe=r(W7," (RemBERT model)"),W7.forEach(t),DYe=i(y),$s=n(y,"LI",{});var Q7=s($s);WJ=n(Q7,"STRONG",{});var kjr=s(WJ);NYe=r(kjr,"retribert"),kjr.forEach(t),qYe=r(Q7," \u2014 "),Ok=n(Q7,"A",{href:!0});var Rjr=s(Ok);OYe=r(Rjr,"RetriBertTokenizer"),Rjr.forEach(t),GYe=r(Q7," or "),Gk=n(Q7,"A",{href:!0});var Sjr=s(Gk);XYe=r(Sjr,"RetriBertTokenizerFast"),Sjr.forEach(t),VYe=r(Q7," (RetriBERT model)"),Q7.forEach(t),zYe=i(y),Is=n(y,"LI",{});var H7=s(Is);QJ=n(H7,"STRONG",{});var Pjr=s(QJ);WYe=r(Pjr,"roberta"),Pjr.forEach(t),QYe=r(H7," \u2014 "),Xk=n(H7,"A",{href:!0});var $jr=s(Xk);HYe=r($jr,"RobertaTokenizer"),$jr.forEach(t),UYe=r(H7," or "),Vk=n(H7,"A",{href:!0});var Ijr=s(Vk);JYe=r(Ijr,"RobertaTokenizerFast"),Ijr.forEach(t),YYe=r(H7," (RoBERTa model)"),H7.forEach(t),KYe=i(y),js=n(y,"LI",{});var U7=s(js);HJ=n(U7,"STRONG",{});var jjr=s(HJ);ZYe=r(jjr,"roformer"),jjr.forEach(t),eKe=r(U7," \u2014 "),zk=n(U7,"A",{href:!0});var Djr=s(zk);oKe=r(Djr,"RoFormerTokenizer"),Djr.forEach(t),rKe=r(U7," or "),Wk=n(U7,"A",{href:!0});var Njr=s(Wk);tKe=r(Njr,"RoFormerTokenizerFast"),Njr.forEach(t),aKe=r(U7," (RoFormer model)"),U7.forEach(t),nKe=i(y),ih=n(y,"LI",{});var Q8e=s(ih);UJ=n(Q8e,"STRONG",{});var qjr=s(UJ);sKe=r(qjr,"speech_to_text"),qjr.forEach(t),lKe=r(Q8e," \u2014 "),Qk=n(Q8e,"A",{href:!0});var Ojr=s(Qk);iKe=r(Ojr,"Speech2TextTokenizer"),Ojr.forEach(t),dKe=r(Q8e," (Speech2Text model)"),Q8e.forEach(t),cKe=i(y),dh=n(y,"LI",{});var H8e=s(dh);JJ=n(H8e,"STRONG",{});var Gjr=s(JJ);fKe=r(Gjr,"speech_to_text_2"),Gjr.forEach(t),mKe=r(H8e," \u2014 "),Hk=n(H8e,"A",{href:!0});var Xjr=s(Hk);gKe=r(Xjr,"Speech2Text2Tokenizer"),Xjr.forEach(t),hKe=r(H8e," (Speech2Text2 model)"),H8e.forEach(t),pKe=i(y),Ds=n(y,"LI",{});var J7=s(Ds);YJ=n(J7,"STRONG",{});var Vjr=s(YJ);_Ke=r(Vjr,"splinter"),Vjr.forEach(t),uKe=r(J7," \u2014 "),Uk=n(J7,"A",{href:!0});var zjr=s(Uk);bKe=r(zjr,"SplinterTokenizer"),zjr.forEach(t),vKe=r(J7," or "),Jk=n(J7,"A",{href:!0});var Wjr=s(Jk);TKe=r(Wjr,"SplinterTokenizerFast"),Wjr.forEach(t),FKe=r(J7," (Splinter model)"),J7.forEach(t),CKe=i(y),Ns=n(y,"LI",{});var Y7=s(Ns);KJ=n(Y7,"STRONG",{});var Qjr=s(KJ);MKe=r(Qjr,"squeezebert"),Qjr.forEach(t),EKe=r(Y7," \u2014 "),Yk=n(Y7,"A",{href:!0});var Hjr=s(Yk);yKe=r(Hjr,"SqueezeBertTokenizer"),Hjr.forEach(t),wKe=r(Y7," or "),Kk=n(Y7,"A",{href:!0});var Ujr=s(Kk);AKe=r(Ujr,"SqueezeBertTokenizerFast"),Ujr.forEach(t),LKe=r(Y7," (SqueezeBERT model)"),Y7.forEach(t),BKe=i(y),qs=n(y,"LI",{});var K7=s(qs);ZJ=n(K7,"STRONG",{});var Jjr=s(ZJ);xKe=r(Jjr,"t5"),Jjr.forEach(t),kKe=r(K7," \u2014 "),Zk=n(K7,"A",{href:!0});var Yjr=s(Zk);RKe=r(Yjr,"T5Tokenizer"),Yjr.forEach(t),SKe=r(K7," or "),eR=n(K7,"A",{href:!0});var Kjr=s(eR);PKe=r(Kjr,"T5TokenizerFast"),Kjr.forEach(t),$Ke=r(K7," (T5 model)"),K7.forEach(t),IKe=i(y),ch=n(y,"LI",{});var U8e=s(ch);eY=n(U8e,"STRONG",{});var Zjr=s(eY);jKe=r(Zjr,"tapas"),Zjr.forEach(t),DKe=r(U8e," \u2014 "),oR=n(U8e,"A",{href:!0});var eDr=s(oR);NKe=r(eDr,"TapasTokenizer"),eDr.forEach(t),qKe=r(U8e," (TAPAS model)"),U8e.forEach(t),OKe=i(y),fh=n(y,"LI",{});var J8e=s(fh);oY=n(J8e,"STRONG",{});var oDr=s(oY);GKe=r(oDr,"transfo-xl"),oDr.forEach(t),XKe=r(J8e," \u2014 "),rR=n(J8e,"A",{href:!0});var rDr=s(rR);VKe=r(rDr,"TransfoXLTokenizer"),rDr.forEach(t),zKe=r(J8e," (Transformer-XL model)"),J8e.forEach(t),WKe=i(y),mh=n(y,"LI",{});var Y8e=s(mh);rY=n(Y8e,"STRONG",{});var tDr=s(rY);QKe=r(tDr,"wav2vec2"),tDr.forEach(t),HKe=r(Y8e," \u2014 "),tR=n(Y8e,"A",{href:!0});var aDr=s(tR);UKe=r(aDr,"Wav2Vec2CTCTokenizer"),aDr.forEach(t),JKe=r(Y8e," (Wav2Vec2 model)"),Y8e.forEach(t),YKe=i(y),gh=n(y,"LI",{});var K8e=s(gh);tY=n(K8e,"STRONG",{});var nDr=s(tY);KKe=r(nDr,"wav2vec2_phoneme"),nDr.forEach(t),ZKe=r(K8e," \u2014 "),aR=n(K8e,"A",{href:!0});var sDr=s(aR);eZe=r(sDr,"Wav2Vec2PhonemeCTCTokenizer"),sDr.forEach(t),oZe=r(K8e," (Wav2Vec2Phoneme model)"),K8e.forEach(t),rZe=i(y),Os=n(y,"LI",{});var Z7=s(Os);aY=n(Z7,"STRONG",{});var lDr=s(aY);tZe=r(lDr,"xglm"),lDr.forEach(t),aZe=r(Z7," \u2014 "),nR=n(Z7,"A",{href:!0});var iDr=s(nR);nZe=r(iDr,"XGLMTokenizer"),iDr.forEach(t),sZe=r(Z7," or "),sR=n(Z7,"A",{href:!0});var dDr=s(sR);lZe=r(dDr,"XGLMTokenizerFast"),dDr.forEach(t),iZe=r(Z7," (XGLM model)"),Z7.forEach(t),dZe=i(y),hh=n(y,"LI",{});var Z8e=s(hh);nY=n(Z8e,"STRONG",{});var cDr=s(nY);cZe=r(cDr,"xlm"),cDr.forEach(t),fZe=r(Z8e," \u2014 "),lR=n(Z8e,"A",{href:!0});var fDr=s(lR);mZe=r(fDr,"XLMTokenizer"),fDr.forEach(t),gZe=r(Z8e," (XLM model)"),Z8e.forEach(t),hZe=i(y),ph=n(y,"LI",{});var eFe=s(ph);sY=n(eFe,"STRONG",{});var mDr=s(sY);pZe=r(mDr,"xlm-prophetnet"),mDr.forEach(t),_Ze=r(eFe," \u2014 "),iR=n(eFe,"A",{href:!0});var gDr=s(iR);uZe=r(gDr,"XLMProphetNetTokenizer"),gDr.forEach(t),bZe=r(eFe," (XLMProphetNet model)"),eFe.forEach(t),vZe=i(y),Gs=n(y,"LI",{});var e9=s(Gs);lY=n(e9,"STRONG",{});var hDr=s(lY);TZe=r(hDr,"xlm-roberta"),hDr.forEach(t),FZe=r(e9," \u2014 "),dR=n(e9,"A",{href:!0});var pDr=s(dR);CZe=r(pDr,"XLMRobertaTokenizer"),pDr.forEach(t),MZe=r(e9," or "),cR=n(e9,"A",{href:!0});var _Dr=s(cR);EZe=r(_Dr,"XLMRobertaTokenizerFast"),_Dr.forEach(t),yZe=r(e9," (XLM-RoBERTa model)"),e9.forEach(t),wZe=i(y),Xs=n(y,"LI",{});var o9=s(Xs);iY=n(o9,"STRONG",{});var uDr=s(iY);AZe=r(uDr,"xlnet"),uDr.forEach(t),LZe=r(o9," \u2014 "),fR=n(o9,"A",{href:!0});var bDr=s(fR);BZe=r(bDr,"XLNetTokenizer"),bDr.forEach(t),xZe=r(o9," or "),mR=n(o9,"A",{href:!0});var vDr=s(mR);kZe=r(vDr,"XLNetTokenizerFast"),vDr.forEach(t),RZe=r(o9," (XLNet model)"),o9.forEach(t),y.forEach(t),SZe=i(ua),dY=n(ua,"P",{});var TDr=s(dY);PZe=r(TDr,"Examples:"),TDr.forEach(t),$Ze=i(ua),m(M4.$$.fragment,ua),ua.forEach(t),IZe=i(Hs),_h=n(Hs,"DIV",{class:!0});var tSe=s(_h);m(E4.$$.fragment,tSe),jZe=i(tSe),cY=n(tSe,"P",{});var FDr=s(cY);DZe=r(FDr,"Register a new tokenizer in this mapping."),FDr.forEach(t),tSe.forEach(t),Hs.forEach(t),Yxe=i(d),od=n(d,"H2",{class:!0});var aSe=s(od);uh=n(aSe,"A",{id:!0,class:!0,href:!0});var CDr=s(uh);fY=n(CDr,"SPAN",{});var MDr=s(fY);m(y4.$$.fragment,MDr),MDr.forEach(t),CDr.forEach(t),NZe=i(aSe),mY=n(aSe,"SPAN",{});var EDr=s(mY);qZe=r(EDr,"AutoFeatureExtractor"),EDr.forEach(t),aSe.forEach(t),Kxe=i(d),Uo=n(d,"DIV",{class:!0});var Us=s(Uo);m(w4.$$.fragment,Us),OZe=i(Us),A4=n(Us,"P",{});var nSe=s(A4);GZe=r(nSe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),gR=n(nSe,"A",{href:!0});var yDr=s(gR);XZe=r(yDr,"AutoFeatureExtractor.from_pretrained()"),yDr.forEach(t),VZe=r(nSe," class method."),nSe.forEach(t),zZe=i(Us),L4=n(Us,"P",{});var sSe=s(L4);WZe=r(sSe,"This class cannot be instantiated directly using "),gY=n(sSe,"CODE",{});var wDr=s(gY);QZe=r(wDr,"__init__()"),wDr.forEach(t),HZe=r(sSe," (throws an error)."),sSe.forEach(t),UZe=i(Us),$e=n(Us,"DIV",{class:!0});var Ot=s($e);m(B4.$$.fragment,Ot),JZe=i(Ot),hY=n(Ot,"P",{});var ADr=s(hY);YZe=r(ADr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),ADr.forEach(t),KZe=i(Ot),Qa=n(Ot,"P",{});var lM=s(Qa);ZZe=r(lM,"The feature extractor class to instantiate is selected based on the "),pY=n(lM,"CODE",{});var LDr=s(pY);eeo=r(LDr,"model_type"),LDr.forEach(t),oeo=r(lM,` property of the config object
(either passed as an argument or loaded from `),_Y=n(lM,"CODE",{});var BDr=s(_Y);reo=r(BDr,"pretrained_model_name_or_path"),BDr.forEach(t),teo=r(lM,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),uY=n(lM,"CODE",{});var xDr=s(uY);aeo=r(xDr,"pretrained_model_name_or_path"),xDr.forEach(t),neo=r(lM,":"),lM.forEach(t),seo=i(Ot),ae=n(Ot,"UL",{});var le=s(ae);bh=n(le,"LI",{});var oFe=s(bh);bY=n(oFe,"STRONG",{});var kDr=s(bY);leo=r(kDr,"beit"),kDr.forEach(t),ieo=r(oFe," \u2014 "),hR=n(oFe,"A",{href:!0});var RDr=s(hR);deo=r(RDr,"BeitFeatureExtractor"),RDr.forEach(t),ceo=r(oFe," (BEiT model)"),oFe.forEach(t),feo=i(le),vh=n(le,"LI",{});var rFe=s(vh);vY=n(rFe,"STRONG",{});var SDr=s(vY);meo=r(SDr,"clip"),SDr.forEach(t),geo=r(rFe," \u2014 "),pR=n(rFe,"A",{href:!0});var PDr=s(pR);heo=r(PDr,"CLIPFeatureExtractor"),PDr.forEach(t),peo=r(rFe," (CLIP model)"),rFe.forEach(t),_eo=i(le),Th=n(le,"LI",{});var tFe=s(Th);TY=n(tFe,"STRONG",{});var $Dr=s(TY);ueo=r($Dr,"convnext"),$Dr.forEach(t),beo=r(tFe," \u2014 "),_R=n(tFe,"A",{href:!0});var IDr=s(_R);veo=r(IDr,"ConvNextFeatureExtractor"),IDr.forEach(t),Teo=r(tFe," (ConvNext model)"),tFe.forEach(t),Feo=i(le),Fh=n(le,"LI",{});var aFe=s(Fh);FY=n(aFe,"STRONG",{});var jDr=s(FY);Ceo=r(jDr,"deit"),jDr.forEach(t),Meo=r(aFe," \u2014 "),uR=n(aFe,"A",{href:!0});var DDr=s(uR);Eeo=r(DDr,"DeiTFeatureExtractor"),DDr.forEach(t),yeo=r(aFe," (DeiT model)"),aFe.forEach(t),weo=i(le),Ch=n(le,"LI",{});var nFe=s(Ch);CY=n(nFe,"STRONG",{});var NDr=s(CY);Aeo=r(NDr,"detr"),NDr.forEach(t),Leo=r(nFe," \u2014 "),bR=n(nFe,"A",{href:!0});var qDr=s(bR);Beo=r(qDr,"DetrFeatureExtractor"),qDr.forEach(t),xeo=r(nFe," (DETR model)"),nFe.forEach(t),keo=i(le),Mh=n(le,"LI",{});var sFe=s(Mh);MY=n(sFe,"STRONG",{});var ODr=s(MY);Reo=r(ODr,"hubert"),ODr.forEach(t),Seo=r(sFe," \u2014 "),vR=n(sFe,"A",{href:!0});var GDr=s(vR);Peo=r(GDr,"Wav2Vec2FeatureExtractor"),GDr.forEach(t),$eo=r(sFe," (Hubert model)"),sFe.forEach(t),Ieo=i(le),Eh=n(le,"LI",{});var lFe=s(Eh);EY=n(lFe,"STRONG",{});var XDr=s(EY);jeo=r(XDr,"layoutlmv2"),XDr.forEach(t),Deo=r(lFe," \u2014 "),TR=n(lFe,"A",{href:!0});var VDr=s(TR);Neo=r(VDr,"LayoutLMv2FeatureExtractor"),VDr.forEach(t),qeo=r(lFe," (LayoutLMv2 model)"),lFe.forEach(t),Oeo=i(le),yh=n(le,"LI",{});var iFe=s(yh);yY=n(iFe,"STRONG",{});var zDr=s(yY);Geo=r(zDr,"maskformer"),zDr.forEach(t),Xeo=r(iFe," \u2014 "),FR=n(iFe,"A",{href:!0});var WDr=s(FR);Veo=r(WDr,"MaskFormerFeatureExtractor"),WDr.forEach(t),zeo=r(iFe," (MaskFormer model)"),iFe.forEach(t),Weo=i(le),wh=n(le,"LI",{});var dFe=s(wh);wY=n(dFe,"STRONG",{});var QDr=s(wY);Qeo=r(QDr,"perceiver"),QDr.forEach(t),Heo=r(dFe," \u2014 "),CR=n(dFe,"A",{href:!0});var HDr=s(CR);Ueo=r(HDr,"PerceiverFeatureExtractor"),HDr.forEach(t),Jeo=r(dFe," (Perceiver model)"),dFe.forEach(t),Yeo=i(le),Ah=n(le,"LI",{});var cFe=s(Ah);AY=n(cFe,"STRONG",{});var UDr=s(AY);Keo=r(UDr,"poolformer"),UDr.forEach(t),Zeo=r(cFe," \u2014 "),MR=n(cFe,"A",{href:!0});var JDr=s(MR);eoo=r(JDr,"PoolFormerFeatureExtractor"),JDr.forEach(t),ooo=r(cFe," (PoolFormer model)"),cFe.forEach(t),roo=i(le),Lh=n(le,"LI",{});var fFe=s(Lh);LY=n(fFe,"STRONG",{});var YDr=s(LY);too=r(YDr,"segformer"),YDr.forEach(t),aoo=r(fFe," \u2014 "),ER=n(fFe,"A",{href:!0});var KDr=s(ER);noo=r(KDr,"SegformerFeatureExtractor"),KDr.forEach(t),soo=r(fFe," (SegFormer model)"),fFe.forEach(t),loo=i(le),Bh=n(le,"LI",{});var mFe=s(Bh);BY=n(mFe,"STRONG",{});var ZDr=s(BY);ioo=r(ZDr,"speech_to_text"),ZDr.forEach(t),doo=r(mFe," \u2014 "),yR=n(mFe,"A",{href:!0});var eNr=s(yR);coo=r(eNr,"Speech2TextFeatureExtractor"),eNr.forEach(t),foo=r(mFe," (Speech2Text model)"),mFe.forEach(t),moo=i(le),xh=n(le,"LI",{});var gFe=s(xh);xY=n(gFe,"STRONG",{});var oNr=s(xY);goo=r(oNr,"swin"),oNr.forEach(t),hoo=r(gFe," \u2014 "),wR=n(gFe,"A",{href:!0});var rNr=s(wR);poo=r(rNr,"ViTFeatureExtractor"),rNr.forEach(t),_oo=r(gFe," (Swin model)"),gFe.forEach(t),uoo=i(le),kh=n(le,"LI",{});var hFe=s(kh);kY=n(hFe,"STRONG",{});var tNr=s(kY);boo=r(tNr,"vit"),tNr.forEach(t),voo=r(hFe," \u2014 "),AR=n(hFe,"A",{href:!0});var aNr=s(AR);Too=r(aNr,"ViTFeatureExtractor"),aNr.forEach(t),Foo=r(hFe," (ViT model)"),hFe.forEach(t),Coo=i(le),Rh=n(le,"LI",{});var pFe=s(Rh);RY=n(pFe,"STRONG",{});var nNr=s(RY);Moo=r(nNr,"vit_mae"),nNr.forEach(t),Eoo=r(pFe," \u2014 "),LR=n(pFe,"A",{href:!0});var sNr=s(LR);yoo=r(sNr,"ViTFeatureExtractor"),sNr.forEach(t),woo=r(pFe," (ViTMAE model)"),pFe.forEach(t),Aoo=i(le),Sh=n(le,"LI",{});var _Fe=s(Sh);SY=n(_Fe,"STRONG",{});var lNr=s(SY);Loo=r(lNr,"wav2vec2"),lNr.forEach(t),Boo=r(_Fe," \u2014 "),BR=n(_Fe,"A",{href:!0});var iNr=s(BR);xoo=r(iNr,"Wav2Vec2FeatureExtractor"),iNr.forEach(t),koo=r(_Fe," (Wav2Vec2 model)"),_Fe.forEach(t),le.forEach(t),Roo=i(Ot),m(Ph.$$.fragment,Ot),Soo=i(Ot),PY=n(Ot,"P",{});var dNr=s(PY);Poo=r(dNr,"Examples:"),dNr.forEach(t),$oo=i(Ot),m(x4.$$.fragment,Ot),Ot.forEach(t),Ioo=i(Us),$h=n(Us,"DIV",{class:!0});var lSe=s($h);m(k4.$$.fragment,lSe),joo=i(lSe),$Y=n(lSe,"P",{});var cNr=s($Y);Doo=r(cNr,"Register a new feature extractor for this class."),cNr.forEach(t),lSe.forEach(t),Us.forEach(t),Zxe=i(d),rd=n(d,"H2",{class:!0});var iSe=s(rd);Ih=n(iSe,"A",{id:!0,class:!0,href:!0});var fNr=s(Ih);IY=n(fNr,"SPAN",{});var mNr=s(IY);m(R4.$$.fragment,mNr),mNr.forEach(t),fNr.forEach(t),Noo=i(iSe),jY=n(iSe,"SPAN",{});var gNr=s(jY);qoo=r(gNr,"AutoProcessor"),gNr.forEach(t),iSe.forEach(t),eke=i(d),Jo=n(d,"DIV",{class:!0});var Js=s(Jo);m(S4.$$.fragment,Js),Ooo=i(Js),P4=n(Js,"P",{});var dSe=s(P4);Goo=r(dSe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),xR=n(dSe,"A",{href:!0});var hNr=s(xR);Xoo=r(hNr,"AutoProcessor.from_pretrained()"),hNr.forEach(t),Voo=r(dSe," class method."),dSe.forEach(t),zoo=i(Js),$4=n(Js,"P",{});var cSe=s($4);Woo=r(cSe,"This class cannot be instantiated directly using "),DY=n(cSe,"CODE",{});var pNr=s(DY);Qoo=r(pNr,"__init__()"),pNr.forEach(t),Hoo=r(cSe," (throws an error)."),cSe.forEach(t),Uoo=i(Js),Ie=n(Js,"DIV",{class:!0});var Gt=s(Ie);m(I4.$$.fragment,Gt),Joo=i(Gt),NY=n(Gt,"P",{});var _Nr=s(NY);Yoo=r(_Nr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),_Nr.forEach(t),Koo=i(Gt),td=n(Gt,"P",{});var Xz=s(td);Zoo=r(Xz,"The processor class to instantiate is selected based on the "),qY=n(Xz,"CODE",{});var uNr=s(qY);ero=r(uNr,"model_type"),uNr.forEach(t),oro=r(Xz,` property of the config object (either
passed as an argument or loaded from `),OY=n(Xz,"CODE",{});var bNr=s(OY);rro=r(bNr,"pretrained_model_name_or_path"),bNr.forEach(t),tro=r(Xz," if possible):"),Xz.forEach(t),aro=i(Gt),Be=n(Gt,"UL",{});var qo=s(Be);jh=n(qo,"LI",{});var uFe=s(jh);GY=n(uFe,"STRONG",{});var vNr=s(GY);nro=r(vNr,"clip"),vNr.forEach(t),sro=r(uFe," \u2014 "),kR=n(uFe,"A",{href:!0});var TNr=s(kR);lro=r(TNr,"CLIPProcessor"),TNr.forEach(t),iro=r(uFe," (CLIP model)"),uFe.forEach(t),dro=i(qo),Dh=n(qo,"LI",{});var bFe=s(Dh);XY=n(bFe,"STRONG",{});var FNr=s(XY);cro=r(FNr,"layoutlmv2"),FNr.forEach(t),fro=r(bFe," \u2014 "),RR=n(bFe,"A",{href:!0});var CNr=s(RR);mro=r(CNr,"LayoutLMv2Processor"),CNr.forEach(t),gro=r(bFe," (LayoutLMv2 model)"),bFe.forEach(t),hro=i(qo),Nh=n(qo,"LI",{});var vFe=s(Nh);VY=n(vFe,"STRONG",{});var MNr=s(VY);pro=r(MNr,"layoutxlm"),MNr.forEach(t),_ro=r(vFe," \u2014 "),SR=n(vFe,"A",{href:!0});var ENr=s(SR);uro=r(ENr,"LayoutXLMProcessor"),ENr.forEach(t),bro=r(vFe," (LayoutXLM model)"),vFe.forEach(t),vro=i(qo),qh=n(qo,"LI",{});var TFe=s(qh);zY=n(TFe,"STRONG",{});var yNr=s(zY);Tro=r(yNr,"speech_to_text"),yNr.forEach(t),Fro=r(TFe," \u2014 "),PR=n(TFe,"A",{href:!0});var wNr=s(PR);Cro=r(wNr,"Speech2TextProcessor"),wNr.forEach(t),Mro=r(TFe," (Speech2Text model)"),TFe.forEach(t),Ero=i(qo),Oh=n(qo,"LI",{});var FFe=s(Oh);WY=n(FFe,"STRONG",{});var ANr=s(WY);yro=r(ANr,"speech_to_text_2"),ANr.forEach(t),wro=r(FFe," \u2014 "),$R=n(FFe,"A",{href:!0});var LNr=s($R);Aro=r(LNr,"Speech2Text2Processor"),LNr.forEach(t),Lro=r(FFe," (Speech2Text2 model)"),FFe.forEach(t),Bro=i(qo),Gh=n(qo,"LI",{});var CFe=s(Gh);QY=n(CFe,"STRONG",{});var BNr=s(QY);xro=r(BNr,"trocr"),BNr.forEach(t),kro=r(CFe," \u2014 "),IR=n(CFe,"A",{href:!0});var xNr=s(IR);Rro=r(xNr,"TrOCRProcessor"),xNr.forEach(t),Sro=r(CFe," (TrOCR model)"),CFe.forEach(t),Pro=i(qo),Xh=n(qo,"LI",{});var MFe=s(Xh);HY=n(MFe,"STRONG",{});var kNr=s(HY);$ro=r(kNr,"vision-text-dual-encoder"),kNr.forEach(t),Iro=r(MFe," \u2014 "),jR=n(MFe,"A",{href:!0});var RNr=s(jR);jro=r(RNr,"VisionTextDualEncoderProcessor"),RNr.forEach(t),Dro=r(MFe," (VisionTextDualEncoder model)"),MFe.forEach(t),Nro=i(qo),Vh=n(qo,"LI",{});var EFe=s(Vh);UY=n(EFe,"STRONG",{});var SNr=s(UY);qro=r(SNr,"wav2vec2"),SNr.forEach(t),Oro=r(EFe," \u2014 "),DR=n(EFe,"A",{href:!0});var PNr=s(DR);Gro=r(PNr,"Wav2Vec2Processor"),PNr.forEach(t),Xro=r(EFe," (Wav2Vec2 model)"),EFe.forEach(t),qo.forEach(t),Vro=i(Gt),m(zh.$$.fragment,Gt),zro=i(Gt),JY=n(Gt,"P",{});var $Nr=s(JY);Wro=r($Nr,"Examples:"),$Nr.forEach(t),Qro=i(Gt),m(j4.$$.fragment,Gt),Gt.forEach(t),Hro=i(Js),Wh=n(Js,"DIV",{class:!0});var fSe=s(Wh);m(D4.$$.fragment,fSe),Uro=i(fSe),YY=n(fSe,"P",{});var INr=s(YY);Jro=r(INr,"Register a new processor for this class."),INr.forEach(t),fSe.forEach(t),Js.forEach(t),oke=i(d),ad=n(d,"H2",{class:!0});var mSe=s(ad);Qh=n(mSe,"A",{id:!0,class:!0,href:!0});var jNr=s(Qh);KY=n(jNr,"SPAN",{});var DNr=s(KY);m(N4.$$.fragment,DNr),DNr.forEach(t),jNr.forEach(t),Yro=i(mSe),ZY=n(mSe,"SPAN",{});var NNr=s(ZY);Kro=r(NNr,"AutoModel"),NNr.forEach(t),mSe.forEach(t),rke=i(d),Yo=n(d,"DIV",{class:!0});var Ys=s(Yo);m(q4.$$.fragment,Ys),Zro=i(Ys),nd=n(Ys,"P",{});var Vz=s(nd);eto=r(Vz,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),eK=n(Vz,"CODE",{});var qNr=s(eK);oto=r(qNr,"from_pretrained()"),qNr.forEach(t),rto=r(Vz,"class method or the "),oK=n(Vz,"CODE",{});var ONr=s(oK);tto=r(ONr,"from_config()"),ONr.forEach(t),ato=r(Vz,`class
method.`),Vz.forEach(t),nto=i(Ys),O4=n(Ys,"P",{});var gSe=s(O4);sto=r(gSe,"This class cannot be instantiated directly using "),rK=n(gSe,"CODE",{});var GNr=s(rK);lto=r(GNr,"__init__()"),GNr.forEach(t),ito=r(gSe," (throws an error)."),gSe.forEach(t),dto=i(Ys),Wr=n(Ys,"DIV",{class:!0});var Ks=s(Wr);m(G4.$$.fragment,Ks),cto=i(Ks),tK=n(Ks,"P",{});var XNr=s(tK);fto=r(XNr,"Instantiates one of the base model classes of the library from a configuration."),XNr.forEach(t),mto=i(Ks),sd=n(Ks,"P",{});var zz=s(sd);gto=r(zz,`Note:
Loading a model from its configuration file does `),aK=n(zz,"STRONG",{});var VNr=s(aK);hto=r(VNr,"not"),VNr.forEach(t),pto=r(zz,` load the model weights. It only affects the
model\u2019s configuration. Use `),nK=n(zz,"CODE",{});var zNr=s(nK);_to=r(zNr,"from_pretrained()"),zNr.forEach(t),uto=r(zz,"to load the model weights."),zz.forEach(t),bto=i(Ks),sK=n(Ks,"P",{});var WNr=s(sK);vto=r(WNr,"Examples:"),WNr.forEach(t),Tto=i(Ks),m(X4.$$.fragment,Ks),Ks.forEach(t),Fto=i(Ys),je=n(Ys,"DIV",{class:!0});var Xt=s(je);m(V4.$$.fragment,Xt),Cto=i(Xt),lK=n(Xt,"P",{});var QNr=s(lK);Mto=r(QNr,"Instantiate one of the base model classes of the library from a pretrained model."),QNr.forEach(t),Eto=i(Xt),Ha=n(Xt,"P",{});var iM=s(Ha);yto=r(iM,"The model class to instantiate is selected based on the "),iK=n(iM,"CODE",{});var HNr=s(iK);wto=r(HNr,"model_type"),HNr.forEach(t),Ato=r(iM,` property of the config object (either
passed as an argument or loaded from `),dK=n(iM,"CODE",{});var UNr=s(dK);Lto=r(UNr,"pretrained_model_name_or_path"),UNr.forEach(t),Bto=r(iM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cK=n(iM,"CODE",{});var JNr=s(cK);xto=r(JNr,"pretrained_model_name_or_path"),JNr.forEach(t),kto=r(iM,":"),iM.forEach(t),Rto=i(Xt),F=n(Xt,"UL",{});var C=s(F);Hh=n(C,"LI",{});var yFe=s(Hh);fK=n(yFe,"STRONG",{});var YNr=s(fK);Sto=r(YNr,"albert"),YNr.forEach(t),Pto=r(yFe," \u2014 "),NR=n(yFe,"A",{href:!0});var KNr=s(NR);$to=r(KNr,"AlbertModel"),KNr.forEach(t),Ito=r(yFe," (ALBERT model)"),yFe.forEach(t),jto=i(C),Uh=n(C,"LI",{});var wFe=s(Uh);mK=n(wFe,"STRONG",{});var ZNr=s(mK);Dto=r(ZNr,"bart"),ZNr.forEach(t),Nto=r(wFe," \u2014 "),qR=n(wFe,"A",{href:!0});var eqr=s(qR);qto=r(eqr,"BartModel"),eqr.forEach(t),Oto=r(wFe," (BART model)"),wFe.forEach(t),Gto=i(C),Jh=n(C,"LI",{});var AFe=s(Jh);gK=n(AFe,"STRONG",{});var oqr=s(gK);Xto=r(oqr,"beit"),oqr.forEach(t),Vto=r(AFe," \u2014 "),OR=n(AFe,"A",{href:!0});var rqr=s(OR);zto=r(rqr,"BeitModel"),rqr.forEach(t),Wto=r(AFe," (BEiT model)"),AFe.forEach(t),Qto=i(C),Yh=n(C,"LI",{});var LFe=s(Yh);hK=n(LFe,"STRONG",{});var tqr=s(hK);Hto=r(tqr,"bert"),tqr.forEach(t),Uto=r(LFe," \u2014 "),GR=n(LFe,"A",{href:!0});var aqr=s(GR);Jto=r(aqr,"BertModel"),aqr.forEach(t),Yto=r(LFe," (BERT model)"),LFe.forEach(t),Kto=i(C),Kh=n(C,"LI",{});var BFe=s(Kh);pK=n(BFe,"STRONG",{});var nqr=s(pK);Zto=r(nqr,"bert-generation"),nqr.forEach(t),eao=r(BFe," \u2014 "),XR=n(BFe,"A",{href:!0});var sqr=s(XR);oao=r(sqr,"BertGenerationEncoder"),sqr.forEach(t),rao=r(BFe," (Bert Generation model)"),BFe.forEach(t),tao=i(C),Zh=n(C,"LI",{});var xFe=s(Zh);_K=n(xFe,"STRONG",{});var lqr=s(_K);aao=r(lqr,"big_bird"),lqr.forEach(t),nao=r(xFe," \u2014 "),VR=n(xFe,"A",{href:!0});var iqr=s(VR);sao=r(iqr,"BigBirdModel"),iqr.forEach(t),lao=r(xFe," (BigBird model)"),xFe.forEach(t),iao=i(C),ep=n(C,"LI",{});var kFe=s(ep);uK=n(kFe,"STRONG",{});var dqr=s(uK);dao=r(dqr,"bigbird_pegasus"),dqr.forEach(t),cao=r(kFe," \u2014 "),zR=n(kFe,"A",{href:!0});var cqr=s(zR);fao=r(cqr,"BigBirdPegasusModel"),cqr.forEach(t),mao=r(kFe," (BigBirdPegasus model)"),kFe.forEach(t),gao=i(C),op=n(C,"LI",{});var RFe=s(op);bK=n(RFe,"STRONG",{});var fqr=s(bK);hao=r(fqr,"blenderbot"),fqr.forEach(t),pao=r(RFe," \u2014 "),WR=n(RFe,"A",{href:!0});var mqr=s(WR);_ao=r(mqr,"BlenderbotModel"),mqr.forEach(t),uao=r(RFe," (Blenderbot model)"),RFe.forEach(t),bao=i(C),rp=n(C,"LI",{});var SFe=s(rp);vK=n(SFe,"STRONG",{});var gqr=s(vK);vao=r(gqr,"blenderbot-small"),gqr.forEach(t),Tao=r(SFe," \u2014 "),QR=n(SFe,"A",{href:!0});var hqr=s(QR);Fao=r(hqr,"BlenderbotSmallModel"),hqr.forEach(t),Cao=r(SFe," (BlenderbotSmall model)"),SFe.forEach(t),Mao=i(C),tp=n(C,"LI",{});var PFe=s(tp);TK=n(PFe,"STRONG",{});var pqr=s(TK);Eao=r(pqr,"camembert"),pqr.forEach(t),yao=r(PFe," \u2014 "),HR=n(PFe,"A",{href:!0});var _qr=s(HR);wao=r(_qr,"CamembertModel"),_qr.forEach(t),Aao=r(PFe," (CamemBERT model)"),PFe.forEach(t),Lao=i(C),ap=n(C,"LI",{});var $Fe=s(ap);FK=n($Fe,"STRONG",{});var uqr=s(FK);Bao=r(uqr,"canine"),uqr.forEach(t),xao=r($Fe," \u2014 "),UR=n($Fe,"A",{href:!0});var bqr=s(UR);kao=r(bqr,"CanineModel"),bqr.forEach(t),Rao=r($Fe," (Canine model)"),$Fe.forEach(t),Sao=i(C),np=n(C,"LI",{});var IFe=s(np);CK=n(IFe,"STRONG",{});var vqr=s(CK);Pao=r(vqr,"clip"),vqr.forEach(t),$ao=r(IFe," \u2014 "),JR=n(IFe,"A",{href:!0});var Tqr=s(JR);Iao=r(Tqr,"CLIPModel"),Tqr.forEach(t),jao=r(IFe," (CLIP model)"),IFe.forEach(t),Dao=i(C),sp=n(C,"LI",{});var jFe=s(sp);MK=n(jFe,"STRONG",{});var Fqr=s(MK);Nao=r(Fqr,"convbert"),Fqr.forEach(t),qao=r(jFe," \u2014 "),YR=n(jFe,"A",{href:!0});var Cqr=s(YR);Oao=r(Cqr,"ConvBertModel"),Cqr.forEach(t),Gao=r(jFe," (ConvBERT model)"),jFe.forEach(t),Xao=i(C),lp=n(C,"LI",{});var DFe=s(lp);EK=n(DFe,"STRONG",{});var Mqr=s(EK);Vao=r(Mqr,"convnext"),Mqr.forEach(t),zao=r(DFe," \u2014 "),KR=n(DFe,"A",{href:!0});var Eqr=s(KR);Wao=r(Eqr,"ConvNextModel"),Eqr.forEach(t),Qao=r(DFe," (ConvNext model)"),DFe.forEach(t),Hao=i(C),ip=n(C,"LI",{});var NFe=s(ip);yK=n(NFe,"STRONG",{});var yqr=s(yK);Uao=r(yqr,"ctrl"),yqr.forEach(t),Jao=r(NFe," \u2014 "),ZR=n(NFe,"A",{href:!0});var wqr=s(ZR);Yao=r(wqr,"CTRLModel"),wqr.forEach(t),Kao=r(NFe," (CTRL model)"),NFe.forEach(t),Zao=i(C),dp=n(C,"LI",{});var qFe=s(dp);wK=n(qFe,"STRONG",{});var Aqr=s(wK);eno=r(Aqr,"data2vec-audio"),Aqr.forEach(t),ono=r(qFe," \u2014 "),eS=n(qFe,"A",{href:!0});var Lqr=s(eS);rno=r(Lqr,"Data2VecAudioModel"),Lqr.forEach(t),tno=r(qFe," (Data2VecAudio model)"),qFe.forEach(t),ano=i(C),cp=n(C,"LI",{});var OFe=s(cp);AK=n(OFe,"STRONG",{});var Bqr=s(AK);nno=r(Bqr,"data2vec-text"),Bqr.forEach(t),sno=r(OFe," \u2014 "),oS=n(OFe,"A",{href:!0});var xqr=s(oS);lno=r(xqr,"Data2VecTextModel"),xqr.forEach(t),ino=r(OFe," (Data2VecText model)"),OFe.forEach(t),dno=i(C),fp=n(C,"LI",{});var GFe=s(fp);LK=n(GFe,"STRONG",{});var kqr=s(LK);cno=r(kqr,"deberta"),kqr.forEach(t),fno=r(GFe," \u2014 "),rS=n(GFe,"A",{href:!0});var Rqr=s(rS);mno=r(Rqr,"DebertaModel"),Rqr.forEach(t),gno=r(GFe," (DeBERTa model)"),GFe.forEach(t),hno=i(C),mp=n(C,"LI",{});var XFe=s(mp);BK=n(XFe,"STRONG",{});var Sqr=s(BK);pno=r(Sqr,"deberta-v2"),Sqr.forEach(t),_no=r(XFe," \u2014 "),tS=n(XFe,"A",{href:!0});var Pqr=s(tS);uno=r(Pqr,"DebertaV2Model"),Pqr.forEach(t),bno=r(XFe," (DeBERTa-v2 model)"),XFe.forEach(t),vno=i(C),gp=n(C,"LI",{});var VFe=s(gp);xK=n(VFe,"STRONG",{});var $qr=s(xK);Tno=r($qr,"deit"),$qr.forEach(t),Fno=r(VFe," \u2014 "),aS=n(VFe,"A",{href:!0});var Iqr=s(aS);Cno=r(Iqr,"DeiTModel"),Iqr.forEach(t),Mno=r(VFe," (DeiT model)"),VFe.forEach(t),Eno=i(C),hp=n(C,"LI",{});var zFe=s(hp);kK=n(zFe,"STRONG",{});var jqr=s(kK);yno=r(jqr,"detr"),jqr.forEach(t),wno=r(zFe," \u2014 "),nS=n(zFe,"A",{href:!0});var Dqr=s(nS);Ano=r(Dqr,"DetrModel"),Dqr.forEach(t),Lno=r(zFe," (DETR model)"),zFe.forEach(t),Bno=i(C),pp=n(C,"LI",{});var WFe=s(pp);RK=n(WFe,"STRONG",{});var Nqr=s(RK);xno=r(Nqr,"distilbert"),Nqr.forEach(t),kno=r(WFe," \u2014 "),sS=n(WFe,"A",{href:!0});var qqr=s(sS);Rno=r(qqr,"DistilBertModel"),qqr.forEach(t),Sno=r(WFe," (DistilBERT model)"),WFe.forEach(t),Pno=i(C),_p=n(C,"LI",{});var QFe=s(_p);SK=n(QFe,"STRONG",{});var Oqr=s(SK);$no=r(Oqr,"dpr"),Oqr.forEach(t),Ino=r(QFe," \u2014 "),lS=n(QFe,"A",{href:!0});var Gqr=s(lS);jno=r(Gqr,"DPRQuestionEncoder"),Gqr.forEach(t),Dno=r(QFe," (DPR model)"),QFe.forEach(t),Nno=i(C),up=n(C,"LI",{});var HFe=s(up);PK=n(HFe,"STRONG",{});var Xqr=s(PK);qno=r(Xqr,"electra"),Xqr.forEach(t),Ono=r(HFe," \u2014 "),iS=n(HFe,"A",{href:!0});var Vqr=s(iS);Gno=r(Vqr,"ElectraModel"),Vqr.forEach(t),Xno=r(HFe," (ELECTRA model)"),HFe.forEach(t),Vno=i(C),bp=n(C,"LI",{});var UFe=s(bp);$K=n(UFe,"STRONG",{});var zqr=s($K);zno=r(zqr,"flaubert"),zqr.forEach(t),Wno=r(UFe," \u2014 "),dS=n(UFe,"A",{href:!0});var Wqr=s(dS);Qno=r(Wqr,"FlaubertModel"),Wqr.forEach(t),Hno=r(UFe," (FlauBERT model)"),UFe.forEach(t),Uno=i(C),vp=n(C,"LI",{});var JFe=s(vp);IK=n(JFe,"STRONG",{});var Qqr=s(IK);Jno=r(Qqr,"fnet"),Qqr.forEach(t),Yno=r(JFe," \u2014 "),cS=n(JFe,"A",{href:!0});var Hqr=s(cS);Kno=r(Hqr,"FNetModel"),Hqr.forEach(t),Zno=r(JFe," (FNet model)"),JFe.forEach(t),eso=i(C),Tp=n(C,"LI",{});var YFe=s(Tp);jK=n(YFe,"STRONG",{});var Uqr=s(jK);oso=r(Uqr,"fsmt"),Uqr.forEach(t),rso=r(YFe," \u2014 "),fS=n(YFe,"A",{href:!0});var Jqr=s(fS);tso=r(Jqr,"FSMTModel"),Jqr.forEach(t),aso=r(YFe," (FairSeq Machine-Translation model)"),YFe.forEach(t),nso=i(C),Vs=n(C,"LI",{});var r9=s(Vs);DK=n(r9,"STRONG",{});var Yqr=s(DK);sso=r(Yqr,"funnel"),Yqr.forEach(t),lso=r(r9," \u2014 "),mS=n(r9,"A",{href:!0});var Kqr=s(mS);iso=r(Kqr,"FunnelModel"),Kqr.forEach(t),dso=r(r9," or "),gS=n(r9,"A",{href:!0});var Zqr=s(gS);cso=r(Zqr,"FunnelBaseModel"),Zqr.forEach(t),fso=r(r9," (Funnel Transformer model)"),r9.forEach(t),mso=i(C),Fp=n(C,"LI",{});var KFe=s(Fp);NK=n(KFe,"STRONG",{});var eOr=s(NK);gso=r(eOr,"gpt2"),eOr.forEach(t),hso=r(KFe," \u2014 "),hS=n(KFe,"A",{href:!0});var oOr=s(hS);pso=r(oOr,"GPT2Model"),oOr.forEach(t),_so=r(KFe," (OpenAI GPT-2 model)"),KFe.forEach(t),uso=i(C),Cp=n(C,"LI",{});var ZFe=s(Cp);qK=n(ZFe,"STRONG",{});var rOr=s(qK);bso=r(rOr,"gpt_neo"),rOr.forEach(t),vso=r(ZFe," \u2014 "),pS=n(ZFe,"A",{href:!0});var tOr=s(pS);Tso=r(tOr,"GPTNeoModel"),tOr.forEach(t),Fso=r(ZFe," (GPT Neo model)"),ZFe.forEach(t),Cso=i(C),Mp=n(C,"LI",{});var eCe=s(Mp);OK=n(eCe,"STRONG",{});var aOr=s(OK);Mso=r(aOr,"gptj"),aOr.forEach(t),Eso=r(eCe," \u2014 "),_S=n(eCe,"A",{href:!0});var nOr=s(_S);yso=r(nOr,"GPTJModel"),nOr.forEach(t),wso=r(eCe," (GPT-J model)"),eCe.forEach(t),Aso=i(C),Ep=n(C,"LI",{});var oCe=s(Ep);GK=n(oCe,"STRONG",{});var sOr=s(GK);Lso=r(sOr,"hubert"),sOr.forEach(t),Bso=r(oCe," \u2014 "),uS=n(oCe,"A",{href:!0});var lOr=s(uS);xso=r(lOr,"HubertModel"),lOr.forEach(t),kso=r(oCe," (Hubert model)"),oCe.forEach(t),Rso=i(C),yp=n(C,"LI",{});var rCe=s(yp);XK=n(rCe,"STRONG",{});var iOr=s(XK);Sso=r(iOr,"ibert"),iOr.forEach(t),Pso=r(rCe," \u2014 "),bS=n(rCe,"A",{href:!0});var dOr=s(bS);$so=r(dOr,"IBertModel"),dOr.forEach(t),Iso=r(rCe," (I-BERT model)"),rCe.forEach(t),jso=i(C),wp=n(C,"LI",{});var tCe=s(wp);VK=n(tCe,"STRONG",{});var cOr=s(VK);Dso=r(cOr,"imagegpt"),cOr.forEach(t),Nso=r(tCe," \u2014 "),vS=n(tCe,"A",{href:!0});var fOr=s(vS);qso=r(fOr,"ImageGPTModel"),fOr.forEach(t),Oso=r(tCe," (ImageGPT model)"),tCe.forEach(t),Gso=i(C),Ap=n(C,"LI",{});var aCe=s(Ap);zK=n(aCe,"STRONG",{});var mOr=s(zK);Xso=r(mOr,"layoutlm"),mOr.forEach(t),Vso=r(aCe," \u2014 "),TS=n(aCe,"A",{href:!0});var gOr=s(TS);zso=r(gOr,"LayoutLMModel"),gOr.forEach(t),Wso=r(aCe," (LayoutLM model)"),aCe.forEach(t),Qso=i(C),Lp=n(C,"LI",{});var nCe=s(Lp);WK=n(nCe,"STRONG",{});var hOr=s(WK);Hso=r(hOr,"layoutlmv2"),hOr.forEach(t),Uso=r(nCe," \u2014 "),FS=n(nCe,"A",{href:!0});var pOr=s(FS);Jso=r(pOr,"LayoutLMv2Model"),pOr.forEach(t),Yso=r(nCe," (LayoutLMv2 model)"),nCe.forEach(t),Kso=i(C),Bp=n(C,"LI",{});var sCe=s(Bp);QK=n(sCe,"STRONG",{});var _Or=s(QK);Zso=r(_Or,"led"),_Or.forEach(t),elo=r(sCe," \u2014 "),CS=n(sCe,"A",{href:!0});var uOr=s(CS);olo=r(uOr,"LEDModel"),uOr.forEach(t),rlo=r(sCe," (LED model)"),sCe.forEach(t),tlo=i(C),xp=n(C,"LI",{});var lCe=s(xp);HK=n(lCe,"STRONG",{});var bOr=s(HK);alo=r(bOr,"longformer"),bOr.forEach(t),nlo=r(lCe," \u2014 "),MS=n(lCe,"A",{href:!0});var vOr=s(MS);slo=r(vOr,"LongformerModel"),vOr.forEach(t),llo=r(lCe," (Longformer model)"),lCe.forEach(t),ilo=i(C),kp=n(C,"LI",{});var iCe=s(kp);UK=n(iCe,"STRONG",{});var TOr=s(UK);dlo=r(TOr,"luke"),TOr.forEach(t),clo=r(iCe," \u2014 "),ES=n(iCe,"A",{href:!0});var FOr=s(ES);flo=r(FOr,"LukeModel"),FOr.forEach(t),mlo=r(iCe," (LUKE model)"),iCe.forEach(t),glo=i(C),Rp=n(C,"LI",{});var dCe=s(Rp);JK=n(dCe,"STRONG",{});var COr=s(JK);hlo=r(COr,"lxmert"),COr.forEach(t),plo=r(dCe," \u2014 "),yS=n(dCe,"A",{href:!0});var MOr=s(yS);_lo=r(MOr,"LxmertModel"),MOr.forEach(t),ulo=r(dCe," (LXMERT model)"),dCe.forEach(t),blo=i(C),Sp=n(C,"LI",{});var cCe=s(Sp);YK=n(cCe,"STRONG",{});var EOr=s(YK);vlo=r(EOr,"m2m_100"),EOr.forEach(t),Tlo=r(cCe," \u2014 "),wS=n(cCe,"A",{href:!0});var yOr=s(wS);Flo=r(yOr,"M2M100Model"),yOr.forEach(t),Clo=r(cCe," (M2M100 model)"),cCe.forEach(t),Mlo=i(C),Pp=n(C,"LI",{});var fCe=s(Pp);KK=n(fCe,"STRONG",{});var wOr=s(KK);Elo=r(wOr,"marian"),wOr.forEach(t),ylo=r(fCe," \u2014 "),AS=n(fCe,"A",{href:!0});var AOr=s(AS);wlo=r(AOr,"MarianModel"),AOr.forEach(t),Alo=r(fCe," (Marian model)"),fCe.forEach(t),Llo=i(C),$p=n(C,"LI",{});var mCe=s($p);ZK=n(mCe,"STRONG",{});var LOr=s(ZK);Blo=r(LOr,"maskformer"),LOr.forEach(t),xlo=r(mCe," \u2014 "),LS=n(mCe,"A",{href:!0});var BOr=s(LS);klo=r(BOr,"MaskFormerModel"),BOr.forEach(t),Rlo=r(mCe," (MaskFormer model)"),mCe.forEach(t),Slo=i(C),Ip=n(C,"LI",{});var gCe=s(Ip);eZ=n(gCe,"STRONG",{});var xOr=s(eZ);Plo=r(xOr,"mbart"),xOr.forEach(t),$lo=r(gCe," \u2014 "),BS=n(gCe,"A",{href:!0});var kOr=s(BS);Ilo=r(kOr,"MBartModel"),kOr.forEach(t),jlo=r(gCe," (mBART model)"),gCe.forEach(t),Dlo=i(C),jp=n(C,"LI",{});var hCe=s(jp);oZ=n(hCe,"STRONG",{});var ROr=s(oZ);Nlo=r(ROr,"megatron-bert"),ROr.forEach(t),qlo=r(hCe," \u2014 "),xS=n(hCe,"A",{href:!0});var SOr=s(xS);Olo=r(SOr,"MegatronBertModel"),SOr.forEach(t),Glo=r(hCe," (MegatronBert model)"),hCe.forEach(t),Xlo=i(C),Dp=n(C,"LI",{});var pCe=s(Dp);rZ=n(pCe,"STRONG",{});var POr=s(rZ);Vlo=r(POr,"mobilebert"),POr.forEach(t),zlo=r(pCe," \u2014 "),kS=n(pCe,"A",{href:!0});var $Or=s(kS);Wlo=r($Or,"MobileBertModel"),$Or.forEach(t),Qlo=r(pCe," (MobileBERT model)"),pCe.forEach(t),Hlo=i(C),Np=n(C,"LI",{});var _Ce=s(Np);tZ=n(_Ce,"STRONG",{});var IOr=s(tZ);Ulo=r(IOr,"mpnet"),IOr.forEach(t),Jlo=r(_Ce," \u2014 "),RS=n(_Ce,"A",{href:!0});var jOr=s(RS);Ylo=r(jOr,"MPNetModel"),jOr.forEach(t),Klo=r(_Ce," (MPNet model)"),_Ce.forEach(t),Zlo=i(C),qp=n(C,"LI",{});var uCe=s(qp);aZ=n(uCe,"STRONG",{});var DOr=s(aZ);eio=r(DOr,"mt5"),DOr.forEach(t),oio=r(uCe," \u2014 "),SS=n(uCe,"A",{href:!0});var NOr=s(SS);rio=r(NOr,"MT5Model"),NOr.forEach(t),tio=r(uCe," (mT5 model)"),uCe.forEach(t),aio=i(C),Op=n(C,"LI",{});var bCe=s(Op);nZ=n(bCe,"STRONG",{});var qOr=s(nZ);nio=r(qOr,"nystromformer"),qOr.forEach(t),sio=r(bCe," \u2014 "),PS=n(bCe,"A",{href:!0});var OOr=s(PS);lio=r(OOr,"NystromformerModel"),OOr.forEach(t),iio=r(bCe," (Nystromformer model)"),bCe.forEach(t),dio=i(C),Gp=n(C,"LI",{});var vCe=s(Gp);sZ=n(vCe,"STRONG",{});var GOr=s(sZ);cio=r(GOr,"openai-gpt"),GOr.forEach(t),fio=r(vCe," \u2014 "),$S=n(vCe,"A",{href:!0});var XOr=s($S);mio=r(XOr,"OpenAIGPTModel"),XOr.forEach(t),gio=r(vCe," (OpenAI GPT model)"),vCe.forEach(t),hio=i(C),Xp=n(C,"LI",{});var TCe=s(Xp);lZ=n(TCe,"STRONG",{});var VOr=s(lZ);pio=r(VOr,"pegasus"),VOr.forEach(t),_io=r(TCe," \u2014 "),IS=n(TCe,"A",{href:!0});var zOr=s(IS);uio=r(zOr,"PegasusModel"),zOr.forEach(t),bio=r(TCe," (Pegasus model)"),TCe.forEach(t),vio=i(C),Vp=n(C,"LI",{});var FCe=s(Vp);iZ=n(FCe,"STRONG",{});var WOr=s(iZ);Tio=r(WOr,"perceiver"),WOr.forEach(t),Fio=r(FCe," \u2014 "),jS=n(FCe,"A",{href:!0});var QOr=s(jS);Cio=r(QOr,"PerceiverModel"),QOr.forEach(t),Mio=r(FCe," (Perceiver model)"),FCe.forEach(t),Eio=i(C),zp=n(C,"LI",{});var CCe=s(zp);dZ=n(CCe,"STRONG",{});var HOr=s(dZ);yio=r(HOr,"plbart"),HOr.forEach(t),wio=r(CCe," \u2014 "),DS=n(CCe,"A",{href:!0});var UOr=s(DS);Aio=r(UOr,"PLBartModel"),UOr.forEach(t),Lio=r(CCe," (PLBart model)"),CCe.forEach(t),Bio=i(C),Wp=n(C,"LI",{});var MCe=s(Wp);cZ=n(MCe,"STRONG",{});var JOr=s(cZ);xio=r(JOr,"poolformer"),JOr.forEach(t),kio=r(MCe," \u2014 "),NS=n(MCe,"A",{href:!0});var YOr=s(NS);Rio=r(YOr,"PoolFormerModel"),YOr.forEach(t),Sio=r(MCe," (PoolFormer model)"),MCe.forEach(t),Pio=i(C),Qp=n(C,"LI",{});var ECe=s(Qp);fZ=n(ECe,"STRONG",{});var KOr=s(fZ);$io=r(KOr,"prophetnet"),KOr.forEach(t),Iio=r(ECe," \u2014 "),qS=n(ECe,"A",{href:!0});var ZOr=s(qS);jio=r(ZOr,"ProphetNetModel"),ZOr.forEach(t),Dio=r(ECe," (ProphetNet model)"),ECe.forEach(t),Nio=i(C),Hp=n(C,"LI",{});var yCe=s(Hp);mZ=n(yCe,"STRONG",{});var eGr=s(mZ);qio=r(eGr,"qdqbert"),eGr.forEach(t),Oio=r(yCe," \u2014 "),OS=n(yCe,"A",{href:!0});var oGr=s(OS);Gio=r(oGr,"QDQBertModel"),oGr.forEach(t),Xio=r(yCe," (QDQBert model)"),yCe.forEach(t),Vio=i(C),Up=n(C,"LI",{});var wCe=s(Up);gZ=n(wCe,"STRONG",{});var rGr=s(gZ);zio=r(rGr,"reformer"),rGr.forEach(t),Wio=r(wCe," \u2014 "),GS=n(wCe,"A",{href:!0});var tGr=s(GS);Qio=r(tGr,"ReformerModel"),tGr.forEach(t),Hio=r(wCe," (Reformer model)"),wCe.forEach(t),Uio=i(C),Jp=n(C,"LI",{});var ACe=s(Jp);hZ=n(ACe,"STRONG",{});var aGr=s(hZ);Jio=r(aGr,"rembert"),aGr.forEach(t),Yio=r(ACe," \u2014 "),XS=n(ACe,"A",{href:!0});var nGr=s(XS);Kio=r(nGr,"RemBertModel"),nGr.forEach(t),Zio=r(ACe," (RemBERT model)"),ACe.forEach(t),edo=i(C),Yp=n(C,"LI",{});var LCe=s(Yp);pZ=n(LCe,"STRONG",{});var sGr=s(pZ);odo=r(sGr,"retribert"),sGr.forEach(t),rdo=r(LCe," \u2014 "),VS=n(LCe,"A",{href:!0});var lGr=s(VS);tdo=r(lGr,"RetriBertModel"),lGr.forEach(t),ado=r(LCe," (RetriBERT model)"),LCe.forEach(t),ndo=i(C),Kp=n(C,"LI",{});var BCe=s(Kp);_Z=n(BCe,"STRONG",{});var iGr=s(_Z);sdo=r(iGr,"roberta"),iGr.forEach(t),ldo=r(BCe," \u2014 "),zS=n(BCe,"A",{href:!0});var dGr=s(zS);ido=r(dGr,"RobertaModel"),dGr.forEach(t),ddo=r(BCe," (RoBERTa model)"),BCe.forEach(t),cdo=i(C),Zp=n(C,"LI",{});var xCe=s(Zp);uZ=n(xCe,"STRONG",{});var cGr=s(uZ);fdo=r(cGr,"roformer"),cGr.forEach(t),mdo=r(xCe," \u2014 "),WS=n(xCe,"A",{href:!0});var fGr=s(WS);gdo=r(fGr,"RoFormerModel"),fGr.forEach(t),hdo=r(xCe," (RoFormer model)"),xCe.forEach(t),pdo=i(C),e_=n(C,"LI",{});var kCe=s(e_);bZ=n(kCe,"STRONG",{});var mGr=s(bZ);_do=r(mGr,"segformer"),mGr.forEach(t),udo=r(kCe," \u2014 "),QS=n(kCe,"A",{href:!0});var gGr=s(QS);bdo=r(gGr,"SegformerModel"),gGr.forEach(t),vdo=r(kCe," (SegFormer model)"),kCe.forEach(t),Tdo=i(C),o_=n(C,"LI",{});var RCe=s(o_);vZ=n(RCe,"STRONG",{});var hGr=s(vZ);Fdo=r(hGr,"sew"),hGr.forEach(t),Cdo=r(RCe," \u2014 "),HS=n(RCe,"A",{href:!0});var pGr=s(HS);Mdo=r(pGr,"SEWModel"),pGr.forEach(t),Edo=r(RCe," (SEW model)"),RCe.forEach(t),ydo=i(C),r_=n(C,"LI",{});var SCe=s(r_);TZ=n(SCe,"STRONG",{});var _Gr=s(TZ);wdo=r(_Gr,"sew-d"),_Gr.forEach(t),Ado=r(SCe," \u2014 "),US=n(SCe,"A",{href:!0});var uGr=s(US);Ldo=r(uGr,"SEWDModel"),uGr.forEach(t),Bdo=r(SCe," (SEW-D model)"),SCe.forEach(t),xdo=i(C),t_=n(C,"LI",{});var PCe=s(t_);FZ=n(PCe,"STRONG",{});var bGr=s(FZ);kdo=r(bGr,"speech_to_text"),bGr.forEach(t),Rdo=r(PCe," \u2014 "),JS=n(PCe,"A",{href:!0});var vGr=s(JS);Sdo=r(vGr,"Speech2TextModel"),vGr.forEach(t),Pdo=r(PCe," (Speech2Text model)"),PCe.forEach(t),$do=i(C),a_=n(C,"LI",{});var $Ce=s(a_);CZ=n($Ce,"STRONG",{});var TGr=s(CZ);Ido=r(TGr,"splinter"),TGr.forEach(t),jdo=r($Ce," \u2014 "),YS=n($Ce,"A",{href:!0});var FGr=s(YS);Ddo=r(FGr,"SplinterModel"),FGr.forEach(t),Ndo=r($Ce," (Splinter model)"),$Ce.forEach(t),qdo=i(C),n_=n(C,"LI",{});var ICe=s(n_);MZ=n(ICe,"STRONG",{});var CGr=s(MZ);Odo=r(CGr,"squeezebert"),CGr.forEach(t),Gdo=r(ICe," \u2014 "),KS=n(ICe,"A",{href:!0});var MGr=s(KS);Xdo=r(MGr,"SqueezeBertModel"),MGr.forEach(t),Vdo=r(ICe," (SqueezeBERT model)"),ICe.forEach(t),zdo=i(C),s_=n(C,"LI",{});var jCe=s(s_);EZ=n(jCe,"STRONG",{});var EGr=s(EZ);Wdo=r(EGr,"swin"),EGr.forEach(t),Qdo=r(jCe," \u2014 "),ZS=n(jCe,"A",{href:!0});var yGr=s(ZS);Hdo=r(yGr,"SwinModel"),yGr.forEach(t),Udo=r(jCe," (Swin model)"),jCe.forEach(t),Jdo=i(C),l_=n(C,"LI",{});var DCe=s(l_);yZ=n(DCe,"STRONG",{});var wGr=s(yZ);Ydo=r(wGr,"t5"),wGr.forEach(t),Kdo=r(DCe," \u2014 "),eP=n(DCe,"A",{href:!0});var AGr=s(eP);Zdo=r(AGr,"T5Model"),AGr.forEach(t),eco=r(DCe," (T5 model)"),DCe.forEach(t),oco=i(C),i_=n(C,"LI",{});var NCe=s(i_);wZ=n(NCe,"STRONG",{});var LGr=s(wZ);rco=r(LGr,"tapas"),LGr.forEach(t),tco=r(NCe," \u2014 "),oP=n(NCe,"A",{href:!0});var BGr=s(oP);aco=r(BGr,"TapasModel"),BGr.forEach(t),nco=r(NCe," (TAPAS model)"),NCe.forEach(t),sco=i(C),d_=n(C,"LI",{});var qCe=s(d_);AZ=n(qCe,"STRONG",{});var xGr=s(AZ);lco=r(xGr,"transfo-xl"),xGr.forEach(t),ico=r(qCe," \u2014 "),rP=n(qCe,"A",{href:!0});var kGr=s(rP);dco=r(kGr,"TransfoXLModel"),kGr.forEach(t),cco=r(qCe," (Transformer-XL model)"),qCe.forEach(t),fco=i(C),c_=n(C,"LI",{});var OCe=s(c_);LZ=n(OCe,"STRONG",{});var RGr=s(LZ);mco=r(RGr,"unispeech"),RGr.forEach(t),gco=r(OCe," \u2014 "),tP=n(OCe,"A",{href:!0});var SGr=s(tP);hco=r(SGr,"UniSpeechModel"),SGr.forEach(t),pco=r(OCe," (UniSpeech model)"),OCe.forEach(t),_co=i(C),f_=n(C,"LI",{});var GCe=s(f_);BZ=n(GCe,"STRONG",{});var PGr=s(BZ);uco=r(PGr,"unispeech-sat"),PGr.forEach(t),bco=r(GCe," \u2014 "),aP=n(GCe,"A",{href:!0});var $Gr=s(aP);vco=r($Gr,"UniSpeechSatModel"),$Gr.forEach(t),Tco=r(GCe," (UniSpeechSat model)"),GCe.forEach(t),Fco=i(C),m_=n(C,"LI",{});var XCe=s(m_);xZ=n(XCe,"STRONG",{});var IGr=s(xZ);Cco=r(IGr,"vilt"),IGr.forEach(t),Mco=r(XCe," \u2014 "),nP=n(XCe,"A",{href:!0});var jGr=s(nP);Eco=r(jGr,"ViltModel"),jGr.forEach(t),yco=r(XCe," (ViLT model)"),XCe.forEach(t),wco=i(C),g_=n(C,"LI",{});var VCe=s(g_);kZ=n(VCe,"STRONG",{});var DGr=s(kZ);Aco=r(DGr,"vision-text-dual-encoder"),DGr.forEach(t),Lco=r(VCe," \u2014 "),sP=n(VCe,"A",{href:!0});var NGr=s(sP);Bco=r(NGr,"VisionTextDualEncoderModel"),NGr.forEach(t),xco=r(VCe," (VisionTextDualEncoder model)"),VCe.forEach(t),kco=i(C),h_=n(C,"LI",{});var zCe=s(h_);RZ=n(zCe,"STRONG",{});var qGr=s(RZ);Rco=r(qGr,"visual_bert"),qGr.forEach(t),Sco=r(zCe," \u2014 "),lP=n(zCe,"A",{href:!0});var OGr=s(lP);Pco=r(OGr,"VisualBertModel"),OGr.forEach(t),$co=r(zCe," (VisualBert model)"),zCe.forEach(t),Ico=i(C),p_=n(C,"LI",{});var WCe=s(p_);SZ=n(WCe,"STRONG",{});var GGr=s(SZ);jco=r(GGr,"vit"),GGr.forEach(t),Dco=r(WCe," \u2014 "),iP=n(WCe,"A",{href:!0});var XGr=s(iP);Nco=r(XGr,"ViTModel"),XGr.forEach(t),qco=r(WCe," (ViT model)"),WCe.forEach(t),Oco=i(C),__=n(C,"LI",{});var QCe=s(__);PZ=n(QCe,"STRONG",{});var VGr=s(PZ);Gco=r(VGr,"vit_mae"),VGr.forEach(t),Xco=r(QCe," \u2014 "),dP=n(QCe,"A",{href:!0});var zGr=s(dP);Vco=r(zGr,"ViTMAEModel"),zGr.forEach(t),zco=r(QCe," (ViTMAE model)"),QCe.forEach(t),Wco=i(C),u_=n(C,"LI",{});var HCe=s(u_);$Z=n(HCe,"STRONG",{});var WGr=s($Z);Qco=r(WGr,"wav2vec2"),WGr.forEach(t),Hco=r(HCe," \u2014 "),cP=n(HCe,"A",{href:!0});var QGr=s(cP);Uco=r(QGr,"Wav2Vec2Model"),QGr.forEach(t),Jco=r(HCe," (Wav2Vec2 model)"),HCe.forEach(t),Yco=i(C),b_=n(C,"LI",{});var UCe=s(b_);IZ=n(UCe,"STRONG",{});var HGr=s(IZ);Kco=r(HGr,"wavlm"),HGr.forEach(t),Zco=r(UCe," \u2014 "),fP=n(UCe,"A",{href:!0});var UGr=s(fP);efo=r(UGr,"WavLMModel"),UGr.forEach(t),ofo=r(UCe," (WavLM model)"),UCe.forEach(t),rfo=i(C),v_=n(C,"LI",{});var JCe=s(v_);jZ=n(JCe,"STRONG",{});var JGr=s(jZ);tfo=r(JGr,"xglm"),JGr.forEach(t),afo=r(JCe," \u2014 "),mP=n(JCe,"A",{href:!0});var YGr=s(mP);nfo=r(YGr,"XGLMModel"),YGr.forEach(t),sfo=r(JCe," (XGLM model)"),JCe.forEach(t),lfo=i(C),T_=n(C,"LI",{});var YCe=s(T_);DZ=n(YCe,"STRONG",{});var KGr=s(DZ);ifo=r(KGr,"xlm"),KGr.forEach(t),dfo=r(YCe," \u2014 "),gP=n(YCe,"A",{href:!0});var ZGr=s(gP);cfo=r(ZGr,"XLMModel"),ZGr.forEach(t),ffo=r(YCe," (XLM model)"),YCe.forEach(t),mfo=i(C),F_=n(C,"LI",{});var KCe=s(F_);NZ=n(KCe,"STRONG",{});var eXr=s(NZ);gfo=r(eXr,"xlm-prophetnet"),eXr.forEach(t),hfo=r(KCe," \u2014 "),hP=n(KCe,"A",{href:!0});var oXr=s(hP);pfo=r(oXr,"XLMProphetNetModel"),oXr.forEach(t),_fo=r(KCe," (XLMProphetNet model)"),KCe.forEach(t),ufo=i(C),C_=n(C,"LI",{});var ZCe=s(C_);qZ=n(ZCe,"STRONG",{});var rXr=s(qZ);bfo=r(rXr,"xlm-roberta"),rXr.forEach(t),vfo=r(ZCe," \u2014 "),pP=n(ZCe,"A",{href:!0});var tXr=s(pP);Tfo=r(tXr,"XLMRobertaModel"),tXr.forEach(t),Ffo=r(ZCe," (XLM-RoBERTa model)"),ZCe.forEach(t),Cfo=i(C),M_=n(C,"LI",{});var eMe=s(M_);OZ=n(eMe,"STRONG",{});var aXr=s(OZ);Mfo=r(aXr,"xlm-roberta-xl"),aXr.forEach(t),Efo=r(eMe," \u2014 "),_P=n(eMe,"A",{href:!0});var nXr=s(_P);yfo=r(nXr,"XLMRobertaXLModel"),nXr.forEach(t),wfo=r(eMe," (XLM-RoBERTa-XL model)"),eMe.forEach(t),Afo=i(C),E_=n(C,"LI",{});var oMe=s(E_);GZ=n(oMe,"STRONG",{});var sXr=s(GZ);Lfo=r(sXr,"xlnet"),sXr.forEach(t),Bfo=r(oMe," \u2014 "),uP=n(oMe,"A",{href:!0});var lXr=s(uP);xfo=r(lXr,"XLNetModel"),lXr.forEach(t),kfo=r(oMe," (XLNet model)"),oMe.forEach(t),Rfo=i(C),y_=n(C,"LI",{});var rMe=s(y_);XZ=n(rMe,"STRONG",{});var iXr=s(XZ);Sfo=r(iXr,"yoso"),iXr.forEach(t),Pfo=r(rMe," \u2014 "),bP=n(rMe,"A",{href:!0});var dXr=s(bP);$fo=r(dXr,"YosoModel"),dXr.forEach(t),Ifo=r(rMe," (YOSO model)"),rMe.forEach(t),C.forEach(t),jfo=i(Xt),w_=n(Xt,"P",{});var tMe=s(w_);Dfo=r(tMe,"The model is set in evaluation mode by default using "),VZ=n(tMe,"CODE",{});var cXr=s(VZ);Nfo=r(cXr,"model.eval()"),cXr.forEach(t),qfo=r(tMe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zZ=n(tMe,"CODE",{});var fXr=s(zZ);Ofo=r(fXr,"model.train()"),fXr.forEach(t),tMe.forEach(t),Gfo=i(Xt),WZ=n(Xt,"P",{});var mXr=s(WZ);Xfo=r(mXr,"Examples:"),mXr.forEach(t),Vfo=i(Xt),m(z4.$$.fragment,Xt),Xt.forEach(t),Ys.forEach(t),tke=i(d),ld=n(d,"H2",{class:!0});var hSe=s(ld);A_=n(hSe,"A",{id:!0,class:!0,href:!0});var gXr=s(A_);QZ=n(gXr,"SPAN",{});var hXr=s(QZ);m(W4.$$.fragment,hXr),hXr.forEach(t),gXr.forEach(t),zfo=i(hSe),HZ=n(hSe,"SPAN",{});var pXr=s(HZ);Wfo=r(pXr,"AutoModelForPreTraining"),pXr.forEach(t),hSe.forEach(t),ake=i(d),Ko=n(d,"DIV",{class:!0});var Zs=s(Ko);m(Q4.$$.fragment,Zs),Qfo=i(Zs),id=n(Zs,"P",{});var Wz=s(id);Hfo=r(Wz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),UZ=n(Wz,"CODE",{});var _Xr=s(UZ);Ufo=r(_Xr,"from_pretrained()"),_Xr.forEach(t),Jfo=r(Wz,"class method or the "),JZ=n(Wz,"CODE",{});var uXr=s(JZ);Yfo=r(uXr,"from_config()"),uXr.forEach(t),Kfo=r(Wz,`class
method.`),Wz.forEach(t),Zfo=i(Zs),H4=n(Zs,"P",{});var pSe=s(H4);emo=r(pSe,"This class cannot be instantiated directly using "),YZ=n(pSe,"CODE",{});var bXr=s(YZ);omo=r(bXr,"__init__()"),bXr.forEach(t),rmo=r(pSe," (throws an error)."),pSe.forEach(t),tmo=i(Zs),Qr=n(Zs,"DIV",{class:!0});var el=s(Qr);m(U4.$$.fragment,el),amo=i(el),KZ=n(el,"P",{});var vXr=s(KZ);nmo=r(vXr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),vXr.forEach(t),smo=i(el),dd=n(el,"P",{});var Qz=s(dd);lmo=r(Qz,`Note:
Loading a model from its configuration file does `),ZZ=n(Qz,"STRONG",{});var TXr=s(ZZ);imo=r(TXr,"not"),TXr.forEach(t),dmo=r(Qz,` load the model weights. It only affects the
model\u2019s configuration. Use `),eee=n(Qz,"CODE",{});var FXr=s(eee);cmo=r(FXr,"from_pretrained()"),FXr.forEach(t),fmo=r(Qz,"to load the model weights."),Qz.forEach(t),mmo=i(el),oee=n(el,"P",{});var CXr=s(oee);gmo=r(CXr,"Examples:"),CXr.forEach(t),hmo=i(el),m(J4.$$.fragment,el),el.forEach(t),pmo=i(Zs),De=n(Zs,"DIV",{class:!0});var Vt=s(De);m(Y4.$$.fragment,Vt),_mo=i(Vt),ree=n(Vt,"P",{});var MXr=s(ree);umo=r(MXr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),MXr.forEach(t),bmo=i(Vt),Ua=n(Vt,"P",{});var dM=s(Ua);vmo=r(dM,"The model class to instantiate is selected based on the "),tee=n(dM,"CODE",{});var EXr=s(tee);Tmo=r(EXr,"model_type"),EXr.forEach(t),Fmo=r(dM,` property of the config object (either
passed as an argument or loaded from `),aee=n(dM,"CODE",{});var yXr=s(aee);Cmo=r(yXr,"pretrained_model_name_or_path"),yXr.forEach(t),Mmo=r(dM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nee=n(dM,"CODE",{});var wXr=s(nee);Emo=r(wXr,"pretrained_model_name_or_path"),wXr.forEach(t),ymo=r(dM,":"),dM.forEach(t),wmo=i(Vt),k=n(Vt,"UL",{});var S=s(k);L_=n(S,"LI",{});var aMe=s(L_);see=n(aMe,"STRONG",{});var AXr=s(see);Amo=r(AXr,"albert"),AXr.forEach(t),Lmo=r(aMe," \u2014 "),vP=n(aMe,"A",{href:!0});var LXr=s(vP);Bmo=r(LXr,"AlbertForPreTraining"),LXr.forEach(t),xmo=r(aMe," (ALBERT model)"),aMe.forEach(t),kmo=i(S),B_=n(S,"LI",{});var nMe=s(B_);lee=n(nMe,"STRONG",{});var BXr=s(lee);Rmo=r(BXr,"bart"),BXr.forEach(t),Smo=r(nMe," \u2014 "),TP=n(nMe,"A",{href:!0});var xXr=s(TP);Pmo=r(xXr,"BartForConditionalGeneration"),xXr.forEach(t),$mo=r(nMe," (BART model)"),nMe.forEach(t),Imo=i(S),x_=n(S,"LI",{});var sMe=s(x_);iee=n(sMe,"STRONG",{});var kXr=s(iee);jmo=r(kXr,"bert"),kXr.forEach(t),Dmo=r(sMe," \u2014 "),FP=n(sMe,"A",{href:!0});var RXr=s(FP);Nmo=r(RXr,"BertForPreTraining"),RXr.forEach(t),qmo=r(sMe," (BERT model)"),sMe.forEach(t),Omo=i(S),k_=n(S,"LI",{});var lMe=s(k_);dee=n(lMe,"STRONG",{});var SXr=s(dee);Gmo=r(SXr,"big_bird"),SXr.forEach(t),Xmo=r(lMe," \u2014 "),CP=n(lMe,"A",{href:!0});var PXr=s(CP);Vmo=r(PXr,"BigBirdForPreTraining"),PXr.forEach(t),zmo=r(lMe," (BigBird model)"),lMe.forEach(t),Wmo=i(S),R_=n(S,"LI",{});var iMe=s(R_);cee=n(iMe,"STRONG",{});var $Xr=s(cee);Qmo=r($Xr,"camembert"),$Xr.forEach(t),Hmo=r(iMe," \u2014 "),MP=n(iMe,"A",{href:!0});var IXr=s(MP);Umo=r(IXr,"CamembertForMaskedLM"),IXr.forEach(t),Jmo=r(iMe," (CamemBERT model)"),iMe.forEach(t),Ymo=i(S),S_=n(S,"LI",{});var dMe=s(S_);fee=n(dMe,"STRONG",{});var jXr=s(fee);Kmo=r(jXr,"ctrl"),jXr.forEach(t),Zmo=r(dMe," \u2014 "),EP=n(dMe,"A",{href:!0});var DXr=s(EP);ego=r(DXr,"CTRLLMHeadModel"),DXr.forEach(t),ogo=r(dMe," (CTRL model)"),dMe.forEach(t),rgo=i(S),P_=n(S,"LI",{});var cMe=s(P_);mee=n(cMe,"STRONG",{});var NXr=s(mee);tgo=r(NXr,"data2vec-text"),NXr.forEach(t),ago=r(cMe," \u2014 "),yP=n(cMe,"A",{href:!0});var qXr=s(yP);ngo=r(qXr,"Data2VecTextForMaskedLM"),qXr.forEach(t),sgo=r(cMe," (Data2VecText model)"),cMe.forEach(t),lgo=i(S),$_=n(S,"LI",{});var fMe=s($_);gee=n(fMe,"STRONG",{});var OXr=s(gee);igo=r(OXr,"deberta"),OXr.forEach(t),dgo=r(fMe," \u2014 "),wP=n(fMe,"A",{href:!0});var GXr=s(wP);cgo=r(GXr,"DebertaForMaskedLM"),GXr.forEach(t),fgo=r(fMe," (DeBERTa model)"),fMe.forEach(t),mgo=i(S),I_=n(S,"LI",{});var mMe=s(I_);hee=n(mMe,"STRONG",{});var XXr=s(hee);ggo=r(XXr,"deberta-v2"),XXr.forEach(t),hgo=r(mMe," \u2014 "),AP=n(mMe,"A",{href:!0});var VXr=s(AP);pgo=r(VXr,"DebertaV2ForMaskedLM"),VXr.forEach(t),_go=r(mMe," (DeBERTa-v2 model)"),mMe.forEach(t),ugo=i(S),j_=n(S,"LI",{});var gMe=s(j_);pee=n(gMe,"STRONG",{});var zXr=s(pee);bgo=r(zXr,"distilbert"),zXr.forEach(t),vgo=r(gMe," \u2014 "),LP=n(gMe,"A",{href:!0});var WXr=s(LP);Tgo=r(WXr,"DistilBertForMaskedLM"),WXr.forEach(t),Fgo=r(gMe," (DistilBERT model)"),gMe.forEach(t),Cgo=i(S),D_=n(S,"LI",{});var hMe=s(D_);_ee=n(hMe,"STRONG",{});var QXr=s(_ee);Mgo=r(QXr,"electra"),QXr.forEach(t),Ego=r(hMe," \u2014 "),BP=n(hMe,"A",{href:!0});var HXr=s(BP);ygo=r(HXr,"ElectraForPreTraining"),HXr.forEach(t),wgo=r(hMe," (ELECTRA model)"),hMe.forEach(t),Ago=i(S),N_=n(S,"LI",{});var pMe=s(N_);uee=n(pMe,"STRONG",{});var UXr=s(uee);Lgo=r(UXr,"flaubert"),UXr.forEach(t),Bgo=r(pMe," \u2014 "),xP=n(pMe,"A",{href:!0});var JXr=s(xP);xgo=r(JXr,"FlaubertWithLMHeadModel"),JXr.forEach(t),kgo=r(pMe," (FlauBERT model)"),pMe.forEach(t),Rgo=i(S),q_=n(S,"LI",{});var _Me=s(q_);bee=n(_Me,"STRONG",{});var YXr=s(bee);Sgo=r(YXr,"fnet"),YXr.forEach(t),Pgo=r(_Me," \u2014 "),kP=n(_Me,"A",{href:!0});var KXr=s(kP);$go=r(KXr,"FNetForPreTraining"),KXr.forEach(t),Igo=r(_Me," (FNet model)"),_Me.forEach(t),jgo=i(S),O_=n(S,"LI",{});var uMe=s(O_);vee=n(uMe,"STRONG",{});var ZXr=s(vee);Dgo=r(ZXr,"fsmt"),ZXr.forEach(t),Ngo=r(uMe," \u2014 "),RP=n(uMe,"A",{href:!0});var eVr=s(RP);qgo=r(eVr,"FSMTForConditionalGeneration"),eVr.forEach(t),Ogo=r(uMe," (FairSeq Machine-Translation model)"),uMe.forEach(t),Ggo=i(S),G_=n(S,"LI",{});var bMe=s(G_);Tee=n(bMe,"STRONG",{});var oVr=s(Tee);Xgo=r(oVr,"funnel"),oVr.forEach(t),Vgo=r(bMe," \u2014 "),SP=n(bMe,"A",{href:!0});var rVr=s(SP);zgo=r(rVr,"FunnelForPreTraining"),rVr.forEach(t),Wgo=r(bMe," (Funnel Transformer model)"),bMe.forEach(t),Qgo=i(S),X_=n(S,"LI",{});var vMe=s(X_);Fee=n(vMe,"STRONG",{});var tVr=s(Fee);Hgo=r(tVr,"gpt2"),tVr.forEach(t),Ugo=r(vMe," \u2014 "),PP=n(vMe,"A",{href:!0});var aVr=s(PP);Jgo=r(aVr,"GPT2LMHeadModel"),aVr.forEach(t),Ygo=r(vMe," (OpenAI GPT-2 model)"),vMe.forEach(t),Kgo=i(S),V_=n(S,"LI",{});var TMe=s(V_);Cee=n(TMe,"STRONG",{});var nVr=s(Cee);Zgo=r(nVr,"ibert"),nVr.forEach(t),eho=r(TMe," \u2014 "),$P=n(TMe,"A",{href:!0});var sVr=s($P);oho=r(sVr,"IBertForMaskedLM"),sVr.forEach(t),rho=r(TMe," (I-BERT model)"),TMe.forEach(t),tho=i(S),z_=n(S,"LI",{});var FMe=s(z_);Mee=n(FMe,"STRONG",{});var lVr=s(Mee);aho=r(lVr,"layoutlm"),lVr.forEach(t),nho=r(FMe," \u2014 "),IP=n(FMe,"A",{href:!0});var iVr=s(IP);sho=r(iVr,"LayoutLMForMaskedLM"),iVr.forEach(t),lho=r(FMe," (LayoutLM model)"),FMe.forEach(t),iho=i(S),W_=n(S,"LI",{});var CMe=s(W_);Eee=n(CMe,"STRONG",{});var dVr=s(Eee);dho=r(dVr,"longformer"),dVr.forEach(t),cho=r(CMe," \u2014 "),jP=n(CMe,"A",{href:!0});var cVr=s(jP);fho=r(cVr,"LongformerForMaskedLM"),cVr.forEach(t),mho=r(CMe," (Longformer model)"),CMe.forEach(t),gho=i(S),Q_=n(S,"LI",{});var MMe=s(Q_);yee=n(MMe,"STRONG",{});var fVr=s(yee);hho=r(fVr,"lxmert"),fVr.forEach(t),pho=r(MMe," \u2014 "),DP=n(MMe,"A",{href:!0});var mVr=s(DP);_ho=r(mVr,"LxmertForPreTraining"),mVr.forEach(t),uho=r(MMe," (LXMERT model)"),MMe.forEach(t),bho=i(S),H_=n(S,"LI",{});var EMe=s(H_);wee=n(EMe,"STRONG",{});var gVr=s(wee);vho=r(gVr,"megatron-bert"),gVr.forEach(t),Tho=r(EMe," \u2014 "),NP=n(EMe,"A",{href:!0});var hVr=s(NP);Fho=r(hVr,"MegatronBertForPreTraining"),hVr.forEach(t),Cho=r(EMe," (MegatronBert model)"),EMe.forEach(t),Mho=i(S),U_=n(S,"LI",{});var yMe=s(U_);Aee=n(yMe,"STRONG",{});var pVr=s(Aee);Eho=r(pVr,"mobilebert"),pVr.forEach(t),yho=r(yMe," \u2014 "),qP=n(yMe,"A",{href:!0});var _Vr=s(qP);who=r(_Vr,"MobileBertForPreTraining"),_Vr.forEach(t),Aho=r(yMe," (MobileBERT model)"),yMe.forEach(t),Lho=i(S),J_=n(S,"LI",{});var wMe=s(J_);Lee=n(wMe,"STRONG",{});var uVr=s(Lee);Bho=r(uVr,"mpnet"),uVr.forEach(t),xho=r(wMe," \u2014 "),OP=n(wMe,"A",{href:!0});var bVr=s(OP);kho=r(bVr,"MPNetForMaskedLM"),bVr.forEach(t),Rho=r(wMe," (MPNet model)"),wMe.forEach(t),Sho=i(S),Y_=n(S,"LI",{});var AMe=s(Y_);Bee=n(AMe,"STRONG",{});var vVr=s(Bee);Pho=r(vVr,"openai-gpt"),vVr.forEach(t),$ho=r(AMe," \u2014 "),GP=n(AMe,"A",{href:!0});var TVr=s(GP);Iho=r(TVr,"OpenAIGPTLMHeadModel"),TVr.forEach(t),jho=r(AMe," (OpenAI GPT model)"),AMe.forEach(t),Dho=i(S),K_=n(S,"LI",{});var LMe=s(K_);xee=n(LMe,"STRONG",{});var FVr=s(xee);Nho=r(FVr,"retribert"),FVr.forEach(t),qho=r(LMe," \u2014 "),XP=n(LMe,"A",{href:!0});var CVr=s(XP);Oho=r(CVr,"RetriBertModel"),CVr.forEach(t),Gho=r(LMe," (RetriBERT model)"),LMe.forEach(t),Xho=i(S),Z_=n(S,"LI",{});var BMe=s(Z_);kee=n(BMe,"STRONG",{});var MVr=s(kee);Vho=r(MVr,"roberta"),MVr.forEach(t),zho=r(BMe," \u2014 "),VP=n(BMe,"A",{href:!0});var EVr=s(VP);Who=r(EVr,"RobertaForMaskedLM"),EVr.forEach(t),Qho=r(BMe," (RoBERTa model)"),BMe.forEach(t),Hho=i(S),eu=n(S,"LI",{});var xMe=s(eu);Ree=n(xMe,"STRONG",{});var yVr=s(Ree);Uho=r(yVr,"squeezebert"),yVr.forEach(t),Jho=r(xMe," \u2014 "),zP=n(xMe,"A",{href:!0});var wVr=s(zP);Yho=r(wVr,"SqueezeBertForMaskedLM"),wVr.forEach(t),Kho=r(xMe," (SqueezeBERT model)"),xMe.forEach(t),Zho=i(S),ou=n(S,"LI",{});var kMe=s(ou);See=n(kMe,"STRONG",{});var AVr=s(See);epo=r(AVr,"t5"),AVr.forEach(t),opo=r(kMe," \u2014 "),WP=n(kMe,"A",{href:!0});var LVr=s(WP);rpo=r(LVr,"T5ForConditionalGeneration"),LVr.forEach(t),tpo=r(kMe," (T5 model)"),kMe.forEach(t),apo=i(S),ru=n(S,"LI",{});var RMe=s(ru);Pee=n(RMe,"STRONG",{});var BVr=s(Pee);npo=r(BVr,"tapas"),BVr.forEach(t),spo=r(RMe," \u2014 "),QP=n(RMe,"A",{href:!0});var xVr=s(QP);lpo=r(xVr,"TapasForMaskedLM"),xVr.forEach(t),ipo=r(RMe," (TAPAS model)"),RMe.forEach(t),dpo=i(S),tu=n(S,"LI",{});var SMe=s(tu);$ee=n(SMe,"STRONG",{});var kVr=s($ee);cpo=r(kVr,"transfo-xl"),kVr.forEach(t),fpo=r(SMe," \u2014 "),HP=n(SMe,"A",{href:!0});var RVr=s(HP);mpo=r(RVr,"TransfoXLLMHeadModel"),RVr.forEach(t),gpo=r(SMe," (Transformer-XL model)"),SMe.forEach(t),hpo=i(S),au=n(S,"LI",{});var PMe=s(au);Iee=n(PMe,"STRONG",{});var SVr=s(Iee);ppo=r(SVr,"unispeech"),SVr.forEach(t),_po=r(PMe," \u2014 "),UP=n(PMe,"A",{href:!0});var PVr=s(UP);upo=r(PVr,"UniSpeechForPreTraining"),PVr.forEach(t),bpo=r(PMe," (UniSpeech model)"),PMe.forEach(t),vpo=i(S),nu=n(S,"LI",{});var $Me=s(nu);jee=n($Me,"STRONG",{});var $Vr=s(jee);Tpo=r($Vr,"unispeech-sat"),$Vr.forEach(t),Fpo=r($Me," \u2014 "),JP=n($Me,"A",{href:!0});var IVr=s(JP);Cpo=r(IVr,"UniSpeechSatForPreTraining"),IVr.forEach(t),Mpo=r($Me," (UniSpeechSat model)"),$Me.forEach(t),Epo=i(S),su=n(S,"LI",{});var IMe=s(su);Dee=n(IMe,"STRONG",{});var jVr=s(Dee);ypo=r(jVr,"visual_bert"),jVr.forEach(t),wpo=r(IMe," \u2014 "),YP=n(IMe,"A",{href:!0});var DVr=s(YP);Apo=r(DVr,"VisualBertForPreTraining"),DVr.forEach(t),Lpo=r(IMe," (VisualBert model)"),IMe.forEach(t),Bpo=i(S),lu=n(S,"LI",{});var jMe=s(lu);Nee=n(jMe,"STRONG",{});var NVr=s(Nee);xpo=r(NVr,"vit_mae"),NVr.forEach(t),kpo=r(jMe," \u2014 "),KP=n(jMe,"A",{href:!0});var qVr=s(KP);Rpo=r(qVr,"ViTMAEForPreTraining"),qVr.forEach(t),Spo=r(jMe," (ViTMAE model)"),jMe.forEach(t),Ppo=i(S),iu=n(S,"LI",{});var DMe=s(iu);qee=n(DMe,"STRONG",{});var OVr=s(qee);$po=r(OVr,"wav2vec2"),OVr.forEach(t),Ipo=r(DMe," \u2014 "),ZP=n(DMe,"A",{href:!0});var GVr=s(ZP);jpo=r(GVr,"Wav2Vec2ForPreTraining"),GVr.forEach(t),Dpo=r(DMe," (Wav2Vec2 model)"),DMe.forEach(t),Npo=i(S),du=n(S,"LI",{});var NMe=s(du);Oee=n(NMe,"STRONG",{});var XVr=s(Oee);qpo=r(XVr,"xlm"),XVr.forEach(t),Opo=r(NMe," \u2014 "),e$=n(NMe,"A",{href:!0});var VVr=s(e$);Gpo=r(VVr,"XLMWithLMHeadModel"),VVr.forEach(t),Xpo=r(NMe," (XLM model)"),NMe.forEach(t),Vpo=i(S),cu=n(S,"LI",{});var qMe=s(cu);Gee=n(qMe,"STRONG",{});var zVr=s(Gee);zpo=r(zVr,"xlm-roberta"),zVr.forEach(t),Wpo=r(qMe," \u2014 "),o$=n(qMe,"A",{href:!0});var WVr=s(o$);Qpo=r(WVr,"XLMRobertaForMaskedLM"),WVr.forEach(t),Hpo=r(qMe," (XLM-RoBERTa model)"),qMe.forEach(t),Upo=i(S),fu=n(S,"LI",{});var OMe=s(fu);Xee=n(OMe,"STRONG",{});var QVr=s(Xee);Jpo=r(QVr,"xlm-roberta-xl"),QVr.forEach(t),Ypo=r(OMe," \u2014 "),r$=n(OMe,"A",{href:!0});var HVr=s(r$);Kpo=r(HVr,"XLMRobertaXLForMaskedLM"),HVr.forEach(t),Zpo=r(OMe," (XLM-RoBERTa-XL model)"),OMe.forEach(t),e_o=i(S),mu=n(S,"LI",{});var GMe=s(mu);Vee=n(GMe,"STRONG",{});var UVr=s(Vee);o_o=r(UVr,"xlnet"),UVr.forEach(t),r_o=r(GMe," \u2014 "),t$=n(GMe,"A",{href:!0});var JVr=s(t$);t_o=r(JVr,"XLNetLMHeadModel"),JVr.forEach(t),a_o=r(GMe," (XLNet model)"),GMe.forEach(t),S.forEach(t),n_o=i(Vt),gu=n(Vt,"P",{});var XMe=s(gu);s_o=r(XMe,"The model is set in evaluation mode by default using "),zee=n(XMe,"CODE",{});var YVr=s(zee);l_o=r(YVr,"model.eval()"),YVr.forEach(t),i_o=r(XMe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wee=n(XMe,"CODE",{});var KVr=s(Wee);d_o=r(KVr,"model.train()"),KVr.forEach(t),XMe.forEach(t),c_o=i(Vt),Qee=n(Vt,"P",{});var ZVr=s(Qee);f_o=r(ZVr,"Examples:"),ZVr.forEach(t),m_o=i(Vt),m(K4.$$.fragment,Vt),Vt.forEach(t),Zs.forEach(t),nke=i(d),cd=n(d,"H2",{class:!0});var _Se=s(cd);hu=n(_Se,"A",{id:!0,class:!0,href:!0});var ezr=s(hu);Hee=n(ezr,"SPAN",{});var ozr=s(Hee);m(Z4.$$.fragment,ozr),ozr.forEach(t),ezr.forEach(t),g_o=i(_Se),Uee=n(_Se,"SPAN",{});var rzr=s(Uee);h_o=r(rzr,"AutoModelForCausalLM"),rzr.forEach(t),_Se.forEach(t),ske=i(d),Zo=n(d,"DIV",{class:!0});var ol=s(Zo);m(eE.$$.fragment,ol),p_o=i(ol),fd=n(ol,"P",{});var Hz=s(fd);__o=r(Hz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Jee=n(Hz,"CODE",{});var tzr=s(Jee);u_o=r(tzr,"from_pretrained()"),tzr.forEach(t),b_o=r(Hz,"class method or the "),Yee=n(Hz,"CODE",{});var azr=s(Yee);v_o=r(azr,"from_config()"),azr.forEach(t),T_o=r(Hz,`class
method.`),Hz.forEach(t),F_o=i(ol),oE=n(ol,"P",{});var uSe=s(oE);C_o=r(uSe,"This class cannot be instantiated directly using "),Kee=n(uSe,"CODE",{});var nzr=s(Kee);M_o=r(nzr,"__init__()"),nzr.forEach(t),E_o=r(uSe," (throws an error)."),uSe.forEach(t),y_o=i(ol),Hr=n(ol,"DIV",{class:!0});var rl=s(Hr);m(rE.$$.fragment,rl),w_o=i(rl),Zee=n(rl,"P",{});var szr=s(Zee);A_o=r(szr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),szr.forEach(t),L_o=i(rl),md=n(rl,"P",{});var Uz=s(md);B_o=r(Uz,`Note:
Loading a model from its configuration file does `),eoe=n(Uz,"STRONG",{});var lzr=s(eoe);x_o=r(lzr,"not"),lzr.forEach(t),k_o=r(Uz,` load the model weights. It only affects the
model\u2019s configuration. Use `),ooe=n(Uz,"CODE",{});var izr=s(ooe);R_o=r(izr,"from_pretrained()"),izr.forEach(t),S_o=r(Uz,"to load the model weights."),Uz.forEach(t),P_o=i(rl),roe=n(rl,"P",{});var dzr=s(roe);$_o=r(dzr,"Examples:"),dzr.forEach(t),I_o=i(rl),m(tE.$$.fragment,rl),rl.forEach(t),j_o=i(ol),Ne=n(ol,"DIV",{class:!0});var zt=s(Ne);m(aE.$$.fragment,zt),D_o=i(zt),toe=n(zt,"P",{});var czr=s(toe);N_o=r(czr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),czr.forEach(t),q_o=i(zt),Ja=n(zt,"P",{});var cM=s(Ja);O_o=r(cM,"The model class to instantiate is selected based on the "),aoe=n(cM,"CODE",{});var fzr=s(aoe);G_o=r(fzr,"model_type"),fzr.forEach(t),X_o=r(cM,` property of the config object (either
passed as an argument or loaded from `),noe=n(cM,"CODE",{});var mzr=s(noe);V_o=r(mzr,"pretrained_model_name_or_path"),mzr.forEach(t),z_o=r(cM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),soe=n(cM,"CODE",{});var gzr=s(soe);W_o=r(gzr,"pretrained_model_name_or_path"),gzr.forEach(t),Q_o=r(cM,":"),cM.forEach(t),H_o=i(zt),$=n(zt,"UL",{});var j=s($);pu=n(j,"LI",{});var VMe=s(pu);loe=n(VMe,"STRONG",{});var hzr=s(loe);U_o=r(hzr,"bart"),hzr.forEach(t),J_o=r(VMe," \u2014 "),a$=n(VMe,"A",{href:!0});var pzr=s(a$);Y_o=r(pzr,"BartForCausalLM"),pzr.forEach(t),K_o=r(VMe," (BART model)"),VMe.forEach(t),Z_o=i(j),_u=n(j,"LI",{});var zMe=s(_u);ioe=n(zMe,"STRONG",{});var _zr=s(ioe);euo=r(_zr,"bert"),_zr.forEach(t),ouo=r(zMe," \u2014 "),n$=n(zMe,"A",{href:!0});var uzr=s(n$);ruo=r(uzr,"BertLMHeadModel"),uzr.forEach(t),tuo=r(zMe," (BERT model)"),zMe.forEach(t),auo=i(j),uu=n(j,"LI",{});var WMe=s(uu);doe=n(WMe,"STRONG",{});var bzr=s(doe);nuo=r(bzr,"bert-generation"),bzr.forEach(t),suo=r(WMe," \u2014 "),s$=n(WMe,"A",{href:!0});var vzr=s(s$);luo=r(vzr,"BertGenerationDecoder"),vzr.forEach(t),iuo=r(WMe," (Bert Generation model)"),WMe.forEach(t),duo=i(j),bu=n(j,"LI",{});var QMe=s(bu);coe=n(QMe,"STRONG",{});var Tzr=s(coe);cuo=r(Tzr,"big_bird"),Tzr.forEach(t),fuo=r(QMe," \u2014 "),l$=n(QMe,"A",{href:!0});var Fzr=s(l$);muo=r(Fzr,"BigBirdForCausalLM"),Fzr.forEach(t),guo=r(QMe," (BigBird model)"),QMe.forEach(t),huo=i(j),vu=n(j,"LI",{});var HMe=s(vu);foe=n(HMe,"STRONG",{});var Czr=s(foe);puo=r(Czr,"bigbird_pegasus"),Czr.forEach(t),_uo=r(HMe," \u2014 "),i$=n(HMe,"A",{href:!0});var Mzr=s(i$);uuo=r(Mzr,"BigBirdPegasusForCausalLM"),Mzr.forEach(t),buo=r(HMe," (BigBirdPegasus model)"),HMe.forEach(t),vuo=i(j),Tu=n(j,"LI",{});var UMe=s(Tu);moe=n(UMe,"STRONG",{});var Ezr=s(moe);Tuo=r(Ezr,"blenderbot"),Ezr.forEach(t),Fuo=r(UMe," \u2014 "),d$=n(UMe,"A",{href:!0});var yzr=s(d$);Cuo=r(yzr,"BlenderbotForCausalLM"),yzr.forEach(t),Muo=r(UMe," (Blenderbot model)"),UMe.forEach(t),Euo=i(j),Fu=n(j,"LI",{});var JMe=s(Fu);goe=n(JMe,"STRONG",{});var wzr=s(goe);yuo=r(wzr,"blenderbot-small"),wzr.forEach(t),wuo=r(JMe," \u2014 "),c$=n(JMe,"A",{href:!0});var Azr=s(c$);Auo=r(Azr,"BlenderbotSmallForCausalLM"),Azr.forEach(t),Luo=r(JMe," (BlenderbotSmall model)"),JMe.forEach(t),Buo=i(j),Cu=n(j,"LI",{});var YMe=s(Cu);hoe=n(YMe,"STRONG",{});var Lzr=s(hoe);xuo=r(Lzr,"camembert"),Lzr.forEach(t),kuo=r(YMe," \u2014 "),f$=n(YMe,"A",{href:!0});var Bzr=s(f$);Ruo=r(Bzr,"CamembertForCausalLM"),Bzr.forEach(t),Suo=r(YMe," (CamemBERT model)"),YMe.forEach(t),Puo=i(j),Mu=n(j,"LI",{});var KMe=s(Mu);poe=n(KMe,"STRONG",{});var xzr=s(poe);$uo=r(xzr,"ctrl"),xzr.forEach(t),Iuo=r(KMe," \u2014 "),m$=n(KMe,"A",{href:!0});var kzr=s(m$);juo=r(kzr,"CTRLLMHeadModel"),kzr.forEach(t),Duo=r(KMe," (CTRL model)"),KMe.forEach(t),Nuo=i(j),Eu=n(j,"LI",{});var ZMe=s(Eu);_oe=n(ZMe,"STRONG",{});var Rzr=s(_oe);quo=r(Rzr,"data2vec-text"),Rzr.forEach(t),Ouo=r(ZMe," \u2014 "),g$=n(ZMe,"A",{href:!0});var Szr=s(g$);Guo=r(Szr,"Data2VecTextForCausalLM"),Szr.forEach(t),Xuo=r(ZMe," (Data2VecText model)"),ZMe.forEach(t),Vuo=i(j),yu=n(j,"LI",{});var e4e=s(yu);uoe=n(e4e,"STRONG",{});var Pzr=s(uoe);zuo=r(Pzr,"electra"),Pzr.forEach(t),Wuo=r(e4e," \u2014 "),h$=n(e4e,"A",{href:!0});var $zr=s(h$);Quo=r($zr,"ElectraForCausalLM"),$zr.forEach(t),Huo=r(e4e," (ELECTRA model)"),e4e.forEach(t),Uuo=i(j),wu=n(j,"LI",{});var o4e=s(wu);boe=n(o4e,"STRONG",{});var Izr=s(boe);Juo=r(Izr,"gpt2"),Izr.forEach(t),Yuo=r(o4e," \u2014 "),p$=n(o4e,"A",{href:!0});var jzr=s(p$);Kuo=r(jzr,"GPT2LMHeadModel"),jzr.forEach(t),Zuo=r(o4e," (OpenAI GPT-2 model)"),o4e.forEach(t),e1o=i(j),Au=n(j,"LI",{});var r4e=s(Au);voe=n(r4e,"STRONG",{});var Dzr=s(voe);o1o=r(Dzr,"gpt_neo"),Dzr.forEach(t),r1o=r(r4e," \u2014 "),_$=n(r4e,"A",{href:!0});var Nzr=s(_$);t1o=r(Nzr,"GPTNeoForCausalLM"),Nzr.forEach(t),a1o=r(r4e," (GPT Neo model)"),r4e.forEach(t),n1o=i(j),Lu=n(j,"LI",{});var t4e=s(Lu);Toe=n(t4e,"STRONG",{});var qzr=s(Toe);s1o=r(qzr,"gptj"),qzr.forEach(t),l1o=r(t4e," \u2014 "),u$=n(t4e,"A",{href:!0});var Ozr=s(u$);i1o=r(Ozr,"GPTJForCausalLM"),Ozr.forEach(t),d1o=r(t4e," (GPT-J model)"),t4e.forEach(t),c1o=i(j),Bu=n(j,"LI",{});var a4e=s(Bu);Foe=n(a4e,"STRONG",{});var Gzr=s(Foe);f1o=r(Gzr,"marian"),Gzr.forEach(t),m1o=r(a4e," \u2014 "),b$=n(a4e,"A",{href:!0});var Xzr=s(b$);g1o=r(Xzr,"MarianForCausalLM"),Xzr.forEach(t),h1o=r(a4e," (Marian model)"),a4e.forEach(t),p1o=i(j),xu=n(j,"LI",{});var n4e=s(xu);Coe=n(n4e,"STRONG",{});var Vzr=s(Coe);_1o=r(Vzr,"mbart"),Vzr.forEach(t),u1o=r(n4e," \u2014 "),v$=n(n4e,"A",{href:!0});var zzr=s(v$);b1o=r(zzr,"MBartForCausalLM"),zzr.forEach(t),v1o=r(n4e," (mBART model)"),n4e.forEach(t),T1o=i(j),ku=n(j,"LI",{});var s4e=s(ku);Moe=n(s4e,"STRONG",{});var Wzr=s(Moe);F1o=r(Wzr,"megatron-bert"),Wzr.forEach(t),C1o=r(s4e," \u2014 "),T$=n(s4e,"A",{href:!0});var Qzr=s(T$);M1o=r(Qzr,"MegatronBertForCausalLM"),Qzr.forEach(t),E1o=r(s4e," (MegatronBert model)"),s4e.forEach(t),y1o=i(j),Ru=n(j,"LI",{});var l4e=s(Ru);Eoe=n(l4e,"STRONG",{});var Hzr=s(Eoe);w1o=r(Hzr,"openai-gpt"),Hzr.forEach(t),A1o=r(l4e," \u2014 "),F$=n(l4e,"A",{href:!0});var Uzr=s(F$);L1o=r(Uzr,"OpenAIGPTLMHeadModel"),Uzr.forEach(t),B1o=r(l4e," (OpenAI GPT model)"),l4e.forEach(t),x1o=i(j),Su=n(j,"LI",{});var i4e=s(Su);yoe=n(i4e,"STRONG",{});var Jzr=s(yoe);k1o=r(Jzr,"pegasus"),Jzr.forEach(t),R1o=r(i4e," \u2014 "),C$=n(i4e,"A",{href:!0});var Yzr=s(C$);S1o=r(Yzr,"PegasusForCausalLM"),Yzr.forEach(t),P1o=r(i4e," (Pegasus model)"),i4e.forEach(t),$1o=i(j),Pu=n(j,"LI",{});var d4e=s(Pu);woe=n(d4e,"STRONG",{});var Kzr=s(woe);I1o=r(Kzr,"plbart"),Kzr.forEach(t),j1o=r(d4e," \u2014 "),M$=n(d4e,"A",{href:!0});var Zzr=s(M$);D1o=r(Zzr,"PLBartForCausalLM"),Zzr.forEach(t),N1o=r(d4e," (PLBart model)"),d4e.forEach(t),q1o=i(j),$u=n(j,"LI",{});var c4e=s($u);Aoe=n(c4e,"STRONG",{});var eWr=s(Aoe);O1o=r(eWr,"prophetnet"),eWr.forEach(t),G1o=r(c4e," \u2014 "),E$=n(c4e,"A",{href:!0});var oWr=s(E$);X1o=r(oWr,"ProphetNetForCausalLM"),oWr.forEach(t),V1o=r(c4e," (ProphetNet model)"),c4e.forEach(t),z1o=i(j),Iu=n(j,"LI",{});var f4e=s(Iu);Loe=n(f4e,"STRONG",{});var rWr=s(Loe);W1o=r(rWr,"qdqbert"),rWr.forEach(t),Q1o=r(f4e," \u2014 "),y$=n(f4e,"A",{href:!0});var tWr=s(y$);H1o=r(tWr,"QDQBertLMHeadModel"),tWr.forEach(t),U1o=r(f4e," (QDQBert model)"),f4e.forEach(t),J1o=i(j),ju=n(j,"LI",{});var m4e=s(ju);Boe=n(m4e,"STRONG",{});var aWr=s(Boe);Y1o=r(aWr,"reformer"),aWr.forEach(t),K1o=r(m4e," \u2014 "),w$=n(m4e,"A",{href:!0});var nWr=s(w$);Z1o=r(nWr,"ReformerModelWithLMHead"),nWr.forEach(t),ebo=r(m4e," (Reformer model)"),m4e.forEach(t),obo=i(j),Du=n(j,"LI",{});var g4e=s(Du);xoe=n(g4e,"STRONG",{});var sWr=s(xoe);rbo=r(sWr,"rembert"),sWr.forEach(t),tbo=r(g4e," \u2014 "),A$=n(g4e,"A",{href:!0});var lWr=s(A$);abo=r(lWr,"RemBertForCausalLM"),lWr.forEach(t),nbo=r(g4e," (RemBERT model)"),g4e.forEach(t),sbo=i(j),Nu=n(j,"LI",{});var h4e=s(Nu);koe=n(h4e,"STRONG",{});var iWr=s(koe);lbo=r(iWr,"roberta"),iWr.forEach(t),ibo=r(h4e," \u2014 "),L$=n(h4e,"A",{href:!0});var dWr=s(L$);dbo=r(dWr,"RobertaForCausalLM"),dWr.forEach(t),cbo=r(h4e," (RoBERTa model)"),h4e.forEach(t),fbo=i(j),qu=n(j,"LI",{});var p4e=s(qu);Roe=n(p4e,"STRONG",{});var cWr=s(Roe);mbo=r(cWr,"roformer"),cWr.forEach(t),gbo=r(p4e," \u2014 "),B$=n(p4e,"A",{href:!0});var fWr=s(B$);hbo=r(fWr,"RoFormerForCausalLM"),fWr.forEach(t),pbo=r(p4e," (RoFormer model)"),p4e.forEach(t),_bo=i(j),Ou=n(j,"LI",{});var _4e=s(Ou);Soe=n(_4e,"STRONG",{});var mWr=s(Soe);ubo=r(mWr,"speech_to_text_2"),mWr.forEach(t),bbo=r(_4e," \u2014 "),x$=n(_4e,"A",{href:!0});var gWr=s(x$);vbo=r(gWr,"Speech2Text2ForCausalLM"),gWr.forEach(t),Tbo=r(_4e," (Speech2Text2 model)"),_4e.forEach(t),Fbo=i(j),Gu=n(j,"LI",{});var u4e=s(Gu);Poe=n(u4e,"STRONG",{});var hWr=s(Poe);Cbo=r(hWr,"transfo-xl"),hWr.forEach(t),Mbo=r(u4e," \u2014 "),k$=n(u4e,"A",{href:!0});var pWr=s(k$);Ebo=r(pWr,"TransfoXLLMHeadModel"),pWr.forEach(t),ybo=r(u4e," (Transformer-XL model)"),u4e.forEach(t),wbo=i(j),Xu=n(j,"LI",{});var b4e=s(Xu);$oe=n(b4e,"STRONG",{});var _Wr=s($oe);Abo=r(_Wr,"trocr"),_Wr.forEach(t),Lbo=r(b4e," \u2014 "),R$=n(b4e,"A",{href:!0});var uWr=s(R$);Bbo=r(uWr,"TrOCRForCausalLM"),uWr.forEach(t),xbo=r(b4e," (TrOCR model)"),b4e.forEach(t),kbo=i(j),Vu=n(j,"LI",{});var v4e=s(Vu);Ioe=n(v4e,"STRONG",{});var bWr=s(Ioe);Rbo=r(bWr,"xglm"),bWr.forEach(t),Sbo=r(v4e," \u2014 "),S$=n(v4e,"A",{href:!0});var vWr=s(S$);Pbo=r(vWr,"XGLMForCausalLM"),vWr.forEach(t),$bo=r(v4e," (XGLM model)"),v4e.forEach(t),Ibo=i(j),zu=n(j,"LI",{});var T4e=s(zu);joe=n(T4e,"STRONG",{});var TWr=s(joe);jbo=r(TWr,"xlm"),TWr.forEach(t),Dbo=r(T4e," \u2014 "),P$=n(T4e,"A",{href:!0});var FWr=s(P$);Nbo=r(FWr,"XLMWithLMHeadModel"),FWr.forEach(t),qbo=r(T4e," (XLM model)"),T4e.forEach(t),Obo=i(j),Wu=n(j,"LI",{});var F4e=s(Wu);Doe=n(F4e,"STRONG",{});var CWr=s(Doe);Gbo=r(CWr,"xlm-prophetnet"),CWr.forEach(t),Xbo=r(F4e," \u2014 "),$$=n(F4e,"A",{href:!0});var MWr=s($$);Vbo=r(MWr,"XLMProphetNetForCausalLM"),MWr.forEach(t),zbo=r(F4e," (XLMProphetNet model)"),F4e.forEach(t),Wbo=i(j),Qu=n(j,"LI",{});var C4e=s(Qu);Noe=n(C4e,"STRONG",{});var EWr=s(Noe);Qbo=r(EWr,"xlm-roberta"),EWr.forEach(t),Hbo=r(C4e," \u2014 "),I$=n(C4e,"A",{href:!0});var yWr=s(I$);Ubo=r(yWr,"XLMRobertaForCausalLM"),yWr.forEach(t),Jbo=r(C4e," (XLM-RoBERTa model)"),C4e.forEach(t),Ybo=i(j),Hu=n(j,"LI",{});var M4e=s(Hu);qoe=n(M4e,"STRONG",{});var wWr=s(qoe);Kbo=r(wWr,"xlm-roberta-xl"),wWr.forEach(t),Zbo=r(M4e," \u2014 "),j$=n(M4e,"A",{href:!0});var AWr=s(j$);e5o=r(AWr,"XLMRobertaXLForCausalLM"),AWr.forEach(t),o5o=r(M4e," (XLM-RoBERTa-XL model)"),M4e.forEach(t),r5o=i(j),Uu=n(j,"LI",{});var E4e=s(Uu);Ooe=n(E4e,"STRONG",{});var LWr=s(Ooe);t5o=r(LWr,"xlnet"),LWr.forEach(t),a5o=r(E4e," \u2014 "),D$=n(E4e,"A",{href:!0});var BWr=s(D$);n5o=r(BWr,"XLNetLMHeadModel"),BWr.forEach(t),s5o=r(E4e," (XLNet model)"),E4e.forEach(t),j.forEach(t),l5o=i(zt),Ju=n(zt,"P",{});var y4e=s(Ju);i5o=r(y4e,"The model is set in evaluation mode by default using "),Goe=n(y4e,"CODE",{});var xWr=s(Goe);d5o=r(xWr,"model.eval()"),xWr.forEach(t),c5o=r(y4e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xoe=n(y4e,"CODE",{});var kWr=s(Xoe);f5o=r(kWr,"model.train()"),kWr.forEach(t),y4e.forEach(t),m5o=i(zt),Voe=n(zt,"P",{});var RWr=s(Voe);g5o=r(RWr,"Examples:"),RWr.forEach(t),h5o=i(zt),m(nE.$$.fragment,zt),zt.forEach(t),ol.forEach(t),lke=i(d),gd=n(d,"H2",{class:!0});var bSe=s(gd);Yu=n(bSe,"A",{id:!0,class:!0,href:!0});var SWr=s(Yu);zoe=n(SWr,"SPAN",{});var PWr=s(zoe);m(sE.$$.fragment,PWr),PWr.forEach(t),SWr.forEach(t),p5o=i(bSe),Woe=n(bSe,"SPAN",{});var $Wr=s(Woe);_5o=r($Wr,"AutoModelForMaskedLM"),$Wr.forEach(t),bSe.forEach(t),ike=i(d),er=n(d,"DIV",{class:!0});var tl=s(er);m(lE.$$.fragment,tl),u5o=i(tl),hd=n(tl,"P",{});var Jz=s(hd);b5o=r(Jz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Qoe=n(Jz,"CODE",{});var IWr=s(Qoe);v5o=r(IWr,"from_pretrained()"),IWr.forEach(t),T5o=r(Jz,"class method or the "),Hoe=n(Jz,"CODE",{});var jWr=s(Hoe);F5o=r(jWr,"from_config()"),jWr.forEach(t),C5o=r(Jz,`class
method.`),Jz.forEach(t),M5o=i(tl),iE=n(tl,"P",{});var vSe=s(iE);E5o=r(vSe,"This class cannot be instantiated directly using "),Uoe=n(vSe,"CODE",{});var DWr=s(Uoe);y5o=r(DWr,"__init__()"),DWr.forEach(t),w5o=r(vSe," (throws an error)."),vSe.forEach(t),A5o=i(tl),Ur=n(tl,"DIV",{class:!0});var al=s(Ur);m(dE.$$.fragment,al),L5o=i(al),Joe=n(al,"P",{});var NWr=s(Joe);B5o=r(NWr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),NWr.forEach(t),x5o=i(al),pd=n(al,"P",{});var Yz=s(pd);k5o=r(Yz,`Note:
Loading a model from its configuration file does `),Yoe=n(Yz,"STRONG",{});var qWr=s(Yoe);R5o=r(qWr,"not"),qWr.forEach(t),S5o=r(Yz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Koe=n(Yz,"CODE",{});var OWr=s(Koe);P5o=r(OWr,"from_pretrained()"),OWr.forEach(t),$5o=r(Yz,"to load the model weights."),Yz.forEach(t),I5o=i(al),Zoe=n(al,"P",{});var GWr=s(Zoe);j5o=r(GWr,"Examples:"),GWr.forEach(t),D5o=i(al),m(cE.$$.fragment,al),al.forEach(t),N5o=i(tl),qe=n(tl,"DIV",{class:!0});var Wt=s(qe);m(fE.$$.fragment,Wt),q5o=i(Wt),ere=n(Wt,"P",{});var XWr=s(ere);O5o=r(XWr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),XWr.forEach(t),G5o=i(Wt),Ya=n(Wt,"P",{});var fM=s(Ya);X5o=r(fM,"The model class to instantiate is selected based on the "),ore=n(fM,"CODE",{});var VWr=s(ore);V5o=r(VWr,"model_type"),VWr.forEach(t),z5o=r(fM,` property of the config object (either
passed as an argument or loaded from `),rre=n(fM,"CODE",{});var zWr=s(rre);W5o=r(zWr,"pretrained_model_name_or_path"),zWr.forEach(t),Q5o=r(fM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tre=n(fM,"CODE",{});var WWr=s(tre);H5o=r(WWr,"pretrained_model_name_or_path"),WWr.forEach(t),U5o=r(fM,":"),fM.forEach(t),J5o=i(Wt),I=n(Wt,"UL",{});var D=s(I);Ku=n(D,"LI",{});var w4e=s(Ku);are=n(w4e,"STRONG",{});var QWr=s(are);Y5o=r(QWr,"albert"),QWr.forEach(t),K5o=r(w4e," \u2014 "),N$=n(w4e,"A",{href:!0});var HWr=s(N$);Z5o=r(HWr,"AlbertForMaskedLM"),HWr.forEach(t),e2o=r(w4e," (ALBERT model)"),w4e.forEach(t),o2o=i(D),Zu=n(D,"LI",{});var A4e=s(Zu);nre=n(A4e,"STRONG",{});var UWr=s(nre);r2o=r(UWr,"bart"),UWr.forEach(t),t2o=r(A4e," \u2014 "),q$=n(A4e,"A",{href:!0});var JWr=s(q$);a2o=r(JWr,"BartForConditionalGeneration"),JWr.forEach(t),n2o=r(A4e," (BART model)"),A4e.forEach(t),s2o=i(D),e1=n(D,"LI",{});var L4e=s(e1);sre=n(L4e,"STRONG",{});var YWr=s(sre);l2o=r(YWr,"bert"),YWr.forEach(t),i2o=r(L4e," \u2014 "),O$=n(L4e,"A",{href:!0});var KWr=s(O$);d2o=r(KWr,"BertForMaskedLM"),KWr.forEach(t),c2o=r(L4e," (BERT model)"),L4e.forEach(t),f2o=i(D),o1=n(D,"LI",{});var B4e=s(o1);lre=n(B4e,"STRONG",{});var ZWr=s(lre);m2o=r(ZWr,"big_bird"),ZWr.forEach(t),g2o=r(B4e," \u2014 "),G$=n(B4e,"A",{href:!0});var eQr=s(G$);h2o=r(eQr,"BigBirdForMaskedLM"),eQr.forEach(t),p2o=r(B4e," (BigBird model)"),B4e.forEach(t),_2o=i(D),r1=n(D,"LI",{});var x4e=s(r1);ire=n(x4e,"STRONG",{});var oQr=s(ire);u2o=r(oQr,"camembert"),oQr.forEach(t),b2o=r(x4e," \u2014 "),X$=n(x4e,"A",{href:!0});var rQr=s(X$);v2o=r(rQr,"CamembertForMaskedLM"),rQr.forEach(t),T2o=r(x4e," (CamemBERT model)"),x4e.forEach(t),F2o=i(D),t1=n(D,"LI",{});var k4e=s(t1);dre=n(k4e,"STRONG",{});var tQr=s(dre);C2o=r(tQr,"convbert"),tQr.forEach(t),M2o=r(k4e," \u2014 "),V$=n(k4e,"A",{href:!0});var aQr=s(V$);E2o=r(aQr,"ConvBertForMaskedLM"),aQr.forEach(t),y2o=r(k4e," (ConvBERT model)"),k4e.forEach(t),w2o=i(D),a1=n(D,"LI",{});var R4e=s(a1);cre=n(R4e,"STRONG",{});var nQr=s(cre);A2o=r(nQr,"data2vec-text"),nQr.forEach(t),L2o=r(R4e," \u2014 "),z$=n(R4e,"A",{href:!0});var sQr=s(z$);B2o=r(sQr,"Data2VecTextForMaskedLM"),sQr.forEach(t),x2o=r(R4e," (Data2VecText model)"),R4e.forEach(t),k2o=i(D),n1=n(D,"LI",{});var S4e=s(n1);fre=n(S4e,"STRONG",{});var lQr=s(fre);R2o=r(lQr,"deberta"),lQr.forEach(t),S2o=r(S4e," \u2014 "),W$=n(S4e,"A",{href:!0});var iQr=s(W$);P2o=r(iQr,"DebertaForMaskedLM"),iQr.forEach(t),$2o=r(S4e," (DeBERTa model)"),S4e.forEach(t),I2o=i(D),s1=n(D,"LI",{});var P4e=s(s1);mre=n(P4e,"STRONG",{});var dQr=s(mre);j2o=r(dQr,"deberta-v2"),dQr.forEach(t),D2o=r(P4e," \u2014 "),Q$=n(P4e,"A",{href:!0});var cQr=s(Q$);N2o=r(cQr,"DebertaV2ForMaskedLM"),cQr.forEach(t),q2o=r(P4e," (DeBERTa-v2 model)"),P4e.forEach(t),O2o=i(D),l1=n(D,"LI",{});var $4e=s(l1);gre=n($4e,"STRONG",{});var fQr=s(gre);G2o=r(fQr,"distilbert"),fQr.forEach(t),X2o=r($4e," \u2014 "),H$=n($4e,"A",{href:!0});var mQr=s(H$);V2o=r(mQr,"DistilBertForMaskedLM"),mQr.forEach(t),z2o=r($4e," (DistilBERT model)"),$4e.forEach(t),W2o=i(D),i1=n(D,"LI",{});var I4e=s(i1);hre=n(I4e,"STRONG",{});var gQr=s(hre);Q2o=r(gQr,"electra"),gQr.forEach(t),H2o=r(I4e," \u2014 "),U$=n(I4e,"A",{href:!0});var hQr=s(U$);U2o=r(hQr,"ElectraForMaskedLM"),hQr.forEach(t),J2o=r(I4e," (ELECTRA model)"),I4e.forEach(t),Y2o=i(D),d1=n(D,"LI",{});var j4e=s(d1);pre=n(j4e,"STRONG",{});var pQr=s(pre);K2o=r(pQr,"flaubert"),pQr.forEach(t),Z2o=r(j4e," \u2014 "),J$=n(j4e,"A",{href:!0});var _Qr=s(J$);evo=r(_Qr,"FlaubertWithLMHeadModel"),_Qr.forEach(t),ovo=r(j4e," (FlauBERT model)"),j4e.forEach(t),rvo=i(D),c1=n(D,"LI",{});var D4e=s(c1);_re=n(D4e,"STRONG",{});var uQr=s(_re);tvo=r(uQr,"fnet"),uQr.forEach(t),avo=r(D4e," \u2014 "),Y$=n(D4e,"A",{href:!0});var bQr=s(Y$);nvo=r(bQr,"FNetForMaskedLM"),bQr.forEach(t),svo=r(D4e," (FNet model)"),D4e.forEach(t),lvo=i(D),f1=n(D,"LI",{});var N4e=s(f1);ure=n(N4e,"STRONG",{});var vQr=s(ure);ivo=r(vQr,"funnel"),vQr.forEach(t),dvo=r(N4e," \u2014 "),K$=n(N4e,"A",{href:!0});var TQr=s(K$);cvo=r(TQr,"FunnelForMaskedLM"),TQr.forEach(t),fvo=r(N4e," (Funnel Transformer model)"),N4e.forEach(t),mvo=i(D),m1=n(D,"LI",{});var q4e=s(m1);bre=n(q4e,"STRONG",{});var FQr=s(bre);gvo=r(FQr,"ibert"),FQr.forEach(t),hvo=r(q4e," \u2014 "),Z$=n(q4e,"A",{href:!0});var CQr=s(Z$);pvo=r(CQr,"IBertForMaskedLM"),CQr.forEach(t),_vo=r(q4e," (I-BERT model)"),q4e.forEach(t),uvo=i(D),g1=n(D,"LI",{});var O4e=s(g1);vre=n(O4e,"STRONG",{});var MQr=s(vre);bvo=r(MQr,"layoutlm"),MQr.forEach(t),vvo=r(O4e," \u2014 "),eI=n(O4e,"A",{href:!0});var EQr=s(eI);Tvo=r(EQr,"LayoutLMForMaskedLM"),EQr.forEach(t),Fvo=r(O4e," (LayoutLM model)"),O4e.forEach(t),Cvo=i(D),h1=n(D,"LI",{});var G4e=s(h1);Tre=n(G4e,"STRONG",{});var yQr=s(Tre);Mvo=r(yQr,"longformer"),yQr.forEach(t),Evo=r(G4e," \u2014 "),oI=n(G4e,"A",{href:!0});var wQr=s(oI);yvo=r(wQr,"LongformerForMaskedLM"),wQr.forEach(t),wvo=r(G4e," (Longformer model)"),G4e.forEach(t),Avo=i(D),p1=n(D,"LI",{});var X4e=s(p1);Fre=n(X4e,"STRONG",{});var AQr=s(Fre);Lvo=r(AQr,"mbart"),AQr.forEach(t),Bvo=r(X4e," \u2014 "),rI=n(X4e,"A",{href:!0});var LQr=s(rI);xvo=r(LQr,"MBartForConditionalGeneration"),LQr.forEach(t),kvo=r(X4e," (mBART model)"),X4e.forEach(t),Rvo=i(D),_1=n(D,"LI",{});var V4e=s(_1);Cre=n(V4e,"STRONG",{});var BQr=s(Cre);Svo=r(BQr,"megatron-bert"),BQr.forEach(t),Pvo=r(V4e," \u2014 "),tI=n(V4e,"A",{href:!0});var xQr=s(tI);$vo=r(xQr,"MegatronBertForMaskedLM"),xQr.forEach(t),Ivo=r(V4e," (MegatronBert model)"),V4e.forEach(t),jvo=i(D),u1=n(D,"LI",{});var z4e=s(u1);Mre=n(z4e,"STRONG",{});var kQr=s(Mre);Dvo=r(kQr,"mobilebert"),kQr.forEach(t),Nvo=r(z4e," \u2014 "),aI=n(z4e,"A",{href:!0});var RQr=s(aI);qvo=r(RQr,"MobileBertForMaskedLM"),RQr.forEach(t),Ovo=r(z4e," (MobileBERT model)"),z4e.forEach(t),Gvo=i(D),b1=n(D,"LI",{});var W4e=s(b1);Ere=n(W4e,"STRONG",{});var SQr=s(Ere);Xvo=r(SQr,"mpnet"),SQr.forEach(t),Vvo=r(W4e," \u2014 "),nI=n(W4e,"A",{href:!0});var PQr=s(nI);zvo=r(PQr,"MPNetForMaskedLM"),PQr.forEach(t),Wvo=r(W4e," (MPNet model)"),W4e.forEach(t),Qvo=i(D),v1=n(D,"LI",{});var Q4e=s(v1);yre=n(Q4e,"STRONG",{});var $Qr=s(yre);Hvo=r($Qr,"nystromformer"),$Qr.forEach(t),Uvo=r(Q4e," \u2014 "),sI=n(Q4e,"A",{href:!0});var IQr=s(sI);Jvo=r(IQr,"NystromformerForMaskedLM"),IQr.forEach(t),Yvo=r(Q4e," (Nystromformer model)"),Q4e.forEach(t),Kvo=i(D),T1=n(D,"LI",{});var H4e=s(T1);wre=n(H4e,"STRONG",{});var jQr=s(wre);Zvo=r(jQr,"perceiver"),jQr.forEach(t),e6o=r(H4e," \u2014 "),lI=n(H4e,"A",{href:!0});var DQr=s(lI);o6o=r(DQr,"PerceiverForMaskedLM"),DQr.forEach(t),r6o=r(H4e," (Perceiver model)"),H4e.forEach(t),t6o=i(D),F1=n(D,"LI",{});var U4e=s(F1);Are=n(U4e,"STRONG",{});var NQr=s(Are);a6o=r(NQr,"qdqbert"),NQr.forEach(t),n6o=r(U4e," \u2014 "),iI=n(U4e,"A",{href:!0});var qQr=s(iI);s6o=r(qQr,"QDQBertForMaskedLM"),qQr.forEach(t),l6o=r(U4e," (QDQBert model)"),U4e.forEach(t),i6o=i(D),C1=n(D,"LI",{});var J4e=s(C1);Lre=n(J4e,"STRONG",{});var OQr=s(Lre);d6o=r(OQr,"reformer"),OQr.forEach(t),c6o=r(J4e," \u2014 "),dI=n(J4e,"A",{href:!0});var GQr=s(dI);f6o=r(GQr,"ReformerForMaskedLM"),GQr.forEach(t),m6o=r(J4e," (Reformer model)"),J4e.forEach(t),g6o=i(D),M1=n(D,"LI",{});var Y4e=s(M1);Bre=n(Y4e,"STRONG",{});var XQr=s(Bre);h6o=r(XQr,"rembert"),XQr.forEach(t),p6o=r(Y4e," \u2014 "),cI=n(Y4e,"A",{href:!0});var VQr=s(cI);_6o=r(VQr,"RemBertForMaskedLM"),VQr.forEach(t),u6o=r(Y4e," (RemBERT model)"),Y4e.forEach(t),b6o=i(D),E1=n(D,"LI",{});var K4e=s(E1);xre=n(K4e,"STRONG",{});var zQr=s(xre);v6o=r(zQr,"roberta"),zQr.forEach(t),T6o=r(K4e," \u2014 "),fI=n(K4e,"A",{href:!0});var WQr=s(fI);F6o=r(WQr,"RobertaForMaskedLM"),WQr.forEach(t),C6o=r(K4e," (RoBERTa model)"),K4e.forEach(t),M6o=i(D),y1=n(D,"LI",{});var Z4e=s(y1);kre=n(Z4e,"STRONG",{});var QQr=s(kre);E6o=r(QQr,"roformer"),QQr.forEach(t),y6o=r(Z4e," \u2014 "),mI=n(Z4e,"A",{href:!0});var HQr=s(mI);w6o=r(HQr,"RoFormerForMaskedLM"),HQr.forEach(t),A6o=r(Z4e," (RoFormer model)"),Z4e.forEach(t),L6o=i(D),w1=n(D,"LI",{});var eEe=s(w1);Rre=n(eEe,"STRONG",{});var UQr=s(Rre);B6o=r(UQr,"squeezebert"),UQr.forEach(t),x6o=r(eEe," \u2014 "),gI=n(eEe,"A",{href:!0});var JQr=s(gI);k6o=r(JQr,"SqueezeBertForMaskedLM"),JQr.forEach(t),R6o=r(eEe," (SqueezeBERT model)"),eEe.forEach(t),S6o=i(D),A1=n(D,"LI",{});var oEe=s(A1);Sre=n(oEe,"STRONG",{});var YQr=s(Sre);P6o=r(YQr,"tapas"),YQr.forEach(t),$6o=r(oEe," \u2014 "),hI=n(oEe,"A",{href:!0});var KQr=s(hI);I6o=r(KQr,"TapasForMaskedLM"),KQr.forEach(t),j6o=r(oEe," (TAPAS model)"),oEe.forEach(t),D6o=i(D),L1=n(D,"LI",{});var rEe=s(L1);Pre=n(rEe,"STRONG",{});var ZQr=s(Pre);N6o=r(ZQr,"wav2vec2"),ZQr.forEach(t),q6o=r(rEe," \u2014 "),$re=n(rEe,"CODE",{});var eHr=s($re);O6o=r(eHr,"Wav2Vec2ForMaskedLM"),eHr.forEach(t),G6o=r(rEe,"(Wav2Vec2 model)"),rEe.forEach(t),X6o=i(D),B1=n(D,"LI",{});var tEe=s(B1);Ire=n(tEe,"STRONG",{});var oHr=s(Ire);V6o=r(oHr,"xlm"),oHr.forEach(t),z6o=r(tEe," \u2014 "),pI=n(tEe,"A",{href:!0});var rHr=s(pI);W6o=r(rHr,"XLMWithLMHeadModel"),rHr.forEach(t),Q6o=r(tEe," (XLM model)"),tEe.forEach(t),H6o=i(D),x1=n(D,"LI",{});var aEe=s(x1);jre=n(aEe,"STRONG",{});var tHr=s(jre);U6o=r(tHr,"xlm-roberta"),tHr.forEach(t),J6o=r(aEe," \u2014 "),_I=n(aEe,"A",{href:!0});var aHr=s(_I);Y6o=r(aHr,"XLMRobertaForMaskedLM"),aHr.forEach(t),K6o=r(aEe," (XLM-RoBERTa model)"),aEe.forEach(t),Z6o=i(D),k1=n(D,"LI",{});var nEe=s(k1);Dre=n(nEe,"STRONG",{});var nHr=s(Dre);e0o=r(nHr,"xlm-roberta-xl"),nHr.forEach(t),o0o=r(nEe," \u2014 "),uI=n(nEe,"A",{href:!0});var sHr=s(uI);r0o=r(sHr,"XLMRobertaXLForMaskedLM"),sHr.forEach(t),t0o=r(nEe," (XLM-RoBERTa-XL model)"),nEe.forEach(t),a0o=i(D),R1=n(D,"LI",{});var sEe=s(R1);Nre=n(sEe,"STRONG",{});var lHr=s(Nre);n0o=r(lHr,"yoso"),lHr.forEach(t),s0o=r(sEe," \u2014 "),bI=n(sEe,"A",{href:!0});var iHr=s(bI);l0o=r(iHr,"YosoForMaskedLM"),iHr.forEach(t),i0o=r(sEe," (YOSO model)"),sEe.forEach(t),D.forEach(t),d0o=i(Wt),S1=n(Wt,"P",{});var lEe=s(S1);c0o=r(lEe,"The model is set in evaluation mode by default using "),qre=n(lEe,"CODE",{});var dHr=s(qre);f0o=r(dHr,"model.eval()"),dHr.forEach(t),m0o=r(lEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ore=n(lEe,"CODE",{});var cHr=s(Ore);g0o=r(cHr,"model.train()"),cHr.forEach(t),lEe.forEach(t),h0o=i(Wt),Gre=n(Wt,"P",{});var fHr=s(Gre);p0o=r(fHr,"Examples:"),fHr.forEach(t),_0o=i(Wt),m(mE.$$.fragment,Wt),Wt.forEach(t),tl.forEach(t),dke=i(d),_d=n(d,"H2",{class:!0});var TSe=s(_d);P1=n(TSe,"A",{id:!0,class:!0,href:!0});var mHr=s(P1);Xre=n(mHr,"SPAN",{});var gHr=s(Xre);m(gE.$$.fragment,gHr),gHr.forEach(t),mHr.forEach(t),u0o=i(TSe),Vre=n(TSe,"SPAN",{});var hHr=s(Vre);b0o=r(hHr,"AutoModelForSeq2SeqLM"),hHr.forEach(t),TSe.forEach(t),cke=i(d),or=n(d,"DIV",{class:!0});var nl=s(or);m(hE.$$.fragment,nl),v0o=i(nl),ud=n(nl,"P",{});var Kz=s(ud);T0o=r(Kz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),zre=n(Kz,"CODE",{});var pHr=s(zre);F0o=r(pHr,"from_pretrained()"),pHr.forEach(t),C0o=r(Kz,"class method or the "),Wre=n(Kz,"CODE",{});var _Hr=s(Wre);M0o=r(_Hr,"from_config()"),_Hr.forEach(t),E0o=r(Kz,`class
method.`),Kz.forEach(t),y0o=i(nl),pE=n(nl,"P",{});var FSe=s(pE);w0o=r(FSe,"This class cannot be instantiated directly using "),Qre=n(FSe,"CODE",{});var uHr=s(Qre);A0o=r(uHr,"__init__()"),uHr.forEach(t),L0o=r(FSe," (throws an error)."),FSe.forEach(t),B0o=i(nl),Jr=n(nl,"DIV",{class:!0});var sl=s(Jr);m(_E.$$.fragment,sl),x0o=i(sl),Hre=n(sl,"P",{});var bHr=s(Hre);k0o=r(bHr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),bHr.forEach(t),R0o=i(sl),bd=n(sl,"P",{});var Zz=s(bd);S0o=r(Zz,`Note:
Loading a model from its configuration file does `),Ure=n(Zz,"STRONG",{});var vHr=s(Ure);P0o=r(vHr,"not"),vHr.forEach(t),$0o=r(Zz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jre=n(Zz,"CODE",{});var THr=s(Jre);I0o=r(THr,"from_pretrained()"),THr.forEach(t),j0o=r(Zz,"to load the model weights."),Zz.forEach(t),D0o=i(sl),Yre=n(sl,"P",{});var FHr=s(Yre);N0o=r(FHr,"Examples:"),FHr.forEach(t),q0o=i(sl),m(uE.$$.fragment,sl),sl.forEach(t),O0o=i(nl),Oe=n(nl,"DIV",{class:!0});var Qt=s(Oe);m(bE.$$.fragment,Qt),G0o=i(Qt),Kre=n(Qt,"P",{});var CHr=s(Kre);X0o=r(CHr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),CHr.forEach(t),V0o=i(Qt),Ka=n(Qt,"P",{});var mM=s(Ka);z0o=r(mM,"The model class to instantiate is selected based on the "),Zre=n(mM,"CODE",{});var MHr=s(Zre);W0o=r(MHr,"model_type"),MHr.forEach(t),Q0o=r(mM,` property of the config object (either
passed as an argument or loaded from `),ete=n(mM,"CODE",{});var EHr=s(ete);H0o=r(EHr,"pretrained_model_name_or_path"),EHr.forEach(t),U0o=r(mM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ote=n(mM,"CODE",{});var yHr=s(ote);J0o=r(yHr,"pretrained_model_name_or_path"),yHr.forEach(t),Y0o=r(mM,":"),mM.forEach(t),K0o=i(Qt),ne=n(Qt,"UL",{});var ie=s(ne);$1=n(ie,"LI",{});var iEe=s($1);rte=n(iEe,"STRONG",{});var wHr=s(rte);Z0o=r(wHr,"bart"),wHr.forEach(t),eTo=r(iEe," \u2014 "),vI=n(iEe,"A",{href:!0});var AHr=s(vI);oTo=r(AHr,"BartForConditionalGeneration"),AHr.forEach(t),rTo=r(iEe," (BART model)"),iEe.forEach(t),tTo=i(ie),I1=n(ie,"LI",{});var dEe=s(I1);tte=n(dEe,"STRONG",{});var LHr=s(tte);aTo=r(LHr,"bigbird_pegasus"),LHr.forEach(t),nTo=r(dEe," \u2014 "),TI=n(dEe,"A",{href:!0});var BHr=s(TI);sTo=r(BHr,"BigBirdPegasusForConditionalGeneration"),BHr.forEach(t),lTo=r(dEe," (BigBirdPegasus model)"),dEe.forEach(t),iTo=i(ie),j1=n(ie,"LI",{});var cEe=s(j1);ate=n(cEe,"STRONG",{});var xHr=s(ate);dTo=r(xHr,"blenderbot"),xHr.forEach(t),cTo=r(cEe," \u2014 "),FI=n(cEe,"A",{href:!0});var kHr=s(FI);fTo=r(kHr,"BlenderbotForConditionalGeneration"),kHr.forEach(t),mTo=r(cEe," (Blenderbot model)"),cEe.forEach(t),gTo=i(ie),D1=n(ie,"LI",{});var fEe=s(D1);nte=n(fEe,"STRONG",{});var RHr=s(nte);hTo=r(RHr,"blenderbot-small"),RHr.forEach(t),pTo=r(fEe," \u2014 "),CI=n(fEe,"A",{href:!0});var SHr=s(CI);_To=r(SHr,"BlenderbotSmallForConditionalGeneration"),SHr.forEach(t),uTo=r(fEe," (BlenderbotSmall model)"),fEe.forEach(t),bTo=i(ie),N1=n(ie,"LI",{});var mEe=s(N1);ste=n(mEe,"STRONG",{});var PHr=s(ste);vTo=r(PHr,"encoder-decoder"),PHr.forEach(t),TTo=r(mEe," \u2014 "),MI=n(mEe,"A",{href:!0});var $Hr=s(MI);FTo=r($Hr,"EncoderDecoderModel"),$Hr.forEach(t),CTo=r(mEe," (Encoder decoder model)"),mEe.forEach(t),MTo=i(ie),q1=n(ie,"LI",{});var gEe=s(q1);lte=n(gEe,"STRONG",{});var IHr=s(lte);ETo=r(IHr,"fsmt"),IHr.forEach(t),yTo=r(gEe," \u2014 "),EI=n(gEe,"A",{href:!0});var jHr=s(EI);wTo=r(jHr,"FSMTForConditionalGeneration"),jHr.forEach(t),ATo=r(gEe," (FairSeq Machine-Translation model)"),gEe.forEach(t),LTo=i(ie),O1=n(ie,"LI",{});var hEe=s(O1);ite=n(hEe,"STRONG",{});var DHr=s(ite);BTo=r(DHr,"led"),DHr.forEach(t),xTo=r(hEe," \u2014 "),yI=n(hEe,"A",{href:!0});var NHr=s(yI);kTo=r(NHr,"LEDForConditionalGeneration"),NHr.forEach(t),RTo=r(hEe," (LED model)"),hEe.forEach(t),STo=i(ie),G1=n(ie,"LI",{});var pEe=s(G1);dte=n(pEe,"STRONG",{});var qHr=s(dte);PTo=r(qHr,"m2m_100"),qHr.forEach(t),$To=r(pEe," \u2014 "),wI=n(pEe,"A",{href:!0});var OHr=s(wI);ITo=r(OHr,"M2M100ForConditionalGeneration"),OHr.forEach(t),jTo=r(pEe," (M2M100 model)"),pEe.forEach(t),DTo=i(ie),X1=n(ie,"LI",{});var _Ee=s(X1);cte=n(_Ee,"STRONG",{});var GHr=s(cte);NTo=r(GHr,"marian"),GHr.forEach(t),qTo=r(_Ee," \u2014 "),AI=n(_Ee,"A",{href:!0});var XHr=s(AI);OTo=r(XHr,"MarianMTModel"),XHr.forEach(t),GTo=r(_Ee," (Marian model)"),_Ee.forEach(t),XTo=i(ie),V1=n(ie,"LI",{});var uEe=s(V1);fte=n(uEe,"STRONG",{});var VHr=s(fte);VTo=r(VHr,"mbart"),VHr.forEach(t),zTo=r(uEe," \u2014 "),LI=n(uEe,"A",{href:!0});var zHr=s(LI);WTo=r(zHr,"MBartForConditionalGeneration"),zHr.forEach(t),QTo=r(uEe," (mBART model)"),uEe.forEach(t),HTo=i(ie),z1=n(ie,"LI",{});var bEe=s(z1);mte=n(bEe,"STRONG",{});var WHr=s(mte);UTo=r(WHr,"mt5"),WHr.forEach(t),JTo=r(bEe," \u2014 "),BI=n(bEe,"A",{href:!0});var QHr=s(BI);YTo=r(QHr,"MT5ForConditionalGeneration"),QHr.forEach(t),KTo=r(bEe," (mT5 model)"),bEe.forEach(t),ZTo=i(ie),W1=n(ie,"LI",{});var vEe=s(W1);gte=n(vEe,"STRONG",{});var HHr=s(gte);e8o=r(HHr,"pegasus"),HHr.forEach(t),o8o=r(vEe," \u2014 "),xI=n(vEe,"A",{href:!0});var UHr=s(xI);r8o=r(UHr,"PegasusForConditionalGeneration"),UHr.forEach(t),t8o=r(vEe," (Pegasus model)"),vEe.forEach(t),a8o=i(ie),Q1=n(ie,"LI",{});var TEe=s(Q1);hte=n(TEe,"STRONG",{});var JHr=s(hte);n8o=r(JHr,"plbart"),JHr.forEach(t),s8o=r(TEe," \u2014 "),kI=n(TEe,"A",{href:!0});var YHr=s(kI);l8o=r(YHr,"PLBartForConditionalGeneration"),YHr.forEach(t),i8o=r(TEe," (PLBart model)"),TEe.forEach(t),d8o=i(ie),H1=n(ie,"LI",{});var FEe=s(H1);pte=n(FEe,"STRONG",{});var KHr=s(pte);c8o=r(KHr,"prophetnet"),KHr.forEach(t),f8o=r(FEe," \u2014 "),RI=n(FEe,"A",{href:!0});var ZHr=s(RI);m8o=r(ZHr,"ProphetNetForConditionalGeneration"),ZHr.forEach(t),g8o=r(FEe," (ProphetNet model)"),FEe.forEach(t),h8o=i(ie),U1=n(ie,"LI",{});var CEe=s(U1);_te=n(CEe,"STRONG",{});var eUr=s(_te);p8o=r(eUr,"t5"),eUr.forEach(t),_8o=r(CEe," \u2014 "),SI=n(CEe,"A",{href:!0});var oUr=s(SI);u8o=r(oUr,"T5ForConditionalGeneration"),oUr.forEach(t),b8o=r(CEe," (T5 model)"),CEe.forEach(t),v8o=i(ie),J1=n(ie,"LI",{});var MEe=s(J1);ute=n(MEe,"STRONG",{});var rUr=s(ute);T8o=r(rUr,"xlm-prophetnet"),rUr.forEach(t),F8o=r(MEe," \u2014 "),PI=n(MEe,"A",{href:!0});var tUr=s(PI);C8o=r(tUr,"XLMProphetNetForConditionalGeneration"),tUr.forEach(t),M8o=r(MEe," (XLMProphetNet model)"),MEe.forEach(t),ie.forEach(t),E8o=i(Qt),Y1=n(Qt,"P",{});var EEe=s(Y1);y8o=r(EEe,"The model is set in evaluation mode by default using "),bte=n(EEe,"CODE",{});var aUr=s(bte);w8o=r(aUr,"model.eval()"),aUr.forEach(t),A8o=r(EEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vte=n(EEe,"CODE",{});var nUr=s(vte);L8o=r(nUr,"model.train()"),nUr.forEach(t),EEe.forEach(t),B8o=i(Qt),Tte=n(Qt,"P",{});var sUr=s(Tte);x8o=r(sUr,"Examples:"),sUr.forEach(t),k8o=i(Qt),m(vE.$$.fragment,Qt),Qt.forEach(t),nl.forEach(t),fke=i(d),vd=n(d,"H2",{class:!0});var CSe=s(vd);K1=n(CSe,"A",{id:!0,class:!0,href:!0});var lUr=s(K1);Fte=n(lUr,"SPAN",{});var iUr=s(Fte);m(TE.$$.fragment,iUr),iUr.forEach(t),lUr.forEach(t),R8o=i(CSe),Cte=n(CSe,"SPAN",{});var dUr=s(Cte);S8o=r(dUr,"AutoModelForSequenceClassification"),dUr.forEach(t),CSe.forEach(t),mke=i(d),rr=n(d,"DIV",{class:!0});var ll=s(rr);m(FE.$$.fragment,ll),P8o=i(ll),Td=n(ll,"P",{});var eW=s(Td);$8o=r(eW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Mte=n(eW,"CODE",{});var cUr=s(Mte);I8o=r(cUr,"from_pretrained()"),cUr.forEach(t),j8o=r(eW,"class method or the "),Ete=n(eW,"CODE",{});var fUr=s(Ete);D8o=r(fUr,"from_config()"),fUr.forEach(t),N8o=r(eW,`class
method.`),eW.forEach(t),q8o=i(ll),CE=n(ll,"P",{});var MSe=s(CE);O8o=r(MSe,"This class cannot be instantiated directly using "),yte=n(MSe,"CODE",{});var mUr=s(yte);G8o=r(mUr,"__init__()"),mUr.forEach(t),X8o=r(MSe," (throws an error)."),MSe.forEach(t),V8o=i(ll),Yr=n(ll,"DIV",{class:!0});var il=s(Yr);m(ME.$$.fragment,il),z8o=i(il),wte=n(il,"P",{});var gUr=s(wte);W8o=r(gUr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),gUr.forEach(t),Q8o=i(il),Fd=n(il,"P",{});var oW=s(Fd);H8o=r(oW,`Note:
Loading a model from its configuration file does `),Ate=n(oW,"STRONG",{});var hUr=s(Ate);U8o=r(hUr,"not"),hUr.forEach(t),J8o=r(oW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lte=n(oW,"CODE",{});var pUr=s(Lte);Y8o=r(pUr,"from_pretrained()"),pUr.forEach(t),K8o=r(oW,"to load the model weights."),oW.forEach(t),Z8o=i(il),Bte=n(il,"P",{});var _Ur=s(Bte);eFo=r(_Ur,"Examples:"),_Ur.forEach(t),oFo=i(il),m(EE.$$.fragment,il),il.forEach(t),rFo=i(ll),Ge=n(ll,"DIV",{class:!0});var Ht=s(Ge);m(yE.$$.fragment,Ht),tFo=i(Ht),xte=n(Ht,"P",{});var uUr=s(xte);aFo=r(uUr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),uUr.forEach(t),nFo=i(Ht),Za=n(Ht,"P",{});var gM=s(Za);sFo=r(gM,"The model class to instantiate is selected based on the "),kte=n(gM,"CODE",{});var bUr=s(kte);lFo=r(bUr,"model_type"),bUr.forEach(t),iFo=r(gM,` property of the config object (either
passed as an argument or loaded from `),Rte=n(gM,"CODE",{});var vUr=s(Rte);dFo=r(vUr,"pretrained_model_name_or_path"),vUr.forEach(t),cFo=r(gM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ste=n(gM,"CODE",{});var TUr=s(Ste);fFo=r(TUr,"pretrained_model_name_or_path"),TUr.forEach(t),mFo=r(gM,":"),gM.forEach(t),gFo=i(Ht),A=n(Ht,"UL",{});var L=s(A);Z1=n(L,"LI",{});var yEe=s(Z1);Pte=n(yEe,"STRONG",{});var FUr=s(Pte);hFo=r(FUr,"albert"),FUr.forEach(t),pFo=r(yEe," \u2014 "),$I=n(yEe,"A",{href:!0});var CUr=s($I);_Fo=r(CUr,"AlbertForSequenceClassification"),CUr.forEach(t),uFo=r(yEe," (ALBERT model)"),yEe.forEach(t),bFo=i(L),eb=n(L,"LI",{});var wEe=s(eb);$te=n(wEe,"STRONG",{});var MUr=s($te);vFo=r(MUr,"bart"),MUr.forEach(t),TFo=r(wEe," \u2014 "),II=n(wEe,"A",{href:!0});var EUr=s(II);FFo=r(EUr,"BartForSequenceClassification"),EUr.forEach(t),CFo=r(wEe," (BART model)"),wEe.forEach(t),MFo=i(L),ob=n(L,"LI",{});var AEe=s(ob);Ite=n(AEe,"STRONG",{});var yUr=s(Ite);EFo=r(yUr,"bert"),yUr.forEach(t),yFo=r(AEe," \u2014 "),jI=n(AEe,"A",{href:!0});var wUr=s(jI);wFo=r(wUr,"BertForSequenceClassification"),wUr.forEach(t),AFo=r(AEe," (BERT model)"),AEe.forEach(t),LFo=i(L),rb=n(L,"LI",{});var LEe=s(rb);jte=n(LEe,"STRONG",{});var AUr=s(jte);BFo=r(AUr,"big_bird"),AUr.forEach(t),xFo=r(LEe," \u2014 "),DI=n(LEe,"A",{href:!0});var LUr=s(DI);kFo=r(LUr,"BigBirdForSequenceClassification"),LUr.forEach(t),RFo=r(LEe," (BigBird model)"),LEe.forEach(t),SFo=i(L),tb=n(L,"LI",{});var BEe=s(tb);Dte=n(BEe,"STRONG",{});var BUr=s(Dte);PFo=r(BUr,"bigbird_pegasus"),BUr.forEach(t),$Fo=r(BEe," \u2014 "),NI=n(BEe,"A",{href:!0});var xUr=s(NI);IFo=r(xUr,"BigBirdPegasusForSequenceClassification"),xUr.forEach(t),jFo=r(BEe," (BigBirdPegasus model)"),BEe.forEach(t),DFo=i(L),ab=n(L,"LI",{});var xEe=s(ab);Nte=n(xEe,"STRONG",{});var kUr=s(Nte);NFo=r(kUr,"camembert"),kUr.forEach(t),qFo=r(xEe," \u2014 "),qI=n(xEe,"A",{href:!0});var RUr=s(qI);OFo=r(RUr,"CamembertForSequenceClassification"),RUr.forEach(t),GFo=r(xEe," (CamemBERT model)"),xEe.forEach(t),XFo=i(L),nb=n(L,"LI",{});var kEe=s(nb);qte=n(kEe,"STRONG",{});var SUr=s(qte);VFo=r(SUr,"canine"),SUr.forEach(t),zFo=r(kEe," \u2014 "),OI=n(kEe,"A",{href:!0});var PUr=s(OI);WFo=r(PUr,"CanineForSequenceClassification"),PUr.forEach(t),QFo=r(kEe," (Canine model)"),kEe.forEach(t),HFo=i(L),sb=n(L,"LI",{});var REe=s(sb);Ote=n(REe,"STRONG",{});var $Ur=s(Ote);UFo=r($Ur,"convbert"),$Ur.forEach(t),JFo=r(REe," \u2014 "),GI=n(REe,"A",{href:!0});var IUr=s(GI);YFo=r(IUr,"ConvBertForSequenceClassification"),IUr.forEach(t),KFo=r(REe," (ConvBERT model)"),REe.forEach(t),ZFo=i(L),lb=n(L,"LI",{});var SEe=s(lb);Gte=n(SEe,"STRONG",{});var jUr=s(Gte);eCo=r(jUr,"ctrl"),jUr.forEach(t),oCo=r(SEe," \u2014 "),XI=n(SEe,"A",{href:!0});var DUr=s(XI);rCo=r(DUr,"CTRLForSequenceClassification"),DUr.forEach(t),tCo=r(SEe," (CTRL model)"),SEe.forEach(t),aCo=i(L),ib=n(L,"LI",{});var PEe=s(ib);Xte=n(PEe,"STRONG",{});var NUr=s(Xte);nCo=r(NUr,"data2vec-text"),NUr.forEach(t),sCo=r(PEe," \u2014 "),VI=n(PEe,"A",{href:!0});var qUr=s(VI);lCo=r(qUr,"Data2VecTextForSequenceClassification"),qUr.forEach(t),iCo=r(PEe," (Data2VecText model)"),PEe.forEach(t),dCo=i(L),db=n(L,"LI",{});var $Ee=s(db);Vte=n($Ee,"STRONG",{});var OUr=s(Vte);cCo=r(OUr,"deberta"),OUr.forEach(t),fCo=r($Ee," \u2014 "),zI=n($Ee,"A",{href:!0});var GUr=s(zI);mCo=r(GUr,"DebertaForSequenceClassification"),GUr.forEach(t),gCo=r($Ee," (DeBERTa model)"),$Ee.forEach(t),hCo=i(L),cb=n(L,"LI",{});var IEe=s(cb);zte=n(IEe,"STRONG",{});var XUr=s(zte);pCo=r(XUr,"deberta-v2"),XUr.forEach(t),_Co=r(IEe," \u2014 "),WI=n(IEe,"A",{href:!0});var VUr=s(WI);uCo=r(VUr,"DebertaV2ForSequenceClassification"),VUr.forEach(t),bCo=r(IEe," (DeBERTa-v2 model)"),IEe.forEach(t),vCo=i(L),fb=n(L,"LI",{});var jEe=s(fb);Wte=n(jEe,"STRONG",{});var zUr=s(Wte);TCo=r(zUr,"distilbert"),zUr.forEach(t),FCo=r(jEe," \u2014 "),QI=n(jEe,"A",{href:!0});var WUr=s(QI);CCo=r(WUr,"DistilBertForSequenceClassification"),WUr.forEach(t),MCo=r(jEe," (DistilBERT model)"),jEe.forEach(t),ECo=i(L),mb=n(L,"LI",{});var DEe=s(mb);Qte=n(DEe,"STRONG",{});var QUr=s(Qte);yCo=r(QUr,"electra"),QUr.forEach(t),wCo=r(DEe," \u2014 "),HI=n(DEe,"A",{href:!0});var HUr=s(HI);ACo=r(HUr,"ElectraForSequenceClassification"),HUr.forEach(t),LCo=r(DEe," (ELECTRA model)"),DEe.forEach(t),BCo=i(L),gb=n(L,"LI",{});var NEe=s(gb);Hte=n(NEe,"STRONG",{});var UUr=s(Hte);xCo=r(UUr,"flaubert"),UUr.forEach(t),kCo=r(NEe," \u2014 "),UI=n(NEe,"A",{href:!0});var JUr=s(UI);RCo=r(JUr,"FlaubertForSequenceClassification"),JUr.forEach(t),SCo=r(NEe," (FlauBERT model)"),NEe.forEach(t),PCo=i(L),hb=n(L,"LI",{});var qEe=s(hb);Ute=n(qEe,"STRONG",{});var YUr=s(Ute);$Co=r(YUr,"fnet"),YUr.forEach(t),ICo=r(qEe," \u2014 "),JI=n(qEe,"A",{href:!0});var KUr=s(JI);jCo=r(KUr,"FNetForSequenceClassification"),KUr.forEach(t),DCo=r(qEe," (FNet model)"),qEe.forEach(t),NCo=i(L),pb=n(L,"LI",{});var OEe=s(pb);Jte=n(OEe,"STRONG",{});var ZUr=s(Jte);qCo=r(ZUr,"funnel"),ZUr.forEach(t),OCo=r(OEe," \u2014 "),YI=n(OEe,"A",{href:!0});var eJr=s(YI);GCo=r(eJr,"FunnelForSequenceClassification"),eJr.forEach(t),XCo=r(OEe," (Funnel Transformer model)"),OEe.forEach(t),VCo=i(L),_b=n(L,"LI",{});var GEe=s(_b);Yte=n(GEe,"STRONG",{});var oJr=s(Yte);zCo=r(oJr,"gpt2"),oJr.forEach(t),WCo=r(GEe," \u2014 "),KI=n(GEe,"A",{href:!0});var rJr=s(KI);QCo=r(rJr,"GPT2ForSequenceClassification"),rJr.forEach(t),HCo=r(GEe," (OpenAI GPT-2 model)"),GEe.forEach(t),UCo=i(L),ub=n(L,"LI",{});var XEe=s(ub);Kte=n(XEe,"STRONG",{});var tJr=s(Kte);JCo=r(tJr,"gpt_neo"),tJr.forEach(t),YCo=r(XEe," \u2014 "),ZI=n(XEe,"A",{href:!0});var aJr=s(ZI);KCo=r(aJr,"GPTNeoForSequenceClassification"),aJr.forEach(t),ZCo=r(XEe," (GPT Neo model)"),XEe.forEach(t),eMo=i(L),bb=n(L,"LI",{});var VEe=s(bb);Zte=n(VEe,"STRONG",{});var nJr=s(Zte);oMo=r(nJr,"gptj"),nJr.forEach(t),rMo=r(VEe," \u2014 "),ej=n(VEe,"A",{href:!0});var sJr=s(ej);tMo=r(sJr,"GPTJForSequenceClassification"),sJr.forEach(t),aMo=r(VEe," (GPT-J model)"),VEe.forEach(t),nMo=i(L),vb=n(L,"LI",{});var zEe=s(vb);eae=n(zEe,"STRONG",{});var lJr=s(eae);sMo=r(lJr,"ibert"),lJr.forEach(t),lMo=r(zEe," \u2014 "),oj=n(zEe,"A",{href:!0});var iJr=s(oj);iMo=r(iJr,"IBertForSequenceClassification"),iJr.forEach(t),dMo=r(zEe," (I-BERT model)"),zEe.forEach(t),cMo=i(L),Tb=n(L,"LI",{});var WEe=s(Tb);oae=n(WEe,"STRONG",{});var dJr=s(oae);fMo=r(dJr,"layoutlm"),dJr.forEach(t),mMo=r(WEe," \u2014 "),rj=n(WEe,"A",{href:!0});var cJr=s(rj);gMo=r(cJr,"LayoutLMForSequenceClassification"),cJr.forEach(t),hMo=r(WEe," (LayoutLM model)"),WEe.forEach(t),pMo=i(L),Fb=n(L,"LI",{});var QEe=s(Fb);rae=n(QEe,"STRONG",{});var fJr=s(rae);_Mo=r(fJr,"layoutlmv2"),fJr.forEach(t),uMo=r(QEe," \u2014 "),tj=n(QEe,"A",{href:!0});var mJr=s(tj);bMo=r(mJr,"LayoutLMv2ForSequenceClassification"),mJr.forEach(t),vMo=r(QEe," (LayoutLMv2 model)"),QEe.forEach(t),TMo=i(L),Cb=n(L,"LI",{});var HEe=s(Cb);tae=n(HEe,"STRONG",{});var gJr=s(tae);FMo=r(gJr,"led"),gJr.forEach(t),CMo=r(HEe," \u2014 "),aj=n(HEe,"A",{href:!0});var hJr=s(aj);MMo=r(hJr,"LEDForSequenceClassification"),hJr.forEach(t),EMo=r(HEe," (LED model)"),HEe.forEach(t),yMo=i(L),Mb=n(L,"LI",{});var UEe=s(Mb);aae=n(UEe,"STRONG",{});var pJr=s(aae);wMo=r(pJr,"longformer"),pJr.forEach(t),AMo=r(UEe," \u2014 "),nj=n(UEe,"A",{href:!0});var _Jr=s(nj);LMo=r(_Jr,"LongformerForSequenceClassification"),_Jr.forEach(t),BMo=r(UEe," (Longformer model)"),UEe.forEach(t),xMo=i(L),Eb=n(L,"LI",{});var JEe=s(Eb);nae=n(JEe,"STRONG",{});var uJr=s(nae);kMo=r(uJr,"mbart"),uJr.forEach(t),RMo=r(JEe," \u2014 "),sj=n(JEe,"A",{href:!0});var bJr=s(sj);SMo=r(bJr,"MBartForSequenceClassification"),bJr.forEach(t),PMo=r(JEe," (mBART model)"),JEe.forEach(t),$Mo=i(L),yb=n(L,"LI",{});var YEe=s(yb);sae=n(YEe,"STRONG",{});var vJr=s(sae);IMo=r(vJr,"megatron-bert"),vJr.forEach(t),jMo=r(YEe," \u2014 "),lj=n(YEe,"A",{href:!0});var TJr=s(lj);DMo=r(TJr,"MegatronBertForSequenceClassification"),TJr.forEach(t),NMo=r(YEe," (MegatronBert model)"),YEe.forEach(t),qMo=i(L),wb=n(L,"LI",{});var KEe=s(wb);lae=n(KEe,"STRONG",{});var FJr=s(lae);OMo=r(FJr,"mobilebert"),FJr.forEach(t),GMo=r(KEe," \u2014 "),ij=n(KEe,"A",{href:!0});var CJr=s(ij);XMo=r(CJr,"MobileBertForSequenceClassification"),CJr.forEach(t),VMo=r(KEe," (MobileBERT model)"),KEe.forEach(t),zMo=i(L),Ab=n(L,"LI",{});var ZEe=s(Ab);iae=n(ZEe,"STRONG",{});var MJr=s(iae);WMo=r(MJr,"mpnet"),MJr.forEach(t),QMo=r(ZEe," \u2014 "),dj=n(ZEe,"A",{href:!0});var EJr=s(dj);HMo=r(EJr,"MPNetForSequenceClassification"),EJr.forEach(t),UMo=r(ZEe," (MPNet model)"),ZEe.forEach(t),JMo=i(L),Lb=n(L,"LI",{});var e3e=s(Lb);dae=n(e3e,"STRONG",{});var yJr=s(dae);YMo=r(yJr,"nystromformer"),yJr.forEach(t),KMo=r(e3e," \u2014 "),cj=n(e3e,"A",{href:!0});var wJr=s(cj);ZMo=r(wJr,"NystromformerForSequenceClassification"),wJr.forEach(t),e4o=r(e3e," (Nystromformer model)"),e3e.forEach(t),o4o=i(L),Bb=n(L,"LI",{});var o3e=s(Bb);cae=n(o3e,"STRONG",{});var AJr=s(cae);r4o=r(AJr,"openai-gpt"),AJr.forEach(t),t4o=r(o3e," \u2014 "),fj=n(o3e,"A",{href:!0});var LJr=s(fj);a4o=r(LJr,"OpenAIGPTForSequenceClassification"),LJr.forEach(t),n4o=r(o3e," (OpenAI GPT model)"),o3e.forEach(t),s4o=i(L),xb=n(L,"LI",{});var r3e=s(xb);fae=n(r3e,"STRONG",{});var BJr=s(fae);l4o=r(BJr,"perceiver"),BJr.forEach(t),i4o=r(r3e," \u2014 "),mj=n(r3e,"A",{href:!0});var xJr=s(mj);d4o=r(xJr,"PerceiverForSequenceClassification"),xJr.forEach(t),c4o=r(r3e," (Perceiver model)"),r3e.forEach(t),f4o=i(L),kb=n(L,"LI",{});var t3e=s(kb);mae=n(t3e,"STRONG",{});var kJr=s(mae);m4o=r(kJr,"plbart"),kJr.forEach(t),g4o=r(t3e," \u2014 "),gj=n(t3e,"A",{href:!0});var RJr=s(gj);h4o=r(RJr,"PLBartForSequenceClassification"),RJr.forEach(t),p4o=r(t3e," (PLBart model)"),t3e.forEach(t),_4o=i(L),Rb=n(L,"LI",{});var a3e=s(Rb);gae=n(a3e,"STRONG",{});var SJr=s(gae);u4o=r(SJr,"qdqbert"),SJr.forEach(t),b4o=r(a3e," \u2014 "),hj=n(a3e,"A",{href:!0});var PJr=s(hj);v4o=r(PJr,"QDQBertForSequenceClassification"),PJr.forEach(t),T4o=r(a3e," (QDQBert model)"),a3e.forEach(t),F4o=i(L),Sb=n(L,"LI",{});var n3e=s(Sb);hae=n(n3e,"STRONG",{});var $Jr=s(hae);C4o=r($Jr,"reformer"),$Jr.forEach(t),M4o=r(n3e," \u2014 "),pj=n(n3e,"A",{href:!0});var IJr=s(pj);E4o=r(IJr,"ReformerForSequenceClassification"),IJr.forEach(t),y4o=r(n3e," (Reformer model)"),n3e.forEach(t),w4o=i(L),Pb=n(L,"LI",{});var s3e=s(Pb);pae=n(s3e,"STRONG",{});var jJr=s(pae);A4o=r(jJr,"rembert"),jJr.forEach(t),L4o=r(s3e," \u2014 "),_j=n(s3e,"A",{href:!0});var DJr=s(_j);B4o=r(DJr,"RemBertForSequenceClassification"),DJr.forEach(t),x4o=r(s3e," (RemBERT model)"),s3e.forEach(t),k4o=i(L),$b=n(L,"LI",{});var l3e=s($b);_ae=n(l3e,"STRONG",{});var NJr=s(_ae);R4o=r(NJr,"roberta"),NJr.forEach(t),S4o=r(l3e," \u2014 "),uj=n(l3e,"A",{href:!0});var qJr=s(uj);P4o=r(qJr,"RobertaForSequenceClassification"),qJr.forEach(t),$4o=r(l3e," (RoBERTa model)"),l3e.forEach(t),I4o=i(L),Ib=n(L,"LI",{});var i3e=s(Ib);uae=n(i3e,"STRONG",{});var OJr=s(uae);j4o=r(OJr,"roformer"),OJr.forEach(t),D4o=r(i3e," \u2014 "),bj=n(i3e,"A",{href:!0});var GJr=s(bj);N4o=r(GJr,"RoFormerForSequenceClassification"),GJr.forEach(t),q4o=r(i3e," (RoFormer model)"),i3e.forEach(t),O4o=i(L),jb=n(L,"LI",{});var d3e=s(jb);bae=n(d3e,"STRONG",{});var XJr=s(bae);G4o=r(XJr,"squeezebert"),XJr.forEach(t),X4o=r(d3e," \u2014 "),vj=n(d3e,"A",{href:!0});var VJr=s(vj);V4o=r(VJr,"SqueezeBertForSequenceClassification"),VJr.forEach(t),z4o=r(d3e," (SqueezeBERT model)"),d3e.forEach(t),W4o=i(L),Db=n(L,"LI",{});var c3e=s(Db);vae=n(c3e,"STRONG",{});var zJr=s(vae);Q4o=r(zJr,"tapas"),zJr.forEach(t),H4o=r(c3e," \u2014 "),Tj=n(c3e,"A",{href:!0});var WJr=s(Tj);U4o=r(WJr,"TapasForSequenceClassification"),WJr.forEach(t),J4o=r(c3e," (TAPAS model)"),c3e.forEach(t),Y4o=i(L),Nb=n(L,"LI",{});var f3e=s(Nb);Tae=n(f3e,"STRONG",{});var QJr=s(Tae);K4o=r(QJr,"transfo-xl"),QJr.forEach(t),Z4o=r(f3e," \u2014 "),Fj=n(f3e,"A",{href:!0});var HJr=s(Fj);eEo=r(HJr,"TransfoXLForSequenceClassification"),HJr.forEach(t),oEo=r(f3e," (Transformer-XL model)"),f3e.forEach(t),rEo=i(L),qb=n(L,"LI",{});var m3e=s(qb);Fae=n(m3e,"STRONG",{});var UJr=s(Fae);tEo=r(UJr,"xlm"),UJr.forEach(t),aEo=r(m3e," \u2014 "),Cj=n(m3e,"A",{href:!0});var JJr=s(Cj);nEo=r(JJr,"XLMForSequenceClassification"),JJr.forEach(t),sEo=r(m3e," (XLM model)"),m3e.forEach(t),lEo=i(L),Ob=n(L,"LI",{});var g3e=s(Ob);Cae=n(g3e,"STRONG",{});var YJr=s(Cae);iEo=r(YJr,"xlm-roberta"),YJr.forEach(t),dEo=r(g3e," \u2014 "),Mj=n(g3e,"A",{href:!0});var KJr=s(Mj);cEo=r(KJr,"XLMRobertaForSequenceClassification"),KJr.forEach(t),fEo=r(g3e," (XLM-RoBERTa model)"),g3e.forEach(t),mEo=i(L),Gb=n(L,"LI",{});var h3e=s(Gb);Mae=n(h3e,"STRONG",{});var ZJr=s(Mae);gEo=r(ZJr,"xlm-roberta-xl"),ZJr.forEach(t),hEo=r(h3e," \u2014 "),Ej=n(h3e,"A",{href:!0});var eYr=s(Ej);pEo=r(eYr,"XLMRobertaXLForSequenceClassification"),eYr.forEach(t),_Eo=r(h3e," (XLM-RoBERTa-XL model)"),h3e.forEach(t),uEo=i(L),Xb=n(L,"LI",{});var p3e=s(Xb);Eae=n(p3e,"STRONG",{});var oYr=s(Eae);bEo=r(oYr,"xlnet"),oYr.forEach(t),vEo=r(p3e," \u2014 "),yj=n(p3e,"A",{href:!0});var rYr=s(yj);TEo=r(rYr,"XLNetForSequenceClassification"),rYr.forEach(t),FEo=r(p3e," (XLNet model)"),p3e.forEach(t),CEo=i(L),Vb=n(L,"LI",{});var _3e=s(Vb);yae=n(_3e,"STRONG",{});var tYr=s(yae);MEo=r(tYr,"yoso"),tYr.forEach(t),EEo=r(_3e," \u2014 "),wj=n(_3e,"A",{href:!0});var aYr=s(wj);yEo=r(aYr,"YosoForSequenceClassification"),aYr.forEach(t),wEo=r(_3e," (YOSO model)"),_3e.forEach(t),L.forEach(t),AEo=i(Ht),zb=n(Ht,"P",{});var u3e=s(zb);LEo=r(u3e,"The model is set in evaluation mode by default using "),wae=n(u3e,"CODE",{});var nYr=s(wae);BEo=r(nYr,"model.eval()"),nYr.forEach(t),xEo=r(u3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Aae=n(u3e,"CODE",{});var sYr=s(Aae);kEo=r(sYr,"model.train()"),sYr.forEach(t),u3e.forEach(t),REo=i(Ht),Lae=n(Ht,"P",{});var lYr=s(Lae);SEo=r(lYr,"Examples:"),lYr.forEach(t),PEo=i(Ht),m(wE.$$.fragment,Ht),Ht.forEach(t),ll.forEach(t),gke=i(d),Cd=n(d,"H2",{class:!0});var ESe=s(Cd);Wb=n(ESe,"A",{id:!0,class:!0,href:!0});var iYr=s(Wb);Bae=n(iYr,"SPAN",{});var dYr=s(Bae);m(AE.$$.fragment,dYr),dYr.forEach(t),iYr.forEach(t),$Eo=i(ESe),xae=n(ESe,"SPAN",{});var cYr=s(xae);IEo=r(cYr,"AutoModelForMultipleChoice"),cYr.forEach(t),ESe.forEach(t),hke=i(d),tr=n(d,"DIV",{class:!0});var dl=s(tr);m(LE.$$.fragment,dl),jEo=i(dl),Md=n(dl,"P",{});var rW=s(Md);DEo=r(rW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),kae=n(rW,"CODE",{});var fYr=s(kae);NEo=r(fYr,"from_pretrained()"),fYr.forEach(t),qEo=r(rW,"class method or the "),Rae=n(rW,"CODE",{});var mYr=s(Rae);OEo=r(mYr,"from_config()"),mYr.forEach(t),GEo=r(rW,`class
method.`),rW.forEach(t),XEo=i(dl),BE=n(dl,"P",{});var ySe=s(BE);VEo=r(ySe,"This class cannot be instantiated directly using "),Sae=n(ySe,"CODE",{});var gYr=s(Sae);zEo=r(gYr,"__init__()"),gYr.forEach(t),WEo=r(ySe," (throws an error)."),ySe.forEach(t),QEo=i(dl),Kr=n(dl,"DIV",{class:!0});var cl=s(Kr);m(xE.$$.fragment,cl),HEo=i(cl),Pae=n(cl,"P",{});var hYr=s(Pae);UEo=r(hYr,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),hYr.forEach(t),JEo=i(cl),Ed=n(cl,"P",{});var tW=s(Ed);YEo=r(tW,`Note:
Loading a model from its configuration file does `),$ae=n(tW,"STRONG",{});var pYr=s($ae);KEo=r(pYr,"not"),pYr.forEach(t),ZEo=r(tW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Iae=n(tW,"CODE",{});var _Yr=s(Iae);e3o=r(_Yr,"from_pretrained()"),_Yr.forEach(t),o3o=r(tW,"to load the model weights."),tW.forEach(t),r3o=i(cl),jae=n(cl,"P",{});var uYr=s(jae);t3o=r(uYr,"Examples:"),uYr.forEach(t),a3o=i(cl),m(kE.$$.fragment,cl),cl.forEach(t),n3o=i(dl),Xe=n(dl,"DIV",{class:!0});var Ut=s(Xe);m(RE.$$.fragment,Ut),s3o=i(Ut),Dae=n(Ut,"P",{});var bYr=s(Dae);l3o=r(bYr,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),bYr.forEach(t),i3o=i(Ut),en=n(Ut,"P",{});var hM=s(en);d3o=r(hM,"The model class to instantiate is selected based on the "),Nae=n(hM,"CODE",{});var vYr=s(Nae);c3o=r(vYr,"model_type"),vYr.forEach(t),f3o=r(hM,` property of the config object (either
passed as an argument or loaded from `),qae=n(hM,"CODE",{});var TYr=s(qae);m3o=r(TYr,"pretrained_model_name_or_path"),TYr.forEach(t),g3o=r(hM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oae=n(hM,"CODE",{});var FYr=s(Oae);h3o=r(FYr,"pretrained_model_name_or_path"),FYr.forEach(t),p3o=r(hM,":"),hM.forEach(t),_3o=i(Ut),O=n(Ut,"UL",{});var G=s(O);Qb=n(G,"LI",{});var b3e=s(Qb);Gae=n(b3e,"STRONG",{});var CYr=s(Gae);u3o=r(CYr,"albert"),CYr.forEach(t),b3o=r(b3e," \u2014 "),Aj=n(b3e,"A",{href:!0});var MYr=s(Aj);v3o=r(MYr,"AlbertForMultipleChoice"),MYr.forEach(t),T3o=r(b3e," (ALBERT model)"),b3e.forEach(t),F3o=i(G),Hb=n(G,"LI",{});var v3e=s(Hb);Xae=n(v3e,"STRONG",{});var EYr=s(Xae);C3o=r(EYr,"bert"),EYr.forEach(t),M3o=r(v3e," \u2014 "),Lj=n(v3e,"A",{href:!0});var yYr=s(Lj);E3o=r(yYr,"BertForMultipleChoice"),yYr.forEach(t),y3o=r(v3e," (BERT model)"),v3e.forEach(t),w3o=i(G),Ub=n(G,"LI",{});var T3e=s(Ub);Vae=n(T3e,"STRONG",{});var wYr=s(Vae);A3o=r(wYr,"big_bird"),wYr.forEach(t),L3o=r(T3e," \u2014 "),Bj=n(T3e,"A",{href:!0});var AYr=s(Bj);B3o=r(AYr,"BigBirdForMultipleChoice"),AYr.forEach(t),x3o=r(T3e," (BigBird model)"),T3e.forEach(t),k3o=i(G),Jb=n(G,"LI",{});var F3e=s(Jb);zae=n(F3e,"STRONG",{});var LYr=s(zae);R3o=r(LYr,"camembert"),LYr.forEach(t),S3o=r(F3e," \u2014 "),xj=n(F3e,"A",{href:!0});var BYr=s(xj);P3o=r(BYr,"CamembertForMultipleChoice"),BYr.forEach(t),$3o=r(F3e," (CamemBERT model)"),F3e.forEach(t),I3o=i(G),Yb=n(G,"LI",{});var C3e=s(Yb);Wae=n(C3e,"STRONG",{});var xYr=s(Wae);j3o=r(xYr,"canine"),xYr.forEach(t),D3o=r(C3e," \u2014 "),kj=n(C3e,"A",{href:!0});var kYr=s(kj);N3o=r(kYr,"CanineForMultipleChoice"),kYr.forEach(t),q3o=r(C3e," (Canine model)"),C3e.forEach(t),O3o=i(G),Kb=n(G,"LI",{});var M3e=s(Kb);Qae=n(M3e,"STRONG",{});var RYr=s(Qae);G3o=r(RYr,"convbert"),RYr.forEach(t),X3o=r(M3e," \u2014 "),Rj=n(M3e,"A",{href:!0});var SYr=s(Rj);V3o=r(SYr,"ConvBertForMultipleChoice"),SYr.forEach(t),z3o=r(M3e," (ConvBERT model)"),M3e.forEach(t),W3o=i(G),Zb=n(G,"LI",{});var E3e=s(Zb);Hae=n(E3e,"STRONG",{});var PYr=s(Hae);Q3o=r(PYr,"data2vec-text"),PYr.forEach(t),H3o=r(E3e," \u2014 "),Sj=n(E3e,"A",{href:!0});var $Yr=s(Sj);U3o=r($Yr,"Data2VecTextForMultipleChoice"),$Yr.forEach(t),J3o=r(E3e," (Data2VecText model)"),E3e.forEach(t),Y3o=i(G),e5=n(G,"LI",{});var y3e=s(e5);Uae=n(y3e,"STRONG",{});var IYr=s(Uae);K3o=r(IYr,"distilbert"),IYr.forEach(t),Z3o=r(y3e," \u2014 "),Pj=n(y3e,"A",{href:!0});var jYr=s(Pj);eyo=r(jYr,"DistilBertForMultipleChoice"),jYr.forEach(t),oyo=r(y3e," (DistilBERT model)"),y3e.forEach(t),ryo=i(G),o5=n(G,"LI",{});var w3e=s(o5);Jae=n(w3e,"STRONG",{});var DYr=s(Jae);tyo=r(DYr,"electra"),DYr.forEach(t),ayo=r(w3e," \u2014 "),$j=n(w3e,"A",{href:!0});var NYr=s($j);nyo=r(NYr,"ElectraForMultipleChoice"),NYr.forEach(t),syo=r(w3e," (ELECTRA model)"),w3e.forEach(t),lyo=i(G),r5=n(G,"LI",{});var A3e=s(r5);Yae=n(A3e,"STRONG",{});var qYr=s(Yae);iyo=r(qYr,"flaubert"),qYr.forEach(t),dyo=r(A3e," \u2014 "),Ij=n(A3e,"A",{href:!0});var OYr=s(Ij);cyo=r(OYr,"FlaubertForMultipleChoice"),OYr.forEach(t),fyo=r(A3e," (FlauBERT model)"),A3e.forEach(t),myo=i(G),t5=n(G,"LI",{});var L3e=s(t5);Kae=n(L3e,"STRONG",{});var GYr=s(Kae);gyo=r(GYr,"fnet"),GYr.forEach(t),hyo=r(L3e," \u2014 "),jj=n(L3e,"A",{href:!0});var XYr=s(jj);pyo=r(XYr,"FNetForMultipleChoice"),XYr.forEach(t),_yo=r(L3e," (FNet model)"),L3e.forEach(t),uyo=i(G),a5=n(G,"LI",{});var B3e=s(a5);Zae=n(B3e,"STRONG",{});var VYr=s(Zae);byo=r(VYr,"funnel"),VYr.forEach(t),vyo=r(B3e," \u2014 "),Dj=n(B3e,"A",{href:!0});var zYr=s(Dj);Tyo=r(zYr,"FunnelForMultipleChoice"),zYr.forEach(t),Fyo=r(B3e," (Funnel Transformer model)"),B3e.forEach(t),Cyo=i(G),n5=n(G,"LI",{});var x3e=s(n5);ene=n(x3e,"STRONG",{});var WYr=s(ene);Myo=r(WYr,"ibert"),WYr.forEach(t),Eyo=r(x3e," \u2014 "),Nj=n(x3e,"A",{href:!0});var QYr=s(Nj);yyo=r(QYr,"IBertForMultipleChoice"),QYr.forEach(t),wyo=r(x3e," (I-BERT model)"),x3e.forEach(t),Ayo=i(G),s5=n(G,"LI",{});var k3e=s(s5);one=n(k3e,"STRONG",{});var HYr=s(one);Lyo=r(HYr,"longformer"),HYr.forEach(t),Byo=r(k3e," \u2014 "),qj=n(k3e,"A",{href:!0});var UYr=s(qj);xyo=r(UYr,"LongformerForMultipleChoice"),UYr.forEach(t),kyo=r(k3e," (Longformer model)"),k3e.forEach(t),Ryo=i(G),l5=n(G,"LI",{});var R3e=s(l5);rne=n(R3e,"STRONG",{});var JYr=s(rne);Syo=r(JYr,"megatron-bert"),JYr.forEach(t),Pyo=r(R3e," \u2014 "),Oj=n(R3e,"A",{href:!0});var YYr=s(Oj);$yo=r(YYr,"MegatronBertForMultipleChoice"),YYr.forEach(t),Iyo=r(R3e," (MegatronBert model)"),R3e.forEach(t),jyo=i(G),i5=n(G,"LI",{});var S3e=s(i5);tne=n(S3e,"STRONG",{});var KYr=s(tne);Dyo=r(KYr,"mobilebert"),KYr.forEach(t),Nyo=r(S3e," \u2014 "),Gj=n(S3e,"A",{href:!0});var ZYr=s(Gj);qyo=r(ZYr,"MobileBertForMultipleChoice"),ZYr.forEach(t),Oyo=r(S3e," (MobileBERT model)"),S3e.forEach(t),Gyo=i(G),d5=n(G,"LI",{});var P3e=s(d5);ane=n(P3e,"STRONG",{});var eKr=s(ane);Xyo=r(eKr,"mpnet"),eKr.forEach(t),Vyo=r(P3e," \u2014 "),Xj=n(P3e,"A",{href:!0});var oKr=s(Xj);zyo=r(oKr,"MPNetForMultipleChoice"),oKr.forEach(t),Wyo=r(P3e," (MPNet model)"),P3e.forEach(t),Qyo=i(G),c5=n(G,"LI",{});var $3e=s(c5);nne=n($3e,"STRONG",{});var rKr=s(nne);Hyo=r(rKr,"nystromformer"),rKr.forEach(t),Uyo=r($3e," \u2014 "),Vj=n($3e,"A",{href:!0});var tKr=s(Vj);Jyo=r(tKr,"NystromformerForMultipleChoice"),tKr.forEach(t),Yyo=r($3e," (Nystromformer model)"),$3e.forEach(t),Kyo=i(G),f5=n(G,"LI",{});var I3e=s(f5);sne=n(I3e,"STRONG",{});var aKr=s(sne);Zyo=r(aKr,"qdqbert"),aKr.forEach(t),ewo=r(I3e," \u2014 "),zj=n(I3e,"A",{href:!0});var nKr=s(zj);owo=r(nKr,"QDQBertForMultipleChoice"),nKr.forEach(t),rwo=r(I3e," (QDQBert model)"),I3e.forEach(t),two=i(G),m5=n(G,"LI",{});var j3e=s(m5);lne=n(j3e,"STRONG",{});var sKr=s(lne);awo=r(sKr,"rembert"),sKr.forEach(t),nwo=r(j3e," \u2014 "),Wj=n(j3e,"A",{href:!0});var lKr=s(Wj);swo=r(lKr,"RemBertForMultipleChoice"),lKr.forEach(t),lwo=r(j3e," (RemBERT model)"),j3e.forEach(t),iwo=i(G),g5=n(G,"LI",{});var D3e=s(g5);ine=n(D3e,"STRONG",{});var iKr=s(ine);dwo=r(iKr,"roberta"),iKr.forEach(t),cwo=r(D3e," \u2014 "),Qj=n(D3e,"A",{href:!0});var dKr=s(Qj);fwo=r(dKr,"RobertaForMultipleChoice"),dKr.forEach(t),mwo=r(D3e," (RoBERTa model)"),D3e.forEach(t),gwo=i(G),h5=n(G,"LI",{});var N3e=s(h5);dne=n(N3e,"STRONG",{});var cKr=s(dne);hwo=r(cKr,"roformer"),cKr.forEach(t),pwo=r(N3e," \u2014 "),Hj=n(N3e,"A",{href:!0});var fKr=s(Hj);_wo=r(fKr,"RoFormerForMultipleChoice"),fKr.forEach(t),uwo=r(N3e," (RoFormer model)"),N3e.forEach(t),bwo=i(G),p5=n(G,"LI",{});var q3e=s(p5);cne=n(q3e,"STRONG",{});var mKr=s(cne);vwo=r(mKr,"squeezebert"),mKr.forEach(t),Two=r(q3e," \u2014 "),Uj=n(q3e,"A",{href:!0});var gKr=s(Uj);Fwo=r(gKr,"SqueezeBertForMultipleChoice"),gKr.forEach(t),Cwo=r(q3e," (SqueezeBERT model)"),q3e.forEach(t),Mwo=i(G),_5=n(G,"LI",{});var O3e=s(_5);fne=n(O3e,"STRONG",{});var hKr=s(fne);Ewo=r(hKr,"xlm"),hKr.forEach(t),ywo=r(O3e," \u2014 "),Jj=n(O3e,"A",{href:!0});var pKr=s(Jj);wwo=r(pKr,"XLMForMultipleChoice"),pKr.forEach(t),Awo=r(O3e," (XLM model)"),O3e.forEach(t),Lwo=i(G),u5=n(G,"LI",{});var G3e=s(u5);mne=n(G3e,"STRONG",{});var _Kr=s(mne);Bwo=r(_Kr,"xlm-roberta"),_Kr.forEach(t),xwo=r(G3e," \u2014 "),Yj=n(G3e,"A",{href:!0});var uKr=s(Yj);kwo=r(uKr,"XLMRobertaForMultipleChoice"),uKr.forEach(t),Rwo=r(G3e," (XLM-RoBERTa model)"),G3e.forEach(t),Swo=i(G),b5=n(G,"LI",{});var X3e=s(b5);gne=n(X3e,"STRONG",{});var bKr=s(gne);Pwo=r(bKr,"xlm-roberta-xl"),bKr.forEach(t),$wo=r(X3e," \u2014 "),Kj=n(X3e,"A",{href:!0});var vKr=s(Kj);Iwo=r(vKr,"XLMRobertaXLForMultipleChoice"),vKr.forEach(t),jwo=r(X3e," (XLM-RoBERTa-XL model)"),X3e.forEach(t),Dwo=i(G),v5=n(G,"LI",{});var V3e=s(v5);hne=n(V3e,"STRONG",{});var TKr=s(hne);Nwo=r(TKr,"xlnet"),TKr.forEach(t),qwo=r(V3e," \u2014 "),Zj=n(V3e,"A",{href:!0});var FKr=s(Zj);Owo=r(FKr,"XLNetForMultipleChoice"),FKr.forEach(t),Gwo=r(V3e," (XLNet model)"),V3e.forEach(t),Xwo=i(G),T5=n(G,"LI",{});var z3e=s(T5);pne=n(z3e,"STRONG",{});var CKr=s(pne);Vwo=r(CKr,"yoso"),CKr.forEach(t),zwo=r(z3e," \u2014 "),eD=n(z3e,"A",{href:!0});var MKr=s(eD);Wwo=r(MKr,"YosoForMultipleChoice"),MKr.forEach(t),Qwo=r(z3e," (YOSO model)"),z3e.forEach(t),G.forEach(t),Hwo=i(Ut),F5=n(Ut,"P",{});var W3e=s(F5);Uwo=r(W3e,"The model is set in evaluation mode by default using "),_ne=n(W3e,"CODE",{});var EKr=s(_ne);Jwo=r(EKr,"model.eval()"),EKr.forEach(t),Ywo=r(W3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),une=n(W3e,"CODE",{});var yKr=s(une);Kwo=r(yKr,"model.train()"),yKr.forEach(t),W3e.forEach(t),Zwo=i(Ut),bne=n(Ut,"P",{});var wKr=s(bne);eAo=r(wKr,"Examples:"),wKr.forEach(t),oAo=i(Ut),m(SE.$$.fragment,Ut),Ut.forEach(t),dl.forEach(t),pke=i(d),yd=n(d,"H2",{class:!0});var wSe=s(yd);C5=n(wSe,"A",{id:!0,class:!0,href:!0});var AKr=s(C5);vne=n(AKr,"SPAN",{});var LKr=s(vne);m(PE.$$.fragment,LKr),LKr.forEach(t),AKr.forEach(t),rAo=i(wSe),Tne=n(wSe,"SPAN",{});var BKr=s(Tne);tAo=r(BKr,"AutoModelForNextSentencePrediction"),BKr.forEach(t),wSe.forEach(t),_ke=i(d),ar=n(d,"DIV",{class:!0});var fl=s(ar);m($E.$$.fragment,fl),aAo=i(fl),wd=n(fl,"P",{});var aW=s(wd);nAo=r(aW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Fne=n(aW,"CODE",{});var xKr=s(Fne);sAo=r(xKr,"from_pretrained()"),xKr.forEach(t),lAo=r(aW,"class method or the "),Cne=n(aW,"CODE",{});var kKr=s(Cne);iAo=r(kKr,"from_config()"),kKr.forEach(t),dAo=r(aW,`class
method.`),aW.forEach(t),cAo=i(fl),IE=n(fl,"P",{});var ASe=s(IE);fAo=r(ASe,"This class cannot be instantiated directly using "),Mne=n(ASe,"CODE",{});var RKr=s(Mne);mAo=r(RKr,"__init__()"),RKr.forEach(t),gAo=r(ASe," (throws an error)."),ASe.forEach(t),hAo=i(fl),Zr=n(fl,"DIV",{class:!0});var ml=s(Zr);m(jE.$$.fragment,ml),pAo=i(ml),Ene=n(ml,"P",{});var SKr=s(Ene);_Ao=r(SKr,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),SKr.forEach(t),uAo=i(ml),Ad=n(ml,"P",{});var nW=s(Ad);bAo=r(nW,`Note:
Loading a model from its configuration file does `),yne=n(nW,"STRONG",{});var PKr=s(yne);vAo=r(PKr,"not"),PKr.forEach(t),TAo=r(nW,` load the model weights. It only affects the
model\u2019s configuration. Use `),wne=n(nW,"CODE",{});var $Kr=s(wne);FAo=r($Kr,"from_pretrained()"),$Kr.forEach(t),CAo=r(nW,"to load the model weights."),nW.forEach(t),MAo=i(ml),Ane=n(ml,"P",{});var IKr=s(Ane);EAo=r(IKr,"Examples:"),IKr.forEach(t),yAo=i(ml),m(DE.$$.fragment,ml),ml.forEach(t),wAo=i(fl),Ve=n(fl,"DIV",{class:!0});var Jt=s(Ve);m(NE.$$.fragment,Jt),AAo=i(Jt),Lne=n(Jt,"P",{});var jKr=s(Lne);LAo=r(jKr,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),jKr.forEach(t),BAo=i(Jt),on=n(Jt,"P",{});var pM=s(on);xAo=r(pM,"The model class to instantiate is selected based on the "),Bne=n(pM,"CODE",{});var DKr=s(Bne);kAo=r(DKr,"model_type"),DKr.forEach(t),RAo=r(pM,` property of the config object (either
passed as an argument or loaded from `),xne=n(pM,"CODE",{});var NKr=s(xne);SAo=r(NKr,"pretrained_model_name_or_path"),NKr.forEach(t),PAo=r(pM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kne=n(pM,"CODE",{});var qKr=s(kne);$Ao=r(qKr,"pretrained_model_name_or_path"),qKr.forEach(t),IAo=r(pM,":"),pM.forEach(t),jAo=i(Jt),ma=n(Jt,"UL",{});var gl=s(ma);M5=n(gl,"LI",{});var Q3e=s(M5);Rne=n(Q3e,"STRONG",{});var OKr=s(Rne);DAo=r(OKr,"bert"),OKr.forEach(t),NAo=r(Q3e," \u2014 "),oD=n(Q3e,"A",{href:!0});var GKr=s(oD);qAo=r(GKr,"BertForNextSentencePrediction"),GKr.forEach(t),OAo=r(Q3e," (BERT model)"),Q3e.forEach(t),GAo=i(gl),E5=n(gl,"LI",{});var H3e=s(E5);Sne=n(H3e,"STRONG",{});var XKr=s(Sne);XAo=r(XKr,"fnet"),XKr.forEach(t),VAo=r(H3e," \u2014 "),rD=n(H3e,"A",{href:!0});var VKr=s(rD);zAo=r(VKr,"FNetForNextSentencePrediction"),VKr.forEach(t),WAo=r(H3e," (FNet model)"),H3e.forEach(t),QAo=i(gl),y5=n(gl,"LI",{});var U3e=s(y5);Pne=n(U3e,"STRONG",{});var zKr=s(Pne);HAo=r(zKr,"megatron-bert"),zKr.forEach(t),UAo=r(U3e," \u2014 "),tD=n(U3e,"A",{href:!0});var WKr=s(tD);JAo=r(WKr,"MegatronBertForNextSentencePrediction"),WKr.forEach(t),YAo=r(U3e," (MegatronBert model)"),U3e.forEach(t),KAo=i(gl),w5=n(gl,"LI",{});var J3e=s(w5);$ne=n(J3e,"STRONG",{});var QKr=s($ne);ZAo=r(QKr,"mobilebert"),QKr.forEach(t),eLo=r(J3e," \u2014 "),aD=n(J3e,"A",{href:!0});var HKr=s(aD);oLo=r(HKr,"MobileBertForNextSentencePrediction"),HKr.forEach(t),rLo=r(J3e," (MobileBERT model)"),J3e.forEach(t),tLo=i(gl),A5=n(gl,"LI",{});var Y3e=s(A5);Ine=n(Y3e,"STRONG",{});var UKr=s(Ine);aLo=r(UKr,"qdqbert"),UKr.forEach(t),nLo=r(Y3e," \u2014 "),nD=n(Y3e,"A",{href:!0});var JKr=s(nD);sLo=r(JKr,"QDQBertForNextSentencePrediction"),JKr.forEach(t),lLo=r(Y3e," (QDQBert model)"),Y3e.forEach(t),gl.forEach(t),iLo=i(Jt),L5=n(Jt,"P",{});var K3e=s(L5);dLo=r(K3e,"The model is set in evaluation mode by default using "),jne=n(K3e,"CODE",{});var YKr=s(jne);cLo=r(YKr,"model.eval()"),YKr.forEach(t),fLo=r(K3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dne=n(K3e,"CODE",{});var KKr=s(Dne);mLo=r(KKr,"model.train()"),KKr.forEach(t),K3e.forEach(t),gLo=i(Jt),Nne=n(Jt,"P",{});var ZKr=s(Nne);hLo=r(ZKr,"Examples:"),ZKr.forEach(t),pLo=i(Jt),m(qE.$$.fragment,Jt),Jt.forEach(t),fl.forEach(t),uke=i(d),Ld=n(d,"H2",{class:!0});var LSe=s(Ld);B5=n(LSe,"A",{id:!0,class:!0,href:!0});var eZr=s(B5);qne=n(eZr,"SPAN",{});var oZr=s(qne);m(OE.$$.fragment,oZr),oZr.forEach(t),eZr.forEach(t),_Lo=i(LSe),One=n(LSe,"SPAN",{});var rZr=s(One);uLo=r(rZr,"AutoModelForTokenClassification"),rZr.forEach(t),LSe.forEach(t),bke=i(d),nr=n(d,"DIV",{class:!0});var hl=s(nr);m(GE.$$.fragment,hl),bLo=i(hl),Bd=n(hl,"P",{});var sW=s(Bd);vLo=r(sW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Gne=n(sW,"CODE",{});var tZr=s(Gne);TLo=r(tZr,"from_pretrained()"),tZr.forEach(t),FLo=r(sW,"class method or the "),Xne=n(sW,"CODE",{});var aZr=s(Xne);CLo=r(aZr,"from_config()"),aZr.forEach(t),MLo=r(sW,`class
method.`),sW.forEach(t),ELo=i(hl),XE=n(hl,"P",{});var BSe=s(XE);yLo=r(BSe,"This class cannot be instantiated directly using "),Vne=n(BSe,"CODE",{});var nZr=s(Vne);wLo=r(nZr,"__init__()"),nZr.forEach(t),ALo=r(BSe," (throws an error)."),BSe.forEach(t),LLo=i(hl),et=n(hl,"DIV",{class:!0});var pl=s(et);m(VE.$$.fragment,pl),BLo=i(pl),zne=n(pl,"P",{});var sZr=s(zne);xLo=r(sZr,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),sZr.forEach(t),kLo=i(pl),xd=n(pl,"P",{});var lW=s(xd);RLo=r(lW,`Note:
Loading a model from its configuration file does `),Wne=n(lW,"STRONG",{});var lZr=s(Wne);SLo=r(lZr,"not"),lZr.forEach(t),PLo=r(lW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qne=n(lW,"CODE",{});var iZr=s(Qne);$Lo=r(iZr,"from_pretrained()"),iZr.forEach(t),ILo=r(lW,"to load the model weights."),lW.forEach(t),jLo=i(pl),Hne=n(pl,"P",{});var dZr=s(Hne);DLo=r(dZr,"Examples:"),dZr.forEach(t),NLo=i(pl),m(zE.$$.fragment,pl),pl.forEach(t),qLo=i(hl),ze=n(hl,"DIV",{class:!0});var Yt=s(ze);m(WE.$$.fragment,Yt),OLo=i(Yt),Une=n(Yt,"P",{});var cZr=s(Une);GLo=r(cZr,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),cZr.forEach(t),XLo=i(Yt),rn=n(Yt,"P",{});var _M=s(rn);VLo=r(_M,"The model class to instantiate is selected based on the "),Jne=n(_M,"CODE",{});var fZr=s(Jne);zLo=r(fZr,"model_type"),fZr.forEach(t),WLo=r(_M,` property of the config object (either
passed as an argument or loaded from `),Yne=n(_M,"CODE",{});var mZr=s(Yne);QLo=r(mZr,"pretrained_model_name_or_path"),mZr.forEach(t),HLo=r(_M,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kne=n(_M,"CODE",{});var gZr=s(Kne);ULo=r(gZr,"pretrained_model_name_or_path"),gZr.forEach(t),JLo=r(_M,":"),_M.forEach(t),YLo=i(Yt),N=n(Yt,"UL",{});var q=s(N);x5=n(q,"LI",{});var Z3e=s(x5);Zne=n(Z3e,"STRONG",{});var hZr=s(Zne);KLo=r(hZr,"albert"),hZr.forEach(t),ZLo=r(Z3e," \u2014 "),sD=n(Z3e,"A",{href:!0});var pZr=s(sD);e7o=r(pZr,"AlbertForTokenClassification"),pZr.forEach(t),o7o=r(Z3e," (ALBERT model)"),Z3e.forEach(t),r7o=i(q),k5=n(q,"LI",{});var eye=s(k5);ese=n(eye,"STRONG",{});var _Zr=s(ese);t7o=r(_Zr,"bert"),_Zr.forEach(t),a7o=r(eye," \u2014 "),lD=n(eye,"A",{href:!0});var uZr=s(lD);n7o=r(uZr,"BertForTokenClassification"),uZr.forEach(t),s7o=r(eye," (BERT model)"),eye.forEach(t),l7o=i(q),R5=n(q,"LI",{});var oye=s(R5);ose=n(oye,"STRONG",{});var bZr=s(ose);i7o=r(bZr,"big_bird"),bZr.forEach(t),d7o=r(oye," \u2014 "),iD=n(oye,"A",{href:!0});var vZr=s(iD);c7o=r(vZr,"BigBirdForTokenClassification"),vZr.forEach(t),f7o=r(oye," (BigBird model)"),oye.forEach(t),m7o=i(q),S5=n(q,"LI",{});var rye=s(S5);rse=n(rye,"STRONG",{});var TZr=s(rse);g7o=r(TZr,"camembert"),TZr.forEach(t),h7o=r(rye," \u2014 "),dD=n(rye,"A",{href:!0});var FZr=s(dD);p7o=r(FZr,"CamembertForTokenClassification"),FZr.forEach(t),_7o=r(rye," (CamemBERT model)"),rye.forEach(t),u7o=i(q),P5=n(q,"LI",{});var tye=s(P5);tse=n(tye,"STRONG",{});var CZr=s(tse);b7o=r(CZr,"canine"),CZr.forEach(t),v7o=r(tye," \u2014 "),cD=n(tye,"A",{href:!0});var MZr=s(cD);T7o=r(MZr,"CanineForTokenClassification"),MZr.forEach(t),F7o=r(tye," (Canine model)"),tye.forEach(t),C7o=i(q),$5=n(q,"LI",{});var aye=s($5);ase=n(aye,"STRONG",{});var EZr=s(ase);M7o=r(EZr,"convbert"),EZr.forEach(t),E7o=r(aye," \u2014 "),fD=n(aye,"A",{href:!0});var yZr=s(fD);y7o=r(yZr,"ConvBertForTokenClassification"),yZr.forEach(t),w7o=r(aye," (ConvBERT model)"),aye.forEach(t),A7o=i(q),I5=n(q,"LI",{});var nye=s(I5);nse=n(nye,"STRONG",{});var wZr=s(nse);L7o=r(wZr,"data2vec-text"),wZr.forEach(t),B7o=r(nye," \u2014 "),mD=n(nye,"A",{href:!0});var AZr=s(mD);x7o=r(AZr,"Data2VecTextForTokenClassification"),AZr.forEach(t),k7o=r(nye," (Data2VecText model)"),nye.forEach(t),R7o=i(q),j5=n(q,"LI",{});var sye=s(j5);sse=n(sye,"STRONG",{});var LZr=s(sse);S7o=r(LZr,"deberta"),LZr.forEach(t),P7o=r(sye," \u2014 "),gD=n(sye,"A",{href:!0});var BZr=s(gD);$7o=r(BZr,"DebertaForTokenClassification"),BZr.forEach(t),I7o=r(sye," (DeBERTa model)"),sye.forEach(t),j7o=i(q),D5=n(q,"LI",{});var lye=s(D5);lse=n(lye,"STRONG",{});var xZr=s(lse);D7o=r(xZr,"deberta-v2"),xZr.forEach(t),N7o=r(lye," \u2014 "),hD=n(lye,"A",{href:!0});var kZr=s(hD);q7o=r(kZr,"DebertaV2ForTokenClassification"),kZr.forEach(t),O7o=r(lye," (DeBERTa-v2 model)"),lye.forEach(t),G7o=i(q),N5=n(q,"LI",{});var iye=s(N5);ise=n(iye,"STRONG",{});var RZr=s(ise);X7o=r(RZr,"distilbert"),RZr.forEach(t),V7o=r(iye," \u2014 "),pD=n(iye,"A",{href:!0});var SZr=s(pD);z7o=r(SZr,"DistilBertForTokenClassification"),SZr.forEach(t),W7o=r(iye," (DistilBERT model)"),iye.forEach(t),Q7o=i(q),q5=n(q,"LI",{});var dye=s(q5);dse=n(dye,"STRONG",{});var PZr=s(dse);H7o=r(PZr,"electra"),PZr.forEach(t),U7o=r(dye," \u2014 "),_D=n(dye,"A",{href:!0});var $Zr=s(_D);J7o=r($Zr,"ElectraForTokenClassification"),$Zr.forEach(t),Y7o=r(dye," (ELECTRA model)"),dye.forEach(t),K7o=i(q),O5=n(q,"LI",{});var cye=s(O5);cse=n(cye,"STRONG",{});var IZr=s(cse);Z7o=r(IZr,"flaubert"),IZr.forEach(t),e9o=r(cye," \u2014 "),uD=n(cye,"A",{href:!0});var jZr=s(uD);o9o=r(jZr,"FlaubertForTokenClassification"),jZr.forEach(t),r9o=r(cye," (FlauBERT model)"),cye.forEach(t),t9o=i(q),G5=n(q,"LI",{});var fye=s(G5);fse=n(fye,"STRONG",{});var DZr=s(fse);a9o=r(DZr,"fnet"),DZr.forEach(t),n9o=r(fye," \u2014 "),bD=n(fye,"A",{href:!0});var NZr=s(bD);s9o=r(NZr,"FNetForTokenClassification"),NZr.forEach(t),l9o=r(fye," (FNet model)"),fye.forEach(t),i9o=i(q),X5=n(q,"LI",{});var mye=s(X5);mse=n(mye,"STRONG",{});var qZr=s(mse);d9o=r(qZr,"funnel"),qZr.forEach(t),c9o=r(mye," \u2014 "),vD=n(mye,"A",{href:!0});var OZr=s(vD);f9o=r(OZr,"FunnelForTokenClassification"),OZr.forEach(t),m9o=r(mye," (Funnel Transformer model)"),mye.forEach(t),g9o=i(q),V5=n(q,"LI",{});var gye=s(V5);gse=n(gye,"STRONG",{});var GZr=s(gse);h9o=r(GZr,"gpt2"),GZr.forEach(t),p9o=r(gye," \u2014 "),TD=n(gye,"A",{href:!0});var XZr=s(TD);_9o=r(XZr,"GPT2ForTokenClassification"),XZr.forEach(t),u9o=r(gye," (OpenAI GPT-2 model)"),gye.forEach(t),b9o=i(q),z5=n(q,"LI",{});var hye=s(z5);hse=n(hye,"STRONG",{});var VZr=s(hse);v9o=r(VZr,"ibert"),VZr.forEach(t),T9o=r(hye," \u2014 "),FD=n(hye,"A",{href:!0});var zZr=s(FD);F9o=r(zZr,"IBertForTokenClassification"),zZr.forEach(t),C9o=r(hye," (I-BERT model)"),hye.forEach(t),M9o=i(q),W5=n(q,"LI",{});var pye=s(W5);pse=n(pye,"STRONG",{});var WZr=s(pse);E9o=r(WZr,"layoutlm"),WZr.forEach(t),y9o=r(pye," \u2014 "),CD=n(pye,"A",{href:!0});var QZr=s(CD);w9o=r(QZr,"LayoutLMForTokenClassification"),QZr.forEach(t),A9o=r(pye," (LayoutLM model)"),pye.forEach(t),L9o=i(q),Q5=n(q,"LI",{});var _ye=s(Q5);_se=n(_ye,"STRONG",{});var HZr=s(_se);B9o=r(HZr,"layoutlmv2"),HZr.forEach(t),x9o=r(_ye," \u2014 "),MD=n(_ye,"A",{href:!0});var UZr=s(MD);k9o=r(UZr,"LayoutLMv2ForTokenClassification"),UZr.forEach(t),R9o=r(_ye," (LayoutLMv2 model)"),_ye.forEach(t),S9o=i(q),H5=n(q,"LI",{});var uye=s(H5);use=n(uye,"STRONG",{});var JZr=s(use);P9o=r(JZr,"longformer"),JZr.forEach(t),$9o=r(uye," \u2014 "),ED=n(uye,"A",{href:!0});var YZr=s(ED);I9o=r(YZr,"LongformerForTokenClassification"),YZr.forEach(t),j9o=r(uye," (Longformer model)"),uye.forEach(t),D9o=i(q),U5=n(q,"LI",{});var bye=s(U5);bse=n(bye,"STRONG",{});var KZr=s(bse);N9o=r(KZr,"megatron-bert"),KZr.forEach(t),q9o=r(bye," \u2014 "),yD=n(bye,"A",{href:!0});var ZZr=s(yD);O9o=r(ZZr,"MegatronBertForTokenClassification"),ZZr.forEach(t),G9o=r(bye," (MegatronBert model)"),bye.forEach(t),X9o=i(q),J5=n(q,"LI",{});var vye=s(J5);vse=n(vye,"STRONG",{});var eet=s(vse);V9o=r(eet,"mobilebert"),eet.forEach(t),z9o=r(vye," \u2014 "),wD=n(vye,"A",{href:!0});var oet=s(wD);W9o=r(oet,"MobileBertForTokenClassification"),oet.forEach(t),Q9o=r(vye," (MobileBERT model)"),vye.forEach(t),H9o=i(q),Y5=n(q,"LI",{});var Tye=s(Y5);Tse=n(Tye,"STRONG",{});var ret=s(Tse);U9o=r(ret,"mpnet"),ret.forEach(t),J9o=r(Tye," \u2014 "),AD=n(Tye,"A",{href:!0});var tet=s(AD);Y9o=r(tet,"MPNetForTokenClassification"),tet.forEach(t),K9o=r(Tye," (MPNet model)"),Tye.forEach(t),Z9o=i(q),K5=n(q,"LI",{});var Fye=s(K5);Fse=n(Fye,"STRONG",{});var aet=s(Fse);eBo=r(aet,"nystromformer"),aet.forEach(t),oBo=r(Fye," \u2014 "),LD=n(Fye,"A",{href:!0});var net=s(LD);rBo=r(net,"NystromformerForTokenClassification"),net.forEach(t),tBo=r(Fye," (Nystromformer model)"),Fye.forEach(t),aBo=i(q),Z5=n(q,"LI",{});var Cye=s(Z5);Cse=n(Cye,"STRONG",{});var set=s(Cse);nBo=r(set,"qdqbert"),set.forEach(t),sBo=r(Cye," \u2014 "),BD=n(Cye,"A",{href:!0});var iet=s(BD);lBo=r(iet,"QDQBertForTokenClassification"),iet.forEach(t),iBo=r(Cye," (QDQBert model)"),Cye.forEach(t),dBo=i(q),e2=n(q,"LI",{});var Mye=s(e2);Mse=n(Mye,"STRONG",{});var det=s(Mse);cBo=r(det,"rembert"),det.forEach(t),fBo=r(Mye," \u2014 "),xD=n(Mye,"A",{href:!0});var cet=s(xD);mBo=r(cet,"RemBertForTokenClassification"),cet.forEach(t),gBo=r(Mye," (RemBERT model)"),Mye.forEach(t),hBo=i(q),o2=n(q,"LI",{});var Eye=s(o2);Ese=n(Eye,"STRONG",{});var fet=s(Ese);pBo=r(fet,"roberta"),fet.forEach(t),_Bo=r(Eye," \u2014 "),kD=n(Eye,"A",{href:!0});var met=s(kD);uBo=r(met,"RobertaForTokenClassification"),met.forEach(t),bBo=r(Eye," (RoBERTa model)"),Eye.forEach(t),vBo=i(q),r2=n(q,"LI",{});var yye=s(r2);yse=n(yye,"STRONG",{});var get=s(yse);TBo=r(get,"roformer"),get.forEach(t),FBo=r(yye," \u2014 "),RD=n(yye,"A",{href:!0});var het=s(RD);CBo=r(het,"RoFormerForTokenClassification"),het.forEach(t),MBo=r(yye," (RoFormer model)"),yye.forEach(t),EBo=i(q),t2=n(q,"LI",{});var wye=s(t2);wse=n(wye,"STRONG",{});var pet=s(wse);yBo=r(pet,"squeezebert"),pet.forEach(t),wBo=r(wye," \u2014 "),SD=n(wye,"A",{href:!0});var _et=s(SD);ABo=r(_et,"SqueezeBertForTokenClassification"),_et.forEach(t),LBo=r(wye," (SqueezeBERT model)"),wye.forEach(t),BBo=i(q),a2=n(q,"LI",{});var Aye=s(a2);Ase=n(Aye,"STRONG",{});var uet=s(Ase);xBo=r(uet,"xlm"),uet.forEach(t),kBo=r(Aye," \u2014 "),PD=n(Aye,"A",{href:!0});var bet=s(PD);RBo=r(bet,"XLMForTokenClassification"),bet.forEach(t),SBo=r(Aye," (XLM model)"),Aye.forEach(t),PBo=i(q),n2=n(q,"LI",{});var Lye=s(n2);Lse=n(Lye,"STRONG",{});var vet=s(Lse);$Bo=r(vet,"xlm-roberta"),vet.forEach(t),IBo=r(Lye," \u2014 "),$D=n(Lye,"A",{href:!0});var Tet=s($D);jBo=r(Tet,"XLMRobertaForTokenClassification"),Tet.forEach(t),DBo=r(Lye," (XLM-RoBERTa model)"),Lye.forEach(t),NBo=i(q),s2=n(q,"LI",{});var Bye=s(s2);Bse=n(Bye,"STRONG",{});var Fet=s(Bse);qBo=r(Fet,"xlm-roberta-xl"),Fet.forEach(t),OBo=r(Bye," \u2014 "),ID=n(Bye,"A",{href:!0});var Cet=s(ID);GBo=r(Cet,"XLMRobertaXLForTokenClassification"),Cet.forEach(t),XBo=r(Bye," (XLM-RoBERTa-XL model)"),Bye.forEach(t),VBo=i(q),l2=n(q,"LI",{});var xye=s(l2);xse=n(xye,"STRONG",{});var Met=s(xse);zBo=r(Met,"xlnet"),Met.forEach(t),WBo=r(xye," \u2014 "),jD=n(xye,"A",{href:!0});var Eet=s(jD);QBo=r(Eet,"XLNetForTokenClassification"),Eet.forEach(t),HBo=r(xye," (XLNet model)"),xye.forEach(t),UBo=i(q),i2=n(q,"LI",{});var kye=s(i2);kse=n(kye,"STRONG",{});var yet=s(kse);JBo=r(yet,"yoso"),yet.forEach(t),YBo=r(kye," \u2014 "),DD=n(kye,"A",{href:!0});var wet=s(DD);KBo=r(wet,"YosoForTokenClassification"),wet.forEach(t),ZBo=r(kye," (YOSO model)"),kye.forEach(t),q.forEach(t),exo=i(Yt),d2=n(Yt,"P",{});var Rye=s(d2);oxo=r(Rye,"The model is set in evaluation mode by default using "),Rse=n(Rye,"CODE",{});var Aet=s(Rse);rxo=r(Aet,"model.eval()"),Aet.forEach(t),txo=r(Rye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sse=n(Rye,"CODE",{});var Let=s(Sse);axo=r(Let,"model.train()"),Let.forEach(t),Rye.forEach(t),nxo=i(Yt),Pse=n(Yt,"P",{});var Bet=s(Pse);sxo=r(Bet,"Examples:"),Bet.forEach(t),lxo=i(Yt),m(QE.$$.fragment,Yt),Yt.forEach(t),hl.forEach(t),vke=i(d),kd=n(d,"H2",{class:!0});var xSe=s(kd);c2=n(xSe,"A",{id:!0,class:!0,href:!0});var xet=s(c2);$se=n(xet,"SPAN",{});var ket=s($se);m(HE.$$.fragment,ket),ket.forEach(t),xet.forEach(t),ixo=i(xSe),Ise=n(xSe,"SPAN",{});var Ret=s(Ise);dxo=r(Ret,"AutoModelForQuestionAnswering"),Ret.forEach(t),xSe.forEach(t),Tke=i(d),sr=n(d,"DIV",{class:!0});var _l=s(sr);m(UE.$$.fragment,_l),cxo=i(_l),Rd=n(_l,"P",{});var iW=s(Rd);fxo=r(iW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),jse=n(iW,"CODE",{});var Set=s(jse);mxo=r(Set,"from_pretrained()"),Set.forEach(t),gxo=r(iW,"class method or the "),Dse=n(iW,"CODE",{});var Pet=s(Dse);hxo=r(Pet,"from_config()"),Pet.forEach(t),pxo=r(iW,`class
method.`),iW.forEach(t),_xo=i(_l),JE=n(_l,"P",{});var kSe=s(JE);uxo=r(kSe,"This class cannot be instantiated directly using "),Nse=n(kSe,"CODE",{});var $et=s(Nse);bxo=r($et,"__init__()"),$et.forEach(t),vxo=r(kSe," (throws an error)."),kSe.forEach(t),Txo=i(_l),ot=n(_l,"DIV",{class:!0});var ul=s(ot);m(YE.$$.fragment,ul),Fxo=i(ul),qse=n(ul,"P",{});var Iet=s(qse);Cxo=r(Iet,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Iet.forEach(t),Mxo=i(ul),Sd=n(ul,"P",{});var dW=s(Sd);Exo=r(dW,`Note:
Loading a model from its configuration file does `),Ose=n(dW,"STRONG",{});var jet=s(Ose);yxo=r(jet,"not"),jet.forEach(t),wxo=r(dW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Gse=n(dW,"CODE",{});var Det=s(Gse);Axo=r(Det,"from_pretrained()"),Det.forEach(t),Lxo=r(dW,"to load the model weights."),dW.forEach(t),Bxo=i(ul),Xse=n(ul,"P",{});var Net=s(Xse);xxo=r(Net,"Examples:"),Net.forEach(t),kxo=i(ul),m(KE.$$.fragment,ul),ul.forEach(t),Rxo=i(_l),We=n(_l,"DIV",{class:!0});var Kt=s(We);m(ZE.$$.fragment,Kt),Sxo=i(Kt),Vse=n(Kt,"P",{});var qet=s(Vse);Pxo=r(qet,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),qet.forEach(t),$xo=i(Kt),tn=n(Kt,"P",{});var uM=s(tn);Ixo=r(uM,"The model class to instantiate is selected based on the "),zse=n(uM,"CODE",{});var Oet=s(zse);jxo=r(Oet,"model_type"),Oet.forEach(t),Dxo=r(uM,` property of the config object (either
passed as an argument or loaded from `),Wse=n(uM,"CODE",{});var Get=s(Wse);Nxo=r(Get,"pretrained_model_name_or_path"),Get.forEach(t),qxo=r(uM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qse=n(uM,"CODE",{});var Xet=s(Qse);Oxo=r(Xet,"pretrained_model_name_or_path"),Xet.forEach(t),Gxo=r(uM,":"),uM.forEach(t),Xxo=i(Kt),R=n(Kt,"UL",{});var P=s(R);f2=n(P,"LI",{});var Sye=s(f2);Hse=n(Sye,"STRONG",{});var Vet=s(Hse);Vxo=r(Vet,"albert"),Vet.forEach(t),zxo=r(Sye," \u2014 "),ND=n(Sye,"A",{href:!0});var zet=s(ND);Wxo=r(zet,"AlbertForQuestionAnswering"),zet.forEach(t),Qxo=r(Sye," (ALBERT model)"),Sye.forEach(t),Hxo=i(P),m2=n(P,"LI",{});var Pye=s(m2);Use=n(Pye,"STRONG",{});var Wet=s(Use);Uxo=r(Wet,"bart"),Wet.forEach(t),Jxo=r(Pye," \u2014 "),qD=n(Pye,"A",{href:!0});var Qet=s(qD);Yxo=r(Qet,"BartForQuestionAnswering"),Qet.forEach(t),Kxo=r(Pye," (BART model)"),Pye.forEach(t),Zxo=i(P),g2=n(P,"LI",{});var $ye=s(g2);Jse=n($ye,"STRONG",{});var Het=s(Jse);eko=r(Het,"bert"),Het.forEach(t),oko=r($ye," \u2014 "),OD=n($ye,"A",{href:!0});var Uet=s(OD);rko=r(Uet,"BertForQuestionAnswering"),Uet.forEach(t),tko=r($ye," (BERT model)"),$ye.forEach(t),ako=i(P),h2=n(P,"LI",{});var Iye=s(h2);Yse=n(Iye,"STRONG",{});var Jet=s(Yse);nko=r(Jet,"big_bird"),Jet.forEach(t),sko=r(Iye," \u2014 "),GD=n(Iye,"A",{href:!0});var Yet=s(GD);lko=r(Yet,"BigBirdForQuestionAnswering"),Yet.forEach(t),iko=r(Iye," (BigBird model)"),Iye.forEach(t),dko=i(P),p2=n(P,"LI",{});var jye=s(p2);Kse=n(jye,"STRONG",{});var Ket=s(Kse);cko=r(Ket,"bigbird_pegasus"),Ket.forEach(t),fko=r(jye," \u2014 "),XD=n(jye,"A",{href:!0});var Zet=s(XD);mko=r(Zet,"BigBirdPegasusForQuestionAnswering"),Zet.forEach(t),gko=r(jye," (BigBirdPegasus model)"),jye.forEach(t),hko=i(P),_2=n(P,"LI",{});var Dye=s(_2);Zse=n(Dye,"STRONG",{});var eot=s(Zse);pko=r(eot,"camembert"),eot.forEach(t),_ko=r(Dye," \u2014 "),VD=n(Dye,"A",{href:!0});var oot=s(VD);uko=r(oot,"CamembertForQuestionAnswering"),oot.forEach(t),bko=r(Dye," (CamemBERT model)"),Dye.forEach(t),vko=i(P),u2=n(P,"LI",{});var Nye=s(u2);ele=n(Nye,"STRONG",{});var rot=s(ele);Tko=r(rot,"canine"),rot.forEach(t),Fko=r(Nye," \u2014 "),zD=n(Nye,"A",{href:!0});var tot=s(zD);Cko=r(tot,"CanineForQuestionAnswering"),tot.forEach(t),Mko=r(Nye," (Canine model)"),Nye.forEach(t),Eko=i(P),b2=n(P,"LI",{});var qye=s(b2);ole=n(qye,"STRONG",{});var aot=s(ole);yko=r(aot,"convbert"),aot.forEach(t),wko=r(qye," \u2014 "),WD=n(qye,"A",{href:!0});var not=s(WD);Ako=r(not,"ConvBertForQuestionAnswering"),not.forEach(t),Lko=r(qye," (ConvBERT model)"),qye.forEach(t),Bko=i(P),v2=n(P,"LI",{});var Oye=s(v2);rle=n(Oye,"STRONG",{});var sot=s(rle);xko=r(sot,"data2vec-text"),sot.forEach(t),kko=r(Oye," \u2014 "),QD=n(Oye,"A",{href:!0});var lot=s(QD);Rko=r(lot,"Data2VecTextForQuestionAnswering"),lot.forEach(t),Sko=r(Oye," (Data2VecText model)"),Oye.forEach(t),Pko=i(P),T2=n(P,"LI",{});var Gye=s(T2);tle=n(Gye,"STRONG",{});var iot=s(tle);$ko=r(iot,"deberta"),iot.forEach(t),Iko=r(Gye," \u2014 "),HD=n(Gye,"A",{href:!0});var dot=s(HD);jko=r(dot,"DebertaForQuestionAnswering"),dot.forEach(t),Dko=r(Gye," (DeBERTa model)"),Gye.forEach(t),Nko=i(P),F2=n(P,"LI",{});var Xye=s(F2);ale=n(Xye,"STRONG",{});var cot=s(ale);qko=r(cot,"deberta-v2"),cot.forEach(t),Oko=r(Xye," \u2014 "),UD=n(Xye,"A",{href:!0});var fot=s(UD);Gko=r(fot,"DebertaV2ForQuestionAnswering"),fot.forEach(t),Xko=r(Xye," (DeBERTa-v2 model)"),Xye.forEach(t),Vko=i(P),C2=n(P,"LI",{});var Vye=s(C2);nle=n(Vye,"STRONG",{});var mot=s(nle);zko=r(mot,"distilbert"),mot.forEach(t),Wko=r(Vye," \u2014 "),JD=n(Vye,"A",{href:!0});var got=s(JD);Qko=r(got,"DistilBertForQuestionAnswering"),got.forEach(t),Hko=r(Vye," (DistilBERT model)"),Vye.forEach(t),Uko=i(P),M2=n(P,"LI",{});var zye=s(M2);sle=n(zye,"STRONG",{});var hot=s(sle);Jko=r(hot,"electra"),hot.forEach(t),Yko=r(zye," \u2014 "),YD=n(zye,"A",{href:!0});var pot=s(YD);Kko=r(pot,"ElectraForQuestionAnswering"),pot.forEach(t),Zko=r(zye," (ELECTRA model)"),zye.forEach(t),eRo=i(P),E2=n(P,"LI",{});var Wye=s(E2);lle=n(Wye,"STRONG",{});var _ot=s(lle);oRo=r(_ot,"flaubert"),_ot.forEach(t),rRo=r(Wye," \u2014 "),KD=n(Wye,"A",{href:!0});var uot=s(KD);tRo=r(uot,"FlaubertForQuestionAnsweringSimple"),uot.forEach(t),aRo=r(Wye," (FlauBERT model)"),Wye.forEach(t),nRo=i(P),y2=n(P,"LI",{});var Qye=s(y2);ile=n(Qye,"STRONG",{});var bot=s(ile);sRo=r(bot,"fnet"),bot.forEach(t),lRo=r(Qye," \u2014 "),ZD=n(Qye,"A",{href:!0});var vot=s(ZD);iRo=r(vot,"FNetForQuestionAnswering"),vot.forEach(t),dRo=r(Qye," (FNet model)"),Qye.forEach(t),cRo=i(P),w2=n(P,"LI",{});var Hye=s(w2);dle=n(Hye,"STRONG",{});var Tot=s(dle);fRo=r(Tot,"funnel"),Tot.forEach(t),mRo=r(Hye," \u2014 "),eN=n(Hye,"A",{href:!0});var Fot=s(eN);gRo=r(Fot,"FunnelForQuestionAnswering"),Fot.forEach(t),hRo=r(Hye," (Funnel Transformer model)"),Hye.forEach(t),pRo=i(P),A2=n(P,"LI",{});var Uye=s(A2);cle=n(Uye,"STRONG",{});var Cot=s(cle);_Ro=r(Cot,"gptj"),Cot.forEach(t),uRo=r(Uye," \u2014 "),oN=n(Uye,"A",{href:!0});var Mot=s(oN);bRo=r(Mot,"GPTJForQuestionAnswering"),Mot.forEach(t),vRo=r(Uye," (GPT-J model)"),Uye.forEach(t),TRo=i(P),L2=n(P,"LI",{});var Jye=s(L2);fle=n(Jye,"STRONG",{});var Eot=s(fle);FRo=r(Eot,"ibert"),Eot.forEach(t),CRo=r(Jye," \u2014 "),rN=n(Jye,"A",{href:!0});var yot=s(rN);MRo=r(yot,"IBertForQuestionAnswering"),yot.forEach(t),ERo=r(Jye," (I-BERT model)"),Jye.forEach(t),yRo=i(P),B2=n(P,"LI",{});var Yye=s(B2);mle=n(Yye,"STRONG",{});var wot=s(mle);wRo=r(wot,"layoutlmv2"),wot.forEach(t),ARo=r(Yye," \u2014 "),tN=n(Yye,"A",{href:!0});var Aot=s(tN);LRo=r(Aot,"LayoutLMv2ForQuestionAnswering"),Aot.forEach(t),BRo=r(Yye," (LayoutLMv2 model)"),Yye.forEach(t),xRo=i(P),x2=n(P,"LI",{});var Kye=s(x2);gle=n(Kye,"STRONG",{});var Lot=s(gle);kRo=r(Lot,"led"),Lot.forEach(t),RRo=r(Kye," \u2014 "),aN=n(Kye,"A",{href:!0});var Bot=s(aN);SRo=r(Bot,"LEDForQuestionAnswering"),Bot.forEach(t),PRo=r(Kye," (LED model)"),Kye.forEach(t),$Ro=i(P),k2=n(P,"LI",{});var Zye=s(k2);hle=n(Zye,"STRONG",{});var xot=s(hle);IRo=r(xot,"longformer"),xot.forEach(t),jRo=r(Zye," \u2014 "),nN=n(Zye,"A",{href:!0});var kot=s(nN);DRo=r(kot,"LongformerForQuestionAnswering"),kot.forEach(t),NRo=r(Zye," (Longformer model)"),Zye.forEach(t),qRo=i(P),R2=n(P,"LI",{});var ewe=s(R2);ple=n(ewe,"STRONG",{});var Rot=s(ple);ORo=r(Rot,"lxmert"),Rot.forEach(t),GRo=r(ewe," \u2014 "),sN=n(ewe,"A",{href:!0});var Sot=s(sN);XRo=r(Sot,"LxmertForQuestionAnswering"),Sot.forEach(t),VRo=r(ewe," (LXMERT model)"),ewe.forEach(t),zRo=i(P),S2=n(P,"LI",{});var owe=s(S2);_le=n(owe,"STRONG",{});var Pot=s(_le);WRo=r(Pot,"mbart"),Pot.forEach(t),QRo=r(owe," \u2014 "),lN=n(owe,"A",{href:!0});var $ot=s(lN);HRo=r($ot,"MBartForQuestionAnswering"),$ot.forEach(t),URo=r(owe," (mBART model)"),owe.forEach(t),JRo=i(P),P2=n(P,"LI",{});var rwe=s(P2);ule=n(rwe,"STRONG",{});var Iot=s(ule);YRo=r(Iot,"megatron-bert"),Iot.forEach(t),KRo=r(rwe," \u2014 "),iN=n(rwe,"A",{href:!0});var jot=s(iN);ZRo=r(jot,"MegatronBertForQuestionAnswering"),jot.forEach(t),eSo=r(rwe," (MegatronBert model)"),rwe.forEach(t),oSo=i(P),$2=n(P,"LI",{});var twe=s($2);ble=n(twe,"STRONG",{});var Dot=s(ble);rSo=r(Dot,"mobilebert"),Dot.forEach(t),tSo=r(twe," \u2014 "),dN=n(twe,"A",{href:!0});var Not=s(dN);aSo=r(Not,"MobileBertForQuestionAnswering"),Not.forEach(t),nSo=r(twe," (MobileBERT model)"),twe.forEach(t),sSo=i(P),I2=n(P,"LI",{});var awe=s(I2);vle=n(awe,"STRONG",{});var qot=s(vle);lSo=r(qot,"mpnet"),qot.forEach(t),iSo=r(awe," \u2014 "),cN=n(awe,"A",{href:!0});var Oot=s(cN);dSo=r(Oot,"MPNetForQuestionAnswering"),Oot.forEach(t),cSo=r(awe," (MPNet model)"),awe.forEach(t),fSo=i(P),j2=n(P,"LI",{});var nwe=s(j2);Tle=n(nwe,"STRONG",{});var Got=s(Tle);mSo=r(Got,"nystromformer"),Got.forEach(t),gSo=r(nwe," \u2014 "),fN=n(nwe,"A",{href:!0});var Xot=s(fN);hSo=r(Xot,"NystromformerForQuestionAnswering"),Xot.forEach(t),pSo=r(nwe," (Nystromformer model)"),nwe.forEach(t),_So=i(P),D2=n(P,"LI",{});var swe=s(D2);Fle=n(swe,"STRONG",{});var Vot=s(Fle);uSo=r(Vot,"qdqbert"),Vot.forEach(t),bSo=r(swe," \u2014 "),mN=n(swe,"A",{href:!0});var zot=s(mN);vSo=r(zot,"QDQBertForQuestionAnswering"),zot.forEach(t),TSo=r(swe," (QDQBert model)"),swe.forEach(t),FSo=i(P),N2=n(P,"LI",{});var lwe=s(N2);Cle=n(lwe,"STRONG",{});var Wot=s(Cle);CSo=r(Wot,"reformer"),Wot.forEach(t),MSo=r(lwe," \u2014 "),gN=n(lwe,"A",{href:!0});var Qot=s(gN);ESo=r(Qot,"ReformerForQuestionAnswering"),Qot.forEach(t),ySo=r(lwe," (Reformer model)"),lwe.forEach(t),wSo=i(P),q2=n(P,"LI",{});var iwe=s(q2);Mle=n(iwe,"STRONG",{});var Hot=s(Mle);ASo=r(Hot,"rembert"),Hot.forEach(t),LSo=r(iwe," \u2014 "),hN=n(iwe,"A",{href:!0});var Uot=s(hN);BSo=r(Uot,"RemBertForQuestionAnswering"),Uot.forEach(t),xSo=r(iwe," (RemBERT model)"),iwe.forEach(t),kSo=i(P),O2=n(P,"LI",{});var dwe=s(O2);Ele=n(dwe,"STRONG",{});var Jot=s(Ele);RSo=r(Jot,"roberta"),Jot.forEach(t),SSo=r(dwe," \u2014 "),pN=n(dwe,"A",{href:!0});var Yot=s(pN);PSo=r(Yot,"RobertaForQuestionAnswering"),Yot.forEach(t),$So=r(dwe," (RoBERTa model)"),dwe.forEach(t),ISo=i(P),G2=n(P,"LI",{});var cwe=s(G2);yle=n(cwe,"STRONG",{});var Kot=s(yle);jSo=r(Kot,"roformer"),Kot.forEach(t),DSo=r(cwe," \u2014 "),_N=n(cwe,"A",{href:!0});var Zot=s(_N);NSo=r(Zot,"RoFormerForQuestionAnswering"),Zot.forEach(t),qSo=r(cwe," (RoFormer model)"),cwe.forEach(t),OSo=i(P),X2=n(P,"LI",{});var fwe=s(X2);wle=n(fwe,"STRONG",{});var ert=s(wle);GSo=r(ert,"splinter"),ert.forEach(t),XSo=r(fwe," \u2014 "),uN=n(fwe,"A",{href:!0});var ort=s(uN);VSo=r(ort,"SplinterForQuestionAnswering"),ort.forEach(t),zSo=r(fwe," (Splinter model)"),fwe.forEach(t),WSo=i(P),V2=n(P,"LI",{});var mwe=s(V2);Ale=n(mwe,"STRONG",{});var rrt=s(Ale);QSo=r(rrt,"squeezebert"),rrt.forEach(t),HSo=r(mwe," \u2014 "),bN=n(mwe,"A",{href:!0});var trt=s(bN);USo=r(trt,"SqueezeBertForQuestionAnswering"),trt.forEach(t),JSo=r(mwe," (SqueezeBERT model)"),mwe.forEach(t),YSo=i(P),z2=n(P,"LI",{});var gwe=s(z2);Lle=n(gwe,"STRONG",{});var art=s(Lle);KSo=r(art,"xlm"),art.forEach(t),ZSo=r(gwe," \u2014 "),vN=n(gwe,"A",{href:!0});var nrt=s(vN);ePo=r(nrt,"XLMForQuestionAnsweringSimple"),nrt.forEach(t),oPo=r(gwe," (XLM model)"),gwe.forEach(t),rPo=i(P),W2=n(P,"LI",{});var hwe=s(W2);Ble=n(hwe,"STRONG",{});var srt=s(Ble);tPo=r(srt,"xlm-roberta"),srt.forEach(t),aPo=r(hwe," \u2014 "),TN=n(hwe,"A",{href:!0});var lrt=s(TN);nPo=r(lrt,"XLMRobertaForQuestionAnswering"),lrt.forEach(t),sPo=r(hwe," (XLM-RoBERTa model)"),hwe.forEach(t),lPo=i(P),Q2=n(P,"LI",{});var pwe=s(Q2);xle=n(pwe,"STRONG",{});var irt=s(xle);iPo=r(irt,"xlm-roberta-xl"),irt.forEach(t),dPo=r(pwe," \u2014 "),FN=n(pwe,"A",{href:!0});var drt=s(FN);cPo=r(drt,"XLMRobertaXLForQuestionAnswering"),drt.forEach(t),fPo=r(pwe," (XLM-RoBERTa-XL model)"),pwe.forEach(t),mPo=i(P),H2=n(P,"LI",{});var _we=s(H2);kle=n(_we,"STRONG",{});var crt=s(kle);gPo=r(crt,"xlnet"),crt.forEach(t),hPo=r(_we," \u2014 "),CN=n(_we,"A",{href:!0});var frt=s(CN);pPo=r(frt,"XLNetForQuestionAnsweringSimple"),frt.forEach(t),_Po=r(_we," (XLNet model)"),_we.forEach(t),uPo=i(P),U2=n(P,"LI",{});var uwe=s(U2);Rle=n(uwe,"STRONG",{});var mrt=s(Rle);bPo=r(mrt,"yoso"),mrt.forEach(t),vPo=r(uwe," \u2014 "),MN=n(uwe,"A",{href:!0});var grt=s(MN);TPo=r(grt,"YosoForQuestionAnswering"),grt.forEach(t),FPo=r(uwe," (YOSO model)"),uwe.forEach(t),P.forEach(t),CPo=i(Kt),J2=n(Kt,"P",{});var bwe=s(J2);MPo=r(bwe,"The model is set in evaluation mode by default using "),Sle=n(bwe,"CODE",{});var hrt=s(Sle);EPo=r(hrt,"model.eval()"),hrt.forEach(t),yPo=r(bwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ple=n(bwe,"CODE",{});var prt=s(Ple);wPo=r(prt,"model.train()"),prt.forEach(t),bwe.forEach(t),APo=i(Kt),$le=n(Kt,"P",{});var _rt=s($le);LPo=r(_rt,"Examples:"),_rt.forEach(t),BPo=i(Kt),m(e3.$$.fragment,Kt),Kt.forEach(t),_l.forEach(t),Fke=i(d),Pd=n(d,"H2",{class:!0});var RSe=s(Pd);Y2=n(RSe,"A",{id:!0,class:!0,href:!0});var urt=s(Y2);Ile=n(urt,"SPAN",{});var brt=s(Ile);m(o3.$$.fragment,brt),brt.forEach(t),urt.forEach(t),xPo=i(RSe),jle=n(RSe,"SPAN",{});var vrt=s(jle);kPo=r(vrt,"AutoModelForTableQuestionAnswering"),vrt.forEach(t),RSe.forEach(t),Cke=i(d),lr=n(d,"DIV",{class:!0});var bl=s(lr);m(r3.$$.fragment,bl),RPo=i(bl),$d=n(bl,"P",{});var cW=s($d);SPo=r(cW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Dle=n(cW,"CODE",{});var Trt=s(Dle);PPo=r(Trt,"from_pretrained()"),Trt.forEach(t),$Po=r(cW,"class method or the "),Nle=n(cW,"CODE",{});var Frt=s(Nle);IPo=r(Frt,"from_config()"),Frt.forEach(t),jPo=r(cW,`class
method.`),cW.forEach(t),DPo=i(bl),t3=n(bl,"P",{});var SSe=s(t3);NPo=r(SSe,"This class cannot be instantiated directly using "),qle=n(SSe,"CODE",{});var Crt=s(qle);qPo=r(Crt,"__init__()"),Crt.forEach(t),OPo=r(SSe," (throws an error)."),SSe.forEach(t),GPo=i(bl),rt=n(bl,"DIV",{class:!0});var vl=s(rt);m(a3.$$.fragment,vl),XPo=i(vl),Ole=n(vl,"P",{});var Mrt=s(Ole);VPo=r(Mrt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Mrt.forEach(t),zPo=i(vl),Id=n(vl,"P",{});var fW=s(Id);WPo=r(fW,`Note:
Loading a model from its configuration file does `),Gle=n(fW,"STRONG",{});var Ert=s(Gle);QPo=r(Ert,"not"),Ert.forEach(t),HPo=r(fW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Xle=n(fW,"CODE",{});var yrt=s(Xle);UPo=r(yrt,"from_pretrained()"),yrt.forEach(t),JPo=r(fW,"to load the model weights."),fW.forEach(t),YPo=i(vl),Vle=n(vl,"P",{});var wrt=s(Vle);KPo=r(wrt,"Examples:"),wrt.forEach(t),ZPo=i(vl),m(n3.$$.fragment,vl),vl.forEach(t),e$o=i(bl),Qe=n(bl,"DIV",{class:!0});var Zt=s(Qe);m(s3.$$.fragment,Zt),o$o=i(Zt),zle=n(Zt,"P",{});var Art=s(zle);r$o=r(Art,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Art.forEach(t),t$o=i(Zt),an=n(Zt,"P",{});var bM=s(an);a$o=r(bM,"The model class to instantiate is selected based on the "),Wle=n(bM,"CODE",{});var Lrt=s(Wle);n$o=r(Lrt,"model_type"),Lrt.forEach(t),s$o=r(bM,` property of the config object (either
passed as an argument or loaded from `),Qle=n(bM,"CODE",{});var Brt=s(Qle);l$o=r(Brt,"pretrained_model_name_or_path"),Brt.forEach(t),i$o=r(bM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hle=n(bM,"CODE",{});var xrt=s(Hle);d$o=r(xrt,"pretrained_model_name_or_path"),xrt.forEach(t),c$o=r(bM,":"),bM.forEach(t),f$o=i(Zt),Ule=n(Zt,"UL",{});var krt=s(Ule);K2=n(krt,"LI",{});var vwe=s(K2);Jle=n(vwe,"STRONG",{});var Rrt=s(Jle);m$o=r(Rrt,"tapas"),Rrt.forEach(t),g$o=r(vwe," \u2014 "),EN=n(vwe,"A",{href:!0});var Srt=s(EN);h$o=r(Srt,"TapasForQuestionAnswering"),Srt.forEach(t),p$o=r(vwe," (TAPAS model)"),vwe.forEach(t),krt.forEach(t),_$o=i(Zt),Z2=n(Zt,"P",{});var Twe=s(Z2);u$o=r(Twe,"The model is set in evaluation mode by default using "),Yle=n(Twe,"CODE",{});var Prt=s(Yle);b$o=r(Prt,"model.eval()"),Prt.forEach(t),v$o=r(Twe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kle=n(Twe,"CODE",{});var $rt=s(Kle);T$o=r($rt,"model.train()"),$rt.forEach(t),Twe.forEach(t),F$o=i(Zt),Zle=n(Zt,"P",{});var Irt=s(Zle);C$o=r(Irt,"Examples:"),Irt.forEach(t),M$o=i(Zt),m(l3.$$.fragment,Zt),Zt.forEach(t),bl.forEach(t),Mke=i(d),jd=n(d,"H2",{class:!0});var PSe=s(jd);ev=n(PSe,"A",{id:!0,class:!0,href:!0});var jrt=s(ev);eie=n(jrt,"SPAN",{});var Drt=s(eie);m(i3.$$.fragment,Drt),Drt.forEach(t),jrt.forEach(t),E$o=i(PSe),oie=n(PSe,"SPAN",{});var Nrt=s(oie);y$o=r(Nrt,"AutoModelForImageClassification"),Nrt.forEach(t),PSe.forEach(t),Eke=i(d),ir=n(d,"DIV",{class:!0});var Tl=s(ir);m(d3.$$.fragment,Tl),w$o=i(Tl),Dd=n(Tl,"P",{});var mW=s(Dd);A$o=r(mW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),rie=n(mW,"CODE",{});var qrt=s(rie);L$o=r(qrt,"from_pretrained()"),qrt.forEach(t),B$o=r(mW,"class method or the "),tie=n(mW,"CODE",{});var Ort=s(tie);x$o=r(Ort,"from_config()"),Ort.forEach(t),k$o=r(mW,`class
method.`),mW.forEach(t),R$o=i(Tl),c3=n(Tl,"P",{});var $Se=s(c3);S$o=r($Se,"This class cannot be instantiated directly using "),aie=n($Se,"CODE",{});var Grt=s(aie);P$o=r(Grt,"__init__()"),Grt.forEach(t),$$o=r($Se," (throws an error)."),$Se.forEach(t),I$o=i(Tl),tt=n(Tl,"DIV",{class:!0});var Fl=s(tt);m(f3.$$.fragment,Fl),j$o=i(Fl),nie=n(Fl,"P",{});var Xrt=s(nie);D$o=r(Xrt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Xrt.forEach(t),N$o=i(Fl),Nd=n(Fl,"P",{});var gW=s(Nd);q$o=r(gW,`Note:
Loading a model from its configuration file does `),sie=n(gW,"STRONG",{});var Vrt=s(sie);O$o=r(Vrt,"not"),Vrt.forEach(t),G$o=r(gW,` load the model weights. It only affects the
model\u2019s configuration. Use `),lie=n(gW,"CODE",{});var zrt=s(lie);X$o=r(zrt,"from_pretrained()"),zrt.forEach(t),V$o=r(gW,"to load the model weights."),gW.forEach(t),z$o=i(Fl),iie=n(Fl,"P",{});var Wrt=s(iie);W$o=r(Wrt,"Examples:"),Wrt.forEach(t),Q$o=i(Fl),m(m3.$$.fragment,Fl),Fl.forEach(t),H$o=i(Tl),He=n(Tl,"DIV",{class:!0});var ea=s(He);m(g3.$$.fragment,ea),U$o=i(ea),die=n(ea,"P",{});var Qrt=s(die);J$o=r(Qrt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Qrt.forEach(t),Y$o=i(ea),nn=n(ea,"P",{});var vM=s(nn);K$o=r(vM,"The model class to instantiate is selected based on the "),cie=n(vM,"CODE",{});var Hrt=s(cie);Z$o=r(Hrt,"model_type"),Hrt.forEach(t),eIo=r(vM,` property of the config object (either
passed as an argument or loaded from `),fie=n(vM,"CODE",{});var Urt=s(fie);oIo=r(Urt,"pretrained_model_name_or_path"),Urt.forEach(t),rIo=r(vM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mie=n(vM,"CODE",{});var Jrt=s(mie);tIo=r(Jrt,"pretrained_model_name_or_path"),Jrt.forEach(t),aIo=r(vM,":"),vM.forEach(t),nIo=i(ea),Fe=n(ea,"UL",{});var so=s(Fe);ov=n(so,"LI",{});var Fwe=s(ov);gie=n(Fwe,"STRONG",{});var Yrt=s(gie);sIo=r(Yrt,"beit"),Yrt.forEach(t),lIo=r(Fwe," \u2014 "),yN=n(Fwe,"A",{href:!0});var Krt=s(yN);iIo=r(Krt,"BeitForImageClassification"),Krt.forEach(t),dIo=r(Fwe," (BEiT model)"),Fwe.forEach(t),cIo=i(so),rv=n(so,"LI",{});var Cwe=s(rv);hie=n(Cwe,"STRONG",{});var Zrt=s(hie);fIo=r(Zrt,"convnext"),Zrt.forEach(t),mIo=r(Cwe," \u2014 "),wN=n(Cwe,"A",{href:!0});var ett=s(wN);gIo=r(ett,"ConvNextForImageClassification"),ett.forEach(t),hIo=r(Cwe," (ConvNext model)"),Cwe.forEach(t),pIo=i(so),zs=n(so,"LI",{});var t9=s(zs);pie=n(t9,"STRONG",{});var ott=s(pie);_Io=r(ott,"deit"),ott.forEach(t),uIo=r(t9," \u2014 "),AN=n(t9,"A",{href:!0});var rtt=s(AN);bIo=r(rtt,"DeiTForImageClassification"),rtt.forEach(t),vIo=r(t9," or "),LN=n(t9,"A",{href:!0});var ttt=s(LN);TIo=r(ttt,"DeiTForImageClassificationWithTeacher"),ttt.forEach(t),FIo=r(t9," (DeiT model)"),t9.forEach(t),CIo=i(so),tv=n(so,"LI",{});var Mwe=s(tv);_ie=n(Mwe,"STRONG",{});var att=s(_ie);MIo=r(att,"imagegpt"),att.forEach(t),EIo=r(Mwe," \u2014 "),BN=n(Mwe,"A",{href:!0});var ntt=s(BN);yIo=r(ntt,"ImageGPTForImageClassification"),ntt.forEach(t),wIo=r(Mwe," (ImageGPT model)"),Mwe.forEach(t),AIo=i(so),pa=n(so,"LI",{});var zf=s(pa);uie=n(zf,"STRONG",{});var stt=s(uie);LIo=r(stt,"perceiver"),stt.forEach(t),BIo=r(zf," \u2014 "),xN=n(zf,"A",{href:!0});var ltt=s(xN);xIo=r(ltt,"PerceiverForImageClassificationLearned"),ltt.forEach(t),kIo=r(zf," or "),kN=n(zf,"A",{href:!0});var itt=s(kN);RIo=r(itt,"PerceiverForImageClassificationFourier"),itt.forEach(t),SIo=r(zf," or "),RN=n(zf,"A",{href:!0});var dtt=s(RN);PIo=r(dtt,"PerceiverForImageClassificationConvProcessing"),dtt.forEach(t),$Io=r(zf," (Perceiver model)"),zf.forEach(t),IIo=i(so),av=n(so,"LI",{});var Ewe=s(av);bie=n(Ewe,"STRONG",{});var ctt=s(bie);jIo=r(ctt,"poolformer"),ctt.forEach(t),DIo=r(Ewe," \u2014 "),SN=n(Ewe,"A",{href:!0});var ftt=s(SN);NIo=r(ftt,"PoolFormerForImageClassification"),ftt.forEach(t),qIo=r(Ewe," (PoolFormer model)"),Ewe.forEach(t),OIo=i(so),nv=n(so,"LI",{});var ywe=s(nv);vie=n(ywe,"STRONG",{});var mtt=s(vie);GIo=r(mtt,"segformer"),mtt.forEach(t),XIo=r(ywe," \u2014 "),PN=n(ywe,"A",{href:!0});var gtt=s(PN);VIo=r(gtt,"SegformerForImageClassification"),gtt.forEach(t),zIo=r(ywe," (SegFormer model)"),ywe.forEach(t),WIo=i(so),sv=n(so,"LI",{});var wwe=s(sv);Tie=n(wwe,"STRONG",{});var htt=s(Tie);QIo=r(htt,"swin"),htt.forEach(t),HIo=r(wwe," \u2014 "),$N=n(wwe,"A",{href:!0});var ptt=s($N);UIo=r(ptt,"SwinForImageClassification"),ptt.forEach(t),JIo=r(wwe," (Swin model)"),wwe.forEach(t),YIo=i(so),lv=n(so,"LI",{});var Awe=s(lv);Fie=n(Awe,"STRONG",{});var _tt=s(Fie);KIo=r(_tt,"vit"),_tt.forEach(t),ZIo=r(Awe," \u2014 "),IN=n(Awe,"A",{href:!0});var utt=s(IN);ejo=r(utt,"ViTForImageClassification"),utt.forEach(t),ojo=r(Awe," (ViT model)"),Awe.forEach(t),so.forEach(t),rjo=i(ea),iv=n(ea,"P",{});var Lwe=s(iv);tjo=r(Lwe,"The model is set in evaluation mode by default using "),Cie=n(Lwe,"CODE",{});var btt=s(Cie);ajo=r(btt,"model.eval()"),btt.forEach(t),njo=r(Lwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mie=n(Lwe,"CODE",{});var vtt=s(Mie);sjo=r(vtt,"model.train()"),vtt.forEach(t),Lwe.forEach(t),ljo=i(ea),Eie=n(ea,"P",{});var Ttt=s(Eie);ijo=r(Ttt,"Examples:"),Ttt.forEach(t),djo=i(ea),m(h3.$$.fragment,ea),ea.forEach(t),Tl.forEach(t),yke=i(d),qd=n(d,"H2",{class:!0});var ISe=s(qd);dv=n(ISe,"A",{id:!0,class:!0,href:!0});var Ftt=s(dv);yie=n(Ftt,"SPAN",{});var Ctt=s(yie);m(p3.$$.fragment,Ctt),Ctt.forEach(t),Ftt.forEach(t),cjo=i(ISe),wie=n(ISe,"SPAN",{});var Mtt=s(wie);fjo=r(Mtt,"AutoModelForVision2Seq"),Mtt.forEach(t),ISe.forEach(t),wke=i(d),dr=n(d,"DIV",{class:!0});var Cl=s(dr);m(_3.$$.fragment,Cl),mjo=i(Cl),Od=n(Cl,"P",{});var hW=s(Od);gjo=r(hW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Aie=n(hW,"CODE",{});var Ett=s(Aie);hjo=r(Ett,"from_pretrained()"),Ett.forEach(t),pjo=r(hW,"class method or the "),Lie=n(hW,"CODE",{});var ytt=s(Lie);_jo=r(ytt,"from_config()"),ytt.forEach(t),ujo=r(hW,`class
method.`),hW.forEach(t),bjo=i(Cl),u3=n(Cl,"P",{});var jSe=s(u3);vjo=r(jSe,"This class cannot be instantiated directly using "),Bie=n(jSe,"CODE",{});var wtt=s(Bie);Tjo=r(wtt,"__init__()"),wtt.forEach(t),Fjo=r(jSe," (throws an error)."),jSe.forEach(t),Cjo=i(Cl),at=n(Cl,"DIV",{class:!0});var Ml=s(at);m(b3.$$.fragment,Ml),Mjo=i(Ml),xie=n(Ml,"P",{});var Att=s(xie);Ejo=r(Att,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Att.forEach(t),yjo=i(Ml),Gd=n(Ml,"P",{});var pW=s(Gd);wjo=r(pW,`Note:
Loading a model from its configuration file does `),kie=n(pW,"STRONG",{});var Ltt=s(kie);Ajo=r(Ltt,"not"),Ltt.forEach(t),Ljo=r(pW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Rie=n(pW,"CODE",{});var Btt=s(Rie);Bjo=r(Btt,"from_pretrained()"),Btt.forEach(t),xjo=r(pW,"to load the model weights."),pW.forEach(t),kjo=i(Ml),Sie=n(Ml,"P",{});var xtt=s(Sie);Rjo=r(xtt,"Examples:"),xtt.forEach(t),Sjo=i(Ml),m(v3.$$.fragment,Ml),Ml.forEach(t),Pjo=i(Cl),Ue=n(Cl,"DIV",{class:!0});var oa=s(Ue);m(T3.$$.fragment,oa),$jo=i(oa),Pie=n(oa,"P",{});var ktt=s(Pie);Ijo=r(ktt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ktt.forEach(t),jjo=i(oa),sn=n(oa,"P",{});var TM=s(sn);Djo=r(TM,"The model class to instantiate is selected based on the "),$ie=n(TM,"CODE",{});var Rtt=s($ie);Njo=r(Rtt,"model_type"),Rtt.forEach(t),qjo=r(TM,` property of the config object (either
passed as an argument or loaded from `),Iie=n(TM,"CODE",{});var Stt=s(Iie);Ojo=r(Stt,"pretrained_model_name_or_path"),Stt.forEach(t),Gjo=r(TM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jie=n(TM,"CODE",{});var Ptt=s(jie);Xjo=r(Ptt,"pretrained_model_name_or_path"),Ptt.forEach(t),Vjo=r(TM,":"),TM.forEach(t),zjo=i(oa),Die=n(oa,"UL",{});var $tt=s(Die);cv=n($tt,"LI",{});var Bwe=s(cv);Nie=n(Bwe,"STRONG",{});var Itt=s(Nie);Wjo=r(Itt,"vision-encoder-decoder"),Itt.forEach(t),Qjo=r(Bwe," \u2014 "),jN=n(Bwe,"A",{href:!0});var jtt=s(jN);Hjo=r(jtt,"VisionEncoderDecoderModel"),jtt.forEach(t),Ujo=r(Bwe," (Vision Encoder decoder model)"),Bwe.forEach(t),$tt.forEach(t),Jjo=i(oa),fv=n(oa,"P",{});var xwe=s(fv);Yjo=r(xwe,"The model is set in evaluation mode by default using "),qie=n(xwe,"CODE",{});var Dtt=s(qie);Kjo=r(Dtt,"model.eval()"),Dtt.forEach(t),Zjo=r(xwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oie=n(xwe,"CODE",{});var Ntt=s(Oie);eDo=r(Ntt,"model.train()"),Ntt.forEach(t),xwe.forEach(t),oDo=i(oa),Gie=n(oa,"P",{});var qtt=s(Gie);rDo=r(qtt,"Examples:"),qtt.forEach(t),tDo=i(oa),m(F3.$$.fragment,oa),oa.forEach(t),Cl.forEach(t),Ake=i(d),Xd=n(d,"H2",{class:!0});var DSe=s(Xd);mv=n(DSe,"A",{id:!0,class:!0,href:!0});var Ott=s(mv);Xie=n(Ott,"SPAN",{});var Gtt=s(Xie);m(C3.$$.fragment,Gtt),Gtt.forEach(t),Ott.forEach(t),aDo=i(DSe),Vie=n(DSe,"SPAN",{});var Xtt=s(Vie);nDo=r(Xtt,"AutoModelForAudioClassification"),Xtt.forEach(t),DSe.forEach(t),Lke=i(d),cr=n(d,"DIV",{class:!0});var El=s(cr);m(M3.$$.fragment,El),sDo=i(El),Vd=n(El,"P",{});var _W=s(Vd);lDo=r(_W,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),zie=n(_W,"CODE",{});var Vtt=s(zie);iDo=r(Vtt,"from_pretrained()"),Vtt.forEach(t),dDo=r(_W,"class method or the "),Wie=n(_W,"CODE",{});var ztt=s(Wie);cDo=r(ztt,"from_config()"),ztt.forEach(t),fDo=r(_W,`class
method.`),_W.forEach(t),mDo=i(El),E3=n(El,"P",{});var NSe=s(E3);gDo=r(NSe,"This class cannot be instantiated directly using "),Qie=n(NSe,"CODE",{});var Wtt=s(Qie);hDo=r(Wtt,"__init__()"),Wtt.forEach(t),pDo=r(NSe," (throws an error)."),NSe.forEach(t),_Do=i(El),nt=n(El,"DIV",{class:!0});var yl=s(nt);m(y3.$$.fragment,yl),uDo=i(yl),Hie=n(yl,"P",{});var Qtt=s(Hie);bDo=r(Qtt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Qtt.forEach(t),vDo=i(yl),zd=n(yl,"P",{});var uW=s(zd);TDo=r(uW,`Note:
Loading a model from its configuration file does `),Uie=n(uW,"STRONG",{});var Htt=s(Uie);FDo=r(Htt,"not"),Htt.forEach(t),CDo=r(uW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jie=n(uW,"CODE",{});var Utt=s(Jie);MDo=r(Utt,"from_pretrained()"),Utt.forEach(t),EDo=r(uW,"to load the model weights."),uW.forEach(t),yDo=i(yl),Yie=n(yl,"P",{});var Jtt=s(Yie);wDo=r(Jtt,"Examples:"),Jtt.forEach(t),ADo=i(yl),m(w3.$$.fragment,yl),yl.forEach(t),LDo=i(El),Je=n(El,"DIV",{class:!0});var ra=s(Je);m(A3.$$.fragment,ra),BDo=i(ra),Kie=n(ra,"P",{});var Ytt=s(Kie);xDo=r(Ytt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Ytt.forEach(t),kDo=i(ra),ln=n(ra,"P",{});var FM=s(ln);RDo=r(FM,"The model class to instantiate is selected based on the "),Zie=n(FM,"CODE",{});var Ktt=s(Zie);SDo=r(Ktt,"model_type"),Ktt.forEach(t),PDo=r(FM,` property of the config object (either
passed as an argument or loaded from `),ede=n(FM,"CODE",{});var Ztt=s(ede);$Do=r(Ztt,"pretrained_model_name_or_path"),Ztt.forEach(t),IDo=r(FM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ode=n(FM,"CODE",{});var eat=s(ode);jDo=r(eat,"pretrained_model_name_or_path"),eat.forEach(t),DDo=r(FM,":"),FM.forEach(t),NDo=i(ra),xe=n(ra,"UL",{});var Oo=s(xe);gv=n(Oo,"LI",{});var kwe=s(gv);rde=n(kwe,"STRONG",{});var oat=s(rde);qDo=r(oat,"data2vec-audio"),oat.forEach(t),ODo=r(kwe," \u2014 "),DN=n(kwe,"A",{href:!0});var rat=s(DN);GDo=r(rat,"Data2VecAudioForSequenceClassification"),rat.forEach(t),XDo=r(kwe," (Data2VecAudio model)"),kwe.forEach(t),VDo=i(Oo),hv=n(Oo,"LI",{});var Rwe=s(hv);tde=n(Rwe,"STRONG",{});var tat=s(tde);zDo=r(tat,"hubert"),tat.forEach(t),WDo=r(Rwe," \u2014 "),NN=n(Rwe,"A",{href:!0});var aat=s(NN);QDo=r(aat,"HubertForSequenceClassification"),aat.forEach(t),HDo=r(Rwe," (Hubert model)"),Rwe.forEach(t),UDo=i(Oo),pv=n(Oo,"LI",{});var Swe=s(pv);ade=n(Swe,"STRONG",{});var nat=s(ade);JDo=r(nat,"sew"),nat.forEach(t),YDo=r(Swe," \u2014 "),qN=n(Swe,"A",{href:!0});var sat=s(qN);KDo=r(sat,"SEWForSequenceClassification"),sat.forEach(t),ZDo=r(Swe," (SEW model)"),Swe.forEach(t),eNo=i(Oo),_v=n(Oo,"LI",{});var Pwe=s(_v);nde=n(Pwe,"STRONG",{});var lat=s(nde);oNo=r(lat,"sew-d"),lat.forEach(t),rNo=r(Pwe," \u2014 "),ON=n(Pwe,"A",{href:!0});var iat=s(ON);tNo=r(iat,"SEWDForSequenceClassification"),iat.forEach(t),aNo=r(Pwe," (SEW-D model)"),Pwe.forEach(t),nNo=i(Oo),uv=n(Oo,"LI",{});var $we=s(uv);sde=n($we,"STRONG",{});var dat=s(sde);sNo=r(dat,"unispeech"),dat.forEach(t),lNo=r($we," \u2014 "),GN=n($we,"A",{href:!0});var cat=s(GN);iNo=r(cat,"UniSpeechForSequenceClassification"),cat.forEach(t),dNo=r($we," (UniSpeech model)"),$we.forEach(t),cNo=i(Oo),bv=n(Oo,"LI",{});var Iwe=s(bv);lde=n(Iwe,"STRONG",{});var fat=s(lde);fNo=r(fat,"unispeech-sat"),fat.forEach(t),mNo=r(Iwe," \u2014 "),XN=n(Iwe,"A",{href:!0});var mat=s(XN);gNo=r(mat,"UniSpeechSatForSequenceClassification"),mat.forEach(t),hNo=r(Iwe," (UniSpeechSat model)"),Iwe.forEach(t),pNo=i(Oo),vv=n(Oo,"LI",{});var jwe=s(vv);ide=n(jwe,"STRONG",{});var gat=s(ide);_No=r(gat,"wav2vec2"),gat.forEach(t),uNo=r(jwe," \u2014 "),VN=n(jwe,"A",{href:!0});var hat=s(VN);bNo=r(hat,"Wav2Vec2ForSequenceClassification"),hat.forEach(t),vNo=r(jwe," (Wav2Vec2 model)"),jwe.forEach(t),TNo=i(Oo),Tv=n(Oo,"LI",{});var Dwe=s(Tv);dde=n(Dwe,"STRONG",{});var pat=s(dde);FNo=r(pat,"wavlm"),pat.forEach(t),CNo=r(Dwe," \u2014 "),zN=n(Dwe,"A",{href:!0});var _at=s(zN);MNo=r(_at,"WavLMForSequenceClassification"),_at.forEach(t),ENo=r(Dwe," (WavLM model)"),Dwe.forEach(t),Oo.forEach(t),yNo=i(ra),Fv=n(ra,"P",{});var Nwe=s(Fv);wNo=r(Nwe,"The model is set in evaluation mode by default using "),cde=n(Nwe,"CODE",{});var uat=s(cde);ANo=r(uat,"model.eval()"),uat.forEach(t),LNo=r(Nwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fde=n(Nwe,"CODE",{});var bat=s(fde);BNo=r(bat,"model.train()"),bat.forEach(t),Nwe.forEach(t),xNo=i(ra),mde=n(ra,"P",{});var vat=s(mde);kNo=r(vat,"Examples:"),vat.forEach(t),RNo=i(ra),m(L3.$$.fragment,ra),ra.forEach(t),El.forEach(t),Bke=i(d),Wd=n(d,"H2",{class:!0});var qSe=s(Wd);Cv=n(qSe,"A",{id:!0,class:!0,href:!0});var Tat=s(Cv);gde=n(Tat,"SPAN",{});var Fat=s(gde);m(B3.$$.fragment,Fat),Fat.forEach(t),Tat.forEach(t),SNo=i(qSe),hde=n(qSe,"SPAN",{});var Cat=s(hde);PNo=r(Cat,"AutoModelForAudioFrameClassification"),Cat.forEach(t),qSe.forEach(t),xke=i(d),fr=n(d,"DIV",{class:!0});var wl=s(fr);m(x3.$$.fragment,wl),$No=i(wl),Qd=n(wl,"P",{});var bW=s(Qd);INo=r(bW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),pde=n(bW,"CODE",{});var Mat=s(pde);jNo=r(Mat,"from_pretrained()"),Mat.forEach(t),DNo=r(bW,"class method or the "),_de=n(bW,"CODE",{});var Eat=s(_de);NNo=r(Eat,"from_config()"),Eat.forEach(t),qNo=r(bW,`class
method.`),bW.forEach(t),ONo=i(wl),k3=n(wl,"P",{});var OSe=s(k3);GNo=r(OSe,"This class cannot be instantiated directly using "),ude=n(OSe,"CODE",{});var yat=s(ude);XNo=r(yat,"__init__()"),yat.forEach(t),VNo=r(OSe," (throws an error)."),OSe.forEach(t),zNo=i(wl),st=n(wl,"DIV",{class:!0});var Al=s(st);m(R3.$$.fragment,Al),WNo=i(Al),bde=n(Al,"P",{});var wat=s(bde);QNo=r(wat,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),wat.forEach(t),HNo=i(Al),Hd=n(Al,"P",{});var vW=s(Hd);UNo=r(vW,`Note:
Loading a model from its configuration file does `),vde=n(vW,"STRONG",{});var Aat=s(vde);JNo=r(Aat,"not"),Aat.forEach(t),YNo=r(vW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tde=n(vW,"CODE",{});var Lat=s(Tde);KNo=r(Lat,"from_pretrained()"),Lat.forEach(t),ZNo=r(vW,"to load the model weights."),vW.forEach(t),eqo=i(Al),Fde=n(Al,"P",{});var Bat=s(Fde);oqo=r(Bat,"Examples:"),Bat.forEach(t),rqo=i(Al),m(S3.$$.fragment,Al),Al.forEach(t),tqo=i(wl),Ye=n(wl,"DIV",{class:!0});var ta=s(Ye);m(P3.$$.fragment,ta),aqo=i(ta),Cde=n(ta,"P",{});var xat=s(Cde);nqo=r(xat,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),xat.forEach(t),sqo=i(ta),dn=n(ta,"P",{});var CM=s(dn);lqo=r(CM,"The model class to instantiate is selected based on the "),Mde=n(CM,"CODE",{});var kat=s(Mde);iqo=r(kat,"model_type"),kat.forEach(t),dqo=r(CM,` property of the config object (either
passed as an argument or loaded from `),Ede=n(CM,"CODE",{});var Rat=s(Ede);cqo=r(Rat,"pretrained_model_name_or_path"),Rat.forEach(t),fqo=r(CM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yde=n(CM,"CODE",{});var Sat=s(yde);mqo=r(Sat,"pretrained_model_name_or_path"),Sat.forEach(t),gqo=r(CM,":"),CM.forEach(t),hqo=i(ta),cn=n(ta,"UL",{});var MM=s(cn);Mv=n(MM,"LI",{});var qwe=s(Mv);wde=n(qwe,"STRONG",{});var Pat=s(wde);pqo=r(Pat,"data2vec-audio"),Pat.forEach(t),_qo=r(qwe," \u2014 "),WN=n(qwe,"A",{href:!0});var $at=s(WN);uqo=r($at,"Data2VecAudioForAudioFrameClassification"),$at.forEach(t),bqo=r(qwe," (Data2VecAudio model)"),qwe.forEach(t),vqo=i(MM),Ev=n(MM,"LI",{});var Owe=s(Ev);Ade=n(Owe,"STRONG",{});var Iat=s(Ade);Tqo=r(Iat,"unispeech-sat"),Iat.forEach(t),Fqo=r(Owe," \u2014 "),QN=n(Owe,"A",{href:!0});var jat=s(QN);Cqo=r(jat,"UniSpeechSatForAudioFrameClassification"),jat.forEach(t),Mqo=r(Owe," (UniSpeechSat model)"),Owe.forEach(t),Eqo=i(MM),yv=n(MM,"LI",{});var Gwe=s(yv);Lde=n(Gwe,"STRONG",{});var Dat=s(Lde);yqo=r(Dat,"wav2vec2"),Dat.forEach(t),wqo=r(Gwe," \u2014 "),HN=n(Gwe,"A",{href:!0});var Nat=s(HN);Aqo=r(Nat,"Wav2Vec2ForAudioFrameClassification"),Nat.forEach(t),Lqo=r(Gwe," (Wav2Vec2 model)"),Gwe.forEach(t),Bqo=i(MM),wv=n(MM,"LI",{});var Xwe=s(wv);Bde=n(Xwe,"STRONG",{});var qat=s(Bde);xqo=r(qat,"wavlm"),qat.forEach(t),kqo=r(Xwe," \u2014 "),UN=n(Xwe,"A",{href:!0});var Oat=s(UN);Rqo=r(Oat,"WavLMForAudioFrameClassification"),Oat.forEach(t),Sqo=r(Xwe," (WavLM model)"),Xwe.forEach(t),MM.forEach(t),Pqo=i(ta),Av=n(ta,"P",{});var Vwe=s(Av);$qo=r(Vwe,"The model is set in evaluation mode by default using "),xde=n(Vwe,"CODE",{});var Gat=s(xde);Iqo=r(Gat,"model.eval()"),Gat.forEach(t),jqo=r(Vwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kde=n(Vwe,"CODE",{});var Xat=s(kde);Dqo=r(Xat,"model.train()"),Xat.forEach(t),Vwe.forEach(t),Nqo=i(ta),Rde=n(ta,"P",{});var Vat=s(Rde);qqo=r(Vat,"Examples:"),Vat.forEach(t),Oqo=i(ta),m($3.$$.fragment,ta),ta.forEach(t),wl.forEach(t),kke=i(d),Ud=n(d,"H2",{class:!0});var GSe=s(Ud);Lv=n(GSe,"A",{id:!0,class:!0,href:!0});var zat=s(Lv);Sde=n(zat,"SPAN",{});var Wat=s(Sde);m(I3.$$.fragment,Wat),Wat.forEach(t),zat.forEach(t),Gqo=i(GSe),Pde=n(GSe,"SPAN",{});var Qat=s(Pde);Xqo=r(Qat,"AutoModelForCTC"),Qat.forEach(t),GSe.forEach(t),Rke=i(d),mr=n(d,"DIV",{class:!0});var Ll=s(mr);m(j3.$$.fragment,Ll),Vqo=i(Ll),Jd=n(Ll,"P",{});var TW=s(Jd);zqo=r(TW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),$de=n(TW,"CODE",{});var Hat=s($de);Wqo=r(Hat,"from_pretrained()"),Hat.forEach(t),Qqo=r(TW,"class method or the "),Ide=n(TW,"CODE",{});var Uat=s(Ide);Hqo=r(Uat,"from_config()"),Uat.forEach(t),Uqo=r(TW,`class
method.`),TW.forEach(t),Jqo=i(Ll),D3=n(Ll,"P",{});var XSe=s(D3);Yqo=r(XSe,"This class cannot be instantiated directly using "),jde=n(XSe,"CODE",{});var Jat=s(jde);Kqo=r(Jat,"__init__()"),Jat.forEach(t),Zqo=r(XSe," (throws an error)."),XSe.forEach(t),eOo=i(Ll),lt=n(Ll,"DIV",{class:!0});var Bl=s(lt);m(N3.$$.fragment,Bl),oOo=i(Bl),Dde=n(Bl,"P",{});var Yat=s(Dde);rOo=r(Yat,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Yat.forEach(t),tOo=i(Bl),Yd=n(Bl,"P",{});var FW=s(Yd);aOo=r(FW,`Note:
Loading a model from its configuration file does `),Nde=n(FW,"STRONG",{});var Kat=s(Nde);nOo=r(Kat,"not"),Kat.forEach(t),sOo=r(FW,` load the model weights. It only affects the
model\u2019s configuration. Use `),qde=n(FW,"CODE",{});var Zat=s(qde);lOo=r(Zat,"from_pretrained()"),Zat.forEach(t),iOo=r(FW,"to load the model weights."),FW.forEach(t),dOo=i(Bl),Ode=n(Bl,"P",{});var ent=s(Ode);cOo=r(ent,"Examples:"),ent.forEach(t),fOo=i(Bl),m(q3.$$.fragment,Bl),Bl.forEach(t),mOo=i(Ll),Ke=n(Ll,"DIV",{class:!0});var aa=s(Ke);m(O3.$$.fragment,aa),gOo=i(aa),Gde=n(aa,"P",{});var ont=s(Gde);hOo=r(ont,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),ont.forEach(t),pOo=i(aa),fn=n(aa,"P",{});var EM=s(fn);_Oo=r(EM,"The model class to instantiate is selected based on the "),Xde=n(EM,"CODE",{});var rnt=s(Xde);uOo=r(rnt,"model_type"),rnt.forEach(t),bOo=r(EM,` property of the config object (either
passed as an argument or loaded from `),Vde=n(EM,"CODE",{});var tnt=s(Vde);vOo=r(tnt,"pretrained_model_name_or_path"),tnt.forEach(t),TOo=r(EM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zde=n(EM,"CODE",{});var ant=s(zde);FOo=r(ant,"pretrained_model_name_or_path"),ant.forEach(t),COo=r(EM,":"),EM.forEach(t),MOo=i(aa),ke=n(aa,"UL",{});var Go=s(ke);Bv=n(Go,"LI",{});var zwe=s(Bv);Wde=n(zwe,"STRONG",{});var nnt=s(Wde);EOo=r(nnt,"data2vec-audio"),nnt.forEach(t),yOo=r(zwe," \u2014 "),JN=n(zwe,"A",{href:!0});var snt=s(JN);wOo=r(snt,"Data2VecAudioForCTC"),snt.forEach(t),AOo=r(zwe," (Data2VecAudio model)"),zwe.forEach(t),LOo=i(Go),xv=n(Go,"LI",{});var Wwe=s(xv);Qde=n(Wwe,"STRONG",{});var lnt=s(Qde);BOo=r(lnt,"hubert"),lnt.forEach(t),xOo=r(Wwe," \u2014 "),YN=n(Wwe,"A",{href:!0});var int=s(YN);kOo=r(int,"HubertForCTC"),int.forEach(t),ROo=r(Wwe," (Hubert model)"),Wwe.forEach(t),SOo=i(Go),kv=n(Go,"LI",{});var Qwe=s(kv);Hde=n(Qwe,"STRONG",{});var dnt=s(Hde);POo=r(dnt,"sew"),dnt.forEach(t),$Oo=r(Qwe," \u2014 "),KN=n(Qwe,"A",{href:!0});var cnt=s(KN);IOo=r(cnt,"SEWForCTC"),cnt.forEach(t),jOo=r(Qwe," (SEW model)"),Qwe.forEach(t),DOo=i(Go),Rv=n(Go,"LI",{});var Hwe=s(Rv);Ude=n(Hwe,"STRONG",{});var fnt=s(Ude);NOo=r(fnt,"sew-d"),fnt.forEach(t),qOo=r(Hwe," \u2014 "),ZN=n(Hwe,"A",{href:!0});var mnt=s(ZN);OOo=r(mnt,"SEWDForCTC"),mnt.forEach(t),GOo=r(Hwe," (SEW-D model)"),Hwe.forEach(t),XOo=i(Go),Sv=n(Go,"LI",{});var Uwe=s(Sv);Jde=n(Uwe,"STRONG",{});var gnt=s(Jde);VOo=r(gnt,"unispeech"),gnt.forEach(t),zOo=r(Uwe," \u2014 "),eq=n(Uwe,"A",{href:!0});var hnt=s(eq);WOo=r(hnt,"UniSpeechForCTC"),hnt.forEach(t),QOo=r(Uwe," (UniSpeech model)"),Uwe.forEach(t),HOo=i(Go),Pv=n(Go,"LI",{});var Jwe=s(Pv);Yde=n(Jwe,"STRONG",{});var pnt=s(Yde);UOo=r(pnt,"unispeech-sat"),pnt.forEach(t),JOo=r(Jwe," \u2014 "),oq=n(Jwe,"A",{href:!0});var _nt=s(oq);YOo=r(_nt,"UniSpeechSatForCTC"),_nt.forEach(t),KOo=r(Jwe," (UniSpeechSat model)"),Jwe.forEach(t),ZOo=i(Go),$v=n(Go,"LI",{});var Ywe=s($v);Kde=n(Ywe,"STRONG",{});var unt=s(Kde);eGo=r(unt,"wav2vec2"),unt.forEach(t),oGo=r(Ywe," \u2014 "),rq=n(Ywe,"A",{href:!0});var bnt=s(rq);rGo=r(bnt,"Wav2Vec2ForCTC"),bnt.forEach(t),tGo=r(Ywe," (Wav2Vec2 model)"),Ywe.forEach(t),aGo=i(Go),Iv=n(Go,"LI",{});var Kwe=s(Iv);Zde=n(Kwe,"STRONG",{});var vnt=s(Zde);nGo=r(vnt,"wavlm"),vnt.forEach(t),sGo=r(Kwe," \u2014 "),tq=n(Kwe,"A",{href:!0});var Tnt=s(tq);lGo=r(Tnt,"WavLMForCTC"),Tnt.forEach(t),iGo=r(Kwe," (WavLM model)"),Kwe.forEach(t),Go.forEach(t),dGo=i(aa),jv=n(aa,"P",{});var Zwe=s(jv);cGo=r(Zwe,"The model is set in evaluation mode by default using "),ece=n(Zwe,"CODE",{});var Fnt=s(ece);fGo=r(Fnt,"model.eval()"),Fnt.forEach(t),mGo=r(Zwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oce=n(Zwe,"CODE",{});var Cnt=s(oce);gGo=r(Cnt,"model.train()"),Cnt.forEach(t),Zwe.forEach(t),hGo=i(aa),rce=n(aa,"P",{});var Mnt=s(rce);pGo=r(Mnt,"Examples:"),Mnt.forEach(t),_Go=i(aa),m(G3.$$.fragment,aa),aa.forEach(t),Ll.forEach(t),Ske=i(d),Kd=n(d,"H2",{class:!0});var VSe=s(Kd);Dv=n(VSe,"A",{id:!0,class:!0,href:!0});var Ent=s(Dv);tce=n(Ent,"SPAN",{});var ynt=s(tce);m(X3.$$.fragment,ynt),ynt.forEach(t),Ent.forEach(t),uGo=i(VSe),ace=n(VSe,"SPAN",{});var wnt=s(ace);bGo=r(wnt,"AutoModelForSpeechSeq2Seq"),wnt.forEach(t),VSe.forEach(t),Pke=i(d),gr=n(d,"DIV",{class:!0});var xl=s(gr);m(V3.$$.fragment,xl),vGo=i(xl),Zd=n(xl,"P",{});var CW=s(Zd);TGo=r(CW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),nce=n(CW,"CODE",{});var Ant=s(nce);FGo=r(Ant,"from_pretrained()"),Ant.forEach(t),CGo=r(CW,"class method or the "),sce=n(CW,"CODE",{});var Lnt=s(sce);MGo=r(Lnt,"from_config()"),Lnt.forEach(t),EGo=r(CW,`class
method.`),CW.forEach(t),yGo=i(xl),z3=n(xl,"P",{});var zSe=s(z3);wGo=r(zSe,"This class cannot be instantiated directly using "),lce=n(zSe,"CODE",{});var Bnt=s(lce);AGo=r(Bnt,"__init__()"),Bnt.forEach(t),LGo=r(zSe," (throws an error)."),zSe.forEach(t),BGo=i(xl),it=n(xl,"DIV",{class:!0});var kl=s(it);m(W3.$$.fragment,kl),xGo=i(kl),ice=n(kl,"P",{});var xnt=s(ice);kGo=r(xnt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),xnt.forEach(t),RGo=i(kl),ec=n(kl,"P",{});var MW=s(ec);SGo=r(MW,`Note:
Loading a model from its configuration file does `),dce=n(MW,"STRONG",{});var knt=s(dce);PGo=r(knt,"not"),knt.forEach(t),$Go=r(MW,` load the model weights. It only affects the
model\u2019s configuration. Use `),cce=n(MW,"CODE",{});var Rnt=s(cce);IGo=r(Rnt,"from_pretrained()"),Rnt.forEach(t),jGo=r(MW,"to load the model weights."),MW.forEach(t),DGo=i(kl),fce=n(kl,"P",{});var Snt=s(fce);NGo=r(Snt,"Examples:"),Snt.forEach(t),qGo=i(kl),m(Q3.$$.fragment,kl),kl.forEach(t),OGo=i(xl),Ze=n(xl,"DIV",{class:!0});var na=s(Ze);m(H3.$$.fragment,na),GGo=i(na),mce=n(na,"P",{});var Pnt=s(mce);XGo=r(Pnt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Pnt.forEach(t),VGo=i(na),mn=n(na,"P",{});var yM=s(mn);zGo=r(yM,"The model class to instantiate is selected based on the "),gce=n(yM,"CODE",{});var $nt=s(gce);WGo=r($nt,"model_type"),$nt.forEach(t),QGo=r(yM,` property of the config object (either
passed as an argument or loaded from `),hce=n(yM,"CODE",{});var Int=s(hce);HGo=r(Int,"pretrained_model_name_or_path"),Int.forEach(t),UGo=r(yM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pce=n(yM,"CODE",{});var jnt=s(pce);JGo=r(jnt,"pretrained_model_name_or_path"),jnt.forEach(t),YGo=r(yM,":"),yM.forEach(t),KGo=i(na),U3=n(na,"UL",{});var WSe=s(U3);Nv=n(WSe,"LI",{});var eAe=s(Nv);_ce=n(eAe,"STRONG",{});var Dnt=s(_ce);ZGo=r(Dnt,"speech-encoder-decoder"),Dnt.forEach(t),eXo=r(eAe," \u2014 "),aq=n(eAe,"A",{href:!0});var Nnt=s(aq);oXo=r(Nnt,"SpeechEncoderDecoderModel"),Nnt.forEach(t),rXo=r(eAe," (Speech Encoder decoder model)"),eAe.forEach(t),tXo=i(WSe),qv=n(WSe,"LI",{});var oAe=s(qv);uce=n(oAe,"STRONG",{});var qnt=s(uce);aXo=r(qnt,"speech_to_text"),qnt.forEach(t),nXo=r(oAe," \u2014 "),nq=n(oAe,"A",{href:!0});var Ont=s(nq);sXo=r(Ont,"Speech2TextForConditionalGeneration"),Ont.forEach(t),lXo=r(oAe," (Speech2Text model)"),oAe.forEach(t),WSe.forEach(t),iXo=i(na),Ov=n(na,"P",{});var rAe=s(Ov);dXo=r(rAe,"The model is set in evaluation mode by default using "),bce=n(rAe,"CODE",{});var Gnt=s(bce);cXo=r(Gnt,"model.eval()"),Gnt.forEach(t),fXo=r(rAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vce=n(rAe,"CODE",{});var Xnt=s(vce);mXo=r(Xnt,"model.train()"),Xnt.forEach(t),rAe.forEach(t),gXo=i(na),Tce=n(na,"P",{});var Vnt=s(Tce);hXo=r(Vnt,"Examples:"),Vnt.forEach(t),pXo=i(na),m(J3.$$.fragment,na),na.forEach(t),xl.forEach(t),$ke=i(d),oc=n(d,"H2",{class:!0});var QSe=s(oc);Gv=n(QSe,"A",{id:!0,class:!0,href:!0});var znt=s(Gv);Fce=n(znt,"SPAN",{});var Wnt=s(Fce);m(Y3.$$.fragment,Wnt),Wnt.forEach(t),znt.forEach(t),_Xo=i(QSe),Cce=n(QSe,"SPAN",{});var Qnt=s(Cce);uXo=r(Qnt,"AutoModelForAudioXVector"),Qnt.forEach(t),QSe.forEach(t),Ike=i(d),hr=n(d,"DIV",{class:!0});var Rl=s(hr);m(K3.$$.fragment,Rl),bXo=i(Rl),rc=n(Rl,"P",{});var EW=s(rc);vXo=r(EW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),Mce=n(EW,"CODE",{});var Hnt=s(Mce);TXo=r(Hnt,"from_pretrained()"),Hnt.forEach(t),FXo=r(EW,"class method or the "),Ece=n(EW,"CODE",{});var Unt=s(Ece);CXo=r(Unt,"from_config()"),Unt.forEach(t),MXo=r(EW,`class
method.`),EW.forEach(t),EXo=i(Rl),Z3=n(Rl,"P",{});var HSe=s(Z3);yXo=r(HSe,"This class cannot be instantiated directly using "),yce=n(HSe,"CODE",{});var Jnt=s(yce);wXo=r(Jnt,"__init__()"),Jnt.forEach(t),AXo=r(HSe," (throws an error)."),HSe.forEach(t),LXo=i(Rl),dt=n(Rl,"DIV",{class:!0});var Sl=s(dt);m(ey.$$.fragment,Sl),BXo=i(Sl),wce=n(Sl,"P",{});var Ynt=s(wce);xXo=r(Ynt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Ynt.forEach(t),kXo=i(Sl),tc=n(Sl,"P",{});var yW=s(tc);RXo=r(yW,`Note:
Loading a model from its configuration file does `),Ace=n(yW,"STRONG",{});var Knt=s(Ace);SXo=r(Knt,"not"),Knt.forEach(t),PXo=r(yW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lce=n(yW,"CODE",{});var Znt=s(Lce);$Xo=r(Znt,"from_pretrained()"),Znt.forEach(t),IXo=r(yW,"to load the model weights."),yW.forEach(t),jXo=i(Sl),Bce=n(Sl,"P",{});var est=s(Bce);DXo=r(est,"Examples:"),est.forEach(t),NXo=i(Sl),m(oy.$$.fragment,Sl),Sl.forEach(t),qXo=i(Rl),eo=n(Rl,"DIV",{class:!0});var sa=s(eo);m(ry.$$.fragment,sa),OXo=i(sa),xce=n(sa,"P",{});var ost=s(xce);GXo=r(ost,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),ost.forEach(t),XXo=i(sa),gn=n(sa,"P",{});var wM=s(gn);VXo=r(wM,"The model class to instantiate is selected based on the "),kce=n(wM,"CODE",{});var rst=s(kce);zXo=r(rst,"model_type"),rst.forEach(t),WXo=r(wM,` property of the config object (either
passed as an argument or loaded from `),Rce=n(wM,"CODE",{});var tst=s(Rce);QXo=r(tst,"pretrained_model_name_or_path"),tst.forEach(t),HXo=r(wM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sce=n(wM,"CODE",{});var ast=s(Sce);UXo=r(ast,"pretrained_model_name_or_path"),ast.forEach(t),JXo=r(wM,":"),wM.forEach(t),YXo=i(sa),hn=n(sa,"UL",{});var AM=s(hn);Xv=n(AM,"LI",{});var tAe=s(Xv);Pce=n(tAe,"STRONG",{});var nst=s(Pce);KXo=r(nst,"data2vec-audio"),nst.forEach(t),ZXo=r(tAe," \u2014 "),sq=n(tAe,"A",{href:!0});var sst=s(sq);eVo=r(sst,"Data2VecAudioForXVector"),sst.forEach(t),oVo=r(tAe," (Data2VecAudio model)"),tAe.forEach(t),rVo=i(AM),Vv=n(AM,"LI",{});var aAe=s(Vv);$ce=n(aAe,"STRONG",{});var lst=s($ce);tVo=r(lst,"unispeech-sat"),lst.forEach(t),aVo=r(aAe," \u2014 "),lq=n(aAe,"A",{href:!0});var ist=s(lq);nVo=r(ist,"UniSpeechSatForXVector"),ist.forEach(t),sVo=r(aAe," (UniSpeechSat model)"),aAe.forEach(t),lVo=i(AM),zv=n(AM,"LI",{});var nAe=s(zv);Ice=n(nAe,"STRONG",{});var dst=s(Ice);iVo=r(dst,"wav2vec2"),dst.forEach(t),dVo=r(nAe," \u2014 "),iq=n(nAe,"A",{href:!0});var cst=s(iq);cVo=r(cst,"Wav2Vec2ForXVector"),cst.forEach(t),fVo=r(nAe," (Wav2Vec2 model)"),nAe.forEach(t),mVo=i(AM),Wv=n(AM,"LI",{});var sAe=s(Wv);jce=n(sAe,"STRONG",{});var fst=s(jce);gVo=r(fst,"wavlm"),fst.forEach(t),hVo=r(sAe," \u2014 "),dq=n(sAe,"A",{href:!0});var mst=s(dq);pVo=r(mst,"WavLMForXVector"),mst.forEach(t),_Vo=r(sAe," (WavLM model)"),sAe.forEach(t),AM.forEach(t),uVo=i(sa),Qv=n(sa,"P",{});var lAe=s(Qv);bVo=r(lAe,"The model is set in evaluation mode by default using "),Dce=n(lAe,"CODE",{});var gst=s(Dce);vVo=r(gst,"model.eval()"),gst.forEach(t),TVo=r(lAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nce=n(lAe,"CODE",{});var hst=s(Nce);FVo=r(hst,"model.train()"),hst.forEach(t),lAe.forEach(t),CVo=i(sa),qce=n(sa,"P",{});var pst=s(qce);MVo=r(pst,"Examples:"),pst.forEach(t),EVo=i(sa),m(ty.$$.fragment,sa),sa.forEach(t),Rl.forEach(t),jke=i(d),ac=n(d,"H2",{class:!0});var USe=s(ac);Hv=n(USe,"A",{id:!0,class:!0,href:!0});var _st=s(Hv);Oce=n(_st,"SPAN",{});var ust=s(Oce);m(ay.$$.fragment,ust),ust.forEach(t),_st.forEach(t),yVo=i(USe),Gce=n(USe,"SPAN",{});var bst=s(Gce);wVo=r(bst,"AutoModelForMaskedImageModeling"),bst.forEach(t),USe.forEach(t),Dke=i(d),pr=n(d,"DIV",{class:!0});var Pl=s(pr);m(ny.$$.fragment,Pl),AVo=i(Pl),nc=n(Pl,"P",{});var wW=s(nc);LVo=r(wW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Xce=n(wW,"CODE",{});var vst=s(Xce);BVo=r(vst,"from_pretrained()"),vst.forEach(t),xVo=r(wW,"class method or the "),Vce=n(wW,"CODE",{});var Tst=s(Vce);kVo=r(Tst,"from_config()"),Tst.forEach(t),RVo=r(wW,`class
method.`),wW.forEach(t),SVo=i(Pl),sy=n(Pl,"P",{});var JSe=s(sy);PVo=r(JSe,"This class cannot be instantiated directly using "),zce=n(JSe,"CODE",{});var Fst=s(zce);$Vo=r(Fst,"__init__()"),Fst.forEach(t),IVo=r(JSe," (throws an error)."),JSe.forEach(t),jVo=i(Pl),ct=n(Pl,"DIV",{class:!0});var $l=s(ct);m(ly.$$.fragment,$l),DVo=i($l),Wce=n($l,"P",{});var Cst=s(Wce);NVo=r(Cst,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Cst.forEach(t),qVo=i($l),sc=n($l,"P",{});var AW=s(sc);OVo=r(AW,`Note:
Loading a model from its configuration file does `),Qce=n(AW,"STRONG",{});var Mst=s(Qce);GVo=r(Mst,"not"),Mst.forEach(t),XVo=r(AW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hce=n(AW,"CODE",{});var Est=s(Hce);VVo=r(Est,"from_pretrained()"),Est.forEach(t),zVo=r(AW,"to load the model weights."),AW.forEach(t),WVo=i($l),Uce=n($l,"P",{});var yst=s(Uce);QVo=r(yst,"Examples:"),yst.forEach(t),HVo=i($l),m(iy.$$.fragment,$l),$l.forEach(t),UVo=i(Pl),oo=n(Pl,"DIV",{class:!0});var la=s(oo);m(dy.$$.fragment,la),JVo=i(la),Jce=n(la,"P",{});var wst=s(Jce);YVo=r(wst,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),wst.forEach(t),KVo=i(la),pn=n(la,"P",{});var LM=s(pn);ZVo=r(LM,"The model class to instantiate is selected based on the "),Yce=n(LM,"CODE",{});var Ast=s(Yce);ezo=r(Ast,"model_type"),Ast.forEach(t),ozo=r(LM,` property of the config object (either
passed as an argument or loaded from `),Kce=n(LM,"CODE",{});var Lst=s(Kce);rzo=r(Lst,"pretrained_model_name_or_path"),Lst.forEach(t),tzo=r(LM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zce=n(LM,"CODE",{});var Bst=s(Zce);azo=r(Bst,"pretrained_model_name_or_path"),Bst.forEach(t),nzo=r(LM,":"),LM.forEach(t),szo=i(la),lc=n(la,"UL",{});var LW=s(lc);Uv=n(LW,"LI",{});var iAe=s(Uv);efe=n(iAe,"STRONG",{});var xst=s(efe);lzo=r(xst,"deit"),xst.forEach(t),izo=r(iAe," \u2014 "),cq=n(iAe,"A",{href:!0});var kst=s(cq);dzo=r(kst,"DeiTForMaskedImageModeling"),kst.forEach(t),czo=r(iAe," (DeiT model)"),iAe.forEach(t),fzo=i(LW),Jv=n(LW,"LI",{});var dAe=s(Jv);ofe=n(dAe,"STRONG",{});var Rst=s(ofe);mzo=r(Rst,"swin"),Rst.forEach(t),gzo=r(dAe," \u2014 "),fq=n(dAe,"A",{href:!0});var Sst=s(fq);hzo=r(Sst,"SwinForMaskedImageModeling"),Sst.forEach(t),pzo=r(dAe," (Swin model)"),dAe.forEach(t),_zo=i(LW),Yv=n(LW,"LI",{});var cAe=s(Yv);rfe=n(cAe,"STRONG",{});var Pst=s(rfe);uzo=r(Pst,"vit"),Pst.forEach(t),bzo=r(cAe," \u2014 "),mq=n(cAe,"A",{href:!0});var $st=s(mq);vzo=r($st,"ViTForMaskedImageModeling"),$st.forEach(t),Tzo=r(cAe," (ViT model)"),cAe.forEach(t),LW.forEach(t),Fzo=i(la),Kv=n(la,"P",{});var fAe=s(Kv);Czo=r(fAe,"The model is set in evaluation mode by default using "),tfe=n(fAe,"CODE",{});var Ist=s(tfe);Mzo=r(Ist,"model.eval()"),Ist.forEach(t),Ezo=r(fAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),afe=n(fAe,"CODE",{});var jst=s(afe);yzo=r(jst,"model.train()"),jst.forEach(t),fAe.forEach(t),wzo=i(la),nfe=n(la,"P",{});var Dst=s(nfe);Azo=r(Dst,"Examples:"),Dst.forEach(t),Lzo=i(la),m(cy.$$.fragment,la),la.forEach(t),Pl.forEach(t),Nke=i(d),ic=n(d,"H2",{class:!0});var YSe=s(ic);Zv=n(YSe,"A",{id:!0,class:!0,href:!0});var Nst=s(Zv);sfe=n(Nst,"SPAN",{});var qst=s(sfe);m(fy.$$.fragment,qst),qst.forEach(t),Nst.forEach(t),Bzo=i(YSe),lfe=n(YSe,"SPAN",{});var Ost=s(lfe);xzo=r(Ost,"AutoModelForObjectDetection"),Ost.forEach(t),YSe.forEach(t),qke=i(d),_r=n(d,"DIV",{class:!0});var Il=s(_r);m(my.$$.fragment,Il),kzo=i(Il),dc=n(Il,"P",{});var BW=s(dc);Rzo=r(BW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),ife=n(BW,"CODE",{});var Gst=s(ife);Szo=r(Gst,"from_pretrained()"),Gst.forEach(t),Pzo=r(BW,"class method or the "),dfe=n(BW,"CODE",{});var Xst=s(dfe);$zo=r(Xst,"from_config()"),Xst.forEach(t),Izo=r(BW,`class
method.`),BW.forEach(t),jzo=i(Il),gy=n(Il,"P",{});var KSe=s(gy);Dzo=r(KSe,"This class cannot be instantiated directly using "),cfe=n(KSe,"CODE",{});var Vst=s(cfe);Nzo=r(Vst,"__init__()"),Vst.forEach(t),qzo=r(KSe," (throws an error)."),KSe.forEach(t),Ozo=i(Il),ft=n(Il,"DIV",{class:!0});var jl=s(ft);m(hy.$$.fragment,jl),Gzo=i(jl),ffe=n(jl,"P",{});var zst=s(ffe);Xzo=r(zst,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),zst.forEach(t),Vzo=i(jl),cc=n(jl,"P",{});var xW=s(cc);zzo=r(xW,`Note:
Loading a model from its configuration file does `),mfe=n(xW,"STRONG",{});var Wst=s(mfe);Wzo=r(Wst,"not"),Wst.forEach(t),Qzo=r(xW,` load the model weights. It only affects the
model\u2019s configuration. Use `),gfe=n(xW,"CODE",{});var Qst=s(gfe);Hzo=r(Qst,"from_pretrained()"),Qst.forEach(t),Uzo=r(xW,"to load the model weights."),xW.forEach(t),Jzo=i(jl),hfe=n(jl,"P",{});var Hst=s(hfe);Yzo=r(Hst,"Examples:"),Hst.forEach(t),Kzo=i(jl),m(py.$$.fragment,jl),jl.forEach(t),Zzo=i(Il),ro=n(Il,"DIV",{class:!0});var ia=s(ro);m(_y.$$.fragment,ia),eWo=i(ia),pfe=n(ia,"P",{});var Ust=s(pfe);oWo=r(Ust,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Ust.forEach(t),rWo=i(ia),_n=n(ia,"P",{});var BM=s(_n);tWo=r(BM,"The model class to instantiate is selected based on the "),_fe=n(BM,"CODE",{});var Jst=s(_fe);aWo=r(Jst,"model_type"),Jst.forEach(t),nWo=r(BM,` property of the config object (either
passed as an argument or loaded from `),ufe=n(BM,"CODE",{});var Yst=s(ufe);sWo=r(Yst,"pretrained_model_name_or_path"),Yst.forEach(t),lWo=r(BM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bfe=n(BM,"CODE",{});var Kst=s(bfe);iWo=r(Kst,"pretrained_model_name_or_path"),Kst.forEach(t),dWo=r(BM,":"),BM.forEach(t),cWo=i(ia),vfe=n(ia,"UL",{});var Zst=s(vfe);e6=n(Zst,"LI",{});var mAe=s(e6);Tfe=n(mAe,"STRONG",{});var elt=s(Tfe);fWo=r(elt,"detr"),elt.forEach(t),mWo=r(mAe," \u2014 "),gq=n(mAe,"A",{href:!0});var olt=s(gq);gWo=r(olt,"DetrForObjectDetection"),olt.forEach(t),hWo=r(mAe," (DETR model)"),mAe.forEach(t),Zst.forEach(t),pWo=i(ia),o6=n(ia,"P",{});var gAe=s(o6);_Wo=r(gAe,"The model is set in evaluation mode by default using "),Ffe=n(gAe,"CODE",{});var rlt=s(Ffe);uWo=r(rlt,"model.eval()"),rlt.forEach(t),bWo=r(gAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cfe=n(gAe,"CODE",{});var tlt=s(Cfe);vWo=r(tlt,"model.train()"),tlt.forEach(t),gAe.forEach(t),TWo=i(ia),Mfe=n(ia,"P",{});var alt=s(Mfe);FWo=r(alt,"Examples:"),alt.forEach(t),CWo=i(ia),m(uy.$$.fragment,ia),ia.forEach(t),Il.forEach(t),Oke=i(d),fc=n(d,"H2",{class:!0});var ZSe=s(fc);r6=n(ZSe,"A",{id:!0,class:!0,href:!0});var nlt=s(r6);Efe=n(nlt,"SPAN",{});var slt=s(Efe);m(by.$$.fragment,slt),slt.forEach(t),nlt.forEach(t),MWo=i(ZSe),yfe=n(ZSe,"SPAN",{});var llt=s(yfe);EWo=r(llt,"AutoModelForImageSegmentation"),llt.forEach(t),ZSe.forEach(t),Gke=i(d),ur=n(d,"DIV",{class:!0});var Dl=s(ur);m(vy.$$.fragment,Dl),yWo=i(Dl),mc=n(Dl,"P",{});var kW=s(mc);wWo=r(kW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),wfe=n(kW,"CODE",{});var ilt=s(wfe);AWo=r(ilt,"from_pretrained()"),ilt.forEach(t),LWo=r(kW,"class method or the "),Afe=n(kW,"CODE",{});var dlt=s(Afe);BWo=r(dlt,"from_config()"),dlt.forEach(t),xWo=r(kW,`class
method.`),kW.forEach(t),kWo=i(Dl),Ty=n(Dl,"P",{});var ePe=s(Ty);RWo=r(ePe,"This class cannot be instantiated directly using "),Lfe=n(ePe,"CODE",{});var clt=s(Lfe);SWo=r(clt,"__init__()"),clt.forEach(t),PWo=r(ePe," (throws an error)."),ePe.forEach(t),$Wo=i(Dl),mt=n(Dl,"DIV",{class:!0});var Nl=s(mt);m(Fy.$$.fragment,Nl),IWo=i(Nl),Bfe=n(Nl,"P",{});var flt=s(Bfe);jWo=r(flt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),flt.forEach(t),DWo=i(Nl),gc=n(Nl,"P",{});var RW=s(gc);NWo=r(RW,`Note:
Loading a model from its configuration file does `),xfe=n(RW,"STRONG",{});var mlt=s(xfe);qWo=r(mlt,"not"),mlt.forEach(t),OWo=r(RW,` load the model weights. It only affects the
model\u2019s configuration. Use `),kfe=n(RW,"CODE",{});var glt=s(kfe);GWo=r(glt,"from_pretrained()"),glt.forEach(t),XWo=r(RW,"to load the model weights."),RW.forEach(t),VWo=i(Nl),Rfe=n(Nl,"P",{});var hlt=s(Rfe);zWo=r(hlt,"Examples:"),hlt.forEach(t),WWo=i(Nl),m(Cy.$$.fragment,Nl),Nl.forEach(t),QWo=i(Dl),to=n(Dl,"DIV",{class:!0});var da=s(to);m(My.$$.fragment,da),HWo=i(da),Sfe=n(da,"P",{});var plt=s(Sfe);UWo=r(plt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),plt.forEach(t),JWo=i(da),un=n(da,"P",{});var xM=s(un);YWo=r(xM,"The model class to instantiate is selected based on the "),Pfe=n(xM,"CODE",{});var _lt=s(Pfe);KWo=r(_lt,"model_type"),_lt.forEach(t),ZWo=r(xM,` property of the config object (either
passed as an argument or loaded from `),$fe=n(xM,"CODE",{});var ult=s($fe);eQo=r(ult,"pretrained_model_name_or_path"),ult.forEach(t),oQo=r(xM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ife=n(xM,"CODE",{});var blt=s(Ife);rQo=r(blt,"pretrained_model_name_or_path"),blt.forEach(t),tQo=r(xM,":"),xM.forEach(t),aQo=i(da),jfe=n(da,"UL",{});var vlt=s(jfe);t6=n(vlt,"LI",{});var hAe=s(t6);Dfe=n(hAe,"STRONG",{});var Tlt=s(Dfe);nQo=r(Tlt,"detr"),Tlt.forEach(t),sQo=r(hAe," \u2014 "),hq=n(hAe,"A",{href:!0});var Flt=s(hq);lQo=r(Flt,"DetrForSegmentation"),Flt.forEach(t),iQo=r(hAe," (DETR model)"),hAe.forEach(t),vlt.forEach(t),dQo=i(da),a6=n(da,"P",{});var pAe=s(a6);cQo=r(pAe,"The model is set in evaluation mode by default using "),Nfe=n(pAe,"CODE",{});var Clt=s(Nfe);fQo=r(Clt,"model.eval()"),Clt.forEach(t),mQo=r(pAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qfe=n(pAe,"CODE",{});var Mlt=s(qfe);gQo=r(Mlt,"model.train()"),Mlt.forEach(t),pAe.forEach(t),hQo=i(da),Ofe=n(da,"P",{});var Elt=s(Ofe);pQo=r(Elt,"Examples:"),Elt.forEach(t),_Qo=i(da),m(Ey.$$.fragment,da),da.forEach(t),Dl.forEach(t),Xke=i(d),hc=n(d,"H2",{class:!0});var oPe=s(hc);n6=n(oPe,"A",{id:!0,class:!0,href:!0});var ylt=s(n6);Gfe=n(ylt,"SPAN",{});var wlt=s(Gfe);m(yy.$$.fragment,wlt),wlt.forEach(t),ylt.forEach(t),uQo=i(oPe),Xfe=n(oPe,"SPAN",{});var Alt=s(Xfe);bQo=r(Alt,"AutoModelForSemanticSegmentation"),Alt.forEach(t),oPe.forEach(t),Vke=i(d),br=n(d,"DIV",{class:!0});var ql=s(br);m(wy.$$.fragment,ql),vQo=i(ql),pc=n(ql,"P",{});var SW=s(pc);TQo=r(SW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Vfe=n(SW,"CODE",{});var Llt=s(Vfe);FQo=r(Llt,"from_pretrained()"),Llt.forEach(t),CQo=r(SW,"class method or the "),zfe=n(SW,"CODE",{});var Blt=s(zfe);MQo=r(Blt,"from_config()"),Blt.forEach(t),EQo=r(SW,`class
method.`),SW.forEach(t),yQo=i(ql),Ay=n(ql,"P",{});var rPe=s(Ay);wQo=r(rPe,"This class cannot be instantiated directly using "),Wfe=n(rPe,"CODE",{});var xlt=s(Wfe);AQo=r(xlt,"__init__()"),xlt.forEach(t),LQo=r(rPe," (throws an error)."),rPe.forEach(t),BQo=i(ql),gt=n(ql,"DIV",{class:!0});var Ol=s(gt);m(Ly.$$.fragment,Ol),xQo=i(Ol),Qfe=n(Ol,"P",{});var klt=s(Qfe);kQo=r(klt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),klt.forEach(t),RQo=i(Ol),_c=n(Ol,"P",{});var PW=s(_c);SQo=r(PW,`Note:
Loading a model from its configuration file does `),Hfe=n(PW,"STRONG",{});var Rlt=s(Hfe);PQo=r(Rlt,"not"),Rlt.forEach(t),$Qo=r(PW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ufe=n(PW,"CODE",{});var Slt=s(Ufe);IQo=r(Slt,"from_pretrained()"),Slt.forEach(t),jQo=r(PW,"to load the model weights."),PW.forEach(t),DQo=i(Ol),Jfe=n(Ol,"P",{});var Plt=s(Jfe);NQo=r(Plt,"Examples:"),Plt.forEach(t),qQo=i(Ol),m(By.$$.fragment,Ol),Ol.forEach(t),OQo=i(ql),ao=n(ql,"DIV",{class:!0});var ca=s(ao);m(xy.$$.fragment,ca),GQo=i(ca),Yfe=n(ca,"P",{});var $lt=s(Yfe);XQo=r($lt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),$lt.forEach(t),VQo=i(ca),bn=n(ca,"P",{});var kM=s(bn);zQo=r(kM,"The model class to instantiate is selected based on the "),Kfe=n(kM,"CODE",{});var Ilt=s(Kfe);WQo=r(Ilt,"model_type"),Ilt.forEach(t),QQo=r(kM,` property of the config object (either
passed as an argument or loaded from `),Zfe=n(kM,"CODE",{});var jlt=s(Zfe);HQo=r(jlt,"pretrained_model_name_or_path"),jlt.forEach(t),UQo=r(kM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eme=n(kM,"CODE",{});var Dlt=s(eme);JQo=r(Dlt,"pretrained_model_name_or_path"),Dlt.forEach(t),YQo=r(kM,":"),kM.forEach(t),KQo=i(ca),ky=n(ca,"UL",{});var tPe=s(ky);s6=n(tPe,"LI",{});var _Ae=s(s6);ome=n(_Ae,"STRONG",{});var Nlt=s(ome);ZQo=r(Nlt,"beit"),Nlt.forEach(t),eHo=r(_Ae," \u2014 "),pq=n(_Ae,"A",{href:!0});var qlt=s(pq);oHo=r(qlt,"BeitForSemanticSegmentation"),qlt.forEach(t),rHo=r(_Ae," (BEiT model)"),_Ae.forEach(t),tHo=i(tPe),l6=n(tPe,"LI",{});var uAe=s(l6);rme=n(uAe,"STRONG",{});var Olt=s(rme);aHo=r(Olt,"segformer"),Olt.forEach(t),nHo=r(uAe," \u2014 "),_q=n(uAe,"A",{href:!0});var Glt=s(_q);sHo=r(Glt,"SegformerForSemanticSegmentation"),Glt.forEach(t),lHo=r(uAe," (SegFormer model)"),uAe.forEach(t),tPe.forEach(t),iHo=i(ca),i6=n(ca,"P",{});var bAe=s(i6);dHo=r(bAe,"The model is set in evaluation mode by default using "),tme=n(bAe,"CODE",{});var Xlt=s(tme);cHo=r(Xlt,"model.eval()"),Xlt.forEach(t),fHo=r(bAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ame=n(bAe,"CODE",{});var Vlt=s(ame);mHo=r(Vlt,"model.train()"),Vlt.forEach(t),bAe.forEach(t),gHo=i(ca),nme=n(ca,"P",{});var zlt=s(nme);hHo=r(zlt,"Examples:"),zlt.forEach(t),pHo=i(ca),m(Ry.$$.fragment,ca),ca.forEach(t),ql.forEach(t),zke=i(d),uc=n(d,"H2",{class:!0});var aPe=s(uc);d6=n(aPe,"A",{id:!0,class:!0,href:!0});var Wlt=s(d6);sme=n(Wlt,"SPAN",{});var Qlt=s(sme);m(Sy.$$.fragment,Qlt),Qlt.forEach(t),Wlt.forEach(t),_Ho=i(aPe),lme=n(aPe,"SPAN",{});var Hlt=s(lme);uHo=r(Hlt,"AutoModelForInstanceSegmentation"),Hlt.forEach(t),aPe.forEach(t),Wke=i(d),vr=n(d,"DIV",{class:!0});var Gl=s(vr);m(Py.$$.fragment,Gl),bHo=i(Gl),bc=n(Gl,"P",{});var $W=s(bc);vHo=r($W,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),ime=n($W,"CODE",{});var Ult=s(ime);THo=r(Ult,"from_pretrained()"),Ult.forEach(t),FHo=r($W,"class method or the "),dme=n($W,"CODE",{});var Jlt=s(dme);CHo=r(Jlt,"from_config()"),Jlt.forEach(t),MHo=r($W,`class
method.`),$W.forEach(t),EHo=i(Gl),$y=n(Gl,"P",{});var nPe=s($y);yHo=r(nPe,"This class cannot be instantiated directly using "),cme=n(nPe,"CODE",{});var Ylt=s(cme);wHo=r(Ylt,"__init__()"),Ylt.forEach(t),AHo=r(nPe," (throws an error)."),nPe.forEach(t),LHo=i(Gl),ht=n(Gl,"DIV",{class:!0});var Xl=s(ht);m(Iy.$$.fragment,Xl),BHo=i(Xl),fme=n(Xl,"P",{});var Klt=s(fme);xHo=r(Klt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Klt.forEach(t),kHo=i(Xl),vc=n(Xl,"P",{});var IW=s(vc);RHo=r(IW,`Note:
Loading a model from its configuration file does `),mme=n(IW,"STRONG",{});var Zlt=s(mme);SHo=r(Zlt,"not"),Zlt.forEach(t),PHo=r(IW,` load the model weights. It only affects the
model\u2019s configuration. Use `),gme=n(IW,"CODE",{});var eit=s(gme);$Ho=r(eit,"from_pretrained()"),eit.forEach(t),IHo=r(IW,"to load the model weights."),IW.forEach(t),jHo=i(Xl),hme=n(Xl,"P",{});var oit=s(hme);DHo=r(oit,"Examples:"),oit.forEach(t),NHo=i(Xl),m(jy.$$.fragment,Xl),Xl.forEach(t),qHo=i(Gl),no=n(Gl,"DIV",{class:!0});var fa=s(no);m(Dy.$$.fragment,fa),OHo=i(fa),pme=n(fa,"P",{});var rit=s(pme);GHo=r(rit,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),rit.forEach(t),XHo=i(fa),vn=n(fa,"P",{});var RM=s(vn);VHo=r(RM,"The model class to instantiate is selected based on the "),_me=n(RM,"CODE",{});var tit=s(_me);zHo=r(tit,"model_type"),tit.forEach(t),WHo=r(RM,` property of the config object (either
passed as an argument or loaded from `),ume=n(RM,"CODE",{});var ait=s(ume);QHo=r(ait,"pretrained_model_name_or_path"),ait.forEach(t),HHo=r(RM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bme=n(RM,"CODE",{});var nit=s(bme);UHo=r(nit,"pretrained_model_name_or_path"),nit.forEach(t),JHo=r(RM,":"),RM.forEach(t),YHo=i(fa),vme=n(fa,"UL",{});var sit=s(vme);c6=n(sit,"LI",{});var vAe=s(c6);Tme=n(vAe,"STRONG",{});var lit=s(Tme);KHo=r(lit,"maskformer"),lit.forEach(t),ZHo=r(vAe," \u2014 "),uq=n(vAe,"A",{href:!0});var iit=s(uq);eUo=r(iit,"MaskFormerForInstanceSegmentation"),iit.forEach(t),oUo=r(vAe," (MaskFormer model)"),vAe.forEach(t),sit.forEach(t),rUo=i(fa),f6=n(fa,"P",{});var TAe=s(f6);tUo=r(TAe,"The model is set in evaluation mode by default using "),Fme=n(TAe,"CODE",{});var dit=s(Fme);aUo=r(dit,"model.eval()"),dit.forEach(t),nUo=r(TAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cme=n(TAe,"CODE",{});var cit=s(Cme);sUo=r(cit,"model.train()"),cit.forEach(t),TAe.forEach(t),lUo=i(fa),Mme=n(fa,"P",{});var fit=s(Mme);iUo=r(fit,"Examples:"),fit.forEach(t),dUo=i(fa),m(Ny.$$.fragment,fa),fa.forEach(t),Gl.forEach(t),Qke=i(d),Tc=n(d,"H2",{class:!0});var sPe=s(Tc);m6=n(sPe,"A",{id:!0,class:!0,href:!0});var mit=s(m6);Eme=n(mit,"SPAN",{});var git=s(Eme);m(qy.$$.fragment,git),git.forEach(t),mit.forEach(t),cUo=i(sPe),yme=n(sPe,"SPAN",{});var hit=s(yme);fUo=r(hit,"TFAutoModel"),hit.forEach(t),sPe.forEach(t),Hke=i(d),Tr=n(d,"DIV",{class:!0});var Vl=s(Tr);m(Oy.$$.fragment,Vl),mUo=i(Vl),Fc=n(Vl,"P",{});var jW=s(Fc);gUo=r(jW,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),wme=n(jW,"CODE",{});var pit=s(wme);hUo=r(pit,"from_pretrained()"),pit.forEach(t),pUo=r(jW,"class method or the "),Ame=n(jW,"CODE",{});var _it=s(Ame);_Uo=r(_it,"from_config()"),_it.forEach(t),uUo=r(jW,`class
method.`),jW.forEach(t),bUo=i(Vl),Gy=n(Vl,"P",{});var lPe=s(Gy);vUo=r(lPe,"This class cannot be instantiated directly using "),Lme=n(lPe,"CODE",{});var uit=s(Lme);TUo=r(uit,"__init__()"),uit.forEach(t),FUo=r(lPe," (throws an error)."),lPe.forEach(t),CUo=i(Vl),pt=n(Vl,"DIV",{class:!0});var zl=s(pt);m(Xy.$$.fragment,zl),MUo=i(zl),Bme=n(zl,"P",{});var bit=s(Bme);EUo=r(bit,"Instantiates one of the base model classes of the library from a configuration."),bit.forEach(t),yUo=i(zl),Cc=n(zl,"P",{});var DW=s(Cc);wUo=r(DW,`Note:
Loading a model from its configuration file does `),xme=n(DW,"STRONG",{});var vit=s(xme);AUo=r(vit,"not"),vit.forEach(t),LUo=r(DW,` load the model weights. It only affects the
model\u2019s configuration. Use `),kme=n(DW,"CODE",{});var Tit=s(kme);BUo=r(Tit,"from_pretrained()"),Tit.forEach(t),xUo=r(DW,"to load the model weights."),DW.forEach(t),kUo=i(zl),Rme=n(zl,"P",{});var Fit=s(Rme);RUo=r(Fit,"Examples:"),Fit.forEach(t),SUo=i(zl),m(Vy.$$.fragment,zl),zl.forEach(t),PUo=i(Vl),ho=n(Vl,"DIV",{class:!0});var ba=s(ho);m(zy.$$.fragment,ba),$Uo=i(ba),Sme=n(ba,"P",{});var Cit=s(Sme);IUo=r(Cit,"Instantiate one of the base model classes of the library from a pretrained model."),Cit.forEach(t),jUo=i(ba),Tn=n(ba,"P",{});var SM=s(Tn);DUo=r(SM,"The model class to instantiate is selected based on the "),Pme=n(SM,"CODE",{});var Mit=s(Pme);NUo=r(Mit,"model_type"),Mit.forEach(t),qUo=r(SM,` property of the config object (either
passed as an argument or loaded from `),$me=n(SM,"CODE",{});var Eit=s($me);OUo=r(Eit,"pretrained_model_name_or_path"),Eit.forEach(t),GUo=r(SM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ime=n(SM,"CODE",{});var yit=s(Ime);XUo=r(yit,"pretrained_model_name_or_path"),yit.forEach(t),VUo=r(SM,":"),SM.forEach(t),zUo=i(ba),B=n(ba,"UL",{});var x=s(B);g6=n(x,"LI",{});var FAe=s(g6);jme=n(FAe,"STRONG",{});var wit=s(jme);WUo=r(wit,"albert"),wit.forEach(t),QUo=r(FAe," \u2014 "),bq=n(FAe,"A",{href:!0});var Ait=s(bq);HUo=r(Ait,"TFAlbertModel"),Ait.forEach(t),UUo=r(FAe," (ALBERT model)"),FAe.forEach(t),JUo=i(x),h6=n(x,"LI",{});var CAe=s(h6);Dme=n(CAe,"STRONG",{});var Lit=s(Dme);YUo=r(Lit,"bart"),Lit.forEach(t),KUo=r(CAe," \u2014 "),vq=n(CAe,"A",{href:!0});var Bit=s(vq);ZUo=r(Bit,"TFBartModel"),Bit.forEach(t),eJo=r(CAe," (BART model)"),CAe.forEach(t),oJo=i(x),p6=n(x,"LI",{});var MAe=s(p6);Nme=n(MAe,"STRONG",{});var xit=s(Nme);rJo=r(xit,"bert"),xit.forEach(t),tJo=r(MAe," \u2014 "),Tq=n(MAe,"A",{href:!0});var kit=s(Tq);aJo=r(kit,"TFBertModel"),kit.forEach(t),nJo=r(MAe," (BERT model)"),MAe.forEach(t),sJo=i(x),_6=n(x,"LI",{});var EAe=s(_6);qme=n(EAe,"STRONG",{});var Rit=s(qme);lJo=r(Rit,"blenderbot"),Rit.forEach(t),iJo=r(EAe," \u2014 "),Fq=n(EAe,"A",{href:!0});var Sit=s(Fq);dJo=r(Sit,"TFBlenderbotModel"),Sit.forEach(t),cJo=r(EAe," (Blenderbot model)"),EAe.forEach(t),fJo=i(x),u6=n(x,"LI",{});var yAe=s(u6);Ome=n(yAe,"STRONG",{});var Pit=s(Ome);mJo=r(Pit,"blenderbot-small"),Pit.forEach(t),gJo=r(yAe," \u2014 "),Cq=n(yAe,"A",{href:!0});var $it=s(Cq);hJo=r($it,"TFBlenderbotSmallModel"),$it.forEach(t),pJo=r(yAe," (BlenderbotSmall model)"),yAe.forEach(t),_Jo=i(x),b6=n(x,"LI",{});var wAe=s(b6);Gme=n(wAe,"STRONG",{});var Iit=s(Gme);uJo=r(Iit,"camembert"),Iit.forEach(t),bJo=r(wAe," \u2014 "),Mq=n(wAe,"A",{href:!0});var jit=s(Mq);vJo=r(jit,"TFCamembertModel"),jit.forEach(t),TJo=r(wAe," (CamemBERT model)"),wAe.forEach(t),FJo=i(x),v6=n(x,"LI",{});var AAe=s(v6);Xme=n(AAe,"STRONG",{});var Dit=s(Xme);CJo=r(Dit,"clip"),Dit.forEach(t),MJo=r(AAe," \u2014 "),Eq=n(AAe,"A",{href:!0});var Nit=s(Eq);EJo=r(Nit,"TFCLIPModel"),Nit.forEach(t),yJo=r(AAe," (CLIP model)"),AAe.forEach(t),wJo=i(x),T6=n(x,"LI",{});var LAe=s(T6);Vme=n(LAe,"STRONG",{});var qit=s(Vme);AJo=r(qit,"convbert"),qit.forEach(t),LJo=r(LAe," \u2014 "),yq=n(LAe,"A",{href:!0});var Oit=s(yq);BJo=r(Oit,"TFConvBertModel"),Oit.forEach(t),xJo=r(LAe," (ConvBERT model)"),LAe.forEach(t),kJo=i(x),F6=n(x,"LI",{});var BAe=s(F6);zme=n(BAe,"STRONG",{});var Git=s(zme);RJo=r(Git,"convnext"),Git.forEach(t),SJo=r(BAe," \u2014 "),wq=n(BAe,"A",{href:!0});var Xit=s(wq);PJo=r(Xit,"TFConvNextModel"),Xit.forEach(t),$Jo=r(BAe," (ConvNext model)"),BAe.forEach(t),IJo=i(x),C6=n(x,"LI",{});var xAe=s(C6);Wme=n(xAe,"STRONG",{});var Vit=s(Wme);jJo=r(Vit,"ctrl"),Vit.forEach(t),DJo=r(xAe," \u2014 "),Aq=n(xAe,"A",{href:!0});var zit=s(Aq);NJo=r(zit,"TFCTRLModel"),zit.forEach(t),qJo=r(xAe," (CTRL model)"),xAe.forEach(t),OJo=i(x),M6=n(x,"LI",{});var kAe=s(M6);Qme=n(kAe,"STRONG",{});var Wit=s(Qme);GJo=r(Wit,"deberta"),Wit.forEach(t),XJo=r(kAe," \u2014 "),Lq=n(kAe,"A",{href:!0});var Qit=s(Lq);VJo=r(Qit,"TFDebertaModel"),Qit.forEach(t),zJo=r(kAe," (DeBERTa model)"),kAe.forEach(t),WJo=i(x),E6=n(x,"LI",{});var RAe=s(E6);Hme=n(RAe,"STRONG",{});var Hit=s(Hme);QJo=r(Hit,"deberta-v2"),Hit.forEach(t),HJo=r(RAe," \u2014 "),Bq=n(RAe,"A",{href:!0});var Uit=s(Bq);UJo=r(Uit,"TFDebertaV2Model"),Uit.forEach(t),JJo=r(RAe," (DeBERTa-v2 model)"),RAe.forEach(t),YJo=i(x),y6=n(x,"LI",{});var SAe=s(y6);Ume=n(SAe,"STRONG",{});var Jit=s(Ume);KJo=r(Jit,"distilbert"),Jit.forEach(t),ZJo=r(SAe," \u2014 "),xq=n(SAe,"A",{href:!0});var Yit=s(xq);eYo=r(Yit,"TFDistilBertModel"),Yit.forEach(t),oYo=r(SAe," (DistilBERT model)"),SAe.forEach(t),rYo=i(x),w6=n(x,"LI",{});var PAe=s(w6);Jme=n(PAe,"STRONG",{});var Kit=s(Jme);tYo=r(Kit,"dpr"),Kit.forEach(t),aYo=r(PAe," \u2014 "),kq=n(PAe,"A",{href:!0});var Zit=s(kq);nYo=r(Zit,"TFDPRQuestionEncoder"),Zit.forEach(t),sYo=r(PAe," (DPR model)"),PAe.forEach(t),lYo=i(x),A6=n(x,"LI",{});var $Ae=s(A6);Yme=n($Ae,"STRONG",{});var edt=s(Yme);iYo=r(edt,"electra"),edt.forEach(t),dYo=r($Ae," \u2014 "),Rq=n($Ae,"A",{href:!0});var odt=s(Rq);cYo=r(odt,"TFElectraModel"),odt.forEach(t),fYo=r($Ae," (ELECTRA model)"),$Ae.forEach(t),mYo=i(x),L6=n(x,"LI",{});var IAe=s(L6);Kme=n(IAe,"STRONG",{});var rdt=s(Kme);gYo=r(rdt,"flaubert"),rdt.forEach(t),hYo=r(IAe," \u2014 "),Sq=n(IAe,"A",{href:!0});var tdt=s(Sq);pYo=r(tdt,"TFFlaubertModel"),tdt.forEach(t),_Yo=r(IAe," (FlauBERT model)"),IAe.forEach(t),uYo=i(x),Ws=n(x,"LI",{});var a9=s(Ws);Zme=n(a9,"STRONG",{});var adt=s(Zme);bYo=r(adt,"funnel"),adt.forEach(t),vYo=r(a9," \u2014 "),Pq=n(a9,"A",{href:!0});var ndt=s(Pq);TYo=r(ndt,"TFFunnelModel"),ndt.forEach(t),FYo=r(a9," or "),$q=n(a9,"A",{href:!0});var sdt=s($q);CYo=r(sdt,"TFFunnelBaseModel"),sdt.forEach(t),MYo=r(a9," (Funnel Transformer model)"),a9.forEach(t),EYo=i(x),B6=n(x,"LI",{});var jAe=s(B6);ege=n(jAe,"STRONG",{});var ldt=s(ege);yYo=r(ldt,"gpt2"),ldt.forEach(t),wYo=r(jAe," \u2014 "),Iq=n(jAe,"A",{href:!0});var idt=s(Iq);AYo=r(idt,"TFGPT2Model"),idt.forEach(t),LYo=r(jAe," (OpenAI GPT-2 model)"),jAe.forEach(t),BYo=i(x),x6=n(x,"LI",{});var DAe=s(x6);oge=n(DAe,"STRONG",{});var ddt=s(oge);xYo=r(ddt,"hubert"),ddt.forEach(t),kYo=r(DAe," \u2014 "),jq=n(DAe,"A",{href:!0});var cdt=s(jq);RYo=r(cdt,"TFHubertModel"),cdt.forEach(t),SYo=r(DAe," (Hubert model)"),DAe.forEach(t),PYo=i(x),k6=n(x,"LI",{});var NAe=s(k6);rge=n(NAe,"STRONG",{});var fdt=s(rge);$Yo=r(fdt,"layoutlm"),fdt.forEach(t),IYo=r(NAe," \u2014 "),Dq=n(NAe,"A",{href:!0});var mdt=s(Dq);jYo=r(mdt,"TFLayoutLMModel"),mdt.forEach(t),DYo=r(NAe," (LayoutLM model)"),NAe.forEach(t),NYo=i(x),R6=n(x,"LI",{});var qAe=s(R6);tge=n(qAe,"STRONG",{});var gdt=s(tge);qYo=r(gdt,"led"),gdt.forEach(t),OYo=r(qAe," \u2014 "),Nq=n(qAe,"A",{href:!0});var hdt=s(Nq);GYo=r(hdt,"TFLEDModel"),hdt.forEach(t),XYo=r(qAe," (LED model)"),qAe.forEach(t),VYo=i(x),S6=n(x,"LI",{});var OAe=s(S6);age=n(OAe,"STRONG",{});var pdt=s(age);zYo=r(pdt,"longformer"),pdt.forEach(t),WYo=r(OAe," \u2014 "),qq=n(OAe,"A",{href:!0});var _dt=s(qq);QYo=r(_dt,"TFLongformerModel"),_dt.forEach(t),HYo=r(OAe," (Longformer model)"),OAe.forEach(t),UYo=i(x),P6=n(x,"LI",{});var GAe=s(P6);nge=n(GAe,"STRONG",{});var udt=s(nge);JYo=r(udt,"lxmert"),udt.forEach(t),YYo=r(GAe," \u2014 "),Oq=n(GAe,"A",{href:!0});var bdt=s(Oq);KYo=r(bdt,"TFLxmertModel"),bdt.forEach(t),ZYo=r(GAe," (LXMERT model)"),GAe.forEach(t),eKo=i(x),$6=n(x,"LI",{});var XAe=s($6);sge=n(XAe,"STRONG",{});var vdt=s(sge);oKo=r(vdt,"marian"),vdt.forEach(t),rKo=r(XAe," \u2014 "),Gq=n(XAe,"A",{href:!0});var Tdt=s(Gq);tKo=r(Tdt,"TFMarianModel"),Tdt.forEach(t),aKo=r(XAe," (Marian model)"),XAe.forEach(t),nKo=i(x),I6=n(x,"LI",{});var VAe=s(I6);lge=n(VAe,"STRONG",{});var Fdt=s(lge);sKo=r(Fdt,"mbart"),Fdt.forEach(t),lKo=r(VAe," \u2014 "),Xq=n(VAe,"A",{href:!0});var Cdt=s(Xq);iKo=r(Cdt,"TFMBartModel"),Cdt.forEach(t),dKo=r(VAe," (mBART model)"),VAe.forEach(t),cKo=i(x),j6=n(x,"LI",{});var zAe=s(j6);ige=n(zAe,"STRONG",{});var Mdt=s(ige);fKo=r(Mdt,"mobilebert"),Mdt.forEach(t),mKo=r(zAe," \u2014 "),Vq=n(zAe,"A",{href:!0});var Edt=s(Vq);gKo=r(Edt,"TFMobileBertModel"),Edt.forEach(t),hKo=r(zAe," (MobileBERT model)"),zAe.forEach(t),pKo=i(x),D6=n(x,"LI",{});var WAe=s(D6);dge=n(WAe,"STRONG",{});var ydt=s(dge);_Ko=r(ydt,"mpnet"),ydt.forEach(t),uKo=r(WAe," \u2014 "),zq=n(WAe,"A",{href:!0});var wdt=s(zq);bKo=r(wdt,"TFMPNetModel"),wdt.forEach(t),vKo=r(WAe," (MPNet model)"),WAe.forEach(t),TKo=i(x),N6=n(x,"LI",{});var QAe=s(N6);cge=n(QAe,"STRONG",{});var Adt=s(cge);FKo=r(Adt,"mt5"),Adt.forEach(t),CKo=r(QAe," \u2014 "),Wq=n(QAe,"A",{href:!0});var Ldt=s(Wq);MKo=r(Ldt,"TFMT5Model"),Ldt.forEach(t),EKo=r(QAe," (mT5 model)"),QAe.forEach(t),yKo=i(x),q6=n(x,"LI",{});var HAe=s(q6);fge=n(HAe,"STRONG",{});var Bdt=s(fge);wKo=r(Bdt,"openai-gpt"),Bdt.forEach(t),AKo=r(HAe," \u2014 "),Qq=n(HAe,"A",{href:!0});var xdt=s(Qq);LKo=r(xdt,"TFOpenAIGPTModel"),xdt.forEach(t),BKo=r(HAe," (OpenAI GPT model)"),HAe.forEach(t),xKo=i(x),O6=n(x,"LI",{});var UAe=s(O6);mge=n(UAe,"STRONG",{});var kdt=s(mge);kKo=r(kdt,"pegasus"),kdt.forEach(t),RKo=r(UAe," \u2014 "),Hq=n(UAe,"A",{href:!0});var Rdt=s(Hq);SKo=r(Rdt,"TFPegasusModel"),Rdt.forEach(t),PKo=r(UAe," (Pegasus model)"),UAe.forEach(t),$Ko=i(x),G6=n(x,"LI",{});var JAe=s(G6);gge=n(JAe,"STRONG",{});var Sdt=s(gge);IKo=r(Sdt,"rembert"),Sdt.forEach(t),jKo=r(JAe," \u2014 "),Uq=n(JAe,"A",{href:!0});var Pdt=s(Uq);DKo=r(Pdt,"TFRemBertModel"),Pdt.forEach(t),NKo=r(JAe," (RemBERT model)"),JAe.forEach(t),qKo=i(x),X6=n(x,"LI",{});var YAe=s(X6);hge=n(YAe,"STRONG",{});var $dt=s(hge);OKo=r($dt,"roberta"),$dt.forEach(t),GKo=r(YAe," \u2014 "),Jq=n(YAe,"A",{href:!0});var Idt=s(Jq);XKo=r(Idt,"TFRobertaModel"),Idt.forEach(t),VKo=r(YAe," (RoBERTa model)"),YAe.forEach(t),zKo=i(x),V6=n(x,"LI",{});var KAe=s(V6);pge=n(KAe,"STRONG",{});var jdt=s(pge);WKo=r(jdt,"roformer"),jdt.forEach(t),QKo=r(KAe," \u2014 "),Yq=n(KAe,"A",{href:!0});var Ddt=s(Yq);HKo=r(Ddt,"TFRoFormerModel"),Ddt.forEach(t),UKo=r(KAe," (RoFormer model)"),KAe.forEach(t),JKo=i(x),z6=n(x,"LI",{});var ZAe=s(z6);_ge=n(ZAe,"STRONG",{});var Ndt=s(_ge);YKo=r(Ndt,"speech_to_text"),Ndt.forEach(t),KKo=r(ZAe," \u2014 "),Kq=n(ZAe,"A",{href:!0});var qdt=s(Kq);ZKo=r(qdt,"TFSpeech2TextModel"),qdt.forEach(t),eZo=r(ZAe," (Speech2Text model)"),ZAe.forEach(t),oZo=i(x),W6=n(x,"LI",{});var eLe=s(W6);uge=n(eLe,"STRONG",{});var Odt=s(uge);rZo=r(Odt,"t5"),Odt.forEach(t),tZo=r(eLe," \u2014 "),Zq=n(eLe,"A",{href:!0});var Gdt=s(Zq);aZo=r(Gdt,"TFT5Model"),Gdt.forEach(t),nZo=r(eLe," (T5 model)"),eLe.forEach(t),sZo=i(x),Q6=n(x,"LI",{});var oLe=s(Q6);bge=n(oLe,"STRONG",{});var Xdt=s(bge);lZo=r(Xdt,"tapas"),Xdt.forEach(t),iZo=r(oLe," \u2014 "),eO=n(oLe,"A",{href:!0});var Vdt=s(eO);dZo=r(Vdt,"TFTapasModel"),Vdt.forEach(t),cZo=r(oLe," (TAPAS model)"),oLe.forEach(t),fZo=i(x),H6=n(x,"LI",{});var rLe=s(H6);vge=n(rLe,"STRONG",{});var zdt=s(vge);mZo=r(zdt,"transfo-xl"),zdt.forEach(t),gZo=r(rLe," \u2014 "),oO=n(rLe,"A",{href:!0});var Wdt=s(oO);hZo=r(Wdt,"TFTransfoXLModel"),Wdt.forEach(t),pZo=r(rLe," (Transformer-XL model)"),rLe.forEach(t),_Zo=i(x),U6=n(x,"LI",{});var tLe=s(U6);Tge=n(tLe,"STRONG",{});var Qdt=s(Tge);uZo=r(Qdt,"vit"),Qdt.forEach(t),bZo=r(tLe," \u2014 "),rO=n(tLe,"A",{href:!0});var Hdt=s(rO);vZo=r(Hdt,"TFViTModel"),Hdt.forEach(t),TZo=r(tLe," (ViT model)"),tLe.forEach(t),FZo=i(x),J6=n(x,"LI",{});var aLe=s(J6);Fge=n(aLe,"STRONG",{});var Udt=s(Fge);CZo=r(Udt,"wav2vec2"),Udt.forEach(t),MZo=r(aLe," \u2014 "),tO=n(aLe,"A",{href:!0});var Jdt=s(tO);EZo=r(Jdt,"TFWav2Vec2Model"),Jdt.forEach(t),yZo=r(aLe," (Wav2Vec2 model)"),aLe.forEach(t),wZo=i(x),Y6=n(x,"LI",{});var nLe=s(Y6);Cge=n(nLe,"STRONG",{});var Ydt=s(Cge);AZo=r(Ydt,"xlm"),Ydt.forEach(t),LZo=r(nLe," \u2014 "),aO=n(nLe,"A",{href:!0});var Kdt=s(aO);BZo=r(Kdt,"TFXLMModel"),Kdt.forEach(t),xZo=r(nLe," (XLM model)"),nLe.forEach(t),kZo=i(x),K6=n(x,"LI",{});var sLe=s(K6);Mge=n(sLe,"STRONG",{});var Zdt=s(Mge);RZo=r(Zdt,"xlm-roberta"),Zdt.forEach(t),SZo=r(sLe," \u2014 "),nO=n(sLe,"A",{href:!0});var ect=s(nO);PZo=r(ect,"TFXLMRobertaModel"),ect.forEach(t),$Zo=r(sLe," (XLM-RoBERTa model)"),sLe.forEach(t),IZo=i(x),Z6=n(x,"LI",{});var lLe=s(Z6);Ege=n(lLe,"STRONG",{});var oct=s(Ege);jZo=r(oct,"xlnet"),oct.forEach(t),DZo=r(lLe," \u2014 "),sO=n(lLe,"A",{href:!0});var rct=s(sO);NZo=r(rct,"TFXLNetModel"),rct.forEach(t),qZo=r(lLe," (XLNet model)"),lLe.forEach(t),x.forEach(t),OZo=i(ba),yge=n(ba,"P",{});var tct=s(yge);GZo=r(tct,"Examples:"),tct.forEach(t),XZo=i(ba),m(Wy.$$.fragment,ba),ba.forEach(t),Vl.forEach(t),Uke=i(d),Mc=n(d,"H2",{class:!0});var iPe=s(Mc);e0=n(iPe,"A",{id:!0,class:!0,href:!0});var act=s(e0);wge=n(act,"SPAN",{});var nct=s(wge);m(Qy.$$.fragment,nct),nct.forEach(t),act.forEach(t),VZo=i(iPe),Age=n(iPe,"SPAN",{});var sct=s(Age);zZo=r(sct,"TFAutoModelForPreTraining"),sct.forEach(t),iPe.forEach(t),Jke=i(d),Fr=n(d,"DIV",{class:!0});var Wl=s(Fr);m(Hy.$$.fragment,Wl),WZo=i(Wl),Ec=n(Wl,"P",{});var NW=s(Ec);QZo=r(NW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Lge=n(NW,"CODE",{});var lct=s(Lge);HZo=r(lct,"from_pretrained()"),lct.forEach(t),UZo=r(NW,"class method or the "),Bge=n(NW,"CODE",{});var ict=s(Bge);JZo=r(ict,"from_config()"),ict.forEach(t),YZo=r(NW,`class
method.`),NW.forEach(t),KZo=i(Wl),Uy=n(Wl,"P",{});var dPe=s(Uy);ZZo=r(dPe,"This class cannot be instantiated directly using "),xge=n(dPe,"CODE",{});var dct=s(xge);eer=r(dct,"__init__()"),dct.forEach(t),oer=r(dPe," (throws an error)."),dPe.forEach(t),rer=i(Wl),_t=n(Wl,"DIV",{class:!0});var Ql=s(_t);m(Jy.$$.fragment,Ql),ter=i(Ql),kge=n(Ql,"P",{});var cct=s(kge);aer=r(cct,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),cct.forEach(t),ner=i(Ql),yc=n(Ql,"P",{});var qW=s(yc);ser=r(qW,`Note:
Loading a model from its configuration file does `),Rge=n(qW,"STRONG",{});var fct=s(Rge);ler=r(fct,"not"),fct.forEach(t),ier=r(qW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Sge=n(qW,"CODE",{});var mct=s(Sge);der=r(mct,"from_pretrained()"),mct.forEach(t),cer=r(qW,"to load the model weights."),qW.forEach(t),fer=i(Ql),Pge=n(Ql,"P",{});var gct=s(Pge);mer=r(gct,"Examples:"),gct.forEach(t),ger=i(Ql),m(Yy.$$.fragment,Ql),Ql.forEach(t),her=i(Wl),po=n(Wl,"DIV",{class:!0});var va=s(po);m(Ky.$$.fragment,va),per=i(va),$ge=n(va,"P",{});var hct=s($ge);_er=r(hct,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),hct.forEach(t),uer=i(va),Fn=n(va,"P",{});var PM=s(Fn);ber=r(PM,"The model class to instantiate is selected based on the "),Ige=n(PM,"CODE",{});var pct=s(Ige);ver=r(pct,"model_type"),pct.forEach(t),Ter=r(PM,` property of the config object (either
passed as an argument or loaded from `),jge=n(PM,"CODE",{});var _ct=s(jge);Fer=r(_ct,"pretrained_model_name_or_path"),_ct.forEach(t),Cer=r(PM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dge=n(PM,"CODE",{});var uct=s(Dge);Mer=r(uct,"pretrained_model_name_or_path"),uct.forEach(t),Eer=r(PM,":"),PM.forEach(t),yer=i(va),H=n(va,"UL",{});var U=s(H);o0=n(U,"LI",{});var iLe=s(o0);Nge=n(iLe,"STRONG",{});var bct=s(Nge);wer=r(bct,"albert"),bct.forEach(t),Aer=r(iLe," \u2014 "),lO=n(iLe,"A",{href:!0});var vct=s(lO);Ler=r(vct,"TFAlbertForPreTraining"),vct.forEach(t),Ber=r(iLe," (ALBERT model)"),iLe.forEach(t),xer=i(U),r0=n(U,"LI",{});var dLe=s(r0);qge=n(dLe,"STRONG",{});var Tct=s(qge);ker=r(Tct,"bart"),Tct.forEach(t),Rer=r(dLe," \u2014 "),iO=n(dLe,"A",{href:!0});var Fct=s(iO);Ser=r(Fct,"TFBartForConditionalGeneration"),Fct.forEach(t),Per=r(dLe," (BART model)"),dLe.forEach(t),$er=i(U),t0=n(U,"LI",{});var cLe=s(t0);Oge=n(cLe,"STRONG",{});var Cct=s(Oge);Ier=r(Cct,"bert"),Cct.forEach(t),jer=r(cLe," \u2014 "),dO=n(cLe,"A",{href:!0});var Mct=s(dO);Der=r(Mct,"TFBertForPreTraining"),Mct.forEach(t),Ner=r(cLe," (BERT model)"),cLe.forEach(t),qer=i(U),a0=n(U,"LI",{});var fLe=s(a0);Gge=n(fLe,"STRONG",{});var Ect=s(Gge);Oer=r(Ect,"camembert"),Ect.forEach(t),Ger=r(fLe," \u2014 "),cO=n(fLe,"A",{href:!0});var yct=s(cO);Xer=r(yct,"TFCamembertForMaskedLM"),yct.forEach(t),Ver=r(fLe," (CamemBERT model)"),fLe.forEach(t),zer=i(U),n0=n(U,"LI",{});var mLe=s(n0);Xge=n(mLe,"STRONG",{});var wct=s(Xge);Wer=r(wct,"ctrl"),wct.forEach(t),Qer=r(mLe," \u2014 "),fO=n(mLe,"A",{href:!0});var Act=s(fO);Her=r(Act,"TFCTRLLMHeadModel"),Act.forEach(t),Uer=r(mLe," (CTRL model)"),mLe.forEach(t),Jer=i(U),s0=n(U,"LI",{});var gLe=s(s0);Vge=n(gLe,"STRONG",{});var Lct=s(Vge);Yer=r(Lct,"distilbert"),Lct.forEach(t),Ker=r(gLe," \u2014 "),mO=n(gLe,"A",{href:!0});var Bct=s(mO);Zer=r(Bct,"TFDistilBertForMaskedLM"),Bct.forEach(t),eor=r(gLe," (DistilBERT model)"),gLe.forEach(t),oor=i(U),l0=n(U,"LI",{});var hLe=s(l0);zge=n(hLe,"STRONG",{});var xct=s(zge);ror=r(xct,"electra"),xct.forEach(t),tor=r(hLe," \u2014 "),gO=n(hLe,"A",{href:!0});var kct=s(gO);aor=r(kct,"TFElectraForPreTraining"),kct.forEach(t),nor=r(hLe," (ELECTRA model)"),hLe.forEach(t),sor=i(U),i0=n(U,"LI",{});var pLe=s(i0);Wge=n(pLe,"STRONG",{});var Rct=s(Wge);lor=r(Rct,"flaubert"),Rct.forEach(t),ior=r(pLe," \u2014 "),hO=n(pLe,"A",{href:!0});var Sct=s(hO);dor=r(Sct,"TFFlaubertWithLMHeadModel"),Sct.forEach(t),cor=r(pLe," (FlauBERT model)"),pLe.forEach(t),mor=i(U),d0=n(U,"LI",{});var _Le=s(d0);Qge=n(_Le,"STRONG",{});var Pct=s(Qge);gor=r(Pct,"funnel"),Pct.forEach(t),hor=r(_Le," \u2014 "),pO=n(_Le,"A",{href:!0});var $ct=s(pO);por=r($ct,"TFFunnelForPreTraining"),$ct.forEach(t),_or=r(_Le," (Funnel Transformer model)"),_Le.forEach(t),uor=i(U),c0=n(U,"LI",{});var uLe=s(c0);Hge=n(uLe,"STRONG",{});var Ict=s(Hge);bor=r(Ict,"gpt2"),Ict.forEach(t),vor=r(uLe," \u2014 "),_O=n(uLe,"A",{href:!0});var jct=s(_O);Tor=r(jct,"TFGPT2LMHeadModel"),jct.forEach(t),For=r(uLe," (OpenAI GPT-2 model)"),uLe.forEach(t),Cor=i(U),f0=n(U,"LI",{});var bLe=s(f0);Uge=n(bLe,"STRONG",{});var Dct=s(Uge);Mor=r(Dct,"layoutlm"),Dct.forEach(t),Eor=r(bLe," \u2014 "),uO=n(bLe,"A",{href:!0});var Nct=s(uO);yor=r(Nct,"TFLayoutLMForMaskedLM"),Nct.forEach(t),wor=r(bLe," (LayoutLM model)"),bLe.forEach(t),Aor=i(U),m0=n(U,"LI",{});var vLe=s(m0);Jge=n(vLe,"STRONG",{});var qct=s(Jge);Lor=r(qct,"lxmert"),qct.forEach(t),Bor=r(vLe," \u2014 "),bO=n(vLe,"A",{href:!0});var Oct=s(bO);xor=r(Oct,"TFLxmertForPreTraining"),Oct.forEach(t),kor=r(vLe," (LXMERT model)"),vLe.forEach(t),Ror=i(U),g0=n(U,"LI",{});var TLe=s(g0);Yge=n(TLe,"STRONG",{});var Gct=s(Yge);Sor=r(Gct,"mobilebert"),Gct.forEach(t),Por=r(TLe," \u2014 "),vO=n(TLe,"A",{href:!0});var Xct=s(vO);$or=r(Xct,"TFMobileBertForPreTraining"),Xct.forEach(t),Ior=r(TLe," (MobileBERT model)"),TLe.forEach(t),jor=i(U),h0=n(U,"LI",{});var FLe=s(h0);Kge=n(FLe,"STRONG",{});var Vct=s(Kge);Dor=r(Vct,"mpnet"),Vct.forEach(t),Nor=r(FLe," \u2014 "),TO=n(FLe,"A",{href:!0});var zct=s(TO);qor=r(zct,"TFMPNetForMaskedLM"),zct.forEach(t),Oor=r(FLe," (MPNet model)"),FLe.forEach(t),Gor=i(U),p0=n(U,"LI",{});var CLe=s(p0);Zge=n(CLe,"STRONG",{});var Wct=s(Zge);Xor=r(Wct,"openai-gpt"),Wct.forEach(t),Vor=r(CLe," \u2014 "),FO=n(CLe,"A",{href:!0});var Qct=s(FO);zor=r(Qct,"TFOpenAIGPTLMHeadModel"),Qct.forEach(t),Wor=r(CLe," (OpenAI GPT model)"),CLe.forEach(t),Qor=i(U),_0=n(U,"LI",{});var MLe=s(_0);ehe=n(MLe,"STRONG",{});var Hct=s(ehe);Hor=r(Hct,"roberta"),Hct.forEach(t),Uor=r(MLe," \u2014 "),CO=n(MLe,"A",{href:!0});var Uct=s(CO);Jor=r(Uct,"TFRobertaForMaskedLM"),Uct.forEach(t),Yor=r(MLe," (RoBERTa model)"),MLe.forEach(t),Kor=i(U),u0=n(U,"LI",{});var ELe=s(u0);ohe=n(ELe,"STRONG",{});var Jct=s(ohe);Zor=r(Jct,"t5"),Jct.forEach(t),err=r(ELe," \u2014 "),MO=n(ELe,"A",{href:!0});var Yct=s(MO);orr=r(Yct,"TFT5ForConditionalGeneration"),Yct.forEach(t),rrr=r(ELe," (T5 model)"),ELe.forEach(t),trr=i(U),b0=n(U,"LI",{});var yLe=s(b0);rhe=n(yLe,"STRONG",{});var Kct=s(rhe);arr=r(Kct,"tapas"),Kct.forEach(t),nrr=r(yLe," \u2014 "),EO=n(yLe,"A",{href:!0});var Zct=s(EO);srr=r(Zct,"TFTapasForMaskedLM"),Zct.forEach(t),lrr=r(yLe," (TAPAS model)"),yLe.forEach(t),irr=i(U),v0=n(U,"LI",{});var wLe=s(v0);the=n(wLe,"STRONG",{});var eft=s(the);drr=r(eft,"transfo-xl"),eft.forEach(t),crr=r(wLe," \u2014 "),yO=n(wLe,"A",{href:!0});var oft=s(yO);frr=r(oft,"TFTransfoXLLMHeadModel"),oft.forEach(t),mrr=r(wLe," (Transformer-XL model)"),wLe.forEach(t),grr=i(U),T0=n(U,"LI",{});var ALe=s(T0);ahe=n(ALe,"STRONG",{});var rft=s(ahe);hrr=r(rft,"xlm"),rft.forEach(t),prr=r(ALe," \u2014 "),wO=n(ALe,"A",{href:!0});var tft=s(wO);_rr=r(tft,"TFXLMWithLMHeadModel"),tft.forEach(t),urr=r(ALe," (XLM model)"),ALe.forEach(t),brr=i(U),F0=n(U,"LI",{});var LLe=s(F0);nhe=n(LLe,"STRONG",{});var aft=s(nhe);vrr=r(aft,"xlm-roberta"),aft.forEach(t),Trr=r(LLe," \u2014 "),AO=n(LLe,"A",{href:!0});var nft=s(AO);Frr=r(nft,"TFXLMRobertaForMaskedLM"),nft.forEach(t),Crr=r(LLe," (XLM-RoBERTa model)"),LLe.forEach(t),Mrr=i(U),C0=n(U,"LI",{});var BLe=s(C0);she=n(BLe,"STRONG",{});var sft=s(she);Err=r(sft,"xlnet"),sft.forEach(t),yrr=r(BLe," \u2014 "),LO=n(BLe,"A",{href:!0});var lft=s(LO);wrr=r(lft,"TFXLNetLMHeadModel"),lft.forEach(t),Arr=r(BLe," (XLNet model)"),BLe.forEach(t),U.forEach(t),Lrr=i(va),lhe=n(va,"P",{});var ift=s(lhe);Brr=r(ift,"Examples:"),ift.forEach(t),xrr=i(va),m(Zy.$$.fragment,va),va.forEach(t),Wl.forEach(t),Yke=i(d),wc=n(d,"H2",{class:!0});var cPe=s(wc);M0=n(cPe,"A",{id:!0,class:!0,href:!0});var dft=s(M0);ihe=n(dft,"SPAN",{});var cft=s(ihe);m(ew.$$.fragment,cft),cft.forEach(t),dft.forEach(t),krr=i(cPe),dhe=n(cPe,"SPAN",{});var fft=s(dhe);Rrr=r(fft,"TFAutoModelForCausalLM"),fft.forEach(t),cPe.forEach(t),Kke=i(d),Cr=n(d,"DIV",{class:!0});var Hl=s(Cr);m(ow.$$.fragment,Hl),Srr=i(Hl),Ac=n(Hl,"P",{});var OW=s(Ac);Prr=r(OW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),che=n(OW,"CODE",{});var mft=s(che);$rr=r(mft,"from_pretrained()"),mft.forEach(t),Irr=r(OW,"class method or the "),fhe=n(OW,"CODE",{});var gft=s(fhe);jrr=r(gft,"from_config()"),gft.forEach(t),Drr=r(OW,`class
method.`),OW.forEach(t),Nrr=i(Hl),rw=n(Hl,"P",{});var fPe=s(rw);qrr=r(fPe,"This class cannot be instantiated directly using "),mhe=n(fPe,"CODE",{});var hft=s(mhe);Orr=r(hft,"__init__()"),hft.forEach(t),Grr=r(fPe," (throws an error)."),fPe.forEach(t),Xrr=i(Hl),ut=n(Hl,"DIV",{class:!0});var Ul=s(ut);m(tw.$$.fragment,Ul),Vrr=i(Ul),ghe=n(Ul,"P",{});var pft=s(ghe);zrr=r(pft,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),pft.forEach(t),Wrr=i(Ul),Lc=n(Ul,"P",{});var GW=s(Lc);Qrr=r(GW,`Note:
Loading a model from its configuration file does `),hhe=n(GW,"STRONG",{});var _ft=s(hhe);Hrr=r(_ft,"not"),_ft.forEach(t),Urr=r(GW,` load the model weights. It only affects the
model\u2019s configuration. Use `),phe=n(GW,"CODE",{});var uft=s(phe);Jrr=r(uft,"from_pretrained()"),uft.forEach(t),Yrr=r(GW,"to load the model weights."),GW.forEach(t),Krr=i(Ul),_he=n(Ul,"P",{});var bft=s(_he);Zrr=r(bft,"Examples:"),bft.forEach(t),etr=i(Ul),m(aw.$$.fragment,Ul),Ul.forEach(t),otr=i(Hl),_o=n(Hl,"DIV",{class:!0});var Ta=s(_o);m(nw.$$.fragment,Ta),rtr=i(Ta),uhe=n(Ta,"P",{});var vft=s(uhe);ttr=r(vft,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),vft.forEach(t),atr=i(Ta),Cn=n(Ta,"P",{});var $M=s(Cn);ntr=r($M,"The model class to instantiate is selected based on the "),bhe=n($M,"CODE",{});var Tft=s(bhe);str=r(Tft,"model_type"),Tft.forEach(t),ltr=r($M,` property of the config object (either
passed as an argument or loaded from `),vhe=n($M,"CODE",{});var Fft=s(vhe);itr=r(Fft,"pretrained_model_name_or_path"),Fft.forEach(t),dtr=r($M,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),The=n($M,"CODE",{});var Cft=s(The);ctr=r(Cft,"pretrained_model_name_or_path"),Cft.forEach(t),ftr=r($M,":"),$M.forEach(t),mtr=i(Ta),pe=n(Ta,"UL",{});var Me=s(pe);E0=n(Me,"LI",{});var xLe=s(E0);Fhe=n(xLe,"STRONG",{});var Mft=s(Fhe);gtr=r(Mft,"bert"),Mft.forEach(t),htr=r(xLe," \u2014 "),BO=n(xLe,"A",{href:!0});var Eft=s(BO);ptr=r(Eft,"TFBertLMHeadModel"),Eft.forEach(t),_tr=r(xLe," (BERT model)"),xLe.forEach(t),utr=i(Me),y0=n(Me,"LI",{});var kLe=s(y0);Che=n(kLe,"STRONG",{});var yft=s(Che);btr=r(yft,"ctrl"),yft.forEach(t),vtr=r(kLe," \u2014 "),xO=n(kLe,"A",{href:!0});var wft=s(xO);Ttr=r(wft,"TFCTRLLMHeadModel"),wft.forEach(t),Ftr=r(kLe," (CTRL model)"),kLe.forEach(t),Ctr=i(Me),w0=n(Me,"LI",{});var RLe=s(w0);Mhe=n(RLe,"STRONG",{});var Aft=s(Mhe);Mtr=r(Aft,"gpt2"),Aft.forEach(t),Etr=r(RLe," \u2014 "),kO=n(RLe,"A",{href:!0});var Lft=s(kO);ytr=r(Lft,"TFGPT2LMHeadModel"),Lft.forEach(t),wtr=r(RLe," (OpenAI GPT-2 model)"),RLe.forEach(t),Atr=i(Me),A0=n(Me,"LI",{});var SLe=s(A0);Ehe=n(SLe,"STRONG",{});var Bft=s(Ehe);Ltr=r(Bft,"openai-gpt"),Bft.forEach(t),Btr=r(SLe," \u2014 "),RO=n(SLe,"A",{href:!0});var xft=s(RO);xtr=r(xft,"TFOpenAIGPTLMHeadModel"),xft.forEach(t),ktr=r(SLe," (OpenAI GPT model)"),SLe.forEach(t),Rtr=i(Me),L0=n(Me,"LI",{});var PLe=s(L0);yhe=n(PLe,"STRONG",{});var kft=s(yhe);Str=r(kft,"rembert"),kft.forEach(t),Ptr=r(PLe," \u2014 "),SO=n(PLe,"A",{href:!0});var Rft=s(SO);$tr=r(Rft,"TFRemBertForCausalLM"),Rft.forEach(t),Itr=r(PLe," (RemBERT model)"),PLe.forEach(t),jtr=i(Me),B0=n(Me,"LI",{});var $Le=s(B0);whe=n($Le,"STRONG",{});var Sft=s(whe);Dtr=r(Sft,"roberta"),Sft.forEach(t),Ntr=r($Le," \u2014 "),PO=n($Le,"A",{href:!0});var Pft=s(PO);qtr=r(Pft,"TFRobertaForCausalLM"),Pft.forEach(t),Otr=r($Le," (RoBERTa model)"),$Le.forEach(t),Gtr=i(Me),x0=n(Me,"LI",{});var ILe=s(x0);Ahe=n(ILe,"STRONG",{});var $ft=s(Ahe);Xtr=r($ft,"roformer"),$ft.forEach(t),Vtr=r(ILe," \u2014 "),$O=n(ILe,"A",{href:!0});var Ift=s($O);ztr=r(Ift,"TFRoFormerForCausalLM"),Ift.forEach(t),Wtr=r(ILe," (RoFormer model)"),ILe.forEach(t),Qtr=i(Me),k0=n(Me,"LI",{});var jLe=s(k0);Lhe=n(jLe,"STRONG",{});var jft=s(Lhe);Htr=r(jft,"transfo-xl"),jft.forEach(t),Utr=r(jLe," \u2014 "),IO=n(jLe,"A",{href:!0});var Dft=s(IO);Jtr=r(Dft,"TFTransfoXLLMHeadModel"),Dft.forEach(t),Ytr=r(jLe," (Transformer-XL model)"),jLe.forEach(t),Ktr=i(Me),R0=n(Me,"LI",{});var DLe=s(R0);Bhe=n(DLe,"STRONG",{});var Nft=s(Bhe);Ztr=r(Nft,"xlm"),Nft.forEach(t),ear=r(DLe," \u2014 "),jO=n(DLe,"A",{href:!0});var qft=s(jO);oar=r(qft,"TFXLMWithLMHeadModel"),qft.forEach(t),rar=r(DLe," (XLM model)"),DLe.forEach(t),tar=i(Me),S0=n(Me,"LI",{});var NLe=s(S0);xhe=n(NLe,"STRONG",{});var Oft=s(xhe);aar=r(Oft,"xlnet"),Oft.forEach(t),nar=r(NLe," \u2014 "),DO=n(NLe,"A",{href:!0});var Gft=s(DO);sar=r(Gft,"TFXLNetLMHeadModel"),Gft.forEach(t),lar=r(NLe," (XLNet model)"),NLe.forEach(t),Me.forEach(t),iar=i(Ta),khe=n(Ta,"P",{});var Xft=s(khe);dar=r(Xft,"Examples:"),Xft.forEach(t),car=i(Ta),m(sw.$$.fragment,Ta),Ta.forEach(t),Hl.forEach(t),Zke=i(d),Bc=n(d,"H2",{class:!0});var mPe=s(Bc);P0=n(mPe,"A",{id:!0,class:!0,href:!0});var Vft=s(P0);Rhe=n(Vft,"SPAN",{});var zft=s(Rhe);m(lw.$$.fragment,zft),zft.forEach(t),Vft.forEach(t),far=i(mPe),She=n(mPe,"SPAN",{});var Wft=s(She);mar=r(Wft,"TFAutoModelForImageClassification"),Wft.forEach(t),mPe.forEach(t),eRe=i(d),Mr=n(d,"DIV",{class:!0});var Jl=s(Mr);m(iw.$$.fragment,Jl),gar=i(Jl),xc=n(Jl,"P",{});var XW=s(xc);har=r(XW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Phe=n(XW,"CODE",{});var Qft=s(Phe);par=r(Qft,"from_pretrained()"),Qft.forEach(t),_ar=r(XW,"class method or the "),$he=n(XW,"CODE",{});var Hft=s($he);uar=r(Hft,"from_config()"),Hft.forEach(t),bar=r(XW,`class
method.`),XW.forEach(t),Tar=i(Jl),dw=n(Jl,"P",{});var gPe=s(dw);Far=r(gPe,"This class cannot be instantiated directly using "),Ihe=n(gPe,"CODE",{});var Uft=s(Ihe);Car=r(Uft,"__init__()"),Uft.forEach(t),Mar=r(gPe," (throws an error)."),gPe.forEach(t),Ear=i(Jl),bt=n(Jl,"DIV",{class:!0});var Yl=s(bt);m(cw.$$.fragment,Yl),yar=i(Yl),jhe=n(Yl,"P",{});var Jft=s(jhe);war=r(Jft,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Jft.forEach(t),Aar=i(Yl),kc=n(Yl,"P",{});var VW=s(kc);Lar=r(VW,`Note:
Loading a model from its configuration file does `),Dhe=n(VW,"STRONG",{});var Yft=s(Dhe);Bar=r(Yft,"not"),Yft.forEach(t),xar=r(VW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nhe=n(VW,"CODE",{});var Kft=s(Nhe);kar=r(Kft,"from_pretrained()"),Kft.forEach(t),Rar=r(VW,"to load the model weights."),VW.forEach(t),Sar=i(Yl),qhe=n(Yl,"P",{});var Zft=s(qhe);Par=r(Zft,"Examples:"),Zft.forEach(t),$ar=i(Yl),m(fw.$$.fragment,Yl),Yl.forEach(t),Iar=i(Jl),uo=n(Jl,"DIV",{class:!0});var Fa=s(uo);m(mw.$$.fragment,Fa),jar=i(Fa),Ohe=n(Fa,"P",{});var emt=s(Ohe);Dar=r(emt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),emt.forEach(t),Nar=i(Fa),Mn=n(Fa,"P",{});var IM=s(Mn);qar=r(IM,"The model class to instantiate is selected based on the "),Ghe=n(IM,"CODE",{});var omt=s(Ghe);Oar=r(omt,"model_type"),omt.forEach(t),Gar=r(IM,` property of the config object (either
passed as an argument or loaded from `),Xhe=n(IM,"CODE",{});var rmt=s(Xhe);Xar=r(rmt,"pretrained_model_name_or_path"),rmt.forEach(t),Var=r(IM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vhe=n(IM,"CODE",{});var tmt=s(Vhe);zar=r(tmt,"pretrained_model_name_or_path"),tmt.forEach(t),War=r(IM,":"),IM.forEach(t),Qar=i(Fa),gw=n(Fa,"UL",{});var hPe=s(gw);$0=n(hPe,"LI",{});var qLe=s($0);zhe=n(qLe,"STRONG",{});var amt=s(zhe);Har=r(amt,"convnext"),amt.forEach(t),Uar=r(qLe," \u2014 "),NO=n(qLe,"A",{href:!0});var nmt=s(NO);Jar=r(nmt,"TFConvNextForImageClassification"),nmt.forEach(t),Yar=r(qLe," (ConvNext model)"),qLe.forEach(t),Kar=i(hPe),I0=n(hPe,"LI",{});var OLe=s(I0);Whe=n(OLe,"STRONG",{});var smt=s(Whe);Zar=r(smt,"vit"),smt.forEach(t),enr=r(OLe," \u2014 "),qO=n(OLe,"A",{href:!0});var lmt=s(qO);onr=r(lmt,"TFViTForImageClassification"),lmt.forEach(t),rnr=r(OLe," (ViT model)"),OLe.forEach(t),hPe.forEach(t),tnr=i(Fa),Qhe=n(Fa,"P",{});var imt=s(Qhe);anr=r(imt,"Examples:"),imt.forEach(t),nnr=i(Fa),m(hw.$$.fragment,Fa),Fa.forEach(t),Jl.forEach(t),oRe=i(d),Rc=n(d,"H2",{class:!0});var pPe=s(Rc);j0=n(pPe,"A",{id:!0,class:!0,href:!0});var dmt=s(j0);Hhe=n(dmt,"SPAN",{});var cmt=s(Hhe);m(pw.$$.fragment,cmt),cmt.forEach(t),dmt.forEach(t),snr=i(pPe),Uhe=n(pPe,"SPAN",{});var fmt=s(Uhe);lnr=r(fmt,"TFAutoModelForMaskedLM"),fmt.forEach(t),pPe.forEach(t),rRe=i(d),Er=n(d,"DIV",{class:!0});var Kl=s(Er);m(_w.$$.fragment,Kl),inr=i(Kl),Sc=n(Kl,"P",{});var zW=s(Sc);dnr=r(zW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Jhe=n(zW,"CODE",{});var mmt=s(Jhe);cnr=r(mmt,"from_pretrained()"),mmt.forEach(t),fnr=r(zW,"class method or the "),Yhe=n(zW,"CODE",{});var gmt=s(Yhe);mnr=r(gmt,"from_config()"),gmt.forEach(t),gnr=r(zW,`class
method.`),zW.forEach(t),hnr=i(Kl),uw=n(Kl,"P",{});var _Pe=s(uw);pnr=r(_Pe,"This class cannot be instantiated directly using "),Khe=n(_Pe,"CODE",{});var hmt=s(Khe);_nr=r(hmt,"__init__()"),hmt.forEach(t),unr=r(_Pe," (throws an error)."),_Pe.forEach(t),bnr=i(Kl),vt=n(Kl,"DIV",{class:!0});var Zl=s(vt);m(bw.$$.fragment,Zl),vnr=i(Zl),Zhe=n(Zl,"P",{});var pmt=s(Zhe);Tnr=r(pmt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),pmt.forEach(t),Fnr=i(Zl),Pc=n(Zl,"P",{});var WW=s(Pc);Cnr=r(WW,`Note:
Loading a model from its configuration file does `),epe=n(WW,"STRONG",{});var _mt=s(epe);Mnr=r(_mt,"not"),_mt.forEach(t),Enr=r(WW,` load the model weights. It only affects the
model\u2019s configuration. Use `),ope=n(WW,"CODE",{});var umt=s(ope);ynr=r(umt,"from_pretrained()"),umt.forEach(t),wnr=r(WW,"to load the model weights."),WW.forEach(t),Anr=i(Zl),rpe=n(Zl,"P",{});var bmt=s(rpe);Lnr=r(bmt,"Examples:"),bmt.forEach(t),Bnr=i(Zl),m(vw.$$.fragment,Zl),Zl.forEach(t),xnr=i(Kl),bo=n(Kl,"DIV",{class:!0});var Ca=s(bo);m(Tw.$$.fragment,Ca),knr=i(Ca),tpe=n(Ca,"P",{});var vmt=s(tpe);Rnr=r(vmt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),vmt.forEach(t),Snr=i(Ca),En=n(Ca,"P",{});var jM=s(En);Pnr=r(jM,"The model class to instantiate is selected based on the "),ape=n(jM,"CODE",{});var Tmt=s(ape);$nr=r(Tmt,"model_type"),Tmt.forEach(t),Inr=r(jM,` property of the config object (either
passed as an argument or loaded from `),npe=n(jM,"CODE",{});var Fmt=s(npe);jnr=r(Fmt,"pretrained_model_name_or_path"),Fmt.forEach(t),Dnr=r(jM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),spe=n(jM,"CODE",{});var Cmt=s(spe);Nnr=r(Cmt,"pretrained_model_name_or_path"),Cmt.forEach(t),qnr=r(jM,":"),jM.forEach(t),Onr=i(Ca),Y=n(Ca,"UL",{});var ee=s(Y);D0=n(ee,"LI",{});var GLe=s(D0);lpe=n(GLe,"STRONG",{});var Mmt=s(lpe);Gnr=r(Mmt,"albert"),Mmt.forEach(t),Xnr=r(GLe," \u2014 "),OO=n(GLe,"A",{href:!0});var Emt=s(OO);Vnr=r(Emt,"TFAlbertForMaskedLM"),Emt.forEach(t),znr=r(GLe," (ALBERT model)"),GLe.forEach(t),Wnr=i(ee),N0=n(ee,"LI",{});var XLe=s(N0);ipe=n(XLe,"STRONG",{});var ymt=s(ipe);Qnr=r(ymt,"bert"),ymt.forEach(t),Hnr=r(XLe," \u2014 "),GO=n(XLe,"A",{href:!0});var wmt=s(GO);Unr=r(wmt,"TFBertForMaskedLM"),wmt.forEach(t),Jnr=r(XLe," (BERT model)"),XLe.forEach(t),Ynr=i(ee),q0=n(ee,"LI",{});var VLe=s(q0);dpe=n(VLe,"STRONG",{});var Amt=s(dpe);Knr=r(Amt,"camembert"),Amt.forEach(t),Znr=r(VLe," \u2014 "),XO=n(VLe,"A",{href:!0});var Lmt=s(XO);esr=r(Lmt,"TFCamembertForMaskedLM"),Lmt.forEach(t),osr=r(VLe," (CamemBERT model)"),VLe.forEach(t),rsr=i(ee),O0=n(ee,"LI",{});var zLe=s(O0);cpe=n(zLe,"STRONG",{});var Bmt=s(cpe);tsr=r(Bmt,"convbert"),Bmt.forEach(t),asr=r(zLe," \u2014 "),VO=n(zLe,"A",{href:!0});var xmt=s(VO);nsr=r(xmt,"TFConvBertForMaskedLM"),xmt.forEach(t),ssr=r(zLe," (ConvBERT model)"),zLe.forEach(t),lsr=i(ee),G0=n(ee,"LI",{});var WLe=s(G0);fpe=n(WLe,"STRONG",{});var kmt=s(fpe);isr=r(kmt,"deberta"),kmt.forEach(t),dsr=r(WLe," \u2014 "),zO=n(WLe,"A",{href:!0});var Rmt=s(zO);csr=r(Rmt,"TFDebertaForMaskedLM"),Rmt.forEach(t),fsr=r(WLe," (DeBERTa model)"),WLe.forEach(t),msr=i(ee),X0=n(ee,"LI",{});var QLe=s(X0);mpe=n(QLe,"STRONG",{});var Smt=s(mpe);gsr=r(Smt,"deberta-v2"),Smt.forEach(t),hsr=r(QLe," \u2014 "),WO=n(QLe,"A",{href:!0});var Pmt=s(WO);psr=r(Pmt,"TFDebertaV2ForMaskedLM"),Pmt.forEach(t),_sr=r(QLe," (DeBERTa-v2 model)"),QLe.forEach(t),usr=i(ee),V0=n(ee,"LI",{});var HLe=s(V0);gpe=n(HLe,"STRONG",{});var $mt=s(gpe);bsr=r($mt,"distilbert"),$mt.forEach(t),vsr=r(HLe," \u2014 "),QO=n(HLe,"A",{href:!0});var Imt=s(QO);Tsr=r(Imt,"TFDistilBertForMaskedLM"),Imt.forEach(t),Fsr=r(HLe," (DistilBERT model)"),HLe.forEach(t),Csr=i(ee),z0=n(ee,"LI",{});var ULe=s(z0);hpe=n(ULe,"STRONG",{});var jmt=s(hpe);Msr=r(jmt,"electra"),jmt.forEach(t),Esr=r(ULe," \u2014 "),HO=n(ULe,"A",{href:!0});var Dmt=s(HO);ysr=r(Dmt,"TFElectraForMaskedLM"),Dmt.forEach(t),wsr=r(ULe," (ELECTRA model)"),ULe.forEach(t),Asr=i(ee),W0=n(ee,"LI",{});var JLe=s(W0);ppe=n(JLe,"STRONG",{});var Nmt=s(ppe);Lsr=r(Nmt,"flaubert"),Nmt.forEach(t),Bsr=r(JLe," \u2014 "),UO=n(JLe,"A",{href:!0});var qmt=s(UO);xsr=r(qmt,"TFFlaubertWithLMHeadModel"),qmt.forEach(t),ksr=r(JLe," (FlauBERT model)"),JLe.forEach(t),Rsr=i(ee),Q0=n(ee,"LI",{});var YLe=s(Q0);_pe=n(YLe,"STRONG",{});var Omt=s(_pe);Ssr=r(Omt,"funnel"),Omt.forEach(t),Psr=r(YLe," \u2014 "),JO=n(YLe,"A",{href:!0});var Gmt=s(JO);$sr=r(Gmt,"TFFunnelForMaskedLM"),Gmt.forEach(t),Isr=r(YLe," (Funnel Transformer model)"),YLe.forEach(t),jsr=i(ee),H0=n(ee,"LI",{});var KLe=s(H0);upe=n(KLe,"STRONG",{});var Xmt=s(upe);Dsr=r(Xmt,"layoutlm"),Xmt.forEach(t),Nsr=r(KLe," \u2014 "),YO=n(KLe,"A",{href:!0});var Vmt=s(YO);qsr=r(Vmt,"TFLayoutLMForMaskedLM"),Vmt.forEach(t),Osr=r(KLe," (LayoutLM model)"),KLe.forEach(t),Gsr=i(ee),U0=n(ee,"LI",{});var ZLe=s(U0);bpe=n(ZLe,"STRONG",{});var zmt=s(bpe);Xsr=r(zmt,"longformer"),zmt.forEach(t),Vsr=r(ZLe," \u2014 "),KO=n(ZLe,"A",{href:!0});var Wmt=s(KO);zsr=r(Wmt,"TFLongformerForMaskedLM"),Wmt.forEach(t),Wsr=r(ZLe," (Longformer model)"),ZLe.forEach(t),Qsr=i(ee),J0=n(ee,"LI",{});var e7e=s(J0);vpe=n(e7e,"STRONG",{});var Qmt=s(vpe);Hsr=r(Qmt,"mobilebert"),Qmt.forEach(t),Usr=r(e7e," \u2014 "),ZO=n(e7e,"A",{href:!0});var Hmt=s(ZO);Jsr=r(Hmt,"TFMobileBertForMaskedLM"),Hmt.forEach(t),Ysr=r(e7e," (MobileBERT model)"),e7e.forEach(t),Ksr=i(ee),Y0=n(ee,"LI",{});var o7e=s(Y0);Tpe=n(o7e,"STRONG",{});var Umt=s(Tpe);Zsr=r(Umt,"mpnet"),Umt.forEach(t),elr=r(o7e," \u2014 "),eG=n(o7e,"A",{href:!0});var Jmt=s(eG);olr=r(Jmt,"TFMPNetForMaskedLM"),Jmt.forEach(t),rlr=r(o7e," (MPNet model)"),o7e.forEach(t),tlr=i(ee),K0=n(ee,"LI",{});var r7e=s(K0);Fpe=n(r7e,"STRONG",{});var Ymt=s(Fpe);alr=r(Ymt,"rembert"),Ymt.forEach(t),nlr=r(r7e," \u2014 "),oG=n(r7e,"A",{href:!0});var Kmt=s(oG);slr=r(Kmt,"TFRemBertForMaskedLM"),Kmt.forEach(t),llr=r(r7e," (RemBERT model)"),r7e.forEach(t),ilr=i(ee),Z0=n(ee,"LI",{});var t7e=s(Z0);Cpe=n(t7e,"STRONG",{});var Zmt=s(Cpe);dlr=r(Zmt,"roberta"),Zmt.forEach(t),clr=r(t7e," \u2014 "),rG=n(t7e,"A",{href:!0});var egt=s(rG);flr=r(egt,"TFRobertaForMaskedLM"),egt.forEach(t),mlr=r(t7e," (RoBERTa model)"),t7e.forEach(t),glr=i(ee),eT=n(ee,"LI",{});var a7e=s(eT);Mpe=n(a7e,"STRONG",{});var ogt=s(Mpe);hlr=r(ogt,"roformer"),ogt.forEach(t),plr=r(a7e," \u2014 "),tG=n(a7e,"A",{href:!0});var rgt=s(tG);_lr=r(rgt,"TFRoFormerForMaskedLM"),rgt.forEach(t),ulr=r(a7e," (RoFormer model)"),a7e.forEach(t),blr=i(ee),oT=n(ee,"LI",{});var n7e=s(oT);Epe=n(n7e,"STRONG",{});var tgt=s(Epe);vlr=r(tgt,"tapas"),tgt.forEach(t),Tlr=r(n7e," \u2014 "),aG=n(n7e,"A",{href:!0});var agt=s(aG);Flr=r(agt,"TFTapasForMaskedLM"),agt.forEach(t),Clr=r(n7e," (TAPAS model)"),n7e.forEach(t),Mlr=i(ee),rT=n(ee,"LI",{});var s7e=s(rT);ype=n(s7e,"STRONG",{});var ngt=s(ype);Elr=r(ngt,"xlm"),ngt.forEach(t),ylr=r(s7e," \u2014 "),nG=n(s7e,"A",{href:!0});var sgt=s(nG);wlr=r(sgt,"TFXLMWithLMHeadModel"),sgt.forEach(t),Alr=r(s7e," (XLM model)"),s7e.forEach(t),Llr=i(ee),tT=n(ee,"LI",{});var l7e=s(tT);wpe=n(l7e,"STRONG",{});var lgt=s(wpe);Blr=r(lgt,"xlm-roberta"),lgt.forEach(t),xlr=r(l7e," \u2014 "),sG=n(l7e,"A",{href:!0});var igt=s(sG);klr=r(igt,"TFXLMRobertaForMaskedLM"),igt.forEach(t),Rlr=r(l7e," (XLM-RoBERTa model)"),l7e.forEach(t),ee.forEach(t),Slr=i(Ca),Ape=n(Ca,"P",{});var dgt=s(Ape);Plr=r(dgt,"Examples:"),dgt.forEach(t),$lr=i(Ca),m(Fw.$$.fragment,Ca),Ca.forEach(t),Kl.forEach(t),tRe=i(d),$c=n(d,"H2",{class:!0});var uPe=s($c);aT=n(uPe,"A",{id:!0,class:!0,href:!0});var cgt=s(aT);Lpe=n(cgt,"SPAN",{});var fgt=s(Lpe);m(Cw.$$.fragment,fgt),fgt.forEach(t),cgt.forEach(t),Ilr=i(uPe),Bpe=n(uPe,"SPAN",{});var mgt=s(Bpe);jlr=r(mgt,"TFAutoModelForSeq2SeqLM"),mgt.forEach(t),uPe.forEach(t),aRe=i(d),yr=n(d,"DIV",{class:!0});var ei=s(yr);m(Mw.$$.fragment,ei),Dlr=i(ei),Ic=n(ei,"P",{});var QW=s(Ic);Nlr=r(QW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),xpe=n(QW,"CODE",{});var ggt=s(xpe);qlr=r(ggt,"from_pretrained()"),ggt.forEach(t),Olr=r(QW,"class method or the "),kpe=n(QW,"CODE",{});var hgt=s(kpe);Glr=r(hgt,"from_config()"),hgt.forEach(t),Xlr=r(QW,`class
method.`),QW.forEach(t),Vlr=i(ei),Ew=n(ei,"P",{});var bPe=s(Ew);zlr=r(bPe,"This class cannot be instantiated directly using "),Rpe=n(bPe,"CODE",{});var pgt=s(Rpe);Wlr=r(pgt,"__init__()"),pgt.forEach(t),Qlr=r(bPe," (throws an error)."),bPe.forEach(t),Hlr=i(ei),Tt=n(ei,"DIV",{class:!0});var oi=s(Tt);m(yw.$$.fragment,oi),Ulr=i(oi),Spe=n(oi,"P",{});var _gt=s(Spe);Jlr=r(_gt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),_gt.forEach(t),Ylr=i(oi),jc=n(oi,"P",{});var HW=s(jc);Klr=r(HW,`Note:
Loading a model from its configuration file does `),Ppe=n(HW,"STRONG",{});var ugt=s(Ppe);Zlr=r(ugt,"not"),ugt.forEach(t),eir=r(HW,` load the model weights. It only affects the
model\u2019s configuration. Use `),$pe=n(HW,"CODE",{});var bgt=s($pe);oir=r(bgt,"from_pretrained()"),bgt.forEach(t),rir=r(HW,"to load the model weights."),HW.forEach(t),tir=i(oi),Ipe=n(oi,"P",{});var vgt=s(Ipe);air=r(vgt,"Examples:"),vgt.forEach(t),nir=i(oi),m(ww.$$.fragment,oi),oi.forEach(t),sir=i(ei),vo=n(ei,"DIV",{class:!0});var Ma=s(vo);m(Aw.$$.fragment,Ma),lir=i(Ma),jpe=n(Ma,"P",{});var Tgt=s(jpe);iir=r(Tgt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Tgt.forEach(t),dir=i(Ma),yn=n(Ma,"P",{});var DM=s(yn);cir=r(DM,"The model class to instantiate is selected based on the "),Dpe=n(DM,"CODE",{});var Fgt=s(Dpe);fir=r(Fgt,"model_type"),Fgt.forEach(t),mir=r(DM,` property of the config object (either
passed as an argument or loaded from `),Npe=n(DM,"CODE",{});var Cgt=s(Npe);gir=r(Cgt,"pretrained_model_name_or_path"),Cgt.forEach(t),hir=r(DM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qpe=n(DM,"CODE",{});var Mgt=s(qpe);pir=r(Mgt,"pretrained_model_name_or_path"),Mgt.forEach(t),_ir=r(DM,":"),DM.forEach(t),uir=i(Ma),_e=n(Ma,"UL",{});var Ee=s(_e);nT=n(Ee,"LI",{});var i7e=s(nT);Ope=n(i7e,"STRONG",{});var Egt=s(Ope);bir=r(Egt,"bart"),Egt.forEach(t),vir=r(i7e," \u2014 "),lG=n(i7e,"A",{href:!0});var ygt=s(lG);Tir=r(ygt,"TFBartForConditionalGeneration"),ygt.forEach(t),Fir=r(i7e," (BART model)"),i7e.forEach(t),Cir=i(Ee),sT=n(Ee,"LI",{});var d7e=s(sT);Gpe=n(d7e,"STRONG",{});var wgt=s(Gpe);Mir=r(wgt,"blenderbot"),wgt.forEach(t),Eir=r(d7e," \u2014 "),iG=n(d7e,"A",{href:!0});var Agt=s(iG);yir=r(Agt,"TFBlenderbotForConditionalGeneration"),Agt.forEach(t),wir=r(d7e," (Blenderbot model)"),d7e.forEach(t),Air=i(Ee),lT=n(Ee,"LI",{});var c7e=s(lT);Xpe=n(c7e,"STRONG",{});var Lgt=s(Xpe);Lir=r(Lgt,"blenderbot-small"),Lgt.forEach(t),Bir=r(c7e," \u2014 "),dG=n(c7e,"A",{href:!0});var Bgt=s(dG);xir=r(Bgt,"TFBlenderbotSmallForConditionalGeneration"),Bgt.forEach(t),kir=r(c7e," (BlenderbotSmall model)"),c7e.forEach(t),Rir=i(Ee),iT=n(Ee,"LI",{});var f7e=s(iT);Vpe=n(f7e,"STRONG",{});var xgt=s(Vpe);Sir=r(xgt,"encoder-decoder"),xgt.forEach(t),Pir=r(f7e," \u2014 "),cG=n(f7e,"A",{href:!0});var kgt=s(cG);$ir=r(kgt,"TFEncoderDecoderModel"),kgt.forEach(t),Iir=r(f7e," (Encoder decoder model)"),f7e.forEach(t),jir=i(Ee),dT=n(Ee,"LI",{});var m7e=s(dT);zpe=n(m7e,"STRONG",{});var Rgt=s(zpe);Dir=r(Rgt,"led"),Rgt.forEach(t),Nir=r(m7e," \u2014 "),fG=n(m7e,"A",{href:!0});var Sgt=s(fG);qir=r(Sgt,"TFLEDForConditionalGeneration"),Sgt.forEach(t),Oir=r(m7e," (LED model)"),m7e.forEach(t),Gir=i(Ee),cT=n(Ee,"LI",{});var g7e=s(cT);Wpe=n(g7e,"STRONG",{});var Pgt=s(Wpe);Xir=r(Pgt,"marian"),Pgt.forEach(t),Vir=r(g7e," \u2014 "),mG=n(g7e,"A",{href:!0});var $gt=s(mG);zir=r($gt,"TFMarianMTModel"),$gt.forEach(t),Wir=r(g7e," (Marian model)"),g7e.forEach(t),Qir=i(Ee),fT=n(Ee,"LI",{});var h7e=s(fT);Qpe=n(h7e,"STRONG",{});var Igt=s(Qpe);Hir=r(Igt,"mbart"),Igt.forEach(t),Uir=r(h7e," \u2014 "),gG=n(h7e,"A",{href:!0});var jgt=s(gG);Jir=r(jgt,"TFMBartForConditionalGeneration"),jgt.forEach(t),Yir=r(h7e," (mBART model)"),h7e.forEach(t),Kir=i(Ee),mT=n(Ee,"LI",{});var p7e=s(mT);Hpe=n(p7e,"STRONG",{});var Dgt=s(Hpe);Zir=r(Dgt,"mt5"),Dgt.forEach(t),edr=r(p7e," \u2014 "),hG=n(p7e,"A",{href:!0});var Ngt=s(hG);odr=r(Ngt,"TFMT5ForConditionalGeneration"),Ngt.forEach(t),rdr=r(p7e," (mT5 model)"),p7e.forEach(t),tdr=i(Ee),gT=n(Ee,"LI",{});var _7e=s(gT);Upe=n(_7e,"STRONG",{});var qgt=s(Upe);adr=r(qgt,"pegasus"),qgt.forEach(t),ndr=r(_7e," \u2014 "),pG=n(_7e,"A",{href:!0});var Ogt=s(pG);sdr=r(Ogt,"TFPegasusForConditionalGeneration"),Ogt.forEach(t),ldr=r(_7e," (Pegasus model)"),_7e.forEach(t),idr=i(Ee),hT=n(Ee,"LI",{});var u7e=s(hT);Jpe=n(u7e,"STRONG",{});var Ggt=s(Jpe);ddr=r(Ggt,"t5"),Ggt.forEach(t),cdr=r(u7e," \u2014 "),_G=n(u7e,"A",{href:!0});var Xgt=s(_G);fdr=r(Xgt,"TFT5ForConditionalGeneration"),Xgt.forEach(t),mdr=r(u7e," (T5 model)"),u7e.forEach(t),Ee.forEach(t),gdr=i(Ma),Ype=n(Ma,"P",{});var Vgt=s(Ype);hdr=r(Vgt,"Examples:"),Vgt.forEach(t),pdr=i(Ma),m(Lw.$$.fragment,Ma),Ma.forEach(t),ei.forEach(t),nRe=i(d),Dc=n(d,"H2",{class:!0});var vPe=s(Dc);pT=n(vPe,"A",{id:!0,class:!0,href:!0});var zgt=s(pT);Kpe=n(zgt,"SPAN",{});var Wgt=s(Kpe);m(Bw.$$.fragment,Wgt),Wgt.forEach(t),zgt.forEach(t),_dr=i(vPe),Zpe=n(vPe,"SPAN",{});var Qgt=s(Zpe);udr=r(Qgt,"TFAutoModelForSequenceClassification"),Qgt.forEach(t),vPe.forEach(t),sRe=i(d),wr=n(d,"DIV",{class:!0});var ri=s(wr);m(xw.$$.fragment,ri),bdr=i(ri),Nc=n(ri,"P",{});var UW=s(Nc);vdr=r(UW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),e_e=n(UW,"CODE",{});var Hgt=s(e_e);Tdr=r(Hgt,"from_pretrained()"),Hgt.forEach(t),Fdr=r(UW,"class method or the "),o_e=n(UW,"CODE",{});var Ugt=s(o_e);Cdr=r(Ugt,"from_config()"),Ugt.forEach(t),Mdr=r(UW,`class
method.`),UW.forEach(t),Edr=i(ri),kw=n(ri,"P",{});var TPe=s(kw);ydr=r(TPe,"This class cannot be instantiated directly using "),r_e=n(TPe,"CODE",{});var Jgt=s(r_e);wdr=r(Jgt,"__init__()"),Jgt.forEach(t),Adr=r(TPe," (throws an error)."),TPe.forEach(t),Ldr=i(ri),Ft=n(ri,"DIV",{class:!0});var ti=s(Ft);m(Rw.$$.fragment,ti),Bdr=i(ti),t_e=n(ti,"P",{});var Ygt=s(t_e);xdr=r(Ygt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Ygt.forEach(t),kdr=i(ti),qc=n(ti,"P",{});var JW=s(qc);Rdr=r(JW,`Note:
Loading a model from its configuration file does `),a_e=n(JW,"STRONG",{});var Kgt=s(a_e);Sdr=r(Kgt,"not"),Kgt.forEach(t),Pdr=r(JW,` load the model weights. It only affects the
model\u2019s configuration. Use `),n_e=n(JW,"CODE",{});var Zgt=s(n_e);$dr=r(Zgt,"from_pretrained()"),Zgt.forEach(t),Idr=r(JW,"to load the model weights."),JW.forEach(t),jdr=i(ti),s_e=n(ti,"P",{});var eht=s(s_e);Ddr=r(eht,"Examples:"),eht.forEach(t),Ndr=i(ti),m(Sw.$$.fragment,ti),ti.forEach(t),qdr=i(ri),To=n(ri,"DIV",{class:!0});var Ea=s(To);m(Pw.$$.fragment,Ea),Odr=i(Ea),l_e=n(Ea,"P",{});var oht=s(l_e);Gdr=r(oht,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),oht.forEach(t),Xdr=i(Ea),wn=n(Ea,"P",{});var NM=s(wn);Vdr=r(NM,"The model class to instantiate is selected based on the "),i_e=n(NM,"CODE",{});var rht=s(i_e);zdr=r(rht,"model_type"),rht.forEach(t),Wdr=r(NM,` property of the config object (either
passed as an argument or loaded from `),d_e=n(NM,"CODE",{});var tht=s(d_e);Qdr=r(tht,"pretrained_model_name_or_path"),tht.forEach(t),Hdr=r(NM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c_e=n(NM,"CODE",{});var aht=s(c_e);Udr=r(aht,"pretrained_model_name_or_path"),aht.forEach(t),Jdr=r(NM,":"),NM.forEach(t),Ydr=i(Ea),V=n(Ea,"UL",{});var W=s(V);_T=n(W,"LI",{});var b7e=s(_T);f_e=n(b7e,"STRONG",{});var nht=s(f_e);Kdr=r(nht,"albert"),nht.forEach(t),Zdr=r(b7e," \u2014 "),uG=n(b7e,"A",{href:!0});var sht=s(uG);ecr=r(sht,"TFAlbertForSequenceClassification"),sht.forEach(t),ocr=r(b7e," (ALBERT model)"),b7e.forEach(t),rcr=i(W),uT=n(W,"LI",{});var v7e=s(uT);m_e=n(v7e,"STRONG",{});var lht=s(m_e);tcr=r(lht,"bert"),lht.forEach(t),acr=r(v7e," \u2014 "),bG=n(v7e,"A",{href:!0});var iht=s(bG);ncr=r(iht,"TFBertForSequenceClassification"),iht.forEach(t),scr=r(v7e," (BERT model)"),v7e.forEach(t),lcr=i(W),bT=n(W,"LI",{});var T7e=s(bT);g_e=n(T7e,"STRONG",{});var dht=s(g_e);icr=r(dht,"camembert"),dht.forEach(t),dcr=r(T7e," \u2014 "),vG=n(T7e,"A",{href:!0});var cht=s(vG);ccr=r(cht,"TFCamembertForSequenceClassification"),cht.forEach(t),fcr=r(T7e," (CamemBERT model)"),T7e.forEach(t),mcr=i(W),vT=n(W,"LI",{});var F7e=s(vT);h_e=n(F7e,"STRONG",{});var fht=s(h_e);gcr=r(fht,"convbert"),fht.forEach(t),hcr=r(F7e," \u2014 "),TG=n(F7e,"A",{href:!0});var mht=s(TG);pcr=r(mht,"TFConvBertForSequenceClassification"),mht.forEach(t),_cr=r(F7e," (ConvBERT model)"),F7e.forEach(t),ucr=i(W),TT=n(W,"LI",{});var C7e=s(TT);p_e=n(C7e,"STRONG",{});var ght=s(p_e);bcr=r(ght,"ctrl"),ght.forEach(t),vcr=r(C7e," \u2014 "),FG=n(C7e,"A",{href:!0});var hht=s(FG);Tcr=r(hht,"TFCTRLForSequenceClassification"),hht.forEach(t),Fcr=r(C7e," (CTRL model)"),C7e.forEach(t),Ccr=i(W),FT=n(W,"LI",{});var M7e=s(FT);__e=n(M7e,"STRONG",{});var pht=s(__e);Mcr=r(pht,"deberta"),pht.forEach(t),Ecr=r(M7e," \u2014 "),CG=n(M7e,"A",{href:!0});var _ht=s(CG);ycr=r(_ht,"TFDebertaForSequenceClassification"),_ht.forEach(t),wcr=r(M7e," (DeBERTa model)"),M7e.forEach(t),Acr=i(W),CT=n(W,"LI",{});var E7e=s(CT);u_e=n(E7e,"STRONG",{});var uht=s(u_e);Lcr=r(uht,"deberta-v2"),uht.forEach(t),Bcr=r(E7e," \u2014 "),MG=n(E7e,"A",{href:!0});var bht=s(MG);xcr=r(bht,"TFDebertaV2ForSequenceClassification"),bht.forEach(t),kcr=r(E7e," (DeBERTa-v2 model)"),E7e.forEach(t),Rcr=i(W),MT=n(W,"LI",{});var y7e=s(MT);b_e=n(y7e,"STRONG",{});var vht=s(b_e);Scr=r(vht,"distilbert"),vht.forEach(t),Pcr=r(y7e," \u2014 "),EG=n(y7e,"A",{href:!0});var Tht=s(EG);$cr=r(Tht,"TFDistilBertForSequenceClassification"),Tht.forEach(t),Icr=r(y7e," (DistilBERT model)"),y7e.forEach(t),jcr=i(W),ET=n(W,"LI",{});var w7e=s(ET);v_e=n(w7e,"STRONG",{});var Fht=s(v_e);Dcr=r(Fht,"electra"),Fht.forEach(t),Ncr=r(w7e," \u2014 "),yG=n(w7e,"A",{href:!0});var Cht=s(yG);qcr=r(Cht,"TFElectraForSequenceClassification"),Cht.forEach(t),Ocr=r(w7e," (ELECTRA model)"),w7e.forEach(t),Gcr=i(W),yT=n(W,"LI",{});var A7e=s(yT);T_e=n(A7e,"STRONG",{});var Mht=s(T_e);Xcr=r(Mht,"flaubert"),Mht.forEach(t),Vcr=r(A7e," \u2014 "),wG=n(A7e,"A",{href:!0});var Eht=s(wG);zcr=r(Eht,"TFFlaubertForSequenceClassification"),Eht.forEach(t),Wcr=r(A7e," (FlauBERT model)"),A7e.forEach(t),Qcr=i(W),wT=n(W,"LI",{});var L7e=s(wT);F_e=n(L7e,"STRONG",{});var yht=s(F_e);Hcr=r(yht,"funnel"),yht.forEach(t),Ucr=r(L7e," \u2014 "),AG=n(L7e,"A",{href:!0});var wht=s(AG);Jcr=r(wht,"TFFunnelForSequenceClassification"),wht.forEach(t),Ycr=r(L7e," (Funnel Transformer model)"),L7e.forEach(t),Kcr=i(W),AT=n(W,"LI",{});var B7e=s(AT);C_e=n(B7e,"STRONG",{});var Aht=s(C_e);Zcr=r(Aht,"gpt2"),Aht.forEach(t),efr=r(B7e," \u2014 "),LG=n(B7e,"A",{href:!0});var Lht=s(LG);ofr=r(Lht,"TFGPT2ForSequenceClassification"),Lht.forEach(t),rfr=r(B7e," (OpenAI GPT-2 model)"),B7e.forEach(t),tfr=i(W),LT=n(W,"LI",{});var x7e=s(LT);M_e=n(x7e,"STRONG",{});var Bht=s(M_e);afr=r(Bht,"layoutlm"),Bht.forEach(t),nfr=r(x7e," \u2014 "),BG=n(x7e,"A",{href:!0});var xht=s(BG);sfr=r(xht,"TFLayoutLMForSequenceClassification"),xht.forEach(t),lfr=r(x7e," (LayoutLM model)"),x7e.forEach(t),ifr=i(W),BT=n(W,"LI",{});var k7e=s(BT);E_e=n(k7e,"STRONG",{});var kht=s(E_e);dfr=r(kht,"longformer"),kht.forEach(t),cfr=r(k7e," \u2014 "),xG=n(k7e,"A",{href:!0});var Rht=s(xG);ffr=r(Rht,"TFLongformerForSequenceClassification"),Rht.forEach(t),mfr=r(k7e," (Longformer model)"),k7e.forEach(t),gfr=i(W),xT=n(W,"LI",{});var R7e=s(xT);y_e=n(R7e,"STRONG",{});var Sht=s(y_e);hfr=r(Sht,"mobilebert"),Sht.forEach(t),pfr=r(R7e," \u2014 "),kG=n(R7e,"A",{href:!0});var Pht=s(kG);_fr=r(Pht,"TFMobileBertForSequenceClassification"),Pht.forEach(t),ufr=r(R7e," (MobileBERT model)"),R7e.forEach(t),bfr=i(W),kT=n(W,"LI",{});var S7e=s(kT);w_e=n(S7e,"STRONG",{});var $ht=s(w_e);vfr=r($ht,"mpnet"),$ht.forEach(t),Tfr=r(S7e," \u2014 "),RG=n(S7e,"A",{href:!0});var Iht=s(RG);Ffr=r(Iht,"TFMPNetForSequenceClassification"),Iht.forEach(t),Cfr=r(S7e," (MPNet model)"),S7e.forEach(t),Mfr=i(W),RT=n(W,"LI",{});var P7e=s(RT);A_e=n(P7e,"STRONG",{});var jht=s(A_e);Efr=r(jht,"openai-gpt"),jht.forEach(t),yfr=r(P7e," \u2014 "),SG=n(P7e,"A",{href:!0});var Dht=s(SG);wfr=r(Dht,"TFOpenAIGPTForSequenceClassification"),Dht.forEach(t),Afr=r(P7e," (OpenAI GPT model)"),P7e.forEach(t),Lfr=i(W),ST=n(W,"LI",{});var $7e=s(ST);L_e=n($7e,"STRONG",{});var Nht=s(L_e);Bfr=r(Nht,"rembert"),Nht.forEach(t),xfr=r($7e," \u2014 "),PG=n($7e,"A",{href:!0});var qht=s(PG);kfr=r(qht,"TFRemBertForSequenceClassification"),qht.forEach(t),Rfr=r($7e," (RemBERT model)"),$7e.forEach(t),Sfr=i(W),PT=n(W,"LI",{});var I7e=s(PT);B_e=n(I7e,"STRONG",{});var Oht=s(B_e);Pfr=r(Oht,"roberta"),Oht.forEach(t),$fr=r(I7e," \u2014 "),$G=n(I7e,"A",{href:!0});var Ght=s($G);Ifr=r(Ght,"TFRobertaForSequenceClassification"),Ght.forEach(t),jfr=r(I7e," (RoBERTa model)"),I7e.forEach(t),Dfr=i(W),$T=n(W,"LI",{});var j7e=s($T);x_e=n(j7e,"STRONG",{});var Xht=s(x_e);Nfr=r(Xht,"roformer"),Xht.forEach(t),qfr=r(j7e," \u2014 "),IG=n(j7e,"A",{href:!0});var Vht=s(IG);Ofr=r(Vht,"TFRoFormerForSequenceClassification"),Vht.forEach(t),Gfr=r(j7e," (RoFormer model)"),j7e.forEach(t),Xfr=i(W),IT=n(W,"LI",{});var D7e=s(IT);k_e=n(D7e,"STRONG",{});var zht=s(k_e);Vfr=r(zht,"tapas"),zht.forEach(t),zfr=r(D7e," \u2014 "),jG=n(D7e,"A",{href:!0});var Wht=s(jG);Wfr=r(Wht,"TFTapasForSequenceClassification"),Wht.forEach(t),Qfr=r(D7e," (TAPAS model)"),D7e.forEach(t),Hfr=i(W),jT=n(W,"LI",{});var N7e=s(jT);R_e=n(N7e,"STRONG",{});var Qht=s(R_e);Ufr=r(Qht,"transfo-xl"),Qht.forEach(t),Jfr=r(N7e," \u2014 "),DG=n(N7e,"A",{href:!0});var Hht=s(DG);Yfr=r(Hht,"TFTransfoXLForSequenceClassification"),Hht.forEach(t),Kfr=r(N7e," (Transformer-XL model)"),N7e.forEach(t),Zfr=i(W),DT=n(W,"LI",{});var q7e=s(DT);S_e=n(q7e,"STRONG",{});var Uht=s(S_e);emr=r(Uht,"xlm"),Uht.forEach(t),omr=r(q7e," \u2014 "),NG=n(q7e,"A",{href:!0});var Jht=s(NG);rmr=r(Jht,"TFXLMForSequenceClassification"),Jht.forEach(t),tmr=r(q7e," (XLM model)"),q7e.forEach(t),amr=i(W),NT=n(W,"LI",{});var O7e=s(NT);P_e=n(O7e,"STRONG",{});var Yht=s(P_e);nmr=r(Yht,"xlm-roberta"),Yht.forEach(t),smr=r(O7e," \u2014 "),qG=n(O7e,"A",{href:!0});var Kht=s(qG);lmr=r(Kht,"TFXLMRobertaForSequenceClassification"),Kht.forEach(t),imr=r(O7e," (XLM-RoBERTa model)"),O7e.forEach(t),dmr=i(W),qT=n(W,"LI",{});var G7e=s(qT);$_e=n(G7e,"STRONG",{});var Zht=s($_e);cmr=r(Zht,"xlnet"),Zht.forEach(t),fmr=r(G7e," \u2014 "),OG=n(G7e,"A",{href:!0});var ept=s(OG);mmr=r(ept,"TFXLNetForSequenceClassification"),ept.forEach(t),gmr=r(G7e," (XLNet model)"),G7e.forEach(t),W.forEach(t),hmr=i(Ea),I_e=n(Ea,"P",{});var opt=s(I_e);pmr=r(opt,"Examples:"),opt.forEach(t),_mr=i(Ea),m($w.$$.fragment,Ea),Ea.forEach(t),ri.forEach(t),lRe=i(d),Oc=n(d,"H2",{class:!0});var FPe=s(Oc);OT=n(FPe,"A",{id:!0,class:!0,href:!0});var rpt=s(OT);j_e=n(rpt,"SPAN",{});var tpt=s(j_e);m(Iw.$$.fragment,tpt),tpt.forEach(t),rpt.forEach(t),umr=i(FPe),D_e=n(FPe,"SPAN",{});var apt=s(D_e);bmr=r(apt,"TFAutoModelForMultipleChoice"),apt.forEach(t),FPe.forEach(t),iRe=i(d),Ar=n(d,"DIV",{class:!0});var ai=s(Ar);m(jw.$$.fragment,ai),vmr=i(ai),Gc=n(ai,"P",{});var YW=s(Gc);Tmr=r(YW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),N_e=n(YW,"CODE",{});var npt=s(N_e);Fmr=r(npt,"from_pretrained()"),npt.forEach(t),Cmr=r(YW,"class method or the "),q_e=n(YW,"CODE",{});var spt=s(q_e);Mmr=r(spt,"from_config()"),spt.forEach(t),Emr=r(YW,`class
method.`),YW.forEach(t),ymr=i(ai),Dw=n(ai,"P",{});var CPe=s(Dw);wmr=r(CPe,"This class cannot be instantiated directly using "),O_e=n(CPe,"CODE",{});var lpt=s(O_e);Amr=r(lpt,"__init__()"),lpt.forEach(t),Lmr=r(CPe," (throws an error)."),CPe.forEach(t),Bmr=i(ai),Ct=n(ai,"DIV",{class:!0});var ni=s(Ct);m(Nw.$$.fragment,ni),xmr=i(ni),G_e=n(ni,"P",{});var ipt=s(G_e);kmr=r(ipt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),ipt.forEach(t),Rmr=i(ni),Xc=n(ni,"P",{});var KW=s(Xc);Smr=r(KW,`Note:
Loading a model from its configuration file does `),X_e=n(KW,"STRONG",{});var dpt=s(X_e);Pmr=r(dpt,"not"),dpt.forEach(t),$mr=r(KW,` load the model weights. It only affects the
model\u2019s configuration. Use `),V_e=n(KW,"CODE",{});var cpt=s(V_e);Imr=r(cpt,"from_pretrained()"),cpt.forEach(t),jmr=r(KW,"to load the model weights."),KW.forEach(t),Dmr=i(ni),z_e=n(ni,"P",{});var fpt=s(z_e);Nmr=r(fpt,"Examples:"),fpt.forEach(t),qmr=i(ni),m(qw.$$.fragment,ni),ni.forEach(t),Omr=i(ai),Fo=n(ai,"DIV",{class:!0});var ya=s(Fo);m(Ow.$$.fragment,ya),Gmr=i(ya),W_e=n(ya,"P",{});var mpt=s(W_e);Xmr=r(mpt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),mpt.forEach(t),Vmr=i(ya),An=n(ya,"P",{});var qM=s(An);zmr=r(qM,"The model class to instantiate is selected based on the "),Q_e=n(qM,"CODE",{});var gpt=s(Q_e);Wmr=r(gpt,"model_type"),gpt.forEach(t),Qmr=r(qM,` property of the config object (either
passed as an argument or loaded from `),H_e=n(qM,"CODE",{});var hpt=s(H_e);Hmr=r(hpt,"pretrained_model_name_or_path"),hpt.forEach(t),Umr=r(qM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U_e=n(qM,"CODE",{});var ppt=s(U_e);Jmr=r(ppt,"pretrained_model_name_or_path"),ppt.forEach(t),Ymr=r(qM,":"),qM.forEach(t),Kmr=i(ya),te=n(ya,"UL",{});var se=s(te);GT=n(se,"LI",{});var X7e=s(GT);J_e=n(X7e,"STRONG",{});var _pt=s(J_e);Zmr=r(_pt,"albert"),_pt.forEach(t),egr=r(X7e," \u2014 "),GG=n(X7e,"A",{href:!0});var upt=s(GG);ogr=r(upt,"TFAlbertForMultipleChoice"),upt.forEach(t),rgr=r(X7e," (ALBERT model)"),X7e.forEach(t),tgr=i(se),XT=n(se,"LI",{});var V7e=s(XT);Y_e=n(V7e,"STRONG",{});var bpt=s(Y_e);agr=r(bpt,"bert"),bpt.forEach(t),ngr=r(V7e," \u2014 "),XG=n(V7e,"A",{href:!0});var vpt=s(XG);sgr=r(vpt,"TFBertForMultipleChoice"),vpt.forEach(t),lgr=r(V7e," (BERT model)"),V7e.forEach(t),igr=i(se),VT=n(se,"LI",{});var z7e=s(VT);K_e=n(z7e,"STRONG",{});var Tpt=s(K_e);dgr=r(Tpt,"camembert"),Tpt.forEach(t),cgr=r(z7e," \u2014 "),VG=n(z7e,"A",{href:!0});var Fpt=s(VG);fgr=r(Fpt,"TFCamembertForMultipleChoice"),Fpt.forEach(t),mgr=r(z7e," (CamemBERT model)"),z7e.forEach(t),ggr=i(se),zT=n(se,"LI",{});var W7e=s(zT);Z_e=n(W7e,"STRONG",{});var Cpt=s(Z_e);hgr=r(Cpt,"convbert"),Cpt.forEach(t),pgr=r(W7e," \u2014 "),zG=n(W7e,"A",{href:!0});var Mpt=s(zG);_gr=r(Mpt,"TFConvBertForMultipleChoice"),Mpt.forEach(t),ugr=r(W7e," (ConvBERT model)"),W7e.forEach(t),bgr=i(se),WT=n(se,"LI",{});var Q7e=s(WT);eue=n(Q7e,"STRONG",{});var Ept=s(eue);vgr=r(Ept,"distilbert"),Ept.forEach(t),Tgr=r(Q7e," \u2014 "),WG=n(Q7e,"A",{href:!0});var ypt=s(WG);Fgr=r(ypt,"TFDistilBertForMultipleChoice"),ypt.forEach(t),Cgr=r(Q7e," (DistilBERT model)"),Q7e.forEach(t),Mgr=i(se),QT=n(se,"LI",{});var H7e=s(QT);oue=n(H7e,"STRONG",{});var wpt=s(oue);Egr=r(wpt,"electra"),wpt.forEach(t),ygr=r(H7e," \u2014 "),QG=n(H7e,"A",{href:!0});var Apt=s(QG);wgr=r(Apt,"TFElectraForMultipleChoice"),Apt.forEach(t),Agr=r(H7e," (ELECTRA model)"),H7e.forEach(t),Lgr=i(se),HT=n(se,"LI",{});var U7e=s(HT);rue=n(U7e,"STRONG",{});var Lpt=s(rue);Bgr=r(Lpt,"flaubert"),Lpt.forEach(t),xgr=r(U7e," \u2014 "),HG=n(U7e,"A",{href:!0});var Bpt=s(HG);kgr=r(Bpt,"TFFlaubertForMultipleChoice"),Bpt.forEach(t),Rgr=r(U7e," (FlauBERT model)"),U7e.forEach(t),Sgr=i(se),UT=n(se,"LI",{});var J7e=s(UT);tue=n(J7e,"STRONG",{});var xpt=s(tue);Pgr=r(xpt,"funnel"),xpt.forEach(t),$gr=r(J7e," \u2014 "),UG=n(J7e,"A",{href:!0});var kpt=s(UG);Igr=r(kpt,"TFFunnelForMultipleChoice"),kpt.forEach(t),jgr=r(J7e," (Funnel Transformer model)"),J7e.forEach(t),Dgr=i(se),JT=n(se,"LI",{});var Y7e=s(JT);aue=n(Y7e,"STRONG",{});var Rpt=s(aue);Ngr=r(Rpt,"longformer"),Rpt.forEach(t),qgr=r(Y7e," \u2014 "),JG=n(Y7e,"A",{href:!0});var Spt=s(JG);Ogr=r(Spt,"TFLongformerForMultipleChoice"),Spt.forEach(t),Ggr=r(Y7e," (Longformer model)"),Y7e.forEach(t),Xgr=i(se),YT=n(se,"LI",{});var K7e=s(YT);nue=n(K7e,"STRONG",{});var Ppt=s(nue);Vgr=r(Ppt,"mobilebert"),Ppt.forEach(t),zgr=r(K7e," \u2014 "),YG=n(K7e,"A",{href:!0});var $pt=s(YG);Wgr=r($pt,"TFMobileBertForMultipleChoice"),$pt.forEach(t),Qgr=r(K7e," (MobileBERT model)"),K7e.forEach(t),Hgr=i(se),KT=n(se,"LI",{});var Z7e=s(KT);sue=n(Z7e,"STRONG",{});var Ipt=s(sue);Ugr=r(Ipt,"mpnet"),Ipt.forEach(t),Jgr=r(Z7e," \u2014 "),KG=n(Z7e,"A",{href:!0});var jpt=s(KG);Ygr=r(jpt,"TFMPNetForMultipleChoice"),jpt.forEach(t),Kgr=r(Z7e," (MPNet model)"),Z7e.forEach(t),Zgr=i(se),ZT=n(se,"LI",{});var e9e=s(ZT);lue=n(e9e,"STRONG",{});var Dpt=s(lue);ehr=r(Dpt,"rembert"),Dpt.forEach(t),ohr=r(e9e," \u2014 "),ZG=n(e9e,"A",{href:!0});var Npt=s(ZG);rhr=r(Npt,"TFRemBertForMultipleChoice"),Npt.forEach(t),thr=r(e9e," (RemBERT model)"),e9e.forEach(t),ahr=i(se),e8=n(se,"LI",{});var o9e=s(e8);iue=n(o9e,"STRONG",{});var qpt=s(iue);nhr=r(qpt,"roberta"),qpt.forEach(t),shr=r(o9e," \u2014 "),eX=n(o9e,"A",{href:!0});var Opt=s(eX);lhr=r(Opt,"TFRobertaForMultipleChoice"),Opt.forEach(t),ihr=r(o9e," (RoBERTa model)"),o9e.forEach(t),dhr=i(se),o8=n(se,"LI",{});var r9e=s(o8);due=n(r9e,"STRONG",{});var Gpt=s(due);chr=r(Gpt,"roformer"),Gpt.forEach(t),fhr=r(r9e," \u2014 "),oX=n(r9e,"A",{href:!0});var Xpt=s(oX);mhr=r(Xpt,"TFRoFormerForMultipleChoice"),Xpt.forEach(t),ghr=r(r9e," (RoFormer model)"),r9e.forEach(t),hhr=i(se),r8=n(se,"LI",{});var t9e=s(r8);cue=n(t9e,"STRONG",{});var Vpt=s(cue);phr=r(Vpt,"xlm"),Vpt.forEach(t),_hr=r(t9e," \u2014 "),rX=n(t9e,"A",{href:!0});var zpt=s(rX);uhr=r(zpt,"TFXLMForMultipleChoice"),zpt.forEach(t),bhr=r(t9e," (XLM model)"),t9e.forEach(t),vhr=i(se),t8=n(se,"LI",{});var a9e=s(t8);fue=n(a9e,"STRONG",{});var Wpt=s(fue);Thr=r(Wpt,"xlm-roberta"),Wpt.forEach(t),Fhr=r(a9e," \u2014 "),tX=n(a9e,"A",{href:!0});var Qpt=s(tX);Chr=r(Qpt,"TFXLMRobertaForMultipleChoice"),Qpt.forEach(t),Mhr=r(a9e," (XLM-RoBERTa model)"),a9e.forEach(t),Ehr=i(se),a8=n(se,"LI",{});var n9e=s(a8);mue=n(n9e,"STRONG",{});var Hpt=s(mue);yhr=r(Hpt,"xlnet"),Hpt.forEach(t),whr=r(n9e," \u2014 "),aX=n(n9e,"A",{href:!0});var Upt=s(aX);Ahr=r(Upt,"TFXLNetForMultipleChoice"),Upt.forEach(t),Lhr=r(n9e," (XLNet model)"),n9e.forEach(t),se.forEach(t),Bhr=i(ya),gue=n(ya,"P",{});var Jpt=s(gue);xhr=r(Jpt,"Examples:"),Jpt.forEach(t),khr=i(ya),m(Gw.$$.fragment,ya),ya.forEach(t),ai.forEach(t),dRe=i(d),Vc=n(d,"H2",{class:!0});var MPe=s(Vc);n8=n(MPe,"A",{id:!0,class:!0,href:!0});var Ypt=s(n8);hue=n(Ypt,"SPAN",{});var Kpt=s(hue);m(Xw.$$.fragment,Kpt),Kpt.forEach(t),Ypt.forEach(t),Rhr=i(MPe),pue=n(MPe,"SPAN",{});var Zpt=s(pue);Shr=r(Zpt,"TFAutoModelForTableQuestionAnswering"),Zpt.forEach(t),MPe.forEach(t),cRe=i(d),Lr=n(d,"DIV",{class:!0});var si=s(Lr);m(Vw.$$.fragment,si),Phr=i(si),zc=n(si,"P",{});var ZW=s(zc);$hr=r(ZW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),_ue=n(ZW,"CODE",{});var e_t=s(_ue);Ihr=r(e_t,"from_pretrained()"),e_t.forEach(t),jhr=r(ZW,"class method or the "),uue=n(ZW,"CODE",{});var o_t=s(uue);Dhr=r(o_t,"from_config()"),o_t.forEach(t),Nhr=r(ZW,`class
method.`),ZW.forEach(t),qhr=i(si),zw=n(si,"P",{});var EPe=s(zw);Ohr=r(EPe,"This class cannot be instantiated directly using "),bue=n(EPe,"CODE",{});var r_t=s(bue);Ghr=r(r_t,"__init__()"),r_t.forEach(t),Xhr=r(EPe," (throws an error)."),EPe.forEach(t),Vhr=i(si),Mt=n(si,"DIV",{class:!0});var li=s(Mt);m(Ww.$$.fragment,li),zhr=i(li),vue=n(li,"P",{});var t_t=s(vue);Whr=r(t_t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),t_t.forEach(t),Qhr=i(li),Wc=n(li,"P",{});var eQ=s(Wc);Hhr=r(eQ,`Note:
Loading a model from its configuration file does `),Tue=n(eQ,"STRONG",{});var a_t=s(Tue);Uhr=r(a_t,"not"),a_t.forEach(t),Jhr=r(eQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fue=n(eQ,"CODE",{});var n_t=s(Fue);Yhr=r(n_t,"from_pretrained()"),n_t.forEach(t),Khr=r(eQ,"to load the model weights."),eQ.forEach(t),Zhr=i(li),Cue=n(li,"P",{});var s_t=s(Cue);epr=r(s_t,"Examples:"),s_t.forEach(t),opr=i(li),m(Qw.$$.fragment,li),li.forEach(t),rpr=i(si),Co=n(si,"DIV",{class:!0});var wa=s(Co);m(Hw.$$.fragment,wa),tpr=i(wa),Mue=n(wa,"P",{});var l_t=s(Mue);apr=r(l_t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),l_t.forEach(t),npr=i(wa),Ln=n(wa,"P",{});var OM=s(Ln);spr=r(OM,"The model class to instantiate is selected based on the "),Eue=n(OM,"CODE",{});var i_t=s(Eue);lpr=r(i_t,"model_type"),i_t.forEach(t),ipr=r(OM,` property of the config object (either
passed as an argument or loaded from `),yue=n(OM,"CODE",{});var d_t=s(yue);dpr=r(d_t,"pretrained_model_name_or_path"),d_t.forEach(t),cpr=r(OM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wue=n(OM,"CODE",{});var c_t=s(wue);fpr=r(c_t,"pretrained_model_name_or_path"),c_t.forEach(t),mpr=r(OM,":"),OM.forEach(t),gpr=i(wa),Aue=n(wa,"UL",{});var f_t=s(Aue);s8=n(f_t,"LI",{});var s9e=s(s8);Lue=n(s9e,"STRONG",{});var m_t=s(Lue);hpr=r(m_t,"tapas"),m_t.forEach(t),ppr=r(s9e," \u2014 "),nX=n(s9e,"A",{href:!0});var g_t=s(nX);_pr=r(g_t,"TFTapasForQuestionAnswering"),g_t.forEach(t),upr=r(s9e," (TAPAS model)"),s9e.forEach(t),f_t.forEach(t),bpr=i(wa),Bue=n(wa,"P",{});var h_t=s(Bue);vpr=r(h_t,"Examples:"),h_t.forEach(t),Tpr=i(wa),m(Uw.$$.fragment,wa),wa.forEach(t),si.forEach(t),fRe=i(d),Qc=n(d,"H2",{class:!0});var yPe=s(Qc);l8=n(yPe,"A",{id:!0,class:!0,href:!0});var p_t=s(l8);xue=n(p_t,"SPAN",{});var __t=s(xue);m(Jw.$$.fragment,__t),__t.forEach(t),p_t.forEach(t),Fpr=i(yPe),kue=n(yPe,"SPAN",{});var u_t=s(kue);Cpr=r(u_t,"TFAutoModelForTokenClassification"),u_t.forEach(t),yPe.forEach(t),mRe=i(d),Br=n(d,"DIV",{class:!0});var ii=s(Br);m(Yw.$$.fragment,ii),Mpr=i(ii),Hc=n(ii,"P",{});var oQ=s(Hc);Epr=r(oQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Rue=n(oQ,"CODE",{});var b_t=s(Rue);ypr=r(b_t,"from_pretrained()"),b_t.forEach(t),wpr=r(oQ,"class method or the "),Sue=n(oQ,"CODE",{});var v_t=s(Sue);Apr=r(v_t,"from_config()"),v_t.forEach(t),Lpr=r(oQ,`class
method.`),oQ.forEach(t),Bpr=i(ii),Kw=n(ii,"P",{});var wPe=s(Kw);xpr=r(wPe,"This class cannot be instantiated directly using "),Pue=n(wPe,"CODE",{});var T_t=s(Pue);kpr=r(T_t,"__init__()"),T_t.forEach(t),Rpr=r(wPe," (throws an error)."),wPe.forEach(t),Spr=i(ii),Et=n(ii,"DIV",{class:!0});var di=s(Et);m(Zw.$$.fragment,di),Ppr=i(di),$ue=n(di,"P",{});var F_t=s($ue);$pr=r(F_t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),F_t.forEach(t),Ipr=i(di),Uc=n(di,"P",{});var rQ=s(Uc);jpr=r(rQ,`Note:
Loading a model from its configuration file does `),Iue=n(rQ,"STRONG",{});var C_t=s(Iue);Dpr=r(C_t,"not"),C_t.forEach(t),Npr=r(rQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),jue=n(rQ,"CODE",{});var M_t=s(jue);qpr=r(M_t,"from_pretrained()"),M_t.forEach(t),Opr=r(rQ,"to load the model weights."),rQ.forEach(t),Gpr=i(di),Due=n(di,"P",{});var E_t=s(Due);Xpr=r(E_t,"Examples:"),E_t.forEach(t),Vpr=i(di),m(eA.$$.fragment,di),di.forEach(t),zpr=i(ii),Mo=n(ii,"DIV",{class:!0});var Aa=s(Mo);m(oA.$$.fragment,Aa),Wpr=i(Aa),Nue=n(Aa,"P",{});var y_t=s(Nue);Qpr=r(y_t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),y_t.forEach(t),Hpr=i(Aa),Bn=n(Aa,"P",{});var GM=s(Bn);Upr=r(GM,"The model class to instantiate is selected based on the "),que=n(GM,"CODE",{});var w_t=s(que);Jpr=r(w_t,"model_type"),w_t.forEach(t),Ypr=r(GM,` property of the config object (either
passed as an argument or loaded from `),Oue=n(GM,"CODE",{});var A_t=s(Oue);Kpr=r(A_t,"pretrained_model_name_or_path"),A_t.forEach(t),Zpr=r(GM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gue=n(GM,"CODE",{});var L_t=s(Gue);e_r=r(L_t,"pretrained_model_name_or_path"),L_t.forEach(t),o_r=r(GM,":"),GM.forEach(t),r_r=i(Aa),K=n(Aa,"UL",{});var oe=s(K);i8=n(oe,"LI",{});var l9e=s(i8);Xue=n(l9e,"STRONG",{});var B_t=s(Xue);t_r=r(B_t,"albert"),B_t.forEach(t),a_r=r(l9e," \u2014 "),sX=n(l9e,"A",{href:!0});var x_t=s(sX);n_r=r(x_t,"TFAlbertForTokenClassification"),x_t.forEach(t),s_r=r(l9e," (ALBERT model)"),l9e.forEach(t),l_r=i(oe),d8=n(oe,"LI",{});var i9e=s(d8);Vue=n(i9e,"STRONG",{});var k_t=s(Vue);i_r=r(k_t,"bert"),k_t.forEach(t),d_r=r(i9e," \u2014 "),lX=n(i9e,"A",{href:!0});var R_t=s(lX);c_r=r(R_t,"TFBertForTokenClassification"),R_t.forEach(t),f_r=r(i9e," (BERT model)"),i9e.forEach(t),m_r=i(oe),c8=n(oe,"LI",{});var d9e=s(c8);zue=n(d9e,"STRONG",{});var S_t=s(zue);g_r=r(S_t,"camembert"),S_t.forEach(t),h_r=r(d9e," \u2014 "),iX=n(d9e,"A",{href:!0});var P_t=s(iX);p_r=r(P_t,"TFCamembertForTokenClassification"),P_t.forEach(t),__r=r(d9e," (CamemBERT model)"),d9e.forEach(t),u_r=i(oe),f8=n(oe,"LI",{});var c9e=s(f8);Wue=n(c9e,"STRONG",{});var $_t=s(Wue);b_r=r($_t,"convbert"),$_t.forEach(t),v_r=r(c9e," \u2014 "),dX=n(c9e,"A",{href:!0});var I_t=s(dX);T_r=r(I_t,"TFConvBertForTokenClassification"),I_t.forEach(t),F_r=r(c9e," (ConvBERT model)"),c9e.forEach(t),C_r=i(oe),m8=n(oe,"LI",{});var f9e=s(m8);Que=n(f9e,"STRONG",{});var j_t=s(Que);M_r=r(j_t,"deberta"),j_t.forEach(t),E_r=r(f9e," \u2014 "),cX=n(f9e,"A",{href:!0});var D_t=s(cX);y_r=r(D_t,"TFDebertaForTokenClassification"),D_t.forEach(t),w_r=r(f9e," (DeBERTa model)"),f9e.forEach(t),A_r=i(oe),g8=n(oe,"LI",{});var m9e=s(g8);Hue=n(m9e,"STRONG",{});var N_t=s(Hue);L_r=r(N_t,"deberta-v2"),N_t.forEach(t),B_r=r(m9e," \u2014 "),fX=n(m9e,"A",{href:!0});var q_t=s(fX);x_r=r(q_t,"TFDebertaV2ForTokenClassification"),q_t.forEach(t),k_r=r(m9e," (DeBERTa-v2 model)"),m9e.forEach(t),R_r=i(oe),h8=n(oe,"LI",{});var g9e=s(h8);Uue=n(g9e,"STRONG",{});var O_t=s(Uue);S_r=r(O_t,"distilbert"),O_t.forEach(t),P_r=r(g9e," \u2014 "),mX=n(g9e,"A",{href:!0});var G_t=s(mX);$_r=r(G_t,"TFDistilBertForTokenClassification"),G_t.forEach(t),I_r=r(g9e," (DistilBERT model)"),g9e.forEach(t),j_r=i(oe),p8=n(oe,"LI",{});var h9e=s(p8);Jue=n(h9e,"STRONG",{});var X_t=s(Jue);D_r=r(X_t,"electra"),X_t.forEach(t),N_r=r(h9e," \u2014 "),gX=n(h9e,"A",{href:!0});var V_t=s(gX);q_r=r(V_t,"TFElectraForTokenClassification"),V_t.forEach(t),O_r=r(h9e," (ELECTRA model)"),h9e.forEach(t),G_r=i(oe),_8=n(oe,"LI",{});var p9e=s(_8);Yue=n(p9e,"STRONG",{});var z_t=s(Yue);X_r=r(z_t,"flaubert"),z_t.forEach(t),V_r=r(p9e," \u2014 "),hX=n(p9e,"A",{href:!0});var W_t=s(hX);z_r=r(W_t,"TFFlaubertForTokenClassification"),W_t.forEach(t),W_r=r(p9e," (FlauBERT model)"),p9e.forEach(t),Q_r=i(oe),u8=n(oe,"LI",{});var _9e=s(u8);Kue=n(_9e,"STRONG",{});var Q_t=s(Kue);H_r=r(Q_t,"funnel"),Q_t.forEach(t),U_r=r(_9e," \u2014 "),pX=n(_9e,"A",{href:!0});var H_t=s(pX);J_r=r(H_t,"TFFunnelForTokenClassification"),H_t.forEach(t),Y_r=r(_9e," (Funnel Transformer model)"),_9e.forEach(t),K_r=i(oe),b8=n(oe,"LI",{});var u9e=s(b8);Zue=n(u9e,"STRONG",{});var U_t=s(Zue);Z_r=r(U_t,"layoutlm"),U_t.forEach(t),eur=r(u9e," \u2014 "),_X=n(u9e,"A",{href:!0});var J_t=s(_X);our=r(J_t,"TFLayoutLMForTokenClassification"),J_t.forEach(t),rur=r(u9e," (LayoutLM model)"),u9e.forEach(t),tur=i(oe),v8=n(oe,"LI",{});var b9e=s(v8);e1e=n(b9e,"STRONG",{});var Y_t=s(e1e);aur=r(Y_t,"longformer"),Y_t.forEach(t),nur=r(b9e," \u2014 "),uX=n(b9e,"A",{href:!0});var K_t=s(uX);sur=r(K_t,"TFLongformerForTokenClassification"),K_t.forEach(t),lur=r(b9e," (Longformer model)"),b9e.forEach(t),iur=i(oe),T8=n(oe,"LI",{});var v9e=s(T8);o1e=n(v9e,"STRONG",{});var Z_t=s(o1e);dur=r(Z_t,"mobilebert"),Z_t.forEach(t),cur=r(v9e," \u2014 "),bX=n(v9e,"A",{href:!0});var eut=s(bX);fur=r(eut,"TFMobileBertForTokenClassification"),eut.forEach(t),mur=r(v9e," (MobileBERT model)"),v9e.forEach(t),gur=i(oe),F8=n(oe,"LI",{});var T9e=s(F8);r1e=n(T9e,"STRONG",{});var out=s(r1e);hur=r(out,"mpnet"),out.forEach(t),pur=r(T9e," \u2014 "),vX=n(T9e,"A",{href:!0});var rut=s(vX);_ur=r(rut,"TFMPNetForTokenClassification"),rut.forEach(t),uur=r(T9e," (MPNet model)"),T9e.forEach(t),bur=i(oe),C8=n(oe,"LI",{});var F9e=s(C8);t1e=n(F9e,"STRONG",{});var tut=s(t1e);vur=r(tut,"rembert"),tut.forEach(t),Tur=r(F9e," \u2014 "),TX=n(F9e,"A",{href:!0});var aut=s(TX);Fur=r(aut,"TFRemBertForTokenClassification"),aut.forEach(t),Cur=r(F9e," (RemBERT model)"),F9e.forEach(t),Mur=i(oe),M8=n(oe,"LI",{});var C9e=s(M8);a1e=n(C9e,"STRONG",{});var nut=s(a1e);Eur=r(nut,"roberta"),nut.forEach(t),yur=r(C9e," \u2014 "),FX=n(C9e,"A",{href:!0});var sut=s(FX);wur=r(sut,"TFRobertaForTokenClassification"),sut.forEach(t),Aur=r(C9e," (RoBERTa model)"),C9e.forEach(t),Lur=i(oe),E8=n(oe,"LI",{});var M9e=s(E8);n1e=n(M9e,"STRONG",{});var lut=s(n1e);Bur=r(lut,"roformer"),lut.forEach(t),xur=r(M9e," \u2014 "),CX=n(M9e,"A",{href:!0});var iut=s(CX);kur=r(iut,"TFRoFormerForTokenClassification"),iut.forEach(t),Rur=r(M9e," (RoFormer model)"),M9e.forEach(t),Sur=i(oe),y8=n(oe,"LI",{});var E9e=s(y8);s1e=n(E9e,"STRONG",{});var dut=s(s1e);Pur=r(dut,"xlm"),dut.forEach(t),$ur=r(E9e," \u2014 "),MX=n(E9e,"A",{href:!0});var cut=s(MX);Iur=r(cut,"TFXLMForTokenClassification"),cut.forEach(t),jur=r(E9e," (XLM model)"),E9e.forEach(t),Dur=i(oe),w8=n(oe,"LI",{});var y9e=s(w8);l1e=n(y9e,"STRONG",{});var fut=s(l1e);Nur=r(fut,"xlm-roberta"),fut.forEach(t),qur=r(y9e," \u2014 "),EX=n(y9e,"A",{href:!0});var mut=s(EX);Our=r(mut,"TFXLMRobertaForTokenClassification"),mut.forEach(t),Gur=r(y9e," (XLM-RoBERTa model)"),y9e.forEach(t),Xur=i(oe),A8=n(oe,"LI",{});var w9e=s(A8);i1e=n(w9e,"STRONG",{});var gut=s(i1e);Vur=r(gut,"xlnet"),gut.forEach(t),zur=r(w9e," \u2014 "),yX=n(w9e,"A",{href:!0});var hut=s(yX);Wur=r(hut,"TFXLNetForTokenClassification"),hut.forEach(t),Qur=r(w9e," (XLNet model)"),w9e.forEach(t),oe.forEach(t),Hur=i(Aa),d1e=n(Aa,"P",{});var put=s(d1e);Uur=r(put,"Examples:"),put.forEach(t),Jur=i(Aa),m(rA.$$.fragment,Aa),Aa.forEach(t),ii.forEach(t),gRe=i(d),Jc=n(d,"H2",{class:!0});var APe=s(Jc);L8=n(APe,"A",{id:!0,class:!0,href:!0});var _ut=s(L8);c1e=n(_ut,"SPAN",{});var uut=s(c1e);m(tA.$$.fragment,uut),uut.forEach(t),_ut.forEach(t),Yur=i(APe),f1e=n(APe,"SPAN",{});var but=s(f1e);Kur=r(but,"TFAutoModelForQuestionAnswering"),but.forEach(t),APe.forEach(t),hRe=i(d),xr=n(d,"DIV",{class:!0});var ci=s(xr);m(aA.$$.fragment,ci),Zur=i(ci),Yc=n(ci,"P",{});var tQ=s(Yc);e1r=r(tQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),m1e=n(tQ,"CODE",{});var vut=s(m1e);o1r=r(vut,"from_pretrained()"),vut.forEach(t),r1r=r(tQ,"class method or the "),g1e=n(tQ,"CODE",{});var Tut=s(g1e);t1r=r(Tut,"from_config()"),Tut.forEach(t),a1r=r(tQ,`class
method.`),tQ.forEach(t),n1r=i(ci),nA=n(ci,"P",{});var LPe=s(nA);s1r=r(LPe,"This class cannot be instantiated directly using "),h1e=n(LPe,"CODE",{});var Fut=s(h1e);l1r=r(Fut,"__init__()"),Fut.forEach(t),i1r=r(LPe," (throws an error)."),LPe.forEach(t),d1r=i(ci),yt=n(ci,"DIV",{class:!0});var fi=s(yt);m(sA.$$.fragment,fi),c1r=i(fi),p1e=n(fi,"P",{});var Cut=s(p1e);f1r=r(Cut,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Cut.forEach(t),m1r=i(fi),Kc=n(fi,"P",{});var aQ=s(Kc);g1r=r(aQ,`Note:
Loading a model from its configuration file does `),_1e=n(aQ,"STRONG",{});var Mut=s(_1e);h1r=r(Mut,"not"),Mut.forEach(t),p1r=r(aQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),u1e=n(aQ,"CODE",{});var Eut=s(u1e);_1r=r(Eut,"from_pretrained()"),Eut.forEach(t),u1r=r(aQ,"to load the model weights."),aQ.forEach(t),b1r=i(fi),b1e=n(fi,"P",{});var yut=s(b1e);v1r=r(yut,"Examples:"),yut.forEach(t),T1r=i(fi),m(lA.$$.fragment,fi),fi.forEach(t),F1r=i(ci),Eo=n(ci,"DIV",{class:!0});var La=s(Eo);m(iA.$$.fragment,La),C1r=i(La),v1e=n(La,"P",{});var wut=s(v1e);M1r=r(wut,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),wut.forEach(t),E1r=i(La),xn=n(La,"P",{});var XM=s(xn);y1r=r(XM,"The model class to instantiate is selected based on the "),T1e=n(XM,"CODE",{});var Aut=s(T1e);w1r=r(Aut,"model_type"),Aut.forEach(t),A1r=r(XM,` property of the config object (either
passed as an argument or loaded from `),F1e=n(XM,"CODE",{});var Lut=s(F1e);L1r=r(Lut,"pretrained_model_name_or_path"),Lut.forEach(t),B1r=r(XM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C1e=n(XM,"CODE",{});var But=s(C1e);x1r=r(But,"pretrained_model_name_or_path"),But.forEach(t),k1r=r(XM,":"),XM.forEach(t),R1r=i(La),Z=n(La,"UL",{});var re=s(Z);B8=n(re,"LI",{});var A9e=s(B8);M1e=n(A9e,"STRONG",{});var xut=s(M1e);S1r=r(xut,"albert"),xut.forEach(t),P1r=r(A9e," \u2014 "),wX=n(A9e,"A",{href:!0});var kut=s(wX);$1r=r(kut,"TFAlbertForQuestionAnswering"),kut.forEach(t),I1r=r(A9e," (ALBERT model)"),A9e.forEach(t),j1r=i(re),x8=n(re,"LI",{});var L9e=s(x8);E1e=n(L9e,"STRONG",{});var Rut=s(E1e);D1r=r(Rut,"bert"),Rut.forEach(t),N1r=r(L9e," \u2014 "),AX=n(L9e,"A",{href:!0});var Sut=s(AX);q1r=r(Sut,"TFBertForQuestionAnswering"),Sut.forEach(t),O1r=r(L9e," (BERT model)"),L9e.forEach(t),G1r=i(re),k8=n(re,"LI",{});var B9e=s(k8);y1e=n(B9e,"STRONG",{});var Put=s(y1e);X1r=r(Put,"camembert"),Put.forEach(t),V1r=r(B9e," \u2014 "),LX=n(B9e,"A",{href:!0});var $ut=s(LX);z1r=r($ut,"TFCamembertForQuestionAnswering"),$ut.forEach(t),W1r=r(B9e," (CamemBERT model)"),B9e.forEach(t),Q1r=i(re),R8=n(re,"LI",{});var x9e=s(R8);w1e=n(x9e,"STRONG",{});var Iut=s(w1e);H1r=r(Iut,"convbert"),Iut.forEach(t),U1r=r(x9e," \u2014 "),BX=n(x9e,"A",{href:!0});var jut=s(BX);J1r=r(jut,"TFConvBertForQuestionAnswering"),jut.forEach(t),Y1r=r(x9e," (ConvBERT model)"),x9e.forEach(t),K1r=i(re),S8=n(re,"LI",{});var k9e=s(S8);A1e=n(k9e,"STRONG",{});var Dut=s(A1e);Z1r=r(Dut,"deberta"),Dut.forEach(t),ebr=r(k9e," \u2014 "),xX=n(k9e,"A",{href:!0});var Nut=s(xX);obr=r(Nut,"TFDebertaForQuestionAnswering"),Nut.forEach(t),rbr=r(k9e," (DeBERTa model)"),k9e.forEach(t),tbr=i(re),P8=n(re,"LI",{});var R9e=s(P8);L1e=n(R9e,"STRONG",{});var qut=s(L1e);abr=r(qut,"deberta-v2"),qut.forEach(t),nbr=r(R9e," \u2014 "),kX=n(R9e,"A",{href:!0});var Out=s(kX);sbr=r(Out,"TFDebertaV2ForQuestionAnswering"),Out.forEach(t),lbr=r(R9e," (DeBERTa-v2 model)"),R9e.forEach(t),ibr=i(re),$8=n(re,"LI",{});var S9e=s($8);B1e=n(S9e,"STRONG",{});var Gut=s(B1e);dbr=r(Gut,"distilbert"),Gut.forEach(t),cbr=r(S9e," \u2014 "),RX=n(S9e,"A",{href:!0});var Xut=s(RX);fbr=r(Xut,"TFDistilBertForQuestionAnswering"),Xut.forEach(t),mbr=r(S9e," (DistilBERT model)"),S9e.forEach(t),gbr=i(re),I8=n(re,"LI",{});var P9e=s(I8);x1e=n(P9e,"STRONG",{});var Vut=s(x1e);hbr=r(Vut,"electra"),Vut.forEach(t),pbr=r(P9e," \u2014 "),SX=n(P9e,"A",{href:!0});var zut=s(SX);_br=r(zut,"TFElectraForQuestionAnswering"),zut.forEach(t),ubr=r(P9e," (ELECTRA model)"),P9e.forEach(t),bbr=i(re),j8=n(re,"LI",{});var $9e=s(j8);k1e=n($9e,"STRONG",{});var Wut=s(k1e);vbr=r(Wut,"flaubert"),Wut.forEach(t),Tbr=r($9e," \u2014 "),PX=n($9e,"A",{href:!0});var Qut=s(PX);Fbr=r(Qut,"TFFlaubertForQuestionAnsweringSimple"),Qut.forEach(t),Cbr=r($9e," (FlauBERT model)"),$9e.forEach(t),Mbr=i(re),D8=n(re,"LI",{});var I9e=s(D8);R1e=n(I9e,"STRONG",{});var Hut=s(R1e);Ebr=r(Hut,"funnel"),Hut.forEach(t),ybr=r(I9e," \u2014 "),$X=n(I9e,"A",{href:!0});var Uut=s($X);wbr=r(Uut,"TFFunnelForQuestionAnswering"),Uut.forEach(t),Abr=r(I9e," (Funnel Transformer model)"),I9e.forEach(t),Lbr=i(re),N8=n(re,"LI",{});var j9e=s(N8);S1e=n(j9e,"STRONG",{});var Jut=s(S1e);Bbr=r(Jut,"longformer"),Jut.forEach(t),xbr=r(j9e," \u2014 "),IX=n(j9e,"A",{href:!0});var Yut=s(IX);kbr=r(Yut,"TFLongformerForQuestionAnswering"),Yut.forEach(t),Rbr=r(j9e," (Longformer model)"),j9e.forEach(t),Sbr=i(re),q8=n(re,"LI",{});var D9e=s(q8);P1e=n(D9e,"STRONG",{});var Kut=s(P1e);Pbr=r(Kut,"mobilebert"),Kut.forEach(t),$br=r(D9e," \u2014 "),jX=n(D9e,"A",{href:!0});var Zut=s(jX);Ibr=r(Zut,"TFMobileBertForQuestionAnswering"),Zut.forEach(t),jbr=r(D9e," (MobileBERT model)"),D9e.forEach(t),Dbr=i(re),O8=n(re,"LI",{});var N9e=s(O8);$1e=n(N9e,"STRONG",{});var e1t=s($1e);Nbr=r(e1t,"mpnet"),e1t.forEach(t),qbr=r(N9e," \u2014 "),DX=n(N9e,"A",{href:!0});var o1t=s(DX);Obr=r(o1t,"TFMPNetForQuestionAnswering"),o1t.forEach(t),Gbr=r(N9e," (MPNet model)"),N9e.forEach(t),Xbr=i(re),G8=n(re,"LI",{});var q9e=s(G8);I1e=n(q9e,"STRONG",{});var r1t=s(I1e);Vbr=r(r1t,"rembert"),r1t.forEach(t),zbr=r(q9e," \u2014 "),NX=n(q9e,"A",{href:!0});var t1t=s(NX);Wbr=r(t1t,"TFRemBertForQuestionAnswering"),t1t.forEach(t),Qbr=r(q9e," (RemBERT model)"),q9e.forEach(t),Hbr=i(re),X8=n(re,"LI",{});var O9e=s(X8);j1e=n(O9e,"STRONG",{});var a1t=s(j1e);Ubr=r(a1t,"roberta"),a1t.forEach(t),Jbr=r(O9e," \u2014 "),qX=n(O9e,"A",{href:!0});var n1t=s(qX);Ybr=r(n1t,"TFRobertaForQuestionAnswering"),n1t.forEach(t),Kbr=r(O9e," (RoBERTa model)"),O9e.forEach(t),Zbr=i(re),V8=n(re,"LI",{});var G9e=s(V8);D1e=n(G9e,"STRONG",{});var s1t=s(D1e);e5r=r(s1t,"roformer"),s1t.forEach(t),o5r=r(G9e," \u2014 "),OX=n(G9e,"A",{href:!0});var l1t=s(OX);r5r=r(l1t,"TFRoFormerForQuestionAnswering"),l1t.forEach(t),t5r=r(G9e," (RoFormer model)"),G9e.forEach(t),a5r=i(re),z8=n(re,"LI",{});var X9e=s(z8);N1e=n(X9e,"STRONG",{});var i1t=s(N1e);n5r=r(i1t,"xlm"),i1t.forEach(t),s5r=r(X9e," \u2014 "),GX=n(X9e,"A",{href:!0});var d1t=s(GX);l5r=r(d1t,"TFXLMForQuestionAnsweringSimple"),d1t.forEach(t),i5r=r(X9e," (XLM model)"),X9e.forEach(t),d5r=i(re),W8=n(re,"LI",{});var V9e=s(W8);q1e=n(V9e,"STRONG",{});var c1t=s(q1e);c5r=r(c1t,"xlm-roberta"),c1t.forEach(t),f5r=r(V9e," \u2014 "),XX=n(V9e,"A",{href:!0});var f1t=s(XX);m5r=r(f1t,"TFXLMRobertaForQuestionAnswering"),f1t.forEach(t),g5r=r(V9e," (XLM-RoBERTa model)"),V9e.forEach(t),h5r=i(re),Q8=n(re,"LI",{});var z9e=s(Q8);O1e=n(z9e,"STRONG",{});var m1t=s(O1e);p5r=r(m1t,"xlnet"),m1t.forEach(t),_5r=r(z9e," \u2014 "),VX=n(z9e,"A",{href:!0});var g1t=s(VX);u5r=r(g1t,"TFXLNetForQuestionAnsweringSimple"),g1t.forEach(t),b5r=r(z9e," (XLNet model)"),z9e.forEach(t),re.forEach(t),v5r=i(La),G1e=n(La,"P",{});var h1t=s(G1e);T5r=r(h1t,"Examples:"),h1t.forEach(t),F5r=i(La),m(dA.$$.fragment,La),La.forEach(t),ci.forEach(t),pRe=i(d),Zc=n(d,"H2",{class:!0});var BPe=s(Zc);H8=n(BPe,"A",{id:!0,class:!0,href:!0});var p1t=s(H8);X1e=n(p1t,"SPAN",{});var _1t=s(X1e);m(cA.$$.fragment,_1t),_1t.forEach(t),p1t.forEach(t),C5r=i(BPe),V1e=n(BPe,"SPAN",{});var u1t=s(V1e);M5r=r(u1t,"TFAutoModelForVision2Seq"),u1t.forEach(t),BPe.forEach(t),_Re=i(d),kr=n(d,"DIV",{class:!0});var mi=s(kr);m(fA.$$.fragment,mi),E5r=i(mi),ef=n(mi,"P",{});var nQ=s(ef);y5r=r(nQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),z1e=n(nQ,"CODE",{});var b1t=s(z1e);w5r=r(b1t,"from_pretrained()"),b1t.forEach(t),A5r=r(nQ,"class method or the "),W1e=n(nQ,"CODE",{});var v1t=s(W1e);L5r=r(v1t,"from_config()"),v1t.forEach(t),B5r=r(nQ,`class
method.`),nQ.forEach(t),x5r=i(mi),mA=n(mi,"P",{});var xPe=s(mA);k5r=r(xPe,"This class cannot be instantiated directly using "),Q1e=n(xPe,"CODE",{});var T1t=s(Q1e);R5r=r(T1t,"__init__()"),T1t.forEach(t),S5r=r(xPe," (throws an error)."),xPe.forEach(t),P5r=i(mi),wt=n(mi,"DIV",{class:!0});var gi=s(wt);m(gA.$$.fragment,gi),$5r=i(gi),H1e=n(gi,"P",{});var F1t=s(H1e);I5r=r(F1t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),F1t.forEach(t),j5r=i(gi),of=n(gi,"P",{});var sQ=s(of);D5r=r(sQ,`Note:
Loading a model from its configuration file does `),U1e=n(sQ,"STRONG",{});var C1t=s(U1e);N5r=r(C1t,"not"),C1t.forEach(t),q5r=r(sQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),J1e=n(sQ,"CODE",{});var M1t=s(J1e);O5r=r(M1t,"from_pretrained()"),M1t.forEach(t),G5r=r(sQ,"to load the model weights."),sQ.forEach(t),X5r=i(gi),Y1e=n(gi,"P",{});var E1t=s(Y1e);V5r=r(E1t,"Examples:"),E1t.forEach(t),z5r=i(gi),m(hA.$$.fragment,gi),gi.forEach(t),W5r=i(mi),yo=n(mi,"DIV",{class:!0});var Ba=s(yo);m(pA.$$.fragment,Ba),Q5r=i(Ba),K1e=n(Ba,"P",{});var y1t=s(K1e);H5r=r(y1t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),y1t.forEach(t),U5r=i(Ba),kn=n(Ba,"P",{});var VM=s(kn);J5r=r(VM,"The model class to instantiate is selected based on the "),Z1e=n(VM,"CODE",{});var w1t=s(Z1e);Y5r=r(w1t,"model_type"),w1t.forEach(t),K5r=r(VM,` property of the config object (either
passed as an argument or loaded from `),ebe=n(VM,"CODE",{});var A1t=s(ebe);Z5r=r(A1t,"pretrained_model_name_or_path"),A1t.forEach(t),e2r=r(VM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),obe=n(VM,"CODE",{});var L1t=s(obe);o2r=r(L1t,"pretrained_model_name_or_path"),L1t.forEach(t),r2r=r(VM,":"),VM.forEach(t),t2r=i(Ba),rbe=n(Ba,"UL",{});var B1t=s(rbe);U8=n(B1t,"LI",{});var W9e=s(U8);tbe=n(W9e,"STRONG",{});var x1t=s(tbe);a2r=r(x1t,"vision-encoder-decoder"),x1t.forEach(t),n2r=r(W9e," \u2014 "),zX=n(W9e,"A",{href:!0});var k1t=s(zX);s2r=r(k1t,"TFVisionEncoderDecoderModel"),k1t.forEach(t),l2r=r(W9e," (Vision Encoder decoder model)"),W9e.forEach(t),B1t.forEach(t),i2r=i(Ba),abe=n(Ba,"P",{});var R1t=s(abe);d2r=r(R1t,"Examples:"),R1t.forEach(t),c2r=i(Ba),m(_A.$$.fragment,Ba),Ba.forEach(t),mi.forEach(t),uRe=i(d),rf=n(d,"H2",{class:!0});var kPe=s(rf);J8=n(kPe,"A",{id:!0,class:!0,href:!0});var S1t=s(J8);nbe=n(S1t,"SPAN",{});var P1t=s(nbe);m(uA.$$.fragment,P1t),P1t.forEach(t),S1t.forEach(t),f2r=i(kPe),sbe=n(kPe,"SPAN",{});var $1t=s(sbe);m2r=r($1t,"TFAutoModelForSpeechSeq2Seq"),$1t.forEach(t),kPe.forEach(t),bRe=i(d),Rr=n(d,"DIV",{class:!0});var hi=s(Rr);m(bA.$$.fragment,hi),g2r=i(hi),tf=n(hi,"P",{});var lQ=s(tf);h2r=r(lQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),lbe=n(lQ,"CODE",{});var I1t=s(lbe);p2r=r(I1t,"from_pretrained()"),I1t.forEach(t),_2r=r(lQ,"class method or the "),ibe=n(lQ,"CODE",{});var j1t=s(ibe);u2r=r(j1t,"from_config()"),j1t.forEach(t),b2r=r(lQ,`class
method.`),lQ.forEach(t),v2r=i(hi),vA=n(hi,"P",{});var RPe=s(vA);T2r=r(RPe,"This class cannot be instantiated directly using "),dbe=n(RPe,"CODE",{});var D1t=s(dbe);F2r=r(D1t,"__init__()"),D1t.forEach(t),C2r=r(RPe," (throws an error)."),RPe.forEach(t),M2r=i(hi),At=n(hi,"DIV",{class:!0});var pi=s(At);m(TA.$$.fragment,pi),E2r=i(pi),cbe=n(pi,"P",{});var N1t=s(cbe);y2r=r(N1t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),N1t.forEach(t),w2r=i(pi),af=n(pi,"P",{});var iQ=s(af);A2r=r(iQ,`Note:
Loading a model from its configuration file does `),fbe=n(iQ,"STRONG",{});var q1t=s(fbe);L2r=r(q1t,"not"),q1t.forEach(t),B2r=r(iQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),mbe=n(iQ,"CODE",{});var O1t=s(mbe);x2r=r(O1t,"from_pretrained()"),O1t.forEach(t),k2r=r(iQ,"to load the model weights."),iQ.forEach(t),R2r=i(pi),gbe=n(pi,"P",{});var G1t=s(gbe);S2r=r(G1t,"Examples:"),G1t.forEach(t),P2r=i(pi),m(FA.$$.fragment,pi),pi.forEach(t),$2r=i(hi),wo=n(hi,"DIV",{class:!0});var xa=s(wo);m(CA.$$.fragment,xa),I2r=i(xa),hbe=n(xa,"P",{});var X1t=s(hbe);j2r=r(X1t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),X1t.forEach(t),D2r=i(xa),Rn=n(xa,"P",{});var zM=s(Rn);N2r=r(zM,"The model class to instantiate is selected based on the "),pbe=n(zM,"CODE",{});var V1t=s(pbe);q2r=r(V1t,"model_type"),V1t.forEach(t),O2r=r(zM,` property of the config object (either
passed as an argument or loaded from `),_be=n(zM,"CODE",{});var z1t=s(_be);G2r=r(z1t,"pretrained_model_name_or_path"),z1t.forEach(t),X2r=r(zM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ube=n(zM,"CODE",{});var W1t=s(ube);V2r=r(W1t,"pretrained_model_name_or_path"),W1t.forEach(t),z2r=r(zM,":"),zM.forEach(t),W2r=i(xa),bbe=n(xa,"UL",{});var Q1t=s(bbe);Y8=n(Q1t,"LI",{});var Q9e=s(Y8);vbe=n(Q9e,"STRONG",{});var H1t=s(vbe);Q2r=r(H1t,"speech_to_text"),H1t.forEach(t),H2r=r(Q9e," \u2014 "),WX=n(Q9e,"A",{href:!0});var U1t=s(WX);U2r=r(U1t,"TFSpeech2TextForConditionalGeneration"),U1t.forEach(t),J2r=r(Q9e," (Speech2Text model)"),Q9e.forEach(t),Q1t.forEach(t),Y2r=i(xa),Tbe=n(xa,"P",{});var J1t=s(Tbe);K2r=r(J1t,"Examples:"),J1t.forEach(t),Z2r=i(xa),m(MA.$$.fragment,xa),xa.forEach(t),hi.forEach(t),vRe=i(d),nf=n(d,"H2",{class:!0});var SPe=s(nf);K8=n(SPe,"A",{id:!0,class:!0,href:!0});var Y1t=s(K8);Fbe=n(Y1t,"SPAN",{});var K1t=s(Fbe);m(EA.$$.fragment,K1t),K1t.forEach(t),Y1t.forEach(t),evr=i(SPe),Cbe=n(SPe,"SPAN",{});var Z1t=s(Cbe);ovr=r(Z1t,"FlaxAutoModel"),Z1t.forEach(t),SPe.forEach(t),TRe=i(d),Sr=n(d,"DIV",{class:!0});var _i=s(Sr);m(yA.$$.fragment,_i),rvr=i(_i),sf=n(_i,"P",{});var dQ=s(sf);tvr=r(dQ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Mbe=n(dQ,"CODE",{});var ebt=s(Mbe);avr=r(ebt,"from_pretrained()"),ebt.forEach(t),nvr=r(dQ,"class method or the "),Ebe=n(dQ,"CODE",{});var obt=s(Ebe);svr=r(obt,"from_config()"),obt.forEach(t),lvr=r(dQ,`class
method.`),dQ.forEach(t),ivr=i(_i),wA=n(_i,"P",{});var PPe=s(wA);dvr=r(PPe,"This class cannot be instantiated directly using "),ybe=n(PPe,"CODE",{});var rbt=s(ybe);cvr=r(rbt,"__init__()"),rbt.forEach(t),fvr=r(PPe," (throws an error)."),PPe.forEach(t),mvr=i(_i),Lt=n(_i,"DIV",{class:!0});var ui=s(Lt);m(AA.$$.fragment,ui),gvr=i(ui),wbe=n(ui,"P",{});var tbt=s(wbe);hvr=r(tbt,"Instantiates one of the base model classes of the library from a configuration."),tbt.forEach(t),pvr=i(ui),lf=n(ui,"P",{});var cQ=s(lf);_vr=r(cQ,`Note:
Loading a model from its configuration file does `),Abe=n(cQ,"STRONG",{});var abt=s(Abe);uvr=r(abt,"not"),abt.forEach(t),bvr=r(cQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lbe=n(cQ,"CODE",{});var nbt=s(Lbe);vvr=r(nbt,"from_pretrained()"),nbt.forEach(t),Tvr=r(cQ,"to load the model weights."),cQ.forEach(t),Fvr=i(ui),Bbe=n(ui,"P",{});var sbt=s(Bbe);Cvr=r(sbt,"Examples:"),sbt.forEach(t),Mvr=i(ui),m(LA.$$.fragment,ui),ui.forEach(t),Evr=i(_i),Ao=n(_i,"DIV",{class:!0});var ka=s(Ao);m(BA.$$.fragment,ka),yvr=i(ka),xbe=n(ka,"P",{});var lbt=s(xbe);wvr=r(lbt,"Instantiate one of the base model classes of the library from a pretrained model."),lbt.forEach(t),Avr=i(ka),Sn=n(ka,"P",{});var WM=s(Sn);Lvr=r(WM,"The model class to instantiate is selected based on the "),kbe=n(WM,"CODE",{});var ibt=s(kbe);Bvr=r(ibt,"model_type"),ibt.forEach(t),xvr=r(WM,` property of the config object (either
passed as an argument or loaded from `),Rbe=n(WM,"CODE",{});var dbt=s(Rbe);kvr=r(dbt,"pretrained_model_name_or_path"),dbt.forEach(t),Rvr=r(WM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sbe=n(WM,"CODE",{});var cbt=s(Sbe);Svr=r(cbt,"pretrained_model_name_or_path"),cbt.forEach(t),Pvr=r(WM,":"),WM.forEach(t),$vr=i(ka),z=n(ka,"UL",{});var Q=s(z);Z8=n(Q,"LI",{});var H9e=s(Z8);Pbe=n(H9e,"STRONG",{});var fbt=s(Pbe);Ivr=r(fbt,"albert"),fbt.forEach(t),jvr=r(H9e," \u2014 "),QX=n(H9e,"A",{href:!0});var mbt=s(QX);Dvr=r(mbt,"FlaxAlbertModel"),mbt.forEach(t),Nvr=r(H9e," (ALBERT model)"),H9e.forEach(t),qvr=i(Q),eF=n(Q,"LI",{});var U9e=s(eF);$be=n(U9e,"STRONG",{});var gbt=s($be);Ovr=r(gbt,"bart"),gbt.forEach(t),Gvr=r(U9e," \u2014 "),HX=n(U9e,"A",{href:!0});var hbt=s(HX);Xvr=r(hbt,"FlaxBartModel"),hbt.forEach(t),Vvr=r(U9e," (BART model)"),U9e.forEach(t),zvr=i(Q),oF=n(Q,"LI",{});var J9e=s(oF);Ibe=n(J9e,"STRONG",{});var pbt=s(Ibe);Wvr=r(pbt,"beit"),pbt.forEach(t),Qvr=r(J9e," \u2014 "),UX=n(J9e,"A",{href:!0});var _bt=s(UX);Hvr=r(_bt,"FlaxBeitModel"),_bt.forEach(t),Uvr=r(J9e," (BEiT model)"),J9e.forEach(t),Jvr=i(Q),rF=n(Q,"LI",{});var Y9e=s(rF);jbe=n(Y9e,"STRONG",{});var ubt=s(jbe);Yvr=r(ubt,"bert"),ubt.forEach(t),Kvr=r(Y9e," \u2014 "),JX=n(Y9e,"A",{href:!0});var bbt=s(JX);Zvr=r(bbt,"FlaxBertModel"),bbt.forEach(t),e6r=r(Y9e," (BERT model)"),Y9e.forEach(t),o6r=i(Q),tF=n(Q,"LI",{});var K9e=s(tF);Dbe=n(K9e,"STRONG",{});var vbt=s(Dbe);r6r=r(vbt,"big_bird"),vbt.forEach(t),t6r=r(K9e," \u2014 "),YX=n(K9e,"A",{href:!0});var Tbt=s(YX);a6r=r(Tbt,"FlaxBigBirdModel"),Tbt.forEach(t),n6r=r(K9e," (BigBird model)"),K9e.forEach(t),s6r=i(Q),aF=n(Q,"LI",{});var Z9e=s(aF);Nbe=n(Z9e,"STRONG",{});var Fbt=s(Nbe);l6r=r(Fbt,"blenderbot"),Fbt.forEach(t),i6r=r(Z9e," \u2014 "),KX=n(Z9e,"A",{href:!0});var Cbt=s(KX);d6r=r(Cbt,"FlaxBlenderbotModel"),Cbt.forEach(t),c6r=r(Z9e," (Blenderbot model)"),Z9e.forEach(t),f6r=i(Q),nF=n(Q,"LI",{});var eBe=s(nF);qbe=n(eBe,"STRONG",{});var Mbt=s(qbe);m6r=r(Mbt,"blenderbot-small"),Mbt.forEach(t),g6r=r(eBe," \u2014 "),ZX=n(eBe,"A",{href:!0});var Ebt=s(ZX);h6r=r(Ebt,"FlaxBlenderbotSmallModel"),Ebt.forEach(t),p6r=r(eBe," (BlenderbotSmall model)"),eBe.forEach(t),_6r=i(Q),sF=n(Q,"LI",{});var oBe=s(sF);Obe=n(oBe,"STRONG",{});var ybt=s(Obe);u6r=r(ybt,"clip"),ybt.forEach(t),b6r=r(oBe," \u2014 "),eV=n(oBe,"A",{href:!0});var wbt=s(eV);v6r=r(wbt,"FlaxCLIPModel"),wbt.forEach(t),T6r=r(oBe," (CLIP model)"),oBe.forEach(t),F6r=i(Q),lF=n(Q,"LI",{});var rBe=s(lF);Gbe=n(rBe,"STRONG",{});var Abt=s(Gbe);C6r=r(Abt,"distilbert"),Abt.forEach(t),M6r=r(rBe," \u2014 "),oV=n(rBe,"A",{href:!0});var Lbt=s(oV);E6r=r(Lbt,"FlaxDistilBertModel"),Lbt.forEach(t),y6r=r(rBe," (DistilBERT model)"),rBe.forEach(t),w6r=i(Q),iF=n(Q,"LI",{});var tBe=s(iF);Xbe=n(tBe,"STRONG",{});var Bbt=s(Xbe);A6r=r(Bbt,"electra"),Bbt.forEach(t),L6r=r(tBe," \u2014 "),rV=n(tBe,"A",{href:!0});var xbt=s(rV);B6r=r(xbt,"FlaxElectraModel"),xbt.forEach(t),x6r=r(tBe," (ELECTRA model)"),tBe.forEach(t),k6r=i(Q),dF=n(Q,"LI",{});var aBe=s(dF);Vbe=n(aBe,"STRONG",{});var kbt=s(Vbe);R6r=r(kbt,"gpt2"),kbt.forEach(t),S6r=r(aBe," \u2014 "),tV=n(aBe,"A",{href:!0});var Rbt=s(tV);P6r=r(Rbt,"FlaxGPT2Model"),Rbt.forEach(t),$6r=r(aBe," (OpenAI GPT-2 model)"),aBe.forEach(t),I6r=i(Q),cF=n(Q,"LI",{});var nBe=s(cF);zbe=n(nBe,"STRONG",{});var Sbt=s(zbe);j6r=r(Sbt,"gpt_neo"),Sbt.forEach(t),D6r=r(nBe," \u2014 "),aV=n(nBe,"A",{href:!0});var Pbt=s(aV);N6r=r(Pbt,"FlaxGPTNeoModel"),Pbt.forEach(t),q6r=r(nBe," (GPT Neo model)"),nBe.forEach(t),O6r=i(Q),fF=n(Q,"LI",{});var sBe=s(fF);Wbe=n(sBe,"STRONG",{});var $bt=s(Wbe);G6r=r($bt,"gptj"),$bt.forEach(t),X6r=r(sBe," \u2014 "),nV=n(sBe,"A",{href:!0});var Ibt=s(nV);V6r=r(Ibt,"FlaxGPTJModel"),Ibt.forEach(t),z6r=r(sBe," (GPT-J model)"),sBe.forEach(t),W6r=i(Q),mF=n(Q,"LI",{});var lBe=s(mF);Qbe=n(lBe,"STRONG",{});var jbt=s(Qbe);Q6r=r(jbt,"marian"),jbt.forEach(t),H6r=r(lBe," \u2014 "),sV=n(lBe,"A",{href:!0});var Dbt=s(sV);U6r=r(Dbt,"FlaxMarianModel"),Dbt.forEach(t),J6r=r(lBe," (Marian model)"),lBe.forEach(t),Y6r=i(Q),gF=n(Q,"LI",{});var iBe=s(gF);Hbe=n(iBe,"STRONG",{});var Nbt=s(Hbe);K6r=r(Nbt,"mbart"),Nbt.forEach(t),Z6r=r(iBe," \u2014 "),lV=n(iBe,"A",{href:!0});var qbt=s(lV);e0r=r(qbt,"FlaxMBartModel"),qbt.forEach(t),o0r=r(iBe," (mBART model)"),iBe.forEach(t),r0r=i(Q),hF=n(Q,"LI",{});var dBe=s(hF);Ube=n(dBe,"STRONG",{});var Obt=s(Ube);t0r=r(Obt,"mt5"),Obt.forEach(t),a0r=r(dBe," \u2014 "),iV=n(dBe,"A",{href:!0});var Gbt=s(iV);n0r=r(Gbt,"FlaxMT5Model"),Gbt.forEach(t),s0r=r(dBe," (mT5 model)"),dBe.forEach(t),l0r=i(Q),pF=n(Q,"LI",{});var cBe=s(pF);Jbe=n(cBe,"STRONG",{});var Xbt=s(Jbe);i0r=r(Xbt,"pegasus"),Xbt.forEach(t),d0r=r(cBe," \u2014 "),dV=n(cBe,"A",{href:!0});var Vbt=s(dV);c0r=r(Vbt,"FlaxPegasusModel"),Vbt.forEach(t),f0r=r(cBe," (Pegasus model)"),cBe.forEach(t),m0r=i(Q),_F=n(Q,"LI",{});var fBe=s(_F);Ybe=n(fBe,"STRONG",{});var zbt=s(Ybe);g0r=r(zbt,"roberta"),zbt.forEach(t),h0r=r(fBe," \u2014 "),cV=n(fBe,"A",{href:!0});var Wbt=s(cV);p0r=r(Wbt,"FlaxRobertaModel"),Wbt.forEach(t),_0r=r(fBe," (RoBERTa model)"),fBe.forEach(t),u0r=i(Q),uF=n(Q,"LI",{});var mBe=s(uF);Kbe=n(mBe,"STRONG",{});var Qbt=s(Kbe);b0r=r(Qbt,"roformer"),Qbt.forEach(t),v0r=r(mBe," \u2014 "),fV=n(mBe,"A",{href:!0});var Hbt=s(fV);T0r=r(Hbt,"FlaxRoFormerModel"),Hbt.forEach(t),F0r=r(mBe," (RoFormer model)"),mBe.forEach(t),C0r=i(Q),bF=n(Q,"LI",{});var gBe=s(bF);Zbe=n(gBe,"STRONG",{});var Ubt=s(Zbe);M0r=r(Ubt,"t5"),Ubt.forEach(t),E0r=r(gBe," \u2014 "),mV=n(gBe,"A",{href:!0});var Jbt=s(mV);y0r=r(Jbt,"FlaxT5Model"),Jbt.forEach(t),w0r=r(gBe," (T5 model)"),gBe.forEach(t),A0r=i(Q),vF=n(Q,"LI",{});var hBe=s(vF);e5e=n(hBe,"STRONG",{});var Ybt=s(e5e);L0r=r(Ybt,"vision-text-dual-encoder"),Ybt.forEach(t),B0r=r(hBe," \u2014 "),gV=n(hBe,"A",{href:!0});var Kbt=s(gV);x0r=r(Kbt,"FlaxVisionTextDualEncoderModel"),Kbt.forEach(t),k0r=r(hBe," (VisionTextDualEncoder model)"),hBe.forEach(t),R0r=i(Q),TF=n(Q,"LI",{});var pBe=s(TF);o5e=n(pBe,"STRONG",{});var Zbt=s(o5e);S0r=r(Zbt,"vit"),Zbt.forEach(t),P0r=r(pBe," \u2014 "),hV=n(pBe,"A",{href:!0});var e5t=s(hV);$0r=r(e5t,"FlaxViTModel"),e5t.forEach(t),I0r=r(pBe," (ViT model)"),pBe.forEach(t),j0r=i(Q),FF=n(Q,"LI",{});var _Be=s(FF);r5e=n(_Be,"STRONG",{});var o5t=s(r5e);D0r=r(o5t,"wav2vec2"),o5t.forEach(t),N0r=r(_Be," \u2014 "),pV=n(_Be,"A",{href:!0});var r5t=s(pV);q0r=r(r5t,"FlaxWav2Vec2Model"),r5t.forEach(t),O0r=r(_Be," (Wav2Vec2 model)"),_Be.forEach(t),G0r=i(Q),CF=n(Q,"LI",{});var uBe=s(CF);t5e=n(uBe,"STRONG",{});var t5t=s(t5e);X0r=r(t5t,"xglm"),t5t.forEach(t),V0r=r(uBe," \u2014 "),_V=n(uBe,"A",{href:!0});var a5t=s(_V);z0r=r(a5t,"FlaxXGLMModel"),a5t.forEach(t),W0r=r(uBe," (XGLM model)"),uBe.forEach(t),Q0r=i(Q),MF=n(Q,"LI",{});var bBe=s(MF);a5e=n(bBe,"STRONG",{});var n5t=s(a5e);H0r=r(n5t,"xlm-roberta"),n5t.forEach(t),U0r=r(bBe," \u2014 "),uV=n(bBe,"A",{href:!0});var s5t=s(uV);J0r=r(s5t,"FlaxXLMRobertaModel"),s5t.forEach(t),Y0r=r(bBe," (XLM-RoBERTa model)"),bBe.forEach(t),Q.forEach(t),K0r=i(ka),n5e=n(ka,"P",{});var l5t=s(n5e);Z0r=r(l5t,"Examples:"),l5t.forEach(t),eTr=i(ka),m(xA.$$.fragment,ka),ka.forEach(t),_i.forEach(t),FRe=i(d),df=n(d,"H2",{class:!0});var $Pe=s(df);EF=n($Pe,"A",{id:!0,class:!0,href:!0});var i5t=s(EF);s5e=n(i5t,"SPAN",{});var d5t=s(s5e);m(kA.$$.fragment,d5t),d5t.forEach(t),i5t.forEach(t),oTr=i($Pe),l5e=n($Pe,"SPAN",{});var c5t=s(l5e);rTr=r(c5t,"FlaxAutoModelForCausalLM"),c5t.forEach(t),$Pe.forEach(t),CRe=i(d),Pr=n(d,"DIV",{class:!0});var bi=s(Pr);m(RA.$$.fragment,bi),tTr=i(bi),cf=n(bi,"P",{});var fQ=s(cf);aTr=r(fQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),i5e=n(fQ,"CODE",{});var f5t=s(i5e);nTr=r(f5t,"from_pretrained()"),f5t.forEach(t),sTr=r(fQ,"class method or the "),d5e=n(fQ,"CODE",{});var m5t=s(d5e);lTr=r(m5t,"from_config()"),m5t.forEach(t),iTr=r(fQ,`class
method.`),fQ.forEach(t),dTr=i(bi),SA=n(bi,"P",{});var IPe=s(SA);cTr=r(IPe,"This class cannot be instantiated directly using "),c5e=n(IPe,"CODE",{});var g5t=s(c5e);fTr=r(g5t,"__init__()"),g5t.forEach(t),mTr=r(IPe," (throws an error)."),IPe.forEach(t),gTr=i(bi),Bt=n(bi,"DIV",{class:!0});var vi=s(Bt);m(PA.$$.fragment,vi),hTr=i(vi),f5e=n(vi,"P",{});var h5t=s(f5e);pTr=r(h5t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),h5t.forEach(t),_Tr=i(vi),ff=n(vi,"P",{});var mQ=s(ff);uTr=r(mQ,`Note:
Loading a model from its configuration file does `),m5e=n(mQ,"STRONG",{});var p5t=s(m5e);bTr=r(p5t,"not"),p5t.forEach(t),vTr=r(mQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),g5e=n(mQ,"CODE",{});var _5t=s(g5e);TTr=r(_5t,"from_pretrained()"),_5t.forEach(t),FTr=r(mQ,"to load the model weights."),mQ.forEach(t),CTr=i(vi),h5e=n(vi,"P",{});var u5t=s(h5e);MTr=r(u5t,"Examples:"),u5t.forEach(t),ETr=i(vi),m($A.$$.fragment,vi),vi.forEach(t),yTr=i(bi),Lo=n(bi,"DIV",{class:!0});var Ra=s(Lo);m(IA.$$.fragment,Ra),wTr=i(Ra),p5e=n(Ra,"P",{});var b5t=s(p5e);ATr=r(b5t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),b5t.forEach(t),LTr=i(Ra),Pn=n(Ra,"P",{});var QM=s(Pn);BTr=r(QM,"The model class to instantiate is selected based on the "),_5e=n(QM,"CODE",{});var v5t=s(_5e);xTr=r(v5t,"model_type"),v5t.forEach(t),kTr=r(QM,` property of the config object (either
passed as an argument or loaded from `),u5e=n(QM,"CODE",{});var T5t=s(u5e);RTr=r(T5t,"pretrained_model_name_or_path"),T5t.forEach(t),STr=r(QM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b5e=n(QM,"CODE",{});var F5t=s(b5e);PTr=r(F5t,"pretrained_model_name_or_path"),F5t.forEach(t),$Tr=r(QM,":"),QM.forEach(t),ITr=i(Ra),ga=n(Ra,"UL",{});var Ti=s(ga);yF=n(Ti,"LI",{});var vBe=s(yF);v5e=n(vBe,"STRONG",{});var C5t=s(v5e);jTr=r(C5t,"bart"),C5t.forEach(t),DTr=r(vBe," \u2014 "),bV=n(vBe,"A",{href:!0});var M5t=s(bV);NTr=r(M5t,"FlaxBartForCausalLM"),M5t.forEach(t),qTr=r(vBe," (BART model)"),vBe.forEach(t),OTr=i(Ti),wF=n(Ti,"LI",{});var TBe=s(wF);T5e=n(TBe,"STRONG",{});var E5t=s(T5e);GTr=r(E5t,"gpt2"),E5t.forEach(t),XTr=r(TBe," \u2014 "),vV=n(TBe,"A",{href:!0});var y5t=s(vV);VTr=r(y5t,"FlaxGPT2LMHeadModel"),y5t.forEach(t),zTr=r(TBe," (OpenAI GPT-2 model)"),TBe.forEach(t),WTr=i(Ti),AF=n(Ti,"LI",{});var FBe=s(AF);F5e=n(FBe,"STRONG",{});var w5t=s(F5e);QTr=r(w5t,"gpt_neo"),w5t.forEach(t),HTr=r(FBe," \u2014 "),TV=n(FBe,"A",{href:!0});var A5t=s(TV);UTr=r(A5t,"FlaxGPTNeoForCausalLM"),A5t.forEach(t),JTr=r(FBe," (GPT Neo model)"),FBe.forEach(t),YTr=i(Ti),LF=n(Ti,"LI",{});var CBe=s(LF);C5e=n(CBe,"STRONG",{});var L5t=s(C5e);KTr=r(L5t,"gptj"),L5t.forEach(t),ZTr=r(CBe," \u2014 "),FV=n(CBe,"A",{href:!0});var B5t=s(FV);e8r=r(B5t,"FlaxGPTJForCausalLM"),B5t.forEach(t),o8r=r(CBe," (GPT-J model)"),CBe.forEach(t),r8r=i(Ti),BF=n(Ti,"LI",{});var MBe=s(BF);M5e=n(MBe,"STRONG",{});var x5t=s(M5e);t8r=r(x5t,"xglm"),x5t.forEach(t),a8r=r(MBe," \u2014 "),CV=n(MBe,"A",{href:!0});var k5t=s(CV);n8r=r(k5t,"FlaxXGLMForCausalLM"),k5t.forEach(t),s8r=r(MBe," (XGLM model)"),MBe.forEach(t),Ti.forEach(t),l8r=i(Ra),E5e=n(Ra,"P",{});var R5t=s(E5e);i8r=r(R5t,"Examples:"),R5t.forEach(t),d8r=i(Ra),m(jA.$$.fragment,Ra),Ra.forEach(t),bi.forEach(t),MRe=i(d),mf=n(d,"H2",{class:!0});var jPe=s(mf);xF=n(jPe,"A",{id:!0,class:!0,href:!0});var S5t=s(xF);y5e=n(S5t,"SPAN",{});var P5t=s(y5e);m(DA.$$.fragment,P5t),P5t.forEach(t),S5t.forEach(t),c8r=i(jPe),w5e=n(jPe,"SPAN",{});var $5t=s(w5e);f8r=r($5t,"FlaxAutoModelForPreTraining"),$5t.forEach(t),jPe.forEach(t),ERe=i(d),$r=n(d,"DIV",{class:!0});var Fi=s($r);m(NA.$$.fragment,Fi),m8r=i(Fi),gf=n(Fi,"P",{});var gQ=s(gf);g8r=r(gQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),A5e=n(gQ,"CODE",{});var I5t=s(A5e);h8r=r(I5t,"from_pretrained()"),I5t.forEach(t),p8r=r(gQ,"class method or the "),L5e=n(gQ,"CODE",{});var j5t=s(L5e);_8r=r(j5t,"from_config()"),j5t.forEach(t),u8r=r(gQ,`class
method.`),gQ.forEach(t),b8r=i(Fi),qA=n(Fi,"P",{});var DPe=s(qA);v8r=r(DPe,"This class cannot be instantiated directly using "),B5e=n(DPe,"CODE",{});var D5t=s(B5e);T8r=r(D5t,"__init__()"),D5t.forEach(t),F8r=r(DPe," (throws an error)."),DPe.forEach(t),C8r=i(Fi),xt=n(Fi,"DIV",{class:!0});var Ci=s(xt);m(OA.$$.fragment,Ci),M8r=i(Ci),x5e=n(Ci,"P",{});var N5t=s(x5e);E8r=r(N5t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),N5t.forEach(t),y8r=i(Ci),hf=n(Ci,"P",{});var hQ=s(hf);w8r=r(hQ,`Note:
Loading a model from its configuration file does `),k5e=n(hQ,"STRONG",{});var q5t=s(k5e);A8r=r(q5t,"not"),q5t.forEach(t),L8r=r(hQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),R5e=n(hQ,"CODE",{});var O5t=s(R5e);B8r=r(O5t,"from_pretrained()"),O5t.forEach(t),x8r=r(hQ,"to load the model weights."),hQ.forEach(t),k8r=i(Ci),S5e=n(Ci,"P",{});var G5t=s(S5e);R8r=r(G5t,"Examples:"),G5t.forEach(t),S8r=i(Ci),m(GA.$$.fragment,Ci),Ci.forEach(t),P8r=i(Fi),Bo=n(Fi,"DIV",{class:!0});var Sa=s(Bo);m(XA.$$.fragment,Sa),$8r=i(Sa),P5e=n(Sa,"P",{});var X5t=s(P5e);I8r=r(X5t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),X5t.forEach(t),j8r=i(Sa),$n=n(Sa,"P",{});var HM=s($n);D8r=r(HM,"The model class to instantiate is selected based on the "),$5e=n(HM,"CODE",{});var V5t=s($5e);N8r=r(V5t,"model_type"),V5t.forEach(t),q8r=r(HM,` property of the config object (either
passed as an argument or loaded from `),I5e=n(HM,"CODE",{});var z5t=s(I5e);O8r=r(z5t,"pretrained_model_name_or_path"),z5t.forEach(t),G8r=r(HM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j5e=n(HM,"CODE",{});var W5t=s(j5e);X8r=r(W5t,"pretrained_model_name_or_path"),W5t.forEach(t),V8r=r(HM,":"),HM.forEach(t),z8r=i(Sa),ce=n(Sa,"UL",{});var me=s(ce);kF=n(me,"LI",{});var EBe=s(kF);D5e=n(EBe,"STRONG",{});var Q5t=s(D5e);W8r=r(Q5t,"albert"),Q5t.forEach(t),Q8r=r(EBe," \u2014 "),MV=n(EBe,"A",{href:!0});var H5t=s(MV);H8r=r(H5t,"FlaxAlbertForPreTraining"),H5t.forEach(t),U8r=r(EBe," (ALBERT model)"),EBe.forEach(t),J8r=i(me),RF=n(me,"LI",{});var yBe=s(RF);N5e=n(yBe,"STRONG",{});var U5t=s(N5e);Y8r=r(U5t,"bart"),U5t.forEach(t),K8r=r(yBe," \u2014 "),EV=n(yBe,"A",{href:!0});var J5t=s(EV);Z8r=r(J5t,"FlaxBartForConditionalGeneration"),J5t.forEach(t),eFr=r(yBe," (BART model)"),yBe.forEach(t),oFr=i(me),SF=n(me,"LI",{});var wBe=s(SF);q5e=n(wBe,"STRONG",{});var Y5t=s(q5e);rFr=r(Y5t,"bert"),Y5t.forEach(t),tFr=r(wBe," \u2014 "),yV=n(wBe,"A",{href:!0});var K5t=s(yV);aFr=r(K5t,"FlaxBertForPreTraining"),K5t.forEach(t),nFr=r(wBe," (BERT model)"),wBe.forEach(t),sFr=i(me),PF=n(me,"LI",{});var ABe=s(PF);O5e=n(ABe,"STRONG",{});var Z5t=s(O5e);lFr=r(Z5t,"big_bird"),Z5t.forEach(t),iFr=r(ABe," \u2014 "),wV=n(ABe,"A",{href:!0});var e2t=s(wV);dFr=r(e2t,"FlaxBigBirdForPreTraining"),e2t.forEach(t),cFr=r(ABe," (BigBird model)"),ABe.forEach(t),fFr=i(me),$F=n(me,"LI",{});var LBe=s($F);G5e=n(LBe,"STRONG",{});var o2t=s(G5e);mFr=r(o2t,"electra"),o2t.forEach(t),gFr=r(LBe," \u2014 "),AV=n(LBe,"A",{href:!0});var r2t=s(AV);hFr=r(r2t,"FlaxElectraForPreTraining"),r2t.forEach(t),pFr=r(LBe," (ELECTRA model)"),LBe.forEach(t),_Fr=i(me),IF=n(me,"LI",{});var BBe=s(IF);X5e=n(BBe,"STRONG",{});var t2t=s(X5e);uFr=r(t2t,"mbart"),t2t.forEach(t),bFr=r(BBe," \u2014 "),LV=n(BBe,"A",{href:!0});var a2t=s(LV);vFr=r(a2t,"FlaxMBartForConditionalGeneration"),a2t.forEach(t),TFr=r(BBe," (mBART model)"),BBe.forEach(t),FFr=i(me),jF=n(me,"LI",{});var xBe=s(jF);V5e=n(xBe,"STRONG",{});var n2t=s(V5e);CFr=r(n2t,"mt5"),n2t.forEach(t),MFr=r(xBe," \u2014 "),BV=n(xBe,"A",{href:!0});var s2t=s(BV);EFr=r(s2t,"FlaxMT5ForConditionalGeneration"),s2t.forEach(t),yFr=r(xBe," (mT5 model)"),xBe.forEach(t),wFr=i(me),DF=n(me,"LI",{});var kBe=s(DF);z5e=n(kBe,"STRONG",{});var l2t=s(z5e);AFr=r(l2t,"roberta"),l2t.forEach(t),LFr=r(kBe," \u2014 "),xV=n(kBe,"A",{href:!0});var i2t=s(xV);BFr=r(i2t,"FlaxRobertaForMaskedLM"),i2t.forEach(t),xFr=r(kBe," (RoBERTa model)"),kBe.forEach(t),kFr=i(me),NF=n(me,"LI",{});var RBe=s(NF);W5e=n(RBe,"STRONG",{});var d2t=s(W5e);RFr=r(d2t,"roformer"),d2t.forEach(t),SFr=r(RBe," \u2014 "),kV=n(RBe,"A",{href:!0});var c2t=s(kV);PFr=r(c2t,"FlaxRoFormerForMaskedLM"),c2t.forEach(t),$Fr=r(RBe," (RoFormer model)"),RBe.forEach(t),IFr=i(me),qF=n(me,"LI",{});var SBe=s(qF);Q5e=n(SBe,"STRONG",{});var f2t=s(Q5e);jFr=r(f2t,"t5"),f2t.forEach(t),DFr=r(SBe," \u2014 "),RV=n(SBe,"A",{href:!0});var m2t=s(RV);NFr=r(m2t,"FlaxT5ForConditionalGeneration"),m2t.forEach(t),qFr=r(SBe," (T5 model)"),SBe.forEach(t),OFr=i(me),OF=n(me,"LI",{});var PBe=s(OF);H5e=n(PBe,"STRONG",{});var g2t=s(H5e);GFr=r(g2t,"wav2vec2"),g2t.forEach(t),XFr=r(PBe," \u2014 "),SV=n(PBe,"A",{href:!0});var h2t=s(SV);VFr=r(h2t,"FlaxWav2Vec2ForPreTraining"),h2t.forEach(t),zFr=r(PBe," (Wav2Vec2 model)"),PBe.forEach(t),WFr=i(me),GF=n(me,"LI",{});var $Be=s(GF);U5e=n($Be,"STRONG",{});var p2t=s(U5e);QFr=r(p2t,"xlm-roberta"),p2t.forEach(t),HFr=r($Be," \u2014 "),PV=n($Be,"A",{href:!0});var _2t=s(PV);UFr=r(_2t,"FlaxXLMRobertaForMaskedLM"),_2t.forEach(t),JFr=r($Be," (XLM-RoBERTa model)"),$Be.forEach(t),me.forEach(t),YFr=i(Sa),J5e=n(Sa,"P",{});var u2t=s(J5e);KFr=r(u2t,"Examples:"),u2t.forEach(t),ZFr=i(Sa),m(VA.$$.fragment,Sa),Sa.forEach(t),Fi.forEach(t),yRe=i(d),pf=n(d,"H2",{class:!0});var NPe=s(pf);XF=n(NPe,"A",{id:!0,class:!0,href:!0});var b2t=s(XF);Y5e=n(b2t,"SPAN",{});var v2t=s(Y5e);m(zA.$$.fragment,v2t),v2t.forEach(t),b2t.forEach(t),eCr=i(NPe),K5e=n(NPe,"SPAN",{});var T2t=s(K5e);oCr=r(T2t,"FlaxAutoModelForMaskedLM"),T2t.forEach(t),NPe.forEach(t),wRe=i(d),Ir=n(d,"DIV",{class:!0});var Mi=s(Ir);m(WA.$$.fragment,Mi),rCr=i(Mi),_f=n(Mi,"P",{});var pQ=s(_f);tCr=r(pQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Z5e=n(pQ,"CODE",{});var F2t=s(Z5e);aCr=r(F2t,"from_pretrained()"),F2t.forEach(t),nCr=r(pQ,"class method or the "),e2e=n(pQ,"CODE",{});var C2t=s(e2e);sCr=r(C2t,"from_config()"),C2t.forEach(t),lCr=r(pQ,`class
method.`),pQ.forEach(t),iCr=i(Mi),QA=n(Mi,"P",{});var qPe=s(QA);dCr=r(qPe,"This class cannot be instantiated directly using "),o2e=n(qPe,"CODE",{});var M2t=s(o2e);cCr=r(M2t,"__init__()"),M2t.forEach(t),fCr=r(qPe," (throws an error)."),qPe.forEach(t),mCr=i(Mi),kt=n(Mi,"DIV",{class:!0});var Ei=s(kt);m(HA.$$.fragment,Ei),gCr=i(Ei),r2e=n(Ei,"P",{});var E2t=s(r2e);hCr=r(E2t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),E2t.forEach(t),pCr=i(Ei),uf=n(Ei,"P",{});var _Q=s(uf);_Cr=r(_Q,`Note:
Loading a model from its configuration file does `),t2e=n(_Q,"STRONG",{});var y2t=s(t2e);uCr=r(y2t,"not"),y2t.forEach(t),bCr=r(_Q,` load the model weights. It only affects the
model\u2019s configuration. Use `),a2e=n(_Q,"CODE",{});var w2t=s(a2e);vCr=r(w2t,"from_pretrained()"),w2t.forEach(t),TCr=r(_Q,"to load the model weights."),_Q.forEach(t),FCr=i(Ei),n2e=n(Ei,"P",{});var A2t=s(n2e);CCr=r(A2t,"Examples:"),A2t.forEach(t),MCr=i(Ei),m(UA.$$.fragment,Ei),Ei.forEach(t),ECr=i(Mi),xo=n(Mi,"DIV",{class:!0});var Pa=s(xo);m(JA.$$.fragment,Pa),yCr=i(Pa),s2e=n(Pa,"P",{});var L2t=s(s2e);wCr=r(L2t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),L2t.forEach(t),ACr=i(Pa),In=n(Pa,"P",{});var UM=s(In);LCr=r(UM,"The model class to instantiate is selected based on the "),l2e=n(UM,"CODE",{});var B2t=s(l2e);BCr=r(B2t,"model_type"),B2t.forEach(t),xCr=r(UM,` property of the config object (either
passed as an argument or loaded from `),i2e=n(UM,"CODE",{});var x2t=s(i2e);kCr=r(x2t,"pretrained_model_name_or_path"),x2t.forEach(t),RCr=r(UM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d2e=n(UM,"CODE",{});var k2t=s(d2e);SCr=r(k2t,"pretrained_model_name_or_path"),k2t.forEach(t),PCr=r(UM,":"),UM.forEach(t),$Cr=i(Pa),ue=n(Pa,"UL",{});var ye=s(ue);VF=n(ye,"LI",{});var IBe=s(VF);c2e=n(IBe,"STRONG",{});var R2t=s(c2e);ICr=r(R2t,"albert"),R2t.forEach(t),jCr=r(IBe," \u2014 "),$V=n(IBe,"A",{href:!0});var S2t=s($V);DCr=r(S2t,"FlaxAlbertForMaskedLM"),S2t.forEach(t),NCr=r(IBe," (ALBERT model)"),IBe.forEach(t),qCr=i(ye),zF=n(ye,"LI",{});var jBe=s(zF);f2e=n(jBe,"STRONG",{});var P2t=s(f2e);OCr=r(P2t,"bart"),P2t.forEach(t),GCr=r(jBe," \u2014 "),IV=n(jBe,"A",{href:!0});var $2t=s(IV);XCr=r($2t,"FlaxBartForConditionalGeneration"),$2t.forEach(t),VCr=r(jBe," (BART model)"),jBe.forEach(t),zCr=i(ye),WF=n(ye,"LI",{});var DBe=s(WF);m2e=n(DBe,"STRONG",{});var I2t=s(m2e);WCr=r(I2t,"bert"),I2t.forEach(t),QCr=r(DBe," \u2014 "),jV=n(DBe,"A",{href:!0});var j2t=s(jV);HCr=r(j2t,"FlaxBertForMaskedLM"),j2t.forEach(t),UCr=r(DBe," (BERT model)"),DBe.forEach(t),JCr=i(ye),QF=n(ye,"LI",{});var NBe=s(QF);g2e=n(NBe,"STRONG",{});var D2t=s(g2e);YCr=r(D2t,"big_bird"),D2t.forEach(t),KCr=r(NBe," \u2014 "),DV=n(NBe,"A",{href:!0});var N2t=s(DV);ZCr=r(N2t,"FlaxBigBirdForMaskedLM"),N2t.forEach(t),eMr=r(NBe," (BigBird model)"),NBe.forEach(t),oMr=i(ye),HF=n(ye,"LI",{});var qBe=s(HF);h2e=n(qBe,"STRONG",{});var q2t=s(h2e);rMr=r(q2t,"distilbert"),q2t.forEach(t),tMr=r(qBe," \u2014 "),NV=n(qBe,"A",{href:!0});var O2t=s(NV);aMr=r(O2t,"FlaxDistilBertForMaskedLM"),O2t.forEach(t),nMr=r(qBe," (DistilBERT model)"),qBe.forEach(t),sMr=i(ye),UF=n(ye,"LI",{});var OBe=s(UF);p2e=n(OBe,"STRONG",{});var G2t=s(p2e);lMr=r(G2t,"electra"),G2t.forEach(t),iMr=r(OBe," \u2014 "),qV=n(OBe,"A",{href:!0});var X2t=s(qV);dMr=r(X2t,"FlaxElectraForMaskedLM"),X2t.forEach(t),cMr=r(OBe," (ELECTRA model)"),OBe.forEach(t),fMr=i(ye),JF=n(ye,"LI",{});var GBe=s(JF);_2e=n(GBe,"STRONG",{});var V2t=s(_2e);mMr=r(V2t,"mbart"),V2t.forEach(t),gMr=r(GBe," \u2014 "),OV=n(GBe,"A",{href:!0});var z2t=s(OV);hMr=r(z2t,"FlaxMBartForConditionalGeneration"),z2t.forEach(t),pMr=r(GBe," (mBART model)"),GBe.forEach(t),_Mr=i(ye),YF=n(ye,"LI",{});var XBe=s(YF);u2e=n(XBe,"STRONG",{});var W2t=s(u2e);uMr=r(W2t,"roberta"),W2t.forEach(t),bMr=r(XBe," \u2014 "),GV=n(XBe,"A",{href:!0});var Q2t=s(GV);vMr=r(Q2t,"FlaxRobertaForMaskedLM"),Q2t.forEach(t),TMr=r(XBe," (RoBERTa model)"),XBe.forEach(t),FMr=i(ye),KF=n(ye,"LI",{});var VBe=s(KF);b2e=n(VBe,"STRONG",{});var H2t=s(b2e);CMr=r(H2t,"roformer"),H2t.forEach(t),MMr=r(VBe," \u2014 "),XV=n(VBe,"A",{href:!0});var U2t=s(XV);EMr=r(U2t,"FlaxRoFormerForMaskedLM"),U2t.forEach(t),yMr=r(VBe," (RoFormer model)"),VBe.forEach(t),wMr=i(ye),ZF=n(ye,"LI",{});var zBe=s(ZF);v2e=n(zBe,"STRONG",{});var J2t=s(v2e);AMr=r(J2t,"xlm-roberta"),J2t.forEach(t),LMr=r(zBe," \u2014 "),VV=n(zBe,"A",{href:!0});var Y2t=s(VV);BMr=r(Y2t,"FlaxXLMRobertaForMaskedLM"),Y2t.forEach(t),xMr=r(zBe," (XLM-RoBERTa model)"),zBe.forEach(t),ye.forEach(t),kMr=i(Pa),T2e=n(Pa,"P",{});var K2t=s(T2e);RMr=r(K2t,"Examples:"),K2t.forEach(t),SMr=i(Pa),m(YA.$$.fragment,Pa),Pa.forEach(t),Mi.forEach(t),ARe=i(d),bf=n(d,"H2",{class:!0});var OPe=s(bf);eC=n(OPe,"A",{id:!0,class:!0,href:!0});var Z2t=s(eC);F2e=n(Z2t,"SPAN",{});var evt=s(F2e);m(KA.$$.fragment,evt),evt.forEach(t),Z2t.forEach(t),PMr=i(OPe),C2e=n(OPe,"SPAN",{});var ovt=s(C2e);$Mr=r(ovt,"FlaxAutoModelForSeq2SeqLM"),ovt.forEach(t),OPe.forEach(t),LRe=i(d),jr=n(d,"DIV",{class:!0});var yi=s(jr);m(ZA.$$.fragment,yi),IMr=i(yi),vf=n(yi,"P",{});var uQ=s(vf);jMr=r(uQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),M2e=n(uQ,"CODE",{});var rvt=s(M2e);DMr=r(rvt,"from_pretrained()"),rvt.forEach(t),NMr=r(uQ,"class method or the "),E2e=n(uQ,"CODE",{});var tvt=s(E2e);qMr=r(tvt,"from_config()"),tvt.forEach(t),OMr=r(uQ,`class
method.`),uQ.forEach(t),GMr=i(yi),eL=n(yi,"P",{});var GPe=s(eL);XMr=r(GPe,"This class cannot be instantiated directly using "),y2e=n(GPe,"CODE",{});var avt=s(y2e);VMr=r(avt,"__init__()"),avt.forEach(t),zMr=r(GPe," (throws an error)."),GPe.forEach(t),WMr=i(yi),Rt=n(yi,"DIV",{class:!0});var wi=s(Rt);m(oL.$$.fragment,wi),QMr=i(wi),w2e=n(wi,"P",{});var nvt=s(w2e);HMr=r(nvt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),nvt.forEach(t),UMr=i(wi),Tf=n(wi,"P",{});var bQ=s(Tf);JMr=r(bQ,`Note:
Loading a model from its configuration file does `),A2e=n(bQ,"STRONG",{});var svt=s(A2e);YMr=r(svt,"not"),svt.forEach(t),KMr=r(bQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),L2e=n(bQ,"CODE",{});var lvt=s(L2e);ZMr=r(lvt,"from_pretrained()"),lvt.forEach(t),e4r=r(bQ,"to load the model weights."),bQ.forEach(t),o4r=i(wi),B2e=n(wi,"P",{});var ivt=s(B2e);r4r=r(ivt,"Examples:"),ivt.forEach(t),t4r=i(wi),m(rL.$$.fragment,wi),wi.forEach(t),a4r=i(yi),ko=n(yi,"DIV",{class:!0});var $a=s(ko);m(tL.$$.fragment,$a),n4r=i($a),x2e=n($a,"P",{});var dvt=s(x2e);s4r=r(dvt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),dvt.forEach(t),l4r=i($a),jn=n($a,"P",{});var JM=s(jn);i4r=r(JM,"The model class to instantiate is selected based on the "),k2e=n(JM,"CODE",{});var cvt=s(k2e);d4r=r(cvt,"model_type"),cvt.forEach(t),c4r=r(JM,` property of the config object (either
passed as an argument or loaded from `),R2e=n(JM,"CODE",{});var fvt=s(R2e);f4r=r(fvt,"pretrained_model_name_or_path"),fvt.forEach(t),m4r=r(JM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S2e=n(JM,"CODE",{});var mvt=s(S2e);g4r=r(mvt,"pretrained_model_name_or_path"),mvt.forEach(t),h4r=r(JM,":"),JM.forEach(t),p4r=i($a),Ce=n($a,"UL",{});var lo=s(Ce);oC=n(lo,"LI",{});var WBe=s(oC);P2e=n(WBe,"STRONG",{});var gvt=s(P2e);_4r=r(gvt,"bart"),gvt.forEach(t),u4r=r(WBe," \u2014 "),zV=n(WBe,"A",{href:!0});var hvt=s(zV);b4r=r(hvt,"FlaxBartForConditionalGeneration"),hvt.forEach(t),v4r=r(WBe," (BART model)"),WBe.forEach(t),T4r=i(lo),rC=n(lo,"LI",{});var QBe=s(rC);$2e=n(QBe,"STRONG",{});var pvt=s($2e);F4r=r(pvt,"blenderbot"),pvt.forEach(t),C4r=r(QBe," \u2014 "),WV=n(QBe,"A",{href:!0});var _vt=s(WV);M4r=r(_vt,"FlaxBlenderbotForConditionalGeneration"),_vt.forEach(t),E4r=r(QBe," (Blenderbot model)"),QBe.forEach(t),y4r=i(lo),tC=n(lo,"LI",{});var HBe=s(tC);I2e=n(HBe,"STRONG",{});var uvt=s(I2e);w4r=r(uvt,"blenderbot-small"),uvt.forEach(t),A4r=r(HBe," \u2014 "),QV=n(HBe,"A",{href:!0});var bvt=s(QV);L4r=r(bvt,"FlaxBlenderbotSmallForConditionalGeneration"),bvt.forEach(t),B4r=r(HBe," (BlenderbotSmall model)"),HBe.forEach(t),x4r=i(lo),aC=n(lo,"LI",{});var UBe=s(aC);j2e=n(UBe,"STRONG",{});var vvt=s(j2e);k4r=r(vvt,"encoder-decoder"),vvt.forEach(t),R4r=r(UBe," \u2014 "),HV=n(UBe,"A",{href:!0});var Tvt=s(HV);S4r=r(Tvt,"FlaxEncoderDecoderModel"),Tvt.forEach(t),P4r=r(UBe," (Encoder decoder model)"),UBe.forEach(t),$4r=i(lo),nC=n(lo,"LI",{});var JBe=s(nC);D2e=n(JBe,"STRONG",{});var Fvt=s(D2e);I4r=r(Fvt,"marian"),Fvt.forEach(t),j4r=r(JBe," \u2014 "),UV=n(JBe,"A",{href:!0});var Cvt=s(UV);D4r=r(Cvt,"FlaxMarianMTModel"),Cvt.forEach(t),N4r=r(JBe," (Marian model)"),JBe.forEach(t),q4r=i(lo),sC=n(lo,"LI",{});var YBe=s(sC);N2e=n(YBe,"STRONG",{});var Mvt=s(N2e);O4r=r(Mvt,"mbart"),Mvt.forEach(t),G4r=r(YBe," \u2014 "),JV=n(YBe,"A",{href:!0});var Evt=s(JV);X4r=r(Evt,"FlaxMBartForConditionalGeneration"),Evt.forEach(t),V4r=r(YBe," (mBART model)"),YBe.forEach(t),z4r=i(lo),lC=n(lo,"LI",{});var KBe=s(lC);q2e=n(KBe,"STRONG",{});var yvt=s(q2e);W4r=r(yvt,"mt5"),yvt.forEach(t),Q4r=r(KBe," \u2014 "),YV=n(KBe,"A",{href:!0});var wvt=s(YV);H4r=r(wvt,"FlaxMT5ForConditionalGeneration"),wvt.forEach(t),U4r=r(KBe," (mT5 model)"),KBe.forEach(t),J4r=i(lo),iC=n(lo,"LI",{});var ZBe=s(iC);O2e=n(ZBe,"STRONG",{});var Avt=s(O2e);Y4r=r(Avt,"pegasus"),Avt.forEach(t),K4r=r(ZBe," \u2014 "),KV=n(ZBe,"A",{href:!0});var Lvt=s(KV);Z4r=r(Lvt,"FlaxPegasusForConditionalGeneration"),Lvt.forEach(t),eEr=r(ZBe," (Pegasus model)"),ZBe.forEach(t),oEr=i(lo),dC=n(lo,"LI",{});var exe=s(dC);G2e=n(exe,"STRONG",{});var Bvt=s(G2e);rEr=r(Bvt,"t5"),Bvt.forEach(t),tEr=r(exe," \u2014 "),ZV=n(exe,"A",{href:!0});var xvt=s(ZV);aEr=r(xvt,"FlaxT5ForConditionalGeneration"),xvt.forEach(t),nEr=r(exe," (T5 model)"),exe.forEach(t),lo.forEach(t),sEr=i($a),X2e=n($a,"P",{});var kvt=s(X2e);lEr=r(kvt,"Examples:"),kvt.forEach(t),iEr=i($a),m(aL.$$.fragment,$a),$a.forEach(t),yi.forEach(t),BRe=i(d),Ff=n(d,"H2",{class:!0});var XPe=s(Ff);cC=n(XPe,"A",{id:!0,class:!0,href:!0});var Rvt=s(cC);V2e=n(Rvt,"SPAN",{});var Svt=s(V2e);m(nL.$$.fragment,Svt),Svt.forEach(t),Rvt.forEach(t),dEr=i(XPe),z2e=n(XPe,"SPAN",{});var Pvt=s(z2e);cEr=r(Pvt,"FlaxAutoModelForSequenceClassification"),Pvt.forEach(t),XPe.forEach(t),xRe=i(d),Dr=n(d,"DIV",{class:!0});var Ai=s(Dr);m(sL.$$.fragment,Ai),fEr=i(Ai),Cf=n(Ai,"P",{});var vQ=s(Cf);mEr=r(vQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),W2e=n(vQ,"CODE",{});var $vt=s(W2e);gEr=r($vt,"from_pretrained()"),$vt.forEach(t),hEr=r(vQ,"class method or the "),Q2e=n(vQ,"CODE",{});var Ivt=s(Q2e);pEr=r(Ivt,"from_config()"),Ivt.forEach(t),_Er=r(vQ,`class
method.`),vQ.forEach(t),uEr=i(Ai),lL=n(Ai,"P",{});var VPe=s(lL);bEr=r(VPe,"This class cannot be instantiated directly using "),H2e=n(VPe,"CODE",{});var jvt=s(H2e);vEr=r(jvt,"__init__()"),jvt.forEach(t),TEr=r(VPe," (throws an error)."),VPe.forEach(t),FEr=i(Ai),St=n(Ai,"DIV",{class:!0});var Li=s(St);m(iL.$$.fragment,Li),CEr=i(Li),U2e=n(Li,"P",{});var Dvt=s(U2e);MEr=r(Dvt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Dvt.forEach(t),EEr=i(Li),Mf=n(Li,"P",{});var TQ=s(Mf);yEr=r(TQ,`Note:
Loading a model from its configuration file does `),J2e=n(TQ,"STRONG",{});var Nvt=s(J2e);wEr=r(Nvt,"not"),Nvt.forEach(t),AEr=r(TQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Y2e=n(TQ,"CODE",{});var qvt=s(Y2e);LEr=r(qvt,"from_pretrained()"),qvt.forEach(t),BEr=r(TQ,"to load the model weights."),TQ.forEach(t),xEr=i(Li),K2e=n(Li,"P",{});var Ovt=s(K2e);kEr=r(Ovt,"Examples:"),Ovt.forEach(t),REr=i(Li),m(dL.$$.fragment,Li),Li.forEach(t),SEr=i(Ai),Ro=n(Ai,"DIV",{class:!0});var Ia=s(Ro);m(cL.$$.fragment,Ia),PEr=i(Ia),Z2e=n(Ia,"P",{});var Gvt=s(Z2e);$Er=r(Gvt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Gvt.forEach(t),IEr=i(Ia),Dn=n(Ia,"P",{});var YM=s(Dn);jEr=r(YM,"The model class to instantiate is selected based on the "),eve=n(YM,"CODE",{});var Xvt=s(eve);DEr=r(Xvt,"model_type"),Xvt.forEach(t),NEr=r(YM,` property of the config object (either
passed as an argument or loaded from `),ove=n(YM,"CODE",{});var Vvt=s(ove);qEr=r(Vvt,"pretrained_model_name_or_path"),Vvt.forEach(t),OEr=r(YM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rve=n(YM,"CODE",{});var zvt=s(rve);GEr=r(zvt,"pretrained_model_name_or_path"),zvt.forEach(t),XEr=r(YM,":"),YM.forEach(t),VEr=i(Ia),be=n(Ia,"UL",{});var we=s(be);fC=n(we,"LI",{});var oxe=s(fC);tve=n(oxe,"STRONG",{});var Wvt=s(tve);zEr=r(Wvt,"albert"),Wvt.forEach(t),WEr=r(oxe," \u2014 "),ez=n(oxe,"A",{href:!0});var Qvt=s(ez);QEr=r(Qvt,"FlaxAlbertForSequenceClassification"),Qvt.forEach(t),HEr=r(oxe," (ALBERT model)"),oxe.forEach(t),UEr=i(we),mC=n(we,"LI",{});var rxe=s(mC);ave=n(rxe,"STRONG",{});var Hvt=s(ave);JEr=r(Hvt,"bart"),Hvt.forEach(t),YEr=r(rxe," \u2014 "),oz=n(rxe,"A",{href:!0});var Uvt=s(oz);KEr=r(Uvt,"FlaxBartForSequenceClassification"),Uvt.forEach(t),ZEr=r(rxe," (BART model)"),rxe.forEach(t),e3r=i(we),gC=n(we,"LI",{});var txe=s(gC);nve=n(txe,"STRONG",{});var Jvt=s(nve);o3r=r(Jvt,"bert"),Jvt.forEach(t),r3r=r(txe," \u2014 "),rz=n(txe,"A",{href:!0});var Yvt=s(rz);t3r=r(Yvt,"FlaxBertForSequenceClassification"),Yvt.forEach(t),a3r=r(txe," (BERT model)"),txe.forEach(t),n3r=i(we),hC=n(we,"LI",{});var axe=s(hC);sve=n(axe,"STRONG",{});var Kvt=s(sve);s3r=r(Kvt,"big_bird"),Kvt.forEach(t),l3r=r(axe," \u2014 "),tz=n(axe,"A",{href:!0});var Zvt=s(tz);i3r=r(Zvt,"FlaxBigBirdForSequenceClassification"),Zvt.forEach(t),d3r=r(axe," (BigBird model)"),axe.forEach(t),c3r=i(we),pC=n(we,"LI",{});var nxe=s(pC);lve=n(nxe,"STRONG",{});var e6t=s(lve);f3r=r(e6t,"distilbert"),e6t.forEach(t),m3r=r(nxe," \u2014 "),az=n(nxe,"A",{href:!0});var o6t=s(az);g3r=r(o6t,"FlaxDistilBertForSequenceClassification"),o6t.forEach(t),h3r=r(nxe," (DistilBERT model)"),nxe.forEach(t),p3r=i(we),_C=n(we,"LI",{});var sxe=s(_C);ive=n(sxe,"STRONG",{});var r6t=s(ive);_3r=r(r6t,"electra"),r6t.forEach(t),u3r=r(sxe," \u2014 "),nz=n(sxe,"A",{href:!0});var t6t=s(nz);b3r=r(t6t,"FlaxElectraForSequenceClassification"),t6t.forEach(t),v3r=r(sxe," (ELECTRA model)"),sxe.forEach(t),T3r=i(we),uC=n(we,"LI",{});var lxe=s(uC);dve=n(lxe,"STRONG",{});var a6t=s(dve);F3r=r(a6t,"mbart"),a6t.forEach(t),C3r=r(lxe," \u2014 "),sz=n(lxe,"A",{href:!0});var n6t=s(sz);M3r=r(n6t,"FlaxMBartForSequenceClassification"),n6t.forEach(t),E3r=r(lxe," (mBART model)"),lxe.forEach(t),y3r=i(we),bC=n(we,"LI",{});var ixe=s(bC);cve=n(ixe,"STRONG",{});var s6t=s(cve);w3r=r(s6t,"roberta"),s6t.forEach(t),A3r=r(ixe," \u2014 "),lz=n(ixe,"A",{href:!0});var l6t=s(lz);L3r=r(l6t,"FlaxRobertaForSequenceClassification"),l6t.forEach(t),B3r=r(ixe," (RoBERTa model)"),ixe.forEach(t),x3r=i(we),vC=n(we,"LI",{});var dxe=s(vC);fve=n(dxe,"STRONG",{});var i6t=s(fve);k3r=r(i6t,"roformer"),i6t.forEach(t),R3r=r(dxe," \u2014 "),iz=n(dxe,"A",{href:!0});var d6t=s(iz);S3r=r(d6t,"FlaxRoFormerForSequenceClassification"),d6t.forEach(t),P3r=r(dxe," (RoFormer model)"),dxe.forEach(t),$3r=i(we),TC=n(we,"LI",{});var cxe=s(TC);mve=n(cxe,"STRONG",{});var c6t=s(mve);I3r=r(c6t,"xlm-roberta"),c6t.forEach(t),j3r=r(cxe," \u2014 "),dz=n(cxe,"A",{href:!0});var f6t=s(dz);D3r=r(f6t,"FlaxXLMRobertaForSequenceClassification"),f6t.forEach(t),N3r=r(cxe," (XLM-RoBERTa model)"),cxe.forEach(t),we.forEach(t),q3r=i(Ia),gve=n(Ia,"P",{});var m6t=s(gve);O3r=r(m6t,"Examples:"),m6t.forEach(t),G3r=i(Ia),m(fL.$$.fragment,Ia),Ia.forEach(t),Ai.forEach(t),kRe=i(d),Ef=n(d,"H2",{class:!0});var zPe=s(Ef);FC=n(zPe,"A",{id:!0,class:!0,href:!0});var g6t=s(FC);hve=n(g6t,"SPAN",{});var h6t=s(hve);m(mL.$$.fragment,h6t),h6t.forEach(t),g6t.forEach(t),X3r=i(zPe),pve=n(zPe,"SPAN",{});var p6t=s(pve);V3r=r(p6t,"FlaxAutoModelForSpeechSeq2Seq"),p6t.forEach(t),zPe.forEach(t),RRe=i(d),Nr=n(d,"DIV",{class:!0});var Bi=s(Nr);m(gL.$$.fragment,Bi),z3r=i(Bi),yf=n(Bi,"P",{});var FQ=s(yf);W3r=r(FQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),_ve=n(FQ,"CODE",{});var _6t=s(_ve);Q3r=r(_6t,"from_pretrained()"),_6t.forEach(t),H3r=r(FQ,"class method or the "),uve=n(FQ,"CODE",{});var u6t=s(uve);U3r=r(u6t,"from_config()"),u6t.forEach(t),J3r=r(FQ,`class
method.`),FQ.forEach(t),Y3r=i(Bi),hL=n(Bi,"P",{});var WPe=s(hL);K3r=r(WPe,"This class cannot be instantiated directly using "),bve=n(WPe,"CODE",{});var b6t=s(bve);Z3r=r(b6t,"__init__()"),b6t.forEach(t),eyr=r(WPe," (throws an error)."),WPe.forEach(t),oyr=i(Bi),Pt=n(Bi,"DIV",{class:!0});var xi=s(Pt);m(pL.$$.fragment,xi),ryr=i(xi),vve=n(xi,"P",{});var v6t=s(vve);tyr=r(v6t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),v6t.forEach(t),ayr=i(xi),wf=n(xi,"P",{});var CQ=s(wf);nyr=r(CQ,`Note:
Loading a model from its configuration file does `),Tve=n(CQ,"STRONG",{});var T6t=s(Tve);syr=r(T6t,"not"),T6t.forEach(t),lyr=r(CQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fve=n(CQ,"CODE",{});var F6t=s(Fve);iyr=r(F6t,"from_pretrained()"),F6t.forEach(t),dyr=r(CQ,"to load the model weights."),CQ.forEach(t),cyr=i(xi),Cve=n(xi,"P",{});var C6t=s(Cve);fyr=r(C6t,"Examples:"),C6t.forEach(t),myr=i(xi),m(_L.$$.fragment,xi),xi.forEach(t),gyr=i(Bi),So=n(Bi,"DIV",{class:!0});var ja=s(So);m(uL.$$.fragment,ja),hyr=i(ja),Mve=n(ja,"P",{});var M6t=s(Mve);pyr=r(M6t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),M6t.forEach(t),_yr=i(ja),Nn=n(ja,"P",{});var KM=s(Nn);uyr=r(KM,"The model class to instantiate is selected based on the "),Eve=n(KM,"CODE",{});var E6t=s(Eve);byr=r(E6t,"model_type"),E6t.forEach(t),vyr=r(KM,` property of the config object (either
passed as an argument or loaded from `),yve=n(KM,"CODE",{});var y6t=s(yve);Tyr=r(y6t,"pretrained_model_name_or_path"),y6t.forEach(t),Fyr=r(KM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wve=n(KM,"CODE",{});var w6t=s(wve);Cyr=r(w6t,"pretrained_model_name_or_path"),w6t.forEach(t),Myr=r(KM,":"),KM.forEach(t),Eyr=i(ja),Ave=n(ja,"UL",{});var A6t=s(Ave);CC=n(A6t,"LI",{});var fxe=s(CC);Lve=n(fxe,"STRONG",{});var L6t=s(Lve);yyr=r(L6t,"speech-encoder-decoder"),L6t.forEach(t),wyr=r(fxe," \u2014 "),cz=n(fxe,"A",{href:!0});var B6t=s(cz);Ayr=r(B6t,"FlaxSpeechEncoderDecoderModel"),B6t.forEach(t),Lyr=r(fxe," (Speech Encoder decoder model)"),fxe.forEach(t),A6t.forEach(t),Byr=i(ja),Bve=n(ja,"P",{});var x6t=s(Bve);xyr=r(x6t,"Examples:"),x6t.forEach(t),kyr=i(ja),m(bL.$$.fragment,ja),ja.forEach(t),Bi.forEach(t),SRe=i(d),Af=n(d,"H2",{class:!0});var QPe=s(Af);MC=n(QPe,"A",{id:!0,class:!0,href:!0});var k6t=s(MC);xve=n(k6t,"SPAN",{});var R6t=s(xve);m(vL.$$.fragment,R6t),R6t.forEach(t),k6t.forEach(t),Ryr=i(QPe),kve=n(QPe,"SPAN",{});var S6t=s(kve);Syr=r(S6t,"FlaxAutoModelForQuestionAnswering"),S6t.forEach(t),QPe.forEach(t),PRe=i(d),qr=n(d,"DIV",{class:!0});var ki=s(qr);m(TL.$$.fragment,ki),Pyr=i(ki),Lf=n(ki,"P",{});var MQ=s(Lf);$yr=r(MQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Rve=n(MQ,"CODE",{});var P6t=s(Rve);Iyr=r(P6t,"from_pretrained()"),P6t.forEach(t),jyr=r(MQ,"class method or the "),Sve=n(MQ,"CODE",{});var $6t=s(Sve);Dyr=r($6t,"from_config()"),$6t.forEach(t),Nyr=r(MQ,`class
method.`),MQ.forEach(t),qyr=i(ki),FL=n(ki,"P",{});var HPe=s(FL);Oyr=r(HPe,"This class cannot be instantiated directly using "),Pve=n(HPe,"CODE",{});var I6t=s(Pve);Gyr=r(I6t,"__init__()"),I6t.forEach(t),Xyr=r(HPe," (throws an error)."),HPe.forEach(t),Vyr=i(ki),$t=n(ki,"DIV",{class:!0});var Ri=s($t);m(CL.$$.fragment,Ri),zyr=i(Ri),$ve=n(Ri,"P",{});var j6t=s($ve);Wyr=r(j6t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),j6t.forEach(t),Qyr=i(Ri),Bf=n(Ri,"P",{});var EQ=s(Bf);Hyr=r(EQ,`Note:
Loading a model from its configuration file does `),Ive=n(EQ,"STRONG",{});var D6t=s(Ive);Uyr=r(D6t,"not"),D6t.forEach(t),Jyr=r(EQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),jve=n(EQ,"CODE",{});var N6t=s(jve);Yyr=r(N6t,"from_pretrained()"),N6t.forEach(t),Kyr=r(EQ,"to load the model weights."),EQ.forEach(t),Zyr=i(Ri),Dve=n(Ri,"P",{});var q6t=s(Dve);ewr=r(q6t,"Examples:"),q6t.forEach(t),owr=i(Ri),m(ML.$$.fragment,Ri),Ri.forEach(t),rwr=i(ki),Po=n(ki,"DIV",{class:!0});var Da=s(Po);m(EL.$$.fragment,Da),twr=i(Da),Nve=n(Da,"P",{});var O6t=s(Nve);awr=r(O6t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),O6t.forEach(t),nwr=i(Da),qn=n(Da,"P",{});var ZM=s(qn);swr=r(ZM,"The model class to instantiate is selected based on the "),qve=n(ZM,"CODE",{});var G6t=s(qve);lwr=r(G6t,"model_type"),G6t.forEach(t),iwr=r(ZM,` property of the config object (either
passed as an argument or loaded from `),Ove=n(ZM,"CODE",{});var X6t=s(Ove);dwr=r(X6t,"pretrained_model_name_or_path"),X6t.forEach(t),cwr=r(ZM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gve=n(ZM,"CODE",{});var V6t=s(Gve);fwr=r(V6t,"pretrained_model_name_or_path"),V6t.forEach(t),mwr=r(ZM,":"),ZM.forEach(t),gwr=i(Da),ve=n(Da,"UL",{});var Ae=s(ve);EC=n(Ae,"LI",{});var mxe=s(EC);Xve=n(mxe,"STRONG",{});var z6t=s(Xve);hwr=r(z6t,"albert"),z6t.forEach(t),pwr=r(mxe," \u2014 "),fz=n(mxe,"A",{href:!0});var W6t=s(fz);_wr=r(W6t,"FlaxAlbertForQuestionAnswering"),W6t.forEach(t),uwr=r(mxe," (ALBERT model)"),mxe.forEach(t),bwr=i(Ae),yC=n(Ae,"LI",{});var gxe=s(yC);Vve=n(gxe,"STRONG",{});var Q6t=s(Vve);vwr=r(Q6t,"bart"),Q6t.forEach(t),Twr=r(gxe," \u2014 "),mz=n(gxe,"A",{href:!0});var H6t=s(mz);Fwr=r(H6t,"FlaxBartForQuestionAnswering"),H6t.forEach(t),Cwr=r(gxe," (BART model)"),gxe.forEach(t),Mwr=i(Ae),wC=n(Ae,"LI",{});var hxe=s(wC);zve=n(hxe,"STRONG",{});var U6t=s(zve);Ewr=r(U6t,"bert"),U6t.forEach(t),ywr=r(hxe," \u2014 "),gz=n(hxe,"A",{href:!0});var J6t=s(gz);wwr=r(J6t,"FlaxBertForQuestionAnswering"),J6t.forEach(t),Awr=r(hxe," (BERT model)"),hxe.forEach(t),Lwr=i(Ae),AC=n(Ae,"LI",{});var pxe=s(AC);Wve=n(pxe,"STRONG",{});var Y6t=s(Wve);Bwr=r(Y6t,"big_bird"),Y6t.forEach(t),xwr=r(pxe," \u2014 "),hz=n(pxe,"A",{href:!0});var K6t=s(hz);kwr=r(K6t,"FlaxBigBirdForQuestionAnswering"),K6t.forEach(t),Rwr=r(pxe," (BigBird model)"),pxe.forEach(t),Swr=i(Ae),LC=n(Ae,"LI",{});var _xe=s(LC);Qve=n(_xe,"STRONG",{});var Z6t=s(Qve);Pwr=r(Z6t,"distilbert"),Z6t.forEach(t),$wr=r(_xe," \u2014 "),pz=n(_xe,"A",{href:!0});var e0t=s(pz);Iwr=r(e0t,"FlaxDistilBertForQuestionAnswering"),e0t.forEach(t),jwr=r(_xe," (DistilBERT model)"),_xe.forEach(t),Dwr=i(Ae),BC=n(Ae,"LI",{});var uxe=s(BC);Hve=n(uxe,"STRONG",{});var o0t=s(Hve);Nwr=r(o0t,"electra"),o0t.forEach(t),qwr=r(uxe," \u2014 "),_z=n(uxe,"A",{href:!0});var r0t=s(_z);Owr=r(r0t,"FlaxElectraForQuestionAnswering"),r0t.forEach(t),Gwr=r(uxe," (ELECTRA model)"),uxe.forEach(t),Xwr=i(Ae),xC=n(Ae,"LI",{});var bxe=s(xC);Uve=n(bxe,"STRONG",{});var t0t=s(Uve);Vwr=r(t0t,"mbart"),t0t.forEach(t),zwr=r(bxe," \u2014 "),uz=n(bxe,"A",{href:!0});var a0t=s(uz);Wwr=r(a0t,"FlaxMBartForQuestionAnswering"),a0t.forEach(t),Qwr=r(bxe," (mBART model)"),bxe.forEach(t),Hwr=i(Ae),kC=n(Ae,"LI",{});var vxe=s(kC);Jve=n(vxe,"STRONG",{});var n0t=s(Jve);Uwr=r(n0t,"roberta"),n0t.forEach(t),Jwr=r(vxe," \u2014 "),bz=n(vxe,"A",{href:!0});var s0t=s(bz);Ywr=r(s0t,"FlaxRobertaForQuestionAnswering"),s0t.forEach(t),Kwr=r(vxe," (RoBERTa model)"),vxe.forEach(t),Zwr=i(Ae),RC=n(Ae,"LI",{});var Txe=s(RC);Yve=n(Txe,"STRONG",{});var l0t=s(Yve);eAr=r(l0t,"roformer"),l0t.forEach(t),oAr=r(Txe," \u2014 "),vz=n(Txe,"A",{href:!0});var i0t=s(vz);rAr=r(i0t,"FlaxRoFormerForQuestionAnswering"),i0t.forEach(t),tAr=r(Txe," (RoFormer model)"),Txe.forEach(t),aAr=i(Ae),SC=n(Ae,"LI",{});var Fxe=s(SC);Kve=n(Fxe,"STRONG",{});var d0t=s(Kve);nAr=r(d0t,"xlm-roberta"),d0t.forEach(t),sAr=r(Fxe," \u2014 "),Tz=n(Fxe,"A",{href:!0});var c0t=s(Tz);lAr=r(c0t,"FlaxXLMRobertaForQuestionAnswering"),c0t.forEach(t),iAr=r(Fxe," (XLM-RoBERTa model)"),Fxe.forEach(t),Ae.forEach(t),dAr=i(Da),Zve=n(Da,"P",{});var f0t=s(Zve);cAr=r(f0t,"Examples:"),f0t.forEach(t),fAr=i(Da),m(yL.$$.fragment,Da),Da.forEach(t),ki.forEach(t),$Re=i(d),xf=n(d,"H2",{class:!0});var UPe=s(xf);PC=n(UPe,"A",{id:!0,class:!0,href:!0});var m0t=s(PC);e6e=n(m0t,"SPAN",{});var g0t=s(e6e);m(wL.$$.fragment,g0t),g0t.forEach(t),m0t.forEach(t),mAr=i(UPe),o6e=n(UPe,"SPAN",{});var h0t=s(o6e);gAr=r(h0t,"FlaxAutoModelForTokenClassification"),h0t.forEach(t),UPe.forEach(t),IRe=i(d),Or=n(d,"DIV",{class:!0});var Si=s(Or);m(AL.$$.fragment,Si),hAr=i(Si),kf=n(Si,"P",{});var yQ=s(kf);pAr=r(yQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),r6e=n(yQ,"CODE",{});var p0t=s(r6e);_Ar=r(p0t,"from_pretrained()"),p0t.forEach(t),uAr=r(yQ,"class method or the "),t6e=n(yQ,"CODE",{});var _0t=s(t6e);bAr=r(_0t,"from_config()"),_0t.forEach(t),vAr=r(yQ,`class
method.`),yQ.forEach(t),TAr=i(Si),LL=n(Si,"P",{});var JPe=s(LL);FAr=r(JPe,"This class cannot be instantiated directly using "),a6e=n(JPe,"CODE",{});var u0t=s(a6e);CAr=r(u0t,"__init__()"),u0t.forEach(t),MAr=r(JPe," (throws an error)."),JPe.forEach(t),EAr=i(Si),It=n(Si,"DIV",{class:!0});var Pi=s(It);m(BL.$$.fragment,Pi),yAr=i(Pi),n6e=n(Pi,"P",{});var b0t=s(n6e);wAr=r(b0t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),b0t.forEach(t),AAr=i(Pi),Rf=n(Pi,"P",{});var wQ=s(Rf);LAr=r(wQ,`Note:
Loading a model from its configuration file does `),s6e=n(wQ,"STRONG",{});var v0t=s(s6e);BAr=r(v0t,"not"),v0t.forEach(t),xAr=r(wQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),l6e=n(wQ,"CODE",{});var T0t=s(l6e);kAr=r(T0t,"from_pretrained()"),T0t.forEach(t),RAr=r(wQ,"to load the model weights."),wQ.forEach(t),SAr=i(Pi),i6e=n(Pi,"P",{});var F0t=s(i6e);PAr=r(F0t,"Examples:"),F0t.forEach(t),$Ar=i(Pi),m(xL.$$.fragment,Pi),Pi.forEach(t),IAr=i(Si),$o=n(Si,"DIV",{class:!0});var Na=s($o);m(kL.$$.fragment,Na),jAr=i(Na),d6e=n(Na,"P",{});var C0t=s(d6e);DAr=r(C0t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),C0t.forEach(t),NAr=i(Na),On=n(Na,"P",{});var e4=s(On);qAr=r(e4,"The model class to instantiate is selected based on the "),c6e=n(e4,"CODE",{});var M0t=s(c6e);OAr=r(M0t,"model_type"),M0t.forEach(t),GAr=r(e4,` property of the config object (either
passed as an argument or loaded from `),f6e=n(e4,"CODE",{});var E0t=s(f6e);XAr=r(E0t,"pretrained_model_name_or_path"),E0t.forEach(t),VAr=r(e4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m6e=n(e4,"CODE",{});var y0t=s(m6e);zAr=r(y0t,"pretrained_model_name_or_path"),y0t.forEach(t),WAr=r(e4,":"),e4.forEach(t),QAr=i(Na),Re=n(Na,"UL",{});var Xo=s(Re);$C=n(Xo,"LI",{});var Cxe=s($C);g6e=n(Cxe,"STRONG",{});var w0t=s(g6e);HAr=r(w0t,"albert"),w0t.forEach(t),UAr=r(Cxe," \u2014 "),Fz=n(Cxe,"A",{href:!0});var A0t=s(Fz);JAr=r(A0t,"FlaxAlbertForTokenClassification"),A0t.forEach(t),YAr=r(Cxe," (ALBERT model)"),Cxe.forEach(t),KAr=i(Xo),IC=n(Xo,"LI",{});var Mxe=s(IC);h6e=n(Mxe,"STRONG",{});var L0t=s(h6e);ZAr=r(L0t,"bert"),L0t.forEach(t),eLr=r(Mxe," \u2014 "),Cz=n(Mxe,"A",{href:!0});var B0t=s(Cz);oLr=r(B0t,"FlaxBertForTokenClassification"),B0t.forEach(t),rLr=r(Mxe," (BERT model)"),Mxe.forEach(t),tLr=i(Xo),jC=n(Xo,"LI",{});var Exe=s(jC);p6e=n(Exe,"STRONG",{});var x0t=s(p6e);aLr=r(x0t,"big_bird"),x0t.forEach(t),nLr=r(Exe," \u2014 "),Mz=n(Exe,"A",{href:!0});var k0t=s(Mz);sLr=r(k0t,"FlaxBigBirdForTokenClassification"),k0t.forEach(t),lLr=r(Exe," (BigBird model)"),Exe.forEach(t),iLr=i(Xo),DC=n(Xo,"LI",{});var yxe=s(DC);_6e=n(yxe,"STRONG",{});var R0t=s(_6e);dLr=r(R0t,"distilbert"),R0t.forEach(t),cLr=r(yxe," \u2014 "),Ez=n(yxe,"A",{href:!0});var S0t=s(Ez);fLr=r(S0t,"FlaxDistilBertForTokenClassification"),S0t.forEach(t),mLr=r(yxe," (DistilBERT model)"),yxe.forEach(t),gLr=i(Xo),NC=n(Xo,"LI",{});var wxe=s(NC);u6e=n(wxe,"STRONG",{});var P0t=s(u6e);hLr=r(P0t,"electra"),P0t.forEach(t),pLr=r(wxe," \u2014 "),yz=n(wxe,"A",{href:!0});var $0t=s(yz);_Lr=r($0t,"FlaxElectraForTokenClassification"),$0t.forEach(t),uLr=r(wxe," (ELECTRA model)"),wxe.forEach(t),bLr=i(Xo),qC=n(Xo,"LI",{});var Axe=s(qC);b6e=n(Axe,"STRONG",{});var I0t=s(b6e);vLr=r(I0t,"roberta"),I0t.forEach(t),TLr=r(Axe," \u2014 "),wz=n(Axe,"A",{href:!0});var j0t=s(wz);FLr=r(j0t,"FlaxRobertaForTokenClassification"),j0t.forEach(t),CLr=r(Axe," (RoBERTa model)"),Axe.forEach(t),MLr=i(Xo),OC=n(Xo,"LI",{});var Lxe=s(OC);v6e=n(Lxe,"STRONG",{});var D0t=s(v6e);ELr=r(D0t,"roformer"),D0t.forEach(t),yLr=r(Lxe," \u2014 "),Az=n(Lxe,"A",{href:!0});var N0t=s(Az);wLr=r(N0t,"FlaxRoFormerForTokenClassification"),N0t.forEach(t),ALr=r(Lxe," (RoFormer model)"),Lxe.forEach(t),LLr=i(Xo),GC=n(Xo,"LI",{});var Bxe=s(GC);T6e=n(Bxe,"STRONG",{});var q0t=s(T6e);BLr=r(q0t,"xlm-roberta"),q0t.forEach(t),xLr=r(Bxe," \u2014 "),Lz=n(Bxe,"A",{href:!0});var O0t=s(Lz);kLr=r(O0t,"FlaxXLMRobertaForTokenClassification"),O0t.forEach(t),RLr=r(Bxe," (XLM-RoBERTa model)"),Bxe.forEach(t),Xo.forEach(t),SLr=i(Na),F6e=n(Na,"P",{});var G0t=s(F6e);PLr=r(G0t,"Examples:"),G0t.forEach(t),$Lr=i(Na),m(RL.$$.fragment,Na),Na.forEach(t),Si.forEach(t),jRe=i(d),Sf=n(d,"H2",{class:!0});var YPe=s(Sf);XC=n(YPe,"A",{id:!0,class:!0,href:!0});var X0t=s(XC);C6e=n(X0t,"SPAN",{});var V0t=s(C6e);m(SL.$$.fragment,V0t),V0t.forEach(t),X0t.forEach(t),ILr=i(YPe),M6e=n(YPe,"SPAN",{});var z0t=s(M6e);jLr=r(z0t,"FlaxAutoModelForMultipleChoice"),z0t.forEach(t),YPe.forEach(t),DRe=i(d),Gr=n(d,"DIV",{class:!0});var $i=s(Gr);m(PL.$$.fragment,$i),DLr=i($i),Pf=n($i,"P",{});var AQ=s(Pf);NLr=r(AQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),E6e=n(AQ,"CODE",{});var W0t=s(E6e);qLr=r(W0t,"from_pretrained()"),W0t.forEach(t),OLr=r(AQ,"class method or the "),y6e=n(AQ,"CODE",{});var Q0t=s(y6e);GLr=r(Q0t,"from_config()"),Q0t.forEach(t),XLr=r(AQ,`class
method.`),AQ.forEach(t),VLr=i($i),$L=n($i,"P",{});var KPe=s($L);zLr=r(KPe,"This class cannot be instantiated directly using "),w6e=n(KPe,"CODE",{});var H0t=s(w6e);WLr=r(H0t,"__init__()"),H0t.forEach(t),QLr=r(KPe," (throws an error)."),KPe.forEach(t),HLr=i($i),jt=n($i,"DIV",{class:!0});var Ii=s(jt);m(IL.$$.fragment,Ii),ULr=i(Ii),A6e=n(Ii,"P",{});var U0t=s(A6e);JLr=r(U0t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),U0t.forEach(t),YLr=i(Ii),$f=n(Ii,"P",{});var LQ=s($f);KLr=r(LQ,`Note:
Loading a model from its configuration file does `),L6e=n(LQ,"STRONG",{});var J0t=s(L6e);ZLr=r(J0t,"not"),J0t.forEach(t),e7r=r(LQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),B6e=n(LQ,"CODE",{});var Y0t=s(B6e);o7r=r(Y0t,"from_pretrained()"),Y0t.forEach(t),r7r=r(LQ,"to load the model weights."),LQ.forEach(t),t7r=i(Ii),x6e=n(Ii,"P",{});var K0t=s(x6e);a7r=r(K0t,"Examples:"),K0t.forEach(t),n7r=i(Ii),m(jL.$$.fragment,Ii),Ii.forEach(t),s7r=i($i),Io=n($i,"DIV",{class:!0});var qa=s(Io);m(DL.$$.fragment,qa),l7r=i(qa),k6e=n(qa,"P",{});var Z0t=s(k6e);i7r=r(Z0t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Z0t.forEach(t),d7r=i(qa),Gn=n(qa,"P",{});var o4=s(Gn);c7r=r(o4,"The model class to instantiate is selected based on the "),R6e=n(o4,"CODE",{});var eTt=s(R6e);f7r=r(eTt,"model_type"),eTt.forEach(t),m7r=r(o4,` property of the config object (either
passed as an argument or loaded from `),S6e=n(o4,"CODE",{});var oTt=s(S6e);g7r=r(oTt,"pretrained_model_name_or_path"),oTt.forEach(t),h7r=r(o4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P6e=n(o4,"CODE",{});var rTt=s(P6e);p7r=r(rTt,"pretrained_model_name_or_path"),rTt.forEach(t),_7r=r(o4,":"),o4.forEach(t),u7r=i(qa),Se=n(qa,"UL",{});var Vo=s(Se);VC=n(Vo,"LI",{});var xxe=s(VC);$6e=n(xxe,"STRONG",{});var tTt=s($6e);b7r=r(tTt,"albert"),tTt.forEach(t),v7r=r(xxe," \u2014 "),Bz=n(xxe,"A",{href:!0});var aTt=s(Bz);T7r=r(aTt,"FlaxAlbertForMultipleChoice"),aTt.forEach(t),F7r=r(xxe," (ALBERT model)"),xxe.forEach(t),C7r=i(Vo),zC=n(Vo,"LI",{});var kxe=s(zC);I6e=n(kxe,"STRONG",{});var nTt=s(I6e);M7r=r(nTt,"bert"),nTt.forEach(t),E7r=r(kxe," \u2014 "),xz=n(kxe,"A",{href:!0});var sTt=s(xz);y7r=r(sTt,"FlaxBertForMultipleChoice"),sTt.forEach(t),w7r=r(kxe," (BERT model)"),kxe.forEach(t),A7r=i(Vo),WC=n(Vo,"LI",{});var Rxe=s(WC);j6e=n(Rxe,"STRONG",{});var lTt=s(j6e);L7r=r(lTt,"big_bird"),lTt.forEach(t),B7r=r(Rxe," \u2014 "),kz=n(Rxe,"A",{href:!0});var iTt=s(kz);x7r=r(iTt,"FlaxBigBirdForMultipleChoice"),iTt.forEach(t),k7r=r(Rxe," (BigBird model)"),Rxe.forEach(t),R7r=i(Vo),QC=n(Vo,"LI",{});var Sxe=s(QC);D6e=n(Sxe,"STRONG",{});var dTt=s(D6e);S7r=r(dTt,"distilbert"),dTt.forEach(t),P7r=r(Sxe," \u2014 "),Rz=n(Sxe,"A",{href:!0});var cTt=s(Rz);$7r=r(cTt,"FlaxDistilBertForMultipleChoice"),cTt.forEach(t),I7r=r(Sxe," (DistilBERT model)"),Sxe.forEach(t),j7r=i(Vo),HC=n(Vo,"LI",{});var Pxe=s(HC);N6e=n(Pxe,"STRONG",{});var fTt=s(N6e);D7r=r(fTt,"electra"),fTt.forEach(t),N7r=r(Pxe," \u2014 "),Sz=n(Pxe,"A",{href:!0});var mTt=s(Sz);q7r=r(mTt,"FlaxElectraForMultipleChoice"),mTt.forEach(t),O7r=r(Pxe," (ELECTRA model)"),Pxe.forEach(t),G7r=i(Vo),UC=n(Vo,"LI",{});var $xe=s(UC);q6e=n($xe,"STRONG",{});var gTt=s(q6e);X7r=r(gTt,"roberta"),gTt.forEach(t),V7r=r($xe," \u2014 "),Pz=n($xe,"A",{href:!0});var hTt=s(Pz);z7r=r(hTt,"FlaxRobertaForMultipleChoice"),hTt.forEach(t),W7r=r($xe," (RoBERTa model)"),$xe.forEach(t),Q7r=i(Vo),JC=n(Vo,"LI",{});var Ixe=s(JC);O6e=n(Ixe,"STRONG",{});var pTt=s(O6e);H7r=r(pTt,"roformer"),pTt.forEach(t),U7r=r(Ixe," \u2014 "),$z=n(Ixe,"A",{href:!0});var _Tt=s($z);J7r=r(_Tt,"FlaxRoFormerForMultipleChoice"),_Tt.forEach(t),Y7r=r(Ixe," (RoFormer model)"),Ixe.forEach(t),K7r=i(Vo),YC=n(Vo,"LI",{});var jxe=s(YC);G6e=n(jxe,"STRONG",{});var uTt=s(G6e);Z7r=r(uTt,"xlm-roberta"),uTt.forEach(t),e9r=r(jxe," \u2014 "),Iz=n(jxe,"A",{href:!0});var bTt=s(Iz);o9r=r(bTt,"FlaxXLMRobertaForMultipleChoice"),bTt.forEach(t),r9r=r(jxe," (XLM-RoBERTa model)"),jxe.forEach(t),Vo.forEach(t),t9r=i(qa),X6e=n(qa,"P",{});var vTt=s(X6e);a9r=r(vTt,"Examples:"),vTt.forEach(t),n9r=i(qa),m(NL.$$.fragment,qa),qa.forEach(t),$i.forEach(t),NRe=i(d),If=n(d,"H2",{class:!0});var ZPe=s(If);KC=n(ZPe,"A",{id:!0,class:!0,href:!0});var TTt=s(KC);V6e=n(TTt,"SPAN",{});var FTt=s(V6e);m(qL.$$.fragment,FTt),FTt.forEach(t),TTt.forEach(t),s9r=i(ZPe),z6e=n(ZPe,"SPAN",{});var CTt=s(z6e);l9r=r(CTt,"FlaxAutoModelForNextSentencePrediction"),CTt.forEach(t),ZPe.forEach(t),qRe=i(d),Xr=n(d,"DIV",{class:!0});var ji=s(Xr);m(OL.$$.fragment,ji),i9r=i(ji),jf=n(ji,"P",{});var BQ=s(jf);d9r=r(BQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),W6e=n(BQ,"CODE",{});var MTt=s(W6e);c9r=r(MTt,"from_pretrained()"),MTt.forEach(t),f9r=r(BQ,"class method or the "),Q6e=n(BQ,"CODE",{});var ETt=s(Q6e);m9r=r(ETt,"from_config()"),ETt.forEach(t),g9r=r(BQ,`class
method.`),BQ.forEach(t),h9r=i(ji),GL=n(ji,"P",{});var e$e=s(GL);p9r=r(e$e,"This class cannot be instantiated directly using "),H6e=n(e$e,"CODE",{});var yTt=s(H6e);_9r=r(yTt,"__init__()"),yTt.forEach(t),u9r=r(e$e," (throws an error)."),e$e.forEach(t),b9r=i(ji),Dt=n(ji,"DIV",{class:!0});var Di=s(Dt);m(XL.$$.fragment,Di),v9r=i(Di),U6e=n(Di,"P",{});var wTt=s(U6e);T9r=r(wTt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),wTt.forEach(t),F9r=i(Di),Df=n(Di,"P",{});var xQ=s(Df);C9r=r(xQ,`Note:
Loading a model from its configuration file does `),J6e=n(xQ,"STRONG",{});var ATt=s(J6e);M9r=r(ATt,"not"),ATt.forEach(t),E9r=r(xQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Y6e=n(xQ,"CODE",{});var LTt=s(Y6e);y9r=r(LTt,"from_pretrained()"),LTt.forEach(t),w9r=r(xQ,"to load the model weights."),xQ.forEach(t),A9r=i(Di),K6e=n(Di,"P",{});var BTt=s(K6e);L9r=r(BTt,"Examples:"),BTt.forEach(t),B9r=i(Di),m(VL.$$.fragment,Di),Di.forEach(t),x9r=i(ji),jo=n(ji,"DIV",{class:!0});var Oa=s(jo);m(zL.$$.fragment,Oa),k9r=i(Oa),Z6e=n(Oa,"P",{});var xTt=s(Z6e);R9r=r(xTt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),xTt.forEach(t),S9r=i(Oa),Xn=n(Oa,"P",{});var r4=s(Xn);P9r=r(r4,"The model class to instantiate is selected based on the "),e0e=n(r4,"CODE",{});var kTt=s(e0e);$9r=r(kTt,"model_type"),kTt.forEach(t),I9r=r(r4,` property of the config object (either
passed as an argument or loaded from `),o0e=n(r4,"CODE",{});var RTt=s(o0e);j9r=r(RTt,"pretrained_model_name_or_path"),RTt.forEach(t),D9r=r(r4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r0e=n(r4,"CODE",{});var STt=s(r0e);N9r=r(STt,"pretrained_model_name_or_path"),STt.forEach(t),q9r=r(r4,":"),r4.forEach(t),O9r=i(Oa),t0e=n(Oa,"UL",{});var PTt=s(t0e);ZC=n(PTt,"LI",{});var Dxe=s(ZC);a0e=n(Dxe,"STRONG",{});var $Tt=s(a0e);G9r=r($Tt,"bert"),$Tt.forEach(t),X9r=r(Dxe," \u2014 "),jz=n(Dxe,"A",{href:!0});var ITt=s(jz);V9r=r(ITt,"FlaxBertForNextSentencePrediction"),ITt.forEach(t),z9r=r(Dxe," (BERT model)"),Dxe.forEach(t),PTt.forEach(t),W9r=i(Oa),n0e=n(Oa,"P",{});var jTt=s(n0e);Q9r=r(jTt,"Examples:"),jTt.forEach(t),H9r=i(Oa),m(WL.$$.fragment,Oa),Oa.forEach(t),ji.forEach(t),ORe=i(d),Nf=n(d,"H2",{class:!0});var o$e=s(Nf);eM=n(o$e,"A",{id:!0,class:!0,href:!0});var DTt=s(eM);s0e=n(DTt,"SPAN",{});var NTt=s(s0e);m(QL.$$.fragment,NTt),NTt.forEach(t),DTt.forEach(t),U9r=i(o$e),l0e=n(o$e,"SPAN",{});var qTt=s(l0e);J9r=r(qTt,"FlaxAutoModelForImageClassification"),qTt.forEach(t),o$e.forEach(t),GRe=i(d),Vr=n(d,"DIV",{class:!0});var Ni=s(Vr);m(HL.$$.fragment,Ni),Y9r=i(Ni),qf=n(Ni,"P",{});var kQ=s(qf);K9r=r(kQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),i0e=n(kQ,"CODE",{});var OTt=s(i0e);Z9r=r(OTt,"from_pretrained()"),OTt.forEach(t),eBr=r(kQ,"class method or the "),d0e=n(kQ,"CODE",{});var GTt=s(d0e);oBr=r(GTt,"from_config()"),GTt.forEach(t),rBr=r(kQ,`class
method.`),kQ.forEach(t),tBr=i(Ni),UL=n(Ni,"P",{});var r$e=s(UL);aBr=r(r$e,"This class cannot be instantiated directly using "),c0e=n(r$e,"CODE",{});var XTt=s(c0e);nBr=r(XTt,"__init__()"),XTt.forEach(t),sBr=r(r$e," (throws an error)."),r$e.forEach(t),lBr=i(Ni),Nt=n(Ni,"DIV",{class:!0});var qi=s(Nt);m(JL.$$.fragment,qi),iBr=i(qi),f0e=n(qi,"P",{});var VTt=s(f0e);dBr=r(VTt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),VTt.forEach(t),cBr=i(qi),Of=n(qi,"P",{});var RQ=s(Of);fBr=r(RQ,`Note:
Loading a model from its configuration file does `),m0e=n(RQ,"STRONG",{});var zTt=s(m0e);mBr=r(zTt,"not"),zTt.forEach(t),gBr=r(RQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),g0e=n(RQ,"CODE",{});var WTt=s(g0e);hBr=r(WTt,"from_pretrained()"),WTt.forEach(t),pBr=r(RQ,"to load the model weights."),RQ.forEach(t),_Br=i(qi),h0e=n(qi,"P",{});var QTt=s(h0e);uBr=r(QTt,"Examples:"),QTt.forEach(t),bBr=i(qi),m(YL.$$.fragment,qi),qi.forEach(t),vBr=i(Ni),Do=n(Ni,"DIV",{class:!0});var Ga=s(Do);m(KL.$$.fragment,Ga),TBr=i(Ga),p0e=n(Ga,"P",{});var HTt=s(p0e);FBr=r(HTt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),HTt.forEach(t),CBr=i(Ga),Vn=n(Ga,"P",{});var t4=s(Vn);MBr=r(t4,"The model class to instantiate is selected based on the "),_0e=n(t4,"CODE",{});var UTt=s(_0e);EBr=r(UTt,"model_type"),UTt.forEach(t),yBr=r(t4,` property of the config object (either
passed as an argument or loaded from `),u0e=n(t4,"CODE",{});var JTt=s(u0e);wBr=r(JTt,"pretrained_model_name_or_path"),JTt.forEach(t),ABr=r(t4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b0e=n(t4,"CODE",{});var YTt=s(b0e);LBr=r(YTt,"pretrained_model_name_or_path"),YTt.forEach(t),BBr=r(t4,":"),t4.forEach(t),xBr=i(Ga),ZL=n(Ga,"UL",{});var t$e=s(ZL);oM=n(t$e,"LI",{});var Nxe=s(oM);v0e=n(Nxe,"STRONG",{});var KTt=s(v0e);kBr=r(KTt,"beit"),KTt.forEach(t),RBr=r(Nxe," \u2014 "),Dz=n(Nxe,"A",{href:!0});var ZTt=s(Dz);SBr=r(ZTt,"FlaxBeitForImageClassification"),ZTt.forEach(t),PBr=r(Nxe," (BEiT model)"),Nxe.forEach(t),$Br=i(t$e),rM=n(t$e,"LI",{});var qxe=s(rM);T0e=n(qxe,"STRONG",{});var e8t=s(T0e);IBr=r(e8t,"vit"),e8t.forEach(t),jBr=r(qxe," \u2014 "),Nz=n(qxe,"A",{href:!0});var o8t=s(Nz);DBr=r(o8t,"FlaxViTForImageClassification"),o8t.forEach(t),NBr=r(qxe," (ViT model)"),qxe.forEach(t),t$e.forEach(t),qBr=i(Ga),F0e=n(Ga,"P",{});var r8t=s(F0e);OBr=r(r8t,"Examples:"),r8t.forEach(t),GBr=i(Ga),m(e7.$$.fragment,Ga),Ga.forEach(t),Ni.forEach(t),XRe=i(d),Gf=n(d,"H2",{class:!0});var a$e=s(Gf);tM=n(a$e,"A",{id:!0,class:!0,href:!0});var t8t=s(tM);C0e=n(t8t,"SPAN",{});var a8t=s(C0e);m(o7.$$.fragment,a8t),a8t.forEach(t),t8t.forEach(t),XBr=i(a$e),M0e=n(a$e,"SPAN",{});var n8t=s(M0e);VBr=r(n8t,"FlaxAutoModelForVision2Seq"),n8t.forEach(t),a$e.forEach(t),VRe=i(d),zr=n(d,"DIV",{class:!0});var Oi=s(zr);m(r7.$$.fragment,Oi),zBr=i(Oi),Xf=n(Oi,"P",{});var SQ=s(Xf);WBr=r(SQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),E0e=n(SQ,"CODE",{});var s8t=s(E0e);QBr=r(s8t,"from_pretrained()"),s8t.forEach(t),HBr=r(SQ,"class method or the "),y0e=n(SQ,"CODE",{});var l8t=s(y0e);UBr=r(l8t,"from_config()"),l8t.forEach(t),JBr=r(SQ,`class
method.`),SQ.forEach(t),YBr=i(Oi),t7=n(Oi,"P",{});var n$e=s(t7);KBr=r(n$e,"This class cannot be instantiated directly using "),w0e=n(n$e,"CODE",{});var i8t=s(w0e);ZBr=r(i8t,"__init__()"),i8t.forEach(t),exr=r(n$e," (throws an error)."),n$e.forEach(t),oxr=i(Oi),qt=n(Oi,"DIV",{class:!0});var Gi=s(qt);m(a7.$$.fragment,Gi),rxr=i(Gi),A0e=n(Gi,"P",{});var d8t=s(A0e);txr=r(d8t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),d8t.forEach(t),axr=i(Gi),Vf=n(Gi,"P",{});var PQ=s(Vf);nxr=r(PQ,`Note:
Loading a model from its configuration file does `),L0e=n(PQ,"STRONG",{});var c8t=s(L0e);sxr=r(c8t,"not"),c8t.forEach(t),lxr=r(PQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),B0e=n(PQ,"CODE",{});var f8t=s(B0e);ixr=r(f8t,"from_pretrained()"),f8t.forEach(t),dxr=r(PQ,"to load the model weights."),PQ.forEach(t),cxr=i(Gi),x0e=n(Gi,"P",{});var m8t=s(x0e);fxr=r(m8t,"Examples:"),m8t.forEach(t),mxr=i(Gi),m(n7.$$.fragment,Gi),Gi.forEach(t),gxr=i(Oi),No=n(Oi,"DIV",{class:!0});var Xa=s(No);m(s7.$$.fragment,Xa),hxr=i(Xa),k0e=n(Xa,"P",{});var g8t=s(k0e);pxr=r(g8t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),g8t.forEach(t),_xr=i(Xa),zn=n(Xa,"P",{});var a4=s(zn);uxr=r(a4,"The model class to instantiate is selected based on the "),R0e=n(a4,"CODE",{});var h8t=s(R0e);bxr=r(h8t,"model_type"),h8t.forEach(t),vxr=r(a4,` property of the config object (either
passed as an argument or loaded from `),S0e=n(a4,"CODE",{});var p8t=s(S0e);Txr=r(p8t,"pretrained_model_name_or_path"),p8t.forEach(t),Fxr=r(a4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P0e=n(a4,"CODE",{});var _8t=s(P0e);Cxr=r(_8t,"pretrained_model_name_or_path"),_8t.forEach(t),Mxr=r(a4,":"),a4.forEach(t),Exr=i(Xa),$0e=n(Xa,"UL",{});var u8t=s($0e);aM=n(u8t,"LI",{});var Oxe=s(aM);I0e=n(Oxe,"STRONG",{});var b8t=s(I0e);yxr=r(b8t,"vision-encoder-decoder"),b8t.forEach(t),wxr=r(Oxe," \u2014 "),qz=n(Oxe,"A",{href:!0});var v8t=s(qz);Axr=r(v8t,"FlaxVisionEncoderDecoderModel"),v8t.forEach(t),Lxr=r(Oxe," (Vision Encoder decoder model)"),Oxe.forEach(t),u8t.forEach(t),Bxr=i(Xa),j0e=n(Xa,"P",{});var T8t=s(j0e);xxr=r(T8t,"Examples:"),T8t.forEach(t),kxr=i(Xa),m(l7.$$.fragment,Xa),Xa.forEach(t),Oi.forEach(t),this.h()},h(){c(J,"name","hf:doc:metadata"),c(J,"content",JSON.stringify(B8t)),c(ge,"id","auto-classes"),c(ge,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ge,"href","#auto-classes"),c(de,"class","relative group"),c(Wn,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.AutoConfig"),c(Hn,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.AutoModel"),c(Un,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.AutoTokenizer"),c(Ji,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertModel"),c(Jf,"id","extending-the-auto-classes"),c(Jf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Jf,"href","#extending-the-auto-classes"),c(Yi,"class","relative group"),c(Kf,"id","transformers.AutoConfig"),c(Kf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Kf,"href","#transformers.AutoConfig"),c(Ki,"class","relative group"),c(f9,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(m9,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig"),c(g9,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig"),c(h9,"href","/docs/transformers/pr_16058/en/model_doc/beit#transformers.BeitConfig"),c(p9,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig"),c(_9,"href","/docs/transformers/pr_16058/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(u9,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig"),c(b9,"href","/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(v9,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(T9,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(F9,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig"),c(C9,"href","/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineConfig"),c(M9,"href","/docs/transformers/pr_16058/en/model_doc/clip#transformers.CLIPConfig"),c(E9,"href","/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertConfig"),c(y9,"href","/docs/transformers/pr_16058/en/model_doc/convnext#transformers.ConvNextConfig"),c(w9,"href","/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLConfig"),c(A9,"href","/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(L9,"href","/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(B9,"href","/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaConfig"),c(x9,"href","/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(k9,"href","/docs/transformers/pr_16058/en/model_doc/deit#transformers.DeiTConfig"),c(R9,"href","/docs/transformers/pr_16058/en/model_doc/detr#transformers.DetrConfig"),c(S9,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig"),c(P9,"href","/docs/transformers/pr_16058/en/model_doc/dpr#transformers.DPRConfig"),c($9,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig"),c(I9,"href","/docs/transformers/pr_16058/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(j9,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertConfig"),c(D9,"href","/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetConfig"),c(N9,"href","/docs/transformers/pr_16058/en/model_doc/fsmt#transformers.FSMTConfig"),c(q9,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelConfig"),c(O9,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Config"),c(G9,"href","/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(X9,"href","/docs/transformers/pr_16058/en/model_doc/gptj#transformers.GPTJConfig"),c(V9,"href","/docs/transformers/pr_16058/en/model_doc/hubert#transformers.HubertConfig"),c(z9,"href","/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertConfig"),c(W9,"href","/docs/transformers/pr_16058/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(Q9,"href","/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(H9,"href","/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(U9,"href","/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDConfig"),c(J9,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerConfig"),c(Y9,"href","/docs/transformers/pr_16058/en/model_doc/luke#transformers.LukeConfig"),c(K9,"href","/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.LxmertConfig"),c(Z9,"href","/docs/transformers/pr_16058/en/model_doc/m2m_100#transformers.M2M100Config"),c(eB,"href","/docs/transformers/pr_16058/en/model_doc/marian#transformers.MarianConfig"),c(oB,"href","/docs/transformers/pr_16058/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(rB,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartConfig"),c(tB,"href","/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(aB,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(nB,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetConfig"),c(sB,"href","/docs/transformers/pr_16058/en/model_doc/mt5#transformers.MT5Config"),c(lB,"href","/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(iB,"href","/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(dB,"href","/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusConfig"),c(cB,"href","/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverConfig"),c(fB,"href","/docs/transformers/pr_16058/en/model_doc/plbart#transformers.PLBartConfig"),c(mB,"href","/docs/transformers/pr_16058/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(gB,"href","/docs/transformers/pr_16058/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(hB,"href","/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(pB,"href","/docs/transformers/pr_16058/en/model_doc/rag#transformers.RagConfig"),c(_B,"href","/docs/transformers/pr_16058/en/model_doc/realm#transformers.RealmConfig"),c(uB,"href","/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerConfig"),c(bB,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertConfig"),c(vB,"href","/docs/transformers/pr_16058/en/model_doc/retribert#transformers.RetriBertConfig"),c(TB,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig"),c(FB,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig"),c(CB,"href","/docs/transformers/pr_16058/en/model_doc/segformer#transformers.SegformerConfig"),c(MB,"href","/docs/transformers/pr_16058/en/model_doc/sew#transformers.SEWConfig"),c(EB,"href","/docs/transformers/pr_16058/en/model_doc/sew-d#transformers.SEWDConfig"),c(yB,"href","/docs/transformers/pr_16058/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(wB,"href","/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(AB,"href","/docs/transformers/pr_16058/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(LB,"href","/docs/transformers/pr_16058/en/model_doc/splinter#transformers.SplinterConfig"),c(BB,"href","/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(xB,"href","/docs/transformers/pr_16058/en/model_doc/swin#transformers.SwinConfig"),c(kB,"href","/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5Config"),c(RB,"href","/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasConfig"),c(SB,"href","/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(PB,"href","/docs/transformers/pr_16058/en/model_doc/trocr#transformers.TrOCRConfig"),c($B,"href","/docs/transformers/pr_16058/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(IB,"href","/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(jB,"href","/docs/transformers/pr_16058/en/model_doc/vilt#transformers.ViltConfig"),c(DB,"href","/docs/transformers/pr_16058/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(NB,"href","/docs/transformers/pr_16058/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(qB,"href","/docs/transformers/pr_16058/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(OB,"href","/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTConfig"),c(GB,"href","/docs/transformers/pr_16058/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(XB,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(VB,"href","/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMConfig"),c(zB,"href","/docs/transformers/pr_16058/en/model_doc/xglm#transformers.XGLMConfig"),c(WB,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig"),c(QB,"href","/docs/transformers/pr_16058/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(HB,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(UB,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(JB,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetConfig"),c(YB,"href","/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoConfig"),c(mo,"class","docstring"),c(Ng,"class","docstring"),c(Qo,"class","docstring"),c(qg,"id","transformers.AutoTokenizer"),c(qg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qg,"href","#transformers.AutoTokenizer"),c(ed,"class","relative group"),c(KB,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(ZB,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertTokenizer"),c(ex,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(ox,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartTokenizer"),c(rx,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartTokenizerFast"),c(tx,"href","/docs/transformers/pr_16058/en/model_doc/barthez#transformers.BarthezTokenizer"),c(ax,"href","/docs/transformers/pr_16058/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(nx,"href","/docs/transformers/pr_16058/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(sx,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertTokenizer"),c(lx,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertTokenizerFast"),c(ix,"href","/docs/transformers/pr_16058/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(dx,"href","/docs/transformers/pr_16058/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(cx,"href","/docs/transformers/pr_16058/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(fx,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(mx,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(gx,"href","/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(hx,"href","/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(px,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(_x,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(ux,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(bx,"href","/docs/transformers/pr_16058/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(vx,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertTokenizer"),c(Tx,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(Fx,"href","/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineTokenizer"),c(Cx,"href","/docs/transformers/pr_16058/en/model_doc/clip#transformers.CLIPTokenizer"),c(Mx,"href","/docs/transformers/pr_16058/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(Ex,"href","/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(yx,"href","/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(wx,"href","/docs/transformers/pr_16058/en/model_doc/cpm#transformers.CpmTokenizer"),c(Ax,"href","/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(Lx,"href","/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaTokenizer"),c(Bx,"href","/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(xx,"href","/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(kx,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(Rx,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(Sx,"href","/docs/transformers/pr_16058/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(Px,"href","/docs/transformers/pr_16058/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c($x,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraTokenizer"),c(Ix,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(jx,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(Dx,"href","/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetTokenizer"),c(Nx,"href","/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(qx,"href","/docs/transformers/pr_16058/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(Ox,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelTokenizer"),c(Gx,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(Xx,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(Vx,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(zx,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(Wx,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(Qx,"href","/docs/transformers/pr_16058/en/model_doc/herbert#transformers.HerbertTokenizer"),c(Hx,"href","/docs/transformers/pr_16058/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(Ux,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(Jx,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaTokenizer"),c(Yx,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(Kx,"href","/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(Zx,"href","/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(ek,"href","/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(ok,"href","/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(rk,"href","/docs/transformers/pr_16058/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(tk,"href","/docs/transformers/pr_16058/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(ak,"href","/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDTokenizer"),c(nk,"href","/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDTokenizerFast"),c(sk,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerTokenizer"),c(lk,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(ik,"href","/docs/transformers/pr_16058/en/model_doc/luke#transformers.LukeTokenizer"),c(dk,"href","/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(ck,"href","/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(fk,"href","/docs/transformers/pr_16058/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(mk,"href","/docs/transformers/pr_16058/en/model_doc/marian#transformers.MarianTokenizer"),c(gk,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartTokenizer"),c(hk,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(pk,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(_k,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(uk,"href","/docs/transformers/pr_16058/en/model_doc/mluke#transformers.MLukeTokenizer"),c(bk,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(vk,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(Tk,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(Fk,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(Ck,"href","/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5Tokenizer"),c(Mk,"href","/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5TokenizerFast"),c(Ek,"href","/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(yk,"href","/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(wk,"href","/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(Ak,"href","/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(Lk,"href","/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(Bk,"href","/docs/transformers/pr_16058/en/model_doc/phobert#transformers.PhobertTokenizer"),c(xk,"href","/docs/transformers/pr_16058/en/model_doc/plbart#transformers.PLBartTokenizer"),c(kk,"href","/docs/transformers/pr_16058/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(Rk,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertTokenizer"),c(Sk,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertTokenizerFast"),c(Pk,"href","/docs/transformers/pr_16058/en/model_doc/rag#transformers.RagTokenizer"),c($k,"href","/docs/transformers/pr_16058/en/model_doc/realm#transformers.RealmTokenizer"),c(Ik,"href","/docs/transformers/pr_16058/en/model_doc/realm#transformers.RealmTokenizerFast"),c(jk,"href","/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerTokenizer"),c(Dk,"href","/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(Nk,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertTokenizer"),c(qk,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(Ok,"href","/docs/transformers/pr_16058/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(Gk,"href","/docs/transformers/pr_16058/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(Xk,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaTokenizer"),c(Vk,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(zk,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(Wk,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(Qk,"href","/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(Hk,"href","/docs/transformers/pr_16058/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(Uk,"href","/docs/transformers/pr_16058/en/model_doc/splinter#transformers.SplinterTokenizer"),c(Jk,"href","/docs/transformers/pr_16058/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(Yk,"href","/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(Kk,"href","/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(Zk,"href","/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5Tokenizer"),c(eR,"href","/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5TokenizerFast"),c(oR,"href","/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasTokenizer"),c(rR,"href","/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(tR,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(aR,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(nR,"href","/docs/transformers/pr_16058/en/model_doc/xglm#transformers.XGLMTokenizer"),c(sR,"href","/docs/transformers/pr_16058/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(lR,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMTokenizer"),c(iR,"href","/docs/transformers/pr_16058/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(dR,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(cR,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(fR,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(mR,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(go,"class","docstring"),c(_h,"class","docstring"),c(Ho,"class","docstring"),c(uh,"id","transformers.AutoFeatureExtractor"),c(uh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uh,"href","#transformers.AutoFeatureExtractor"),c(od,"class","relative group"),c(gR,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(hR,"href","/docs/transformers/pr_16058/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(pR,"href","/docs/transformers/pr_16058/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(_R,"href","/docs/transformers/pr_16058/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(uR,"href","/docs/transformers/pr_16058/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(bR,"href","/docs/transformers/pr_16058/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(vR,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(TR,"href","/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(FR,"href","/docs/transformers/pr_16058/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(CR,"href","/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(MR,"href","/docs/transformers/pr_16058/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(ER,"href","/docs/transformers/pr_16058/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(yR,"href","/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(wR,"href","/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(AR,"href","/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(LR,"href","/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(BR,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c($e,"class","docstring"),c($h,"class","docstring"),c(Uo,"class","docstring"),c(Ih,"id","transformers.AutoProcessor"),c(Ih,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ih,"href","#transformers.AutoProcessor"),c(rd,"class","relative group"),c(xR,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(kR,"href","/docs/transformers/pr_16058/en/model_doc/clip#transformers.CLIPProcessor"),c(RR,"href","/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(SR,"href","/docs/transformers/pr_16058/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(PR,"href","/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c($R,"href","/docs/transformers/pr_16058/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(IR,"href","/docs/transformers/pr_16058/en/model_doc/trocr#transformers.TrOCRProcessor"),c(jR,"href","/docs/transformers/pr_16058/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(DR,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ie,"class","docstring"),c(Wh,"class","docstring"),c(Jo,"class","docstring"),c(Qh,"id","transformers.AutoModel"),c(Qh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Qh,"href","#transformers.AutoModel"),c(ad,"class","relative group"),c(Wr,"class","docstring"),c(NR,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertModel"),c(qR,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartModel"),c(OR,"href","/docs/transformers/pr_16058/en/model_doc/beit#transformers.BeitModel"),c(GR,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertModel"),c(XR,"href","/docs/transformers/pr_16058/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(VR,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdModel"),c(zR,"href","/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(WR,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(QR,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(HR,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertModel"),c(UR,"href","/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineModel"),c(JR,"href","/docs/transformers/pr_16058/en/model_doc/clip#transformers.CLIPModel"),c(YR,"href","/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertModel"),c(KR,"href","/docs/transformers/pr_16058/en/model_doc/convnext#transformers.ConvNextModel"),c(ZR,"href","/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLModel"),c(eS,"href","/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(oS,"href","/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(rS,"href","/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaModel"),c(tS,"href","/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(aS,"href","/docs/transformers/pr_16058/en/model_doc/deit#transformers.DeiTModel"),c(nS,"href","/docs/transformers/pr_16058/en/model_doc/detr#transformers.DetrModel"),c(sS,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertModel"),c(lS,"href","/docs/transformers/pr_16058/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(iS,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraModel"),c(dS,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertModel"),c(cS,"href","/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetModel"),c(fS,"href","/docs/transformers/pr_16058/en/model_doc/fsmt#transformers.FSMTModel"),c(mS,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelModel"),c(gS,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelBaseModel"),c(hS,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Model"),c(pS,"href","/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(_S,"href","/docs/transformers/pr_16058/en/model_doc/gptj#transformers.GPTJModel"),c(uS,"href","/docs/transformers/pr_16058/en/model_doc/hubert#transformers.HubertModel"),c(bS,"href","/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertModel"),c(vS,"href","/docs/transformers/pr_16058/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(TS,"href","/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(FS,"href","/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(CS,"href","/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDModel"),c(MS,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerModel"),c(ES,"href","/docs/transformers/pr_16058/en/model_doc/luke#transformers.LukeModel"),c(yS,"href","/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.LxmertModel"),c(wS,"href","/docs/transformers/pr_16058/en/model_doc/m2m_100#transformers.M2M100Model"),c(AS,"href","/docs/transformers/pr_16058/en/model_doc/marian#transformers.MarianModel"),c(LS,"href","/docs/transformers/pr_16058/en/model_doc/maskformer#transformers.MaskFormerModel"),c(BS,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartModel"),c(xS,"href","/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(kS,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertModel"),c(RS,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetModel"),c(SS,"href","/docs/transformers/pr_16058/en/model_doc/mt5#transformers.MT5Model"),c(PS,"href","/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerModel"),c($S,"href","/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(IS,"href","/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusModel"),c(jS,"href","/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverModel"),c(DS,"href","/docs/transformers/pr_16058/en/model_doc/plbart#transformers.PLBartModel"),c(NS,"href","/docs/transformers/pr_16058/en/model_doc/poolformer#transformers.PoolFormerModel"),c(qS,"href","/docs/transformers/pr_16058/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(OS,"href","/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertModel"),c(GS,"href","/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerModel"),c(XS,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertModel"),c(VS,"href","/docs/transformers/pr_16058/en/model_doc/retribert#transformers.RetriBertModel"),c(zS,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaModel"),c(WS,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerModel"),c(QS,"href","/docs/transformers/pr_16058/en/model_doc/segformer#transformers.SegformerModel"),c(HS,"href","/docs/transformers/pr_16058/en/model_doc/sew#transformers.SEWModel"),c(US,"href","/docs/transformers/pr_16058/en/model_doc/sew-d#transformers.SEWDModel"),c(JS,"href","/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(YS,"href","/docs/transformers/pr_16058/en/model_doc/splinter#transformers.SplinterModel"),c(KS,"href","/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(ZS,"href","/docs/transformers/pr_16058/en/model_doc/swin#transformers.SwinModel"),c(eP,"href","/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5Model"),c(oP,"href","/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasModel"),c(rP,"href","/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(tP,"href","/docs/transformers/pr_16058/en/model_doc/unispeech#transformers.UniSpeechModel"),c(aP,"href","/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(nP,"href","/docs/transformers/pr_16058/en/model_doc/vilt#transformers.ViltModel"),c(sP,"href","/docs/transformers/pr_16058/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(lP,"href","/docs/transformers/pr_16058/en/model_doc/visual_bert#transformers.VisualBertModel"),c(iP,"href","/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTModel"),c(dP,"href","/docs/transformers/pr_16058/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(cP,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(fP,"href","/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMModel"),c(mP,"href","/docs/transformers/pr_16058/en/model_doc/xglm#transformers.XGLMModel"),c(gP,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMModel"),c(hP,"href","/docs/transformers/pr_16058/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(pP,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(_P,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(uP,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetModel"),c(bP,"href","/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoModel"),c(je,"class","docstring"),c(Yo,"class","docstring"),c(A_,"id","transformers.AutoModelForPreTraining"),c(A_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A_,"href","#transformers.AutoModelForPreTraining"),c(ld,"class","relative group"),c(Qr,"class","docstring"),c(vP,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertForPreTraining"),c(TP,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(FP,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertForPreTraining"),c(CP,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(MP,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(EP,"href","/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(yP,"href","/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(wP,"href","/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(AP,"href","/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(LP,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(BP,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraForPreTraining"),c(xP,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(kP,"href","/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetForPreTraining"),c(RP,"href","/docs/transformers/pr_16058/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(SP,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(PP,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c($P,"href","/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(IP,"href","/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(jP,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(DP,"href","/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(NP,"href","/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(qP,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(OP,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(GP,"href","/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(XP,"href","/docs/transformers/pr_16058/en/model_doc/retribert#transformers.RetriBertModel"),c(VP,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(zP,"href","/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(WP,"href","/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(QP,"href","/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(HP,"href","/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(UP,"href","/docs/transformers/pr_16058/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(JP,"href","/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(YP,"href","/docs/transformers/pr_16058/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(KP,"href","/docs/transformers/pr_16058/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(ZP,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(e$,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(o$,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(r$,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(t$,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(De,"class","docstring"),c(Ko,"class","docstring"),c(hu,"id","transformers.AutoModelForCausalLM"),c(hu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hu,"href","#transformers.AutoModelForCausalLM"),c(cd,"class","relative group"),c(Hr,"class","docstring"),c(a$,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartForCausalLM"),c(n$,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertLMHeadModel"),c(s$,"href","/docs/transformers/pr_16058/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(l$,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(i$,"href","/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(d$,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(c$,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(f$,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(m$,"href","/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(g$,"href","/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(h$,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraForCausalLM"),c(p$,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(_$,"href","/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(u$,"href","/docs/transformers/pr_16058/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(b$,"href","/docs/transformers/pr_16058/en/model_doc/marian#transformers.MarianForCausalLM"),c(v$,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartForCausalLM"),c(T$,"href","/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(F$,"href","/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(C$,"href","/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(M$,"href","/docs/transformers/pr_16058/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(E$,"href","/docs/transformers/pr_16058/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(y$,"href","/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(w$,"href","/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(A$,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(L$,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(B$,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(x$,"href","/docs/transformers/pr_16058/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(k$,"href","/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(R$,"href","/docs/transformers/pr_16058/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(S$,"href","/docs/transformers/pr_16058/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(P$,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c($$,"href","/docs/transformers/pr_16058/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(I$,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(j$,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(D$,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ne,"class","docstring"),c(Zo,"class","docstring"),c(Yu,"id","transformers.AutoModelForMaskedLM"),c(Yu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Yu,"href","#transformers.AutoModelForMaskedLM"),c(gd,"class","relative group"),c(Ur,"class","docstring"),c(N$,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(q$,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(O$,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertForMaskedLM"),c(G$,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(X$,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(V$,"href","/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(z$,"href","/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(W$,"href","/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Q$,"href","/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(H$,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(U$,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(J$,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(Y$,"href","/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(K$,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(Z$,"href","/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(eI,"href","/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(oI,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(rI,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(tI,"href","/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(aI,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(nI,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(sI,"href","/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(lI,"href","/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(iI,"href","/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(dI,"href","/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(cI,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(fI,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(mI,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(gI,"href","/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(hI,"href","/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(pI,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(_I,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(uI,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(bI,"href","/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(qe,"class","docstring"),c(er,"class","docstring"),c(P1,"id","transformers.AutoModelForSeq2SeqLM"),c(P1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P1,"href","#transformers.AutoModelForSeq2SeqLM"),c(_d,"class","relative group"),c(Jr,"class","docstring"),c(vI,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(TI,"href","/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(FI,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(CI,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(MI,"href","/docs/transformers/pr_16058/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(EI,"href","/docs/transformers/pr_16058/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(yI,"href","/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(wI,"href","/docs/transformers/pr_16058/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(AI,"href","/docs/transformers/pr_16058/en/model_doc/marian#transformers.MarianMTModel"),c(LI,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(BI,"href","/docs/transformers/pr_16058/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(xI,"href","/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(kI,"href","/docs/transformers/pr_16058/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(RI,"href","/docs/transformers/pr_16058/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(SI,"href","/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(PI,"href","/docs/transformers/pr_16058/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Oe,"class","docstring"),c(or,"class","docstring"),c(K1,"id","transformers.AutoModelForSequenceClassification"),c(K1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K1,"href","#transformers.AutoModelForSequenceClassification"),c(vd,"class","relative group"),c(Yr,"class","docstring"),c($I,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(II,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartForSequenceClassification"),c(jI,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertForSequenceClassification"),c(DI,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(NI,"href","/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(qI,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(OI,"href","/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(GI,"href","/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(XI,"href","/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(VI,"href","/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(zI,"href","/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(WI,"href","/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(QI,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(HI,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(UI,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(JI,"href","/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(YI,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(KI,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(ZI,"href","/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(ej,"href","/docs/transformers/pr_16058/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(oj,"href","/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(rj,"href","/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(tj,"href","/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(aj,"href","/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDForSequenceClassification"),c(nj,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(sj,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(lj,"href","/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(ij,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(dj,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(cj,"href","/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(fj,"href","/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(mj,"href","/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(gj,"href","/docs/transformers/pr_16058/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(hj,"href","/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(pj,"href","/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(_j,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(uj,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(bj,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(vj,"href","/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(Tj,"href","/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(Fj,"href","/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(Cj,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(Mj,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(Ej,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(yj,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(wj,"href","/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(Ge,"class","docstring"),c(rr,"class","docstring"),c(Wb,"id","transformers.AutoModelForMultipleChoice"),c(Wb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Wb,"href","#transformers.AutoModelForMultipleChoice"),c(Cd,"class","relative group"),c(Kr,"class","docstring"),c(Aj,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(Lj,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertForMultipleChoice"),c(Bj,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(xj,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(kj,"href","/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(Rj,"href","/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(Sj,"href","/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(Pj,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c($j,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(Ij,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(jj,"href","/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(Dj,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(Nj,"href","/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(qj,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(Oj,"href","/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(Gj,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(Xj,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(Vj,"href","/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(zj,"href","/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(Wj,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(Qj,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(Hj,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(Uj,"href","/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(Jj,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(Yj,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(Kj,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(Zj,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(eD,"href","/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(Xe,"class","docstring"),c(tr,"class","docstring"),c(C5,"id","transformers.AutoModelForNextSentencePrediction"),c(C5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C5,"href","#transformers.AutoModelForNextSentencePrediction"),c(yd,"class","relative group"),c(Zr,"class","docstring"),c(oD,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(rD,"href","/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(tD,"href","/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(aD,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(nD,"href","/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(Ve,"class","docstring"),c(ar,"class","docstring"),c(B5,"id","transformers.AutoModelForTokenClassification"),c(B5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B5,"href","#transformers.AutoModelForTokenClassification"),c(Ld,"class","relative group"),c(et,"class","docstring"),c(sD,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(lD,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertForTokenClassification"),c(iD,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(dD,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(cD,"href","/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineForTokenClassification"),c(fD,"href","/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(mD,"href","/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(gD,"href","/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(hD,"href","/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(pD,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(_D,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(uD,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(bD,"href","/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(vD,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(TD,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(FD,"href","/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(CD,"href","/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(MD,"href","/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(ED,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(yD,"href","/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(wD,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(AD,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(LD,"href","/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(BD,"href","/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(xD,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(kD,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(RD,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(SD,"href","/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(PD,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMForTokenClassification"),c($D,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(ID,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(jD,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(DD,"href","/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ze,"class","docstring"),c(nr,"class","docstring"),c(c2,"id","transformers.AutoModelForQuestionAnswering"),c(c2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c2,"href","#transformers.AutoModelForQuestionAnswering"),c(kd,"class","relative group"),c(ot,"class","docstring"),c(ND,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(qD,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(OD,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(GD,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(XD,"href","/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(VD,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(zD,"href","/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(WD,"href","/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(QD,"href","/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(HD,"href","/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(UD,"href","/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(JD,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(YD,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(KD,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(ZD,"href","/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(eN,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(oN,"href","/docs/transformers/pr_16058/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(rN,"href","/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(tN,"href","/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(aN,"href","/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(nN,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(sN,"href","/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(lN,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(iN,"href","/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(dN,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(cN,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(fN,"href","/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(mN,"href","/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(gN,"href","/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(hN,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(pN,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(_N,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(uN,"href","/docs/transformers/pr_16058/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(bN,"href","/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(vN,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(TN,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(FN,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(CN,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(MN,"href","/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(We,"class","docstring"),c(sr,"class","docstring"),c(Y2,"id","transformers.AutoModelForTableQuestionAnswering"),c(Y2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y2,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Pd,"class","relative group"),c(rt,"class","docstring"),c(EN,"href","/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(Qe,"class","docstring"),c(lr,"class","docstring"),c(ev,"id","transformers.AutoModelForImageClassification"),c(ev,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ev,"href","#transformers.AutoModelForImageClassification"),c(jd,"class","relative group"),c(tt,"class","docstring"),c(yN,"href","/docs/transformers/pr_16058/en/model_doc/beit#transformers.BeitForImageClassification"),c(wN,"href","/docs/transformers/pr_16058/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(AN,"href","/docs/transformers/pr_16058/en/model_doc/deit#transformers.DeiTForImageClassification"),c(LN,"href","/docs/transformers/pr_16058/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(BN,"href","/docs/transformers/pr_16058/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(xN,"href","/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(kN,"href","/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(RN,"href","/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(SN,"href","/docs/transformers/pr_16058/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(PN,"href","/docs/transformers/pr_16058/en/model_doc/segformer#transformers.SegformerForImageClassification"),c($N,"href","/docs/transformers/pr_16058/en/model_doc/swin#transformers.SwinForImageClassification"),c(IN,"href","/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTForImageClassification"),c(He,"class","docstring"),c(ir,"class","docstring"),c(dv,"id","transformers.AutoModelForVision2Seq"),c(dv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dv,"href","#transformers.AutoModelForVision2Seq"),c(qd,"class","relative group"),c(at,"class","docstring"),c(jN,"href","/docs/transformers/pr_16058/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(Ue,"class","docstring"),c(dr,"class","docstring"),c(mv,"id","transformers.AutoModelForAudioClassification"),c(mv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mv,"href","#transformers.AutoModelForAudioClassification"),c(Xd,"class","relative group"),c(nt,"class","docstring"),c(DN,"href","/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(NN,"href","/docs/transformers/pr_16058/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(qN,"href","/docs/transformers/pr_16058/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(ON,"href","/docs/transformers/pr_16058/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(GN,"href","/docs/transformers/pr_16058/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(XN,"href","/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(VN,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(zN,"href","/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(Je,"class","docstring"),c(cr,"class","docstring"),c(Cv,"id","transformers.AutoModelForAudioFrameClassification"),c(Cv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Cv,"href","#transformers.AutoModelForAudioFrameClassification"),c(Wd,"class","relative group"),c(st,"class","docstring"),c(WN,"href","/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(QN,"href","/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(HN,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(UN,"href","/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(Ye,"class","docstring"),c(fr,"class","docstring"),c(Lv,"id","transformers.AutoModelForCTC"),c(Lv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Lv,"href","#transformers.AutoModelForCTC"),c(Ud,"class","relative group"),c(lt,"class","docstring"),c(JN,"href","/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(YN,"href","/docs/transformers/pr_16058/en/model_doc/hubert#transformers.HubertForCTC"),c(KN,"href","/docs/transformers/pr_16058/en/model_doc/sew#transformers.SEWForCTC"),c(ZN,"href","/docs/transformers/pr_16058/en/model_doc/sew-d#transformers.SEWDForCTC"),c(eq,"href","/docs/transformers/pr_16058/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(oq,"href","/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(rq,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(tq,"href","/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMForCTC"),c(Ke,"class","docstring"),c(mr,"class","docstring"),c(Dv,"id","transformers.AutoModelForSpeechSeq2Seq"),c(Dv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Dv,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Kd,"class","relative group"),c(it,"class","docstring"),c(aq,"href","/docs/transformers/pr_16058/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(nq,"href","/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(Ze,"class","docstring"),c(gr,"class","docstring"),c(Gv,"id","transformers.AutoModelForAudioXVector"),c(Gv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gv,"href","#transformers.AutoModelForAudioXVector"),c(oc,"class","relative group"),c(dt,"class","docstring"),c(sq,"href","/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(lq,"href","/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(iq,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(dq,"href","/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMForXVector"),c(eo,"class","docstring"),c(hr,"class","docstring"),c(Hv,"id","transformers.AutoModelForMaskedImageModeling"),c(Hv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Hv,"href","#transformers.AutoModelForMaskedImageModeling"),c(ac,"class","relative group"),c(ct,"class","docstring"),c(cq,"href","/docs/transformers/pr_16058/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(fq,"href","/docs/transformers/pr_16058/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(mq,"href","/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(oo,"class","docstring"),c(pr,"class","docstring"),c(Zv,"id","transformers.AutoModelForObjectDetection"),c(Zv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Zv,"href","#transformers.AutoModelForObjectDetection"),c(ic,"class","relative group"),c(ft,"class","docstring"),c(gq,"href","/docs/transformers/pr_16058/en/model_doc/detr#transformers.DetrForObjectDetection"),c(ro,"class","docstring"),c(_r,"class","docstring"),c(r6,"id","transformers.AutoModelForImageSegmentation"),c(r6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r6,"href","#transformers.AutoModelForImageSegmentation"),c(fc,"class","relative group"),c(mt,"class","docstring"),c(hq,"href","/docs/transformers/pr_16058/en/model_doc/detr#transformers.DetrForSegmentation"),c(to,"class","docstring"),c(ur,"class","docstring"),c(n6,"id","transformers.AutoModelForSemanticSegmentation"),c(n6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n6,"href","#transformers.AutoModelForSemanticSegmentation"),c(hc,"class","relative group"),c(gt,"class","docstring"),c(pq,"href","/docs/transformers/pr_16058/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(_q,"href","/docs/transformers/pr_16058/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(ao,"class","docstring"),c(br,"class","docstring"),c(d6,"id","transformers.AutoModelForInstanceSegmentation"),c(d6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d6,"href","#transformers.AutoModelForInstanceSegmentation"),c(uc,"class","relative group"),c(ht,"class","docstring"),c(uq,"href","/docs/transformers/pr_16058/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(no,"class","docstring"),c(vr,"class","docstring"),c(m6,"id","transformers.TFAutoModel"),c(m6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m6,"href","#transformers.TFAutoModel"),c(Tc,"class","relative group"),c(pt,"class","docstring"),c(bq,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.TFAlbertModel"),c(vq,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.TFBartModel"),c(Tq,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertModel"),c(Fq,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(Cq,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(Mq,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.TFCamembertModel"),c(Eq,"href","/docs/transformers/pr_16058/en/model_doc/clip#transformers.TFCLIPModel"),c(yq,"href","/docs/transformers/pr_16058/en/model_doc/convbert#transformers.TFConvBertModel"),c(wq,"href","/docs/transformers/pr_16058/en/model_doc/convnext#transformers.TFConvNextModel"),c(Aq,"href","/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.TFCTRLModel"),c(Lq,"href","/docs/transformers/pr_16058/en/model_doc/deberta#transformers.TFDebertaModel"),c(Bq,"href","/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(xq,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(kq,"href","/docs/transformers/pr_16058/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(Rq,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.TFElectraModel"),c(Sq,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(Pq,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelModel"),c($q,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(Iq,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.TFGPT2Model"),c(jq,"href","/docs/transformers/pr_16058/en/model_doc/hubert#transformers.TFHubertModel"),c(Dq,"href","/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(Nq,"href","/docs/transformers/pr_16058/en/model_doc/led#transformers.TFLEDModel"),c(qq,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.TFLongformerModel"),c(Oq,"href","/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.TFLxmertModel"),c(Gq,"href","/docs/transformers/pr_16058/en/model_doc/marian#transformers.TFMarianModel"),c(Xq,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.TFMBartModel"),c(Vq,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(zq,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.TFMPNetModel"),c(Wq,"href","/docs/transformers/pr_16058/en/model_doc/mt5#transformers.TFMT5Model"),c(Qq,"href","/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(Hq,"href","/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.TFPegasusModel"),c(Uq,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.TFRemBertModel"),c(Jq,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaModel"),c(Yq,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.TFRoFormerModel"),c(Kq,"href","/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(Zq,"href","/docs/transformers/pr_16058/en/model_doc/t5#transformers.TFT5Model"),c(eO,"href","/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TFTapasModel"),c(oO,"href","/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(rO,"href","/docs/transformers/pr_16058/en/model_doc/vit#transformers.TFViTModel"),c(tO,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(aO,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMModel"),c(nO,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(sO,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.TFXLNetModel"),c(ho,"class","docstring"),c(Tr,"class","docstring"),c(e0,"id","transformers.TFAutoModelForPreTraining"),c(e0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e0,"href","#transformers.TFAutoModelForPreTraining"),c(Mc,"class","relative group"),c(_t,"class","docstring"),c(lO,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(iO,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(dO,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertForPreTraining"),c(cO,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(fO,"href","/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(mO,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(gO,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(hO,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(pO,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(_O,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(uO,"href","/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(bO,"href","/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(vO,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(TO,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(FO,"href","/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(CO,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(MO,"href","/docs/transformers/pr_16058/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(EO,"href","/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(yO,"href","/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(wO,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(AO,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(LO,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(po,"class","docstring"),c(Fr,"class","docstring"),c(M0,"id","transformers.TFAutoModelForCausalLM"),c(M0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M0,"href","#transformers.TFAutoModelForCausalLM"),c(wc,"class","relative group"),c(ut,"class","docstring"),c(BO,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(xO,"href","/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(kO,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(RO,"href","/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(SO,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(PO,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c($O,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(IO,"href","/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(jO,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(DO,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(_o,"class","docstring"),c(Cr,"class","docstring"),c(P0,"id","transformers.TFAutoModelForImageClassification"),c(P0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P0,"href","#transformers.TFAutoModelForImageClassification"),c(Bc,"class","relative group"),c(bt,"class","docstring"),c(NO,"href","/docs/transformers/pr_16058/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(qO,"href","/docs/transformers/pr_16058/en/model_doc/vit#transformers.TFViTForImageClassification"),c(uo,"class","docstring"),c(Mr,"class","docstring"),c(j0,"id","transformers.TFAutoModelForMaskedLM"),c(j0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j0,"href","#transformers.TFAutoModelForMaskedLM"),c(Rc,"class","relative group"),c(vt,"class","docstring"),c(OO,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(GO,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(XO,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(VO,"href","/docs/transformers/pr_16058/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(zO,"href","/docs/transformers/pr_16058/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(WO,"href","/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(QO,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(HO,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(UO,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(JO,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(YO,"href","/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(KO,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(ZO,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(eG,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(oG,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(rG,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(tG,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(aG,"href","/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(nG,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(sG,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(bo,"class","docstring"),c(Er,"class","docstring"),c(aT,"id","transformers.TFAutoModelForSeq2SeqLM"),c(aT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aT,"href","#transformers.TFAutoModelForSeq2SeqLM"),c($c,"class","relative group"),c(Tt,"class","docstring"),c(lG,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(iG,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(dG,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(cG,"href","/docs/transformers/pr_16058/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(fG,"href","/docs/transformers/pr_16058/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(mG,"href","/docs/transformers/pr_16058/en/model_doc/marian#transformers.TFMarianMTModel"),c(gG,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(hG,"href","/docs/transformers/pr_16058/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(pG,"href","/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(_G,"href","/docs/transformers/pr_16058/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(vo,"class","docstring"),c(yr,"class","docstring"),c(pT,"id","transformers.TFAutoModelForSequenceClassification"),c(pT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pT,"href","#transformers.TFAutoModelForSequenceClassification"),c(Dc,"class","relative group"),c(Ft,"class","docstring"),c(uG,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(bG,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(vG,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(TG,"href","/docs/transformers/pr_16058/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(FG,"href","/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(CG,"href","/docs/transformers/pr_16058/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(MG,"href","/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(EG,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(yG,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(wG,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(AG,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(LG,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(BG,"href","/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(xG,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(kG,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(RG,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(SG,"href","/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(PG,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c($G,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(IG,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(jG,"href","/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(DG,"href","/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(NG,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(qG,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(OG,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(To,"class","docstring"),c(wr,"class","docstring"),c(OT,"id","transformers.TFAutoModelForMultipleChoice"),c(OT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OT,"href","#transformers.TFAutoModelForMultipleChoice"),c(Oc,"class","relative group"),c(Ct,"class","docstring"),c(GG,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(XG,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(VG,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(zG,"href","/docs/transformers/pr_16058/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(WG,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(QG,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(HG,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(UG,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(JG,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(YG,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(KG,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(ZG,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(eX,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(oX,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(rX,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(tX,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(aX,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Fo,"class","docstring"),c(Ar,"class","docstring"),c(n8,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(n8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n8,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(Vc,"class","relative group"),c(Mt,"class","docstring"),c(nX,"href","/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Co,"class","docstring"),c(Lr,"class","docstring"),c(l8,"id","transformers.TFAutoModelForTokenClassification"),c(l8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l8,"href","#transformers.TFAutoModelForTokenClassification"),c(Qc,"class","relative group"),c(Et,"class","docstring"),c(sX,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(lX,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(iX,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(dX,"href","/docs/transformers/pr_16058/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(cX,"href","/docs/transformers/pr_16058/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(fX,"href","/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(mX,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(gX,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(hX,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(pX,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(_X,"href","/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(uX,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(bX,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(vX,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(TX,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(FX,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(CX,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(MX,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(EX,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(yX,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Mo,"class","docstring"),c(Br,"class","docstring"),c(L8,"id","transformers.TFAutoModelForQuestionAnswering"),c(L8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L8,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Jc,"class","relative group"),c(yt,"class","docstring"),c(wX,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(AX,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(LX,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(BX,"href","/docs/transformers/pr_16058/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(xX,"href","/docs/transformers/pr_16058/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(kX,"href","/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(RX,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(SX,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(PX,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c($X,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(IX,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(jX,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(DX,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(NX,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(qX,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(OX,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(GX,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(XX,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(VX,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Eo,"class","docstring"),c(xr,"class","docstring"),c(H8,"id","transformers.TFAutoModelForVision2Seq"),c(H8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H8,"href","#transformers.TFAutoModelForVision2Seq"),c(Zc,"class","relative group"),c(wt,"class","docstring"),c(zX,"href","/docs/transformers/pr_16058/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(yo,"class","docstring"),c(kr,"class","docstring"),c(J8,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(J8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J8,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(rf,"class","relative group"),c(At,"class","docstring"),c(WX,"href","/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(wo,"class","docstring"),c(Rr,"class","docstring"),c(K8,"id","transformers.FlaxAutoModel"),c(K8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K8,"href","#transformers.FlaxAutoModel"),c(nf,"class","relative group"),c(Lt,"class","docstring"),c(QX,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.FlaxAlbertModel"),c(HX,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.FlaxBartModel"),c(UX,"href","/docs/transformers/pr_16058/en/model_doc/beit#transformers.FlaxBeitModel"),c(JX,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertModel"),c(YX,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(KX,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(ZX,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(eV,"href","/docs/transformers/pr_16058/en/model_doc/clip#transformers.FlaxCLIPModel"),c(oV,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(rV,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.FlaxElectraModel"),c(tV,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(aV,"href","/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(nV,"href","/docs/transformers/pr_16058/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(sV,"href","/docs/transformers/pr_16058/en/model_doc/marian#transformers.FlaxMarianModel"),c(lV,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.FlaxMBartModel"),c(iV,"href","/docs/transformers/pr_16058/en/model_doc/mt5#transformers.FlaxMT5Model"),c(dV,"href","/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(cV,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(fV,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(mV,"href","/docs/transformers/pr_16058/en/model_doc/t5#transformers.FlaxT5Model"),c(gV,"href","/docs/transformers/pr_16058/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(hV,"href","/docs/transformers/pr_16058/en/model_doc/vit#transformers.FlaxViTModel"),c(pV,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(_V,"href","/docs/transformers/pr_16058/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(uV,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Ao,"class","docstring"),c(Sr,"class","docstring"),c(EF,"id","transformers.FlaxAutoModelForCausalLM"),c(EF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EF,"href","#transformers.FlaxAutoModelForCausalLM"),c(df,"class","relative group"),c(Bt,"class","docstring"),c(bV,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(vV,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(TV,"href","/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(FV,"href","/docs/transformers/pr_16058/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(CV,"href","/docs/transformers/pr_16058/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Lo,"class","docstring"),c(Pr,"class","docstring"),c(xF,"id","transformers.FlaxAutoModelForPreTraining"),c(xF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xF,"href","#transformers.FlaxAutoModelForPreTraining"),c(mf,"class","relative group"),c(xt,"class","docstring"),c(MV,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(EV,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(yV,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(wV,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(AV,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(LV,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(BV,"href","/docs/transformers/pr_16058/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(xV,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(kV,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(RV,"href","/docs/transformers/pr_16058/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(SV,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(PV,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Bo,"class","docstring"),c($r,"class","docstring"),c(XF,"id","transformers.FlaxAutoModelForMaskedLM"),c(XF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XF,"href","#transformers.FlaxAutoModelForMaskedLM"),c(pf,"class","relative group"),c(kt,"class","docstring"),c($V,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(IV,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(jV,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(DV,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(NV,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(qV,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(OV,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(GV,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(XV,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(VV,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(xo,"class","docstring"),c(Ir,"class","docstring"),c(eC,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(eC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eC,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(bf,"class","relative group"),c(Rt,"class","docstring"),c(zV,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(WV,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(QV,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(HV,"href","/docs/transformers/pr_16058/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(UV,"href","/docs/transformers/pr_16058/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(JV,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(YV,"href","/docs/transformers/pr_16058/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(KV,"href","/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(ZV,"href","/docs/transformers/pr_16058/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(ko,"class","docstring"),c(jr,"class","docstring"),c(cC,"id","transformers.FlaxAutoModelForSequenceClassification"),c(cC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cC,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Ff,"class","relative group"),c(St,"class","docstring"),c(ez,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(oz,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(rz,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(tz,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(az,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(nz,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(sz,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(lz,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(iz,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(dz,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Ro,"class","docstring"),c(Dr,"class","docstring"),c(FC,"id","transformers.FlaxAutoModelForSpeechSeq2Seq"),c(FC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FC,"href","#transformers.FlaxAutoModelForSpeechSeq2Seq"),c(Ef,"class","relative group"),c(Pt,"class","docstring"),c(cz,"href","/docs/transformers/pr_16058/en/model_doc/speech-encoder-decoder#transformers.FlaxSpeechEncoderDecoderModel"),c(So,"class","docstring"),c(Nr,"class","docstring"),c(MC,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(MC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MC,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Af,"class","relative group"),c($t,"class","docstring"),c(fz,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(mz,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(gz,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(hz,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(pz,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(_z,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(uz,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(bz,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(vz,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(Tz,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Po,"class","docstring"),c(qr,"class","docstring"),c(PC,"id","transformers.FlaxAutoModelForTokenClassification"),c(PC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PC,"href","#transformers.FlaxAutoModelForTokenClassification"),c(xf,"class","relative group"),c(It,"class","docstring"),c(Fz,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(Cz,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(Mz,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(Ez,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(yz,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(wz,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(Az,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(Lz,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c($o,"class","docstring"),c(Or,"class","docstring"),c(XC,"id","transformers.FlaxAutoModelForMultipleChoice"),c(XC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XC,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Sf,"class","relative group"),c(jt,"class","docstring"),c(Bz,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(xz,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(kz,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(Rz,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(Sz,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(Pz,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c($z,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(Iz,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Io,"class","docstring"),c(Gr,"class","docstring"),c(KC,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(KC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KC,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(If,"class","relative group"),c(Dt,"class","docstring"),c(jz,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(jo,"class","docstring"),c(Xr,"class","docstring"),c(eM,"id","transformers.FlaxAutoModelForImageClassification"),c(eM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eM,"href","#transformers.FlaxAutoModelForImageClassification"),c(Nf,"class","relative group"),c(Nt,"class","docstring"),c(Dz,"href","/docs/transformers/pr_16058/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(Nz,"href","/docs/transformers/pr_16058/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Do,"class","docstring"),c(Vr,"class","docstring"),c(tM,"id","transformers.FlaxAutoModelForVision2Seq"),c(tM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tM,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Gf,"class","relative group"),c(qt,"class","docstring"),c(qz,"href","/docs/transformers/pr_16058/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(No,"class","docstring"),c(zr,"class","docstring")},m(d,u){e(document.head,J),b(d,Pe,u),b(d,de,u),e(de,ge),e(ge,io),g(fe,io,null),e(de,Te),e(de,zo),e(zo,Vi),b(d,Wf,u),b(d,ha,u),e(ha,zi),e(ha,Wi),e(Wi,n4),e(ha,Qf),b(d,Le,u),b(d,co,u),e(co,Qi),e(co,Wn),e(Wn,s4),e(co,Qn),e(co,Hn),e(Hn,l4),e(co,Hi),e(co,Un),e(Un,i4),e(co,Ui),b(d,Hf,u),g(Va,d,u),b(d,fo,u),b(d,he,u),e(he,n9),e(he,Ji),e(Ji,s9),e(he,l9),b(d,Wo,u),b(d,za,u),e(za,i9),e(za,Uf),e(Uf,d9),e(za,s$e),b(d,Gxe,u),b(d,Yi,u),e(Yi,Jf),e(Jf,$Q),g(d4,$Q,null),e(Yi,l$e),e(Yi,IQ),e(IQ,i$e),b(d,Xxe,u),b(d,Jn,u),e(Jn,d$e),e(Jn,jQ),e(jQ,c$e),e(Jn,f$e),e(Jn,DQ),e(DQ,m$e),e(Jn,g$e),b(d,Vxe,u),g(c4,d,u),b(d,zxe,u),b(d,c9,u),e(c9,h$e),b(d,Wxe,u),g(Yf,d,u),b(d,Qxe,u),b(d,Ki,u),e(Ki,Kf),e(Kf,NQ),g(f4,NQ,null),e(Ki,p$e),e(Ki,qQ),e(qQ,_$e),b(d,Hxe,u),b(d,Qo,u),g(m4,Qo,null),e(Qo,u$e),e(Qo,g4),e(g4,b$e),e(g4,f9),e(f9,v$e),e(g4,T$e),e(Qo,F$e),e(Qo,h4),e(h4,C$e),e(h4,OQ),e(OQ,M$e),e(h4,E$e),e(Qo,y$e),e(Qo,mo),g(p4,mo,null),e(mo,w$e),e(mo,GQ),e(GQ,A$e),e(mo,L$e),e(mo,Zi),e(Zi,B$e),e(Zi,XQ),e(XQ,x$e),e(Zi,k$e),e(Zi,VQ),e(VQ,R$e),e(Zi,S$e),e(mo,P$e),e(mo,v),e(v,Zf),e(Zf,zQ),e(zQ,$$e),e(Zf,I$e),e(Zf,m9),e(m9,j$e),e(Zf,D$e),e(v,N$e),e(v,em),e(em,WQ),e(WQ,q$e),e(em,O$e),e(em,g9),e(g9,G$e),e(em,X$e),e(v,V$e),e(v,om),e(om,QQ),e(QQ,z$e),e(om,W$e),e(om,h9),e(h9,Q$e),e(om,H$e),e(v,U$e),e(v,rm),e(rm,HQ),e(HQ,J$e),e(rm,Y$e),e(rm,p9),e(p9,K$e),e(rm,Z$e),e(v,eIe),e(v,tm),e(tm,UQ),e(UQ,oIe),e(tm,rIe),e(tm,_9),e(_9,tIe),e(tm,aIe),e(v,nIe),e(v,am),e(am,JQ),e(JQ,sIe),e(am,lIe),e(am,u9),e(u9,iIe),e(am,dIe),e(v,cIe),e(v,nm),e(nm,YQ),e(YQ,fIe),e(nm,mIe),e(nm,b9),e(b9,gIe),e(nm,hIe),e(v,pIe),e(v,sm),e(sm,KQ),e(KQ,_Ie),e(sm,uIe),e(sm,v9),e(v9,bIe),e(sm,vIe),e(v,TIe),e(v,lm),e(lm,ZQ),e(ZQ,FIe),e(lm,CIe),e(lm,T9),e(T9,MIe),e(lm,EIe),e(v,yIe),e(v,im),e(im,eH),e(eH,wIe),e(im,AIe),e(im,F9),e(F9,LIe),e(im,BIe),e(v,xIe),e(v,dm),e(dm,oH),e(oH,kIe),e(dm,RIe),e(dm,C9),e(C9,SIe),e(dm,PIe),e(v,$Ie),e(v,cm),e(cm,rH),e(rH,IIe),e(cm,jIe),e(cm,M9),e(M9,DIe),e(cm,NIe),e(v,qIe),e(v,fm),e(fm,tH),e(tH,OIe),e(fm,GIe),e(fm,E9),e(E9,XIe),e(fm,VIe),e(v,zIe),e(v,mm),e(mm,aH),e(aH,WIe),e(mm,QIe),e(mm,y9),e(y9,HIe),e(mm,UIe),e(v,JIe),e(v,gm),e(gm,nH),e(nH,YIe),e(gm,KIe),e(gm,w9),e(w9,ZIe),e(gm,eje),e(v,oje),e(v,hm),e(hm,sH),e(sH,rje),e(hm,tje),e(hm,A9),e(A9,aje),e(hm,nje),e(v,sje),e(v,pm),e(pm,lH),e(lH,lje),e(pm,ije),e(pm,L9),e(L9,dje),e(pm,cje),e(v,fje),e(v,_m),e(_m,iH),e(iH,mje),e(_m,gje),e(_m,B9),e(B9,hje),e(_m,pje),e(v,_je),e(v,um),e(um,dH),e(dH,uje),e(um,bje),e(um,x9),e(x9,vje),e(um,Tje),e(v,Fje),e(v,bm),e(bm,cH),e(cH,Cje),e(bm,Mje),e(bm,k9),e(k9,Eje),e(bm,yje),e(v,wje),e(v,vm),e(vm,fH),e(fH,Aje),e(vm,Lje),e(vm,R9),e(R9,Bje),e(vm,xje),e(v,kje),e(v,Tm),e(Tm,mH),e(mH,Rje),e(Tm,Sje),e(Tm,S9),e(S9,Pje),e(Tm,$je),e(v,Ije),e(v,Fm),e(Fm,gH),e(gH,jje),e(Fm,Dje),e(Fm,P9),e(P9,Nje),e(Fm,qje),e(v,Oje),e(v,Cm),e(Cm,hH),e(hH,Gje),e(Cm,Xje),e(Cm,$9),e($9,Vje),e(Cm,zje),e(v,Wje),e(v,Mm),e(Mm,pH),e(pH,Qje),e(Mm,Hje),e(Mm,I9),e(I9,Uje),e(Mm,Jje),e(v,Yje),e(v,Em),e(Em,_H),e(_H,Kje),e(Em,Zje),e(Em,j9),e(j9,eDe),e(Em,oDe),e(v,rDe),e(v,ym),e(ym,uH),e(uH,tDe),e(ym,aDe),e(ym,D9),e(D9,nDe),e(ym,sDe),e(v,lDe),e(v,wm),e(wm,bH),e(bH,iDe),e(wm,dDe),e(wm,N9),e(N9,cDe),e(wm,fDe),e(v,mDe),e(v,Am),e(Am,vH),e(vH,gDe),e(Am,hDe),e(Am,q9),e(q9,pDe),e(Am,_De),e(v,uDe),e(v,Lm),e(Lm,TH),e(TH,bDe),e(Lm,vDe),e(Lm,O9),e(O9,TDe),e(Lm,FDe),e(v,CDe),e(v,Bm),e(Bm,FH),e(FH,MDe),e(Bm,EDe),e(Bm,G9),e(G9,yDe),e(Bm,wDe),e(v,ADe),e(v,xm),e(xm,CH),e(CH,LDe),e(xm,BDe),e(xm,X9),e(X9,xDe),e(xm,kDe),e(v,RDe),e(v,km),e(km,MH),e(MH,SDe),e(km,PDe),e(km,V9),e(V9,$De),e(km,IDe),e(v,jDe),e(v,Rm),e(Rm,EH),e(EH,DDe),e(Rm,NDe),e(Rm,z9),e(z9,qDe),e(Rm,ODe),e(v,GDe),e(v,Sm),e(Sm,yH),e(yH,XDe),e(Sm,VDe),e(Sm,W9),e(W9,zDe),e(Sm,WDe),e(v,QDe),e(v,Pm),e(Pm,wH),e(wH,HDe),e(Pm,UDe),e(Pm,Q9),e(Q9,JDe),e(Pm,YDe),e(v,KDe),e(v,$m),e($m,AH),e(AH,ZDe),e($m,eNe),e($m,H9),e(H9,oNe),e($m,rNe),e(v,tNe),e(v,Im),e(Im,LH),e(LH,aNe),e(Im,nNe),e(Im,U9),e(U9,sNe),e(Im,lNe),e(v,iNe),e(v,jm),e(jm,BH),e(BH,dNe),e(jm,cNe),e(jm,J9),e(J9,fNe),e(jm,mNe),e(v,gNe),e(v,Dm),e(Dm,xH),e(xH,hNe),e(Dm,pNe),e(Dm,Y9),e(Y9,_Ne),e(Dm,uNe),e(v,bNe),e(v,Nm),e(Nm,kH),e(kH,vNe),e(Nm,TNe),e(Nm,K9),e(K9,FNe),e(Nm,CNe),e(v,MNe),e(v,qm),e(qm,RH),e(RH,ENe),e(qm,yNe),e(qm,Z9),e(Z9,wNe),e(qm,ANe),e(v,LNe),e(v,Om),e(Om,SH),e(SH,BNe),e(Om,xNe),e(Om,eB),e(eB,kNe),e(Om,RNe),e(v,SNe),e(v,Gm),e(Gm,PH),e(PH,PNe),e(Gm,$Ne),e(Gm,oB),e(oB,INe),e(Gm,jNe),e(v,DNe),e(v,Xm),e(Xm,$H),e($H,NNe),e(Xm,qNe),e(Xm,rB),e(rB,ONe),e(Xm,GNe),e(v,XNe),e(v,Vm),e(Vm,IH),e(IH,VNe),e(Vm,zNe),e(Vm,tB),e(tB,WNe),e(Vm,QNe),e(v,HNe),e(v,zm),e(zm,jH),e(jH,UNe),e(zm,JNe),e(zm,aB),e(aB,YNe),e(zm,KNe),e(v,ZNe),e(v,Wm),e(Wm,DH),e(DH,eqe),e(Wm,oqe),e(Wm,nB),e(nB,rqe),e(Wm,tqe),e(v,aqe),e(v,Qm),e(Qm,NH),e(NH,nqe),e(Qm,sqe),e(Qm,sB),e(sB,lqe),e(Qm,iqe),e(v,dqe),e(v,Hm),e(Hm,qH),e(qH,cqe),e(Hm,fqe),e(Hm,lB),e(lB,mqe),e(Hm,gqe),e(v,hqe),e(v,Um),e(Um,OH),e(OH,pqe),e(Um,_qe),e(Um,iB),e(iB,uqe),e(Um,bqe),e(v,vqe),e(v,Jm),e(Jm,GH),e(GH,Tqe),e(Jm,Fqe),e(Jm,dB),e(dB,Cqe),e(Jm,Mqe),e(v,Eqe),e(v,Ym),e(Ym,XH),e(XH,yqe),e(Ym,wqe),e(Ym,cB),e(cB,Aqe),e(Ym,Lqe),e(v,Bqe),e(v,Km),e(Km,VH),e(VH,xqe),e(Km,kqe),e(Km,fB),e(fB,Rqe),e(Km,Sqe),e(v,Pqe),e(v,Zm),e(Zm,zH),e(zH,$qe),e(Zm,Iqe),e(Zm,mB),e(mB,jqe),e(Zm,Dqe),e(v,Nqe),e(v,eg),e(eg,WH),e(WH,qqe),e(eg,Oqe),e(eg,gB),e(gB,Gqe),e(eg,Xqe),e(v,Vqe),e(v,og),e(og,QH),e(QH,zqe),e(og,Wqe),e(og,hB),e(hB,Qqe),e(og,Hqe),e(v,Uqe),e(v,rg),e(rg,HH),e(HH,Jqe),e(rg,Yqe),e(rg,pB),e(pB,Kqe),e(rg,Zqe),e(v,eOe),e(v,tg),e(tg,UH),e(UH,oOe),e(tg,rOe),e(tg,_B),e(_B,tOe),e(tg,aOe),e(v,nOe),e(v,ag),e(ag,JH),e(JH,sOe),e(ag,lOe),e(ag,uB),e(uB,iOe),e(ag,dOe),e(v,cOe),e(v,ng),e(ng,YH),e(YH,fOe),e(ng,mOe),e(ng,bB),e(bB,gOe),e(ng,hOe),e(v,pOe),e(v,sg),e(sg,KH),e(KH,_Oe),e(sg,uOe),e(sg,vB),e(vB,bOe),e(sg,vOe),e(v,TOe),e(v,lg),e(lg,ZH),e(ZH,FOe),e(lg,COe),e(lg,TB),e(TB,MOe),e(lg,EOe),e(v,yOe),e(v,ig),e(ig,eU),e(eU,wOe),e(ig,AOe),e(ig,FB),e(FB,LOe),e(ig,BOe),e(v,xOe),e(v,dg),e(dg,oU),e(oU,kOe),e(dg,ROe),e(dg,CB),e(CB,SOe),e(dg,POe),e(v,$Oe),e(v,cg),e(cg,rU),e(rU,IOe),e(cg,jOe),e(cg,MB),e(MB,DOe),e(cg,NOe),e(v,qOe),e(v,fg),e(fg,tU),e(tU,OOe),e(fg,GOe),e(fg,EB),e(EB,XOe),e(fg,VOe),e(v,zOe),e(v,mg),e(mg,aU),e(aU,WOe),e(mg,QOe),e(mg,yB),e(yB,HOe),e(mg,UOe),e(v,JOe),e(v,gg),e(gg,nU),e(nU,YOe),e(gg,KOe),e(gg,wB),e(wB,ZOe),e(gg,eGe),e(v,oGe),e(v,hg),e(hg,sU),e(sU,rGe),e(hg,tGe),e(hg,AB),e(AB,aGe),e(hg,nGe),e(v,sGe),e(v,pg),e(pg,lU),e(lU,lGe),e(pg,iGe),e(pg,LB),e(LB,dGe),e(pg,cGe),e(v,fGe),e(v,_g),e(_g,iU),e(iU,mGe),e(_g,gGe),e(_g,BB),e(BB,hGe),e(_g,pGe),e(v,_Ge),e(v,ug),e(ug,dU),e(dU,uGe),e(ug,bGe),e(ug,xB),e(xB,vGe),e(ug,TGe),e(v,FGe),e(v,bg),e(bg,cU),e(cU,CGe),e(bg,MGe),e(bg,kB),e(kB,EGe),e(bg,yGe),e(v,wGe),e(v,vg),e(vg,fU),e(fU,AGe),e(vg,LGe),e(vg,RB),e(RB,BGe),e(vg,xGe),e(v,kGe),e(v,Tg),e(Tg,mU),e(mU,RGe),e(Tg,SGe),e(Tg,SB),e(SB,PGe),e(Tg,$Ge),e(v,IGe),e(v,Fg),e(Fg,gU),e(gU,jGe),e(Fg,DGe),e(Fg,PB),e(PB,NGe),e(Fg,qGe),e(v,OGe),e(v,Cg),e(Cg,hU),e(hU,GGe),e(Cg,XGe),e(Cg,$B),e($B,VGe),e(Cg,zGe),e(v,WGe),e(v,Mg),e(Mg,pU),e(pU,QGe),e(Mg,HGe),e(Mg,IB),e(IB,UGe),e(Mg,JGe),e(v,YGe),e(v,Eg),e(Eg,_U),e(_U,KGe),e(Eg,ZGe),e(Eg,jB),e(jB,eXe),e(Eg,oXe),e(v,rXe),e(v,yg),e(yg,uU),e(uU,tXe),e(yg,aXe),e(yg,DB),e(DB,nXe),e(yg,sXe),e(v,lXe),e(v,wg),e(wg,bU),e(bU,iXe),e(wg,dXe),e(wg,NB),e(NB,cXe),e(wg,fXe),e(v,mXe),e(v,Ag),e(Ag,vU),e(vU,gXe),e(Ag,hXe),e(Ag,qB),e(qB,pXe),e(Ag,_Xe),e(v,uXe),e(v,Lg),e(Lg,TU),e(TU,bXe),e(Lg,vXe),e(Lg,OB),e(OB,TXe),e(Lg,FXe),e(v,CXe),e(v,Bg),e(Bg,FU),e(FU,MXe),e(Bg,EXe),e(Bg,GB),e(GB,yXe),e(Bg,wXe),e(v,AXe),e(v,xg),e(xg,CU),e(CU,LXe),e(xg,BXe),e(xg,XB),e(XB,xXe),e(xg,kXe),e(v,RXe),e(v,kg),e(kg,MU),e(MU,SXe),e(kg,PXe),e(kg,VB),e(VB,$Xe),e(kg,IXe),e(v,jXe),e(v,Rg),e(Rg,EU),e(EU,DXe),e(Rg,NXe),e(Rg,zB),e(zB,qXe),e(Rg,OXe),e(v,GXe),e(v,Sg),e(Sg,yU),e(yU,XXe),e(Sg,VXe),e(Sg,WB),e(WB,zXe),e(Sg,WXe),e(v,QXe),e(v,Pg),e(Pg,wU),e(wU,HXe),e(Pg,UXe),e(Pg,QB),e(QB,JXe),e(Pg,YXe),e(v,KXe),e(v,$g),e($g,AU),e(AU,ZXe),e($g,eVe),e($g,HB),e(HB,oVe),e($g,rVe),e(v,tVe),e(v,Ig),e(Ig,LU),e(LU,aVe),e(Ig,nVe),e(Ig,UB),e(UB,sVe),e(Ig,lVe),e(v,iVe),e(v,jg),e(jg,BU),e(BU,dVe),e(jg,cVe),e(jg,JB),e(JB,fVe),e(jg,mVe),e(v,gVe),e(v,Dg),e(Dg,xU),e(xU,hVe),e(Dg,pVe),e(Dg,YB),e(YB,_Ve),e(Dg,uVe),e(mo,bVe),e(mo,kU),e(kU,vVe),e(mo,TVe),g(_4,mo,null),e(Qo,FVe),e(Qo,Ng),g(u4,Ng,null),e(Ng,CVe),e(Ng,RU),e(RU,MVe),b(d,Uxe,u),b(d,ed,u),e(ed,qg),e(qg,SU),g(b4,SU,null),e(ed,EVe),e(ed,PU),e(PU,yVe),b(d,Jxe,u),b(d,Ho,u),g(v4,Ho,null),e(Ho,wVe),e(Ho,T4),e(T4,AVe),e(T4,KB),e(KB,LVe),e(T4,BVe),e(Ho,xVe),e(Ho,F4),e(F4,kVe),e(F4,$U),e($U,RVe),e(F4,SVe),e(Ho,PVe),e(Ho,go),g(C4,go,null),e(go,$Ve),e(go,IU),e(IU,IVe),e(go,jVe),e(go,Wa),e(Wa,DVe),e(Wa,jU),e(jU,NVe),e(Wa,qVe),e(Wa,DU),e(DU,OVe),e(Wa,GVe),e(Wa,NU),e(NU,XVe),e(Wa,VVe),e(go,zVe),e(go,E),e(E,Yn),e(Yn,qU),e(qU,WVe),e(Yn,QVe),e(Yn,ZB),e(ZB,HVe),e(Yn,UVe),e(Yn,ex),e(ex,JVe),e(Yn,YVe),e(E,KVe),e(E,Kn),e(Kn,OU),e(OU,ZVe),e(Kn,eze),e(Kn,ox),e(ox,oze),e(Kn,rze),e(Kn,rx),e(rx,tze),e(Kn,aze),e(E,nze),e(E,Zn),e(Zn,GU),e(GU,sze),e(Zn,lze),e(Zn,tx),e(tx,ize),e(Zn,dze),e(Zn,ax),e(ax,cze),e(Zn,fze),e(E,mze),e(E,Og),e(Og,XU),e(XU,gze),e(Og,hze),e(Og,nx),e(nx,pze),e(Og,_ze),e(E,uze),e(E,es),e(es,VU),e(VU,bze),e(es,vze),e(es,sx),e(sx,Tze),e(es,Fze),e(es,lx),e(lx,Cze),e(es,Mze),e(E,Eze),e(E,Gg),e(Gg,zU),e(zU,yze),e(Gg,wze),e(Gg,ix),e(ix,Aze),e(Gg,Lze),e(E,Bze),e(E,Xg),e(Xg,WU),e(WU,xze),e(Xg,kze),e(Xg,dx),e(dx,Rze),e(Xg,Sze),e(E,Pze),e(E,Vg),e(Vg,QU),e(QU,$ze),e(Vg,Ize),e(Vg,cx),e(cx,jze),e(Vg,Dze),e(E,Nze),e(E,os),e(os,HU),e(HU,qze),e(os,Oze),e(os,fx),e(fx,Gze),e(os,Xze),e(os,mx),e(mx,Vze),e(os,zze),e(E,Wze),e(E,rs),e(rs,UU),e(UU,Qze),e(rs,Hze),e(rs,gx),e(gx,Uze),e(rs,Jze),e(rs,hx),e(hx,Yze),e(rs,Kze),e(E,Zze),e(E,ts),e(ts,JU),e(JU,eWe),e(ts,oWe),e(ts,px),e(px,rWe),e(ts,tWe),e(ts,_x),e(_x,aWe),e(ts,nWe),e(E,sWe),e(E,zg),e(zg,YU),e(YU,lWe),e(zg,iWe),e(zg,ux),e(ux,dWe),e(zg,cWe),e(E,fWe),e(E,Wg),e(Wg,KU),e(KU,mWe),e(Wg,gWe),e(Wg,bx),e(bx,hWe),e(Wg,pWe),e(E,_We),e(E,as),e(as,ZU),e(ZU,uWe),e(as,bWe),e(as,vx),e(vx,vWe),e(as,TWe),e(as,Tx),e(Tx,FWe),e(as,CWe),e(E,MWe),e(E,Qg),e(Qg,eJ),e(eJ,EWe),e(Qg,yWe),e(Qg,Fx),e(Fx,wWe),e(Qg,AWe),e(E,LWe),e(E,ns),e(ns,oJ),e(oJ,BWe),e(ns,xWe),e(ns,Cx),e(Cx,kWe),e(ns,RWe),e(ns,Mx),e(Mx,SWe),e(ns,PWe),e(E,$We),e(E,ss),e(ss,rJ),e(rJ,IWe),e(ss,jWe),e(ss,Ex),e(Ex,DWe),e(ss,NWe),e(ss,yx),e(yx,qWe),e(ss,OWe),e(E,GWe),e(E,ls),e(ls,tJ),e(tJ,XWe),e(ls,VWe),e(ls,wx),e(wx,zWe),e(ls,WWe),e(ls,aJ),e(aJ,QWe),e(ls,HWe),e(E,UWe),e(E,Hg),e(Hg,nJ),e(nJ,JWe),e(Hg,YWe),e(Hg,Ax),e(Ax,KWe),e(Hg,ZWe),e(E,eQe),e(E,is),e(is,sJ),e(sJ,oQe),e(is,rQe),e(is,Lx),e(Lx,tQe),e(is,aQe),e(is,Bx),e(Bx,nQe),e(is,sQe),e(E,lQe),e(E,Ug),e(Ug,lJ),e(lJ,iQe),e(Ug,dQe),e(Ug,xx),e(xx,cQe),e(Ug,fQe),e(E,mQe),e(E,ds),e(ds,iJ),e(iJ,gQe),e(ds,hQe),e(ds,kx),e(kx,pQe),e(ds,_Qe),e(ds,Rx),e(Rx,uQe),e(ds,bQe),e(E,vQe),e(E,cs),e(cs,dJ),e(dJ,TQe),e(cs,FQe),e(cs,Sx),e(Sx,CQe),e(cs,MQe),e(cs,Px),e(Px,EQe),e(cs,yQe),e(E,wQe),e(E,fs),e(fs,cJ),e(cJ,AQe),e(fs,LQe),e(fs,$x),e($x,BQe),e(fs,xQe),e(fs,Ix),e(Ix,kQe),e(fs,RQe),e(E,SQe),e(E,Jg),e(Jg,fJ),e(fJ,PQe),e(Jg,$Qe),e(Jg,jx),e(jx,IQe),e(Jg,jQe),e(E,DQe),e(E,ms),e(ms,mJ),e(mJ,NQe),e(ms,qQe),e(ms,Dx),e(Dx,OQe),e(ms,GQe),e(ms,Nx),e(Nx,XQe),e(ms,VQe),e(E,zQe),e(E,Yg),e(Yg,gJ),e(gJ,WQe),e(Yg,QQe),e(Yg,qx),e(qx,HQe),e(Yg,UQe),e(E,JQe),e(E,gs),e(gs,hJ),e(hJ,YQe),e(gs,KQe),e(gs,Ox),e(Ox,ZQe),e(gs,eHe),e(gs,Gx),e(Gx,oHe),e(gs,rHe),e(E,tHe),e(E,hs),e(hs,pJ),e(pJ,aHe),e(hs,nHe),e(hs,Xx),e(Xx,sHe),e(hs,lHe),e(hs,Vx),e(Vx,iHe),e(hs,dHe),e(E,cHe),e(E,ps),e(ps,_J),e(_J,fHe),e(ps,mHe),e(ps,zx),e(zx,gHe),e(ps,hHe),e(ps,Wx),e(Wx,pHe),e(ps,_He),e(E,uHe),e(E,_s),e(_s,uJ),e(uJ,bHe),e(_s,vHe),e(_s,Qx),e(Qx,THe),e(_s,FHe),e(_s,Hx),e(Hx,CHe),e(_s,MHe),e(E,EHe),e(E,Kg),e(Kg,bJ),e(bJ,yHe),e(Kg,wHe),e(Kg,Ux),e(Ux,AHe),e(Kg,LHe),e(E,BHe),e(E,us),e(us,vJ),e(vJ,xHe),e(us,kHe),e(us,Jx),e(Jx,RHe),e(us,SHe),e(us,Yx),e(Yx,PHe),e(us,$He),e(E,IHe),e(E,bs),e(bs,TJ),e(TJ,jHe),e(bs,DHe),e(bs,Kx),e(Kx,NHe),e(bs,qHe),e(bs,Zx),e(Zx,OHe),e(bs,GHe),e(E,XHe),e(E,vs),e(vs,FJ),e(FJ,VHe),e(vs,zHe),e(vs,ek),e(ek,WHe),e(vs,QHe),e(vs,ok),e(ok,HHe),e(vs,UHe),e(E,JHe),e(E,Ts),e(Ts,CJ),e(CJ,YHe),e(Ts,KHe),e(Ts,rk),e(rk,ZHe),e(Ts,eUe),e(Ts,tk),e(tk,oUe),e(Ts,rUe),e(E,tUe),e(E,Fs),e(Fs,MJ),e(MJ,aUe),e(Fs,nUe),e(Fs,ak),e(ak,sUe),e(Fs,lUe),e(Fs,nk),e(nk,iUe),e(Fs,dUe),e(E,cUe),e(E,Cs),e(Cs,EJ),e(EJ,fUe),e(Cs,mUe),e(Cs,sk),e(sk,gUe),e(Cs,hUe),e(Cs,lk),e(lk,pUe),e(Cs,_Ue),e(E,uUe),e(E,Zg),e(Zg,yJ),e(yJ,bUe),e(Zg,vUe),e(Zg,ik),e(ik,TUe),e(Zg,FUe),e(E,CUe),e(E,Ms),e(Ms,wJ),e(wJ,MUe),e(Ms,EUe),e(Ms,dk),e(dk,yUe),e(Ms,wUe),e(Ms,ck),e(ck,AUe),e(Ms,LUe),e(E,BUe),e(E,eh),e(eh,AJ),e(AJ,xUe),e(eh,kUe),e(eh,fk),e(fk,RUe),e(eh,SUe),e(E,PUe),e(E,oh),e(oh,LJ),e(LJ,$Ue),e(oh,IUe),e(oh,mk),e(mk,jUe),e(oh,DUe),e(E,NUe),e(E,Es),e(Es,BJ),e(BJ,qUe),e(Es,OUe),e(Es,gk),e(gk,GUe),e(Es,XUe),e(Es,hk),e(hk,VUe),e(Es,zUe),e(E,WUe),e(E,ys),e(ys,xJ),e(xJ,QUe),e(ys,HUe),e(ys,pk),e(pk,UUe),e(ys,JUe),e(ys,_k),e(_k,YUe),e(ys,KUe),e(E,ZUe),e(E,rh),e(rh,kJ),e(kJ,eJe),e(rh,oJe),e(rh,uk),e(uk,rJe),e(rh,tJe),e(E,aJe),e(E,ws),e(ws,RJ),e(RJ,nJe),e(ws,sJe),e(ws,bk),e(bk,lJe),e(ws,iJe),e(ws,vk),e(vk,dJe),e(ws,cJe),e(E,fJe),e(E,As),e(As,SJ),e(SJ,mJe),e(As,gJe),e(As,Tk),e(Tk,hJe),e(As,pJe),e(As,Fk),e(Fk,_Je),e(As,uJe),e(E,bJe),e(E,Ls),e(Ls,PJ),e(PJ,vJe),e(Ls,TJe),e(Ls,Ck),e(Ck,FJe),e(Ls,CJe),e(Ls,Mk),e(Mk,MJe),e(Ls,EJe),e(E,yJe),e(E,Bs),e(Bs,$J),e($J,wJe),e(Bs,AJe),e(Bs,Ek),e(Ek,LJe),e(Bs,BJe),e(Bs,yk),e(yk,xJe),e(Bs,kJe),e(E,RJe),e(E,xs),e(xs,IJ),e(IJ,SJe),e(xs,PJe),e(xs,wk),e(wk,$Je),e(xs,IJe),e(xs,Ak),e(Ak,jJe),e(xs,DJe),e(E,NJe),e(E,th),e(th,jJ),e(jJ,qJe),e(th,OJe),e(th,Lk),e(Lk,GJe),e(th,XJe),e(E,VJe),e(E,ah),e(ah,DJ),e(DJ,zJe),e(ah,WJe),e(ah,Bk),e(Bk,QJe),e(ah,HJe),e(E,UJe),e(E,nh),e(nh,NJ),e(NJ,JJe),e(nh,YJe),e(nh,xk),e(xk,KJe),e(nh,ZJe),e(E,eYe),e(E,sh),e(sh,qJ),e(qJ,oYe),e(sh,rYe),e(sh,kk),e(kk,tYe),e(sh,aYe),e(E,nYe),e(E,ks),e(ks,OJ),e(OJ,sYe),e(ks,lYe),e(ks,Rk),e(Rk,iYe),e(ks,dYe),e(ks,Sk),e(Sk,cYe),e(ks,fYe),e(E,mYe),e(E,lh),e(lh,GJ),e(GJ,gYe),e(lh,hYe),e(lh,Pk),e(Pk,pYe),e(lh,_Ye),e(E,uYe),e(E,Rs),e(Rs,XJ),e(XJ,bYe),e(Rs,vYe),e(Rs,$k),e($k,TYe),e(Rs,FYe),e(Rs,Ik),e(Ik,CYe),e(Rs,MYe),e(E,EYe),e(E,Ss),e(Ss,VJ),e(VJ,yYe),e(Ss,wYe),e(Ss,jk),e(jk,AYe),e(Ss,LYe),e(Ss,Dk),e(Dk,BYe),e(Ss,xYe),e(E,kYe),e(E,Ps),e(Ps,zJ),e(zJ,RYe),e(Ps,SYe),e(Ps,Nk),e(Nk,PYe),e(Ps,$Ye),e(Ps,qk),e(qk,IYe),e(Ps,jYe),e(E,DYe),e(E,$s),e($s,WJ),e(WJ,NYe),e($s,qYe),e($s,Ok),e(Ok,OYe),e($s,GYe),e($s,Gk),e(Gk,XYe),e($s,VYe),e(E,zYe),e(E,Is),e(Is,QJ),e(QJ,WYe),e(Is,QYe),e(Is,Xk),e(Xk,HYe),e(Is,UYe),e(Is,Vk),e(Vk,JYe),e(Is,YYe),e(E,KYe),e(E,js),e(js,HJ),e(HJ,ZYe),e(js,eKe),e(js,zk),e(zk,oKe),e(js,rKe),e(js,Wk),e(Wk,tKe),e(js,aKe),e(E,nKe),e(E,ih),e(ih,UJ),e(UJ,sKe),e(ih,lKe),e(ih,Qk),e(Qk,iKe),e(ih,dKe),e(E,cKe),e(E,dh),e(dh,JJ),e(JJ,fKe),e(dh,mKe),e(dh,Hk),e(Hk,gKe),e(dh,hKe),e(E,pKe),e(E,Ds),e(Ds,YJ),e(YJ,_Ke),e(Ds,uKe),e(Ds,Uk),e(Uk,bKe),e(Ds,vKe),e(Ds,Jk),e(Jk,TKe),e(Ds,FKe),e(E,CKe),e(E,Ns),e(Ns,KJ),e(KJ,MKe),e(Ns,EKe),e(Ns,Yk),e(Yk,yKe),e(Ns,wKe),e(Ns,Kk),e(Kk,AKe),e(Ns,LKe),e(E,BKe),e(E,qs),e(qs,ZJ),e(ZJ,xKe),e(qs,kKe),e(qs,Zk),e(Zk,RKe),e(qs,SKe),e(qs,eR),e(eR,PKe),e(qs,$Ke),e(E,IKe),e(E,ch),e(ch,eY),e(eY,jKe),e(ch,DKe),e(ch,oR),e(oR,NKe),e(ch,qKe),e(E,OKe),e(E,fh),e(fh,oY),e(oY,GKe),e(fh,XKe),e(fh,rR),e(rR,VKe),e(fh,zKe),e(E,WKe),e(E,mh),e(mh,rY),e(rY,QKe),e(mh,HKe),e(mh,tR),e(tR,UKe),e(mh,JKe),e(E,YKe),e(E,gh),e(gh,tY),e(tY,KKe),e(gh,ZKe),e(gh,aR),e(aR,eZe),e(gh,oZe),e(E,rZe),e(E,Os),e(Os,aY),e(aY,tZe),e(Os,aZe),e(Os,nR),e(nR,nZe),e(Os,sZe),e(Os,sR),e(sR,lZe),e(Os,iZe),e(E,dZe),e(E,hh),e(hh,nY),e(nY,cZe),e(hh,fZe),e(hh,lR),e(lR,mZe),e(hh,gZe),e(E,hZe),e(E,ph),e(ph,sY),e(sY,pZe),e(ph,_Ze),e(ph,iR),e(iR,uZe),e(ph,bZe),e(E,vZe),e(E,Gs),e(Gs,lY),e(lY,TZe),e(Gs,FZe),e(Gs,dR),e(dR,CZe),e(Gs,MZe),e(Gs,cR),e(cR,EZe),e(Gs,yZe),e(E,wZe),e(E,Xs),e(Xs,iY),e(iY,AZe),e(Xs,LZe),e(Xs,fR),e(fR,BZe),e(Xs,xZe),e(Xs,mR),e(mR,kZe),e(Xs,RZe),e(go,SZe),e(go,dY),e(dY,PZe),e(go,$Ze),g(M4,go,null),e(Ho,IZe),e(Ho,_h),g(E4,_h,null),e(_h,jZe),e(_h,cY),e(cY,DZe),b(d,Yxe,u),b(d,od,u),e(od,uh),e(uh,fY),g(y4,fY,null),e(od,NZe),e(od,mY),e(mY,qZe),b(d,Kxe,u),b(d,Uo,u),g(w4,Uo,null),e(Uo,OZe),e(Uo,A4),e(A4,GZe),e(A4,gR),e(gR,XZe),e(A4,VZe),e(Uo,zZe),e(Uo,L4),e(L4,WZe),e(L4,gY),e(gY,QZe),e(L4,HZe),e(Uo,UZe),e(Uo,$e),g(B4,$e,null),e($e,JZe),e($e,hY),e(hY,YZe),e($e,KZe),e($e,Qa),e(Qa,ZZe),e(Qa,pY),e(pY,eeo),e(Qa,oeo),e(Qa,_Y),e(_Y,reo),e(Qa,teo),e(Qa,uY),e(uY,aeo),e(Qa,neo),e($e,seo),e($e,ae),e(ae,bh),e(bh,bY),e(bY,leo),e(bh,ieo),e(bh,hR),e(hR,deo),e(bh,ceo),e(ae,feo),e(ae,vh),e(vh,vY),e(vY,meo),e(vh,geo),e(vh,pR),e(pR,heo),e(vh,peo),e(ae,_eo),e(ae,Th),e(Th,TY),e(TY,ueo),e(Th,beo),e(Th,_R),e(_R,veo),e(Th,Teo),e(ae,Feo),e(ae,Fh),e(Fh,FY),e(FY,Ceo),e(Fh,Meo),e(Fh,uR),e(uR,Eeo),e(Fh,yeo),e(ae,weo),e(ae,Ch),e(Ch,CY),e(CY,Aeo),e(Ch,Leo),e(Ch,bR),e(bR,Beo),e(Ch,xeo),e(ae,keo),e(ae,Mh),e(Mh,MY),e(MY,Reo),e(Mh,Seo),e(Mh,vR),e(vR,Peo),e(Mh,$eo),e(ae,Ieo),e(ae,Eh),e(Eh,EY),e(EY,jeo),e(Eh,Deo),e(Eh,TR),e(TR,Neo),e(Eh,qeo),e(ae,Oeo),e(ae,yh),e(yh,yY),e(yY,Geo),e(yh,Xeo),e(yh,FR),e(FR,Veo),e(yh,zeo),e(ae,Weo),e(ae,wh),e(wh,wY),e(wY,Qeo),e(wh,Heo),e(wh,CR),e(CR,Ueo),e(wh,Jeo),e(ae,Yeo),e(ae,Ah),e(Ah,AY),e(AY,Keo),e(Ah,Zeo),e(Ah,MR),e(MR,eoo),e(Ah,ooo),e(ae,roo),e(ae,Lh),e(Lh,LY),e(LY,too),e(Lh,aoo),e(Lh,ER),e(ER,noo),e(Lh,soo),e(ae,loo),e(ae,Bh),e(Bh,BY),e(BY,ioo),e(Bh,doo),e(Bh,yR),e(yR,coo),e(Bh,foo),e(ae,moo),e(ae,xh),e(xh,xY),e(xY,goo),e(xh,hoo),e(xh,wR),e(wR,poo),e(xh,_oo),e(ae,uoo),e(ae,kh),e(kh,kY),e(kY,boo),e(kh,voo),e(kh,AR),e(AR,Too),e(kh,Foo),e(ae,Coo),e(ae,Rh),e(Rh,RY),e(RY,Moo),e(Rh,Eoo),e(Rh,LR),e(LR,yoo),e(Rh,woo),e(ae,Aoo),e(ae,Sh),e(Sh,SY),e(SY,Loo),e(Sh,Boo),e(Sh,BR),e(BR,xoo),e(Sh,koo),e($e,Roo),g(Ph,$e,null),e($e,Soo),e($e,PY),e(PY,Poo),e($e,$oo),g(x4,$e,null),e(Uo,Ioo),e(Uo,$h),g(k4,$h,null),e($h,joo),e($h,$Y),e($Y,Doo),b(d,Zxe,u),b(d,rd,u),e(rd,Ih),e(Ih,IY),g(R4,IY,null),e(rd,Noo),e(rd,jY),e(jY,qoo),b(d,eke,u),b(d,Jo,u),g(S4,Jo,null),e(Jo,Ooo),e(Jo,P4),e(P4,Goo),e(P4,xR),e(xR,Xoo),e(P4,Voo),e(Jo,zoo),e(Jo,$4),e($4,Woo),e($4,DY),e(DY,Qoo),e($4,Hoo),e(Jo,Uoo),e(Jo,Ie),g(I4,Ie,null),e(Ie,Joo),e(Ie,NY),e(NY,Yoo),e(Ie,Koo),e(Ie,td),e(td,Zoo),e(td,qY),e(qY,ero),e(td,oro),e(td,OY),e(OY,rro),e(td,tro),e(Ie,aro),e(Ie,Be),e(Be,jh),e(jh,GY),e(GY,nro),e(jh,sro),e(jh,kR),e(kR,lro),e(jh,iro),e(Be,dro),e(Be,Dh),e(Dh,XY),e(XY,cro),e(Dh,fro),e(Dh,RR),e(RR,mro),e(Dh,gro),e(Be,hro),e(Be,Nh),e(Nh,VY),e(VY,pro),e(Nh,_ro),e(Nh,SR),e(SR,uro),e(Nh,bro),e(Be,vro),e(Be,qh),e(qh,zY),e(zY,Tro),e(qh,Fro),e(qh,PR),e(PR,Cro),e(qh,Mro),e(Be,Ero),e(Be,Oh),e(Oh,WY),e(WY,yro),e(Oh,wro),e(Oh,$R),e($R,Aro),e(Oh,Lro),e(Be,Bro),e(Be,Gh),e(Gh,QY),e(QY,xro),e(Gh,kro),e(Gh,IR),e(IR,Rro),e(Gh,Sro),e(Be,Pro),e(Be,Xh),e(Xh,HY),e(HY,$ro),e(Xh,Iro),e(Xh,jR),e(jR,jro),e(Xh,Dro),e(Be,Nro),e(Be,Vh),e(Vh,UY),e(UY,qro),e(Vh,Oro),e(Vh,DR),e(DR,Gro),e(Vh,Xro),e(Ie,Vro),g(zh,Ie,null),e(Ie,zro),e(Ie,JY),e(JY,Wro),e(Ie,Qro),g(j4,Ie,null),e(Jo,Hro),e(Jo,Wh),g(D4,Wh,null),e(Wh,Uro),e(Wh,YY),e(YY,Jro),b(d,oke,u),b(d,ad,u),e(ad,Qh),e(Qh,KY),g(N4,KY,null),e(ad,Yro),e(ad,ZY),e(ZY,Kro),b(d,rke,u),b(d,Yo,u),g(q4,Yo,null),e(Yo,Zro),e(Yo,nd),e(nd,eto),e(nd,eK),e(eK,oto),e(nd,rto),e(nd,oK),e(oK,tto),e(nd,ato),e(Yo,nto),e(Yo,O4),e(O4,sto),e(O4,rK),e(rK,lto),e(O4,ito),e(Yo,dto),e(Yo,Wr),g(G4,Wr,null),e(Wr,cto),e(Wr,tK),e(tK,fto),e(Wr,mto),e(Wr,sd),e(sd,gto),e(sd,aK),e(aK,hto),e(sd,pto),e(sd,nK),e(nK,_to),e(sd,uto),e(Wr,bto),e(Wr,sK),e(sK,vto),e(Wr,Tto),g(X4,Wr,null),e(Yo,Fto),e(Yo,je),g(V4,je,null),e(je,Cto),e(je,lK),e(lK,Mto),e(je,Eto),e(je,Ha),e(Ha,yto),e(Ha,iK),e(iK,wto),e(Ha,Ato),e(Ha,dK),e(dK,Lto),e(Ha,Bto),e(Ha,cK),e(cK,xto),e(Ha,kto),e(je,Rto),e(je,F),e(F,Hh),e(Hh,fK),e(fK,Sto),e(Hh,Pto),e(Hh,NR),e(NR,$to),e(Hh,Ito),e(F,jto),e(F,Uh),e(Uh,mK),e(mK,Dto),e(Uh,Nto),e(Uh,qR),e(qR,qto),e(Uh,Oto),e(F,Gto),e(F,Jh),e(Jh,gK),e(gK,Xto),e(Jh,Vto),e(Jh,OR),e(OR,zto),e(Jh,Wto),e(F,Qto),e(F,Yh),e(Yh,hK),e(hK,Hto),e(Yh,Uto),e(Yh,GR),e(GR,Jto),e(Yh,Yto),e(F,Kto),e(F,Kh),e(Kh,pK),e(pK,Zto),e(Kh,eao),e(Kh,XR),e(XR,oao),e(Kh,rao),e(F,tao),e(F,Zh),e(Zh,_K),e(_K,aao),e(Zh,nao),e(Zh,VR),e(VR,sao),e(Zh,lao),e(F,iao),e(F,ep),e(ep,uK),e(uK,dao),e(ep,cao),e(ep,zR),e(zR,fao),e(ep,mao),e(F,gao),e(F,op),e(op,bK),e(bK,hao),e(op,pao),e(op,WR),e(WR,_ao),e(op,uao),e(F,bao),e(F,rp),e(rp,vK),e(vK,vao),e(rp,Tao),e(rp,QR),e(QR,Fao),e(rp,Cao),e(F,Mao),e(F,tp),e(tp,TK),e(TK,Eao),e(tp,yao),e(tp,HR),e(HR,wao),e(tp,Aao),e(F,Lao),e(F,ap),e(ap,FK),e(FK,Bao),e(ap,xao),e(ap,UR),e(UR,kao),e(ap,Rao),e(F,Sao),e(F,np),e(np,CK),e(CK,Pao),e(np,$ao),e(np,JR),e(JR,Iao),e(np,jao),e(F,Dao),e(F,sp),e(sp,MK),e(MK,Nao),e(sp,qao),e(sp,YR),e(YR,Oao),e(sp,Gao),e(F,Xao),e(F,lp),e(lp,EK),e(EK,Vao),e(lp,zao),e(lp,KR),e(KR,Wao),e(lp,Qao),e(F,Hao),e(F,ip),e(ip,yK),e(yK,Uao),e(ip,Jao),e(ip,ZR),e(ZR,Yao),e(ip,Kao),e(F,Zao),e(F,dp),e(dp,wK),e(wK,eno),e(dp,ono),e(dp,eS),e(eS,rno),e(dp,tno),e(F,ano),e(F,cp),e(cp,AK),e(AK,nno),e(cp,sno),e(cp,oS),e(oS,lno),e(cp,ino),e(F,dno),e(F,fp),e(fp,LK),e(LK,cno),e(fp,fno),e(fp,rS),e(rS,mno),e(fp,gno),e(F,hno),e(F,mp),e(mp,BK),e(BK,pno),e(mp,_no),e(mp,tS),e(tS,uno),e(mp,bno),e(F,vno),e(F,gp),e(gp,xK),e(xK,Tno),e(gp,Fno),e(gp,aS),e(aS,Cno),e(gp,Mno),e(F,Eno),e(F,hp),e(hp,kK),e(kK,yno),e(hp,wno),e(hp,nS),e(nS,Ano),e(hp,Lno),e(F,Bno),e(F,pp),e(pp,RK),e(RK,xno),e(pp,kno),e(pp,sS),e(sS,Rno),e(pp,Sno),e(F,Pno),e(F,_p),e(_p,SK),e(SK,$no),e(_p,Ino),e(_p,lS),e(lS,jno),e(_p,Dno),e(F,Nno),e(F,up),e(up,PK),e(PK,qno),e(up,Ono),e(up,iS),e(iS,Gno),e(up,Xno),e(F,Vno),e(F,bp),e(bp,$K),e($K,zno),e(bp,Wno),e(bp,dS),e(dS,Qno),e(bp,Hno),e(F,Uno),e(F,vp),e(vp,IK),e(IK,Jno),e(vp,Yno),e(vp,cS),e(cS,Kno),e(vp,Zno),e(F,eso),e(F,Tp),e(Tp,jK),e(jK,oso),e(Tp,rso),e(Tp,fS),e(fS,tso),e(Tp,aso),e(F,nso),e(F,Vs),e(Vs,DK),e(DK,sso),e(Vs,lso),e(Vs,mS),e(mS,iso),e(Vs,dso),e(Vs,gS),e(gS,cso),e(Vs,fso),e(F,mso),e(F,Fp),e(Fp,NK),e(NK,gso),e(Fp,hso),e(Fp,hS),e(hS,pso),e(Fp,_so),e(F,uso),e(F,Cp),e(Cp,qK),e(qK,bso),e(Cp,vso),e(Cp,pS),e(pS,Tso),e(Cp,Fso),e(F,Cso),e(F,Mp),e(Mp,OK),e(OK,Mso),e(Mp,Eso),e(Mp,_S),e(_S,yso),e(Mp,wso),e(F,Aso),e(F,Ep),e(Ep,GK),e(GK,Lso),e(Ep,Bso),e(Ep,uS),e(uS,xso),e(Ep,kso),e(F,Rso),e(F,yp),e(yp,XK),e(XK,Sso),e(yp,Pso),e(yp,bS),e(bS,$so),e(yp,Iso),e(F,jso),e(F,wp),e(wp,VK),e(VK,Dso),e(wp,Nso),e(wp,vS),e(vS,qso),e(wp,Oso),e(F,Gso),e(F,Ap),e(Ap,zK),e(zK,Xso),e(Ap,Vso),e(Ap,TS),e(TS,zso),e(Ap,Wso),e(F,Qso),e(F,Lp),e(Lp,WK),e(WK,Hso),e(Lp,Uso),e(Lp,FS),e(FS,Jso),e(Lp,Yso),e(F,Kso),e(F,Bp),e(Bp,QK),e(QK,Zso),e(Bp,elo),e(Bp,CS),e(CS,olo),e(Bp,rlo),e(F,tlo),e(F,xp),e(xp,HK),e(HK,alo),e(xp,nlo),e(xp,MS),e(MS,slo),e(xp,llo),e(F,ilo),e(F,kp),e(kp,UK),e(UK,dlo),e(kp,clo),e(kp,ES),e(ES,flo),e(kp,mlo),e(F,glo),e(F,Rp),e(Rp,JK),e(JK,hlo),e(Rp,plo),e(Rp,yS),e(yS,_lo),e(Rp,ulo),e(F,blo),e(F,Sp),e(Sp,YK),e(YK,vlo),e(Sp,Tlo),e(Sp,wS),e(wS,Flo),e(Sp,Clo),e(F,Mlo),e(F,Pp),e(Pp,KK),e(KK,Elo),e(Pp,ylo),e(Pp,AS),e(AS,wlo),e(Pp,Alo),e(F,Llo),e(F,$p),e($p,ZK),e(ZK,Blo),e($p,xlo),e($p,LS),e(LS,klo),e($p,Rlo),e(F,Slo),e(F,Ip),e(Ip,eZ),e(eZ,Plo),e(Ip,$lo),e(Ip,BS),e(BS,Ilo),e(Ip,jlo),e(F,Dlo),e(F,jp),e(jp,oZ),e(oZ,Nlo),e(jp,qlo),e(jp,xS),e(xS,Olo),e(jp,Glo),e(F,Xlo),e(F,Dp),e(Dp,rZ),e(rZ,Vlo),e(Dp,zlo),e(Dp,kS),e(kS,Wlo),e(Dp,Qlo),e(F,Hlo),e(F,Np),e(Np,tZ),e(tZ,Ulo),e(Np,Jlo),e(Np,RS),e(RS,Ylo),e(Np,Klo),e(F,Zlo),e(F,qp),e(qp,aZ),e(aZ,eio),e(qp,oio),e(qp,SS),e(SS,rio),e(qp,tio),e(F,aio),e(F,Op),e(Op,nZ),e(nZ,nio),e(Op,sio),e(Op,PS),e(PS,lio),e(Op,iio),e(F,dio),e(F,Gp),e(Gp,sZ),e(sZ,cio),e(Gp,fio),e(Gp,$S),e($S,mio),e(Gp,gio),e(F,hio),e(F,Xp),e(Xp,lZ),e(lZ,pio),e(Xp,_io),e(Xp,IS),e(IS,uio),e(Xp,bio),e(F,vio),e(F,Vp),e(Vp,iZ),e(iZ,Tio),e(Vp,Fio),e(Vp,jS),e(jS,Cio),e(Vp,Mio),e(F,Eio),e(F,zp),e(zp,dZ),e(dZ,yio),e(zp,wio),e(zp,DS),e(DS,Aio),e(zp,Lio),e(F,Bio),e(F,Wp),e(Wp,cZ),e(cZ,xio),e(Wp,kio),e(Wp,NS),e(NS,Rio),e(Wp,Sio),e(F,Pio),e(F,Qp),e(Qp,fZ),e(fZ,$io),e(Qp,Iio),e(Qp,qS),e(qS,jio),e(Qp,Dio),e(F,Nio),e(F,Hp),e(Hp,mZ),e(mZ,qio),e(Hp,Oio),e(Hp,OS),e(OS,Gio),e(Hp,Xio),e(F,Vio),e(F,Up),e(Up,gZ),e(gZ,zio),e(Up,Wio),e(Up,GS),e(GS,Qio),e(Up,Hio),e(F,Uio),e(F,Jp),e(Jp,hZ),e(hZ,Jio),e(Jp,Yio),e(Jp,XS),e(XS,Kio),e(Jp,Zio),e(F,edo),e(F,Yp),e(Yp,pZ),e(pZ,odo),e(Yp,rdo),e(Yp,VS),e(VS,tdo),e(Yp,ado),e(F,ndo),e(F,Kp),e(Kp,_Z),e(_Z,sdo),e(Kp,ldo),e(Kp,zS),e(zS,ido),e(Kp,ddo),e(F,cdo),e(F,Zp),e(Zp,uZ),e(uZ,fdo),e(Zp,mdo),e(Zp,WS),e(WS,gdo),e(Zp,hdo),e(F,pdo),e(F,e_),e(e_,bZ),e(bZ,_do),e(e_,udo),e(e_,QS),e(QS,bdo),e(e_,vdo),e(F,Tdo),e(F,o_),e(o_,vZ),e(vZ,Fdo),e(o_,Cdo),e(o_,HS),e(HS,Mdo),e(o_,Edo),e(F,ydo),e(F,r_),e(r_,TZ),e(TZ,wdo),e(r_,Ado),e(r_,US),e(US,Ldo),e(r_,Bdo),e(F,xdo),e(F,t_),e(t_,FZ),e(FZ,kdo),e(t_,Rdo),e(t_,JS),e(JS,Sdo),e(t_,Pdo),e(F,$do),e(F,a_),e(a_,CZ),e(CZ,Ido),e(a_,jdo),e(a_,YS),e(YS,Ddo),e(a_,Ndo),e(F,qdo),e(F,n_),e(n_,MZ),e(MZ,Odo),e(n_,Gdo),e(n_,KS),e(KS,Xdo),e(n_,Vdo),e(F,zdo),e(F,s_),e(s_,EZ),e(EZ,Wdo),e(s_,Qdo),e(s_,ZS),e(ZS,Hdo),e(s_,Udo),e(F,Jdo),e(F,l_),e(l_,yZ),e(yZ,Ydo),e(l_,Kdo),e(l_,eP),e(eP,Zdo),e(l_,eco),e(F,oco),e(F,i_),e(i_,wZ),e(wZ,rco),e(i_,tco),e(i_,oP),e(oP,aco),e(i_,nco),e(F,sco),e(F,d_),e(d_,AZ),e(AZ,lco),e(d_,ico),e(d_,rP),e(rP,dco),e(d_,cco),e(F,fco),e(F,c_),e(c_,LZ),e(LZ,mco),e(c_,gco),e(c_,tP),e(tP,hco),e(c_,pco),e(F,_co),e(F,f_),e(f_,BZ),e(BZ,uco),e(f_,bco),e(f_,aP),e(aP,vco),e(f_,Tco),e(F,Fco),e(F,m_),e(m_,xZ),e(xZ,Cco),e(m_,Mco),e(m_,nP),e(nP,Eco),e(m_,yco),e(F,wco),e(F,g_),e(g_,kZ),e(kZ,Aco),e(g_,Lco),e(g_,sP),e(sP,Bco),e(g_,xco),e(F,kco),e(F,h_),e(h_,RZ),e(RZ,Rco),e(h_,Sco),e(h_,lP),e(lP,Pco),e(h_,$co),e(F,Ico),e(F,p_),e(p_,SZ),e(SZ,jco),e(p_,Dco),e(p_,iP),e(iP,Nco),e(p_,qco),e(F,Oco),e(F,__),e(__,PZ),e(PZ,Gco),e(__,Xco),e(__,dP),e(dP,Vco),e(__,zco),e(F,Wco),e(F,u_),e(u_,$Z),e($Z,Qco),e(u_,Hco),e(u_,cP),e(cP,Uco),e(u_,Jco),e(F,Yco),e(F,b_),e(b_,IZ),e(IZ,Kco),e(b_,Zco),e(b_,fP),e(fP,efo),e(b_,ofo),e(F,rfo),e(F,v_),e(v_,jZ),e(jZ,tfo),e(v_,afo),e(v_,mP),e(mP,nfo),e(v_,sfo),e(F,lfo),e(F,T_),e(T_,DZ),e(DZ,ifo),e(T_,dfo),e(T_,gP),e(gP,cfo),e(T_,ffo),e(F,mfo),e(F,F_),e(F_,NZ),e(NZ,gfo),e(F_,hfo),e(F_,hP),e(hP,pfo),e(F_,_fo),e(F,ufo),e(F,C_),e(C_,qZ),e(qZ,bfo),e(C_,vfo),e(C_,pP),e(pP,Tfo),e(C_,Ffo),e(F,Cfo),e(F,M_),e(M_,OZ),e(OZ,Mfo),e(M_,Efo),e(M_,_P),e(_P,yfo),e(M_,wfo),e(F,Afo),e(F,E_),e(E_,GZ),e(GZ,Lfo),e(E_,Bfo),e(E_,uP),e(uP,xfo),e(E_,kfo),e(F,Rfo),e(F,y_),e(y_,XZ),e(XZ,Sfo),e(y_,Pfo),e(y_,bP),e(bP,$fo),e(y_,Ifo),e(je,jfo),e(je,w_),e(w_,Dfo),e(w_,VZ),e(VZ,Nfo),e(w_,qfo),e(w_,zZ),e(zZ,Ofo),e(je,Gfo),e(je,WZ),e(WZ,Xfo),e(je,Vfo),g(z4,je,null),b(d,tke,u),b(d,ld,u),e(ld,A_),e(A_,QZ),g(W4,QZ,null),e(ld,zfo),e(ld,HZ),e(HZ,Wfo),b(d,ake,u),b(d,Ko,u),g(Q4,Ko,null),e(Ko,Qfo),e(Ko,id),e(id,Hfo),e(id,UZ),e(UZ,Ufo),e(id,Jfo),e(id,JZ),e(JZ,Yfo),e(id,Kfo),e(Ko,Zfo),e(Ko,H4),e(H4,emo),e(H4,YZ),e(YZ,omo),e(H4,rmo),e(Ko,tmo),e(Ko,Qr),g(U4,Qr,null),e(Qr,amo),e(Qr,KZ),e(KZ,nmo),e(Qr,smo),e(Qr,dd),e(dd,lmo),e(dd,ZZ),e(ZZ,imo),e(dd,dmo),e(dd,eee),e(eee,cmo),e(dd,fmo),e(Qr,mmo),e(Qr,oee),e(oee,gmo),e(Qr,hmo),g(J4,Qr,null),e(Ko,pmo),e(Ko,De),g(Y4,De,null),e(De,_mo),e(De,ree),e(ree,umo),e(De,bmo),e(De,Ua),e(Ua,vmo),e(Ua,tee),e(tee,Tmo),e(Ua,Fmo),e(Ua,aee),e(aee,Cmo),e(Ua,Mmo),e(Ua,nee),e(nee,Emo),e(Ua,ymo),e(De,wmo),e(De,k),e(k,L_),e(L_,see),e(see,Amo),e(L_,Lmo),e(L_,vP),e(vP,Bmo),e(L_,xmo),e(k,kmo),e(k,B_),e(B_,lee),e(lee,Rmo),e(B_,Smo),e(B_,TP),e(TP,Pmo),e(B_,$mo),e(k,Imo),e(k,x_),e(x_,iee),e(iee,jmo),e(x_,Dmo),e(x_,FP),e(FP,Nmo),e(x_,qmo),e(k,Omo),e(k,k_),e(k_,dee),e(dee,Gmo),e(k_,Xmo),e(k_,CP),e(CP,Vmo),e(k_,zmo),e(k,Wmo),e(k,R_),e(R_,cee),e(cee,Qmo),e(R_,Hmo),e(R_,MP),e(MP,Umo),e(R_,Jmo),e(k,Ymo),e(k,S_),e(S_,fee),e(fee,Kmo),e(S_,Zmo),e(S_,EP),e(EP,ego),e(S_,ogo),e(k,rgo),e(k,P_),e(P_,mee),e(mee,tgo),e(P_,ago),e(P_,yP),e(yP,ngo),e(P_,sgo),e(k,lgo),e(k,$_),e($_,gee),e(gee,igo),e($_,dgo),e($_,wP),e(wP,cgo),e($_,fgo),e(k,mgo),e(k,I_),e(I_,hee),e(hee,ggo),e(I_,hgo),e(I_,AP),e(AP,pgo),e(I_,_go),e(k,ugo),e(k,j_),e(j_,pee),e(pee,bgo),e(j_,vgo),e(j_,LP),e(LP,Tgo),e(j_,Fgo),e(k,Cgo),e(k,D_),e(D_,_ee),e(_ee,Mgo),e(D_,Ego),e(D_,BP),e(BP,ygo),e(D_,wgo),e(k,Ago),e(k,N_),e(N_,uee),e(uee,Lgo),e(N_,Bgo),e(N_,xP),e(xP,xgo),e(N_,kgo),e(k,Rgo),e(k,q_),e(q_,bee),e(bee,Sgo),e(q_,Pgo),e(q_,kP),e(kP,$go),e(q_,Igo),e(k,jgo),e(k,O_),e(O_,vee),e(vee,Dgo),e(O_,Ngo),e(O_,RP),e(RP,qgo),e(O_,Ogo),e(k,Ggo),e(k,G_),e(G_,Tee),e(Tee,Xgo),e(G_,Vgo),e(G_,SP),e(SP,zgo),e(G_,Wgo),e(k,Qgo),e(k,X_),e(X_,Fee),e(Fee,Hgo),e(X_,Ugo),e(X_,PP),e(PP,Jgo),e(X_,Ygo),e(k,Kgo),e(k,V_),e(V_,Cee),e(Cee,Zgo),e(V_,eho),e(V_,$P),e($P,oho),e(V_,rho),e(k,tho),e(k,z_),e(z_,Mee),e(Mee,aho),e(z_,nho),e(z_,IP),e(IP,sho),e(z_,lho),e(k,iho),e(k,W_),e(W_,Eee),e(Eee,dho),e(W_,cho),e(W_,jP),e(jP,fho),e(W_,mho),e(k,gho),e(k,Q_),e(Q_,yee),e(yee,hho),e(Q_,pho),e(Q_,DP),e(DP,_ho),e(Q_,uho),e(k,bho),e(k,H_),e(H_,wee),e(wee,vho),e(H_,Tho),e(H_,NP),e(NP,Fho),e(H_,Cho),e(k,Mho),e(k,U_),e(U_,Aee),e(Aee,Eho),e(U_,yho),e(U_,qP),e(qP,who),e(U_,Aho),e(k,Lho),e(k,J_),e(J_,Lee),e(Lee,Bho),e(J_,xho),e(J_,OP),e(OP,kho),e(J_,Rho),e(k,Sho),e(k,Y_),e(Y_,Bee),e(Bee,Pho),e(Y_,$ho),e(Y_,GP),e(GP,Iho),e(Y_,jho),e(k,Dho),e(k,K_),e(K_,xee),e(xee,Nho),e(K_,qho),e(K_,XP),e(XP,Oho),e(K_,Gho),e(k,Xho),e(k,Z_),e(Z_,kee),e(kee,Vho),e(Z_,zho),e(Z_,VP),e(VP,Who),e(Z_,Qho),e(k,Hho),e(k,eu),e(eu,Ree),e(Ree,Uho),e(eu,Jho),e(eu,zP),e(zP,Yho),e(eu,Kho),e(k,Zho),e(k,ou),e(ou,See),e(See,epo),e(ou,opo),e(ou,WP),e(WP,rpo),e(ou,tpo),e(k,apo),e(k,ru),e(ru,Pee),e(Pee,npo),e(ru,spo),e(ru,QP),e(QP,lpo),e(ru,ipo),e(k,dpo),e(k,tu),e(tu,$ee),e($ee,cpo),e(tu,fpo),e(tu,HP),e(HP,mpo),e(tu,gpo),e(k,hpo),e(k,au),e(au,Iee),e(Iee,ppo),e(au,_po),e(au,UP),e(UP,upo),e(au,bpo),e(k,vpo),e(k,nu),e(nu,jee),e(jee,Tpo),e(nu,Fpo),e(nu,JP),e(JP,Cpo),e(nu,Mpo),e(k,Epo),e(k,su),e(su,Dee),e(Dee,ypo),e(su,wpo),e(su,YP),e(YP,Apo),e(su,Lpo),e(k,Bpo),e(k,lu),e(lu,Nee),e(Nee,xpo),e(lu,kpo),e(lu,KP),e(KP,Rpo),e(lu,Spo),e(k,Ppo),e(k,iu),e(iu,qee),e(qee,$po),e(iu,Ipo),e(iu,ZP),e(ZP,jpo),e(iu,Dpo),e(k,Npo),e(k,du),e(du,Oee),e(Oee,qpo),e(du,Opo),e(du,e$),e(e$,Gpo),e(du,Xpo),e(k,Vpo),e(k,cu),e(cu,Gee),e(Gee,zpo),e(cu,Wpo),e(cu,o$),e(o$,Qpo),e(cu,Hpo),e(k,Upo),e(k,fu),e(fu,Xee),e(Xee,Jpo),e(fu,Ypo),e(fu,r$),e(r$,Kpo),e(fu,Zpo),e(k,e_o),e(k,mu),e(mu,Vee),e(Vee,o_o),e(mu,r_o),e(mu,t$),e(t$,t_o),e(mu,a_o),e(De,n_o),e(De,gu),e(gu,s_o),e(gu,zee),e(zee,l_o),e(gu,i_o),e(gu,Wee),e(Wee,d_o),e(De,c_o),e(De,Qee),e(Qee,f_o),e(De,m_o),g(K4,De,null),b(d,nke,u),b(d,cd,u),e(cd,hu),e(hu,Hee),g(Z4,Hee,null),e(cd,g_o),e(cd,Uee),e(Uee,h_o),b(d,ske,u),b(d,Zo,u),g(eE,Zo,null),e(Zo,p_o),e(Zo,fd),e(fd,__o),e(fd,Jee),e(Jee,u_o),e(fd,b_o),e(fd,Yee),e(Yee,v_o),e(fd,T_o),e(Zo,F_o),e(Zo,oE),e(oE,C_o),e(oE,Kee),e(Kee,M_o),e(oE,E_o),e(Zo,y_o),e(Zo,Hr),g(rE,Hr,null),e(Hr,w_o),e(Hr,Zee),e(Zee,A_o),e(Hr,L_o),e(Hr,md),e(md,B_o),e(md,eoe),e(eoe,x_o),e(md,k_o),e(md,ooe),e(ooe,R_o),e(md,S_o),e(Hr,P_o),e(Hr,roe),e(roe,$_o),e(Hr,I_o),g(tE,Hr,null),e(Zo,j_o),e(Zo,Ne),g(aE,Ne,null),e(Ne,D_o),e(Ne,toe),e(toe,N_o),e(Ne,q_o),e(Ne,Ja),e(Ja,O_o),e(Ja,aoe),e(aoe,G_o),e(Ja,X_o),e(Ja,noe),e(noe,V_o),e(Ja,z_o),e(Ja,soe),e(soe,W_o),e(Ja,Q_o),e(Ne,H_o),e(Ne,$),e($,pu),e(pu,loe),e(loe,U_o),e(pu,J_o),e(pu,a$),e(a$,Y_o),e(pu,K_o),e($,Z_o),e($,_u),e(_u,ioe),e(ioe,euo),e(_u,ouo),e(_u,n$),e(n$,ruo),e(_u,tuo),e($,auo),e($,uu),e(uu,doe),e(doe,nuo),e(uu,suo),e(uu,s$),e(s$,luo),e(uu,iuo),e($,duo),e($,bu),e(bu,coe),e(coe,cuo),e(bu,fuo),e(bu,l$),e(l$,muo),e(bu,guo),e($,huo),e($,vu),e(vu,foe),e(foe,puo),e(vu,_uo),e(vu,i$),e(i$,uuo),e(vu,buo),e($,vuo),e($,Tu),e(Tu,moe),e(moe,Tuo),e(Tu,Fuo),e(Tu,d$),e(d$,Cuo),e(Tu,Muo),e($,Euo),e($,Fu),e(Fu,goe),e(goe,yuo),e(Fu,wuo),e(Fu,c$),e(c$,Auo),e(Fu,Luo),e($,Buo),e($,Cu),e(Cu,hoe),e(hoe,xuo),e(Cu,kuo),e(Cu,f$),e(f$,Ruo),e(Cu,Suo),e($,Puo),e($,Mu),e(Mu,poe),e(poe,$uo),e(Mu,Iuo),e(Mu,m$),e(m$,juo),e(Mu,Duo),e($,Nuo),e($,Eu),e(Eu,_oe),e(_oe,quo),e(Eu,Ouo),e(Eu,g$),e(g$,Guo),e(Eu,Xuo),e($,Vuo),e($,yu),e(yu,uoe),e(uoe,zuo),e(yu,Wuo),e(yu,h$),e(h$,Quo),e(yu,Huo),e($,Uuo),e($,wu),e(wu,boe),e(boe,Juo),e(wu,Yuo),e(wu,p$),e(p$,Kuo),e(wu,Zuo),e($,e1o),e($,Au),e(Au,voe),e(voe,o1o),e(Au,r1o),e(Au,_$),e(_$,t1o),e(Au,a1o),e($,n1o),e($,Lu),e(Lu,Toe),e(Toe,s1o),e(Lu,l1o),e(Lu,u$),e(u$,i1o),e(Lu,d1o),e($,c1o),e($,Bu),e(Bu,Foe),e(Foe,f1o),e(Bu,m1o),e(Bu,b$),e(b$,g1o),e(Bu,h1o),e($,p1o),e($,xu),e(xu,Coe),e(Coe,_1o),e(xu,u1o),e(xu,v$),e(v$,b1o),e(xu,v1o),e($,T1o),e($,ku),e(ku,Moe),e(Moe,F1o),e(ku,C1o),e(ku,T$),e(T$,M1o),e(ku,E1o),e($,y1o),e($,Ru),e(Ru,Eoe),e(Eoe,w1o),e(Ru,A1o),e(Ru,F$),e(F$,L1o),e(Ru,B1o),e($,x1o),e($,Su),e(Su,yoe),e(yoe,k1o),e(Su,R1o),e(Su,C$),e(C$,S1o),e(Su,P1o),e($,$1o),e($,Pu),e(Pu,woe),e(woe,I1o),e(Pu,j1o),e(Pu,M$),e(M$,D1o),e(Pu,N1o),e($,q1o),e($,$u),e($u,Aoe),e(Aoe,O1o),e($u,G1o),e($u,E$),e(E$,X1o),e($u,V1o),e($,z1o),e($,Iu),e(Iu,Loe),e(Loe,W1o),e(Iu,Q1o),e(Iu,y$),e(y$,H1o),e(Iu,U1o),e($,J1o),e($,ju),e(ju,Boe),e(Boe,Y1o),e(ju,K1o),e(ju,w$),e(w$,Z1o),e(ju,ebo),e($,obo),e($,Du),e(Du,xoe),e(xoe,rbo),e(Du,tbo),e(Du,A$),e(A$,abo),e(Du,nbo),e($,sbo),e($,Nu),e(Nu,koe),e(koe,lbo),e(Nu,ibo),e(Nu,L$),e(L$,dbo),e(Nu,cbo),e($,fbo),e($,qu),e(qu,Roe),e(Roe,mbo),e(qu,gbo),e(qu,B$),e(B$,hbo),e(qu,pbo),e($,_bo),e($,Ou),e(Ou,Soe),e(Soe,ubo),e(Ou,bbo),e(Ou,x$),e(x$,vbo),e(Ou,Tbo),e($,Fbo),e($,Gu),e(Gu,Poe),e(Poe,Cbo),e(Gu,Mbo),e(Gu,k$),e(k$,Ebo),e(Gu,ybo),e($,wbo),e($,Xu),e(Xu,$oe),e($oe,Abo),e(Xu,Lbo),e(Xu,R$),e(R$,Bbo),e(Xu,xbo),e($,kbo),e($,Vu),e(Vu,Ioe),e(Ioe,Rbo),e(Vu,Sbo),e(Vu,S$),e(S$,Pbo),e(Vu,$bo),e($,Ibo),e($,zu),e(zu,joe),e(joe,jbo),e(zu,Dbo),e(zu,P$),e(P$,Nbo),e(zu,qbo),e($,Obo),e($,Wu),e(Wu,Doe),e(Doe,Gbo),e(Wu,Xbo),e(Wu,$$),e($$,Vbo),e(Wu,zbo),e($,Wbo),e($,Qu),e(Qu,Noe),e(Noe,Qbo),e(Qu,Hbo),e(Qu,I$),e(I$,Ubo),e(Qu,Jbo),e($,Ybo),e($,Hu),e(Hu,qoe),e(qoe,Kbo),e(Hu,Zbo),e(Hu,j$),e(j$,e5o),e(Hu,o5o),e($,r5o),e($,Uu),e(Uu,Ooe),e(Ooe,t5o),e(Uu,a5o),e(Uu,D$),e(D$,n5o),e(Uu,s5o),e(Ne,l5o),e(Ne,Ju),e(Ju,i5o),e(Ju,Goe),e(Goe,d5o),e(Ju,c5o),e(Ju,Xoe),e(Xoe,f5o),e(Ne,m5o),e(Ne,Voe),e(Voe,g5o),e(Ne,h5o),g(nE,Ne,null),b(d,lke,u),b(d,gd,u),e(gd,Yu),e(Yu,zoe),g(sE,zoe,null),e(gd,p5o),e(gd,Woe),e(Woe,_5o),b(d,ike,u),b(d,er,u),g(lE,er,null),e(er,u5o),e(er,hd),e(hd,b5o),e(hd,Qoe),e(Qoe,v5o),e(hd,T5o),e(hd,Hoe),e(Hoe,F5o),e(hd,C5o),e(er,M5o),e(er,iE),e(iE,E5o),e(iE,Uoe),e(Uoe,y5o),e(iE,w5o),e(er,A5o),e(er,Ur),g(dE,Ur,null),e(Ur,L5o),e(Ur,Joe),e(Joe,B5o),e(Ur,x5o),e(Ur,pd),e(pd,k5o),e(pd,Yoe),e(Yoe,R5o),e(pd,S5o),e(pd,Koe),e(Koe,P5o),e(pd,$5o),e(Ur,I5o),e(Ur,Zoe),e(Zoe,j5o),e(Ur,D5o),g(cE,Ur,null),e(er,N5o),e(er,qe),g(fE,qe,null),e(qe,q5o),e(qe,ere),e(ere,O5o),e(qe,G5o),e(qe,Ya),e(Ya,X5o),e(Ya,ore),e(ore,V5o),e(Ya,z5o),e(Ya,rre),e(rre,W5o),e(Ya,Q5o),e(Ya,tre),e(tre,H5o),e(Ya,U5o),e(qe,J5o),e(qe,I),e(I,Ku),e(Ku,are),e(are,Y5o),e(Ku,K5o),e(Ku,N$),e(N$,Z5o),e(Ku,e2o),e(I,o2o),e(I,Zu),e(Zu,nre),e(nre,r2o),e(Zu,t2o),e(Zu,q$),e(q$,a2o),e(Zu,n2o),e(I,s2o),e(I,e1),e(e1,sre),e(sre,l2o),e(e1,i2o),e(e1,O$),e(O$,d2o),e(e1,c2o),e(I,f2o),e(I,o1),e(o1,lre),e(lre,m2o),e(o1,g2o),e(o1,G$),e(G$,h2o),e(o1,p2o),e(I,_2o),e(I,r1),e(r1,ire),e(ire,u2o),e(r1,b2o),e(r1,X$),e(X$,v2o),e(r1,T2o),e(I,F2o),e(I,t1),e(t1,dre),e(dre,C2o),e(t1,M2o),e(t1,V$),e(V$,E2o),e(t1,y2o),e(I,w2o),e(I,a1),e(a1,cre),e(cre,A2o),e(a1,L2o),e(a1,z$),e(z$,B2o),e(a1,x2o),e(I,k2o),e(I,n1),e(n1,fre),e(fre,R2o),e(n1,S2o),e(n1,W$),e(W$,P2o),e(n1,$2o),e(I,I2o),e(I,s1),e(s1,mre),e(mre,j2o),e(s1,D2o),e(s1,Q$),e(Q$,N2o),e(s1,q2o),e(I,O2o),e(I,l1),e(l1,gre),e(gre,G2o),e(l1,X2o),e(l1,H$),e(H$,V2o),e(l1,z2o),e(I,W2o),e(I,i1),e(i1,hre),e(hre,Q2o),e(i1,H2o),e(i1,U$),e(U$,U2o),e(i1,J2o),e(I,Y2o),e(I,d1),e(d1,pre),e(pre,K2o),e(d1,Z2o),e(d1,J$),e(J$,evo),e(d1,ovo),e(I,rvo),e(I,c1),e(c1,_re),e(_re,tvo),e(c1,avo),e(c1,Y$),e(Y$,nvo),e(c1,svo),e(I,lvo),e(I,f1),e(f1,ure),e(ure,ivo),e(f1,dvo),e(f1,K$),e(K$,cvo),e(f1,fvo),e(I,mvo),e(I,m1),e(m1,bre),e(bre,gvo),e(m1,hvo),e(m1,Z$),e(Z$,pvo),e(m1,_vo),e(I,uvo),e(I,g1),e(g1,vre),e(vre,bvo),e(g1,vvo),e(g1,eI),e(eI,Tvo),e(g1,Fvo),e(I,Cvo),e(I,h1),e(h1,Tre),e(Tre,Mvo),e(h1,Evo),e(h1,oI),e(oI,yvo),e(h1,wvo),e(I,Avo),e(I,p1),e(p1,Fre),e(Fre,Lvo),e(p1,Bvo),e(p1,rI),e(rI,xvo),e(p1,kvo),e(I,Rvo),e(I,_1),e(_1,Cre),e(Cre,Svo),e(_1,Pvo),e(_1,tI),e(tI,$vo),e(_1,Ivo),e(I,jvo),e(I,u1),e(u1,Mre),e(Mre,Dvo),e(u1,Nvo),e(u1,aI),e(aI,qvo),e(u1,Ovo),e(I,Gvo),e(I,b1),e(b1,Ere),e(Ere,Xvo),e(b1,Vvo),e(b1,nI),e(nI,zvo),e(b1,Wvo),e(I,Qvo),e(I,v1),e(v1,yre),e(yre,Hvo),e(v1,Uvo),e(v1,sI),e(sI,Jvo),e(v1,Yvo),e(I,Kvo),e(I,T1),e(T1,wre),e(wre,Zvo),e(T1,e6o),e(T1,lI),e(lI,o6o),e(T1,r6o),e(I,t6o),e(I,F1),e(F1,Are),e(Are,a6o),e(F1,n6o),e(F1,iI),e(iI,s6o),e(F1,l6o),e(I,i6o),e(I,C1),e(C1,Lre),e(Lre,d6o),e(C1,c6o),e(C1,dI),e(dI,f6o),e(C1,m6o),e(I,g6o),e(I,M1),e(M1,Bre),e(Bre,h6o),e(M1,p6o),e(M1,cI),e(cI,_6o),e(M1,u6o),e(I,b6o),e(I,E1),e(E1,xre),e(xre,v6o),e(E1,T6o),e(E1,fI),e(fI,F6o),e(E1,C6o),e(I,M6o),e(I,y1),e(y1,kre),e(kre,E6o),e(y1,y6o),e(y1,mI),e(mI,w6o),e(y1,A6o),e(I,L6o),e(I,w1),e(w1,Rre),e(Rre,B6o),e(w1,x6o),e(w1,gI),e(gI,k6o),e(w1,R6o),e(I,S6o),e(I,A1),e(A1,Sre),e(Sre,P6o),e(A1,$6o),e(A1,hI),e(hI,I6o),e(A1,j6o),e(I,D6o),e(I,L1),e(L1,Pre),e(Pre,N6o),e(L1,q6o),e(L1,$re),e($re,O6o),e(L1,G6o),e(I,X6o),e(I,B1),e(B1,Ire),e(Ire,V6o),e(B1,z6o),e(B1,pI),e(pI,W6o),e(B1,Q6o),e(I,H6o),e(I,x1),e(x1,jre),e(jre,U6o),e(x1,J6o),e(x1,_I),e(_I,Y6o),e(x1,K6o),e(I,Z6o),e(I,k1),e(k1,Dre),e(Dre,e0o),e(k1,o0o),e(k1,uI),e(uI,r0o),e(k1,t0o),e(I,a0o),e(I,R1),e(R1,Nre),e(Nre,n0o),e(R1,s0o),e(R1,bI),e(bI,l0o),e(R1,i0o),e(qe,d0o),e(qe,S1),e(S1,c0o),e(S1,qre),e(qre,f0o),e(S1,m0o),e(S1,Ore),e(Ore,g0o),e(qe,h0o),e(qe,Gre),e(Gre,p0o),e(qe,_0o),g(mE,qe,null),b(d,dke,u),b(d,_d,u),e(_d,P1),e(P1,Xre),g(gE,Xre,null),e(_d,u0o),e(_d,Vre),e(Vre,b0o),b(d,cke,u),b(d,or,u),g(hE,or,null),e(or,v0o),e(or,ud),e(ud,T0o),e(ud,zre),e(zre,F0o),e(ud,C0o),e(ud,Wre),e(Wre,M0o),e(ud,E0o),e(or,y0o),e(or,pE),e(pE,w0o),e(pE,Qre),e(Qre,A0o),e(pE,L0o),e(or,B0o),e(or,Jr),g(_E,Jr,null),e(Jr,x0o),e(Jr,Hre),e(Hre,k0o),e(Jr,R0o),e(Jr,bd),e(bd,S0o),e(bd,Ure),e(Ure,P0o),e(bd,$0o),e(bd,Jre),e(Jre,I0o),e(bd,j0o),e(Jr,D0o),e(Jr,Yre),e(Yre,N0o),e(Jr,q0o),g(uE,Jr,null),e(or,O0o),e(or,Oe),g(bE,Oe,null),e(Oe,G0o),e(Oe,Kre),e(Kre,X0o),e(Oe,V0o),e(Oe,Ka),e(Ka,z0o),e(Ka,Zre),e(Zre,W0o),e(Ka,Q0o),e(Ka,ete),e(ete,H0o),e(Ka,U0o),e(Ka,ote),e(ote,J0o),e(Ka,Y0o),e(Oe,K0o),e(Oe,ne),e(ne,$1),e($1,rte),e(rte,Z0o),e($1,eTo),e($1,vI),e(vI,oTo),e($1,rTo),e(ne,tTo),e(ne,I1),e(I1,tte),e(tte,aTo),e(I1,nTo),e(I1,TI),e(TI,sTo),e(I1,lTo),e(ne,iTo),e(ne,j1),e(j1,ate),e(ate,dTo),e(j1,cTo),e(j1,FI),e(FI,fTo),e(j1,mTo),e(ne,gTo),e(ne,D1),e(D1,nte),e(nte,hTo),e(D1,pTo),e(D1,CI),e(CI,_To),e(D1,uTo),e(ne,bTo),e(ne,N1),e(N1,ste),e(ste,vTo),e(N1,TTo),e(N1,MI),e(MI,FTo),e(N1,CTo),e(ne,MTo),e(ne,q1),e(q1,lte),e(lte,ETo),e(q1,yTo),e(q1,EI),e(EI,wTo),e(q1,ATo),e(ne,LTo),e(ne,O1),e(O1,ite),e(ite,BTo),e(O1,xTo),e(O1,yI),e(yI,kTo),e(O1,RTo),e(ne,STo),e(ne,G1),e(G1,dte),e(dte,PTo),e(G1,$To),e(G1,wI),e(wI,ITo),e(G1,jTo),e(ne,DTo),e(ne,X1),e(X1,cte),e(cte,NTo),e(X1,qTo),e(X1,AI),e(AI,OTo),e(X1,GTo),e(ne,XTo),e(ne,V1),e(V1,fte),e(fte,VTo),e(V1,zTo),e(V1,LI),e(LI,WTo),e(V1,QTo),e(ne,HTo),e(ne,z1),e(z1,mte),e(mte,UTo),e(z1,JTo),e(z1,BI),e(BI,YTo),e(z1,KTo),e(ne,ZTo),e(ne,W1),e(W1,gte),e(gte,e8o),e(W1,o8o),e(W1,xI),e(xI,r8o),e(W1,t8o),e(ne,a8o),e(ne,Q1),e(Q1,hte),e(hte,n8o),e(Q1,s8o),e(Q1,kI),e(kI,l8o),e(Q1,i8o),e(ne,d8o),e(ne,H1),e(H1,pte),e(pte,c8o),e(H1,f8o),e(H1,RI),e(RI,m8o),e(H1,g8o),e(ne,h8o),e(ne,U1),e(U1,_te),e(_te,p8o),e(U1,_8o),e(U1,SI),e(SI,u8o),e(U1,b8o),e(ne,v8o),e(ne,J1),e(J1,ute),e(ute,T8o),e(J1,F8o),e(J1,PI),e(PI,C8o),e(J1,M8o),e(Oe,E8o),e(Oe,Y1),e(Y1,y8o),e(Y1,bte),e(bte,w8o),e(Y1,A8o),e(Y1,vte),e(vte,L8o),e(Oe,B8o),e(Oe,Tte),e(Tte,x8o),e(Oe,k8o),g(vE,Oe,null),b(d,fke,u),b(d,vd,u),e(vd,K1),e(K1,Fte),g(TE,Fte,null),e(vd,R8o),e(vd,Cte),e(Cte,S8o),b(d,mke,u),b(d,rr,u),g(FE,rr,null),e(rr,P8o),e(rr,Td),e(Td,$8o),e(Td,Mte),e(Mte,I8o),e(Td,j8o),e(Td,Ete),e(Ete,D8o),e(Td,N8o),e(rr,q8o),e(rr,CE),e(CE,O8o),e(CE,yte),e(yte,G8o),e(CE,X8o),e(rr,V8o),e(rr,Yr),g(ME,Yr,null),e(Yr,z8o),e(Yr,wte),e(wte,W8o),e(Yr,Q8o),e(Yr,Fd),e(Fd,H8o),e(Fd,Ate),e(Ate,U8o),e(Fd,J8o),e(Fd,Lte),e(Lte,Y8o),e(Fd,K8o),e(Yr,Z8o),e(Yr,Bte),e(Bte,eFo),e(Yr,oFo),g(EE,Yr,null),e(rr,rFo),e(rr,Ge),g(yE,Ge,null),e(Ge,tFo),e(Ge,xte),e(xte,aFo),e(Ge,nFo),e(Ge,Za),e(Za,sFo),e(Za,kte),e(kte,lFo),e(Za,iFo),e(Za,Rte),e(Rte,dFo),e(Za,cFo),e(Za,Ste),e(Ste,fFo),e(Za,mFo),e(Ge,gFo),e(Ge,A),e(A,Z1),e(Z1,Pte),e(Pte,hFo),e(Z1,pFo),e(Z1,$I),e($I,_Fo),e(Z1,uFo),e(A,bFo),e(A,eb),e(eb,$te),e($te,vFo),e(eb,TFo),e(eb,II),e(II,FFo),e(eb,CFo),e(A,MFo),e(A,ob),e(ob,Ite),e(Ite,EFo),e(ob,yFo),e(ob,jI),e(jI,wFo),e(ob,AFo),e(A,LFo),e(A,rb),e(rb,jte),e(jte,BFo),e(rb,xFo),e(rb,DI),e(DI,kFo),e(rb,RFo),e(A,SFo),e(A,tb),e(tb,Dte),e(Dte,PFo),e(tb,$Fo),e(tb,NI),e(NI,IFo),e(tb,jFo),e(A,DFo),e(A,ab),e(ab,Nte),e(Nte,NFo),e(ab,qFo),e(ab,qI),e(qI,OFo),e(ab,GFo),e(A,XFo),e(A,nb),e(nb,qte),e(qte,VFo),e(nb,zFo),e(nb,OI),e(OI,WFo),e(nb,QFo),e(A,HFo),e(A,sb),e(sb,Ote),e(Ote,UFo),e(sb,JFo),e(sb,GI),e(GI,YFo),e(sb,KFo),e(A,ZFo),e(A,lb),e(lb,Gte),e(Gte,eCo),e(lb,oCo),e(lb,XI),e(XI,rCo),e(lb,tCo),e(A,aCo),e(A,ib),e(ib,Xte),e(Xte,nCo),e(ib,sCo),e(ib,VI),e(VI,lCo),e(ib,iCo),e(A,dCo),e(A,db),e(db,Vte),e(Vte,cCo),e(db,fCo),e(db,zI),e(zI,mCo),e(db,gCo),e(A,hCo),e(A,cb),e(cb,zte),e(zte,pCo),e(cb,_Co),e(cb,WI),e(WI,uCo),e(cb,bCo),e(A,vCo),e(A,fb),e(fb,Wte),e(Wte,TCo),e(fb,FCo),e(fb,QI),e(QI,CCo),e(fb,MCo),e(A,ECo),e(A,mb),e(mb,Qte),e(Qte,yCo),e(mb,wCo),e(mb,HI),e(HI,ACo),e(mb,LCo),e(A,BCo),e(A,gb),e(gb,Hte),e(Hte,xCo),e(gb,kCo),e(gb,UI),e(UI,RCo),e(gb,SCo),e(A,PCo),e(A,hb),e(hb,Ute),e(Ute,$Co),e(hb,ICo),e(hb,JI),e(JI,jCo),e(hb,DCo),e(A,NCo),e(A,pb),e(pb,Jte),e(Jte,qCo),e(pb,OCo),e(pb,YI),e(YI,GCo),e(pb,XCo),e(A,VCo),e(A,_b),e(_b,Yte),e(Yte,zCo),e(_b,WCo),e(_b,KI),e(KI,QCo),e(_b,HCo),e(A,UCo),e(A,ub),e(ub,Kte),e(Kte,JCo),e(ub,YCo),e(ub,ZI),e(ZI,KCo),e(ub,ZCo),e(A,eMo),e(A,bb),e(bb,Zte),e(Zte,oMo),e(bb,rMo),e(bb,ej),e(ej,tMo),e(bb,aMo),e(A,nMo),e(A,vb),e(vb,eae),e(eae,sMo),e(vb,lMo),e(vb,oj),e(oj,iMo),e(vb,dMo),e(A,cMo),e(A,Tb),e(Tb,oae),e(oae,fMo),e(Tb,mMo),e(Tb,rj),e(rj,gMo),e(Tb,hMo),e(A,pMo),e(A,Fb),e(Fb,rae),e(rae,_Mo),e(Fb,uMo),e(Fb,tj),e(tj,bMo),e(Fb,vMo),e(A,TMo),e(A,Cb),e(Cb,tae),e(tae,FMo),e(Cb,CMo),e(Cb,aj),e(aj,MMo),e(Cb,EMo),e(A,yMo),e(A,Mb),e(Mb,aae),e(aae,wMo),e(Mb,AMo),e(Mb,nj),e(nj,LMo),e(Mb,BMo),e(A,xMo),e(A,Eb),e(Eb,nae),e(nae,kMo),e(Eb,RMo),e(Eb,sj),e(sj,SMo),e(Eb,PMo),e(A,$Mo),e(A,yb),e(yb,sae),e(sae,IMo),e(yb,jMo),e(yb,lj),e(lj,DMo),e(yb,NMo),e(A,qMo),e(A,wb),e(wb,lae),e(lae,OMo),e(wb,GMo),e(wb,ij),e(ij,XMo),e(wb,VMo),e(A,zMo),e(A,Ab),e(Ab,iae),e(iae,WMo),e(Ab,QMo),e(Ab,dj),e(dj,HMo),e(Ab,UMo),e(A,JMo),e(A,Lb),e(Lb,dae),e(dae,YMo),e(Lb,KMo),e(Lb,cj),e(cj,ZMo),e(Lb,e4o),e(A,o4o),e(A,Bb),e(Bb,cae),e(cae,r4o),e(Bb,t4o),e(Bb,fj),e(fj,a4o),e(Bb,n4o),e(A,s4o),e(A,xb),e(xb,fae),e(fae,l4o),e(xb,i4o),e(xb,mj),e(mj,d4o),e(xb,c4o),e(A,f4o),e(A,kb),e(kb,mae),e(mae,m4o),e(kb,g4o),e(kb,gj),e(gj,h4o),e(kb,p4o),e(A,_4o),e(A,Rb),e(Rb,gae),e(gae,u4o),e(Rb,b4o),e(Rb,hj),e(hj,v4o),e(Rb,T4o),e(A,F4o),e(A,Sb),e(Sb,hae),e(hae,C4o),e(Sb,M4o),e(Sb,pj),e(pj,E4o),e(Sb,y4o),e(A,w4o),e(A,Pb),e(Pb,pae),e(pae,A4o),e(Pb,L4o),e(Pb,_j),e(_j,B4o),e(Pb,x4o),e(A,k4o),e(A,$b),e($b,_ae),e(_ae,R4o),e($b,S4o),e($b,uj),e(uj,P4o),e($b,$4o),e(A,I4o),e(A,Ib),e(Ib,uae),e(uae,j4o),e(Ib,D4o),e(Ib,bj),e(bj,N4o),e(Ib,q4o),e(A,O4o),e(A,jb),e(jb,bae),e(bae,G4o),e(jb,X4o),e(jb,vj),e(vj,V4o),e(jb,z4o),e(A,W4o),e(A,Db),e(Db,vae),e(vae,Q4o),e(Db,H4o),e(Db,Tj),e(Tj,U4o),e(Db,J4o),e(A,Y4o),e(A,Nb),e(Nb,Tae),e(Tae,K4o),e(Nb,Z4o),e(Nb,Fj),e(Fj,eEo),e(Nb,oEo),e(A,rEo),e(A,qb),e(qb,Fae),e(Fae,tEo),e(qb,aEo),e(qb,Cj),e(Cj,nEo),e(qb,sEo),e(A,lEo),e(A,Ob),e(Ob,Cae),e(Cae,iEo),e(Ob,dEo),e(Ob,Mj),e(Mj,cEo),e(Ob,fEo),e(A,mEo),e(A,Gb),e(Gb,Mae),e(Mae,gEo),e(Gb,hEo),e(Gb,Ej),e(Ej,pEo),e(Gb,_Eo),e(A,uEo),e(A,Xb),e(Xb,Eae),e(Eae,bEo),e(Xb,vEo),e(Xb,yj),e(yj,TEo),e(Xb,FEo),e(A,CEo),e(A,Vb),e(Vb,yae),e(yae,MEo),e(Vb,EEo),e(Vb,wj),e(wj,yEo),e(Vb,wEo),e(Ge,AEo),e(Ge,zb),e(zb,LEo),e(zb,wae),e(wae,BEo),e(zb,xEo),e(zb,Aae),e(Aae,kEo),e(Ge,REo),e(Ge,Lae),e(Lae,SEo),e(Ge,PEo),g(wE,Ge,null),b(d,gke,u),b(d,Cd,u),e(Cd,Wb),e(Wb,Bae),g(AE,Bae,null),e(Cd,$Eo),e(Cd,xae),e(xae,IEo),b(d,hke,u),b(d,tr,u),g(LE,tr,null),e(tr,jEo),e(tr,Md),e(Md,DEo),e(Md,kae),e(kae,NEo),e(Md,qEo),e(Md,Rae),e(Rae,OEo),e(Md,GEo),e(tr,XEo),e(tr,BE),e(BE,VEo),e(BE,Sae),e(Sae,zEo),e(BE,WEo),e(tr,QEo),e(tr,Kr),g(xE,Kr,null),e(Kr,HEo),e(Kr,Pae),e(Pae,UEo),e(Kr,JEo),e(Kr,Ed),e(Ed,YEo),e(Ed,$ae),e($ae,KEo),e(Ed,ZEo),e(Ed,Iae),e(Iae,e3o),e(Ed,o3o),e(Kr,r3o),e(Kr,jae),e(jae,t3o),e(Kr,a3o),g(kE,Kr,null),e(tr,n3o),e(tr,Xe),g(RE,Xe,null),e(Xe,s3o),e(Xe,Dae),e(Dae,l3o),e(Xe,i3o),e(Xe,en),e(en,d3o),e(en,Nae),e(Nae,c3o),e(en,f3o),e(en,qae),e(qae,m3o),e(en,g3o),e(en,Oae),e(Oae,h3o),e(en,p3o),e(Xe,_3o),e(Xe,O),e(O,Qb),e(Qb,Gae),e(Gae,u3o),e(Qb,b3o),e(Qb,Aj),e(Aj,v3o),e(Qb,T3o),e(O,F3o),e(O,Hb),e(Hb,Xae),e(Xae,C3o),e(Hb,M3o),e(Hb,Lj),e(Lj,E3o),e(Hb,y3o),e(O,w3o),e(O,Ub),e(Ub,Vae),e(Vae,A3o),e(Ub,L3o),e(Ub,Bj),e(Bj,B3o),e(Ub,x3o),e(O,k3o),e(O,Jb),e(Jb,zae),e(zae,R3o),e(Jb,S3o),e(Jb,xj),e(xj,P3o),e(Jb,$3o),e(O,I3o),e(O,Yb),e(Yb,Wae),e(Wae,j3o),e(Yb,D3o),e(Yb,kj),e(kj,N3o),e(Yb,q3o),e(O,O3o),e(O,Kb),e(Kb,Qae),e(Qae,G3o),e(Kb,X3o),e(Kb,Rj),e(Rj,V3o),e(Kb,z3o),e(O,W3o),e(O,Zb),e(Zb,Hae),e(Hae,Q3o),e(Zb,H3o),e(Zb,Sj),e(Sj,U3o),e(Zb,J3o),e(O,Y3o),e(O,e5),e(e5,Uae),e(Uae,K3o),e(e5,Z3o),e(e5,Pj),e(Pj,eyo),e(e5,oyo),e(O,ryo),e(O,o5),e(o5,Jae),e(Jae,tyo),e(o5,ayo),e(o5,$j),e($j,nyo),e(o5,syo),e(O,lyo),e(O,r5),e(r5,Yae),e(Yae,iyo),e(r5,dyo),e(r5,Ij),e(Ij,cyo),e(r5,fyo),e(O,myo),e(O,t5),e(t5,Kae),e(Kae,gyo),e(t5,hyo),e(t5,jj),e(jj,pyo),e(t5,_yo),e(O,uyo),e(O,a5),e(a5,Zae),e(Zae,byo),e(a5,vyo),e(a5,Dj),e(Dj,Tyo),e(a5,Fyo),e(O,Cyo),e(O,n5),e(n5,ene),e(ene,Myo),e(n5,Eyo),e(n5,Nj),e(Nj,yyo),e(n5,wyo),e(O,Ayo),e(O,s5),e(s5,one),e(one,Lyo),e(s5,Byo),e(s5,qj),e(qj,xyo),e(s5,kyo),e(O,Ryo),e(O,l5),e(l5,rne),e(rne,Syo),e(l5,Pyo),e(l5,Oj),e(Oj,$yo),e(l5,Iyo),e(O,jyo),e(O,i5),e(i5,tne),e(tne,Dyo),e(i5,Nyo),e(i5,Gj),e(Gj,qyo),e(i5,Oyo),e(O,Gyo),e(O,d5),e(d5,ane),e(ane,Xyo),e(d5,Vyo),e(d5,Xj),e(Xj,zyo),e(d5,Wyo),e(O,Qyo),e(O,c5),e(c5,nne),e(nne,Hyo),e(c5,Uyo),e(c5,Vj),e(Vj,Jyo),e(c5,Yyo),e(O,Kyo),e(O,f5),e(f5,sne),e(sne,Zyo),e(f5,ewo),e(f5,zj),e(zj,owo),e(f5,rwo),e(O,two),e(O,m5),e(m5,lne),e(lne,awo),e(m5,nwo),e(m5,Wj),e(Wj,swo),e(m5,lwo),e(O,iwo),e(O,g5),e(g5,ine),e(ine,dwo),e(g5,cwo),e(g5,Qj),e(Qj,fwo),e(g5,mwo),e(O,gwo),e(O,h5),e(h5,dne),e(dne,hwo),e(h5,pwo),e(h5,Hj),e(Hj,_wo),e(h5,uwo),e(O,bwo),e(O,p5),e(p5,cne),e(cne,vwo),e(p5,Two),e(p5,Uj),e(Uj,Fwo),e(p5,Cwo),e(O,Mwo),e(O,_5),e(_5,fne),e(fne,Ewo),e(_5,ywo),e(_5,Jj),e(Jj,wwo),e(_5,Awo),e(O,Lwo),e(O,u5),e(u5,mne),e(mne,Bwo),e(u5,xwo),e(u5,Yj),e(Yj,kwo),e(u5,Rwo),e(O,Swo),e(O,b5),e(b5,gne),e(gne,Pwo),e(b5,$wo),e(b5,Kj),e(Kj,Iwo),e(b5,jwo),e(O,Dwo),e(O,v5),e(v5,hne),e(hne,Nwo),e(v5,qwo),e(v5,Zj),e(Zj,Owo),e(v5,Gwo),e(O,Xwo),e(O,T5),e(T5,pne),e(pne,Vwo),e(T5,zwo),e(T5,eD),e(eD,Wwo),e(T5,Qwo),e(Xe,Hwo),e(Xe,F5),e(F5,Uwo),e(F5,_ne),e(_ne,Jwo),e(F5,Ywo),e(F5,une),e(une,Kwo),e(Xe,Zwo),e(Xe,bne),e(bne,eAo),e(Xe,oAo),g(SE,Xe,null),b(d,pke,u),b(d,yd,u),e(yd,C5),e(C5,vne),g(PE,vne,null),e(yd,rAo),e(yd,Tne),e(Tne,tAo),b(d,_ke,u),b(d,ar,u),g($E,ar,null),e(ar,aAo),e(ar,wd),e(wd,nAo),e(wd,Fne),e(Fne,sAo),e(wd,lAo),e(wd,Cne),e(Cne,iAo),e(wd,dAo),e(ar,cAo),e(ar,IE),e(IE,fAo),e(IE,Mne),e(Mne,mAo),e(IE,gAo),e(ar,hAo),e(ar,Zr),g(jE,Zr,null),e(Zr,pAo),e(Zr,Ene),e(Ene,_Ao),e(Zr,uAo),e(Zr,Ad),e(Ad,bAo),e(Ad,yne),e(yne,vAo),e(Ad,TAo),e(Ad,wne),e(wne,FAo),e(Ad,CAo),e(Zr,MAo),e(Zr,Ane),e(Ane,EAo),e(Zr,yAo),g(DE,Zr,null),e(ar,wAo),e(ar,Ve),g(NE,Ve,null),e(Ve,AAo),e(Ve,Lne),e(Lne,LAo),e(Ve,BAo),e(Ve,on),e(on,xAo),e(on,Bne),e(Bne,kAo),e(on,RAo),e(on,xne),e(xne,SAo),e(on,PAo),e(on,kne),e(kne,$Ao),e(on,IAo),e(Ve,jAo),e(Ve,ma),e(ma,M5),e(M5,Rne),e(Rne,DAo),e(M5,NAo),e(M5,oD),e(oD,qAo),e(M5,OAo),e(ma,GAo),e(ma,E5),e(E5,Sne),e(Sne,XAo),e(E5,VAo),e(E5,rD),e(rD,zAo),e(E5,WAo),e(ma,QAo),e(ma,y5),e(y5,Pne),e(Pne,HAo),e(y5,UAo),e(y5,tD),e(tD,JAo),e(y5,YAo),e(ma,KAo),e(ma,w5),e(w5,$ne),e($ne,ZAo),e(w5,eLo),e(w5,aD),e(aD,oLo),e(w5,rLo),e(ma,tLo),e(ma,A5),e(A5,Ine),e(Ine,aLo),e(A5,nLo),e(A5,nD),e(nD,sLo),e(A5,lLo),e(Ve,iLo),e(Ve,L5),e(L5,dLo),e(L5,jne),e(jne,cLo),e(L5,fLo),e(L5,Dne),e(Dne,mLo),e(Ve,gLo),e(Ve,Nne),e(Nne,hLo),e(Ve,pLo),g(qE,Ve,null),b(d,uke,u),b(d,Ld,u),e(Ld,B5),e(B5,qne),g(OE,qne,null),e(Ld,_Lo),e(Ld,One),e(One,uLo),b(d,bke,u),b(d,nr,u),g(GE,nr,null),e(nr,bLo),e(nr,Bd),e(Bd,vLo),e(Bd,Gne),e(Gne,TLo),e(Bd,FLo),e(Bd,Xne),e(Xne,CLo),e(Bd,MLo),e(nr,ELo),e(nr,XE),e(XE,yLo),e(XE,Vne),e(Vne,wLo),e(XE,ALo),e(nr,LLo),e(nr,et),g(VE,et,null),e(et,BLo),e(et,zne),e(zne,xLo),e(et,kLo),e(et,xd),e(xd,RLo),e(xd,Wne),e(Wne,SLo),e(xd,PLo),e(xd,Qne),e(Qne,$Lo),e(xd,ILo),e(et,jLo),e(et,Hne),e(Hne,DLo),e(et,NLo),g(zE,et,null),e(nr,qLo),e(nr,ze),g(WE,ze,null),e(ze,OLo),e(ze,Une),e(Une,GLo),e(ze,XLo),e(ze,rn),e(rn,VLo),e(rn,Jne),e(Jne,zLo),e(rn,WLo),e(rn,Yne),e(Yne,QLo),e(rn,HLo),e(rn,Kne),e(Kne,ULo),e(rn,JLo),e(ze,YLo),e(ze,N),e(N,x5),e(x5,Zne),e(Zne,KLo),e(x5,ZLo),e(x5,sD),e(sD,e7o),e(x5,o7o),e(N,r7o),e(N,k5),e(k5,ese),e(ese,t7o),e(k5,a7o),e(k5,lD),e(lD,n7o),e(k5,s7o),e(N,l7o),e(N,R5),e(R5,ose),e(ose,i7o),e(R5,d7o),e(R5,iD),e(iD,c7o),e(R5,f7o),e(N,m7o),e(N,S5),e(S5,rse),e(rse,g7o),e(S5,h7o),e(S5,dD),e(dD,p7o),e(S5,_7o),e(N,u7o),e(N,P5),e(P5,tse),e(tse,b7o),e(P5,v7o),e(P5,cD),e(cD,T7o),e(P5,F7o),e(N,C7o),e(N,$5),e($5,ase),e(ase,M7o),e($5,E7o),e($5,fD),e(fD,y7o),e($5,w7o),e(N,A7o),e(N,I5),e(I5,nse),e(nse,L7o),e(I5,B7o),e(I5,mD),e(mD,x7o),e(I5,k7o),e(N,R7o),e(N,j5),e(j5,sse),e(sse,S7o),e(j5,P7o),e(j5,gD),e(gD,$7o),e(j5,I7o),e(N,j7o),e(N,D5),e(D5,lse),e(lse,D7o),e(D5,N7o),e(D5,hD),e(hD,q7o),e(D5,O7o),e(N,G7o),e(N,N5),e(N5,ise),e(ise,X7o),e(N5,V7o),e(N5,pD),e(pD,z7o),e(N5,W7o),e(N,Q7o),e(N,q5),e(q5,dse),e(dse,H7o),e(q5,U7o),e(q5,_D),e(_D,J7o),e(q5,Y7o),e(N,K7o),e(N,O5),e(O5,cse),e(cse,Z7o),e(O5,e9o),e(O5,uD),e(uD,o9o),e(O5,r9o),e(N,t9o),e(N,G5),e(G5,fse),e(fse,a9o),e(G5,n9o),e(G5,bD),e(bD,s9o),e(G5,l9o),e(N,i9o),e(N,X5),e(X5,mse),e(mse,d9o),e(X5,c9o),e(X5,vD),e(vD,f9o),e(X5,m9o),e(N,g9o),e(N,V5),e(V5,gse),e(gse,h9o),e(V5,p9o),e(V5,TD),e(TD,_9o),e(V5,u9o),e(N,b9o),e(N,z5),e(z5,hse),e(hse,v9o),e(z5,T9o),e(z5,FD),e(FD,F9o),e(z5,C9o),e(N,M9o),e(N,W5),e(W5,pse),e(pse,E9o),e(W5,y9o),e(W5,CD),e(CD,w9o),e(W5,A9o),e(N,L9o),e(N,Q5),e(Q5,_se),e(_se,B9o),e(Q5,x9o),e(Q5,MD),e(MD,k9o),e(Q5,R9o),e(N,S9o),e(N,H5),e(H5,use),e(use,P9o),e(H5,$9o),e(H5,ED),e(ED,I9o),e(H5,j9o),e(N,D9o),e(N,U5),e(U5,bse),e(bse,N9o),e(U5,q9o),e(U5,yD),e(yD,O9o),e(U5,G9o),e(N,X9o),e(N,J5),e(J5,vse),e(vse,V9o),e(J5,z9o),e(J5,wD),e(wD,W9o),e(J5,Q9o),e(N,H9o),e(N,Y5),e(Y5,Tse),e(Tse,U9o),e(Y5,J9o),e(Y5,AD),e(AD,Y9o),e(Y5,K9o),e(N,Z9o),e(N,K5),e(K5,Fse),e(Fse,eBo),e(K5,oBo),e(K5,LD),e(LD,rBo),e(K5,tBo),e(N,aBo),e(N,Z5),e(Z5,Cse),e(Cse,nBo),e(Z5,sBo),e(Z5,BD),e(BD,lBo),e(Z5,iBo),e(N,dBo),e(N,e2),e(e2,Mse),e(Mse,cBo),e(e2,fBo),e(e2,xD),e(xD,mBo),e(e2,gBo),e(N,hBo),e(N,o2),e(o2,Ese),e(Ese,pBo),e(o2,_Bo),e(o2,kD),e(kD,uBo),e(o2,bBo),e(N,vBo),e(N,r2),e(r2,yse),e(yse,TBo),e(r2,FBo),e(r2,RD),e(RD,CBo),e(r2,MBo),e(N,EBo),e(N,t2),e(t2,wse),e(wse,yBo),e(t2,wBo),e(t2,SD),e(SD,ABo),e(t2,LBo),e(N,BBo),e(N,a2),e(a2,Ase),e(Ase,xBo),e(a2,kBo),e(a2,PD),e(PD,RBo),e(a2,SBo),e(N,PBo),e(N,n2),e(n2,Lse),e(Lse,$Bo),e(n2,IBo),e(n2,$D),e($D,jBo),e(n2,DBo),e(N,NBo),e(N,s2),e(s2,Bse),e(Bse,qBo),e(s2,OBo),e(s2,ID),e(ID,GBo),e(s2,XBo),e(N,VBo),e(N,l2),e(l2,xse),e(xse,zBo),e(l2,WBo),e(l2,jD),e(jD,QBo),e(l2,HBo),e(N,UBo),e(N,i2),e(i2,kse),e(kse,JBo),e(i2,YBo),e(i2,DD),e(DD,KBo),e(i2,ZBo),e(ze,exo),e(ze,d2),e(d2,oxo),e(d2,Rse),e(Rse,rxo),e(d2,txo),e(d2,Sse),e(Sse,axo),e(ze,nxo),e(ze,Pse),e(Pse,sxo),e(ze,lxo),g(QE,ze,null),b(d,vke,u),b(d,kd,u),e(kd,c2),e(c2,$se),g(HE,$se,null),e(kd,ixo),e(kd,Ise),e(Ise,dxo),b(d,Tke,u),b(d,sr,u),g(UE,sr,null),e(sr,cxo),e(sr,Rd),e(Rd,fxo),e(Rd,jse),e(jse,mxo),e(Rd,gxo),e(Rd,Dse),e(Dse,hxo),e(Rd,pxo),e(sr,_xo),e(sr,JE),e(JE,uxo),e(JE,Nse),e(Nse,bxo),e(JE,vxo),e(sr,Txo),e(sr,ot),g(YE,ot,null),e(ot,Fxo),e(ot,qse),e(qse,Cxo),e(ot,Mxo),e(ot,Sd),e(Sd,Exo),e(Sd,Ose),e(Ose,yxo),e(Sd,wxo),e(Sd,Gse),e(Gse,Axo),e(Sd,Lxo),e(ot,Bxo),e(ot,Xse),e(Xse,xxo),e(ot,kxo),g(KE,ot,null),e(sr,Rxo),e(sr,We),g(ZE,We,null),e(We,Sxo),e(We,Vse),e(Vse,Pxo),e(We,$xo),e(We,tn),e(tn,Ixo),e(tn,zse),e(zse,jxo),e(tn,Dxo),e(tn,Wse),e(Wse,Nxo),e(tn,qxo),e(tn,Qse),e(Qse,Oxo),e(tn,Gxo),e(We,Xxo),e(We,R),e(R,f2),e(f2,Hse),e(Hse,Vxo),e(f2,zxo),e(f2,ND),e(ND,Wxo),e(f2,Qxo),e(R,Hxo),e(R,m2),e(m2,Use),e(Use,Uxo),e(m2,Jxo),e(m2,qD),e(qD,Yxo),e(m2,Kxo),e(R,Zxo),e(R,g2),e(g2,Jse),e(Jse,eko),e(g2,oko),e(g2,OD),e(OD,rko),e(g2,tko),e(R,ako),e(R,h2),e(h2,Yse),e(Yse,nko),e(h2,sko),e(h2,GD),e(GD,lko),e(h2,iko),e(R,dko),e(R,p2),e(p2,Kse),e(Kse,cko),e(p2,fko),e(p2,XD),e(XD,mko),e(p2,gko),e(R,hko),e(R,_2),e(_2,Zse),e(Zse,pko),e(_2,_ko),e(_2,VD),e(VD,uko),e(_2,bko),e(R,vko),e(R,u2),e(u2,ele),e(ele,Tko),e(u2,Fko),e(u2,zD),e(zD,Cko),e(u2,Mko),e(R,Eko),e(R,b2),e(b2,ole),e(ole,yko),e(b2,wko),e(b2,WD),e(WD,Ako),e(b2,Lko),e(R,Bko),e(R,v2),e(v2,rle),e(rle,xko),e(v2,kko),e(v2,QD),e(QD,Rko),e(v2,Sko),e(R,Pko),e(R,T2),e(T2,tle),e(tle,$ko),e(T2,Iko),e(T2,HD),e(HD,jko),e(T2,Dko),e(R,Nko),e(R,F2),e(F2,ale),e(ale,qko),e(F2,Oko),e(F2,UD),e(UD,Gko),e(F2,Xko),e(R,Vko),e(R,C2),e(C2,nle),e(nle,zko),e(C2,Wko),e(C2,JD),e(JD,Qko),e(C2,Hko),e(R,Uko),e(R,M2),e(M2,sle),e(sle,Jko),e(M2,Yko),e(M2,YD),e(YD,Kko),e(M2,Zko),e(R,eRo),e(R,E2),e(E2,lle),e(lle,oRo),e(E2,rRo),e(E2,KD),e(KD,tRo),e(E2,aRo),e(R,nRo),e(R,y2),e(y2,ile),e(ile,sRo),e(y2,lRo),e(y2,ZD),e(ZD,iRo),e(y2,dRo),e(R,cRo),e(R,w2),e(w2,dle),e(dle,fRo),e(w2,mRo),e(w2,eN),e(eN,gRo),e(w2,hRo),e(R,pRo),e(R,A2),e(A2,cle),e(cle,_Ro),e(A2,uRo),e(A2,oN),e(oN,bRo),e(A2,vRo),e(R,TRo),e(R,L2),e(L2,fle),e(fle,FRo),e(L2,CRo),e(L2,rN),e(rN,MRo),e(L2,ERo),e(R,yRo),e(R,B2),e(B2,mle),e(mle,wRo),e(B2,ARo),e(B2,tN),e(tN,LRo),e(B2,BRo),e(R,xRo),e(R,x2),e(x2,gle),e(gle,kRo),e(x2,RRo),e(x2,aN),e(aN,SRo),e(x2,PRo),e(R,$Ro),e(R,k2),e(k2,hle),e(hle,IRo),e(k2,jRo),e(k2,nN),e(nN,DRo),e(k2,NRo),e(R,qRo),e(R,R2),e(R2,ple),e(ple,ORo),e(R2,GRo),e(R2,sN),e(sN,XRo),e(R2,VRo),e(R,zRo),e(R,S2),e(S2,_le),e(_le,WRo),e(S2,QRo),e(S2,lN),e(lN,HRo),e(S2,URo),e(R,JRo),e(R,P2),e(P2,ule),e(ule,YRo),e(P2,KRo),e(P2,iN),e(iN,ZRo),e(P2,eSo),e(R,oSo),e(R,$2),e($2,ble),e(ble,rSo),e($2,tSo),e($2,dN),e(dN,aSo),e($2,nSo),e(R,sSo),e(R,I2),e(I2,vle),e(vle,lSo),e(I2,iSo),e(I2,cN),e(cN,dSo),e(I2,cSo),e(R,fSo),e(R,j2),e(j2,Tle),e(Tle,mSo),e(j2,gSo),e(j2,fN),e(fN,hSo),e(j2,pSo),e(R,_So),e(R,D2),e(D2,Fle),e(Fle,uSo),e(D2,bSo),e(D2,mN),e(mN,vSo),e(D2,TSo),e(R,FSo),e(R,N2),e(N2,Cle),e(Cle,CSo),e(N2,MSo),e(N2,gN),e(gN,ESo),e(N2,ySo),e(R,wSo),e(R,q2),e(q2,Mle),e(Mle,ASo),e(q2,LSo),e(q2,hN),e(hN,BSo),e(q2,xSo),e(R,kSo),e(R,O2),e(O2,Ele),e(Ele,RSo),e(O2,SSo),e(O2,pN),e(pN,PSo),e(O2,$So),e(R,ISo),e(R,G2),e(G2,yle),e(yle,jSo),e(G2,DSo),e(G2,_N),e(_N,NSo),e(G2,qSo),e(R,OSo),e(R,X2),e(X2,wle),e(wle,GSo),e(X2,XSo),e(X2,uN),e(uN,VSo),e(X2,zSo),e(R,WSo),e(R,V2),e(V2,Ale),e(Ale,QSo),e(V2,HSo),e(V2,bN),e(bN,USo),e(V2,JSo),e(R,YSo),e(R,z2),e(z2,Lle),e(Lle,KSo),e(z2,ZSo),e(z2,vN),e(vN,ePo),e(z2,oPo),e(R,rPo),e(R,W2),e(W2,Ble),e(Ble,tPo),e(W2,aPo),e(W2,TN),e(TN,nPo),e(W2,sPo),e(R,lPo),e(R,Q2),e(Q2,xle),e(xle,iPo),e(Q2,dPo),e(Q2,FN),e(FN,cPo),e(Q2,fPo),e(R,mPo),e(R,H2),e(H2,kle),e(kle,gPo),e(H2,hPo),e(H2,CN),e(CN,pPo),e(H2,_Po),e(R,uPo),e(R,U2),e(U2,Rle),e(Rle,bPo),e(U2,vPo),e(U2,MN),e(MN,TPo),e(U2,FPo),e(We,CPo),e(We,J2),e(J2,MPo),e(J2,Sle),e(Sle,EPo),e(J2,yPo),e(J2,Ple),e(Ple,wPo),e(We,APo),e(We,$le),e($le,LPo),e(We,BPo),g(e3,We,null),b(d,Fke,u),b(d,Pd,u),e(Pd,Y2),e(Y2,Ile),g(o3,Ile,null),e(Pd,xPo),e(Pd,jle),e(jle,kPo),b(d,Cke,u),b(d,lr,u),g(r3,lr,null),e(lr,RPo),e(lr,$d),e($d,SPo),e($d,Dle),e(Dle,PPo),e($d,$Po),e($d,Nle),e(Nle,IPo),e($d,jPo),e(lr,DPo),e(lr,t3),e(t3,NPo),e(t3,qle),e(qle,qPo),e(t3,OPo),e(lr,GPo),e(lr,rt),g(a3,rt,null),e(rt,XPo),e(rt,Ole),e(Ole,VPo),e(rt,zPo),e(rt,Id),e(Id,WPo),e(Id,Gle),e(Gle,QPo),e(Id,HPo),e(Id,Xle),e(Xle,UPo),e(Id,JPo),e(rt,YPo),e(rt,Vle),e(Vle,KPo),e(rt,ZPo),g(n3,rt,null),e(lr,e$o),e(lr,Qe),g(s3,Qe,null),e(Qe,o$o),e(Qe,zle),e(zle,r$o),e(Qe,t$o),e(Qe,an),e(an,a$o),e(an,Wle),e(Wle,n$o),e(an,s$o),e(an,Qle),e(Qle,l$o),e(an,i$o),e(an,Hle),e(Hle,d$o),e(an,c$o),e(Qe,f$o),e(Qe,Ule),e(Ule,K2),e(K2,Jle),e(Jle,m$o),e(K2,g$o),e(K2,EN),e(EN,h$o),e(K2,p$o),e(Qe,_$o),e(Qe,Z2),e(Z2,u$o),e(Z2,Yle),e(Yle,b$o),e(Z2,v$o),e(Z2,Kle),e(Kle,T$o),e(Qe,F$o),e(Qe,Zle),e(Zle,C$o),e(Qe,M$o),g(l3,Qe,null),b(d,Mke,u),b(d,jd,u),e(jd,ev),e(ev,eie),g(i3,eie,null),e(jd,E$o),e(jd,oie),e(oie,y$o),b(d,Eke,u),b(d,ir,u),g(d3,ir,null),e(ir,w$o),e(ir,Dd),e(Dd,A$o),e(Dd,rie),e(rie,L$o),e(Dd,B$o),e(Dd,tie),e(tie,x$o),e(Dd,k$o),e(ir,R$o),e(ir,c3),e(c3,S$o),e(c3,aie),e(aie,P$o),e(c3,$$o),e(ir,I$o),e(ir,tt),g(f3,tt,null),e(tt,j$o),e(tt,nie),e(nie,D$o),e(tt,N$o),e(tt,Nd),e(Nd,q$o),e(Nd,sie),e(sie,O$o),e(Nd,G$o),e(Nd,lie),e(lie,X$o),e(Nd,V$o),e(tt,z$o),e(tt,iie),e(iie,W$o),e(tt,Q$o),g(m3,tt,null),e(ir,H$o),e(ir,He),g(g3,He,null),e(He,U$o),e(He,die),e(die,J$o),e(He,Y$o),e(He,nn),e(nn,K$o),e(nn,cie),e(cie,Z$o),e(nn,eIo),e(nn,fie),e(fie,oIo),e(nn,rIo),e(nn,mie),e(mie,tIo),e(nn,aIo),e(He,nIo),e(He,Fe),e(Fe,ov),e(ov,gie),e(gie,sIo),e(ov,lIo),e(ov,yN),e(yN,iIo),e(ov,dIo),e(Fe,cIo),e(Fe,rv),e(rv,hie),e(hie,fIo),e(rv,mIo),e(rv,wN),e(wN,gIo),e(rv,hIo),e(Fe,pIo),e(Fe,zs),e(zs,pie),e(pie,_Io),e(zs,uIo),e(zs,AN),e(AN,bIo),e(zs,vIo),e(zs,LN),e(LN,TIo),e(zs,FIo),e(Fe,CIo),e(Fe,tv),e(tv,_ie),e(_ie,MIo),e(tv,EIo),e(tv,BN),e(BN,yIo),e(tv,wIo),e(Fe,AIo),e(Fe,pa),e(pa,uie),e(uie,LIo),e(pa,BIo),e(pa,xN),e(xN,xIo),e(pa,kIo),e(pa,kN),e(kN,RIo),e(pa,SIo),e(pa,RN),e(RN,PIo),e(pa,$Io),e(Fe,IIo),e(Fe,av),e(av,bie),e(bie,jIo),e(av,DIo),e(av,SN),e(SN,NIo),e(av,qIo),e(Fe,OIo),e(Fe,nv),e(nv,vie),e(vie,GIo),e(nv,XIo),e(nv,PN),e(PN,VIo),e(nv,zIo),e(Fe,WIo),e(Fe,sv),e(sv,Tie),e(Tie,QIo),e(sv,HIo),e(sv,$N),e($N,UIo),e(sv,JIo),e(Fe,YIo),e(Fe,lv),e(lv,Fie),e(Fie,KIo),e(lv,ZIo),e(lv,IN),e(IN,ejo),e(lv,ojo),e(He,rjo),e(He,iv),e(iv,tjo),e(iv,Cie),e(Cie,ajo),e(iv,njo),e(iv,Mie),e(Mie,sjo),e(He,ljo),e(He,Eie),e(Eie,ijo),e(He,djo),g(h3,He,null),b(d,yke,u),b(d,qd,u),e(qd,dv),e(dv,yie),g(p3,yie,null),e(qd,cjo),e(qd,wie),e(wie,fjo),b(d,wke,u),b(d,dr,u),g(_3,dr,null),e(dr,mjo),e(dr,Od),e(Od,gjo),e(Od,Aie),e(Aie,hjo),e(Od,pjo),e(Od,Lie),e(Lie,_jo),e(Od,ujo),e(dr,bjo),e(dr,u3),e(u3,vjo),e(u3,Bie),e(Bie,Tjo),e(u3,Fjo),e(dr,Cjo),e(dr,at),g(b3,at,null),e(at,Mjo),e(at,xie),e(xie,Ejo),e(at,yjo),e(at,Gd),e(Gd,wjo),e(Gd,kie),e(kie,Ajo),e(Gd,Ljo),e(Gd,Rie),e(Rie,Bjo),e(Gd,xjo),e(at,kjo),e(at,Sie),e(Sie,Rjo),e(at,Sjo),g(v3,at,null),e(dr,Pjo),e(dr,Ue),g(T3,Ue,null),e(Ue,$jo),e(Ue,Pie),e(Pie,Ijo),e(Ue,jjo),e(Ue,sn),e(sn,Djo),e(sn,$ie),e($ie,Njo),e(sn,qjo),e(sn,Iie),e(Iie,Ojo),e(sn,Gjo),e(sn,jie),e(jie,Xjo),e(sn,Vjo),e(Ue,zjo),e(Ue,Die),e(Die,cv),e(cv,Nie),e(Nie,Wjo),e(cv,Qjo),e(cv,jN),e(jN,Hjo),e(cv,Ujo),e(Ue,Jjo),e(Ue,fv),e(fv,Yjo),e(fv,qie),e(qie,Kjo),e(fv,Zjo),e(fv,Oie),e(Oie,eDo),e(Ue,oDo),e(Ue,Gie),e(Gie,rDo),e(Ue,tDo),g(F3,Ue,null),b(d,Ake,u),b(d,Xd,u),e(Xd,mv),e(mv,Xie),g(C3,Xie,null),e(Xd,aDo),e(Xd,Vie),e(Vie,nDo),b(d,Lke,u),b(d,cr,u),g(M3,cr,null),e(cr,sDo),e(cr,Vd),e(Vd,lDo),e(Vd,zie),e(zie,iDo),e(Vd,dDo),e(Vd,Wie),e(Wie,cDo),e(Vd,fDo),e(cr,mDo),e(cr,E3),e(E3,gDo),e(E3,Qie),e(Qie,hDo),e(E3,pDo),e(cr,_Do),e(cr,nt),g(y3,nt,null),e(nt,uDo),e(nt,Hie),e(Hie,bDo),e(nt,vDo),e(nt,zd),e(zd,TDo),e(zd,Uie),e(Uie,FDo),e(zd,CDo),e(zd,Jie),e(Jie,MDo),e(zd,EDo),e(nt,yDo),e(nt,Yie),e(Yie,wDo),e(nt,ADo),g(w3,nt,null),e(cr,LDo),e(cr,Je),g(A3,Je,null),e(Je,BDo),e(Je,Kie),e(Kie,xDo),e(Je,kDo),e(Je,ln),e(ln,RDo),e(ln,Zie),e(Zie,SDo),e(ln,PDo),e(ln,ede),e(ede,$Do),e(ln,IDo),e(ln,ode),e(ode,jDo),e(ln,DDo),e(Je,NDo),e(Je,xe),e(xe,gv),e(gv,rde),e(rde,qDo),e(gv,ODo),e(gv,DN),e(DN,GDo),e(gv,XDo),e(xe,VDo),e(xe,hv),e(hv,tde),e(tde,zDo),e(hv,WDo),e(hv,NN),e(NN,QDo),e(hv,HDo),e(xe,UDo),e(xe,pv),e(pv,ade),e(ade,JDo),e(pv,YDo),e(pv,qN),e(qN,KDo),e(pv,ZDo),e(xe,eNo),e(xe,_v),e(_v,nde),e(nde,oNo),e(_v,rNo),e(_v,ON),e(ON,tNo),e(_v,aNo),e(xe,nNo),e(xe,uv),e(uv,sde),e(sde,sNo),e(uv,lNo),e(uv,GN),e(GN,iNo),e(uv,dNo),e(xe,cNo),e(xe,bv),e(bv,lde),e(lde,fNo),e(bv,mNo),e(bv,XN),e(XN,gNo),e(bv,hNo),e(xe,pNo),e(xe,vv),e(vv,ide),e(ide,_No),e(vv,uNo),e(vv,VN),e(VN,bNo),e(vv,vNo),e(xe,TNo),e(xe,Tv),e(Tv,dde),e(dde,FNo),e(Tv,CNo),e(Tv,zN),e(zN,MNo),e(Tv,ENo),e(Je,yNo),e(Je,Fv),e(Fv,wNo),e(Fv,cde),e(cde,ANo),e(Fv,LNo),e(Fv,fde),e(fde,BNo),e(Je,xNo),e(Je,mde),e(mde,kNo),e(Je,RNo),g(L3,Je,null),b(d,Bke,u),b(d,Wd,u),e(Wd,Cv),e(Cv,gde),g(B3,gde,null),e(Wd,SNo),e(Wd,hde),e(hde,PNo),b(d,xke,u),b(d,fr,u),g(x3,fr,null),e(fr,$No),e(fr,Qd),e(Qd,INo),e(Qd,pde),e(pde,jNo),e(Qd,DNo),e(Qd,_de),e(_de,NNo),e(Qd,qNo),e(fr,ONo),e(fr,k3),e(k3,GNo),e(k3,ude),e(ude,XNo),e(k3,VNo),e(fr,zNo),e(fr,st),g(R3,st,null),e(st,WNo),e(st,bde),e(bde,QNo),e(st,HNo),e(st,Hd),e(Hd,UNo),e(Hd,vde),e(vde,JNo),e(Hd,YNo),e(Hd,Tde),e(Tde,KNo),e(Hd,ZNo),e(st,eqo),e(st,Fde),e(Fde,oqo),e(st,rqo),g(S3,st,null),e(fr,tqo),e(fr,Ye),g(P3,Ye,null),e(Ye,aqo),e(Ye,Cde),e(Cde,nqo),e(Ye,sqo),e(Ye,dn),e(dn,lqo),e(dn,Mde),e(Mde,iqo),e(dn,dqo),e(dn,Ede),e(Ede,cqo),e(dn,fqo),e(dn,yde),e(yde,mqo),e(dn,gqo),e(Ye,hqo),e(Ye,cn),e(cn,Mv),e(Mv,wde),e(wde,pqo),e(Mv,_qo),e(Mv,WN),e(WN,uqo),e(Mv,bqo),e(cn,vqo),e(cn,Ev),e(Ev,Ade),e(Ade,Tqo),e(Ev,Fqo),e(Ev,QN),e(QN,Cqo),e(Ev,Mqo),e(cn,Eqo),e(cn,yv),e(yv,Lde),e(Lde,yqo),e(yv,wqo),e(yv,HN),e(HN,Aqo),e(yv,Lqo),e(cn,Bqo),e(cn,wv),e(wv,Bde),e(Bde,xqo),e(wv,kqo),e(wv,UN),e(UN,Rqo),e(wv,Sqo),e(Ye,Pqo),e(Ye,Av),e(Av,$qo),e(Av,xde),e(xde,Iqo),e(Av,jqo),e(Av,kde),e(kde,Dqo),e(Ye,Nqo),e(Ye,Rde),e(Rde,qqo),e(Ye,Oqo),g($3,Ye,null),b(d,kke,u),b(d,Ud,u),e(Ud,Lv),e(Lv,Sde),g(I3,Sde,null),e(Ud,Gqo),e(Ud,Pde),e(Pde,Xqo),b(d,Rke,u),b(d,mr,u),g(j3,mr,null),e(mr,Vqo),e(mr,Jd),e(Jd,zqo),e(Jd,$de),e($de,Wqo),e(Jd,Qqo),e(Jd,Ide),e(Ide,Hqo),e(Jd,Uqo),e(mr,Jqo),e(mr,D3),e(D3,Yqo),e(D3,jde),e(jde,Kqo),e(D3,Zqo),e(mr,eOo),e(mr,lt),g(N3,lt,null),e(lt,oOo),e(lt,Dde),e(Dde,rOo),e(lt,tOo),e(lt,Yd),e(Yd,aOo),e(Yd,Nde),e(Nde,nOo),e(Yd,sOo),e(Yd,qde),e(qde,lOo),e(Yd,iOo),e(lt,dOo),e(lt,Ode),e(Ode,cOo),e(lt,fOo),g(q3,lt,null),e(mr,mOo),e(mr,Ke),g(O3,Ke,null),e(Ke,gOo),e(Ke,Gde),e(Gde,hOo),e(Ke,pOo),e(Ke,fn),e(fn,_Oo),e(fn,Xde),e(Xde,uOo),e(fn,bOo),e(fn,Vde),e(Vde,vOo),e(fn,TOo),e(fn,zde),e(zde,FOo),e(fn,COo),e(Ke,MOo),e(Ke,ke),e(ke,Bv),e(Bv,Wde),e(Wde,EOo),e(Bv,yOo),e(Bv,JN),e(JN,wOo),e(Bv,AOo),e(ke,LOo),e(ke,xv),e(xv,Qde),e(Qde,BOo),e(xv,xOo),e(xv,YN),e(YN,kOo),e(xv,ROo),e(ke,SOo),e(ke,kv),e(kv,Hde),e(Hde,POo),e(kv,$Oo),e(kv,KN),e(KN,IOo),e(kv,jOo),e(ke,DOo),e(ke,Rv),e(Rv,Ude),e(Ude,NOo),e(Rv,qOo),e(Rv,ZN),e(ZN,OOo),e(Rv,GOo),e(ke,XOo),e(ke,Sv),e(Sv,Jde),e(Jde,VOo),e(Sv,zOo),e(Sv,eq),e(eq,WOo),e(Sv,QOo),e(ke,HOo),e(ke,Pv),e(Pv,Yde),e(Yde,UOo),e(Pv,JOo),e(Pv,oq),e(oq,YOo),e(Pv,KOo),e(ke,ZOo),e(ke,$v),e($v,Kde),e(Kde,eGo),e($v,oGo),e($v,rq),e(rq,rGo),e($v,tGo),e(ke,aGo),e(ke,Iv),e(Iv,Zde),e(Zde,nGo),e(Iv,sGo),e(Iv,tq),e(tq,lGo),e(Iv,iGo),e(Ke,dGo),e(Ke,jv),e(jv,cGo),e(jv,ece),e(ece,fGo),e(jv,mGo),e(jv,oce),e(oce,gGo),e(Ke,hGo),e(Ke,rce),e(rce,pGo),e(Ke,_Go),g(G3,Ke,null),b(d,Ske,u),b(d,Kd,u),e(Kd,Dv),e(Dv,tce),g(X3,tce,null),e(Kd,uGo),e(Kd,ace),e(ace,bGo),b(d,Pke,u),b(d,gr,u),g(V3,gr,null),e(gr,vGo),e(gr,Zd),e(Zd,TGo),e(Zd,nce),e(nce,FGo),e(Zd,CGo),e(Zd,sce),e(sce,MGo),e(Zd,EGo),e(gr,yGo),e(gr,z3),e(z3,wGo),e(z3,lce),e(lce,AGo),e(z3,LGo),e(gr,BGo),e(gr,it),g(W3,it,null),e(it,xGo),e(it,ice),e(ice,kGo),e(it,RGo),e(it,ec),e(ec,SGo),e(ec,dce),e(dce,PGo),e(ec,$Go),e(ec,cce),e(cce,IGo),e(ec,jGo),e(it,DGo),e(it,fce),e(fce,NGo),e(it,qGo),g(Q3,it,null),e(gr,OGo),e(gr,Ze),g(H3,Ze,null),e(Ze,GGo),e(Ze,mce),e(mce,XGo),e(Ze,VGo),e(Ze,mn),e(mn,zGo),e(mn,gce),e(gce,WGo),e(mn,QGo),e(mn,hce),e(hce,HGo),e(mn,UGo),e(mn,pce),e(pce,JGo),e(mn,YGo),e(Ze,KGo),e(Ze,U3),e(U3,Nv),e(Nv,_ce),e(_ce,ZGo),e(Nv,eXo),e(Nv,aq),e(aq,oXo),e(Nv,rXo),e(U3,tXo),e(U3,qv),e(qv,uce),e(uce,aXo),e(qv,nXo),e(qv,nq),e(nq,sXo),e(qv,lXo),e(Ze,iXo),e(Ze,Ov),e(Ov,dXo),e(Ov,bce),e(bce,cXo),e(Ov,fXo),e(Ov,vce),e(vce,mXo),e(Ze,gXo),e(Ze,Tce),e(Tce,hXo),e(Ze,pXo),g(J3,Ze,null),b(d,$ke,u),b(d,oc,u),e(oc,Gv),e(Gv,Fce),g(Y3,Fce,null),e(oc,_Xo),e(oc,Cce),e(Cce,uXo),b(d,Ike,u),b(d,hr,u),g(K3,hr,null),e(hr,bXo),e(hr,rc),e(rc,vXo),e(rc,Mce),e(Mce,TXo),e(rc,FXo),e(rc,Ece),e(Ece,CXo),e(rc,MXo),e(hr,EXo),e(hr,Z3),e(Z3,yXo),e(Z3,yce),e(yce,wXo),e(Z3,AXo),e(hr,LXo),e(hr,dt),g(ey,dt,null),e(dt,BXo),e(dt,wce),e(wce,xXo),e(dt,kXo),e(dt,tc),e(tc,RXo),e(tc,Ace),e(Ace,SXo),e(tc,PXo),e(tc,Lce),e(Lce,$Xo),e(tc,IXo),e(dt,jXo),e(dt,Bce),e(Bce,DXo),e(dt,NXo),g(oy,dt,null),e(hr,qXo),e(hr,eo),g(ry,eo,null),e(eo,OXo),e(eo,xce),e(xce,GXo),e(eo,XXo),e(eo,gn),e(gn,VXo),e(gn,kce),e(kce,zXo),e(gn,WXo),e(gn,Rce),e(Rce,QXo),e(gn,HXo),e(gn,Sce),e(Sce,UXo),e(gn,JXo),e(eo,YXo),e(eo,hn),e(hn,Xv),e(Xv,Pce),e(Pce,KXo),e(Xv,ZXo),e(Xv,sq),e(sq,eVo),e(Xv,oVo),e(hn,rVo),e(hn,Vv),e(Vv,$ce),e($ce,tVo),e(Vv,aVo),e(Vv,lq),e(lq,nVo),e(Vv,sVo),e(hn,lVo),e(hn,zv),e(zv,Ice),e(Ice,iVo),e(zv,dVo),e(zv,iq),e(iq,cVo),e(zv,fVo),e(hn,mVo),e(hn,Wv),e(Wv,jce),e(jce,gVo),e(Wv,hVo),e(Wv,dq),e(dq,pVo),e(Wv,_Vo),e(eo,uVo),e(eo,Qv),e(Qv,bVo),e(Qv,Dce),e(Dce,vVo),e(Qv,TVo),e(Qv,Nce),e(Nce,FVo),e(eo,CVo),e(eo,qce),e(qce,MVo),e(eo,EVo),g(ty,eo,null),b(d,jke,u),b(d,ac,u),e(ac,Hv),e(Hv,Oce),g(ay,Oce,null),e(ac,yVo),e(ac,Gce),e(Gce,wVo),b(d,Dke,u),b(d,pr,u),g(ny,pr,null),e(pr,AVo),e(pr,nc),e(nc,LVo),e(nc,Xce),e(Xce,BVo),e(nc,xVo),e(nc,Vce),e(Vce,kVo),e(nc,RVo),e(pr,SVo),e(pr,sy),e(sy,PVo),e(sy,zce),e(zce,$Vo),e(sy,IVo),e(pr,jVo),e(pr,ct),g(ly,ct,null),e(ct,DVo),e(ct,Wce),e(Wce,NVo),e(ct,qVo),e(ct,sc),e(sc,OVo),e(sc,Qce),e(Qce,GVo),e(sc,XVo),e(sc,Hce),e(Hce,VVo),e(sc,zVo),e(ct,WVo),e(ct,Uce),e(Uce,QVo),e(ct,HVo),g(iy,ct,null),e(pr,UVo),e(pr,oo),g(dy,oo,null),e(oo,JVo),e(oo,Jce),e(Jce,YVo),e(oo,KVo),e(oo,pn),e(pn,ZVo),e(pn,Yce),e(Yce,ezo),e(pn,ozo),e(pn,Kce),e(Kce,rzo),e(pn,tzo),e(pn,Zce),e(Zce,azo),e(pn,nzo),e(oo,szo),e(oo,lc),e(lc,Uv),e(Uv,efe),e(efe,lzo),e(Uv,izo),e(Uv,cq),e(cq,dzo),e(Uv,czo),e(lc,fzo),e(lc,Jv),e(Jv,ofe),e(ofe,mzo),e(Jv,gzo),e(Jv,fq),e(fq,hzo),e(Jv,pzo),e(lc,_zo),e(lc,Yv),e(Yv,rfe),e(rfe,uzo),e(Yv,bzo),e(Yv,mq),e(mq,vzo),e(Yv,Tzo),e(oo,Fzo),e(oo,Kv),e(Kv,Czo),e(Kv,tfe),e(tfe,Mzo),e(Kv,Ezo),e(Kv,afe),e(afe,yzo),e(oo,wzo),e(oo,nfe),e(nfe,Azo),e(oo,Lzo),g(cy,oo,null),b(d,Nke,u),b(d,ic,u),e(ic,Zv),e(Zv,sfe),g(fy,sfe,null),e(ic,Bzo),e(ic,lfe),e(lfe,xzo),b(d,qke,u),b(d,_r,u),g(my,_r,null),e(_r,kzo),e(_r,dc),e(dc,Rzo),e(dc,ife),e(ife,Szo),e(dc,Pzo),e(dc,dfe),e(dfe,$zo),e(dc,Izo),e(_r,jzo),e(_r,gy),e(gy,Dzo),e(gy,cfe),e(cfe,Nzo),e(gy,qzo),e(_r,Ozo),e(_r,ft),g(hy,ft,null),e(ft,Gzo),e(ft,ffe),e(ffe,Xzo),e(ft,Vzo),e(ft,cc),e(cc,zzo),e(cc,mfe),e(mfe,Wzo),e(cc,Qzo),e(cc,gfe),e(gfe,Hzo),e(cc,Uzo),e(ft,Jzo),e(ft,hfe),e(hfe,Yzo),e(ft,Kzo),g(py,ft,null),e(_r,Zzo),e(_r,ro),g(_y,ro,null),e(ro,eWo),e(ro,pfe),e(pfe,oWo),e(ro,rWo),e(ro,_n),e(_n,tWo),e(_n,_fe),e(_fe,aWo),e(_n,nWo),e(_n,ufe),e(ufe,sWo),e(_n,lWo),e(_n,bfe),e(bfe,iWo),e(_n,dWo),e(ro,cWo),e(ro,vfe),e(vfe,e6),e(e6,Tfe),e(Tfe,fWo),e(e6,mWo),e(e6,gq),e(gq,gWo),e(e6,hWo),e(ro,pWo),e(ro,o6),e(o6,_Wo),e(o6,Ffe),e(Ffe,uWo),e(o6,bWo),e(o6,Cfe),e(Cfe,vWo),e(ro,TWo),e(ro,Mfe),e(Mfe,FWo),e(ro,CWo),g(uy,ro,null),b(d,Oke,u),b(d,fc,u),e(fc,r6),e(r6,Efe),g(by,Efe,null),e(fc,MWo),e(fc,yfe),e(yfe,EWo),b(d,Gke,u),b(d,ur,u),g(vy,ur,null),e(ur,yWo),e(ur,mc),e(mc,wWo),e(mc,wfe),e(wfe,AWo),e(mc,LWo),e(mc,Afe),e(Afe,BWo),e(mc,xWo),e(ur,kWo),e(ur,Ty),e(Ty,RWo),e(Ty,Lfe),e(Lfe,SWo),e(Ty,PWo),e(ur,$Wo),e(ur,mt),g(Fy,mt,null),e(mt,IWo),e(mt,Bfe),e(Bfe,jWo),e(mt,DWo),e(mt,gc),e(gc,NWo),e(gc,xfe),e(xfe,qWo),e(gc,OWo),e(gc,kfe),e(kfe,GWo),e(gc,XWo),e(mt,VWo),e(mt,Rfe),e(Rfe,zWo),e(mt,WWo),g(Cy,mt,null),e(ur,QWo),e(ur,to),g(My,to,null),e(to,HWo),e(to,Sfe),e(Sfe,UWo),e(to,JWo),e(to,un),e(un,YWo),e(un,Pfe),e(Pfe,KWo),e(un,ZWo),e(un,$fe),e($fe,eQo),e(un,oQo),e(un,Ife),e(Ife,rQo),e(un,tQo),e(to,aQo),e(to,jfe),e(jfe,t6),e(t6,Dfe),e(Dfe,nQo),e(t6,sQo),e(t6,hq),e(hq,lQo),e(t6,iQo),e(to,dQo),e(to,a6),e(a6,cQo),e(a6,Nfe),e(Nfe,fQo),e(a6,mQo),e(a6,qfe),e(qfe,gQo),e(to,hQo),e(to,Ofe),e(Ofe,pQo),e(to,_Qo),g(Ey,to,null),b(d,Xke,u),b(d,hc,u),e(hc,n6),e(n6,Gfe),g(yy,Gfe,null),e(hc,uQo),e(hc,Xfe),e(Xfe,bQo),b(d,Vke,u),b(d,br,u),g(wy,br,null),e(br,vQo),e(br,pc),e(pc,TQo),e(pc,Vfe),e(Vfe,FQo),e(pc,CQo),e(pc,zfe),e(zfe,MQo),e(pc,EQo),e(br,yQo),e(br,Ay),e(Ay,wQo),e(Ay,Wfe),e(Wfe,AQo),e(Ay,LQo),e(br,BQo),e(br,gt),g(Ly,gt,null),e(gt,xQo),e(gt,Qfe),e(Qfe,kQo),e(gt,RQo),e(gt,_c),e(_c,SQo),e(_c,Hfe),e(Hfe,PQo),e(_c,$Qo),e(_c,Ufe),e(Ufe,IQo),e(_c,jQo),e(gt,DQo),e(gt,Jfe),e(Jfe,NQo),e(gt,qQo),g(By,gt,null),e(br,OQo),e(br,ao),g(xy,ao,null),e(ao,GQo),e(ao,Yfe),e(Yfe,XQo),e(ao,VQo),e(ao,bn),e(bn,zQo),e(bn,Kfe),e(Kfe,WQo),e(bn,QQo),e(bn,Zfe),e(Zfe,HQo),e(bn,UQo),e(bn,eme),e(eme,JQo),e(bn,YQo),e(ao,KQo),e(ao,ky),e(ky,s6),e(s6,ome),e(ome,ZQo),e(s6,eHo),e(s6,pq),e(pq,oHo),e(s6,rHo),e(ky,tHo),e(ky,l6),e(l6,rme),e(rme,aHo),e(l6,nHo),e(l6,_q),e(_q,sHo),e(l6,lHo),e(ao,iHo),e(ao,i6),e(i6,dHo),e(i6,tme),e(tme,cHo),e(i6,fHo),e(i6,ame),e(ame,mHo),e(ao,gHo),e(ao,nme),e(nme,hHo),e(ao,pHo),g(Ry,ao,null),b(d,zke,u),b(d,uc,u),e(uc,d6),e(d6,sme),g(Sy,sme,null),e(uc,_Ho),e(uc,lme),e(lme,uHo),b(d,Wke,u),b(d,vr,u),g(Py,vr,null),e(vr,bHo),e(vr,bc),e(bc,vHo),e(bc,ime),e(ime,THo),e(bc,FHo),e(bc,dme),e(dme,CHo),e(bc,MHo),e(vr,EHo),e(vr,$y),e($y,yHo),e($y,cme),e(cme,wHo),e($y,AHo),e(vr,LHo),e(vr,ht),g(Iy,ht,null),e(ht,BHo),e(ht,fme),e(fme,xHo),e(ht,kHo),e(ht,vc),e(vc,RHo),e(vc,mme),e(mme,SHo),e(vc,PHo),e(vc,gme),e(gme,$Ho),e(vc,IHo),e(ht,jHo),e(ht,hme),e(hme,DHo),e(ht,NHo),g(jy,ht,null),e(vr,qHo),e(vr,no),g(Dy,no,null),e(no,OHo),e(no,pme),e(pme,GHo),e(no,XHo),e(no,vn),e(vn,VHo),e(vn,_me),e(_me,zHo),e(vn,WHo),e(vn,ume),e(ume,QHo),e(vn,HHo),e(vn,bme),e(bme,UHo),e(vn,JHo),e(no,YHo),e(no,vme),e(vme,c6),e(c6,Tme),e(Tme,KHo),e(c6,ZHo),e(c6,uq),e(uq,eUo),e(c6,oUo),e(no,rUo),e(no,f6),e(f6,tUo),e(f6,Fme),e(Fme,aUo),e(f6,nUo),e(f6,Cme),e(Cme,sUo),e(no,lUo),e(no,Mme),e(Mme,iUo),e(no,dUo),g(Ny,no,null),b(d,Qke,u),b(d,Tc,u),e(Tc,m6),e(m6,Eme),g(qy,Eme,null),e(Tc,cUo),e(Tc,yme),e(yme,fUo),b(d,Hke,u),b(d,Tr,u),g(Oy,Tr,null),e(Tr,mUo),e(Tr,Fc),e(Fc,gUo),e(Fc,wme),e(wme,hUo),e(Fc,pUo),e(Fc,Ame),e(Ame,_Uo),e(Fc,uUo),e(Tr,bUo),e(Tr,Gy),e(Gy,vUo),e(Gy,Lme),e(Lme,TUo),e(Gy,FUo),e(Tr,CUo),e(Tr,pt),g(Xy,pt,null),e(pt,MUo),e(pt,Bme),e(Bme,EUo),e(pt,yUo),e(pt,Cc),e(Cc,wUo),e(Cc,xme),e(xme,AUo),e(Cc,LUo),e(Cc,kme),e(kme,BUo),e(Cc,xUo),e(pt,kUo),e(pt,Rme),e(Rme,RUo),e(pt,SUo),g(Vy,pt,null),e(Tr,PUo),e(Tr,ho),g(zy,ho,null),e(ho,$Uo),e(ho,Sme),e(Sme,IUo),e(ho,jUo),e(ho,Tn),e(Tn,DUo),e(Tn,Pme),e(Pme,NUo),e(Tn,qUo),e(Tn,$me),e($me,OUo),e(Tn,GUo),e(Tn,Ime),e(Ime,XUo),e(Tn,VUo),e(ho,zUo),e(ho,B),e(B,g6),e(g6,jme),e(jme,WUo),e(g6,QUo),e(g6,bq),e(bq,HUo),e(g6,UUo),e(B,JUo),e(B,h6),e(h6,Dme),e(Dme,YUo),e(h6,KUo),e(h6,vq),e(vq,ZUo),e(h6,eJo),e(B,oJo),e(B,p6),e(p6,Nme),e(Nme,rJo),e(p6,tJo),e(p6,Tq),e(Tq,aJo),e(p6,nJo),e(B,sJo),e(B,_6),e(_6,qme),e(qme,lJo),e(_6,iJo),e(_6,Fq),e(Fq,dJo),e(_6,cJo),e(B,fJo),e(B,u6),e(u6,Ome),e(Ome,mJo),e(u6,gJo),e(u6,Cq),e(Cq,hJo),e(u6,pJo),e(B,_Jo),e(B,b6),e(b6,Gme),e(Gme,uJo),e(b6,bJo),e(b6,Mq),e(Mq,vJo),e(b6,TJo),e(B,FJo),e(B,v6),e(v6,Xme),e(Xme,CJo),e(v6,MJo),e(v6,Eq),e(Eq,EJo),e(v6,yJo),e(B,wJo),e(B,T6),e(T6,Vme),e(Vme,AJo),e(T6,LJo),e(T6,yq),e(yq,BJo),e(T6,xJo),e(B,kJo),e(B,F6),e(F6,zme),e(zme,RJo),e(F6,SJo),e(F6,wq),e(wq,PJo),e(F6,$Jo),e(B,IJo),e(B,C6),e(C6,Wme),e(Wme,jJo),e(C6,DJo),e(C6,Aq),e(Aq,NJo),e(C6,qJo),e(B,OJo),e(B,M6),e(M6,Qme),e(Qme,GJo),e(M6,XJo),e(M6,Lq),e(Lq,VJo),e(M6,zJo),e(B,WJo),e(B,E6),e(E6,Hme),e(Hme,QJo),e(E6,HJo),e(E6,Bq),e(Bq,UJo),e(E6,JJo),e(B,YJo),e(B,y6),e(y6,Ume),e(Ume,KJo),e(y6,ZJo),e(y6,xq),e(xq,eYo),e(y6,oYo),e(B,rYo),e(B,w6),e(w6,Jme),e(Jme,tYo),e(w6,aYo),e(w6,kq),e(kq,nYo),e(w6,sYo),e(B,lYo),e(B,A6),e(A6,Yme),e(Yme,iYo),e(A6,dYo),e(A6,Rq),e(Rq,cYo),e(A6,fYo),e(B,mYo),e(B,L6),e(L6,Kme),e(Kme,gYo),e(L6,hYo),e(L6,Sq),e(Sq,pYo),e(L6,_Yo),e(B,uYo),e(B,Ws),e(Ws,Zme),e(Zme,bYo),e(Ws,vYo),e(Ws,Pq),e(Pq,TYo),e(Ws,FYo),e(Ws,$q),e($q,CYo),e(Ws,MYo),e(B,EYo),e(B,B6),e(B6,ege),e(ege,yYo),e(B6,wYo),e(B6,Iq),e(Iq,AYo),e(B6,LYo),e(B,BYo),e(B,x6),e(x6,oge),e(oge,xYo),e(x6,kYo),e(x6,jq),e(jq,RYo),e(x6,SYo),e(B,PYo),e(B,k6),e(k6,rge),e(rge,$Yo),e(k6,IYo),e(k6,Dq),e(Dq,jYo),e(k6,DYo),e(B,NYo),e(B,R6),e(R6,tge),e(tge,qYo),e(R6,OYo),e(R6,Nq),e(Nq,GYo),e(R6,XYo),e(B,VYo),e(B,S6),e(S6,age),e(age,zYo),e(S6,WYo),e(S6,qq),e(qq,QYo),e(S6,HYo),e(B,UYo),e(B,P6),e(P6,nge),e(nge,JYo),e(P6,YYo),e(P6,Oq),e(Oq,KYo),e(P6,ZYo),e(B,eKo),e(B,$6),e($6,sge),e(sge,oKo),e($6,rKo),e($6,Gq),e(Gq,tKo),e($6,aKo),e(B,nKo),e(B,I6),e(I6,lge),e(lge,sKo),e(I6,lKo),e(I6,Xq),e(Xq,iKo),e(I6,dKo),e(B,cKo),e(B,j6),e(j6,ige),e(ige,fKo),e(j6,mKo),e(j6,Vq),e(Vq,gKo),e(j6,hKo),e(B,pKo),e(B,D6),e(D6,dge),e(dge,_Ko),e(D6,uKo),e(D6,zq),e(zq,bKo),e(D6,vKo),e(B,TKo),e(B,N6),e(N6,cge),e(cge,FKo),e(N6,CKo),e(N6,Wq),e(Wq,MKo),e(N6,EKo),e(B,yKo),e(B,q6),e(q6,fge),e(fge,wKo),e(q6,AKo),e(q6,Qq),e(Qq,LKo),e(q6,BKo),e(B,xKo),e(B,O6),e(O6,mge),e(mge,kKo),e(O6,RKo),e(O6,Hq),e(Hq,SKo),e(O6,PKo),e(B,$Ko),e(B,G6),e(G6,gge),e(gge,IKo),e(G6,jKo),e(G6,Uq),e(Uq,DKo),e(G6,NKo),e(B,qKo),e(B,X6),e(X6,hge),e(hge,OKo),e(X6,GKo),e(X6,Jq),e(Jq,XKo),e(X6,VKo),e(B,zKo),e(B,V6),e(V6,pge),e(pge,WKo),e(V6,QKo),e(V6,Yq),e(Yq,HKo),e(V6,UKo),e(B,JKo),e(B,z6),e(z6,_ge),e(_ge,YKo),e(z6,KKo),e(z6,Kq),e(Kq,ZKo),e(z6,eZo),e(B,oZo),e(B,W6),e(W6,uge),e(uge,rZo),e(W6,tZo),e(W6,Zq),e(Zq,aZo),e(W6,nZo),e(B,sZo),e(B,Q6),e(Q6,bge),e(bge,lZo),e(Q6,iZo),e(Q6,eO),e(eO,dZo),e(Q6,cZo),e(B,fZo),e(B,H6),e(H6,vge),e(vge,mZo),e(H6,gZo),e(H6,oO),e(oO,hZo),e(H6,pZo),e(B,_Zo),e(B,U6),e(U6,Tge),e(Tge,uZo),e(U6,bZo),e(U6,rO),e(rO,vZo),e(U6,TZo),e(B,FZo),e(B,J6),e(J6,Fge),e(Fge,CZo),e(J6,MZo),e(J6,tO),e(tO,EZo),e(J6,yZo),e(B,wZo),e(B,Y6),e(Y6,Cge),e(Cge,AZo),e(Y6,LZo),e(Y6,aO),e(aO,BZo),e(Y6,xZo),e(B,kZo),e(B,K6),e(K6,Mge),e(Mge,RZo),e(K6,SZo),e(K6,nO),e(nO,PZo),e(K6,$Zo),e(B,IZo),e(B,Z6),e(Z6,Ege),e(Ege,jZo),e(Z6,DZo),e(Z6,sO),e(sO,NZo),e(Z6,qZo),e(ho,OZo),e(ho,yge),e(yge,GZo),e(ho,XZo),g(Wy,ho,null),b(d,Uke,u),b(d,Mc,u),e(Mc,e0),e(e0,wge),g(Qy,wge,null),e(Mc,VZo),e(Mc,Age),e(Age,zZo),b(d,Jke,u),b(d,Fr,u),g(Hy,Fr,null),e(Fr,WZo),e(Fr,Ec),e(Ec,QZo),e(Ec,Lge),e(Lge,HZo),e(Ec,UZo),e(Ec,Bge),e(Bge,JZo),e(Ec,YZo),e(Fr,KZo),e(Fr,Uy),e(Uy,ZZo),e(Uy,xge),e(xge,eer),e(Uy,oer),e(Fr,rer),e(Fr,_t),g(Jy,_t,null),e(_t,ter),e(_t,kge),e(kge,aer),e(_t,ner),e(_t,yc),e(yc,ser),e(yc,Rge),e(Rge,ler),e(yc,ier),e(yc,Sge),e(Sge,der),e(yc,cer),e(_t,fer),e(_t,Pge),e(Pge,mer),e(_t,ger),g(Yy,_t,null),e(Fr,her),e(Fr,po),g(Ky,po,null),e(po,per),e(po,$ge),e($ge,_er),e(po,uer),e(po,Fn),e(Fn,ber),e(Fn,Ige),e(Ige,ver),e(Fn,Ter),e(Fn,jge),e(jge,Fer),e(Fn,Cer),e(Fn,Dge),e(Dge,Mer),e(Fn,Eer),e(po,yer),e(po,H),e(H,o0),e(o0,Nge),e(Nge,wer),e(o0,Aer),e(o0,lO),e(lO,Ler),e(o0,Ber),e(H,xer),e(H,r0),e(r0,qge),e(qge,ker),e(r0,Rer),e(r0,iO),e(iO,Ser),e(r0,Per),e(H,$er),e(H,t0),e(t0,Oge),e(Oge,Ier),e(t0,jer),e(t0,dO),e(dO,Der),e(t0,Ner),e(H,qer),e(H,a0),e(a0,Gge),e(Gge,Oer),e(a0,Ger),e(a0,cO),e(cO,Xer),e(a0,Ver),e(H,zer),e(H,n0),e(n0,Xge),e(Xge,Wer),e(n0,Qer),e(n0,fO),e(fO,Her),e(n0,Uer),e(H,Jer),e(H,s0),e(s0,Vge),e(Vge,Yer),e(s0,Ker),e(s0,mO),e(mO,Zer),e(s0,eor),e(H,oor),e(H,l0),e(l0,zge),e(zge,ror),e(l0,tor),e(l0,gO),e(gO,aor),e(l0,nor),e(H,sor),e(H,i0),e(i0,Wge),e(Wge,lor),e(i0,ior),e(i0,hO),e(hO,dor),e(i0,cor),e(H,mor),e(H,d0),e(d0,Qge),e(Qge,gor),e(d0,hor),e(d0,pO),e(pO,por),e(d0,_or),e(H,uor),e(H,c0),e(c0,Hge),e(Hge,bor),e(c0,vor),e(c0,_O),e(_O,Tor),e(c0,For),e(H,Cor),e(H,f0),e(f0,Uge),e(Uge,Mor),e(f0,Eor),e(f0,uO),e(uO,yor),e(f0,wor),e(H,Aor),e(H,m0),e(m0,Jge),e(Jge,Lor),e(m0,Bor),e(m0,bO),e(bO,xor),e(m0,kor),e(H,Ror),e(H,g0),e(g0,Yge),e(Yge,Sor),e(g0,Por),e(g0,vO),e(vO,$or),e(g0,Ior),e(H,jor),e(H,h0),e(h0,Kge),e(Kge,Dor),e(h0,Nor),e(h0,TO),e(TO,qor),e(h0,Oor),e(H,Gor),e(H,p0),e(p0,Zge),e(Zge,Xor),e(p0,Vor),e(p0,FO),e(FO,zor),e(p0,Wor),e(H,Qor),e(H,_0),e(_0,ehe),e(ehe,Hor),e(_0,Uor),e(_0,CO),e(CO,Jor),e(_0,Yor),e(H,Kor),e(H,u0),e(u0,ohe),e(ohe,Zor),e(u0,err),e(u0,MO),e(MO,orr),e(u0,rrr),e(H,trr),e(H,b0),e(b0,rhe),e(rhe,arr),e(b0,nrr),e(b0,EO),e(EO,srr),e(b0,lrr),e(H,irr),e(H,v0),e(v0,the),e(the,drr),e(v0,crr),e(v0,yO),e(yO,frr),e(v0,mrr),e(H,grr),e(H,T0),e(T0,ahe),e(ahe,hrr),e(T0,prr),e(T0,wO),e(wO,_rr),e(T0,urr),e(H,brr),e(H,F0),e(F0,nhe),e(nhe,vrr),e(F0,Trr),e(F0,AO),e(AO,Frr),e(F0,Crr),e(H,Mrr),e(H,C0),e(C0,she),e(she,Err),e(C0,yrr),e(C0,LO),e(LO,wrr),e(C0,Arr),e(po,Lrr),e(po,lhe),e(lhe,Brr),e(po,xrr),g(Zy,po,null),b(d,Yke,u),b(d,wc,u),e(wc,M0),e(M0,ihe),g(ew,ihe,null),e(wc,krr),e(wc,dhe),e(dhe,Rrr),b(d,Kke,u),b(d,Cr,u),g(ow,Cr,null),e(Cr,Srr),e(Cr,Ac),e(Ac,Prr),e(Ac,che),e(che,$rr),e(Ac,Irr),e(Ac,fhe),e(fhe,jrr),e(Ac,Drr),e(Cr,Nrr),e(Cr,rw),e(rw,qrr),e(rw,mhe),e(mhe,Orr),e(rw,Grr),e(Cr,Xrr),e(Cr,ut),g(tw,ut,null),e(ut,Vrr),e(ut,ghe),e(ghe,zrr),e(ut,Wrr),e(ut,Lc),e(Lc,Qrr),e(Lc,hhe),e(hhe,Hrr),e(Lc,Urr),e(Lc,phe),e(phe,Jrr),e(Lc,Yrr),e(ut,Krr),e(ut,_he),e(_he,Zrr),e(ut,etr),g(aw,ut,null),e(Cr,otr),e(Cr,_o),g(nw,_o,null),e(_o,rtr),e(_o,uhe),e(uhe,ttr),e(_o,atr),e(_o,Cn),e(Cn,ntr),e(Cn,bhe),e(bhe,str),e(Cn,ltr),e(Cn,vhe),e(vhe,itr),e(Cn,dtr),e(Cn,The),e(The,ctr),e(Cn,ftr),e(_o,mtr),e(_o,pe),e(pe,E0),e(E0,Fhe),e(Fhe,gtr),e(E0,htr),e(E0,BO),e(BO,ptr),e(E0,_tr),e(pe,utr),e(pe,y0),e(y0,Che),e(Che,btr),e(y0,vtr),e(y0,xO),e(xO,Ttr),e(y0,Ftr),e(pe,Ctr),e(pe,w0),e(w0,Mhe),e(Mhe,Mtr),e(w0,Etr),e(w0,kO),e(kO,ytr),e(w0,wtr),e(pe,Atr),e(pe,A0),e(A0,Ehe),e(Ehe,Ltr),e(A0,Btr),e(A0,RO),e(RO,xtr),e(A0,ktr),e(pe,Rtr),e(pe,L0),e(L0,yhe),e(yhe,Str),e(L0,Ptr),e(L0,SO),e(SO,$tr),e(L0,Itr),e(pe,jtr),e(pe,B0),e(B0,whe),e(whe,Dtr),e(B0,Ntr),e(B0,PO),e(PO,qtr),e(B0,Otr),e(pe,Gtr),e(pe,x0),e(x0,Ahe),e(Ahe,Xtr),e(x0,Vtr),e(x0,$O),e($O,ztr),e(x0,Wtr),e(pe,Qtr),e(pe,k0),e(k0,Lhe),e(Lhe,Htr),e(k0,Utr),e(k0,IO),e(IO,Jtr),e(k0,Ytr),e(pe,Ktr),e(pe,R0),e(R0,Bhe),e(Bhe,Ztr),e(R0,ear),e(R0,jO),e(jO,oar),e(R0,rar),e(pe,tar),e(pe,S0),e(S0,xhe),e(xhe,aar),e(S0,nar),e(S0,DO),e(DO,sar),e(S0,lar),e(_o,iar),e(_o,khe),e(khe,dar),e(_o,car),g(sw,_o,null),b(d,Zke,u),b(d,Bc,u),e(Bc,P0),e(P0,Rhe),g(lw,Rhe,null),e(Bc,far),e(Bc,She),e(She,mar),b(d,eRe,u),b(d,Mr,u),g(iw,Mr,null),e(Mr,gar),e(Mr,xc),e(xc,har),e(xc,Phe),e(Phe,par),e(xc,_ar),e(xc,$he),e($he,uar),e(xc,bar),e(Mr,Tar),e(Mr,dw),e(dw,Far),e(dw,Ihe),e(Ihe,Car),e(dw,Mar),e(Mr,Ear),e(Mr,bt),g(cw,bt,null),e(bt,yar),e(bt,jhe),e(jhe,war),e(bt,Aar),e(bt,kc),e(kc,Lar),e(kc,Dhe),e(Dhe,Bar),e(kc,xar),e(kc,Nhe),e(Nhe,kar),e(kc,Rar),e(bt,Sar),e(bt,qhe),e(qhe,Par),e(bt,$ar),g(fw,bt,null),e(Mr,Iar),e(Mr,uo),g(mw,uo,null),e(uo,jar),e(uo,Ohe),e(Ohe,Dar),e(uo,Nar),e(uo,Mn),e(Mn,qar),e(Mn,Ghe),e(Ghe,Oar),e(Mn,Gar),e(Mn,Xhe),e(Xhe,Xar),e(Mn,Var),e(Mn,Vhe),e(Vhe,zar),e(Mn,War),e(uo,Qar),e(uo,gw),e(gw,$0),e($0,zhe),e(zhe,Har),e($0,Uar),e($0,NO),e(NO,Jar),e($0,Yar),e(gw,Kar),e(gw,I0),e(I0,Whe),e(Whe,Zar),e(I0,enr),e(I0,qO),e(qO,onr),e(I0,rnr),e(uo,tnr),e(uo,Qhe),e(Qhe,anr),e(uo,nnr),g(hw,uo,null),b(d,oRe,u),b(d,Rc,u),e(Rc,j0),e(j0,Hhe),g(pw,Hhe,null),e(Rc,snr),e(Rc,Uhe),e(Uhe,lnr),b(d,rRe,u),b(d,Er,u),g(_w,Er,null),e(Er,inr),e(Er,Sc),e(Sc,dnr),e(Sc,Jhe),e(Jhe,cnr),e(Sc,fnr),e(Sc,Yhe),e(Yhe,mnr),e(Sc,gnr),e(Er,hnr),e(Er,uw),e(uw,pnr),e(uw,Khe),e(Khe,_nr),e(uw,unr),e(Er,bnr),e(Er,vt),g(bw,vt,null),e(vt,vnr),e(vt,Zhe),e(Zhe,Tnr),e(vt,Fnr),e(vt,Pc),e(Pc,Cnr),e(Pc,epe),e(epe,Mnr),e(Pc,Enr),e(Pc,ope),e(ope,ynr),e(Pc,wnr),e(vt,Anr),e(vt,rpe),e(rpe,Lnr),e(vt,Bnr),g(vw,vt,null),e(Er,xnr),e(Er,bo),g(Tw,bo,null),e(bo,knr),e(bo,tpe),e(tpe,Rnr),e(bo,Snr),e(bo,En),e(En,Pnr),e(En,ape),e(ape,$nr),e(En,Inr),e(En,npe),e(npe,jnr),e(En,Dnr),e(En,spe),e(spe,Nnr),e(En,qnr),e(bo,Onr),e(bo,Y),e(Y,D0),e(D0,lpe),e(lpe,Gnr),e(D0,Xnr),e(D0,OO),e(OO,Vnr),e(D0,znr),e(Y,Wnr),e(Y,N0),e(N0,ipe),e(ipe,Qnr),e(N0,Hnr),e(N0,GO),e(GO,Unr),e(N0,Jnr),e(Y,Ynr),e(Y,q0),e(q0,dpe),e(dpe,Knr),e(q0,Znr),e(q0,XO),e(XO,esr),e(q0,osr),e(Y,rsr),e(Y,O0),e(O0,cpe),e(cpe,tsr),e(O0,asr),e(O0,VO),e(VO,nsr),e(O0,ssr),e(Y,lsr),e(Y,G0),e(G0,fpe),e(fpe,isr),e(G0,dsr),e(G0,zO),e(zO,csr),e(G0,fsr),e(Y,msr),e(Y,X0),e(X0,mpe),e(mpe,gsr),e(X0,hsr),e(X0,WO),e(WO,psr),e(X0,_sr),e(Y,usr),e(Y,V0),e(V0,gpe),e(gpe,bsr),e(V0,vsr),e(V0,QO),e(QO,Tsr),e(V0,Fsr),e(Y,Csr),e(Y,z0),e(z0,hpe),e(hpe,Msr),e(z0,Esr),e(z0,HO),e(HO,ysr),e(z0,wsr),e(Y,Asr),e(Y,W0),e(W0,ppe),e(ppe,Lsr),e(W0,Bsr),e(W0,UO),e(UO,xsr),e(W0,ksr),e(Y,Rsr),e(Y,Q0),e(Q0,_pe),e(_pe,Ssr),e(Q0,Psr),e(Q0,JO),e(JO,$sr),e(Q0,Isr),e(Y,jsr),e(Y,H0),e(H0,upe),e(upe,Dsr),e(H0,Nsr),e(H0,YO),e(YO,qsr),e(H0,Osr),e(Y,Gsr),e(Y,U0),e(U0,bpe),e(bpe,Xsr),e(U0,Vsr),e(U0,KO),e(KO,zsr),e(U0,Wsr),e(Y,Qsr),e(Y,J0),e(J0,vpe),e(vpe,Hsr),e(J0,Usr),e(J0,ZO),e(ZO,Jsr),e(J0,Ysr),e(Y,Ksr),e(Y,Y0),e(Y0,Tpe),e(Tpe,Zsr),e(Y0,elr),e(Y0,eG),e(eG,olr),e(Y0,rlr),e(Y,tlr),e(Y,K0),e(K0,Fpe),e(Fpe,alr),e(K0,nlr),e(K0,oG),e(oG,slr),e(K0,llr),e(Y,ilr),e(Y,Z0),e(Z0,Cpe),e(Cpe,dlr),e(Z0,clr),e(Z0,rG),e(rG,flr),e(Z0,mlr),e(Y,glr),e(Y,eT),e(eT,Mpe),e(Mpe,hlr),e(eT,plr),e(eT,tG),e(tG,_lr),e(eT,ulr),e(Y,blr),e(Y,oT),e(oT,Epe),e(Epe,vlr),e(oT,Tlr),e(oT,aG),e(aG,Flr),e(oT,Clr),e(Y,Mlr),e(Y,rT),e(rT,ype),e(ype,Elr),e(rT,ylr),e(rT,nG),e(nG,wlr),e(rT,Alr),e(Y,Llr),e(Y,tT),e(tT,wpe),e(wpe,Blr),e(tT,xlr),e(tT,sG),e(sG,klr),e(tT,Rlr),e(bo,Slr),e(bo,Ape),e(Ape,Plr),e(bo,$lr),g(Fw,bo,null),b(d,tRe,u),b(d,$c,u),e($c,aT),e(aT,Lpe),g(Cw,Lpe,null),e($c,Ilr),e($c,Bpe),e(Bpe,jlr),b(d,aRe,u),b(d,yr,u),g(Mw,yr,null),e(yr,Dlr),e(yr,Ic),e(Ic,Nlr),e(Ic,xpe),e(xpe,qlr),e(Ic,Olr),e(Ic,kpe),e(kpe,Glr),e(Ic,Xlr),e(yr,Vlr),e(yr,Ew),e(Ew,zlr),e(Ew,Rpe),e(Rpe,Wlr),e(Ew,Qlr),e(yr,Hlr),e(yr,Tt),g(yw,Tt,null),e(Tt,Ulr),e(Tt,Spe),e(Spe,Jlr),e(Tt,Ylr),e(Tt,jc),e(jc,Klr),e(jc,Ppe),e(Ppe,Zlr),e(jc,eir),e(jc,$pe),e($pe,oir),e(jc,rir),e(Tt,tir),e(Tt,Ipe),e(Ipe,air),e(Tt,nir),g(ww,Tt,null),e(yr,sir),e(yr,vo),g(Aw,vo,null),e(vo,lir),e(vo,jpe),e(jpe,iir),e(vo,dir),e(vo,yn),e(yn,cir),e(yn,Dpe),e(Dpe,fir),e(yn,mir),e(yn,Npe),e(Npe,gir),e(yn,hir),e(yn,qpe),e(qpe,pir),e(yn,_ir),e(vo,uir),e(vo,_e),e(_e,nT),e(nT,Ope),e(Ope,bir),e(nT,vir),e(nT,lG),e(lG,Tir),e(nT,Fir),e(_e,Cir),e(_e,sT),e(sT,Gpe),e(Gpe,Mir),e(sT,Eir),e(sT,iG),e(iG,yir),e(sT,wir),e(_e,Air),e(_e,lT),e(lT,Xpe),e(Xpe,Lir),e(lT,Bir),e(lT,dG),e(dG,xir),e(lT,kir),e(_e,Rir),e(_e,iT),e(iT,Vpe),e(Vpe,Sir),e(iT,Pir),e(iT,cG),e(cG,$ir),e(iT,Iir),e(_e,jir),e(_e,dT),e(dT,zpe),e(zpe,Dir),e(dT,Nir),e(dT,fG),e(fG,qir),e(dT,Oir),e(_e,Gir),e(_e,cT),e(cT,Wpe),e(Wpe,Xir),e(cT,Vir),e(cT,mG),e(mG,zir),e(cT,Wir),e(_e,Qir),e(_e,fT),e(fT,Qpe),e(Qpe,Hir),e(fT,Uir),e(fT,gG),e(gG,Jir),e(fT,Yir),e(_e,Kir),e(_e,mT),e(mT,Hpe),e(Hpe,Zir),e(mT,edr),e(mT,hG),e(hG,odr),e(mT,rdr),e(_e,tdr),e(_e,gT),e(gT,Upe),e(Upe,adr),e(gT,ndr),e(gT,pG),e(pG,sdr),e(gT,ldr),e(_e,idr),e(_e,hT),e(hT,Jpe),e(Jpe,ddr),e(hT,cdr),e(hT,_G),e(_G,fdr),e(hT,mdr),e(vo,gdr),e(vo,Ype),e(Ype,hdr),e(vo,pdr),g(Lw,vo,null),b(d,nRe,u),b(d,Dc,u),e(Dc,pT),e(pT,Kpe),g(Bw,Kpe,null),e(Dc,_dr),e(Dc,Zpe),e(Zpe,udr),b(d,sRe,u),b(d,wr,u),g(xw,wr,null),e(wr,bdr),e(wr,Nc),e(Nc,vdr),e(Nc,e_e),e(e_e,Tdr),e(Nc,Fdr),e(Nc,o_e),e(o_e,Cdr),e(Nc,Mdr),e(wr,Edr),e(wr,kw),e(kw,ydr),e(kw,r_e),e(r_e,wdr),e(kw,Adr),e(wr,Ldr),e(wr,Ft),g(Rw,Ft,null),e(Ft,Bdr),e(Ft,t_e),e(t_e,xdr),e(Ft,kdr),e(Ft,qc),e(qc,Rdr),e(qc,a_e),e(a_e,Sdr),e(qc,Pdr),e(qc,n_e),e(n_e,$dr),e(qc,Idr),e(Ft,jdr),e(Ft,s_e),e(s_e,Ddr),e(Ft,Ndr),g(Sw,Ft,null),e(wr,qdr),e(wr,To),g(Pw,To,null),e(To,Odr),e(To,l_e),e(l_e,Gdr),e(To,Xdr),e(To,wn),e(wn,Vdr),e(wn,i_e),e(i_e,zdr),e(wn,Wdr),e(wn,d_e),e(d_e,Qdr),e(wn,Hdr),e(wn,c_e),e(c_e,Udr),e(wn,Jdr),e(To,Ydr),e(To,V),e(V,_T),e(_T,f_e),e(f_e,Kdr),e(_T,Zdr),e(_T,uG),e(uG,ecr),e(_T,ocr),e(V,rcr),e(V,uT),e(uT,m_e),e(m_e,tcr),e(uT,acr),e(uT,bG),e(bG,ncr),e(uT,scr),e(V,lcr),e(V,bT),e(bT,g_e),e(g_e,icr),e(bT,dcr),e(bT,vG),e(vG,ccr),e(bT,fcr),e(V,mcr),e(V,vT),e(vT,h_e),e(h_e,gcr),e(vT,hcr),e(vT,TG),e(TG,pcr),e(vT,_cr),e(V,ucr),e(V,TT),e(TT,p_e),e(p_e,bcr),e(TT,vcr),e(TT,FG),e(FG,Tcr),e(TT,Fcr),e(V,Ccr),e(V,FT),e(FT,__e),e(__e,Mcr),e(FT,Ecr),e(FT,CG),e(CG,ycr),e(FT,wcr),e(V,Acr),e(V,CT),e(CT,u_e),e(u_e,Lcr),e(CT,Bcr),e(CT,MG),e(MG,xcr),e(CT,kcr),e(V,Rcr),e(V,MT),e(MT,b_e),e(b_e,Scr),e(MT,Pcr),e(MT,EG),e(EG,$cr),e(MT,Icr),e(V,jcr),e(V,ET),e(ET,v_e),e(v_e,Dcr),e(ET,Ncr),e(ET,yG),e(yG,qcr),e(ET,Ocr),e(V,Gcr),e(V,yT),e(yT,T_e),e(T_e,Xcr),e(yT,Vcr),e(yT,wG),e(wG,zcr),e(yT,Wcr),e(V,Qcr),e(V,wT),e(wT,F_e),e(F_e,Hcr),e(wT,Ucr),e(wT,AG),e(AG,Jcr),e(wT,Ycr),e(V,Kcr),e(V,AT),e(AT,C_e),e(C_e,Zcr),e(AT,efr),e(AT,LG),e(LG,ofr),e(AT,rfr),e(V,tfr),e(V,LT),e(LT,M_e),e(M_e,afr),e(LT,nfr),e(LT,BG),e(BG,sfr),e(LT,lfr),e(V,ifr),e(V,BT),e(BT,E_e),e(E_e,dfr),e(BT,cfr),e(BT,xG),e(xG,ffr),e(BT,mfr),e(V,gfr),e(V,xT),e(xT,y_e),e(y_e,hfr),e(xT,pfr),e(xT,kG),e(kG,_fr),e(xT,ufr),e(V,bfr),e(V,kT),e(kT,w_e),e(w_e,vfr),e(kT,Tfr),e(kT,RG),e(RG,Ffr),e(kT,Cfr),e(V,Mfr),e(V,RT),e(RT,A_e),e(A_e,Efr),e(RT,yfr),e(RT,SG),e(SG,wfr),e(RT,Afr),e(V,Lfr),e(V,ST),e(ST,L_e),e(L_e,Bfr),e(ST,xfr),e(ST,PG),e(PG,kfr),e(ST,Rfr),e(V,Sfr),e(V,PT),e(PT,B_e),e(B_e,Pfr),e(PT,$fr),e(PT,$G),e($G,Ifr),e(PT,jfr),e(V,Dfr),e(V,$T),e($T,x_e),e(x_e,Nfr),e($T,qfr),e($T,IG),e(IG,Ofr),e($T,Gfr),e(V,Xfr),e(V,IT),e(IT,k_e),e(k_e,Vfr),e(IT,zfr),e(IT,jG),e(jG,Wfr),e(IT,Qfr),e(V,Hfr),e(V,jT),e(jT,R_e),e(R_e,Ufr),e(jT,Jfr),e(jT,DG),e(DG,Yfr),e(jT,Kfr),e(V,Zfr),e(V,DT),e(DT,S_e),e(S_e,emr),e(DT,omr),e(DT,NG),e(NG,rmr),e(DT,tmr),e(V,amr),e(V,NT),e(NT,P_e),e(P_e,nmr),e(NT,smr),e(NT,qG),e(qG,lmr),e(NT,imr),e(V,dmr),e(V,qT),e(qT,$_e),e($_e,cmr),e(qT,fmr),e(qT,OG),e(OG,mmr),e(qT,gmr),e(To,hmr),e(To,I_e),e(I_e,pmr),e(To,_mr),g($w,To,null),b(d,lRe,u),b(d,Oc,u),e(Oc,OT),e(OT,j_e),g(Iw,j_e,null),e(Oc,umr),e(Oc,D_e),e(D_e,bmr),b(d,iRe,u),b(d,Ar,u),g(jw,Ar,null),e(Ar,vmr),e(Ar,Gc),e(Gc,Tmr),e(Gc,N_e),e(N_e,Fmr),e(Gc,Cmr),e(Gc,q_e),e(q_e,Mmr),e(Gc,Emr),e(Ar,ymr),e(Ar,Dw),e(Dw,wmr),e(Dw,O_e),e(O_e,Amr),e(Dw,Lmr),e(Ar,Bmr),e(Ar,Ct),g(Nw,Ct,null),e(Ct,xmr),e(Ct,G_e),e(G_e,kmr),e(Ct,Rmr),e(Ct,Xc),e(Xc,Smr),e(Xc,X_e),e(X_e,Pmr),e(Xc,$mr),e(Xc,V_e),e(V_e,Imr),e(Xc,jmr),e(Ct,Dmr),e(Ct,z_e),e(z_e,Nmr),e(Ct,qmr),g(qw,Ct,null),e(Ar,Omr),e(Ar,Fo),g(Ow,Fo,null),e(Fo,Gmr),e(Fo,W_e),e(W_e,Xmr),e(Fo,Vmr),e(Fo,An),e(An,zmr),e(An,Q_e),e(Q_e,Wmr),e(An,Qmr),e(An,H_e),e(H_e,Hmr),e(An,Umr),e(An,U_e),e(U_e,Jmr),e(An,Ymr),e(Fo,Kmr),e(Fo,te),e(te,GT),e(GT,J_e),e(J_e,Zmr),e(GT,egr),e(GT,GG),e(GG,ogr),e(GT,rgr),e(te,tgr),e(te,XT),e(XT,Y_e),e(Y_e,agr),e(XT,ngr),e(XT,XG),e(XG,sgr),e(XT,lgr),e(te,igr),e(te,VT),e(VT,K_e),e(K_e,dgr),e(VT,cgr),e(VT,VG),e(VG,fgr),e(VT,mgr),e(te,ggr),e(te,zT),e(zT,Z_e),e(Z_e,hgr),e(zT,pgr),e(zT,zG),e(zG,_gr),e(zT,ugr),e(te,bgr),e(te,WT),e(WT,eue),e(eue,vgr),e(WT,Tgr),e(WT,WG),e(WG,Fgr),e(WT,Cgr),e(te,Mgr),e(te,QT),e(QT,oue),e(oue,Egr),e(QT,ygr),e(QT,QG),e(QG,wgr),e(QT,Agr),e(te,Lgr),e(te,HT),e(HT,rue),e(rue,Bgr),e(HT,xgr),e(HT,HG),e(HG,kgr),e(HT,Rgr),e(te,Sgr),e(te,UT),e(UT,tue),e(tue,Pgr),e(UT,$gr),e(UT,UG),e(UG,Igr),e(UT,jgr),e(te,Dgr),e(te,JT),e(JT,aue),e(aue,Ngr),e(JT,qgr),e(JT,JG),e(JG,Ogr),e(JT,Ggr),e(te,Xgr),e(te,YT),e(YT,nue),e(nue,Vgr),e(YT,zgr),e(YT,YG),e(YG,Wgr),e(YT,Qgr),e(te,Hgr),e(te,KT),e(KT,sue),e(sue,Ugr),e(KT,Jgr),e(KT,KG),e(KG,Ygr),e(KT,Kgr),e(te,Zgr),e(te,ZT),e(ZT,lue),e(lue,ehr),e(ZT,ohr),e(ZT,ZG),e(ZG,rhr),e(ZT,thr),e(te,ahr),e(te,e8),e(e8,iue),e(iue,nhr),e(e8,shr),e(e8,eX),e(eX,lhr),e(e8,ihr),e(te,dhr),e(te,o8),e(o8,due),e(due,chr),e(o8,fhr),e(o8,oX),e(oX,mhr),e(o8,ghr),e(te,hhr),e(te,r8),e(r8,cue),e(cue,phr),e(r8,_hr),e(r8,rX),e(rX,uhr),e(r8,bhr),e(te,vhr),e(te,t8),e(t8,fue),e(fue,Thr),e(t8,Fhr),e(t8,tX),e(tX,Chr),e(t8,Mhr),e(te,Ehr),e(te,a8),e(a8,mue),e(mue,yhr),e(a8,whr),e(a8,aX),e(aX,Ahr),e(a8,Lhr),e(Fo,Bhr),e(Fo,gue),e(gue,xhr),e(Fo,khr),g(Gw,Fo,null),b(d,dRe,u),b(d,Vc,u),e(Vc,n8),e(n8,hue),g(Xw,hue,null),e(Vc,Rhr),e(Vc,pue),e(pue,Shr),b(d,cRe,u),b(d,Lr,u),g(Vw,Lr,null),e(Lr,Phr),e(Lr,zc),e(zc,$hr),e(zc,_ue),e(_ue,Ihr),e(zc,jhr),e(zc,uue),e(uue,Dhr),e(zc,Nhr),e(Lr,qhr),e(Lr,zw),e(zw,Ohr),e(zw,bue),e(bue,Ghr),e(zw,Xhr),e(Lr,Vhr),e(Lr,Mt),g(Ww,Mt,null),e(Mt,zhr),e(Mt,vue),e(vue,Whr),e(Mt,Qhr),e(Mt,Wc),e(Wc,Hhr),e(Wc,Tue),e(Tue,Uhr),e(Wc,Jhr),e(Wc,Fue),e(Fue,Yhr),e(Wc,Khr),e(Mt,Zhr),e(Mt,Cue),e(Cue,epr),e(Mt,opr),g(Qw,Mt,null),e(Lr,rpr),e(Lr,Co),g(Hw,Co,null),e(Co,tpr),e(Co,Mue),e(Mue,apr),e(Co,npr),e(Co,Ln),e(Ln,spr),e(Ln,Eue),e(Eue,lpr),e(Ln,ipr),e(Ln,yue),e(yue,dpr),e(Ln,cpr),e(Ln,wue),e(wue,fpr),e(Ln,mpr),e(Co,gpr),e(Co,Aue),e(Aue,s8),e(s8,Lue),e(Lue,hpr),e(s8,ppr),e(s8,nX),e(nX,_pr),e(s8,upr),e(Co,bpr),e(Co,Bue),e(Bue,vpr),e(Co,Tpr),g(Uw,Co,null),b(d,fRe,u),b(d,Qc,u),e(Qc,l8),e(l8,xue),g(Jw,xue,null),e(Qc,Fpr),e(Qc,kue),e(kue,Cpr),b(d,mRe,u),b(d,Br,u),g(Yw,Br,null),e(Br,Mpr),e(Br,Hc),e(Hc,Epr),e(Hc,Rue),e(Rue,ypr),e(Hc,wpr),e(Hc,Sue),e(Sue,Apr),e(Hc,Lpr),e(Br,Bpr),e(Br,Kw),e(Kw,xpr),e(Kw,Pue),e(Pue,kpr),e(Kw,Rpr),e(Br,Spr),e(Br,Et),g(Zw,Et,null),e(Et,Ppr),e(Et,$ue),e($ue,$pr),e(Et,Ipr),e(Et,Uc),e(Uc,jpr),e(Uc,Iue),e(Iue,Dpr),e(Uc,Npr),e(Uc,jue),e(jue,qpr),e(Uc,Opr),e(Et,Gpr),e(Et,Due),e(Due,Xpr),e(Et,Vpr),g(eA,Et,null),e(Br,zpr),e(Br,Mo),g(oA,Mo,null),e(Mo,Wpr),e(Mo,Nue),e(Nue,Qpr),e(Mo,Hpr),e(Mo,Bn),e(Bn,Upr),e(Bn,que),e(que,Jpr),e(Bn,Ypr),e(Bn,Oue),e(Oue,Kpr),e(Bn,Zpr),e(Bn,Gue),e(Gue,e_r),e(Bn,o_r),e(Mo,r_r),e(Mo,K),e(K,i8),e(i8,Xue),e(Xue,t_r),e(i8,a_r),e(i8,sX),e(sX,n_r),e(i8,s_r),e(K,l_r),e(K,d8),e(d8,Vue),e(Vue,i_r),e(d8,d_r),e(d8,lX),e(lX,c_r),e(d8,f_r),e(K,m_r),e(K,c8),e(c8,zue),e(zue,g_r),e(c8,h_r),e(c8,iX),e(iX,p_r),e(c8,__r),e(K,u_r),e(K,f8),e(f8,Wue),e(Wue,b_r),e(f8,v_r),e(f8,dX),e(dX,T_r),e(f8,F_r),e(K,C_r),e(K,m8),e(m8,Que),e(Que,M_r),e(m8,E_r),e(m8,cX),e(cX,y_r),e(m8,w_r),e(K,A_r),e(K,g8),e(g8,Hue),e(Hue,L_r),e(g8,B_r),e(g8,fX),e(fX,x_r),e(g8,k_r),e(K,R_r),e(K,h8),e(h8,Uue),e(Uue,S_r),e(h8,P_r),e(h8,mX),e(mX,$_r),e(h8,I_r),e(K,j_r),e(K,p8),e(p8,Jue),e(Jue,D_r),e(p8,N_r),e(p8,gX),e(gX,q_r),e(p8,O_r),e(K,G_r),e(K,_8),e(_8,Yue),e(Yue,X_r),e(_8,V_r),e(_8,hX),e(hX,z_r),e(_8,W_r),e(K,Q_r),e(K,u8),e(u8,Kue),e(Kue,H_r),e(u8,U_r),e(u8,pX),e(pX,J_r),e(u8,Y_r),e(K,K_r),e(K,b8),e(b8,Zue),e(Zue,Z_r),e(b8,eur),e(b8,_X),e(_X,our),e(b8,rur),e(K,tur),e(K,v8),e(v8,e1e),e(e1e,aur),e(v8,nur),e(v8,uX),e(uX,sur),e(v8,lur),e(K,iur),e(K,T8),e(T8,o1e),e(o1e,dur),e(T8,cur),e(T8,bX),e(bX,fur),e(T8,mur),e(K,gur),e(K,F8),e(F8,r1e),e(r1e,hur),e(F8,pur),e(F8,vX),e(vX,_ur),e(F8,uur),e(K,bur),e(K,C8),e(C8,t1e),e(t1e,vur),e(C8,Tur),e(C8,TX),e(TX,Fur),e(C8,Cur),e(K,Mur),e(K,M8),e(M8,a1e),e(a1e,Eur),e(M8,yur),e(M8,FX),e(FX,wur),e(M8,Aur),e(K,Lur),e(K,E8),e(E8,n1e),e(n1e,Bur),e(E8,xur),e(E8,CX),e(CX,kur),e(E8,Rur),e(K,Sur),e(K,y8),e(y8,s1e),e(s1e,Pur),e(y8,$ur),e(y8,MX),e(MX,Iur),e(y8,jur),e(K,Dur),e(K,w8),e(w8,l1e),e(l1e,Nur),e(w8,qur),e(w8,EX),e(EX,Our),e(w8,Gur),e(K,Xur),e(K,A8),e(A8,i1e),e(i1e,Vur),e(A8,zur),e(A8,yX),e(yX,Wur),e(A8,Qur),e(Mo,Hur),e(Mo,d1e),e(d1e,Uur),e(Mo,Jur),g(rA,Mo,null),b(d,gRe,u),b(d,Jc,u),e(Jc,L8),e(L8,c1e),g(tA,c1e,null),e(Jc,Yur),e(Jc,f1e),e(f1e,Kur),b(d,hRe,u),b(d,xr,u),g(aA,xr,null),e(xr,Zur),e(xr,Yc),e(Yc,e1r),e(Yc,m1e),e(m1e,o1r),e(Yc,r1r),e(Yc,g1e),e(g1e,t1r),e(Yc,a1r),e(xr,n1r),e(xr,nA),e(nA,s1r),e(nA,h1e),e(h1e,l1r),e(nA,i1r),e(xr,d1r),e(xr,yt),g(sA,yt,null),e(yt,c1r),e(yt,p1e),e(p1e,f1r),e(yt,m1r),e(yt,Kc),e(Kc,g1r),e(Kc,_1e),e(_1e,h1r),e(Kc,p1r),e(Kc,u1e),e(u1e,_1r),e(Kc,u1r),e(yt,b1r),e(yt,b1e),e(b1e,v1r),e(yt,T1r),g(lA,yt,null),e(xr,F1r),e(xr,Eo),g(iA,Eo,null),e(Eo,C1r),e(Eo,v1e),e(v1e,M1r),e(Eo,E1r),e(Eo,xn),e(xn,y1r),e(xn,T1e),e(T1e,w1r),e(xn,A1r),e(xn,F1e),e(F1e,L1r),e(xn,B1r),e(xn,C1e),e(C1e,x1r),e(xn,k1r),e(Eo,R1r),e(Eo,Z),e(Z,B8),e(B8,M1e),e(M1e,S1r),e(B8,P1r),e(B8,wX),e(wX,$1r),e(B8,I1r),e(Z,j1r),e(Z,x8),e(x8,E1e),e(E1e,D1r),e(x8,N1r),e(x8,AX),e(AX,q1r),e(x8,O1r),e(Z,G1r),e(Z,k8),e(k8,y1e),e(y1e,X1r),e(k8,V1r),e(k8,LX),e(LX,z1r),e(k8,W1r),e(Z,Q1r),e(Z,R8),e(R8,w1e),e(w1e,H1r),e(R8,U1r),e(R8,BX),e(BX,J1r),e(R8,Y1r),e(Z,K1r),e(Z,S8),e(S8,A1e),e(A1e,Z1r),e(S8,ebr),e(S8,xX),e(xX,obr),e(S8,rbr),e(Z,tbr),e(Z,P8),e(P8,L1e),e(L1e,abr),e(P8,nbr),e(P8,kX),e(kX,sbr),e(P8,lbr),e(Z,ibr),e(Z,$8),e($8,B1e),e(B1e,dbr),e($8,cbr),e($8,RX),e(RX,fbr),e($8,mbr),e(Z,gbr),e(Z,I8),e(I8,x1e),e(x1e,hbr),e(I8,pbr),e(I8,SX),e(SX,_br),e(I8,ubr),e(Z,bbr),e(Z,j8),e(j8,k1e),e(k1e,vbr),e(j8,Tbr),e(j8,PX),e(PX,Fbr),e(j8,Cbr),e(Z,Mbr),e(Z,D8),e(D8,R1e),e(R1e,Ebr),e(D8,ybr),e(D8,$X),e($X,wbr),e(D8,Abr),e(Z,Lbr),e(Z,N8),e(N8,S1e),e(S1e,Bbr),e(N8,xbr),e(N8,IX),e(IX,kbr),e(N8,Rbr),e(Z,Sbr),e(Z,q8),e(q8,P1e),e(P1e,Pbr),e(q8,$br),e(q8,jX),e(jX,Ibr),e(q8,jbr),e(Z,Dbr),e(Z,O8),e(O8,$1e),e($1e,Nbr),e(O8,qbr),e(O8,DX),e(DX,Obr),e(O8,Gbr),e(Z,Xbr),e(Z,G8),e(G8,I1e),e(I1e,Vbr),e(G8,zbr),e(G8,NX),e(NX,Wbr),e(G8,Qbr),e(Z,Hbr),e(Z,X8),e(X8,j1e),e(j1e,Ubr),e(X8,Jbr),e(X8,qX),e(qX,Ybr),e(X8,Kbr),e(Z,Zbr),e(Z,V8),e(V8,D1e),e(D1e,e5r),e(V8,o5r),e(V8,OX),e(OX,r5r),e(V8,t5r),e(Z,a5r),e(Z,z8),e(z8,N1e),e(N1e,n5r),e(z8,s5r),e(z8,GX),e(GX,l5r),e(z8,i5r),e(Z,d5r),e(Z,W8),e(W8,q1e),e(q1e,c5r),e(W8,f5r),e(W8,XX),e(XX,m5r),e(W8,g5r),e(Z,h5r),e(Z,Q8),e(Q8,O1e),e(O1e,p5r),e(Q8,_5r),e(Q8,VX),e(VX,u5r),e(Q8,b5r),e(Eo,v5r),e(Eo,G1e),e(G1e,T5r),e(Eo,F5r),g(dA,Eo,null),b(d,pRe,u),b(d,Zc,u),e(Zc,H8),e(H8,X1e),g(cA,X1e,null),e(Zc,C5r),e(Zc,V1e),e(V1e,M5r),b(d,_Re,u),b(d,kr,u),g(fA,kr,null),e(kr,E5r),e(kr,ef),e(ef,y5r),e(ef,z1e),e(z1e,w5r),e(ef,A5r),e(ef,W1e),e(W1e,L5r),e(ef,B5r),e(kr,x5r),e(kr,mA),e(mA,k5r),e(mA,Q1e),e(Q1e,R5r),e(mA,S5r),e(kr,P5r),e(kr,wt),g(gA,wt,null),e(wt,$5r),e(wt,H1e),e(H1e,I5r),e(wt,j5r),e(wt,of),e(of,D5r),e(of,U1e),e(U1e,N5r),e(of,q5r),e(of,J1e),e(J1e,O5r),e(of,G5r),e(wt,X5r),e(wt,Y1e),e(Y1e,V5r),e(wt,z5r),g(hA,wt,null),e(kr,W5r),e(kr,yo),g(pA,yo,null),e(yo,Q5r),e(yo,K1e),e(K1e,H5r),e(yo,U5r),e(yo,kn),e(kn,J5r),e(kn,Z1e),e(Z1e,Y5r),e(kn,K5r),e(kn,ebe),e(ebe,Z5r),e(kn,e2r),e(kn,obe),e(obe,o2r),e(kn,r2r),e(yo,t2r),e(yo,rbe),e(rbe,U8),e(U8,tbe),e(tbe,a2r),e(U8,n2r),e(U8,zX),e(zX,s2r),e(U8,l2r),e(yo,i2r),e(yo,abe),e(abe,d2r),e(yo,c2r),g(_A,yo,null),b(d,uRe,u),b(d,rf,u),e(rf,J8),e(J8,nbe),g(uA,nbe,null),e(rf,f2r),e(rf,sbe),e(sbe,m2r),b(d,bRe,u),b(d,Rr,u),g(bA,Rr,null),e(Rr,g2r),e(Rr,tf),e(tf,h2r),e(tf,lbe),e(lbe,p2r),e(tf,_2r),e(tf,ibe),e(ibe,u2r),e(tf,b2r),e(Rr,v2r),e(Rr,vA),e(vA,T2r),e(vA,dbe),e(dbe,F2r),e(vA,C2r),e(Rr,M2r),e(Rr,At),g(TA,At,null),e(At,E2r),e(At,cbe),e(cbe,y2r),e(At,w2r),e(At,af),e(af,A2r),e(af,fbe),e(fbe,L2r),e(af,B2r),e(af,mbe),e(mbe,x2r),e(af,k2r),e(At,R2r),e(At,gbe),e(gbe,S2r),e(At,P2r),g(FA,At,null),e(Rr,$2r),e(Rr,wo),g(CA,wo,null),e(wo,I2r),e(wo,hbe),e(hbe,j2r),e(wo,D2r),e(wo,Rn),e(Rn,N2r),e(Rn,pbe),e(pbe,q2r),e(Rn,O2r),e(Rn,_be),e(_be,G2r),e(Rn,X2r),e(Rn,ube),e(ube,V2r),e(Rn,z2r),e(wo,W2r),e(wo,bbe),e(bbe,Y8),e(Y8,vbe),e(vbe,Q2r),e(Y8,H2r),e(Y8,WX),e(WX,U2r),e(Y8,J2r),e(wo,Y2r),e(wo,Tbe),e(Tbe,K2r),e(wo,Z2r),g(MA,wo,null),b(d,vRe,u),b(d,nf,u),e(nf,K8),e(K8,Fbe),g(EA,Fbe,null),e(nf,evr),e(nf,Cbe),e(Cbe,ovr),b(d,TRe,u),b(d,Sr,u),g(yA,Sr,null),e(Sr,rvr),e(Sr,sf),e(sf,tvr),e(sf,Mbe),e(Mbe,avr),e(sf,nvr),e(sf,Ebe),e(Ebe,svr),e(sf,lvr),e(Sr,ivr),e(Sr,wA),e(wA,dvr),e(wA,ybe),e(ybe,cvr),e(wA,fvr),e(Sr,mvr),e(Sr,Lt),g(AA,Lt,null),e(Lt,gvr),e(Lt,wbe),e(wbe,hvr),e(Lt,pvr),e(Lt,lf),e(lf,_vr),e(lf,Abe),e(Abe,uvr),e(lf,bvr),e(lf,Lbe),e(Lbe,vvr),e(lf,Tvr),e(Lt,Fvr),e(Lt,Bbe),e(Bbe,Cvr),e(Lt,Mvr),g(LA,Lt,null),e(Sr,Evr),e(Sr,Ao),g(BA,Ao,null),e(Ao,yvr),e(Ao,xbe),e(xbe,wvr),e(Ao,Avr),e(Ao,Sn),e(Sn,Lvr),e(Sn,kbe),e(kbe,Bvr),e(Sn,xvr),e(Sn,Rbe),e(Rbe,kvr),e(Sn,Rvr),e(Sn,Sbe),e(Sbe,Svr),e(Sn,Pvr),e(Ao,$vr),e(Ao,z),e(z,Z8),e(Z8,Pbe),e(Pbe,Ivr),e(Z8,jvr),e(Z8,QX),e(QX,Dvr),e(Z8,Nvr),e(z,qvr),e(z,eF),e(eF,$be),e($be,Ovr),e(eF,Gvr),e(eF,HX),e(HX,Xvr),e(eF,Vvr),e(z,zvr),e(z,oF),e(oF,Ibe),e(Ibe,Wvr),e(oF,Qvr),e(oF,UX),e(UX,Hvr),e(oF,Uvr),e(z,Jvr),e(z,rF),e(rF,jbe),e(jbe,Yvr),e(rF,Kvr),e(rF,JX),e(JX,Zvr),e(rF,e6r),e(z,o6r),e(z,tF),e(tF,Dbe),e(Dbe,r6r),e(tF,t6r),e(tF,YX),e(YX,a6r),e(tF,n6r),e(z,s6r),e(z,aF),e(aF,Nbe),e(Nbe,l6r),e(aF,i6r),e(aF,KX),e(KX,d6r),e(aF,c6r),e(z,f6r),e(z,nF),e(nF,qbe),e(qbe,m6r),e(nF,g6r),e(nF,ZX),e(ZX,h6r),e(nF,p6r),e(z,_6r),e(z,sF),e(sF,Obe),e(Obe,u6r),e(sF,b6r),e(sF,eV),e(eV,v6r),e(sF,T6r),e(z,F6r),e(z,lF),e(lF,Gbe),e(Gbe,C6r),e(lF,M6r),e(lF,oV),e(oV,E6r),e(lF,y6r),e(z,w6r),e(z,iF),e(iF,Xbe),e(Xbe,A6r),e(iF,L6r),e(iF,rV),e(rV,B6r),e(iF,x6r),e(z,k6r),e(z,dF),e(dF,Vbe),e(Vbe,R6r),e(dF,S6r),e(dF,tV),e(tV,P6r),e(dF,$6r),e(z,I6r),e(z,cF),e(cF,zbe),e(zbe,j6r),e(cF,D6r),e(cF,aV),e(aV,N6r),e(cF,q6r),e(z,O6r),e(z,fF),e(fF,Wbe),e(Wbe,G6r),e(fF,X6r),e(fF,nV),e(nV,V6r),e(fF,z6r),e(z,W6r),e(z,mF),e(mF,Qbe),e(Qbe,Q6r),e(mF,H6r),e(mF,sV),e(sV,U6r),e(mF,J6r),e(z,Y6r),e(z,gF),e(gF,Hbe),e(Hbe,K6r),e(gF,Z6r),e(gF,lV),e(lV,e0r),e(gF,o0r),e(z,r0r),e(z,hF),e(hF,Ube),e(Ube,t0r),e(hF,a0r),e(hF,iV),e(iV,n0r),e(hF,s0r),e(z,l0r),e(z,pF),e(pF,Jbe),e(Jbe,i0r),e(pF,d0r),e(pF,dV),e(dV,c0r),e(pF,f0r),e(z,m0r),e(z,_F),e(_F,Ybe),e(Ybe,g0r),e(_F,h0r),e(_F,cV),e(cV,p0r),e(_F,_0r),e(z,u0r),e(z,uF),e(uF,Kbe),e(Kbe,b0r),e(uF,v0r),e(uF,fV),e(fV,T0r),e(uF,F0r),e(z,C0r),e(z,bF),e(bF,Zbe),e(Zbe,M0r),e(bF,E0r),e(bF,mV),e(mV,y0r),e(bF,w0r),e(z,A0r),e(z,vF),e(vF,e5e),e(e5e,L0r),e(vF,B0r),e(vF,gV),e(gV,x0r),e(vF,k0r),e(z,R0r),e(z,TF),e(TF,o5e),e(o5e,S0r),e(TF,P0r),e(TF,hV),e(hV,$0r),e(TF,I0r),e(z,j0r),e(z,FF),e(FF,r5e),e(r5e,D0r),e(FF,N0r),e(FF,pV),e(pV,q0r),e(FF,O0r),e(z,G0r),e(z,CF),e(CF,t5e),e(t5e,X0r),e(CF,V0r),e(CF,_V),e(_V,z0r),e(CF,W0r),e(z,Q0r),e(z,MF),e(MF,a5e),e(a5e,H0r),e(MF,U0r),e(MF,uV),e(uV,J0r),e(MF,Y0r),e(Ao,K0r),e(Ao,n5e),e(n5e,Z0r),e(Ao,eTr),g(xA,Ao,null),b(d,FRe,u),b(d,df,u),e(df,EF),e(EF,s5e),g(kA,s5e,null),e(df,oTr),e(df,l5e),e(l5e,rTr),b(d,CRe,u),b(d,Pr,u),g(RA,Pr,null),e(Pr,tTr),e(Pr,cf),e(cf,aTr),e(cf,i5e),e(i5e,nTr),e(cf,sTr),e(cf,d5e),e(d5e,lTr),e(cf,iTr),e(Pr,dTr),e(Pr,SA),e(SA,cTr),e(SA,c5e),e(c5e,fTr),e(SA,mTr),e(Pr,gTr),e(Pr,Bt),g(PA,Bt,null),e(Bt,hTr),e(Bt,f5e),e(f5e,pTr),e(Bt,_Tr),e(Bt,ff),e(ff,uTr),e(ff,m5e),e(m5e,bTr),e(ff,vTr),e(ff,g5e),e(g5e,TTr),e(ff,FTr),e(Bt,CTr),e(Bt,h5e),e(h5e,MTr),e(Bt,ETr),g($A,Bt,null),e(Pr,yTr),e(Pr,Lo),g(IA,Lo,null),e(Lo,wTr),e(Lo,p5e),e(p5e,ATr),e(Lo,LTr),e(Lo,Pn),e(Pn,BTr),e(Pn,_5e),e(_5e,xTr),e(Pn,kTr),e(Pn,u5e),e(u5e,RTr),e(Pn,STr),e(Pn,b5e),e(b5e,PTr),e(Pn,$Tr),e(Lo,ITr),e(Lo,ga),e(ga,yF),e(yF,v5e),e(v5e,jTr),e(yF,DTr),e(yF,bV),e(bV,NTr),e(yF,qTr),e(ga,OTr),e(ga,wF),e(wF,T5e),e(T5e,GTr),e(wF,XTr),e(wF,vV),e(vV,VTr),e(wF,zTr),e(ga,WTr),e(ga,AF),e(AF,F5e),e(F5e,QTr),e(AF,HTr),e(AF,TV),e(TV,UTr),e(AF,JTr),e(ga,YTr),e(ga,LF),e(LF,C5e),e(C5e,KTr),e(LF,ZTr),e(LF,FV),e(FV,e8r),e(LF,o8r),e(ga,r8r),e(ga,BF),e(BF,M5e),e(M5e,t8r),e(BF,a8r),e(BF,CV),e(CV,n8r),e(BF,s8r),e(Lo,l8r),e(Lo,E5e),e(E5e,i8r),e(Lo,d8r),g(jA,Lo,null),b(d,MRe,u),b(d,mf,u),e(mf,xF),e(xF,y5e),g(DA,y5e,null),e(mf,c8r),e(mf,w5e),e(w5e,f8r),b(d,ERe,u),b(d,$r,u),g(NA,$r,null),e($r,m8r),e($r,gf),e(gf,g8r),e(gf,A5e),e(A5e,h8r),e(gf,p8r),e(gf,L5e),e(L5e,_8r),e(gf,u8r),e($r,b8r),e($r,qA),e(qA,v8r),e(qA,B5e),e(B5e,T8r),e(qA,F8r),e($r,C8r),e($r,xt),g(OA,xt,null),e(xt,M8r),e(xt,x5e),e(x5e,E8r),e(xt,y8r),e(xt,hf),e(hf,w8r),e(hf,k5e),e(k5e,A8r),e(hf,L8r),e(hf,R5e),e(R5e,B8r),e(hf,x8r),e(xt,k8r),e(xt,S5e),e(S5e,R8r),e(xt,S8r),g(GA,xt,null),e($r,P8r),e($r,Bo),g(XA,Bo,null),e(Bo,$8r),e(Bo,P5e),e(P5e,I8r),e(Bo,j8r),e(Bo,$n),e($n,D8r),e($n,$5e),e($5e,N8r),e($n,q8r),e($n,I5e),e(I5e,O8r),e($n,G8r),e($n,j5e),e(j5e,X8r),e($n,V8r),e(Bo,z8r),e(Bo,ce),e(ce,kF),e(kF,D5e),e(D5e,W8r),e(kF,Q8r),e(kF,MV),e(MV,H8r),e(kF,U8r),e(ce,J8r),e(ce,RF),e(RF,N5e),e(N5e,Y8r),e(RF,K8r),e(RF,EV),e(EV,Z8r),e(RF,eFr),e(ce,oFr),e(ce,SF),e(SF,q5e),e(q5e,rFr),e(SF,tFr),e(SF,yV),e(yV,aFr),e(SF,nFr),e(ce,sFr),e(ce,PF),e(PF,O5e),e(O5e,lFr),e(PF,iFr),e(PF,wV),e(wV,dFr),e(PF,cFr),e(ce,fFr),e(ce,$F),e($F,G5e),e(G5e,mFr),e($F,gFr),e($F,AV),e(AV,hFr),e($F,pFr),e(ce,_Fr),e(ce,IF),e(IF,X5e),e(X5e,uFr),e(IF,bFr),e(IF,LV),e(LV,vFr),e(IF,TFr),e(ce,FFr),e(ce,jF),e(jF,V5e),e(V5e,CFr),e(jF,MFr),e(jF,BV),e(BV,EFr),e(jF,yFr),e(ce,wFr),e(ce,DF),e(DF,z5e),e(z5e,AFr),e(DF,LFr),e(DF,xV),e(xV,BFr),e(DF,xFr),e(ce,kFr),e(ce,NF),e(NF,W5e),e(W5e,RFr),e(NF,SFr),e(NF,kV),e(kV,PFr),e(NF,$Fr),e(ce,IFr),e(ce,qF),e(qF,Q5e),e(Q5e,jFr),e(qF,DFr),e(qF,RV),e(RV,NFr),e(qF,qFr),e(ce,OFr),e(ce,OF),e(OF,H5e),e(H5e,GFr),e(OF,XFr),e(OF,SV),e(SV,VFr),e(OF,zFr),e(ce,WFr),e(ce,GF),e(GF,U5e),e(U5e,QFr),e(GF,HFr),e(GF,PV),e(PV,UFr),e(GF,JFr),e(Bo,YFr),e(Bo,J5e),e(J5e,KFr),e(Bo,ZFr),g(VA,Bo,null),b(d,yRe,u),b(d,pf,u),e(pf,XF),e(XF,Y5e),g(zA,Y5e,null),e(pf,eCr),e(pf,K5e),e(K5e,oCr),b(d,wRe,u),b(d,Ir,u),g(WA,Ir,null),e(Ir,rCr),e(Ir,_f),e(_f,tCr),e(_f,Z5e),e(Z5e,aCr),e(_f,nCr),e(_f,e2e),e(e2e,sCr),e(_f,lCr),e(Ir,iCr),e(Ir,QA),e(QA,dCr),e(QA,o2e),e(o2e,cCr),e(QA,fCr),e(Ir,mCr),e(Ir,kt),g(HA,kt,null),e(kt,gCr),e(kt,r2e),e(r2e,hCr),e(kt,pCr),e(kt,uf),e(uf,_Cr),e(uf,t2e),e(t2e,uCr),e(uf,bCr),e(uf,a2e),e(a2e,vCr),e(uf,TCr),e(kt,FCr),e(kt,n2e),e(n2e,CCr),e(kt,MCr),g(UA,kt,null),e(Ir,ECr),e(Ir,xo),g(JA,xo,null),e(xo,yCr),e(xo,s2e),e(s2e,wCr),e(xo,ACr),e(xo,In),e(In,LCr),e(In,l2e),e(l2e,BCr),e(In,xCr),e(In,i2e),e(i2e,kCr),e(In,RCr),e(In,d2e),e(d2e,SCr),e(In,PCr),e(xo,$Cr),e(xo,ue),e(ue,VF),e(VF,c2e),e(c2e,ICr),e(VF,jCr),e(VF,$V),e($V,DCr),e(VF,NCr),e(ue,qCr),e(ue,zF),e(zF,f2e),e(f2e,OCr),e(zF,GCr),e(zF,IV),e(IV,XCr),e(zF,VCr),e(ue,zCr),e(ue,WF),e(WF,m2e),e(m2e,WCr),e(WF,QCr),e(WF,jV),e(jV,HCr),e(WF,UCr),e(ue,JCr),e(ue,QF),e(QF,g2e),e(g2e,YCr),e(QF,KCr),e(QF,DV),e(DV,ZCr),e(QF,eMr),e(ue,oMr),e(ue,HF),e(HF,h2e),e(h2e,rMr),e(HF,tMr),e(HF,NV),e(NV,aMr),e(HF,nMr),e(ue,sMr),e(ue,UF),e(UF,p2e),e(p2e,lMr),e(UF,iMr),e(UF,qV),e(qV,dMr),e(UF,cMr),e(ue,fMr),e(ue,JF),e(JF,_2e),e(_2e,mMr),e(JF,gMr),e(JF,OV),e(OV,hMr),e(JF,pMr),e(ue,_Mr),e(ue,YF),e(YF,u2e),e(u2e,uMr),e(YF,bMr),e(YF,GV),e(GV,vMr),e(YF,TMr),e(ue,FMr),e(ue,KF),e(KF,b2e),e(b2e,CMr),e(KF,MMr),e(KF,XV),e(XV,EMr),e(KF,yMr),e(ue,wMr),e(ue,ZF),e(ZF,v2e),e(v2e,AMr),e(ZF,LMr),e(ZF,VV),e(VV,BMr),e(ZF,xMr),e(xo,kMr),e(xo,T2e),e(T2e,RMr),e(xo,SMr),g(YA,xo,null),b(d,ARe,u),b(d,bf,u),e(bf,eC),e(eC,F2e),g(KA,F2e,null),e(bf,PMr),e(bf,C2e),e(C2e,$Mr),b(d,LRe,u),b(d,jr,u),g(ZA,jr,null),e(jr,IMr),e(jr,vf),e(vf,jMr),e(vf,M2e),e(M2e,DMr),e(vf,NMr),e(vf,E2e),e(E2e,qMr),e(vf,OMr),e(jr,GMr),e(jr,eL),e(eL,XMr),e(eL,y2e),e(y2e,VMr),e(eL,zMr),e(jr,WMr),e(jr,Rt),g(oL,Rt,null),e(Rt,QMr),e(Rt,w2e),e(w2e,HMr),e(Rt,UMr),e(Rt,Tf),e(Tf,JMr),e(Tf,A2e),e(A2e,YMr),e(Tf,KMr),e(Tf,L2e),e(L2e,ZMr),e(Tf,e4r),e(Rt,o4r),e(Rt,B2e),e(B2e,r4r),e(Rt,t4r),g(rL,Rt,null),e(jr,a4r),e(jr,ko),g(tL,ko,null),e(ko,n4r),e(ko,x2e),e(x2e,s4r),e(ko,l4r),e(ko,jn),e(jn,i4r),e(jn,k2e),e(k2e,d4r),e(jn,c4r),e(jn,R2e),e(R2e,f4r),e(jn,m4r),e(jn,S2e),e(S2e,g4r),e(jn,h4r),e(ko,p4r),e(ko,Ce),e(Ce,oC),e(oC,P2e),e(P2e,_4r),e(oC,u4r),e(oC,zV),e(zV,b4r),e(oC,v4r),e(Ce,T4r),e(Ce,rC),e(rC,$2e),e($2e,F4r),e(rC,C4r),e(rC,WV),e(WV,M4r),e(rC,E4r),e(Ce,y4r),e(Ce,tC),e(tC,I2e),e(I2e,w4r),e(tC,A4r),e(tC,QV),e(QV,L4r),e(tC,B4r),e(Ce,x4r),e(Ce,aC),e(aC,j2e),e(j2e,k4r),e(aC,R4r),e(aC,HV),e(HV,S4r),e(aC,P4r),e(Ce,$4r),e(Ce,nC),e(nC,D2e),e(D2e,I4r),e(nC,j4r),e(nC,UV),e(UV,D4r),e(nC,N4r),e(Ce,q4r),e(Ce,sC),e(sC,N2e),e(N2e,O4r),e(sC,G4r),e(sC,JV),e(JV,X4r),e(sC,V4r),e(Ce,z4r),e(Ce,lC),e(lC,q2e),e(q2e,W4r),e(lC,Q4r),e(lC,YV),e(YV,H4r),e(lC,U4r),e(Ce,J4r),e(Ce,iC),e(iC,O2e),e(O2e,Y4r),e(iC,K4r),e(iC,KV),e(KV,Z4r),e(iC,eEr),e(Ce,oEr),e(Ce,dC),e(dC,G2e),e(G2e,rEr),e(dC,tEr),e(dC,ZV),e(ZV,aEr),e(dC,nEr),e(ko,sEr),e(ko,X2e),e(X2e,lEr),e(ko,iEr),g(aL,ko,null),b(d,BRe,u),b(d,Ff,u),e(Ff,cC),e(cC,V2e),g(nL,V2e,null),e(Ff,dEr),e(Ff,z2e),e(z2e,cEr),b(d,xRe,u),b(d,Dr,u),g(sL,Dr,null),e(Dr,fEr),e(Dr,Cf),e(Cf,mEr),e(Cf,W2e),e(W2e,gEr),e(Cf,hEr),e(Cf,Q2e),e(Q2e,pEr),e(Cf,_Er),e(Dr,uEr),e(Dr,lL),e(lL,bEr),e(lL,H2e),e(H2e,vEr),e(lL,TEr),e(Dr,FEr),e(Dr,St),g(iL,St,null),e(St,CEr),e(St,U2e),e(U2e,MEr),e(St,EEr),e(St,Mf),e(Mf,yEr),e(Mf,J2e),e(J2e,wEr),e(Mf,AEr),e(Mf,Y2e),e(Y2e,LEr),e(Mf,BEr),e(St,xEr),e(St,K2e),e(K2e,kEr),e(St,REr),g(dL,St,null),e(Dr,SEr),e(Dr,Ro),g(cL,Ro,null),e(Ro,PEr),e(Ro,Z2e),e(Z2e,$Er),e(Ro,IEr),e(Ro,Dn),e(Dn,jEr),e(Dn,eve),e(eve,DEr),e(Dn,NEr),e(Dn,ove),e(ove,qEr),e(Dn,OEr),e(Dn,rve),e(rve,GEr),e(Dn,XEr),e(Ro,VEr),e(Ro,be),e(be,fC),e(fC,tve),e(tve,zEr),e(fC,WEr),e(fC,ez),e(ez,QEr),e(fC,HEr),e(be,UEr),e(be,mC),e(mC,ave),e(ave,JEr),e(mC,YEr),e(mC,oz),e(oz,KEr),e(mC,ZEr),e(be,e3r),e(be,gC),e(gC,nve),e(nve,o3r),e(gC,r3r),e(gC,rz),e(rz,t3r),e(gC,a3r),e(be,n3r),e(be,hC),e(hC,sve),e(sve,s3r),e(hC,l3r),e(hC,tz),e(tz,i3r),e(hC,d3r),e(be,c3r),e(be,pC),e(pC,lve),e(lve,f3r),e(pC,m3r),e(pC,az),e(az,g3r),e(pC,h3r),e(be,p3r),e(be,_C),e(_C,ive),e(ive,_3r),e(_C,u3r),e(_C,nz),e(nz,b3r),e(_C,v3r),e(be,T3r),e(be,uC),e(uC,dve),e(dve,F3r),e(uC,C3r),e(uC,sz),e(sz,M3r),e(uC,E3r),e(be,y3r),e(be,bC),e(bC,cve),e(cve,w3r),e(bC,A3r),e(bC,lz),e(lz,L3r),e(bC,B3r),e(be,x3r),e(be,vC),e(vC,fve),e(fve,k3r),e(vC,R3r),e(vC,iz),e(iz,S3r),e(vC,P3r),e(be,$3r),e(be,TC),e(TC,mve),e(mve,I3r),e(TC,j3r),e(TC,dz),e(dz,D3r),e(TC,N3r),e(Ro,q3r),e(Ro,gve),e(gve,O3r),e(Ro,G3r),g(fL,Ro,null),b(d,kRe,u),b(d,Ef,u),e(Ef,FC),e(FC,hve),g(mL,hve,null),e(Ef,X3r),e(Ef,pve),e(pve,V3r),b(d,RRe,u),b(d,Nr,u),g(gL,Nr,null),e(Nr,z3r),e(Nr,yf),e(yf,W3r),e(yf,_ve),e(_ve,Q3r),e(yf,H3r),e(yf,uve),e(uve,U3r),e(yf,J3r),e(Nr,Y3r),e(Nr,hL),e(hL,K3r),e(hL,bve),e(bve,Z3r),e(hL,eyr),e(Nr,oyr),e(Nr,Pt),g(pL,Pt,null),e(Pt,ryr),e(Pt,vve),e(vve,tyr),e(Pt,ayr),e(Pt,wf),e(wf,nyr),e(wf,Tve),e(Tve,syr),e(wf,lyr),e(wf,Fve),e(Fve,iyr),e(wf,dyr),e(Pt,cyr),e(Pt,Cve),e(Cve,fyr),e(Pt,myr),g(_L,Pt,null),e(Nr,gyr),e(Nr,So),g(uL,So,null),e(So,hyr),e(So,Mve),e(Mve,pyr),e(So,_yr),e(So,Nn),e(Nn,uyr),e(Nn,Eve),e(Eve,byr),e(Nn,vyr),e(Nn,yve),e(yve,Tyr),e(Nn,Fyr),e(Nn,wve),e(wve,Cyr),e(Nn,Myr),e(So,Eyr),e(So,Ave),e(Ave,CC),e(CC,Lve),e(Lve,yyr),e(CC,wyr),e(CC,cz),e(cz,Ayr),e(CC,Lyr),e(So,Byr),e(So,Bve),e(Bve,xyr),e(So,kyr),g(bL,So,null),b(d,SRe,u),b(d,Af,u),e(Af,MC),e(MC,xve),g(vL,xve,null),e(Af,Ryr),e(Af,kve),e(kve,Syr),b(d,PRe,u),b(d,qr,u),g(TL,qr,null),e(qr,Pyr),e(qr,Lf),e(Lf,$yr),e(Lf,Rve),e(Rve,Iyr),e(Lf,jyr),e(Lf,Sve),e(Sve,Dyr),e(Lf,Nyr),e(qr,qyr),e(qr,FL),e(FL,Oyr),e(FL,Pve),e(Pve,Gyr),e(FL,Xyr),e(qr,Vyr),e(qr,$t),g(CL,$t,null),e($t,zyr),e($t,$ve),e($ve,Wyr),e($t,Qyr),e($t,Bf),e(Bf,Hyr),e(Bf,Ive),e(Ive,Uyr),e(Bf,Jyr),e(Bf,jve),e(jve,Yyr),e(Bf,Kyr),e($t,Zyr),e($t,Dve),e(Dve,ewr),e($t,owr),g(ML,$t,null),e(qr,rwr),e(qr,Po),g(EL,Po,null),e(Po,twr),e(Po,Nve),e(Nve,awr),e(Po,nwr),e(Po,qn),e(qn,swr),e(qn,qve),e(qve,lwr),e(qn,iwr),e(qn,Ove),e(Ove,dwr),e(qn,cwr),e(qn,Gve),e(Gve,fwr),e(qn,mwr),e(Po,gwr),e(Po,ve),e(ve,EC),e(EC,Xve),e(Xve,hwr),e(EC,pwr),e(EC,fz),e(fz,_wr),e(EC,uwr),e(ve,bwr),e(ve,yC),e(yC,Vve),e(Vve,vwr),e(yC,Twr),e(yC,mz),e(mz,Fwr),e(yC,Cwr),e(ve,Mwr),e(ve,wC),e(wC,zve),e(zve,Ewr),e(wC,ywr),e(wC,gz),e(gz,wwr),e(wC,Awr),e(ve,Lwr),e(ve,AC),e(AC,Wve),e(Wve,Bwr),e(AC,xwr),e(AC,hz),e(hz,kwr),e(AC,Rwr),e(ve,Swr),e(ve,LC),e(LC,Qve),e(Qve,Pwr),e(LC,$wr),e(LC,pz),e(pz,Iwr),e(LC,jwr),e(ve,Dwr),e(ve,BC),e(BC,Hve),e(Hve,Nwr),e(BC,qwr),e(BC,_z),e(_z,Owr),e(BC,Gwr),e(ve,Xwr),e(ve,xC),e(xC,Uve),e(Uve,Vwr),e(xC,zwr),e(xC,uz),e(uz,Wwr),e(xC,Qwr),e(ve,Hwr),e(ve,kC),e(kC,Jve),e(Jve,Uwr),e(kC,Jwr),e(kC,bz),e(bz,Ywr),e(kC,Kwr),e(ve,Zwr),e(ve,RC),e(RC,Yve),e(Yve,eAr),e(RC,oAr),e(RC,vz),e(vz,rAr),e(RC,tAr),e(ve,aAr),e(ve,SC),e(SC,Kve),e(Kve,nAr),e(SC,sAr),e(SC,Tz),e(Tz,lAr),e(SC,iAr),e(Po,dAr),e(Po,Zve),e(Zve,cAr),e(Po,fAr),g(yL,Po,null),b(d,$Re,u),b(d,xf,u),e(xf,PC),e(PC,e6e),g(wL,e6e,null),e(xf,mAr),e(xf,o6e),e(o6e,gAr),b(d,IRe,u),b(d,Or,u),g(AL,Or,null),e(Or,hAr),e(Or,kf),e(kf,pAr),e(kf,r6e),e(r6e,_Ar),e(kf,uAr),e(kf,t6e),e(t6e,bAr),e(kf,vAr),e(Or,TAr),e(Or,LL),e(LL,FAr),e(LL,a6e),e(a6e,CAr),e(LL,MAr),e(Or,EAr),e(Or,It),g(BL,It,null),e(It,yAr),e(It,n6e),e(n6e,wAr),e(It,AAr),e(It,Rf),e(Rf,LAr),e(Rf,s6e),e(s6e,BAr),e(Rf,xAr),e(Rf,l6e),e(l6e,kAr),e(Rf,RAr),e(It,SAr),e(It,i6e),e(i6e,PAr),e(It,$Ar),g(xL,It,null),e(Or,IAr),e(Or,$o),g(kL,$o,null),e($o,jAr),e($o,d6e),e(d6e,DAr),e($o,NAr),e($o,On),e(On,qAr),e(On,c6e),e(c6e,OAr),e(On,GAr),e(On,f6e),e(f6e,XAr),e(On,VAr),e(On,m6e),e(m6e,zAr),e(On,WAr),e($o,QAr),e($o,Re),e(Re,$C),e($C,g6e),e(g6e,HAr),e($C,UAr),e($C,Fz),e(Fz,JAr),e($C,YAr),e(Re,KAr),e(Re,IC),e(IC,h6e),e(h6e,ZAr),e(IC,eLr),e(IC,Cz),e(Cz,oLr),e(IC,rLr),e(Re,tLr),e(Re,jC),e(jC,p6e),e(p6e,aLr),e(jC,nLr),e(jC,Mz),e(Mz,sLr),e(jC,lLr),e(Re,iLr),e(Re,DC),e(DC,_6e),e(_6e,dLr),e(DC,cLr),e(DC,Ez),e(Ez,fLr),e(DC,mLr),e(Re,gLr),e(Re,NC),e(NC,u6e),e(u6e,hLr),e(NC,pLr),e(NC,yz),e(yz,_Lr),e(NC,uLr),e(Re,bLr),e(Re,qC),e(qC,b6e),e(b6e,vLr),e(qC,TLr),e(qC,wz),e(wz,FLr),e(qC,CLr),e(Re,MLr),e(Re,OC),e(OC,v6e),e(v6e,ELr),e(OC,yLr),e(OC,Az),e(Az,wLr),e(OC,ALr),e(Re,LLr),e(Re,GC),e(GC,T6e),e(T6e,BLr),e(GC,xLr),e(GC,Lz),e(Lz,kLr),e(GC,RLr),e($o,SLr),e($o,F6e),e(F6e,PLr),e($o,$Lr),g(RL,$o,null),b(d,jRe,u),b(d,Sf,u),e(Sf,XC),e(XC,C6e),g(SL,C6e,null),e(Sf,ILr),e(Sf,M6e),e(M6e,jLr),b(d,DRe,u),b(d,Gr,u),g(PL,Gr,null),e(Gr,DLr),e(Gr,Pf),e(Pf,NLr),e(Pf,E6e),e(E6e,qLr),e(Pf,OLr),e(Pf,y6e),e(y6e,GLr),e(Pf,XLr),e(Gr,VLr),e(Gr,$L),e($L,zLr),e($L,w6e),e(w6e,WLr),e($L,QLr),e(Gr,HLr),e(Gr,jt),g(IL,jt,null),e(jt,ULr),e(jt,A6e),e(A6e,JLr),e(jt,YLr),e(jt,$f),e($f,KLr),e($f,L6e),e(L6e,ZLr),e($f,e7r),e($f,B6e),e(B6e,o7r),e($f,r7r),e(jt,t7r),e(jt,x6e),e(x6e,a7r),e(jt,n7r),g(jL,jt,null),e(Gr,s7r),e(Gr,Io),g(DL,Io,null),e(Io,l7r),e(Io,k6e),e(k6e,i7r),e(Io,d7r),e(Io,Gn),e(Gn,c7r),e(Gn,R6e),e(R6e,f7r),e(Gn,m7r),e(Gn,S6e),e(S6e,g7r),e(Gn,h7r),e(Gn,P6e),e(P6e,p7r),e(Gn,_7r),e(Io,u7r),e(Io,Se),e(Se,VC),e(VC,$6e),e($6e,b7r),e(VC,v7r),e(VC,Bz),e(Bz,T7r),e(VC,F7r),e(Se,C7r),e(Se,zC),e(zC,I6e),e(I6e,M7r),e(zC,E7r),e(zC,xz),e(xz,y7r),e(zC,w7r),e(Se,A7r),e(Se,WC),e(WC,j6e),e(j6e,L7r),e(WC,B7r),e(WC,kz),e(kz,x7r),e(WC,k7r),e(Se,R7r),e(Se,QC),e(QC,D6e),e(D6e,S7r),e(QC,P7r),e(QC,Rz),e(Rz,$7r),e(QC,I7r),e(Se,j7r),e(Se,HC),e(HC,N6e),e(N6e,D7r),e(HC,N7r),e(HC,Sz),e(Sz,q7r),e(HC,O7r),e(Se,G7r),e(Se,UC),e(UC,q6e),e(q6e,X7r),e(UC,V7r),e(UC,Pz),e(Pz,z7r),e(UC,W7r),e(Se,Q7r),e(Se,JC),e(JC,O6e),e(O6e,H7r),e(JC,U7r),e(JC,$z),e($z,J7r),e(JC,Y7r),e(Se,K7r),e(Se,YC),e(YC,G6e),e(G6e,Z7r),e(YC,e9r),e(YC,Iz),e(Iz,o9r),e(YC,r9r),e(Io,t9r),e(Io,X6e),e(X6e,a9r),e(Io,n9r),g(NL,Io,null),b(d,NRe,u),b(d,If,u),e(If,KC),e(KC,V6e),g(qL,V6e,null),e(If,s9r),e(If,z6e),e(z6e,l9r),b(d,qRe,u),b(d,Xr,u),g(OL,Xr,null),e(Xr,i9r),e(Xr,jf),e(jf,d9r),e(jf,W6e),e(W6e,c9r),e(jf,f9r),e(jf,Q6e),e(Q6e,m9r),e(jf,g9r),e(Xr,h9r),e(Xr,GL),e(GL,p9r),e(GL,H6e),e(H6e,_9r),e(GL,u9r),e(Xr,b9r),e(Xr,Dt),g(XL,Dt,null),e(Dt,v9r),e(Dt,U6e),e(U6e,T9r),e(Dt,F9r),e(Dt,Df),e(Df,C9r),e(Df,J6e),e(J6e,M9r),e(Df,E9r),e(Df,Y6e),e(Y6e,y9r),e(Df,w9r),e(Dt,A9r),e(Dt,K6e),e(K6e,L9r),e(Dt,B9r),g(VL,Dt,null),e(Xr,x9r),e(Xr,jo),g(zL,jo,null),e(jo,k9r),e(jo,Z6e),e(Z6e,R9r),e(jo,S9r),e(jo,Xn),e(Xn,P9r),e(Xn,e0e),e(e0e,$9r),e(Xn,I9r),e(Xn,o0e),e(o0e,j9r),e(Xn,D9r),e(Xn,r0e),e(r0e,N9r),e(Xn,q9r),e(jo,O9r),e(jo,t0e),e(t0e,ZC),e(ZC,a0e),e(a0e,G9r),e(ZC,X9r),e(ZC,jz),e(jz,V9r),e(ZC,z9r),e(jo,W9r),e(jo,n0e),e(n0e,Q9r),e(jo,H9r),g(WL,jo,null),b(d,ORe,u),b(d,Nf,u),e(Nf,eM),e(eM,s0e),g(QL,s0e,null),e(Nf,U9r),e(Nf,l0e),e(l0e,J9r),b(d,GRe,u),b(d,Vr,u),g(HL,Vr,null),e(Vr,Y9r),e(Vr,qf),e(qf,K9r),e(qf,i0e),e(i0e,Z9r),e(qf,eBr),e(qf,d0e),e(d0e,oBr),e(qf,rBr),e(Vr,tBr),e(Vr,UL),e(UL,aBr),e(UL,c0e),e(c0e,nBr),e(UL,sBr),e(Vr,lBr),e(Vr,Nt),g(JL,Nt,null),e(Nt,iBr),e(Nt,f0e),e(f0e,dBr),e(Nt,cBr),e(Nt,Of),e(Of,fBr),e(Of,m0e),e(m0e,mBr),e(Of,gBr),e(Of,g0e),e(g0e,hBr),e(Of,pBr),e(Nt,_Br),e(Nt,h0e),e(h0e,uBr),e(Nt,bBr),g(YL,Nt,null),e(Vr,vBr),e(Vr,Do),g(KL,Do,null),e(Do,TBr),e(Do,p0e),e(p0e,FBr),e(Do,CBr),e(Do,Vn),e(Vn,MBr),e(Vn,_0e),e(_0e,EBr),e(Vn,yBr),e(Vn,u0e),e(u0e,wBr),e(Vn,ABr),e(Vn,b0e),e(b0e,LBr),e(Vn,BBr),e(Do,xBr),e(Do,ZL),e(ZL,oM),e(oM,v0e),e(v0e,kBr),e(oM,RBr),e(oM,Dz),e(Dz,SBr),e(oM,PBr),e(ZL,$Br),e(ZL,rM),e(rM,T0e),e(T0e,IBr),e(rM,jBr),e(rM,Nz),e(Nz,DBr),e(rM,NBr),e(Do,qBr),e(Do,F0e),e(F0e,OBr),e(Do,GBr),g(e7,Do,null),b(d,XRe,u),b(d,Gf,u),e(Gf,tM),e(tM,C0e),g(o7,C0e,null),e(Gf,XBr),e(Gf,M0e),e(M0e,VBr),b(d,VRe,u),b(d,zr,u),g(r7,zr,null),e(zr,zBr),e(zr,Xf),e(Xf,WBr),e(Xf,E0e),e(E0e,QBr),e(Xf,HBr),e(Xf,y0e),e(y0e,UBr),e(Xf,JBr),e(zr,YBr),e(zr,t7),e(t7,KBr),e(t7,w0e),e(w0e,ZBr),e(t7,exr),e(zr,oxr),e(zr,qt),g(a7,qt,null),e(qt,rxr),e(qt,A0e),e(A0e,txr),e(qt,axr),e(qt,Vf),e(Vf,nxr),e(Vf,L0e),e(L0e,sxr),e(Vf,lxr),e(Vf,B0e),e(B0e,ixr),e(Vf,dxr),e(qt,cxr),e(qt,x0e),e(x0e,fxr),e(qt,mxr),g(n7,qt,null),e(zr,gxr),e(zr,No),g(s7,No,null),e(No,hxr),e(No,k0e),e(k0e,pxr),e(No,_xr),e(No,zn),e(zn,uxr),e(zn,R0e),e(R0e,bxr),e(zn,vxr),e(zn,S0e),e(S0e,Txr),e(zn,Fxr),e(zn,P0e),e(P0e,Cxr),e(zn,Mxr),e(No,Exr),e(No,$0e),e($0e,aM),e(aM,I0e),e(I0e,yxr),e(aM,wxr),e(aM,qz),e(qz,Axr),e(aM,Lxr),e(No,Bxr),e(No,j0e),e(j0e,xxr),e(No,kxr),g(l7,No,null),zRe=!0},p(d,[u]){const i7={};u&2&&(i7.$$scope={dirty:u,ctx:d}),Yf.$set(i7);const D0e={};u&2&&(D0e.$$scope={dirty:u,ctx:d}),Ph.$set(D0e);const N0e={};u&2&&(N0e.$$scope={dirty:u,ctx:d}),zh.$set(N0e)},i(d){zRe||(h(fe.$$.fragment,d),h(Va.$$.fragment,d),h(d4.$$.fragment,d),h(c4.$$.fragment,d),h(Yf.$$.fragment,d),h(f4.$$.fragment,d),h(m4.$$.fragment,d),h(p4.$$.fragment,d),h(_4.$$.fragment,d),h(u4.$$.fragment,d),h(b4.$$.fragment,d),h(v4.$$.fragment,d),h(C4.$$.fragment,d),h(M4.$$.fragment,d),h(E4.$$.fragment,d),h(y4.$$.fragment,d),h(w4.$$.fragment,d),h(B4.$$.fragment,d),h(Ph.$$.fragment,d),h(x4.$$.fragment,d),h(k4.$$.fragment,d),h(R4.$$.fragment,d),h(S4.$$.fragment,d),h(I4.$$.fragment,d),h(zh.$$.fragment,d),h(j4.$$.fragment,d),h(D4.$$.fragment,d),h(N4.$$.fragment,d),h(q4.$$.fragment,d),h(G4.$$.fragment,d),h(X4.$$.fragment,d),h(V4.$$.fragment,d),h(z4.$$.fragment,d),h(W4.$$.fragment,d),h(Q4.$$.fragment,d),h(U4.$$.fragment,d),h(J4.$$.fragment,d),h(Y4.$$.fragment,d),h(K4.$$.fragment,d),h(Z4.$$.fragment,d),h(eE.$$.fragment,d),h(rE.$$.fragment,d),h(tE.$$.fragment,d),h(aE.$$.fragment,d),h(nE.$$.fragment,d),h(sE.$$.fragment,d),h(lE.$$.fragment,d),h(dE.$$.fragment,d),h(cE.$$.fragment,d),h(fE.$$.fragment,d),h(mE.$$.fragment,d),h(gE.$$.fragment,d),h(hE.$$.fragment,d),h(_E.$$.fragment,d),h(uE.$$.fragment,d),h(bE.$$.fragment,d),h(vE.$$.fragment,d),h(TE.$$.fragment,d),h(FE.$$.fragment,d),h(ME.$$.fragment,d),h(EE.$$.fragment,d),h(yE.$$.fragment,d),h(wE.$$.fragment,d),h(AE.$$.fragment,d),h(LE.$$.fragment,d),h(xE.$$.fragment,d),h(kE.$$.fragment,d),h(RE.$$.fragment,d),h(SE.$$.fragment,d),h(PE.$$.fragment,d),h($E.$$.fragment,d),h(jE.$$.fragment,d),h(DE.$$.fragment,d),h(NE.$$.fragment,d),h(qE.$$.fragment,d),h(OE.$$.fragment,d),h(GE.$$.fragment,d),h(VE.$$.fragment,d),h(zE.$$.fragment,d),h(WE.$$.fragment,d),h(QE.$$.fragment,d),h(HE.$$.fragment,d),h(UE.$$.fragment,d),h(YE.$$.fragment,d),h(KE.$$.fragment,d),h(ZE.$$.fragment,d),h(e3.$$.fragment,d),h(o3.$$.fragment,d),h(r3.$$.fragment,d),h(a3.$$.fragment,d),h(n3.$$.fragment,d),h(s3.$$.fragment,d),h(l3.$$.fragment,d),h(i3.$$.fragment,d),h(d3.$$.fragment,d),h(f3.$$.fragment,d),h(m3.$$.fragment,d),h(g3.$$.fragment,d),h(h3.$$.fragment,d),h(p3.$$.fragment,d),h(_3.$$.fragment,d),h(b3.$$.fragment,d),h(v3.$$.fragment,d),h(T3.$$.fragment,d),h(F3.$$.fragment,d),h(C3.$$.fragment,d),h(M3.$$.fragment,d),h(y3.$$.fragment,d),h(w3.$$.fragment,d),h(A3.$$.fragment,d),h(L3.$$.fragment,d),h(B3.$$.fragment,d),h(x3.$$.fragment,d),h(R3.$$.fragment,d),h(S3.$$.fragment,d),h(P3.$$.fragment,d),h($3.$$.fragment,d),h(I3.$$.fragment,d),h(j3.$$.fragment,d),h(N3.$$.fragment,d),h(q3.$$.fragment,d),h(O3.$$.fragment,d),h(G3.$$.fragment,d),h(X3.$$.fragment,d),h(V3.$$.fragment,d),h(W3.$$.fragment,d),h(Q3.$$.fragment,d),h(H3.$$.fragment,d),h(J3.$$.fragment,d),h(Y3.$$.fragment,d),h(K3.$$.fragment,d),h(ey.$$.fragment,d),h(oy.$$.fragment,d),h(ry.$$.fragment,d),h(ty.$$.fragment,d),h(ay.$$.fragment,d),h(ny.$$.fragment,d),h(ly.$$.fragment,d),h(iy.$$.fragment,d),h(dy.$$.fragment,d),h(cy.$$.fragment,d),h(fy.$$.fragment,d),h(my.$$.fragment,d),h(hy.$$.fragment,d),h(py.$$.fragment,d),h(_y.$$.fragment,d),h(uy.$$.fragment,d),h(by.$$.fragment,d),h(vy.$$.fragment,d),h(Fy.$$.fragment,d),h(Cy.$$.fragment,d),h(My.$$.fragment,d),h(Ey.$$.fragment,d),h(yy.$$.fragment,d),h(wy.$$.fragment,d),h(Ly.$$.fragment,d),h(By.$$.fragment,d),h(xy.$$.fragment,d),h(Ry.$$.fragment,d),h(Sy.$$.fragment,d),h(Py.$$.fragment,d),h(Iy.$$.fragment,d),h(jy.$$.fragment,d),h(Dy.$$.fragment,d),h(Ny.$$.fragment,d),h(qy.$$.fragment,d),h(Oy.$$.fragment,d),h(Xy.$$.fragment,d),h(Vy.$$.fragment,d),h(zy.$$.fragment,d),h(Wy.$$.fragment,d),h(Qy.$$.fragment,d),h(Hy.$$.fragment,d),h(Jy.$$.fragment,d),h(Yy.$$.fragment,d),h(Ky.$$.fragment,d),h(Zy.$$.fragment,d),h(ew.$$.fragment,d),h(ow.$$.fragment,d),h(tw.$$.fragment,d),h(aw.$$.fragment,d),h(nw.$$.fragment,d),h(sw.$$.fragment,d),h(lw.$$.fragment,d),h(iw.$$.fragment,d),h(cw.$$.fragment,d),h(fw.$$.fragment,d),h(mw.$$.fragment,d),h(hw.$$.fragment,d),h(pw.$$.fragment,d),h(_w.$$.fragment,d),h(bw.$$.fragment,d),h(vw.$$.fragment,d),h(Tw.$$.fragment,d),h(Fw.$$.fragment,d),h(Cw.$$.fragment,d),h(Mw.$$.fragment,d),h(yw.$$.fragment,d),h(ww.$$.fragment,d),h(Aw.$$.fragment,d),h(Lw.$$.fragment,d),h(Bw.$$.fragment,d),h(xw.$$.fragment,d),h(Rw.$$.fragment,d),h(Sw.$$.fragment,d),h(Pw.$$.fragment,d),h($w.$$.fragment,d),h(Iw.$$.fragment,d),h(jw.$$.fragment,d),h(Nw.$$.fragment,d),h(qw.$$.fragment,d),h(Ow.$$.fragment,d),h(Gw.$$.fragment,d),h(Xw.$$.fragment,d),h(Vw.$$.fragment,d),h(Ww.$$.fragment,d),h(Qw.$$.fragment,d),h(Hw.$$.fragment,d),h(Uw.$$.fragment,d),h(Jw.$$.fragment,d),h(Yw.$$.fragment,d),h(Zw.$$.fragment,d),h(eA.$$.fragment,d),h(oA.$$.fragment,d),h(rA.$$.fragment,d),h(tA.$$.fragment,d),h(aA.$$.fragment,d),h(sA.$$.fragment,d),h(lA.$$.fragment,d),h(iA.$$.fragment,d),h(dA.$$.fragment,d),h(cA.$$.fragment,d),h(fA.$$.fragment,d),h(gA.$$.fragment,d),h(hA.$$.fragment,d),h(pA.$$.fragment,d),h(_A.$$.fragment,d),h(uA.$$.fragment,d),h(bA.$$.fragment,d),h(TA.$$.fragment,d),h(FA.$$.fragment,d),h(CA.$$.fragment,d),h(MA.$$.fragment,d),h(EA.$$.fragment,d),h(yA.$$.fragment,d),h(AA.$$.fragment,d),h(LA.$$.fragment,d),h(BA.$$.fragment,d),h(xA.$$.fragment,d),h(kA.$$.fragment,d),h(RA.$$.fragment,d),h(PA.$$.fragment,d),h($A.$$.fragment,d),h(IA.$$.fragment,d),h(jA.$$.fragment,d),h(DA.$$.fragment,d),h(NA.$$.fragment,d),h(OA.$$.fragment,d),h(GA.$$.fragment,d),h(XA.$$.fragment,d),h(VA.$$.fragment,d),h(zA.$$.fragment,d),h(WA.$$.fragment,d),h(HA.$$.fragment,d),h(UA.$$.fragment,d),h(JA.$$.fragment,d),h(YA.$$.fragment,d),h(KA.$$.fragment,d),h(ZA.$$.fragment,d),h(oL.$$.fragment,d),h(rL.$$.fragment,d),h(tL.$$.fragment,d),h(aL.$$.fragment,d),h(nL.$$.fragment,d),h(sL.$$.fragment,d),h(iL.$$.fragment,d),h(dL.$$.fragment,d),h(cL.$$.fragment,d),h(fL.$$.fragment,d),h(mL.$$.fragment,d),h(gL.$$.fragment,d),h(pL.$$.fragment,d),h(_L.$$.fragment,d),h(uL.$$.fragment,d),h(bL.$$.fragment,d),h(vL.$$.fragment,d),h(TL.$$.fragment,d),h(CL.$$.fragment,d),h(ML.$$.fragment,d),h(EL.$$.fragment,d),h(yL.$$.fragment,d),h(wL.$$.fragment,d),h(AL.$$.fragment,d),h(BL.$$.fragment,d),h(xL.$$.fragment,d),h(kL.$$.fragment,d),h(RL.$$.fragment,d),h(SL.$$.fragment,d),h(PL.$$.fragment,d),h(IL.$$.fragment,d),h(jL.$$.fragment,d),h(DL.$$.fragment,d),h(NL.$$.fragment,d),h(qL.$$.fragment,d),h(OL.$$.fragment,d),h(XL.$$.fragment,d),h(VL.$$.fragment,d),h(zL.$$.fragment,d),h(WL.$$.fragment,d),h(QL.$$.fragment,d),h(HL.$$.fragment,d),h(JL.$$.fragment,d),h(YL.$$.fragment,d),h(KL.$$.fragment,d),h(e7.$$.fragment,d),h(o7.$$.fragment,d),h(r7.$$.fragment,d),h(a7.$$.fragment,d),h(n7.$$.fragment,d),h(s7.$$.fragment,d),h(l7.$$.fragment,d),zRe=!0)},o(d){p(fe.$$.fragment,d),p(Va.$$.fragment,d),p(d4.$$.fragment,d),p(c4.$$.fragment,d),p(Yf.$$.fragment,d),p(f4.$$.fragment,d),p(m4.$$.fragment,d),p(p4.$$.fragment,d),p(_4.$$.fragment,d),p(u4.$$.fragment,d),p(b4.$$.fragment,d),p(v4.$$.fragment,d),p(C4.$$.fragment,d),p(M4.$$.fragment,d),p(E4.$$.fragment,d),p(y4.$$.fragment,d),p(w4.$$.fragment,d),p(B4.$$.fragment,d),p(Ph.$$.fragment,d),p(x4.$$.fragment,d),p(k4.$$.fragment,d),p(R4.$$.fragment,d),p(S4.$$.fragment,d),p(I4.$$.fragment,d),p(zh.$$.fragment,d),p(j4.$$.fragment,d),p(D4.$$.fragment,d),p(N4.$$.fragment,d),p(q4.$$.fragment,d),p(G4.$$.fragment,d),p(X4.$$.fragment,d),p(V4.$$.fragment,d),p(z4.$$.fragment,d),p(W4.$$.fragment,d),p(Q4.$$.fragment,d),p(U4.$$.fragment,d),p(J4.$$.fragment,d),p(Y4.$$.fragment,d),p(K4.$$.fragment,d),p(Z4.$$.fragment,d),p(eE.$$.fragment,d),p(rE.$$.fragment,d),p(tE.$$.fragment,d),p(aE.$$.fragment,d),p(nE.$$.fragment,d),p(sE.$$.fragment,d),p(lE.$$.fragment,d),p(dE.$$.fragment,d),p(cE.$$.fragment,d),p(fE.$$.fragment,d),p(mE.$$.fragment,d),p(gE.$$.fragment,d),p(hE.$$.fragment,d),p(_E.$$.fragment,d),p(uE.$$.fragment,d),p(bE.$$.fragment,d),p(vE.$$.fragment,d),p(TE.$$.fragment,d),p(FE.$$.fragment,d),p(ME.$$.fragment,d),p(EE.$$.fragment,d),p(yE.$$.fragment,d),p(wE.$$.fragment,d),p(AE.$$.fragment,d),p(LE.$$.fragment,d),p(xE.$$.fragment,d),p(kE.$$.fragment,d),p(RE.$$.fragment,d),p(SE.$$.fragment,d),p(PE.$$.fragment,d),p($E.$$.fragment,d),p(jE.$$.fragment,d),p(DE.$$.fragment,d),p(NE.$$.fragment,d),p(qE.$$.fragment,d),p(OE.$$.fragment,d),p(GE.$$.fragment,d),p(VE.$$.fragment,d),p(zE.$$.fragment,d),p(WE.$$.fragment,d),p(QE.$$.fragment,d),p(HE.$$.fragment,d),p(UE.$$.fragment,d),p(YE.$$.fragment,d),p(KE.$$.fragment,d),p(ZE.$$.fragment,d),p(e3.$$.fragment,d),p(o3.$$.fragment,d),p(r3.$$.fragment,d),p(a3.$$.fragment,d),p(n3.$$.fragment,d),p(s3.$$.fragment,d),p(l3.$$.fragment,d),p(i3.$$.fragment,d),p(d3.$$.fragment,d),p(f3.$$.fragment,d),p(m3.$$.fragment,d),p(g3.$$.fragment,d),p(h3.$$.fragment,d),p(p3.$$.fragment,d),p(_3.$$.fragment,d),p(b3.$$.fragment,d),p(v3.$$.fragment,d),p(T3.$$.fragment,d),p(F3.$$.fragment,d),p(C3.$$.fragment,d),p(M3.$$.fragment,d),p(y3.$$.fragment,d),p(w3.$$.fragment,d),p(A3.$$.fragment,d),p(L3.$$.fragment,d),p(B3.$$.fragment,d),p(x3.$$.fragment,d),p(R3.$$.fragment,d),p(S3.$$.fragment,d),p(P3.$$.fragment,d),p($3.$$.fragment,d),p(I3.$$.fragment,d),p(j3.$$.fragment,d),p(N3.$$.fragment,d),p(q3.$$.fragment,d),p(O3.$$.fragment,d),p(G3.$$.fragment,d),p(X3.$$.fragment,d),p(V3.$$.fragment,d),p(W3.$$.fragment,d),p(Q3.$$.fragment,d),p(H3.$$.fragment,d),p(J3.$$.fragment,d),p(Y3.$$.fragment,d),p(K3.$$.fragment,d),p(ey.$$.fragment,d),p(oy.$$.fragment,d),p(ry.$$.fragment,d),p(ty.$$.fragment,d),p(ay.$$.fragment,d),p(ny.$$.fragment,d),p(ly.$$.fragment,d),p(iy.$$.fragment,d),p(dy.$$.fragment,d),p(cy.$$.fragment,d),p(fy.$$.fragment,d),p(my.$$.fragment,d),p(hy.$$.fragment,d),p(py.$$.fragment,d),p(_y.$$.fragment,d),p(uy.$$.fragment,d),p(by.$$.fragment,d),p(vy.$$.fragment,d),p(Fy.$$.fragment,d),p(Cy.$$.fragment,d),p(My.$$.fragment,d),p(Ey.$$.fragment,d),p(yy.$$.fragment,d),p(wy.$$.fragment,d),p(Ly.$$.fragment,d),p(By.$$.fragment,d),p(xy.$$.fragment,d),p(Ry.$$.fragment,d),p(Sy.$$.fragment,d),p(Py.$$.fragment,d),p(Iy.$$.fragment,d),p(jy.$$.fragment,d),p(Dy.$$.fragment,d),p(Ny.$$.fragment,d),p(qy.$$.fragment,d),p(Oy.$$.fragment,d),p(Xy.$$.fragment,d),p(Vy.$$.fragment,d),p(zy.$$.fragment,d),p(Wy.$$.fragment,d),p(Qy.$$.fragment,d),p(Hy.$$.fragment,d),p(Jy.$$.fragment,d),p(Yy.$$.fragment,d),p(Ky.$$.fragment,d),p(Zy.$$.fragment,d),p(ew.$$.fragment,d),p(ow.$$.fragment,d),p(tw.$$.fragment,d),p(aw.$$.fragment,d),p(nw.$$.fragment,d),p(sw.$$.fragment,d),p(lw.$$.fragment,d),p(iw.$$.fragment,d),p(cw.$$.fragment,d),p(fw.$$.fragment,d),p(mw.$$.fragment,d),p(hw.$$.fragment,d),p(pw.$$.fragment,d),p(_w.$$.fragment,d),p(bw.$$.fragment,d),p(vw.$$.fragment,d),p(Tw.$$.fragment,d),p(Fw.$$.fragment,d),p(Cw.$$.fragment,d),p(Mw.$$.fragment,d),p(yw.$$.fragment,d),p(ww.$$.fragment,d),p(Aw.$$.fragment,d),p(Lw.$$.fragment,d),p(Bw.$$.fragment,d),p(xw.$$.fragment,d),p(Rw.$$.fragment,d),p(Sw.$$.fragment,d),p(Pw.$$.fragment,d),p($w.$$.fragment,d),p(Iw.$$.fragment,d),p(jw.$$.fragment,d),p(Nw.$$.fragment,d),p(qw.$$.fragment,d),p(Ow.$$.fragment,d),p(Gw.$$.fragment,d),p(Xw.$$.fragment,d),p(Vw.$$.fragment,d),p(Ww.$$.fragment,d),p(Qw.$$.fragment,d),p(Hw.$$.fragment,d),p(Uw.$$.fragment,d),p(Jw.$$.fragment,d),p(Yw.$$.fragment,d),p(Zw.$$.fragment,d),p(eA.$$.fragment,d),p(oA.$$.fragment,d),p(rA.$$.fragment,d),p(tA.$$.fragment,d),p(aA.$$.fragment,d),p(sA.$$.fragment,d),p(lA.$$.fragment,d),p(iA.$$.fragment,d),p(dA.$$.fragment,d),p(cA.$$.fragment,d),p(fA.$$.fragment,d),p(gA.$$.fragment,d),p(hA.$$.fragment,d),p(pA.$$.fragment,d),p(_A.$$.fragment,d),p(uA.$$.fragment,d),p(bA.$$.fragment,d),p(TA.$$.fragment,d),p(FA.$$.fragment,d),p(CA.$$.fragment,d),p(MA.$$.fragment,d),p(EA.$$.fragment,d),p(yA.$$.fragment,d),p(AA.$$.fragment,d),p(LA.$$.fragment,d),p(BA.$$.fragment,d),p(xA.$$.fragment,d),p(kA.$$.fragment,d),p(RA.$$.fragment,d),p(PA.$$.fragment,d),p($A.$$.fragment,d),p(IA.$$.fragment,d),p(jA.$$.fragment,d),p(DA.$$.fragment,d),p(NA.$$.fragment,d),p(OA.$$.fragment,d),p(GA.$$.fragment,d),p(XA.$$.fragment,d),p(VA.$$.fragment,d),p(zA.$$.fragment,d),p(WA.$$.fragment,d),p(HA.$$.fragment,d),p(UA.$$.fragment,d),p(JA.$$.fragment,d),p(YA.$$.fragment,d),p(KA.$$.fragment,d),p(ZA.$$.fragment,d),p(oL.$$.fragment,d),p(rL.$$.fragment,d),p(tL.$$.fragment,d),p(aL.$$.fragment,d),p(nL.$$.fragment,d),p(sL.$$.fragment,d),p(iL.$$.fragment,d),p(dL.$$.fragment,d),p(cL.$$.fragment,d),p(fL.$$.fragment,d),p(mL.$$.fragment,d),p(gL.$$.fragment,d),p(pL.$$.fragment,d),p(_L.$$.fragment,d),p(uL.$$.fragment,d),p(bL.$$.fragment,d),p(vL.$$.fragment,d),p(TL.$$.fragment,d),p(CL.$$.fragment,d),p(ML.$$.fragment,d),p(EL.$$.fragment,d),p(yL.$$.fragment,d),p(wL.$$.fragment,d),p(AL.$$.fragment,d),p(BL.$$.fragment,d),p(xL.$$.fragment,d),p(kL.$$.fragment,d),p(RL.$$.fragment,d),p(SL.$$.fragment,d),p(PL.$$.fragment,d),p(IL.$$.fragment,d),p(jL.$$.fragment,d),p(DL.$$.fragment,d),p(NL.$$.fragment,d),p(qL.$$.fragment,d),p(OL.$$.fragment,d),p(XL.$$.fragment,d),p(VL.$$.fragment,d),p(zL.$$.fragment,d),p(WL.$$.fragment,d),p(QL.$$.fragment,d),p(HL.$$.fragment,d),p(JL.$$.fragment,d),p(YL.$$.fragment,d),p(KL.$$.fragment,d),p(e7.$$.fragment,d),p(o7.$$.fragment,d),p(r7.$$.fragment,d),p(a7.$$.fragment,d),p(n7.$$.fragment,d),p(s7.$$.fragment,d),p(l7.$$.fragment,d),zRe=!1},d(d){t(J),d&&t(Pe),d&&t(de),_(fe),d&&t(Wf),d&&t(ha),d&&t(Le),d&&t(co),d&&t(Hf),_(Va,d),d&&t(fo),d&&t(he),d&&t(Wo),d&&t(za),d&&t(Gxe),d&&t(Yi),_(d4),d&&t(Xxe),d&&t(Jn),d&&t(Vxe),_(c4,d),d&&t(zxe),d&&t(c9),d&&t(Wxe),_(Yf,d),d&&t(Qxe),d&&t(Ki),_(f4),d&&t(Hxe),d&&t(Qo),_(m4),_(p4),_(_4),_(u4),d&&t(Uxe),d&&t(ed),_(b4),d&&t(Jxe),d&&t(Ho),_(v4),_(C4),_(M4),_(E4),d&&t(Yxe),d&&t(od),_(y4),d&&t(Kxe),d&&t(Uo),_(w4),_(B4),_(Ph),_(x4),_(k4),d&&t(Zxe),d&&t(rd),_(R4),d&&t(eke),d&&t(Jo),_(S4),_(I4),_(zh),_(j4),_(D4),d&&t(oke),d&&t(ad),_(N4),d&&t(rke),d&&t(Yo),_(q4),_(G4),_(X4),_(V4),_(z4),d&&t(tke),d&&t(ld),_(W4),d&&t(ake),d&&t(Ko),_(Q4),_(U4),_(J4),_(Y4),_(K4),d&&t(nke),d&&t(cd),_(Z4),d&&t(ske),d&&t(Zo),_(eE),_(rE),_(tE),_(aE),_(nE),d&&t(lke),d&&t(gd),_(sE),d&&t(ike),d&&t(er),_(lE),_(dE),_(cE),_(fE),_(mE),d&&t(dke),d&&t(_d),_(gE),d&&t(cke),d&&t(or),_(hE),_(_E),_(uE),_(bE),_(vE),d&&t(fke),d&&t(vd),_(TE),d&&t(mke),d&&t(rr),_(FE),_(ME),_(EE),_(yE),_(wE),d&&t(gke),d&&t(Cd),_(AE),d&&t(hke),d&&t(tr),_(LE),_(xE),_(kE),_(RE),_(SE),d&&t(pke),d&&t(yd),_(PE),d&&t(_ke),d&&t(ar),_($E),_(jE),_(DE),_(NE),_(qE),d&&t(uke),d&&t(Ld),_(OE),d&&t(bke),d&&t(nr),_(GE),_(VE),_(zE),_(WE),_(QE),d&&t(vke),d&&t(kd),_(HE),d&&t(Tke),d&&t(sr),_(UE),_(YE),_(KE),_(ZE),_(e3),d&&t(Fke),d&&t(Pd),_(o3),d&&t(Cke),d&&t(lr),_(r3),_(a3),_(n3),_(s3),_(l3),d&&t(Mke),d&&t(jd),_(i3),d&&t(Eke),d&&t(ir),_(d3),_(f3),_(m3),_(g3),_(h3),d&&t(yke),d&&t(qd),_(p3),d&&t(wke),d&&t(dr),_(_3),_(b3),_(v3),_(T3),_(F3),d&&t(Ake),d&&t(Xd),_(C3),d&&t(Lke),d&&t(cr),_(M3),_(y3),_(w3),_(A3),_(L3),d&&t(Bke),d&&t(Wd),_(B3),d&&t(xke),d&&t(fr),_(x3),_(R3),_(S3),_(P3),_($3),d&&t(kke),d&&t(Ud),_(I3),d&&t(Rke),d&&t(mr),_(j3),_(N3),_(q3),_(O3),_(G3),d&&t(Ske),d&&t(Kd),_(X3),d&&t(Pke),d&&t(gr),_(V3),_(W3),_(Q3),_(H3),_(J3),d&&t($ke),d&&t(oc),_(Y3),d&&t(Ike),d&&t(hr),_(K3),_(ey),_(oy),_(ry),_(ty),d&&t(jke),d&&t(ac),_(ay),d&&t(Dke),d&&t(pr),_(ny),_(ly),_(iy),_(dy),_(cy),d&&t(Nke),d&&t(ic),_(fy),d&&t(qke),d&&t(_r),_(my),_(hy),_(py),_(_y),_(uy),d&&t(Oke),d&&t(fc),_(by),d&&t(Gke),d&&t(ur),_(vy),_(Fy),_(Cy),_(My),_(Ey),d&&t(Xke),d&&t(hc),_(yy),d&&t(Vke),d&&t(br),_(wy),_(Ly),_(By),_(xy),_(Ry),d&&t(zke),d&&t(uc),_(Sy),d&&t(Wke),d&&t(vr),_(Py),_(Iy),_(jy),_(Dy),_(Ny),d&&t(Qke),d&&t(Tc),_(qy),d&&t(Hke),d&&t(Tr),_(Oy),_(Xy),_(Vy),_(zy),_(Wy),d&&t(Uke),d&&t(Mc),_(Qy),d&&t(Jke),d&&t(Fr),_(Hy),_(Jy),_(Yy),_(Ky),_(Zy),d&&t(Yke),d&&t(wc),_(ew),d&&t(Kke),d&&t(Cr),_(ow),_(tw),_(aw),_(nw),_(sw),d&&t(Zke),d&&t(Bc),_(lw),d&&t(eRe),d&&t(Mr),_(iw),_(cw),_(fw),_(mw),_(hw),d&&t(oRe),d&&t(Rc),_(pw),d&&t(rRe),d&&t(Er),_(_w),_(bw),_(vw),_(Tw),_(Fw),d&&t(tRe),d&&t($c),_(Cw),d&&t(aRe),d&&t(yr),_(Mw),_(yw),_(ww),_(Aw),_(Lw),d&&t(nRe),d&&t(Dc),_(Bw),d&&t(sRe),d&&t(wr),_(xw),_(Rw),_(Sw),_(Pw),_($w),d&&t(lRe),d&&t(Oc),_(Iw),d&&t(iRe),d&&t(Ar),_(jw),_(Nw),_(qw),_(Ow),_(Gw),d&&t(dRe),d&&t(Vc),_(Xw),d&&t(cRe),d&&t(Lr),_(Vw),_(Ww),_(Qw),_(Hw),_(Uw),d&&t(fRe),d&&t(Qc),_(Jw),d&&t(mRe),d&&t(Br),_(Yw),_(Zw),_(eA),_(oA),_(rA),d&&t(gRe),d&&t(Jc),_(tA),d&&t(hRe),d&&t(xr),_(aA),_(sA),_(lA),_(iA),_(dA),d&&t(pRe),d&&t(Zc),_(cA),d&&t(_Re),d&&t(kr),_(fA),_(gA),_(hA),_(pA),_(_A),d&&t(uRe),d&&t(rf),_(uA),d&&t(bRe),d&&t(Rr),_(bA),_(TA),_(FA),_(CA),_(MA),d&&t(vRe),d&&t(nf),_(EA),d&&t(TRe),d&&t(Sr),_(yA),_(AA),_(LA),_(BA),_(xA),d&&t(FRe),d&&t(df),_(kA),d&&t(CRe),d&&t(Pr),_(RA),_(PA),_($A),_(IA),_(jA),d&&t(MRe),d&&t(mf),_(DA),d&&t(ERe),d&&t($r),_(NA),_(OA),_(GA),_(XA),_(VA),d&&t(yRe),d&&t(pf),_(zA),d&&t(wRe),d&&t(Ir),_(WA),_(HA),_(UA),_(JA),_(YA),d&&t(ARe),d&&t(bf),_(KA),d&&t(LRe),d&&t(jr),_(ZA),_(oL),_(rL),_(tL),_(aL),d&&t(BRe),d&&t(Ff),_(nL),d&&t(xRe),d&&t(Dr),_(sL),_(iL),_(dL),_(cL),_(fL),d&&t(kRe),d&&t(Ef),_(mL),d&&t(RRe),d&&t(Nr),_(gL),_(pL),_(_L),_(uL),_(bL),d&&t(SRe),d&&t(Af),_(vL),d&&t(PRe),d&&t(qr),_(TL),_(CL),_(ML),_(EL),_(yL),d&&t($Re),d&&t(xf),_(wL),d&&t(IRe),d&&t(Or),_(AL),_(BL),_(xL),_(kL),_(RL),d&&t(jRe),d&&t(Sf),_(SL),d&&t(DRe),d&&t(Gr),_(PL),_(IL),_(jL),_(DL),_(NL),d&&t(NRe),d&&t(If),_(qL),d&&t(qRe),d&&t(Xr),_(OL),_(XL),_(VL),_(zL),_(WL),d&&t(ORe),d&&t(Nf),_(QL),d&&t(GRe),d&&t(Vr),_(HL),_(JL),_(YL),_(KL),_(e7),d&&t(XRe),d&&t(Gf),_(o7),d&&t(VRe),d&&t(zr),_(r7),_(a7),_(n7),_(s7),_(l7)}}}const B8t={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForSpeechSeq2Seq",title:"FlaxAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function x8t(Xi,J,Pe){let{fw:de}=J;return Xi.$$set=ge=>{"fw"in ge&&Pe(0,de=ge.fw)},[de]}class j8t extends F8t{constructor(J){super();C8t(this,J,x8t,L8t,M8t,{fw:0})}}export{j8t as default,B8t as metadata};
