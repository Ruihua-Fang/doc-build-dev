import{S as PCt,i as $Ct,s as ICt,e as a,k as l,w as f,t as o,M as jCt,c as n,d as t,m as i,a as s,x as m,h as r,b as c,F as e,g as b,y as g,q as h,o as p,B as _}from"../../chunks/vendor-6b77c823.js";import{T as MRr}from"../../chunks/Tip-39098574.js";import{D as M}from"../../chunks/Docstring-abef54e3.js";import{C as w}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as X}from"../../chunks/IconCopyLink-7a11ce68.js";function NCt(Xi){let J,$e,de,pe,io,fe,Me,zo,Vi,Wf,ha,zi,Wi,_4,Qf,Be,co,Qi,Wn,u4,Qn,Hn,b4,Hi,Un,v4,Ui,Hf,Va;return{c(){J=a("p"),$e=o("If your "),de=a("code"),pe=o("NewModelConfig"),io=o(" is a subclass of "),fe=a("code"),Me=o("PretrainedConfig"),zo=o(`, make sure its
`),Vi=a("code"),Wf=o("model_type"),ha=o(" attribute is set to the same key you use when registering the config (here "),zi=a("code"),Wi=o('"new-model"'),_4=o(")."),Qf=l(),Be=a("p"),co=o("Likewise, if your "),Qi=a("code"),Wn=o("NewModel"),u4=o(" is a subclass of "),Qn=a("a"),Hn=o("PreTrainedModel"),b4=o(`, make sure its
`),Hi=a("code"),Un=o("config_class"),v4=o(` attribute is set to the same class you use when registering the model (here
`),Ui=a("code"),Hf=o("NewModelConfig"),Va=o(")."),this.h()},l(fo){J=n(fo,"P",{});var _e=s(J);$e=r(_e,"If your "),de=n(_e,"CODE",{});var _9=s(de);pe=r(_9,"NewModelConfig"),_9.forEach(t),io=r(_e," is a subclass of "),fe=n(_e,"CODE",{});var Ji=s(fe);Me=r(Ji,"PretrainedConfig"),Ji.forEach(t),zo=r(_e,`, make sure its
`),Vi=n(_e,"CODE",{});var u9=s(Vi);Wf=r(u9,"model_type"),u9.forEach(t),ha=r(_e," attribute is set to the same key you use when registering the config (here "),zi=n(_e,"CODE",{});var b9=s(zi);Wi=r(b9,'"new-model"'),b9.forEach(t),_4=r(_e,")."),_e.forEach(t),Qf=i(fo),Be=n(fo,"P",{});var Wo=s(Be);co=r(Wo,"Likewise, if your "),Qi=n(Wo,"CODE",{});var za=s(Qi);Wn=r(za,"NewModel"),za.forEach(t),u4=r(Wo," is a subclass of "),Qn=n(Wo,"A",{href:!0});var v9=s(Qn);Hn=r(v9,"PreTrainedModel"),v9.forEach(t),b4=r(Wo,`, make sure its
`),Hi=n(Wo,"CODE",{});var Uf=s(Hi);Un=r(Uf,"config_class"),Uf.forEach(t),v4=r(Wo,` attribute is set to the same class you use when registering the model (here
`),Ui=n(Wo,"CODE",{});var T9=s(Ui);Hf=r(T9,"NewModelConfig"),T9.forEach(t),Va=r(Wo,")."),Wo.forEach(t),this.h()},h(){c(Qn,"href","/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel")},m(fo,_e){b(fo,J,_e),e(J,$e),e(J,de),e(de,pe),e(J,io),e(J,fe),e(fe,Me),e(J,zo),e(J,Vi),e(Vi,Wf),e(J,ha),e(J,zi),e(zi,Wi),e(J,_4),b(fo,Qf,_e),b(fo,Be,_e),e(Be,co),e(Be,Qi),e(Qi,Wn),e(Be,u4),e(Be,Qn),e(Qn,Hn),e(Be,b4),e(Be,Hi),e(Hi,Un),e(Be,v4),e(Be,Ui),e(Ui,Hf),e(Be,Va)},d(fo){fo&&t(J),fo&&t(Qf),fo&&t(Be)}}}function DCt(Xi){let J,$e,de,pe,io;return{c(){J=a("p"),$e=o("Passing "),de=a("code"),pe=o("use_auth_token=True"),io=o(" is required when you want to use a private model.")},l(fe){J=n(fe,"P",{});var Me=s(J);$e=r(Me,"Passing "),de=n(Me,"CODE",{});var zo=s(de);pe=r(zo,"use_auth_token=True"),zo.forEach(t),io=r(Me," is required when you want to use a private model."),Me.forEach(t)},m(fe,Me){b(fe,J,Me),e(J,$e),e(J,de),e(de,pe),e(J,io)},d(fe){fe&&t(J)}}}function qCt(Xi){let J,$e,de,pe,io;return{c(){J=a("p"),$e=o("Passing "),de=a("code"),pe=o("use_auth_token=True"),io=o(" is required when you want to use a private model.")},l(fe){J=n(fe,"P",{});var Me=s(J);$e=r(Me,"Passing "),de=n(Me,"CODE",{});var zo=s(de);pe=r(zo,"use_auth_token=True"),zo.forEach(t),io=r(Me," is required when you want to use a private model."),Me.forEach(t)},m(fe,Me){b(fe,J,Me),e(J,$e),e(J,de),e(de,pe),e(J,io)},d(fe){fe&&t(J)}}}function GCt(Xi){let J,$e,de,pe,io,fe,Me,zo,Vi,Wf,ha,zi,Wi,_4,Qf,Be,co,Qi,Wn,u4,Qn,Hn,b4,Hi,Un,v4,Ui,Hf,Va,fo,_e,_9,Ji,u9,b9,Wo,za,v9,Uf,T9,J$e,Rke,Yi,Jf,tH,T4,Y$e,aH,K$e,Ske,Jn,Z$e,nH,eIe,oIe,sH,rIe,tIe,Pke,F4,$ke,F9,aIe,Ike,Yf,jke,Ki,Kf,lH,C4,nIe,iH,sIe,Nke,Qo,M4,lIe,E4,iIe,C9,dIe,cIe,fIe,y4,mIe,dH,gIe,hIe,pIe,mo,w4,_Ie,cH,uIe,bIe,Zi,vIe,fH,TIe,FIe,mH,CIe,MIe,EIe,v,Zf,gH,yIe,wIe,M9,AIe,LIe,BIe,em,hH,xIe,kIe,E9,RIe,SIe,PIe,om,pH,$Ie,IIe,y9,jIe,NIe,DIe,rm,_H,qIe,GIe,w9,OIe,XIe,VIe,tm,uH,zIe,WIe,A9,QIe,HIe,UIe,am,bH,JIe,YIe,L9,KIe,ZIe,eje,nm,vH,oje,rje,B9,tje,aje,nje,sm,TH,sje,lje,x9,ije,dje,cje,lm,FH,fje,mje,k9,gje,hje,pje,im,CH,_je,uje,R9,bje,vje,Tje,dm,MH,Fje,Cje,S9,Mje,Eje,yje,cm,EH,wje,Aje,P9,Lje,Bje,xje,fm,yH,kje,Rje,$9,Sje,Pje,$je,mm,wH,Ije,jje,I9,Nje,Dje,qje,gm,AH,Gje,Oje,j9,Xje,Vje,zje,hm,LH,Wje,Qje,N9,Hje,Uje,Jje,pm,BH,Yje,Kje,D9,Zje,eNe,oNe,_m,xH,rNe,tNe,q9,aNe,nNe,sNe,um,kH,lNe,iNe,G9,dNe,cNe,fNe,bm,RH,mNe,gNe,O9,hNe,pNe,_Ne,vm,SH,uNe,bNe,X9,vNe,TNe,FNe,Tm,PH,CNe,MNe,V9,ENe,yNe,wNe,Fm,$H,ANe,LNe,z9,BNe,xNe,kNe,Cm,IH,RNe,SNe,W9,PNe,$Ne,INe,Mm,jH,jNe,NNe,Q9,DNe,qNe,GNe,Em,NH,ONe,XNe,H9,VNe,zNe,WNe,ym,DH,QNe,HNe,U9,UNe,JNe,YNe,wm,qH,KNe,ZNe,J9,eDe,oDe,rDe,Am,GH,tDe,aDe,Y9,nDe,sDe,lDe,Lm,OH,iDe,dDe,K9,cDe,fDe,mDe,Bm,XH,gDe,hDe,Z9,pDe,_De,uDe,xm,VH,bDe,vDe,eB,TDe,FDe,CDe,km,zH,MDe,EDe,oB,yDe,wDe,ADe,Rm,WH,LDe,BDe,rB,xDe,kDe,RDe,Sm,QH,SDe,PDe,tB,$De,IDe,jDe,Pm,HH,NDe,DDe,aB,qDe,GDe,ODe,$m,UH,XDe,VDe,nB,zDe,WDe,QDe,Im,JH,HDe,UDe,sB,JDe,YDe,KDe,jm,YH,ZDe,eqe,lB,oqe,rqe,tqe,Nm,KH,aqe,nqe,iB,sqe,lqe,iqe,Dm,ZH,dqe,cqe,dB,fqe,mqe,gqe,qm,eU,hqe,pqe,cB,_qe,uqe,bqe,Gm,oU,vqe,Tqe,fB,Fqe,Cqe,Mqe,Om,rU,Eqe,yqe,mB,wqe,Aqe,Lqe,Xm,tU,Bqe,xqe,gB,kqe,Rqe,Sqe,Vm,aU,Pqe,$qe,hB,Iqe,jqe,Nqe,zm,nU,Dqe,qqe,pB,Gqe,Oqe,Xqe,Wm,sU,Vqe,zqe,_B,Wqe,Qqe,Hqe,Qm,lU,Uqe,Jqe,uB,Yqe,Kqe,Zqe,Hm,iU,eGe,oGe,bB,rGe,tGe,aGe,Um,dU,nGe,sGe,vB,lGe,iGe,dGe,Jm,cU,cGe,fGe,TB,mGe,gGe,hGe,Ym,fU,pGe,_Ge,FB,uGe,bGe,vGe,Km,mU,TGe,FGe,CB,CGe,MGe,EGe,Zm,gU,yGe,wGe,MB,AGe,LGe,BGe,eg,hU,xGe,kGe,EB,RGe,SGe,PGe,og,pU,$Ge,IGe,yB,jGe,NGe,DGe,rg,_U,qGe,GGe,wB,OGe,XGe,VGe,tg,uU,zGe,WGe,AB,QGe,HGe,UGe,ag,bU,JGe,YGe,LB,KGe,ZGe,eOe,ng,vU,oOe,rOe,BB,tOe,aOe,nOe,sg,TU,sOe,lOe,xB,iOe,dOe,cOe,lg,FU,fOe,mOe,kB,gOe,hOe,pOe,ig,CU,_Oe,uOe,RB,bOe,vOe,TOe,dg,MU,FOe,COe,SB,MOe,EOe,yOe,cg,EU,wOe,AOe,PB,LOe,BOe,xOe,fg,yU,kOe,ROe,$B,SOe,POe,$Oe,mg,wU,IOe,jOe,IB,NOe,DOe,qOe,gg,AU,GOe,OOe,jB,XOe,VOe,zOe,hg,LU,WOe,QOe,NB,HOe,UOe,JOe,pg,BU,YOe,KOe,DB,ZOe,eXe,oXe,_g,xU,rXe,tXe,qB,aXe,nXe,sXe,ug,kU,lXe,iXe,GB,dXe,cXe,fXe,bg,RU,mXe,gXe,OB,hXe,pXe,_Xe,vg,SU,uXe,bXe,XB,vXe,TXe,FXe,Tg,PU,CXe,MXe,VB,EXe,yXe,wXe,Fg,$U,AXe,LXe,zB,BXe,xXe,kXe,Cg,IU,RXe,SXe,WB,PXe,$Xe,IXe,Mg,jU,jXe,NXe,QB,DXe,qXe,GXe,Eg,NU,OXe,XXe,HB,VXe,zXe,WXe,yg,DU,QXe,HXe,UB,UXe,JXe,YXe,wg,qU,KXe,ZXe,JB,eVe,oVe,rVe,Ag,GU,tVe,aVe,YB,nVe,sVe,lVe,Lg,OU,iVe,dVe,KB,cVe,fVe,mVe,Bg,XU,gVe,hVe,ZB,pVe,_Ve,uVe,xg,VU,bVe,vVe,ex,TVe,FVe,CVe,kg,zU,MVe,EVe,ox,yVe,wVe,AVe,Rg,WU,LVe,BVe,rx,xVe,kVe,RVe,Sg,QU,SVe,PVe,tx,$Ve,IVe,jVe,Pg,HU,NVe,DVe,ax,qVe,GVe,OVe,$g,UU,XVe,VVe,nx,zVe,WVe,QVe,Ig,JU,HVe,UVe,sx,JVe,YVe,KVe,jg,YU,ZVe,eze,lx,oze,rze,tze,Ng,KU,aze,nze,ix,sze,lze,ize,Dg,ZU,dze,cze,dx,fze,mze,gze,qg,eJ,hze,pze,cx,_ze,uze,bze,Gg,oJ,vze,Tze,fx,Fze,Cze,Mze,rJ,Eze,yze,A4,wze,Og,L4,Aze,tJ,Lze,Dke,ed,Xg,aJ,B4,Bze,nJ,xze,qke,Ho,x4,kze,k4,Rze,mx,Sze,Pze,$ze,R4,Ize,sJ,jze,Nze,Dze,go,S4,qze,lJ,Gze,Oze,Wa,Xze,iJ,Vze,zze,dJ,Wze,Qze,cJ,Hze,Uze,Jze,E,Yn,fJ,Yze,Kze,gx,Zze,eWe,hx,oWe,rWe,tWe,Kn,mJ,aWe,nWe,px,sWe,lWe,_x,iWe,dWe,cWe,Zn,gJ,fWe,mWe,ux,gWe,hWe,bx,pWe,_We,uWe,Vg,hJ,bWe,vWe,vx,TWe,FWe,CWe,es,pJ,MWe,EWe,Tx,yWe,wWe,Fx,AWe,LWe,BWe,zg,_J,xWe,kWe,Cx,RWe,SWe,PWe,Wg,uJ,$We,IWe,Mx,jWe,NWe,DWe,Qg,bJ,qWe,GWe,Ex,OWe,XWe,VWe,os,vJ,zWe,WWe,yx,QWe,HWe,wx,UWe,JWe,YWe,rs,TJ,KWe,ZWe,Ax,eQe,oQe,Lx,rQe,tQe,aQe,ts,FJ,nQe,sQe,Bx,lQe,iQe,xx,dQe,cQe,fQe,Hg,CJ,mQe,gQe,kx,hQe,pQe,_Qe,Ug,MJ,uQe,bQe,Rx,vQe,TQe,FQe,as,EJ,CQe,MQe,Sx,EQe,yQe,Px,wQe,AQe,LQe,Jg,yJ,BQe,xQe,$x,kQe,RQe,SQe,ns,wJ,PQe,$Qe,Ix,IQe,jQe,jx,NQe,DQe,qQe,ss,AJ,GQe,OQe,Nx,XQe,VQe,Dx,zQe,WQe,QQe,ls,LJ,HQe,UQe,qx,JQe,YQe,BJ,KQe,ZQe,eHe,Yg,xJ,oHe,rHe,Gx,tHe,aHe,nHe,is,kJ,sHe,lHe,Ox,iHe,dHe,Xx,cHe,fHe,mHe,Kg,RJ,gHe,hHe,Vx,pHe,_He,uHe,ds,SJ,bHe,vHe,zx,THe,FHe,Wx,CHe,MHe,EHe,cs,PJ,yHe,wHe,Qx,AHe,LHe,Hx,BHe,xHe,kHe,fs,$J,RHe,SHe,Ux,PHe,$He,Jx,IHe,jHe,NHe,Zg,IJ,DHe,qHe,Yx,GHe,OHe,XHe,ms,jJ,VHe,zHe,Kx,WHe,QHe,Zx,HHe,UHe,JHe,eh,NJ,YHe,KHe,ek,ZHe,eUe,oUe,gs,DJ,rUe,tUe,ok,aUe,nUe,rk,sUe,lUe,iUe,hs,qJ,dUe,cUe,tk,fUe,mUe,ak,gUe,hUe,pUe,ps,GJ,_Ue,uUe,nk,bUe,vUe,sk,TUe,FUe,CUe,_s,OJ,MUe,EUe,lk,yUe,wUe,ik,AUe,LUe,BUe,oh,XJ,xUe,kUe,dk,RUe,SUe,PUe,us,VJ,$Ue,IUe,ck,jUe,NUe,fk,DUe,qUe,GUe,bs,zJ,OUe,XUe,mk,VUe,zUe,gk,WUe,QUe,HUe,vs,WJ,UUe,JUe,hk,YUe,KUe,pk,ZUe,eJe,oJe,Ts,QJ,rJe,tJe,_k,aJe,nJe,uk,sJe,lJe,iJe,Fs,HJ,dJe,cJe,bk,fJe,mJe,vk,gJe,hJe,pJe,Cs,UJ,_Je,uJe,Tk,bJe,vJe,Fk,TJe,FJe,CJe,rh,JJ,MJe,EJe,Ck,yJe,wJe,AJe,Ms,YJ,LJe,BJe,Mk,xJe,kJe,Ek,RJe,SJe,PJe,th,KJ,$Je,IJe,yk,jJe,NJe,DJe,ah,ZJ,qJe,GJe,wk,OJe,XJe,VJe,Es,eY,zJe,WJe,Ak,QJe,HJe,Lk,UJe,JJe,YJe,ys,oY,KJe,ZJe,Bk,eYe,oYe,xk,rYe,tYe,aYe,nh,rY,nYe,sYe,kk,lYe,iYe,dYe,ws,tY,cYe,fYe,Rk,mYe,gYe,Sk,hYe,pYe,_Ye,As,aY,uYe,bYe,Pk,vYe,TYe,$k,FYe,CYe,MYe,Ls,nY,EYe,yYe,Ik,wYe,AYe,jk,LYe,BYe,xYe,Bs,sY,kYe,RYe,Nk,SYe,PYe,Dk,$Ye,IYe,jYe,xs,lY,NYe,DYe,qk,qYe,GYe,Gk,OYe,XYe,VYe,sh,iY,zYe,WYe,Ok,QYe,HYe,UYe,lh,dY,JYe,YYe,Xk,KYe,ZYe,eKe,ih,cY,oKe,rKe,Vk,tKe,aKe,nKe,dh,fY,sKe,lKe,zk,iKe,dKe,cKe,ks,mY,fKe,mKe,Wk,gKe,hKe,Qk,pKe,_Ke,uKe,ch,gY,bKe,vKe,Hk,TKe,FKe,CKe,Rs,hY,MKe,EKe,Uk,yKe,wKe,Jk,AKe,LKe,BKe,Ss,pY,xKe,kKe,Yk,RKe,SKe,Kk,PKe,$Ke,IKe,Ps,_Y,jKe,NKe,Zk,DKe,qKe,eR,GKe,OKe,XKe,$s,uY,VKe,zKe,oR,WKe,QKe,rR,HKe,UKe,JKe,Is,bY,YKe,KKe,tR,ZKe,eZe,aR,oZe,rZe,tZe,js,vY,aZe,nZe,nR,sZe,lZe,sR,iZe,dZe,cZe,fh,TY,fZe,mZe,lR,gZe,hZe,pZe,mh,FY,_Ze,uZe,iR,bZe,vZe,TZe,Ns,CY,FZe,CZe,dR,MZe,EZe,cR,yZe,wZe,AZe,Ds,MY,LZe,BZe,fR,xZe,kZe,mR,RZe,SZe,PZe,qs,EY,$Ze,IZe,gR,jZe,NZe,hR,DZe,qZe,GZe,gh,yY,OZe,XZe,pR,VZe,zZe,WZe,hh,wY,QZe,HZe,_R,UZe,JZe,YZe,ph,AY,KZe,ZZe,uR,eeo,oeo,reo,_h,LY,teo,aeo,bR,neo,seo,leo,Gs,BY,ieo,deo,vR,ceo,feo,TR,meo,geo,heo,uh,xY,peo,_eo,FR,ueo,beo,veo,bh,kY,Teo,Feo,CR,Ceo,Meo,Eeo,Os,RY,yeo,weo,MR,Aeo,Leo,ER,Beo,xeo,keo,Xs,SY,Reo,Seo,yR,Peo,$eo,wR,Ieo,jeo,Neo,PY,Deo,qeo,P4,Geo,vh,$4,Oeo,$Y,Xeo,Gke,od,Th,IY,I4,Veo,jY,zeo,Oke,Uo,j4,Weo,N4,Qeo,AR,Heo,Ueo,Jeo,D4,Yeo,NY,Keo,Zeo,eoo,Ie,q4,ooo,DY,roo,too,Qa,aoo,qY,noo,soo,GY,loo,ioo,OY,doo,coo,foo,re,Fh,XY,moo,goo,LR,hoo,poo,_oo,Ch,VY,uoo,boo,BR,voo,Too,Foo,Mh,zY,Coo,Moo,xR,Eoo,yoo,woo,Eh,WY,Aoo,Loo,kR,Boo,xoo,koo,yh,QY,Roo,Soo,RR,Poo,$oo,Ioo,wh,HY,joo,Noo,SR,Doo,qoo,Goo,Ah,UY,Ooo,Xoo,PR,Voo,zoo,Woo,Lh,JY,Qoo,Hoo,$R,Uoo,Joo,Yoo,Bh,YY,Koo,Zoo,IR,ero,oro,rro,xh,KY,tro,aro,jR,nro,sro,lro,kh,ZY,iro,dro,NR,cro,fro,mro,Rh,eK,gro,hro,DR,pro,_ro,uro,Sh,oK,bro,vro,qR,Tro,Fro,Cro,Ph,rK,Mro,Ero,GR,yro,wro,Aro,$h,tK,Lro,Bro,OR,xro,kro,Rro,Ih,aK,Sro,Pro,XR,$ro,Iro,jro,jh,nK,Nro,Dro,VR,qro,Gro,Oro,Nh,sK,Xro,Vro,zR,zro,Wro,Qro,Dh,Hro,lK,Uro,Jro,G4,Yro,qh,O4,Kro,iK,Zro,Xke,rd,Gh,dK,X4,eto,cK,oto,Vke,Jo,V4,rto,z4,tto,WR,ato,nto,sto,W4,lto,fK,ito,dto,cto,je,Q4,fto,mK,mto,gto,td,hto,gK,pto,_to,hK,uto,bto,vto,xe,Oh,pK,Tto,Fto,QR,Cto,Mto,Eto,Xh,_K,yto,wto,HR,Ato,Lto,Bto,Vh,uK,xto,kto,UR,Rto,Sto,Pto,zh,bK,$to,Ito,JR,jto,Nto,Dto,Wh,vK,qto,Gto,YR,Oto,Xto,Vto,Qh,TK,zto,Wto,KR,Qto,Hto,Uto,Hh,FK,Jto,Yto,ZR,Kto,Zto,eao,Uh,CK,oao,rao,eS,tao,aao,nao,Jh,sao,MK,lao,iao,H4,dao,Yh,U4,cao,EK,fao,zke,ad,Kh,yK,J4,mao,wK,gao,Wke,Yo,Y4,hao,nd,pao,AK,_ao,uao,LK,bao,vao,Tao,K4,Fao,BK,Cao,Mao,Eao,Wr,Z4,yao,xK,wao,Aao,sd,Lao,kK,Bao,xao,RK,kao,Rao,Sao,SK,Pao,$ao,eE,Iao,Ne,oE,jao,PK,Nao,Dao,Ha,qao,$K,Gao,Oao,IK,Xao,Vao,jK,zao,Wao,Qao,F,Zh,NK,Hao,Uao,oS,Jao,Yao,Kao,ep,DK,Zao,eno,rS,ono,rno,tno,op,qK,ano,nno,tS,sno,lno,ino,rp,GK,dno,cno,aS,fno,mno,gno,tp,OK,hno,pno,nS,_no,uno,bno,ap,XK,vno,Tno,sS,Fno,Cno,Mno,np,VK,Eno,yno,lS,wno,Ano,Lno,sp,zK,Bno,xno,iS,kno,Rno,Sno,lp,WK,Pno,$no,dS,Ino,jno,Nno,ip,QK,Dno,qno,cS,Gno,Ono,Xno,dp,HK,Vno,zno,fS,Wno,Qno,Hno,cp,UK,Uno,Jno,mS,Yno,Kno,Zno,fp,JK,eso,oso,gS,rso,tso,aso,mp,YK,nso,sso,hS,lso,iso,dso,gp,KK,cso,fso,pS,mso,gso,hso,hp,ZK,pso,_so,_S,uso,bso,vso,pp,eZ,Tso,Fso,uS,Cso,Mso,Eso,_p,oZ,yso,wso,bS,Aso,Lso,Bso,up,rZ,xso,kso,vS,Rso,Sso,Pso,bp,tZ,$so,Iso,TS,jso,Nso,Dso,vp,aZ,qso,Gso,FS,Oso,Xso,Vso,Tp,nZ,zso,Wso,CS,Qso,Hso,Uso,Fp,sZ,Jso,Yso,MS,Kso,Zso,elo,Cp,lZ,olo,rlo,ES,tlo,alo,nlo,Mp,iZ,slo,llo,yS,ilo,dlo,clo,Ep,dZ,flo,mlo,wS,glo,hlo,plo,yp,cZ,_lo,ulo,AS,blo,vlo,Tlo,Vs,fZ,Flo,Clo,LS,Mlo,Elo,BS,ylo,wlo,Alo,wp,mZ,Llo,Blo,xS,xlo,klo,Rlo,Ap,gZ,Slo,Plo,kS,$lo,Ilo,jlo,Lp,hZ,Nlo,Dlo,RS,qlo,Glo,Olo,Bp,pZ,Xlo,Vlo,SS,zlo,Wlo,Qlo,xp,_Z,Hlo,Ulo,PS,Jlo,Ylo,Klo,kp,uZ,Zlo,eio,$S,oio,rio,tio,Rp,bZ,aio,nio,IS,sio,lio,iio,Sp,vZ,dio,cio,jS,fio,mio,gio,Pp,TZ,hio,pio,NS,_io,uio,bio,$p,FZ,vio,Tio,DS,Fio,Cio,Mio,Ip,CZ,Eio,yio,qS,wio,Aio,Lio,jp,MZ,Bio,xio,GS,kio,Rio,Sio,Np,EZ,Pio,$io,OS,Iio,jio,Nio,Dp,yZ,Dio,qio,XS,Gio,Oio,Xio,qp,wZ,Vio,zio,VS,Wio,Qio,Hio,Gp,AZ,Uio,Jio,zS,Yio,Kio,Zio,Op,LZ,edo,odo,WS,rdo,tdo,ado,Xp,BZ,ndo,sdo,QS,ldo,ido,ddo,Vp,xZ,cdo,fdo,HS,mdo,gdo,hdo,zp,kZ,pdo,_do,US,udo,bdo,vdo,Wp,RZ,Tdo,Fdo,JS,Cdo,Mdo,Edo,Qp,SZ,ydo,wdo,YS,Ado,Ldo,Bdo,Hp,PZ,xdo,kdo,KS,Rdo,Sdo,Pdo,Up,$Z,$do,Ido,ZS,jdo,Ndo,Ddo,Jp,IZ,qdo,Gdo,eP,Odo,Xdo,Vdo,Yp,jZ,zdo,Wdo,oP,Qdo,Hdo,Udo,Kp,NZ,Jdo,Ydo,rP,Kdo,Zdo,eco,Zp,DZ,oco,rco,tP,tco,aco,nco,e_,qZ,sco,lco,aP,ico,dco,cco,o_,GZ,fco,mco,nP,gco,hco,pco,r_,OZ,_co,uco,sP,bco,vco,Tco,t_,XZ,Fco,Cco,lP,Mco,Eco,yco,a_,VZ,wco,Aco,iP,Lco,Bco,xco,n_,zZ,kco,Rco,dP,Sco,Pco,$co,s_,WZ,Ico,jco,cP,Nco,Dco,qco,l_,QZ,Gco,Oco,fP,Xco,Vco,zco,i_,HZ,Wco,Qco,mP,Hco,Uco,Jco,d_,UZ,Yco,Kco,gP,Zco,efo,ofo,c_,JZ,rfo,tfo,hP,afo,nfo,sfo,f_,YZ,lfo,ifo,pP,dfo,cfo,ffo,m_,KZ,mfo,gfo,_P,hfo,pfo,_fo,g_,ZZ,ufo,bfo,uP,vfo,Tfo,Ffo,h_,eee,Cfo,Mfo,bP,Efo,yfo,wfo,p_,oee,Afo,Lfo,vP,Bfo,xfo,kfo,__,ree,Rfo,Sfo,TP,Pfo,$fo,Ifo,u_,tee,jfo,Nfo,FP,Dfo,qfo,Gfo,b_,aee,Ofo,Xfo,CP,Vfo,zfo,Wfo,v_,nee,Qfo,Hfo,MP,Ufo,Jfo,Yfo,T_,see,Kfo,Zfo,EP,emo,omo,rmo,F_,lee,tmo,amo,yP,nmo,smo,lmo,C_,iee,imo,dmo,wP,cmo,fmo,mmo,M_,dee,gmo,hmo,AP,pmo,_mo,umo,E_,cee,bmo,vmo,LP,Tmo,Fmo,Cmo,y_,fee,Mmo,Emo,BP,ymo,wmo,Amo,w_,mee,Lmo,Bmo,xP,xmo,kmo,Rmo,A_,gee,Smo,Pmo,kP,$mo,Imo,jmo,L_,hee,Nmo,Dmo,RP,qmo,Gmo,Omo,B_,pee,Xmo,Vmo,SP,zmo,Wmo,Qmo,x_,_ee,Hmo,Umo,PP,Jmo,Ymo,Kmo,k_,uee,Zmo,ego,$P,ogo,rgo,tgo,R_,bee,ago,ngo,IP,sgo,lgo,igo,S_,vee,dgo,cgo,jP,fgo,mgo,ggo,P_,hgo,Tee,pgo,_go,Fee,ugo,bgo,Cee,vgo,Tgo,rE,Qke,ld,$_,Mee,tE,Fgo,Eee,Cgo,Hke,Ko,aE,Mgo,id,Ego,yee,ygo,wgo,wee,Ago,Lgo,Bgo,nE,xgo,Aee,kgo,Rgo,Sgo,Qr,sE,Pgo,Lee,$go,Igo,dd,jgo,Bee,Ngo,Dgo,xee,qgo,Ggo,Ogo,kee,Xgo,Vgo,lE,zgo,De,iE,Wgo,Ree,Qgo,Hgo,Ua,Ugo,See,Jgo,Ygo,Pee,Kgo,Zgo,$ee,eho,oho,rho,k,I_,Iee,tho,aho,NP,nho,sho,lho,j_,jee,iho,dho,DP,cho,fho,mho,N_,Nee,gho,hho,qP,pho,_ho,uho,D_,Dee,bho,vho,GP,Tho,Fho,Cho,q_,qee,Mho,Eho,OP,yho,who,Aho,G_,Gee,Lho,Bho,XP,xho,kho,Rho,O_,Oee,Sho,Pho,VP,$ho,Iho,jho,X_,Xee,Nho,Dho,zP,qho,Gho,Oho,V_,Vee,Xho,Vho,WP,zho,Who,Qho,z_,zee,Hho,Uho,QP,Jho,Yho,Kho,W_,Wee,Zho,epo,HP,opo,rpo,tpo,Q_,Qee,apo,npo,UP,spo,lpo,ipo,H_,Hee,dpo,cpo,JP,fpo,mpo,gpo,U_,Uee,hpo,ppo,YP,_po,upo,bpo,J_,Jee,vpo,Tpo,KP,Fpo,Cpo,Mpo,Y_,Yee,Epo,ypo,ZP,wpo,Apo,Lpo,K_,Kee,Bpo,xpo,e$,kpo,Rpo,Spo,Z_,Zee,Ppo,$po,o$,Ipo,jpo,Npo,eu,eoe,Dpo,qpo,r$,Gpo,Opo,Xpo,ou,ooe,Vpo,zpo,t$,Wpo,Qpo,Hpo,ru,roe,Upo,Jpo,a$,Ypo,Kpo,Zpo,tu,toe,e_o,o_o,n$,r_o,t_o,a_o,au,aoe,n_o,s_o,s$,l_o,i_o,d_o,nu,noe,c_o,f_o,l$,m_o,g_o,h_o,su,soe,p_o,__o,i$,u_o,b_o,v_o,lu,loe,T_o,F_o,d$,C_o,M_o,E_o,iu,ioe,y_o,w_o,c$,A_o,L_o,B_o,du,doe,x_o,k_o,f$,R_o,S_o,P_o,cu,coe,$_o,I_o,m$,j_o,N_o,D_o,fu,foe,q_o,G_o,g$,O_o,X_o,V_o,mu,moe,z_o,W_o,h$,Q_o,H_o,U_o,gu,goe,J_o,Y_o,p$,K_o,Z_o,euo,hu,hoe,ouo,ruo,_$,tuo,auo,nuo,pu,poe,suo,luo,u$,iuo,duo,cuo,_u,_oe,fuo,muo,b$,guo,huo,puo,uu,uoe,_uo,uuo,v$,buo,vuo,Tuo,bu,boe,Fuo,Cuo,T$,Muo,Euo,yuo,vu,voe,wuo,Auo,F$,Luo,Buo,xuo,Tu,Toe,kuo,Ruo,C$,Suo,Puo,$uo,Fu,Iuo,Foe,juo,Nuo,Coe,Duo,quo,Moe,Guo,Ouo,dE,Uke,cd,Cu,Eoe,cE,Xuo,yoe,Vuo,Jke,Zo,fE,zuo,fd,Wuo,woe,Quo,Huo,Aoe,Uuo,Juo,Yuo,mE,Kuo,Loe,Zuo,e1o,o1o,Hr,gE,r1o,Boe,t1o,a1o,md,n1o,xoe,s1o,l1o,koe,i1o,d1o,c1o,Roe,f1o,m1o,hE,g1o,qe,pE,h1o,Soe,p1o,_1o,Ja,u1o,Poe,b1o,v1o,$oe,T1o,F1o,Ioe,C1o,M1o,E1o,$,Mu,joe,y1o,w1o,M$,A1o,L1o,B1o,Eu,Noe,x1o,k1o,E$,R1o,S1o,P1o,yu,Doe,$1o,I1o,y$,j1o,N1o,D1o,wu,qoe,q1o,G1o,w$,O1o,X1o,V1o,Au,Goe,z1o,W1o,A$,Q1o,H1o,U1o,Lu,Ooe,J1o,Y1o,L$,K1o,Z1o,ebo,Bu,Xoe,obo,rbo,B$,tbo,abo,nbo,xu,Voe,sbo,lbo,x$,ibo,dbo,cbo,ku,zoe,fbo,mbo,k$,gbo,hbo,pbo,Ru,Woe,_bo,ubo,R$,bbo,vbo,Tbo,Su,Qoe,Fbo,Cbo,S$,Mbo,Ebo,ybo,Pu,Hoe,wbo,Abo,P$,Lbo,Bbo,xbo,$u,Uoe,kbo,Rbo,$$,Sbo,Pbo,$bo,Iu,Joe,Ibo,jbo,I$,Nbo,Dbo,qbo,ju,Yoe,Gbo,Obo,j$,Xbo,Vbo,zbo,Nu,Koe,Wbo,Qbo,N$,Hbo,Ubo,Jbo,Du,Zoe,Ybo,Kbo,D$,Zbo,e5o,o5o,qu,ere,r5o,t5o,q$,a5o,n5o,s5o,Gu,ore,l5o,i5o,G$,d5o,c5o,f5o,Ou,rre,m5o,g5o,O$,h5o,p5o,_5o,Xu,tre,u5o,b5o,X$,v5o,T5o,F5o,Vu,are,C5o,M5o,V$,E5o,y5o,w5o,zu,nre,A5o,L5o,z$,B5o,x5o,k5o,Wu,sre,R5o,S5o,W$,P5o,$5o,I5o,Qu,lre,j5o,N5o,Q$,D5o,q5o,G5o,Hu,ire,O5o,X5o,H$,V5o,z5o,W5o,Uu,dre,Q5o,H5o,U$,U5o,J5o,Y5o,Ju,cre,K5o,Z5o,J$,e2o,o2o,r2o,Yu,fre,t2o,a2o,Y$,n2o,s2o,l2o,Ku,mre,i2o,d2o,K$,c2o,f2o,m2o,Zu,gre,g2o,h2o,Z$,p2o,_2o,u2o,e1,hre,b2o,v2o,eI,T2o,F2o,C2o,o1,pre,M2o,E2o,oI,y2o,w2o,A2o,r1,_re,L2o,B2o,rI,x2o,k2o,R2o,t1,ure,S2o,P2o,tI,$2o,I2o,j2o,a1,N2o,bre,D2o,q2o,vre,G2o,O2o,Tre,X2o,V2o,_E,Yke,gd,n1,Fre,uE,z2o,Cre,W2o,Kke,er,bE,Q2o,hd,H2o,Mre,U2o,J2o,Ere,Y2o,K2o,Z2o,vE,evo,yre,ovo,rvo,tvo,Ur,TE,avo,wre,nvo,svo,pd,lvo,Are,ivo,dvo,Lre,cvo,fvo,mvo,Bre,gvo,hvo,FE,pvo,Ge,CE,_vo,xre,uvo,bvo,Ya,vvo,kre,Tvo,Fvo,Rre,Cvo,Mvo,Sre,Evo,yvo,wvo,I,s1,Pre,Avo,Lvo,aI,Bvo,xvo,kvo,l1,$re,Rvo,Svo,nI,Pvo,$vo,Ivo,i1,Ire,jvo,Nvo,sI,Dvo,qvo,Gvo,d1,jre,Ovo,Xvo,lI,Vvo,zvo,Wvo,c1,Nre,Qvo,Hvo,iI,Uvo,Jvo,Yvo,f1,Dre,Kvo,Zvo,dI,e6o,o6o,r6o,m1,qre,t6o,a6o,cI,n6o,s6o,l6o,g1,Gre,i6o,d6o,fI,c6o,f6o,m6o,h1,Ore,g6o,h6o,mI,p6o,_6o,u6o,p1,Xre,b6o,v6o,gI,T6o,F6o,C6o,_1,Vre,M6o,E6o,hI,y6o,w6o,A6o,u1,zre,L6o,B6o,pI,x6o,k6o,R6o,b1,Wre,S6o,P6o,_I,$6o,I6o,j6o,v1,Qre,N6o,D6o,uI,q6o,G6o,O6o,T1,Hre,X6o,V6o,bI,z6o,W6o,Q6o,F1,Ure,H6o,U6o,vI,J6o,Y6o,K6o,C1,Jre,Z6o,e0o,TI,o0o,r0o,t0o,M1,Yre,a0o,n0o,FI,s0o,l0o,i0o,E1,Kre,d0o,c0o,CI,f0o,m0o,g0o,y1,Zre,h0o,p0o,MI,_0o,u0o,b0o,w1,ete,v0o,T0o,EI,F0o,C0o,M0o,A1,ote,E0o,y0o,yI,w0o,A0o,L0o,L1,rte,B0o,x0o,wI,k0o,R0o,S0o,B1,tte,P0o,$0o,AI,I0o,j0o,N0o,x1,ate,D0o,q0o,LI,G0o,O0o,X0o,k1,nte,V0o,z0o,BI,W0o,Q0o,H0o,R1,ste,U0o,J0o,xI,Y0o,K0o,Z0o,S1,lte,eTo,oTo,kI,rTo,tTo,aTo,P1,ite,nTo,sTo,RI,lTo,iTo,dTo,$1,dte,cTo,fTo,SI,mTo,gTo,hTo,I1,cte,pTo,_To,fte,uTo,bTo,vTo,j1,mte,TTo,FTo,PI,CTo,MTo,ETo,N1,gte,yTo,wTo,$I,ATo,LTo,BTo,D1,hte,xTo,kTo,II,RTo,STo,PTo,q1,pte,$To,ITo,jI,jTo,NTo,DTo,G1,qTo,_te,GTo,OTo,ute,XTo,VTo,bte,zTo,WTo,ME,Zke,_d,O1,vte,EE,QTo,Tte,HTo,eRe,or,yE,UTo,ud,JTo,Fte,YTo,KTo,Cte,ZTo,e8o,o8o,wE,r8o,Mte,t8o,a8o,n8o,Jr,AE,s8o,Ete,l8o,i8o,bd,d8o,yte,c8o,f8o,wte,m8o,g8o,h8o,Ate,p8o,_8o,LE,u8o,Oe,BE,b8o,Lte,v8o,T8o,Ka,F8o,Bte,C8o,M8o,xte,E8o,y8o,kte,w8o,A8o,L8o,se,X1,Rte,B8o,x8o,NI,k8o,R8o,S8o,V1,Ste,P8o,$8o,DI,I8o,j8o,N8o,z1,Pte,D8o,q8o,qI,G8o,O8o,X8o,W1,$te,V8o,z8o,GI,W8o,Q8o,H8o,Q1,Ite,U8o,J8o,OI,Y8o,K8o,Z8o,H1,jte,eFo,oFo,XI,rFo,tFo,aFo,U1,Nte,nFo,sFo,VI,lFo,iFo,dFo,J1,Dte,cFo,fFo,zI,mFo,gFo,hFo,Y1,qte,pFo,_Fo,WI,uFo,bFo,vFo,K1,Gte,TFo,FFo,QI,CFo,MFo,EFo,Z1,Ote,yFo,wFo,HI,AFo,LFo,BFo,eb,Xte,xFo,kFo,UI,RFo,SFo,PFo,ob,Vte,$Fo,IFo,JI,jFo,NFo,DFo,rb,zte,qFo,GFo,YI,OFo,XFo,VFo,tb,Wte,zFo,WFo,KI,QFo,HFo,UFo,ab,Qte,JFo,YFo,ZI,KFo,ZFo,eCo,nb,oCo,Hte,rCo,tCo,Ute,aCo,nCo,Jte,sCo,lCo,xE,oRe,vd,sb,Yte,kE,iCo,Kte,dCo,rRe,rr,RE,cCo,Td,fCo,Zte,mCo,gCo,eae,hCo,pCo,_Co,SE,uCo,oae,bCo,vCo,TCo,Yr,PE,FCo,rae,CCo,MCo,Fd,ECo,tae,yCo,wCo,aae,ACo,LCo,BCo,nae,xCo,kCo,$E,RCo,Xe,IE,SCo,sae,PCo,$Co,Za,ICo,lae,jCo,NCo,iae,DCo,qCo,dae,GCo,OCo,XCo,A,lb,cae,VCo,zCo,ej,WCo,QCo,HCo,ib,fae,UCo,JCo,oj,YCo,KCo,ZCo,db,mae,eMo,oMo,rj,rMo,tMo,aMo,cb,gae,nMo,sMo,tj,lMo,iMo,dMo,fb,hae,cMo,fMo,aj,mMo,gMo,hMo,mb,pae,pMo,_Mo,nj,uMo,bMo,vMo,gb,_ae,TMo,FMo,sj,CMo,MMo,EMo,hb,uae,yMo,wMo,lj,AMo,LMo,BMo,pb,bae,xMo,kMo,ij,RMo,SMo,PMo,_b,vae,$Mo,IMo,dj,jMo,NMo,DMo,ub,Tae,qMo,GMo,cj,OMo,XMo,VMo,bb,Fae,zMo,WMo,fj,QMo,HMo,UMo,vb,Cae,JMo,YMo,mj,KMo,ZMo,e4o,Tb,Mae,o4o,r4o,gj,t4o,a4o,n4o,Fb,Eae,s4o,l4o,hj,i4o,d4o,c4o,Cb,yae,f4o,m4o,pj,g4o,h4o,p4o,Mb,wae,_4o,u4o,_j,b4o,v4o,T4o,Eb,Aae,F4o,C4o,uj,M4o,E4o,y4o,yb,Lae,w4o,A4o,bj,L4o,B4o,x4o,wb,Bae,k4o,R4o,vj,S4o,P4o,$4o,Ab,xae,I4o,j4o,Tj,N4o,D4o,q4o,Lb,kae,G4o,O4o,Fj,X4o,V4o,z4o,Bb,Rae,W4o,Q4o,Cj,H4o,U4o,J4o,xb,Sae,Y4o,K4o,Mj,Z4o,eEo,oEo,kb,Pae,rEo,tEo,Ej,aEo,nEo,sEo,Rb,$ae,lEo,iEo,yj,dEo,cEo,fEo,Sb,Iae,mEo,gEo,wj,hEo,pEo,_Eo,Pb,jae,uEo,bEo,Aj,vEo,TEo,FEo,$b,Nae,CEo,MEo,Lj,EEo,yEo,wEo,Ib,Dae,AEo,LEo,Bj,BEo,xEo,kEo,jb,qae,REo,SEo,xj,PEo,$Eo,IEo,Nb,Gae,jEo,NEo,kj,DEo,qEo,GEo,Db,Oae,OEo,XEo,Rj,VEo,zEo,WEo,qb,Xae,QEo,HEo,Sj,UEo,JEo,YEo,Gb,Vae,KEo,ZEo,Pj,e3o,o3o,r3o,Ob,zae,t3o,a3o,$j,n3o,s3o,l3o,Xb,Wae,i3o,d3o,Ij,c3o,f3o,m3o,Vb,Qae,g3o,h3o,jj,p3o,_3o,u3o,zb,Hae,b3o,v3o,Nj,T3o,F3o,C3o,Wb,Uae,M3o,E3o,Dj,y3o,w3o,A3o,Qb,Jae,L3o,B3o,qj,x3o,k3o,R3o,Hb,Yae,S3o,P3o,Gj,$3o,I3o,j3o,Ub,Kae,N3o,D3o,Oj,q3o,G3o,O3o,Jb,Zae,X3o,V3o,Xj,z3o,W3o,Q3o,Yb,ene,H3o,U3o,Vj,J3o,Y3o,K3o,Kb,one,Z3o,eyo,zj,oyo,ryo,tyo,Zb,ayo,rne,nyo,syo,tne,lyo,iyo,ane,dyo,cyo,jE,tRe,Cd,e5,nne,NE,fyo,sne,myo,aRe,tr,DE,gyo,Md,hyo,lne,pyo,_yo,ine,uyo,byo,vyo,qE,Tyo,dne,Fyo,Cyo,Myo,Kr,GE,Eyo,cne,yyo,wyo,Ed,Ayo,fne,Lyo,Byo,mne,xyo,kyo,Ryo,gne,Syo,Pyo,OE,$yo,Ve,XE,Iyo,hne,jyo,Nyo,en,Dyo,pne,qyo,Gyo,_ne,Oyo,Xyo,une,Vyo,zyo,Wyo,G,o5,bne,Qyo,Hyo,Wj,Uyo,Jyo,Yyo,r5,vne,Kyo,Zyo,Qj,ewo,owo,rwo,t5,Tne,two,awo,Hj,nwo,swo,lwo,a5,Fne,iwo,dwo,Uj,cwo,fwo,mwo,n5,Cne,gwo,hwo,Jj,pwo,_wo,uwo,s5,Mne,bwo,vwo,Yj,Two,Fwo,Cwo,l5,Ene,Mwo,Ewo,Kj,ywo,wwo,Awo,i5,yne,Lwo,Bwo,Zj,xwo,kwo,Rwo,d5,wne,Swo,Pwo,eN,$wo,Iwo,jwo,c5,Ane,Nwo,Dwo,oN,qwo,Gwo,Owo,f5,Lne,Xwo,Vwo,rN,zwo,Wwo,Qwo,m5,Bne,Hwo,Uwo,tN,Jwo,Ywo,Kwo,g5,xne,Zwo,eAo,aN,oAo,rAo,tAo,h5,kne,aAo,nAo,nN,sAo,lAo,iAo,p5,Rne,dAo,cAo,sN,fAo,mAo,gAo,_5,Sne,hAo,pAo,lN,_Ao,uAo,bAo,u5,Pne,vAo,TAo,iN,FAo,CAo,MAo,b5,$ne,EAo,yAo,dN,wAo,AAo,LAo,v5,Ine,BAo,xAo,cN,kAo,RAo,SAo,T5,jne,PAo,$Ao,fN,IAo,jAo,NAo,F5,Nne,DAo,qAo,mN,GAo,OAo,XAo,C5,Dne,VAo,zAo,gN,WAo,QAo,HAo,M5,qne,UAo,JAo,hN,YAo,KAo,ZAo,E5,Gne,eLo,oLo,pN,rLo,tLo,aLo,y5,One,nLo,sLo,_N,lLo,iLo,dLo,w5,Xne,cLo,fLo,uN,mLo,gLo,hLo,A5,Vne,pLo,_Lo,bN,uLo,bLo,vLo,L5,zne,TLo,FLo,vN,CLo,MLo,ELo,B5,yLo,Wne,wLo,ALo,Qne,LLo,BLo,Hne,xLo,kLo,VE,nRe,yd,x5,Une,zE,RLo,Jne,SLo,sRe,ar,WE,PLo,wd,$Lo,Yne,ILo,jLo,Kne,NLo,DLo,qLo,QE,GLo,Zne,OLo,XLo,VLo,Zr,HE,zLo,ese,WLo,QLo,Ad,HLo,ose,ULo,JLo,rse,YLo,KLo,ZLo,tse,e7o,o7o,UE,r7o,ze,JE,t7o,ase,a7o,n7o,on,s7o,nse,l7o,i7o,sse,d7o,c7o,lse,f7o,m7o,g7o,ma,k5,ise,h7o,p7o,TN,_7o,u7o,b7o,R5,dse,v7o,T7o,FN,F7o,C7o,M7o,S5,cse,E7o,y7o,CN,w7o,A7o,L7o,P5,fse,B7o,x7o,MN,k7o,R7o,S7o,$5,mse,P7o,$7o,EN,I7o,j7o,N7o,I5,D7o,gse,q7o,G7o,hse,O7o,X7o,pse,V7o,z7o,YE,lRe,Ld,j5,_se,KE,W7o,use,Q7o,iRe,nr,ZE,H7o,Bd,U7o,bse,J7o,Y7o,vse,K7o,Z7o,e9o,e3,o9o,Tse,r9o,t9o,a9o,et,o3,n9o,Fse,s9o,l9o,xd,i9o,Cse,d9o,c9o,Mse,f9o,m9o,g9o,Ese,h9o,p9o,r3,_9o,We,t3,u9o,yse,b9o,v9o,rn,T9o,wse,F9o,C9o,Ase,M9o,E9o,Lse,y9o,w9o,A9o,D,N5,Bse,L9o,B9o,yN,x9o,k9o,R9o,D5,xse,S9o,P9o,wN,$9o,I9o,j9o,q5,kse,N9o,D9o,AN,q9o,G9o,O9o,G5,Rse,X9o,V9o,LN,z9o,W9o,Q9o,O5,Sse,H9o,U9o,BN,J9o,Y9o,K9o,X5,Pse,Z9o,eBo,xN,oBo,rBo,tBo,V5,$se,aBo,nBo,kN,sBo,lBo,iBo,z5,Ise,dBo,cBo,RN,fBo,mBo,gBo,W5,jse,hBo,pBo,SN,_Bo,uBo,bBo,Q5,Nse,vBo,TBo,PN,FBo,CBo,MBo,H5,Dse,EBo,yBo,$N,wBo,ABo,LBo,U5,qse,BBo,xBo,IN,kBo,RBo,SBo,J5,Gse,PBo,$Bo,jN,IBo,jBo,NBo,Y5,Ose,DBo,qBo,NN,GBo,OBo,XBo,K5,Xse,VBo,zBo,DN,WBo,QBo,HBo,Z5,Vse,UBo,JBo,qN,YBo,KBo,ZBo,e2,zse,exo,oxo,GN,rxo,txo,axo,o2,Wse,nxo,sxo,ON,lxo,ixo,dxo,r2,Qse,cxo,fxo,XN,mxo,gxo,hxo,t2,Hse,pxo,_xo,VN,uxo,bxo,vxo,a2,Use,Txo,Fxo,zN,Cxo,Mxo,Exo,n2,Jse,yxo,wxo,WN,Axo,Lxo,Bxo,s2,Yse,xxo,kxo,QN,Rxo,Sxo,Pxo,l2,Kse,$xo,Ixo,HN,jxo,Nxo,Dxo,i2,Zse,qxo,Gxo,UN,Oxo,Xxo,Vxo,d2,ele,zxo,Wxo,JN,Qxo,Hxo,Uxo,c2,ole,Jxo,Yxo,YN,Kxo,Zxo,eko,f2,rle,oko,rko,KN,tko,ako,nko,m2,tle,sko,lko,ZN,iko,dko,cko,g2,ale,fko,mko,eD,gko,hko,pko,h2,nle,_ko,uko,oD,bko,vko,Tko,p2,sle,Fko,Cko,rD,Mko,Eko,yko,_2,lle,wko,Ako,tD,Lko,Bko,xko,u2,kko,ile,Rko,Sko,dle,Pko,$ko,cle,Iko,jko,a3,dRe,kd,b2,fle,n3,Nko,mle,Dko,cRe,sr,s3,qko,Rd,Gko,gle,Oko,Xko,hle,Vko,zko,Wko,l3,Qko,ple,Hko,Uko,Jko,ot,i3,Yko,_le,Kko,Zko,Sd,eRo,ule,oRo,rRo,ble,tRo,aRo,nRo,vle,sRo,lRo,d3,iRo,Qe,c3,dRo,Tle,cRo,fRo,tn,mRo,Fle,gRo,hRo,Cle,pRo,_Ro,Mle,uRo,bRo,vRo,R,v2,Ele,TRo,FRo,aD,CRo,MRo,ERo,T2,yle,yRo,wRo,nD,ARo,LRo,BRo,F2,wle,xRo,kRo,sD,RRo,SRo,PRo,C2,Ale,$Ro,IRo,lD,jRo,NRo,DRo,M2,Lle,qRo,GRo,iD,ORo,XRo,VRo,E2,Ble,zRo,WRo,dD,QRo,HRo,URo,y2,xle,JRo,YRo,cD,KRo,ZRo,eSo,w2,kle,oSo,rSo,fD,tSo,aSo,nSo,A2,Rle,sSo,lSo,mD,iSo,dSo,cSo,L2,Sle,fSo,mSo,gD,gSo,hSo,pSo,B2,Ple,_So,uSo,hD,bSo,vSo,TSo,x2,$le,FSo,CSo,pD,MSo,ESo,ySo,k2,Ile,wSo,ASo,_D,LSo,BSo,xSo,R2,jle,kSo,RSo,uD,SSo,PSo,$So,S2,Nle,ISo,jSo,bD,NSo,DSo,qSo,P2,Dle,GSo,OSo,vD,XSo,VSo,zSo,$2,qle,WSo,QSo,TD,HSo,USo,JSo,I2,Gle,YSo,KSo,FD,ZSo,ePo,oPo,j2,Ole,rPo,tPo,CD,aPo,nPo,sPo,N2,Xle,lPo,iPo,MD,dPo,cPo,fPo,D2,Vle,mPo,gPo,ED,hPo,pPo,_Po,q2,zle,uPo,bPo,yD,vPo,TPo,FPo,G2,Wle,CPo,MPo,wD,EPo,yPo,wPo,O2,Qle,APo,LPo,AD,BPo,xPo,kPo,X2,Hle,RPo,SPo,LD,PPo,$Po,IPo,V2,Ule,jPo,NPo,BD,DPo,qPo,GPo,z2,Jle,OPo,XPo,xD,VPo,zPo,WPo,W2,Yle,QPo,HPo,kD,UPo,JPo,YPo,Q2,Kle,KPo,ZPo,RD,e$o,o$o,r$o,H2,Zle,t$o,a$o,SD,n$o,s$o,l$o,U2,eie,i$o,d$o,PD,c$o,f$o,m$o,J2,oie,g$o,h$o,$D,p$o,_$o,u$o,Y2,rie,b$o,v$o,ID,T$o,F$o,C$o,K2,tie,M$o,E$o,jD,y$o,w$o,A$o,Z2,aie,L$o,B$o,ND,x$o,k$o,R$o,ev,nie,S$o,P$o,DD,$$o,I$o,j$o,ov,sie,N$o,D$o,qD,q$o,G$o,O$o,rv,lie,X$o,V$o,GD,z$o,W$o,Q$o,tv,iie,H$o,U$o,OD,J$o,Y$o,K$o,av,Z$o,die,eIo,oIo,cie,rIo,tIo,fie,aIo,nIo,f3,fRe,Pd,nv,mie,m3,sIo,gie,lIo,mRe,lr,g3,iIo,$d,dIo,hie,cIo,fIo,pie,mIo,gIo,hIo,h3,pIo,_ie,_Io,uIo,bIo,rt,p3,vIo,uie,TIo,FIo,Id,CIo,bie,MIo,EIo,vie,yIo,wIo,AIo,Tie,LIo,BIo,_3,xIo,He,u3,kIo,Fie,RIo,SIo,an,PIo,Cie,$Io,IIo,Mie,jIo,NIo,Eie,DIo,qIo,GIo,yie,sv,wie,OIo,XIo,XD,VIo,zIo,WIo,lv,QIo,Aie,HIo,UIo,Lie,JIo,YIo,Bie,KIo,ZIo,b3,gRe,jd,iv,xie,v3,ejo,kie,ojo,hRe,ir,T3,rjo,Nd,tjo,Rie,ajo,njo,Sie,sjo,ljo,ijo,F3,djo,Pie,cjo,fjo,mjo,tt,C3,gjo,$ie,hjo,pjo,Dd,_jo,Iie,ujo,bjo,jie,vjo,Tjo,Fjo,Nie,Cjo,Mjo,M3,Ejo,Ue,E3,yjo,Die,wjo,Ajo,nn,Ljo,qie,Bjo,xjo,Gie,kjo,Rjo,Oie,Sjo,Pjo,$jo,me,dv,Xie,Ijo,jjo,VD,Njo,Djo,qjo,cv,Vie,Gjo,Ojo,zD,Xjo,Vjo,zjo,zs,zie,Wjo,Qjo,WD,Hjo,Ujo,QD,Jjo,Yjo,Kjo,fv,Wie,Zjo,eNo,HD,oNo,rNo,tNo,pa,Qie,aNo,nNo,UD,sNo,lNo,JD,iNo,dNo,YD,cNo,fNo,mNo,mv,Hie,gNo,hNo,KD,pNo,_No,uNo,gv,Uie,bNo,vNo,ZD,TNo,FNo,CNo,hv,Jie,MNo,ENo,eq,yNo,wNo,ANo,pv,Yie,LNo,BNo,oq,xNo,kNo,RNo,_v,Kie,SNo,PNo,rq,$No,INo,jNo,uv,Zie,NNo,DNo,tq,qNo,GNo,ONo,bv,XNo,ede,VNo,zNo,ode,WNo,QNo,rde,HNo,UNo,y3,pRe,qd,vv,tde,w3,JNo,ade,YNo,_Re,dr,A3,KNo,Gd,ZNo,nde,eDo,oDo,sde,rDo,tDo,aDo,L3,nDo,lde,sDo,lDo,iDo,at,B3,dDo,ide,cDo,fDo,Od,mDo,dde,gDo,hDo,cde,pDo,_Do,uDo,fde,bDo,vDo,x3,TDo,Je,k3,FDo,mde,CDo,MDo,sn,EDo,gde,yDo,wDo,hde,ADo,LDo,pde,BDo,xDo,kDo,_de,Tv,ude,RDo,SDo,aq,PDo,$Do,IDo,Fv,jDo,bde,NDo,DDo,vde,qDo,GDo,Tde,ODo,XDo,R3,uRe,Xd,Cv,Fde,S3,VDo,Cde,zDo,bRe,cr,P3,WDo,Vd,QDo,Mde,HDo,UDo,Ede,JDo,YDo,KDo,$3,ZDo,yde,eqo,oqo,rqo,nt,I3,tqo,wde,aqo,nqo,zd,sqo,Ade,lqo,iqo,Lde,dqo,cqo,fqo,Bde,mqo,gqo,j3,hqo,Ye,N3,pqo,xde,_qo,uqo,ln,bqo,kde,vqo,Tqo,Rde,Fqo,Cqo,Sde,Mqo,Eqo,yqo,ke,Mv,Pde,wqo,Aqo,nq,Lqo,Bqo,xqo,Ev,$de,kqo,Rqo,sq,Sqo,Pqo,$qo,yv,Ide,Iqo,jqo,lq,Nqo,Dqo,qqo,wv,jde,Gqo,Oqo,iq,Xqo,Vqo,zqo,Av,Nde,Wqo,Qqo,dq,Hqo,Uqo,Jqo,Lv,Dde,Yqo,Kqo,cq,Zqo,eGo,oGo,Bv,qde,rGo,tGo,fq,aGo,nGo,sGo,xv,Gde,lGo,iGo,mq,dGo,cGo,fGo,kv,mGo,Ode,gGo,hGo,Xde,pGo,_Go,Vde,uGo,bGo,D3,vRe,Wd,Rv,zde,q3,vGo,Wde,TGo,TRe,fr,G3,FGo,Qd,CGo,Qde,MGo,EGo,Hde,yGo,wGo,AGo,O3,LGo,Ude,BGo,xGo,kGo,st,X3,RGo,Jde,SGo,PGo,Hd,$Go,Yde,IGo,jGo,Kde,NGo,DGo,qGo,Zde,GGo,OGo,V3,XGo,Ke,z3,VGo,ece,zGo,WGo,dn,QGo,oce,HGo,UGo,rce,JGo,YGo,tce,KGo,ZGo,eOo,cn,Sv,ace,oOo,rOo,gq,tOo,aOo,nOo,Pv,nce,sOo,lOo,hq,iOo,dOo,cOo,$v,sce,fOo,mOo,pq,gOo,hOo,pOo,Iv,lce,_Oo,uOo,_q,bOo,vOo,TOo,jv,FOo,ice,COo,MOo,dce,EOo,yOo,cce,wOo,AOo,W3,FRe,Ud,Nv,fce,Q3,LOo,mce,BOo,CRe,mr,H3,xOo,Jd,kOo,gce,ROo,SOo,hce,POo,$Oo,IOo,U3,jOo,pce,NOo,DOo,qOo,lt,J3,GOo,_ce,OOo,XOo,Yd,VOo,uce,zOo,WOo,bce,QOo,HOo,UOo,vce,JOo,YOo,Y3,KOo,Ze,K3,ZOo,Tce,eXo,oXo,fn,rXo,Fce,tXo,aXo,Cce,nXo,sXo,Mce,lXo,iXo,dXo,Re,Dv,Ece,cXo,fXo,uq,mXo,gXo,hXo,qv,yce,pXo,_Xo,bq,uXo,bXo,vXo,Gv,wce,TXo,FXo,vq,CXo,MXo,EXo,Ov,Ace,yXo,wXo,Tq,AXo,LXo,BXo,Xv,Lce,xXo,kXo,Fq,RXo,SXo,PXo,Vv,Bce,$Xo,IXo,Cq,jXo,NXo,DXo,zv,xce,qXo,GXo,Mq,OXo,XXo,VXo,Wv,kce,zXo,WXo,Eq,QXo,HXo,UXo,Qv,JXo,Rce,YXo,KXo,Sce,ZXo,eVo,Pce,oVo,rVo,Z3,MRe,Kd,Hv,$ce,ey,tVo,Ice,aVo,ERe,gr,oy,nVo,Zd,sVo,jce,lVo,iVo,Nce,dVo,cVo,fVo,ry,mVo,Dce,gVo,hVo,pVo,it,ty,_Vo,qce,uVo,bVo,ec,vVo,Gce,TVo,FVo,Oce,CVo,MVo,EVo,Xce,yVo,wVo,ay,AVo,eo,ny,LVo,Vce,BVo,xVo,mn,kVo,zce,RVo,SVo,Wce,PVo,$Vo,Qce,IVo,jVo,NVo,sy,Uv,Hce,DVo,qVo,yq,GVo,OVo,XVo,Jv,Uce,VVo,zVo,wq,WVo,QVo,HVo,Yv,UVo,Jce,JVo,YVo,Yce,KVo,ZVo,Kce,ezo,ozo,ly,yRe,oc,Kv,Zce,iy,rzo,efe,tzo,wRe,hr,dy,azo,rc,nzo,ofe,szo,lzo,rfe,izo,dzo,czo,cy,fzo,tfe,mzo,gzo,hzo,dt,fy,pzo,afe,_zo,uzo,tc,bzo,nfe,vzo,Tzo,sfe,Fzo,Czo,Mzo,lfe,Ezo,yzo,my,wzo,oo,gy,Azo,ife,Lzo,Bzo,gn,xzo,dfe,kzo,Rzo,cfe,Szo,Pzo,ffe,$zo,Izo,jzo,hn,Zv,mfe,Nzo,Dzo,Aq,qzo,Gzo,Ozo,e6,gfe,Xzo,Vzo,Lq,zzo,Wzo,Qzo,o6,hfe,Hzo,Uzo,Bq,Jzo,Yzo,Kzo,r6,pfe,Zzo,eWo,xq,oWo,rWo,tWo,t6,aWo,_fe,nWo,sWo,ufe,lWo,iWo,bfe,dWo,cWo,hy,ARe,ac,a6,vfe,py,fWo,Tfe,mWo,LRe,pr,_y,gWo,nc,hWo,Ffe,pWo,_Wo,Cfe,uWo,bWo,vWo,uy,TWo,Mfe,FWo,CWo,MWo,ct,by,EWo,Efe,yWo,wWo,sc,AWo,yfe,LWo,BWo,wfe,xWo,kWo,RWo,Afe,SWo,PWo,vy,$Wo,ro,Ty,IWo,Lfe,jWo,NWo,pn,DWo,Bfe,qWo,GWo,xfe,OWo,XWo,kfe,VWo,zWo,WWo,lc,n6,Rfe,QWo,HWo,kq,UWo,JWo,YWo,s6,Sfe,KWo,ZWo,Rq,eQo,oQo,rQo,l6,Pfe,tQo,aQo,Sq,nQo,sQo,lQo,i6,iQo,$fe,dQo,cQo,Ife,fQo,mQo,jfe,gQo,hQo,Fy,BRe,ic,d6,Nfe,Cy,pQo,Dfe,_Qo,xRe,_r,My,uQo,dc,bQo,qfe,vQo,TQo,Gfe,FQo,CQo,MQo,Ey,EQo,Ofe,yQo,wQo,AQo,ft,yy,LQo,Xfe,BQo,xQo,cc,kQo,Vfe,RQo,SQo,zfe,PQo,$Qo,IQo,Wfe,jQo,NQo,wy,DQo,to,Ay,qQo,Qfe,GQo,OQo,_n,XQo,Hfe,VQo,zQo,Ufe,WQo,QQo,Jfe,HQo,UQo,JQo,Yfe,c6,Kfe,YQo,KQo,Pq,ZQo,eHo,oHo,f6,rHo,Zfe,tHo,aHo,eme,nHo,sHo,ome,lHo,iHo,Ly,kRe,fc,m6,rme,By,dHo,tme,cHo,RRe,ur,xy,fHo,mc,mHo,ame,gHo,hHo,nme,pHo,_Ho,uHo,ky,bHo,sme,vHo,THo,FHo,mt,Ry,CHo,lme,MHo,EHo,gc,yHo,ime,wHo,AHo,dme,LHo,BHo,xHo,cme,kHo,RHo,Sy,SHo,ao,Py,PHo,fme,$Ho,IHo,un,jHo,mme,NHo,DHo,gme,qHo,GHo,hme,OHo,XHo,VHo,pme,g6,_me,zHo,WHo,$q,QHo,HHo,UHo,h6,JHo,ume,YHo,KHo,bme,ZHo,eUo,vme,oUo,rUo,$y,SRe,hc,p6,Tme,Iy,tUo,Fme,aUo,PRe,br,jy,nUo,pc,sUo,Cme,lUo,iUo,Mme,dUo,cUo,fUo,Ny,mUo,Eme,gUo,hUo,pUo,gt,Dy,_Uo,yme,uUo,bUo,_c,vUo,wme,TUo,FUo,Ame,CUo,MUo,EUo,Lme,yUo,wUo,qy,AUo,no,Gy,LUo,Bme,BUo,xUo,bn,kUo,xme,RUo,SUo,kme,PUo,$Uo,Rme,IUo,jUo,NUo,Oy,_6,Sme,DUo,qUo,Iq,GUo,OUo,XUo,u6,Pme,VUo,zUo,jq,WUo,QUo,HUo,b6,UUo,$me,JUo,YUo,Ime,KUo,ZUo,jme,eJo,oJo,Xy,$Re,uc,v6,Nme,Vy,rJo,Dme,tJo,IRe,vr,zy,aJo,bc,nJo,qme,sJo,lJo,Gme,iJo,dJo,cJo,Wy,fJo,Ome,mJo,gJo,hJo,ht,Qy,pJo,Xme,_Jo,uJo,vc,bJo,Vme,vJo,TJo,zme,FJo,CJo,MJo,Wme,EJo,yJo,Hy,wJo,so,Uy,AJo,Qme,LJo,BJo,vn,xJo,Hme,kJo,RJo,Ume,SJo,PJo,Jme,$Jo,IJo,jJo,Yme,T6,Kme,NJo,DJo,Nq,qJo,GJo,OJo,F6,XJo,Zme,VJo,zJo,ege,WJo,QJo,oge,HJo,UJo,Jy,jRe,Tc,C6,rge,Yy,JJo,tge,YJo,NRe,Tr,Ky,KJo,Fc,ZJo,age,eYo,oYo,nge,rYo,tYo,aYo,Zy,nYo,sge,sYo,lYo,iYo,pt,ew,dYo,lge,cYo,fYo,Cc,mYo,ige,gYo,hYo,dge,pYo,_Yo,uYo,cge,bYo,vYo,ow,TYo,ho,rw,FYo,fge,CYo,MYo,Tn,EYo,mge,yYo,wYo,gge,AYo,LYo,hge,BYo,xYo,kYo,B,M6,pge,RYo,SYo,Dq,PYo,$Yo,IYo,E6,_ge,jYo,NYo,qq,DYo,qYo,GYo,y6,uge,OYo,XYo,Gq,VYo,zYo,WYo,w6,bge,QYo,HYo,Oq,UYo,JYo,YYo,A6,vge,KYo,ZYo,Xq,eKo,oKo,rKo,L6,Tge,tKo,aKo,Vq,nKo,sKo,lKo,B6,Fge,iKo,dKo,zq,cKo,fKo,mKo,x6,Cge,gKo,hKo,Wq,pKo,_Ko,uKo,k6,Mge,bKo,vKo,Qq,TKo,FKo,CKo,R6,Ege,MKo,EKo,Hq,yKo,wKo,AKo,S6,yge,LKo,BKo,Uq,xKo,kKo,RKo,P6,wge,SKo,PKo,Jq,$Ko,IKo,jKo,$6,Age,NKo,DKo,Yq,qKo,GKo,OKo,I6,Lge,XKo,VKo,Kq,zKo,WKo,QKo,j6,Bge,HKo,UKo,Zq,JKo,YKo,KKo,N6,xge,ZKo,eZo,eG,oZo,rZo,tZo,Ws,kge,aZo,nZo,oG,sZo,lZo,rG,iZo,dZo,cZo,D6,Rge,fZo,mZo,tG,gZo,hZo,pZo,q6,Sge,_Zo,uZo,aG,bZo,vZo,TZo,G6,Pge,FZo,CZo,nG,MZo,EZo,yZo,O6,$ge,wZo,AZo,sG,LZo,BZo,xZo,X6,Ige,kZo,RZo,lG,SZo,PZo,$Zo,V6,jge,IZo,jZo,iG,NZo,DZo,qZo,z6,Nge,GZo,OZo,dG,XZo,VZo,zZo,W6,Dge,WZo,QZo,cG,HZo,UZo,JZo,Q6,qge,YZo,KZo,fG,ZZo,eer,oer,H6,Gge,rer,ter,mG,aer,ner,ser,U6,Oge,ler,ier,gG,der,cer,fer,J6,Xge,mer,ger,hG,her,per,_er,Y6,Vge,uer,ber,pG,ver,Ter,Fer,K6,zge,Cer,Mer,_G,Eer,yer,wer,Z6,Wge,Aer,Ler,uG,Ber,xer,ker,e0,Qge,Rer,Ser,bG,Per,$er,Ier,o0,Hge,jer,Ner,vG,Der,qer,Ger,r0,Uge,Oer,Xer,TG,Ver,zer,Wer,t0,Jge,Qer,Her,FG,Uer,Jer,Yer,a0,Yge,Ker,Zer,CG,eor,oor,ror,n0,Kge,tor,aor,MG,nor,sor,lor,s0,Zge,ior,dor,EG,cor,mor,gor,l0,ehe,hor,por,yG,_or,uor,bor,i0,ohe,vor,Tor,wG,For,Cor,Mor,d0,rhe,Eor,yor,AG,wor,Aor,Lor,the,Bor,xor,tw,DRe,Mc,c0,ahe,aw,kor,nhe,Ror,qRe,Fr,nw,Sor,Ec,Por,she,$or,Ior,lhe,jor,Nor,Dor,sw,qor,ihe,Gor,Oor,Xor,_t,lw,Vor,dhe,zor,Wor,yc,Qor,che,Hor,Uor,fhe,Jor,Yor,Kor,mhe,Zor,err,iw,orr,po,dw,rrr,ghe,trr,arr,Fn,nrr,hhe,srr,lrr,phe,irr,drr,_he,crr,frr,mrr,H,f0,uhe,grr,hrr,LG,prr,_rr,urr,m0,bhe,brr,vrr,BG,Trr,Frr,Crr,g0,vhe,Mrr,Err,xG,yrr,wrr,Arr,h0,The,Lrr,Brr,kG,xrr,krr,Rrr,p0,Fhe,Srr,Prr,RG,$rr,Irr,jrr,_0,Che,Nrr,Drr,SG,qrr,Grr,Orr,u0,Mhe,Xrr,Vrr,PG,zrr,Wrr,Qrr,b0,Ehe,Hrr,Urr,$G,Jrr,Yrr,Krr,v0,yhe,Zrr,etr,IG,otr,rtr,ttr,T0,whe,atr,ntr,jG,str,ltr,itr,F0,Ahe,dtr,ctr,NG,ftr,mtr,gtr,C0,Lhe,htr,ptr,DG,_tr,utr,btr,M0,Bhe,vtr,Ttr,qG,Ftr,Ctr,Mtr,E0,xhe,Etr,ytr,GG,wtr,Atr,Ltr,y0,khe,Btr,xtr,OG,ktr,Rtr,Str,w0,Rhe,Ptr,$tr,XG,Itr,jtr,Ntr,A0,She,Dtr,qtr,VG,Gtr,Otr,Xtr,L0,Phe,Vtr,ztr,zG,Wtr,Qtr,Htr,B0,$he,Utr,Jtr,WG,Ytr,Ktr,Ztr,x0,Ihe,ear,oar,QG,rar,tar,aar,k0,jhe,nar,sar,HG,lar,iar,dar,R0,Nhe,car,far,UG,mar,gar,har,Dhe,par,_ar,cw,GRe,wc,S0,qhe,fw,uar,Ghe,bar,ORe,Cr,mw,Tar,Ac,Far,Ohe,Car,Mar,Xhe,Ear,yar,war,gw,Aar,Vhe,Lar,Bar,xar,ut,hw,kar,zhe,Rar,Sar,Lc,Par,Whe,$ar,Iar,Qhe,jar,Nar,Dar,Hhe,qar,Gar,pw,Oar,_o,_w,Xar,Uhe,Var,zar,Cn,War,Jhe,Qar,Har,Yhe,Uar,Jar,Khe,Yar,Kar,Zar,ge,P0,Zhe,enr,onr,JG,rnr,tnr,anr,$0,epe,nnr,snr,YG,lnr,inr,dnr,I0,ope,cnr,fnr,KG,mnr,gnr,hnr,j0,rpe,pnr,_nr,ZG,unr,bnr,vnr,N0,tpe,Tnr,Fnr,eO,Cnr,Mnr,Enr,D0,ape,ynr,wnr,oO,Anr,Lnr,Bnr,q0,npe,xnr,knr,rO,Rnr,Snr,Pnr,G0,spe,$nr,Inr,tO,jnr,Nnr,Dnr,O0,lpe,qnr,Gnr,aO,Onr,Xnr,Vnr,X0,ipe,znr,Wnr,nO,Qnr,Hnr,Unr,V0,dpe,Jnr,Ynr,sO,Knr,Znr,esr,cpe,osr,rsr,uw,XRe,Bc,z0,fpe,bw,tsr,mpe,asr,VRe,Mr,vw,nsr,xc,ssr,gpe,lsr,isr,hpe,dsr,csr,fsr,Tw,msr,ppe,gsr,hsr,psr,bt,Fw,_sr,_pe,usr,bsr,kc,vsr,upe,Tsr,Fsr,bpe,Csr,Msr,Esr,vpe,ysr,wsr,Cw,Asr,uo,Mw,Lsr,Tpe,Bsr,xsr,Mn,ksr,Fpe,Rsr,Ssr,Cpe,Psr,$sr,Mpe,Isr,jsr,Nsr,Ew,W0,Epe,Dsr,qsr,lO,Gsr,Osr,Xsr,Q0,ype,Vsr,zsr,iO,Wsr,Qsr,Hsr,wpe,Usr,Jsr,yw,zRe,Rc,H0,Ape,ww,Ysr,Lpe,Ksr,WRe,Er,Aw,Zsr,Sc,elr,Bpe,olr,rlr,xpe,tlr,alr,nlr,Lw,slr,kpe,llr,ilr,dlr,vt,Bw,clr,Rpe,flr,mlr,Pc,glr,Spe,hlr,plr,Ppe,_lr,ulr,blr,$pe,vlr,Tlr,xw,Flr,bo,kw,Clr,Ipe,Mlr,Elr,En,ylr,jpe,wlr,Alr,Npe,Llr,Blr,Dpe,xlr,klr,Rlr,Y,U0,qpe,Slr,Plr,dO,$lr,Ilr,jlr,J0,Gpe,Nlr,Dlr,cO,qlr,Glr,Olr,Y0,Ope,Xlr,Vlr,fO,zlr,Wlr,Qlr,K0,Xpe,Hlr,Ulr,mO,Jlr,Ylr,Klr,Z0,Vpe,Zlr,eir,gO,oir,rir,tir,eT,zpe,air,nir,hO,sir,lir,iir,oT,Wpe,dir,cir,pO,fir,mir,gir,rT,Qpe,hir,pir,_O,_ir,uir,bir,tT,Hpe,vir,Tir,uO,Fir,Cir,Mir,aT,Upe,Eir,yir,bO,wir,Air,Lir,nT,Jpe,Bir,xir,vO,kir,Rir,Sir,sT,Ype,Pir,$ir,TO,Iir,jir,Nir,lT,Kpe,Dir,qir,FO,Gir,Oir,Xir,iT,Zpe,Vir,zir,CO,Wir,Qir,Hir,dT,e_e,Uir,Jir,MO,Yir,Kir,Zir,cT,o_e,edr,odr,EO,rdr,tdr,adr,fT,r_e,ndr,sdr,yO,ldr,idr,ddr,mT,t_e,cdr,fdr,wO,mdr,gdr,hdr,gT,a_e,pdr,_dr,AO,udr,bdr,vdr,hT,n_e,Tdr,Fdr,LO,Cdr,Mdr,Edr,s_e,ydr,wdr,Rw,QRe,$c,pT,l_e,Sw,Adr,i_e,Ldr,HRe,yr,Pw,Bdr,Ic,xdr,d_e,kdr,Rdr,c_e,Sdr,Pdr,$dr,$w,Idr,f_e,jdr,Ndr,Ddr,Tt,Iw,qdr,m_e,Gdr,Odr,jc,Xdr,g_e,Vdr,zdr,h_e,Wdr,Qdr,Hdr,p_e,Udr,Jdr,jw,Ydr,vo,Nw,Kdr,__e,Zdr,ecr,yn,ocr,u_e,rcr,tcr,b_e,acr,ncr,v_e,scr,lcr,icr,ue,_T,T_e,dcr,ccr,BO,fcr,mcr,gcr,uT,F_e,hcr,pcr,xO,_cr,ucr,bcr,bT,C_e,vcr,Tcr,kO,Fcr,Ccr,Mcr,vT,M_e,Ecr,ycr,RO,wcr,Acr,Lcr,TT,E_e,Bcr,xcr,SO,kcr,Rcr,Scr,FT,y_e,Pcr,$cr,PO,Icr,jcr,Ncr,CT,w_e,Dcr,qcr,$O,Gcr,Ocr,Xcr,MT,A_e,Vcr,zcr,IO,Wcr,Qcr,Hcr,ET,L_e,Ucr,Jcr,jO,Ycr,Kcr,Zcr,yT,B_e,efr,ofr,NO,rfr,tfr,afr,x_e,nfr,sfr,Dw,URe,Nc,wT,k_e,qw,lfr,R_e,ifr,JRe,wr,Gw,dfr,Dc,cfr,S_e,ffr,mfr,P_e,gfr,hfr,pfr,Ow,_fr,$_e,ufr,bfr,vfr,Ft,Xw,Tfr,I_e,Ffr,Cfr,qc,Mfr,j_e,Efr,yfr,N_e,wfr,Afr,Lfr,D_e,Bfr,xfr,Vw,kfr,To,zw,Rfr,q_e,Sfr,Pfr,wn,$fr,G_e,Ifr,jfr,O_e,Nfr,Dfr,X_e,qfr,Gfr,Ofr,V,AT,V_e,Xfr,Vfr,DO,zfr,Wfr,Qfr,LT,z_e,Hfr,Ufr,qO,Jfr,Yfr,Kfr,BT,W_e,Zfr,emr,GO,omr,rmr,tmr,xT,Q_e,amr,nmr,OO,smr,lmr,imr,kT,H_e,dmr,cmr,XO,fmr,mmr,gmr,RT,U_e,hmr,pmr,VO,_mr,umr,bmr,ST,J_e,vmr,Tmr,zO,Fmr,Cmr,Mmr,PT,Y_e,Emr,ymr,WO,wmr,Amr,Lmr,$T,K_e,Bmr,xmr,QO,kmr,Rmr,Smr,IT,Z_e,Pmr,$mr,HO,Imr,jmr,Nmr,jT,eue,Dmr,qmr,UO,Gmr,Omr,Xmr,NT,oue,Vmr,zmr,JO,Wmr,Qmr,Hmr,DT,rue,Umr,Jmr,YO,Ymr,Kmr,Zmr,qT,tue,egr,ogr,KO,rgr,tgr,agr,GT,aue,ngr,sgr,ZO,lgr,igr,dgr,OT,nue,cgr,fgr,eX,mgr,ggr,hgr,XT,sue,pgr,_gr,oX,ugr,bgr,vgr,VT,lue,Tgr,Fgr,rX,Cgr,Mgr,Egr,zT,iue,ygr,wgr,tX,Agr,Lgr,Bgr,WT,due,xgr,kgr,aX,Rgr,Sgr,Pgr,QT,cue,$gr,Igr,nX,jgr,Ngr,Dgr,HT,fue,qgr,Ggr,sX,Ogr,Xgr,Vgr,UT,mue,zgr,Wgr,lX,Qgr,Hgr,Ugr,JT,gue,Jgr,Ygr,iX,Kgr,Zgr,ehr,YT,hue,ohr,rhr,dX,thr,ahr,nhr,pue,shr,lhr,Ww,YRe,Gc,KT,_ue,Qw,ihr,uue,dhr,KRe,Ar,Hw,chr,Oc,fhr,bue,mhr,ghr,vue,hhr,phr,_hr,Uw,uhr,Tue,bhr,vhr,Thr,Ct,Jw,Fhr,Fue,Chr,Mhr,Xc,Ehr,Cue,yhr,whr,Mue,Ahr,Lhr,Bhr,Eue,xhr,khr,Yw,Rhr,Fo,Kw,Shr,yue,Phr,$hr,An,Ihr,wue,jhr,Nhr,Aue,Dhr,qhr,Lue,Ghr,Ohr,Xhr,ae,ZT,Bue,Vhr,zhr,cX,Whr,Qhr,Hhr,e8,xue,Uhr,Jhr,fX,Yhr,Khr,Zhr,o8,kue,epr,opr,mX,rpr,tpr,apr,r8,Rue,npr,spr,gX,lpr,ipr,dpr,t8,Sue,cpr,fpr,hX,mpr,gpr,hpr,a8,Pue,ppr,_pr,pX,upr,bpr,vpr,n8,$ue,Tpr,Fpr,_X,Cpr,Mpr,Epr,s8,Iue,ypr,wpr,uX,Apr,Lpr,Bpr,l8,jue,xpr,kpr,bX,Rpr,Spr,Ppr,i8,Nue,$pr,Ipr,vX,jpr,Npr,Dpr,d8,Due,qpr,Gpr,TX,Opr,Xpr,Vpr,c8,que,zpr,Wpr,FX,Qpr,Hpr,Upr,f8,Gue,Jpr,Ypr,CX,Kpr,Zpr,e_r,m8,Oue,o_r,r_r,MX,t_r,a_r,n_r,g8,Xue,s_r,l_r,EX,i_r,d_r,c_r,h8,Vue,f_r,m_r,yX,g_r,h_r,p_r,p8,zue,__r,u_r,wX,b_r,v_r,T_r,Wue,F_r,C_r,Zw,ZRe,Vc,_8,Que,eA,M_r,Hue,E_r,eSe,Lr,oA,y_r,zc,w_r,Uue,A_r,L_r,Jue,B_r,x_r,k_r,rA,R_r,Yue,S_r,P_r,$_r,Mt,tA,I_r,Kue,j_r,N_r,Wc,D_r,Zue,q_r,G_r,e1e,O_r,X_r,V_r,o1e,z_r,W_r,aA,Q_r,Co,nA,H_r,r1e,U_r,J_r,Ln,Y_r,t1e,K_r,Z_r,a1e,eur,our,n1e,rur,tur,aur,s1e,u8,l1e,nur,sur,AX,lur,iur,dur,i1e,cur,fur,sA,oSe,Qc,b8,d1e,lA,mur,c1e,gur,rSe,Br,iA,hur,Hc,pur,f1e,_ur,uur,m1e,bur,vur,Tur,dA,Fur,g1e,Cur,Mur,Eur,Et,cA,yur,h1e,wur,Aur,Uc,Lur,p1e,Bur,xur,_1e,kur,Rur,Sur,u1e,Pur,$ur,fA,Iur,Mo,mA,jur,b1e,Nur,Dur,Bn,qur,v1e,Gur,Our,T1e,Xur,Vur,F1e,zur,Wur,Qur,K,v8,C1e,Hur,Uur,LX,Jur,Yur,Kur,T8,M1e,Zur,e1r,BX,o1r,r1r,t1r,F8,E1e,a1r,n1r,xX,s1r,l1r,i1r,C8,y1e,d1r,c1r,kX,f1r,m1r,g1r,M8,w1e,h1r,p1r,RX,_1r,u1r,b1r,E8,A1e,v1r,T1r,SX,F1r,C1r,M1r,y8,L1e,E1r,y1r,PX,w1r,A1r,L1r,w8,B1e,B1r,x1r,$X,k1r,R1r,S1r,A8,x1e,P1r,$1r,IX,I1r,j1r,N1r,L8,k1e,D1r,q1r,jX,G1r,O1r,X1r,B8,R1e,V1r,z1r,NX,W1r,Q1r,H1r,x8,S1e,U1r,J1r,DX,Y1r,K1r,Z1r,k8,P1e,ebr,obr,qX,rbr,tbr,abr,R8,$1e,nbr,sbr,GX,lbr,ibr,dbr,S8,I1e,cbr,fbr,OX,mbr,gbr,hbr,P8,j1e,pbr,_br,XX,ubr,bbr,vbr,$8,N1e,Tbr,Fbr,VX,Cbr,Mbr,Ebr,I8,D1e,ybr,wbr,zX,Abr,Lbr,Bbr,j8,q1e,xbr,kbr,WX,Rbr,Sbr,Pbr,N8,G1e,$br,Ibr,QX,jbr,Nbr,Dbr,O1e,qbr,Gbr,gA,tSe,Jc,D8,X1e,hA,Obr,V1e,Xbr,aSe,xr,pA,Vbr,Yc,zbr,z1e,Wbr,Qbr,W1e,Hbr,Ubr,Jbr,_A,Ybr,Q1e,Kbr,Zbr,e5r,yt,uA,o5r,H1e,r5r,t5r,Kc,a5r,U1e,n5r,s5r,J1e,l5r,i5r,d5r,Y1e,c5r,f5r,bA,m5r,Eo,vA,g5r,K1e,h5r,p5r,xn,_5r,Z1e,u5r,b5r,ebe,v5r,T5r,obe,F5r,C5r,M5r,Z,q8,rbe,E5r,y5r,HX,w5r,A5r,L5r,G8,tbe,B5r,x5r,UX,k5r,R5r,S5r,O8,abe,P5r,$5r,JX,I5r,j5r,N5r,X8,nbe,D5r,q5r,YX,G5r,O5r,X5r,V8,sbe,V5r,z5r,KX,W5r,Q5r,H5r,z8,lbe,U5r,J5r,ZX,Y5r,K5r,Z5r,W8,ibe,e2r,o2r,eV,r2r,t2r,a2r,Q8,dbe,n2r,s2r,oV,l2r,i2r,d2r,H8,cbe,c2r,f2r,rV,m2r,g2r,h2r,U8,fbe,p2r,_2r,tV,u2r,b2r,v2r,J8,mbe,T2r,F2r,aV,C2r,M2r,E2r,Y8,gbe,y2r,w2r,nV,A2r,L2r,B2r,K8,hbe,x2r,k2r,sV,R2r,S2r,P2r,Z8,pbe,$2r,I2r,lV,j2r,N2r,D2r,eF,_be,q2r,G2r,iV,O2r,X2r,V2r,oF,ube,z2r,W2r,dV,Q2r,H2r,U2r,rF,bbe,J2r,Y2r,cV,K2r,Z2r,evr,tF,vbe,ovr,rvr,fV,tvr,avr,nvr,aF,Tbe,svr,lvr,mV,ivr,dvr,cvr,Fbe,fvr,mvr,TA,nSe,Zc,nF,Cbe,FA,gvr,Mbe,hvr,sSe,kr,CA,pvr,ef,_vr,Ebe,uvr,bvr,ybe,vvr,Tvr,Fvr,MA,Cvr,wbe,Mvr,Evr,yvr,wt,EA,wvr,Abe,Avr,Lvr,of,Bvr,Lbe,xvr,kvr,Bbe,Rvr,Svr,Pvr,xbe,$vr,Ivr,yA,jvr,yo,wA,Nvr,kbe,Dvr,qvr,kn,Gvr,Rbe,Ovr,Xvr,Sbe,Vvr,zvr,Pbe,Wvr,Qvr,Hvr,$be,sF,Ibe,Uvr,Jvr,gV,Yvr,Kvr,Zvr,jbe,e6r,o6r,AA,lSe,rf,lF,Nbe,LA,r6r,Dbe,t6r,iSe,Rr,BA,a6r,tf,n6r,qbe,s6r,l6r,Gbe,i6r,d6r,c6r,xA,f6r,Obe,m6r,g6r,h6r,At,kA,p6r,Xbe,_6r,u6r,af,b6r,Vbe,v6r,T6r,zbe,F6r,C6r,M6r,Wbe,E6r,y6r,RA,w6r,wo,SA,A6r,Qbe,L6r,B6r,Rn,x6r,Hbe,k6r,R6r,Ube,S6r,P6r,Jbe,$6r,I6r,j6r,Ybe,iF,Kbe,N6r,D6r,hV,q6r,G6r,O6r,Zbe,X6r,V6r,PA,dSe,nf,dF,e5e,$A,z6r,o5e,W6r,cSe,Sr,IA,Q6r,sf,H6r,r5e,U6r,J6r,t5e,Y6r,K6r,Z6r,jA,e0r,a5e,o0r,r0r,t0r,Lt,NA,a0r,n5e,n0r,s0r,lf,l0r,s5e,i0r,d0r,l5e,c0r,f0r,m0r,i5e,g0r,h0r,DA,p0r,Ao,qA,_0r,d5e,u0r,b0r,Sn,v0r,c5e,T0r,F0r,f5e,C0r,M0r,m5e,E0r,y0r,w0r,z,cF,g5e,A0r,L0r,pV,B0r,x0r,k0r,fF,h5e,R0r,S0r,_V,P0r,$0r,I0r,mF,p5e,j0r,N0r,uV,D0r,q0r,G0r,gF,_5e,O0r,X0r,bV,V0r,z0r,W0r,hF,u5e,Q0r,H0r,vV,U0r,J0r,Y0r,pF,b5e,K0r,Z0r,TV,eTr,oTr,rTr,_F,v5e,tTr,aTr,FV,nTr,sTr,lTr,uF,T5e,iTr,dTr,CV,cTr,fTr,mTr,bF,F5e,gTr,hTr,MV,pTr,_Tr,uTr,vF,C5e,bTr,vTr,EV,TTr,FTr,CTr,TF,M5e,MTr,ETr,yV,yTr,wTr,ATr,FF,E5e,LTr,BTr,wV,xTr,kTr,RTr,CF,y5e,STr,PTr,AV,$Tr,ITr,jTr,MF,w5e,NTr,DTr,LV,qTr,GTr,OTr,EF,A5e,XTr,VTr,BV,zTr,WTr,QTr,yF,L5e,HTr,UTr,xV,JTr,YTr,KTr,wF,B5e,ZTr,e8r,kV,o8r,r8r,t8r,AF,x5e,a8r,n8r,RV,s8r,l8r,i8r,LF,k5e,d8r,c8r,SV,f8r,m8r,g8r,BF,R5e,h8r,p8r,PV,_8r,u8r,b8r,xF,S5e,v8r,T8r,$V,F8r,C8r,M8r,kF,P5e,E8r,y8r,IV,w8r,A8r,L8r,RF,$5e,B8r,x8r,jV,k8r,R8r,S8r,SF,I5e,P8r,$8r,NV,I8r,j8r,N8r,PF,j5e,D8r,q8r,DV,G8r,O8r,X8r,N5e,V8r,z8r,GA,fSe,df,$F,D5e,OA,W8r,q5e,Q8r,mSe,Pr,XA,H8r,cf,U8r,G5e,J8r,Y8r,O5e,K8r,Z8r,eFr,VA,oFr,X5e,rFr,tFr,aFr,Bt,zA,nFr,V5e,sFr,lFr,ff,iFr,z5e,dFr,cFr,W5e,fFr,mFr,gFr,Q5e,hFr,pFr,WA,_Fr,Lo,QA,uFr,H5e,bFr,vFr,Pn,TFr,U5e,FFr,CFr,J5e,MFr,EFr,Y5e,yFr,wFr,AFr,ga,IF,K5e,LFr,BFr,qV,xFr,kFr,RFr,jF,Z5e,SFr,PFr,GV,$Fr,IFr,jFr,NF,e2e,NFr,DFr,OV,qFr,GFr,OFr,DF,o2e,XFr,VFr,XV,zFr,WFr,QFr,qF,r2e,HFr,UFr,VV,JFr,YFr,KFr,t2e,ZFr,eCr,HA,gSe,mf,GF,a2e,UA,oCr,n2e,rCr,hSe,$r,JA,tCr,gf,aCr,s2e,nCr,sCr,l2e,lCr,iCr,dCr,YA,cCr,i2e,fCr,mCr,gCr,xt,KA,hCr,d2e,pCr,_Cr,hf,uCr,c2e,bCr,vCr,f2e,TCr,FCr,CCr,m2e,MCr,ECr,ZA,yCr,Bo,eL,wCr,g2e,ACr,LCr,$n,BCr,h2e,xCr,kCr,p2e,RCr,SCr,_2e,PCr,$Cr,ICr,ce,OF,u2e,jCr,NCr,zV,DCr,qCr,GCr,XF,b2e,OCr,XCr,WV,VCr,zCr,WCr,VF,v2e,QCr,HCr,QV,UCr,JCr,YCr,zF,T2e,KCr,ZCr,HV,eMr,oMr,rMr,WF,F2e,tMr,aMr,UV,nMr,sMr,lMr,QF,C2e,iMr,dMr,JV,cMr,fMr,mMr,HF,M2e,gMr,hMr,YV,pMr,_Mr,uMr,UF,E2e,bMr,vMr,KV,TMr,FMr,CMr,JF,y2e,MMr,EMr,ZV,yMr,wMr,AMr,YF,w2e,LMr,BMr,ez,xMr,kMr,RMr,KF,A2e,SMr,PMr,oz,$Mr,IMr,jMr,ZF,L2e,NMr,DMr,rz,qMr,GMr,OMr,B2e,XMr,VMr,oL,pSe,pf,eC,x2e,rL,zMr,k2e,WMr,_Se,Ir,tL,QMr,_f,HMr,R2e,UMr,JMr,S2e,YMr,KMr,ZMr,aL,e4r,P2e,o4r,r4r,t4r,kt,nL,a4r,$2e,n4r,s4r,uf,l4r,I2e,i4r,d4r,j2e,c4r,f4r,m4r,N2e,g4r,h4r,sL,p4r,xo,lL,_4r,D2e,u4r,b4r,In,v4r,q2e,T4r,F4r,G2e,C4r,M4r,O2e,E4r,y4r,w4r,be,oC,X2e,A4r,L4r,tz,B4r,x4r,k4r,rC,V2e,R4r,S4r,az,P4r,$4r,I4r,tC,z2e,j4r,N4r,nz,D4r,q4r,G4r,aC,W2e,O4r,X4r,sz,V4r,z4r,W4r,nC,Q2e,Q4r,H4r,lz,U4r,J4r,Y4r,sC,H2e,K4r,Z4r,iz,eEr,oEr,rEr,lC,U2e,tEr,aEr,dz,nEr,sEr,lEr,iC,J2e,iEr,dEr,cz,cEr,fEr,mEr,dC,Y2e,gEr,hEr,fz,pEr,_Er,uEr,cC,K2e,bEr,vEr,mz,TEr,FEr,CEr,Z2e,MEr,EEr,iL,uSe,bf,fC,eve,dL,yEr,ove,wEr,bSe,jr,cL,AEr,vf,LEr,rve,BEr,xEr,tve,kEr,REr,SEr,fL,PEr,ave,$Er,IEr,jEr,Rt,mL,NEr,nve,DEr,qEr,Tf,GEr,sve,OEr,XEr,lve,VEr,zEr,WEr,ive,QEr,HEr,gL,UEr,ko,hL,JEr,dve,YEr,KEr,jn,ZEr,cve,e3r,o3r,fve,r3r,t3r,mve,a3r,n3r,s3r,Ee,mC,gve,l3r,i3r,gz,d3r,c3r,f3r,gC,hve,m3r,g3r,hz,h3r,p3r,_3r,hC,pve,u3r,b3r,pz,v3r,T3r,F3r,pC,_ve,C3r,M3r,_z,E3r,y3r,w3r,_C,uve,A3r,L3r,uz,B3r,x3r,k3r,uC,bve,R3r,S3r,bz,P3r,$3r,I3r,bC,vve,j3r,N3r,vz,D3r,q3r,G3r,vC,Tve,O3r,X3r,Tz,V3r,z3r,W3r,TC,Fve,Q3r,H3r,Fz,U3r,J3r,Y3r,Cve,K3r,Z3r,pL,vSe,Ff,FC,Mve,_L,eyr,Eve,oyr,TSe,Nr,uL,ryr,Cf,tyr,yve,ayr,nyr,wve,syr,lyr,iyr,bL,dyr,Ave,cyr,fyr,myr,St,vL,gyr,Lve,hyr,pyr,Mf,_yr,Bve,uyr,byr,xve,vyr,Tyr,Fyr,kve,Cyr,Myr,TL,Eyr,Ro,FL,yyr,Rve,wyr,Ayr,Nn,Lyr,Sve,Byr,xyr,Pve,kyr,Ryr,$ve,Syr,Pyr,$yr,ve,CC,Ive,Iyr,jyr,Cz,Nyr,Dyr,qyr,MC,jve,Gyr,Oyr,Mz,Xyr,Vyr,zyr,EC,Nve,Wyr,Qyr,Ez,Hyr,Uyr,Jyr,yC,Dve,Yyr,Kyr,yz,Zyr,ewr,owr,wC,qve,rwr,twr,wz,awr,nwr,swr,AC,Gve,lwr,iwr,Az,dwr,cwr,fwr,LC,Ove,mwr,gwr,Lz,hwr,pwr,_wr,BC,Xve,uwr,bwr,Bz,vwr,Twr,Fwr,xC,Vve,Cwr,Mwr,xz,Ewr,ywr,wwr,kC,zve,Awr,Lwr,kz,Bwr,xwr,kwr,Wve,Rwr,Swr,CL,FSe,Ef,RC,Qve,ML,Pwr,Hve,$wr,CSe,Dr,EL,Iwr,yf,jwr,Uve,Nwr,Dwr,Jve,qwr,Gwr,Owr,yL,Xwr,Yve,Vwr,zwr,Wwr,Pt,wL,Qwr,Kve,Hwr,Uwr,wf,Jwr,Zve,Ywr,Kwr,e6e,Zwr,eAr,oAr,o6e,rAr,tAr,AL,aAr,So,LL,nAr,r6e,sAr,lAr,Dn,iAr,t6e,dAr,cAr,a6e,fAr,mAr,n6e,gAr,hAr,pAr,s6e,SC,l6e,_Ar,uAr,Rz,bAr,vAr,TAr,i6e,FAr,CAr,BL,MSe,Af,PC,d6e,xL,MAr,c6e,EAr,ESe,qr,kL,yAr,Lf,wAr,f6e,AAr,LAr,m6e,BAr,xAr,kAr,RL,RAr,g6e,SAr,PAr,$Ar,$t,SL,IAr,h6e,jAr,NAr,Bf,DAr,p6e,qAr,GAr,_6e,OAr,XAr,VAr,u6e,zAr,WAr,PL,QAr,Po,$L,HAr,b6e,UAr,JAr,qn,YAr,v6e,KAr,ZAr,T6e,eLr,oLr,F6e,rLr,tLr,aLr,Te,$C,C6e,nLr,sLr,Sz,lLr,iLr,dLr,IC,M6e,cLr,fLr,Pz,mLr,gLr,hLr,jC,E6e,pLr,_Lr,$z,uLr,bLr,vLr,NC,y6e,TLr,FLr,Iz,CLr,MLr,ELr,DC,w6e,yLr,wLr,jz,ALr,LLr,BLr,qC,A6e,xLr,kLr,Nz,RLr,SLr,PLr,GC,L6e,$Lr,ILr,Dz,jLr,NLr,DLr,OC,B6e,qLr,GLr,qz,OLr,XLr,VLr,XC,x6e,zLr,WLr,Gz,QLr,HLr,ULr,VC,k6e,JLr,YLr,Oz,KLr,ZLr,e7r,R6e,o7r,r7r,IL,ySe,xf,zC,S6e,jL,t7r,P6e,a7r,wSe,Gr,NL,n7r,kf,s7r,$6e,l7r,i7r,I6e,d7r,c7r,f7r,DL,m7r,j6e,g7r,h7r,p7r,It,qL,_7r,N6e,u7r,b7r,Rf,v7r,D6e,T7r,F7r,q6e,C7r,M7r,E7r,G6e,y7r,w7r,GL,A7r,$o,OL,L7r,O6e,B7r,x7r,Gn,k7r,X6e,R7r,S7r,V6e,P7r,$7r,z6e,I7r,j7r,N7r,Se,WC,W6e,D7r,q7r,Xz,G7r,O7r,X7r,QC,Q6e,V7r,z7r,Vz,W7r,Q7r,H7r,HC,H6e,U7r,J7r,zz,Y7r,K7r,Z7r,UC,U6e,e9r,o9r,Wz,r9r,t9r,a9r,JC,J6e,n9r,s9r,Qz,l9r,i9r,d9r,YC,Y6e,c9r,f9r,Hz,m9r,g9r,h9r,KC,K6e,p9r,_9r,Uz,u9r,b9r,v9r,ZC,Z6e,T9r,F9r,Jz,C9r,M9r,E9r,e0e,y9r,w9r,XL,ASe,Sf,eM,o0e,VL,A9r,r0e,L9r,LSe,Or,zL,B9r,Pf,x9r,t0e,k9r,R9r,a0e,S9r,P9r,$9r,WL,I9r,n0e,j9r,N9r,D9r,jt,QL,q9r,s0e,G9r,O9r,$f,X9r,l0e,V9r,z9r,i0e,W9r,Q9r,H9r,d0e,U9r,J9r,HL,Y9r,Io,UL,K9r,c0e,Z9r,eBr,On,oBr,f0e,rBr,tBr,m0e,aBr,nBr,g0e,sBr,lBr,iBr,Pe,oM,h0e,dBr,cBr,Yz,fBr,mBr,gBr,rM,p0e,hBr,pBr,Kz,_Br,uBr,bBr,tM,_0e,vBr,TBr,Zz,FBr,CBr,MBr,aM,u0e,EBr,yBr,eW,wBr,ABr,LBr,nM,b0e,BBr,xBr,oW,kBr,RBr,SBr,sM,v0e,PBr,$Br,rW,IBr,jBr,NBr,lM,T0e,DBr,qBr,tW,GBr,OBr,XBr,iM,F0e,VBr,zBr,aW,WBr,QBr,HBr,C0e,UBr,JBr,JL,BSe,If,dM,M0e,YL,YBr,E0e,KBr,xSe,Xr,KL,ZBr,jf,exr,y0e,oxr,rxr,w0e,txr,axr,nxr,ZL,sxr,A0e,lxr,ixr,dxr,Nt,e7,cxr,L0e,fxr,mxr,Nf,gxr,B0e,hxr,pxr,x0e,_xr,uxr,bxr,k0e,vxr,Txr,o7,Fxr,jo,r7,Cxr,R0e,Mxr,Exr,Xn,yxr,S0e,wxr,Axr,P0e,Lxr,Bxr,$0e,xxr,kxr,Rxr,I0e,cM,j0e,Sxr,Pxr,nW,$xr,Ixr,jxr,N0e,Nxr,Dxr,t7,kSe,Df,fM,D0e,a7,qxr,q0e,Gxr,RSe,Vr,n7,Oxr,qf,Xxr,G0e,Vxr,zxr,O0e,Wxr,Qxr,Hxr,s7,Uxr,X0e,Jxr,Yxr,Kxr,Dt,l7,Zxr,V0e,ekr,okr,Gf,rkr,z0e,tkr,akr,W0e,nkr,skr,lkr,Q0e,ikr,dkr,i7,ckr,No,d7,fkr,H0e,mkr,gkr,Vn,hkr,U0e,pkr,_kr,J0e,ukr,bkr,Y0e,vkr,Tkr,Fkr,c7,mM,K0e,Ckr,Mkr,sW,Ekr,ykr,wkr,gM,Z0e,Akr,Lkr,lW,Bkr,xkr,kkr,eTe,Rkr,Skr,f7,SSe,Of,hM,oTe,m7,Pkr,rTe,$kr,PSe,zr,g7,Ikr,Xf,jkr,tTe,Nkr,Dkr,aTe,qkr,Gkr,Okr,h7,Xkr,nTe,Vkr,zkr,Wkr,qt,p7,Qkr,sTe,Hkr,Ukr,Vf,Jkr,lTe,Ykr,Kkr,iTe,Zkr,eRr,oRr,dTe,rRr,tRr,_7,aRr,Do,u7,nRr,cTe,sRr,lRr,zn,iRr,fTe,dRr,cRr,mTe,fRr,mRr,gTe,gRr,hRr,pRr,hTe,pM,pTe,_Rr,uRr,iW,bRr,vRr,TRr,_Te,FRr,CRr,b7,$Se;return fe=new X({}),Va=new w({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),T4=new X({}),F4=new w({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Yf=new MRr({props:{warning:"&lcub;true}",$$slots:{default:[NCt]},$$scope:{ctx:Xi}}}),C4=new X({}),M4=new M({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/configuration_auto.py#L536"}}),w4=new M({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/configuration_auto.py#L559",parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}]}}),A4=new w({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),L4=new M({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/configuration_auto.py#L681",parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}]}}),B4=new X({}),x4=new M({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/tokenization_auto.py#L352"}}),S4=new M({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/tokenization_auto.py#L366",parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16058/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}]}}),P4=new w({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),$4=new M({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/tokenization_auto.py#L562",parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}]}}),I4=new X({}),j4=new M({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/feature_extraction_auto.py#L172"}}),q4=new M({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/feature_extraction_auto.py#L186",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16058/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Dh=new MRr({props:{$$slots:{default:[DCt]},$$scope:{ctx:Xi}}}),G4=new w({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),O4=new M({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/feature_extraction_auto.py#L313",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}]}}),X4=new X({}),V4=new M({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/processing_auto.py#L71"}}),Q4=new M({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/processing_auto.py#L85",parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Jh=new MRr({props:{$$slots:{default:[qCt]},$$scope:{ctx:Xi}}}),H4=new w({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),U4=new M({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/processing_auto.py#L238",parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}]}}),J4=new X({}),Y4=new M({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L702"}}),Z4=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),eE=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),oE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),rE=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),tE=new X({}),aE=new M({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L709"}}),sE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),lE=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),iE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),dE=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),cE=new X({}),fE=new M({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L724"}}),gE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),hE=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),pE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),_E=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),uE=new X({}),bE=new M({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L731"}}),TE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code>(Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),FE=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),CE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ME=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),EE=new X({}),yE=new M({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L738"}}),AE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}]}}),LE=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),BE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),xE=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),kE=new X({}),RE=new M({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L747"}}),PE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),$E=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),IE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),jE=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),NE=new X({}),DE=new M({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L781"}}),GE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),OE=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),XE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),VE=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),zE=new X({}),WE=new M({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L788"}}),HE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}]}}),UE=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),JE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),YE=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),KE=new X({}),ZE=new M({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L774"}}),o3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),r3=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),t3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),a3=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),n3=new X({}),s3=new M({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L756"}}),i3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),d3=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),c3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),f3=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),m3=new X({}),g3=new M({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L763"}}),p3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),_3=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),u3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),b3=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),v3=new X({}),T3=new M({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L797"}}),C3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16058/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),M3=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),E3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),y3=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),w3=new X({}),A3=new M({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L836"}}),B3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),x3=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),k3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),R3=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),S3=new X({}),P3=new M({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L843"}}),I3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),j3=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),N3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),D3=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),q3=new X({}),G3=new M({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L866"}}),X3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),V3=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),z3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),W3=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Q3=new X({}),H3=new M({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L850"}}),J3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),Y3=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),K3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Z3=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ey=new X({}),oy=new M({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L857"}}),ty=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}]}}),ay=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),ny=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ly=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),iy=new X({}),dy=new M({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L875"}}),fy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),my=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),gy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),hy=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),py=new X({}),_y=new M({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L882"}}),by=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}]}}),vy=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),Ty=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Fy=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Cy=new X({}),My=new M({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L829"}}),yy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}]}}),wy=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),Ay=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ly=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),By=new X({}),xy=new M({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L804"}}),Ry=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}]}}),Sy=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),Py=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),$y=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Iy=new X({}),jy=new M({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L811"}}),Dy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}]}}),qy=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),Gy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Xy=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Vy=new X({}),zy=new M({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L820"}}),Qy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}]}}),Hy=new w({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),Uy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Jy=new w({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Yy=new X({}),Ky=new M({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_tf_auto.py#L374"}}),ew=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),ow=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),rw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),tw=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),aw=new X({}),nw=new M({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_tf_auto.py#L381"}}),lw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),iw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),dw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),cw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),fw=new X({}),mw=new M({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_tf_auto.py#L396"}}),hw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),pw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),_w=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),uw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),bw=new X({}),vw=new M({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),Fw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),Cw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),Mw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),yw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ww=new X({}),Aw=new M({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_tf_auto.py#L417"}}),Bw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),xw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),kw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Rw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Sw=new X({}),Pw=new M({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_tf_auto.py#L424"}}),Iw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),jw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),Nw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Dw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),qw=new X({}),Gw=new M({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_tf_auto.py#L433"}}),Xw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Vw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),zw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ww=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Qw=new X({}),Hw=new M({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),Jw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Yw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),Kw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Zw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),eA=new X({}),oA=new M({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_tf_auto.py#L449"}}),tA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),aA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),nA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),sA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),lA=new X({}),iA=new M({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_tf_auto.py#L460"}}),cA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),fA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),mA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),gA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),hA=new X({}),pA=new M({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_tf_auto.py#L442"}}),uA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),bA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),vA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),TA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),FA=new X({}),CA=new M({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_tf_auto.py#L410"}}),EA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),yA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),wA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),AA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),LA=new X({}),BA=new M({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_tf_auto.py#L485"}}),kA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}]}}),RA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),SA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),PA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),$A=new X({}),IA=new M({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_flax_auto.py#L237"}}),NA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),DA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),qA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),GA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),OA=new X({}),XA=new M({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),zA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),WA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),QA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),HA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),UA=new X({}),JA=new M({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),KA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),ZA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),eL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),oL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),rL=new X({}),tL=new M({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),nL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),sL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),lL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),iL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),dL=new X({}),cL=new M({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),mL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),gL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),hL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),pL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),_L=new X({}),uL=new M({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),vL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),TL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),FL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),CL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ML=new X({}),EL=new M({props:{name:"class transformers.FlaxAutoModelForSpeechSeq2Seq",anchor:"transformers.FlaxAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_flax_auto.py#L331"}}),wL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/speech-encoder-decoder#transformers.FlaxSpeechEncoderDecoderModel">FlaxSpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}]}}),AL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSpeechSeq2Seq.from_config(config)`}}),LL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),BL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),xL=new X({}),kL=new M({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),SL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),PL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),$L=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),IL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),jL=new X({}),NL=new M({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),qL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),GL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),OL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),XL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),VL=new X({}),zL=new M({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),QL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),HL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),UL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),JL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),YL=new X({}),KL=new M({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),e7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}]}}),o7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),r7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),t7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),a7=new X({}),n7=new M({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),l7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),i7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),d7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),f7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),m7=new X({}),g7=new M({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),p7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),_7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),u7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),b7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){J=a("meta"),$e=l(),de=a("h1"),pe=a("a"),io=a("span"),f(fe.$$.fragment),Me=l(),zo=a("span"),Vi=o("Auto Classes"),Wf=l(),ha=a("p"),zi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Wi=a("code"),_4=o("from_pretrained()"),Qf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Be=l(),co=a("p"),Qi=o("Instantiating one of "),Wn=a("a"),u4=o("AutoConfig"),Qn=o(", "),Hn=a("a"),b4=o("AutoModel"),Hi=o(`, and
`),Un=a("a"),v4=o("AutoTokenizer"),Ui=o(" will directly create a class of the relevant architecture. For instance"),Hf=l(),f(Va.$$.fragment),fo=l(),_e=a("p"),_9=o("will create a model that is an instance of "),Ji=a("a"),u9=o("BertModel"),b9=o("."),Wo=l(),za=a("p"),v9=o("There is one class of "),Uf=a("code"),T9=o("AutoModel"),J$e=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Rke=l(),Yi=a("h2"),Jf=a("a"),tH=a("span"),f(T4.$$.fragment),Y$e=l(),aH=a("span"),K$e=o("Extending the Auto Classes"),Ske=l(),Jn=a("p"),Z$e=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),nH=a("code"),eIe=o("NewModel"),oIe=o(", make sure you have a "),sH=a("code"),rIe=o("NewModelConfig"),tIe=o(` then you can add those to the auto
classes like this:`),Pke=l(),f(F4.$$.fragment),$ke=l(),F9=a("p"),aIe=o("You will then be able to use the auto classes like you would usually do!"),Ike=l(),f(Yf.$$.fragment),jke=l(),Ki=a("h2"),Kf=a("a"),lH=a("span"),f(C4.$$.fragment),nIe=l(),iH=a("span"),sIe=o("AutoConfig"),Nke=l(),Qo=a("div"),f(M4.$$.fragment),lIe=l(),E4=a("p"),iIe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),C9=a("a"),dIe=o("from_pretrained()"),cIe=o(" class method."),fIe=l(),y4=a("p"),mIe=o("This class cannot be instantiated directly using "),dH=a("code"),gIe=o("__init__()"),hIe=o(" (throws an error)."),pIe=l(),mo=a("div"),f(w4.$$.fragment),_Ie=l(),cH=a("p"),uIe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),bIe=l(),Zi=a("p"),vIe=o("The configuration class to instantiate is selected based on the "),fH=a("code"),TIe=o("model_type"),FIe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),mH=a("code"),CIe=o("pretrained_model_name_or_path"),MIe=o(":"),EIe=l(),v=a("ul"),Zf=a("li"),gH=a("strong"),yIe=o("albert"),wIe=o(" \u2014 "),M9=a("a"),AIe=o("AlbertConfig"),LIe=o(" (ALBERT model)"),BIe=l(),em=a("li"),hH=a("strong"),xIe=o("bart"),kIe=o(" \u2014 "),E9=a("a"),RIe=o("BartConfig"),SIe=o(" (BART model)"),PIe=l(),om=a("li"),pH=a("strong"),$Ie=o("beit"),IIe=o(" \u2014 "),y9=a("a"),jIe=o("BeitConfig"),NIe=o(" (BEiT model)"),DIe=l(),rm=a("li"),_H=a("strong"),qIe=o("bert"),GIe=o(" \u2014 "),w9=a("a"),OIe=o("BertConfig"),XIe=o(" (BERT model)"),VIe=l(),tm=a("li"),uH=a("strong"),zIe=o("bert-generation"),WIe=o(" \u2014 "),A9=a("a"),QIe=o("BertGenerationConfig"),HIe=o(" (Bert Generation model)"),UIe=l(),am=a("li"),bH=a("strong"),JIe=o("big_bird"),YIe=o(" \u2014 "),L9=a("a"),KIe=o("BigBirdConfig"),ZIe=o(" (BigBird model)"),eje=l(),nm=a("li"),vH=a("strong"),oje=o("bigbird_pegasus"),rje=o(" \u2014 "),B9=a("a"),tje=o("BigBirdPegasusConfig"),aje=o(" (BigBirdPegasus model)"),nje=l(),sm=a("li"),TH=a("strong"),sje=o("blenderbot"),lje=o(" \u2014 "),x9=a("a"),ije=o("BlenderbotConfig"),dje=o(" (Blenderbot model)"),cje=l(),lm=a("li"),FH=a("strong"),fje=o("blenderbot-small"),mje=o(" \u2014 "),k9=a("a"),gje=o("BlenderbotSmallConfig"),hje=o(" (BlenderbotSmall model)"),pje=l(),im=a("li"),CH=a("strong"),_je=o("camembert"),uje=o(" \u2014 "),R9=a("a"),bje=o("CamembertConfig"),vje=o(" (CamemBERT model)"),Tje=l(),dm=a("li"),MH=a("strong"),Fje=o("canine"),Cje=o(" \u2014 "),S9=a("a"),Mje=o("CanineConfig"),Eje=o(" (Canine model)"),yje=l(),cm=a("li"),EH=a("strong"),wje=o("clip"),Aje=o(" \u2014 "),P9=a("a"),Lje=o("CLIPConfig"),Bje=o(" (CLIP model)"),xje=l(),fm=a("li"),yH=a("strong"),kje=o("convbert"),Rje=o(" \u2014 "),$9=a("a"),Sje=o("ConvBertConfig"),Pje=o(" (ConvBERT model)"),$je=l(),mm=a("li"),wH=a("strong"),Ije=o("convnext"),jje=o(" \u2014 "),I9=a("a"),Nje=o("ConvNextConfig"),Dje=o(" (ConvNext model)"),qje=l(),gm=a("li"),AH=a("strong"),Gje=o("ctrl"),Oje=o(" \u2014 "),j9=a("a"),Xje=o("CTRLConfig"),Vje=o(" (CTRL model)"),zje=l(),hm=a("li"),LH=a("strong"),Wje=o("data2vec-audio"),Qje=o(" \u2014 "),N9=a("a"),Hje=o("Data2VecAudioConfig"),Uje=o(" (Data2VecAudio model)"),Jje=l(),pm=a("li"),BH=a("strong"),Yje=o("data2vec-text"),Kje=o(" \u2014 "),D9=a("a"),Zje=o("Data2VecTextConfig"),eNe=o(" (Data2VecText model)"),oNe=l(),_m=a("li"),xH=a("strong"),rNe=o("deberta"),tNe=o(" \u2014 "),q9=a("a"),aNe=o("DebertaConfig"),nNe=o(" (DeBERTa model)"),sNe=l(),um=a("li"),kH=a("strong"),lNe=o("deberta-v2"),iNe=o(" \u2014 "),G9=a("a"),dNe=o("DebertaV2Config"),cNe=o(" (DeBERTa-v2 model)"),fNe=l(),bm=a("li"),RH=a("strong"),mNe=o("deit"),gNe=o(" \u2014 "),O9=a("a"),hNe=o("DeiTConfig"),pNe=o(" (DeiT model)"),_Ne=l(),vm=a("li"),SH=a("strong"),uNe=o("detr"),bNe=o(" \u2014 "),X9=a("a"),vNe=o("DetrConfig"),TNe=o(" (DETR model)"),FNe=l(),Tm=a("li"),PH=a("strong"),CNe=o("distilbert"),MNe=o(" \u2014 "),V9=a("a"),ENe=o("DistilBertConfig"),yNe=o(" (DistilBERT model)"),wNe=l(),Fm=a("li"),$H=a("strong"),ANe=o("dpr"),LNe=o(" \u2014 "),z9=a("a"),BNe=o("DPRConfig"),xNe=o(" (DPR model)"),kNe=l(),Cm=a("li"),IH=a("strong"),RNe=o("electra"),SNe=o(" \u2014 "),W9=a("a"),PNe=o("ElectraConfig"),$Ne=o(" (ELECTRA model)"),INe=l(),Mm=a("li"),jH=a("strong"),jNe=o("encoder-decoder"),NNe=o(" \u2014 "),Q9=a("a"),DNe=o("EncoderDecoderConfig"),qNe=o(" (Encoder decoder model)"),GNe=l(),Em=a("li"),NH=a("strong"),ONe=o("flaubert"),XNe=o(" \u2014 "),H9=a("a"),VNe=o("FlaubertConfig"),zNe=o(" (FlauBERT model)"),WNe=l(),ym=a("li"),DH=a("strong"),QNe=o("fnet"),HNe=o(" \u2014 "),U9=a("a"),UNe=o("FNetConfig"),JNe=o(" (FNet model)"),YNe=l(),wm=a("li"),qH=a("strong"),KNe=o("fsmt"),ZNe=o(" \u2014 "),J9=a("a"),eDe=o("FSMTConfig"),oDe=o(" (FairSeq Machine-Translation model)"),rDe=l(),Am=a("li"),GH=a("strong"),tDe=o("funnel"),aDe=o(" \u2014 "),Y9=a("a"),nDe=o("FunnelConfig"),sDe=o(" (Funnel Transformer model)"),lDe=l(),Lm=a("li"),OH=a("strong"),iDe=o("glpn"),dDe=o(" \u2014 "),K9=a("a"),cDe=o("GLPNConfig"),fDe=o(" (GLPN model)"),mDe=l(),Bm=a("li"),XH=a("strong"),gDe=o("gpt2"),hDe=o(" \u2014 "),Z9=a("a"),pDe=o("GPT2Config"),_De=o(" (OpenAI GPT-2 model)"),uDe=l(),xm=a("li"),VH=a("strong"),bDe=o("gpt_neo"),vDe=o(" \u2014 "),eB=a("a"),TDe=o("GPTNeoConfig"),FDe=o(" (GPT Neo model)"),CDe=l(),km=a("li"),zH=a("strong"),MDe=o("gptj"),EDe=o(" \u2014 "),oB=a("a"),yDe=o("GPTJConfig"),wDe=o(" (GPT-J model)"),ADe=l(),Rm=a("li"),WH=a("strong"),LDe=o("hubert"),BDe=o(" \u2014 "),rB=a("a"),xDe=o("HubertConfig"),kDe=o(" (Hubert model)"),RDe=l(),Sm=a("li"),QH=a("strong"),SDe=o("ibert"),PDe=o(" \u2014 "),tB=a("a"),$De=o("IBertConfig"),IDe=o(" (I-BERT model)"),jDe=l(),Pm=a("li"),HH=a("strong"),NDe=o("imagegpt"),DDe=o(" \u2014 "),aB=a("a"),qDe=o("ImageGPTConfig"),GDe=o(" (ImageGPT model)"),ODe=l(),$m=a("li"),UH=a("strong"),XDe=o("layoutlm"),VDe=o(" \u2014 "),nB=a("a"),zDe=o("LayoutLMConfig"),WDe=o(" (LayoutLM model)"),QDe=l(),Im=a("li"),JH=a("strong"),HDe=o("layoutlmv2"),UDe=o(" \u2014 "),sB=a("a"),JDe=o("LayoutLMv2Config"),YDe=o(" (LayoutLMv2 model)"),KDe=l(),jm=a("li"),YH=a("strong"),ZDe=o("led"),eqe=o(" \u2014 "),lB=a("a"),oqe=o("LEDConfig"),rqe=o(" (LED model)"),tqe=l(),Nm=a("li"),KH=a("strong"),aqe=o("longformer"),nqe=o(" \u2014 "),iB=a("a"),sqe=o("LongformerConfig"),lqe=o(" (Longformer model)"),iqe=l(),Dm=a("li"),ZH=a("strong"),dqe=o("luke"),cqe=o(" \u2014 "),dB=a("a"),fqe=o("LukeConfig"),mqe=o(" (LUKE model)"),gqe=l(),qm=a("li"),eU=a("strong"),hqe=o("lxmert"),pqe=o(" \u2014 "),cB=a("a"),_qe=o("LxmertConfig"),uqe=o(" (LXMERT model)"),bqe=l(),Gm=a("li"),oU=a("strong"),vqe=o("m2m_100"),Tqe=o(" \u2014 "),fB=a("a"),Fqe=o("M2M100Config"),Cqe=o(" (M2M100 model)"),Mqe=l(),Om=a("li"),rU=a("strong"),Eqe=o("marian"),yqe=o(" \u2014 "),mB=a("a"),wqe=o("MarianConfig"),Aqe=o(" (Marian model)"),Lqe=l(),Xm=a("li"),tU=a("strong"),Bqe=o("maskformer"),xqe=o(" \u2014 "),gB=a("a"),kqe=o("MaskFormerConfig"),Rqe=o(" (MaskFormer model)"),Sqe=l(),Vm=a("li"),aU=a("strong"),Pqe=o("mbart"),$qe=o(" \u2014 "),hB=a("a"),Iqe=o("MBartConfig"),jqe=o(" (mBART model)"),Nqe=l(),zm=a("li"),nU=a("strong"),Dqe=o("megatron-bert"),qqe=o(" \u2014 "),pB=a("a"),Gqe=o("MegatronBertConfig"),Oqe=o(" (MegatronBert model)"),Xqe=l(),Wm=a("li"),sU=a("strong"),Vqe=o("mobilebert"),zqe=o(" \u2014 "),_B=a("a"),Wqe=o("MobileBertConfig"),Qqe=o(" (MobileBERT model)"),Hqe=l(),Qm=a("li"),lU=a("strong"),Uqe=o("mpnet"),Jqe=o(" \u2014 "),uB=a("a"),Yqe=o("MPNetConfig"),Kqe=o(" (MPNet model)"),Zqe=l(),Hm=a("li"),iU=a("strong"),eGe=o("mt5"),oGe=o(" \u2014 "),bB=a("a"),rGe=o("MT5Config"),tGe=o(" (mT5 model)"),aGe=l(),Um=a("li"),dU=a("strong"),nGe=o("nystromformer"),sGe=o(" \u2014 "),vB=a("a"),lGe=o("NystromformerConfig"),iGe=o(" (Nystromformer model)"),dGe=l(),Jm=a("li"),cU=a("strong"),cGe=o("openai-gpt"),fGe=o(" \u2014 "),TB=a("a"),mGe=o("OpenAIGPTConfig"),gGe=o(" (OpenAI GPT model)"),hGe=l(),Ym=a("li"),fU=a("strong"),pGe=o("pegasus"),_Ge=o(" \u2014 "),FB=a("a"),uGe=o("PegasusConfig"),bGe=o(" (Pegasus model)"),vGe=l(),Km=a("li"),mU=a("strong"),TGe=o("perceiver"),FGe=o(" \u2014 "),CB=a("a"),CGe=o("PerceiverConfig"),MGe=o(" (Perceiver model)"),EGe=l(),Zm=a("li"),gU=a("strong"),yGe=o("plbart"),wGe=o(" \u2014 "),MB=a("a"),AGe=o("PLBartConfig"),LGe=o(" (PLBart model)"),BGe=l(),eg=a("li"),hU=a("strong"),xGe=o("poolformer"),kGe=o(" \u2014 "),EB=a("a"),RGe=o("PoolFormerConfig"),SGe=o(" (PoolFormer model)"),PGe=l(),og=a("li"),pU=a("strong"),$Ge=o("prophetnet"),IGe=o(" \u2014 "),yB=a("a"),jGe=o("ProphetNetConfig"),NGe=o(" (ProphetNet model)"),DGe=l(),rg=a("li"),_U=a("strong"),qGe=o("qdqbert"),GGe=o(" \u2014 "),wB=a("a"),OGe=o("QDQBertConfig"),XGe=o(" (QDQBert model)"),VGe=l(),tg=a("li"),uU=a("strong"),zGe=o("rag"),WGe=o(" \u2014 "),AB=a("a"),QGe=o("RagConfig"),HGe=o(" (RAG model)"),UGe=l(),ag=a("li"),bU=a("strong"),JGe=o("realm"),YGe=o(" \u2014 "),LB=a("a"),KGe=o("RealmConfig"),ZGe=o(" (Realm model)"),eOe=l(),ng=a("li"),vU=a("strong"),oOe=o("reformer"),rOe=o(" \u2014 "),BB=a("a"),tOe=o("ReformerConfig"),aOe=o(" (Reformer model)"),nOe=l(),sg=a("li"),TU=a("strong"),sOe=o("rembert"),lOe=o(" \u2014 "),xB=a("a"),iOe=o("RemBertConfig"),dOe=o(" (RemBERT model)"),cOe=l(),lg=a("li"),FU=a("strong"),fOe=o("resnet"),mOe=o(" \u2014 "),kB=a("a"),gOe=o("ResNetConfig"),hOe=o(" (ResNet model)"),pOe=l(),ig=a("li"),CU=a("strong"),_Oe=o("retribert"),uOe=o(" \u2014 "),RB=a("a"),bOe=o("RetriBertConfig"),vOe=o(" (RetriBERT model)"),TOe=l(),dg=a("li"),MU=a("strong"),FOe=o("roberta"),COe=o(" \u2014 "),SB=a("a"),MOe=o("RobertaConfig"),EOe=o(" (RoBERTa model)"),yOe=l(),cg=a("li"),EU=a("strong"),wOe=o("roformer"),AOe=o(" \u2014 "),PB=a("a"),LOe=o("RoFormerConfig"),BOe=o(" (RoFormer model)"),xOe=l(),fg=a("li"),yU=a("strong"),kOe=o("segformer"),ROe=o(" \u2014 "),$B=a("a"),SOe=o("SegformerConfig"),POe=o(" (SegFormer model)"),$Oe=l(),mg=a("li"),wU=a("strong"),IOe=o("sew"),jOe=o(" \u2014 "),IB=a("a"),NOe=o("SEWConfig"),DOe=o(" (SEW model)"),qOe=l(),gg=a("li"),AU=a("strong"),GOe=o("sew-d"),OOe=o(" \u2014 "),jB=a("a"),XOe=o("SEWDConfig"),VOe=o(" (SEW-D model)"),zOe=l(),hg=a("li"),LU=a("strong"),WOe=o("speech-encoder-decoder"),QOe=o(" \u2014 "),NB=a("a"),HOe=o("SpeechEncoderDecoderConfig"),UOe=o(" (Speech Encoder decoder model)"),JOe=l(),pg=a("li"),BU=a("strong"),YOe=o("speech_to_text"),KOe=o(" \u2014 "),DB=a("a"),ZOe=o("Speech2TextConfig"),eXe=o(" (Speech2Text model)"),oXe=l(),_g=a("li"),xU=a("strong"),rXe=o("speech_to_text_2"),tXe=o(" \u2014 "),qB=a("a"),aXe=o("Speech2Text2Config"),nXe=o(" (Speech2Text2 model)"),sXe=l(),ug=a("li"),kU=a("strong"),lXe=o("splinter"),iXe=o(" \u2014 "),GB=a("a"),dXe=o("SplinterConfig"),cXe=o(" (Splinter model)"),fXe=l(),bg=a("li"),RU=a("strong"),mXe=o("squeezebert"),gXe=o(" \u2014 "),OB=a("a"),hXe=o("SqueezeBertConfig"),pXe=o(" (SqueezeBERT model)"),_Xe=l(),vg=a("li"),SU=a("strong"),uXe=o("swin"),bXe=o(" \u2014 "),XB=a("a"),vXe=o("SwinConfig"),TXe=o(" (Swin model)"),FXe=l(),Tg=a("li"),PU=a("strong"),CXe=o("t5"),MXe=o(" \u2014 "),VB=a("a"),EXe=o("T5Config"),yXe=o(" (T5 model)"),wXe=l(),Fg=a("li"),$U=a("strong"),AXe=o("tapas"),LXe=o(" \u2014 "),zB=a("a"),BXe=o("TapasConfig"),xXe=o(" (TAPAS model)"),kXe=l(),Cg=a("li"),IU=a("strong"),RXe=o("transfo-xl"),SXe=o(" \u2014 "),WB=a("a"),PXe=o("TransfoXLConfig"),$Xe=o(" (Transformer-XL model)"),IXe=l(),Mg=a("li"),jU=a("strong"),jXe=o("trocr"),NXe=o(" \u2014 "),QB=a("a"),DXe=o("TrOCRConfig"),qXe=o(" (TrOCR model)"),GXe=l(),Eg=a("li"),NU=a("strong"),OXe=o("unispeech"),XXe=o(" \u2014 "),HB=a("a"),VXe=o("UniSpeechConfig"),zXe=o(" (UniSpeech model)"),WXe=l(),yg=a("li"),DU=a("strong"),QXe=o("unispeech-sat"),HXe=o(" \u2014 "),UB=a("a"),UXe=o("UniSpeechSatConfig"),JXe=o(" (UniSpeechSat model)"),YXe=l(),wg=a("li"),qU=a("strong"),KXe=o("van"),ZXe=o(" \u2014 "),JB=a("a"),eVe=o("VanConfig"),oVe=o(" (VAN model)"),rVe=l(),Ag=a("li"),GU=a("strong"),tVe=o("vilt"),aVe=o(" \u2014 "),YB=a("a"),nVe=o("ViltConfig"),sVe=o(" (ViLT model)"),lVe=l(),Lg=a("li"),OU=a("strong"),iVe=o("vision-encoder-decoder"),dVe=o(" \u2014 "),KB=a("a"),cVe=o("VisionEncoderDecoderConfig"),fVe=o(" (Vision Encoder decoder model)"),mVe=l(),Bg=a("li"),XU=a("strong"),gVe=o("vision-text-dual-encoder"),hVe=o(" \u2014 "),ZB=a("a"),pVe=o("VisionTextDualEncoderConfig"),_Ve=o(" (VisionTextDualEncoder model)"),uVe=l(),xg=a("li"),VU=a("strong"),bVe=o("visual_bert"),vVe=o(" \u2014 "),ex=a("a"),TVe=o("VisualBertConfig"),FVe=o(" (VisualBert model)"),CVe=l(),kg=a("li"),zU=a("strong"),MVe=o("vit"),EVe=o(" \u2014 "),ox=a("a"),yVe=o("ViTConfig"),wVe=o(" (ViT model)"),AVe=l(),Rg=a("li"),WU=a("strong"),LVe=o("vit_mae"),BVe=o(" \u2014 "),rx=a("a"),xVe=o("ViTMAEConfig"),kVe=o(" (ViTMAE model)"),RVe=l(),Sg=a("li"),QU=a("strong"),SVe=o("wav2vec2"),PVe=o(" \u2014 "),tx=a("a"),$Ve=o("Wav2Vec2Config"),IVe=o(" (Wav2Vec2 model)"),jVe=l(),Pg=a("li"),HU=a("strong"),NVe=o("wavlm"),DVe=o(" \u2014 "),ax=a("a"),qVe=o("WavLMConfig"),GVe=o(" (WavLM model)"),OVe=l(),$g=a("li"),UU=a("strong"),XVe=o("xglm"),VVe=o(" \u2014 "),nx=a("a"),zVe=o("XGLMConfig"),WVe=o(" (XGLM model)"),QVe=l(),Ig=a("li"),JU=a("strong"),HVe=o("xlm"),UVe=o(" \u2014 "),sx=a("a"),JVe=o("XLMConfig"),YVe=o(" (XLM model)"),KVe=l(),jg=a("li"),YU=a("strong"),ZVe=o("xlm-prophetnet"),eze=o(" \u2014 "),lx=a("a"),oze=o("XLMProphetNetConfig"),rze=o(" (XLMProphetNet model)"),tze=l(),Ng=a("li"),KU=a("strong"),aze=o("xlm-roberta"),nze=o(" \u2014 "),ix=a("a"),sze=o("XLMRobertaConfig"),lze=o(" (XLM-RoBERTa model)"),ize=l(),Dg=a("li"),ZU=a("strong"),dze=o("xlm-roberta-xl"),cze=o(" \u2014 "),dx=a("a"),fze=o("XLMRobertaXLConfig"),mze=o(" (XLM-RoBERTa-XL model)"),gze=l(),qg=a("li"),eJ=a("strong"),hze=o("xlnet"),pze=o(" \u2014 "),cx=a("a"),_ze=o("XLNetConfig"),uze=o(" (XLNet model)"),bze=l(),Gg=a("li"),oJ=a("strong"),vze=o("yoso"),Tze=o(" \u2014 "),fx=a("a"),Fze=o("YosoConfig"),Cze=o(" (YOSO model)"),Mze=l(),rJ=a("p"),Eze=o("Examples:"),yze=l(),f(A4.$$.fragment),wze=l(),Og=a("div"),f(L4.$$.fragment),Aze=l(),tJ=a("p"),Lze=o("Register a new configuration for this class."),Dke=l(),ed=a("h2"),Xg=a("a"),aJ=a("span"),f(B4.$$.fragment),Bze=l(),nJ=a("span"),xze=o("AutoTokenizer"),qke=l(),Ho=a("div"),f(x4.$$.fragment),kze=l(),k4=a("p"),Rze=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),mx=a("a"),Sze=o("AutoTokenizer.from_pretrained()"),Pze=o(" class method."),$ze=l(),R4=a("p"),Ize=o("This class cannot be instantiated directly using "),sJ=a("code"),jze=o("__init__()"),Nze=o(" (throws an error)."),Dze=l(),go=a("div"),f(S4.$$.fragment),qze=l(),lJ=a("p"),Gze=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Oze=l(),Wa=a("p"),Xze=o("The tokenizer class to instantiate is selected based on the "),iJ=a("code"),Vze=o("model_type"),zze=o(` property of the config object (either
passed as an argument or loaded from `),dJ=a("code"),Wze=o("pretrained_model_name_or_path"),Qze=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cJ=a("code"),Hze=o("pretrained_model_name_or_path"),Uze=o(":"),Jze=l(),E=a("ul"),Yn=a("li"),fJ=a("strong"),Yze=o("albert"),Kze=o(" \u2014 "),gx=a("a"),Zze=o("AlbertTokenizer"),eWe=o(" or "),hx=a("a"),oWe=o("AlbertTokenizerFast"),rWe=o(" (ALBERT model)"),tWe=l(),Kn=a("li"),mJ=a("strong"),aWe=o("bart"),nWe=o(" \u2014 "),px=a("a"),sWe=o("BartTokenizer"),lWe=o(" or "),_x=a("a"),iWe=o("BartTokenizerFast"),dWe=o(" (BART model)"),cWe=l(),Zn=a("li"),gJ=a("strong"),fWe=o("barthez"),mWe=o(" \u2014 "),ux=a("a"),gWe=o("BarthezTokenizer"),hWe=o(" or "),bx=a("a"),pWe=o("BarthezTokenizerFast"),_We=o(" (BARThez model)"),uWe=l(),Vg=a("li"),hJ=a("strong"),bWe=o("bartpho"),vWe=o(" \u2014 "),vx=a("a"),TWe=o("BartphoTokenizer"),FWe=o(" (BARTpho model)"),CWe=l(),es=a("li"),pJ=a("strong"),MWe=o("bert"),EWe=o(" \u2014 "),Tx=a("a"),yWe=o("BertTokenizer"),wWe=o(" or "),Fx=a("a"),AWe=o("BertTokenizerFast"),LWe=o(" (BERT model)"),BWe=l(),zg=a("li"),_J=a("strong"),xWe=o("bert-generation"),kWe=o(" \u2014 "),Cx=a("a"),RWe=o("BertGenerationTokenizer"),SWe=o(" (Bert Generation model)"),PWe=l(),Wg=a("li"),uJ=a("strong"),$We=o("bert-japanese"),IWe=o(" \u2014 "),Mx=a("a"),jWe=o("BertJapaneseTokenizer"),NWe=o(" (BertJapanese model)"),DWe=l(),Qg=a("li"),bJ=a("strong"),qWe=o("bertweet"),GWe=o(" \u2014 "),Ex=a("a"),OWe=o("BertweetTokenizer"),XWe=o(" (Bertweet model)"),VWe=l(),os=a("li"),vJ=a("strong"),zWe=o("big_bird"),WWe=o(" \u2014 "),yx=a("a"),QWe=o("BigBirdTokenizer"),HWe=o(" or "),wx=a("a"),UWe=o("BigBirdTokenizerFast"),JWe=o(" (BigBird model)"),YWe=l(),rs=a("li"),TJ=a("strong"),KWe=o("bigbird_pegasus"),ZWe=o(" \u2014 "),Ax=a("a"),eQe=o("PegasusTokenizer"),oQe=o(" or "),Lx=a("a"),rQe=o("PegasusTokenizerFast"),tQe=o(" (BigBirdPegasus model)"),aQe=l(),ts=a("li"),FJ=a("strong"),nQe=o("blenderbot"),sQe=o(" \u2014 "),Bx=a("a"),lQe=o("BlenderbotTokenizer"),iQe=o(" or "),xx=a("a"),dQe=o("BlenderbotTokenizerFast"),cQe=o(" (Blenderbot model)"),fQe=l(),Hg=a("li"),CJ=a("strong"),mQe=o("blenderbot-small"),gQe=o(" \u2014 "),kx=a("a"),hQe=o("BlenderbotSmallTokenizer"),pQe=o(" (BlenderbotSmall model)"),_Qe=l(),Ug=a("li"),MJ=a("strong"),uQe=o("byt5"),bQe=o(" \u2014 "),Rx=a("a"),vQe=o("ByT5Tokenizer"),TQe=o(" (ByT5 model)"),FQe=l(),as=a("li"),EJ=a("strong"),CQe=o("camembert"),MQe=o(" \u2014 "),Sx=a("a"),EQe=o("CamembertTokenizer"),yQe=o(" or "),Px=a("a"),wQe=o("CamembertTokenizerFast"),AQe=o(" (CamemBERT model)"),LQe=l(),Jg=a("li"),yJ=a("strong"),BQe=o("canine"),xQe=o(" \u2014 "),$x=a("a"),kQe=o("CanineTokenizer"),RQe=o(" (Canine model)"),SQe=l(),ns=a("li"),wJ=a("strong"),PQe=o("clip"),$Qe=o(" \u2014 "),Ix=a("a"),IQe=o("CLIPTokenizer"),jQe=o(" or "),jx=a("a"),NQe=o("CLIPTokenizerFast"),DQe=o(" (CLIP model)"),qQe=l(),ss=a("li"),AJ=a("strong"),GQe=o("convbert"),OQe=o(" \u2014 "),Nx=a("a"),XQe=o("ConvBertTokenizer"),VQe=o(" or "),Dx=a("a"),zQe=o("ConvBertTokenizerFast"),WQe=o(" (ConvBERT model)"),QQe=l(),ls=a("li"),LJ=a("strong"),HQe=o("cpm"),UQe=o(" \u2014 "),qx=a("a"),JQe=o("CpmTokenizer"),YQe=o(" or "),BJ=a("code"),KQe=o("CpmTokenizerFast"),ZQe=o(" (CPM model)"),eHe=l(),Yg=a("li"),xJ=a("strong"),oHe=o("ctrl"),rHe=o(" \u2014 "),Gx=a("a"),tHe=o("CTRLTokenizer"),aHe=o(" (CTRL model)"),nHe=l(),is=a("li"),kJ=a("strong"),sHe=o("deberta"),lHe=o(" \u2014 "),Ox=a("a"),iHe=o("DebertaTokenizer"),dHe=o(" or "),Xx=a("a"),cHe=o("DebertaTokenizerFast"),fHe=o(" (DeBERTa model)"),mHe=l(),Kg=a("li"),RJ=a("strong"),gHe=o("deberta-v2"),hHe=o(" \u2014 "),Vx=a("a"),pHe=o("DebertaV2Tokenizer"),_He=o(" (DeBERTa-v2 model)"),uHe=l(),ds=a("li"),SJ=a("strong"),bHe=o("distilbert"),vHe=o(" \u2014 "),zx=a("a"),THe=o("DistilBertTokenizer"),FHe=o(" or "),Wx=a("a"),CHe=o("DistilBertTokenizerFast"),MHe=o(" (DistilBERT model)"),EHe=l(),cs=a("li"),PJ=a("strong"),yHe=o("dpr"),wHe=o(" \u2014 "),Qx=a("a"),AHe=o("DPRQuestionEncoderTokenizer"),LHe=o(" or "),Hx=a("a"),BHe=o("DPRQuestionEncoderTokenizerFast"),xHe=o(" (DPR model)"),kHe=l(),fs=a("li"),$J=a("strong"),RHe=o("electra"),SHe=o(" \u2014 "),Ux=a("a"),PHe=o("ElectraTokenizer"),$He=o(" or "),Jx=a("a"),IHe=o("ElectraTokenizerFast"),jHe=o(" (ELECTRA model)"),NHe=l(),Zg=a("li"),IJ=a("strong"),DHe=o("flaubert"),qHe=o(" \u2014 "),Yx=a("a"),GHe=o("FlaubertTokenizer"),OHe=o(" (FlauBERT model)"),XHe=l(),ms=a("li"),jJ=a("strong"),VHe=o("fnet"),zHe=o(" \u2014 "),Kx=a("a"),WHe=o("FNetTokenizer"),QHe=o(" or "),Zx=a("a"),HHe=o("FNetTokenizerFast"),UHe=o(" (FNet model)"),JHe=l(),eh=a("li"),NJ=a("strong"),YHe=o("fsmt"),KHe=o(" \u2014 "),ek=a("a"),ZHe=o("FSMTTokenizer"),eUe=o(" (FairSeq Machine-Translation model)"),oUe=l(),gs=a("li"),DJ=a("strong"),rUe=o("funnel"),tUe=o(" \u2014 "),ok=a("a"),aUe=o("FunnelTokenizer"),nUe=o(" or "),rk=a("a"),sUe=o("FunnelTokenizerFast"),lUe=o(" (Funnel Transformer model)"),iUe=l(),hs=a("li"),qJ=a("strong"),dUe=o("gpt2"),cUe=o(" \u2014 "),tk=a("a"),fUe=o("GPT2Tokenizer"),mUe=o(" or "),ak=a("a"),gUe=o("GPT2TokenizerFast"),hUe=o(" (OpenAI GPT-2 model)"),pUe=l(),ps=a("li"),GJ=a("strong"),_Ue=o("gpt_neo"),uUe=o(" \u2014 "),nk=a("a"),bUe=o("GPT2Tokenizer"),vUe=o(" or "),sk=a("a"),TUe=o("GPT2TokenizerFast"),FUe=o(" (GPT Neo model)"),CUe=l(),_s=a("li"),OJ=a("strong"),MUe=o("herbert"),EUe=o(" \u2014 "),lk=a("a"),yUe=o("HerbertTokenizer"),wUe=o(" or "),ik=a("a"),AUe=o("HerbertTokenizerFast"),LUe=o(" (HerBERT model)"),BUe=l(),oh=a("li"),XJ=a("strong"),xUe=o("hubert"),kUe=o(" \u2014 "),dk=a("a"),RUe=o("Wav2Vec2CTCTokenizer"),SUe=o(" (Hubert model)"),PUe=l(),us=a("li"),VJ=a("strong"),$Ue=o("ibert"),IUe=o(" \u2014 "),ck=a("a"),jUe=o("RobertaTokenizer"),NUe=o(" or "),fk=a("a"),DUe=o("RobertaTokenizerFast"),qUe=o(" (I-BERT model)"),GUe=l(),bs=a("li"),zJ=a("strong"),OUe=o("layoutlm"),XUe=o(" \u2014 "),mk=a("a"),VUe=o("LayoutLMTokenizer"),zUe=o(" or "),gk=a("a"),WUe=o("LayoutLMTokenizerFast"),QUe=o(" (LayoutLM model)"),HUe=l(),vs=a("li"),WJ=a("strong"),UUe=o("layoutlmv2"),JUe=o(" \u2014 "),hk=a("a"),YUe=o("LayoutLMv2Tokenizer"),KUe=o(" or "),pk=a("a"),ZUe=o("LayoutLMv2TokenizerFast"),eJe=o(" (LayoutLMv2 model)"),oJe=l(),Ts=a("li"),QJ=a("strong"),rJe=o("layoutxlm"),tJe=o(" \u2014 "),_k=a("a"),aJe=o("LayoutXLMTokenizer"),nJe=o(" or "),uk=a("a"),sJe=o("LayoutXLMTokenizerFast"),lJe=o(" (LayoutXLM model)"),iJe=l(),Fs=a("li"),HJ=a("strong"),dJe=o("led"),cJe=o(" \u2014 "),bk=a("a"),fJe=o("LEDTokenizer"),mJe=o(" or "),vk=a("a"),gJe=o("LEDTokenizerFast"),hJe=o(" (LED model)"),pJe=l(),Cs=a("li"),UJ=a("strong"),_Je=o("longformer"),uJe=o(" \u2014 "),Tk=a("a"),bJe=o("LongformerTokenizer"),vJe=o(" or "),Fk=a("a"),TJe=o("LongformerTokenizerFast"),FJe=o(" (Longformer model)"),CJe=l(),rh=a("li"),JJ=a("strong"),MJe=o("luke"),EJe=o(" \u2014 "),Ck=a("a"),yJe=o("LukeTokenizer"),wJe=o(" (LUKE model)"),AJe=l(),Ms=a("li"),YJ=a("strong"),LJe=o("lxmert"),BJe=o(" \u2014 "),Mk=a("a"),xJe=o("LxmertTokenizer"),kJe=o(" or "),Ek=a("a"),RJe=o("LxmertTokenizerFast"),SJe=o(" (LXMERT model)"),PJe=l(),th=a("li"),KJ=a("strong"),$Je=o("m2m_100"),IJe=o(" \u2014 "),yk=a("a"),jJe=o("M2M100Tokenizer"),NJe=o(" (M2M100 model)"),DJe=l(),ah=a("li"),ZJ=a("strong"),qJe=o("marian"),GJe=o(" \u2014 "),wk=a("a"),OJe=o("MarianTokenizer"),XJe=o(" (Marian model)"),VJe=l(),Es=a("li"),eY=a("strong"),zJe=o("mbart"),WJe=o(" \u2014 "),Ak=a("a"),QJe=o("MBartTokenizer"),HJe=o(" or "),Lk=a("a"),UJe=o("MBartTokenizerFast"),JJe=o(" (mBART model)"),YJe=l(),ys=a("li"),oY=a("strong"),KJe=o("mbart50"),ZJe=o(" \u2014 "),Bk=a("a"),eYe=o("MBart50Tokenizer"),oYe=o(" or "),xk=a("a"),rYe=o("MBart50TokenizerFast"),tYe=o(" (mBART-50 model)"),aYe=l(),nh=a("li"),rY=a("strong"),nYe=o("mluke"),sYe=o(" \u2014 "),kk=a("a"),lYe=o("MLukeTokenizer"),iYe=o(" (mLUKE model)"),dYe=l(),ws=a("li"),tY=a("strong"),cYe=o("mobilebert"),fYe=o(" \u2014 "),Rk=a("a"),mYe=o("MobileBertTokenizer"),gYe=o(" or "),Sk=a("a"),hYe=o("MobileBertTokenizerFast"),pYe=o(" (MobileBERT model)"),_Ye=l(),As=a("li"),aY=a("strong"),uYe=o("mpnet"),bYe=o(" \u2014 "),Pk=a("a"),vYe=o("MPNetTokenizer"),TYe=o(" or "),$k=a("a"),FYe=o("MPNetTokenizerFast"),CYe=o(" (MPNet model)"),MYe=l(),Ls=a("li"),nY=a("strong"),EYe=o("mt5"),yYe=o(" \u2014 "),Ik=a("a"),wYe=o("MT5Tokenizer"),AYe=o(" or "),jk=a("a"),LYe=o("MT5TokenizerFast"),BYe=o(" (mT5 model)"),xYe=l(),Bs=a("li"),sY=a("strong"),kYe=o("openai-gpt"),RYe=o(" \u2014 "),Nk=a("a"),SYe=o("OpenAIGPTTokenizer"),PYe=o(" or "),Dk=a("a"),$Ye=o("OpenAIGPTTokenizerFast"),IYe=o(" (OpenAI GPT model)"),jYe=l(),xs=a("li"),lY=a("strong"),NYe=o("pegasus"),DYe=o(" \u2014 "),qk=a("a"),qYe=o("PegasusTokenizer"),GYe=o(" or "),Gk=a("a"),OYe=o("PegasusTokenizerFast"),XYe=o(" (Pegasus model)"),VYe=l(),sh=a("li"),iY=a("strong"),zYe=o("perceiver"),WYe=o(" \u2014 "),Ok=a("a"),QYe=o("PerceiverTokenizer"),HYe=o(" (Perceiver model)"),UYe=l(),lh=a("li"),dY=a("strong"),JYe=o("phobert"),YYe=o(" \u2014 "),Xk=a("a"),KYe=o("PhobertTokenizer"),ZYe=o(" (PhoBERT model)"),eKe=l(),ih=a("li"),cY=a("strong"),oKe=o("plbart"),rKe=o(" \u2014 "),Vk=a("a"),tKe=o("PLBartTokenizer"),aKe=o(" (PLBart model)"),nKe=l(),dh=a("li"),fY=a("strong"),sKe=o("prophetnet"),lKe=o(" \u2014 "),zk=a("a"),iKe=o("ProphetNetTokenizer"),dKe=o(" (ProphetNet model)"),cKe=l(),ks=a("li"),mY=a("strong"),fKe=o("qdqbert"),mKe=o(" \u2014 "),Wk=a("a"),gKe=o("BertTokenizer"),hKe=o(" or "),Qk=a("a"),pKe=o("BertTokenizerFast"),_Ke=o(" (QDQBert model)"),uKe=l(),ch=a("li"),gY=a("strong"),bKe=o("rag"),vKe=o(" \u2014 "),Hk=a("a"),TKe=o("RagTokenizer"),FKe=o(" (RAG model)"),CKe=l(),Rs=a("li"),hY=a("strong"),MKe=o("realm"),EKe=o(" \u2014 "),Uk=a("a"),yKe=o("RealmTokenizer"),wKe=o(" or "),Jk=a("a"),AKe=o("RealmTokenizerFast"),LKe=o(" (Realm model)"),BKe=l(),Ss=a("li"),pY=a("strong"),xKe=o("reformer"),kKe=o(" \u2014 "),Yk=a("a"),RKe=o("ReformerTokenizer"),SKe=o(" or "),Kk=a("a"),PKe=o("ReformerTokenizerFast"),$Ke=o(" (Reformer model)"),IKe=l(),Ps=a("li"),_Y=a("strong"),jKe=o("rembert"),NKe=o(" \u2014 "),Zk=a("a"),DKe=o("RemBertTokenizer"),qKe=o(" or "),eR=a("a"),GKe=o("RemBertTokenizerFast"),OKe=o(" (RemBERT model)"),XKe=l(),$s=a("li"),uY=a("strong"),VKe=o("retribert"),zKe=o(" \u2014 "),oR=a("a"),WKe=o("RetriBertTokenizer"),QKe=o(" or "),rR=a("a"),HKe=o("RetriBertTokenizerFast"),UKe=o(" (RetriBERT model)"),JKe=l(),Is=a("li"),bY=a("strong"),YKe=o("roberta"),KKe=o(" \u2014 "),tR=a("a"),ZKe=o("RobertaTokenizer"),eZe=o(" or "),aR=a("a"),oZe=o("RobertaTokenizerFast"),rZe=o(" (RoBERTa model)"),tZe=l(),js=a("li"),vY=a("strong"),aZe=o("roformer"),nZe=o(" \u2014 "),nR=a("a"),sZe=o("RoFormerTokenizer"),lZe=o(" or "),sR=a("a"),iZe=o("RoFormerTokenizerFast"),dZe=o(" (RoFormer model)"),cZe=l(),fh=a("li"),TY=a("strong"),fZe=o("speech_to_text"),mZe=o(" \u2014 "),lR=a("a"),gZe=o("Speech2TextTokenizer"),hZe=o(" (Speech2Text model)"),pZe=l(),mh=a("li"),FY=a("strong"),_Ze=o("speech_to_text_2"),uZe=o(" \u2014 "),iR=a("a"),bZe=o("Speech2Text2Tokenizer"),vZe=o(" (Speech2Text2 model)"),TZe=l(),Ns=a("li"),CY=a("strong"),FZe=o("splinter"),CZe=o(" \u2014 "),dR=a("a"),MZe=o("SplinterTokenizer"),EZe=o(" or "),cR=a("a"),yZe=o("SplinterTokenizerFast"),wZe=o(" (Splinter model)"),AZe=l(),Ds=a("li"),MY=a("strong"),LZe=o("squeezebert"),BZe=o(" \u2014 "),fR=a("a"),xZe=o("SqueezeBertTokenizer"),kZe=o(" or "),mR=a("a"),RZe=o("SqueezeBertTokenizerFast"),SZe=o(" (SqueezeBERT model)"),PZe=l(),qs=a("li"),EY=a("strong"),$Ze=o("t5"),IZe=o(" \u2014 "),gR=a("a"),jZe=o("T5Tokenizer"),NZe=o(" or "),hR=a("a"),DZe=o("T5TokenizerFast"),qZe=o(" (T5 model)"),GZe=l(),gh=a("li"),yY=a("strong"),OZe=o("tapas"),XZe=o(" \u2014 "),pR=a("a"),VZe=o("TapasTokenizer"),zZe=o(" (TAPAS model)"),WZe=l(),hh=a("li"),wY=a("strong"),QZe=o("transfo-xl"),HZe=o(" \u2014 "),_R=a("a"),UZe=o("TransfoXLTokenizer"),JZe=o(" (Transformer-XL model)"),YZe=l(),ph=a("li"),AY=a("strong"),KZe=o("wav2vec2"),ZZe=o(" \u2014 "),uR=a("a"),eeo=o("Wav2Vec2CTCTokenizer"),oeo=o(" (Wav2Vec2 model)"),reo=l(),_h=a("li"),LY=a("strong"),teo=o("wav2vec2_phoneme"),aeo=o(" \u2014 "),bR=a("a"),neo=o("Wav2Vec2PhonemeCTCTokenizer"),seo=o(" (Wav2Vec2Phoneme model)"),leo=l(),Gs=a("li"),BY=a("strong"),ieo=o("xglm"),deo=o(" \u2014 "),vR=a("a"),ceo=o("XGLMTokenizer"),feo=o(" or "),TR=a("a"),meo=o("XGLMTokenizerFast"),geo=o(" (XGLM model)"),heo=l(),uh=a("li"),xY=a("strong"),peo=o("xlm"),_eo=o(" \u2014 "),FR=a("a"),ueo=o("XLMTokenizer"),beo=o(" (XLM model)"),veo=l(),bh=a("li"),kY=a("strong"),Teo=o("xlm-prophetnet"),Feo=o(" \u2014 "),CR=a("a"),Ceo=o("XLMProphetNetTokenizer"),Meo=o(" (XLMProphetNet model)"),Eeo=l(),Os=a("li"),RY=a("strong"),yeo=o("xlm-roberta"),weo=o(" \u2014 "),MR=a("a"),Aeo=o("XLMRobertaTokenizer"),Leo=o(" or "),ER=a("a"),Beo=o("XLMRobertaTokenizerFast"),xeo=o(" (XLM-RoBERTa model)"),keo=l(),Xs=a("li"),SY=a("strong"),Reo=o("xlnet"),Seo=o(" \u2014 "),yR=a("a"),Peo=o("XLNetTokenizer"),$eo=o(" or "),wR=a("a"),Ieo=o("XLNetTokenizerFast"),jeo=o(" (XLNet model)"),Neo=l(),PY=a("p"),Deo=o("Examples:"),qeo=l(),f(P4.$$.fragment),Geo=l(),vh=a("div"),f($4.$$.fragment),Oeo=l(),$Y=a("p"),Xeo=o("Register a new tokenizer in this mapping."),Gke=l(),od=a("h2"),Th=a("a"),IY=a("span"),f(I4.$$.fragment),Veo=l(),jY=a("span"),zeo=o("AutoFeatureExtractor"),Oke=l(),Uo=a("div"),f(j4.$$.fragment),Weo=l(),N4=a("p"),Qeo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),AR=a("a"),Heo=o("AutoFeatureExtractor.from_pretrained()"),Ueo=o(" class method."),Jeo=l(),D4=a("p"),Yeo=o("This class cannot be instantiated directly using "),NY=a("code"),Keo=o("__init__()"),Zeo=o(" (throws an error)."),eoo=l(),Ie=a("div"),f(q4.$$.fragment),ooo=l(),DY=a("p"),roo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),too=l(),Qa=a("p"),aoo=o("The feature extractor class to instantiate is selected based on the "),qY=a("code"),noo=o("model_type"),soo=o(` property of the config object
(either passed as an argument or loaded from `),GY=a("code"),loo=o("pretrained_model_name_or_path"),ioo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),OY=a("code"),doo=o("pretrained_model_name_or_path"),coo=o(":"),foo=l(),re=a("ul"),Fh=a("li"),XY=a("strong"),moo=o("beit"),goo=o(" \u2014 "),LR=a("a"),hoo=o("BeitFeatureExtractor"),poo=o(" (BEiT model)"),_oo=l(),Ch=a("li"),VY=a("strong"),uoo=o("clip"),boo=o(" \u2014 "),BR=a("a"),voo=o("CLIPFeatureExtractor"),Too=o(" (CLIP model)"),Foo=l(),Mh=a("li"),zY=a("strong"),Coo=o("convnext"),Moo=o(" \u2014 "),xR=a("a"),Eoo=o("ConvNextFeatureExtractor"),yoo=o(" (ConvNext model)"),woo=l(),Eh=a("li"),WY=a("strong"),Aoo=o("deit"),Loo=o(" \u2014 "),kR=a("a"),Boo=o("DeiTFeatureExtractor"),xoo=o(" (DeiT model)"),koo=l(),yh=a("li"),QY=a("strong"),Roo=o("detr"),Soo=o(" \u2014 "),RR=a("a"),Poo=o("DetrFeatureExtractor"),$oo=o(" (DETR model)"),Ioo=l(),wh=a("li"),HY=a("strong"),joo=o("hubert"),Noo=o(" \u2014 "),SR=a("a"),Doo=o("Wav2Vec2FeatureExtractor"),qoo=o(" (Hubert model)"),Goo=l(),Ah=a("li"),UY=a("strong"),Ooo=o("layoutlmv2"),Xoo=o(" \u2014 "),PR=a("a"),Voo=o("LayoutLMv2FeatureExtractor"),zoo=o(" (LayoutLMv2 model)"),Woo=l(),Lh=a("li"),JY=a("strong"),Qoo=o("maskformer"),Hoo=o(" \u2014 "),$R=a("a"),Uoo=o("MaskFormerFeatureExtractor"),Joo=o(" (MaskFormer model)"),Yoo=l(),Bh=a("li"),YY=a("strong"),Koo=o("perceiver"),Zoo=o(" \u2014 "),IR=a("a"),ero=o("PerceiverFeatureExtractor"),oro=o(" (Perceiver model)"),rro=l(),xh=a("li"),KY=a("strong"),tro=o("poolformer"),aro=o(" \u2014 "),jR=a("a"),nro=o("PoolFormerFeatureExtractor"),sro=o(" (PoolFormer model)"),lro=l(),kh=a("li"),ZY=a("strong"),iro=o("resnet"),dro=o(" \u2014 "),NR=a("a"),cro=o("ConvNextFeatureExtractor"),fro=o(" (ResNet model)"),mro=l(),Rh=a("li"),eK=a("strong"),gro=o("segformer"),hro=o(" \u2014 "),DR=a("a"),pro=o("SegformerFeatureExtractor"),_ro=o(" (SegFormer model)"),uro=l(),Sh=a("li"),oK=a("strong"),bro=o("speech_to_text"),vro=o(" \u2014 "),qR=a("a"),Tro=o("Speech2TextFeatureExtractor"),Fro=o(" (Speech2Text model)"),Cro=l(),Ph=a("li"),rK=a("strong"),Mro=o("swin"),Ero=o(" \u2014 "),GR=a("a"),yro=o("ViTFeatureExtractor"),wro=o(" (Swin model)"),Aro=l(),$h=a("li"),tK=a("strong"),Lro=o("van"),Bro=o(" \u2014 "),OR=a("a"),xro=o("ConvNextFeatureExtractor"),kro=o(" (VAN model)"),Rro=l(),Ih=a("li"),aK=a("strong"),Sro=o("vit"),Pro=o(" \u2014 "),XR=a("a"),$ro=o("ViTFeatureExtractor"),Iro=o(" (ViT model)"),jro=l(),jh=a("li"),nK=a("strong"),Nro=o("vit_mae"),Dro=o(" \u2014 "),VR=a("a"),qro=o("ViTFeatureExtractor"),Gro=o(" (ViTMAE model)"),Oro=l(),Nh=a("li"),sK=a("strong"),Xro=o("wav2vec2"),Vro=o(" \u2014 "),zR=a("a"),zro=o("Wav2Vec2FeatureExtractor"),Wro=o(" (Wav2Vec2 model)"),Qro=l(),f(Dh.$$.fragment),Hro=l(),lK=a("p"),Uro=o("Examples:"),Jro=l(),f(G4.$$.fragment),Yro=l(),qh=a("div"),f(O4.$$.fragment),Kro=l(),iK=a("p"),Zro=o("Register a new feature extractor for this class."),Xke=l(),rd=a("h2"),Gh=a("a"),dK=a("span"),f(X4.$$.fragment),eto=l(),cK=a("span"),oto=o("AutoProcessor"),Vke=l(),Jo=a("div"),f(V4.$$.fragment),rto=l(),z4=a("p"),tto=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),WR=a("a"),ato=o("AutoProcessor.from_pretrained()"),nto=o(" class method."),sto=l(),W4=a("p"),lto=o("This class cannot be instantiated directly using "),fK=a("code"),ito=o("__init__()"),dto=o(" (throws an error)."),cto=l(),je=a("div"),f(Q4.$$.fragment),fto=l(),mK=a("p"),mto=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),gto=l(),td=a("p"),hto=o("The processor class to instantiate is selected based on the "),gK=a("code"),pto=o("model_type"),_to=o(` property of the config object (either
passed as an argument or loaded from `),hK=a("code"),uto=o("pretrained_model_name_or_path"),bto=o(" if possible):"),vto=l(),xe=a("ul"),Oh=a("li"),pK=a("strong"),Tto=o("clip"),Fto=o(" \u2014 "),QR=a("a"),Cto=o("CLIPProcessor"),Mto=o(" (CLIP model)"),Eto=l(),Xh=a("li"),_K=a("strong"),yto=o("layoutlmv2"),wto=o(" \u2014 "),HR=a("a"),Ato=o("LayoutLMv2Processor"),Lto=o(" (LayoutLMv2 model)"),Bto=l(),Vh=a("li"),uK=a("strong"),xto=o("layoutxlm"),kto=o(" \u2014 "),UR=a("a"),Rto=o("LayoutXLMProcessor"),Sto=o(" (LayoutXLM model)"),Pto=l(),zh=a("li"),bK=a("strong"),$to=o("speech_to_text"),Ito=o(" \u2014 "),JR=a("a"),jto=o("Speech2TextProcessor"),Nto=o(" (Speech2Text model)"),Dto=l(),Wh=a("li"),vK=a("strong"),qto=o("speech_to_text_2"),Gto=o(" \u2014 "),YR=a("a"),Oto=o("Speech2Text2Processor"),Xto=o(" (Speech2Text2 model)"),Vto=l(),Qh=a("li"),TK=a("strong"),zto=o("trocr"),Wto=o(" \u2014 "),KR=a("a"),Qto=o("TrOCRProcessor"),Hto=o(" (TrOCR model)"),Uto=l(),Hh=a("li"),FK=a("strong"),Jto=o("vision-text-dual-encoder"),Yto=o(" \u2014 "),ZR=a("a"),Kto=o("VisionTextDualEncoderProcessor"),Zto=o(" (VisionTextDualEncoder model)"),eao=l(),Uh=a("li"),CK=a("strong"),oao=o("wav2vec2"),rao=o(" \u2014 "),eS=a("a"),tao=o("Wav2Vec2Processor"),aao=o(" (Wav2Vec2 model)"),nao=l(),f(Jh.$$.fragment),sao=l(),MK=a("p"),lao=o("Examples:"),iao=l(),f(H4.$$.fragment),dao=l(),Yh=a("div"),f(U4.$$.fragment),cao=l(),EK=a("p"),fao=o("Register a new processor for this class."),zke=l(),ad=a("h2"),Kh=a("a"),yK=a("span"),f(J4.$$.fragment),mao=l(),wK=a("span"),gao=o("AutoModel"),Wke=l(),Yo=a("div"),f(Y4.$$.fragment),hao=l(),nd=a("p"),pao=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),AK=a("code"),_ao=o("from_pretrained()"),uao=o("class method or the "),LK=a("code"),bao=o("from_config()"),vao=o(`class
method.`),Tao=l(),K4=a("p"),Fao=o("This class cannot be instantiated directly using "),BK=a("code"),Cao=o("__init__()"),Mao=o(" (throws an error)."),Eao=l(),Wr=a("div"),f(Z4.$$.fragment),yao=l(),xK=a("p"),wao=o("Instantiates one of the base model classes of the library from a configuration."),Aao=l(),sd=a("p"),Lao=o(`Note:
Loading a model from its configuration file does `),kK=a("strong"),Bao=o("not"),xao=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RK=a("code"),kao=o("from_pretrained()"),Rao=o("to load the model weights."),Sao=l(),SK=a("p"),Pao=o("Examples:"),$ao=l(),f(eE.$$.fragment),Iao=l(),Ne=a("div"),f(oE.$$.fragment),jao=l(),PK=a("p"),Nao=o("Instantiate one of the base model classes of the library from a pretrained model."),Dao=l(),Ha=a("p"),qao=o("The model class to instantiate is selected based on the "),$K=a("code"),Gao=o("model_type"),Oao=o(` property of the config object (either
passed as an argument or loaded from `),IK=a("code"),Xao=o("pretrained_model_name_or_path"),Vao=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jK=a("code"),zao=o("pretrained_model_name_or_path"),Wao=o(":"),Qao=l(),F=a("ul"),Zh=a("li"),NK=a("strong"),Hao=o("albert"),Uao=o(" \u2014 "),oS=a("a"),Jao=o("AlbertModel"),Yao=o(" (ALBERT model)"),Kao=l(),ep=a("li"),DK=a("strong"),Zao=o("bart"),eno=o(" \u2014 "),rS=a("a"),ono=o("BartModel"),rno=o(" (BART model)"),tno=l(),op=a("li"),qK=a("strong"),ano=o("beit"),nno=o(" \u2014 "),tS=a("a"),sno=o("BeitModel"),lno=o(" (BEiT model)"),ino=l(),rp=a("li"),GK=a("strong"),dno=o("bert"),cno=o(" \u2014 "),aS=a("a"),fno=o("BertModel"),mno=o(" (BERT model)"),gno=l(),tp=a("li"),OK=a("strong"),hno=o("bert-generation"),pno=o(" \u2014 "),nS=a("a"),_no=o("BertGenerationEncoder"),uno=o(" (Bert Generation model)"),bno=l(),ap=a("li"),XK=a("strong"),vno=o("big_bird"),Tno=o(" \u2014 "),sS=a("a"),Fno=o("BigBirdModel"),Cno=o(" (BigBird model)"),Mno=l(),np=a("li"),VK=a("strong"),Eno=o("bigbird_pegasus"),yno=o(" \u2014 "),lS=a("a"),wno=o("BigBirdPegasusModel"),Ano=o(" (BigBirdPegasus model)"),Lno=l(),sp=a("li"),zK=a("strong"),Bno=o("blenderbot"),xno=o(" \u2014 "),iS=a("a"),kno=o("BlenderbotModel"),Rno=o(" (Blenderbot model)"),Sno=l(),lp=a("li"),WK=a("strong"),Pno=o("blenderbot-small"),$no=o(" \u2014 "),dS=a("a"),Ino=o("BlenderbotSmallModel"),jno=o(" (BlenderbotSmall model)"),Nno=l(),ip=a("li"),QK=a("strong"),Dno=o("camembert"),qno=o(" \u2014 "),cS=a("a"),Gno=o("CamembertModel"),Ono=o(" (CamemBERT model)"),Xno=l(),dp=a("li"),HK=a("strong"),Vno=o("canine"),zno=o(" \u2014 "),fS=a("a"),Wno=o("CanineModel"),Qno=o(" (Canine model)"),Hno=l(),cp=a("li"),UK=a("strong"),Uno=o("clip"),Jno=o(" \u2014 "),mS=a("a"),Yno=o("CLIPModel"),Kno=o(" (CLIP model)"),Zno=l(),fp=a("li"),JK=a("strong"),eso=o("convbert"),oso=o(" \u2014 "),gS=a("a"),rso=o("ConvBertModel"),tso=o(" (ConvBERT model)"),aso=l(),mp=a("li"),YK=a("strong"),nso=o("convnext"),sso=o(" \u2014 "),hS=a("a"),lso=o("ConvNextModel"),iso=o(" (ConvNext model)"),dso=l(),gp=a("li"),KK=a("strong"),cso=o("ctrl"),fso=o(" \u2014 "),pS=a("a"),mso=o("CTRLModel"),gso=o(" (CTRL model)"),hso=l(),hp=a("li"),ZK=a("strong"),pso=o("data2vec-audio"),_so=o(" \u2014 "),_S=a("a"),uso=o("Data2VecAudioModel"),bso=o(" (Data2VecAudio model)"),vso=l(),pp=a("li"),eZ=a("strong"),Tso=o("data2vec-text"),Fso=o(" \u2014 "),uS=a("a"),Cso=o("Data2VecTextModel"),Mso=o(" (Data2VecText model)"),Eso=l(),_p=a("li"),oZ=a("strong"),yso=o("deberta"),wso=o(" \u2014 "),bS=a("a"),Aso=o("DebertaModel"),Lso=o(" (DeBERTa model)"),Bso=l(),up=a("li"),rZ=a("strong"),xso=o("deberta-v2"),kso=o(" \u2014 "),vS=a("a"),Rso=o("DebertaV2Model"),Sso=o(" (DeBERTa-v2 model)"),Pso=l(),bp=a("li"),tZ=a("strong"),$so=o("deit"),Iso=o(" \u2014 "),TS=a("a"),jso=o("DeiTModel"),Nso=o(" (DeiT model)"),Dso=l(),vp=a("li"),aZ=a("strong"),qso=o("detr"),Gso=o(" \u2014 "),FS=a("a"),Oso=o("DetrModel"),Xso=o(" (DETR model)"),Vso=l(),Tp=a("li"),nZ=a("strong"),zso=o("distilbert"),Wso=o(" \u2014 "),CS=a("a"),Qso=o("DistilBertModel"),Hso=o(" (DistilBERT model)"),Uso=l(),Fp=a("li"),sZ=a("strong"),Jso=o("dpr"),Yso=o(" \u2014 "),MS=a("a"),Kso=o("DPRQuestionEncoder"),Zso=o(" (DPR model)"),elo=l(),Cp=a("li"),lZ=a("strong"),olo=o("electra"),rlo=o(" \u2014 "),ES=a("a"),tlo=o("ElectraModel"),alo=o(" (ELECTRA model)"),nlo=l(),Mp=a("li"),iZ=a("strong"),slo=o("flaubert"),llo=o(" \u2014 "),yS=a("a"),ilo=o("FlaubertModel"),dlo=o(" (FlauBERT model)"),clo=l(),Ep=a("li"),dZ=a("strong"),flo=o("fnet"),mlo=o(" \u2014 "),wS=a("a"),glo=o("FNetModel"),hlo=o(" (FNet model)"),plo=l(),yp=a("li"),cZ=a("strong"),_lo=o("fsmt"),ulo=o(" \u2014 "),AS=a("a"),blo=o("FSMTModel"),vlo=o(" (FairSeq Machine-Translation model)"),Tlo=l(),Vs=a("li"),fZ=a("strong"),Flo=o("funnel"),Clo=o(" \u2014 "),LS=a("a"),Mlo=o("FunnelModel"),Elo=o(" or "),BS=a("a"),ylo=o("FunnelBaseModel"),wlo=o(" (Funnel Transformer model)"),Alo=l(),wp=a("li"),mZ=a("strong"),Llo=o("glpn"),Blo=o(" \u2014 "),xS=a("a"),xlo=o("GLPNModel"),klo=o(" (GLPN model)"),Rlo=l(),Ap=a("li"),gZ=a("strong"),Slo=o("gpt2"),Plo=o(" \u2014 "),kS=a("a"),$lo=o("GPT2Model"),Ilo=o(" (OpenAI GPT-2 model)"),jlo=l(),Lp=a("li"),hZ=a("strong"),Nlo=o("gpt_neo"),Dlo=o(" \u2014 "),RS=a("a"),qlo=o("GPTNeoModel"),Glo=o(" (GPT Neo model)"),Olo=l(),Bp=a("li"),pZ=a("strong"),Xlo=o("gptj"),Vlo=o(" \u2014 "),SS=a("a"),zlo=o("GPTJModel"),Wlo=o(" (GPT-J model)"),Qlo=l(),xp=a("li"),_Z=a("strong"),Hlo=o("hubert"),Ulo=o(" \u2014 "),PS=a("a"),Jlo=o("HubertModel"),Ylo=o(" (Hubert model)"),Klo=l(),kp=a("li"),uZ=a("strong"),Zlo=o("ibert"),eio=o(" \u2014 "),$S=a("a"),oio=o("IBertModel"),rio=o(" (I-BERT model)"),tio=l(),Rp=a("li"),bZ=a("strong"),aio=o("imagegpt"),nio=o(" \u2014 "),IS=a("a"),sio=o("ImageGPTModel"),lio=o(" (ImageGPT model)"),iio=l(),Sp=a("li"),vZ=a("strong"),dio=o("layoutlm"),cio=o(" \u2014 "),jS=a("a"),fio=o("LayoutLMModel"),mio=o(" (LayoutLM model)"),gio=l(),Pp=a("li"),TZ=a("strong"),hio=o("layoutlmv2"),pio=o(" \u2014 "),NS=a("a"),_io=o("LayoutLMv2Model"),uio=o(" (LayoutLMv2 model)"),bio=l(),$p=a("li"),FZ=a("strong"),vio=o("led"),Tio=o(" \u2014 "),DS=a("a"),Fio=o("LEDModel"),Cio=o(" (LED model)"),Mio=l(),Ip=a("li"),CZ=a("strong"),Eio=o("longformer"),yio=o(" \u2014 "),qS=a("a"),wio=o("LongformerModel"),Aio=o(" (Longformer model)"),Lio=l(),jp=a("li"),MZ=a("strong"),Bio=o("luke"),xio=o(" \u2014 "),GS=a("a"),kio=o("LukeModel"),Rio=o(" (LUKE model)"),Sio=l(),Np=a("li"),EZ=a("strong"),Pio=o("lxmert"),$io=o(" \u2014 "),OS=a("a"),Iio=o("LxmertModel"),jio=o(" (LXMERT model)"),Nio=l(),Dp=a("li"),yZ=a("strong"),Dio=o("m2m_100"),qio=o(" \u2014 "),XS=a("a"),Gio=o("M2M100Model"),Oio=o(" (M2M100 model)"),Xio=l(),qp=a("li"),wZ=a("strong"),Vio=o("marian"),zio=o(" \u2014 "),VS=a("a"),Wio=o("MarianModel"),Qio=o(" (Marian model)"),Hio=l(),Gp=a("li"),AZ=a("strong"),Uio=o("maskformer"),Jio=o(" \u2014 "),zS=a("a"),Yio=o("MaskFormerModel"),Kio=o(" (MaskFormer model)"),Zio=l(),Op=a("li"),LZ=a("strong"),edo=o("mbart"),odo=o(" \u2014 "),WS=a("a"),rdo=o("MBartModel"),tdo=o(" (mBART model)"),ado=l(),Xp=a("li"),BZ=a("strong"),ndo=o("megatron-bert"),sdo=o(" \u2014 "),QS=a("a"),ldo=o("MegatronBertModel"),ido=o(" (MegatronBert model)"),ddo=l(),Vp=a("li"),xZ=a("strong"),cdo=o("mobilebert"),fdo=o(" \u2014 "),HS=a("a"),mdo=o("MobileBertModel"),gdo=o(" (MobileBERT model)"),hdo=l(),zp=a("li"),kZ=a("strong"),pdo=o("mpnet"),_do=o(" \u2014 "),US=a("a"),udo=o("MPNetModel"),bdo=o(" (MPNet model)"),vdo=l(),Wp=a("li"),RZ=a("strong"),Tdo=o("mt5"),Fdo=o(" \u2014 "),JS=a("a"),Cdo=o("MT5Model"),Mdo=o(" (mT5 model)"),Edo=l(),Qp=a("li"),SZ=a("strong"),ydo=o("nystromformer"),wdo=o(" \u2014 "),YS=a("a"),Ado=o("NystromformerModel"),Ldo=o(" (Nystromformer model)"),Bdo=l(),Hp=a("li"),PZ=a("strong"),xdo=o("openai-gpt"),kdo=o(" \u2014 "),KS=a("a"),Rdo=o("OpenAIGPTModel"),Sdo=o(" (OpenAI GPT model)"),Pdo=l(),Up=a("li"),$Z=a("strong"),$do=o("pegasus"),Ido=o(" \u2014 "),ZS=a("a"),jdo=o("PegasusModel"),Ndo=o(" (Pegasus model)"),Ddo=l(),Jp=a("li"),IZ=a("strong"),qdo=o("perceiver"),Gdo=o(" \u2014 "),eP=a("a"),Odo=o("PerceiverModel"),Xdo=o(" (Perceiver model)"),Vdo=l(),Yp=a("li"),jZ=a("strong"),zdo=o("plbart"),Wdo=o(" \u2014 "),oP=a("a"),Qdo=o("PLBartModel"),Hdo=o(" (PLBart model)"),Udo=l(),Kp=a("li"),NZ=a("strong"),Jdo=o("poolformer"),Ydo=o(" \u2014 "),rP=a("a"),Kdo=o("PoolFormerModel"),Zdo=o(" (PoolFormer model)"),eco=l(),Zp=a("li"),DZ=a("strong"),oco=o("prophetnet"),rco=o(" \u2014 "),tP=a("a"),tco=o("ProphetNetModel"),aco=o(" (ProphetNet model)"),nco=l(),e_=a("li"),qZ=a("strong"),sco=o("qdqbert"),lco=o(" \u2014 "),aP=a("a"),ico=o("QDQBertModel"),dco=o(" (QDQBert model)"),cco=l(),o_=a("li"),GZ=a("strong"),fco=o("reformer"),mco=o(" \u2014 "),nP=a("a"),gco=o("ReformerModel"),hco=o(" (Reformer model)"),pco=l(),r_=a("li"),OZ=a("strong"),_co=o("rembert"),uco=o(" \u2014 "),sP=a("a"),bco=o("RemBertModel"),vco=o(" (RemBERT model)"),Tco=l(),t_=a("li"),XZ=a("strong"),Fco=o("resnet"),Cco=o(" \u2014 "),lP=a("a"),Mco=o("ResNetModel"),Eco=o(" (ResNet model)"),yco=l(),a_=a("li"),VZ=a("strong"),wco=o("retribert"),Aco=o(" \u2014 "),iP=a("a"),Lco=o("RetriBertModel"),Bco=o(" (RetriBERT model)"),xco=l(),n_=a("li"),zZ=a("strong"),kco=o("roberta"),Rco=o(" \u2014 "),dP=a("a"),Sco=o("RobertaModel"),Pco=o(" (RoBERTa model)"),$co=l(),s_=a("li"),WZ=a("strong"),Ico=o("roformer"),jco=o(" \u2014 "),cP=a("a"),Nco=o("RoFormerModel"),Dco=o(" (RoFormer model)"),qco=l(),l_=a("li"),QZ=a("strong"),Gco=o("segformer"),Oco=o(" \u2014 "),fP=a("a"),Xco=o("SegformerModel"),Vco=o(" (SegFormer model)"),zco=l(),i_=a("li"),HZ=a("strong"),Wco=o("sew"),Qco=o(" \u2014 "),mP=a("a"),Hco=o("SEWModel"),Uco=o(" (SEW model)"),Jco=l(),d_=a("li"),UZ=a("strong"),Yco=o("sew-d"),Kco=o(" \u2014 "),gP=a("a"),Zco=o("SEWDModel"),efo=o(" (SEW-D model)"),ofo=l(),c_=a("li"),JZ=a("strong"),rfo=o("speech_to_text"),tfo=o(" \u2014 "),hP=a("a"),afo=o("Speech2TextModel"),nfo=o(" (Speech2Text model)"),sfo=l(),f_=a("li"),YZ=a("strong"),lfo=o("splinter"),ifo=o(" \u2014 "),pP=a("a"),dfo=o("SplinterModel"),cfo=o(" (Splinter model)"),ffo=l(),m_=a("li"),KZ=a("strong"),mfo=o("squeezebert"),gfo=o(" \u2014 "),_P=a("a"),hfo=o("SqueezeBertModel"),pfo=o(" (SqueezeBERT model)"),_fo=l(),g_=a("li"),ZZ=a("strong"),ufo=o("swin"),bfo=o(" \u2014 "),uP=a("a"),vfo=o("SwinModel"),Tfo=o(" (Swin model)"),Ffo=l(),h_=a("li"),eee=a("strong"),Cfo=o("t5"),Mfo=o(" \u2014 "),bP=a("a"),Efo=o("T5Model"),yfo=o(" (T5 model)"),wfo=l(),p_=a("li"),oee=a("strong"),Afo=o("tapas"),Lfo=o(" \u2014 "),vP=a("a"),Bfo=o("TapasModel"),xfo=o(" (TAPAS model)"),kfo=l(),__=a("li"),ree=a("strong"),Rfo=o("transfo-xl"),Sfo=o(" \u2014 "),TP=a("a"),Pfo=o("TransfoXLModel"),$fo=o(" (Transformer-XL model)"),Ifo=l(),u_=a("li"),tee=a("strong"),jfo=o("unispeech"),Nfo=o(" \u2014 "),FP=a("a"),Dfo=o("UniSpeechModel"),qfo=o(" (UniSpeech model)"),Gfo=l(),b_=a("li"),aee=a("strong"),Ofo=o("unispeech-sat"),Xfo=o(" \u2014 "),CP=a("a"),Vfo=o("UniSpeechSatModel"),zfo=o(" (UniSpeechSat model)"),Wfo=l(),v_=a("li"),nee=a("strong"),Qfo=o("van"),Hfo=o(" \u2014 "),MP=a("a"),Ufo=o("VanModel"),Jfo=o(" (VAN model)"),Yfo=l(),T_=a("li"),see=a("strong"),Kfo=o("vilt"),Zfo=o(" \u2014 "),EP=a("a"),emo=o("ViltModel"),omo=o(" (ViLT model)"),rmo=l(),F_=a("li"),lee=a("strong"),tmo=o("vision-text-dual-encoder"),amo=o(" \u2014 "),yP=a("a"),nmo=o("VisionTextDualEncoderModel"),smo=o(" (VisionTextDualEncoder model)"),lmo=l(),C_=a("li"),iee=a("strong"),imo=o("visual_bert"),dmo=o(" \u2014 "),wP=a("a"),cmo=o("VisualBertModel"),fmo=o(" (VisualBert model)"),mmo=l(),M_=a("li"),dee=a("strong"),gmo=o("vit"),hmo=o(" \u2014 "),AP=a("a"),pmo=o("ViTModel"),_mo=o(" (ViT model)"),umo=l(),E_=a("li"),cee=a("strong"),bmo=o("vit_mae"),vmo=o(" \u2014 "),LP=a("a"),Tmo=o("ViTMAEModel"),Fmo=o(" (ViTMAE model)"),Cmo=l(),y_=a("li"),fee=a("strong"),Mmo=o("wav2vec2"),Emo=o(" \u2014 "),BP=a("a"),ymo=o("Wav2Vec2Model"),wmo=o(" (Wav2Vec2 model)"),Amo=l(),w_=a("li"),mee=a("strong"),Lmo=o("wavlm"),Bmo=o(" \u2014 "),xP=a("a"),xmo=o("WavLMModel"),kmo=o(" (WavLM model)"),Rmo=l(),A_=a("li"),gee=a("strong"),Smo=o("xglm"),Pmo=o(" \u2014 "),kP=a("a"),$mo=o("XGLMModel"),Imo=o(" (XGLM model)"),jmo=l(),L_=a("li"),hee=a("strong"),Nmo=o("xlm"),Dmo=o(" \u2014 "),RP=a("a"),qmo=o("XLMModel"),Gmo=o(" (XLM model)"),Omo=l(),B_=a("li"),pee=a("strong"),Xmo=o("xlm-prophetnet"),Vmo=o(" \u2014 "),SP=a("a"),zmo=o("XLMProphetNetModel"),Wmo=o(" (XLMProphetNet model)"),Qmo=l(),x_=a("li"),_ee=a("strong"),Hmo=o("xlm-roberta"),Umo=o(" \u2014 "),PP=a("a"),Jmo=o("XLMRobertaModel"),Ymo=o(" (XLM-RoBERTa model)"),Kmo=l(),k_=a("li"),uee=a("strong"),Zmo=o("xlm-roberta-xl"),ego=o(" \u2014 "),$P=a("a"),ogo=o("XLMRobertaXLModel"),rgo=o(" (XLM-RoBERTa-XL model)"),tgo=l(),R_=a("li"),bee=a("strong"),ago=o("xlnet"),ngo=o(" \u2014 "),IP=a("a"),sgo=o("XLNetModel"),lgo=o(" (XLNet model)"),igo=l(),S_=a("li"),vee=a("strong"),dgo=o("yoso"),cgo=o(" \u2014 "),jP=a("a"),fgo=o("YosoModel"),mgo=o(" (YOSO model)"),ggo=l(),P_=a("p"),hgo=o("The model is set in evaluation mode by default using "),Tee=a("code"),pgo=o("model.eval()"),_go=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fee=a("code"),ugo=o("model.train()"),bgo=l(),Cee=a("p"),vgo=o("Examples:"),Tgo=l(),f(rE.$$.fragment),Qke=l(),ld=a("h2"),$_=a("a"),Mee=a("span"),f(tE.$$.fragment),Fgo=l(),Eee=a("span"),Cgo=o("AutoModelForPreTraining"),Hke=l(),Ko=a("div"),f(aE.$$.fragment),Mgo=l(),id=a("p"),Ego=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),yee=a("code"),ygo=o("from_pretrained()"),wgo=o("class method or the "),wee=a("code"),Ago=o("from_config()"),Lgo=o(`class
method.`),Bgo=l(),nE=a("p"),xgo=o("This class cannot be instantiated directly using "),Aee=a("code"),kgo=o("__init__()"),Rgo=o(" (throws an error)."),Sgo=l(),Qr=a("div"),f(sE.$$.fragment),Pgo=l(),Lee=a("p"),$go=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Igo=l(),dd=a("p"),jgo=o(`Note:
Loading a model from its configuration file does `),Bee=a("strong"),Ngo=o("not"),Dgo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xee=a("code"),qgo=o("from_pretrained()"),Ggo=o("to load the model weights."),Ogo=l(),kee=a("p"),Xgo=o("Examples:"),Vgo=l(),f(lE.$$.fragment),zgo=l(),De=a("div"),f(iE.$$.fragment),Wgo=l(),Ree=a("p"),Qgo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Hgo=l(),Ua=a("p"),Ugo=o("The model class to instantiate is selected based on the "),See=a("code"),Jgo=o("model_type"),Ygo=o(` property of the config object (either
passed as an argument or loaded from `),Pee=a("code"),Kgo=o("pretrained_model_name_or_path"),Zgo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ee=a("code"),eho=o("pretrained_model_name_or_path"),oho=o(":"),rho=l(),k=a("ul"),I_=a("li"),Iee=a("strong"),tho=o("albert"),aho=o(" \u2014 "),NP=a("a"),nho=o("AlbertForPreTraining"),sho=o(" (ALBERT model)"),lho=l(),j_=a("li"),jee=a("strong"),iho=o("bart"),dho=o(" \u2014 "),DP=a("a"),cho=o("BartForConditionalGeneration"),fho=o(" (BART model)"),mho=l(),N_=a("li"),Nee=a("strong"),gho=o("bert"),hho=o(" \u2014 "),qP=a("a"),pho=o("BertForPreTraining"),_ho=o(" (BERT model)"),uho=l(),D_=a("li"),Dee=a("strong"),bho=o("big_bird"),vho=o(" \u2014 "),GP=a("a"),Tho=o("BigBirdForPreTraining"),Fho=o(" (BigBird model)"),Cho=l(),q_=a("li"),qee=a("strong"),Mho=o("camembert"),Eho=o(" \u2014 "),OP=a("a"),yho=o("CamembertForMaskedLM"),who=o(" (CamemBERT model)"),Aho=l(),G_=a("li"),Gee=a("strong"),Lho=o("ctrl"),Bho=o(" \u2014 "),XP=a("a"),xho=o("CTRLLMHeadModel"),kho=o(" (CTRL model)"),Rho=l(),O_=a("li"),Oee=a("strong"),Sho=o("data2vec-text"),Pho=o(" \u2014 "),VP=a("a"),$ho=o("Data2VecTextForMaskedLM"),Iho=o(" (Data2VecText model)"),jho=l(),X_=a("li"),Xee=a("strong"),Nho=o("deberta"),Dho=o(" \u2014 "),zP=a("a"),qho=o("DebertaForMaskedLM"),Gho=o(" (DeBERTa model)"),Oho=l(),V_=a("li"),Vee=a("strong"),Xho=o("deberta-v2"),Vho=o(" \u2014 "),WP=a("a"),zho=o("DebertaV2ForMaskedLM"),Who=o(" (DeBERTa-v2 model)"),Qho=l(),z_=a("li"),zee=a("strong"),Hho=o("distilbert"),Uho=o(" \u2014 "),QP=a("a"),Jho=o("DistilBertForMaskedLM"),Yho=o(" (DistilBERT model)"),Kho=l(),W_=a("li"),Wee=a("strong"),Zho=o("electra"),epo=o(" \u2014 "),HP=a("a"),opo=o("ElectraForPreTraining"),rpo=o(" (ELECTRA model)"),tpo=l(),Q_=a("li"),Qee=a("strong"),apo=o("flaubert"),npo=o(" \u2014 "),UP=a("a"),spo=o("FlaubertWithLMHeadModel"),lpo=o(" (FlauBERT model)"),ipo=l(),H_=a("li"),Hee=a("strong"),dpo=o("fnet"),cpo=o(" \u2014 "),JP=a("a"),fpo=o("FNetForPreTraining"),mpo=o(" (FNet model)"),gpo=l(),U_=a("li"),Uee=a("strong"),hpo=o("fsmt"),ppo=o(" \u2014 "),YP=a("a"),_po=o("FSMTForConditionalGeneration"),upo=o(" (FairSeq Machine-Translation model)"),bpo=l(),J_=a("li"),Jee=a("strong"),vpo=o("funnel"),Tpo=o(" \u2014 "),KP=a("a"),Fpo=o("FunnelForPreTraining"),Cpo=o(" (Funnel Transformer model)"),Mpo=l(),Y_=a("li"),Yee=a("strong"),Epo=o("gpt2"),ypo=o(" \u2014 "),ZP=a("a"),wpo=o("GPT2LMHeadModel"),Apo=o(" (OpenAI GPT-2 model)"),Lpo=l(),K_=a("li"),Kee=a("strong"),Bpo=o("ibert"),xpo=o(" \u2014 "),e$=a("a"),kpo=o("IBertForMaskedLM"),Rpo=o(" (I-BERT model)"),Spo=l(),Z_=a("li"),Zee=a("strong"),Ppo=o("layoutlm"),$po=o(" \u2014 "),o$=a("a"),Ipo=o("LayoutLMForMaskedLM"),jpo=o(" (LayoutLM model)"),Npo=l(),eu=a("li"),eoe=a("strong"),Dpo=o("longformer"),qpo=o(" \u2014 "),r$=a("a"),Gpo=o("LongformerForMaskedLM"),Opo=o(" (Longformer model)"),Xpo=l(),ou=a("li"),ooe=a("strong"),Vpo=o("lxmert"),zpo=o(" \u2014 "),t$=a("a"),Wpo=o("LxmertForPreTraining"),Qpo=o(" (LXMERT model)"),Hpo=l(),ru=a("li"),roe=a("strong"),Upo=o("megatron-bert"),Jpo=o(" \u2014 "),a$=a("a"),Ypo=o("MegatronBertForPreTraining"),Kpo=o(" (MegatronBert model)"),Zpo=l(),tu=a("li"),toe=a("strong"),e_o=o("mobilebert"),o_o=o(" \u2014 "),n$=a("a"),r_o=o("MobileBertForPreTraining"),t_o=o(" (MobileBERT model)"),a_o=l(),au=a("li"),aoe=a("strong"),n_o=o("mpnet"),s_o=o(" \u2014 "),s$=a("a"),l_o=o("MPNetForMaskedLM"),i_o=o(" (MPNet model)"),d_o=l(),nu=a("li"),noe=a("strong"),c_o=o("openai-gpt"),f_o=o(" \u2014 "),l$=a("a"),m_o=o("OpenAIGPTLMHeadModel"),g_o=o(" (OpenAI GPT model)"),h_o=l(),su=a("li"),soe=a("strong"),p_o=o("retribert"),__o=o(" \u2014 "),i$=a("a"),u_o=o("RetriBertModel"),b_o=o(" (RetriBERT model)"),v_o=l(),lu=a("li"),loe=a("strong"),T_o=o("roberta"),F_o=o(" \u2014 "),d$=a("a"),C_o=o("RobertaForMaskedLM"),M_o=o(" (RoBERTa model)"),E_o=l(),iu=a("li"),ioe=a("strong"),y_o=o("squeezebert"),w_o=o(" \u2014 "),c$=a("a"),A_o=o("SqueezeBertForMaskedLM"),L_o=o(" (SqueezeBERT model)"),B_o=l(),du=a("li"),doe=a("strong"),x_o=o("t5"),k_o=o(" \u2014 "),f$=a("a"),R_o=o("T5ForConditionalGeneration"),S_o=o(" (T5 model)"),P_o=l(),cu=a("li"),coe=a("strong"),$_o=o("tapas"),I_o=o(" \u2014 "),m$=a("a"),j_o=o("TapasForMaskedLM"),N_o=o(" (TAPAS model)"),D_o=l(),fu=a("li"),foe=a("strong"),q_o=o("transfo-xl"),G_o=o(" \u2014 "),g$=a("a"),O_o=o("TransfoXLLMHeadModel"),X_o=o(" (Transformer-XL model)"),V_o=l(),mu=a("li"),moe=a("strong"),z_o=o("unispeech"),W_o=o(" \u2014 "),h$=a("a"),Q_o=o("UniSpeechForPreTraining"),H_o=o(" (UniSpeech model)"),U_o=l(),gu=a("li"),goe=a("strong"),J_o=o("unispeech-sat"),Y_o=o(" \u2014 "),p$=a("a"),K_o=o("UniSpeechSatForPreTraining"),Z_o=o(" (UniSpeechSat model)"),euo=l(),hu=a("li"),hoe=a("strong"),ouo=o("visual_bert"),ruo=o(" \u2014 "),_$=a("a"),tuo=o("VisualBertForPreTraining"),auo=o(" (VisualBert model)"),nuo=l(),pu=a("li"),poe=a("strong"),suo=o("vit_mae"),luo=o(" \u2014 "),u$=a("a"),iuo=o("ViTMAEForPreTraining"),duo=o(" (ViTMAE model)"),cuo=l(),_u=a("li"),_oe=a("strong"),fuo=o("wav2vec2"),muo=o(" \u2014 "),b$=a("a"),guo=o("Wav2Vec2ForPreTraining"),huo=o(" (Wav2Vec2 model)"),puo=l(),uu=a("li"),uoe=a("strong"),_uo=o("xlm"),uuo=o(" \u2014 "),v$=a("a"),buo=o("XLMWithLMHeadModel"),vuo=o(" (XLM model)"),Tuo=l(),bu=a("li"),boe=a("strong"),Fuo=o("xlm-roberta"),Cuo=o(" \u2014 "),T$=a("a"),Muo=o("XLMRobertaForMaskedLM"),Euo=o(" (XLM-RoBERTa model)"),yuo=l(),vu=a("li"),voe=a("strong"),wuo=o("xlm-roberta-xl"),Auo=o(" \u2014 "),F$=a("a"),Luo=o("XLMRobertaXLForMaskedLM"),Buo=o(" (XLM-RoBERTa-XL model)"),xuo=l(),Tu=a("li"),Toe=a("strong"),kuo=o("xlnet"),Ruo=o(" \u2014 "),C$=a("a"),Suo=o("XLNetLMHeadModel"),Puo=o(" (XLNet model)"),$uo=l(),Fu=a("p"),Iuo=o("The model is set in evaluation mode by default using "),Foe=a("code"),juo=o("model.eval()"),Nuo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Coe=a("code"),Duo=o("model.train()"),quo=l(),Moe=a("p"),Guo=o("Examples:"),Ouo=l(),f(dE.$$.fragment),Uke=l(),cd=a("h2"),Cu=a("a"),Eoe=a("span"),f(cE.$$.fragment),Xuo=l(),yoe=a("span"),Vuo=o("AutoModelForCausalLM"),Jke=l(),Zo=a("div"),f(fE.$$.fragment),zuo=l(),fd=a("p"),Wuo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),woe=a("code"),Quo=o("from_pretrained()"),Huo=o("class method or the "),Aoe=a("code"),Uuo=o("from_config()"),Juo=o(`class
method.`),Yuo=l(),mE=a("p"),Kuo=o("This class cannot be instantiated directly using "),Loe=a("code"),Zuo=o("__init__()"),e1o=o(" (throws an error)."),o1o=l(),Hr=a("div"),f(gE.$$.fragment),r1o=l(),Boe=a("p"),t1o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),a1o=l(),md=a("p"),n1o=o(`Note:
Loading a model from its configuration file does `),xoe=a("strong"),s1o=o("not"),l1o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),koe=a("code"),i1o=o("from_pretrained()"),d1o=o("to load the model weights."),c1o=l(),Roe=a("p"),f1o=o("Examples:"),m1o=l(),f(hE.$$.fragment),g1o=l(),qe=a("div"),f(pE.$$.fragment),h1o=l(),Soe=a("p"),p1o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),_1o=l(),Ja=a("p"),u1o=o("The model class to instantiate is selected based on the "),Poe=a("code"),b1o=o("model_type"),v1o=o(` property of the config object (either
passed as an argument or loaded from `),$oe=a("code"),T1o=o("pretrained_model_name_or_path"),F1o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ioe=a("code"),C1o=o("pretrained_model_name_or_path"),M1o=o(":"),E1o=l(),$=a("ul"),Mu=a("li"),joe=a("strong"),y1o=o("bart"),w1o=o(" \u2014 "),M$=a("a"),A1o=o("BartForCausalLM"),L1o=o(" (BART model)"),B1o=l(),Eu=a("li"),Noe=a("strong"),x1o=o("bert"),k1o=o(" \u2014 "),E$=a("a"),R1o=o("BertLMHeadModel"),S1o=o(" (BERT model)"),P1o=l(),yu=a("li"),Doe=a("strong"),$1o=o("bert-generation"),I1o=o(" \u2014 "),y$=a("a"),j1o=o("BertGenerationDecoder"),N1o=o(" (Bert Generation model)"),D1o=l(),wu=a("li"),qoe=a("strong"),q1o=o("big_bird"),G1o=o(" \u2014 "),w$=a("a"),O1o=o("BigBirdForCausalLM"),X1o=o(" (BigBird model)"),V1o=l(),Au=a("li"),Goe=a("strong"),z1o=o("bigbird_pegasus"),W1o=o(" \u2014 "),A$=a("a"),Q1o=o("BigBirdPegasusForCausalLM"),H1o=o(" (BigBirdPegasus model)"),U1o=l(),Lu=a("li"),Ooe=a("strong"),J1o=o("blenderbot"),Y1o=o(" \u2014 "),L$=a("a"),K1o=o("BlenderbotForCausalLM"),Z1o=o(" (Blenderbot model)"),ebo=l(),Bu=a("li"),Xoe=a("strong"),obo=o("blenderbot-small"),rbo=o(" \u2014 "),B$=a("a"),tbo=o("BlenderbotSmallForCausalLM"),abo=o(" (BlenderbotSmall model)"),nbo=l(),xu=a("li"),Voe=a("strong"),sbo=o("camembert"),lbo=o(" \u2014 "),x$=a("a"),ibo=o("CamembertForCausalLM"),dbo=o(" (CamemBERT model)"),cbo=l(),ku=a("li"),zoe=a("strong"),fbo=o("ctrl"),mbo=o(" \u2014 "),k$=a("a"),gbo=o("CTRLLMHeadModel"),hbo=o(" (CTRL model)"),pbo=l(),Ru=a("li"),Woe=a("strong"),_bo=o("data2vec-text"),ubo=o(" \u2014 "),R$=a("a"),bbo=o("Data2VecTextForCausalLM"),vbo=o(" (Data2VecText model)"),Tbo=l(),Su=a("li"),Qoe=a("strong"),Fbo=o("electra"),Cbo=o(" \u2014 "),S$=a("a"),Mbo=o("ElectraForCausalLM"),Ebo=o(" (ELECTRA model)"),ybo=l(),Pu=a("li"),Hoe=a("strong"),wbo=o("gpt2"),Abo=o(" \u2014 "),P$=a("a"),Lbo=o("GPT2LMHeadModel"),Bbo=o(" (OpenAI GPT-2 model)"),xbo=l(),$u=a("li"),Uoe=a("strong"),kbo=o("gpt_neo"),Rbo=o(" \u2014 "),$$=a("a"),Sbo=o("GPTNeoForCausalLM"),Pbo=o(" (GPT Neo model)"),$bo=l(),Iu=a("li"),Joe=a("strong"),Ibo=o("gptj"),jbo=o(" \u2014 "),I$=a("a"),Nbo=o("GPTJForCausalLM"),Dbo=o(" (GPT-J model)"),qbo=l(),ju=a("li"),Yoe=a("strong"),Gbo=o("marian"),Obo=o(" \u2014 "),j$=a("a"),Xbo=o("MarianForCausalLM"),Vbo=o(" (Marian model)"),zbo=l(),Nu=a("li"),Koe=a("strong"),Wbo=o("mbart"),Qbo=o(" \u2014 "),N$=a("a"),Hbo=o("MBartForCausalLM"),Ubo=o(" (mBART model)"),Jbo=l(),Du=a("li"),Zoe=a("strong"),Ybo=o("megatron-bert"),Kbo=o(" \u2014 "),D$=a("a"),Zbo=o("MegatronBertForCausalLM"),e5o=o(" (MegatronBert model)"),o5o=l(),qu=a("li"),ere=a("strong"),r5o=o("openai-gpt"),t5o=o(" \u2014 "),q$=a("a"),a5o=o("OpenAIGPTLMHeadModel"),n5o=o(" (OpenAI GPT model)"),s5o=l(),Gu=a("li"),ore=a("strong"),l5o=o("pegasus"),i5o=o(" \u2014 "),G$=a("a"),d5o=o("PegasusForCausalLM"),c5o=o(" (Pegasus model)"),f5o=l(),Ou=a("li"),rre=a("strong"),m5o=o("plbart"),g5o=o(" \u2014 "),O$=a("a"),h5o=o("PLBartForCausalLM"),p5o=o(" (PLBart model)"),_5o=l(),Xu=a("li"),tre=a("strong"),u5o=o("prophetnet"),b5o=o(" \u2014 "),X$=a("a"),v5o=o("ProphetNetForCausalLM"),T5o=o(" (ProphetNet model)"),F5o=l(),Vu=a("li"),are=a("strong"),C5o=o("qdqbert"),M5o=o(" \u2014 "),V$=a("a"),E5o=o("QDQBertLMHeadModel"),y5o=o(" (QDQBert model)"),w5o=l(),zu=a("li"),nre=a("strong"),A5o=o("reformer"),L5o=o(" \u2014 "),z$=a("a"),B5o=o("ReformerModelWithLMHead"),x5o=o(" (Reformer model)"),k5o=l(),Wu=a("li"),sre=a("strong"),R5o=o("rembert"),S5o=o(" \u2014 "),W$=a("a"),P5o=o("RemBertForCausalLM"),$5o=o(" (RemBERT model)"),I5o=l(),Qu=a("li"),lre=a("strong"),j5o=o("roberta"),N5o=o(" \u2014 "),Q$=a("a"),D5o=o("RobertaForCausalLM"),q5o=o(" (RoBERTa model)"),G5o=l(),Hu=a("li"),ire=a("strong"),O5o=o("roformer"),X5o=o(" \u2014 "),H$=a("a"),V5o=o("RoFormerForCausalLM"),z5o=o(" (RoFormer model)"),W5o=l(),Uu=a("li"),dre=a("strong"),Q5o=o("speech_to_text_2"),H5o=o(" \u2014 "),U$=a("a"),U5o=o("Speech2Text2ForCausalLM"),J5o=o(" (Speech2Text2 model)"),Y5o=l(),Ju=a("li"),cre=a("strong"),K5o=o("transfo-xl"),Z5o=o(" \u2014 "),J$=a("a"),e2o=o("TransfoXLLMHeadModel"),o2o=o(" (Transformer-XL model)"),r2o=l(),Yu=a("li"),fre=a("strong"),t2o=o("trocr"),a2o=o(" \u2014 "),Y$=a("a"),n2o=o("TrOCRForCausalLM"),s2o=o(" (TrOCR model)"),l2o=l(),Ku=a("li"),mre=a("strong"),i2o=o("xglm"),d2o=o(" \u2014 "),K$=a("a"),c2o=o("XGLMForCausalLM"),f2o=o(" (XGLM model)"),m2o=l(),Zu=a("li"),gre=a("strong"),g2o=o("xlm"),h2o=o(" \u2014 "),Z$=a("a"),p2o=o("XLMWithLMHeadModel"),_2o=o(" (XLM model)"),u2o=l(),e1=a("li"),hre=a("strong"),b2o=o("xlm-prophetnet"),v2o=o(" \u2014 "),eI=a("a"),T2o=o("XLMProphetNetForCausalLM"),F2o=o(" (XLMProphetNet model)"),C2o=l(),o1=a("li"),pre=a("strong"),M2o=o("xlm-roberta"),E2o=o(" \u2014 "),oI=a("a"),y2o=o("XLMRobertaForCausalLM"),w2o=o(" (XLM-RoBERTa model)"),A2o=l(),r1=a("li"),_re=a("strong"),L2o=o("xlm-roberta-xl"),B2o=o(" \u2014 "),rI=a("a"),x2o=o("XLMRobertaXLForCausalLM"),k2o=o(" (XLM-RoBERTa-XL model)"),R2o=l(),t1=a("li"),ure=a("strong"),S2o=o("xlnet"),P2o=o(" \u2014 "),tI=a("a"),$2o=o("XLNetLMHeadModel"),I2o=o(" (XLNet model)"),j2o=l(),a1=a("p"),N2o=o("The model is set in evaluation mode by default using "),bre=a("code"),D2o=o("model.eval()"),q2o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vre=a("code"),G2o=o("model.train()"),O2o=l(),Tre=a("p"),X2o=o("Examples:"),V2o=l(),f(_E.$$.fragment),Yke=l(),gd=a("h2"),n1=a("a"),Fre=a("span"),f(uE.$$.fragment),z2o=l(),Cre=a("span"),W2o=o("AutoModelForMaskedLM"),Kke=l(),er=a("div"),f(bE.$$.fragment),Q2o=l(),hd=a("p"),H2o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Mre=a("code"),U2o=o("from_pretrained()"),J2o=o("class method or the "),Ere=a("code"),Y2o=o("from_config()"),K2o=o(`class
method.`),Z2o=l(),vE=a("p"),evo=o("This class cannot be instantiated directly using "),yre=a("code"),ovo=o("__init__()"),rvo=o(" (throws an error)."),tvo=l(),Ur=a("div"),f(TE.$$.fragment),avo=l(),wre=a("p"),nvo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),svo=l(),pd=a("p"),lvo=o(`Note:
Loading a model from its configuration file does `),Are=a("strong"),ivo=o("not"),dvo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lre=a("code"),cvo=o("from_pretrained()"),fvo=o("to load the model weights."),mvo=l(),Bre=a("p"),gvo=o("Examples:"),hvo=l(),f(FE.$$.fragment),pvo=l(),Ge=a("div"),f(CE.$$.fragment),_vo=l(),xre=a("p"),uvo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),bvo=l(),Ya=a("p"),vvo=o("The model class to instantiate is selected based on the "),kre=a("code"),Tvo=o("model_type"),Fvo=o(` property of the config object (either
passed as an argument or loaded from `),Rre=a("code"),Cvo=o("pretrained_model_name_or_path"),Mvo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sre=a("code"),Evo=o("pretrained_model_name_or_path"),yvo=o(":"),wvo=l(),I=a("ul"),s1=a("li"),Pre=a("strong"),Avo=o("albert"),Lvo=o(" \u2014 "),aI=a("a"),Bvo=o("AlbertForMaskedLM"),xvo=o(" (ALBERT model)"),kvo=l(),l1=a("li"),$re=a("strong"),Rvo=o("bart"),Svo=o(" \u2014 "),nI=a("a"),Pvo=o("BartForConditionalGeneration"),$vo=o(" (BART model)"),Ivo=l(),i1=a("li"),Ire=a("strong"),jvo=o("bert"),Nvo=o(" \u2014 "),sI=a("a"),Dvo=o("BertForMaskedLM"),qvo=o(" (BERT model)"),Gvo=l(),d1=a("li"),jre=a("strong"),Ovo=o("big_bird"),Xvo=o(" \u2014 "),lI=a("a"),Vvo=o("BigBirdForMaskedLM"),zvo=o(" (BigBird model)"),Wvo=l(),c1=a("li"),Nre=a("strong"),Qvo=o("camembert"),Hvo=o(" \u2014 "),iI=a("a"),Uvo=o("CamembertForMaskedLM"),Jvo=o(" (CamemBERT model)"),Yvo=l(),f1=a("li"),Dre=a("strong"),Kvo=o("convbert"),Zvo=o(" \u2014 "),dI=a("a"),e6o=o("ConvBertForMaskedLM"),o6o=o(" (ConvBERT model)"),r6o=l(),m1=a("li"),qre=a("strong"),t6o=o("data2vec-text"),a6o=o(" \u2014 "),cI=a("a"),n6o=o("Data2VecTextForMaskedLM"),s6o=o(" (Data2VecText model)"),l6o=l(),g1=a("li"),Gre=a("strong"),i6o=o("deberta"),d6o=o(" \u2014 "),fI=a("a"),c6o=o("DebertaForMaskedLM"),f6o=o(" (DeBERTa model)"),m6o=l(),h1=a("li"),Ore=a("strong"),g6o=o("deberta-v2"),h6o=o(" \u2014 "),mI=a("a"),p6o=o("DebertaV2ForMaskedLM"),_6o=o(" (DeBERTa-v2 model)"),u6o=l(),p1=a("li"),Xre=a("strong"),b6o=o("distilbert"),v6o=o(" \u2014 "),gI=a("a"),T6o=o("DistilBertForMaskedLM"),F6o=o(" (DistilBERT model)"),C6o=l(),_1=a("li"),Vre=a("strong"),M6o=o("electra"),E6o=o(" \u2014 "),hI=a("a"),y6o=o("ElectraForMaskedLM"),w6o=o(" (ELECTRA model)"),A6o=l(),u1=a("li"),zre=a("strong"),L6o=o("flaubert"),B6o=o(" \u2014 "),pI=a("a"),x6o=o("FlaubertWithLMHeadModel"),k6o=o(" (FlauBERT model)"),R6o=l(),b1=a("li"),Wre=a("strong"),S6o=o("fnet"),P6o=o(" \u2014 "),_I=a("a"),$6o=o("FNetForMaskedLM"),I6o=o(" (FNet model)"),j6o=l(),v1=a("li"),Qre=a("strong"),N6o=o("funnel"),D6o=o(" \u2014 "),uI=a("a"),q6o=o("FunnelForMaskedLM"),G6o=o(" (Funnel Transformer model)"),O6o=l(),T1=a("li"),Hre=a("strong"),X6o=o("ibert"),V6o=o(" \u2014 "),bI=a("a"),z6o=o("IBertForMaskedLM"),W6o=o(" (I-BERT model)"),Q6o=l(),F1=a("li"),Ure=a("strong"),H6o=o("layoutlm"),U6o=o(" \u2014 "),vI=a("a"),J6o=o("LayoutLMForMaskedLM"),Y6o=o(" (LayoutLM model)"),K6o=l(),C1=a("li"),Jre=a("strong"),Z6o=o("longformer"),e0o=o(" \u2014 "),TI=a("a"),o0o=o("LongformerForMaskedLM"),r0o=o(" (Longformer model)"),t0o=l(),M1=a("li"),Yre=a("strong"),a0o=o("mbart"),n0o=o(" \u2014 "),FI=a("a"),s0o=o("MBartForConditionalGeneration"),l0o=o(" (mBART model)"),i0o=l(),E1=a("li"),Kre=a("strong"),d0o=o("megatron-bert"),c0o=o(" \u2014 "),CI=a("a"),f0o=o("MegatronBertForMaskedLM"),m0o=o(" (MegatronBert model)"),g0o=l(),y1=a("li"),Zre=a("strong"),h0o=o("mobilebert"),p0o=o(" \u2014 "),MI=a("a"),_0o=o("MobileBertForMaskedLM"),u0o=o(" (MobileBERT model)"),b0o=l(),w1=a("li"),ete=a("strong"),v0o=o("mpnet"),T0o=o(" \u2014 "),EI=a("a"),F0o=o("MPNetForMaskedLM"),C0o=o(" (MPNet model)"),M0o=l(),A1=a("li"),ote=a("strong"),E0o=o("nystromformer"),y0o=o(" \u2014 "),yI=a("a"),w0o=o("NystromformerForMaskedLM"),A0o=o(" (Nystromformer model)"),L0o=l(),L1=a("li"),rte=a("strong"),B0o=o("perceiver"),x0o=o(" \u2014 "),wI=a("a"),k0o=o("PerceiverForMaskedLM"),R0o=o(" (Perceiver model)"),S0o=l(),B1=a("li"),tte=a("strong"),P0o=o("qdqbert"),$0o=o(" \u2014 "),AI=a("a"),I0o=o("QDQBertForMaskedLM"),j0o=o(" (QDQBert model)"),N0o=l(),x1=a("li"),ate=a("strong"),D0o=o("reformer"),q0o=o(" \u2014 "),LI=a("a"),G0o=o("ReformerForMaskedLM"),O0o=o(" (Reformer model)"),X0o=l(),k1=a("li"),nte=a("strong"),V0o=o("rembert"),z0o=o(" \u2014 "),BI=a("a"),W0o=o("RemBertForMaskedLM"),Q0o=o(" (RemBERT model)"),H0o=l(),R1=a("li"),ste=a("strong"),U0o=o("roberta"),J0o=o(" \u2014 "),xI=a("a"),Y0o=o("RobertaForMaskedLM"),K0o=o(" (RoBERTa model)"),Z0o=l(),S1=a("li"),lte=a("strong"),eTo=o("roformer"),oTo=o(" \u2014 "),kI=a("a"),rTo=o("RoFormerForMaskedLM"),tTo=o(" (RoFormer model)"),aTo=l(),P1=a("li"),ite=a("strong"),nTo=o("squeezebert"),sTo=o(" \u2014 "),RI=a("a"),lTo=o("SqueezeBertForMaskedLM"),iTo=o(" (SqueezeBERT model)"),dTo=l(),$1=a("li"),dte=a("strong"),cTo=o("tapas"),fTo=o(" \u2014 "),SI=a("a"),mTo=o("TapasForMaskedLM"),gTo=o(" (TAPAS model)"),hTo=l(),I1=a("li"),cte=a("strong"),pTo=o("wav2vec2"),_To=o(" \u2014 "),fte=a("code"),uTo=o("Wav2Vec2ForMaskedLM"),bTo=o("(Wav2Vec2 model)"),vTo=l(),j1=a("li"),mte=a("strong"),TTo=o("xlm"),FTo=o(" \u2014 "),PI=a("a"),CTo=o("XLMWithLMHeadModel"),MTo=o(" (XLM model)"),ETo=l(),N1=a("li"),gte=a("strong"),yTo=o("xlm-roberta"),wTo=o(" \u2014 "),$I=a("a"),ATo=o("XLMRobertaForMaskedLM"),LTo=o(" (XLM-RoBERTa model)"),BTo=l(),D1=a("li"),hte=a("strong"),xTo=o("xlm-roberta-xl"),kTo=o(" \u2014 "),II=a("a"),RTo=o("XLMRobertaXLForMaskedLM"),STo=o(" (XLM-RoBERTa-XL model)"),PTo=l(),q1=a("li"),pte=a("strong"),$To=o("yoso"),ITo=o(" \u2014 "),jI=a("a"),jTo=o("YosoForMaskedLM"),NTo=o(" (YOSO model)"),DTo=l(),G1=a("p"),qTo=o("The model is set in evaluation mode by default using "),_te=a("code"),GTo=o("model.eval()"),OTo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ute=a("code"),XTo=o("model.train()"),VTo=l(),bte=a("p"),zTo=o("Examples:"),WTo=l(),f(ME.$$.fragment),Zke=l(),_d=a("h2"),O1=a("a"),vte=a("span"),f(EE.$$.fragment),QTo=l(),Tte=a("span"),HTo=o("AutoModelForSeq2SeqLM"),eRe=l(),or=a("div"),f(yE.$$.fragment),UTo=l(),ud=a("p"),JTo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Fte=a("code"),YTo=o("from_pretrained()"),KTo=o("class method or the "),Cte=a("code"),ZTo=o("from_config()"),e8o=o(`class
method.`),o8o=l(),wE=a("p"),r8o=o("This class cannot be instantiated directly using "),Mte=a("code"),t8o=o("__init__()"),a8o=o(" (throws an error)."),n8o=l(),Jr=a("div"),f(AE.$$.fragment),s8o=l(),Ete=a("p"),l8o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),i8o=l(),bd=a("p"),d8o=o(`Note:
Loading a model from its configuration file does `),yte=a("strong"),c8o=o("not"),f8o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wte=a("code"),m8o=o("from_pretrained()"),g8o=o("to load the model weights."),h8o=l(),Ate=a("p"),p8o=o("Examples:"),_8o=l(),f(LE.$$.fragment),u8o=l(),Oe=a("div"),f(BE.$$.fragment),b8o=l(),Lte=a("p"),v8o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),T8o=l(),Ka=a("p"),F8o=o("The model class to instantiate is selected based on the "),Bte=a("code"),C8o=o("model_type"),M8o=o(` property of the config object (either
passed as an argument or loaded from `),xte=a("code"),E8o=o("pretrained_model_name_or_path"),y8o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kte=a("code"),w8o=o("pretrained_model_name_or_path"),A8o=o(":"),L8o=l(),se=a("ul"),X1=a("li"),Rte=a("strong"),B8o=o("bart"),x8o=o(" \u2014 "),NI=a("a"),k8o=o("BartForConditionalGeneration"),R8o=o(" (BART model)"),S8o=l(),V1=a("li"),Ste=a("strong"),P8o=o("bigbird_pegasus"),$8o=o(" \u2014 "),DI=a("a"),I8o=o("BigBirdPegasusForConditionalGeneration"),j8o=o(" (BigBirdPegasus model)"),N8o=l(),z1=a("li"),Pte=a("strong"),D8o=o("blenderbot"),q8o=o(" \u2014 "),qI=a("a"),G8o=o("BlenderbotForConditionalGeneration"),O8o=o(" (Blenderbot model)"),X8o=l(),W1=a("li"),$te=a("strong"),V8o=o("blenderbot-small"),z8o=o(" \u2014 "),GI=a("a"),W8o=o("BlenderbotSmallForConditionalGeneration"),Q8o=o(" (BlenderbotSmall model)"),H8o=l(),Q1=a("li"),Ite=a("strong"),U8o=o("encoder-decoder"),J8o=o(" \u2014 "),OI=a("a"),Y8o=o("EncoderDecoderModel"),K8o=o(" (Encoder decoder model)"),Z8o=l(),H1=a("li"),jte=a("strong"),eFo=o("fsmt"),oFo=o(" \u2014 "),XI=a("a"),rFo=o("FSMTForConditionalGeneration"),tFo=o(" (FairSeq Machine-Translation model)"),aFo=l(),U1=a("li"),Nte=a("strong"),nFo=o("led"),sFo=o(" \u2014 "),VI=a("a"),lFo=o("LEDForConditionalGeneration"),iFo=o(" (LED model)"),dFo=l(),J1=a("li"),Dte=a("strong"),cFo=o("m2m_100"),fFo=o(" \u2014 "),zI=a("a"),mFo=o("M2M100ForConditionalGeneration"),gFo=o(" (M2M100 model)"),hFo=l(),Y1=a("li"),qte=a("strong"),pFo=o("marian"),_Fo=o(" \u2014 "),WI=a("a"),uFo=o("MarianMTModel"),bFo=o(" (Marian model)"),vFo=l(),K1=a("li"),Gte=a("strong"),TFo=o("mbart"),FFo=o(" \u2014 "),QI=a("a"),CFo=o("MBartForConditionalGeneration"),MFo=o(" (mBART model)"),EFo=l(),Z1=a("li"),Ote=a("strong"),yFo=o("mt5"),wFo=o(" \u2014 "),HI=a("a"),AFo=o("MT5ForConditionalGeneration"),LFo=o(" (mT5 model)"),BFo=l(),eb=a("li"),Xte=a("strong"),xFo=o("pegasus"),kFo=o(" \u2014 "),UI=a("a"),RFo=o("PegasusForConditionalGeneration"),SFo=o(" (Pegasus model)"),PFo=l(),ob=a("li"),Vte=a("strong"),$Fo=o("plbart"),IFo=o(" \u2014 "),JI=a("a"),jFo=o("PLBartForConditionalGeneration"),NFo=o(" (PLBart model)"),DFo=l(),rb=a("li"),zte=a("strong"),qFo=o("prophetnet"),GFo=o(" \u2014 "),YI=a("a"),OFo=o("ProphetNetForConditionalGeneration"),XFo=o(" (ProphetNet model)"),VFo=l(),tb=a("li"),Wte=a("strong"),zFo=o("t5"),WFo=o(" \u2014 "),KI=a("a"),QFo=o("T5ForConditionalGeneration"),HFo=o(" (T5 model)"),UFo=l(),ab=a("li"),Qte=a("strong"),JFo=o("xlm-prophetnet"),YFo=o(" \u2014 "),ZI=a("a"),KFo=o("XLMProphetNetForConditionalGeneration"),ZFo=o(" (XLMProphetNet model)"),eCo=l(),nb=a("p"),oCo=o("The model is set in evaluation mode by default using "),Hte=a("code"),rCo=o("model.eval()"),tCo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ute=a("code"),aCo=o("model.train()"),nCo=l(),Jte=a("p"),sCo=o("Examples:"),lCo=l(),f(xE.$$.fragment),oRe=l(),vd=a("h2"),sb=a("a"),Yte=a("span"),f(kE.$$.fragment),iCo=l(),Kte=a("span"),dCo=o("AutoModelForSequenceClassification"),rRe=l(),rr=a("div"),f(RE.$$.fragment),cCo=l(),Td=a("p"),fCo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Zte=a("code"),mCo=o("from_pretrained()"),gCo=o("class method or the "),eae=a("code"),hCo=o("from_config()"),pCo=o(`class
method.`),_Co=l(),SE=a("p"),uCo=o("This class cannot be instantiated directly using "),oae=a("code"),bCo=o("__init__()"),vCo=o(" (throws an error)."),TCo=l(),Yr=a("div"),f(PE.$$.fragment),FCo=l(),rae=a("p"),CCo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),MCo=l(),Fd=a("p"),ECo=o(`Note:
Loading a model from its configuration file does `),tae=a("strong"),yCo=o("not"),wCo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aae=a("code"),ACo=o("from_pretrained()"),LCo=o("to load the model weights."),BCo=l(),nae=a("p"),xCo=o("Examples:"),kCo=l(),f($E.$$.fragment),RCo=l(),Xe=a("div"),f(IE.$$.fragment),SCo=l(),sae=a("p"),PCo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),$Co=l(),Za=a("p"),ICo=o("The model class to instantiate is selected based on the "),lae=a("code"),jCo=o("model_type"),NCo=o(` property of the config object (either
passed as an argument or loaded from `),iae=a("code"),DCo=o("pretrained_model_name_or_path"),qCo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dae=a("code"),GCo=o("pretrained_model_name_or_path"),OCo=o(":"),XCo=l(),A=a("ul"),lb=a("li"),cae=a("strong"),VCo=o("albert"),zCo=o(" \u2014 "),ej=a("a"),WCo=o("AlbertForSequenceClassification"),QCo=o(" (ALBERT model)"),HCo=l(),ib=a("li"),fae=a("strong"),UCo=o("bart"),JCo=o(" \u2014 "),oj=a("a"),YCo=o("BartForSequenceClassification"),KCo=o(" (BART model)"),ZCo=l(),db=a("li"),mae=a("strong"),eMo=o("bert"),oMo=o(" \u2014 "),rj=a("a"),rMo=o("BertForSequenceClassification"),tMo=o(" (BERT model)"),aMo=l(),cb=a("li"),gae=a("strong"),nMo=o("big_bird"),sMo=o(" \u2014 "),tj=a("a"),lMo=o("BigBirdForSequenceClassification"),iMo=o(" (BigBird model)"),dMo=l(),fb=a("li"),hae=a("strong"),cMo=o("bigbird_pegasus"),fMo=o(" \u2014 "),aj=a("a"),mMo=o("BigBirdPegasusForSequenceClassification"),gMo=o(" (BigBirdPegasus model)"),hMo=l(),mb=a("li"),pae=a("strong"),pMo=o("camembert"),_Mo=o(" \u2014 "),nj=a("a"),uMo=o("CamembertForSequenceClassification"),bMo=o(" (CamemBERT model)"),vMo=l(),gb=a("li"),_ae=a("strong"),TMo=o("canine"),FMo=o(" \u2014 "),sj=a("a"),CMo=o("CanineForSequenceClassification"),MMo=o(" (Canine model)"),EMo=l(),hb=a("li"),uae=a("strong"),yMo=o("convbert"),wMo=o(" \u2014 "),lj=a("a"),AMo=o("ConvBertForSequenceClassification"),LMo=o(" (ConvBERT model)"),BMo=l(),pb=a("li"),bae=a("strong"),xMo=o("ctrl"),kMo=o(" \u2014 "),ij=a("a"),RMo=o("CTRLForSequenceClassification"),SMo=o(" (CTRL model)"),PMo=l(),_b=a("li"),vae=a("strong"),$Mo=o("data2vec-text"),IMo=o(" \u2014 "),dj=a("a"),jMo=o("Data2VecTextForSequenceClassification"),NMo=o(" (Data2VecText model)"),DMo=l(),ub=a("li"),Tae=a("strong"),qMo=o("deberta"),GMo=o(" \u2014 "),cj=a("a"),OMo=o("DebertaForSequenceClassification"),XMo=o(" (DeBERTa model)"),VMo=l(),bb=a("li"),Fae=a("strong"),zMo=o("deberta-v2"),WMo=o(" \u2014 "),fj=a("a"),QMo=o("DebertaV2ForSequenceClassification"),HMo=o(" (DeBERTa-v2 model)"),UMo=l(),vb=a("li"),Cae=a("strong"),JMo=o("distilbert"),YMo=o(" \u2014 "),mj=a("a"),KMo=o("DistilBertForSequenceClassification"),ZMo=o(" (DistilBERT model)"),e4o=l(),Tb=a("li"),Mae=a("strong"),o4o=o("electra"),r4o=o(" \u2014 "),gj=a("a"),t4o=o("ElectraForSequenceClassification"),a4o=o(" (ELECTRA model)"),n4o=l(),Fb=a("li"),Eae=a("strong"),s4o=o("flaubert"),l4o=o(" \u2014 "),hj=a("a"),i4o=o("FlaubertForSequenceClassification"),d4o=o(" (FlauBERT model)"),c4o=l(),Cb=a("li"),yae=a("strong"),f4o=o("fnet"),m4o=o(" \u2014 "),pj=a("a"),g4o=o("FNetForSequenceClassification"),h4o=o(" (FNet model)"),p4o=l(),Mb=a("li"),wae=a("strong"),_4o=o("funnel"),u4o=o(" \u2014 "),_j=a("a"),b4o=o("FunnelForSequenceClassification"),v4o=o(" (Funnel Transformer model)"),T4o=l(),Eb=a("li"),Aae=a("strong"),F4o=o("gpt2"),C4o=o(" \u2014 "),uj=a("a"),M4o=o("GPT2ForSequenceClassification"),E4o=o(" (OpenAI GPT-2 model)"),y4o=l(),yb=a("li"),Lae=a("strong"),w4o=o("gpt_neo"),A4o=o(" \u2014 "),bj=a("a"),L4o=o("GPTNeoForSequenceClassification"),B4o=o(" (GPT Neo model)"),x4o=l(),wb=a("li"),Bae=a("strong"),k4o=o("gptj"),R4o=o(" \u2014 "),vj=a("a"),S4o=o("GPTJForSequenceClassification"),P4o=o(" (GPT-J model)"),$4o=l(),Ab=a("li"),xae=a("strong"),I4o=o("ibert"),j4o=o(" \u2014 "),Tj=a("a"),N4o=o("IBertForSequenceClassification"),D4o=o(" (I-BERT model)"),q4o=l(),Lb=a("li"),kae=a("strong"),G4o=o("layoutlm"),O4o=o(" \u2014 "),Fj=a("a"),X4o=o("LayoutLMForSequenceClassification"),V4o=o(" (LayoutLM model)"),z4o=l(),Bb=a("li"),Rae=a("strong"),W4o=o("layoutlmv2"),Q4o=o(" \u2014 "),Cj=a("a"),H4o=o("LayoutLMv2ForSequenceClassification"),U4o=o(" (LayoutLMv2 model)"),J4o=l(),xb=a("li"),Sae=a("strong"),Y4o=o("led"),K4o=o(" \u2014 "),Mj=a("a"),Z4o=o("LEDForSequenceClassification"),eEo=o(" (LED model)"),oEo=l(),kb=a("li"),Pae=a("strong"),rEo=o("longformer"),tEo=o(" \u2014 "),Ej=a("a"),aEo=o("LongformerForSequenceClassification"),nEo=o(" (Longformer model)"),sEo=l(),Rb=a("li"),$ae=a("strong"),lEo=o("mbart"),iEo=o(" \u2014 "),yj=a("a"),dEo=o("MBartForSequenceClassification"),cEo=o(" (mBART model)"),fEo=l(),Sb=a("li"),Iae=a("strong"),mEo=o("megatron-bert"),gEo=o(" \u2014 "),wj=a("a"),hEo=o("MegatronBertForSequenceClassification"),pEo=o(" (MegatronBert model)"),_Eo=l(),Pb=a("li"),jae=a("strong"),uEo=o("mobilebert"),bEo=o(" \u2014 "),Aj=a("a"),vEo=o("MobileBertForSequenceClassification"),TEo=o(" (MobileBERT model)"),FEo=l(),$b=a("li"),Nae=a("strong"),CEo=o("mpnet"),MEo=o(" \u2014 "),Lj=a("a"),EEo=o("MPNetForSequenceClassification"),yEo=o(" (MPNet model)"),wEo=l(),Ib=a("li"),Dae=a("strong"),AEo=o("nystromformer"),LEo=o(" \u2014 "),Bj=a("a"),BEo=o("NystromformerForSequenceClassification"),xEo=o(" (Nystromformer model)"),kEo=l(),jb=a("li"),qae=a("strong"),REo=o("openai-gpt"),SEo=o(" \u2014 "),xj=a("a"),PEo=o("OpenAIGPTForSequenceClassification"),$Eo=o(" (OpenAI GPT model)"),IEo=l(),Nb=a("li"),Gae=a("strong"),jEo=o("perceiver"),NEo=o(" \u2014 "),kj=a("a"),DEo=o("PerceiverForSequenceClassification"),qEo=o(" (Perceiver model)"),GEo=l(),Db=a("li"),Oae=a("strong"),OEo=o("plbart"),XEo=o(" \u2014 "),Rj=a("a"),VEo=o("PLBartForSequenceClassification"),zEo=o(" (PLBart model)"),WEo=l(),qb=a("li"),Xae=a("strong"),QEo=o("qdqbert"),HEo=o(" \u2014 "),Sj=a("a"),UEo=o("QDQBertForSequenceClassification"),JEo=o(" (QDQBert model)"),YEo=l(),Gb=a("li"),Vae=a("strong"),KEo=o("reformer"),ZEo=o(" \u2014 "),Pj=a("a"),e3o=o("ReformerForSequenceClassification"),o3o=o(" (Reformer model)"),r3o=l(),Ob=a("li"),zae=a("strong"),t3o=o("rembert"),a3o=o(" \u2014 "),$j=a("a"),n3o=o("RemBertForSequenceClassification"),s3o=o(" (RemBERT model)"),l3o=l(),Xb=a("li"),Wae=a("strong"),i3o=o("roberta"),d3o=o(" \u2014 "),Ij=a("a"),c3o=o("RobertaForSequenceClassification"),f3o=o(" (RoBERTa model)"),m3o=l(),Vb=a("li"),Qae=a("strong"),g3o=o("roformer"),h3o=o(" \u2014 "),jj=a("a"),p3o=o("RoFormerForSequenceClassification"),_3o=o(" (RoFormer model)"),u3o=l(),zb=a("li"),Hae=a("strong"),b3o=o("squeezebert"),v3o=o(" \u2014 "),Nj=a("a"),T3o=o("SqueezeBertForSequenceClassification"),F3o=o(" (SqueezeBERT model)"),C3o=l(),Wb=a("li"),Uae=a("strong"),M3o=o("tapas"),E3o=o(" \u2014 "),Dj=a("a"),y3o=o("TapasForSequenceClassification"),w3o=o(" (TAPAS model)"),A3o=l(),Qb=a("li"),Jae=a("strong"),L3o=o("transfo-xl"),B3o=o(" \u2014 "),qj=a("a"),x3o=o("TransfoXLForSequenceClassification"),k3o=o(" (Transformer-XL model)"),R3o=l(),Hb=a("li"),Yae=a("strong"),S3o=o("xlm"),P3o=o(" \u2014 "),Gj=a("a"),$3o=o("XLMForSequenceClassification"),I3o=o(" (XLM model)"),j3o=l(),Ub=a("li"),Kae=a("strong"),N3o=o("xlm-roberta"),D3o=o(" \u2014 "),Oj=a("a"),q3o=o("XLMRobertaForSequenceClassification"),G3o=o(" (XLM-RoBERTa model)"),O3o=l(),Jb=a("li"),Zae=a("strong"),X3o=o("xlm-roberta-xl"),V3o=o(" \u2014 "),Xj=a("a"),z3o=o("XLMRobertaXLForSequenceClassification"),W3o=o(" (XLM-RoBERTa-XL model)"),Q3o=l(),Yb=a("li"),ene=a("strong"),H3o=o("xlnet"),U3o=o(" \u2014 "),Vj=a("a"),J3o=o("XLNetForSequenceClassification"),Y3o=o(" (XLNet model)"),K3o=l(),Kb=a("li"),one=a("strong"),Z3o=o("yoso"),eyo=o(" \u2014 "),zj=a("a"),oyo=o("YosoForSequenceClassification"),ryo=o(" (YOSO model)"),tyo=l(),Zb=a("p"),ayo=o("The model is set in evaluation mode by default using "),rne=a("code"),nyo=o("model.eval()"),syo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tne=a("code"),lyo=o("model.train()"),iyo=l(),ane=a("p"),dyo=o("Examples:"),cyo=l(),f(jE.$$.fragment),tRe=l(),Cd=a("h2"),e5=a("a"),nne=a("span"),f(NE.$$.fragment),fyo=l(),sne=a("span"),myo=o("AutoModelForMultipleChoice"),aRe=l(),tr=a("div"),f(DE.$$.fragment),gyo=l(),Md=a("p"),hyo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),lne=a("code"),pyo=o("from_pretrained()"),_yo=o("class method or the "),ine=a("code"),uyo=o("from_config()"),byo=o(`class
method.`),vyo=l(),qE=a("p"),Tyo=o("This class cannot be instantiated directly using "),dne=a("code"),Fyo=o("__init__()"),Cyo=o(" (throws an error)."),Myo=l(),Kr=a("div"),f(GE.$$.fragment),Eyo=l(),cne=a("p"),yyo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),wyo=l(),Ed=a("p"),Ayo=o(`Note:
Loading a model from its configuration file does `),fne=a("strong"),Lyo=o("not"),Byo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mne=a("code"),xyo=o("from_pretrained()"),kyo=o("to load the model weights."),Ryo=l(),gne=a("p"),Syo=o("Examples:"),Pyo=l(),f(OE.$$.fragment),$yo=l(),Ve=a("div"),f(XE.$$.fragment),Iyo=l(),hne=a("p"),jyo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Nyo=l(),en=a("p"),Dyo=o("The model class to instantiate is selected based on the "),pne=a("code"),qyo=o("model_type"),Gyo=o(` property of the config object (either
passed as an argument or loaded from `),_ne=a("code"),Oyo=o("pretrained_model_name_or_path"),Xyo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),une=a("code"),Vyo=o("pretrained_model_name_or_path"),zyo=o(":"),Wyo=l(),G=a("ul"),o5=a("li"),bne=a("strong"),Qyo=o("albert"),Hyo=o(" \u2014 "),Wj=a("a"),Uyo=o("AlbertForMultipleChoice"),Jyo=o(" (ALBERT model)"),Yyo=l(),r5=a("li"),vne=a("strong"),Kyo=o("bert"),Zyo=o(" \u2014 "),Qj=a("a"),ewo=o("BertForMultipleChoice"),owo=o(" (BERT model)"),rwo=l(),t5=a("li"),Tne=a("strong"),two=o("big_bird"),awo=o(" \u2014 "),Hj=a("a"),nwo=o("BigBirdForMultipleChoice"),swo=o(" (BigBird model)"),lwo=l(),a5=a("li"),Fne=a("strong"),iwo=o("camembert"),dwo=o(" \u2014 "),Uj=a("a"),cwo=o("CamembertForMultipleChoice"),fwo=o(" (CamemBERT model)"),mwo=l(),n5=a("li"),Cne=a("strong"),gwo=o("canine"),hwo=o(" \u2014 "),Jj=a("a"),pwo=o("CanineForMultipleChoice"),_wo=o(" (Canine model)"),uwo=l(),s5=a("li"),Mne=a("strong"),bwo=o("convbert"),vwo=o(" \u2014 "),Yj=a("a"),Two=o("ConvBertForMultipleChoice"),Fwo=o(" (ConvBERT model)"),Cwo=l(),l5=a("li"),Ene=a("strong"),Mwo=o("data2vec-text"),Ewo=o(" \u2014 "),Kj=a("a"),ywo=o("Data2VecTextForMultipleChoice"),wwo=o(" (Data2VecText model)"),Awo=l(),i5=a("li"),yne=a("strong"),Lwo=o("distilbert"),Bwo=o(" \u2014 "),Zj=a("a"),xwo=o("DistilBertForMultipleChoice"),kwo=o(" (DistilBERT model)"),Rwo=l(),d5=a("li"),wne=a("strong"),Swo=o("electra"),Pwo=o(" \u2014 "),eN=a("a"),$wo=o("ElectraForMultipleChoice"),Iwo=o(" (ELECTRA model)"),jwo=l(),c5=a("li"),Ane=a("strong"),Nwo=o("flaubert"),Dwo=o(" \u2014 "),oN=a("a"),qwo=o("FlaubertForMultipleChoice"),Gwo=o(" (FlauBERT model)"),Owo=l(),f5=a("li"),Lne=a("strong"),Xwo=o("fnet"),Vwo=o(" \u2014 "),rN=a("a"),zwo=o("FNetForMultipleChoice"),Wwo=o(" (FNet model)"),Qwo=l(),m5=a("li"),Bne=a("strong"),Hwo=o("funnel"),Uwo=o(" \u2014 "),tN=a("a"),Jwo=o("FunnelForMultipleChoice"),Ywo=o(" (Funnel Transformer model)"),Kwo=l(),g5=a("li"),xne=a("strong"),Zwo=o("ibert"),eAo=o(" \u2014 "),aN=a("a"),oAo=o("IBertForMultipleChoice"),rAo=o(" (I-BERT model)"),tAo=l(),h5=a("li"),kne=a("strong"),aAo=o("longformer"),nAo=o(" \u2014 "),nN=a("a"),sAo=o("LongformerForMultipleChoice"),lAo=o(" (Longformer model)"),iAo=l(),p5=a("li"),Rne=a("strong"),dAo=o("megatron-bert"),cAo=o(" \u2014 "),sN=a("a"),fAo=o("MegatronBertForMultipleChoice"),mAo=o(" (MegatronBert model)"),gAo=l(),_5=a("li"),Sne=a("strong"),hAo=o("mobilebert"),pAo=o(" \u2014 "),lN=a("a"),_Ao=o("MobileBertForMultipleChoice"),uAo=o(" (MobileBERT model)"),bAo=l(),u5=a("li"),Pne=a("strong"),vAo=o("mpnet"),TAo=o(" \u2014 "),iN=a("a"),FAo=o("MPNetForMultipleChoice"),CAo=o(" (MPNet model)"),MAo=l(),b5=a("li"),$ne=a("strong"),EAo=o("nystromformer"),yAo=o(" \u2014 "),dN=a("a"),wAo=o("NystromformerForMultipleChoice"),AAo=o(" (Nystromformer model)"),LAo=l(),v5=a("li"),Ine=a("strong"),BAo=o("qdqbert"),xAo=o(" \u2014 "),cN=a("a"),kAo=o("QDQBertForMultipleChoice"),RAo=o(" (QDQBert model)"),SAo=l(),T5=a("li"),jne=a("strong"),PAo=o("rembert"),$Ao=o(" \u2014 "),fN=a("a"),IAo=o("RemBertForMultipleChoice"),jAo=o(" (RemBERT model)"),NAo=l(),F5=a("li"),Nne=a("strong"),DAo=o("roberta"),qAo=o(" \u2014 "),mN=a("a"),GAo=o("RobertaForMultipleChoice"),OAo=o(" (RoBERTa model)"),XAo=l(),C5=a("li"),Dne=a("strong"),VAo=o("roformer"),zAo=o(" \u2014 "),gN=a("a"),WAo=o("RoFormerForMultipleChoice"),QAo=o(" (RoFormer model)"),HAo=l(),M5=a("li"),qne=a("strong"),UAo=o("squeezebert"),JAo=o(" \u2014 "),hN=a("a"),YAo=o("SqueezeBertForMultipleChoice"),KAo=o(" (SqueezeBERT model)"),ZAo=l(),E5=a("li"),Gne=a("strong"),eLo=o("xlm"),oLo=o(" \u2014 "),pN=a("a"),rLo=o("XLMForMultipleChoice"),tLo=o(" (XLM model)"),aLo=l(),y5=a("li"),One=a("strong"),nLo=o("xlm-roberta"),sLo=o(" \u2014 "),_N=a("a"),lLo=o("XLMRobertaForMultipleChoice"),iLo=o(" (XLM-RoBERTa model)"),dLo=l(),w5=a("li"),Xne=a("strong"),cLo=o("xlm-roberta-xl"),fLo=o(" \u2014 "),uN=a("a"),mLo=o("XLMRobertaXLForMultipleChoice"),gLo=o(" (XLM-RoBERTa-XL model)"),hLo=l(),A5=a("li"),Vne=a("strong"),pLo=o("xlnet"),_Lo=o(" \u2014 "),bN=a("a"),uLo=o("XLNetForMultipleChoice"),bLo=o(" (XLNet model)"),vLo=l(),L5=a("li"),zne=a("strong"),TLo=o("yoso"),FLo=o(" \u2014 "),vN=a("a"),CLo=o("YosoForMultipleChoice"),MLo=o(" (YOSO model)"),ELo=l(),B5=a("p"),yLo=o("The model is set in evaluation mode by default using "),Wne=a("code"),wLo=o("model.eval()"),ALo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qne=a("code"),LLo=o("model.train()"),BLo=l(),Hne=a("p"),xLo=o("Examples:"),kLo=l(),f(VE.$$.fragment),nRe=l(),yd=a("h2"),x5=a("a"),Une=a("span"),f(zE.$$.fragment),RLo=l(),Jne=a("span"),SLo=o("AutoModelForNextSentencePrediction"),sRe=l(),ar=a("div"),f(WE.$$.fragment),PLo=l(),wd=a("p"),$Lo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Yne=a("code"),ILo=o("from_pretrained()"),jLo=o("class method or the "),Kne=a("code"),NLo=o("from_config()"),DLo=o(`class
method.`),qLo=l(),QE=a("p"),GLo=o("This class cannot be instantiated directly using "),Zne=a("code"),OLo=o("__init__()"),XLo=o(" (throws an error)."),VLo=l(),Zr=a("div"),f(HE.$$.fragment),zLo=l(),ese=a("p"),WLo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),QLo=l(),Ad=a("p"),HLo=o(`Note:
Loading a model from its configuration file does `),ose=a("strong"),ULo=o("not"),JLo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rse=a("code"),YLo=o("from_pretrained()"),KLo=o("to load the model weights."),ZLo=l(),tse=a("p"),e7o=o("Examples:"),o7o=l(),f(UE.$$.fragment),r7o=l(),ze=a("div"),f(JE.$$.fragment),t7o=l(),ase=a("p"),a7o=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),n7o=l(),on=a("p"),s7o=o("The model class to instantiate is selected based on the "),nse=a("code"),l7o=o("model_type"),i7o=o(` property of the config object (either
passed as an argument or loaded from `),sse=a("code"),d7o=o("pretrained_model_name_or_path"),c7o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lse=a("code"),f7o=o("pretrained_model_name_or_path"),m7o=o(":"),g7o=l(),ma=a("ul"),k5=a("li"),ise=a("strong"),h7o=o("bert"),p7o=o(" \u2014 "),TN=a("a"),_7o=o("BertForNextSentencePrediction"),u7o=o(" (BERT model)"),b7o=l(),R5=a("li"),dse=a("strong"),v7o=o("fnet"),T7o=o(" \u2014 "),FN=a("a"),F7o=o("FNetForNextSentencePrediction"),C7o=o(" (FNet model)"),M7o=l(),S5=a("li"),cse=a("strong"),E7o=o("megatron-bert"),y7o=o(" \u2014 "),CN=a("a"),w7o=o("MegatronBertForNextSentencePrediction"),A7o=o(" (MegatronBert model)"),L7o=l(),P5=a("li"),fse=a("strong"),B7o=o("mobilebert"),x7o=o(" \u2014 "),MN=a("a"),k7o=o("MobileBertForNextSentencePrediction"),R7o=o(" (MobileBERT model)"),S7o=l(),$5=a("li"),mse=a("strong"),P7o=o("qdqbert"),$7o=o(" \u2014 "),EN=a("a"),I7o=o("QDQBertForNextSentencePrediction"),j7o=o(" (QDQBert model)"),N7o=l(),I5=a("p"),D7o=o("The model is set in evaluation mode by default using "),gse=a("code"),q7o=o("model.eval()"),G7o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hse=a("code"),O7o=o("model.train()"),X7o=l(),pse=a("p"),V7o=o("Examples:"),z7o=l(),f(YE.$$.fragment),lRe=l(),Ld=a("h2"),j5=a("a"),_se=a("span"),f(KE.$$.fragment),W7o=l(),use=a("span"),Q7o=o("AutoModelForTokenClassification"),iRe=l(),nr=a("div"),f(ZE.$$.fragment),H7o=l(),Bd=a("p"),U7o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),bse=a("code"),J7o=o("from_pretrained()"),Y7o=o("class method or the "),vse=a("code"),K7o=o("from_config()"),Z7o=o(`class
method.`),e9o=l(),e3=a("p"),o9o=o("This class cannot be instantiated directly using "),Tse=a("code"),r9o=o("__init__()"),t9o=o(" (throws an error)."),a9o=l(),et=a("div"),f(o3.$$.fragment),n9o=l(),Fse=a("p"),s9o=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),l9o=l(),xd=a("p"),i9o=o(`Note:
Loading a model from its configuration file does `),Cse=a("strong"),d9o=o("not"),c9o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mse=a("code"),f9o=o("from_pretrained()"),m9o=o("to load the model weights."),g9o=l(),Ese=a("p"),h9o=o("Examples:"),p9o=l(),f(r3.$$.fragment),_9o=l(),We=a("div"),f(t3.$$.fragment),u9o=l(),yse=a("p"),b9o=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),v9o=l(),rn=a("p"),T9o=o("The model class to instantiate is selected based on the "),wse=a("code"),F9o=o("model_type"),C9o=o(` property of the config object (either
passed as an argument or loaded from `),Ase=a("code"),M9o=o("pretrained_model_name_or_path"),E9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lse=a("code"),y9o=o("pretrained_model_name_or_path"),w9o=o(":"),A9o=l(),D=a("ul"),N5=a("li"),Bse=a("strong"),L9o=o("albert"),B9o=o(" \u2014 "),yN=a("a"),x9o=o("AlbertForTokenClassification"),k9o=o(" (ALBERT model)"),R9o=l(),D5=a("li"),xse=a("strong"),S9o=o("bert"),P9o=o(" \u2014 "),wN=a("a"),$9o=o("BertForTokenClassification"),I9o=o(" (BERT model)"),j9o=l(),q5=a("li"),kse=a("strong"),N9o=o("big_bird"),D9o=o(" \u2014 "),AN=a("a"),q9o=o("BigBirdForTokenClassification"),G9o=o(" (BigBird model)"),O9o=l(),G5=a("li"),Rse=a("strong"),X9o=o("camembert"),V9o=o(" \u2014 "),LN=a("a"),z9o=o("CamembertForTokenClassification"),W9o=o(" (CamemBERT model)"),Q9o=l(),O5=a("li"),Sse=a("strong"),H9o=o("canine"),U9o=o(" \u2014 "),BN=a("a"),J9o=o("CanineForTokenClassification"),Y9o=o(" (Canine model)"),K9o=l(),X5=a("li"),Pse=a("strong"),Z9o=o("convbert"),eBo=o(" \u2014 "),xN=a("a"),oBo=o("ConvBertForTokenClassification"),rBo=o(" (ConvBERT model)"),tBo=l(),V5=a("li"),$se=a("strong"),aBo=o("data2vec-text"),nBo=o(" \u2014 "),kN=a("a"),sBo=o("Data2VecTextForTokenClassification"),lBo=o(" (Data2VecText model)"),iBo=l(),z5=a("li"),Ise=a("strong"),dBo=o("deberta"),cBo=o(" \u2014 "),RN=a("a"),fBo=o("DebertaForTokenClassification"),mBo=o(" (DeBERTa model)"),gBo=l(),W5=a("li"),jse=a("strong"),hBo=o("deberta-v2"),pBo=o(" \u2014 "),SN=a("a"),_Bo=o("DebertaV2ForTokenClassification"),uBo=o(" (DeBERTa-v2 model)"),bBo=l(),Q5=a("li"),Nse=a("strong"),vBo=o("distilbert"),TBo=o(" \u2014 "),PN=a("a"),FBo=o("DistilBertForTokenClassification"),CBo=o(" (DistilBERT model)"),MBo=l(),H5=a("li"),Dse=a("strong"),EBo=o("electra"),yBo=o(" \u2014 "),$N=a("a"),wBo=o("ElectraForTokenClassification"),ABo=o(" (ELECTRA model)"),LBo=l(),U5=a("li"),qse=a("strong"),BBo=o("flaubert"),xBo=o(" \u2014 "),IN=a("a"),kBo=o("FlaubertForTokenClassification"),RBo=o(" (FlauBERT model)"),SBo=l(),J5=a("li"),Gse=a("strong"),PBo=o("fnet"),$Bo=o(" \u2014 "),jN=a("a"),IBo=o("FNetForTokenClassification"),jBo=o(" (FNet model)"),NBo=l(),Y5=a("li"),Ose=a("strong"),DBo=o("funnel"),qBo=o(" \u2014 "),NN=a("a"),GBo=o("FunnelForTokenClassification"),OBo=o(" (Funnel Transformer model)"),XBo=l(),K5=a("li"),Xse=a("strong"),VBo=o("gpt2"),zBo=o(" \u2014 "),DN=a("a"),WBo=o("GPT2ForTokenClassification"),QBo=o(" (OpenAI GPT-2 model)"),HBo=l(),Z5=a("li"),Vse=a("strong"),UBo=o("ibert"),JBo=o(" \u2014 "),qN=a("a"),YBo=o("IBertForTokenClassification"),KBo=o(" (I-BERT model)"),ZBo=l(),e2=a("li"),zse=a("strong"),exo=o("layoutlm"),oxo=o(" \u2014 "),GN=a("a"),rxo=o("LayoutLMForTokenClassification"),txo=o(" (LayoutLM model)"),axo=l(),o2=a("li"),Wse=a("strong"),nxo=o("layoutlmv2"),sxo=o(" \u2014 "),ON=a("a"),lxo=o("LayoutLMv2ForTokenClassification"),ixo=o(" (LayoutLMv2 model)"),dxo=l(),r2=a("li"),Qse=a("strong"),cxo=o("longformer"),fxo=o(" \u2014 "),XN=a("a"),mxo=o("LongformerForTokenClassification"),gxo=o(" (Longformer model)"),hxo=l(),t2=a("li"),Hse=a("strong"),pxo=o("megatron-bert"),_xo=o(" \u2014 "),VN=a("a"),uxo=o("MegatronBertForTokenClassification"),bxo=o(" (MegatronBert model)"),vxo=l(),a2=a("li"),Use=a("strong"),Txo=o("mobilebert"),Fxo=o(" \u2014 "),zN=a("a"),Cxo=o("MobileBertForTokenClassification"),Mxo=o(" (MobileBERT model)"),Exo=l(),n2=a("li"),Jse=a("strong"),yxo=o("mpnet"),wxo=o(" \u2014 "),WN=a("a"),Axo=o("MPNetForTokenClassification"),Lxo=o(" (MPNet model)"),Bxo=l(),s2=a("li"),Yse=a("strong"),xxo=o("nystromformer"),kxo=o(" \u2014 "),QN=a("a"),Rxo=o("NystromformerForTokenClassification"),Sxo=o(" (Nystromformer model)"),Pxo=l(),l2=a("li"),Kse=a("strong"),$xo=o("qdqbert"),Ixo=o(" \u2014 "),HN=a("a"),jxo=o("QDQBertForTokenClassification"),Nxo=o(" (QDQBert model)"),Dxo=l(),i2=a("li"),Zse=a("strong"),qxo=o("rembert"),Gxo=o(" \u2014 "),UN=a("a"),Oxo=o("RemBertForTokenClassification"),Xxo=o(" (RemBERT model)"),Vxo=l(),d2=a("li"),ele=a("strong"),zxo=o("roberta"),Wxo=o(" \u2014 "),JN=a("a"),Qxo=o("RobertaForTokenClassification"),Hxo=o(" (RoBERTa model)"),Uxo=l(),c2=a("li"),ole=a("strong"),Jxo=o("roformer"),Yxo=o(" \u2014 "),YN=a("a"),Kxo=o("RoFormerForTokenClassification"),Zxo=o(" (RoFormer model)"),eko=l(),f2=a("li"),rle=a("strong"),oko=o("squeezebert"),rko=o(" \u2014 "),KN=a("a"),tko=o("SqueezeBertForTokenClassification"),ako=o(" (SqueezeBERT model)"),nko=l(),m2=a("li"),tle=a("strong"),sko=o("xlm"),lko=o(" \u2014 "),ZN=a("a"),iko=o("XLMForTokenClassification"),dko=o(" (XLM model)"),cko=l(),g2=a("li"),ale=a("strong"),fko=o("xlm-roberta"),mko=o(" \u2014 "),eD=a("a"),gko=o("XLMRobertaForTokenClassification"),hko=o(" (XLM-RoBERTa model)"),pko=l(),h2=a("li"),nle=a("strong"),_ko=o("xlm-roberta-xl"),uko=o(" \u2014 "),oD=a("a"),bko=o("XLMRobertaXLForTokenClassification"),vko=o(" (XLM-RoBERTa-XL model)"),Tko=l(),p2=a("li"),sle=a("strong"),Fko=o("xlnet"),Cko=o(" \u2014 "),rD=a("a"),Mko=o("XLNetForTokenClassification"),Eko=o(" (XLNet model)"),yko=l(),_2=a("li"),lle=a("strong"),wko=o("yoso"),Ako=o(" \u2014 "),tD=a("a"),Lko=o("YosoForTokenClassification"),Bko=o(" (YOSO model)"),xko=l(),u2=a("p"),kko=o("The model is set in evaluation mode by default using "),ile=a("code"),Rko=o("model.eval()"),Sko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dle=a("code"),Pko=o("model.train()"),$ko=l(),cle=a("p"),Iko=o("Examples:"),jko=l(),f(a3.$$.fragment),dRe=l(),kd=a("h2"),b2=a("a"),fle=a("span"),f(n3.$$.fragment),Nko=l(),mle=a("span"),Dko=o("AutoModelForQuestionAnswering"),cRe=l(),sr=a("div"),f(s3.$$.fragment),qko=l(),Rd=a("p"),Gko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),gle=a("code"),Oko=o("from_pretrained()"),Xko=o("class method or the "),hle=a("code"),Vko=o("from_config()"),zko=o(`class
method.`),Wko=l(),l3=a("p"),Qko=o("This class cannot be instantiated directly using "),ple=a("code"),Hko=o("__init__()"),Uko=o(" (throws an error)."),Jko=l(),ot=a("div"),f(i3.$$.fragment),Yko=l(),_le=a("p"),Kko=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Zko=l(),Sd=a("p"),eRo=o(`Note:
Loading a model from its configuration file does `),ule=a("strong"),oRo=o("not"),rRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ble=a("code"),tRo=o("from_pretrained()"),aRo=o("to load the model weights."),nRo=l(),vle=a("p"),sRo=o("Examples:"),lRo=l(),f(d3.$$.fragment),iRo=l(),Qe=a("div"),f(c3.$$.fragment),dRo=l(),Tle=a("p"),cRo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),fRo=l(),tn=a("p"),mRo=o("The model class to instantiate is selected based on the "),Fle=a("code"),gRo=o("model_type"),hRo=o(` property of the config object (either
passed as an argument or loaded from `),Cle=a("code"),pRo=o("pretrained_model_name_or_path"),_Ro=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mle=a("code"),uRo=o("pretrained_model_name_or_path"),bRo=o(":"),vRo=l(),R=a("ul"),v2=a("li"),Ele=a("strong"),TRo=o("albert"),FRo=o(" \u2014 "),aD=a("a"),CRo=o("AlbertForQuestionAnswering"),MRo=o(" (ALBERT model)"),ERo=l(),T2=a("li"),yle=a("strong"),yRo=o("bart"),wRo=o(" \u2014 "),nD=a("a"),ARo=o("BartForQuestionAnswering"),LRo=o(" (BART model)"),BRo=l(),F2=a("li"),wle=a("strong"),xRo=o("bert"),kRo=o(" \u2014 "),sD=a("a"),RRo=o("BertForQuestionAnswering"),SRo=o(" (BERT model)"),PRo=l(),C2=a("li"),Ale=a("strong"),$Ro=o("big_bird"),IRo=o(" \u2014 "),lD=a("a"),jRo=o("BigBirdForQuestionAnswering"),NRo=o(" (BigBird model)"),DRo=l(),M2=a("li"),Lle=a("strong"),qRo=o("bigbird_pegasus"),GRo=o(" \u2014 "),iD=a("a"),ORo=o("BigBirdPegasusForQuestionAnswering"),XRo=o(" (BigBirdPegasus model)"),VRo=l(),E2=a("li"),Ble=a("strong"),zRo=o("camembert"),WRo=o(" \u2014 "),dD=a("a"),QRo=o("CamembertForQuestionAnswering"),HRo=o(" (CamemBERT model)"),URo=l(),y2=a("li"),xle=a("strong"),JRo=o("canine"),YRo=o(" \u2014 "),cD=a("a"),KRo=o("CanineForQuestionAnswering"),ZRo=o(" (Canine model)"),eSo=l(),w2=a("li"),kle=a("strong"),oSo=o("convbert"),rSo=o(" \u2014 "),fD=a("a"),tSo=o("ConvBertForQuestionAnswering"),aSo=o(" (ConvBERT model)"),nSo=l(),A2=a("li"),Rle=a("strong"),sSo=o("data2vec-text"),lSo=o(" \u2014 "),mD=a("a"),iSo=o("Data2VecTextForQuestionAnswering"),dSo=o(" (Data2VecText model)"),cSo=l(),L2=a("li"),Sle=a("strong"),fSo=o("deberta"),mSo=o(" \u2014 "),gD=a("a"),gSo=o("DebertaForQuestionAnswering"),hSo=o(" (DeBERTa model)"),pSo=l(),B2=a("li"),Ple=a("strong"),_So=o("deberta-v2"),uSo=o(" \u2014 "),hD=a("a"),bSo=o("DebertaV2ForQuestionAnswering"),vSo=o(" (DeBERTa-v2 model)"),TSo=l(),x2=a("li"),$le=a("strong"),FSo=o("distilbert"),CSo=o(" \u2014 "),pD=a("a"),MSo=o("DistilBertForQuestionAnswering"),ESo=o(" (DistilBERT model)"),ySo=l(),k2=a("li"),Ile=a("strong"),wSo=o("electra"),ASo=o(" \u2014 "),_D=a("a"),LSo=o("ElectraForQuestionAnswering"),BSo=o(" (ELECTRA model)"),xSo=l(),R2=a("li"),jle=a("strong"),kSo=o("flaubert"),RSo=o(" \u2014 "),uD=a("a"),SSo=o("FlaubertForQuestionAnsweringSimple"),PSo=o(" (FlauBERT model)"),$So=l(),S2=a("li"),Nle=a("strong"),ISo=o("fnet"),jSo=o(" \u2014 "),bD=a("a"),NSo=o("FNetForQuestionAnswering"),DSo=o(" (FNet model)"),qSo=l(),P2=a("li"),Dle=a("strong"),GSo=o("funnel"),OSo=o(" \u2014 "),vD=a("a"),XSo=o("FunnelForQuestionAnswering"),VSo=o(" (Funnel Transformer model)"),zSo=l(),$2=a("li"),qle=a("strong"),WSo=o("gptj"),QSo=o(" \u2014 "),TD=a("a"),HSo=o("GPTJForQuestionAnswering"),USo=o(" (GPT-J model)"),JSo=l(),I2=a("li"),Gle=a("strong"),YSo=o("ibert"),KSo=o(" \u2014 "),FD=a("a"),ZSo=o("IBertForQuestionAnswering"),ePo=o(" (I-BERT model)"),oPo=l(),j2=a("li"),Ole=a("strong"),rPo=o("layoutlmv2"),tPo=o(" \u2014 "),CD=a("a"),aPo=o("LayoutLMv2ForQuestionAnswering"),nPo=o(" (LayoutLMv2 model)"),sPo=l(),N2=a("li"),Xle=a("strong"),lPo=o("led"),iPo=o(" \u2014 "),MD=a("a"),dPo=o("LEDForQuestionAnswering"),cPo=o(" (LED model)"),fPo=l(),D2=a("li"),Vle=a("strong"),mPo=o("longformer"),gPo=o(" \u2014 "),ED=a("a"),hPo=o("LongformerForQuestionAnswering"),pPo=o(" (Longformer model)"),_Po=l(),q2=a("li"),zle=a("strong"),uPo=o("lxmert"),bPo=o(" \u2014 "),yD=a("a"),vPo=o("LxmertForQuestionAnswering"),TPo=o(" (LXMERT model)"),FPo=l(),G2=a("li"),Wle=a("strong"),CPo=o("mbart"),MPo=o(" \u2014 "),wD=a("a"),EPo=o("MBartForQuestionAnswering"),yPo=o(" (mBART model)"),wPo=l(),O2=a("li"),Qle=a("strong"),APo=o("megatron-bert"),LPo=o(" \u2014 "),AD=a("a"),BPo=o("MegatronBertForQuestionAnswering"),xPo=o(" (MegatronBert model)"),kPo=l(),X2=a("li"),Hle=a("strong"),RPo=o("mobilebert"),SPo=o(" \u2014 "),LD=a("a"),PPo=o("MobileBertForQuestionAnswering"),$Po=o(" (MobileBERT model)"),IPo=l(),V2=a("li"),Ule=a("strong"),jPo=o("mpnet"),NPo=o(" \u2014 "),BD=a("a"),DPo=o("MPNetForQuestionAnswering"),qPo=o(" (MPNet model)"),GPo=l(),z2=a("li"),Jle=a("strong"),OPo=o("nystromformer"),XPo=o(" \u2014 "),xD=a("a"),VPo=o("NystromformerForQuestionAnswering"),zPo=o(" (Nystromformer model)"),WPo=l(),W2=a("li"),Yle=a("strong"),QPo=o("qdqbert"),HPo=o(" \u2014 "),kD=a("a"),UPo=o("QDQBertForQuestionAnswering"),JPo=o(" (QDQBert model)"),YPo=l(),Q2=a("li"),Kle=a("strong"),KPo=o("reformer"),ZPo=o(" \u2014 "),RD=a("a"),e$o=o("ReformerForQuestionAnswering"),o$o=o(" (Reformer model)"),r$o=l(),H2=a("li"),Zle=a("strong"),t$o=o("rembert"),a$o=o(" \u2014 "),SD=a("a"),n$o=o("RemBertForQuestionAnswering"),s$o=o(" (RemBERT model)"),l$o=l(),U2=a("li"),eie=a("strong"),i$o=o("roberta"),d$o=o(" \u2014 "),PD=a("a"),c$o=o("RobertaForQuestionAnswering"),f$o=o(" (RoBERTa model)"),m$o=l(),J2=a("li"),oie=a("strong"),g$o=o("roformer"),h$o=o(" \u2014 "),$D=a("a"),p$o=o("RoFormerForQuestionAnswering"),_$o=o(" (RoFormer model)"),u$o=l(),Y2=a("li"),rie=a("strong"),b$o=o("splinter"),v$o=o(" \u2014 "),ID=a("a"),T$o=o("SplinterForQuestionAnswering"),F$o=o(" (Splinter model)"),C$o=l(),K2=a("li"),tie=a("strong"),M$o=o("squeezebert"),E$o=o(" \u2014 "),jD=a("a"),y$o=o("SqueezeBertForQuestionAnswering"),w$o=o(" (SqueezeBERT model)"),A$o=l(),Z2=a("li"),aie=a("strong"),L$o=o("xlm"),B$o=o(" \u2014 "),ND=a("a"),x$o=o("XLMForQuestionAnsweringSimple"),k$o=o(" (XLM model)"),R$o=l(),ev=a("li"),nie=a("strong"),S$o=o("xlm-roberta"),P$o=o(" \u2014 "),DD=a("a"),$$o=o("XLMRobertaForQuestionAnswering"),I$o=o(" (XLM-RoBERTa model)"),j$o=l(),ov=a("li"),sie=a("strong"),N$o=o("xlm-roberta-xl"),D$o=o(" \u2014 "),qD=a("a"),q$o=o("XLMRobertaXLForQuestionAnswering"),G$o=o(" (XLM-RoBERTa-XL model)"),O$o=l(),rv=a("li"),lie=a("strong"),X$o=o("xlnet"),V$o=o(" \u2014 "),GD=a("a"),z$o=o("XLNetForQuestionAnsweringSimple"),W$o=o(" (XLNet model)"),Q$o=l(),tv=a("li"),iie=a("strong"),H$o=o("yoso"),U$o=o(" \u2014 "),OD=a("a"),J$o=o("YosoForQuestionAnswering"),Y$o=o(" (YOSO model)"),K$o=l(),av=a("p"),Z$o=o("The model is set in evaluation mode by default using "),die=a("code"),eIo=o("model.eval()"),oIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cie=a("code"),rIo=o("model.train()"),tIo=l(),fie=a("p"),aIo=o("Examples:"),nIo=l(),f(f3.$$.fragment),fRe=l(),Pd=a("h2"),nv=a("a"),mie=a("span"),f(m3.$$.fragment),sIo=l(),gie=a("span"),lIo=o("AutoModelForTableQuestionAnswering"),mRe=l(),lr=a("div"),f(g3.$$.fragment),iIo=l(),$d=a("p"),dIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),hie=a("code"),cIo=o("from_pretrained()"),fIo=o("class method or the "),pie=a("code"),mIo=o("from_config()"),gIo=o(`class
method.`),hIo=l(),h3=a("p"),pIo=o("This class cannot be instantiated directly using "),_ie=a("code"),_Io=o("__init__()"),uIo=o(" (throws an error)."),bIo=l(),rt=a("div"),f(p3.$$.fragment),vIo=l(),uie=a("p"),TIo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),FIo=l(),Id=a("p"),CIo=o(`Note:
Loading a model from its configuration file does `),bie=a("strong"),MIo=o("not"),EIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vie=a("code"),yIo=o("from_pretrained()"),wIo=o("to load the model weights."),AIo=l(),Tie=a("p"),LIo=o("Examples:"),BIo=l(),f(_3.$$.fragment),xIo=l(),He=a("div"),f(u3.$$.fragment),kIo=l(),Fie=a("p"),RIo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),SIo=l(),an=a("p"),PIo=o("The model class to instantiate is selected based on the "),Cie=a("code"),$Io=o("model_type"),IIo=o(` property of the config object (either
passed as an argument or loaded from `),Mie=a("code"),jIo=o("pretrained_model_name_or_path"),NIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eie=a("code"),DIo=o("pretrained_model_name_or_path"),qIo=o(":"),GIo=l(),yie=a("ul"),sv=a("li"),wie=a("strong"),OIo=o("tapas"),XIo=o(" \u2014 "),XD=a("a"),VIo=o("TapasForQuestionAnswering"),zIo=o(" (TAPAS model)"),WIo=l(),lv=a("p"),QIo=o("The model is set in evaluation mode by default using "),Aie=a("code"),HIo=o("model.eval()"),UIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lie=a("code"),JIo=o("model.train()"),YIo=l(),Bie=a("p"),KIo=o("Examples:"),ZIo=l(),f(b3.$$.fragment),gRe=l(),jd=a("h2"),iv=a("a"),xie=a("span"),f(v3.$$.fragment),ejo=l(),kie=a("span"),ojo=o("AutoModelForImageClassification"),hRe=l(),ir=a("div"),f(T3.$$.fragment),rjo=l(),Nd=a("p"),tjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Rie=a("code"),ajo=o("from_pretrained()"),njo=o("class method or the "),Sie=a("code"),sjo=o("from_config()"),ljo=o(`class
method.`),ijo=l(),F3=a("p"),djo=o("This class cannot be instantiated directly using "),Pie=a("code"),cjo=o("__init__()"),fjo=o(" (throws an error)."),mjo=l(),tt=a("div"),f(C3.$$.fragment),gjo=l(),$ie=a("p"),hjo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),pjo=l(),Dd=a("p"),_jo=o(`Note:
Loading a model from its configuration file does `),Iie=a("strong"),ujo=o("not"),bjo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jie=a("code"),vjo=o("from_pretrained()"),Tjo=o("to load the model weights."),Fjo=l(),Nie=a("p"),Cjo=o("Examples:"),Mjo=l(),f(M3.$$.fragment),Ejo=l(),Ue=a("div"),f(E3.$$.fragment),yjo=l(),Die=a("p"),wjo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Ajo=l(),nn=a("p"),Ljo=o("The model class to instantiate is selected based on the "),qie=a("code"),Bjo=o("model_type"),xjo=o(` property of the config object (either
passed as an argument or loaded from `),Gie=a("code"),kjo=o("pretrained_model_name_or_path"),Rjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oie=a("code"),Sjo=o("pretrained_model_name_or_path"),Pjo=o(":"),$jo=l(),me=a("ul"),dv=a("li"),Xie=a("strong"),Ijo=o("beit"),jjo=o(" \u2014 "),VD=a("a"),Njo=o("BeitForImageClassification"),Djo=o(" (BEiT model)"),qjo=l(),cv=a("li"),Vie=a("strong"),Gjo=o("convnext"),Ojo=o(" \u2014 "),zD=a("a"),Xjo=o("ConvNextForImageClassification"),Vjo=o(" (ConvNext model)"),zjo=l(),zs=a("li"),zie=a("strong"),Wjo=o("deit"),Qjo=o(" \u2014 "),WD=a("a"),Hjo=o("DeiTForImageClassification"),Ujo=o(" or "),QD=a("a"),Jjo=o("DeiTForImageClassificationWithTeacher"),Yjo=o(" (DeiT model)"),Kjo=l(),fv=a("li"),Wie=a("strong"),Zjo=o("imagegpt"),eNo=o(" \u2014 "),HD=a("a"),oNo=o("ImageGPTForImageClassification"),rNo=o(" (ImageGPT model)"),tNo=l(),pa=a("li"),Qie=a("strong"),aNo=o("perceiver"),nNo=o(" \u2014 "),UD=a("a"),sNo=o("PerceiverForImageClassificationLearned"),lNo=o(" or "),JD=a("a"),iNo=o("PerceiverForImageClassificationFourier"),dNo=o(" or "),YD=a("a"),cNo=o("PerceiverForImageClassificationConvProcessing"),fNo=o(" (Perceiver model)"),mNo=l(),mv=a("li"),Hie=a("strong"),gNo=o("poolformer"),hNo=o(" \u2014 "),KD=a("a"),pNo=o("PoolFormerForImageClassification"),_No=o(" (PoolFormer model)"),uNo=l(),gv=a("li"),Uie=a("strong"),bNo=o("resnet"),vNo=o(" \u2014 "),ZD=a("a"),TNo=o("ResNetForImageClassification"),FNo=o(" (ResNet model)"),CNo=l(),hv=a("li"),Jie=a("strong"),MNo=o("segformer"),ENo=o(" \u2014 "),eq=a("a"),yNo=o("SegformerForImageClassification"),wNo=o(" (SegFormer model)"),ANo=l(),pv=a("li"),Yie=a("strong"),LNo=o("swin"),BNo=o(" \u2014 "),oq=a("a"),xNo=o("SwinForImageClassification"),kNo=o(" (Swin model)"),RNo=l(),_v=a("li"),Kie=a("strong"),SNo=o("van"),PNo=o(" \u2014 "),rq=a("a"),$No=o("VanForImageClassification"),INo=o(" (VAN model)"),jNo=l(),uv=a("li"),Zie=a("strong"),NNo=o("vit"),DNo=o(" \u2014 "),tq=a("a"),qNo=o("ViTForImageClassification"),GNo=o(" (ViT model)"),ONo=l(),bv=a("p"),XNo=o("The model is set in evaluation mode by default using "),ede=a("code"),VNo=o("model.eval()"),zNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ode=a("code"),WNo=o("model.train()"),QNo=l(),rde=a("p"),HNo=o("Examples:"),UNo=l(),f(y3.$$.fragment),pRe=l(),qd=a("h2"),vv=a("a"),tde=a("span"),f(w3.$$.fragment),JNo=l(),ade=a("span"),YNo=o("AutoModelForVision2Seq"),_Re=l(),dr=a("div"),f(A3.$$.fragment),KNo=l(),Gd=a("p"),ZNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),nde=a("code"),eDo=o("from_pretrained()"),oDo=o("class method or the "),sde=a("code"),rDo=o("from_config()"),tDo=o(`class
method.`),aDo=l(),L3=a("p"),nDo=o("This class cannot be instantiated directly using "),lde=a("code"),sDo=o("__init__()"),lDo=o(" (throws an error)."),iDo=l(),at=a("div"),f(B3.$$.fragment),dDo=l(),ide=a("p"),cDo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),fDo=l(),Od=a("p"),mDo=o(`Note:
Loading a model from its configuration file does `),dde=a("strong"),gDo=o("not"),hDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cde=a("code"),pDo=o("from_pretrained()"),_Do=o("to load the model weights."),uDo=l(),fde=a("p"),bDo=o("Examples:"),vDo=l(),f(x3.$$.fragment),TDo=l(),Je=a("div"),f(k3.$$.fragment),FDo=l(),mde=a("p"),CDo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),MDo=l(),sn=a("p"),EDo=o("The model class to instantiate is selected based on the "),gde=a("code"),yDo=o("model_type"),wDo=o(` property of the config object (either
passed as an argument or loaded from `),hde=a("code"),ADo=o("pretrained_model_name_or_path"),LDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pde=a("code"),BDo=o("pretrained_model_name_or_path"),xDo=o(":"),kDo=l(),_de=a("ul"),Tv=a("li"),ude=a("strong"),RDo=o("vision-encoder-decoder"),SDo=o(" \u2014 "),aq=a("a"),PDo=o("VisionEncoderDecoderModel"),$Do=o(" (Vision Encoder decoder model)"),IDo=l(),Fv=a("p"),jDo=o("The model is set in evaluation mode by default using "),bde=a("code"),NDo=o("model.eval()"),DDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vde=a("code"),qDo=o("model.train()"),GDo=l(),Tde=a("p"),ODo=o("Examples:"),XDo=l(),f(R3.$$.fragment),uRe=l(),Xd=a("h2"),Cv=a("a"),Fde=a("span"),f(S3.$$.fragment),VDo=l(),Cde=a("span"),zDo=o("AutoModelForAudioClassification"),bRe=l(),cr=a("div"),f(P3.$$.fragment),WDo=l(),Vd=a("p"),QDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),Mde=a("code"),HDo=o("from_pretrained()"),UDo=o("class method or the "),Ede=a("code"),JDo=o("from_config()"),YDo=o(`class
method.`),KDo=l(),$3=a("p"),ZDo=o("This class cannot be instantiated directly using "),yde=a("code"),eqo=o("__init__()"),oqo=o(" (throws an error)."),rqo=l(),nt=a("div"),f(I3.$$.fragment),tqo=l(),wde=a("p"),aqo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),nqo=l(),zd=a("p"),sqo=o(`Note:
Loading a model from its configuration file does `),Ade=a("strong"),lqo=o("not"),iqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lde=a("code"),dqo=o("from_pretrained()"),cqo=o("to load the model weights."),fqo=l(),Bde=a("p"),mqo=o("Examples:"),gqo=l(),f(j3.$$.fragment),hqo=l(),Ye=a("div"),f(N3.$$.fragment),pqo=l(),xde=a("p"),_qo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),uqo=l(),ln=a("p"),bqo=o("The model class to instantiate is selected based on the "),kde=a("code"),vqo=o("model_type"),Tqo=o(` property of the config object (either
passed as an argument or loaded from `),Rde=a("code"),Fqo=o("pretrained_model_name_or_path"),Cqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sde=a("code"),Mqo=o("pretrained_model_name_or_path"),Eqo=o(":"),yqo=l(),ke=a("ul"),Mv=a("li"),Pde=a("strong"),wqo=o("data2vec-audio"),Aqo=o(" \u2014 "),nq=a("a"),Lqo=o("Data2VecAudioForSequenceClassification"),Bqo=o(" (Data2VecAudio model)"),xqo=l(),Ev=a("li"),$de=a("strong"),kqo=o("hubert"),Rqo=o(" \u2014 "),sq=a("a"),Sqo=o("HubertForSequenceClassification"),Pqo=o(" (Hubert model)"),$qo=l(),yv=a("li"),Ide=a("strong"),Iqo=o("sew"),jqo=o(" \u2014 "),lq=a("a"),Nqo=o("SEWForSequenceClassification"),Dqo=o(" (SEW model)"),qqo=l(),wv=a("li"),jde=a("strong"),Gqo=o("sew-d"),Oqo=o(" \u2014 "),iq=a("a"),Xqo=o("SEWDForSequenceClassification"),Vqo=o(" (SEW-D model)"),zqo=l(),Av=a("li"),Nde=a("strong"),Wqo=o("unispeech"),Qqo=o(" \u2014 "),dq=a("a"),Hqo=o("UniSpeechForSequenceClassification"),Uqo=o(" (UniSpeech model)"),Jqo=l(),Lv=a("li"),Dde=a("strong"),Yqo=o("unispeech-sat"),Kqo=o(" \u2014 "),cq=a("a"),Zqo=o("UniSpeechSatForSequenceClassification"),eGo=o(" (UniSpeechSat model)"),oGo=l(),Bv=a("li"),qde=a("strong"),rGo=o("wav2vec2"),tGo=o(" \u2014 "),fq=a("a"),aGo=o("Wav2Vec2ForSequenceClassification"),nGo=o(" (Wav2Vec2 model)"),sGo=l(),xv=a("li"),Gde=a("strong"),lGo=o("wavlm"),iGo=o(" \u2014 "),mq=a("a"),dGo=o("WavLMForSequenceClassification"),cGo=o(" (WavLM model)"),fGo=l(),kv=a("p"),mGo=o("The model is set in evaluation mode by default using "),Ode=a("code"),gGo=o("model.eval()"),hGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xde=a("code"),pGo=o("model.train()"),_Go=l(),Vde=a("p"),uGo=o("Examples:"),bGo=l(),f(D3.$$.fragment),vRe=l(),Wd=a("h2"),Rv=a("a"),zde=a("span"),f(q3.$$.fragment),vGo=l(),Wde=a("span"),TGo=o("AutoModelForAudioFrameClassification"),TRe=l(),fr=a("div"),f(G3.$$.fragment),FGo=l(),Qd=a("p"),CGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Qde=a("code"),MGo=o("from_pretrained()"),EGo=o("class method or the "),Hde=a("code"),yGo=o("from_config()"),wGo=o(`class
method.`),AGo=l(),O3=a("p"),LGo=o("This class cannot be instantiated directly using "),Ude=a("code"),BGo=o("__init__()"),xGo=o(" (throws an error)."),kGo=l(),st=a("div"),f(X3.$$.fragment),RGo=l(),Jde=a("p"),SGo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),PGo=l(),Hd=a("p"),$Go=o(`Note:
Loading a model from its configuration file does `),Yde=a("strong"),IGo=o("not"),jGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Kde=a("code"),NGo=o("from_pretrained()"),DGo=o("to load the model weights."),qGo=l(),Zde=a("p"),GGo=o("Examples:"),OGo=l(),f(V3.$$.fragment),XGo=l(),Ke=a("div"),f(z3.$$.fragment),VGo=l(),ece=a("p"),zGo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),WGo=l(),dn=a("p"),QGo=o("The model class to instantiate is selected based on the "),oce=a("code"),HGo=o("model_type"),UGo=o(` property of the config object (either
passed as an argument or loaded from `),rce=a("code"),JGo=o("pretrained_model_name_or_path"),YGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tce=a("code"),KGo=o("pretrained_model_name_or_path"),ZGo=o(":"),eOo=l(),cn=a("ul"),Sv=a("li"),ace=a("strong"),oOo=o("data2vec-audio"),rOo=o(" \u2014 "),gq=a("a"),tOo=o("Data2VecAudioForAudioFrameClassification"),aOo=o(" (Data2VecAudio model)"),nOo=l(),Pv=a("li"),nce=a("strong"),sOo=o("unispeech-sat"),lOo=o(" \u2014 "),hq=a("a"),iOo=o("UniSpeechSatForAudioFrameClassification"),dOo=o(" (UniSpeechSat model)"),cOo=l(),$v=a("li"),sce=a("strong"),fOo=o("wav2vec2"),mOo=o(" \u2014 "),pq=a("a"),gOo=o("Wav2Vec2ForAudioFrameClassification"),hOo=o(" (Wav2Vec2 model)"),pOo=l(),Iv=a("li"),lce=a("strong"),_Oo=o("wavlm"),uOo=o(" \u2014 "),_q=a("a"),bOo=o("WavLMForAudioFrameClassification"),vOo=o(" (WavLM model)"),TOo=l(),jv=a("p"),FOo=o("The model is set in evaluation mode by default using "),ice=a("code"),COo=o("model.eval()"),MOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dce=a("code"),EOo=o("model.train()"),yOo=l(),cce=a("p"),wOo=o("Examples:"),AOo=l(),f(W3.$$.fragment),FRe=l(),Ud=a("h2"),Nv=a("a"),fce=a("span"),f(Q3.$$.fragment),LOo=l(),mce=a("span"),BOo=o("AutoModelForCTC"),CRe=l(),mr=a("div"),f(H3.$$.fragment),xOo=l(),Jd=a("p"),kOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),gce=a("code"),ROo=o("from_pretrained()"),SOo=o("class method or the "),hce=a("code"),POo=o("from_config()"),$Oo=o(`class
method.`),IOo=l(),U3=a("p"),jOo=o("This class cannot be instantiated directly using "),pce=a("code"),NOo=o("__init__()"),DOo=o(" (throws an error)."),qOo=l(),lt=a("div"),f(J3.$$.fragment),GOo=l(),_ce=a("p"),OOo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),XOo=l(),Yd=a("p"),VOo=o(`Note:
Loading a model from its configuration file does `),uce=a("strong"),zOo=o("not"),WOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bce=a("code"),QOo=o("from_pretrained()"),HOo=o("to load the model weights."),UOo=l(),vce=a("p"),JOo=o("Examples:"),YOo=l(),f(Y3.$$.fragment),KOo=l(),Ze=a("div"),f(K3.$$.fragment),ZOo=l(),Tce=a("p"),eXo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),oXo=l(),fn=a("p"),rXo=o("The model class to instantiate is selected based on the "),Fce=a("code"),tXo=o("model_type"),aXo=o(` property of the config object (either
passed as an argument or loaded from `),Cce=a("code"),nXo=o("pretrained_model_name_or_path"),sXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mce=a("code"),lXo=o("pretrained_model_name_or_path"),iXo=o(":"),dXo=l(),Re=a("ul"),Dv=a("li"),Ece=a("strong"),cXo=o("data2vec-audio"),fXo=o(" \u2014 "),uq=a("a"),mXo=o("Data2VecAudioForCTC"),gXo=o(" (Data2VecAudio model)"),hXo=l(),qv=a("li"),yce=a("strong"),pXo=o("hubert"),_Xo=o(" \u2014 "),bq=a("a"),uXo=o("HubertForCTC"),bXo=o(" (Hubert model)"),vXo=l(),Gv=a("li"),wce=a("strong"),TXo=o("sew"),FXo=o(" \u2014 "),vq=a("a"),CXo=o("SEWForCTC"),MXo=o(" (SEW model)"),EXo=l(),Ov=a("li"),Ace=a("strong"),yXo=o("sew-d"),wXo=o(" \u2014 "),Tq=a("a"),AXo=o("SEWDForCTC"),LXo=o(" (SEW-D model)"),BXo=l(),Xv=a("li"),Lce=a("strong"),xXo=o("unispeech"),kXo=o(" \u2014 "),Fq=a("a"),RXo=o("UniSpeechForCTC"),SXo=o(" (UniSpeech model)"),PXo=l(),Vv=a("li"),Bce=a("strong"),$Xo=o("unispeech-sat"),IXo=o(" \u2014 "),Cq=a("a"),jXo=o("UniSpeechSatForCTC"),NXo=o(" (UniSpeechSat model)"),DXo=l(),zv=a("li"),xce=a("strong"),qXo=o("wav2vec2"),GXo=o(" \u2014 "),Mq=a("a"),OXo=o("Wav2Vec2ForCTC"),XXo=o(" (Wav2Vec2 model)"),VXo=l(),Wv=a("li"),kce=a("strong"),zXo=o("wavlm"),WXo=o(" \u2014 "),Eq=a("a"),QXo=o("WavLMForCTC"),HXo=o(" (WavLM model)"),UXo=l(),Qv=a("p"),JXo=o("The model is set in evaluation mode by default using "),Rce=a("code"),YXo=o("model.eval()"),KXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sce=a("code"),ZXo=o("model.train()"),eVo=l(),Pce=a("p"),oVo=o("Examples:"),rVo=l(),f(Z3.$$.fragment),MRe=l(),Kd=a("h2"),Hv=a("a"),$ce=a("span"),f(ey.$$.fragment),tVo=l(),Ice=a("span"),aVo=o("AutoModelForSpeechSeq2Seq"),ERe=l(),gr=a("div"),f(oy.$$.fragment),nVo=l(),Zd=a("p"),sVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),jce=a("code"),lVo=o("from_pretrained()"),iVo=o("class method or the "),Nce=a("code"),dVo=o("from_config()"),cVo=o(`class
method.`),fVo=l(),ry=a("p"),mVo=o("This class cannot be instantiated directly using "),Dce=a("code"),gVo=o("__init__()"),hVo=o(" (throws an error)."),pVo=l(),it=a("div"),f(ty.$$.fragment),_Vo=l(),qce=a("p"),uVo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),bVo=l(),ec=a("p"),vVo=o(`Note:
Loading a model from its configuration file does `),Gce=a("strong"),TVo=o("not"),FVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Oce=a("code"),CVo=o("from_pretrained()"),MVo=o("to load the model weights."),EVo=l(),Xce=a("p"),yVo=o("Examples:"),wVo=l(),f(ay.$$.fragment),AVo=l(),eo=a("div"),f(ny.$$.fragment),LVo=l(),Vce=a("p"),BVo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),xVo=l(),mn=a("p"),kVo=o("The model class to instantiate is selected based on the "),zce=a("code"),RVo=o("model_type"),SVo=o(` property of the config object (either
passed as an argument or loaded from `),Wce=a("code"),PVo=o("pretrained_model_name_or_path"),$Vo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qce=a("code"),IVo=o("pretrained_model_name_or_path"),jVo=o(":"),NVo=l(),sy=a("ul"),Uv=a("li"),Hce=a("strong"),DVo=o("speech-encoder-decoder"),qVo=o(" \u2014 "),yq=a("a"),GVo=o("SpeechEncoderDecoderModel"),OVo=o(" (Speech Encoder decoder model)"),XVo=l(),Jv=a("li"),Uce=a("strong"),VVo=o("speech_to_text"),zVo=o(" \u2014 "),wq=a("a"),WVo=o("Speech2TextForConditionalGeneration"),QVo=o(" (Speech2Text model)"),HVo=l(),Yv=a("p"),UVo=o("The model is set in evaluation mode by default using "),Jce=a("code"),JVo=o("model.eval()"),YVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yce=a("code"),KVo=o("model.train()"),ZVo=l(),Kce=a("p"),ezo=o("Examples:"),ozo=l(),f(ly.$$.fragment),yRe=l(),oc=a("h2"),Kv=a("a"),Zce=a("span"),f(iy.$$.fragment),rzo=l(),efe=a("span"),tzo=o("AutoModelForAudioXVector"),wRe=l(),hr=a("div"),f(dy.$$.fragment),azo=l(),rc=a("p"),nzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),ofe=a("code"),szo=o("from_pretrained()"),lzo=o("class method or the "),rfe=a("code"),izo=o("from_config()"),dzo=o(`class
method.`),czo=l(),cy=a("p"),fzo=o("This class cannot be instantiated directly using "),tfe=a("code"),mzo=o("__init__()"),gzo=o(" (throws an error)."),hzo=l(),dt=a("div"),f(fy.$$.fragment),pzo=l(),afe=a("p"),_zo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),uzo=l(),tc=a("p"),bzo=o(`Note:
Loading a model from its configuration file does `),nfe=a("strong"),vzo=o("not"),Tzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sfe=a("code"),Fzo=o("from_pretrained()"),Czo=o("to load the model weights."),Mzo=l(),lfe=a("p"),Ezo=o("Examples:"),yzo=l(),f(my.$$.fragment),wzo=l(),oo=a("div"),f(gy.$$.fragment),Azo=l(),ife=a("p"),Lzo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Bzo=l(),gn=a("p"),xzo=o("The model class to instantiate is selected based on the "),dfe=a("code"),kzo=o("model_type"),Rzo=o(` property of the config object (either
passed as an argument or loaded from `),cfe=a("code"),Szo=o("pretrained_model_name_or_path"),Pzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ffe=a("code"),$zo=o("pretrained_model_name_or_path"),Izo=o(":"),jzo=l(),hn=a("ul"),Zv=a("li"),mfe=a("strong"),Nzo=o("data2vec-audio"),Dzo=o(" \u2014 "),Aq=a("a"),qzo=o("Data2VecAudioForXVector"),Gzo=o(" (Data2VecAudio model)"),Ozo=l(),e6=a("li"),gfe=a("strong"),Xzo=o("unispeech-sat"),Vzo=o(" \u2014 "),Lq=a("a"),zzo=o("UniSpeechSatForXVector"),Wzo=o(" (UniSpeechSat model)"),Qzo=l(),o6=a("li"),hfe=a("strong"),Hzo=o("wav2vec2"),Uzo=o(" \u2014 "),Bq=a("a"),Jzo=o("Wav2Vec2ForXVector"),Yzo=o(" (Wav2Vec2 model)"),Kzo=l(),r6=a("li"),pfe=a("strong"),Zzo=o("wavlm"),eWo=o(" \u2014 "),xq=a("a"),oWo=o("WavLMForXVector"),rWo=o(" (WavLM model)"),tWo=l(),t6=a("p"),aWo=o("The model is set in evaluation mode by default using "),_fe=a("code"),nWo=o("model.eval()"),sWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ufe=a("code"),lWo=o("model.train()"),iWo=l(),bfe=a("p"),dWo=o("Examples:"),cWo=l(),f(hy.$$.fragment),ARe=l(),ac=a("h2"),a6=a("a"),vfe=a("span"),f(py.$$.fragment),fWo=l(),Tfe=a("span"),mWo=o("AutoModelForMaskedImageModeling"),LRe=l(),pr=a("div"),f(_y.$$.fragment),gWo=l(),nc=a("p"),hWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Ffe=a("code"),pWo=o("from_pretrained()"),_Wo=o("class method or the "),Cfe=a("code"),uWo=o("from_config()"),bWo=o(`class
method.`),vWo=l(),uy=a("p"),TWo=o("This class cannot be instantiated directly using "),Mfe=a("code"),FWo=o("__init__()"),CWo=o(" (throws an error)."),MWo=l(),ct=a("div"),f(by.$$.fragment),EWo=l(),Efe=a("p"),yWo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),wWo=l(),sc=a("p"),AWo=o(`Note:
Loading a model from its configuration file does `),yfe=a("strong"),LWo=o("not"),BWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wfe=a("code"),xWo=o("from_pretrained()"),kWo=o("to load the model weights."),RWo=l(),Afe=a("p"),SWo=o("Examples:"),PWo=l(),f(vy.$$.fragment),$Wo=l(),ro=a("div"),f(Ty.$$.fragment),IWo=l(),Lfe=a("p"),jWo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),NWo=l(),pn=a("p"),DWo=o("The model class to instantiate is selected based on the "),Bfe=a("code"),qWo=o("model_type"),GWo=o(` property of the config object (either
passed as an argument or loaded from `),xfe=a("code"),OWo=o("pretrained_model_name_or_path"),XWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kfe=a("code"),VWo=o("pretrained_model_name_or_path"),zWo=o(":"),WWo=l(),lc=a("ul"),n6=a("li"),Rfe=a("strong"),QWo=o("deit"),HWo=o(" \u2014 "),kq=a("a"),UWo=o("DeiTForMaskedImageModeling"),JWo=o(" (DeiT model)"),YWo=l(),s6=a("li"),Sfe=a("strong"),KWo=o("swin"),ZWo=o(" \u2014 "),Rq=a("a"),eQo=o("SwinForMaskedImageModeling"),oQo=o(" (Swin model)"),rQo=l(),l6=a("li"),Pfe=a("strong"),tQo=o("vit"),aQo=o(" \u2014 "),Sq=a("a"),nQo=o("ViTForMaskedImageModeling"),sQo=o(" (ViT model)"),lQo=l(),i6=a("p"),iQo=o("The model is set in evaluation mode by default using "),$fe=a("code"),dQo=o("model.eval()"),cQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ife=a("code"),fQo=o("model.train()"),mQo=l(),jfe=a("p"),gQo=o("Examples:"),hQo=l(),f(Fy.$$.fragment),BRe=l(),ic=a("h2"),d6=a("a"),Nfe=a("span"),f(Cy.$$.fragment),pQo=l(),Dfe=a("span"),_Qo=o("AutoModelForObjectDetection"),xRe=l(),_r=a("div"),f(My.$$.fragment),uQo=l(),dc=a("p"),bQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),qfe=a("code"),vQo=o("from_pretrained()"),TQo=o("class method or the "),Gfe=a("code"),FQo=o("from_config()"),CQo=o(`class
method.`),MQo=l(),Ey=a("p"),EQo=o("This class cannot be instantiated directly using "),Ofe=a("code"),yQo=o("__init__()"),wQo=o(" (throws an error)."),AQo=l(),ft=a("div"),f(yy.$$.fragment),LQo=l(),Xfe=a("p"),BQo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),xQo=l(),cc=a("p"),kQo=o(`Note:
Loading a model from its configuration file does `),Vfe=a("strong"),RQo=o("not"),SQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zfe=a("code"),PQo=o("from_pretrained()"),$Qo=o("to load the model weights."),IQo=l(),Wfe=a("p"),jQo=o("Examples:"),NQo=l(),f(wy.$$.fragment),DQo=l(),to=a("div"),f(Ay.$$.fragment),qQo=l(),Qfe=a("p"),GQo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),OQo=l(),_n=a("p"),XQo=o("The model class to instantiate is selected based on the "),Hfe=a("code"),VQo=o("model_type"),zQo=o(` property of the config object (either
passed as an argument or loaded from `),Ufe=a("code"),WQo=o("pretrained_model_name_or_path"),QQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jfe=a("code"),HQo=o("pretrained_model_name_or_path"),UQo=o(":"),JQo=l(),Yfe=a("ul"),c6=a("li"),Kfe=a("strong"),YQo=o("detr"),KQo=o(" \u2014 "),Pq=a("a"),ZQo=o("DetrForObjectDetection"),eHo=o(" (DETR model)"),oHo=l(),f6=a("p"),rHo=o("The model is set in evaluation mode by default using "),Zfe=a("code"),tHo=o("model.eval()"),aHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eme=a("code"),nHo=o("model.train()"),sHo=l(),ome=a("p"),lHo=o("Examples:"),iHo=l(),f(Ly.$$.fragment),kRe=l(),fc=a("h2"),m6=a("a"),rme=a("span"),f(By.$$.fragment),dHo=l(),tme=a("span"),cHo=o("AutoModelForImageSegmentation"),RRe=l(),ur=a("div"),f(xy.$$.fragment),fHo=l(),mc=a("p"),mHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),ame=a("code"),gHo=o("from_pretrained()"),hHo=o("class method or the "),nme=a("code"),pHo=o("from_config()"),_Ho=o(`class
method.`),uHo=l(),ky=a("p"),bHo=o("This class cannot be instantiated directly using "),sme=a("code"),vHo=o("__init__()"),THo=o(" (throws an error)."),FHo=l(),mt=a("div"),f(Ry.$$.fragment),CHo=l(),lme=a("p"),MHo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),EHo=l(),gc=a("p"),yHo=o(`Note:
Loading a model from its configuration file does `),ime=a("strong"),wHo=o("not"),AHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dme=a("code"),LHo=o("from_pretrained()"),BHo=o("to load the model weights."),xHo=l(),cme=a("p"),kHo=o("Examples:"),RHo=l(),f(Sy.$$.fragment),SHo=l(),ao=a("div"),f(Py.$$.fragment),PHo=l(),fme=a("p"),$Ho=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),IHo=l(),un=a("p"),jHo=o("The model class to instantiate is selected based on the "),mme=a("code"),NHo=o("model_type"),DHo=o(` property of the config object (either
passed as an argument or loaded from `),gme=a("code"),qHo=o("pretrained_model_name_or_path"),GHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hme=a("code"),OHo=o("pretrained_model_name_or_path"),XHo=o(":"),VHo=l(),pme=a("ul"),g6=a("li"),_me=a("strong"),zHo=o("detr"),WHo=o(" \u2014 "),$q=a("a"),QHo=o("DetrForSegmentation"),HHo=o(" (DETR model)"),UHo=l(),h6=a("p"),JHo=o("The model is set in evaluation mode by default using "),ume=a("code"),YHo=o("model.eval()"),KHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bme=a("code"),ZHo=o("model.train()"),eUo=l(),vme=a("p"),oUo=o("Examples:"),rUo=l(),f($y.$$.fragment),SRe=l(),hc=a("h2"),p6=a("a"),Tme=a("span"),f(Iy.$$.fragment),tUo=l(),Fme=a("span"),aUo=o("AutoModelForSemanticSegmentation"),PRe=l(),br=a("div"),f(jy.$$.fragment),nUo=l(),pc=a("p"),sUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Cme=a("code"),lUo=o("from_pretrained()"),iUo=o("class method or the "),Mme=a("code"),dUo=o("from_config()"),cUo=o(`class
method.`),fUo=l(),Ny=a("p"),mUo=o("This class cannot be instantiated directly using "),Eme=a("code"),gUo=o("__init__()"),hUo=o(" (throws an error)."),pUo=l(),gt=a("div"),f(Dy.$$.fragment),_Uo=l(),yme=a("p"),uUo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),bUo=l(),_c=a("p"),vUo=o(`Note:
Loading a model from its configuration file does `),wme=a("strong"),TUo=o("not"),FUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ame=a("code"),CUo=o("from_pretrained()"),MUo=o("to load the model weights."),EUo=l(),Lme=a("p"),yUo=o("Examples:"),wUo=l(),f(qy.$$.fragment),AUo=l(),no=a("div"),f(Gy.$$.fragment),LUo=l(),Bme=a("p"),BUo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),xUo=l(),bn=a("p"),kUo=o("The model class to instantiate is selected based on the "),xme=a("code"),RUo=o("model_type"),SUo=o(` property of the config object (either
passed as an argument or loaded from `),kme=a("code"),PUo=o("pretrained_model_name_or_path"),$Uo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rme=a("code"),IUo=o("pretrained_model_name_or_path"),jUo=o(":"),NUo=l(),Oy=a("ul"),_6=a("li"),Sme=a("strong"),DUo=o("beit"),qUo=o(" \u2014 "),Iq=a("a"),GUo=o("BeitForSemanticSegmentation"),OUo=o(" (BEiT model)"),XUo=l(),u6=a("li"),Pme=a("strong"),VUo=o("segformer"),zUo=o(" \u2014 "),jq=a("a"),WUo=o("SegformerForSemanticSegmentation"),QUo=o(" (SegFormer model)"),HUo=l(),b6=a("p"),UUo=o("The model is set in evaluation mode by default using "),$me=a("code"),JUo=o("model.eval()"),YUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ime=a("code"),KUo=o("model.train()"),ZUo=l(),jme=a("p"),eJo=o("Examples:"),oJo=l(),f(Xy.$$.fragment),$Re=l(),uc=a("h2"),v6=a("a"),Nme=a("span"),f(Vy.$$.fragment),rJo=l(),Dme=a("span"),tJo=o("AutoModelForInstanceSegmentation"),IRe=l(),vr=a("div"),f(zy.$$.fragment),aJo=l(),bc=a("p"),nJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),qme=a("code"),sJo=o("from_pretrained()"),lJo=o("class method or the "),Gme=a("code"),iJo=o("from_config()"),dJo=o(`class
method.`),cJo=l(),Wy=a("p"),fJo=o("This class cannot be instantiated directly using "),Ome=a("code"),mJo=o("__init__()"),gJo=o(" (throws an error)."),hJo=l(),ht=a("div"),f(Qy.$$.fragment),pJo=l(),Xme=a("p"),_Jo=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),uJo=l(),vc=a("p"),bJo=o(`Note:
Loading a model from its configuration file does `),Vme=a("strong"),vJo=o("not"),TJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zme=a("code"),FJo=o("from_pretrained()"),CJo=o("to load the model weights."),MJo=l(),Wme=a("p"),EJo=o("Examples:"),yJo=l(),f(Hy.$$.fragment),wJo=l(),so=a("div"),f(Uy.$$.fragment),AJo=l(),Qme=a("p"),LJo=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),BJo=l(),vn=a("p"),xJo=o("The model class to instantiate is selected based on the "),Hme=a("code"),kJo=o("model_type"),RJo=o(` property of the config object (either
passed as an argument or loaded from `),Ume=a("code"),SJo=o("pretrained_model_name_or_path"),PJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jme=a("code"),$Jo=o("pretrained_model_name_or_path"),IJo=o(":"),jJo=l(),Yme=a("ul"),T6=a("li"),Kme=a("strong"),NJo=o("maskformer"),DJo=o(" \u2014 "),Nq=a("a"),qJo=o("MaskFormerForInstanceSegmentation"),GJo=o(" (MaskFormer model)"),OJo=l(),F6=a("p"),XJo=o("The model is set in evaluation mode by default using "),Zme=a("code"),VJo=o("model.eval()"),zJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ege=a("code"),WJo=o("model.train()"),QJo=l(),oge=a("p"),HJo=o("Examples:"),UJo=l(),f(Jy.$$.fragment),jRe=l(),Tc=a("h2"),C6=a("a"),rge=a("span"),f(Yy.$$.fragment),JJo=l(),tge=a("span"),YJo=o("TFAutoModel"),NRe=l(),Tr=a("div"),f(Ky.$$.fragment),KJo=l(),Fc=a("p"),ZJo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),age=a("code"),eYo=o("from_pretrained()"),oYo=o("class method or the "),nge=a("code"),rYo=o("from_config()"),tYo=o(`class
method.`),aYo=l(),Zy=a("p"),nYo=o("This class cannot be instantiated directly using "),sge=a("code"),sYo=o("__init__()"),lYo=o(" (throws an error)."),iYo=l(),pt=a("div"),f(ew.$$.fragment),dYo=l(),lge=a("p"),cYo=o("Instantiates one of the base model classes of the library from a configuration."),fYo=l(),Cc=a("p"),mYo=o(`Note:
Loading a model from its configuration file does `),ige=a("strong"),gYo=o("not"),hYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dge=a("code"),pYo=o("from_pretrained()"),_Yo=o("to load the model weights."),uYo=l(),cge=a("p"),bYo=o("Examples:"),vYo=l(),f(ow.$$.fragment),TYo=l(),ho=a("div"),f(rw.$$.fragment),FYo=l(),fge=a("p"),CYo=o("Instantiate one of the base model classes of the library from a pretrained model."),MYo=l(),Tn=a("p"),EYo=o("The model class to instantiate is selected based on the "),mge=a("code"),yYo=o("model_type"),wYo=o(` property of the config object (either
passed as an argument or loaded from `),gge=a("code"),AYo=o("pretrained_model_name_or_path"),LYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hge=a("code"),BYo=o("pretrained_model_name_or_path"),xYo=o(":"),kYo=l(),B=a("ul"),M6=a("li"),pge=a("strong"),RYo=o("albert"),SYo=o(" \u2014 "),Dq=a("a"),PYo=o("TFAlbertModel"),$Yo=o(" (ALBERT model)"),IYo=l(),E6=a("li"),_ge=a("strong"),jYo=o("bart"),NYo=o(" \u2014 "),qq=a("a"),DYo=o("TFBartModel"),qYo=o(" (BART model)"),GYo=l(),y6=a("li"),uge=a("strong"),OYo=o("bert"),XYo=o(" \u2014 "),Gq=a("a"),VYo=o("TFBertModel"),zYo=o(" (BERT model)"),WYo=l(),w6=a("li"),bge=a("strong"),QYo=o("blenderbot"),HYo=o(" \u2014 "),Oq=a("a"),UYo=o("TFBlenderbotModel"),JYo=o(" (Blenderbot model)"),YYo=l(),A6=a("li"),vge=a("strong"),KYo=o("blenderbot-small"),ZYo=o(" \u2014 "),Xq=a("a"),eKo=o("TFBlenderbotSmallModel"),oKo=o(" (BlenderbotSmall model)"),rKo=l(),L6=a("li"),Tge=a("strong"),tKo=o("camembert"),aKo=o(" \u2014 "),Vq=a("a"),nKo=o("TFCamembertModel"),sKo=o(" (CamemBERT model)"),lKo=l(),B6=a("li"),Fge=a("strong"),iKo=o("clip"),dKo=o(" \u2014 "),zq=a("a"),cKo=o("TFCLIPModel"),fKo=o(" (CLIP model)"),mKo=l(),x6=a("li"),Cge=a("strong"),gKo=o("convbert"),hKo=o(" \u2014 "),Wq=a("a"),pKo=o("TFConvBertModel"),_Ko=o(" (ConvBERT model)"),uKo=l(),k6=a("li"),Mge=a("strong"),bKo=o("convnext"),vKo=o(" \u2014 "),Qq=a("a"),TKo=o("TFConvNextModel"),FKo=o(" (ConvNext model)"),CKo=l(),R6=a("li"),Ege=a("strong"),MKo=o("ctrl"),EKo=o(" \u2014 "),Hq=a("a"),yKo=o("TFCTRLModel"),wKo=o(" (CTRL model)"),AKo=l(),S6=a("li"),yge=a("strong"),LKo=o("deberta"),BKo=o(" \u2014 "),Uq=a("a"),xKo=o("TFDebertaModel"),kKo=o(" (DeBERTa model)"),RKo=l(),P6=a("li"),wge=a("strong"),SKo=o("deberta-v2"),PKo=o(" \u2014 "),Jq=a("a"),$Ko=o("TFDebertaV2Model"),IKo=o(" (DeBERTa-v2 model)"),jKo=l(),$6=a("li"),Age=a("strong"),NKo=o("distilbert"),DKo=o(" \u2014 "),Yq=a("a"),qKo=o("TFDistilBertModel"),GKo=o(" (DistilBERT model)"),OKo=l(),I6=a("li"),Lge=a("strong"),XKo=o("dpr"),VKo=o(" \u2014 "),Kq=a("a"),zKo=o("TFDPRQuestionEncoder"),WKo=o(" (DPR model)"),QKo=l(),j6=a("li"),Bge=a("strong"),HKo=o("electra"),UKo=o(" \u2014 "),Zq=a("a"),JKo=o("TFElectraModel"),YKo=o(" (ELECTRA model)"),KKo=l(),N6=a("li"),xge=a("strong"),ZKo=o("flaubert"),eZo=o(" \u2014 "),eG=a("a"),oZo=o("TFFlaubertModel"),rZo=o(" (FlauBERT model)"),tZo=l(),Ws=a("li"),kge=a("strong"),aZo=o("funnel"),nZo=o(" \u2014 "),oG=a("a"),sZo=o("TFFunnelModel"),lZo=o(" or "),rG=a("a"),iZo=o("TFFunnelBaseModel"),dZo=o(" (Funnel Transformer model)"),cZo=l(),D6=a("li"),Rge=a("strong"),fZo=o("gpt2"),mZo=o(" \u2014 "),tG=a("a"),gZo=o("TFGPT2Model"),hZo=o(" (OpenAI GPT-2 model)"),pZo=l(),q6=a("li"),Sge=a("strong"),_Zo=o("hubert"),uZo=o(" \u2014 "),aG=a("a"),bZo=o("TFHubertModel"),vZo=o(" (Hubert model)"),TZo=l(),G6=a("li"),Pge=a("strong"),FZo=o("layoutlm"),CZo=o(" \u2014 "),nG=a("a"),MZo=o("TFLayoutLMModel"),EZo=o(" (LayoutLM model)"),yZo=l(),O6=a("li"),$ge=a("strong"),wZo=o("led"),AZo=o(" \u2014 "),sG=a("a"),LZo=o("TFLEDModel"),BZo=o(" (LED model)"),xZo=l(),X6=a("li"),Ige=a("strong"),kZo=o("longformer"),RZo=o(" \u2014 "),lG=a("a"),SZo=o("TFLongformerModel"),PZo=o(" (Longformer model)"),$Zo=l(),V6=a("li"),jge=a("strong"),IZo=o("lxmert"),jZo=o(" \u2014 "),iG=a("a"),NZo=o("TFLxmertModel"),DZo=o(" (LXMERT model)"),qZo=l(),z6=a("li"),Nge=a("strong"),GZo=o("marian"),OZo=o(" \u2014 "),dG=a("a"),XZo=o("TFMarianModel"),VZo=o(" (Marian model)"),zZo=l(),W6=a("li"),Dge=a("strong"),WZo=o("mbart"),QZo=o(" \u2014 "),cG=a("a"),HZo=o("TFMBartModel"),UZo=o(" (mBART model)"),JZo=l(),Q6=a("li"),qge=a("strong"),YZo=o("mobilebert"),KZo=o(" \u2014 "),fG=a("a"),ZZo=o("TFMobileBertModel"),eer=o(" (MobileBERT model)"),oer=l(),H6=a("li"),Gge=a("strong"),rer=o("mpnet"),ter=o(" \u2014 "),mG=a("a"),aer=o("TFMPNetModel"),ner=o(" (MPNet model)"),ser=l(),U6=a("li"),Oge=a("strong"),ler=o("mt5"),ier=o(" \u2014 "),gG=a("a"),der=o("TFMT5Model"),cer=o(" (mT5 model)"),fer=l(),J6=a("li"),Xge=a("strong"),mer=o("openai-gpt"),ger=o(" \u2014 "),hG=a("a"),her=o("TFOpenAIGPTModel"),per=o(" (OpenAI GPT model)"),_er=l(),Y6=a("li"),Vge=a("strong"),uer=o("pegasus"),ber=o(" \u2014 "),pG=a("a"),ver=o("TFPegasusModel"),Ter=o(" (Pegasus model)"),Fer=l(),K6=a("li"),zge=a("strong"),Cer=o("rembert"),Mer=o(" \u2014 "),_G=a("a"),Eer=o("TFRemBertModel"),yer=o(" (RemBERT model)"),wer=l(),Z6=a("li"),Wge=a("strong"),Aer=o("roberta"),Ler=o(" \u2014 "),uG=a("a"),Ber=o("TFRobertaModel"),xer=o(" (RoBERTa model)"),ker=l(),e0=a("li"),Qge=a("strong"),Rer=o("roformer"),Ser=o(" \u2014 "),bG=a("a"),Per=o("TFRoFormerModel"),$er=o(" (RoFormer model)"),Ier=l(),o0=a("li"),Hge=a("strong"),jer=o("speech_to_text"),Ner=o(" \u2014 "),vG=a("a"),Der=o("TFSpeech2TextModel"),qer=o(" (Speech2Text model)"),Ger=l(),r0=a("li"),Uge=a("strong"),Oer=o("t5"),Xer=o(" \u2014 "),TG=a("a"),Ver=o("TFT5Model"),zer=o(" (T5 model)"),Wer=l(),t0=a("li"),Jge=a("strong"),Qer=o("tapas"),Her=o(" \u2014 "),FG=a("a"),Uer=o("TFTapasModel"),Jer=o(" (TAPAS model)"),Yer=l(),a0=a("li"),Yge=a("strong"),Ker=o("transfo-xl"),Zer=o(" \u2014 "),CG=a("a"),eor=o("TFTransfoXLModel"),oor=o(" (Transformer-XL model)"),ror=l(),n0=a("li"),Kge=a("strong"),tor=o("vit"),aor=o(" \u2014 "),MG=a("a"),nor=o("TFViTModel"),sor=o(" (ViT model)"),lor=l(),s0=a("li"),Zge=a("strong"),ior=o("wav2vec2"),dor=o(" \u2014 "),EG=a("a"),cor=o("TFWav2Vec2Model"),mor=o(" (Wav2Vec2 model)"),gor=l(),l0=a("li"),ehe=a("strong"),hor=o("xlm"),por=o(" \u2014 "),yG=a("a"),_or=o("TFXLMModel"),uor=o(" (XLM model)"),bor=l(),i0=a("li"),ohe=a("strong"),vor=o("xlm-roberta"),Tor=o(" \u2014 "),wG=a("a"),For=o("TFXLMRobertaModel"),Cor=o(" (XLM-RoBERTa model)"),Mor=l(),d0=a("li"),rhe=a("strong"),Eor=o("xlnet"),yor=o(" \u2014 "),AG=a("a"),wor=o("TFXLNetModel"),Aor=o(" (XLNet model)"),Lor=l(),the=a("p"),Bor=o("Examples:"),xor=l(),f(tw.$$.fragment),DRe=l(),Mc=a("h2"),c0=a("a"),ahe=a("span"),f(aw.$$.fragment),kor=l(),nhe=a("span"),Ror=o("TFAutoModelForPreTraining"),qRe=l(),Fr=a("div"),f(nw.$$.fragment),Sor=l(),Ec=a("p"),Por=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),she=a("code"),$or=o("from_pretrained()"),Ior=o("class method or the "),lhe=a("code"),jor=o("from_config()"),Nor=o(`class
method.`),Dor=l(),sw=a("p"),qor=o("This class cannot be instantiated directly using "),ihe=a("code"),Gor=o("__init__()"),Oor=o(" (throws an error)."),Xor=l(),_t=a("div"),f(lw.$$.fragment),Vor=l(),dhe=a("p"),zor=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Wor=l(),yc=a("p"),Qor=o(`Note:
Loading a model from its configuration file does `),che=a("strong"),Hor=o("not"),Uor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fhe=a("code"),Jor=o("from_pretrained()"),Yor=o("to load the model weights."),Kor=l(),mhe=a("p"),Zor=o("Examples:"),err=l(),f(iw.$$.fragment),orr=l(),po=a("div"),f(dw.$$.fragment),rrr=l(),ghe=a("p"),trr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),arr=l(),Fn=a("p"),nrr=o("The model class to instantiate is selected based on the "),hhe=a("code"),srr=o("model_type"),lrr=o(` property of the config object (either
passed as an argument or loaded from `),phe=a("code"),irr=o("pretrained_model_name_or_path"),drr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_he=a("code"),crr=o("pretrained_model_name_or_path"),frr=o(":"),mrr=l(),H=a("ul"),f0=a("li"),uhe=a("strong"),grr=o("albert"),hrr=o(" \u2014 "),LG=a("a"),prr=o("TFAlbertForPreTraining"),_rr=o(" (ALBERT model)"),urr=l(),m0=a("li"),bhe=a("strong"),brr=o("bart"),vrr=o(" \u2014 "),BG=a("a"),Trr=o("TFBartForConditionalGeneration"),Frr=o(" (BART model)"),Crr=l(),g0=a("li"),vhe=a("strong"),Mrr=o("bert"),Err=o(" \u2014 "),xG=a("a"),yrr=o("TFBertForPreTraining"),wrr=o(" (BERT model)"),Arr=l(),h0=a("li"),The=a("strong"),Lrr=o("camembert"),Brr=o(" \u2014 "),kG=a("a"),xrr=o("TFCamembertForMaskedLM"),krr=o(" (CamemBERT model)"),Rrr=l(),p0=a("li"),Fhe=a("strong"),Srr=o("ctrl"),Prr=o(" \u2014 "),RG=a("a"),$rr=o("TFCTRLLMHeadModel"),Irr=o(" (CTRL model)"),jrr=l(),_0=a("li"),Che=a("strong"),Nrr=o("distilbert"),Drr=o(" \u2014 "),SG=a("a"),qrr=o("TFDistilBertForMaskedLM"),Grr=o(" (DistilBERT model)"),Orr=l(),u0=a("li"),Mhe=a("strong"),Xrr=o("electra"),Vrr=o(" \u2014 "),PG=a("a"),zrr=o("TFElectraForPreTraining"),Wrr=o(" (ELECTRA model)"),Qrr=l(),b0=a("li"),Ehe=a("strong"),Hrr=o("flaubert"),Urr=o(" \u2014 "),$G=a("a"),Jrr=o("TFFlaubertWithLMHeadModel"),Yrr=o(" (FlauBERT model)"),Krr=l(),v0=a("li"),yhe=a("strong"),Zrr=o("funnel"),etr=o(" \u2014 "),IG=a("a"),otr=o("TFFunnelForPreTraining"),rtr=o(" (Funnel Transformer model)"),ttr=l(),T0=a("li"),whe=a("strong"),atr=o("gpt2"),ntr=o(" \u2014 "),jG=a("a"),str=o("TFGPT2LMHeadModel"),ltr=o(" (OpenAI GPT-2 model)"),itr=l(),F0=a("li"),Ahe=a("strong"),dtr=o("layoutlm"),ctr=o(" \u2014 "),NG=a("a"),ftr=o("TFLayoutLMForMaskedLM"),mtr=o(" (LayoutLM model)"),gtr=l(),C0=a("li"),Lhe=a("strong"),htr=o("lxmert"),ptr=o(" \u2014 "),DG=a("a"),_tr=o("TFLxmertForPreTraining"),utr=o(" (LXMERT model)"),btr=l(),M0=a("li"),Bhe=a("strong"),vtr=o("mobilebert"),Ttr=o(" \u2014 "),qG=a("a"),Ftr=o("TFMobileBertForPreTraining"),Ctr=o(" (MobileBERT model)"),Mtr=l(),E0=a("li"),xhe=a("strong"),Etr=o("mpnet"),ytr=o(" \u2014 "),GG=a("a"),wtr=o("TFMPNetForMaskedLM"),Atr=o(" (MPNet model)"),Ltr=l(),y0=a("li"),khe=a("strong"),Btr=o("openai-gpt"),xtr=o(" \u2014 "),OG=a("a"),ktr=o("TFOpenAIGPTLMHeadModel"),Rtr=o(" (OpenAI GPT model)"),Str=l(),w0=a("li"),Rhe=a("strong"),Ptr=o("roberta"),$tr=o(" \u2014 "),XG=a("a"),Itr=o("TFRobertaForMaskedLM"),jtr=o(" (RoBERTa model)"),Ntr=l(),A0=a("li"),She=a("strong"),Dtr=o("t5"),qtr=o(" \u2014 "),VG=a("a"),Gtr=o("TFT5ForConditionalGeneration"),Otr=o(" (T5 model)"),Xtr=l(),L0=a("li"),Phe=a("strong"),Vtr=o("tapas"),ztr=o(" \u2014 "),zG=a("a"),Wtr=o("TFTapasForMaskedLM"),Qtr=o(" (TAPAS model)"),Htr=l(),B0=a("li"),$he=a("strong"),Utr=o("transfo-xl"),Jtr=o(" \u2014 "),WG=a("a"),Ytr=o("TFTransfoXLLMHeadModel"),Ktr=o(" (Transformer-XL model)"),Ztr=l(),x0=a("li"),Ihe=a("strong"),ear=o("xlm"),oar=o(" \u2014 "),QG=a("a"),rar=o("TFXLMWithLMHeadModel"),tar=o(" (XLM model)"),aar=l(),k0=a("li"),jhe=a("strong"),nar=o("xlm-roberta"),sar=o(" \u2014 "),HG=a("a"),lar=o("TFXLMRobertaForMaskedLM"),iar=o(" (XLM-RoBERTa model)"),dar=l(),R0=a("li"),Nhe=a("strong"),car=o("xlnet"),far=o(" \u2014 "),UG=a("a"),mar=o("TFXLNetLMHeadModel"),gar=o(" (XLNet model)"),har=l(),Dhe=a("p"),par=o("Examples:"),_ar=l(),f(cw.$$.fragment),GRe=l(),wc=a("h2"),S0=a("a"),qhe=a("span"),f(fw.$$.fragment),uar=l(),Ghe=a("span"),bar=o("TFAutoModelForCausalLM"),ORe=l(),Cr=a("div"),f(mw.$$.fragment),Tar=l(),Ac=a("p"),Far=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Ohe=a("code"),Car=o("from_pretrained()"),Mar=o("class method or the "),Xhe=a("code"),Ear=o("from_config()"),yar=o(`class
method.`),war=l(),gw=a("p"),Aar=o("This class cannot be instantiated directly using "),Vhe=a("code"),Lar=o("__init__()"),Bar=o(" (throws an error)."),xar=l(),ut=a("div"),f(hw.$$.fragment),kar=l(),zhe=a("p"),Rar=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Sar=l(),Lc=a("p"),Par=o(`Note:
Loading a model from its configuration file does `),Whe=a("strong"),$ar=o("not"),Iar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qhe=a("code"),jar=o("from_pretrained()"),Nar=o("to load the model weights."),Dar=l(),Hhe=a("p"),qar=o("Examples:"),Gar=l(),f(pw.$$.fragment),Oar=l(),_o=a("div"),f(_w.$$.fragment),Xar=l(),Uhe=a("p"),Var=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),zar=l(),Cn=a("p"),War=o("The model class to instantiate is selected based on the "),Jhe=a("code"),Qar=o("model_type"),Har=o(` property of the config object (either
passed as an argument or loaded from `),Yhe=a("code"),Uar=o("pretrained_model_name_or_path"),Jar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Khe=a("code"),Yar=o("pretrained_model_name_or_path"),Kar=o(":"),Zar=l(),ge=a("ul"),P0=a("li"),Zhe=a("strong"),enr=o("bert"),onr=o(" \u2014 "),JG=a("a"),rnr=o("TFBertLMHeadModel"),tnr=o(" (BERT model)"),anr=l(),$0=a("li"),epe=a("strong"),nnr=o("camembert"),snr=o(" \u2014 "),YG=a("a"),lnr=o("TFCamembertForCausalLM"),inr=o(" (CamemBERT model)"),dnr=l(),I0=a("li"),ope=a("strong"),cnr=o("ctrl"),fnr=o(" \u2014 "),KG=a("a"),mnr=o("TFCTRLLMHeadModel"),gnr=o(" (CTRL model)"),hnr=l(),j0=a("li"),rpe=a("strong"),pnr=o("gpt2"),_nr=o(" \u2014 "),ZG=a("a"),unr=o("TFGPT2LMHeadModel"),bnr=o(" (OpenAI GPT-2 model)"),vnr=l(),N0=a("li"),tpe=a("strong"),Tnr=o("openai-gpt"),Fnr=o(" \u2014 "),eO=a("a"),Cnr=o("TFOpenAIGPTLMHeadModel"),Mnr=o(" (OpenAI GPT model)"),Enr=l(),D0=a("li"),ape=a("strong"),ynr=o("rembert"),wnr=o(" \u2014 "),oO=a("a"),Anr=o("TFRemBertForCausalLM"),Lnr=o(" (RemBERT model)"),Bnr=l(),q0=a("li"),npe=a("strong"),xnr=o("roberta"),knr=o(" \u2014 "),rO=a("a"),Rnr=o("TFRobertaForCausalLM"),Snr=o(" (RoBERTa model)"),Pnr=l(),G0=a("li"),spe=a("strong"),$nr=o("roformer"),Inr=o(" \u2014 "),tO=a("a"),jnr=o("TFRoFormerForCausalLM"),Nnr=o(" (RoFormer model)"),Dnr=l(),O0=a("li"),lpe=a("strong"),qnr=o("transfo-xl"),Gnr=o(" \u2014 "),aO=a("a"),Onr=o("TFTransfoXLLMHeadModel"),Xnr=o(" (Transformer-XL model)"),Vnr=l(),X0=a("li"),ipe=a("strong"),znr=o("xlm"),Wnr=o(" \u2014 "),nO=a("a"),Qnr=o("TFXLMWithLMHeadModel"),Hnr=o(" (XLM model)"),Unr=l(),V0=a("li"),dpe=a("strong"),Jnr=o("xlnet"),Ynr=o(" \u2014 "),sO=a("a"),Knr=o("TFXLNetLMHeadModel"),Znr=o(" (XLNet model)"),esr=l(),cpe=a("p"),osr=o("Examples:"),rsr=l(),f(uw.$$.fragment),XRe=l(),Bc=a("h2"),z0=a("a"),fpe=a("span"),f(bw.$$.fragment),tsr=l(),mpe=a("span"),asr=o("TFAutoModelForImageClassification"),VRe=l(),Mr=a("div"),f(vw.$$.fragment),nsr=l(),xc=a("p"),ssr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),gpe=a("code"),lsr=o("from_pretrained()"),isr=o("class method or the "),hpe=a("code"),dsr=o("from_config()"),csr=o(`class
method.`),fsr=l(),Tw=a("p"),msr=o("This class cannot be instantiated directly using "),ppe=a("code"),gsr=o("__init__()"),hsr=o(" (throws an error)."),psr=l(),bt=a("div"),f(Fw.$$.fragment),_sr=l(),_pe=a("p"),usr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),bsr=l(),kc=a("p"),vsr=o(`Note:
Loading a model from its configuration file does `),upe=a("strong"),Tsr=o("not"),Fsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bpe=a("code"),Csr=o("from_pretrained()"),Msr=o("to load the model weights."),Esr=l(),vpe=a("p"),ysr=o("Examples:"),wsr=l(),f(Cw.$$.fragment),Asr=l(),uo=a("div"),f(Mw.$$.fragment),Lsr=l(),Tpe=a("p"),Bsr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),xsr=l(),Mn=a("p"),ksr=o("The model class to instantiate is selected based on the "),Fpe=a("code"),Rsr=o("model_type"),Ssr=o(` property of the config object (either
passed as an argument or loaded from `),Cpe=a("code"),Psr=o("pretrained_model_name_or_path"),$sr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mpe=a("code"),Isr=o("pretrained_model_name_or_path"),jsr=o(":"),Nsr=l(),Ew=a("ul"),W0=a("li"),Epe=a("strong"),Dsr=o("convnext"),qsr=o(" \u2014 "),lO=a("a"),Gsr=o("TFConvNextForImageClassification"),Osr=o(" (ConvNext model)"),Xsr=l(),Q0=a("li"),ype=a("strong"),Vsr=o("vit"),zsr=o(" \u2014 "),iO=a("a"),Wsr=o("TFViTForImageClassification"),Qsr=o(" (ViT model)"),Hsr=l(),wpe=a("p"),Usr=o("Examples:"),Jsr=l(),f(yw.$$.fragment),zRe=l(),Rc=a("h2"),H0=a("a"),Ape=a("span"),f(ww.$$.fragment),Ysr=l(),Lpe=a("span"),Ksr=o("TFAutoModelForMaskedLM"),WRe=l(),Er=a("div"),f(Aw.$$.fragment),Zsr=l(),Sc=a("p"),elr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Bpe=a("code"),olr=o("from_pretrained()"),rlr=o("class method or the "),xpe=a("code"),tlr=o("from_config()"),alr=o(`class
method.`),nlr=l(),Lw=a("p"),slr=o("This class cannot be instantiated directly using "),kpe=a("code"),llr=o("__init__()"),ilr=o(" (throws an error)."),dlr=l(),vt=a("div"),f(Bw.$$.fragment),clr=l(),Rpe=a("p"),flr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),mlr=l(),Pc=a("p"),glr=o(`Note:
Loading a model from its configuration file does `),Spe=a("strong"),hlr=o("not"),plr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ppe=a("code"),_lr=o("from_pretrained()"),ulr=o("to load the model weights."),blr=l(),$pe=a("p"),vlr=o("Examples:"),Tlr=l(),f(xw.$$.fragment),Flr=l(),bo=a("div"),f(kw.$$.fragment),Clr=l(),Ipe=a("p"),Mlr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Elr=l(),En=a("p"),ylr=o("The model class to instantiate is selected based on the "),jpe=a("code"),wlr=o("model_type"),Alr=o(` property of the config object (either
passed as an argument or loaded from `),Npe=a("code"),Llr=o("pretrained_model_name_or_path"),Blr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dpe=a("code"),xlr=o("pretrained_model_name_or_path"),klr=o(":"),Rlr=l(),Y=a("ul"),U0=a("li"),qpe=a("strong"),Slr=o("albert"),Plr=o(" \u2014 "),dO=a("a"),$lr=o("TFAlbertForMaskedLM"),Ilr=o(" (ALBERT model)"),jlr=l(),J0=a("li"),Gpe=a("strong"),Nlr=o("bert"),Dlr=o(" \u2014 "),cO=a("a"),qlr=o("TFBertForMaskedLM"),Glr=o(" (BERT model)"),Olr=l(),Y0=a("li"),Ope=a("strong"),Xlr=o("camembert"),Vlr=o(" \u2014 "),fO=a("a"),zlr=o("TFCamembertForMaskedLM"),Wlr=o(" (CamemBERT model)"),Qlr=l(),K0=a("li"),Xpe=a("strong"),Hlr=o("convbert"),Ulr=o(" \u2014 "),mO=a("a"),Jlr=o("TFConvBertForMaskedLM"),Ylr=o(" (ConvBERT model)"),Klr=l(),Z0=a("li"),Vpe=a("strong"),Zlr=o("deberta"),eir=o(" \u2014 "),gO=a("a"),oir=o("TFDebertaForMaskedLM"),rir=o(" (DeBERTa model)"),tir=l(),eT=a("li"),zpe=a("strong"),air=o("deberta-v2"),nir=o(" \u2014 "),hO=a("a"),sir=o("TFDebertaV2ForMaskedLM"),lir=o(" (DeBERTa-v2 model)"),iir=l(),oT=a("li"),Wpe=a("strong"),dir=o("distilbert"),cir=o(" \u2014 "),pO=a("a"),fir=o("TFDistilBertForMaskedLM"),mir=o(" (DistilBERT model)"),gir=l(),rT=a("li"),Qpe=a("strong"),hir=o("electra"),pir=o(" \u2014 "),_O=a("a"),_ir=o("TFElectraForMaskedLM"),uir=o(" (ELECTRA model)"),bir=l(),tT=a("li"),Hpe=a("strong"),vir=o("flaubert"),Tir=o(" \u2014 "),uO=a("a"),Fir=o("TFFlaubertWithLMHeadModel"),Cir=o(" (FlauBERT model)"),Mir=l(),aT=a("li"),Upe=a("strong"),Eir=o("funnel"),yir=o(" \u2014 "),bO=a("a"),wir=o("TFFunnelForMaskedLM"),Air=o(" (Funnel Transformer model)"),Lir=l(),nT=a("li"),Jpe=a("strong"),Bir=o("layoutlm"),xir=o(" \u2014 "),vO=a("a"),kir=o("TFLayoutLMForMaskedLM"),Rir=o(" (LayoutLM model)"),Sir=l(),sT=a("li"),Ype=a("strong"),Pir=o("longformer"),$ir=o(" \u2014 "),TO=a("a"),Iir=o("TFLongformerForMaskedLM"),jir=o(" (Longformer model)"),Nir=l(),lT=a("li"),Kpe=a("strong"),Dir=o("mobilebert"),qir=o(" \u2014 "),FO=a("a"),Gir=o("TFMobileBertForMaskedLM"),Oir=o(" (MobileBERT model)"),Xir=l(),iT=a("li"),Zpe=a("strong"),Vir=o("mpnet"),zir=o(" \u2014 "),CO=a("a"),Wir=o("TFMPNetForMaskedLM"),Qir=o(" (MPNet model)"),Hir=l(),dT=a("li"),e_e=a("strong"),Uir=o("rembert"),Jir=o(" \u2014 "),MO=a("a"),Yir=o("TFRemBertForMaskedLM"),Kir=o(" (RemBERT model)"),Zir=l(),cT=a("li"),o_e=a("strong"),edr=o("roberta"),odr=o(" \u2014 "),EO=a("a"),rdr=o("TFRobertaForMaskedLM"),tdr=o(" (RoBERTa model)"),adr=l(),fT=a("li"),r_e=a("strong"),ndr=o("roformer"),sdr=o(" \u2014 "),yO=a("a"),ldr=o("TFRoFormerForMaskedLM"),idr=o(" (RoFormer model)"),ddr=l(),mT=a("li"),t_e=a("strong"),cdr=o("tapas"),fdr=o(" \u2014 "),wO=a("a"),mdr=o("TFTapasForMaskedLM"),gdr=o(" (TAPAS model)"),hdr=l(),gT=a("li"),a_e=a("strong"),pdr=o("xlm"),_dr=o(" \u2014 "),AO=a("a"),udr=o("TFXLMWithLMHeadModel"),bdr=o(" (XLM model)"),vdr=l(),hT=a("li"),n_e=a("strong"),Tdr=o("xlm-roberta"),Fdr=o(" \u2014 "),LO=a("a"),Cdr=o("TFXLMRobertaForMaskedLM"),Mdr=o(" (XLM-RoBERTa model)"),Edr=l(),s_e=a("p"),ydr=o("Examples:"),wdr=l(),f(Rw.$$.fragment),QRe=l(),$c=a("h2"),pT=a("a"),l_e=a("span"),f(Sw.$$.fragment),Adr=l(),i_e=a("span"),Ldr=o("TFAutoModelForSeq2SeqLM"),HRe=l(),yr=a("div"),f(Pw.$$.fragment),Bdr=l(),Ic=a("p"),xdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),d_e=a("code"),kdr=o("from_pretrained()"),Rdr=o("class method or the "),c_e=a("code"),Sdr=o("from_config()"),Pdr=o(`class
method.`),$dr=l(),$w=a("p"),Idr=o("This class cannot be instantiated directly using "),f_e=a("code"),jdr=o("__init__()"),Ndr=o(" (throws an error)."),Ddr=l(),Tt=a("div"),f(Iw.$$.fragment),qdr=l(),m_e=a("p"),Gdr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Odr=l(),jc=a("p"),Xdr=o(`Note:
Loading a model from its configuration file does `),g_e=a("strong"),Vdr=o("not"),zdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),h_e=a("code"),Wdr=o("from_pretrained()"),Qdr=o("to load the model weights."),Hdr=l(),p_e=a("p"),Udr=o("Examples:"),Jdr=l(),f(jw.$$.fragment),Ydr=l(),vo=a("div"),f(Nw.$$.fragment),Kdr=l(),__e=a("p"),Zdr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),ecr=l(),yn=a("p"),ocr=o("The model class to instantiate is selected based on the "),u_e=a("code"),rcr=o("model_type"),tcr=o(` property of the config object (either
passed as an argument or loaded from `),b_e=a("code"),acr=o("pretrained_model_name_or_path"),ncr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v_e=a("code"),scr=o("pretrained_model_name_or_path"),lcr=o(":"),icr=l(),ue=a("ul"),_T=a("li"),T_e=a("strong"),dcr=o("bart"),ccr=o(" \u2014 "),BO=a("a"),fcr=o("TFBartForConditionalGeneration"),mcr=o(" (BART model)"),gcr=l(),uT=a("li"),F_e=a("strong"),hcr=o("blenderbot"),pcr=o(" \u2014 "),xO=a("a"),_cr=o("TFBlenderbotForConditionalGeneration"),ucr=o(" (Blenderbot model)"),bcr=l(),bT=a("li"),C_e=a("strong"),vcr=o("blenderbot-small"),Tcr=o(" \u2014 "),kO=a("a"),Fcr=o("TFBlenderbotSmallForConditionalGeneration"),Ccr=o(" (BlenderbotSmall model)"),Mcr=l(),vT=a("li"),M_e=a("strong"),Ecr=o("encoder-decoder"),ycr=o(" \u2014 "),RO=a("a"),wcr=o("TFEncoderDecoderModel"),Acr=o(" (Encoder decoder model)"),Lcr=l(),TT=a("li"),E_e=a("strong"),Bcr=o("led"),xcr=o(" \u2014 "),SO=a("a"),kcr=o("TFLEDForConditionalGeneration"),Rcr=o(" (LED model)"),Scr=l(),FT=a("li"),y_e=a("strong"),Pcr=o("marian"),$cr=o(" \u2014 "),PO=a("a"),Icr=o("TFMarianMTModel"),jcr=o(" (Marian model)"),Ncr=l(),CT=a("li"),w_e=a("strong"),Dcr=o("mbart"),qcr=o(" \u2014 "),$O=a("a"),Gcr=o("TFMBartForConditionalGeneration"),Ocr=o(" (mBART model)"),Xcr=l(),MT=a("li"),A_e=a("strong"),Vcr=o("mt5"),zcr=o(" \u2014 "),IO=a("a"),Wcr=o("TFMT5ForConditionalGeneration"),Qcr=o(" (mT5 model)"),Hcr=l(),ET=a("li"),L_e=a("strong"),Ucr=o("pegasus"),Jcr=o(" \u2014 "),jO=a("a"),Ycr=o("TFPegasusForConditionalGeneration"),Kcr=o(" (Pegasus model)"),Zcr=l(),yT=a("li"),B_e=a("strong"),efr=o("t5"),ofr=o(" \u2014 "),NO=a("a"),rfr=o("TFT5ForConditionalGeneration"),tfr=o(" (T5 model)"),afr=l(),x_e=a("p"),nfr=o("Examples:"),sfr=l(),f(Dw.$$.fragment),URe=l(),Nc=a("h2"),wT=a("a"),k_e=a("span"),f(qw.$$.fragment),lfr=l(),R_e=a("span"),ifr=o("TFAutoModelForSequenceClassification"),JRe=l(),wr=a("div"),f(Gw.$$.fragment),dfr=l(),Dc=a("p"),cfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),S_e=a("code"),ffr=o("from_pretrained()"),mfr=o("class method or the "),P_e=a("code"),gfr=o("from_config()"),hfr=o(`class
method.`),pfr=l(),Ow=a("p"),_fr=o("This class cannot be instantiated directly using "),$_e=a("code"),ufr=o("__init__()"),bfr=o(" (throws an error)."),vfr=l(),Ft=a("div"),f(Xw.$$.fragment),Tfr=l(),I_e=a("p"),Ffr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Cfr=l(),qc=a("p"),Mfr=o(`Note:
Loading a model from its configuration file does `),j_e=a("strong"),Efr=o("not"),yfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),N_e=a("code"),wfr=o("from_pretrained()"),Afr=o("to load the model weights."),Lfr=l(),D_e=a("p"),Bfr=o("Examples:"),xfr=l(),f(Vw.$$.fragment),kfr=l(),To=a("div"),f(zw.$$.fragment),Rfr=l(),q_e=a("p"),Sfr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Pfr=l(),wn=a("p"),$fr=o("The model class to instantiate is selected based on the "),G_e=a("code"),Ifr=o("model_type"),jfr=o(` property of the config object (either
passed as an argument or loaded from `),O_e=a("code"),Nfr=o("pretrained_model_name_or_path"),Dfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X_e=a("code"),qfr=o("pretrained_model_name_or_path"),Gfr=o(":"),Ofr=l(),V=a("ul"),AT=a("li"),V_e=a("strong"),Xfr=o("albert"),Vfr=o(" \u2014 "),DO=a("a"),zfr=o("TFAlbertForSequenceClassification"),Wfr=o(" (ALBERT model)"),Qfr=l(),LT=a("li"),z_e=a("strong"),Hfr=o("bert"),Ufr=o(" \u2014 "),qO=a("a"),Jfr=o("TFBertForSequenceClassification"),Yfr=o(" (BERT model)"),Kfr=l(),BT=a("li"),W_e=a("strong"),Zfr=o("camembert"),emr=o(" \u2014 "),GO=a("a"),omr=o("TFCamembertForSequenceClassification"),rmr=o(" (CamemBERT model)"),tmr=l(),xT=a("li"),Q_e=a("strong"),amr=o("convbert"),nmr=o(" \u2014 "),OO=a("a"),smr=o("TFConvBertForSequenceClassification"),lmr=o(" (ConvBERT model)"),imr=l(),kT=a("li"),H_e=a("strong"),dmr=o("ctrl"),cmr=o(" \u2014 "),XO=a("a"),fmr=o("TFCTRLForSequenceClassification"),mmr=o(" (CTRL model)"),gmr=l(),RT=a("li"),U_e=a("strong"),hmr=o("deberta"),pmr=o(" \u2014 "),VO=a("a"),_mr=o("TFDebertaForSequenceClassification"),umr=o(" (DeBERTa model)"),bmr=l(),ST=a("li"),J_e=a("strong"),vmr=o("deberta-v2"),Tmr=o(" \u2014 "),zO=a("a"),Fmr=o("TFDebertaV2ForSequenceClassification"),Cmr=o(" (DeBERTa-v2 model)"),Mmr=l(),PT=a("li"),Y_e=a("strong"),Emr=o("distilbert"),ymr=o(" \u2014 "),WO=a("a"),wmr=o("TFDistilBertForSequenceClassification"),Amr=o(" (DistilBERT model)"),Lmr=l(),$T=a("li"),K_e=a("strong"),Bmr=o("electra"),xmr=o(" \u2014 "),QO=a("a"),kmr=o("TFElectraForSequenceClassification"),Rmr=o(" (ELECTRA model)"),Smr=l(),IT=a("li"),Z_e=a("strong"),Pmr=o("flaubert"),$mr=o(" \u2014 "),HO=a("a"),Imr=o("TFFlaubertForSequenceClassification"),jmr=o(" (FlauBERT model)"),Nmr=l(),jT=a("li"),eue=a("strong"),Dmr=o("funnel"),qmr=o(" \u2014 "),UO=a("a"),Gmr=o("TFFunnelForSequenceClassification"),Omr=o(" (Funnel Transformer model)"),Xmr=l(),NT=a("li"),oue=a("strong"),Vmr=o("gpt2"),zmr=o(" \u2014 "),JO=a("a"),Wmr=o("TFGPT2ForSequenceClassification"),Qmr=o(" (OpenAI GPT-2 model)"),Hmr=l(),DT=a("li"),rue=a("strong"),Umr=o("layoutlm"),Jmr=o(" \u2014 "),YO=a("a"),Ymr=o("TFLayoutLMForSequenceClassification"),Kmr=o(" (LayoutLM model)"),Zmr=l(),qT=a("li"),tue=a("strong"),egr=o("longformer"),ogr=o(" \u2014 "),KO=a("a"),rgr=o("TFLongformerForSequenceClassification"),tgr=o(" (Longformer model)"),agr=l(),GT=a("li"),aue=a("strong"),ngr=o("mobilebert"),sgr=o(" \u2014 "),ZO=a("a"),lgr=o("TFMobileBertForSequenceClassification"),igr=o(" (MobileBERT model)"),dgr=l(),OT=a("li"),nue=a("strong"),cgr=o("mpnet"),fgr=o(" \u2014 "),eX=a("a"),mgr=o("TFMPNetForSequenceClassification"),ggr=o(" (MPNet model)"),hgr=l(),XT=a("li"),sue=a("strong"),pgr=o("openai-gpt"),_gr=o(" \u2014 "),oX=a("a"),ugr=o("TFOpenAIGPTForSequenceClassification"),bgr=o(" (OpenAI GPT model)"),vgr=l(),VT=a("li"),lue=a("strong"),Tgr=o("rembert"),Fgr=o(" \u2014 "),rX=a("a"),Cgr=o("TFRemBertForSequenceClassification"),Mgr=o(" (RemBERT model)"),Egr=l(),zT=a("li"),iue=a("strong"),ygr=o("roberta"),wgr=o(" \u2014 "),tX=a("a"),Agr=o("TFRobertaForSequenceClassification"),Lgr=o(" (RoBERTa model)"),Bgr=l(),WT=a("li"),due=a("strong"),xgr=o("roformer"),kgr=o(" \u2014 "),aX=a("a"),Rgr=o("TFRoFormerForSequenceClassification"),Sgr=o(" (RoFormer model)"),Pgr=l(),QT=a("li"),cue=a("strong"),$gr=o("tapas"),Igr=o(" \u2014 "),nX=a("a"),jgr=o("TFTapasForSequenceClassification"),Ngr=o(" (TAPAS model)"),Dgr=l(),HT=a("li"),fue=a("strong"),qgr=o("transfo-xl"),Ggr=o(" \u2014 "),sX=a("a"),Ogr=o("TFTransfoXLForSequenceClassification"),Xgr=o(" (Transformer-XL model)"),Vgr=l(),UT=a("li"),mue=a("strong"),zgr=o("xlm"),Wgr=o(" \u2014 "),lX=a("a"),Qgr=o("TFXLMForSequenceClassification"),Hgr=o(" (XLM model)"),Ugr=l(),JT=a("li"),gue=a("strong"),Jgr=o("xlm-roberta"),Ygr=o(" \u2014 "),iX=a("a"),Kgr=o("TFXLMRobertaForSequenceClassification"),Zgr=o(" (XLM-RoBERTa model)"),ehr=l(),YT=a("li"),hue=a("strong"),ohr=o("xlnet"),rhr=o(" \u2014 "),dX=a("a"),thr=o("TFXLNetForSequenceClassification"),ahr=o(" (XLNet model)"),nhr=l(),pue=a("p"),shr=o("Examples:"),lhr=l(),f(Ww.$$.fragment),YRe=l(),Gc=a("h2"),KT=a("a"),_ue=a("span"),f(Qw.$$.fragment),ihr=l(),uue=a("span"),dhr=o("TFAutoModelForMultipleChoice"),KRe=l(),Ar=a("div"),f(Hw.$$.fragment),chr=l(),Oc=a("p"),fhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),bue=a("code"),mhr=o("from_pretrained()"),ghr=o("class method or the "),vue=a("code"),hhr=o("from_config()"),phr=o(`class
method.`),_hr=l(),Uw=a("p"),uhr=o("This class cannot be instantiated directly using "),Tue=a("code"),bhr=o("__init__()"),vhr=o(" (throws an error)."),Thr=l(),Ct=a("div"),f(Jw.$$.fragment),Fhr=l(),Fue=a("p"),Chr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Mhr=l(),Xc=a("p"),Ehr=o(`Note:
Loading a model from its configuration file does `),Cue=a("strong"),yhr=o("not"),whr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mue=a("code"),Ahr=o("from_pretrained()"),Lhr=o("to load the model weights."),Bhr=l(),Eue=a("p"),xhr=o("Examples:"),khr=l(),f(Yw.$$.fragment),Rhr=l(),Fo=a("div"),f(Kw.$$.fragment),Shr=l(),yue=a("p"),Phr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),$hr=l(),An=a("p"),Ihr=o("The model class to instantiate is selected based on the "),wue=a("code"),jhr=o("model_type"),Nhr=o(` property of the config object (either
passed as an argument or loaded from `),Aue=a("code"),Dhr=o("pretrained_model_name_or_path"),qhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lue=a("code"),Ghr=o("pretrained_model_name_or_path"),Ohr=o(":"),Xhr=l(),ae=a("ul"),ZT=a("li"),Bue=a("strong"),Vhr=o("albert"),zhr=o(" \u2014 "),cX=a("a"),Whr=o("TFAlbertForMultipleChoice"),Qhr=o(" (ALBERT model)"),Hhr=l(),e8=a("li"),xue=a("strong"),Uhr=o("bert"),Jhr=o(" \u2014 "),fX=a("a"),Yhr=o("TFBertForMultipleChoice"),Khr=o(" (BERT model)"),Zhr=l(),o8=a("li"),kue=a("strong"),epr=o("camembert"),opr=o(" \u2014 "),mX=a("a"),rpr=o("TFCamembertForMultipleChoice"),tpr=o(" (CamemBERT model)"),apr=l(),r8=a("li"),Rue=a("strong"),npr=o("convbert"),spr=o(" \u2014 "),gX=a("a"),lpr=o("TFConvBertForMultipleChoice"),ipr=o(" (ConvBERT model)"),dpr=l(),t8=a("li"),Sue=a("strong"),cpr=o("distilbert"),fpr=o(" \u2014 "),hX=a("a"),mpr=o("TFDistilBertForMultipleChoice"),gpr=o(" (DistilBERT model)"),hpr=l(),a8=a("li"),Pue=a("strong"),ppr=o("electra"),_pr=o(" \u2014 "),pX=a("a"),upr=o("TFElectraForMultipleChoice"),bpr=o(" (ELECTRA model)"),vpr=l(),n8=a("li"),$ue=a("strong"),Tpr=o("flaubert"),Fpr=o(" \u2014 "),_X=a("a"),Cpr=o("TFFlaubertForMultipleChoice"),Mpr=o(" (FlauBERT model)"),Epr=l(),s8=a("li"),Iue=a("strong"),ypr=o("funnel"),wpr=o(" \u2014 "),uX=a("a"),Apr=o("TFFunnelForMultipleChoice"),Lpr=o(" (Funnel Transformer model)"),Bpr=l(),l8=a("li"),jue=a("strong"),xpr=o("longformer"),kpr=o(" \u2014 "),bX=a("a"),Rpr=o("TFLongformerForMultipleChoice"),Spr=o(" (Longformer model)"),Ppr=l(),i8=a("li"),Nue=a("strong"),$pr=o("mobilebert"),Ipr=o(" \u2014 "),vX=a("a"),jpr=o("TFMobileBertForMultipleChoice"),Npr=o(" (MobileBERT model)"),Dpr=l(),d8=a("li"),Due=a("strong"),qpr=o("mpnet"),Gpr=o(" \u2014 "),TX=a("a"),Opr=o("TFMPNetForMultipleChoice"),Xpr=o(" (MPNet model)"),Vpr=l(),c8=a("li"),que=a("strong"),zpr=o("rembert"),Wpr=o(" \u2014 "),FX=a("a"),Qpr=o("TFRemBertForMultipleChoice"),Hpr=o(" (RemBERT model)"),Upr=l(),f8=a("li"),Gue=a("strong"),Jpr=o("roberta"),Ypr=o(" \u2014 "),CX=a("a"),Kpr=o("TFRobertaForMultipleChoice"),Zpr=o(" (RoBERTa model)"),e_r=l(),m8=a("li"),Oue=a("strong"),o_r=o("roformer"),r_r=o(" \u2014 "),MX=a("a"),t_r=o("TFRoFormerForMultipleChoice"),a_r=o(" (RoFormer model)"),n_r=l(),g8=a("li"),Xue=a("strong"),s_r=o("xlm"),l_r=o(" \u2014 "),EX=a("a"),i_r=o("TFXLMForMultipleChoice"),d_r=o(" (XLM model)"),c_r=l(),h8=a("li"),Vue=a("strong"),f_r=o("xlm-roberta"),m_r=o(" \u2014 "),yX=a("a"),g_r=o("TFXLMRobertaForMultipleChoice"),h_r=o(" (XLM-RoBERTa model)"),p_r=l(),p8=a("li"),zue=a("strong"),__r=o("xlnet"),u_r=o(" \u2014 "),wX=a("a"),b_r=o("TFXLNetForMultipleChoice"),v_r=o(" (XLNet model)"),T_r=l(),Wue=a("p"),F_r=o("Examples:"),C_r=l(),f(Zw.$$.fragment),ZRe=l(),Vc=a("h2"),_8=a("a"),Que=a("span"),f(eA.$$.fragment),M_r=l(),Hue=a("span"),E_r=o("TFAutoModelForTableQuestionAnswering"),eSe=l(),Lr=a("div"),f(oA.$$.fragment),y_r=l(),zc=a("p"),w_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Uue=a("code"),A_r=o("from_pretrained()"),L_r=o("class method or the "),Jue=a("code"),B_r=o("from_config()"),x_r=o(`class
method.`),k_r=l(),rA=a("p"),R_r=o("This class cannot be instantiated directly using "),Yue=a("code"),S_r=o("__init__()"),P_r=o(" (throws an error)."),$_r=l(),Mt=a("div"),f(tA.$$.fragment),I_r=l(),Kue=a("p"),j_r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),N_r=l(),Wc=a("p"),D_r=o(`Note:
Loading a model from its configuration file does `),Zue=a("strong"),q_r=o("not"),G_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),e1e=a("code"),O_r=o("from_pretrained()"),X_r=o("to load the model weights."),V_r=l(),o1e=a("p"),z_r=o("Examples:"),W_r=l(),f(aA.$$.fragment),Q_r=l(),Co=a("div"),f(nA.$$.fragment),H_r=l(),r1e=a("p"),U_r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),J_r=l(),Ln=a("p"),Y_r=o("The model class to instantiate is selected based on the "),t1e=a("code"),K_r=o("model_type"),Z_r=o(` property of the config object (either
passed as an argument or loaded from `),a1e=a("code"),eur=o("pretrained_model_name_or_path"),our=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n1e=a("code"),rur=o("pretrained_model_name_or_path"),tur=o(":"),aur=l(),s1e=a("ul"),u8=a("li"),l1e=a("strong"),nur=o("tapas"),sur=o(" \u2014 "),AX=a("a"),lur=o("TFTapasForQuestionAnswering"),iur=o(" (TAPAS model)"),dur=l(),i1e=a("p"),cur=o("Examples:"),fur=l(),f(sA.$$.fragment),oSe=l(),Qc=a("h2"),b8=a("a"),d1e=a("span"),f(lA.$$.fragment),mur=l(),c1e=a("span"),gur=o("TFAutoModelForTokenClassification"),rSe=l(),Br=a("div"),f(iA.$$.fragment),hur=l(),Hc=a("p"),pur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),f1e=a("code"),_ur=o("from_pretrained()"),uur=o("class method or the "),m1e=a("code"),bur=o("from_config()"),vur=o(`class
method.`),Tur=l(),dA=a("p"),Fur=o("This class cannot be instantiated directly using "),g1e=a("code"),Cur=o("__init__()"),Mur=o(" (throws an error)."),Eur=l(),Et=a("div"),f(cA.$$.fragment),yur=l(),h1e=a("p"),wur=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Aur=l(),Uc=a("p"),Lur=o(`Note:
Loading a model from its configuration file does `),p1e=a("strong"),Bur=o("not"),xur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_1e=a("code"),kur=o("from_pretrained()"),Rur=o("to load the model weights."),Sur=l(),u1e=a("p"),Pur=o("Examples:"),$ur=l(),f(fA.$$.fragment),Iur=l(),Mo=a("div"),f(mA.$$.fragment),jur=l(),b1e=a("p"),Nur=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Dur=l(),Bn=a("p"),qur=o("The model class to instantiate is selected based on the "),v1e=a("code"),Gur=o("model_type"),Our=o(` property of the config object (either
passed as an argument or loaded from `),T1e=a("code"),Xur=o("pretrained_model_name_or_path"),Vur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F1e=a("code"),zur=o("pretrained_model_name_or_path"),Wur=o(":"),Qur=l(),K=a("ul"),v8=a("li"),C1e=a("strong"),Hur=o("albert"),Uur=o(" \u2014 "),LX=a("a"),Jur=o("TFAlbertForTokenClassification"),Yur=o(" (ALBERT model)"),Kur=l(),T8=a("li"),M1e=a("strong"),Zur=o("bert"),e1r=o(" \u2014 "),BX=a("a"),o1r=o("TFBertForTokenClassification"),r1r=o(" (BERT model)"),t1r=l(),F8=a("li"),E1e=a("strong"),a1r=o("camembert"),n1r=o(" \u2014 "),xX=a("a"),s1r=o("TFCamembertForTokenClassification"),l1r=o(" (CamemBERT model)"),i1r=l(),C8=a("li"),y1e=a("strong"),d1r=o("convbert"),c1r=o(" \u2014 "),kX=a("a"),f1r=o("TFConvBertForTokenClassification"),m1r=o(" (ConvBERT model)"),g1r=l(),M8=a("li"),w1e=a("strong"),h1r=o("deberta"),p1r=o(" \u2014 "),RX=a("a"),_1r=o("TFDebertaForTokenClassification"),u1r=o(" (DeBERTa model)"),b1r=l(),E8=a("li"),A1e=a("strong"),v1r=o("deberta-v2"),T1r=o(" \u2014 "),SX=a("a"),F1r=o("TFDebertaV2ForTokenClassification"),C1r=o(" (DeBERTa-v2 model)"),M1r=l(),y8=a("li"),L1e=a("strong"),E1r=o("distilbert"),y1r=o(" \u2014 "),PX=a("a"),w1r=o("TFDistilBertForTokenClassification"),A1r=o(" (DistilBERT model)"),L1r=l(),w8=a("li"),B1e=a("strong"),B1r=o("electra"),x1r=o(" \u2014 "),$X=a("a"),k1r=o("TFElectraForTokenClassification"),R1r=o(" (ELECTRA model)"),S1r=l(),A8=a("li"),x1e=a("strong"),P1r=o("flaubert"),$1r=o(" \u2014 "),IX=a("a"),I1r=o("TFFlaubertForTokenClassification"),j1r=o(" (FlauBERT model)"),N1r=l(),L8=a("li"),k1e=a("strong"),D1r=o("funnel"),q1r=o(" \u2014 "),jX=a("a"),G1r=o("TFFunnelForTokenClassification"),O1r=o(" (Funnel Transformer model)"),X1r=l(),B8=a("li"),R1e=a("strong"),V1r=o("layoutlm"),z1r=o(" \u2014 "),NX=a("a"),W1r=o("TFLayoutLMForTokenClassification"),Q1r=o(" (LayoutLM model)"),H1r=l(),x8=a("li"),S1e=a("strong"),U1r=o("longformer"),J1r=o(" \u2014 "),DX=a("a"),Y1r=o("TFLongformerForTokenClassification"),K1r=o(" (Longformer model)"),Z1r=l(),k8=a("li"),P1e=a("strong"),ebr=o("mobilebert"),obr=o(" \u2014 "),qX=a("a"),rbr=o("TFMobileBertForTokenClassification"),tbr=o(" (MobileBERT model)"),abr=l(),R8=a("li"),$1e=a("strong"),nbr=o("mpnet"),sbr=o(" \u2014 "),GX=a("a"),lbr=o("TFMPNetForTokenClassification"),ibr=o(" (MPNet model)"),dbr=l(),S8=a("li"),I1e=a("strong"),cbr=o("rembert"),fbr=o(" \u2014 "),OX=a("a"),mbr=o("TFRemBertForTokenClassification"),gbr=o(" (RemBERT model)"),hbr=l(),P8=a("li"),j1e=a("strong"),pbr=o("roberta"),_br=o(" \u2014 "),XX=a("a"),ubr=o("TFRobertaForTokenClassification"),bbr=o(" (RoBERTa model)"),vbr=l(),$8=a("li"),N1e=a("strong"),Tbr=o("roformer"),Fbr=o(" \u2014 "),VX=a("a"),Cbr=o("TFRoFormerForTokenClassification"),Mbr=o(" (RoFormer model)"),Ebr=l(),I8=a("li"),D1e=a("strong"),ybr=o("xlm"),wbr=o(" \u2014 "),zX=a("a"),Abr=o("TFXLMForTokenClassification"),Lbr=o(" (XLM model)"),Bbr=l(),j8=a("li"),q1e=a("strong"),xbr=o("xlm-roberta"),kbr=o(" \u2014 "),WX=a("a"),Rbr=o("TFXLMRobertaForTokenClassification"),Sbr=o(" (XLM-RoBERTa model)"),Pbr=l(),N8=a("li"),G1e=a("strong"),$br=o("xlnet"),Ibr=o(" \u2014 "),QX=a("a"),jbr=o("TFXLNetForTokenClassification"),Nbr=o(" (XLNet model)"),Dbr=l(),O1e=a("p"),qbr=o("Examples:"),Gbr=l(),f(gA.$$.fragment),tSe=l(),Jc=a("h2"),D8=a("a"),X1e=a("span"),f(hA.$$.fragment),Obr=l(),V1e=a("span"),Xbr=o("TFAutoModelForQuestionAnswering"),aSe=l(),xr=a("div"),f(pA.$$.fragment),Vbr=l(),Yc=a("p"),zbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),z1e=a("code"),Wbr=o("from_pretrained()"),Qbr=o("class method or the "),W1e=a("code"),Hbr=o("from_config()"),Ubr=o(`class
method.`),Jbr=l(),_A=a("p"),Ybr=o("This class cannot be instantiated directly using "),Q1e=a("code"),Kbr=o("__init__()"),Zbr=o(" (throws an error)."),e5r=l(),yt=a("div"),f(uA.$$.fragment),o5r=l(),H1e=a("p"),r5r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),t5r=l(),Kc=a("p"),a5r=o(`Note:
Loading a model from its configuration file does `),U1e=a("strong"),n5r=o("not"),s5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),J1e=a("code"),l5r=o("from_pretrained()"),i5r=o("to load the model weights."),d5r=l(),Y1e=a("p"),c5r=o("Examples:"),f5r=l(),f(bA.$$.fragment),m5r=l(),Eo=a("div"),f(vA.$$.fragment),g5r=l(),K1e=a("p"),h5r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),p5r=l(),xn=a("p"),_5r=o("The model class to instantiate is selected based on the "),Z1e=a("code"),u5r=o("model_type"),b5r=o(` property of the config object (either
passed as an argument or loaded from `),ebe=a("code"),v5r=o("pretrained_model_name_or_path"),T5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),obe=a("code"),F5r=o("pretrained_model_name_or_path"),C5r=o(":"),M5r=l(),Z=a("ul"),q8=a("li"),rbe=a("strong"),E5r=o("albert"),y5r=o(" \u2014 "),HX=a("a"),w5r=o("TFAlbertForQuestionAnswering"),A5r=o(" (ALBERT model)"),L5r=l(),G8=a("li"),tbe=a("strong"),B5r=o("bert"),x5r=o(" \u2014 "),UX=a("a"),k5r=o("TFBertForQuestionAnswering"),R5r=o(" (BERT model)"),S5r=l(),O8=a("li"),abe=a("strong"),P5r=o("camembert"),$5r=o(" \u2014 "),JX=a("a"),I5r=o("TFCamembertForQuestionAnswering"),j5r=o(" (CamemBERT model)"),N5r=l(),X8=a("li"),nbe=a("strong"),D5r=o("convbert"),q5r=o(" \u2014 "),YX=a("a"),G5r=o("TFConvBertForQuestionAnswering"),O5r=o(" (ConvBERT model)"),X5r=l(),V8=a("li"),sbe=a("strong"),V5r=o("deberta"),z5r=o(" \u2014 "),KX=a("a"),W5r=o("TFDebertaForQuestionAnswering"),Q5r=o(" (DeBERTa model)"),H5r=l(),z8=a("li"),lbe=a("strong"),U5r=o("deberta-v2"),J5r=o(" \u2014 "),ZX=a("a"),Y5r=o("TFDebertaV2ForQuestionAnswering"),K5r=o(" (DeBERTa-v2 model)"),Z5r=l(),W8=a("li"),ibe=a("strong"),e2r=o("distilbert"),o2r=o(" \u2014 "),eV=a("a"),r2r=o("TFDistilBertForQuestionAnswering"),t2r=o(" (DistilBERT model)"),a2r=l(),Q8=a("li"),dbe=a("strong"),n2r=o("electra"),s2r=o(" \u2014 "),oV=a("a"),l2r=o("TFElectraForQuestionAnswering"),i2r=o(" (ELECTRA model)"),d2r=l(),H8=a("li"),cbe=a("strong"),c2r=o("flaubert"),f2r=o(" \u2014 "),rV=a("a"),m2r=o("TFFlaubertForQuestionAnsweringSimple"),g2r=o(" (FlauBERT model)"),h2r=l(),U8=a("li"),fbe=a("strong"),p2r=o("funnel"),_2r=o(" \u2014 "),tV=a("a"),u2r=o("TFFunnelForQuestionAnswering"),b2r=o(" (Funnel Transformer model)"),v2r=l(),J8=a("li"),mbe=a("strong"),T2r=o("longformer"),F2r=o(" \u2014 "),aV=a("a"),C2r=o("TFLongformerForQuestionAnswering"),M2r=o(" (Longformer model)"),E2r=l(),Y8=a("li"),gbe=a("strong"),y2r=o("mobilebert"),w2r=o(" \u2014 "),nV=a("a"),A2r=o("TFMobileBertForQuestionAnswering"),L2r=o(" (MobileBERT model)"),B2r=l(),K8=a("li"),hbe=a("strong"),x2r=o("mpnet"),k2r=o(" \u2014 "),sV=a("a"),R2r=o("TFMPNetForQuestionAnswering"),S2r=o(" (MPNet model)"),P2r=l(),Z8=a("li"),pbe=a("strong"),$2r=o("rembert"),I2r=o(" \u2014 "),lV=a("a"),j2r=o("TFRemBertForQuestionAnswering"),N2r=o(" (RemBERT model)"),D2r=l(),eF=a("li"),_be=a("strong"),q2r=o("roberta"),G2r=o(" \u2014 "),iV=a("a"),O2r=o("TFRobertaForQuestionAnswering"),X2r=o(" (RoBERTa model)"),V2r=l(),oF=a("li"),ube=a("strong"),z2r=o("roformer"),W2r=o(" \u2014 "),dV=a("a"),Q2r=o("TFRoFormerForQuestionAnswering"),H2r=o(" (RoFormer model)"),U2r=l(),rF=a("li"),bbe=a("strong"),J2r=o("xlm"),Y2r=o(" \u2014 "),cV=a("a"),K2r=o("TFXLMForQuestionAnsweringSimple"),Z2r=o(" (XLM model)"),evr=l(),tF=a("li"),vbe=a("strong"),ovr=o("xlm-roberta"),rvr=o(" \u2014 "),fV=a("a"),tvr=o("TFXLMRobertaForQuestionAnswering"),avr=o(" (XLM-RoBERTa model)"),nvr=l(),aF=a("li"),Tbe=a("strong"),svr=o("xlnet"),lvr=o(" \u2014 "),mV=a("a"),ivr=o("TFXLNetForQuestionAnsweringSimple"),dvr=o(" (XLNet model)"),cvr=l(),Fbe=a("p"),fvr=o("Examples:"),mvr=l(),f(TA.$$.fragment),nSe=l(),Zc=a("h2"),nF=a("a"),Cbe=a("span"),f(FA.$$.fragment),gvr=l(),Mbe=a("span"),hvr=o("TFAutoModelForVision2Seq"),sSe=l(),kr=a("div"),f(CA.$$.fragment),pvr=l(),ef=a("p"),_vr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Ebe=a("code"),uvr=o("from_pretrained()"),bvr=o("class method or the "),ybe=a("code"),vvr=o("from_config()"),Tvr=o(`class
method.`),Fvr=l(),MA=a("p"),Cvr=o("This class cannot be instantiated directly using "),wbe=a("code"),Mvr=o("__init__()"),Evr=o(" (throws an error)."),yvr=l(),wt=a("div"),f(EA.$$.fragment),wvr=l(),Abe=a("p"),Avr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Lvr=l(),of=a("p"),Bvr=o(`Note:
Loading a model from its configuration file does `),Lbe=a("strong"),xvr=o("not"),kvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bbe=a("code"),Rvr=o("from_pretrained()"),Svr=o("to load the model weights."),Pvr=l(),xbe=a("p"),$vr=o("Examples:"),Ivr=l(),f(yA.$$.fragment),jvr=l(),yo=a("div"),f(wA.$$.fragment),Nvr=l(),kbe=a("p"),Dvr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),qvr=l(),kn=a("p"),Gvr=o("The model class to instantiate is selected based on the "),Rbe=a("code"),Ovr=o("model_type"),Xvr=o(` property of the config object (either
passed as an argument or loaded from `),Sbe=a("code"),Vvr=o("pretrained_model_name_or_path"),zvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pbe=a("code"),Wvr=o("pretrained_model_name_or_path"),Qvr=o(":"),Hvr=l(),$be=a("ul"),sF=a("li"),Ibe=a("strong"),Uvr=o("vision-encoder-decoder"),Jvr=o(" \u2014 "),gV=a("a"),Yvr=o("TFVisionEncoderDecoderModel"),Kvr=o(" (Vision Encoder decoder model)"),Zvr=l(),jbe=a("p"),e6r=o("Examples:"),o6r=l(),f(AA.$$.fragment),lSe=l(),rf=a("h2"),lF=a("a"),Nbe=a("span"),f(LA.$$.fragment),r6r=l(),Dbe=a("span"),t6r=o("TFAutoModelForSpeechSeq2Seq"),iSe=l(),Rr=a("div"),f(BA.$$.fragment),a6r=l(),tf=a("p"),n6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),qbe=a("code"),s6r=o("from_pretrained()"),l6r=o("class method or the "),Gbe=a("code"),i6r=o("from_config()"),d6r=o(`class
method.`),c6r=l(),xA=a("p"),f6r=o("This class cannot be instantiated directly using "),Obe=a("code"),m6r=o("__init__()"),g6r=o(" (throws an error)."),h6r=l(),At=a("div"),f(kA.$$.fragment),p6r=l(),Xbe=a("p"),_6r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),u6r=l(),af=a("p"),b6r=o(`Note:
Loading a model from its configuration file does `),Vbe=a("strong"),v6r=o("not"),T6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zbe=a("code"),F6r=o("from_pretrained()"),C6r=o("to load the model weights."),M6r=l(),Wbe=a("p"),E6r=o("Examples:"),y6r=l(),f(RA.$$.fragment),w6r=l(),wo=a("div"),f(SA.$$.fragment),A6r=l(),Qbe=a("p"),L6r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),B6r=l(),Rn=a("p"),x6r=o("The model class to instantiate is selected based on the "),Hbe=a("code"),k6r=o("model_type"),R6r=o(` property of the config object (either
passed as an argument or loaded from `),Ube=a("code"),S6r=o("pretrained_model_name_or_path"),P6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jbe=a("code"),$6r=o("pretrained_model_name_or_path"),I6r=o(":"),j6r=l(),Ybe=a("ul"),iF=a("li"),Kbe=a("strong"),N6r=o("speech_to_text"),D6r=o(" \u2014 "),hV=a("a"),q6r=o("TFSpeech2TextForConditionalGeneration"),G6r=o(" (Speech2Text model)"),O6r=l(),Zbe=a("p"),X6r=o("Examples:"),V6r=l(),f(PA.$$.fragment),dSe=l(),nf=a("h2"),dF=a("a"),e5e=a("span"),f($A.$$.fragment),z6r=l(),o5e=a("span"),W6r=o("FlaxAutoModel"),cSe=l(),Sr=a("div"),f(IA.$$.fragment),Q6r=l(),sf=a("p"),H6r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),r5e=a("code"),U6r=o("from_pretrained()"),J6r=o("class method or the "),t5e=a("code"),Y6r=o("from_config()"),K6r=o(`class
method.`),Z6r=l(),jA=a("p"),e0r=o("This class cannot be instantiated directly using "),a5e=a("code"),o0r=o("__init__()"),r0r=o(" (throws an error)."),t0r=l(),Lt=a("div"),f(NA.$$.fragment),a0r=l(),n5e=a("p"),n0r=o("Instantiates one of the base model classes of the library from a configuration."),s0r=l(),lf=a("p"),l0r=o(`Note:
Loading a model from its configuration file does `),s5e=a("strong"),i0r=o("not"),d0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),l5e=a("code"),c0r=o("from_pretrained()"),f0r=o("to load the model weights."),m0r=l(),i5e=a("p"),g0r=o("Examples:"),h0r=l(),f(DA.$$.fragment),p0r=l(),Ao=a("div"),f(qA.$$.fragment),_0r=l(),d5e=a("p"),u0r=o("Instantiate one of the base model classes of the library from a pretrained model."),b0r=l(),Sn=a("p"),v0r=o("The model class to instantiate is selected based on the "),c5e=a("code"),T0r=o("model_type"),F0r=o(` property of the config object (either
passed as an argument or loaded from `),f5e=a("code"),C0r=o("pretrained_model_name_or_path"),M0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m5e=a("code"),E0r=o("pretrained_model_name_or_path"),y0r=o(":"),w0r=l(),z=a("ul"),cF=a("li"),g5e=a("strong"),A0r=o("albert"),L0r=o(" \u2014 "),pV=a("a"),B0r=o("FlaxAlbertModel"),x0r=o(" (ALBERT model)"),k0r=l(),fF=a("li"),h5e=a("strong"),R0r=o("bart"),S0r=o(" \u2014 "),_V=a("a"),P0r=o("FlaxBartModel"),$0r=o(" (BART model)"),I0r=l(),mF=a("li"),p5e=a("strong"),j0r=o("beit"),N0r=o(" \u2014 "),uV=a("a"),D0r=o("FlaxBeitModel"),q0r=o(" (BEiT model)"),G0r=l(),gF=a("li"),_5e=a("strong"),O0r=o("bert"),X0r=o(" \u2014 "),bV=a("a"),V0r=o("FlaxBertModel"),z0r=o(" (BERT model)"),W0r=l(),hF=a("li"),u5e=a("strong"),Q0r=o("big_bird"),H0r=o(" \u2014 "),vV=a("a"),U0r=o("FlaxBigBirdModel"),J0r=o(" (BigBird model)"),Y0r=l(),pF=a("li"),b5e=a("strong"),K0r=o("blenderbot"),Z0r=o(" \u2014 "),TV=a("a"),eTr=o("FlaxBlenderbotModel"),oTr=o(" (Blenderbot model)"),rTr=l(),_F=a("li"),v5e=a("strong"),tTr=o("blenderbot-small"),aTr=o(" \u2014 "),FV=a("a"),nTr=o("FlaxBlenderbotSmallModel"),sTr=o(" (BlenderbotSmall model)"),lTr=l(),uF=a("li"),T5e=a("strong"),iTr=o("clip"),dTr=o(" \u2014 "),CV=a("a"),cTr=o("FlaxCLIPModel"),fTr=o(" (CLIP model)"),mTr=l(),bF=a("li"),F5e=a("strong"),gTr=o("distilbert"),hTr=o(" \u2014 "),MV=a("a"),pTr=o("FlaxDistilBertModel"),_Tr=o(" (DistilBERT model)"),uTr=l(),vF=a("li"),C5e=a("strong"),bTr=o("electra"),vTr=o(" \u2014 "),EV=a("a"),TTr=o("FlaxElectraModel"),FTr=o(" (ELECTRA model)"),CTr=l(),TF=a("li"),M5e=a("strong"),MTr=o("gpt2"),ETr=o(" \u2014 "),yV=a("a"),yTr=o("FlaxGPT2Model"),wTr=o(" (OpenAI GPT-2 model)"),ATr=l(),FF=a("li"),E5e=a("strong"),LTr=o("gpt_neo"),BTr=o(" \u2014 "),wV=a("a"),xTr=o("FlaxGPTNeoModel"),kTr=o(" (GPT Neo model)"),RTr=l(),CF=a("li"),y5e=a("strong"),STr=o("gptj"),PTr=o(" \u2014 "),AV=a("a"),$Tr=o("FlaxGPTJModel"),ITr=o(" (GPT-J model)"),jTr=l(),MF=a("li"),w5e=a("strong"),NTr=o("marian"),DTr=o(" \u2014 "),LV=a("a"),qTr=o("FlaxMarianModel"),GTr=o(" (Marian model)"),OTr=l(),EF=a("li"),A5e=a("strong"),XTr=o("mbart"),VTr=o(" \u2014 "),BV=a("a"),zTr=o("FlaxMBartModel"),WTr=o(" (mBART model)"),QTr=l(),yF=a("li"),L5e=a("strong"),HTr=o("mt5"),UTr=o(" \u2014 "),xV=a("a"),JTr=o("FlaxMT5Model"),YTr=o(" (mT5 model)"),KTr=l(),wF=a("li"),B5e=a("strong"),ZTr=o("pegasus"),e8r=o(" \u2014 "),kV=a("a"),o8r=o("FlaxPegasusModel"),r8r=o(" (Pegasus model)"),t8r=l(),AF=a("li"),x5e=a("strong"),a8r=o("roberta"),n8r=o(" \u2014 "),RV=a("a"),s8r=o("FlaxRobertaModel"),l8r=o(" (RoBERTa model)"),i8r=l(),LF=a("li"),k5e=a("strong"),d8r=o("roformer"),c8r=o(" \u2014 "),SV=a("a"),f8r=o("FlaxRoFormerModel"),m8r=o(" (RoFormer model)"),g8r=l(),BF=a("li"),R5e=a("strong"),h8r=o("t5"),p8r=o(" \u2014 "),PV=a("a"),_8r=o("FlaxT5Model"),u8r=o(" (T5 model)"),b8r=l(),xF=a("li"),S5e=a("strong"),v8r=o("vision-text-dual-encoder"),T8r=o(" \u2014 "),$V=a("a"),F8r=o("FlaxVisionTextDualEncoderModel"),C8r=o(" (VisionTextDualEncoder model)"),M8r=l(),kF=a("li"),P5e=a("strong"),E8r=o("vit"),y8r=o(" \u2014 "),IV=a("a"),w8r=o("FlaxViTModel"),A8r=o(" (ViT model)"),L8r=l(),RF=a("li"),$5e=a("strong"),B8r=o("wav2vec2"),x8r=o(" \u2014 "),jV=a("a"),k8r=o("FlaxWav2Vec2Model"),R8r=o(" (Wav2Vec2 model)"),S8r=l(),SF=a("li"),I5e=a("strong"),P8r=o("xglm"),$8r=o(" \u2014 "),NV=a("a"),I8r=o("FlaxXGLMModel"),j8r=o(" (XGLM model)"),N8r=l(),PF=a("li"),j5e=a("strong"),D8r=o("xlm-roberta"),q8r=o(" \u2014 "),DV=a("a"),G8r=o("FlaxXLMRobertaModel"),O8r=o(" (XLM-RoBERTa model)"),X8r=l(),N5e=a("p"),V8r=o("Examples:"),z8r=l(),f(GA.$$.fragment),fSe=l(),df=a("h2"),$F=a("a"),D5e=a("span"),f(OA.$$.fragment),W8r=l(),q5e=a("span"),Q8r=o("FlaxAutoModelForCausalLM"),mSe=l(),Pr=a("div"),f(XA.$$.fragment),H8r=l(),cf=a("p"),U8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),G5e=a("code"),J8r=o("from_pretrained()"),Y8r=o("class method or the "),O5e=a("code"),K8r=o("from_config()"),Z8r=o(`class
method.`),eFr=l(),VA=a("p"),oFr=o("This class cannot be instantiated directly using "),X5e=a("code"),rFr=o("__init__()"),tFr=o(" (throws an error)."),aFr=l(),Bt=a("div"),f(zA.$$.fragment),nFr=l(),V5e=a("p"),sFr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),lFr=l(),ff=a("p"),iFr=o(`Note:
Loading a model from its configuration file does `),z5e=a("strong"),dFr=o("not"),cFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),W5e=a("code"),fFr=o("from_pretrained()"),mFr=o("to load the model weights."),gFr=l(),Q5e=a("p"),hFr=o("Examples:"),pFr=l(),f(WA.$$.fragment),_Fr=l(),Lo=a("div"),f(QA.$$.fragment),uFr=l(),H5e=a("p"),bFr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),vFr=l(),Pn=a("p"),TFr=o("The model class to instantiate is selected based on the "),U5e=a("code"),FFr=o("model_type"),CFr=o(` property of the config object (either
passed as an argument or loaded from `),J5e=a("code"),MFr=o("pretrained_model_name_or_path"),EFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y5e=a("code"),yFr=o("pretrained_model_name_or_path"),wFr=o(":"),AFr=l(),ga=a("ul"),IF=a("li"),K5e=a("strong"),LFr=o("bart"),BFr=o(" \u2014 "),qV=a("a"),xFr=o("FlaxBartForCausalLM"),kFr=o(" (BART model)"),RFr=l(),jF=a("li"),Z5e=a("strong"),SFr=o("gpt2"),PFr=o(" \u2014 "),GV=a("a"),$Fr=o("FlaxGPT2LMHeadModel"),IFr=o(" (OpenAI GPT-2 model)"),jFr=l(),NF=a("li"),e2e=a("strong"),NFr=o("gpt_neo"),DFr=o(" \u2014 "),OV=a("a"),qFr=o("FlaxGPTNeoForCausalLM"),GFr=o(" (GPT Neo model)"),OFr=l(),DF=a("li"),o2e=a("strong"),XFr=o("gptj"),VFr=o(" \u2014 "),XV=a("a"),zFr=o("FlaxGPTJForCausalLM"),WFr=o(" (GPT-J model)"),QFr=l(),qF=a("li"),r2e=a("strong"),HFr=o("xglm"),UFr=o(" \u2014 "),VV=a("a"),JFr=o("FlaxXGLMForCausalLM"),YFr=o(" (XGLM model)"),KFr=l(),t2e=a("p"),ZFr=o("Examples:"),eCr=l(),f(HA.$$.fragment),gSe=l(),mf=a("h2"),GF=a("a"),a2e=a("span"),f(UA.$$.fragment),oCr=l(),n2e=a("span"),rCr=o("FlaxAutoModelForPreTraining"),hSe=l(),$r=a("div"),f(JA.$$.fragment),tCr=l(),gf=a("p"),aCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),s2e=a("code"),nCr=o("from_pretrained()"),sCr=o("class method or the "),l2e=a("code"),lCr=o("from_config()"),iCr=o(`class
method.`),dCr=l(),YA=a("p"),cCr=o("This class cannot be instantiated directly using "),i2e=a("code"),fCr=o("__init__()"),mCr=o(" (throws an error)."),gCr=l(),xt=a("div"),f(KA.$$.fragment),hCr=l(),d2e=a("p"),pCr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),_Cr=l(),hf=a("p"),uCr=o(`Note:
Loading a model from its configuration file does `),c2e=a("strong"),bCr=o("not"),vCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),f2e=a("code"),TCr=o("from_pretrained()"),FCr=o("to load the model weights."),CCr=l(),m2e=a("p"),MCr=o("Examples:"),ECr=l(),f(ZA.$$.fragment),yCr=l(),Bo=a("div"),f(eL.$$.fragment),wCr=l(),g2e=a("p"),ACr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),LCr=l(),$n=a("p"),BCr=o("The model class to instantiate is selected based on the "),h2e=a("code"),xCr=o("model_type"),kCr=o(` property of the config object (either
passed as an argument or loaded from `),p2e=a("code"),RCr=o("pretrained_model_name_or_path"),SCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_2e=a("code"),PCr=o("pretrained_model_name_or_path"),$Cr=o(":"),ICr=l(),ce=a("ul"),OF=a("li"),u2e=a("strong"),jCr=o("albert"),NCr=o(" \u2014 "),zV=a("a"),DCr=o("FlaxAlbertForPreTraining"),qCr=o(" (ALBERT model)"),GCr=l(),XF=a("li"),b2e=a("strong"),OCr=o("bart"),XCr=o(" \u2014 "),WV=a("a"),VCr=o("FlaxBartForConditionalGeneration"),zCr=o(" (BART model)"),WCr=l(),VF=a("li"),v2e=a("strong"),QCr=o("bert"),HCr=o(" \u2014 "),QV=a("a"),UCr=o("FlaxBertForPreTraining"),JCr=o(" (BERT model)"),YCr=l(),zF=a("li"),T2e=a("strong"),KCr=o("big_bird"),ZCr=o(" \u2014 "),HV=a("a"),eMr=o("FlaxBigBirdForPreTraining"),oMr=o(" (BigBird model)"),rMr=l(),WF=a("li"),F2e=a("strong"),tMr=o("electra"),aMr=o(" \u2014 "),UV=a("a"),nMr=o("FlaxElectraForPreTraining"),sMr=o(" (ELECTRA model)"),lMr=l(),QF=a("li"),C2e=a("strong"),iMr=o("mbart"),dMr=o(" \u2014 "),JV=a("a"),cMr=o("FlaxMBartForConditionalGeneration"),fMr=o(" (mBART model)"),mMr=l(),HF=a("li"),M2e=a("strong"),gMr=o("mt5"),hMr=o(" \u2014 "),YV=a("a"),pMr=o("FlaxMT5ForConditionalGeneration"),_Mr=o(" (mT5 model)"),uMr=l(),UF=a("li"),E2e=a("strong"),bMr=o("roberta"),vMr=o(" \u2014 "),KV=a("a"),TMr=o("FlaxRobertaForMaskedLM"),FMr=o(" (RoBERTa model)"),CMr=l(),JF=a("li"),y2e=a("strong"),MMr=o("roformer"),EMr=o(" \u2014 "),ZV=a("a"),yMr=o("FlaxRoFormerForMaskedLM"),wMr=o(" (RoFormer model)"),AMr=l(),YF=a("li"),w2e=a("strong"),LMr=o("t5"),BMr=o(" \u2014 "),ez=a("a"),xMr=o("FlaxT5ForConditionalGeneration"),kMr=o(" (T5 model)"),RMr=l(),KF=a("li"),A2e=a("strong"),SMr=o("wav2vec2"),PMr=o(" \u2014 "),oz=a("a"),$Mr=o("FlaxWav2Vec2ForPreTraining"),IMr=o(" (Wav2Vec2 model)"),jMr=l(),ZF=a("li"),L2e=a("strong"),NMr=o("xlm-roberta"),DMr=o(" \u2014 "),rz=a("a"),qMr=o("FlaxXLMRobertaForMaskedLM"),GMr=o(" (XLM-RoBERTa model)"),OMr=l(),B2e=a("p"),XMr=o("Examples:"),VMr=l(),f(oL.$$.fragment),pSe=l(),pf=a("h2"),eC=a("a"),x2e=a("span"),f(rL.$$.fragment),zMr=l(),k2e=a("span"),WMr=o("FlaxAutoModelForMaskedLM"),_Se=l(),Ir=a("div"),f(tL.$$.fragment),QMr=l(),_f=a("p"),HMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),R2e=a("code"),UMr=o("from_pretrained()"),JMr=o("class method or the "),S2e=a("code"),YMr=o("from_config()"),KMr=o(`class
method.`),ZMr=l(),aL=a("p"),e4r=o("This class cannot be instantiated directly using "),P2e=a("code"),o4r=o("__init__()"),r4r=o(" (throws an error)."),t4r=l(),kt=a("div"),f(nL.$$.fragment),a4r=l(),$2e=a("p"),n4r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),s4r=l(),uf=a("p"),l4r=o(`Note:
Loading a model from its configuration file does `),I2e=a("strong"),i4r=o("not"),d4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),j2e=a("code"),c4r=o("from_pretrained()"),f4r=o("to load the model weights."),m4r=l(),N2e=a("p"),g4r=o("Examples:"),h4r=l(),f(sL.$$.fragment),p4r=l(),xo=a("div"),f(lL.$$.fragment),_4r=l(),D2e=a("p"),u4r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),b4r=l(),In=a("p"),v4r=o("The model class to instantiate is selected based on the "),q2e=a("code"),T4r=o("model_type"),F4r=o(` property of the config object (either
passed as an argument or loaded from `),G2e=a("code"),C4r=o("pretrained_model_name_or_path"),M4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O2e=a("code"),E4r=o("pretrained_model_name_or_path"),y4r=o(":"),w4r=l(),be=a("ul"),oC=a("li"),X2e=a("strong"),A4r=o("albert"),L4r=o(" \u2014 "),tz=a("a"),B4r=o("FlaxAlbertForMaskedLM"),x4r=o(" (ALBERT model)"),k4r=l(),rC=a("li"),V2e=a("strong"),R4r=o("bart"),S4r=o(" \u2014 "),az=a("a"),P4r=o("FlaxBartForConditionalGeneration"),$4r=o(" (BART model)"),I4r=l(),tC=a("li"),z2e=a("strong"),j4r=o("bert"),N4r=o(" \u2014 "),nz=a("a"),D4r=o("FlaxBertForMaskedLM"),q4r=o(" (BERT model)"),G4r=l(),aC=a("li"),W2e=a("strong"),O4r=o("big_bird"),X4r=o(" \u2014 "),sz=a("a"),V4r=o("FlaxBigBirdForMaskedLM"),z4r=o(" (BigBird model)"),W4r=l(),nC=a("li"),Q2e=a("strong"),Q4r=o("distilbert"),H4r=o(" \u2014 "),lz=a("a"),U4r=o("FlaxDistilBertForMaskedLM"),J4r=o(" (DistilBERT model)"),Y4r=l(),sC=a("li"),H2e=a("strong"),K4r=o("electra"),Z4r=o(" \u2014 "),iz=a("a"),eEr=o("FlaxElectraForMaskedLM"),oEr=o(" (ELECTRA model)"),rEr=l(),lC=a("li"),U2e=a("strong"),tEr=o("mbart"),aEr=o(" \u2014 "),dz=a("a"),nEr=o("FlaxMBartForConditionalGeneration"),sEr=o(" (mBART model)"),lEr=l(),iC=a("li"),J2e=a("strong"),iEr=o("roberta"),dEr=o(" \u2014 "),cz=a("a"),cEr=o("FlaxRobertaForMaskedLM"),fEr=o(" (RoBERTa model)"),mEr=l(),dC=a("li"),Y2e=a("strong"),gEr=o("roformer"),hEr=o(" \u2014 "),fz=a("a"),pEr=o("FlaxRoFormerForMaskedLM"),_Er=o(" (RoFormer model)"),uEr=l(),cC=a("li"),K2e=a("strong"),bEr=o("xlm-roberta"),vEr=o(" \u2014 "),mz=a("a"),TEr=o("FlaxXLMRobertaForMaskedLM"),FEr=o(" (XLM-RoBERTa model)"),CEr=l(),Z2e=a("p"),MEr=o("Examples:"),EEr=l(),f(iL.$$.fragment),uSe=l(),bf=a("h2"),fC=a("a"),eve=a("span"),f(dL.$$.fragment),yEr=l(),ove=a("span"),wEr=o("FlaxAutoModelForSeq2SeqLM"),bSe=l(),jr=a("div"),f(cL.$$.fragment),AEr=l(),vf=a("p"),LEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),rve=a("code"),BEr=o("from_pretrained()"),xEr=o("class method or the "),tve=a("code"),kEr=o("from_config()"),REr=o(`class
method.`),SEr=l(),fL=a("p"),PEr=o("This class cannot be instantiated directly using "),ave=a("code"),$Er=o("__init__()"),IEr=o(" (throws an error)."),jEr=l(),Rt=a("div"),f(mL.$$.fragment),NEr=l(),nve=a("p"),DEr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),qEr=l(),Tf=a("p"),GEr=o(`Note:
Loading a model from its configuration file does `),sve=a("strong"),OEr=o("not"),XEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lve=a("code"),VEr=o("from_pretrained()"),zEr=o("to load the model weights."),WEr=l(),ive=a("p"),QEr=o("Examples:"),HEr=l(),f(gL.$$.fragment),UEr=l(),ko=a("div"),f(hL.$$.fragment),JEr=l(),dve=a("p"),YEr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),KEr=l(),jn=a("p"),ZEr=o("The model class to instantiate is selected based on the "),cve=a("code"),e3r=o("model_type"),o3r=o(` property of the config object (either
passed as an argument or loaded from `),fve=a("code"),r3r=o("pretrained_model_name_or_path"),t3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mve=a("code"),a3r=o("pretrained_model_name_or_path"),n3r=o(":"),s3r=l(),Ee=a("ul"),mC=a("li"),gve=a("strong"),l3r=o("bart"),i3r=o(" \u2014 "),gz=a("a"),d3r=o("FlaxBartForConditionalGeneration"),c3r=o(" (BART model)"),f3r=l(),gC=a("li"),hve=a("strong"),m3r=o("blenderbot"),g3r=o(" \u2014 "),hz=a("a"),h3r=o("FlaxBlenderbotForConditionalGeneration"),p3r=o(" (Blenderbot model)"),_3r=l(),hC=a("li"),pve=a("strong"),u3r=o("blenderbot-small"),b3r=o(" \u2014 "),pz=a("a"),v3r=o("FlaxBlenderbotSmallForConditionalGeneration"),T3r=o(" (BlenderbotSmall model)"),F3r=l(),pC=a("li"),_ve=a("strong"),C3r=o("encoder-decoder"),M3r=o(" \u2014 "),_z=a("a"),E3r=o("FlaxEncoderDecoderModel"),y3r=o(" (Encoder decoder model)"),w3r=l(),_C=a("li"),uve=a("strong"),A3r=o("marian"),L3r=o(" \u2014 "),uz=a("a"),B3r=o("FlaxMarianMTModel"),x3r=o(" (Marian model)"),k3r=l(),uC=a("li"),bve=a("strong"),R3r=o("mbart"),S3r=o(" \u2014 "),bz=a("a"),P3r=o("FlaxMBartForConditionalGeneration"),$3r=o(" (mBART model)"),I3r=l(),bC=a("li"),vve=a("strong"),j3r=o("mt5"),N3r=o(" \u2014 "),vz=a("a"),D3r=o("FlaxMT5ForConditionalGeneration"),q3r=o(" (mT5 model)"),G3r=l(),vC=a("li"),Tve=a("strong"),O3r=o("pegasus"),X3r=o(" \u2014 "),Tz=a("a"),V3r=o("FlaxPegasusForConditionalGeneration"),z3r=o(" (Pegasus model)"),W3r=l(),TC=a("li"),Fve=a("strong"),Q3r=o("t5"),H3r=o(" \u2014 "),Fz=a("a"),U3r=o("FlaxT5ForConditionalGeneration"),J3r=o(" (T5 model)"),Y3r=l(),Cve=a("p"),K3r=o("Examples:"),Z3r=l(),f(pL.$$.fragment),vSe=l(),Ff=a("h2"),FC=a("a"),Mve=a("span"),f(_L.$$.fragment),eyr=l(),Eve=a("span"),oyr=o("FlaxAutoModelForSequenceClassification"),TSe=l(),Nr=a("div"),f(uL.$$.fragment),ryr=l(),Cf=a("p"),tyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),yve=a("code"),ayr=o("from_pretrained()"),nyr=o("class method or the "),wve=a("code"),syr=o("from_config()"),lyr=o(`class
method.`),iyr=l(),bL=a("p"),dyr=o("This class cannot be instantiated directly using "),Ave=a("code"),cyr=o("__init__()"),fyr=o(" (throws an error)."),myr=l(),St=a("div"),f(vL.$$.fragment),gyr=l(),Lve=a("p"),hyr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),pyr=l(),Mf=a("p"),_yr=o(`Note:
Loading a model from its configuration file does `),Bve=a("strong"),uyr=o("not"),byr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xve=a("code"),vyr=o("from_pretrained()"),Tyr=o("to load the model weights."),Fyr=l(),kve=a("p"),Cyr=o("Examples:"),Myr=l(),f(TL.$$.fragment),Eyr=l(),Ro=a("div"),f(FL.$$.fragment),yyr=l(),Rve=a("p"),wyr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Ayr=l(),Nn=a("p"),Lyr=o("The model class to instantiate is selected based on the "),Sve=a("code"),Byr=o("model_type"),xyr=o(` property of the config object (either
passed as an argument or loaded from `),Pve=a("code"),kyr=o("pretrained_model_name_or_path"),Ryr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ve=a("code"),Syr=o("pretrained_model_name_or_path"),Pyr=o(":"),$yr=l(),ve=a("ul"),CC=a("li"),Ive=a("strong"),Iyr=o("albert"),jyr=o(" \u2014 "),Cz=a("a"),Nyr=o("FlaxAlbertForSequenceClassification"),Dyr=o(" (ALBERT model)"),qyr=l(),MC=a("li"),jve=a("strong"),Gyr=o("bart"),Oyr=o(" \u2014 "),Mz=a("a"),Xyr=o("FlaxBartForSequenceClassification"),Vyr=o(" (BART model)"),zyr=l(),EC=a("li"),Nve=a("strong"),Wyr=o("bert"),Qyr=o(" \u2014 "),Ez=a("a"),Hyr=o("FlaxBertForSequenceClassification"),Uyr=o(" (BERT model)"),Jyr=l(),yC=a("li"),Dve=a("strong"),Yyr=o("big_bird"),Kyr=o(" \u2014 "),yz=a("a"),Zyr=o("FlaxBigBirdForSequenceClassification"),ewr=o(" (BigBird model)"),owr=l(),wC=a("li"),qve=a("strong"),rwr=o("distilbert"),twr=o(" \u2014 "),wz=a("a"),awr=o("FlaxDistilBertForSequenceClassification"),nwr=o(" (DistilBERT model)"),swr=l(),AC=a("li"),Gve=a("strong"),lwr=o("electra"),iwr=o(" \u2014 "),Az=a("a"),dwr=o("FlaxElectraForSequenceClassification"),cwr=o(" (ELECTRA model)"),fwr=l(),LC=a("li"),Ove=a("strong"),mwr=o("mbart"),gwr=o(" \u2014 "),Lz=a("a"),hwr=o("FlaxMBartForSequenceClassification"),pwr=o(" (mBART model)"),_wr=l(),BC=a("li"),Xve=a("strong"),uwr=o("roberta"),bwr=o(" \u2014 "),Bz=a("a"),vwr=o("FlaxRobertaForSequenceClassification"),Twr=o(" (RoBERTa model)"),Fwr=l(),xC=a("li"),Vve=a("strong"),Cwr=o("roformer"),Mwr=o(" \u2014 "),xz=a("a"),Ewr=o("FlaxRoFormerForSequenceClassification"),ywr=o(" (RoFormer model)"),wwr=l(),kC=a("li"),zve=a("strong"),Awr=o("xlm-roberta"),Lwr=o(" \u2014 "),kz=a("a"),Bwr=o("FlaxXLMRobertaForSequenceClassification"),xwr=o(" (XLM-RoBERTa model)"),kwr=l(),Wve=a("p"),Rwr=o("Examples:"),Swr=l(),f(CL.$$.fragment),FSe=l(),Ef=a("h2"),RC=a("a"),Qve=a("span"),f(ML.$$.fragment),Pwr=l(),Hve=a("span"),$wr=o("FlaxAutoModelForSpeechSeq2Seq"),CSe=l(),Dr=a("div"),f(EL.$$.fragment),Iwr=l(),yf=a("p"),jwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Uve=a("code"),Nwr=o("from_pretrained()"),Dwr=o("class method or the "),Jve=a("code"),qwr=o("from_config()"),Gwr=o(`class
method.`),Owr=l(),yL=a("p"),Xwr=o("This class cannot be instantiated directly using "),Yve=a("code"),Vwr=o("__init__()"),zwr=o(" (throws an error)."),Wwr=l(),Pt=a("div"),f(wL.$$.fragment),Qwr=l(),Kve=a("p"),Hwr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Uwr=l(),wf=a("p"),Jwr=o(`Note:
Loading a model from its configuration file does `),Zve=a("strong"),Ywr=o("not"),Kwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),e6e=a("code"),Zwr=o("from_pretrained()"),eAr=o("to load the model weights."),oAr=l(),o6e=a("p"),rAr=o("Examples:"),tAr=l(),f(AL.$$.fragment),aAr=l(),So=a("div"),f(LL.$$.fragment),nAr=l(),r6e=a("p"),sAr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),lAr=l(),Dn=a("p"),iAr=o("The model class to instantiate is selected based on the "),t6e=a("code"),dAr=o("model_type"),cAr=o(` property of the config object (either
passed as an argument or loaded from `),a6e=a("code"),fAr=o("pretrained_model_name_or_path"),mAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n6e=a("code"),gAr=o("pretrained_model_name_or_path"),hAr=o(":"),pAr=l(),s6e=a("ul"),SC=a("li"),l6e=a("strong"),_Ar=o("speech-encoder-decoder"),uAr=o(" \u2014 "),Rz=a("a"),bAr=o("FlaxSpeechEncoderDecoderModel"),vAr=o(" (Speech Encoder decoder model)"),TAr=l(),i6e=a("p"),FAr=o("Examples:"),CAr=l(),f(BL.$$.fragment),MSe=l(),Af=a("h2"),PC=a("a"),d6e=a("span"),f(xL.$$.fragment),MAr=l(),c6e=a("span"),EAr=o("FlaxAutoModelForQuestionAnswering"),ESe=l(),qr=a("div"),f(kL.$$.fragment),yAr=l(),Lf=a("p"),wAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),f6e=a("code"),AAr=o("from_pretrained()"),LAr=o("class method or the "),m6e=a("code"),BAr=o("from_config()"),xAr=o(`class
method.`),kAr=l(),RL=a("p"),RAr=o("This class cannot be instantiated directly using "),g6e=a("code"),SAr=o("__init__()"),PAr=o(" (throws an error)."),$Ar=l(),$t=a("div"),f(SL.$$.fragment),IAr=l(),h6e=a("p"),jAr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),NAr=l(),Bf=a("p"),DAr=o(`Note:
Loading a model from its configuration file does `),p6e=a("strong"),qAr=o("not"),GAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_6e=a("code"),OAr=o("from_pretrained()"),XAr=o("to load the model weights."),VAr=l(),u6e=a("p"),zAr=o("Examples:"),WAr=l(),f(PL.$$.fragment),QAr=l(),Po=a("div"),f($L.$$.fragment),HAr=l(),b6e=a("p"),UAr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),JAr=l(),qn=a("p"),YAr=o("The model class to instantiate is selected based on the "),v6e=a("code"),KAr=o("model_type"),ZAr=o(` property of the config object (either
passed as an argument or loaded from `),T6e=a("code"),eLr=o("pretrained_model_name_or_path"),oLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F6e=a("code"),rLr=o("pretrained_model_name_or_path"),tLr=o(":"),aLr=l(),Te=a("ul"),$C=a("li"),C6e=a("strong"),nLr=o("albert"),sLr=o(" \u2014 "),Sz=a("a"),lLr=o("FlaxAlbertForQuestionAnswering"),iLr=o(" (ALBERT model)"),dLr=l(),IC=a("li"),M6e=a("strong"),cLr=o("bart"),fLr=o(" \u2014 "),Pz=a("a"),mLr=o("FlaxBartForQuestionAnswering"),gLr=o(" (BART model)"),hLr=l(),jC=a("li"),E6e=a("strong"),pLr=o("bert"),_Lr=o(" \u2014 "),$z=a("a"),uLr=o("FlaxBertForQuestionAnswering"),bLr=o(" (BERT model)"),vLr=l(),NC=a("li"),y6e=a("strong"),TLr=o("big_bird"),FLr=o(" \u2014 "),Iz=a("a"),CLr=o("FlaxBigBirdForQuestionAnswering"),MLr=o(" (BigBird model)"),ELr=l(),DC=a("li"),w6e=a("strong"),yLr=o("distilbert"),wLr=o(" \u2014 "),jz=a("a"),ALr=o("FlaxDistilBertForQuestionAnswering"),LLr=o(" (DistilBERT model)"),BLr=l(),qC=a("li"),A6e=a("strong"),xLr=o("electra"),kLr=o(" \u2014 "),Nz=a("a"),RLr=o("FlaxElectraForQuestionAnswering"),SLr=o(" (ELECTRA model)"),PLr=l(),GC=a("li"),L6e=a("strong"),$Lr=o("mbart"),ILr=o(" \u2014 "),Dz=a("a"),jLr=o("FlaxMBartForQuestionAnswering"),NLr=o(" (mBART model)"),DLr=l(),OC=a("li"),B6e=a("strong"),qLr=o("roberta"),GLr=o(" \u2014 "),qz=a("a"),OLr=o("FlaxRobertaForQuestionAnswering"),XLr=o(" (RoBERTa model)"),VLr=l(),XC=a("li"),x6e=a("strong"),zLr=o("roformer"),WLr=o(" \u2014 "),Gz=a("a"),QLr=o("FlaxRoFormerForQuestionAnswering"),HLr=o(" (RoFormer model)"),ULr=l(),VC=a("li"),k6e=a("strong"),JLr=o("xlm-roberta"),YLr=o(" \u2014 "),Oz=a("a"),KLr=o("FlaxXLMRobertaForQuestionAnswering"),ZLr=o(" (XLM-RoBERTa model)"),e7r=l(),R6e=a("p"),o7r=o("Examples:"),r7r=l(),f(IL.$$.fragment),ySe=l(),xf=a("h2"),zC=a("a"),S6e=a("span"),f(jL.$$.fragment),t7r=l(),P6e=a("span"),a7r=o("FlaxAutoModelForTokenClassification"),wSe=l(),Gr=a("div"),f(NL.$$.fragment),n7r=l(),kf=a("p"),s7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),$6e=a("code"),l7r=o("from_pretrained()"),i7r=o("class method or the "),I6e=a("code"),d7r=o("from_config()"),c7r=o(`class
method.`),f7r=l(),DL=a("p"),m7r=o("This class cannot be instantiated directly using "),j6e=a("code"),g7r=o("__init__()"),h7r=o(" (throws an error)."),p7r=l(),It=a("div"),f(qL.$$.fragment),_7r=l(),N6e=a("p"),u7r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),b7r=l(),Rf=a("p"),v7r=o(`Note:
Loading a model from its configuration file does `),D6e=a("strong"),T7r=o("not"),F7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),q6e=a("code"),C7r=o("from_pretrained()"),M7r=o("to load the model weights."),E7r=l(),G6e=a("p"),y7r=o("Examples:"),w7r=l(),f(GL.$$.fragment),A7r=l(),$o=a("div"),f(OL.$$.fragment),L7r=l(),O6e=a("p"),B7r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),x7r=l(),Gn=a("p"),k7r=o("The model class to instantiate is selected based on the "),X6e=a("code"),R7r=o("model_type"),S7r=o(` property of the config object (either
passed as an argument or loaded from `),V6e=a("code"),P7r=o("pretrained_model_name_or_path"),$7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z6e=a("code"),I7r=o("pretrained_model_name_or_path"),j7r=o(":"),N7r=l(),Se=a("ul"),WC=a("li"),W6e=a("strong"),D7r=o("albert"),q7r=o(" \u2014 "),Xz=a("a"),G7r=o("FlaxAlbertForTokenClassification"),O7r=o(" (ALBERT model)"),X7r=l(),QC=a("li"),Q6e=a("strong"),V7r=o("bert"),z7r=o(" \u2014 "),Vz=a("a"),W7r=o("FlaxBertForTokenClassification"),Q7r=o(" (BERT model)"),H7r=l(),HC=a("li"),H6e=a("strong"),U7r=o("big_bird"),J7r=o(" \u2014 "),zz=a("a"),Y7r=o("FlaxBigBirdForTokenClassification"),K7r=o(" (BigBird model)"),Z7r=l(),UC=a("li"),U6e=a("strong"),e9r=o("distilbert"),o9r=o(" \u2014 "),Wz=a("a"),r9r=o("FlaxDistilBertForTokenClassification"),t9r=o(" (DistilBERT model)"),a9r=l(),JC=a("li"),J6e=a("strong"),n9r=o("electra"),s9r=o(" \u2014 "),Qz=a("a"),l9r=o("FlaxElectraForTokenClassification"),i9r=o(" (ELECTRA model)"),d9r=l(),YC=a("li"),Y6e=a("strong"),c9r=o("roberta"),f9r=o(" \u2014 "),Hz=a("a"),m9r=o("FlaxRobertaForTokenClassification"),g9r=o(" (RoBERTa model)"),h9r=l(),KC=a("li"),K6e=a("strong"),p9r=o("roformer"),_9r=o(" \u2014 "),Uz=a("a"),u9r=o("FlaxRoFormerForTokenClassification"),b9r=o(" (RoFormer model)"),v9r=l(),ZC=a("li"),Z6e=a("strong"),T9r=o("xlm-roberta"),F9r=o(" \u2014 "),Jz=a("a"),C9r=o("FlaxXLMRobertaForTokenClassification"),M9r=o(" (XLM-RoBERTa model)"),E9r=l(),e0e=a("p"),y9r=o("Examples:"),w9r=l(),f(XL.$$.fragment),ASe=l(),Sf=a("h2"),eM=a("a"),o0e=a("span"),f(VL.$$.fragment),A9r=l(),r0e=a("span"),L9r=o("FlaxAutoModelForMultipleChoice"),LSe=l(),Or=a("div"),f(zL.$$.fragment),B9r=l(),Pf=a("p"),x9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),t0e=a("code"),k9r=o("from_pretrained()"),R9r=o("class method or the "),a0e=a("code"),S9r=o("from_config()"),P9r=o(`class
method.`),$9r=l(),WL=a("p"),I9r=o("This class cannot be instantiated directly using "),n0e=a("code"),j9r=o("__init__()"),N9r=o(" (throws an error)."),D9r=l(),jt=a("div"),f(QL.$$.fragment),q9r=l(),s0e=a("p"),G9r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),O9r=l(),$f=a("p"),X9r=o(`Note:
Loading a model from its configuration file does `),l0e=a("strong"),V9r=o("not"),z9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),i0e=a("code"),W9r=o("from_pretrained()"),Q9r=o("to load the model weights."),H9r=l(),d0e=a("p"),U9r=o("Examples:"),J9r=l(),f(HL.$$.fragment),Y9r=l(),Io=a("div"),f(UL.$$.fragment),K9r=l(),c0e=a("p"),Z9r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),eBr=l(),On=a("p"),oBr=o("The model class to instantiate is selected based on the "),f0e=a("code"),rBr=o("model_type"),tBr=o(` property of the config object (either
passed as an argument or loaded from `),m0e=a("code"),aBr=o("pretrained_model_name_or_path"),nBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g0e=a("code"),sBr=o("pretrained_model_name_or_path"),lBr=o(":"),iBr=l(),Pe=a("ul"),oM=a("li"),h0e=a("strong"),dBr=o("albert"),cBr=o(" \u2014 "),Yz=a("a"),fBr=o("FlaxAlbertForMultipleChoice"),mBr=o(" (ALBERT model)"),gBr=l(),rM=a("li"),p0e=a("strong"),hBr=o("bert"),pBr=o(" \u2014 "),Kz=a("a"),_Br=o("FlaxBertForMultipleChoice"),uBr=o(" (BERT model)"),bBr=l(),tM=a("li"),_0e=a("strong"),vBr=o("big_bird"),TBr=o(" \u2014 "),Zz=a("a"),FBr=o("FlaxBigBirdForMultipleChoice"),CBr=o(" (BigBird model)"),MBr=l(),aM=a("li"),u0e=a("strong"),EBr=o("distilbert"),yBr=o(" \u2014 "),eW=a("a"),wBr=o("FlaxDistilBertForMultipleChoice"),ABr=o(" (DistilBERT model)"),LBr=l(),nM=a("li"),b0e=a("strong"),BBr=o("electra"),xBr=o(" \u2014 "),oW=a("a"),kBr=o("FlaxElectraForMultipleChoice"),RBr=o(" (ELECTRA model)"),SBr=l(),sM=a("li"),v0e=a("strong"),PBr=o("roberta"),$Br=o(" \u2014 "),rW=a("a"),IBr=o("FlaxRobertaForMultipleChoice"),jBr=o(" (RoBERTa model)"),NBr=l(),lM=a("li"),T0e=a("strong"),DBr=o("roformer"),qBr=o(" \u2014 "),tW=a("a"),GBr=o("FlaxRoFormerForMultipleChoice"),OBr=o(" (RoFormer model)"),XBr=l(),iM=a("li"),F0e=a("strong"),VBr=o("xlm-roberta"),zBr=o(" \u2014 "),aW=a("a"),WBr=o("FlaxXLMRobertaForMultipleChoice"),QBr=o(" (XLM-RoBERTa model)"),HBr=l(),C0e=a("p"),UBr=o("Examples:"),JBr=l(),f(JL.$$.fragment),BSe=l(),If=a("h2"),dM=a("a"),M0e=a("span"),f(YL.$$.fragment),YBr=l(),E0e=a("span"),KBr=o("FlaxAutoModelForNextSentencePrediction"),xSe=l(),Xr=a("div"),f(KL.$$.fragment),ZBr=l(),jf=a("p"),exr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),y0e=a("code"),oxr=o("from_pretrained()"),rxr=o("class method or the "),w0e=a("code"),txr=o("from_config()"),axr=o(`class
method.`),nxr=l(),ZL=a("p"),sxr=o("This class cannot be instantiated directly using "),A0e=a("code"),lxr=o("__init__()"),ixr=o(" (throws an error)."),dxr=l(),Nt=a("div"),f(e7.$$.fragment),cxr=l(),L0e=a("p"),fxr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),mxr=l(),Nf=a("p"),gxr=o(`Note:
Loading a model from its configuration file does `),B0e=a("strong"),hxr=o("not"),pxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),x0e=a("code"),_xr=o("from_pretrained()"),uxr=o("to load the model weights."),bxr=l(),k0e=a("p"),vxr=o("Examples:"),Txr=l(),f(o7.$$.fragment),Fxr=l(),jo=a("div"),f(r7.$$.fragment),Cxr=l(),R0e=a("p"),Mxr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Exr=l(),Xn=a("p"),yxr=o("The model class to instantiate is selected based on the "),S0e=a("code"),wxr=o("model_type"),Axr=o(` property of the config object (either
passed as an argument or loaded from `),P0e=a("code"),Lxr=o("pretrained_model_name_or_path"),Bxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$0e=a("code"),xxr=o("pretrained_model_name_or_path"),kxr=o(":"),Rxr=l(),I0e=a("ul"),cM=a("li"),j0e=a("strong"),Sxr=o("bert"),Pxr=o(" \u2014 "),nW=a("a"),$xr=o("FlaxBertForNextSentencePrediction"),Ixr=o(" (BERT model)"),jxr=l(),N0e=a("p"),Nxr=o("Examples:"),Dxr=l(),f(t7.$$.fragment),kSe=l(),Df=a("h2"),fM=a("a"),D0e=a("span"),f(a7.$$.fragment),qxr=l(),q0e=a("span"),Gxr=o("FlaxAutoModelForImageClassification"),RSe=l(),Vr=a("div"),f(n7.$$.fragment),Oxr=l(),qf=a("p"),Xxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),G0e=a("code"),Vxr=o("from_pretrained()"),zxr=o("class method or the "),O0e=a("code"),Wxr=o("from_config()"),Qxr=o(`class
method.`),Hxr=l(),s7=a("p"),Uxr=o("This class cannot be instantiated directly using "),X0e=a("code"),Jxr=o("__init__()"),Yxr=o(" (throws an error)."),Kxr=l(),Dt=a("div"),f(l7.$$.fragment),Zxr=l(),V0e=a("p"),ekr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),okr=l(),Gf=a("p"),rkr=o(`Note:
Loading a model from its configuration file does `),z0e=a("strong"),tkr=o("not"),akr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),W0e=a("code"),nkr=o("from_pretrained()"),skr=o("to load the model weights."),lkr=l(),Q0e=a("p"),ikr=o("Examples:"),dkr=l(),f(i7.$$.fragment),ckr=l(),No=a("div"),f(d7.$$.fragment),fkr=l(),H0e=a("p"),mkr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),gkr=l(),Vn=a("p"),hkr=o("The model class to instantiate is selected based on the "),U0e=a("code"),pkr=o("model_type"),_kr=o(` property of the config object (either
passed as an argument or loaded from `),J0e=a("code"),ukr=o("pretrained_model_name_or_path"),bkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y0e=a("code"),vkr=o("pretrained_model_name_or_path"),Tkr=o(":"),Fkr=l(),c7=a("ul"),mM=a("li"),K0e=a("strong"),Ckr=o("beit"),Mkr=o(" \u2014 "),sW=a("a"),Ekr=o("FlaxBeitForImageClassification"),ykr=o(" (BEiT model)"),wkr=l(),gM=a("li"),Z0e=a("strong"),Akr=o("vit"),Lkr=o(" \u2014 "),lW=a("a"),Bkr=o("FlaxViTForImageClassification"),xkr=o(" (ViT model)"),kkr=l(),eTe=a("p"),Rkr=o("Examples:"),Skr=l(),f(f7.$$.fragment),SSe=l(),Of=a("h2"),hM=a("a"),oTe=a("span"),f(m7.$$.fragment),Pkr=l(),rTe=a("span"),$kr=o("FlaxAutoModelForVision2Seq"),PSe=l(),zr=a("div"),f(g7.$$.fragment),Ikr=l(),Xf=a("p"),jkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),tTe=a("code"),Nkr=o("from_pretrained()"),Dkr=o("class method or the "),aTe=a("code"),qkr=o("from_config()"),Gkr=o(`class
method.`),Okr=l(),h7=a("p"),Xkr=o("This class cannot be instantiated directly using "),nTe=a("code"),Vkr=o("__init__()"),zkr=o(" (throws an error)."),Wkr=l(),qt=a("div"),f(p7.$$.fragment),Qkr=l(),sTe=a("p"),Hkr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Ukr=l(),Vf=a("p"),Jkr=o(`Note:
Loading a model from its configuration file does `),lTe=a("strong"),Ykr=o("not"),Kkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iTe=a("code"),Zkr=o("from_pretrained()"),eRr=o("to load the model weights."),oRr=l(),dTe=a("p"),rRr=o("Examples:"),tRr=l(),f(_7.$$.fragment),aRr=l(),Do=a("div"),f(u7.$$.fragment),nRr=l(),cTe=a("p"),sRr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),lRr=l(),zn=a("p"),iRr=o("The model class to instantiate is selected based on the "),fTe=a("code"),dRr=o("model_type"),cRr=o(` property of the config object (either
passed as an argument or loaded from `),mTe=a("code"),fRr=o("pretrained_model_name_or_path"),mRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gTe=a("code"),gRr=o("pretrained_model_name_or_path"),hRr=o(":"),pRr=l(),hTe=a("ul"),pM=a("li"),pTe=a("strong"),_Rr=o("vision-encoder-decoder"),uRr=o(" \u2014 "),iW=a("a"),bRr=o("FlaxVisionEncoderDecoderModel"),vRr=o(" (Vision Encoder decoder model)"),TRr=l(),_Te=a("p"),FRr=o("Examples:"),CRr=l(),f(b7.$$.fragment),this.h()},l(d){const u=jCt('[data-svelte="svelte-1phssyn"]',document.head);J=n(u,"META",{name:!0,content:!0}),u.forEach(t),$e=i(d),de=n(d,"H1",{class:!0});var v7=s(de);pe=n(v7,"A",{id:!0,class:!0,href:!0});var uTe=s(pe);io=n(uTe,"SPAN",{});var bTe=s(io);m(fe.$$.fragment,bTe),bTe.forEach(t),uTe.forEach(t),Me=i(v7),zo=n(v7,"SPAN",{});var ERr=s(zo);Vi=r(ERr,"Auto Classes"),ERr.forEach(t),v7.forEach(t),Wf=i(d),ha=n(d,"P",{});var ISe=s(ha);zi=r(ISe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Wi=n(ISe,"CODE",{});var yRr=s(Wi);_4=r(yRr,"from_pretrained()"),yRr.forEach(t),Qf=r(ISe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),ISe.forEach(t),Be=i(d),co=n(d,"P",{});var _M=s(co);Qi=r(_M,"Instantiating one of "),Wn=n(_M,"A",{href:!0});var wRr=s(Wn);u4=r(wRr,"AutoConfig"),wRr.forEach(t),Qn=r(_M,", "),Hn=n(_M,"A",{href:!0});var ARr=s(Hn);b4=r(ARr,"AutoModel"),ARr.forEach(t),Hi=r(_M,`, and
`),Un=n(_M,"A",{href:!0});var LRr=s(Un);v4=r(LRr,"AutoTokenizer"),LRr.forEach(t),Ui=r(_M," will directly create a class of the relevant architecture. For instance"),_M.forEach(t),Hf=i(d),m(Va.$$.fragment,d),fo=i(d),_e=n(d,"P",{});var jSe=s(_e);_9=r(jSe,"will create a model that is an instance of "),Ji=n(jSe,"A",{href:!0});var BRr=s(Ji);u9=r(BRr,"BertModel"),BRr.forEach(t),b9=r(jSe,"."),jSe.forEach(t),Wo=i(d),za=n(d,"P",{});var NSe=s(za);v9=r(NSe,"There is one class of "),Uf=n(NSe,"CODE",{});var xRr=s(Uf);T9=r(xRr,"AutoModel"),xRr.forEach(t),J$e=r(NSe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),NSe.forEach(t),Rke=i(d),Yi=n(d,"H2",{class:!0});var DSe=s(Yi);Jf=n(DSe,"A",{id:!0,class:!0,href:!0});var kRr=s(Jf);tH=n(kRr,"SPAN",{});var RRr=s(tH);m(T4.$$.fragment,RRr),RRr.forEach(t),kRr.forEach(t),Y$e=i(DSe),aH=n(DSe,"SPAN",{});var SRr=s(aH);K$e=r(SRr,"Extending the Auto Classes"),SRr.forEach(t),DSe.forEach(t),Ske=i(d),Jn=n(d,"P",{});var dW=s(Jn);Z$e=r(dW,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),nH=n(dW,"CODE",{});var PRr=s(nH);eIe=r(PRr,"NewModel"),PRr.forEach(t),oIe=r(dW,", make sure you have a "),sH=n(dW,"CODE",{});var $Rr=s(sH);rIe=r($Rr,"NewModelConfig"),$Rr.forEach(t),tIe=r(dW,` then you can add those to the auto
classes like this:`),dW.forEach(t),Pke=i(d),m(F4.$$.fragment,d),$ke=i(d),F9=n(d,"P",{});var IRr=s(F9);aIe=r(IRr,"You will then be able to use the auto classes like you would usually do!"),IRr.forEach(t),Ike=i(d),m(Yf.$$.fragment,d),jke=i(d),Ki=n(d,"H2",{class:!0});var qSe=s(Ki);Kf=n(qSe,"A",{id:!0,class:!0,href:!0});var jRr=s(Kf);lH=n(jRr,"SPAN",{});var NRr=s(lH);m(C4.$$.fragment,NRr),NRr.forEach(t),jRr.forEach(t),nIe=i(qSe),iH=n(qSe,"SPAN",{});var DRr=s(iH);sIe=r(DRr,"AutoConfig"),DRr.forEach(t),qSe.forEach(t),Nke=i(d),Qo=n(d,"DIV",{class:!0});var Qs=s(Qo);m(M4.$$.fragment,Qs),lIe=i(Qs),E4=n(Qs,"P",{});var GSe=s(E4);iIe=r(GSe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),C9=n(GSe,"A",{href:!0});var qRr=s(C9);dIe=r(qRr,"from_pretrained()"),qRr.forEach(t),cIe=r(GSe," class method."),GSe.forEach(t),fIe=i(Qs),y4=n(Qs,"P",{});var OSe=s(y4);mIe=r(OSe,"This class cannot be instantiated directly using "),dH=n(OSe,"CODE",{});var GRr=s(dH);gIe=r(GRr,"__init__()"),GRr.forEach(t),hIe=r(OSe," (throws an error)."),OSe.forEach(t),pIe=i(Qs),mo=n(Qs,"DIV",{class:!0});var _a=s(mo);m(w4.$$.fragment,_a),_Ie=i(_a),cH=n(_a,"P",{});var ORr=s(cH);uIe=r(ORr,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),ORr.forEach(t),bIe=i(_a),Zi=n(_a,"P",{});var cW=s(Zi);vIe=r(cW,"The configuration class to instantiate is selected based on the "),fH=n(cW,"CODE",{});var XRr=s(fH);TIe=r(XRr,"model_type"),XRr.forEach(t),FIe=r(cW,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),mH=n(cW,"CODE",{});var VRr=s(mH);CIe=r(VRr,"pretrained_model_name_or_path"),VRr.forEach(t),MIe=r(cW,":"),cW.forEach(t),EIe=i(_a),v=n(_a,"UL",{});var T=s(v);Zf=n(T,"LI",{});var vTe=s(Zf);gH=n(vTe,"STRONG",{});var zRr=s(gH);yIe=r(zRr,"albert"),zRr.forEach(t),wIe=r(vTe," \u2014 "),M9=n(vTe,"A",{href:!0});var WRr=s(M9);AIe=r(WRr,"AlbertConfig"),WRr.forEach(t),LIe=r(vTe," (ALBERT model)"),vTe.forEach(t),BIe=i(T),em=n(T,"LI",{});var TTe=s(em);hH=n(TTe,"STRONG",{});var QRr=s(hH);xIe=r(QRr,"bart"),QRr.forEach(t),kIe=r(TTe," \u2014 "),E9=n(TTe,"A",{href:!0});var HRr=s(E9);RIe=r(HRr,"BartConfig"),HRr.forEach(t),SIe=r(TTe," (BART model)"),TTe.forEach(t),PIe=i(T),om=n(T,"LI",{});var FTe=s(om);pH=n(FTe,"STRONG",{});var URr=s(pH);$Ie=r(URr,"beit"),URr.forEach(t),IIe=r(FTe," \u2014 "),y9=n(FTe,"A",{href:!0});var JRr=s(y9);jIe=r(JRr,"BeitConfig"),JRr.forEach(t),NIe=r(FTe," (BEiT model)"),FTe.forEach(t),DIe=i(T),rm=n(T,"LI",{});var CTe=s(rm);_H=n(CTe,"STRONG",{});var YRr=s(_H);qIe=r(YRr,"bert"),YRr.forEach(t),GIe=r(CTe," \u2014 "),w9=n(CTe,"A",{href:!0});var KRr=s(w9);OIe=r(KRr,"BertConfig"),KRr.forEach(t),XIe=r(CTe," (BERT model)"),CTe.forEach(t),VIe=i(T),tm=n(T,"LI",{});var MTe=s(tm);uH=n(MTe,"STRONG",{});var ZRr=s(uH);zIe=r(ZRr,"bert-generation"),ZRr.forEach(t),WIe=r(MTe," \u2014 "),A9=n(MTe,"A",{href:!0});var eSr=s(A9);QIe=r(eSr,"BertGenerationConfig"),eSr.forEach(t),HIe=r(MTe," (Bert Generation model)"),MTe.forEach(t),UIe=i(T),am=n(T,"LI",{});var ETe=s(am);bH=n(ETe,"STRONG",{});var oSr=s(bH);JIe=r(oSr,"big_bird"),oSr.forEach(t),YIe=r(ETe," \u2014 "),L9=n(ETe,"A",{href:!0});var rSr=s(L9);KIe=r(rSr,"BigBirdConfig"),rSr.forEach(t),ZIe=r(ETe," (BigBird model)"),ETe.forEach(t),eje=i(T),nm=n(T,"LI",{});var yTe=s(nm);vH=n(yTe,"STRONG",{});var tSr=s(vH);oje=r(tSr,"bigbird_pegasus"),tSr.forEach(t),rje=r(yTe," \u2014 "),B9=n(yTe,"A",{href:!0});var aSr=s(B9);tje=r(aSr,"BigBirdPegasusConfig"),aSr.forEach(t),aje=r(yTe," (BigBirdPegasus model)"),yTe.forEach(t),nje=i(T),sm=n(T,"LI",{});var wTe=s(sm);TH=n(wTe,"STRONG",{});var nSr=s(TH);sje=r(nSr,"blenderbot"),nSr.forEach(t),lje=r(wTe," \u2014 "),x9=n(wTe,"A",{href:!0});var sSr=s(x9);ije=r(sSr,"BlenderbotConfig"),sSr.forEach(t),dje=r(wTe," (Blenderbot model)"),wTe.forEach(t),cje=i(T),lm=n(T,"LI",{});var ATe=s(lm);FH=n(ATe,"STRONG",{});var lSr=s(FH);fje=r(lSr,"blenderbot-small"),lSr.forEach(t),mje=r(ATe," \u2014 "),k9=n(ATe,"A",{href:!0});var iSr=s(k9);gje=r(iSr,"BlenderbotSmallConfig"),iSr.forEach(t),hje=r(ATe," (BlenderbotSmall model)"),ATe.forEach(t),pje=i(T),im=n(T,"LI",{});var LTe=s(im);CH=n(LTe,"STRONG",{});var dSr=s(CH);_je=r(dSr,"camembert"),dSr.forEach(t),uje=r(LTe," \u2014 "),R9=n(LTe,"A",{href:!0});var cSr=s(R9);bje=r(cSr,"CamembertConfig"),cSr.forEach(t),vje=r(LTe," (CamemBERT model)"),LTe.forEach(t),Tje=i(T),dm=n(T,"LI",{});var BTe=s(dm);MH=n(BTe,"STRONG",{});var fSr=s(MH);Fje=r(fSr,"canine"),fSr.forEach(t),Cje=r(BTe," \u2014 "),S9=n(BTe,"A",{href:!0});var mSr=s(S9);Mje=r(mSr,"CanineConfig"),mSr.forEach(t),Eje=r(BTe," (Canine model)"),BTe.forEach(t),yje=i(T),cm=n(T,"LI",{});var xTe=s(cm);EH=n(xTe,"STRONG",{});var gSr=s(EH);wje=r(gSr,"clip"),gSr.forEach(t),Aje=r(xTe," \u2014 "),P9=n(xTe,"A",{href:!0});var hSr=s(P9);Lje=r(hSr,"CLIPConfig"),hSr.forEach(t),Bje=r(xTe," (CLIP model)"),xTe.forEach(t),xje=i(T),fm=n(T,"LI",{});var kTe=s(fm);yH=n(kTe,"STRONG",{});var pSr=s(yH);kje=r(pSr,"convbert"),pSr.forEach(t),Rje=r(kTe," \u2014 "),$9=n(kTe,"A",{href:!0});var _Sr=s($9);Sje=r(_Sr,"ConvBertConfig"),_Sr.forEach(t),Pje=r(kTe," (ConvBERT model)"),kTe.forEach(t),$je=i(T),mm=n(T,"LI",{});var RTe=s(mm);wH=n(RTe,"STRONG",{});var uSr=s(wH);Ije=r(uSr,"convnext"),uSr.forEach(t),jje=r(RTe," \u2014 "),I9=n(RTe,"A",{href:!0});var bSr=s(I9);Nje=r(bSr,"ConvNextConfig"),bSr.forEach(t),Dje=r(RTe," (ConvNext model)"),RTe.forEach(t),qje=i(T),gm=n(T,"LI",{});var STe=s(gm);AH=n(STe,"STRONG",{});var vSr=s(AH);Gje=r(vSr,"ctrl"),vSr.forEach(t),Oje=r(STe," \u2014 "),j9=n(STe,"A",{href:!0});var TSr=s(j9);Xje=r(TSr,"CTRLConfig"),TSr.forEach(t),Vje=r(STe," (CTRL model)"),STe.forEach(t),zje=i(T),hm=n(T,"LI",{});var PTe=s(hm);LH=n(PTe,"STRONG",{});var FSr=s(LH);Wje=r(FSr,"data2vec-audio"),FSr.forEach(t),Qje=r(PTe," \u2014 "),N9=n(PTe,"A",{href:!0});var CSr=s(N9);Hje=r(CSr,"Data2VecAudioConfig"),CSr.forEach(t),Uje=r(PTe," (Data2VecAudio model)"),PTe.forEach(t),Jje=i(T),pm=n(T,"LI",{});var $Te=s(pm);BH=n($Te,"STRONG",{});var MSr=s(BH);Yje=r(MSr,"data2vec-text"),MSr.forEach(t),Kje=r($Te," \u2014 "),D9=n($Te,"A",{href:!0});var ESr=s(D9);Zje=r(ESr,"Data2VecTextConfig"),ESr.forEach(t),eNe=r($Te," (Data2VecText model)"),$Te.forEach(t),oNe=i(T),_m=n(T,"LI",{});var ITe=s(_m);xH=n(ITe,"STRONG",{});var ySr=s(xH);rNe=r(ySr,"deberta"),ySr.forEach(t),tNe=r(ITe," \u2014 "),q9=n(ITe,"A",{href:!0});var wSr=s(q9);aNe=r(wSr,"DebertaConfig"),wSr.forEach(t),nNe=r(ITe," (DeBERTa model)"),ITe.forEach(t),sNe=i(T),um=n(T,"LI",{});var jTe=s(um);kH=n(jTe,"STRONG",{});var ASr=s(kH);lNe=r(ASr,"deberta-v2"),ASr.forEach(t),iNe=r(jTe," \u2014 "),G9=n(jTe,"A",{href:!0});var LSr=s(G9);dNe=r(LSr,"DebertaV2Config"),LSr.forEach(t),cNe=r(jTe," (DeBERTa-v2 model)"),jTe.forEach(t),fNe=i(T),bm=n(T,"LI",{});var NTe=s(bm);RH=n(NTe,"STRONG",{});var BSr=s(RH);mNe=r(BSr,"deit"),BSr.forEach(t),gNe=r(NTe," \u2014 "),O9=n(NTe,"A",{href:!0});var xSr=s(O9);hNe=r(xSr,"DeiTConfig"),xSr.forEach(t),pNe=r(NTe," (DeiT model)"),NTe.forEach(t),_Ne=i(T),vm=n(T,"LI",{});var DTe=s(vm);SH=n(DTe,"STRONG",{});var kSr=s(SH);uNe=r(kSr,"detr"),kSr.forEach(t),bNe=r(DTe," \u2014 "),X9=n(DTe,"A",{href:!0});var RSr=s(X9);vNe=r(RSr,"DetrConfig"),RSr.forEach(t),TNe=r(DTe," (DETR model)"),DTe.forEach(t),FNe=i(T),Tm=n(T,"LI",{});var qTe=s(Tm);PH=n(qTe,"STRONG",{});var SSr=s(PH);CNe=r(SSr,"distilbert"),SSr.forEach(t),MNe=r(qTe," \u2014 "),V9=n(qTe,"A",{href:!0});var PSr=s(V9);ENe=r(PSr,"DistilBertConfig"),PSr.forEach(t),yNe=r(qTe," (DistilBERT model)"),qTe.forEach(t),wNe=i(T),Fm=n(T,"LI",{});var GTe=s(Fm);$H=n(GTe,"STRONG",{});var $Sr=s($H);ANe=r($Sr,"dpr"),$Sr.forEach(t),LNe=r(GTe," \u2014 "),z9=n(GTe,"A",{href:!0});var ISr=s(z9);BNe=r(ISr,"DPRConfig"),ISr.forEach(t),xNe=r(GTe," (DPR model)"),GTe.forEach(t),kNe=i(T),Cm=n(T,"LI",{});var OTe=s(Cm);IH=n(OTe,"STRONG",{});var jSr=s(IH);RNe=r(jSr,"electra"),jSr.forEach(t),SNe=r(OTe," \u2014 "),W9=n(OTe,"A",{href:!0});var NSr=s(W9);PNe=r(NSr,"ElectraConfig"),NSr.forEach(t),$Ne=r(OTe," (ELECTRA model)"),OTe.forEach(t),INe=i(T),Mm=n(T,"LI",{});var XTe=s(Mm);jH=n(XTe,"STRONG",{});var DSr=s(jH);jNe=r(DSr,"encoder-decoder"),DSr.forEach(t),NNe=r(XTe," \u2014 "),Q9=n(XTe,"A",{href:!0});var qSr=s(Q9);DNe=r(qSr,"EncoderDecoderConfig"),qSr.forEach(t),qNe=r(XTe," (Encoder decoder model)"),XTe.forEach(t),GNe=i(T),Em=n(T,"LI",{});var VTe=s(Em);NH=n(VTe,"STRONG",{});var GSr=s(NH);ONe=r(GSr,"flaubert"),GSr.forEach(t),XNe=r(VTe," \u2014 "),H9=n(VTe,"A",{href:!0});var OSr=s(H9);VNe=r(OSr,"FlaubertConfig"),OSr.forEach(t),zNe=r(VTe," (FlauBERT model)"),VTe.forEach(t),WNe=i(T),ym=n(T,"LI",{});var zTe=s(ym);DH=n(zTe,"STRONG",{});var XSr=s(DH);QNe=r(XSr,"fnet"),XSr.forEach(t),HNe=r(zTe," \u2014 "),U9=n(zTe,"A",{href:!0});var VSr=s(U9);UNe=r(VSr,"FNetConfig"),VSr.forEach(t),JNe=r(zTe," (FNet model)"),zTe.forEach(t),YNe=i(T),wm=n(T,"LI",{});var WTe=s(wm);qH=n(WTe,"STRONG",{});var zSr=s(qH);KNe=r(zSr,"fsmt"),zSr.forEach(t),ZNe=r(WTe," \u2014 "),J9=n(WTe,"A",{href:!0});var WSr=s(J9);eDe=r(WSr,"FSMTConfig"),WSr.forEach(t),oDe=r(WTe," (FairSeq Machine-Translation model)"),WTe.forEach(t),rDe=i(T),Am=n(T,"LI",{});var QTe=s(Am);GH=n(QTe,"STRONG",{});var QSr=s(GH);tDe=r(QSr,"funnel"),QSr.forEach(t),aDe=r(QTe," \u2014 "),Y9=n(QTe,"A",{href:!0});var HSr=s(Y9);nDe=r(HSr,"FunnelConfig"),HSr.forEach(t),sDe=r(QTe," (Funnel Transformer model)"),QTe.forEach(t),lDe=i(T),Lm=n(T,"LI",{});var HTe=s(Lm);OH=n(HTe,"STRONG",{});var USr=s(OH);iDe=r(USr,"glpn"),USr.forEach(t),dDe=r(HTe," \u2014 "),K9=n(HTe,"A",{href:!0});var JSr=s(K9);cDe=r(JSr,"GLPNConfig"),JSr.forEach(t),fDe=r(HTe," (GLPN model)"),HTe.forEach(t),mDe=i(T),Bm=n(T,"LI",{});var UTe=s(Bm);XH=n(UTe,"STRONG",{});var YSr=s(XH);gDe=r(YSr,"gpt2"),YSr.forEach(t),hDe=r(UTe," \u2014 "),Z9=n(UTe,"A",{href:!0});var KSr=s(Z9);pDe=r(KSr,"GPT2Config"),KSr.forEach(t),_De=r(UTe," (OpenAI GPT-2 model)"),UTe.forEach(t),uDe=i(T),xm=n(T,"LI",{});var JTe=s(xm);VH=n(JTe,"STRONG",{});var ZSr=s(VH);bDe=r(ZSr,"gpt_neo"),ZSr.forEach(t),vDe=r(JTe," \u2014 "),eB=n(JTe,"A",{href:!0});var ePr=s(eB);TDe=r(ePr,"GPTNeoConfig"),ePr.forEach(t),FDe=r(JTe," (GPT Neo model)"),JTe.forEach(t),CDe=i(T),km=n(T,"LI",{});var YTe=s(km);zH=n(YTe,"STRONG",{});var oPr=s(zH);MDe=r(oPr,"gptj"),oPr.forEach(t),EDe=r(YTe," \u2014 "),oB=n(YTe,"A",{href:!0});var rPr=s(oB);yDe=r(rPr,"GPTJConfig"),rPr.forEach(t),wDe=r(YTe," (GPT-J model)"),YTe.forEach(t),ADe=i(T),Rm=n(T,"LI",{});var KTe=s(Rm);WH=n(KTe,"STRONG",{});var tPr=s(WH);LDe=r(tPr,"hubert"),tPr.forEach(t),BDe=r(KTe," \u2014 "),rB=n(KTe,"A",{href:!0});var aPr=s(rB);xDe=r(aPr,"HubertConfig"),aPr.forEach(t),kDe=r(KTe," (Hubert model)"),KTe.forEach(t),RDe=i(T),Sm=n(T,"LI",{});var ZTe=s(Sm);QH=n(ZTe,"STRONG",{});var nPr=s(QH);SDe=r(nPr,"ibert"),nPr.forEach(t),PDe=r(ZTe," \u2014 "),tB=n(ZTe,"A",{href:!0});var sPr=s(tB);$De=r(sPr,"IBertConfig"),sPr.forEach(t),IDe=r(ZTe," (I-BERT model)"),ZTe.forEach(t),jDe=i(T),Pm=n(T,"LI",{});var e8e=s(Pm);HH=n(e8e,"STRONG",{});var lPr=s(HH);NDe=r(lPr,"imagegpt"),lPr.forEach(t),DDe=r(e8e," \u2014 "),aB=n(e8e,"A",{href:!0});var iPr=s(aB);qDe=r(iPr,"ImageGPTConfig"),iPr.forEach(t),GDe=r(e8e," (ImageGPT model)"),e8e.forEach(t),ODe=i(T),$m=n(T,"LI",{});var o8e=s($m);UH=n(o8e,"STRONG",{});var dPr=s(UH);XDe=r(dPr,"layoutlm"),dPr.forEach(t),VDe=r(o8e," \u2014 "),nB=n(o8e,"A",{href:!0});var cPr=s(nB);zDe=r(cPr,"LayoutLMConfig"),cPr.forEach(t),WDe=r(o8e," (LayoutLM model)"),o8e.forEach(t),QDe=i(T),Im=n(T,"LI",{});var r8e=s(Im);JH=n(r8e,"STRONG",{});var fPr=s(JH);HDe=r(fPr,"layoutlmv2"),fPr.forEach(t),UDe=r(r8e," \u2014 "),sB=n(r8e,"A",{href:!0});var mPr=s(sB);JDe=r(mPr,"LayoutLMv2Config"),mPr.forEach(t),YDe=r(r8e," (LayoutLMv2 model)"),r8e.forEach(t),KDe=i(T),jm=n(T,"LI",{});var t8e=s(jm);YH=n(t8e,"STRONG",{});var gPr=s(YH);ZDe=r(gPr,"led"),gPr.forEach(t),eqe=r(t8e," \u2014 "),lB=n(t8e,"A",{href:!0});var hPr=s(lB);oqe=r(hPr,"LEDConfig"),hPr.forEach(t),rqe=r(t8e," (LED model)"),t8e.forEach(t),tqe=i(T),Nm=n(T,"LI",{});var a8e=s(Nm);KH=n(a8e,"STRONG",{});var pPr=s(KH);aqe=r(pPr,"longformer"),pPr.forEach(t),nqe=r(a8e," \u2014 "),iB=n(a8e,"A",{href:!0});var _Pr=s(iB);sqe=r(_Pr,"LongformerConfig"),_Pr.forEach(t),lqe=r(a8e," (Longformer model)"),a8e.forEach(t),iqe=i(T),Dm=n(T,"LI",{});var n8e=s(Dm);ZH=n(n8e,"STRONG",{});var uPr=s(ZH);dqe=r(uPr,"luke"),uPr.forEach(t),cqe=r(n8e," \u2014 "),dB=n(n8e,"A",{href:!0});var bPr=s(dB);fqe=r(bPr,"LukeConfig"),bPr.forEach(t),mqe=r(n8e," (LUKE model)"),n8e.forEach(t),gqe=i(T),qm=n(T,"LI",{});var s8e=s(qm);eU=n(s8e,"STRONG",{});var vPr=s(eU);hqe=r(vPr,"lxmert"),vPr.forEach(t),pqe=r(s8e," \u2014 "),cB=n(s8e,"A",{href:!0});var TPr=s(cB);_qe=r(TPr,"LxmertConfig"),TPr.forEach(t),uqe=r(s8e," (LXMERT model)"),s8e.forEach(t),bqe=i(T),Gm=n(T,"LI",{});var l8e=s(Gm);oU=n(l8e,"STRONG",{});var FPr=s(oU);vqe=r(FPr,"m2m_100"),FPr.forEach(t),Tqe=r(l8e," \u2014 "),fB=n(l8e,"A",{href:!0});var CPr=s(fB);Fqe=r(CPr,"M2M100Config"),CPr.forEach(t),Cqe=r(l8e," (M2M100 model)"),l8e.forEach(t),Mqe=i(T),Om=n(T,"LI",{});var i8e=s(Om);rU=n(i8e,"STRONG",{});var MPr=s(rU);Eqe=r(MPr,"marian"),MPr.forEach(t),yqe=r(i8e," \u2014 "),mB=n(i8e,"A",{href:!0});var EPr=s(mB);wqe=r(EPr,"MarianConfig"),EPr.forEach(t),Aqe=r(i8e," (Marian model)"),i8e.forEach(t),Lqe=i(T),Xm=n(T,"LI",{});var d8e=s(Xm);tU=n(d8e,"STRONG",{});var yPr=s(tU);Bqe=r(yPr,"maskformer"),yPr.forEach(t),xqe=r(d8e," \u2014 "),gB=n(d8e,"A",{href:!0});var wPr=s(gB);kqe=r(wPr,"MaskFormerConfig"),wPr.forEach(t),Rqe=r(d8e," (MaskFormer model)"),d8e.forEach(t),Sqe=i(T),Vm=n(T,"LI",{});var c8e=s(Vm);aU=n(c8e,"STRONG",{});var APr=s(aU);Pqe=r(APr,"mbart"),APr.forEach(t),$qe=r(c8e," \u2014 "),hB=n(c8e,"A",{href:!0});var LPr=s(hB);Iqe=r(LPr,"MBartConfig"),LPr.forEach(t),jqe=r(c8e," (mBART model)"),c8e.forEach(t),Nqe=i(T),zm=n(T,"LI",{});var f8e=s(zm);nU=n(f8e,"STRONG",{});var BPr=s(nU);Dqe=r(BPr,"megatron-bert"),BPr.forEach(t),qqe=r(f8e," \u2014 "),pB=n(f8e,"A",{href:!0});var xPr=s(pB);Gqe=r(xPr,"MegatronBertConfig"),xPr.forEach(t),Oqe=r(f8e," (MegatronBert model)"),f8e.forEach(t),Xqe=i(T),Wm=n(T,"LI",{});var m8e=s(Wm);sU=n(m8e,"STRONG",{});var kPr=s(sU);Vqe=r(kPr,"mobilebert"),kPr.forEach(t),zqe=r(m8e," \u2014 "),_B=n(m8e,"A",{href:!0});var RPr=s(_B);Wqe=r(RPr,"MobileBertConfig"),RPr.forEach(t),Qqe=r(m8e," (MobileBERT model)"),m8e.forEach(t),Hqe=i(T),Qm=n(T,"LI",{});var g8e=s(Qm);lU=n(g8e,"STRONG",{});var SPr=s(lU);Uqe=r(SPr,"mpnet"),SPr.forEach(t),Jqe=r(g8e," \u2014 "),uB=n(g8e,"A",{href:!0});var PPr=s(uB);Yqe=r(PPr,"MPNetConfig"),PPr.forEach(t),Kqe=r(g8e," (MPNet model)"),g8e.forEach(t),Zqe=i(T),Hm=n(T,"LI",{});var h8e=s(Hm);iU=n(h8e,"STRONG",{});var $Pr=s(iU);eGe=r($Pr,"mt5"),$Pr.forEach(t),oGe=r(h8e," \u2014 "),bB=n(h8e,"A",{href:!0});var IPr=s(bB);rGe=r(IPr,"MT5Config"),IPr.forEach(t),tGe=r(h8e," (mT5 model)"),h8e.forEach(t),aGe=i(T),Um=n(T,"LI",{});var p8e=s(Um);dU=n(p8e,"STRONG",{});var jPr=s(dU);nGe=r(jPr,"nystromformer"),jPr.forEach(t),sGe=r(p8e," \u2014 "),vB=n(p8e,"A",{href:!0});var NPr=s(vB);lGe=r(NPr,"NystromformerConfig"),NPr.forEach(t),iGe=r(p8e," (Nystromformer model)"),p8e.forEach(t),dGe=i(T),Jm=n(T,"LI",{});var _8e=s(Jm);cU=n(_8e,"STRONG",{});var DPr=s(cU);cGe=r(DPr,"openai-gpt"),DPr.forEach(t),fGe=r(_8e," \u2014 "),TB=n(_8e,"A",{href:!0});var qPr=s(TB);mGe=r(qPr,"OpenAIGPTConfig"),qPr.forEach(t),gGe=r(_8e," (OpenAI GPT model)"),_8e.forEach(t),hGe=i(T),Ym=n(T,"LI",{});var u8e=s(Ym);fU=n(u8e,"STRONG",{});var GPr=s(fU);pGe=r(GPr,"pegasus"),GPr.forEach(t),_Ge=r(u8e," \u2014 "),FB=n(u8e,"A",{href:!0});var OPr=s(FB);uGe=r(OPr,"PegasusConfig"),OPr.forEach(t),bGe=r(u8e," (Pegasus model)"),u8e.forEach(t),vGe=i(T),Km=n(T,"LI",{});var b8e=s(Km);mU=n(b8e,"STRONG",{});var XPr=s(mU);TGe=r(XPr,"perceiver"),XPr.forEach(t),FGe=r(b8e," \u2014 "),CB=n(b8e,"A",{href:!0});var VPr=s(CB);CGe=r(VPr,"PerceiverConfig"),VPr.forEach(t),MGe=r(b8e," (Perceiver model)"),b8e.forEach(t),EGe=i(T),Zm=n(T,"LI",{});var v8e=s(Zm);gU=n(v8e,"STRONG",{});var zPr=s(gU);yGe=r(zPr,"plbart"),zPr.forEach(t),wGe=r(v8e," \u2014 "),MB=n(v8e,"A",{href:!0});var WPr=s(MB);AGe=r(WPr,"PLBartConfig"),WPr.forEach(t),LGe=r(v8e," (PLBart model)"),v8e.forEach(t),BGe=i(T),eg=n(T,"LI",{});var T8e=s(eg);hU=n(T8e,"STRONG",{});var QPr=s(hU);xGe=r(QPr,"poolformer"),QPr.forEach(t),kGe=r(T8e," \u2014 "),EB=n(T8e,"A",{href:!0});var HPr=s(EB);RGe=r(HPr,"PoolFormerConfig"),HPr.forEach(t),SGe=r(T8e," (PoolFormer model)"),T8e.forEach(t),PGe=i(T),og=n(T,"LI",{});var F8e=s(og);pU=n(F8e,"STRONG",{});var UPr=s(pU);$Ge=r(UPr,"prophetnet"),UPr.forEach(t),IGe=r(F8e," \u2014 "),yB=n(F8e,"A",{href:!0});var JPr=s(yB);jGe=r(JPr,"ProphetNetConfig"),JPr.forEach(t),NGe=r(F8e," (ProphetNet model)"),F8e.forEach(t),DGe=i(T),rg=n(T,"LI",{});var C8e=s(rg);_U=n(C8e,"STRONG",{});var YPr=s(_U);qGe=r(YPr,"qdqbert"),YPr.forEach(t),GGe=r(C8e," \u2014 "),wB=n(C8e,"A",{href:!0});var KPr=s(wB);OGe=r(KPr,"QDQBertConfig"),KPr.forEach(t),XGe=r(C8e," (QDQBert model)"),C8e.forEach(t),VGe=i(T),tg=n(T,"LI",{});var M8e=s(tg);uU=n(M8e,"STRONG",{});var ZPr=s(uU);zGe=r(ZPr,"rag"),ZPr.forEach(t),WGe=r(M8e," \u2014 "),AB=n(M8e,"A",{href:!0});var e$r=s(AB);QGe=r(e$r,"RagConfig"),e$r.forEach(t),HGe=r(M8e," (RAG model)"),M8e.forEach(t),UGe=i(T),ag=n(T,"LI",{});var E8e=s(ag);bU=n(E8e,"STRONG",{});var o$r=s(bU);JGe=r(o$r,"realm"),o$r.forEach(t),YGe=r(E8e," \u2014 "),LB=n(E8e,"A",{href:!0});var r$r=s(LB);KGe=r(r$r,"RealmConfig"),r$r.forEach(t),ZGe=r(E8e," (Realm model)"),E8e.forEach(t),eOe=i(T),ng=n(T,"LI",{});var y8e=s(ng);vU=n(y8e,"STRONG",{});var t$r=s(vU);oOe=r(t$r,"reformer"),t$r.forEach(t),rOe=r(y8e," \u2014 "),BB=n(y8e,"A",{href:!0});var a$r=s(BB);tOe=r(a$r,"ReformerConfig"),a$r.forEach(t),aOe=r(y8e," (Reformer model)"),y8e.forEach(t),nOe=i(T),sg=n(T,"LI",{});var w8e=s(sg);TU=n(w8e,"STRONG",{});var n$r=s(TU);sOe=r(n$r,"rembert"),n$r.forEach(t),lOe=r(w8e," \u2014 "),xB=n(w8e,"A",{href:!0});var s$r=s(xB);iOe=r(s$r,"RemBertConfig"),s$r.forEach(t),dOe=r(w8e," (RemBERT model)"),w8e.forEach(t),cOe=i(T),lg=n(T,"LI",{});var A8e=s(lg);FU=n(A8e,"STRONG",{});var l$r=s(FU);fOe=r(l$r,"resnet"),l$r.forEach(t),mOe=r(A8e," \u2014 "),kB=n(A8e,"A",{href:!0});var i$r=s(kB);gOe=r(i$r,"ResNetConfig"),i$r.forEach(t),hOe=r(A8e," (ResNet model)"),A8e.forEach(t),pOe=i(T),ig=n(T,"LI",{});var L8e=s(ig);CU=n(L8e,"STRONG",{});var d$r=s(CU);_Oe=r(d$r,"retribert"),d$r.forEach(t),uOe=r(L8e," \u2014 "),RB=n(L8e,"A",{href:!0});var c$r=s(RB);bOe=r(c$r,"RetriBertConfig"),c$r.forEach(t),vOe=r(L8e," (RetriBERT model)"),L8e.forEach(t),TOe=i(T),dg=n(T,"LI",{});var B8e=s(dg);MU=n(B8e,"STRONG",{});var f$r=s(MU);FOe=r(f$r,"roberta"),f$r.forEach(t),COe=r(B8e," \u2014 "),SB=n(B8e,"A",{href:!0});var m$r=s(SB);MOe=r(m$r,"RobertaConfig"),m$r.forEach(t),EOe=r(B8e," (RoBERTa model)"),B8e.forEach(t),yOe=i(T),cg=n(T,"LI",{});var x8e=s(cg);EU=n(x8e,"STRONG",{});var g$r=s(EU);wOe=r(g$r,"roformer"),g$r.forEach(t),AOe=r(x8e," \u2014 "),PB=n(x8e,"A",{href:!0});var h$r=s(PB);LOe=r(h$r,"RoFormerConfig"),h$r.forEach(t),BOe=r(x8e," (RoFormer model)"),x8e.forEach(t),xOe=i(T),fg=n(T,"LI",{});var k8e=s(fg);yU=n(k8e,"STRONG",{});var p$r=s(yU);kOe=r(p$r,"segformer"),p$r.forEach(t),ROe=r(k8e," \u2014 "),$B=n(k8e,"A",{href:!0});var _$r=s($B);SOe=r(_$r,"SegformerConfig"),_$r.forEach(t),POe=r(k8e," (SegFormer model)"),k8e.forEach(t),$Oe=i(T),mg=n(T,"LI",{});var R8e=s(mg);wU=n(R8e,"STRONG",{});var u$r=s(wU);IOe=r(u$r,"sew"),u$r.forEach(t),jOe=r(R8e," \u2014 "),IB=n(R8e,"A",{href:!0});var b$r=s(IB);NOe=r(b$r,"SEWConfig"),b$r.forEach(t),DOe=r(R8e," (SEW model)"),R8e.forEach(t),qOe=i(T),gg=n(T,"LI",{});var S8e=s(gg);AU=n(S8e,"STRONG",{});var v$r=s(AU);GOe=r(v$r,"sew-d"),v$r.forEach(t),OOe=r(S8e," \u2014 "),jB=n(S8e,"A",{href:!0});var T$r=s(jB);XOe=r(T$r,"SEWDConfig"),T$r.forEach(t),VOe=r(S8e," (SEW-D model)"),S8e.forEach(t),zOe=i(T),hg=n(T,"LI",{});var P8e=s(hg);LU=n(P8e,"STRONG",{});var F$r=s(LU);WOe=r(F$r,"speech-encoder-decoder"),F$r.forEach(t),QOe=r(P8e," \u2014 "),NB=n(P8e,"A",{href:!0});var C$r=s(NB);HOe=r(C$r,"SpeechEncoderDecoderConfig"),C$r.forEach(t),UOe=r(P8e," (Speech Encoder decoder model)"),P8e.forEach(t),JOe=i(T),pg=n(T,"LI",{});var $8e=s(pg);BU=n($8e,"STRONG",{});var M$r=s(BU);YOe=r(M$r,"speech_to_text"),M$r.forEach(t),KOe=r($8e," \u2014 "),DB=n($8e,"A",{href:!0});var E$r=s(DB);ZOe=r(E$r,"Speech2TextConfig"),E$r.forEach(t),eXe=r($8e," (Speech2Text model)"),$8e.forEach(t),oXe=i(T),_g=n(T,"LI",{});var I8e=s(_g);xU=n(I8e,"STRONG",{});var y$r=s(xU);rXe=r(y$r,"speech_to_text_2"),y$r.forEach(t),tXe=r(I8e," \u2014 "),qB=n(I8e,"A",{href:!0});var w$r=s(qB);aXe=r(w$r,"Speech2Text2Config"),w$r.forEach(t),nXe=r(I8e," (Speech2Text2 model)"),I8e.forEach(t),sXe=i(T),ug=n(T,"LI",{});var j8e=s(ug);kU=n(j8e,"STRONG",{});var A$r=s(kU);lXe=r(A$r,"splinter"),A$r.forEach(t),iXe=r(j8e," \u2014 "),GB=n(j8e,"A",{href:!0});var L$r=s(GB);dXe=r(L$r,"SplinterConfig"),L$r.forEach(t),cXe=r(j8e," (Splinter model)"),j8e.forEach(t),fXe=i(T),bg=n(T,"LI",{});var N8e=s(bg);RU=n(N8e,"STRONG",{});var B$r=s(RU);mXe=r(B$r,"squeezebert"),B$r.forEach(t),gXe=r(N8e," \u2014 "),OB=n(N8e,"A",{href:!0});var x$r=s(OB);hXe=r(x$r,"SqueezeBertConfig"),x$r.forEach(t),pXe=r(N8e," (SqueezeBERT model)"),N8e.forEach(t),_Xe=i(T),vg=n(T,"LI",{});var D8e=s(vg);SU=n(D8e,"STRONG",{});var k$r=s(SU);uXe=r(k$r,"swin"),k$r.forEach(t),bXe=r(D8e," \u2014 "),XB=n(D8e,"A",{href:!0});var R$r=s(XB);vXe=r(R$r,"SwinConfig"),R$r.forEach(t),TXe=r(D8e," (Swin model)"),D8e.forEach(t),FXe=i(T),Tg=n(T,"LI",{});var q8e=s(Tg);PU=n(q8e,"STRONG",{});var S$r=s(PU);CXe=r(S$r,"t5"),S$r.forEach(t),MXe=r(q8e," \u2014 "),VB=n(q8e,"A",{href:!0});var P$r=s(VB);EXe=r(P$r,"T5Config"),P$r.forEach(t),yXe=r(q8e," (T5 model)"),q8e.forEach(t),wXe=i(T),Fg=n(T,"LI",{});var G8e=s(Fg);$U=n(G8e,"STRONG",{});var $$r=s($U);AXe=r($$r,"tapas"),$$r.forEach(t),LXe=r(G8e," \u2014 "),zB=n(G8e,"A",{href:!0});var I$r=s(zB);BXe=r(I$r,"TapasConfig"),I$r.forEach(t),xXe=r(G8e," (TAPAS model)"),G8e.forEach(t),kXe=i(T),Cg=n(T,"LI",{});var O8e=s(Cg);IU=n(O8e,"STRONG",{});var j$r=s(IU);RXe=r(j$r,"transfo-xl"),j$r.forEach(t),SXe=r(O8e," \u2014 "),WB=n(O8e,"A",{href:!0});var N$r=s(WB);PXe=r(N$r,"TransfoXLConfig"),N$r.forEach(t),$Xe=r(O8e," (Transformer-XL model)"),O8e.forEach(t),IXe=i(T),Mg=n(T,"LI",{});var X8e=s(Mg);jU=n(X8e,"STRONG",{});var D$r=s(jU);jXe=r(D$r,"trocr"),D$r.forEach(t),NXe=r(X8e," \u2014 "),QB=n(X8e,"A",{href:!0});var q$r=s(QB);DXe=r(q$r,"TrOCRConfig"),q$r.forEach(t),qXe=r(X8e," (TrOCR model)"),X8e.forEach(t),GXe=i(T),Eg=n(T,"LI",{});var V8e=s(Eg);NU=n(V8e,"STRONG",{});var G$r=s(NU);OXe=r(G$r,"unispeech"),G$r.forEach(t),XXe=r(V8e," \u2014 "),HB=n(V8e,"A",{href:!0});var O$r=s(HB);VXe=r(O$r,"UniSpeechConfig"),O$r.forEach(t),zXe=r(V8e," (UniSpeech model)"),V8e.forEach(t),WXe=i(T),yg=n(T,"LI",{});var z8e=s(yg);DU=n(z8e,"STRONG",{});var X$r=s(DU);QXe=r(X$r,"unispeech-sat"),X$r.forEach(t),HXe=r(z8e," \u2014 "),UB=n(z8e,"A",{href:!0});var V$r=s(UB);UXe=r(V$r,"UniSpeechSatConfig"),V$r.forEach(t),JXe=r(z8e," (UniSpeechSat model)"),z8e.forEach(t),YXe=i(T),wg=n(T,"LI",{});var W8e=s(wg);qU=n(W8e,"STRONG",{});var z$r=s(qU);KXe=r(z$r,"van"),z$r.forEach(t),ZXe=r(W8e," \u2014 "),JB=n(W8e,"A",{href:!0});var W$r=s(JB);eVe=r(W$r,"VanConfig"),W$r.forEach(t),oVe=r(W8e," (VAN model)"),W8e.forEach(t),rVe=i(T),Ag=n(T,"LI",{});var Q8e=s(Ag);GU=n(Q8e,"STRONG",{});var Q$r=s(GU);tVe=r(Q$r,"vilt"),Q$r.forEach(t),aVe=r(Q8e," \u2014 "),YB=n(Q8e,"A",{href:!0});var H$r=s(YB);nVe=r(H$r,"ViltConfig"),H$r.forEach(t),sVe=r(Q8e," (ViLT model)"),Q8e.forEach(t),lVe=i(T),Lg=n(T,"LI",{});var H8e=s(Lg);OU=n(H8e,"STRONG",{});var U$r=s(OU);iVe=r(U$r,"vision-encoder-decoder"),U$r.forEach(t),dVe=r(H8e," \u2014 "),KB=n(H8e,"A",{href:!0});var J$r=s(KB);cVe=r(J$r,"VisionEncoderDecoderConfig"),J$r.forEach(t),fVe=r(H8e," (Vision Encoder decoder model)"),H8e.forEach(t),mVe=i(T),Bg=n(T,"LI",{});var U8e=s(Bg);XU=n(U8e,"STRONG",{});var Y$r=s(XU);gVe=r(Y$r,"vision-text-dual-encoder"),Y$r.forEach(t),hVe=r(U8e," \u2014 "),ZB=n(U8e,"A",{href:!0});var K$r=s(ZB);pVe=r(K$r,"VisionTextDualEncoderConfig"),K$r.forEach(t),_Ve=r(U8e," (VisionTextDualEncoder model)"),U8e.forEach(t),uVe=i(T),xg=n(T,"LI",{});var J8e=s(xg);VU=n(J8e,"STRONG",{});var Z$r=s(VU);bVe=r(Z$r,"visual_bert"),Z$r.forEach(t),vVe=r(J8e," \u2014 "),ex=n(J8e,"A",{href:!0});var eIr=s(ex);TVe=r(eIr,"VisualBertConfig"),eIr.forEach(t),FVe=r(J8e," (VisualBert model)"),J8e.forEach(t),CVe=i(T),kg=n(T,"LI",{});var Y8e=s(kg);zU=n(Y8e,"STRONG",{});var oIr=s(zU);MVe=r(oIr,"vit"),oIr.forEach(t),EVe=r(Y8e," \u2014 "),ox=n(Y8e,"A",{href:!0});var rIr=s(ox);yVe=r(rIr,"ViTConfig"),rIr.forEach(t),wVe=r(Y8e," (ViT model)"),Y8e.forEach(t),AVe=i(T),Rg=n(T,"LI",{});var K8e=s(Rg);WU=n(K8e,"STRONG",{});var tIr=s(WU);LVe=r(tIr,"vit_mae"),tIr.forEach(t),BVe=r(K8e," \u2014 "),rx=n(K8e,"A",{href:!0});var aIr=s(rx);xVe=r(aIr,"ViTMAEConfig"),aIr.forEach(t),kVe=r(K8e," (ViTMAE model)"),K8e.forEach(t),RVe=i(T),Sg=n(T,"LI",{});var Z8e=s(Sg);QU=n(Z8e,"STRONG",{});var nIr=s(QU);SVe=r(nIr,"wav2vec2"),nIr.forEach(t),PVe=r(Z8e," \u2014 "),tx=n(Z8e,"A",{href:!0});var sIr=s(tx);$Ve=r(sIr,"Wav2Vec2Config"),sIr.forEach(t),IVe=r(Z8e," (Wav2Vec2 model)"),Z8e.forEach(t),jVe=i(T),Pg=n(T,"LI",{});var eFe=s(Pg);HU=n(eFe,"STRONG",{});var lIr=s(HU);NVe=r(lIr,"wavlm"),lIr.forEach(t),DVe=r(eFe," \u2014 "),ax=n(eFe,"A",{href:!0});var iIr=s(ax);qVe=r(iIr,"WavLMConfig"),iIr.forEach(t),GVe=r(eFe," (WavLM model)"),eFe.forEach(t),OVe=i(T),$g=n(T,"LI",{});var oFe=s($g);UU=n(oFe,"STRONG",{});var dIr=s(UU);XVe=r(dIr,"xglm"),dIr.forEach(t),VVe=r(oFe," \u2014 "),nx=n(oFe,"A",{href:!0});var cIr=s(nx);zVe=r(cIr,"XGLMConfig"),cIr.forEach(t),WVe=r(oFe," (XGLM model)"),oFe.forEach(t),QVe=i(T),Ig=n(T,"LI",{});var rFe=s(Ig);JU=n(rFe,"STRONG",{});var fIr=s(JU);HVe=r(fIr,"xlm"),fIr.forEach(t),UVe=r(rFe," \u2014 "),sx=n(rFe,"A",{href:!0});var mIr=s(sx);JVe=r(mIr,"XLMConfig"),mIr.forEach(t),YVe=r(rFe," (XLM model)"),rFe.forEach(t),KVe=i(T),jg=n(T,"LI",{});var tFe=s(jg);YU=n(tFe,"STRONG",{});var gIr=s(YU);ZVe=r(gIr,"xlm-prophetnet"),gIr.forEach(t),eze=r(tFe," \u2014 "),lx=n(tFe,"A",{href:!0});var hIr=s(lx);oze=r(hIr,"XLMProphetNetConfig"),hIr.forEach(t),rze=r(tFe," (XLMProphetNet model)"),tFe.forEach(t),tze=i(T),Ng=n(T,"LI",{});var aFe=s(Ng);KU=n(aFe,"STRONG",{});var pIr=s(KU);aze=r(pIr,"xlm-roberta"),pIr.forEach(t),nze=r(aFe," \u2014 "),ix=n(aFe,"A",{href:!0});var _Ir=s(ix);sze=r(_Ir,"XLMRobertaConfig"),_Ir.forEach(t),lze=r(aFe," (XLM-RoBERTa model)"),aFe.forEach(t),ize=i(T),Dg=n(T,"LI",{});var nFe=s(Dg);ZU=n(nFe,"STRONG",{});var uIr=s(ZU);dze=r(uIr,"xlm-roberta-xl"),uIr.forEach(t),cze=r(nFe," \u2014 "),dx=n(nFe,"A",{href:!0});var bIr=s(dx);fze=r(bIr,"XLMRobertaXLConfig"),bIr.forEach(t),mze=r(nFe," (XLM-RoBERTa-XL model)"),nFe.forEach(t),gze=i(T),qg=n(T,"LI",{});var sFe=s(qg);eJ=n(sFe,"STRONG",{});var vIr=s(eJ);hze=r(vIr,"xlnet"),vIr.forEach(t),pze=r(sFe," \u2014 "),cx=n(sFe,"A",{href:!0});var TIr=s(cx);_ze=r(TIr,"XLNetConfig"),TIr.forEach(t),uze=r(sFe," (XLNet model)"),sFe.forEach(t),bze=i(T),Gg=n(T,"LI",{});var lFe=s(Gg);oJ=n(lFe,"STRONG",{});var FIr=s(oJ);vze=r(FIr,"yoso"),FIr.forEach(t),Tze=r(lFe," \u2014 "),fx=n(lFe,"A",{href:!0});var CIr=s(fx);Fze=r(CIr,"YosoConfig"),CIr.forEach(t),Cze=r(lFe," (YOSO model)"),lFe.forEach(t),T.forEach(t),Mze=i(_a),rJ=n(_a,"P",{});var MIr=s(rJ);Eze=r(MIr,"Examples:"),MIr.forEach(t),yze=i(_a),m(A4.$$.fragment,_a),_a.forEach(t),wze=i(Qs),Og=n(Qs,"DIV",{class:!0});var XSe=s(Og);m(L4.$$.fragment,XSe),Aze=i(XSe),tJ=n(XSe,"P",{});var EIr=s(tJ);Lze=r(EIr,"Register a new configuration for this class."),EIr.forEach(t),XSe.forEach(t),Qs.forEach(t),Dke=i(d),ed=n(d,"H2",{class:!0});var VSe=s(ed);Xg=n(VSe,"A",{id:!0,class:!0,href:!0});var yIr=s(Xg);aJ=n(yIr,"SPAN",{});var wIr=s(aJ);m(B4.$$.fragment,wIr),wIr.forEach(t),yIr.forEach(t),Bze=i(VSe),nJ=n(VSe,"SPAN",{});var AIr=s(nJ);xze=r(AIr,"AutoTokenizer"),AIr.forEach(t),VSe.forEach(t),qke=i(d),Ho=n(d,"DIV",{class:!0});var Hs=s(Ho);m(x4.$$.fragment,Hs),kze=i(Hs),k4=n(Hs,"P",{});var zSe=s(k4);Rze=r(zSe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),mx=n(zSe,"A",{href:!0});var LIr=s(mx);Sze=r(LIr,"AutoTokenizer.from_pretrained()"),LIr.forEach(t),Pze=r(zSe," class method."),zSe.forEach(t),$ze=i(Hs),R4=n(Hs,"P",{});var WSe=s(R4);Ize=r(WSe,"This class cannot be instantiated directly using "),sJ=n(WSe,"CODE",{});var BIr=s(sJ);jze=r(BIr,"__init__()"),BIr.forEach(t),Nze=r(WSe," (throws an error)."),WSe.forEach(t),Dze=i(Hs),go=n(Hs,"DIV",{class:!0});var ua=s(go);m(S4.$$.fragment,ua),qze=i(ua),lJ=n(ua,"P",{});var xIr=s(lJ);Gze=r(xIr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),xIr.forEach(t),Oze=i(ua),Wa=n(ua,"P",{});var uM=s(Wa);Xze=r(uM,"The tokenizer class to instantiate is selected based on the "),iJ=n(uM,"CODE",{});var kIr=s(iJ);Vze=r(kIr,"model_type"),kIr.forEach(t),zze=r(uM,` property of the config object (either
passed as an argument or loaded from `),dJ=n(uM,"CODE",{});var RIr=s(dJ);Wze=r(RIr,"pretrained_model_name_or_path"),RIr.forEach(t),Qze=r(uM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cJ=n(uM,"CODE",{});var SIr=s(cJ);Hze=r(SIr,"pretrained_model_name_or_path"),SIr.forEach(t),Uze=r(uM,":"),uM.forEach(t),Jze=i(ua),E=n(ua,"UL",{});var y=s(E);Yn=n(y,"LI",{});var T7=s(Yn);fJ=n(T7,"STRONG",{});var PIr=s(fJ);Yze=r(PIr,"albert"),PIr.forEach(t),Kze=r(T7," \u2014 "),gx=n(T7,"A",{href:!0});var $Ir=s(gx);Zze=r($Ir,"AlbertTokenizer"),$Ir.forEach(t),eWe=r(T7," or "),hx=n(T7,"A",{href:!0});var IIr=s(hx);oWe=r(IIr,"AlbertTokenizerFast"),IIr.forEach(t),rWe=r(T7," (ALBERT model)"),T7.forEach(t),tWe=i(y),Kn=n(y,"LI",{});var F7=s(Kn);mJ=n(F7,"STRONG",{});var jIr=s(mJ);aWe=r(jIr,"bart"),jIr.forEach(t),nWe=r(F7," \u2014 "),px=n(F7,"A",{href:!0});var NIr=s(px);sWe=r(NIr,"BartTokenizer"),NIr.forEach(t),lWe=r(F7," or "),_x=n(F7,"A",{href:!0});var DIr=s(_x);iWe=r(DIr,"BartTokenizerFast"),DIr.forEach(t),dWe=r(F7," (BART model)"),F7.forEach(t),cWe=i(y),Zn=n(y,"LI",{});var C7=s(Zn);gJ=n(C7,"STRONG",{});var qIr=s(gJ);fWe=r(qIr,"barthez"),qIr.forEach(t),mWe=r(C7," \u2014 "),ux=n(C7,"A",{href:!0});var GIr=s(ux);gWe=r(GIr,"BarthezTokenizer"),GIr.forEach(t),hWe=r(C7," or "),bx=n(C7,"A",{href:!0});var OIr=s(bx);pWe=r(OIr,"BarthezTokenizerFast"),OIr.forEach(t),_We=r(C7," (BARThez model)"),C7.forEach(t),uWe=i(y),Vg=n(y,"LI",{});var iFe=s(Vg);hJ=n(iFe,"STRONG",{});var XIr=s(hJ);bWe=r(XIr,"bartpho"),XIr.forEach(t),vWe=r(iFe," \u2014 "),vx=n(iFe,"A",{href:!0});var VIr=s(vx);TWe=r(VIr,"BartphoTokenizer"),VIr.forEach(t),FWe=r(iFe," (BARTpho model)"),iFe.forEach(t),CWe=i(y),es=n(y,"LI",{});var M7=s(es);pJ=n(M7,"STRONG",{});var zIr=s(pJ);MWe=r(zIr,"bert"),zIr.forEach(t),EWe=r(M7," \u2014 "),Tx=n(M7,"A",{href:!0});var WIr=s(Tx);yWe=r(WIr,"BertTokenizer"),WIr.forEach(t),wWe=r(M7," or "),Fx=n(M7,"A",{href:!0});var QIr=s(Fx);AWe=r(QIr,"BertTokenizerFast"),QIr.forEach(t),LWe=r(M7," (BERT model)"),M7.forEach(t),BWe=i(y),zg=n(y,"LI",{});var dFe=s(zg);_J=n(dFe,"STRONG",{});var HIr=s(_J);xWe=r(HIr,"bert-generation"),HIr.forEach(t),kWe=r(dFe," \u2014 "),Cx=n(dFe,"A",{href:!0});var UIr=s(Cx);RWe=r(UIr,"BertGenerationTokenizer"),UIr.forEach(t),SWe=r(dFe," (Bert Generation model)"),dFe.forEach(t),PWe=i(y),Wg=n(y,"LI",{});var cFe=s(Wg);uJ=n(cFe,"STRONG",{});var JIr=s(uJ);$We=r(JIr,"bert-japanese"),JIr.forEach(t),IWe=r(cFe," \u2014 "),Mx=n(cFe,"A",{href:!0});var YIr=s(Mx);jWe=r(YIr,"BertJapaneseTokenizer"),YIr.forEach(t),NWe=r(cFe," (BertJapanese model)"),cFe.forEach(t),DWe=i(y),Qg=n(y,"LI",{});var fFe=s(Qg);bJ=n(fFe,"STRONG",{});var KIr=s(bJ);qWe=r(KIr,"bertweet"),KIr.forEach(t),GWe=r(fFe," \u2014 "),Ex=n(fFe,"A",{href:!0});var ZIr=s(Ex);OWe=r(ZIr,"BertweetTokenizer"),ZIr.forEach(t),XWe=r(fFe," (Bertweet model)"),fFe.forEach(t),VWe=i(y),os=n(y,"LI",{});var E7=s(os);vJ=n(E7,"STRONG",{});var ejr=s(vJ);zWe=r(ejr,"big_bird"),ejr.forEach(t),WWe=r(E7," \u2014 "),yx=n(E7,"A",{href:!0});var ojr=s(yx);QWe=r(ojr,"BigBirdTokenizer"),ojr.forEach(t),HWe=r(E7," or "),wx=n(E7,"A",{href:!0});var rjr=s(wx);UWe=r(rjr,"BigBirdTokenizerFast"),rjr.forEach(t),JWe=r(E7," (BigBird model)"),E7.forEach(t),YWe=i(y),rs=n(y,"LI",{});var y7=s(rs);TJ=n(y7,"STRONG",{});var tjr=s(TJ);KWe=r(tjr,"bigbird_pegasus"),tjr.forEach(t),ZWe=r(y7," \u2014 "),Ax=n(y7,"A",{href:!0});var ajr=s(Ax);eQe=r(ajr,"PegasusTokenizer"),ajr.forEach(t),oQe=r(y7," or "),Lx=n(y7,"A",{href:!0});var njr=s(Lx);rQe=r(njr,"PegasusTokenizerFast"),njr.forEach(t),tQe=r(y7," (BigBirdPegasus model)"),y7.forEach(t),aQe=i(y),ts=n(y,"LI",{});var w7=s(ts);FJ=n(w7,"STRONG",{});var sjr=s(FJ);nQe=r(sjr,"blenderbot"),sjr.forEach(t),sQe=r(w7," \u2014 "),Bx=n(w7,"A",{href:!0});var ljr=s(Bx);lQe=r(ljr,"BlenderbotTokenizer"),ljr.forEach(t),iQe=r(w7," or "),xx=n(w7,"A",{href:!0});var ijr=s(xx);dQe=r(ijr,"BlenderbotTokenizerFast"),ijr.forEach(t),cQe=r(w7," (Blenderbot model)"),w7.forEach(t),fQe=i(y),Hg=n(y,"LI",{});var mFe=s(Hg);CJ=n(mFe,"STRONG",{});var djr=s(CJ);mQe=r(djr,"blenderbot-small"),djr.forEach(t),gQe=r(mFe," \u2014 "),kx=n(mFe,"A",{href:!0});var cjr=s(kx);hQe=r(cjr,"BlenderbotSmallTokenizer"),cjr.forEach(t),pQe=r(mFe," (BlenderbotSmall model)"),mFe.forEach(t),_Qe=i(y),Ug=n(y,"LI",{});var gFe=s(Ug);MJ=n(gFe,"STRONG",{});var fjr=s(MJ);uQe=r(fjr,"byt5"),fjr.forEach(t),bQe=r(gFe," \u2014 "),Rx=n(gFe,"A",{href:!0});var mjr=s(Rx);vQe=r(mjr,"ByT5Tokenizer"),mjr.forEach(t),TQe=r(gFe," (ByT5 model)"),gFe.forEach(t),FQe=i(y),as=n(y,"LI",{});var A7=s(as);EJ=n(A7,"STRONG",{});var gjr=s(EJ);CQe=r(gjr,"camembert"),gjr.forEach(t),MQe=r(A7," \u2014 "),Sx=n(A7,"A",{href:!0});var hjr=s(Sx);EQe=r(hjr,"CamembertTokenizer"),hjr.forEach(t),yQe=r(A7," or "),Px=n(A7,"A",{href:!0});var pjr=s(Px);wQe=r(pjr,"CamembertTokenizerFast"),pjr.forEach(t),AQe=r(A7," (CamemBERT model)"),A7.forEach(t),LQe=i(y),Jg=n(y,"LI",{});var hFe=s(Jg);yJ=n(hFe,"STRONG",{});var _jr=s(yJ);BQe=r(_jr,"canine"),_jr.forEach(t),xQe=r(hFe," \u2014 "),$x=n(hFe,"A",{href:!0});var ujr=s($x);kQe=r(ujr,"CanineTokenizer"),ujr.forEach(t),RQe=r(hFe," (Canine model)"),hFe.forEach(t),SQe=i(y),ns=n(y,"LI",{});var L7=s(ns);wJ=n(L7,"STRONG",{});var bjr=s(wJ);PQe=r(bjr,"clip"),bjr.forEach(t),$Qe=r(L7," \u2014 "),Ix=n(L7,"A",{href:!0});var vjr=s(Ix);IQe=r(vjr,"CLIPTokenizer"),vjr.forEach(t),jQe=r(L7," or "),jx=n(L7,"A",{href:!0});var Tjr=s(jx);NQe=r(Tjr,"CLIPTokenizerFast"),Tjr.forEach(t),DQe=r(L7," (CLIP model)"),L7.forEach(t),qQe=i(y),ss=n(y,"LI",{});var B7=s(ss);AJ=n(B7,"STRONG",{});var Fjr=s(AJ);GQe=r(Fjr,"convbert"),Fjr.forEach(t),OQe=r(B7," \u2014 "),Nx=n(B7,"A",{href:!0});var Cjr=s(Nx);XQe=r(Cjr,"ConvBertTokenizer"),Cjr.forEach(t),VQe=r(B7," or "),Dx=n(B7,"A",{href:!0});var Mjr=s(Dx);zQe=r(Mjr,"ConvBertTokenizerFast"),Mjr.forEach(t),WQe=r(B7," (ConvBERT model)"),B7.forEach(t),QQe=i(y),ls=n(y,"LI",{});var x7=s(ls);LJ=n(x7,"STRONG",{});var Ejr=s(LJ);HQe=r(Ejr,"cpm"),Ejr.forEach(t),UQe=r(x7," \u2014 "),qx=n(x7,"A",{href:!0});var yjr=s(qx);JQe=r(yjr,"CpmTokenizer"),yjr.forEach(t),YQe=r(x7," or "),BJ=n(x7,"CODE",{});var wjr=s(BJ);KQe=r(wjr,"CpmTokenizerFast"),wjr.forEach(t),ZQe=r(x7," (CPM model)"),x7.forEach(t),eHe=i(y),Yg=n(y,"LI",{});var pFe=s(Yg);xJ=n(pFe,"STRONG",{});var Ajr=s(xJ);oHe=r(Ajr,"ctrl"),Ajr.forEach(t),rHe=r(pFe," \u2014 "),Gx=n(pFe,"A",{href:!0});var Ljr=s(Gx);tHe=r(Ljr,"CTRLTokenizer"),Ljr.forEach(t),aHe=r(pFe," (CTRL model)"),pFe.forEach(t),nHe=i(y),is=n(y,"LI",{});var k7=s(is);kJ=n(k7,"STRONG",{});var Bjr=s(kJ);sHe=r(Bjr,"deberta"),Bjr.forEach(t),lHe=r(k7," \u2014 "),Ox=n(k7,"A",{href:!0});var xjr=s(Ox);iHe=r(xjr,"DebertaTokenizer"),xjr.forEach(t),dHe=r(k7," or "),Xx=n(k7,"A",{href:!0});var kjr=s(Xx);cHe=r(kjr,"DebertaTokenizerFast"),kjr.forEach(t),fHe=r(k7," (DeBERTa model)"),k7.forEach(t),mHe=i(y),Kg=n(y,"LI",{});var _Fe=s(Kg);RJ=n(_Fe,"STRONG",{});var Rjr=s(RJ);gHe=r(Rjr,"deberta-v2"),Rjr.forEach(t),hHe=r(_Fe," \u2014 "),Vx=n(_Fe,"A",{href:!0});var Sjr=s(Vx);pHe=r(Sjr,"DebertaV2Tokenizer"),Sjr.forEach(t),_He=r(_Fe," (DeBERTa-v2 model)"),_Fe.forEach(t),uHe=i(y),ds=n(y,"LI",{});var R7=s(ds);SJ=n(R7,"STRONG",{});var Pjr=s(SJ);bHe=r(Pjr,"distilbert"),Pjr.forEach(t),vHe=r(R7," \u2014 "),zx=n(R7,"A",{href:!0});var $jr=s(zx);THe=r($jr,"DistilBertTokenizer"),$jr.forEach(t),FHe=r(R7," or "),Wx=n(R7,"A",{href:!0});var Ijr=s(Wx);CHe=r(Ijr,"DistilBertTokenizerFast"),Ijr.forEach(t),MHe=r(R7," (DistilBERT model)"),R7.forEach(t),EHe=i(y),cs=n(y,"LI",{});var S7=s(cs);PJ=n(S7,"STRONG",{});var jjr=s(PJ);yHe=r(jjr,"dpr"),jjr.forEach(t),wHe=r(S7," \u2014 "),Qx=n(S7,"A",{href:!0});var Njr=s(Qx);AHe=r(Njr,"DPRQuestionEncoderTokenizer"),Njr.forEach(t),LHe=r(S7," or "),Hx=n(S7,"A",{href:!0});var Djr=s(Hx);BHe=r(Djr,"DPRQuestionEncoderTokenizerFast"),Djr.forEach(t),xHe=r(S7," (DPR model)"),S7.forEach(t),kHe=i(y),fs=n(y,"LI",{});var P7=s(fs);$J=n(P7,"STRONG",{});var qjr=s($J);RHe=r(qjr,"electra"),qjr.forEach(t),SHe=r(P7," \u2014 "),Ux=n(P7,"A",{href:!0});var Gjr=s(Ux);PHe=r(Gjr,"ElectraTokenizer"),Gjr.forEach(t),$He=r(P7," or "),Jx=n(P7,"A",{href:!0});var Ojr=s(Jx);IHe=r(Ojr,"ElectraTokenizerFast"),Ojr.forEach(t),jHe=r(P7," (ELECTRA model)"),P7.forEach(t),NHe=i(y),Zg=n(y,"LI",{});var uFe=s(Zg);IJ=n(uFe,"STRONG",{});var Xjr=s(IJ);DHe=r(Xjr,"flaubert"),Xjr.forEach(t),qHe=r(uFe," \u2014 "),Yx=n(uFe,"A",{href:!0});var Vjr=s(Yx);GHe=r(Vjr,"FlaubertTokenizer"),Vjr.forEach(t),OHe=r(uFe," (FlauBERT model)"),uFe.forEach(t),XHe=i(y),ms=n(y,"LI",{});var $7=s(ms);jJ=n($7,"STRONG",{});var zjr=s(jJ);VHe=r(zjr,"fnet"),zjr.forEach(t),zHe=r($7," \u2014 "),Kx=n($7,"A",{href:!0});var Wjr=s(Kx);WHe=r(Wjr,"FNetTokenizer"),Wjr.forEach(t),QHe=r($7," or "),Zx=n($7,"A",{href:!0});var Qjr=s(Zx);HHe=r(Qjr,"FNetTokenizerFast"),Qjr.forEach(t),UHe=r($7," (FNet model)"),$7.forEach(t),JHe=i(y),eh=n(y,"LI",{});var bFe=s(eh);NJ=n(bFe,"STRONG",{});var Hjr=s(NJ);YHe=r(Hjr,"fsmt"),Hjr.forEach(t),KHe=r(bFe," \u2014 "),ek=n(bFe,"A",{href:!0});var Ujr=s(ek);ZHe=r(Ujr,"FSMTTokenizer"),Ujr.forEach(t),eUe=r(bFe," (FairSeq Machine-Translation model)"),bFe.forEach(t),oUe=i(y),gs=n(y,"LI",{});var I7=s(gs);DJ=n(I7,"STRONG",{});var Jjr=s(DJ);rUe=r(Jjr,"funnel"),Jjr.forEach(t),tUe=r(I7," \u2014 "),ok=n(I7,"A",{href:!0});var Yjr=s(ok);aUe=r(Yjr,"FunnelTokenizer"),Yjr.forEach(t),nUe=r(I7," or "),rk=n(I7,"A",{href:!0});var Kjr=s(rk);sUe=r(Kjr,"FunnelTokenizerFast"),Kjr.forEach(t),lUe=r(I7," (Funnel Transformer model)"),I7.forEach(t),iUe=i(y),hs=n(y,"LI",{});var j7=s(hs);qJ=n(j7,"STRONG",{});var Zjr=s(qJ);dUe=r(Zjr,"gpt2"),Zjr.forEach(t),cUe=r(j7," \u2014 "),tk=n(j7,"A",{href:!0});var eNr=s(tk);fUe=r(eNr,"GPT2Tokenizer"),eNr.forEach(t),mUe=r(j7," or "),ak=n(j7,"A",{href:!0});var oNr=s(ak);gUe=r(oNr,"GPT2TokenizerFast"),oNr.forEach(t),hUe=r(j7," (OpenAI GPT-2 model)"),j7.forEach(t),pUe=i(y),ps=n(y,"LI",{});var N7=s(ps);GJ=n(N7,"STRONG",{});var rNr=s(GJ);_Ue=r(rNr,"gpt_neo"),rNr.forEach(t),uUe=r(N7," \u2014 "),nk=n(N7,"A",{href:!0});var tNr=s(nk);bUe=r(tNr,"GPT2Tokenizer"),tNr.forEach(t),vUe=r(N7," or "),sk=n(N7,"A",{href:!0});var aNr=s(sk);TUe=r(aNr,"GPT2TokenizerFast"),aNr.forEach(t),FUe=r(N7," (GPT Neo model)"),N7.forEach(t),CUe=i(y),_s=n(y,"LI",{});var D7=s(_s);OJ=n(D7,"STRONG",{});var nNr=s(OJ);MUe=r(nNr,"herbert"),nNr.forEach(t),EUe=r(D7," \u2014 "),lk=n(D7,"A",{href:!0});var sNr=s(lk);yUe=r(sNr,"HerbertTokenizer"),sNr.forEach(t),wUe=r(D7," or "),ik=n(D7,"A",{href:!0});var lNr=s(ik);AUe=r(lNr,"HerbertTokenizerFast"),lNr.forEach(t),LUe=r(D7," (HerBERT model)"),D7.forEach(t),BUe=i(y),oh=n(y,"LI",{});var vFe=s(oh);XJ=n(vFe,"STRONG",{});var iNr=s(XJ);xUe=r(iNr,"hubert"),iNr.forEach(t),kUe=r(vFe," \u2014 "),dk=n(vFe,"A",{href:!0});var dNr=s(dk);RUe=r(dNr,"Wav2Vec2CTCTokenizer"),dNr.forEach(t),SUe=r(vFe," (Hubert model)"),vFe.forEach(t),PUe=i(y),us=n(y,"LI",{});var q7=s(us);VJ=n(q7,"STRONG",{});var cNr=s(VJ);$Ue=r(cNr,"ibert"),cNr.forEach(t),IUe=r(q7," \u2014 "),ck=n(q7,"A",{href:!0});var fNr=s(ck);jUe=r(fNr,"RobertaTokenizer"),fNr.forEach(t),NUe=r(q7," or "),fk=n(q7,"A",{href:!0});var mNr=s(fk);DUe=r(mNr,"RobertaTokenizerFast"),mNr.forEach(t),qUe=r(q7," (I-BERT model)"),q7.forEach(t),GUe=i(y),bs=n(y,"LI",{});var G7=s(bs);zJ=n(G7,"STRONG",{});var gNr=s(zJ);OUe=r(gNr,"layoutlm"),gNr.forEach(t),XUe=r(G7," \u2014 "),mk=n(G7,"A",{href:!0});var hNr=s(mk);VUe=r(hNr,"LayoutLMTokenizer"),hNr.forEach(t),zUe=r(G7," or "),gk=n(G7,"A",{href:!0});var pNr=s(gk);WUe=r(pNr,"LayoutLMTokenizerFast"),pNr.forEach(t),QUe=r(G7," (LayoutLM model)"),G7.forEach(t),HUe=i(y),vs=n(y,"LI",{});var O7=s(vs);WJ=n(O7,"STRONG",{});var _Nr=s(WJ);UUe=r(_Nr,"layoutlmv2"),_Nr.forEach(t),JUe=r(O7," \u2014 "),hk=n(O7,"A",{href:!0});var uNr=s(hk);YUe=r(uNr,"LayoutLMv2Tokenizer"),uNr.forEach(t),KUe=r(O7," or "),pk=n(O7,"A",{href:!0});var bNr=s(pk);ZUe=r(bNr,"LayoutLMv2TokenizerFast"),bNr.forEach(t),eJe=r(O7," (LayoutLMv2 model)"),O7.forEach(t),oJe=i(y),Ts=n(y,"LI",{});var X7=s(Ts);QJ=n(X7,"STRONG",{});var vNr=s(QJ);rJe=r(vNr,"layoutxlm"),vNr.forEach(t),tJe=r(X7," \u2014 "),_k=n(X7,"A",{href:!0});var TNr=s(_k);aJe=r(TNr,"LayoutXLMTokenizer"),TNr.forEach(t),nJe=r(X7," or "),uk=n(X7,"A",{href:!0});var FNr=s(uk);sJe=r(FNr,"LayoutXLMTokenizerFast"),FNr.forEach(t),lJe=r(X7," (LayoutXLM model)"),X7.forEach(t),iJe=i(y),Fs=n(y,"LI",{});var V7=s(Fs);HJ=n(V7,"STRONG",{});var CNr=s(HJ);dJe=r(CNr,"led"),CNr.forEach(t),cJe=r(V7," \u2014 "),bk=n(V7,"A",{href:!0});var MNr=s(bk);fJe=r(MNr,"LEDTokenizer"),MNr.forEach(t),mJe=r(V7," or "),vk=n(V7,"A",{href:!0});var ENr=s(vk);gJe=r(ENr,"LEDTokenizerFast"),ENr.forEach(t),hJe=r(V7," (LED model)"),V7.forEach(t),pJe=i(y),Cs=n(y,"LI",{});var z7=s(Cs);UJ=n(z7,"STRONG",{});var yNr=s(UJ);_Je=r(yNr,"longformer"),yNr.forEach(t),uJe=r(z7," \u2014 "),Tk=n(z7,"A",{href:!0});var wNr=s(Tk);bJe=r(wNr,"LongformerTokenizer"),wNr.forEach(t),vJe=r(z7," or "),Fk=n(z7,"A",{href:!0});var ANr=s(Fk);TJe=r(ANr,"LongformerTokenizerFast"),ANr.forEach(t),FJe=r(z7," (Longformer model)"),z7.forEach(t),CJe=i(y),rh=n(y,"LI",{});var TFe=s(rh);JJ=n(TFe,"STRONG",{});var LNr=s(JJ);MJe=r(LNr,"luke"),LNr.forEach(t),EJe=r(TFe," \u2014 "),Ck=n(TFe,"A",{href:!0});var BNr=s(Ck);yJe=r(BNr,"LukeTokenizer"),BNr.forEach(t),wJe=r(TFe," (LUKE model)"),TFe.forEach(t),AJe=i(y),Ms=n(y,"LI",{});var W7=s(Ms);YJ=n(W7,"STRONG",{});var xNr=s(YJ);LJe=r(xNr,"lxmert"),xNr.forEach(t),BJe=r(W7," \u2014 "),Mk=n(W7,"A",{href:!0});var kNr=s(Mk);xJe=r(kNr,"LxmertTokenizer"),kNr.forEach(t),kJe=r(W7," or "),Ek=n(W7,"A",{href:!0});var RNr=s(Ek);RJe=r(RNr,"LxmertTokenizerFast"),RNr.forEach(t),SJe=r(W7," (LXMERT model)"),W7.forEach(t),PJe=i(y),th=n(y,"LI",{});var FFe=s(th);KJ=n(FFe,"STRONG",{});var SNr=s(KJ);$Je=r(SNr,"m2m_100"),SNr.forEach(t),IJe=r(FFe," \u2014 "),yk=n(FFe,"A",{href:!0});var PNr=s(yk);jJe=r(PNr,"M2M100Tokenizer"),PNr.forEach(t),NJe=r(FFe," (M2M100 model)"),FFe.forEach(t),DJe=i(y),ah=n(y,"LI",{});var CFe=s(ah);ZJ=n(CFe,"STRONG",{});var $Nr=s(ZJ);qJe=r($Nr,"marian"),$Nr.forEach(t),GJe=r(CFe," \u2014 "),wk=n(CFe,"A",{href:!0});var INr=s(wk);OJe=r(INr,"MarianTokenizer"),INr.forEach(t),XJe=r(CFe," (Marian model)"),CFe.forEach(t),VJe=i(y),Es=n(y,"LI",{});var Q7=s(Es);eY=n(Q7,"STRONG",{});var jNr=s(eY);zJe=r(jNr,"mbart"),jNr.forEach(t),WJe=r(Q7," \u2014 "),Ak=n(Q7,"A",{href:!0});var NNr=s(Ak);QJe=r(NNr,"MBartTokenizer"),NNr.forEach(t),HJe=r(Q7," or "),Lk=n(Q7,"A",{href:!0});var DNr=s(Lk);UJe=r(DNr,"MBartTokenizerFast"),DNr.forEach(t),JJe=r(Q7," (mBART model)"),Q7.forEach(t),YJe=i(y),ys=n(y,"LI",{});var H7=s(ys);oY=n(H7,"STRONG",{});var qNr=s(oY);KJe=r(qNr,"mbart50"),qNr.forEach(t),ZJe=r(H7," \u2014 "),Bk=n(H7,"A",{href:!0});var GNr=s(Bk);eYe=r(GNr,"MBart50Tokenizer"),GNr.forEach(t),oYe=r(H7," or "),xk=n(H7,"A",{href:!0});var ONr=s(xk);rYe=r(ONr,"MBart50TokenizerFast"),ONr.forEach(t),tYe=r(H7," (mBART-50 model)"),H7.forEach(t),aYe=i(y),nh=n(y,"LI",{});var MFe=s(nh);rY=n(MFe,"STRONG",{});var XNr=s(rY);nYe=r(XNr,"mluke"),XNr.forEach(t),sYe=r(MFe," \u2014 "),kk=n(MFe,"A",{href:!0});var VNr=s(kk);lYe=r(VNr,"MLukeTokenizer"),VNr.forEach(t),iYe=r(MFe," (mLUKE model)"),MFe.forEach(t),dYe=i(y),ws=n(y,"LI",{});var U7=s(ws);tY=n(U7,"STRONG",{});var zNr=s(tY);cYe=r(zNr,"mobilebert"),zNr.forEach(t),fYe=r(U7," \u2014 "),Rk=n(U7,"A",{href:!0});var WNr=s(Rk);mYe=r(WNr,"MobileBertTokenizer"),WNr.forEach(t),gYe=r(U7," or "),Sk=n(U7,"A",{href:!0});var QNr=s(Sk);hYe=r(QNr,"MobileBertTokenizerFast"),QNr.forEach(t),pYe=r(U7," (MobileBERT model)"),U7.forEach(t),_Ye=i(y),As=n(y,"LI",{});var J7=s(As);aY=n(J7,"STRONG",{});var HNr=s(aY);uYe=r(HNr,"mpnet"),HNr.forEach(t),bYe=r(J7," \u2014 "),Pk=n(J7,"A",{href:!0});var UNr=s(Pk);vYe=r(UNr,"MPNetTokenizer"),UNr.forEach(t),TYe=r(J7," or "),$k=n(J7,"A",{href:!0});var JNr=s($k);FYe=r(JNr,"MPNetTokenizerFast"),JNr.forEach(t),CYe=r(J7," (MPNet model)"),J7.forEach(t),MYe=i(y),Ls=n(y,"LI",{});var Y7=s(Ls);nY=n(Y7,"STRONG",{});var YNr=s(nY);EYe=r(YNr,"mt5"),YNr.forEach(t),yYe=r(Y7," \u2014 "),Ik=n(Y7,"A",{href:!0});var KNr=s(Ik);wYe=r(KNr,"MT5Tokenizer"),KNr.forEach(t),AYe=r(Y7," or "),jk=n(Y7,"A",{href:!0});var ZNr=s(jk);LYe=r(ZNr,"MT5TokenizerFast"),ZNr.forEach(t),BYe=r(Y7," (mT5 model)"),Y7.forEach(t),xYe=i(y),Bs=n(y,"LI",{});var K7=s(Bs);sY=n(K7,"STRONG",{});var eDr=s(sY);kYe=r(eDr,"openai-gpt"),eDr.forEach(t),RYe=r(K7," \u2014 "),Nk=n(K7,"A",{href:!0});var oDr=s(Nk);SYe=r(oDr,"OpenAIGPTTokenizer"),oDr.forEach(t),PYe=r(K7," or "),Dk=n(K7,"A",{href:!0});var rDr=s(Dk);$Ye=r(rDr,"OpenAIGPTTokenizerFast"),rDr.forEach(t),IYe=r(K7," (OpenAI GPT model)"),K7.forEach(t),jYe=i(y),xs=n(y,"LI",{});var Z7=s(xs);lY=n(Z7,"STRONG",{});var tDr=s(lY);NYe=r(tDr,"pegasus"),tDr.forEach(t),DYe=r(Z7," \u2014 "),qk=n(Z7,"A",{href:!0});var aDr=s(qk);qYe=r(aDr,"PegasusTokenizer"),aDr.forEach(t),GYe=r(Z7," or "),Gk=n(Z7,"A",{href:!0});var nDr=s(Gk);OYe=r(nDr,"PegasusTokenizerFast"),nDr.forEach(t),XYe=r(Z7," (Pegasus model)"),Z7.forEach(t),VYe=i(y),sh=n(y,"LI",{});var EFe=s(sh);iY=n(EFe,"STRONG",{});var sDr=s(iY);zYe=r(sDr,"perceiver"),sDr.forEach(t),WYe=r(EFe," \u2014 "),Ok=n(EFe,"A",{href:!0});var lDr=s(Ok);QYe=r(lDr,"PerceiverTokenizer"),lDr.forEach(t),HYe=r(EFe," (Perceiver model)"),EFe.forEach(t),UYe=i(y),lh=n(y,"LI",{});var yFe=s(lh);dY=n(yFe,"STRONG",{});var iDr=s(dY);JYe=r(iDr,"phobert"),iDr.forEach(t),YYe=r(yFe," \u2014 "),Xk=n(yFe,"A",{href:!0});var dDr=s(Xk);KYe=r(dDr,"PhobertTokenizer"),dDr.forEach(t),ZYe=r(yFe," (PhoBERT model)"),yFe.forEach(t),eKe=i(y),ih=n(y,"LI",{});var wFe=s(ih);cY=n(wFe,"STRONG",{});var cDr=s(cY);oKe=r(cDr,"plbart"),cDr.forEach(t),rKe=r(wFe," \u2014 "),Vk=n(wFe,"A",{href:!0});var fDr=s(Vk);tKe=r(fDr,"PLBartTokenizer"),fDr.forEach(t),aKe=r(wFe," (PLBart model)"),wFe.forEach(t),nKe=i(y),dh=n(y,"LI",{});var AFe=s(dh);fY=n(AFe,"STRONG",{});var mDr=s(fY);sKe=r(mDr,"prophetnet"),mDr.forEach(t),lKe=r(AFe," \u2014 "),zk=n(AFe,"A",{href:!0});var gDr=s(zk);iKe=r(gDr,"ProphetNetTokenizer"),gDr.forEach(t),dKe=r(AFe," (ProphetNet model)"),AFe.forEach(t),cKe=i(y),ks=n(y,"LI",{});var e9=s(ks);mY=n(e9,"STRONG",{});var hDr=s(mY);fKe=r(hDr,"qdqbert"),hDr.forEach(t),mKe=r(e9," \u2014 "),Wk=n(e9,"A",{href:!0});var pDr=s(Wk);gKe=r(pDr,"BertTokenizer"),pDr.forEach(t),hKe=r(e9," or "),Qk=n(e9,"A",{href:!0});var _Dr=s(Qk);pKe=r(_Dr,"BertTokenizerFast"),_Dr.forEach(t),_Ke=r(e9," (QDQBert model)"),e9.forEach(t),uKe=i(y),ch=n(y,"LI",{});var LFe=s(ch);gY=n(LFe,"STRONG",{});var uDr=s(gY);bKe=r(uDr,"rag"),uDr.forEach(t),vKe=r(LFe," \u2014 "),Hk=n(LFe,"A",{href:!0});var bDr=s(Hk);TKe=r(bDr,"RagTokenizer"),bDr.forEach(t),FKe=r(LFe," (RAG model)"),LFe.forEach(t),CKe=i(y),Rs=n(y,"LI",{});var o9=s(Rs);hY=n(o9,"STRONG",{});var vDr=s(hY);MKe=r(vDr,"realm"),vDr.forEach(t),EKe=r(o9," \u2014 "),Uk=n(o9,"A",{href:!0});var TDr=s(Uk);yKe=r(TDr,"RealmTokenizer"),TDr.forEach(t),wKe=r(o9," or "),Jk=n(o9,"A",{href:!0});var FDr=s(Jk);AKe=r(FDr,"RealmTokenizerFast"),FDr.forEach(t),LKe=r(o9," (Realm model)"),o9.forEach(t),BKe=i(y),Ss=n(y,"LI",{});var r9=s(Ss);pY=n(r9,"STRONG",{});var CDr=s(pY);xKe=r(CDr,"reformer"),CDr.forEach(t),kKe=r(r9," \u2014 "),Yk=n(r9,"A",{href:!0});var MDr=s(Yk);RKe=r(MDr,"ReformerTokenizer"),MDr.forEach(t),SKe=r(r9," or "),Kk=n(r9,"A",{href:!0});var EDr=s(Kk);PKe=r(EDr,"ReformerTokenizerFast"),EDr.forEach(t),$Ke=r(r9," (Reformer model)"),r9.forEach(t),IKe=i(y),Ps=n(y,"LI",{});var t9=s(Ps);_Y=n(t9,"STRONG",{});var yDr=s(_Y);jKe=r(yDr,"rembert"),yDr.forEach(t),NKe=r(t9," \u2014 "),Zk=n(t9,"A",{href:!0});var wDr=s(Zk);DKe=r(wDr,"RemBertTokenizer"),wDr.forEach(t),qKe=r(t9," or "),eR=n(t9,"A",{href:!0});var ADr=s(eR);GKe=r(ADr,"RemBertTokenizerFast"),ADr.forEach(t),OKe=r(t9," (RemBERT model)"),t9.forEach(t),XKe=i(y),$s=n(y,"LI",{});var a9=s($s);uY=n(a9,"STRONG",{});var LDr=s(uY);VKe=r(LDr,"retribert"),LDr.forEach(t),zKe=r(a9," \u2014 "),oR=n(a9,"A",{href:!0});var BDr=s(oR);WKe=r(BDr,"RetriBertTokenizer"),BDr.forEach(t),QKe=r(a9," or "),rR=n(a9,"A",{href:!0});var xDr=s(rR);HKe=r(xDr,"RetriBertTokenizerFast"),xDr.forEach(t),UKe=r(a9," (RetriBERT model)"),a9.forEach(t),JKe=i(y),Is=n(y,"LI",{});var n9=s(Is);bY=n(n9,"STRONG",{});var kDr=s(bY);YKe=r(kDr,"roberta"),kDr.forEach(t),KKe=r(n9," \u2014 "),tR=n(n9,"A",{href:!0});var RDr=s(tR);ZKe=r(RDr,"RobertaTokenizer"),RDr.forEach(t),eZe=r(n9," or "),aR=n(n9,"A",{href:!0});var SDr=s(aR);oZe=r(SDr,"RobertaTokenizerFast"),SDr.forEach(t),rZe=r(n9," (RoBERTa model)"),n9.forEach(t),tZe=i(y),js=n(y,"LI",{});var s9=s(js);vY=n(s9,"STRONG",{});var PDr=s(vY);aZe=r(PDr,"roformer"),PDr.forEach(t),nZe=r(s9," \u2014 "),nR=n(s9,"A",{href:!0});var $Dr=s(nR);sZe=r($Dr,"RoFormerTokenizer"),$Dr.forEach(t),lZe=r(s9," or "),sR=n(s9,"A",{href:!0});var IDr=s(sR);iZe=r(IDr,"RoFormerTokenizerFast"),IDr.forEach(t),dZe=r(s9," (RoFormer model)"),s9.forEach(t),cZe=i(y),fh=n(y,"LI",{});var BFe=s(fh);TY=n(BFe,"STRONG",{});var jDr=s(TY);fZe=r(jDr,"speech_to_text"),jDr.forEach(t),mZe=r(BFe," \u2014 "),lR=n(BFe,"A",{href:!0});var NDr=s(lR);gZe=r(NDr,"Speech2TextTokenizer"),NDr.forEach(t),hZe=r(BFe," (Speech2Text model)"),BFe.forEach(t),pZe=i(y),mh=n(y,"LI",{});var xFe=s(mh);FY=n(xFe,"STRONG",{});var DDr=s(FY);_Ze=r(DDr,"speech_to_text_2"),DDr.forEach(t),uZe=r(xFe," \u2014 "),iR=n(xFe,"A",{href:!0});var qDr=s(iR);bZe=r(qDr,"Speech2Text2Tokenizer"),qDr.forEach(t),vZe=r(xFe," (Speech2Text2 model)"),xFe.forEach(t),TZe=i(y),Ns=n(y,"LI",{});var l9=s(Ns);CY=n(l9,"STRONG",{});var GDr=s(CY);FZe=r(GDr,"splinter"),GDr.forEach(t),CZe=r(l9," \u2014 "),dR=n(l9,"A",{href:!0});var ODr=s(dR);MZe=r(ODr,"SplinterTokenizer"),ODr.forEach(t),EZe=r(l9," or "),cR=n(l9,"A",{href:!0});var XDr=s(cR);yZe=r(XDr,"SplinterTokenizerFast"),XDr.forEach(t),wZe=r(l9," (Splinter model)"),l9.forEach(t),AZe=i(y),Ds=n(y,"LI",{});var i9=s(Ds);MY=n(i9,"STRONG",{});var VDr=s(MY);LZe=r(VDr,"squeezebert"),VDr.forEach(t),BZe=r(i9," \u2014 "),fR=n(i9,"A",{href:!0});var zDr=s(fR);xZe=r(zDr,"SqueezeBertTokenizer"),zDr.forEach(t),kZe=r(i9," or "),mR=n(i9,"A",{href:!0});var WDr=s(mR);RZe=r(WDr,"SqueezeBertTokenizerFast"),WDr.forEach(t),SZe=r(i9," (SqueezeBERT model)"),i9.forEach(t),PZe=i(y),qs=n(y,"LI",{});var d9=s(qs);EY=n(d9,"STRONG",{});var QDr=s(EY);$Ze=r(QDr,"t5"),QDr.forEach(t),IZe=r(d9," \u2014 "),gR=n(d9,"A",{href:!0});var HDr=s(gR);jZe=r(HDr,"T5Tokenizer"),HDr.forEach(t),NZe=r(d9," or "),hR=n(d9,"A",{href:!0});var UDr=s(hR);DZe=r(UDr,"T5TokenizerFast"),UDr.forEach(t),qZe=r(d9," (T5 model)"),d9.forEach(t),GZe=i(y),gh=n(y,"LI",{});var kFe=s(gh);yY=n(kFe,"STRONG",{});var JDr=s(yY);OZe=r(JDr,"tapas"),JDr.forEach(t),XZe=r(kFe," \u2014 "),pR=n(kFe,"A",{href:!0});var YDr=s(pR);VZe=r(YDr,"TapasTokenizer"),YDr.forEach(t),zZe=r(kFe," (TAPAS model)"),kFe.forEach(t),WZe=i(y),hh=n(y,"LI",{});var RFe=s(hh);wY=n(RFe,"STRONG",{});var KDr=s(wY);QZe=r(KDr,"transfo-xl"),KDr.forEach(t),HZe=r(RFe," \u2014 "),_R=n(RFe,"A",{href:!0});var ZDr=s(_R);UZe=r(ZDr,"TransfoXLTokenizer"),ZDr.forEach(t),JZe=r(RFe," (Transformer-XL model)"),RFe.forEach(t),YZe=i(y),ph=n(y,"LI",{});var SFe=s(ph);AY=n(SFe,"STRONG",{});var eqr=s(AY);KZe=r(eqr,"wav2vec2"),eqr.forEach(t),ZZe=r(SFe," \u2014 "),uR=n(SFe,"A",{href:!0});var oqr=s(uR);eeo=r(oqr,"Wav2Vec2CTCTokenizer"),oqr.forEach(t),oeo=r(SFe," (Wav2Vec2 model)"),SFe.forEach(t),reo=i(y),_h=n(y,"LI",{});var PFe=s(_h);LY=n(PFe,"STRONG",{});var rqr=s(LY);teo=r(rqr,"wav2vec2_phoneme"),rqr.forEach(t),aeo=r(PFe," \u2014 "),bR=n(PFe,"A",{href:!0});var tqr=s(bR);neo=r(tqr,"Wav2Vec2PhonemeCTCTokenizer"),tqr.forEach(t),seo=r(PFe," (Wav2Vec2Phoneme model)"),PFe.forEach(t),leo=i(y),Gs=n(y,"LI",{});var c9=s(Gs);BY=n(c9,"STRONG",{});var aqr=s(BY);ieo=r(aqr,"xglm"),aqr.forEach(t),deo=r(c9," \u2014 "),vR=n(c9,"A",{href:!0});var nqr=s(vR);ceo=r(nqr,"XGLMTokenizer"),nqr.forEach(t),feo=r(c9," or "),TR=n(c9,"A",{href:!0});var sqr=s(TR);meo=r(sqr,"XGLMTokenizerFast"),sqr.forEach(t),geo=r(c9," (XGLM model)"),c9.forEach(t),heo=i(y),uh=n(y,"LI",{});var $Fe=s(uh);xY=n($Fe,"STRONG",{});var lqr=s(xY);peo=r(lqr,"xlm"),lqr.forEach(t),_eo=r($Fe," \u2014 "),FR=n($Fe,"A",{href:!0});var iqr=s(FR);ueo=r(iqr,"XLMTokenizer"),iqr.forEach(t),beo=r($Fe," (XLM model)"),$Fe.forEach(t),veo=i(y),bh=n(y,"LI",{});var IFe=s(bh);kY=n(IFe,"STRONG",{});var dqr=s(kY);Teo=r(dqr,"xlm-prophetnet"),dqr.forEach(t),Feo=r(IFe," \u2014 "),CR=n(IFe,"A",{href:!0});var cqr=s(CR);Ceo=r(cqr,"XLMProphetNetTokenizer"),cqr.forEach(t),Meo=r(IFe," (XLMProphetNet model)"),IFe.forEach(t),Eeo=i(y),Os=n(y,"LI",{});var f9=s(Os);RY=n(f9,"STRONG",{});var fqr=s(RY);yeo=r(fqr,"xlm-roberta"),fqr.forEach(t),weo=r(f9," \u2014 "),MR=n(f9,"A",{href:!0});var mqr=s(MR);Aeo=r(mqr,"XLMRobertaTokenizer"),mqr.forEach(t),Leo=r(f9," or "),ER=n(f9,"A",{href:!0});var gqr=s(ER);Beo=r(gqr,"XLMRobertaTokenizerFast"),gqr.forEach(t),xeo=r(f9," (XLM-RoBERTa model)"),f9.forEach(t),keo=i(y),Xs=n(y,"LI",{});var m9=s(Xs);SY=n(m9,"STRONG",{});var hqr=s(SY);Reo=r(hqr,"xlnet"),hqr.forEach(t),Seo=r(m9," \u2014 "),yR=n(m9,"A",{href:!0});var pqr=s(yR);Peo=r(pqr,"XLNetTokenizer"),pqr.forEach(t),$eo=r(m9," or "),wR=n(m9,"A",{href:!0});var _qr=s(wR);Ieo=r(_qr,"XLNetTokenizerFast"),_qr.forEach(t),jeo=r(m9," (XLNet model)"),m9.forEach(t),y.forEach(t),Neo=i(ua),PY=n(ua,"P",{});var uqr=s(PY);Deo=r(uqr,"Examples:"),uqr.forEach(t),qeo=i(ua),m(P4.$$.fragment,ua),ua.forEach(t),Geo=i(Hs),vh=n(Hs,"DIV",{class:!0});var QSe=s(vh);m($4.$$.fragment,QSe),Oeo=i(QSe),$Y=n(QSe,"P",{});var bqr=s($Y);Xeo=r(bqr,"Register a new tokenizer in this mapping."),bqr.forEach(t),QSe.forEach(t),Hs.forEach(t),Gke=i(d),od=n(d,"H2",{class:!0});var HSe=s(od);Th=n(HSe,"A",{id:!0,class:!0,href:!0});var vqr=s(Th);IY=n(vqr,"SPAN",{});var Tqr=s(IY);m(I4.$$.fragment,Tqr),Tqr.forEach(t),vqr.forEach(t),Veo=i(HSe),jY=n(HSe,"SPAN",{});var Fqr=s(jY);zeo=r(Fqr,"AutoFeatureExtractor"),Fqr.forEach(t),HSe.forEach(t),Oke=i(d),Uo=n(d,"DIV",{class:!0});var Us=s(Uo);m(j4.$$.fragment,Us),Weo=i(Us),N4=n(Us,"P",{});var USe=s(N4);Qeo=r(USe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),AR=n(USe,"A",{href:!0});var Cqr=s(AR);Heo=r(Cqr,"AutoFeatureExtractor.from_pretrained()"),Cqr.forEach(t),Ueo=r(USe," class method."),USe.forEach(t),Jeo=i(Us),D4=n(Us,"P",{});var JSe=s(D4);Yeo=r(JSe,"This class cannot be instantiated directly using "),NY=n(JSe,"CODE",{});var Mqr=s(NY);Keo=r(Mqr,"__init__()"),Mqr.forEach(t),Zeo=r(JSe," (throws an error)."),JSe.forEach(t),eoo=i(Us),Ie=n(Us,"DIV",{class:!0});var Gt=s(Ie);m(q4.$$.fragment,Gt),ooo=i(Gt),DY=n(Gt,"P",{});var Eqr=s(DY);roo=r(Eqr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Eqr.forEach(t),too=i(Gt),Qa=n(Gt,"P",{});var bM=s(Qa);aoo=r(bM,"The feature extractor class to instantiate is selected based on the "),qY=n(bM,"CODE",{});var yqr=s(qY);noo=r(yqr,"model_type"),yqr.forEach(t),soo=r(bM,` property of the config object
(either passed as an argument or loaded from `),GY=n(bM,"CODE",{});var wqr=s(GY);loo=r(wqr,"pretrained_model_name_or_path"),wqr.forEach(t),ioo=r(bM,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),OY=n(bM,"CODE",{});var Aqr=s(OY);doo=r(Aqr,"pretrained_model_name_or_path"),Aqr.forEach(t),coo=r(bM,":"),bM.forEach(t),foo=i(Gt),re=n(Gt,"UL",{});var ne=s(re);Fh=n(ne,"LI",{});var jFe=s(Fh);XY=n(jFe,"STRONG",{});var Lqr=s(XY);moo=r(Lqr,"beit"),Lqr.forEach(t),goo=r(jFe," \u2014 "),LR=n(jFe,"A",{href:!0});var Bqr=s(LR);hoo=r(Bqr,"BeitFeatureExtractor"),Bqr.forEach(t),poo=r(jFe," (BEiT model)"),jFe.forEach(t),_oo=i(ne),Ch=n(ne,"LI",{});var NFe=s(Ch);VY=n(NFe,"STRONG",{});var xqr=s(VY);uoo=r(xqr,"clip"),xqr.forEach(t),boo=r(NFe," \u2014 "),BR=n(NFe,"A",{href:!0});var kqr=s(BR);voo=r(kqr,"CLIPFeatureExtractor"),kqr.forEach(t),Too=r(NFe," (CLIP model)"),NFe.forEach(t),Foo=i(ne),Mh=n(ne,"LI",{});var DFe=s(Mh);zY=n(DFe,"STRONG",{});var Rqr=s(zY);Coo=r(Rqr,"convnext"),Rqr.forEach(t),Moo=r(DFe," \u2014 "),xR=n(DFe,"A",{href:!0});var Sqr=s(xR);Eoo=r(Sqr,"ConvNextFeatureExtractor"),Sqr.forEach(t),yoo=r(DFe," (ConvNext model)"),DFe.forEach(t),woo=i(ne),Eh=n(ne,"LI",{});var qFe=s(Eh);WY=n(qFe,"STRONG",{});var Pqr=s(WY);Aoo=r(Pqr,"deit"),Pqr.forEach(t),Loo=r(qFe," \u2014 "),kR=n(qFe,"A",{href:!0});var $qr=s(kR);Boo=r($qr,"DeiTFeatureExtractor"),$qr.forEach(t),xoo=r(qFe," (DeiT model)"),qFe.forEach(t),koo=i(ne),yh=n(ne,"LI",{});var GFe=s(yh);QY=n(GFe,"STRONG",{});var Iqr=s(QY);Roo=r(Iqr,"detr"),Iqr.forEach(t),Soo=r(GFe," \u2014 "),RR=n(GFe,"A",{href:!0});var jqr=s(RR);Poo=r(jqr,"DetrFeatureExtractor"),jqr.forEach(t),$oo=r(GFe," (DETR model)"),GFe.forEach(t),Ioo=i(ne),wh=n(ne,"LI",{});var OFe=s(wh);HY=n(OFe,"STRONG",{});var Nqr=s(HY);joo=r(Nqr,"hubert"),Nqr.forEach(t),Noo=r(OFe," \u2014 "),SR=n(OFe,"A",{href:!0});var Dqr=s(SR);Doo=r(Dqr,"Wav2Vec2FeatureExtractor"),Dqr.forEach(t),qoo=r(OFe," (Hubert model)"),OFe.forEach(t),Goo=i(ne),Ah=n(ne,"LI",{});var XFe=s(Ah);UY=n(XFe,"STRONG",{});var qqr=s(UY);Ooo=r(qqr,"layoutlmv2"),qqr.forEach(t),Xoo=r(XFe," \u2014 "),PR=n(XFe,"A",{href:!0});var Gqr=s(PR);Voo=r(Gqr,"LayoutLMv2FeatureExtractor"),Gqr.forEach(t),zoo=r(XFe," (LayoutLMv2 model)"),XFe.forEach(t),Woo=i(ne),Lh=n(ne,"LI",{});var VFe=s(Lh);JY=n(VFe,"STRONG",{});var Oqr=s(JY);Qoo=r(Oqr,"maskformer"),Oqr.forEach(t),Hoo=r(VFe," \u2014 "),$R=n(VFe,"A",{href:!0});var Xqr=s($R);Uoo=r(Xqr,"MaskFormerFeatureExtractor"),Xqr.forEach(t),Joo=r(VFe," (MaskFormer model)"),VFe.forEach(t),Yoo=i(ne),Bh=n(ne,"LI",{});var zFe=s(Bh);YY=n(zFe,"STRONG",{});var Vqr=s(YY);Koo=r(Vqr,"perceiver"),Vqr.forEach(t),Zoo=r(zFe," \u2014 "),IR=n(zFe,"A",{href:!0});var zqr=s(IR);ero=r(zqr,"PerceiverFeatureExtractor"),zqr.forEach(t),oro=r(zFe," (Perceiver model)"),zFe.forEach(t),rro=i(ne),xh=n(ne,"LI",{});var WFe=s(xh);KY=n(WFe,"STRONG",{});var Wqr=s(KY);tro=r(Wqr,"poolformer"),Wqr.forEach(t),aro=r(WFe," \u2014 "),jR=n(WFe,"A",{href:!0});var Qqr=s(jR);nro=r(Qqr,"PoolFormerFeatureExtractor"),Qqr.forEach(t),sro=r(WFe," (PoolFormer model)"),WFe.forEach(t),lro=i(ne),kh=n(ne,"LI",{});var QFe=s(kh);ZY=n(QFe,"STRONG",{});var Hqr=s(ZY);iro=r(Hqr,"resnet"),Hqr.forEach(t),dro=r(QFe," \u2014 "),NR=n(QFe,"A",{href:!0});var Uqr=s(NR);cro=r(Uqr,"ConvNextFeatureExtractor"),Uqr.forEach(t),fro=r(QFe," (ResNet model)"),QFe.forEach(t),mro=i(ne),Rh=n(ne,"LI",{});var HFe=s(Rh);eK=n(HFe,"STRONG",{});var Jqr=s(eK);gro=r(Jqr,"segformer"),Jqr.forEach(t),hro=r(HFe," \u2014 "),DR=n(HFe,"A",{href:!0});var Yqr=s(DR);pro=r(Yqr,"SegformerFeatureExtractor"),Yqr.forEach(t),_ro=r(HFe," (SegFormer model)"),HFe.forEach(t),uro=i(ne),Sh=n(ne,"LI",{});var UFe=s(Sh);oK=n(UFe,"STRONG",{});var Kqr=s(oK);bro=r(Kqr,"speech_to_text"),Kqr.forEach(t),vro=r(UFe," \u2014 "),qR=n(UFe,"A",{href:!0});var Zqr=s(qR);Tro=r(Zqr,"Speech2TextFeatureExtractor"),Zqr.forEach(t),Fro=r(UFe," (Speech2Text model)"),UFe.forEach(t),Cro=i(ne),Ph=n(ne,"LI",{});var JFe=s(Ph);rK=n(JFe,"STRONG",{});var eGr=s(rK);Mro=r(eGr,"swin"),eGr.forEach(t),Ero=r(JFe," \u2014 "),GR=n(JFe,"A",{href:!0});var oGr=s(GR);yro=r(oGr,"ViTFeatureExtractor"),oGr.forEach(t),wro=r(JFe," (Swin model)"),JFe.forEach(t),Aro=i(ne),$h=n(ne,"LI",{});var YFe=s($h);tK=n(YFe,"STRONG",{});var rGr=s(tK);Lro=r(rGr,"van"),rGr.forEach(t),Bro=r(YFe," \u2014 "),OR=n(YFe,"A",{href:!0});var tGr=s(OR);xro=r(tGr,"ConvNextFeatureExtractor"),tGr.forEach(t),kro=r(YFe," (VAN model)"),YFe.forEach(t),Rro=i(ne),Ih=n(ne,"LI",{});var KFe=s(Ih);aK=n(KFe,"STRONG",{});var aGr=s(aK);Sro=r(aGr,"vit"),aGr.forEach(t),Pro=r(KFe," \u2014 "),XR=n(KFe,"A",{href:!0});var nGr=s(XR);$ro=r(nGr,"ViTFeatureExtractor"),nGr.forEach(t),Iro=r(KFe," (ViT model)"),KFe.forEach(t),jro=i(ne),jh=n(ne,"LI",{});var ZFe=s(jh);nK=n(ZFe,"STRONG",{});var sGr=s(nK);Nro=r(sGr,"vit_mae"),sGr.forEach(t),Dro=r(ZFe," \u2014 "),VR=n(ZFe,"A",{href:!0});var lGr=s(VR);qro=r(lGr,"ViTFeatureExtractor"),lGr.forEach(t),Gro=r(ZFe," (ViTMAE model)"),ZFe.forEach(t),Oro=i(ne),Nh=n(ne,"LI",{});var eCe=s(Nh);sK=n(eCe,"STRONG",{});var iGr=s(sK);Xro=r(iGr,"wav2vec2"),iGr.forEach(t),Vro=r(eCe," \u2014 "),zR=n(eCe,"A",{href:!0});var dGr=s(zR);zro=r(dGr,"Wav2Vec2FeatureExtractor"),dGr.forEach(t),Wro=r(eCe," (Wav2Vec2 model)"),eCe.forEach(t),ne.forEach(t),Qro=i(Gt),m(Dh.$$.fragment,Gt),Hro=i(Gt),lK=n(Gt,"P",{});var cGr=s(lK);Uro=r(cGr,"Examples:"),cGr.forEach(t),Jro=i(Gt),m(G4.$$.fragment,Gt),Gt.forEach(t),Yro=i(Us),qh=n(Us,"DIV",{class:!0});var YSe=s(qh);m(O4.$$.fragment,YSe),Kro=i(YSe),iK=n(YSe,"P",{});var fGr=s(iK);Zro=r(fGr,"Register a new feature extractor for this class."),fGr.forEach(t),YSe.forEach(t),Us.forEach(t),Xke=i(d),rd=n(d,"H2",{class:!0});var KSe=s(rd);Gh=n(KSe,"A",{id:!0,class:!0,href:!0});var mGr=s(Gh);dK=n(mGr,"SPAN",{});var gGr=s(dK);m(X4.$$.fragment,gGr),gGr.forEach(t),mGr.forEach(t),eto=i(KSe),cK=n(KSe,"SPAN",{});var hGr=s(cK);oto=r(hGr,"AutoProcessor"),hGr.forEach(t),KSe.forEach(t),Vke=i(d),Jo=n(d,"DIV",{class:!0});var Js=s(Jo);m(V4.$$.fragment,Js),rto=i(Js),z4=n(Js,"P",{});var ZSe=s(z4);tto=r(ZSe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),WR=n(ZSe,"A",{href:!0});var pGr=s(WR);ato=r(pGr,"AutoProcessor.from_pretrained()"),pGr.forEach(t),nto=r(ZSe," class method."),ZSe.forEach(t),sto=i(Js),W4=n(Js,"P",{});var ePe=s(W4);lto=r(ePe,"This class cannot be instantiated directly using "),fK=n(ePe,"CODE",{});var _Gr=s(fK);ito=r(_Gr,"__init__()"),_Gr.forEach(t),dto=r(ePe," (throws an error)."),ePe.forEach(t),cto=i(Js),je=n(Js,"DIV",{class:!0});var Ot=s(je);m(Q4.$$.fragment,Ot),fto=i(Ot),mK=n(Ot,"P",{});var uGr=s(mK);mto=r(uGr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),uGr.forEach(t),gto=i(Ot),td=n(Ot,"P",{});var fW=s(td);hto=r(fW,"The processor class to instantiate is selected based on the "),gK=n(fW,"CODE",{});var bGr=s(gK);pto=r(bGr,"model_type"),bGr.forEach(t),_to=r(fW,` property of the config object (either
passed as an argument or loaded from `),hK=n(fW,"CODE",{});var vGr=s(hK);uto=r(vGr,"pretrained_model_name_or_path"),vGr.forEach(t),bto=r(fW," if possible):"),fW.forEach(t),vto=i(Ot),xe=n(Ot,"UL",{});var qo=s(xe);Oh=n(qo,"LI",{});var oCe=s(Oh);pK=n(oCe,"STRONG",{});var TGr=s(pK);Tto=r(TGr,"clip"),TGr.forEach(t),Fto=r(oCe," \u2014 "),QR=n(oCe,"A",{href:!0});var FGr=s(QR);Cto=r(FGr,"CLIPProcessor"),FGr.forEach(t),Mto=r(oCe," (CLIP model)"),oCe.forEach(t),Eto=i(qo),Xh=n(qo,"LI",{});var rCe=s(Xh);_K=n(rCe,"STRONG",{});var CGr=s(_K);yto=r(CGr,"layoutlmv2"),CGr.forEach(t),wto=r(rCe," \u2014 "),HR=n(rCe,"A",{href:!0});var MGr=s(HR);Ato=r(MGr,"LayoutLMv2Processor"),MGr.forEach(t),Lto=r(rCe," (LayoutLMv2 model)"),rCe.forEach(t),Bto=i(qo),Vh=n(qo,"LI",{});var tCe=s(Vh);uK=n(tCe,"STRONG",{});var EGr=s(uK);xto=r(EGr,"layoutxlm"),EGr.forEach(t),kto=r(tCe," \u2014 "),UR=n(tCe,"A",{href:!0});var yGr=s(UR);Rto=r(yGr,"LayoutXLMProcessor"),yGr.forEach(t),Sto=r(tCe," (LayoutXLM model)"),tCe.forEach(t),Pto=i(qo),zh=n(qo,"LI",{});var aCe=s(zh);bK=n(aCe,"STRONG",{});var wGr=s(bK);$to=r(wGr,"speech_to_text"),wGr.forEach(t),Ito=r(aCe," \u2014 "),JR=n(aCe,"A",{href:!0});var AGr=s(JR);jto=r(AGr,"Speech2TextProcessor"),AGr.forEach(t),Nto=r(aCe," (Speech2Text model)"),aCe.forEach(t),Dto=i(qo),Wh=n(qo,"LI",{});var nCe=s(Wh);vK=n(nCe,"STRONG",{});var LGr=s(vK);qto=r(LGr,"speech_to_text_2"),LGr.forEach(t),Gto=r(nCe," \u2014 "),YR=n(nCe,"A",{href:!0});var BGr=s(YR);Oto=r(BGr,"Speech2Text2Processor"),BGr.forEach(t),Xto=r(nCe," (Speech2Text2 model)"),nCe.forEach(t),Vto=i(qo),Qh=n(qo,"LI",{});var sCe=s(Qh);TK=n(sCe,"STRONG",{});var xGr=s(TK);zto=r(xGr,"trocr"),xGr.forEach(t),Wto=r(sCe," \u2014 "),KR=n(sCe,"A",{href:!0});var kGr=s(KR);Qto=r(kGr,"TrOCRProcessor"),kGr.forEach(t),Hto=r(sCe," (TrOCR model)"),sCe.forEach(t),Uto=i(qo),Hh=n(qo,"LI",{});var lCe=s(Hh);FK=n(lCe,"STRONG",{});var RGr=s(FK);Jto=r(RGr,"vision-text-dual-encoder"),RGr.forEach(t),Yto=r(lCe," \u2014 "),ZR=n(lCe,"A",{href:!0});var SGr=s(ZR);Kto=r(SGr,"VisionTextDualEncoderProcessor"),SGr.forEach(t),Zto=r(lCe," (VisionTextDualEncoder model)"),lCe.forEach(t),eao=i(qo),Uh=n(qo,"LI",{});var iCe=s(Uh);CK=n(iCe,"STRONG",{});var PGr=s(CK);oao=r(PGr,"wav2vec2"),PGr.forEach(t),rao=r(iCe," \u2014 "),eS=n(iCe,"A",{href:!0});var $Gr=s(eS);tao=r($Gr,"Wav2Vec2Processor"),$Gr.forEach(t),aao=r(iCe," (Wav2Vec2 model)"),iCe.forEach(t),qo.forEach(t),nao=i(Ot),m(Jh.$$.fragment,Ot),sao=i(Ot),MK=n(Ot,"P",{});var IGr=s(MK);lao=r(IGr,"Examples:"),IGr.forEach(t),iao=i(Ot),m(H4.$$.fragment,Ot),Ot.forEach(t),dao=i(Js),Yh=n(Js,"DIV",{class:!0});var oPe=s(Yh);m(U4.$$.fragment,oPe),cao=i(oPe),EK=n(oPe,"P",{});var jGr=s(EK);fao=r(jGr,"Register a new processor for this class."),jGr.forEach(t),oPe.forEach(t),Js.forEach(t),zke=i(d),ad=n(d,"H2",{class:!0});var rPe=s(ad);Kh=n(rPe,"A",{id:!0,class:!0,href:!0});var NGr=s(Kh);yK=n(NGr,"SPAN",{});var DGr=s(yK);m(J4.$$.fragment,DGr),DGr.forEach(t),NGr.forEach(t),mao=i(rPe),wK=n(rPe,"SPAN",{});var qGr=s(wK);gao=r(qGr,"AutoModel"),qGr.forEach(t),rPe.forEach(t),Wke=i(d),Yo=n(d,"DIV",{class:!0});var Ys=s(Yo);m(Y4.$$.fragment,Ys),hao=i(Ys),nd=n(Ys,"P",{});var mW=s(nd);pao=r(mW,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),AK=n(mW,"CODE",{});var GGr=s(AK);_ao=r(GGr,"from_pretrained()"),GGr.forEach(t),uao=r(mW,"class method or the "),LK=n(mW,"CODE",{});var OGr=s(LK);bao=r(OGr,"from_config()"),OGr.forEach(t),vao=r(mW,`class
method.`),mW.forEach(t),Tao=i(Ys),K4=n(Ys,"P",{});var tPe=s(K4);Fao=r(tPe,"This class cannot be instantiated directly using "),BK=n(tPe,"CODE",{});var XGr=s(BK);Cao=r(XGr,"__init__()"),XGr.forEach(t),Mao=r(tPe," (throws an error)."),tPe.forEach(t),Eao=i(Ys),Wr=n(Ys,"DIV",{class:!0});var Ks=s(Wr);m(Z4.$$.fragment,Ks),yao=i(Ks),xK=n(Ks,"P",{});var VGr=s(xK);wao=r(VGr,"Instantiates one of the base model classes of the library from a configuration."),VGr.forEach(t),Aao=i(Ks),sd=n(Ks,"P",{});var gW=s(sd);Lao=r(gW,`Note:
Loading a model from its configuration file does `),kK=n(gW,"STRONG",{});var zGr=s(kK);Bao=r(zGr,"not"),zGr.forEach(t),xao=r(gW,` load the model weights. It only affects the
model\u2019s configuration. Use `),RK=n(gW,"CODE",{});var WGr=s(RK);kao=r(WGr,"from_pretrained()"),WGr.forEach(t),Rao=r(gW,"to load the model weights."),gW.forEach(t),Sao=i(Ks),SK=n(Ks,"P",{});var QGr=s(SK);Pao=r(QGr,"Examples:"),QGr.forEach(t),$ao=i(Ks),m(eE.$$.fragment,Ks),Ks.forEach(t),Iao=i(Ys),Ne=n(Ys,"DIV",{class:!0});var Xt=s(Ne);m(oE.$$.fragment,Xt),jao=i(Xt),PK=n(Xt,"P",{});var HGr=s(PK);Nao=r(HGr,"Instantiate one of the base model classes of the library from a pretrained model."),HGr.forEach(t),Dao=i(Xt),Ha=n(Xt,"P",{});var vM=s(Ha);qao=r(vM,"The model class to instantiate is selected based on the "),$K=n(vM,"CODE",{});var UGr=s($K);Gao=r(UGr,"model_type"),UGr.forEach(t),Oao=r(vM,` property of the config object (either
passed as an argument or loaded from `),IK=n(vM,"CODE",{});var JGr=s(IK);Xao=r(JGr,"pretrained_model_name_or_path"),JGr.forEach(t),Vao=r(vM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jK=n(vM,"CODE",{});var YGr=s(jK);zao=r(YGr,"pretrained_model_name_or_path"),YGr.forEach(t),Wao=r(vM,":"),vM.forEach(t),Qao=i(Xt),F=n(Xt,"UL",{});var C=s(F);Zh=n(C,"LI",{});var dCe=s(Zh);NK=n(dCe,"STRONG",{});var KGr=s(NK);Hao=r(KGr,"albert"),KGr.forEach(t),Uao=r(dCe," \u2014 "),oS=n(dCe,"A",{href:!0});var ZGr=s(oS);Jao=r(ZGr,"AlbertModel"),ZGr.forEach(t),Yao=r(dCe," (ALBERT model)"),dCe.forEach(t),Kao=i(C),ep=n(C,"LI",{});var cCe=s(ep);DK=n(cCe,"STRONG",{});var eOr=s(DK);Zao=r(eOr,"bart"),eOr.forEach(t),eno=r(cCe," \u2014 "),rS=n(cCe,"A",{href:!0});var oOr=s(rS);ono=r(oOr,"BartModel"),oOr.forEach(t),rno=r(cCe," (BART model)"),cCe.forEach(t),tno=i(C),op=n(C,"LI",{});var fCe=s(op);qK=n(fCe,"STRONG",{});var rOr=s(qK);ano=r(rOr,"beit"),rOr.forEach(t),nno=r(fCe," \u2014 "),tS=n(fCe,"A",{href:!0});var tOr=s(tS);sno=r(tOr,"BeitModel"),tOr.forEach(t),lno=r(fCe," (BEiT model)"),fCe.forEach(t),ino=i(C),rp=n(C,"LI",{});var mCe=s(rp);GK=n(mCe,"STRONG",{});var aOr=s(GK);dno=r(aOr,"bert"),aOr.forEach(t),cno=r(mCe," \u2014 "),aS=n(mCe,"A",{href:!0});var nOr=s(aS);fno=r(nOr,"BertModel"),nOr.forEach(t),mno=r(mCe," (BERT model)"),mCe.forEach(t),gno=i(C),tp=n(C,"LI",{});var gCe=s(tp);OK=n(gCe,"STRONG",{});var sOr=s(OK);hno=r(sOr,"bert-generation"),sOr.forEach(t),pno=r(gCe," \u2014 "),nS=n(gCe,"A",{href:!0});var lOr=s(nS);_no=r(lOr,"BertGenerationEncoder"),lOr.forEach(t),uno=r(gCe," (Bert Generation model)"),gCe.forEach(t),bno=i(C),ap=n(C,"LI",{});var hCe=s(ap);XK=n(hCe,"STRONG",{});var iOr=s(XK);vno=r(iOr,"big_bird"),iOr.forEach(t),Tno=r(hCe," \u2014 "),sS=n(hCe,"A",{href:!0});var dOr=s(sS);Fno=r(dOr,"BigBirdModel"),dOr.forEach(t),Cno=r(hCe," (BigBird model)"),hCe.forEach(t),Mno=i(C),np=n(C,"LI",{});var pCe=s(np);VK=n(pCe,"STRONG",{});var cOr=s(VK);Eno=r(cOr,"bigbird_pegasus"),cOr.forEach(t),yno=r(pCe," \u2014 "),lS=n(pCe,"A",{href:!0});var fOr=s(lS);wno=r(fOr,"BigBirdPegasusModel"),fOr.forEach(t),Ano=r(pCe," (BigBirdPegasus model)"),pCe.forEach(t),Lno=i(C),sp=n(C,"LI",{});var _Ce=s(sp);zK=n(_Ce,"STRONG",{});var mOr=s(zK);Bno=r(mOr,"blenderbot"),mOr.forEach(t),xno=r(_Ce," \u2014 "),iS=n(_Ce,"A",{href:!0});var gOr=s(iS);kno=r(gOr,"BlenderbotModel"),gOr.forEach(t),Rno=r(_Ce," (Blenderbot model)"),_Ce.forEach(t),Sno=i(C),lp=n(C,"LI",{});var uCe=s(lp);WK=n(uCe,"STRONG",{});var hOr=s(WK);Pno=r(hOr,"blenderbot-small"),hOr.forEach(t),$no=r(uCe," \u2014 "),dS=n(uCe,"A",{href:!0});var pOr=s(dS);Ino=r(pOr,"BlenderbotSmallModel"),pOr.forEach(t),jno=r(uCe," (BlenderbotSmall model)"),uCe.forEach(t),Nno=i(C),ip=n(C,"LI",{});var bCe=s(ip);QK=n(bCe,"STRONG",{});var _Or=s(QK);Dno=r(_Or,"camembert"),_Or.forEach(t),qno=r(bCe," \u2014 "),cS=n(bCe,"A",{href:!0});var uOr=s(cS);Gno=r(uOr,"CamembertModel"),uOr.forEach(t),Ono=r(bCe," (CamemBERT model)"),bCe.forEach(t),Xno=i(C),dp=n(C,"LI",{});var vCe=s(dp);HK=n(vCe,"STRONG",{});var bOr=s(HK);Vno=r(bOr,"canine"),bOr.forEach(t),zno=r(vCe," \u2014 "),fS=n(vCe,"A",{href:!0});var vOr=s(fS);Wno=r(vOr,"CanineModel"),vOr.forEach(t),Qno=r(vCe," (Canine model)"),vCe.forEach(t),Hno=i(C),cp=n(C,"LI",{});var TCe=s(cp);UK=n(TCe,"STRONG",{});var TOr=s(UK);Uno=r(TOr,"clip"),TOr.forEach(t),Jno=r(TCe," \u2014 "),mS=n(TCe,"A",{href:!0});var FOr=s(mS);Yno=r(FOr,"CLIPModel"),FOr.forEach(t),Kno=r(TCe," (CLIP model)"),TCe.forEach(t),Zno=i(C),fp=n(C,"LI",{});var FCe=s(fp);JK=n(FCe,"STRONG",{});var COr=s(JK);eso=r(COr,"convbert"),COr.forEach(t),oso=r(FCe," \u2014 "),gS=n(FCe,"A",{href:!0});var MOr=s(gS);rso=r(MOr,"ConvBertModel"),MOr.forEach(t),tso=r(FCe," (ConvBERT model)"),FCe.forEach(t),aso=i(C),mp=n(C,"LI",{});var CCe=s(mp);YK=n(CCe,"STRONG",{});var EOr=s(YK);nso=r(EOr,"convnext"),EOr.forEach(t),sso=r(CCe," \u2014 "),hS=n(CCe,"A",{href:!0});var yOr=s(hS);lso=r(yOr,"ConvNextModel"),yOr.forEach(t),iso=r(CCe," (ConvNext model)"),CCe.forEach(t),dso=i(C),gp=n(C,"LI",{});var MCe=s(gp);KK=n(MCe,"STRONG",{});var wOr=s(KK);cso=r(wOr,"ctrl"),wOr.forEach(t),fso=r(MCe," \u2014 "),pS=n(MCe,"A",{href:!0});var AOr=s(pS);mso=r(AOr,"CTRLModel"),AOr.forEach(t),gso=r(MCe," (CTRL model)"),MCe.forEach(t),hso=i(C),hp=n(C,"LI",{});var ECe=s(hp);ZK=n(ECe,"STRONG",{});var LOr=s(ZK);pso=r(LOr,"data2vec-audio"),LOr.forEach(t),_so=r(ECe," \u2014 "),_S=n(ECe,"A",{href:!0});var BOr=s(_S);uso=r(BOr,"Data2VecAudioModel"),BOr.forEach(t),bso=r(ECe," (Data2VecAudio model)"),ECe.forEach(t),vso=i(C),pp=n(C,"LI",{});var yCe=s(pp);eZ=n(yCe,"STRONG",{});var xOr=s(eZ);Tso=r(xOr,"data2vec-text"),xOr.forEach(t),Fso=r(yCe," \u2014 "),uS=n(yCe,"A",{href:!0});var kOr=s(uS);Cso=r(kOr,"Data2VecTextModel"),kOr.forEach(t),Mso=r(yCe," (Data2VecText model)"),yCe.forEach(t),Eso=i(C),_p=n(C,"LI",{});var wCe=s(_p);oZ=n(wCe,"STRONG",{});var ROr=s(oZ);yso=r(ROr,"deberta"),ROr.forEach(t),wso=r(wCe," \u2014 "),bS=n(wCe,"A",{href:!0});var SOr=s(bS);Aso=r(SOr,"DebertaModel"),SOr.forEach(t),Lso=r(wCe," (DeBERTa model)"),wCe.forEach(t),Bso=i(C),up=n(C,"LI",{});var ACe=s(up);rZ=n(ACe,"STRONG",{});var POr=s(rZ);xso=r(POr,"deberta-v2"),POr.forEach(t),kso=r(ACe," \u2014 "),vS=n(ACe,"A",{href:!0});var $Or=s(vS);Rso=r($Or,"DebertaV2Model"),$Or.forEach(t),Sso=r(ACe," (DeBERTa-v2 model)"),ACe.forEach(t),Pso=i(C),bp=n(C,"LI",{});var LCe=s(bp);tZ=n(LCe,"STRONG",{});var IOr=s(tZ);$so=r(IOr,"deit"),IOr.forEach(t),Iso=r(LCe," \u2014 "),TS=n(LCe,"A",{href:!0});var jOr=s(TS);jso=r(jOr,"DeiTModel"),jOr.forEach(t),Nso=r(LCe," (DeiT model)"),LCe.forEach(t),Dso=i(C),vp=n(C,"LI",{});var BCe=s(vp);aZ=n(BCe,"STRONG",{});var NOr=s(aZ);qso=r(NOr,"detr"),NOr.forEach(t),Gso=r(BCe," \u2014 "),FS=n(BCe,"A",{href:!0});var DOr=s(FS);Oso=r(DOr,"DetrModel"),DOr.forEach(t),Xso=r(BCe," (DETR model)"),BCe.forEach(t),Vso=i(C),Tp=n(C,"LI",{});var xCe=s(Tp);nZ=n(xCe,"STRONG",{});var qOr=s(nZ);zso=r(qOr,"distilbert"),qOr.forEach(t),Wso=r(xCe," \u2014 "),CS=n(xCe,"A",{href:!0});var GOr=s(CS);Qso=r(GOr,"DistilBertModel"),GOr.forEach(t),Hso=r(xCe," (DistilBERT model)"),xCe.forEach(t),Uso=i(C),Fp=n(C,"LI",{});var kCe=s(Fp);sZ=n(kCe,"STRONG",{});var OOr=s(sZ);Jso=r(OOr,"dpr"),OOr.forEach(t),Yso=r(kCe," \u2014 "),MS=n(kCe,"A",{href:!0});var XOr=s(MS);Kso=r(XOr,"DPRQuestionEncoder"),XOr.forEach(t),Zso=r(kCe," (DPR model)"),kCe.forEach(t),elo=i(C),Cp=n(C,"LI",{});var RCe=s(Cp);lZ=n(RCe,"STRONG",{});var VOr=s(lZ);olo=r(VOr,"electra"),VOr.forEach(t),rlo=r(RCe," \u2014 "),ES=n(RCe,"A",{href:!0});var zOr=s(ES);tlo=r(zOr,"ElectraModel"),zOr.forEach(t),alo=r(RCe," (ELECTRA model)"),RCe.forEach(t),nlo=i(C),Mp=n(C,"LI",{});var SCe=s(Mp);iZ=n(SCe,"STRONG",{});var WOr=s(iZ);slo=r(WOr,"flaubert"),WOr.forEach(t),llo=r(SCe," \u2014 "),yS=n(SCe,"A",{href:!0});var QOr=s(yS);ilo=r(QOr,"FlaubertModel"),QOr.forEach(t),dlo=r(SCe," (FlauBERT model)"),SCe.forEach(t),clo=i(C),Ep=n(C,"LI",{});var PCe=s(Ep);dZ=n(PCe,"STRONG",{});var HOr=s(dZ);flo=r(HOr,"fnet"),HOr.forEach(t),mlo=r(PCe," \u2014 "),wS=n(PCe,"A",{href:!0});var UOr=s(wS);glo=r(UOr,"FNetModel"),UOr.forEach(t),hlo=r(PCe," (FNet model)"),PCe.forEach(t),plo=i(C),yp=n(C,"LI",{});var $Ce=s(yp);cZ=n($Ce,"STRONG",{});var JOr=s(cZ);_lo=r(JOr,"fsmt"),JOr.forEach(t),ulo=r($Ce," \u2014 "),AS=n($Ce,"A",{href:!0});var YOr=s(AS);blo=r(YOr,"FSMTModel"),YOr.forEach(t),vlo=r($Ce," (FairSeq Machine-Translation model)"),$Ce.forEach(t),Tlo=i(C),Vs=n(C,"LI",{});var g9=s(Vs);fZ=n(g9,"STRONG",{});var KOr=s(fZ);Flo=r(KOr,"funnel"),KOr.forEach(t),Clo=r(g9," \u2014 "),LS=n(g9,"A",{href:!0});var ZOr=s(LS);Mlo=r(ZOr,"FunnelModel"),ZOr.forEach(t),Elo=r(g9," or "),BS=n(g9,"A",{href:!0});var eXr=s(BS);ylo=r(eXr,"FunnelBaseModel"),eXr.forEach(t),wlo=r(g9," (Funnel Transformer model)"),g9.forEach(t),Alo=i(C),wp=n(C,"LI",{});var ICe=s(wp);mZ=n(ICe,"STRONG",{});var oXr=s(mZ);Llo=r(oXr,"glpn"),oXr.forEach(t),Blo=r(ICe," \u2014 "),xS=n(ICe,"A",{href:!0});var rXr=s(xS);xlo=r(rXr,"GLPNModel"),rXr.forEach(t),klo=r(ICe," (GLPN model)"),ICe.forEach(t),Rlo=i(C),Ap=n(C,"LI",{});var jCe=s(Ap);gZ=n(jCe,"STRONG",{});var tXr=s(gZ);Slo=r(tXr,"gpt2"),tXr.forEach(t),Plo=r(jCe," \u2014 "),kS=n(jCe,"A",{href:!0});var aXr=s(kS);$lo=r(aXr,"GPT2Model"),aXr.forEach(t),Ilo=r(jCe," (OpenAI GPT-2 model)"),jCe.forEach(t),jlo=i(C),Lp=n(C,"LI",{});var NCe=s(Lp);hZ=n(NCe,"STRONG",{});var nXr=s(hZ);Nlo=r(nXr,"gpt_neo"),nXr.forEach(t),Dlo=r(NCe," \u2014 "),RS=n(NCe,"A",{href:!0});var sXr=s(RS);qlo=r(sXr,"GPTNeoModel"),sXr.forEach(t),Glo=r(NCe," (GPT Neo model)"),NCe.forEach(t),Olo=i(C),Bp=n(C,"LI",{});var DCe=s(Bp);pZ=n(DCe,"STRONG",{});var lXr=s(pZ);Xlo=r(lXr,"gptj"),lXr.forEach(t),Vlo=r(DCe," \u2014 "),SS=n(DCe,"A",{href:!0});var iXr=s(SS);zlo=r(iXr,"GPTJModel"),iXr.forEach(t),Wlo=r(DCe," (GPT-J model)"),DCe.forEach(t),Qlo=i(C),xp=n(C,"LI",{});var qCe=s(xp);_Z=n(qCe,"STRONG",{});var dXr=s(_Z);Hlo=r(dXr,"hubert"),dXr.forEach(t),Ulo=r(qCe," \u2014 "),PS=n(qCe,"A",{href:!0});var cXr=s(PS);Jlo=r(cXr,"HubertModel"),cXr.forEach(t),Ylo=r(qCe," (Hubert model)"),qCe.forEach(t),Klo=i(C),kp=n(C,"LI",{});var GCe=s(kp);uZ=n(GCe,"STRONG",{});var fXr=s(uZ);Zlo=r(fXr,"ibert"),fXr.forEach(t),eio=r(GCe," \u2014 "),$S=n(GCe,"A",{href:!0});var mXr=s($S);oio=r(mXr,"IBertModel"),mXr.forEach(t),rio=r(GCe," (I-BERT model)"),GCe.forEach(t),tio=i(C),Rp=n(C,"LI",{});var OCe=s(Rp);bZ=n(OCe,"STRONG",{});var gXr=s(bZ);aio=r(gXr,"imagegpt"),gXr.forEach(t),nio=r(OCe," \u2014 "),IS=n(OCe,"A",{href:!0});var hXr=s(IS);sio=r(hXr,"ImageGPTModel"),hXr.forEach(t),lio=r(OCe," (ImageGPT model)"),OCe.forEach(t),iio=i(C),Sp=n(C,"LI",{});var XCe=s(Sp);vZ=n(XCe,"STRONG",{});var pXr=s(vZ);dio=r(pXr,"layoutlm"),pXr.forEach(t),cio=r(XCe," \u2014 "),jS=n(XCe,"A",{href:!0});var _Xr=s(jS);fio=r(_Xr,"LayoutLMModel"),_Xr.forEach(t),mio=r(XCe," (LayoutLM model)"),XCe.forEach(t),gio=i(C),Pp=n(C,"LI",{});var VCe=s(Pp);TZ=n(VCe,"STRONG",{});var uXr=s(TZ);hio=r(uXr,"layoutlmv2"),uXr.forEach(t),pio=r(VCe," \u2014 "),NS=n(VCe,"A",{href:!0});var bXr=s(NS);_io=r(bXr,"LayoutLMv2Model"),bXr.forEach(t),uio=r(VCe," (LayoutLMv2 model)"),VCe.forEach(t),bio=i(C),$p=n(C,"LI",{});var zCe=s($p);FZ=n(zCe,"STRONG",{});var vXr=s(FZ);vio=r(vXr,"led"),vXr.forEach(t),Tio=r(zCe," \u2014 "),DS=n(zCe,"A",{href:!0});var TXr=s(DS);Fio=r(TXr,"LEDModel"),TXr.forEach(t),Cio=r(zCe," (LED model)"),zCe.forEach(t),Mio=i(C),Ip=n(C,"LI",{});var WCe=s(Ip);CZ=n(WCe,"STRONG",{});var FXr=s(CZ);Eio=r(FXr,"longformer"),FXr.forEach(t),yio=r(WCe," \u2014 "),qS=n(WCe,"A",{href:!0});var CXr=s(qS);wio=r(CXr,"LongformerModel"),CXr.forEach(t),Aio=r(WCe," (Longformer model)"),WCe.forEach(t),Lio=i(C),jp=n(C,"LI",{});var QCe=s(jp);MZ=n(QCe,"STRONG",{});var MXr=s(MZ);Bio=r(MXr,"luke"),MXr.forEach(t),xio=r(QCe," \u2014 "),GS=n(QCe,"A",{href:!0});var EXr=s(GS);kio=r(EXr,"LukeModel"),EXr.forEach(t),Rio=r(QCe," (LUKE model)"),QCe.forEach(t),Sio=i(C),Np=n(C,"LI",{});var HCe=s(Np);EZ=n(HCe,"STRONG",{});var yXr=s(EZ);Pio=r(yXr,"lxmert"),yXr.forEach(t),$io=r(HCe," \u2014 "),OS=n(HCe,"A",{href:!0});var wXr=s(OS);Iio=r(wXr,"LxmertModel"),wXr.forEach(t),jio=r(HCe," (LXMERT model)"),HCe.forEach(t),Nio=i(C),Dp=n(C,"LI",{});var UCe=s(Dp);yZ=n(UCe,"STRONG",{});var AXr=s(yZ);Dio=r(AXr,"m2m_100"),AXr.forEach(t),qio=r(UCe," \u2014 "),XS=n(UCe,"A",{href:!0});var LXr=s(XS);Gio=r(LXr,"M2M100Model"),LXr.forEach(t),Oio=r(UCe," (M2M100 model)"),UCe.forEach(t),Xio=i(C),qp=n(C,"LI",{});var JCe=s(qp);wZ=n(JCe,"STRONG",{});var BXr=s(wZ);Vio=r(BXr,"marian"),BXr.forEach(t),zio=r(JCe," \u2014 "),VS=n(JCe,"A",{href:!0});var xXr=s(VS);Wio=r(xXr,"MarianModel"),xXr.forEach(t),Qio=r(JCe," (Marian model)"),JCe.forEach(t),Hio=i(C),Gp=n(C,"LI",{});var YCe=s(Gp);AZ=n(YCe,"STRONG",{});var kXr=s(AZ);Uio=r(kXr,"maskformer"),kXr.forEach(t),Jio=r(YCe," \u2014 "),zS=n(YCe,"A",{href:!0});var RXr=s(zS);Yio=r(RXr,"MaskFormerModel"),RXr.forEach(t),Kio=r(YCe," (MaskFormer model)"),YCe.forEach(t),Zio=i(C),Op=n(C,"LI",{});var KCe=s(Op);LZ=n(KCe,"STRONG",{});var SXr=s(LZ);edo=r(SXr,"mbart"),SXr.forEach(t),odo=r(KCe," \u2014 "),WS=n(KCe,"A",{href:!0});var PXr=s(WS);rdo=r(PXr,"MBartModel"),PXr.forEach(t),tdo=r(KCe," (mBART model)"),KCe.forEach(t),ado=i(C),Xp=n(C,"LI",{});var ZCe=s(Xp);BZ=n(ZCe,"STRONG",{});var $Xr=s(BZ);ndo=r($Xr,"megatron-bert"),$Xr.forEach(t),sdo=r(ZCe," \u2014 "),QS=n(ZCe,"A",{href:!0});var IXr=s(QS);ldo=r(IXr,"MegatronBertModel"),IXr.forEach(t),ido=r(ZCe," (MegatronBert model)"),ZCe.forEach(t),ddo=i(C),Vp=n(C,"LI",{});var eMe=s(Vp);xZ=n(eMe,"STRONG",{});var jXr=s(xZ);cdo=r(jXr,"mobilebert"),jXr.forEach(t),fdo=r(eMe," \u2014 "),HS=n(eMe,"A",{href:!0});var NXr=s(HS);mdo=r(NXr,"MobileBertModel"),NXr.forEach(t),gdo=r(eMe," (MobileBERT model)"),eMe.forEach(t),hdo=i(C),zp=n(C,"LI",{});var oMe=s(zp);kZ=n(oMe,"STRONG",{});var DXr=s(kZ);pdo=r(DXr,"mpnet"),DXr.forEach(t),_do=r(oMe," \u2014 "),US=n(oMe,"A",{href:!0});var qXr=s(US);udo=r(qXr,"MPNetModel"),qXr.forEach(t),bdo=r(oMe," (MPNet model)"),oMe.forEach(t),vdo=i(C),Wp=n(C,"LI",{});var rMe=s(Wp);RZ=n(rMe,"STRONG",{});var GXr=s(RZ);Tdo=r(GXr,"mt5"),GXr.forEach(t),Fdo=r(rMe," \u2014 "),JS=n(rMe,"A",{href:!0});var OXr=s(JS);Cdo=r(OXr,"MT5Model"),OXr.forEach(t),Mdo=r(rMe," (mT5 model)"),rMe.forEach(t),Edo=i(C),Qp=n(C,"LI",{});var tMe=s(Qp);SZ=n(tMe,"STRONG",{});var XXr=s(SZ);ydo=r(XXr,"nystromformer"),XXr.forEach(t),wdo=r(tMe," \u2014 "),YS=n(tMe,"A",{href:!0});var VXr=s(YS);Ado=r(VXr,"NystromformerModel"),VXr.forEach(t),Ldo=r(tMe," (Nystromformer model)"),tMe.forEach(t),Bdo=i(C),Hp=n(C,"LI",{});var aMe=s(Hp);PZ=n(aMe,"STRONG",{});var zXr=s(PZ);xdo=r(zXr,"openai-gpt"),zXr.forEach(t),kdo=r(aMe," \u2014 "),KS=n(aMe,"A",{href:!0});var WXr=s(KS);Rdo=r(WXr,"OpenAIGPTModel"),WXr.forEach(t),Sdo=r(aMe," (OpenAI GPT model)"),aMe.forEach(t),Pdo=i(C),Up=n(C,"LI",{});var nMe=s(Up);$Z=n(nMe,"STRONG",{});var QXr=s($Z);$do=r(QXr,"pegasus"),QXr.forEach(t),Ido=r(nMe," \u2014 "),ZS=n(nMe,"A",{href:!0});var HXr=s(ZS);jdo=r(HXr,"PegasusModel"),HXr.forEach(t),Ndo=r(nMe," (Pegasus model)"),nMe.forEach(t),Ddo=i(C),Jp=n(C,"LI",{});var sMe=s(Jp);IZ=n(sMe,"STRONG",{});var UXr=s(IZ);qdo=r(UXr,"perceiver"),UXr.forEach(t),Gdo=r(sMe," \u2014 "),eP=n(sMe,"A",{href:!0});var JXr=s(eP);Odo=r(JXr,"PerceiverModel"),JXr.forEach(t),Xdo=r(sMe," (Perceiver model)"),sMe.forEach(t),Vdo=i(C),Yp=n(C,"LI",{});var lMe=s(Yp);jZ=n(lMe,"STRONG",{});var YXr=s(jZ);zdo=r(YXr,"plbart"),YXr.forEach(t),Wdo=r(lMe," \u2014 "),oP=n(lMe,"A",{href:!0});var KXr=s(oP);Qdo=r(KXr,"PLBartModel"),KXr.forEach(t),Hdo=r(lMe," (PLBart model)"),lMe.forEach(t),Udo=i(C),Kp=n(C,"LI",{});var iMe=s(Kp);NZ=n(iMe,"STRONG",{});var ZXr=s(NZ);Jdo=r(ZXr,"poolformer"),ZXr.forEach(t),Ydo=r(iMe," \u2014 "),rP=n(iMe,"A",{href:!0});var eVr=s(rP);Kdo=r(eVr,"PoolFormerModel"),eVr.forEach(t),Zdo=r(iMe," (PoolFormer model)"),iMe.forEach(t),eco=i(C),Zp=n(C,"LI",{});var dMe=s(Zp);DZ=n(dMe,"STRONG",{});var oVr=s(DZ);oco=r(oVr,"prophetnet"),oVr.forEach(t),rco=r(dMe," \u2014 "),tP=n(dMe,"A",{href:!0});var rVr=s(tP);tco=r(rVr,"ProphetNetModel"),rVr.forEach(t),aco=r(dMe," (ProphetNet model)"),dMe.forEach(t),nco=i(C),e_=n(C,"LI",{});var cMe=s(e_);qZ=n(cMe,"STRONG",{});var tVr=s(qZ);sco=r(tVr,"qdqbert"),tVr.forEach(t),lco=r(cMe," \u2014 "),aP=n(cMe,"A",{href:!0});var aVr=s(aP);ico=r(aVr,"QDQBertModel"),aVr.forEach(t),dco=r(cMe," (QDQBert model)"),cMe.forEach(t),cco=i(C),o_=n(C,"LI",{});var fMe=s(o_);GZ=n(fMe,"STRONG",{});var nVr=s(GZ);fco=r(nVr,"reformer"),nVr.forEach(t),mco=r(fMe," \u2014 "),nP=n(fMe,"A",{href:!0});var sVr=s(nP);gco=r(sVr,"ReformerModel"),sVr.forEach(t),hco=r(fMe," (Reformer model)"),fMe.forEach(t),pco=i(C),r_=n(C,"LI",{});var mMe=s(r_);OZ=n(mMe,"STRONG",{});var lVr=s(OZ);_co=r(lVr,"rembert"),lVr.forEach(t),uco=r(mMe," \u2014 "),sP=n(mMe,"A",{href:!0});var iVr=s(sP);bco=r(iVr,"RemBertModel"),iVr.forEach(t),vco=r(mMe," (RemBERT model)"),mMe.forEach(t),Tco=i(C),t_=n(C,"LI",{});var gMe=s(t_);XZ=n(gMe,"STRONG",{});var dVr=s(XZ);Fco=r(dVr,"resnet"),dVr.forEach(t),Cco=r(gMe," \u2014 "),lP=n(gMe,"A",{href:!0});var cVr=s(lP);Mco=r(cVr,"ResNetModel"),cVr.forEach(t),Eco=r(gMe," (ResNet model)"),gMe.forEach(t),yco=i(C),a_=n(C,"LI",{});var hMe=s(a_);VZ=n(hMe,"STRONG",{});var fVr=s(VZ);wco=r(fVr,"retribert"),fVr.forEach(t),Aco=r(hMe," \u2014 "),iP=n(hMe,"A",{href:!0});var mVr=s(iP);Lco=r(mVr,"RetriBertModel"),mVr.forEach(t),Bco=r(hMe," (RetriBERT model)"),hMe.forEach(t),xco=i(C),n_=n(C,"LI",{});var pMe=s(n_);zZ=n(pMe,"STRONG",{});var gVr=s(zZ);kco=r(gVr,"roberta"),gVr.forEach(t),Rco=r(pMe," \u2014 "),dP=n(pMe,"A",{href:!0});var hVr=s(dP);Sco=r(hVr,"RobertaModel"),hVr.forEach(t),Pco=r(pMe," (RoBERTa model)"),pMe.forEach(t),$co=i(C),s_=n(C,"LI",{});var _Me=s(s_);WZ=n(_Me,"STRONG",{});var pVr=s(WZ);Ico=r(pVr,"roformer"),pVr.forEach(t),jco=r(_Me," \u2014 "),cP=n(_Me,"A",{href:!0});var _Vr=s(cP);Nco=r(_Vr,"RoFormerModel"),_Vr.forEach(t),Dco=r(_Me," (RoFormer model)"),_Me.forEach(t),qco=i(C),l_=n(C,"LI",{});var uMe=s(l_);QZ=n(uMe,"STRONG",{});var uVr=s(QZ);Gco=r(uVr,"segformer"),uVr.forEach(t),Oco=r(uMe," \u2014 "),fP=n(uMe,"A",{href:!0});var bVr=s(fP);Xco=r(bVr,"SegformerModel"),bVr.forEach(t),Vco=r(uMe," (SegFormer model)"),uMe.forEach(t),zco=i(C),i_=n(C,"LI",{});var bMe=s(i_);HZ=n(bMe,"STRONG",{});var vVr=s(HZ);Wco=r(vVr,"sew"),vVr.forEach(t),Qco=r(bMe," \u2014 "),mP=n(bMe,"A",{href:!0});var TVr=s(mP);Hco=r(TVr,"SEWModel"),TVr.forEach(t),Uco=r(bMe," (SEW model)"),bMe.forEach(t),Jco=i(C),d_=n(C,"LI",{});var vMe=s(d_);UZ=n(vMe,"STRONG",{});var FVr=s(UZ);Yco=r(FVr,"sew-d"),FVr.forEach(t),Kco=r(vMe," \u2014 "),gP=n(vMe,"A",{href:!0});var CVr=s(gP);Zco=r(CVr,"SEWDModel"),CVr.forEach(t),efo=r(vMe," (SEW-D model)"),vMe.forEach(t),ofo=i(C),c_=n(C,"LI",{});var TMe=s(c_);JZ=n(TMe,"STRONG",{});var MVr=s(JZ);rfo=r(MVr,"speech_to_text"),MVr.forEach(t),tfo=r(TMe," \u2014 "),hP=n(TMe,"A",{href:!0});var EVr=s(hP);afo=r(EVr,"Speech2TextModel"),EVr.forEach(t),nfo=r(TMe," (Speech2Text model)"),TMe.forEach(t),sfo=i(C),f_=n(C,"LI",{});var FMe=s(f_);YZ=n(FMe,"STRONG",{});var yVr=s(YZ);lfo=r(yVr,"splinter"),yVr.forEach(t),ifo=r(FMe," \u2014 "),pP=n(FMe,"A",{href:!0});var wVr=s(pP);dfo=r(wVr,"SplinterModel"),wVr.forEach(t),cfo=r(FMe," (Splinter model)"),FMe.forEach(t),ffo=i(C),m_=n(C,"LI",{});var CMe=s(m_);KZ=n(CMe,"STRONG",{});var AVr=s(KZ);mfo=r(AVr,"squeezebert"),AVr.forEach(t),gfo=r(CMe," \u2014 "),_P=n(CMe,"A",{href:!0});var LVr=s(_P);hfo=r(LVr,"SqueezeBertModel"),LVr.forEach(t),pfo=r(CMe," (SqueezeBERT model)"),CMe.forEach(t),_fo=i(C),g_=n(C,"LI",{});var MMe=s(g_);ZZ=n(MMe,"STRONG",{});var BVr=s(ZZ);ufo=r(BVr,"swin"),BVr.forEach(t),bfo=r(MMe," \u2014 "),uP=n(MMe,"A",{href:!0});var xVr=s(uP);vfo=r(xVr,"SwinModel"),xVr.forEach(t),Tfo=r(MMe," (Swin model)"),MMe.forEach(t),Ffo=i(C),h_=n(C,"LI",{});var EMe=s(h_);eee=n(EMe,"STRONG",{});var kVr=s(eee);Cfo=r(kVr,"t5"),kVr.forEach(t),Mfo=r(EMe," \u2014 "),bP=n(EMe,"A",{href:!0});var RVr=s(bP);Efo=r(RVr,"T5Model"),RVr.forEach(t),yfo=r(EMe," (T5 model)"),EMe.forEach(t),wfo=i(C),p_=n(C,"LI",{});var yMe=s(p_);oee=n(yMe,"STRONG",{});var SVr=s(oee);Afo=r(SVr,"tapas"),SVr.forEach(t),Lfo=r(yMe," \u2014 "),vP=n(yMe,"A",{href:!0});var PVr=s(vP);Bfo=r(PVr,"TapasModel"),PVr.forEach(t),xfo=r(yMe," (TAPAS model)"),yMe.forEach(t),kfo=i(C),__=n(C,"LI",{});var wMe=s(__);ree=n(wMe,"STRONG",{});var $Vr=s(ree);Rfo=r($Vr,"transfo-xl"),$Vr.forEach(t),Sfo=r(wMe," \u2014 "),TP=n(wMe,"A",{href:!0});var IVr=s(TP);Pfo=r(IVr,"TransfoXLModel"),IVr.forEach(t),$fo=r(wMe," (Transformer-XL model)"),wMe.forEach(t),Ifo=i(C),u_=n(C,"LI",{});var AMe=s(u_);tee=n(AMe,"STRONG",{});var jVr=s(tee);jfo=r(jVr,"unispeech"),jVr.forEach(t),Nfo=r(AMe," \u2014 "),FP=n(AMe,"A",{href:!0});var NVr=s(FP);Dfo=r(NVr,"UniSpeechModel"),NVr.forEach(t),qfo=r(AMe," (UniSpeech model)"),AMe.forEach(t),Gfo=i(C),b_=n(C,"LI",{});var LMe=s(b_);aee=n(LMe,"STRONG",{});var DVr=s(aee);Ofo=r(DVr,"unispeech-sat"),DVr.forEach(t),Xfo=r(LMe," \u2014 "),CP=n(LMe,"A",{href:!0});var qVr=s(CP);Vfo=r(qVr,"UniSpeechSatModel"),qVr.forEach(t),zfo=r(LMe," (UniSpeechSat model)"),LMe.forEach(t),Wfo=i(C),v_=n(C,"LI",{});var BMe=s(v_);nee=n(BMe,"STRONG",{});var GVr=s(nee);Qfo=r(GVr,"van"),GVr.forEach(t),Hfo=r(BMe," \u2014 "),MP=n(BMe,"A",{href:!0});var OVr=s(MP);Ufo=r(OVr,"VanModel"),OVr.forEach(t),Jfo=r(BMe," (VAN model)"),BMe.forEach(t),Yfo=i(C),T_=n(C,"LI",{});var xMe=s(T_);see=n(xMe,"STRONG",{});var XVr=s(see);Kfo=r(XVr,"vilt"),XVr.forEach(t),Zfo=r(xMe," \u2014 "),EP=n(xMe,"A",{href:!0});var VVr=s(EP);emo=r(VVr,"ViltModel"),VVr.forEach(t),omo=r(xMe," (ViLT model)"),xMe.forEach(t),rmo=i(C),F_=n(C,"LI",{});var kMe=s(F_);lee=n(kMe,"STRONG",{});var zVr=s(lee);tmo=r(zVr,"vision-text-dual-encoder"),zVr.forEach(t),amo=r(kMe," \u2014 "),yP=n(kMe,"A",{href:!0});var WVr=s(yP);nmo=r(WVr,"VisionTextDualEncoderModel"),WVr.forEach(t),smo=r(kMe," (VisionTextDualEncoder model)"),kMe.forEach(t),lmo=i(C),C_=n(C,"LI",{});var RMe=s(C_);iee=n(RMe,"STRONG",{});var QVr=s(iee);imo=r(QVr,"visual_bert"),QVr.forEach(t),dmo=r(RMe," \u2014 "),wP=n(RMe,"A",{href:!0});var HVr=s(wP);cmo=r(HVr,"VisualBertModel"),HVr.forEach(t),fmo=r(RMe," (VisualBert model)"),RMe.forEach(t),mmo=i(C),M_=n(C,"LI",{});var SMe=s(M_);dee=n(SMe,"STRONG",{});var UVr=s(dee);gmo=r(UVr,"vit"),UVr.forEach(t),hmo=r(SMe," \u2014 "),AP=n(SMe,"A",{href:!0});var JVr=s(AP);pmo=r(JVr,"ViTModel"),JVr.forEach(t),_mo=r(SMe," (ViT model)"),SMe.forEach(t),umo=i(C),E_=n(C,"LI",{});var PMe=s(E_);cee=n(PMe,"STRONG",{});var YVr=s(cee);bmo=r(YVr,"vit_mae"),YVr.forEach(t),vmo=r(PMe," \u2014 "),LP=n(PMe,"A",{href:!0});var KVr=s(LP);Tmo=r(KVr,"ViTMAEModel"),KVr.forEach(t),Fmo=r(PMe," (ViTMAE model)"),PMe.forEach(t),Cmo=i(C),y_=n(C,"LI",{});var $Me=s(y_);fee=n($Me,"STRONG",{});var ZVr=s(fee);Mmo=r(ZVr,"wav2vec2"),ZVr.forEach(t),Emo=r($Me," \u2014 "),BP=n($Me,"A",{href:!0});var ezr=s(BP);ymo=r(ezr,"Wav2Vec2Model"),ezr.forEach(t),wmo=r($Me," (Wav2Vec2 model)"),$Me.forEach(t),Amo=i(C),w_=n(C,"LI",{});var IMe=s(w_);mee=n(IMe,"STRONG",{});var ozr=s(mee);Lmo=r(ozr,"wavlm"),ozr.forEach(t),Bmo=r(IMe," \u2014 "),xP=n(IMe,"A",{href:!0});var rzr=s(xP);xmo=r(rzr,"WavLMModel"),rzr.forEach(t),kmo=r(IMe," (WavLM model)"),IMe.forEach(t),Rmo=i(C),A_=n(C,"LI",{});var jMe=s(A_);gee=n(jMe,"STRONG",{});var tzr=s(gee);Smo=r(tzr,"xglm"),tzr.forEach(t),Pmo=r(jMe," \u2014 "),kP=n(jMe,"A",{href:!0});var azr=s(kP);$mo=r(azr,"XGLMModel"),azr.forEach(t),Imo=r(jMe," (XGLM model)"),jMe.forEach(t),jmo=i(C),L_=n(C,"LI",{});var NMe=s(L_);hee=n(NMe,"STRONG",{});var nzr=s(hee);Nmo=r(nzr,"xlm"),nzr.forEach(t),Dmo=r(NMe," \u2014 "),RP=n(NMe,"A",{href:!0});var szr=s(RP);qmo=r(szr,"XLMModel"),szr.forEach(t),Gmo=r(NMe," (XLM model)"),NMe.forEach(t),Omo=i(C),B_=n(C,"LI",{});var DMe=s(B_);pee=n(DMe,"STRONG",{});var lzr=s(pee);Xmo=r(lzr,"xlm-prophetnet"),lzr.forEach(t),Vmo=r(DMe," \u2014 "),SP=n(DMe,"A",{href:!0});var izr=s(SP);zmo=r(izr,"XLMProphetNetModel"),izr.forEach(t),Wmo=r(DMe," (XLMProphetNet model)"),DMe.forEach(t),Qmo=i(C),x_=n(C,"LI",{});var qMe=s(x_);_ee=n(qMe,"STRONG",{});var dzr=s(_ee);Hmo=r(dzr,"xlm-roberta"),dzr.forEach(t),Umo=r(qMe," \u2014 "),PP=n(qMe,"A",{href:!0});var czr=s(PP);Jmo=r(czr,"XLMRobertaModel"),czr.forEach(t),Ymo=r(qMe," (XLM-RoBERTa model)"),qMe.forEach(t),Kmo=i(C),k_=n(C,"LI",{});var GMe=s(k_);uee=n(GMe,"STRONG",{});var fzr=s(uee);Zmo=r(fzr,"xlm-roberta-xl"),fzr.forEach(t),ego=r(GMe," \u2014 "),$P=n(GMe,"A",{href:!0});var mzr=s($P);ogo=r(mzr,"XLMRobertaXLModel"),mzr.forEach(t),rgo=r(GMe," (XLM-RoBERTa-XL model)"),GMe.forEach(t),tgo=i(C),R_=n(C,"LI",{});var OMe=s(R_);bee=n(OMe,"STRONG",{});var gzr=s(bee);ago=r(gzr,"xlnet"),gzr.forEach(t),ngo=r(OMe," \u2014 "),IP=n(OMe,"A",{href:!0});var hzr=s(IP);sgo=r(hzr,"XLNetModel"),hzr.forEach(t),lgo=r(OMe," (XLNet model)"),OMe.forEach(t),igo=i(C),S_=n(C,"LI",{});var XMe=s(S_);vee=n(XMe,"STRONG",{});var pzr=s(vee);dgo=r(pzr,"yoso"),pzr.forEach(t),cgo=r(XMe," \u2014 "),jP=n(XMe,"A",{href:!0});var _zr=s(jP);fgo=r(_zr,"YosoModel"),_zr.forEach(t),mgo=r(XMe," (YOSO model)"),XMe.forEach(t),C.forEach(t),ggo=i(Xt),P_=n(Xt,"P",{});var VMe=s(P_);hgo=r(VMe,"The model is set in evaluation mode by default using "),Tee=n(VMe,"CODE",{});var uzr=s(Tee);pgo=r(uzr,"model.eval()"),uzr.forEach(t),_go=r(VMe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fee=n(VMe,"CODE",{});var bzr=s(Fee);ugo=r(bzr,"model.train()"),bzr.forEach(t),VMe.forEach(t),bgo=i(Xt),Cee=n(Xt,"P",{});var vzr=s(Cee);vgo=r(vzr,"Examples:"),vzr.forEach(t),Tgo=i(Xt),m(rE.$$.fragment,Xt),Xt.forEach(t),Ys.forEach(t),Qke=i(d),ld=n(d,"H2",{class:!0});var aPe=s(ld);$_=n(aPe,"A",{id:!0,class:!0,href:!0});var Tzr=s($_);Mee=n(Tzr,"SPAN",{});var Fzr=s(Mee);m(tE.$$.fragment,Fzr),Fzr.forEach(t),Tzr.forEach(t),Fgo=i(aPe),Eee=n(aPe,"SPAN",{});var Czr=s(Eee);Cgo=r(Czr,"AutoModelForPreTraining"),Czr.forEach(t),aPe.forEach(t),Hke=i(d),Ko=n(d,"DIV",{class:!0});var Zs=s(Ko);m(aE.$$.fragment,Zs),Mgo=i(Zs),id=n(Zs,"P",{});var hW=s(id);Ego=r(hW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),yee=n(hW,"CODE",{});var Mzr=s(yee);ygo=r(Mzr,"from_pretrained()"),Mzr.forEach(t),wgo=r(hW,"class method or the "),wee=n(hW,"CODE",{});var Ezr=s(wee);Ago=r(Ezr,"from_config()"),Ezr.forEach(t),Lgo=r(hW,`class
method.`),hW.forEach(t),Bgo=i(Zs),nE=n(Zs,"P",{});var nPe=s(nE);xgo=r(nPe,"This class cannot be instantiated directly using "),Aee=n(nPe,"CODE",{});var yzr=s(Aee);kgo=r(yzr,"__init__()"),yzr.forEach(t),Rgo=r(nPe," (throws an error)."),nPe.forEach(t),Sgo=i(Zs),Qr=n(Zs,"DIV",{class:!0});var el=s(Qr);m(sE.$$.fragment,el),Pgo=i(el),Lee=n(el,"P",{});var wzr=s(Lee);$go=r(wzr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),wzr.forEach(t),Igo=i(el),dd=n(el,"P",{});var pW=s(dd);jgo=r(pW,`Note:
Loading a model from its configuration file does `),Bee=n(pW,"STRONG",{});var Azr=s(Bee);Ngo=r(Azr,"not"),Azr.forEach(t),Dgo=r(pW,` load the model weights. It only affects the
model\u2019s configuration. Use `),xee=n(pW,"CODE",{});var Lzr=s(xee);qgo=r(Lzr,"from_pretrained()"),Lzr.forEach(t),Ggo=r(pW,"to load the model weights."),pW.forEach(t),Ogo=i(el),kee=n(el,"P",{});var Bzr=s(kee);Xgo=r(Bzr,"Examples:"),Bzr.forEach(t),Vgo=i(el),m(lE.$$.fragment,el),el.forEach(t),zgo=i(Zs),De=n(Zs,"DIV",{class:!0});var Vt=s(De);m(iE.$$.fragment,Vt),Wgo=i(Vt),Ree=n(Vt,"P",{});var xzr=s(Ree);Qgo=r(xzr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),xzr.forEach(t),Hgo=i(Vt),Ua=n(Vt,"P",{});var TM=s(Ua);Ugo=r(TM,"The model class to instantiate is selected based on the "),See=n(TM,"CODE",{});var kzr=s(See);Jgo=r(kzr,"model_type"),kzr.forEach(t),Ygo=r(TM,` property of the config object (either
passed as an argument or loaded from `),Pee=n(TM,"CODE",{});var Rzr=s(Pee);Kgo=r(Rzr,"pretrained_model_name_or_path"),Rzr.forEach(t),Zgo=r(TM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ee=n(TM,"CODE",{});var Szr=s($ee);eho=r(Szr,"pretrained_model_name_or_path"),Szr.forEach(t),oho=r(TM,":"),TM.forEach(t),rho=i(Vt),k=n(Vt,"UL",{});var S=s(k);I_=n(S,"LI",{});var zMe=s(I_);Iee=n(zMe,"STRONG",{});var Pzr=s(Iee);tho=r(Pzr,"albert"),Pzr.forEach(t),aho=r(zMe," \u2014 "),NP=n(zMe,"A",{href:!0});var $zr=s(NP);nho=r($zr,"AlbertForPreTraining"),$zr.forEach(t),sho=r(zMe," (ALBERT model)"),zMe.forEach(t),lho=i(S),j_=n(S,"LI",{});var WMe=s(j_);jee=n(WMe,"STRONG",{});var Izr=s(jee);iho=r(Izr,"bart"),Izr.forEach(t),dho=r(WMe," \u2014 "),DP=n(WMe,"A",{href:!0});var jzr=s(DP);cho=r(jzr,"BartForConditionalGeneration"),jzr.forEach(t),fho=r(WMe," (BART model)"),WMe.forEach(t),mho=i(S),N_=n(S,"LI",{});var QMe=s(N_);Nee=n(QMe,"STRONG",{});var Nzr=s(Nee);gho=r(Nzr,"bert"),Nzr.forEach(t),hho=r(QMe," \u2014 "),qP=n(QMe,"A",{href:!0});var Dzr=s(qP);pho=r(Dzr,"BertForPreTraining"),Dzr.forEach(t),_ho=r(QMe," (BERT model)"),QMe.forEach(t),uho=i(S),D_=n(S,"LI",{});var HMe=s(D_);Dee=n(HMe,"STRONG",{});var qzr=s(Dee);bho=r(qzr,"big_bird"),qzr.forEach(t),vho=r(HMe," \u2014 "),GP=n(HMe,"A",{href:!0});var Gzr=s(GP);Tho=r(Gzr,"BigBirdForPreTraining"),Gzr.forEach(t),Fho=r(HMe," (BigBird model)"),HMe.forEach(t),Cho=i(S),q_=n(S,"LI",{});var UMe=s(q_);qee=n(UMe,"STRONG",{});var Ozr=s(qee);Mho=r(Ozr,"camembert"),Ozr.forEach(t),Eho=r(UMe," \u2014 "),OP=n(UMe,"A",{href:!0});var Xzr=s(OP);yho=r(Xzr,"CamembertForMaskedLM"),Xzr.forEach(t),who=r(UMe," (CamemBERT model)"),UMe.forEach(t),Aho=i(S),G_=n(S,"LI",{});var JMe=s(G_);Gee=n(JMe,"STRONG",{});var Vzr=s(Gee);Lho=r(Vzr,"ctrl"),Vzr.forEach(t),Bho=r(JMe," \u2014 "),XP=n(JMe,"A",{href:!0});var zzr=s(XP);xho=r(zzr,"CTRLLMHeadModel"),zzr.forEach(t),kho=r(JMe," (CTRL model)"),JMe.forEach(t),Rho=i(S),O_=n(S,"LI",{});var YMe=s(O_);Oee=n(YMe,"STRONG",{});var Wzr=s(Oee);Sho=r(Wzr,"data2vec-text"),Wzr.forEach(t),Pho=r(YMe," \u2014 "),VP=n(YMe,"A",{href:!0});var Qzr=s(VP);$ho=r(Qzr,"Data2VecTextForMaskedLM"),Qzr.forEach(t),Iho=r(YMe," (Data2VecText model)"),YMe.forEach(t),jho=i(S),X_=n(S,"LI",{});var KMe=s(X_);Xee=n(KMe,"STRONG",{});var Hzr=s(Xee);Nho=r(Hzr,"deberta"),Hzr.forEach(t),Dho=r(KMe," \u2014 "),zP=n(KMe,"A",{href:!0});var Uzr=s(zP);qho=r(Uzr,"DebertaForMaskedLM"),Uzr.forEach(t),Gho=r(KMe," (DeBERTa model)"),KMe.forEach(t),Oho=i(S),V_=n(S,"LI",{});var ZMe=s(V_);Vee=n(ZMe,"STRONG",{});var Jzr=s(Vee);Xho=r(Jzr,"deberta-v2"),Jzr.forEach(t),Vho=r(ZMe," \u2014 "),WP=n(ZMe,"A",{href:!0});var Yzr=s(WP);zho=r(Yzr,"DebertaV2ForMaskedLM"),Yzr.forEach(t),Who=r(ZMe," (DeBERTa-v2 model)"),ZMe.forEach(t),Qho=i(S),z_=n(S,"LI",{});var e4e=s(z_);zee=n(e4e,"STRONG",{});var Kzr=s(zee);Hho=r(Kzr,"distilbert"),Kzr.forEach(t),Uho=r(e4e," \u2014 "),QP=n(e4e,"A",{href:!0});var Zzr=s(QP);Jho=r(Zzr,"DistilBertForMaskedLM"),Zzr.forEach(t),Yho=r(e4e," (DistilBERT model)"),e4e.forEach(t),Kho=i(S),W_=n(S,"LI",{});var o4e=s(W_);Wee=n(o4e,"STRONG",{});var eWr=s(Wee);Zho=r(eWr,"electra"),eWr.forEach(t),epo=r(o4e," \u2014 "),HP=n(o4e,"A",{href:!0});var oWr=s(HP);opo=r(oWr,"ElectraForPreTraining"),oWr.forEach(t),rpo=r(o4e," (ELECTRA model)"),o4e.forEach(t),tpo=i(S),Q_=n(S,"LI",{});var r4e=s(Q_);Qee=n(r4e,"STRONG",{});var rWr=s(Qee);apo=r(rWr,"flaubert"),rWr.forEach(t),npo=r(r4e," \u2014 "),UP=n(r4e,"A",{href:!0});var tWr=s(UP);spo=r(tWr,"FlaubertWithLMHeadModel"),tWr.forEach(t),lpo=r(r4e," (FlauBERT model)"),r4e.forEach(t),ipo=i(S),H_=n(S,"LI",{});var t4e=s(H_);Hee=n(t4e,"STRONG",{});var aWr=s(Hee);dpo=r(aWr,"fnet"),aWr.forEach(t),cpo=r(t4e," \u2014 "),JP=n(t4e,"A",{href:!0});var nWr=s(JP);fpo=r(nWr,"FNetForPreTraining"),nWr.forEach(t),mpo=r(t4e," (FNet model)"),t4e.forEach(t),gpo=i(S),U_=n(S,"LI",{});var a4e=s(U_);Uee=n(a4e,"STRONG",{});var sWr=s(Uee);hpo=r(sWr,"fsmt"),sWr.forEach(t),ppo=r(a4e," \u2014 "),YP=n(a4e,"A",{href:!0});var lWr=s(YP);_po=r(lWr,"FSMTForConditionalGeneration"),lWr.forEach(t),upo=r(a4e," (FairSeq Machine-Translation model)"),a4e.forEach(t),bpo=i(S),J_=n(S,"LI",{});var n4e=s(J_);Jee=n(n4e,"STRONG",{});var iWr=s(Jee);vpo=r(iWr,"funnel"),iWr.forEach(t),Tpo=r(n4e," \u2014 "),KP=n(n4e,"A",{href:!0});var dWr=s(KP);Fpo=r(dWr,"FunnelForPreTraining"),dWr.forEach(t),Cpo=r(n4e," (Funnel Transformer model)"),n4e.forEach(t),Mpo=i(S),Y_=n(S,"LI",{});var s4e=s(Y_);Yee=n(s4e,"STRONG",{});var cWr=s(Yee);Epo=r(cWr,"gpt2"),cWr.forEach(t),ypo=r(s4e," \u2014 "),ZP=n(s4e,"A",{href:!0});var fWr=s(ZP);wpo=r(fWr,"GPT2LMHeadModel"),fWr.forEach(t),Apo=r(s4e," (OpenAI GPT-2 model)"),s4e.forEach(t),Lpo=i(S),K_=n(S,"LI",{});var l4e=s(K_);Kee=n(l4e,"STRONG",{});var mWr=s(Kee);Bpo=r(mWr,"ibert"),mWr.forEach(t),xpo=r(l4e," \u2014 "),e$=n(l4e,"A",{href:!0});var gWr=s(e$);kpo=r(gWr,"IBertForMaskedLM"),gWr.forEach(t),Rpo=r(l4e," (I-BERT model)"),l4e.forEach(t),Spo=i(S),Z_=n(S,"LI",{});var i4e=s(Z_);Zee=n(i4e,"STRONG",{});var hWr=s(Zee);Ppo=r(hWr,"layoutlm"),hWr.forEach(t),$po=r(i4e," \u2014 "),o$=n(i4e,"A",{href:!0});var pWr=s(o$);Ipo=r(pWr,"LayoutLMForMaskedLM"),pWr.forEach(t),jpo=r(i4e," (LayoutLM model)"),i4e.forEach(t),Npo=i(S),eu=n(S,"LI",{});var d4e=s(eu);eoe=n(d4e,"STRONG",{});var _Wr=s(eoe);Dpo=r(_Wr,"longformer"),_Wr.forEach(t),qpo=r(d4e," \u2014 "),r$=n(d4e,"A",{href:!0});var uWr=s(r$);Gpo=r(uWr,"LongformerForMaskedLM"),uWr.forEach(t),Opo=r(d4e," (Longformer model)"),d4e.forEach(t),Xpo=i(S),ou=n(S,"LI",{});var c4e=s(ou);ooe=n(c4e,"STRONG",{});var bWr=s(ooe);Vpo=r(bWr,"lxmert"),bWr.forEach(t),zpo=r(c4e," \u2014 "),t$=n(c4e,"A",{href:!0});var vWr=s(t$);Wpo=r(vWr,"LxmertForPreTraining"),vWr.forEach(t),Qpo=r(c4e," (LXMERT model)"),c4e.forEach(t),Hpo=i(S),ru=n(S,"LI",{});var f4e=s(ru);roe=n(f4e,"STRONG",{});var TWr=s(roe);Upo=r(TWr,"megatron-bert"),TWr.forEach(t),Jpo=r(f4e," \u2014 "),a$=n(f4e,"A",{href:!0});var FWr=s(a$);Ypo=r(FWr,"MegatronBertForPreTraining"),FWr.forEach(t),Kpo=r(f4e," (MegatronBert model)"),f4e.forEach(t),Zpo=i(S),tu=n(S,"LI",{});var m4e=s(tu);toe=n(m4e,"STRONG",{});var CWr=s(toe);e_o=r(CWr,"mobilebert"),CWr.forEach(t),o_o=r(m4e," \u2014 "),n$=n(m4e,"A",{href:!0});var MWr=s(n$);r_o=r(MWr,"MobileBertForPreTraining"),MWr.forEach(t),t_o=r(m4e," (MobileBERT model)"),m4e.forEach(t),a_o=i(S),au=n(S,"LI",{});var g4e=s(au);aoe=n(g4e,"STRONG",{});var EWr=s(aoe);n_o=r(EWr,"mpnet"),EWr.forEach(t),s_o=r(g4e," \u2014 "),s$=n(g4e,"A",{href:!0});var yWr=s(s$);l_o=r(yWr,"MPNetForMaskedLM"),yWr.forEach(t),i_o=r(g4e," (MPNet model)"),g4e.forEach(t),d_o=i(S),nu=n(S,"LI",{});var h4e=s(nu);noe=n(h4e,"STRONG",{});var wWr=s(noe);c_o=r(wWr,"openai-gpt"),wWr.forEach(t),f_o=r(h4e," \u2014 "),l$=n(h4e,"A",{href:!0});var AWr=s(l$);m_o=r(AWr,"OpenAIGPTLMHeadModel"),AWr.forEach(t),g_o=r(h4e," (OpenAI GPT model)"),h4e.forEach(t),h_o=i(S),su=n(S,"LI",{});var p4e=s(su);soe=n(p4e,"STRONG",{});var LWr=s(soe);p_o=r(LWr,"retribert"),LWr.forEach(t),__o=r(p4e," \u2014 "),i$=n(p4e,"A",{href:!0});var BWr=s(i$);u_o=r(BWr,"RetriBertModel"),BWr.forEach(t),b_o=r(p4e," (RetriBERT model)"),p4e.forEach(t),v_o=i(S),lu=n(S,"LI",{});var _4e=s(lu);loe=n(_4e,"STRONG",{});var xWr=s(loe);T_o=r(xWr,"roberta"),xWr.forEach(t),F_o=r(_4e," \u2014 "),d$=n(_4e,"A",{href:!0});var kWr=s(d$);C_o=r(kWr,"RobertaForMaskedLM"),kWr.forEach(t),M_o=r(_4e," (RoBERTa model)"),_4e.forEach(t),E_o=i(S),iu=n(S,"LI",{});var u4e=s(iu);ioe=n(u4e,"STRONG",{});var RWr=s(ioe);y_o=r(RWr,"squeezebert"),RWr.forEach(t),w_o=r(u4e," \u2014 "),c$=n(u4e,"A",{href:!0});var SWr=s(c$);A_o=r(SWr,"SqueezeBertForMaskedLM"),SWr.forEach(t),L_o=r(u4e," (SqueezeBERT model)"),u4e.forEach(t),B_o=i(S),du=n(S,"LI",{});var b4e=s(du);doe=n(b4e,"STRONG",{});var PWr=s(doe);x_o=r(PWr,"t5"),PWr.forEach(t),k_o=r(b4e," \u2014 "),f$=n(b4e,"A",{href:!0});var $Wr=s(f$);R_o=r($Wr,"T5ForConditionalGeneration"),$Wr.forEach(t),S_o=r(b4e," (T5 model)"),b4e.forEach(t),P_o=i(S),cu=n(S,"LI",{});var v4e=s(cu);coe=n(v4e,"STRONG",{});var IWr=s(coe);$_o=r(IWr,"tapas"),IWr.forEach(t),I_o=r(v4e," \u2014 "),m$=n(v4e,"A",{href:!0});var jWr=s(m$);j_o=r(jWr,"TapasForMaskedLM"),jWr.forEach(t),N_o=r(v4e," (TAPAS model)"),v4e.forEach(t),D_o=i(S),fu=n(S,"LI",{});var T4e=s(fu);foe=n(T4e,"STRONG",{});var NWr=s(foe);q_o=r(NWr,"transfo-xl"),NWr.forEach(t),G_o=r(T4e," \u2014 "),g$=n(T4e,"A",{href:!0});var DWr=s(g$);O_o=r(DWr,"TransfoXLLMHeadModel"),DWr.forEach(t),X_o=r(T4e," (Transformer-XL model)"),T4e.forEach(t),V_o=i(S),mu=n(S,"LI",{});var F4e=s(mu);moe=n(F4e,"STRONG",{});var qWr=s(moe);z_o=r(qWr,"unispeech"),qWr.forEach(t),W_o=r(F4e," \u2014 "),h$=n(F4e,"A",{href:!0});var GWr=s(h$);Q_o=r(GWr,"UniSpeechForPreTraining"),GWr.forEach(t),H_o=r(F4e," (UniSpeech model)"),F4e.forEach(t),U_o=i(S),gu=n(S,"LI",{});var C4e=s(gu);goe=n(C4e,"STRONG",{});var OWr=s(goe);J_o=r(OWr,"unispeech-sat"),OWr.forEach(t),Y_o=r(C4e," \u2014 "),p$=n(C4e,"A",{href:!0});var XWr=s(p$);K_o=r(XWr,"UniSpeechSatForPreTraining"),XWr.forEach(t),Z_o=r(C4e," (UniSpeechSat model)"),C4e.forEach(t),euo=i(S),hu=n(S,"LI",{});var M4e=s(hu);hoe=n(M4e,"STRONG",{});var VWr=s(hoe);ouo=r(VWr,"visual_bert"),VWr.forEach(t),ruo=r(M4e," \u2014 "),_$=n(M4e,"A",{href:!0});var zWr=s(_$);tuo=r(zWr,"VisualBertForPreTraining"),zWr.forEach(t),auo=r(M4e," (VisualBert model)"),M4e.forEach(t),nuo=i(S),pu=n(S,"LI",{});var E4e=s(pu);poe=n(E4e,"STRONG",{});var WWr=s(poe);suo=r(WWr,"vit_mae"),WWr.forEach(t),luo=r(E4e," \u2014 "),u$=n(E4e,"A",{href:!0});var QWr=s(u$);iuo=r(QWr,"ViTMAEForPreTraining"),QWr.forEach(t),duo=r(E4e," (ViTMAE model)"),E4e.forEach(t),cuo=i(S),_u=n(S,"LI",{});var y4e=s(_u);_oe=n(y4e,"STRONG",{});var HWr=s(_oe);fuo=r(HWr,"wav2vec2"),HWr.forEach(t),muo=r(y4e," \u2014 "),b$=n(y4e,"A",{href:!0});var UWr=s(b$);guo=r(UWr,"Wav2Vec2ForPreTraining"),UWr.forEach(t),huo=r(y4e," (Wav2Vec2 model)"),y4e.forEach(t),puo=i(S),uu=n(S,"LI",{});var w4e=s(uu);uoe=n(w4e,"STRONG",{});var JWr=s(uoe);_uo=r(JWr,"xlm"),JWr.forEach(t),uuo=r(w4e," \u2014 "),v$=n(w4e,"A",{href:!0});var YWr=s(v$);buo=r(YWr,"XLMWithLMHeadModel"),YWr.forEach(t),vuo=r(w4e," (XLM model)"),w4e.forEach(t),Tuo=i(S),bu=n(S,"LI",{});var A4e=s(bu);boe=n(A4e,"STRONG",{});var KWr=s(boe);Fuo=r(KWr,"xlm-roberta"),KWr.forEach(t),Cuo=r(A4e," \u2014 "),T$=n(A4e,"A",{href:!0});var ZWr=s(T$);Muo=r(ZWr,"XLMRobertaForMaskedLM"),ZWr.forEach(t),Euo=r(A4e," (XLM-RoBERTa model)"),A4e.forEach(t),yuo=i(S),vu=n(S,"LI",{});var L4e=s(vu);voe=n(L4e,"STRONG",{});var eQr=s(voe);wuo=r(eQr,"xlm-roberta-xl"),eQr.forEach(t),Auo=r(L4e," \u2014 "),F$=n(L4e,"A",{href:!0});var oQr=s(F$);Luo=r(oQr,"XLMRobertaXLForMaskedLM"),oQr.forEach(t),Buo=r(L4e," (XLM-RoBERTa-XL model)"),L4e.forEach(t),xuo=i(S),Tu=n(S,"LI",{});var B4e=s(Tu);Toe=n(B4e,"STRONG",{});var rQr=s(Toe);kuo=r(rQr,"xlnet"),rQr.forEach(t),Ruo=r(B4e," \u2014 "),C$=n(B4e,"A",{href:!0});var tQr=s(C$);Suo=r(tQr,"XLNetLMHeadModel"),tQr.forEach(t),Puo=r(B4e," (XLNet model)"),B4e.forEach(t),S.forEach(t),$uo=i(Vt),Fu=n(Vt,"P",{});var x4e=s(Fu);Iuo=r(x4e,"The model is set in evaluation mode by default using "),Foe=n(x4e,"CODE",{});var aQr=s(Foe);juo=r(aQr,"model.eval()"),aQr.forEach(t),Nuo=r(x4e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Coe=n(x4e,"CODE",{});var nQr=s(Coe);Duo=r(nQr,"model.train()"),nQr.forEach(t),x4e.forEach(t),quo=i(Vt),Moe=n(Vt,"P",{});var sQr=s(Moe);Guo=r(sQr,"Examples:"),sQr.forEach(t),Ouo=i(Vt),m(dE.$$.fragment,Vt),Vt.forEach(t),Zs.forEach(t),Uke=i(d),cd=n(d,"H2",{class:!0});var sPe=s(cd);Cu=n(sPe,"A",{id:!0,class:!0,href:!0});var lQr=s(Cu);Eoe=n(lQr,"SPAN",{});var iQr=s(Eoe);m(cE.$$.fragment,iQr),iQr.forEach(t),lQr.forEach(t),Xuo=i(sPe),yoe=n(sPe,"SPAN",{});var dQr=s(yoe);Vuo=r(dQr,"AutoModelForCausalLM"),dQr.forEach(t),sPe.forEach(t),Jke=i(d),Zo=n(d,"DIV",{class:!0});var ol=s(Zo);m(fE.$$.fragment,ol),zuo=i(ol),fd=n(ol,"P",{});var _W=s(fd);Wuo=r(_W,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),woe=n(_W,"CODE",{});var cQr=s(woe);Quo=r(cQr,"from_pretrained()"),cQr.forEach(t),Huo=r(_W,"class method or the "),Aoe=n(_W,"CODE",{});var fQr=s(Aoe);Uuo=r(fQr,"from_config()"),fQr.forEach(t),Juo=r(_W,`class
method.`),_W.forEach(t),Yuo=i(ol),mE=n(ol,"P",{});var lPe=s(mE);Kuo=r(lPe,"This class cannot be instantiated directly using "),Loe=n(lPe,"CODE",{});var mQr=s(Loe);Zuo=r(mQr,"__init__()"),mQr.forEach(t),e1o=r(lPe," (throws an error)."),lPe.forEach(t),o1o=i(ol),Hr=n(ol,"DIV",{class:!0});var rl=s(Hr);m(gE.$$.fragment,rl),r1o=i(rl),Boe=n(rl,"P",{});var gQr=s(Boe);t1o=r(gQr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),gQr.forEach(t),a1o=i(rl),md=n(rl,"P",{});var uW=s(md);n1o=r(uW,`Note:
Loading a model from its configuration file does `),xoe=n(uW,"STRONG",{});var hQr=s(xoe);s1o=r(hQr,"not"),hQr.forEach(t),l1o=r(uW,` load the model weights. It only affects the
model\u2019s configuration. Use `),koe=n(uW,"CODE",{});var pQr=s(koe);i1o=r(pQr,"from_pretrained()"),pQr.forEach(t),d1o=r(uW,"to load the model weights."),uW.forEach(t),c1o=i(rl),Roe=n(rl,"P",{});var _Qr=s(Roe);f1o=r(_Qr,"Examples:"),_Qr.forEach(t),m1o=i(rl),m(hE.$$.fragment,rl),rl.forEach(t),g1o=i(ol),qe=n(ol,"DIV",{class:!0});var zt=s(qe);m(pE.$$.fragment,zt),h1o=i(zt),Soe=n(zt,"P",{});var uQr=s(Soe);p1o=r(uQr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),uQr.forEach(t),_1o=i(zt),Ja=n(zt,"P",{});var FM=s(Ja);u1o=r(FM,"The model class to instantiate is selected based on the "),Poe=n(FM,"CODE",{});var bQr=s(Poe);b1o=r(bQr,"model_type"),bQr.forEach(t),v1o=r(FM,` property of the config object (either
passed as an argument or loaded from `),$oe=n(FM,"CODE",{});var vQr=s($oe);T1o=r(vQr,"pretrained_model_name_or_path"),vQr.forEach(t),F1o=r(FM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ioe=n(FM,"CODE",{});var TQr=s(Ioe);C1o=r(TQr,"pretrained_model_name_or_path"),TQr.forEach(t),M1o=r(FM,":"),FM.forEach(t),E1o=i(zt),$=n(zt,"UL",{});var j=s($);Mu=n(j,"LI",{});var k4e=s(Mu);joe=n(k4e,"STRONG",{});var FQr=s(joe);y1o=r(FQr,"bart"),FQr.forEach(t),w1o=r(k4e," \u2014 "),M$=n(k4e,"A",{href:!0});var CQr=s(M$);A1o=r(CQr,"BartForCausalLM"),CQr.forEach(t),L1o=r(k4e," (BART model)"),k4e.forEach(t),B1o=i(j),Eu=n(j,"LI",{});var R4e=s(Eu);Noe=n(R4e,"STRONG",{});var MQr=s(Noe);x1o=r(MQr,"bert"),MQr.forEach(t),k1o=r(R4e," \u2014 "),E$=n(R4e,"A",{href:!0});var EQr=s(E$);R1o=r(EQr,"BertLMHeadModel"),EQr.forEach(t),S1o=r(R4e," (BERT model)"),R4e.forEach(t),P1o=i(j),yu=n(j,"LI",{});var S4e=s(yu);Doe=n(S4e,"STRONG",{});var yQr=s(Doe);$1o=r(yQr,"bert-generation"),yQr.forEach(t),I1o=r(S4e," \u2014 "),y$=n(S4e,"A",{href:!0});var wQr=s(y$);j1o=r(wQr,"BertGenerationDecoder"),wQr.forEach(t),N1o=r(S4e," (Bert Generation model)"),S4e.forEach(t),D1o=i(j),wu=n(j,"LI",{});var P4e=s(wu);qoe=n(P4e,"STRONG",{});var AQr=s(qoe);q1o=r(AQr,"big_bird"),AQr.forEach(t),G1o=r(P4e," \u2014 "),w$=n(P4e,"A",{href:!0});var LQr=s(w$);O1o=r(LQr,"BigBirdForCausalLM"),LQr.forEach(t),X1o=r(P4e," (BigBird model)"),P4e.forEach(t),V1o=i(j),Au=n(j,"LI",{});var $4e=s(Au);Goe=n($4e,"STRONG",{});var BQr=s(Goe);z1o=r(BQr,"bigbird_pegasus"),BQr.forEach(t),W1o=r($4e," \u2014 "),A$=n($4e,"A",{href:!0});var xQr=s(A$);Q1o=r(xQr,"BigBirdPegasusForCausalLM"),xQr.forEach(t),H1o=r($4e," (BigBirdPegasus model)"),$4e.forEach(t),U1o=i(j),Lu=n(j,"LI",{});var I4e=s(Lu);Ooe=n(I4e,"STRONG",{});var kQr=s(Ooe);J1o=r(kQr,"blenderbot"),kQr.forEach(t),Y1o=r(I4e," \u2014 "),L$=n(I4e,"A",{href:!0});var RQr=s(L$);K1o=r(RQr,"BlenderbotForCausalLM"),RQr.forEach(t),Z1o=r(I4e," (Blenderbot model)"),I4e.forEach(t),ebo=i(j),Bu=n(j,"LI",{});var j4e=s(Bu);Xoe=n(j4e,"STRONG",{});var SQr=s(Xoe);obo=r(SQr,"blenderbot-small"),SQr.forEach(t),rbo=r(j4e," \u2014 "),B$=n(j4e,"A",{href:!0});var PQr=s(B$);tbo=r(PQr,"BlenderbotSmallForCausalLM"),PQr.forEach(t),abo=r(j4e," (BlenderbotSmall model)"),j4e.forEach(t),nbo=i(j),xu=n(j,"LI",{});var N4e=s(xu);Voe=n(N4e,"STRONG",{});var $Qr=s(Voe);sbo=r($Qr,"camembert"),$Qr.forEach(t),lbo=r(N4e," \u2014 "),x$=n(N4e,"A",{href:!0});var IQr=s(x$);ibo=r(IQr,"CamembertForCausalLM"),IQr.forEach(t),dbo=r(N4e," (CamemBERT model)"),N4e.forEach(t),cbo=i(j),ku=n(j,"LI",{});var D4e=s(ku);zoe=n(D4e,"STRONG",{});var jQr=s(zoe);fbo=r(jQr,"ctrl"),jQr.forEach(t),mbo=r(D4e," \u2014 "),k$=n(D4e,"A",{href:!0});var NQr=s(k$);gbo=r(NQr,"CTRLLMHeadModel"),NQr.forEach(t),hbo=r(D4e," (CTRL model)"),D4e.forEach(t),pbo=i(j),Ru=n(j,"LI",{});var q4e=s(Ru);Woe=n(q4e,"STRONG",{});var DQr=s(Woe);_bo=r(DQr,"data2vec-text"),DQr.forEach(t),ubo=r(q4e," \u2014 "),R$=n(q4e,"A",{href:!0});var qQr=s(R$);bbo=r(qQr,"Data2VecTextForCausalLM"),qQr.forEach(t),vbo=r(q4e," (Data2VecText model)"),q4e.forEach(t),Tbo=i(j),Su=n(j,"LI",{});var G4e=s(Su);Qoe=n(G4e,"STRONG",{});var GQr=s(Qoe);Fbo=r(GQr,"electra"),GQr.forEach(t),Cbo=r(G4e," \u2014 "),S$=n(G4e,"A",{href:!0});var OQr=s(S$);Mbo=r(OQr,"ElectraForCausalLM"),OQr.forEach(t),Ebo=r(G4e," (ELECTRA model)"),G4e.forEach(t),ybo=i(j),Pu=n(j,"LI",{});var O4e=s(Pu);Hoe=n(O4e,"STRONG",{});var XQr=s(Hoe);wbo=r(XQr,"gpt2"),XQr.forEach(t),Abo=r(O4e," \u2014 "),P$=n(O4e,"A",{href:!0});var VQr=s(P$);Lbo=r(VQr,"GPT2LMHeadModel"),VQr.forEach(t),Bbo=r(O4e," (OpenAI GPT-2 model)"),O4e.forEach(t),xbo=i(j),$u=n(j,"LI",{});var X4e=s($u);Uoe=n(X4e,"STRONG",{});var zQr=s(Uoe);kbo=r(zQr,"gpt_neo"),zQr.forEach(t),Rbo=r(X4e," \u2014 "),$$=n(X4e,"A",{href:!0});var WQr=s($$);Sbo=r(WQr,"GPTNeoForCausalLM"),WQr.forEach(t),Pbo=r(X4e," (GPT Neo model)"),X4e.forEach(t),$bo=i(j),Iu=n(j,"LI",{});var V4e=s(Iu);Joe=n(V4e,"STRONG",{});var QQr=s(Joe);Ibo=r(QQr,"gptj"),QQr.forEach(t),jbo=r(V4e," \u2014 "),I$=n(V4e,"A",{href:!0});var HQr=s(I$);Nbo=r(HQr,"GPTJForCausalLM"),HQr.forEach(t),Dbo=r(V4e," (GPT-J model)"),V4e.forEach(t),qbo=i(j),ju=n(j,"LI",{});var z4e=s(ju);Yoe=n(z4e,"STRONG",{});var UQr=s(Yoe);Gbo=r(UQr,"marian"),UQr.forEach(t),Obo=r(z4e," \u2014 "),j$=n(z4e,"A",{href:!0});var JQr=s(j$);Xbo=r(JQr,"MarianForCausalLM"),JQr.forEach(t),Vbo=r(z4e," (Marian model)"),z4e.forEach(t),zbo=i(j),Nu=n(j,"LI",{});var W4e=s(Nu);Koe=n(W4e,"STRONG",{});var YQr=s(Koe);Wbo=r(YQr,"mbart"),YQr.forEach(t),Qbo=r(W4e," \u2014 "),N$=n(W4e,"A",{href:!0});var KQr=s(N$);Hbo=r(KQr,"MBartForCausalLM"),KQr.forEach(t),Ubo=r(W4e," (mBART model)"),W4e.forEach(t),Jbo=i(j),Du=n(j,"LI",{});var Q4e=s(Du);Zoe=n(Q4e,"STRONG",{});var ZQr=s(Zoe);Ybo=r(ZQr,"megatron-bert"),ZQr.forEach(t),Kbo=r(Q4e," \u2014 "),D$=n(Q4e,"A",{href:!0});var eHr=s(D$);Zbo=r(eHr,"MegatronBertForCausalLM"),eHr.forEach(t),e5o=r(Q4e," (MegatronBert model)"),Q4e.forEach(t),o5o=i(j),qu=n(j,"LI",{});var H4e=s(qu);ere=n(H4e,"STRONG",{});var oHr=s(ere);r5o=r(oHr,"openai-gpt"),oHr.forEach(t),t5o=r(H4e," \u2014 "),q$=n(H4e,"A",{href:!0});var rHr=s(q$);a5o=r(rHr,"OpenAIGPTLMHeadModel"),rHr.forEach(t),n5o=r(H4e," (OpenAI GPT model)"),H4e.forEach(t),s5o=i(j),Gu=n(j,"LI",{});var U4e=s(Gu);ore=n(U4e,"STRONG",{});var tHr=s(ore);l5o=r(tHr,"pegasus"),tHr.forEach(t),i5o=r(U4e," \u2014 "),G$=n(U4e,"A",{href:!0});var aHr=s(G$);d5o=r(aHr,"PegasusForCausalLM"),aHr.forEach(t),c5o=r(U4e," (Pegasus model)"),U4e.forEach(t),f5o=i(j),Ou=n(j,"LI",{});var J4e=s(Ou);rre=n(J4e,"STRONG",{});var nHr=s(rre);m5o=r(nHr,"plbart"),nHr.forEach(t),g5o=r(J4e," \u2014 "),O$=n(J4e,"A",{href:!0});var sHr=s(O$);h5o=r(sHr,"PLBartForCausalLM"),sHr.forEach(t),p5o=r(J4e," (PLBart model)"),J4e.forEach(t),_5o=i(j),Xu=n(j,"LI",{});var Y4e=s(Xu);tre=n(Y4e,"STRONG",{});var lHr=s(tre);u5o=r(lHr,"prophetnet"),lHr.forEach(t),b5o=r(Y4e," \u2014 "),X$=n(Y4e,"A",{href:!0});var iHr=s(X$);v5o=r(iHr,"ProphetNetForCausalLM"),iHr.forEach(t),T5o=r(Y4e," (ProphetNet model)"),Y4e.forEach(t),F5o=i(j),Vu=n(j,"LI",{});var K4e=s(Vu);are=n(K4e,"STRONG",{});var dHr=s(are);C5o=r(dHr,"qdqbert"),dHr.forEach(t),M5o=r(K4e," \u2014 "),V$=n(K4e,"A",{href:!0});var cHr=s(V$);E5o=r(cHr,"QDQBertLMHeadModel"),cHr.forEach(t),y5o=r(K4e," (QDQBert model)"),K4e.forEach(t),w5o=i(j),zu=n(j,"LI",{});var Z4e=s(zu);nre=n(Z4e,"STRONG",{});var fHr=s(nre);A5o=r(fHr,"reformer"),fHr.forEach(t),L5o=r(Z4e," \u2014 "),z$=n(Z4e,"A",{href:!0});var mHr=s(z$);B5o=r(mHr,"ReformerModelWithLMHead"),mHr.forEach(t),x5o=r(Z4e," (Reformer model)"),Z4e.forEach(t),k5o=i(j),Wu=n(j,"LI",{});var eEe=s(Wu);sre=n(eEe,"STRONG",{});var gHr=s(sre);R5o=r(gHr,"rembert"),gHr.forEach(t),S5o=r(eEe," \u2014 "),W$=n(eEe,"A",{href:!0});var hHr=s(W$);P5o=r(hHr,"RemBertForCausalLM"),hHr.forEach(t),$5o=r(eEe," (RemBERT model)"),eEe.forEach(t),I5o=i(j),Qu=n(j,"LI",{});var oEe=s(Qu);lre=n(oEe,"STRONG",{});var pHr=s(lre);j5o=r(pHr,"roberta"),pHr.forEach(t),N5o=r(oEe," \u2014 "),Q$=n(oEe,"A",{href:!0});var _Hr=s(Q$);D5o=r(_Hr,"RobertaForCausalLM"),_Hr.forEach(t),q5o=r(oEe," (RoBERTa model)"),oEe.forEach(t),G5o=i(j),Hu=n(j,"LI",{});var rEe=s(Hu);ire=n(rEe,"STRONG",{});var uHr=s(ire);O5o=r(uHr,"roformer"),uHr.forEach(t),X5o=r(rEe," \u2014 "),H$=n(rEe,"A",{href:!0});var bHr=s(H$);V5o=r(bHr,"RoFormerForCausalLM"),bHr.forEach(t),z5o=r(rEe," (RoFormer model)"),rEe.forEach(t),W5o=i(j),Uu=n(j,"LI",{});var tEe=s(Uu);dre=n(tEe,"STRONG",{});var vHr=s(dre);Q5o=r(vHr,"speech_to_text_2"),vHr.forEach(t),H5o=r(tEe," \u2014 "),U$=n(tEe,"A",{href:!0});var THr=s(U$);U5o=r(THr,"Speech2Text2ForCausalLM"),THr.forEach(t),J5o=r(tEe," (Speech2Text2 model)"),tEe.forEach(t),Y5o=i(j),Ju=n(j,"LI",{});var aEe=s(Ju);cre=n(aEe,"STRONG",{});var FHr=s(cre);K5o=r(FHr,"transfo-xl"),FHr.forEach(t),Z5o=r(aEe," \u2014 "),J$=n(aEe,"A",{href:!0});var CHr=s(J$);e2o=r(CHr,"TransfoXLLMHeadModel"),CHr.forEach(t),o2o=r(aEe," (Transformer-XL model)"),aEe.forEach(t),r2o=i(j),Yu=n(j,"LI",{});var nEe=s(Yu);fre=n(nEe,"STRONG",{});var MHr=s(fre);t2o=r(MHr,"trocr"),MHr.forEach(t),a2o=r(nEe," \u2014 "),Y$=n(nEe,"A",{href:!0});var EHr=s(Y$);n2o=r(EHr,"TrOCRForCausalLM"),EHr.forEach(t),s2o=r(nEe," (TrOCR model)"),nEe.forEach(t),l2o=i(j),Ku=n(j,"LI",{});var sEe=s(Ku);mre=n(sEe,"STRONG",{});var yHr=s(mre);i2o=r(yHr,"xglm"),yHr.forEach(t),d2o=r(sEe," \u2014 "),K$=n(sEe,"A",{href:!0});var wHr=s(K$);c2o=r(wHr,"XGLMForCausalLM"),wHr.forEach(t),f2o=r(sEe," (XGLM model)"),sEe.forEach(t),m2o=i(j),Zu=n(j,"LI",{});var lEe=s(Zu);gre=n(lEe,"STRONG",{});var AHr=s(gre);g2o=r(AHr,"xlm"),AHr.forEach(t),h2o=r(lEe," \u2014 "),Z$=n(lEe,"A",{href:!0});var LHr=s(Z$);p2o=r(LHr,"XLMWithLMHeadModel"),LHr.forEach(t),_2o=r(lEe," (XLM model)"),lEe.forEach(t),u2o=i(j),e1=n(j,"LI",{});var iEe=s(e1);hre=n(iEe,"STRONG",{});var BHr=s(hre);b2o=r(BHr,"xlm-prophetnet"),BHr.forEach(t),v2o=r(iEe," \u2014 "),eI=n(iEe,"A",{href:!0});var xHr=s(eI);T2o=r(xHr,"XLMProphetNetForCausalLM"),xHr.forEach(t),F2o=r(iEe," (XLMProphetNet model)"),iEe.forEach(t),C2o=i(j),o1=n(j,"LI",{});var dEe=s(o1);pre=n(dEe,"STRONG",{});var kHr=s(pre);M2o=r(kHr,"xlm-roberta"),kHr.forEach(t),E2o=r(dEe," \u2014 "),oI=n(dEe,"A",{href:!0});var RHr=s(oI);y2o=r(RHr,"XLMRobertaForCausalLM"),RHr.forEach(t),w2o=r(dEe," (XLM-RoBERTa model)"),dEe.forEach(t),A2o=i(j),r1=n(j,"LI",{});var cEe=s(r1);_re=n(cEe,"STRONG",{});var SHr=s(_re);L2o=r(SHr,"xlm-roberta-xl"),SHr.forEach(t),B2o=r(cEe," \u2014 "),rI=n(cEe,"A",{href:!0});var PHr=s(rI);x2o=r(PHr,"XLMRobertaXLForCausalLM"),PHr.forEach(t),k2o=r(cEe," (XLM-RoBERTa-XL model)"),cEe.forEach(t),R2o=i(j),t1=n(j,"LI",{});var fEe=s(t1);ure=n(fEe,"STRONG",{});var $Hr=s(ure);S2o=r($Hr,"xlnet"),$Hr.forEach(t),P2o=r(fEe," \u2014 "),tI=n(fEe,"A",{href:!0});var IHr=s(tI);$2o=r(IHr,"XLNetLMHeadModel"),IHr.forEach(t),I2o=r(fEe," (XLNet model)"),fEe.forEach(t),j.forEach(t),j2o=i(zt),a1=n(zt,"P",{});var mEe=s(a1);N2o=r(mEe,"The model is set in evaluation mode by default using "),bre=n(mEe,"CODE",{});var jHr=s(bre);D2o=r(jHr,"model.eval()"),jHr.forEach(t),q2o=r(mEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vre=n(mEe,"CODE",{});var NHr=s(vre);G2o=r(NHr,"model.train()"),NHr.forEach(t),mEe.forEach(t),O2o=i(zt),Tre=n(zt,"P",{});var DHr=s(Tre);X2o=r(DHr,"Examples:"),DHr.forEach(t),V2o=i(zt),m(_E.$$.fragment,zt),zt.forEach(t),ol.forEach(t),Yke=i(d),gd=n(d,"H2",{class:!0});var iPe=s(gd);n1=n(iPe,"A",{id:!0,class:!0,href:!0});var qHr=s(n1);Fre=n(qHr,"SPAN",{});var GHr=s(Fre);m(uE.$$.fragment,GHr),GHr.forEach(t),qHr.forEach(t),z2o=i(iPe),Cre=n(iPe,"SPAN",{});var OHr=s(Cre);W2o=r(OHr,"AutoModelForMaskedLM"),OHr.forEach(t),iPe.forEach(t),Kke=i(d),er=n(d,"DIV",{class:!0});var tl=s(er);m(bE.$$.fragment,tl),Q2o=i(tl),hd=n(tl,"P",{});var bW=s(hd);H2o=r(bW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Mre=n(bW,"CODE",{});var XHr=s(Mre);U2o=r(XHr,"from_pretrained()"),XHr.forEach(t),J2o=r(bW,"class method or the "),Ere=n(bW,"CODE",{});var VHr=s(Ere);Y2o=r(VHr,"from_config()"),VHr.forEach(t),K2o=r(bW,`class
method.`),bW.forEach(t),Z2o=i(tl),vE=n(tl,"P",{});var dPe=s(vE);evo=r(dPe,"This class cannot be instantiated directly using "),yre=n(dPe,"CODE",{});var zHr=s(yre);ovo=r(zHr,"__init__()"),zHr.forEach(t),rvo=r(dPe," (throws an error)."),dPe.forEach(t),tvo=i(tl),Ur=n(tl,"DIV",{class:!0});var al=s(Ur);m(TE.$$.fragment,al),avo=i(al),wre=n(al,"P",{});var WHr=s(wre);nvo=r(WHr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),WHr.forEach(t),svo=i(al),pd=n(al,"P",{});var vW=s(pd);lvo=r(vW,`Note:
Loading a model from its configuration file does `),Are=n(vW,"STRONG",{});var QHr=s(Are);ivo=r(QHr,"not"),QHr.forEach(t),dvo=r(vW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lre=n(vW,"CODE",{});var HHr=s(Lre);cvo=r(HHr,"from_pretrained()"),HHr.forEach(t),fvo=r(vW,"to load the model weights."),vW.forEach(t),mvo=i(al),Bre=n(al,"P",{});var UHr=s(Bre);gvo=r(UHr,"Examples:"),UHr.forEach(t),hvo=i(al),m(FE.$$.fragment,al),al.forEach(t),pvo=i(tl),Ge=n(tl,"DIV",{class:!0});var Wt=s(Ge);m(CE.$$.fragment,Wt),_vo=i(Wt),xre=n(Wt,"P",{});var JHr=s(xre);uvo=r(JHr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),JHr.forEach(t),bvo=i(Wt),Ya=n(Wt,"P",{});var CM=s(Ya);vvo=r(CM,"The model class to instantiate is selected based on the "),kre=n(CM,"CODE",{});var YHr=s(kre);Tvo=r(YHr,"model_type"),YHr.forEach(t),Fvo=r(CM,` property of the config object (either
passed as an argument or loaded from `),Rre=n(CM,"CODE",{});var KHr=s(Rre);Cvo=r(KHr,"pretrained_model_name_or_path"),KHr.forEach(t),Mvo=r(CM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sre=n(CM,"CODE",{});var ZHr=s(Sre);Evo=r(ZHr,"pretrained_model_name_or_path"),ZHr.forEach(t),yvo=r(CM,":"),CM.forEach(t),wvo=i(Wt),I=n(Wt,"UL",{});var N=s(I);s1=n(N,"LI",{});var gEe=s(s1);Pre=n(gEe,"STRONG",{});var eUr=s(Pre);Avo=r(eUr,"albert"),eUr.forEach(t),Lvo=r(gEe," \u2014 "),aI=n(gEe,"A",{href:!0});var oUr=s(aI);Bvo=r(oUr,"AlbertForMaskedLM"),oUr.forEach(t),xvo=r(gEe," (ALBERT model)"),gEe.forEach(t),kvo=i(N),l1=n(N,"LI",{});var hEe=s(l1);$re=n(hEe,"STRONG",{});var rUr=s($re);Rvo=r(rUr,"bart"),rUr.forEach(t),Svo=r(hEe," \u2014 "),nI=n(hEe,"A",{href:!0});var tUr=s(nI);Pvo=r(tUr,"BartForConditionalGeneration"),tUr.forEach(t),$vo=r(hEe," (BART model)"),hEe.forEach(t),Ivo=i(N),i1=n(N,"LI",{});var pEe=s(i1);Ire=n(pEe,"STRONG",{});var aUr=s(Ire);jvo=r(aUr,"bert"),aUr.forEach(t),Nvo=r(pEe," \u2014 "),sI=n(pEe,"A",{href:!0});var nUr=s(sI);Dvo=r(nUr,"BertForMaskedLM"),nUr.forEach(t),qvo=r(pEe," (BERT model)"),pEe.forEach(t),Gvo=i(N),d1=n(N,"LI",{});var _Ee=s(d1);jre=n(_Ee,"STRONG",{});var sUr=s(jre);Ovo=r(sUr,"big_bird"),sUr.forEach(t),Xvo=r(_Ee," \u2014 "),lI=n(_Ee,"A",{href:!0});var lUr=s(lI);Vvo=r(lUr,"BigBirdForMaskedLM"),lUr.forEach(t),zvo=r(_Ee," (BigBird model)"),_Ee.forEach(t),Wvo=i(N),c1=n(N,"LI",{});var uEe=s(c1);Nre=n(uEe,"STRONG",{});var iUr=s(Nre);Qvo=r(iUr,"camembert"),iUr.forEach(t),Hvo=r(uEe," \u2014 "),iI=n(uEe,"A",{href:!0});var dUr=s(iI);Uvo=r(dUr,"CamembertForMaskedLM"),dUr.forEach(t),Jvo=r(uEe," (CamemBERT model)"),uEe.forEach(t),Yvo=i(N),f1=n(N,"LI",{});var bEe=s(f1);Dre=n(bEe,"STRONG",{});var cUr=s(Dre);Kvo=r(cUr,"convbert"),cUr.forEach(t),Zvo=r(bEe," \u2014 "),dI=n(bEe,"A",{href:!0});var fUr=s(dI);e6o=r(fUr,"ConvBertForMaskedLM"),fUr.forEach(t),o6o=r(bEe," (ConvBERT model)"),bEe.forEach(t),r6o=i(N),m1=n(N,"LI",{});var vEe=s(m1);qre=n(vEe,"STRONG",{});var mUr=s(qre);t6o=r(mUr,"data2vec-text"),mUr.forEach(t),a6o=r(vEe," \u2014 "),cI=n(vEe,"A",{href:!0});var gUr=s(cI);n6o=r(gUr,"Data2VecTextForMaskedLM"),gUr.forEach(t),s6o=r(vEe," (Data2VecText model)"),vEe.forEach(t),l6o=i(N),g1=n(N,"LI",{});var TEe=s(g1);Gre=n(TEe,"STRONG",{});var hUr=s(Gre);i6o=r(hUr,"deberta"),hUr.forEach(t),d6o=r(TEe," \u2014 "),fI=n(TEe,"A",{href:!0});var pUr=s(fI);c6o=r(pUr,"DebertaForMaskedLM"),pUr.forEach(t),f6o=r(TEe," (DeBERTa model)"),TEe.forEach(t),m6o=i(N),h1=n(N,"LI",{});var FEe=s(h1);Ore=n(FEe,"STRONG",{});var _Ur=s(Ore);g6o=r(_Ur,"deberta-v2"),_Ur.forEach(t),h6o=r(FEe," \u2014 "),mI=n(FEe,"A",{href:!0});var uUr=s(mI);p6o=r(uUr,"DebertaV2ForMaskedLM"),uUr.forEach(t),_6o=r(FEe," (DeBERTa-v2 model)"),FEe.forEach(t),u6o=i(N),p1=n(N,"LI",{});var CEe=s(p1);Xre=n(CEe,"STRONG",{});var bUr=s(Xre);b6o=r(bUr,"distilbert"),bUr.forEach(t),v6o=r(CEe," \u2014 "),gI=n(CEe,"A",{href:!0});var vUr=s(gI);T6o=r(vUr,"DistilBertForMaskedLM"),vUr.forEach(t),F6o=r(CEe," (DistilBERT model)"),CEe.forEach(t),C6o=i(N),_1=n(N,"LI",{});var MEe=s(_1);Vre=n(MEe,"STRONG",{});var TUr=s(Vre);M6o=r(TUr,"electra"),TUr.forEach(t),E6o=r(MEe," \u2014 "),hI=n(MEe,"A",{href:!0});var FUr=s(hI);y6o=r(FUr,"ElectraForMaskedLM"),FUr.forEach(t),w6o=r(MEe," (ELECTRA model)"),MEe.forEach(t),A6o=i(N),u1=n(N,"LI",{});var EEe=s(u1);zre=n(EEe,"STRONG",{});var CUr=s(zre);L6o=r(CUr,"flaubert"),CUr.forEach(t),B6o=r(EEe," \u2014 "),pI=n(EEe,"A",{href:!0});var MUr=s(pI);x6o=r(MUr,"FlaubertWithLMHeadModel"),MUr.forEach(t),k6o=r(EEe," (FlauBERT model)"),EEe.forEach(t),R6o=i(N),b1=n(N,"LI",{});var yEe=s(b1);Wre=n(yEe,"STRONG",{});var EUr=s(Wre);S6o=r(EUr,"fnet"),EUr.forEach(t),P6o=r(yEe," \u2014 "),_I=n(yEe,"A",{href:!0});var yUr=s(_I);$6o=r(yUr,"FNetForMaskedLM"),yUr.forEach(t),I6o=r(yEe," (FNet model)"),yEe.forEach(t),j6o=i(N),v1=n(N,"LI",{});var wEe=s(v1);Qre=n(wEe,"STRONG",{});var wUr=s(Qre);N6o=r(wUr,"funnel"),wUr.forEach(t),D6o=r(wEe," \u2014 "),uI=n(wEe,"A",{href:!0});var AUr=s(uI);q6o=r(AUr,"FunnelForMaskedLM"),AUr.forEach(t),G6o=r(wEe," (Funnel Transformer model)"),wEe.forEach(t),O6o=i(N),T1=n(N,"LI",{});var AEe=s(T1);Hre=n(AEe,"STRONG",{});var LUr=s(Hre);X6o=r(LUr,"ibert"),LUr.forEach(t),V6o=r(AEe," \u2014 "),bI=n(AEe,"A",{href:!0});var BUr=s(bI);z6o=r(BUr,"IBertForMaskedLM"),BUr.forEach(t),W6o=r(AEe," (I-BERT model)"),AEe.forEach(t),Q6o=i(N),F1=n(N,"LI",{});var LEe=s(F1);Ure=n(LEe,"STRONG",{});var xUr=s(Ure);H6o=r(xUr,"layoutlm"),xUr.forEach(t),U6o=r(LEe," \u2014 "),vI=n(LEe,"A",{href:!0});var kUr=s(vI);J6o=r(kUr,"LayoutLMForMaskedLM"),kUr.forEach(t),Y6o=r(LEe," (LayoutLM model)"),LEe.forEach(t),K6o=i(N),C1=n(N,"LI",{});var BEe=s(C1);Jre=n(BEe,"STRONG",{});var RUr=s(Jre);Z6o=r(RUr,"longformer"),RUr.forEach(t),e0o=r(BEe," \u2014 "),TI=n(BEe,"A",{href:!0});var SUr=s(TI);o0o=r(SUr,"LongformerForMaskedLM"),SUr.forEach(t),r0o=r(BEe," (Longformer model)"),BEe.forEach(t),t0o=i(N),M1=n(N,"LI",{});var xEe=s(M1);Yre=n(xEe,"STRONG",{});var PUr=s(Yre);a0o=r(PUr,"mbart"),PUr.forEach(t),n0o=r(xEe," \u2014 "),FI=n(xEe,"A",{href:!0});var $Ur=s(FI);s0o=r($Ur,"MBartForConditionalGeneration"),$Ur.forEach(t),l0o=r(xEe," (mBART model)"),xEe.forEach(t),i0o=i(N),E1=n(N,"LI",{});var kEe=s(E1);Kre=n(kEe,"STRONG",{});var IUr=s(Kre);d0o=r(IUr,"megatron-bert"),IUr.forEach(t),c0o=r(kEe," \u2014 "),CI=n(kEe,"A",{href:!0});var jUr=s(CI);f0o=r(jUr,"MegatronBertForMaskedLM"),jUr.forEach(t),m0o=r(kEe," (MegatronBert model)"),kEe.forEach(t),g0o=i(N),y1=n(N,"LI",{});var REe=s(y1);Zre=n(REe,"STRONG",{});var NUr=s(Zre);h0o=r(NUr,"mobilebert"),NUr.forEach(t),p0o=r(REe," \u2014 "),MI=n(REe,"A",{href:!0});var DUr=s(MI);_0o=r(DUr,"MobileBertForMaskedLM"),DUr.forEach(t),u0o=r(REe," (MobileBERT model)"),REe.forEach(t),b0o=i(N),w1=n(N,"LI",{});var SEe=s(w1);ete=n(SEe,"STRONG",{});var qUr=s(ete);v0o=r(qUr,"mpnet"),qUr.forEach(t),T0o=r(SEe," \u2014 "),EI=n(SEe,"A",{href:!0});var GUr=s(EI);F0o=r(GUr,"MPNetForMaskedLM"),GUr.forEach(t),C0o=r(SEe," (MPNet model)"),SEe.forEach(t),M0o=i(N),A1=n(N,"LI",{});var PEe=s(A1);ote=n(PEe,"STRONG",{});var OUr=s(ote);E0o=r(OUr,"nystromformer"),OUr.forEach(t),y0o=r(PEe," \u2014 "),yI=n(PEe,"A",{href:!0});var XUr=s(yI);w0o=r(XUr,"NystromformerForMaskedLM"),XUr.forEach(t),A0o=r(PEe," (Nystromformer model)"),PEe.forEach(t),L0o=i(N),L1=n(N,"LI",{});var $Ee=s(L1);rte=n($Ee,"STRONG",{});var VUr=s(rte);B0o=r(VUr,"perceiver"),VUr.forEach(t),x0o=r($Ee," \u2014 "),wI=n($Ee,"A",{href:!0});var zUr=s(wI);k0o=r(zUr,"PerceiverForMaskedLM"),zUr.forEach(t),R0o=r($Ee," (Perceiver model)"),$Ee.forEach(t),S0o=i(N),B1=n(N,"LI",{});var IEe=s(B1);tte=n(IEe,"STRONG",{});var WUr=s(tte);P0o=r(WUr,"qdqbert"),WUr.forEach(t),$0o=r(IEe," \u2014 "),AI=n(IEe,"A",{href:!0});var QUr=s(AI);I0o=r(QUr,"QDQBertForMaskedLM"),QUr.forEach(t),j0o=r(IEe," (QDQBert model)"),IEe.forEach(t),N0o=i(N),x1=n(N,"LI",{});var jEe=s(x1);ate=n(jEe,"STRONG",{});var HUr=s(ate);D0o=r(HUr,"reformer"),HUr.forEach(t),q0o=r(jEe," \u2014 "),LI=n(jEe,"A",{href:!0});var UUr=s(LI);G0o=r(UUr,"ReformerForMaskedLM"),UUr.forEach(t),O0o=r(jEe," (Reformer model)"),jEe.forEach(t),X0o=i(N),k1=n(N,"LI",{});var NEe=s(k1);nte=n(NEe,"STRONG",{});var JUr=s(nte);V0o=r(JUr,"rembert"),JUr.forEach(t),z0o=r(NEe," \u2014 "),BI=n(NEe,"A",{href:!0});var YUr=s(BI);W0o=r(YUr,"RemBertForMaskedLM"),YUr.forEach(t),Q0o=r(NEe," (RemBERT model)"),NEe.forEach(t),H0o=i(N),R1=n(N,"LI",{});var DEe=s(R1);ste=n(DEe,"STRONG",{});var KUr=s(ste);U0o=r(KUr,"roberta"),KUr.forEach(t),J0o=r(DEe," \u2014 "),xI=n(DEe,"A",{href:!0});var ZUr=s(xI);Y0o=r(ZUr,"RobertaForMaskedLM"),ZUr.forEach(t),K0o=r(DEe," (RoBERTa model)"),DEe.forEach(t),Z0o=i(N),S1=n(N,"LI",{});var qEe=s(S1);lte=n(qEe,"STRONG",{});var eJr=s(lte);eTo=r(eJr,"roformer"),eJr.forEach(t),oTo=r(qEe," \u2014 "),kI=n(qEe,"A",{href:!0});var oJr=s(kI);rTo=r(oJr,"RoFormerForMaskedLM"),oJr.forEach(t),tTo=r(qEe," (RoFormer model)"),qEe.forEach(t),aTo=i(N),P1=n(N,"LI",{});var GEe=s(P1);ite=n(GEe,"STRONG",{});var rJr=s(ite);nTo=r(rJr,"squeezebert"),rJr.forEach(t),sTo=r(GEe," \u2014 "),RI=n(GEe,"A",{href:!0});var tJr=s(RI);lTo=r(tJr,"SqueezeBertForMaskedLM"),tJr.forEach(t),iTo=r(GEe," (SqueezeBERT model)"),GEe.forEach(t),dTo=i(N),$1=n(N,"LI",{});var OEe=s($1);dte=n(OEe,"STRONG",{});var aJr=s(dte);cTo=r(aJr,"tapas"),aJr.forEach(t),fTo=r(OEe," \u2014 "),SI=n(OEe,"A",{href:!0});var nJr=s(SI);mTo=r(nJr,"TapasForMaskedLM"),nJr.forEach(t),gTo=r(OEe," (TAPAS model)"),OEe.forEach(t),hTo=i(N),I1=n(N,"LI",{});var XEe=s(I1);cte=n(XEe,"STRONG",{});var sJr=s(cte);pTo=r(sJr,"wav2vec2"),sJr.forEach(t),_To=r(XEe," \u2014 "),fte=n(XEe,"CODE",{});var lJr=s(fte);uTo=r(lJr,"Wav2Vec2ForMaskedLM"),lJr.forEach(t),bTo=r(XEe,"(Wav2Vec2 model)"),XEe.forEach(t),vTo=i(N),j1=n(N,"LI",{});var VEe=s(j1);mte=n(VEe,"STRONG",{});var iJr=s(mte);TTo=r(iJr,"xlm"),iJr.forEach(t),FTo=r(VEe," \u2014 "),PI=n(VEe,"A",{href:!0});var dJr=s(PI);CTo=r(dJr,"XLMWithLMHeadModel"),dJr.forEach(t),MTo=r(VEe," (XLM model)"),VEe.forEach(t),ETo=i(N),N1=n(N,"LI",{});var zEe=s(N1);gte=n(zEe,"STRONG",{});var cJr=s(gte);yTo=r(cJr,"xlm-roberta"),cJr.forEach(t),wTo=r(zEe," \u2014 "),$I=n(zEe,"A",{href:!0});var fJr=s($I);ATo=r(fJr,"XLMRobertaForMaskedLM"),fJr.forEach(t),LTo=r(zEe," (XLM-RoBERTa model)"),zEe.forEach(t),BTo=i(N),D1=n(N,"LI",{});var WEe=s(D1);hte=n(WEe,"STRONG",{});var mJr=s(hte);xTo=r(mJr,"xlm-roberta-xl"),mJr.forEach(t),kTo=r(WEe," \u2014 "),II=n(WEe,"A",{href:!0});var gJr=s(II);RTo=r(gJr,"XLMRobertaXLForMaskedLM"),gJr.forEach(t),STo=r(WEe," (XLM-RoBERTa-XL model)"),WEe.forEach(t),PTo=i(N),q1=n(N,"LI",{});var QEe=s(q1);pte=n(QEe,"STRONG",{});var hJr=s(pte);$To=r(hJr,"yoso"),hJr.forEach(t),ITo=r(QEe," \u2014 "),jI=n(QEe,"A",{href:!0});var pJr=s(jI);jTo=r(pJr,"YosoForMaskedLM"),pJr.forEach(t),NTo=r(QEe," (YOSO model)"),QEe.forEach(t),N.forEach(t),DTo=i(Wt),G1=n(Wt,"P",{});var HEe=s(G1);qTo=r(HEe,"The model is set in evaluation mode by default using "),_te=n(HEe,"CODE",{});var _Jr=s(_te);GTo=r(_Jr,"model.eval()"),_Jr.forEach(t),OTo=r(HEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ute=n(HEe,"CODE",{});var uJr=s(ute);XTo=r(uJr,"model.train()"),uJr.forEach(t),HEe.forEach(t),VTo=i(Wt),bte=n(Wt,"P",{});var bJr=s(bte);zTo=r(bJr,"Examples:"),bJr.forEach(t),WTo=i(Wt),m(ME.$$.fragment,Wt),Wt.forEach(t),tl.forEach(t),Zke=i(d),_d=n(d,"H2",{class:!0});var cPe=s(_d);O1=n(cPe,"A",{id:!0,class:!0,href:!0});var vJr=s(O1);vte=n(vJr,"SPAN",{});var TJr=s(vte);m(EE.$$.fragment,TJr),TJr.forEach(t),vJr.forEach(t),QTo=i(cPe),Tte=n(cPe,"SPAN",{});var FJr=s(Tte);HTo=r(FJr,"AutoModelForSeq2SeqLM"),FJr.forEach(t),cPe.forEach(t),eRe=i(d),or=n(d,"DIV",{class:!0});var nl=s(or);m(yE.$$.fragment,nl),UTo=i(nl),ud=n(nl,"P",{});var TW=s(ud);JTo=r(TW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Fte=n(TW,"CODE",{});var CJr=s(Fte);YTo=r(CJr,"from_pretrained()"),CJr.forEach(t),KTo=r(TW,"class method or the "),Cte=n(TW,"CODE",{});var MJr=s(Cte);ZTo=r(MJr,"from_config()"),MJr.forEach(t),e8o=r(TW,`class
method.`),TW.forEach(t),o8o=i(nl),wE=n(nl,"P",{});var fPe=s(wE);r8o=r(fPe,"This class cannot be instantiated directly using "),Mte=n(fPe,"CODE",{});var EJr=s(Mte);t8o=r(EJr,"__init__()"),EJr.forEach(t),a8o=r(fPe," (throws an error)."),fPe.forEach(t),n8o=i(nl),Jr=n(nl,"DIV",{class:!0});var sl=s(Jr);m(AE.$$.fragment,sl),s8o=i(sl),Ete=n(sl,"P",{});var yJr=s(Ete);l8o=r(yJr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),yJr.forEach(t),i8o=i(sl),bd=n(sl,"P",{});var FW=s(bd);d8o=r(FW,`Note:
Loading a model from its configuration file does `),yte=n(FW,"STRONG",{});var wJr=s(yte);c8o=r(wJr,"not"),wJr.forEach(t),f8o=r(FW,` load the model weights. It only affects the
model\u2019s configuration. Use `),wte=n(FW,"CODE",{});var AJr=s(wte);m8o=r(AJr,"from_pretrained()"),AJr.forEach(t),g8o=r(FW,"to load the model weights."),FW.forEach(t),h8o=i(sl),Ate=n(sl,"P",{});var LJr=s(Ate);p8o=r(LJr,"Examples:"),LJr.forEach(t),_8o=i(sl),m(LE.$$.fragment,sl),sl.forEach(t),u8o=i(nl),Oe=n(nl,"DIV",{class:!0});var Qt=s(Oe);m(BE.$$.fragment,Qt),b8o=i(Qt),Lte=n(Qt,"P",{});var BJr=s(Lte);v8o=r(BJr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),BJr.forEach(t),T8o=i(Qt),Ka=n(Qt,"P",{});var MM=s(Ka);F8o=r(MM,"The model class to instantiate is selected based on the "),Bte=n(MM,"CODE",{});var xJr=s(Bte);C8o=r(xJr,"model_type"),xJr.forEach(t),M8o=r(MM,` property of the config object (either
passed as an argument or loaded from `),xte=n(MM,"CODE",{});var kJr=s(xte);E8o=r(kJr,"pretrained_model_name_or_path"),kJr.forEach(t),y8o=r(MM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kte=n(MM,"CODE",{});var RJr=s(kte);w8o=r(RJr,"pretrained_model_name_or_path"),RJr.forEach(t),A8o=r(MM,":"),MM.forEach(t),L8o=i(Qt),se=n(Qt,"UL",{});var ie=s(se);X1=n(ie,"LI",{});var UEe=s(X1);Rte=n(UEe,"STRONG",{});var SJr=s(Rte);B8o=r(SJr,"bart"),SJr.forEach(t),x8o=r(UEe," \u2014 "),NI=n(UEe,"A",{href:!0});var PJr=s(NI);k8o=r(PJr,"BartForConditionalGeneration"),PJr.forEach(t),R8o=r(UEe," (BART model)"),UEe.forEach(t),S8o=i(ie),V1=n(ie,"LI",{});var JEe=s(V1);Ste=n(JEe,"STRONG",{});var $Jr=s(Ste);P8o=r($Jr,"bigbird_pegasus"),$Jr.forEach(t),$8o=r(JEe," \u2014 "),DI=n(JEe,"A",{href:!0});var IJr=s(DI);I8o=r(IJr,"BigBirdPegasusForConditionalGeneration"),IJr.forEach(t),j8o=r(JEe," (BigBirdPegasus model)"),JEe.forEach(t),N8o=i(ie),z1=n(ie,"LI",{});var YEe=s(z1);Pte=n(YEe,"STRONG",{});var jJr=s(Pte);D8o=r(jJr,"blenderbot"),jJr.forEach(t),q8o=r(YEe," \u2014 "),qI=n(YEe,"A",{href:!0});var NJr=s(qI);G8o=r(NJr,"BlenderbotForConditionalGeneration"),NJr.forEach(t),O8o=r(YEe," (Blenderbot model)"),YEe.forEach(t),X8o=i(ie),W1=n(ie,"LI",{});var KEe=s(W1);$te=n(KEe,"STRONG",{});var DJr=s($te);V8o=r(DJr,"blenderbot-small"),DJr.forEach(t),z8o=r(KEe," \u2014 "),GI=n(KEe,"A",{href:!0});var qJr=s(GI);W8o=r(qJr,"BlenderbotSmallForConditionalGeneration"),qJr.forEach(t),Q8o=r(KEe," (BlenderbotSmall model)"),KEe.forEach(t),H8o=i(ie),Q1=n(ie,"LI",{});var ZEe=s(Q1);Ite=n(ZEe,"STRONG",{});var GJr=s(Ite);U8o=r(GJr,"encoder-decoder"),GJr.forEach(t),J8o=r(ZEe," \u2014 "),OI=n(ZEe,"A",{href:!0});var OJr=s(OI);Y8o=r(OJr,"EncoderDecoderModel"),OJr.forEach(t),K8o=r(ZEe," (Encoder decoder model)"),ZEe.forEach(t),Z8o=i(ie),H1=n(ie,"LI",{});var e3e=s(H1);jte=n(e3e,"STRONG",{});var XJr=s(jte);eFo=r(XJr,"fsmt"),XJr.forEach(t),oFo=r(e3e," \u2014 "),XI=n(e3e,"A",{href:!0});var VJr=s(XI);rFo=r(VJr,"FSMTForConditionalGeneration"),VJr.forEach(t),tFo=r(e3e," (FairSeq Machine-Translation model)"),e3e.forEach(t),aFo=i(ie),U1=n(ie,"LI",{});var o3e=s(U1);Nte=n(o3e,"STRONG",{});var zJr=s(Nte);nFo=r(zJr,"led"),zJr.forEach(t),sFo=r(o3e," \u2014 "),VI=n(o3e,"A",{href:!0});var WJr=s(VI);lFo=r(WJr,"LEDForConditionalGeneration"),WJr.forEach(t),iFo=r(o3e," (LED model)"),o3e.forEach(t),dFo=i(ie),J1=n(ie,"LI",{});var r3e=s(J1);Dte=n(r3e,"STRONG",{});var QJr=s(Dte);cFo=r(QJr,"m2m_100"),QJr.forEach(t),fFo=r(r3e," \u2014 "),zI=n(r3e,"A",{href:!0});var HJr=s(zI);mFo=r(HJr,"M2M100ForConditionalGeneration"),HJr.forEach(t),gFo=r(r3e," (M2M100 model)"),r3e.forEach(t),hFo=i(ie),Y1=n(ie,"LI",{});var t3e=s(Y1);qte=n(t3e,"STRONG",{});var UJr=s(qte);pFo=r(UJr,"marian"),UJr.forEach(t),_Fo=r(t3e," \u2014 "),WI=n(t3e,"A",{href:!0});var JJr=s(WI);uFo=r(JJr,"MarianMTModel"),JJr.forEach(t),bFo=r(t3e," (Marian model)"),t3e.forEach(t),vFo=i(ie),K1=n(ie,"LI",{});var a3e=s(K1);Gte=n(a3e,"STRONG",{});var YJr=s(Gte);TFo=r(YJr,"mbart"),YJr.forEach(t),FFo=r(a3e," \u2014 "),QI=n(a3e,"A",{href:!0});var KJr=s(QI);CFo=r(KJr,"MBartForConditionalGeneration"),KJr.forEach(t),MFo=r(a3e," (mBART model)"),a3e.forEach(t),EFo=i(ie),Z1=n(ie,"LI",{});var n3e=s(Z1);Ote=n(n3e,"STRONG",{});var ZJr=s(Ote);yFo=r(ZJr,"mt5"),ZJr.forEach(t),wFo=r(n3e," \u2014 "),HI=n(n3e,"A",{href:!0});var eYr=s(HI);AFo=r(eYr,"MT5ForConditionalGeneration"),eYr.forEach(t),LFo=r(n3e," (mT5 model)"),n3e.forEach(t),BFo=i(ie),eb=n(ie,"LI",{});var s3e=s(eb);Xte=n(s3e,"STRONG",{});var oYr=s(Xte);xFo=r(oYr,"pegasus"),oYr.forEach(t),kFo=r(s3e," \u2014 "),UI=n(s3e,"A",{href:!0});var rYr=s(UI);RFo=r(rYr,"PegasusForConditionalGeneration"),rYr.forEach(t),SFo=r(s3e," (Pegasus model)"),s3e.forEach(t),PFo=i(ie),ob=n(ie,"LI",{});var l3e=s(ob);Vte=n(l3e,"STRONG",{});var tYr=s(Vte);$Fo=r(tYr,"plbart"),tYr.forEach(t),IFo=r(l3e," \u2014 "),JI=n(l3e,"A",{href:!0});var aYr=s(JI);jFo=r(aYr,"PLBartForConditionalGeneration"),aYr.forEach(t),NFo=r(l3e," (PLBart model)"),l3e.forEach(t),DFo=i(ie),rb=n(ie,"LI",{});var i3e=s(rb);zte=n(i3e,"STRONG",{});var nYr=s(zte);qFo=r(nYr,"prophetnet"),nYr.forEach(t),GFo=r(i3e," \u2014 "),YI=n(i3e,"A",{href:!0});var sYr=s(YI);OFo=r(sYr,"ProphetNetForConditionalGeneration"),sYr.forEach(t),XFo=r(i3e," (ProphetNet model)"),i3e.forEach(t),VFo=i(ie),tb=n(ie,"LI",{});var d3e=s(tb);Wte=n(d3e,"STRONG",{});var lYr=s(Wte);zFo=r(lYr,"t5"),lYr.forEach(t),WFo=r(d3e," \u2014 "),KI=n(d3e,"A",{href:!0});var iYr=s(KI);QFo=r(iYr,"T5ForConditionalGeneration"),iYr.forEach(t),HFo=r(d3e," (T5 model)"),d3e.forEach(t),UFo=i(ie),ab=n(ie,"LI",{});var c3e=s(ab);Qte=n(c3e,"STRONG",{});var dYr=s(Qte);JFo=r(dYr,"xlm-prophetnet"),dYr.forEach(t),YFo=r(c3e," \u2014 "),ZI=n(c3e,"A",{href:!0});var cYr=s(ZI);KFo=r(cYr,"XLMProphetNetForConditionalGeneration"),cYr.forEach(t),ZFo=r(c3e," (XLMProphetNet model)"),c3e.forEach(t),ie.forEach(t),eCo=i(Qt),nb=n(Qt,"P",{});var f3e=s(nb);oCo=r(f3e,"The model is set in evaluation mode by default using "),Hte=n(f3e,"CODE",{});var fYr=s(Hte);rCo=r(fYr,"model.eval()"),fYr.forEach(t),tCo=r(f3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ute=n(f3e,"CODE",{});var mYr=s(Ute);aCo=r(mYr,"model.train()"),mYr.forEach(t),f3e.forEach(t),nCo=i(Qt),Jte=n(Qt,"P",{});var gYr=s(Jte);sCo=r(gYr,"Examples:"),gYr.forEach(t),lCo=i(Qt),m(xE.$$.fragment,Qt),Qt.forEach(t),nl.forEach(t),oRe=i(d),vd=n(d,"H2",{class:!0});var mPe=s(vd);sb=n(mPe,"A",{id:!0,class:!0,href:!0});var hYr=s(sb);Yte=n(hYr,"SPAN",{});var pYr=s(Yte);m(kE.$$.fragment,pYr),pYr.forEach(t),hYr.forEach(t),iCo=i(mPe),Kte=n(mPe,"SPAN",{});var _Yr=s(Kte);dCo=r(_Yr,"AutoModelForSequenceClassification"),_Yr.forEach(t),mPe.forEach(t),rRe=i(d),rr=n(d,"DIV",{class:!0});var ll=s(rr);m(RE.$$.fragment,ll),cCo=i(ll),Td=n(ll,"P",{});var CW=s(Td);fCo=r(CW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Zte=n(CW,"CODE",{});var uYr=s(Zte);mCo=r(uYr,"from_pretrained()"),uYr.forEach(t),gCo=r(CW,"class method or the "),eae=n(CW,"CODE",{});var bYr=s(eae);hCo=r(bYr,"from_config()"),bYr.forEach(t),pCo=r(CW,`class
method.`),CW.forEach(t),_Co=i(ll),SE=n(ll,"P",{});var gPe=s(SE);uCo=r(gPe,"This class cannot be instantiated directly using "),oae=n(gPe,"CODE",{});var vYr=s(oae);bCo=r(vYr,"__init__()"),vYr.forEach(t),vCo=r(gPe," (throws an error)."),gPe.forEach(t),TCo=i(ll),Yr=n(ll,"DIV",{class:!0});var il=s(Yr);m(PE.$$.fragment,il),FCo=i(il),rae=n(il,"P",{});var TYr=s(rae);CCo=r(TYr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),TYr.forEach(t),MCo=i(il),Fd=n(il,"P",{});var MW=s(Fd);ECo=r(MW,`Note:
Loading a model from its configuration file does `),tae=n(MW,"STRONG",{});var FYr=s(tae);yCo=r(FYr,"not"),FYr.forEach(t),wCo=r(MW,` load the model weights. It only affects the
model\u2019s configuration. Use `),aae=n(MW,"CODE",{});var CYr=s(aae);ACo=r(CYr,"from_pretrained()"),CYr.forEach(t),LCo=r(MW,"to load the model weights."),MW.forEach(t),BCo=i(il),nae=n(il,"P",{});var MYr=s(nae);xCo=r(MYr,"Examples:"),MYr.forEach(t),kCo=i(il),m($E.$$.fragment,il),il.forEach(t),RCo=i(ll),Xe=n(ll,"DIV",{class:!0});var Ht=s(Xe);m(IE.$$.fragment,Ht),SCo=i(Ht),sae=n(Ht,"P",{});var EYr=s(sae);PCo=r(EYr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),EYr.forEach(t),$Co=i(Ht),Za=n(Ht,"P",{});var EM=s(Za);ICo=r(EM,"The model class to instantiate is selected based on the "),lae=n(EM,"CODE",{});var yYr=s(lae);jCo=r(yYr,"model_type"),yYr.forEach(t),NCo=r(EM,` property of the config object (either
passed as an argument or loaded from `),iae=n(EM,"CODE",{});var wYr=s(iae);DCo=r(wYr,"pretrained_model_name_or_path"),wYr.forEach(t),qCo=r(EM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dae=n(EM,"CODE",{});var AYr=s(dae);GCo=r(AYr,"pretrained_model_name_or_path"),AYr.forEach(t),OCo=r(EM,":"),EM.forEach(t),XCo=i(Ht),A=n(Ht,"UL",{});var L=s(A);lb=n(L,"LI",{});var m3e=s(lb);cae=n(m3e,"STRONG",{});var LYr=s(cae);VCo=r(LYr,"albert"),LYr.forEach(t),zCo=r(m3e," \u2014 "),ej=n(m3e,"A",{href:!0});var BYr=s(ej);WCo=r(BYr,"AlbertForSequenceClassification"),BYr.forEach(t),QCo=r(m3e," (ALBERT model)"),m3e.forEach(t),HCo=i(L),ib=n(L,"LI",{});var g3e=s(ib);fae=n(g3e,"STRONG",{});var xYr=s(fae);UCo=r(xYr,"bart"),xYr.forEach(t),JCo=r(g3e," \u2014 "),oj=n(g3e,"A",{href:!0});var kYr=s(oj);YCo=r(kYr,"BartForSequenceClassification"),kYr.forEach(t),KCo=r(g3e," (BART model)"),g3e.forEach(t),ZCo=i(L),db=n(L,"LI",{});var h3e=s(db);mae=n(h3e,"STRONG",{});var RYr=s(mae);eMo=r(RYr,"bert"),RYr.forEach(t),oMo=r(h3e," \u2014 "),rj=n(h3e,"A",{href:!0});var SYr=s(rj);rMo=r(SYr,"BertForSequenceClassification"),SYr.forEach(t),tMo=r(h3e," (BERT model)"),h3e.forEach(t),aMo=i(L),cb=n(L,"LI",{});var p3e=s(cb);gae=n(p3e,"STRONG",{});var PYr=s(gae);nMo=r(PYr,"big_bird"),PYr.forEach(t),sMo=r(p3e," \u2014 "),tj=n(p3e,"A",{href:!0});var $Yr=s(tj);lMo=r($Yr,"BigBirdForSequenceClassification"),$Yr.forEach(t),iMo=r(p3e," (BigBird model)"),p3e.forEach(t),dMo=i(L),fb=n(L,"LI",{});var _3e=s(fb);hae=n(_3e,"STRONG",{});var IYr=s(hae);cMo=r(IYr,"bigbird_pegasus"),IYr.forEach(t),fMo=r(_3e," \u2014 "),aj=n(_3e,"A",{href:!0});var jYr=s(aj);mMo=r(jYr,"BigBirdPegasusForSequenceClassification"),jYr.forEach(t),gMo=r(_3e," (BigBirdPegasus model)"),_3e.forEach(t),hMo=i(L),mb=n(L,"LI",{});var u3e=s(mb);pae=n(u3e,"STRONG",{});var NYr=s(pae);pMo=r(NYr,"camembert"),NYr.forEach(t),_Mo=r(u3e," \u2014 "),nj=n(u3e,"A",{href:!0});var DYr=s(nj);uMo=r(DYr,"CamembertForSequenceClassification"),DYr.forEach(t),bMo=r(u3e," (CamemBERT model)"),u3e.forEach(t),vMo=i(L),gb=n(L,"LI",{});var b3e=s(gb);_ae=n(b3e,"STRONG",{});var qYr=s(_ae);TMo=r(qYr,"canine"),qYr.forEach(t),FMo=r(b3e," \u2014 "),sj=n(b3e,"A",{href:!0});var GYr=s(sj);CMo=r(GYr,"CanineForSequenceClassification"),GYr.forEach(t),MMo=r(b3e," (Canine model)"),b3e.forEach(t),EMo=i(L),hb=n(L,"LI",{});var v3e=s(hb);uae=n(v3e,"STRONG",{});var OYr=s(uae);yMo=r(OYr,"convbert"),OYr.forEach(t),wMo=r(v3e," \u2014 "),lj=n(v3e,"A",{href:!0});var XYr=s(lj);AMo=r(XYr,"ConvBertForSequenceClassification"),XYr.forEach(t),LMo=r(v3e," (ConvBERT model)"),v3e.forEach(t),BMo=i(L),pb=n(L,"LI",{});var T3e=s(pb);bae=n(T3e,"STRONG",{});var VYr=s(bae);xMo=r(VYr,"ctrl"),VYr.forEach(t),kMo=r(T3e," \u2014 "),ij=n(T3e,"A",{href:!0});var zYr=s(ij);RMo=r(zYr,"CTRLForSequenceClassification"),zYr.forEach(t),SMo=r(T3e," (CTRL model)"),T3e.forEach(t),PMo=i(L),_b=n(L,"LI",{});var F3e=s(_b);vae=n(F3e,"STRONG",{});var WYr=s(vae);$Mo=r(WYr,"data2vec-text"),WYr.forEach(t),IMo=r(F3e," \u2014 "),dj=n(F3e,"A",{href:!0});var QYr=s(dj);jMo=r(QYr,"Data2VecTextForSequenceClassification"),QYr.forEach(t),NMo=r(F3e," (Data2VecText model)"),F3e.forEach(t),DMo=i(L),ub=n(L,"LI",{});var C3e=s(ub);Tae=n(C3e,"STRONG",{});var HYr=s(Tae);qMo=r(HYr,"deberta"),HYr.forEach(t),GMo=r(C3e," \u2014 "),cj=n(C3e,"A",{href:!0});var UYr=s(cj);OMo=r(UYr,"DebertaForSequenceClassification"),UYr.forEach(t),XMo=r(C3e," (DeBERTa model)"),C3e.forEach(t),VMo=i(L),bb=n(L,"LI",{});var M3e=s(bb);Fae=n(M3e,"STRONG",{});var JYr=s(Fae);zMo=r(JYr,"deberta-v2"),JYr.forEach(t),WMo=r(M3e," \u2014 "),fj=n(M3e,"A",{href:!0});var YYr=s(fj);QMo=r(YYr,"DebertaV2ForSequenceClassification"),YYr.forEach(t),HMo=r(M3e," (DeBERTa-v2 model)"),M3e.forEach(t),UMo=i(L),vb=n(L,"LI",{});var E3e=s(vb);Cae=n(E3e,"STRONG",{});var KYr=s(Cae);JMo=r(KYr,"distilbert"),KYr.forEach(t),YMo=r(E3e," \u2014 "),mj=n(E3e,"A",{href:!0});var ZYr=s(mj);KMo=r(ZYr,"DistilBertForSequenceClassification"),ZYr.forEach(t),ZMo=r(E3e," (DistilBERT model)"),E3e.forEach(t),e4o=i(L),Tb=n(L,"LI",{});var y3e=s(Tb);Mae=n(y3e,"STRONG",{});var eKr=s(Mae);o4o=r(eKr,"electra"),eKr.forEach(t),r4o=r(y3e," \u2014 "),gj=n(y3e,"A",{href:!0});var oKr=s(gj);t4o=r(oKr,"ElectraForSequenceClassification"),oKr.forEach(t),a4o=r(y3e," (ELECTRA model)"),y3e.forEach(t),n4o=i(L),Fb=n(L,"LI",{});var w3e=s(Fb);Eae=n(w3e,"STRONG",{});var rKr=s(Eae);s4o=r(rKr,"flaubert"),rKr.forEach(t),l4o=r(w3e," \u2014 "),hj=n(w3e,"A",{href:!0});var tKr=s(hj);i4o=r(tKr,"FlaubertForSequenceClassification"),tKr.forEach(t),d4o=r(w3e," (FlauBERT model)"),w3e.forEach(t),c4o=i(L),Cb=n(L,"LI",{});var A3e=s(Cb);yae=n(A3e,"STRONG",{});var aKr=s(yae);f4o=r(aKr,"fnet"),aKr.forEach(t),m4o=r(A3e," \u2014 "),pj=n(A3e,"A",{href:!0});var nKr=s(pj);g4o=r(nKr,"FNetForSequenceClassification"),nKr.forEach(t),h4o=r(A3e," (FNet model)"),A3e.forEach(t),p4o=i(L),Mb=n(L,"LI",{});var L3e=s(Mb);wae=n(L3e,"STRONG",{});var sKr=s(wae);_4o=r(sKr,"funnel"),sKr.forEach(t),u4o=r(L3e," \u2014 "),_j=n(L3e,"A",{href:!0});var lKr=s(_j);b4o=r(lKr,"FunnelForSequenceClassification"),lKr.forEach(t),v4o=r(L3e," (Funnel Transformer model)"),L3e.forEach(t),T4o=i(L),Eb=n(L,"LI",{});var B3e=s(Eb);Aae=n(B3e,"STRONG",{});var iKr=s(Aae);F4o=r(iKr,"gpt2"),iKr.forEach(t),C4o=r(B3e," \u2014 "),uj=n(B3e,"A",{href:!0});var dKr=s(uj);M4o=r(dKr,"GPT2ForSequenceClassification"),dKr.forEach(t),E4o=r(B3e," (OpenAI GPT-2 model)"),B3e.forEach(t),y4o=i(L),yb=n(L,"LI",{});var x3e=s(yb);Lae=n(x3e,"STRONG",{});var cKr=s(Lae);w4o=r(cKr,"gpt_neo"),cKr.forEach(t),A4o=r(x3e," \u2014 "),bj=n(x3e,"A",{href:!0});var fKr=s(bj);L4o=r(fKr,"GPTNeoForSequenceClassification"),fKr.forEach(t),B4o=r(x3e," (GPT Neo model)"),x3e.forEach(t),x4o=i(L),wb=n(L,"LI",{});var k3e=s(wb);Bae=n(k3e,"STRONG",{});var mKr=s(Bae);k4o=r(mKr,"gptj"),mKr.forEach(t),R4o=r(k3e," \u2014 "),vj=n(k3e,"A",{href:!0});var gKr=s(vj);S4o=r(gKr,"GPTJForSequenceClassification"),gKr.forEach(t),P4o=r(k3e," (GPT-J model)"),k3e.forEach(t),$4o=i(L),Ab=n(L,"LI",{});var R3e=s(Ab);xae=n(R3e,"STRONG",{});var hKr=s(xae);I4o=r(hKr,"ibert"),hKr.forEach(t),j4o=r(R3e," \u2014 "),Tj=n(R3e,"A",{href:!0});var pKr=s(Tj);N4o=r(pKr,"IBertForSequenceClassification"),pKr.forEach(t),D4o=r(R3e," (I-BERT model)"),R3e.forEach(t),q4o=i(L),Lb=n(L,"LI",{});var S3e=s(Lb);kae=n(S3e,"STRONG",{});var _Kr=s(kae);G4o=r(_Kr,"layoutlm"),_Kr.forEach(t),O4o=r(S3e," \u2014 "),Fj=n(S3e,"A",{href:!0});var uKr=s(Fj);X4o=r(uKr,"LayoutLMForSequenceClassification"),uKr.forEach(t),V4o=r(S3e," (LayoutLM model)"),S3e.forEach(t),z4o=i(L),Bb=n(L,"LI",{});var P3e=s(Bb);Rae=n(P3e,"STRONG",{});var bKr=s(Rae);W4o=r(bKr,"layoutlmv2"),bKr.forEach(t),Q4o=r(P3e," \u2014 "),Cj=n(P3e,"A",{href:!0});var vKr=s(Cj);H4o=r(vKr,"LayoutLMv2ForSequenceClassification"),vKr.forEach(t),U4o=r(P3e," (LayoutLMv2 model)"),P3e.forEach(t),J4o=i(L),xb=n(L,"LI",{});var $3e=s(xb);Sae=n($3e,"STRONG",{});var TKr=s(Sae);Y4o=r(TKr,"led"),TKr.forEach(t),K4o=r($3e," \u2014 "),Mj=n($3e,"A",{href:!0});var FKr=s(Mj);Z4o=r(FKr,"LEDForSequenceClassification"),FKr.forEach(t),eEo=r($3e," (LED model)"),$3e.forEach(t),oEo=i(L),kb=n(L,"LI",{});var I3e=s(kb);Pae=n(I3e,"STRONG",{});var CKr=s(Pae);rEo=r(CKr,"longformer"),CKr.forEach(t),tEo=r(I3e," \u2014 "),Ej=n(I3e,"A",{href:!0});var MKr=s(Ej);aEo=r(MKr,"LongformerForSequenceClassification"),MKr.forEach(t),nEo=r(I3e," (Longformer model)"),I3e.forEach(t),sEo=i(L),Rb=n(L,"LI",{});var j3e=s(Rb);$ae=n(j3e,"STRONG",{});var EKr=s($ae);lEo=r(EKr,"mbart"),EKr.forEach(t),iEo=r(j3e," \u2014 "),yj=n(j3e,"A",{href:!0});var yKr=s(yj);dEo=r(yKr,"MBartForSequenceClassification"),yKr.forEach(t),cEo=r(j3e," (mBART model)"),j3e.forEach(t),fEo=i(L),Sb=n(L,"LI",{});var N3e=s(Sb);Iae=n(N3e,"STRONG",{});var wKr=s(Iae);mEo=r(wKr,"megatron-bert"),wKr.forEach(t),gEo=r(N3e," \u2014 "),wj=n(N3e,"A",{href:!0});var AKr=s(wj);hEo=r(AKr,"MegatronBertForSequenceClassification"),AKr.forEach(t),pEo=r(N3e," (MegatronBert model)"),N3e.forEach(t),_Eo=i(L),Pb=n(L,"LI",{});var D3e=s(Pb);jae=n(D3e,"STRONG",{});var LKr=s(jae);uEo=r(LKr,"mobilebert"),LKr.forEach(t),bEo=r(D3e," \u2014 "),Aj=n(D3e,"A",{href:!0});var BKr=s(Aj);vEo=r(BKr,"MobileBertForSequenceClassification"),BKr.forEach(t),TEo=r(D3e," (MobileBERT model)"),D3e.forEach(t),FEo=i(L),$b=n(L,"LI",{});var q3e=s($b);Nae=n(q3e,"STRONG",{});var xKr=s(Nae);CEo=r(xKr,"mpnet"),xKr.forEach(t),MEo=r(q3e," \u2014 "),Lj=n(q3e,"A",{href:!0});var kKr=s(Lj);EEo=r(kKr,"MPNetForSequenceClassification"),kKr.forEach(t),yEo=r(q3e," (MPNet model)"),q3e.forEach(t),wEo=i(L),Ib=n(L,"LI",{});var G3e=s(Ib);Dae=n(G3e,"STRONG",{});var RKr=s(Dae);AEo=r(RKr,"nystromformer"),RKr.forEach(t),LEo=r(G3e," \u2014 "),Bj=n(G3e,"A",{href:!0});var SKr=s(Bj);BEo=r(SKr,"NystromformerForSequenceClassification"),SKr.forEach(t),xEo=r(G3e," (Nystromformer model)"),G3e.forEach(t),kEo=i(L),jb=n(L,"LI",{});var O3e=s(jb);qae=n(O3e,"STRONG",{});var PKr=s(qae);REo=r(PKr,"openai-gpt"),PKr.forEach(t),SEo=r(O3e," \u2014 "),xj=n(O3e,"A",{href:!0});var $Kr=s(xj);PEo=r($Kr,"OpenAIGPTForSequenceClassification"),$Kr.forEach(t),$Eo=r(O3e," (OpenAI GPT model)"),O3e.forEach(t),IEo=i(L),Nb=n(L,"LI",{});var X3e=s(Nb);Gae=n(X3e,"STRONG",{});var IKr=s(Gae);jEo=r(IKr,"perceiver"),IKr.forEach(t),NEo=r(X3e," \u2014 "),kj=n(X3e,"A",{href:!0});var jKr=s(kj);DEo=r(jKr,"PerceiverForSequenceClassification"),jKr.forEach(t),qEo=r(X3e," (Perceiver model)"),X3e.forEach(t),GEo=i(L),Db=n(L,"LI",{});var V3e=s(Db);Oae=n(V3e,"STRONG",{});var NKr=s(Oae);OEo=r(NKr,"plbart"),NKr.forEach(t),XEo=r(V3e," \u2014 "),Rj=n(V3e,"A",{href:!0});var DKr=s(Rj);VEo=r(DKr,"PLBartForSequenceClassification"),DKr.forEach(t),zEo=r(V3e," (PLBart model)"),V3e.forEach(t),WEo=i(L),qb=n(L,"LI",{});var z3e=s(qb);Xae=n(z3e,"STRONG",{});var qKr=s(Xae);QEo=r(qKr,"qdqbert"),qKr.forEach(t),HEo=r(z3e," \u2014 "),Sj=n(z3e,"A",{href:!0});var GKr=s(Sj);UEo=r(GKr,"QDQBertForSequenceClassification"),GKr.forEach(t),JEo=r(z3e," (QDQBert model)"),z3e.forEach(t),YEo=i(L),Gb=n(L,"LI",{});var W3e=s(Gb);Vae=n(W3e,"STRONG",{});var OKr=s(Vae);KEo=r(OKr,"reformer"),OKr.forEach(t),ZEo=r(W3e," \u2014 "),Pj=n(W3e,"A",{href:!0});var XKr=s(Pj);e3o=r(XKr,"ReformerForSequenceClassification"),XKr.forEach(t),o3o=r(W3e," (Reformer model)"),W3e.forEach(t),r3o=i(L),Ob=n(L,"LI",{});var Q3e=s(Ob);zae=n(Q3e,"STRONG",{});var VKr=s(zae);t3o=r(VKr,"rembert"),VKr.forEach(t),a3o=r(Q3e," \u2014 "),$j=n(Q3e,"A",{href:!0});var zKr=s($j);n3o=r(zKr,"RemBertForSequenceClassification"),zKr.forEach(t),s3o=r(Q3e," (RemBERT model)"),Q3e.forEach(t),l3o=i(L),Xb=n(L,"LI",{});var H3e=s(Xb);Wae=n(H3e,"STRONG",{});var WKr=s(Wae);i3o=r(WKr,"roberta"),WKr.forEach(t),d3o=r(H3e," \u2014 "),Ij=n(H3e,"A",{href:!0});var QKr=s(Ij);c3o=r(QKr,"RobertaForSequenceClassification"),QKr.forEach(t),f3o=r(H3e," (RoBERTa model)"),H3e.forEach(t),m3o=i(L),Vb=n(L,"LI",{});var U3e=s(Vb);Qae=n(U3e,"STRONG",{});var HKr=s(Qae);g3o=r(HKr,"roformer"),HKr.forEach(t),h3o=r(U3e," \u2014 "),jj=n(U3e,"A",{href:!0});var UKr=s(jj);p3o=r(UKr,"RoFormerForSequenceClassification"),UKr.forEach(t),_3o=r(U3e," (RoFormer model)"),U3e.forEach(t),u3o=i(L),zb=n(L,"LI",{});var J3e=s(zb);Hae=n(J3e,"STRONG",{});var JKr=s(Hae);b3o=r(JKr,"squeezebert"),JKr.forEach(t),v3o=r(J3e," \u2014 "),Nj=n(J3e,"A",{href:!0});var YKr=s(Nj);T3o=r(YKr,"SqueezeBertForSequenceClassification"),YKr.forEach(t),F3o=r(J3e," (SqueezeBERT model)"),J3e.forEach(t),C3o=i(L),Wb=n(L,"LI",{});var Y3e=s(Wb);Uae=n(Y3e,"STRONG",{});var KKr=s(Uae);M3o=r(KKr,"tapas"),KKr.forEach(t),E3o=r(Y3e," \u2014 "),Dj=n(Y3e,"A",{href:!0});var ZKr=s(Dj);y3o=r(ZKr,"TapasForSequenceClassification"),ZKr.forEach(t),w3o=r(Y3e," (TAPAS model)"),Y3e.forEach(t),A3o=i(L),Qb=n(L,"LI",{});var K3e=s(Qb);Jae=n(K3e,"STRONG",{});var eZr=s(Jae);L3o=r(eZr,"transfo-xl"),eZr.forEach(t),B3o=r(K3e," \u2014 "),qj=n(K3e,"A",{href:!0});var oZr=s(qj);x3o=r(oZr,"TransfoXLForSequenceClassification"),oZr.forEach(t),k3o=r(K3e," (Transformer-XL model)"),K3e.forEach(t),R3o=i(L),Hb=n(L,"LI",{});var Z3e=s(Hb);Yae=n(Z3e,"STRONG",{});var rZr=s(Yae);S3o=r(rZr,"xlm"),rZr.forEach(t),P3o=r(Z3e," \u2014 "),Gj=n(Z3e,"A",{href:!0});var tZr=s(Gj);$3o=r(tZr,"XLMForSequenceClassification"),tZr.forEach(t),I3o=r(Z3e," (XLM model)"),Z3e.forEach(t),j3o=i(L),Ub=n(L,"LI",{});var eye=s(Ub);Kae=n(eye,"STRONG",{});var aZr=s(Kae);N3o=r(aZr,"xlm-roberta"),aZr.forEach(t),D3o=r(eye," \u2014 "),Oj=n(eye,"A",{href:!0});var nZr=s(Oj);q3o=r(nZr,"XLMRobertaForSequenceClassification"),nZr.forEach(t),G3o=r(eye," (XLM-RoBERTa model)"),eye.forEach(t),O3o=i(L),Jb=n(L,"LI",{});var oye=s(Jb);Zae=n(oye,"STRONG",{});var sZr=s(Zae);X3o=r(sZr,"xlm-roberta-xl"),sZr.forEach(t),V3o=r(oye," \u2014 "),Xj=n(oye,"A",{href:!0});var lZr=s(Xj);z3o=r(lZr,"XLMRobertaXLForSequenceClassification"),lZr.forEach(t),W3o=r(oye," (XLM-RoBERTa-XL model)"),oye.forEach(t),Q3o=i(L),Yb=n(L,"LI",{});var rye=s(Yb);ene=n(rye,"STRONG",{});var iZr=s(ene);H3o=r(iZr,"xlnet"),iZr.forEach(t),U3o=r(rye," \u2014 "),Vj=n(rye,"A",{href:!0});var dZr=s(Vj);J3o=r(dZr,"XLNetForSequenceClassification"),dZr.forEach(t),Y3o=r(rye," (XLNet model)"),rye.forEach(t),K3o=i(L),Kb=n(L,"LI",{});var tye=s(Kb);one=n(tye,"STRONG",{});var cZr=s(one);Z3o=r(cZr,"yoso"),cZr.forEach(t),eyo=r(tye," \u2014 "),zj=n(tye,"A",{href:!0});var fZr=s(zj);oyo=r(fZr,"YosoForSequenceClassification"),fZr.forEach(t),ryo=r(tye," (YOSO model)"),tye.forEach(t),L.forEach(t),tyo=i(Ht),Zb=n(Ht,"P",{});var aye=s(Zb);ayo=r(aye,"The model is set in evaluation mode by default using "),rne=n(aye,"CODE",{});var mZr=s(rne);nyo=r(mZr,"model.eval()"),mZr.forEach(t),syo=r(aye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tne=n(aye,"CODE",{});var gZr=s(tne);lyo=r(gZr,"model.train()"),gZr.forEach(t),aye.forEach(t),iyo=i(Ht),ane=n(Ht,"P",{});var hZr=s(ane);dyo=r(hZr,"Examples:"),hZr.forEach(t),cyo=i(Ht),m(jE.$$.fragment,Ht),Ht.forEach(t),ll.forEach(t),tRe=i(d),Cd=n(d,"H2",{class:!0});var hPe=s(Cd);e5=n(hPe,"A",{id:!0,class:!0,href:!0});var pZr=s(e5);nne=n(pZr,"SPAN",{});var _Zr=s(nne);m(NE.$$.fragment,_Zr),_Zr.forEach(t),pZr.forEach(t),fyo=i(hPe),sne=n(hPe,"SPAN",{});var uZr=s(sne);myo=r(uZr,"AutoModelForMultipleChoice"),uZr.forEach(t),hPe.forEach(t),aRe=i(d),tr=n(d,"DIV",{class:!0});var dl=s(tr);m(DE.$$.fragment,dl),gyo=i(dl),Md=n(dl,"P",{});var EW=s(Md);hyo=r(EW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),lne=n(EW,"CODE",{});var bZr=s(lne);pyo=r(bZr,"from_pretrained()"),bZr.forEach(t),_yo=r(EW,"class method or the "),ine=n(EW,"CODE",{});var vZr=s(ine);uyo=r(vZr,"from_config()"),vZr.forEach(t),byo=r(EW,`class
method.`),EW.forEach(t),vyo=i(dl),qE=n(dl,"P",{});var pPe=s(qE);Tyo=r(pPe,"This class cannot be instantiated directly using "),dne=n(pPe,"CODE",{});var TZr=s(dne);Fyo=r(TZr,"__init__()"),TZr.forEach(t),Cyo=r(pPe," (throws an error)."),pPe.forEach(t),Myo=i(dl),Kr=n(dl,"DIV",{class:!0});var cl=s(Kr);m(GE.$$.fragment,cl),Eyo=i(cl),cne=n(cl,"P",{});var FZr=s(cne);yyo=r(FZr,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),FZr.forEach(t),wyo=i(cl),Ed=n(cl,"P",{});var yW=s(Ed);Ayo=r(yW,`Note:
Loading a model from its configuration file does `),fne=n(yW,"STRONG",{});var CZr=s(fne);Lyo=r(CZr,"not"),CZr.forEach(t),Byo=r(yW,` load the model weights. It only affects the
model\u2019s configuration. Use `),mne=n(yW,"CODE",{});var MZr=s(mne);xyo=r(MZr,"from_pretrained()"),MZr.forEach(t),kyo=r(yW,"to load the model weights."),yW.forEach(t),Ryo=i(cl),gne=n(cl,"P",{});var EZr=s(gne);Syo=r(EZr,"Examples:"),EZr.forEach(t),Pyo=i(cl),m(OE.$$.fragment,cl),cl.forEach(t),$yo=i(dl),Ve=n(dl,"DIV",{class:!0});var Ut=s(Ve);m(XE.$$.fragment,Ut),Iyo=i(Ut),hne=n(Ut,"P",{});var yZr=s(hne);jyo=r(yZr,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),yZr.forEach(t),Nyo=i(Ut),en=n(Ut,"P",{});var yM=s(en);Dyo=r(yM,"The model class to instantiate is selected based on the "),pne=n(yM,"CODE",{});var wZr=s(pne);qyo=r(wZr,"model_type"),wZr.forEach(t),Gyo=r(yM,` property of the config object (either
passed as an argument or loaded from `),_ne=n(yM,"CODE",{});var AZr=s(_ne);Oyo=r(AZr,"pretrained_model_name_or_path"),AZr.forEach(t),Xyo=r(yM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),une=n(yM,"CODE",{});var LZr=s(une);Vyo=r(LZr,"pretrained_model_name_or_path"),LZr.forEach(t),zyo=r(yM,":"),yM.forEach(t),Wyo=i(Ut),G=n(Ut,"UL",{});var O=s(G);o5=n(O,"LI",{});var nye=s(o5);bne=n(nye,"STRONG",{});var BZr=s(bne);Qyo=r(BZr,"albert"),BZr.forEach(t),Hyo=r(nye," \u2014 "),Wj=n(nye,"A",{href:!0});var xZr=s(Wj);Uyo=r(xZr,"AlbertForMultipleChoice"),xZr.forEach(t),Jyo=r(nye," (ALBERT model)"),nye.forEach(t),Yyo=i(O),r5=n(O,"LI",{});var sye=s(r5);vne=n(sye,"STRONG",{});var kZr=s(vne);Kyo=r(kZr,"bert"),kZr.forEach(t),Zyo=r(sye," \u2014 "),Qj=n(sye,"A",{href:!0});var RZr=s(Qj);ewo=r(RZr,"BertForMultipleChoice"),RZr.forEach(t),owo=r(sye," (BERT model)"),sye.forEach(t),rwo=i(O),t5=n(O,"LI",{});var lye=s(t5);Tne=n(lye,"STRONG",{});var SZr=s(Tne);two=r(SZr,"big_bird"),SZr.forEach(t),awo=r(lye," \u2014 "),Hj=n(lye,"A",{href:!0});var PZr=s(Hj);nwo=r(PZr,"BigBirdForMultipleChoice"),PZr.forEach(t),swo=r(lye," (BigBird model)"),lye.forEach(t),lwo=i(O),a5=n(O,"LI",{});var iye=s(a5);Fne=n(iye,"STRONG",{});var $Zr=s(Fne);iwo=r($Zr,"camembert"),$Zr.forEach(t),dwo=r(iye," \u2014 "),Uj=n(iye,"A",{href:!0});var IZr=s(Uj);cwo=r(IZr,"CamembertForMultipleChoice"),IZr.forEach(t),fwo=r(iye," (CamemBERT model)"),iye.forEach(t),mwo=i(O),n5=n(O,"LI",{});var dye=s(n5);Cne=n(dye,"STRONG",{});var jZr=s(Cne);gwo=r(jZr,"canine"),jZr.forEach(t),hwo=r(dye," \u2014 "),Jj=n(dye,"A",{href:!0});var NZr=s(Jj);pwo=r(NZr,"CanineForMultipleChoice"),NZr.forEach(t),_wo=r(dye," (Canine model)"),dye.forEach(t),uwo=i(O),s5=n(O,"LI",{});var cye=s(s5);Mne=n(cye,"STRONG",{});var DZr=s(Mne);bwo=r(DZr,"convbert"),DZr.forEach(t),vwo=r(cye," \u2014 "),Yj=n(cye,"A",{href:!0});var qZr=s(Yj);Two=r(qZr,"ConvBertForMultipleChoice"),qZr.forEach(t),Fwo=r(cye," (ConvBERT model)"),cye.forEach(t),Cwo=i(O),l5=n(O,"LI",{});var fye=s(l5);Ene=n(fye,"STRONG",{});var GZr=s(Ene);Mwo=r(GZr,"data2vec-text"),GZr.forEach(t),Ewo=r(fye," \u2014 "),Kj=n(fye,"A",{href:!0});var OZr=s(Kj);ywo=r(OZr,"Data2VecTextForMultipleChoice"),OZr.forEach(t),wwo=r(fye," (Data2VecText model)"),fye.forEach(t),Awo=i(O),i5=n(O,"LI",{});var mye=s(i5);yne=n(mye,"STRONG",{});var XZr=s(yne);Lwo=r(XZr,"distilbert"),XZr.forEach(t),Bwo=r(mye," \u2014 "),Zj=n(mye,"A",{href:!0});var VZr=s(Zj);xwo=r(VZr,"DistilBertForMultipleChoice"),VZr.forEach(t),kwo=r(mye," (DistilBERT model)"),mye.forEach(t),Rwo=i(O),d5=n(O,"LI",{});var gye=s(d5);wne=n(gye,"STRONG",{});var zZr=s(wne);Swo=r(zZr,"electra"),zZr.forEach(t),Pwo=r(gye," \u2014 "),eN=n(gye,"A",{href:!0});var WZr=s(eN);$wo=r(WZr,"ElectraForMultipleChoice"),WZr.forEach(t),Iwo=r(gye," (ELECTRA model)"),gye.forEach(t),jwo=i(O),c5=n(O,"LI",{});var hye=s(c5);Ane=n(hye,"STRONG",{});var QZr=s(Ane);Nwo=r(QZr,"flaubert"),QZr.forEach(t),Dwo=r(hye," \u2014 "),oN=n(hye,"A",{href:!0});var HZr=s(oN);qwo=r(HZr,"FlaubertForMultipleChoice"),HZr.forEach(t),Gwo=r(hye," (FlauBERT model)"),hye.forEach(t),Owo=i(O),f5=n(O,"LI",{});var pye=s(f5);Lne=n(pye,"STRONG",{});var UZr=s(Lne);Xwo=r(UZr,"fnet"),UZr.forEach(t),Vwo=r(pye," \u2014 "),rN=n(pye,"A",{href:!0});var JZr=s(rN);zwo=r(JZr,"FNetForMultipleChoice"),JZr.forEach(t),Wwo=r(pye," (FNet model)"),pye.forEach(t),Qwo=i(O),m5=n(O,"LI",{});var _ye=s(m5);Bne=n(_ye,"STRONG",{});var YZr=s(Bne);Hwo=r(YZr,"funnel"),YZr.forEach(t),Uwo=r(_ye," \u2014 "),tN=n(_ye,"A",{href:!0});var KZr=s(tN);Jwo=r(KZr,"FunnelForMultipleChoice"),KZr.forEach(t),Ywo=r(_ye," (Funnel Transformer model)"),_ye.forEach(t),Kwo=i(O),g5=n(O,"LI",{});var uye=s(g5);xne=n(uye,"STRONG",{});var ZZr=s(xne);Zwo=r(ZZr,"ibert"),ZZr.forEach(t),eAo=r(uye," \u2014 "),aN=n(uye,"A",{href:!0});var eet=s(aN);oAo=r(eet,"IBertForMultipleChoice"),eet.forEach(t),rAo=r(uye," (I-BERT model)"),uye.forEach(t),tAo=i(O),h5=n(O,"LI",{});var bye=s(h5);kne=n(bye,"STRONG",{});var oet=s(kne);aAo=r(oet,"longformer"),oet.forEach(t),nAo=r(bye," \u2014 "),nN=n(bye,"A",{href:!0});var ret=s(nN);sAo=r(ret,"LongformerForMultipleChoice"),ret.forEach(t),lAo=r(bye," (Longformer model)"),bye.forEach(t),iAo=i(O),p5=n(O,"LI",{});var vye=s(p5);Rne=n(vye,"STRONG",{});var tet=s(Rne);dAo=r(tet,"megatron-bert"),tet.forEach(t),cAo=r(vye," \u2014 "),sN=n(vye,"A",{href:!0});var aet=s(sN);fAo=r(aet,"MegatronBertForMultipleChoice"),aet.forEach(t),mAo=r(vye," (MegatronBert model)"),vye.forEach(t),gAo=i(O),_5=n(O,"LI",{});var Tye=s(_5);Sne=n(Tye,"STRONG",{});var net=s(Sne);hAo=r(net,"mobilebert"),net.forEach(t),pAo=r(Tye," \u2014 "),lN=n(Tye,"A",{href:!0});var set=s(lN);_Ao=r(set,"MobileBertForMultipleChoice"),set.forEach(t),uAo=r(Tye," (MobileBERT model)"),Tye.forEach(t),bAo=i(O),u5=n(O,"LI",{});var Fye=s(u5);Pne=n(Fye,"STRONG",{});var iet=s(Pne);vAo=r(iet,"mpnet"),iet.forEach(t),TAo=r(Fye," \u2014 "),iN=n(Fye,"A",{href:!0});var det=s(iN);FAo=r(det,"MPNetForMultipleChoice"),det.forEach(t),CAo=r(Fye," (MPNet model)"),Fye.forEach(t),MAo=i(O),b5=n(O,"LI",{});var Cye=s(b5);$ne=n(Cye,"STRONG",{});var cet=s($ne);EAo=r(cet,"nystromformer"),cet.forEach(t),yAo=r(Cye," \u2014 "),dN=n(Cye,"A",{href:!0});var fet=s(dN);wAo=r(fet,"NystromformerForMultipleChoice"),fet.forEach(t),AAo=r(Cye," (Nystromformer model)"),Cye.forEach(t),LAo=i(O),v5=n(O,"LI",{});var Mye=s(v5);Ine=n(Mye,"STRONG",{});var met=s(Ine);BAo=r(met,"qdqbert"),met.forEach(t),xAo=r(Mye," \u2014 "),cN=n(Mye,"A",{href:!0});var get=s(cN);kAo=r(get,"QDQBertForMultipleChoice"),get.forEach(t),RAo=r(Mye," (QDQBert model)"),Mye.forEach(t),SAo=i(O),T5=n(O,"LI",{});var Eye=s(T5);jne=n(Eye,"STRONG",{});var het=s(jne);PAo=r(het,"rembert"),het.forEach(t),$Ao=r(Eye," \u2014 "),fN=n(Eye,"A",{href:!0});var pet=s(fN);IAo=r(pet,"RemBertForMultipleChoice"),pet.forEach(t),jAo=r(Eye," (RemBERT model)"),Eye.forEach(t),NAo=i(O),F5=n(O,"LI",{});var yye=s(F5);Nne=n(yye,"STRONG",{});var _et=s(Nne);DAo=r(_et,"roberta"),_et.forEach(t),qAo=r(yye," \u2014 "),mN=n(yye,"A",{href:!0});var uet=s(mN);GAo=r(uet,"RobertaForMultipleChoice"),uet.forEach(t),OAo=r(yye," (RoBERTa model)"),yye.forEach(t),XAo=i(O),C5=n(O,"LI",{});var wye=s(C5);Dne=n(wye,"STRONG",{});var bet=s(Dne);VAo=r(bet,"roformer"),bet.forEach(t),zAo=r(wye," \u2014 "),gN=n(wye,"A",{href:!0});var vet=s(gN);WAo=r(vet,"RoFormerForMultipleChoice"),vet.forEach(t),QAo=r(wye," (RoFormer model)"),wye.forEach(t),HAo=i(O),M5=n(O,"LI",{});var Aye=s(M5);qne=n(Aye,"STRONG",{});var Tet=s(qne);UAo=r(Tet,"squeezebert"),Tet.forEach(t),JAo=r(Aye," \u2014 "),hN=n(Aye,"A",{href:!0});var Fet=s(hN);YAo=r(Fet,"SqueezeBertForMultipleChoice"),Fet.forEach(t),KAo=r(Aye," (SqueezeBERT model)"),Aye.forEach(t),ZAo=i(O),E5=n(O,"LI",{});var Lye=s(E5);Gne=n(Lye,"STRONG",{});var Cet=s(Gne);eLo=r(Cet,"xlm"),Cet.forEach(t),oLo=r(Lye," \u2014 "),pN=n(Lye,"A",{href:!0});var Met=s(pN);rLo=r(Met,"XLMForMultipleChoice"),Met.forEach(t),tLo=r(Lye," (XLM model)"),Lye.forEach(t),aLo=i(O),y5=n(O,"LI",{});var Bye=s(y5);One=n(Bye,"STRONG",{});var Eet=s(One);nLo=r(Eet,"xlm-roberta"),Eet.forEach(t),sLo=r(Bye," \u2014 "),_N=n(Bye,"A",{href:!0});var yet=s(_N);lLo=r(yet,"XLMRobertaForMultipleChoice"),yet.forEach(t),iLo=r(Bye," (XLM-RoBERTa model)"),Bye.forEach(t),dLo=i(O),w5=n(O,"LI",{});var xye=s(w5);Xne=n(xye,"STRONG",{});var wet=s(Xne);cLo=r(wet,"xlm-roberta-xl"),wet.forEach(t),fLo=r(xye," \u2014 "),uN=n(xye,"A",{href:!0});var Aet=s(uN);mLo=r(Aet,"XLMRobertaXLForMultipleChoice"),Aet.forEach(t),gLo=r(xye," (XLM-RoBERTa-XL model)"),xye.forEach(t),hLo=i(O),A5=n(O,"LI",{});var kye=s(A5);Vne=n(kye,"STRONG",{});var Let=s(Vne);pLo=r(Let,"xlnet"),Let.forEach(t),_Lo=r(kye," \u2014 "),bN=n(kye,"A",{href:!0});var Bet=s(bN);uLo=r(Bet,"XLNetForMultipleChoice"),Bet.forEach(t),bLo=r(kye," (XLNet model)"),kye.forEach(t),vLo=i(O),L5=n(O,"LI",{});var Rye=s(L5);zne=n(Rye,"STRONG",{});var xet=s(zne);TLo=r(xet,"yoso"),xet.forEach(t),FLo=r(Rye," \u2014 "),vN=n(Rye,"A",{href:!0});var ket=s(vN);CLo=r(ket,"YosoForMultipleChoice"),ket.forEach(t),MLo=r(Rye," (YOSO model)"),Rye.forEach(t),O.forEach(t),ELo=i(Ut),B5=n(Ut,"P",{});var Sye=s(B5);yLo=r(Sye,"The model is set in evaluation mode by default using "),Wne=n(Sye,"CODE",{});var Ret=s(Wne);wLo=r(Ret,"model.eval()"),Ret.forEach(t),ALo=r(Sye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qne=n(Sye,"CODE",{});var Set=s(Qne);LLo=r(Set,"model.train()"),Set.forEach(t),Sye.forEach(t),BLo=i(Ut),Hne=n(Ut,"P",{});var Pet=s(Hne);xLo=r(Pet,"Examples:"),Pet.forEach(t),kLo=i(Ut),m(VE.$$.fragment,Ut),Ut.forEach(t),dl.forEach(t),nRe=i(d),yd=n(d,"H2",{class:!0});var _Pe=s(yd);x5=n(_Pe,"A",{id:!0,class:!0,href:!0});var $et=s(x5);Une=n($et,"SPAN",{});var Iet=s(Une);m(zE.$$.fragment,Iet),Iet.forEach(t),$et.forEach(t),RLo=i(_Pe),Jne=n(_Pe,"SPAN",{});var jet=s(Jne);SLo=r(jet,"AutoModelForNextSentencePrediction"),jet.forEach(t),_Pe.forEach(t),sRe=i(d),ar=n(d,"DIV",{class:!0});var fl=s(ar);m(WE.$$.fragment,fl),PLo=i(fl),wd=n(fl,"P",{});var wW=s(wd);$Lo=r(wW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Yne=n(wW,"CODE",{});var Net=s(Yne);ILo=r(Net,"from_pretrained()"),Net.forEach(t),jLo=r(wW,"class method or the "),Kne=n(wW,"CODE",{});var Det=s(Kne);NLo=r(Det,"from_config()"),Det.forEach(t),DLo=r(wW,`class
method.`),wW.forEach(t),qLo=i(fl),QE=n(fl,"P",{});var uPe=s(QE);GLo=r(uPe,"This class cannot be instantiated directly using "),Zne=n(uPe,"CODE",{});var qet=s(Zne);OLo=r(qet,"__init__()"),qet.forEach(t),XLo=r(uPe," (throws an error)."),uPe.forEach(t),VLo=i(fl),Zr=n(fl,"DIV",{class:!0});var ml=s(Zr);m(HE.$$.fragment,ml),zLo=i(ml),ese=n(ml,"P",{});var Get=s(ese);WLo=r(Get,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Get.forEach(t),QLo=i(ml),Ad=n(ml,"P",{});var AW=s(Ad);HLo=r(AW,`Note:
Loading a model from its configuration file does `),ose=n(AW,"STRONG",{});var Oet=s(ose);ULo=r(Oet,"not"),Oet.forEach(t),JLo=r(AW,` load the model weights. It only affects the
model\u2019s configuration. Use `),rse=n(AW,"CODE",{});var Xet=s(rse);YLo=r(Xet,"from_pretrained()"),Xet.forEach(t),KLo=r(AW,"to load the model weights."),AW.forEach(t),ZLo=i(ml),tse=n(ml,"P",{});var Vet=s(tse);e7o=r(Vet,"Examples:"),Vet.forEach(t),o7o=i(ml),m(UE.$$.fragment,ml),ml.forEach(t),r7o=i(fl),ze=n(fl,"DIV",{class:!0});var Jt=s(ze);m(JE.$$.fragment,Jt),t7o=i(Jt),ase=n(Jt,"P",{});var zet=s(ase);a7o=r(zet,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),zet.forEach(t),n7o=i(Jt),on=n(Jt,"P",{});var wM=s(on);s7o=r(wM,"The model class to instantiate is selected based on the "),nse=n(wM,"CODE",{});var Wet=s(nse);l7o=r(Wet,"model_type"),Wet.forEach(t),i7o=r(wM,` property of the config object (either
passed as an argument or loaded from `),sse=n(wM,"CODE",{});var Qet=s(sse);d7o=r(Qet,"pretrained_model_name_or_path"),Qet.forEach(t),c7o=r(wM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lse=n(wM,"CODE",{});var Het=s(lse);f7o=r(Het,"pretrained_model_name_or_path"),Het.forEach(t),m7o=r(wM,":"),wM.forEach(t),g7o=i(Jt),ma=n(Jt,"UL",{});var gl=s(ma);k5=n(gl,"LI",{});var Pye=s(k5);ise=n(Pye,"STRONG",{});var Uet=s(ise);h7o=r(Uet,"bert"),Uet.forEach(t),p7o=r(Pye," \u2014 "),TN=n(Pye,"A",{href:!0});var Jet=s(TN);_7o=r(Jet,"BertForNextSentencePrediction"),Jet.forEach(t),u7o=r(Pye," (BERT model)"),Pye.forEach(t),b7o=i(gl),R5=n(gl,"LI",{});var $ye=s(R5);dse=n($ye,"STRONG",{});var Yet=s(dse);v7o=r(Yet,"fnet"),Yet.forEach(t),T7o=r($ye," \u2014 "),FN=n($ye,"A",{href:!0});var Ket=s(FN);F7o=r(Ket,"FNetForNextSentencePrediction"),Ket.forEach(t),C7o=r($ye," (FNet model)"),$ye.forEach(t),M7o=i(gl),S5=n(gl,"LI",{});var Iye=s(S5);cse=n(Iye,"STRONG",{});var Zet=s(cse);E7o=r(Zet,"megatron-bert"),Zet.forEach(t),y7o=r(Iye," \u2014 "),CN=n(Iye,"A",{href:!0});var eot=s(CN);w7o=r(eot,"MegatronBertForNextSentencePrediction"),eot.forEach(t),A7o=r(Iye," (MegatronBert model)"),Iye.forEach(t),L7o=i(gl),P5=n(gl,"LI",{});var jye=s(P5);fse=n(jye,"STRONG",{});var oot=s(fse);B7o=r(oot,"mobilebert"),oot.forEach(t),x7o=r(jye," \u2014 "),MN=n(jye,"A",{href:!0});var rot=s(MN);k7o=r(rot,"MobileBertForNextSentencePrediction"),rot.forEach(t),R7o=r(jye," (MobileBERT model)"),jye.forEach(t),S7o=i(gl),$5=n(gl,"LI",{});var Nye=s($5);mse=n(Nye,"STRONG",{});var tot=s(mse);P7o=r(tot,"qdqbert"),tot.forEach(t),$7o=r(Nye," \u2014 "),EN=n(Nye,"A",{href:!0});var aot=s(EN);I7o=r(aot,"QDQBertForNextSentencePrediction"),aot.forEach(t),j7o=r(Nye," (QDQBert model)"),Nye.forEach(t),gl.forEach(t),N7o=i(Jt),I5=n(Jt,"P",{});var Dye=s(I5);D7o=r(Dye,"The model is set in evaluation mode by default using "),gse=n(Dye,"CODE",{});var not=s(gse);q7o=r(not,"model.eval()"),not.forEach(t),G7o=r(Dye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hse=n(Dye,"CODE",{});var sot=s(hse);O7o=r(sot,"model.train()"),sot.forEach(t),Dye.forEach(t),X7o=i(Jt),pse=n(Jt,"P",{});var lot=s(pse);V7o=r(lot,"Examples:"),lot.forEach(t),z7o=i(Jt),m(YE.$$.fragment,Jt),Jt.forEach(t),fl.forEach(t),lRe=i(d),Ld=n(d,"H2",{class:!0});var bPe=s(Ld);j5=n(bPe,"A",{id:!0,class:!0,href:!0});var iot=s(j5);_se=n(iot,"SPAN",{});var dot=s(_se);m(KE.$$.fragment,dot),dot.forEach(t),iot.forEach(t),W7o=i(bPe),use=n(bPe,"SPAN",{});var cot=s(use);Q7o=r(cot,"AutoModelForTokenClassification"),cot.forEach(t),bPe.forEach(t),iRe=i(d),nr=n(d,"DIV",{class:!0});var hl=s(nr);m(ZE.$$.fragment,hl),H7o=i(hl),Bd=n(hl,"P",{});var LW=s(Bd);U7o=r(LW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),bse=n(LW,"CODE",{});var fot=s(bse);J7o=r(fot,"from_pretrained()"),fot.forEach(t),Y7o=r(LW,"class method or the "),vse=n(LW,"CODE",{});var mot=s(vse);K7o=r(mot,"from_config()"),mot.forEach(t),Z7o=r(LW,`class
method.`),LW.forEach(t),e9o=i(hl),e3=n(hl,"P",{});var vPe=s(e3);o9o=r(vPe,"This class cannot be instantiated directly using "),Tse=n(vPe,"CODE",{});var got=s(Tse);r9o=r(got,"__init__()"),got.forEach(t),t9o=r(vPe," (throws an error)."),vPe.forEach(t),a9o=i(hl),et=n(hl,"DIV",{class:!0});var pl=s(et);m(o3.$$.fragment,pl),n9o=i(pl),Fse=n(pl,"P",{});var hot=s(Fse);s9o=r(hot,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),hot.forEach(t),l9o=i(pl),xd=n(pl,"P",{});var BW=s(xd);i9o=r(BW,`Note:
Loading a model from its configuration file does `),Cse=n(BW,"STRONG",{});var pot=s(Cse);d9o=r(pot,"not"),pot.forEach(t),c9o=r(BW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mse=n(BW,"CODE",{});var _ot=s(Mse);f9o=r(_ot,"from_pretrained()"),_ot.forEach(t),m9o=r(BW,"to load the model weights."),BW.forEach(t),g9o=i(pl),Ese=n(pl,"P",{});var uot=s(Ese);h9o=r(uot,"Examples:"),uot.forEach(t),p9o=i(pl),m(r3.$$.fragment,pl),pl.forEach(t),_9o=i(hl),We=n(hl,"DIV",{class:!0});var Yt=s(We);m(t3.$$.fragment,Yt),u9o=i(Yt),yse=n(Yt,"P",{});var bot=s(yse);b9o=r(bot,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),bot.forEach(t),v9o=i(Yt),rn=n(Yt,"P",{});var AM=s(rn);T9o=r(AM,"The model class to instantiate is selected based on the "),wse=n(AM,"CODE",{});var vot=s(wse);F9o=r(vot,"model_type"),vot.forEach(t),C9o=r(AM,` property of the config object (either
passed as an argument or loaded from `),Ase=n(AM,"CODE",{});var Tot=s(Ase);M9o=r(Tot,"pretrained_model_name_or_path"),Tot.forEach(t),E9o=r(AM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lse=n(AM,"CODE",{});var Fot=s(Lse);y9o=r(Fot,"pretrained_model_name_or_path"),Fot.forEach(t),w9o=r(AM,":"),AM.forEach(t),A9o=i(Yt),D=n(Yt,"UL",{});var q=s(D);N5=n(q,"LI",{});var qye=s(N5);Bse=n(qye,"STRONG",{});var Cot=s(Bse);L9o=r(Cot,"albert"),Cot.forEach(t),B9o=r(qye," \u2014 "),yN=n(qye,"A",{href:!0});var Mot=s(yN);x9o=r(Mot,"AlbertForTokenClassification"),Mot.forEach(t),k9o=r(qye," (ALBERT model)"),qye.forEach(t),R9o=i(q),D5=n(q,"LI",{});var Gye=s(D5);xse=n(Gye,"STRONG",{});var Eot=s(xse);S9o=r(Eot,"bert"),Eot.forEach(t),P9o=r(Gye," \u2014 "),wN=n(Gye,"A",{href:!0});var yot=s(wN);$9o=r(yot,"BertForTokenClassification"),yot.forEach(t),I9o=r(Gye," (BERT model)"),Gye.forEach(t),j9o=i(q),q5=n(q,"LI",{});var Oye=s(q5);kse=n(Oye,"STRONG",{});var wot=s(kse);N9o=r(wot,"big_bird"),wot.forEach(t),D9o=r(Oye," \u2014 "),AN=n(Oye,"A",{href:!0});var Aot=s(AN);q9o=r(Aot,"BigBirdForTokenClassification"),Aot.forEach(t),G9o=r(Oye," (BigBird model)"),Oye.forEach(t),O9o=i(q),G5=n(q,"LI",{});var Xye=s(G5);Rse=n(Xye,"STRONG",{});var Lot=s(Rse);X9o=r(Lot,"camembert"),Lot.forEach(t),V9o=r(Xye," \u2014 "),LN=n(Xye,"A",{href:!0});var Bot=s(LN);z9o=r(Bot,"CamembertForTokenClassification"),Bot.forEach(t),W9o=r(Xye," (CamemBERT model)"),Xye.forEach(t),Q9o=i(q),O5=n(q,"LI",{});var Vye=s(O5);Sse=n(Vye,"STRONG",{});var xot=s(Sse);H9o=r(xot,"canine"),xot.forEach(t),U9o=r(Vye," \u2014 "),BN=n(Vye,"A",{href:!0});var kot=s(BN);J9o=r(kot,"CanineForTokenClassification"),kot.forEach(t),Y9o=r(Vye," (Canine model)"),Vye.forEach(t),K9o=i(q),X5=n(q,"LI",{});var zye=s(X5);Pse=n(zye,"STRONG",{});var Rot=s(Pse);Z9o=r(Rot,"convbert"),Rot.forEach(t),eBo=r(zye," \u2014 "),xN=n(zye,"A",{href:!0});var Sot=s(xN);oBo=r(Sot,"ConvBertForTokenClassification"),Sot.forEach(t),rBo=r(zye," (ConvBERT model)"),zye.forEach(t),tBo=i(q),V5=n(q,"LI",{});var Wye=s(V5);$se=n(Wye,"STRONG",{});var Pot=s($se);aBo=r(Pot,"data2vec-text"),Pot.forEach(t),nBo=r(Wye," \u2014 "),kN=n(Wye,"A",{href:!0});var $ot=s(kN);sBo=r($ot,"Data2VecTextForTokenClassification"),$ot.forEach(t),lBo=r(Wye," (Data2VecText model)"),Wye.forEach(t),iBo=i(q),z5=n(q,"LI",{});var Qye=s(z5);Ise=n(Qye,"STRONG",{});var Iot=s(Ise);dBo=r(Iot,"deberta"),Iot.forEach(t),cBo=r(Qye," \u2014 "),RN=n(Qye,"A",{href:!0});var jot=s(RN);fBo=r(jot,"DebertaForTokenClassification"),jot.forEach(t),mBo=r(Qye," (DeBERTa model)"),Qye.forEach(t),gBo=i(q),W5=n(q,"LI",{});var Hye=s(W5);jse=n(Hye,"STRONG",{});var Not=s(jse);hBo=r(Not,"deberta-v2"),Not.forEach(t),pBo=r(Hye," \u2014 "),SN=n(Hye,"A",{href:!0});var Dot=s(SN);_Bo=r(Dot,"DebertaV2ForTokenClassification"),Dot.forEach(t),uBo=r(Hye," (DeBERTa-v2 model)"),Hye.forEach(t),bBo=i(q),Q5=n(q,"LI",{});var Uye=s(Q5);Nse=n(Uye,"STRONG",{});var qot=s(Nse);vBo=r(qot,"distilbert"),qot.forEach(t),TBo=r(Uye," \u2014 "),PN=n(Uye,"A",{href:!0});var Got=s(PN);FBo=r(Got,"DistilBertForTokenClassification"),Got.forEach(t),CBo=r(Uye," (DistilBERT model)"),Uye.forEach(t),MBo=i(q),H5=n(q,"LI",{});var Jye=s(H5);Dse=n(Jye,"STRONG",{});var Oot=s(Dse);EBo=r(Oot,"electra"),Oot.forEach(t),yBo=r(Jye," \u2014 "),$N=n(Jye,"A",{href:!0});var Xot=s($N);wBo=r(Xot,"ElectraForTokenClassification"),Xot.forEach(t),ABo=r(Jye," (ELECTRA model)"),Jye.forEach(t),LBo=i(q),U5=n(q,"LI",{});var Yye=s(U5);qse=n(Yye,"STRONG",{});var Vot=s(qse);BBo=r(Vot,"flaubert"),Vot.forEach(t),xBo=r(Yye," \u2014 "),IN=n(Yye,"A",{href:!0});var zot=s(IN);kBo=r(zot,"FlaubertForTokenClassification"),zot.forEach(t),RBo=r(Yye," (FlauBERT model)"),Yye.forEach(t),SBo=i(q),J5=n(q,"LI",{});var Kye=s(J5);Gse=n(Kye,"STRONG",{});var Wot=s(Gse);PBo=r(Wot,"fnet"),Wot.forEach(t),$Bo=r(Kye," \u2014 "),jN=n(Kye,"A",{href:!0});var Qot=s(jN);IBo=r(Qot,"FNetForTokenClassification"),Qot.forEach(t),jBo=r(Kye," (FNet model)"),Kye.forEach(t),NBo=i(q),Y5=n(q,"LI",{});var Zye=s(Y5);Ose=n(Zye,"STRONG",{});var Hot=s(Ose);DBo=r(Hot,"funnel"),Hot.forEach(t),qBo=r(Zye," \u2014 "),NN=n(Zye,"A",{href:!0});var Uot=s(NN);GBo=r(Uot,"FunnelForTokenClassification"),Uot.forEach(t),OBo=r(Zye," (Funnel Transformer model)"),Zye.forEach(t),XBo=i(q),K5=n(q,"LI",{});var ewe=s(K5);Xse=n(ewe,"STRONG",{});var Jot=s(Xse);VBo=r(Jot,"gpt2"),Jot.forEach(t),zBo=r(ewe," \u2014 "),DN=n(ewe,"A",{href:!0});var Yot=s(DN);WBo=r(Yot,"GPT2ForTokenClassification"),Yot.forEach(t),QBo=r(ewe," (OpenAI GPT-2 model)"),ewe.forEach(t),HBo=i(q),Z5=n(q,"LI",{});var owe=s(Z5);Vse=n(owe,"STRONG",{});var Kot=s(Vse);UBo=r(Kot,"ibert"),Kot.forEach(t),JBo=r(owe," \u2014 "),qN=n(owe,"A",{href:!0});var Zot=s(qN);YBo=r(Zot,"IBertForTokenClassification"),Zot.forEach(t),KBo=r(owe," (I-BERT model)"),owe.forEach(t),ZBo=i(q),e2=n(q,"LI",{});var rwe=s(e2);zse=n(rwe,"STRONG",{});var ert=s(zse);exo=r(ert,"layoutlm"),ert.forEach(t),oxo=r(rwe," \u2014 "),GN=n(rwe,"A",{href:!0});var ort=s(GN);rxo=r(ort,"LayoutLMForTokenClassification"),ort.forEach(t),txo=r(rwe," (LayoutLM model)"),rwe.forEach(t),axo=i(q),o2=n(q,"LI",{});var twe=s(o2);Wse=n(twe,"STRONG",{});var rrt=s(Wse);nxo=r(rrt,"layoutlmv2"),rrt.forEach(t),sxo=r(twe," \u2014 "),ON=n(twe,"A",{href:!0});var trt=s(ON);lxo=r(trt,"LayoutLMv2ForTokenClassification"),trt.forEach(t),ixo=r(twe," (LayoutLMv2 model)"),twe.forEach(t),dxo=i(q),r2=n(q,"LI",{});var awe=s(r2);Qse=n(awe,"STRONG",{});var art=s(Qse);cxo=r(art,"longformer"),art.forEach(t),fxo=r(awe," \u2014 "),XN=n(awe,"A",{href:!0});var nrt=s(XN);mxo=r(nrt,"LongformerForTokenClassification"),nrt.forEach(t),gxo=r(awe," (Longformer model)"),awe.forEach(t),hxo=i(q),t2=n(q,"LI",{});var nwe=s(t2);Hse=n(nwe,"STRONG",{});var srt=s(Hse);pxo=r(srt,"megatron-bert"),srt.forEach(t),_xo=r(nwe," \u2014 "),VN=n(nwe,"A",{href:!0});var lrt=s(VN);uxo=r(lrt,"MegatronBertForTokenClassification"),lrt.forEach(t),bxo=r(nwe," (MegatronBert model)"),nwe.forEach(t),vxo=i(q),a2=n(q,"LI",{});var swe=s(a2);Use=n(swe,"STRONG",{});var irt=s(Use);Txo=r(irt,"mobilebert"),irt.forEach(t),Fxo=r(swe," \u2014 "),zN=n(swe,"A",{href:!0});var drt=s(zN);Cxo=r(drt,"MobileBertForTokenClassification"),drt.forEach(t),Mxo=r(swe," (MobileBERT model)"),swe.forEach(t),Exo=i(q),n2=n(q,"LI",{});var lwe=s(n2);Jse=n(lwe,"STRONG",{});var crt=s(Jse);yxo=r(crt,"mpnet"),crt.forEach(t),wxo=r(lwe," \u2014 "),WN=n(lwe,"A",{href:!0});var frt=s(WN);Axo=r(frt,"MPNetForTokenClassification"),frt.forEach(t),Lxo=r(lwe," (MPNet model)"),lwe.forEach(t),Bxo=i(q),s2=n(q,"LI",{});var iwe=s(s2);Yse=n(iwe,"STRONG",{});var mrt=s(Yse);xxo=r(mrt,"nystromformer"),mrt.forEach(t),kxo=r(iwe," \u2014 "),QN=n(iwe,"A",{href:!0});var grt=s(QN);Rxo=r(grt,"NystromformerForTokenClassification"),grt.forEach(t),Sxo=r(iwe," (Nystromformer model)"),iwe.forEach(t),Pxo=i(q),l2=n(q,"LI",{});var dwe=s(l2);Kse=n(dwe,"STRONG",{});var hrt=s(Kse);$xo=r(hrt,"qdqbert"),hrt.forEach(t),Ixo=r(dwe," \u2014 "),HN=n(dwe,"A",{href:!0});var prt=s(HN);jxo=r(prt,"QDQBertForTokenClassification"),prt.forEach(t),Nxo=r(dwe," (QDQBert model)"),dwe.forEach(t),Dxo=i(q),i2=n(q,"LI",{});var cwe=s(i2);Zse=n(cwe,"STRONG",{});var _rt=s(Zse);qxo=r(_rt,"rembert"),_rt.forEach(t),Gxo=r(cwe," \u2014 "),UN=n(cwe,"A",{href:!0});var urt=s(UN);Oxo=r(urt,"RemBertForTokenClassification"),urt.forEach(t),Xxo=r(cwe," (RemBERT model)"),cwe.forEach(t),Vxo=i(q),d2=n(q,"LI",{});var fwe=s(d2);ele=n(fwe,"STRONG",{});var brt=s(ele);zxo=r(brt,"roberta"),brt.forEach(t),Wxo=r(fwe," \u2014 "),JN=n(fwe,"A",{href:!0});var vrt=s(JN);Qxo=r(vrt,"RobertaForTokenClassification"),vrt.forEach(t),Hxo=r(fwe," (RoBERTa model)"),fwe.forEach(t),Uxo=i(q),c2=n(q,"LI",{});var mwe=s(c2);ole=n(mwe,"STRONG",{});var Trt=s(ole);Jxo=r(Trt,"roformer"),Trt.forEach(t),Yxo=r(mwe," \u2014 "),YN=n(mwe,"A",{href:!0});var Frt=s(YN);Kxo=r(Frt,"RoFormerForTokenClassification"),Frt.forEach(t),Zxo=r(mwe," (RoFormer model)"),mwe.forEach(t),eko=i(q),f2=n(q,"LI",{});var gwe=s(f2);rle=n(gwe,"STRONG",{});var Crt=s(rle);oko=r(Crt,"squeezebert"),Crt.forEach(t),rko=r(gwe," \u2014 "),KN=n(gwe,"A",{href:!0});var Mrt=s(KN);tko=r(Mrt,"SqueezeBertForTokenClassification"),Mrt.forEach(t),ako=r(gwe," (SqueezeBERT model)"),gwe.forEach(t),nko=i(q),m2=n(q,"LI",{});var hwe=s(m2);tle=n(hwe,"STRONG",{});var Ert=s(tle);sko=r(Ert,"xlm"),Ert.forEach(t),lko=r(hwe," \u2014 "),ZN=n(hwe,"A",{href:!0});var yrt=s(ZN);iko=r(yrt,"XLMForTokenClassification"),yrt.forEach(t),dko=r(hwe," (XLM model)"),hwe.forEach(t),cko=i(q),g2=n(q,"LI",{});var pwe=s(g2);ale=n(pwe,"STRONG",{});var wrt=s(ale);fko=r(wrt,"xlm-roberta"),wrt.forEach(t),mko=r(pwe," \u2014 "),eD=n(pwe,"A",{href:!0});var Art=s(eD);gko=r(Art,"XLMRobertaForTokenClassification"),Art.forEach(t),hko=r(pwe," (XLM-RoBERTa model)"),pwe.forEach(t),pko=i(q),h2=n(q,"LI",{});var _we=s(h2);nle=n(_we,"STRONG",{});var Lrt=s(nle);_ko=r(Lrt,"xlm-roberta-xl"),Lrt.forEach(t),uko=r(_we," \u2014 "),oD=n(_we,"A",{href:!0});var Brt=s(oD);bko=r(Brt,"XLMRobertaXLForTokenClassification"),Brt.forEach(t),vko=r(_we," (XLM-RoBERTa-XL model)"),_we.forEach(t),Tko=i(q),p2=n(q,"LI",{});var uwe=s(p2);sle=n(uwe,"STRONG",{});var xrt=s(sle);Fko=r(xrt,"xlnet"),xrt.forEach(t),Cko=r(uwe," \u2014 "),rD=n(uwe,"A",{href:!0});var krt=s(rD);Mko=r(krt,"XLNetForTokenClassification"),krt.forEach(t),Eko=r(uwe," (XLNet model)"),uwe.forEach(t),yko=i(q),_2=n(q,"LI",{});var bwe=s(_2);lle=n(bwe,"STRONG",{});var Rrt=s(lle);wko=r(Rrt,"yoso"),Rrt.forEach(t),Ako=r(bwe," \u2014 "),tD=n(bwe,"A",{href:!0});var Srt=s(tD);Lko=r(Srt,"YosoForTokenClassification"),Srt.forEach(t),Bko=r(bwe," (YOSO model)"),bwe.forEach(t),q.forEach(t),xko=i(Yt),u2=n(Yt,"P",{});var vwe=s(u2);kko=r(vwe,"The model is set in evaluation mode by default using "),ile=n(vwe,"CODE",{});var Prt=s(ile);Rko=r(Prt,"model.eval()"),Prt.forEach(t),Sko=r(vwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dle=n(vwe,"CODE",{});var $rt=s(dle);Pko=r($rt,"model.train()"),$rt.forEach(t),vwe.forEach(t),$ko=i(Yt),cle=n(Yt,"P",{});var Irt=s(cle);Iko=r(Irt,"Examples:"),Irt.forEach(t),jko=i(Yt),m(a3.$$.fragment,Yt),Yt.forEach(t),hl.forEach(t),dRe=i(d),kd=n(d,"H2",{class:!0});var TPe=s(kd);b2=n(TPe,"A",{id:!0,class:!0,href:!0});var jrt=s(b2);fle=n(jrt,"SPAN",{});var Nrt=s(fle);m(n3.$$.fragment,Nrt),Nrt.forEach(t),jrt.forEach(t),Nko=i(TPe),mle=n(TPe,"SPAN",{});var Drt=s(mle);Dko=r(Drt,"AutoModelForQuestionAnswering"),Drt.forEach(t),TPe.forEach(t),cRe=i(d),sr=n(d,"DIV",{class:!0});var _l=s(sr);m(s3.$$.fragment,_l),qko=i(_l),Rd=n(_l,"P",{});var xW=s(Rd);Gko=r(xW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),gle=n(xW,"CODE",{});var qrt=s(gle);Oko=r(qrt,"from_pretrained()"),qrt.forEach(t),Xko=r(xW,"class method or the "),hle=n(xW,"CODE",{});var Grt=s(hle);Vko=r(Grt,"from_config()"),Grt.forEach(t),zko=r(xW,`class
method.`),xW.forEach(t),Wko=i(_l),l3=n(_l,"P",{});var FPe=s(l3);Qko=r(FPe,"This class cannot be instantiated directly using "),ple=n(FPe,"CODE",{});var Ort=s(ple);Hko=r(Ort,"__init__()"),Ort.forEach(t),Uko=r(FPe," (throws an error)."),FPe.forEach(t),Jko=i(_l),ot=n(_l,"DIV",{class:!0});var ul=s(ot);m(i3.$$.fragment,ul),Yko=i(ul),_le=n(ul,"P",{});var Xrt=s(_le);Kko=r(Xrt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Xrt.forEach(t),Zko=i(ul),Sd=n(ul,"P",{});var kW=s(Sd);eRo=r(kW,`Note:
Loading a model from its configuration file does `),ule=n(kW,"STRONG",{});var Vrt=s(ule);oRo=r(Vrt,"not"),Vrt.forEach(t),rRo=r(kW,` load the model weights. It only affects the
model\u2019s configuration. Use `),ble=n(kW,"CODE",{});var zrt=s(ble);tRo=r(zrt,"from_pretrained()"),zrt.forEach(t),aRo=r(kW,"to load the model weights."),kW.forEach(t),nRo=i(ul),vle=n(ul,"P",{});var Wrt=s(vle);sRo=r(Wrt,"Examples:"),Wrt.forEach(t),lRo=i(ul),m(d3.$$.fragment,ul),ul.forEach(t),iRo=i(_l),Qe=n(_l,"DIV",{class:!0});var Kt=s(Qe);m(c3.$$.fragment,Kt),dRo=i(Kt),Tle=n(Kt,"P",{});var Qrt=s(Tle);cRo=r(Qrt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Qrt.forEach(t),fRo=i(Kt),tn=n(Kt,"P",{});var LM=s(tn);mRo=r(LM,"The model class to instantiate is selected based on the "),Fle=n(LM,"CODE",{});var Hrt=s(Fle);gRo=r(Hrt,"model_type"),Hrt.forEach(t),hRo=r(LM,` property of the config object (either
passed as an argument or loaded from `),Cle=n(LM,"CODE",{});var Urt=s(Cle);pRo=r(Urt,"pretrained_model_name_or_path"),Urt.forEach(t),_Ro=r(LM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mle=n(LM,"CODE",{});var Jrt=s(Mle);uRo=r(Jrt,"pretrained_model_name_or_path"),Jrt.forEach(t),bRo=r(LM,":"),LM.forEach(t),vRo=i(Kt),R=n(Kt,"UL",{});var P=s(R);v2=n(P,"LI",{});var Twe=s(v2);Ele=n(Twe,"STRONG",{});var Yrt=s(Ele);TRo=r(Yrt,"albert"),Yrt.forEach(t),FRo=r(Twe," \u2014 "),aD=n(Twe,"A",{href:!0});var Krt=s(aD);CRo=r(Krt,"AlbertForQuestionAnswering"),Krt.forEach(t),MRo=r(Twe," (ALBERT model)"),Twe.forEach(t),ERo=i(P),T2=n(P,"LI",{});var Fwe=s(T2);yle=n(Fwe,"STRONG",{});var Zrt=s(yle);yRo=r(Zrt,"bart"),Zrt.forEach(t),wRo=r(Fwe," \u2014 "),nD=n(Fwe,"A",{href:!0});var ett=s(nD);ARo=r(ett,"BartForQuestionAnswering"),ett.forEach(t),LRo=r(Fwe," (BART model)"),Fwe.forEach(t),BRo=i(P),F2=n(P,"LI",{});var Cwe=s(F2);wle=n(Cwe,"STRONG",{});var ott=s(wle);xRo=r(ott,"bert"),ott.forEach(t),kRo=r(Cwe," \u2014 "),sD=n(Cwe,"A",{href:!0});var rtt=s(sD);RRo=r(rtt,"BertForQuestionAnswering"),rtt.forEach(t),SRo=r(Cwe," (BERT model)"),Cwe.forEach(t),PRo=i(P),C2=n(P,"LI",{});var Mwe=s(C2);Ale=n(Mwe,"STRONG",{});var ttt=s(Ale);$Ro=r(ttt,"big_bird"),ttt.forEach(t),IRo=r(Mwe," \u2014 "),lD=n(Mwe,"A",{href:!0});var att=s(lD);jRo=r(att,"BigBirdForQuestionAnswering"),att.forEach(t),NRo=r(Mwe," (BigBird model)"),Mwe.forEach(t),DRo=i(P),M2=n(P,"LI",{});var Ewe=s(M2);Lle=n(Ewe,"STRONG",{});var ntt=s(Lle);qRo=r(ntt,"bigbird_pegasus"),ntt.forEach(t),GRo=r(Ewe," \u2014 "),iD=n(Ewe,"A",{href:!0});var stt=s(iD);ORo=r(stt,"BigBirdPegasusForQuestionAnswering"),stt.forEach(t),XRo=r(Ewe," (BigBirdPegasus model)"),Ewe.forEach(t),VRo=i(P),E2=n(P,"LI",{});var ywe=s(E2);Ble=n(ywe,"STRONG",{});var ltt=s(Ble);zRo=r(ltt,"camembert"),ltt.forEach(t),WRo=r(ywe," \u2014 "),dD=n(ywe,"A",{href:!0});var itt=s(dD);QRo=r(itt,"CamembertForQuestionAnswering"),itt.forEach(t),HRo=r(ywe," (CamemBERT model)"),ywe.forEach(t),URo=i(P),y2=n(P,"LI",{});var wwe=s(y2);xle=n(wwe,"STRONG",{});var dtt=s(xle);JRo=r(dtt,"canine"),dtt.forEach(t),YRo=r(wwe," \u2014 "),cD=n(wwe,"A",{href:!0});var ctt=s(cD);KRo=r(ctt,"CanineForQuestionAnswering"),ctt.forEach(t),ZRo=r(wwe," (Canine model)"),wwe.forEach(t),eSo=i(P),w2=n(P,"LI",{});var Awe=s(w2);kle=n(Awe,"STRONG",{});var ftt=s(kle);oSo=r(ftt,"convbert"),ftt.forEach(t),rSo=r(Awe," \u2014 "),fD=n(Awe,"A",{href:!0});var mtt=s(fD);tSo=r(mtt,"ConvBertForQuestionAnswering"),mtt.forEach(t),aSo=r(Awe," (ConvBERT model)"),Awe.forEach(t),nSo=i(P),A2=n(P,"LI",{});var Lwe=s(A2);Rle=n(Lwe,"STRONG",{});var gtt=s(Rle);sSo=r(gtt,"data2vec-text"),gtt.forEach(t),lSo=r(Lwe," \u2014 "),mD=n(Lwe,"A",{href:!0});var htt=s(mD);iSo=r(htt,"Data2VecTextForQuestionAnswering"),htt.forEach(t),dSo=r(Lwe," (Data2VecText model)"),Lwe.forEach(t),cSo=i(P),L2=n(P,"LI",{});var Bwe=s(L2);Sle=n(Bwe,"STRONG",{});var ptt=s(Sle);fSo=r(ptt,"deberta"),ptt.forEach(t),mSo=r(Bwe," \u2014 "),gD=n(Bwe,"A",{href:!0});var _tt=s(gD);gSo=r(_tt,"DebertaForQuestionAnswering"),_tt.forEach(t),hSo=r(Bwe," (DeBERTa model)"),Bwe.forEach(t),pSo=i(P),B2=n(P,"LI",{});var xwe=s(B2);Ple=n(xwe,"STRONG",{});var utt=s(Ple);_So=r(utt,"deberta-v2"),utt.forEach(t),uSo=r(xwe," \u2014 "),hD=n(xwe,"A",{href:!0});var btt=s(hD);bSo=r(btt,"DebertaV2ForQuestionAnswering"),btt.forEach(t),vSo=r(xwe," (DeBERTa-v2 model)"),xwe.forEach(t),TSo=i(P),x2=n(P,"LI",{});var kwe=s(x2);$le=n(kwe,"STRONG",{});var vtt=s($le);FSo=r(vtt,"distilbert"),vtt.forEach(t),CSo=r(kwe," \u2014 "),pD=n(kwe,"A",{href:!0});var Ttt=s(pD);MSo=r(Ttt,"DistilBertForQuestionAnswering"),Ttt.forEach(t),ESo=r(kwe," (DistilBERT model)"),kwe.forEach(t),ySo=i(P),k2=n(P,"LI",{});var Rwe=s(k2);Ile=n(Rwe,"STRONG",{});var Ftt=s(Ile);wSo=r(Ftt,"electra"),Ftt.forEach(t),ASo=r(Rwe," \u2014 "),_D=n(Rwe,"A",{href:!0});var Ctt=s(_D);LSo=r(Ctt,"ElectraForQuestionAnswering"),Ctt.forEach(t),BSo=r(Rwe," (ELECTRA model)"),Rwe.forEach(t),xSo=i(P),R2=n(P,"LI",{});var Swe=s(R2);jle=n(Swe,"STRONG",{});var Mtt=s(jle);kSo=r(Mtt,"flaubert"),Mtt.forEach(t),RSo=r(Swe," \u2014 "),uD=n(Swe,"A",{href:!0});var Ett=s(uD);SSo=r(Ett,"FlaubertForQuestionAnsweringSimple"),Ett.forEach(t),PSo=r(Swe," (FlauBERT model)"),Swe.forEach(t),$So=i(P),S2=n(P,"LI",{});var Pwe=s(S2);Nle=n(Pwe,"STRONG",{});var ytt=s(Nle);ISo=r(ytt,"fnet"),ytt.forEach(t),jSo=r(Pwe," \u2014 "),bD=n(Pwe,"A",{href:!0});var wtt=s(bD);NSo=r(wtt,"FNetForQuestionAnswering"),wtt.forEach(t),DSo=r(Pwe," (FNet model)"),Pwe.forEach(t),qSo=i(P),P2=n(P,"LI",{});var $we=s(P2);Dle=n($we,"STRONG",{});var Att=s(Dle);GSo=r(Att,"funnel"),Att.forEach(t),OSo=r($we," \u2014 "),vD=n($we,"A",{href:!0});var Ltt=s(vD);XSo=r(Ltt,"FunnelForQuestionAnswering"),Ltt.forEach(t),VSo=r($we," (Funnel Transformer model)"),$we.forEach(t),zSo=i(P),$2=n(P,"LI",{});var Iwe=s($2);qle=n(Iwe,"STRONG",{});var Btt=s(qle);WSo=r(Btt,"gptj"),Btt.forEach(t),QSo=r(Iwe," \u2014 "),TD=n(Iwe,"A",{href:!0});var xtt=s(TD);HSo=r(xtt,"GPTJForQuestionAnswering"),xtt.forEach(t),USo=r(Iwe," (GPT-J model)"),Iwe.forEach(t),JSo=i(P),I2=n(P,"LI",{});var jwe=s(I2);Gle=n(jwe,"STRONG",{});var ktt=s(Gle);YSo=r(ktt,"ibert"),ktt.forEach(t),KSo=r(jwe," \u2014 "),FD=n(jwe,"A",{href:!0});var Rtt=s(FD);ZSo=r(Rtt,"IBertForQuestionAnswering"),Rtt.forEach(t),ePo=r(jwe," (I-BERT model)"),jwe.forEach(t),oPo=i(P),j2=n(P,"LI",{});var Nwe=s(j2);Ole=n(Nwe,"STRONG",{});var Stt=s(Ole);rPo=r(Stt,"layoutlmv2"),Stt.forEach(t),tPo=r(Nwe," \u2014 "),CD=n(Nwe,"A",{href:!0});var Ptt=s(CD);aPo=r(Ptt,"LayoutLMv2ForQuestionAnswering"),Ptt.forEach(t),nPo=r(Nwe," (LayoutLMv2 model)"),Nwe.forEach(t),sPo=i(P),N2=n(P,"LI",{});var Dwe=s(N2);Xle=n(Dwe,"STRONG",{});var $tt=s(Xle);lPo=r($tt,"led"),$tt.forEach(t),iPo=r(Dwe," \u2014 "),MD=n(Dwe,"A",{href:!0});var Itt=s(MD);dPo=r(Itt,"LEDForQuestionAnswering"),Itt.forEach(t),cPo=r(Dwe," (LED model)"),Dwe.forEach(t),fPo=i(P),D2=n(P,"LI",{});var qwe=s(D2);Vle=n(qwe,"STRONG",{});var jtt=s(Vle);mPo=r(jtt,"longformer"),jtt.forEach(t),gPo=r(qwe," \u2014 "),ED=n(qwe,"A",{href:!0});var Ntt=s(ED);hPo=r(Ntt,"LongformerForQuestionAnswering"),Ntt.forEach(t),pPo=r(qwe," (Longformer model)"),qwe.forEach(t),_Po=i(P),q2=n(P,"LI",{});var Gwe=s(q2);zle=n(Gwe,"STRONG",{});var Dtt=s(zle);uPo=r(Dtt,"lxmert"),Dtt.forEach(t),bPo=r(Gwe," \u2014 "),yD=n(Gwe,"A",{href:!0});var qtt=s(yD);vPo=r(qtt,"LxmertForQuestionAnswering"),qtt.forEach(t),TPo=r(Gwe," (LXMERT model)"),Gwe.forEach(t),FPo=i(P),G2=n(P,"LI",{});var Owe=s(G2);Wle=n(Owe,"STRONG",{});var Gtt=s(Wle);CPo=r(Gtt,"mbart"),Gtt.forEach(t),MPo=r(Owe," \u2014 "),wD=n(Owe,"A",{href:!0});var Ott=s(wD);EPo=r(Ott,"MBartForQuestionAnswering"),Ott.forEach(t),yPo=r(Owe," (mBART model)"),Owe.forEach(t),wPo=i(P),O2=n(P,"LI",{});var Xwe=s(O2);Qle=n(Xwe,"STRONG",{});var Xtt=s(Qle);APo=r(Xtt,"megatron-bert"),Xtt.forEach(t),LPo=r(Xwe," \u2014 "),AD=n(Xwe,"A",{href:!0});var Vtt=s(AD);BPo=r(Vtt,"MegatronBertForQuestionAnswering"),Vtt.forEach(t),xPo=r(Xwe," (MegatronBert model)"),Xwe.forEach(t),kPo=i(P),X2=n(P,"LI",{});var Vwe=s(X2);Hle=n(Vwe,"STRONG",{});var ztt=s(Hle);RPo=r(ztt,"mobilebert"),ztt.forEach(t),SPo=r(Vwe," \u2014 "),LD=n(Vwe,"A",{href:!0});var Wtt=s(LD);PPo=r(Wtt,"MobileBertForQuestionAnswering"),Wtt.forEach(t),$Po=r(Vwe," (MobileBERT model)"),Vwe.forEach(t),IPo=i(P),V2=n(P,"LI",{});var zwe=s(V2);Ule=n(zwe,"STRONG",{});var Qtt=s(Ule);jPo=r(Qtt,"mpnet"),Qtt.forEach(t),NPo=r(zwe," \u2014 "),BD=n(zwe,"A",{href:!0});var Htt=s(BD);DPo=r(Htt,"MPNetForQuestionAnswering"),Htt.forEach(t),qPo=r(zwe," (MPNet model)"),zwe.forEach(t),GPo=i(P),z2=n(P,"LI",{});var Wwe=s(z2);Jle=n(Wwe,"STRONG",{});var Utt=s(Jle);OPo=r(Utt,"nystromformer"),Utt.forEach(t),XPo=r(Wwe," \u2014 "),xD=n(Wwe,"A",{href:!0});var Jtt=s(xD);VPo=r(Jtt,"NystromformerForQuestionAnswering"),Jtt.forEach(t),zPo=r(Wwe," (Nystromformer model)"),Wwe.forEach(t),WPo=i(P),W2=n(P,"LI",{});var Qwe=s(W2);Yle=n(Qwe,"STRONG",{});var Ytt=s(Yle);QPo=r(Ytt,"qdqbert"),Ytt.forEach(t),HPo=r(Qwe," \u2014 "),kD=n(Qwe,"A",{href:!0});var Ktt=s(kD);UPo=r(Ktt,"QDQBertForQuestionAnswering"),Ktt.forEach(t),JPo=r(Qwe," (QDQBert model)"),Qwe.forEach(t),YPo=i(P),Q2=n(P,"LI",{});var Hwe=s(Q2);Kle=n(Hwe,"STRONG",{});var Ztt=s(Kle);KPo=r(Ztt,"reformer"),Ztt.forEach(t),ZPo=r(Hwe," \u2014 "),RD=n(Hwe,"A",{href:!0});var eat=s(RD);e$o=r(eat,"ReformerForQuestionAnswering"),eat.forEach(t),o$o=r(Hwe," (Reformer model)"),Hwe.forEach(t),r$o=i(P),H2=n(P,"LI",{});var Uwe=s(H2);Zle=n(Uwe,"STRONG",{});var oat=s(Zle);t$o=r(oat,"rembert"),oat.forEach(t),a$o=r(Uwe," \u2014 "),SD=n(Uwe,"A",{href:!0});var rat=s(SD);n$o=r(rat,"RemBertForQuestionAnswering"),rat.forEach(t),s$o=r(Uwe," (RemBERT model)"),Uwe.forEach(t),l$o=i(P),U2=n(P,"LI",{});var Jwe=s(U2);eie=n(Jwe,"STRONG",{});var tat=s(eie);i$o=r(tat,"roberta"),tat.forEach(t),d$o=r(Jwe," \u2014 "),PD=n(Jwe,"A",{href:!0});var aat=s(PD);c$o=r(aat,"RobertaForQuestionAnswering"),aat.forEach(t),f$o=r(Jwe," (RoBERTa model)"),Jwe.forEach(t),m$o=i(P),J2=n(P,"LI",{});var Ywe=s(J2);oie=n(Ywe,"STRONG",{});var nat=s(oie);g$o=r(nat,"roformer"),nat.forEach(t),h$o=r(Ywe," \u2014 "),$D=n(Ywe,"A",{href:!0});var sat=s($D);p$o=r(sat,"RoFormerForQuestionAnswering"),sat.forEach(t),_$o=r(Ywe," (RoFormer model)"),Ywe.forEach(t),u$o=i(P),Y2=n(P,"LI",{});var Kwe=s(Y2);rie=n(Kwe,"STRONG",{});var lat=s(rie);b$o=r(lat,"splinter"),lat.forEach(t),v$o=r(Kwe," \u2014 "),ID=n(Kwe,"A",{href:!0});var iat=s(ID);T$o=r(iat,"SplinterForQuestionAnswering"),iat.forEach(t),F$o=r(Kwe," (Splinter model)"),Kwe.forEach(t),C$o=i(P),K2=n(P,"LI",{});var Zwe=s(K2);tie=n(Zwe,"STRONG",{});var dat=s(tie);M$o=r(dat,"squeezebert"),dat.forEach(t),E$o=r(Zwe," \u2014 "),jD=n(Zwe,"A",{href:!0});var cat=s(jD);y$o=r(cat,"SqueezeBertForQuestionAnswering"),cat.forEach(t),w$o=r(Zwe," (SqueezeBERT model)"),Zwe.forEach(t),A$o=i(P),Z2=n(P,"LI",{});var eAe=s(Z2);aie=n(eAe,"STRONG",{});var fat=s(aie);L$o=r(fat,"xlm"),fat.forEach(t),B$o=r(eAe," \u2014 "),ND=n(eAe,"A",{href:!0});var mat=s(ND);x$o=r(mat,"XLMForQuestionAnsweringSimple"),mat.forEach(t),k$o=r(eAe," (XLM model)"),eAe.forEach(t),R$o=i(P),ev=n(P,"LI",{});var oAe=s(ev);nie=n(oAe,"STRONG",{});var gat=s(nie);S$o=r(gat,"xlm-roberta"),gat.forEach(t),P$o=r(oAe," \u2014 "),DD=n(oAe,"A",{href:!0});var hat=s(DD);$$o=r(hat,"XLMRobertaForQuestionAnswering"),hat.forEach(t),I$o=r(oAe," (XLM-RoBERTa model)"),oAe.forEach(t),j$o=i(P),ov=n(P,"LI",{});var rAe=s(ov);sie=n(rAe,"STRONG",{});var pat=s(sie);N$o=r(pat,"xlm-roberta-xl"),pat.forEach(t),D$o=r(rAe," \u2014 "),qD=n(rAe,"A",{href:!0});var _at=s(qD);q$o=r(_at,"XLMRobertaXLForQuestionAnswering"),_at.forEach(t),G$o=r(rAe," (XLM-RoBERTa-XL model)"),rAe.forEach(t),O$o=i(P),rv=n(P,"LI",{});var tAe=s(rv);lie=n(tAe,"STRONG",{});var uat=s(lie);X$o=r(uat,"xlnet"),uat.forEach(t),V$o=r(tAe," \u2014 "),GD=n(tAe,"A",{href:!0});var bat=s(GD);z$o=r(bat,"XLNetForQuestionAnsweringSimple"),bat.forEach(t),W$o=r(tAe," (XLNet model)"),tAe.forEach(t),Q$o=i(P),tv=n(P,"LI",{});var aAe=s(tv);iie=n(aAe,"STRONG",{});var vat=s(iie);H$o=r(vat,"yoso"),vat.forEach(t),U$o=r(aAe," \u2014 "),OD=n(aAe,"A",{href:!0});var Tat=s(OD);J$o=r(Tat,"YosoForQuestionAnswering"),Tat.forEach(t),Y$o=r(aAe," (YOSO model)"),aAe.forEach(t),P.forEach(t),K$o=i(Kt),av=n(Kt,"P",{});var nAe=s(av);Z$o=r(nAe,"The model is set in evaluation mode by default using "),die=n(nAe,"CODE",{});var Fat=s(die);eIo=r(Fat,"model.eval()"),Fat.forEach(t),oIo=r(nAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cie=n(nAe,"CODE",{});var Cat=s(cie);rIo=r(Cat,"model.train()"),Cat.forEach(t),nAe.forEach(t),tIo=i(Kt),fie=n(Kt,"P",{});var Mat=s(fie);aIo=r(Mat,"Examples:"),Mat.forEach(t),nIo=i(Kt),m(f3.$$.fragment,Kt),Kt.forEach(t),_l.forEach(t),fRe=i(d),Pd=n(d,"H2",{class:!0});var CPe=s(Pd);nv=n(CPe,"A",{id:!0,class:!0,href:!0});var Eat=s(nv);mie=n(Eat,"SPAN",{});var yat=s(mie);m(m3.$$.fragment,yat),yat.forEach(t),Eat.forEach(t),sIo=i(CPe),gie=n(CPe,"SPAN",{});var wat=s(gie);lIo=r(wat,"AutoModelForTableQuestionAnswering"),wat.forEach(t),CPe.forEach(t),mRe=i(d),lr=n(d,"DIV",{class:!0});var bl=s(lr);m(g3.$$.fragment,bl),iIo=i(bl),$d=n(bl,"P",{});var RW=s($d);dIo=r(RW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),hie=n(RW,"CODE",{});var Aat=s(hie);cIo=r(Aat,"from_pretrained()"),Aat.forEach(t),fIo=r(RW,"class method or the "),pie=n(RW,"CODE",{});var Lat=s(pie);mIo=r(Lat,"from_config()"),Lat.forEach(t),gIo=r(RW,`class
method.`),RW.forEach(t),hIo=i(bl),h3=n(bl,"P",{});var MPe=s(h3);pIo=r(MPe,"This class cannot be instantiated directly using "),_ie=n(MPe,"CODE",{});var Bat=s(_ie);_Io=r(Bat,"__init__()"),Bat.forEach(t),uIo=r(MPe," (throws an error)."),MPe.forEach(t),bIo=i(bl),rt=n(bl,"DIV",{class:!0});var vl=s(rt);m(p3.$$.fragment,vl),vIo=i(vl),uie=n(vl,"P",{});var xat=s(uie);TIo=r(xat,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),xat.forEach(t),FIo=i(vl),Id=n(vl,"P",{});var SW=s(Id);CIo=r(SW,`Note:
Loading a model from its configuration file does `),bie=n(SW,"STRONG",{});var kat=s(bie);MIo=r(kat,"not"),kat.forEach(t),EIo=r(SW,` load the model weights. It only affects the
model\u2019s configuration. Use `),vie=n(SW,"CODE",{});var Rat=s(vie);yIo=r(Rat,"from_pretrained()"),Rat.forEach(t),wIo=r(SW,"to load the model weights."),SW.forEach(t),AIo=i(vl),Tie=n(vl,"P",{});var Sat=s(Tie);LIo=r(Sat,"Examples:"),Sat.forEach(t),BIo=i(vl),m(_3.$$.fragment,vl),vl.forEach(t),xIo=i(bl),He=n(bl,"DIV",{class:!0});var Zt=s(He);m(u3.$$.fragment,Zt),kIo=i(Zt),Fie=n(Zt,"P",{});var Pat=s(Fie);RIo=r(Pat,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Pat.forEach(t),SIo=i(Zt),an=n(Zt,"P",{});var BM=s(an);PIo=r(BM,"The model class to instantiate is selected based on the "),Cie=n(BM,"CODE",{});var $at=s(Cie);$Io=r($at,"model_type"),$at.forEach(t),IIo=r(BM,` property of the config object (either
passed as an argument or loaded from `),Mie=n(BM,"CODE",{});var Iat=s(Mie);jIo=r(Iat,"pretrained_model_name_or_path"),Iat.forEach(t),NIo=r(BM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eie=n(BM,"CODE",{});var jat=s(Eie);DIo=r(jat,"pretrained_model_name_or_path"),jat.forEach(t),qIo=r(BM,":"),BM.forEach(t),GIo=i(Zt),yie=n(Zt,"UL",{});var Nat=s(yie);sv=n(Nat,"LI",{});var sAe=s(sv);wie=n(sAe,"STRONG",{});var Dat=s(wie);OIo=r(Dat,"tapas"),Dat.forEach(t),XIo=r(sAe," \u2014 "),XD=n(sAe,"A",{href:!0});var qat=s(XD);VIo=r(qat,"TapasForQuestionAnswering"),qat.forEach(t),zIo=r(sAe," (TAPAS model)"),sAe.forEach(t),Nat.forEach(t),WIo=i(Zt),lv=n(Zt,"P",{});var lAe=s(lv);QIo=r(lAe,"The model is set in evaluation mode by default using "),Aie=n(lAe,"CODE",{});var Gat=s(Aie);HIo=r(Gat,"model.eval()"),Gat.forEach(t),UIo=r(lAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lie=n(lAe,"CODE",{});var Oat=s(Lie);JIo=r(Oat,"model.train()"),Oat.forEach(t),lAe.forEach(t),YIo=i(Zt),Bie=n(Zt,"P",{});var Xat=s(Bie);KIo=r(Xat,"Examples:"),Xat.forEach(t),ZIo=i(Zt),m(b3.$$.fragment,Zt),Zt.forEach(t),bl.forEach(t),gRe=i(d),jd=n(d,"H2",{class:!0});var EPe=s(jd);iv=n(EPe,"A",{id:!0,class:!0,href:!0});var Vat=s(iv);xie=n(Vat,"SPAN",{});var zat=s(xie);m(v3.$$.fragment,zat),zat.forEach(t),Vat.forEach(t),ejo=i(EPe),kie=n(EPe,"SPAN",{});var Wat=s(kie);ojo=r(Wat,"AutoModelForImageClassification"),Wat.forEach(t),EPe.forEach(t),hRe=i(d),ir=n(d,"DIV",{class:!0});var Tl=s(ir);m(T3.$$.fragment,Tl),rjo=i(Tl),Nd=n(Tl,"P",{});var PW=s(Nd);tjo=r(PW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Rie=n(PW,"CODE",{});var Qat=s(Rie);ajo=r(Qat,"from_pretrained()"),Qat.forEach(t),njo=r(PW,"class method or the "),Sie=n(PW,"CODE",{});var Hat=s(Sie);sjo=r(Hat,"from_config()"),Hat.forEach(t),ljo=r(PW,`class
method.`),PW.forEach(t),ijo=i(Tl),F3=n(Tl,"P",{});var yPe=s(F3);djo=r(yPe,"This class cannot be instantiated directly using "),Pie=n(yPe,"CODE",{});var Uat=s(Pie);cjo=r(Uat,"__init__()"),Uat.forEach(t),fjo=r(yPe," (throws an error)."),yPe.forEach(t),mjo=i(Tl),tt=n(Tl,"DIV",{class:!0});var Fl=s(tt);m(C3.$$.fragment,Fl),gjo=i(Fl),$ie=n(Fl,"P",{});var Jat=s($ie);hjo=r(Jat,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Jat.forEach(t),pjo=i(Fl),Dd=n(Fl,"P",{});var $W=s(Dd);_jo=r($W,`Note:
Loading a model from its configuration file does `),Iie=n($W,"STRONG",{});var Yat=s(Iie);ujo=r(Yat,"not"),Yat.forEach(t),bjo=r($W,` load the model weights. It only affects the
model\u2019s configuration. Use `),jie=n($W,"CODE",{});var Kat=s(jie);vjo=r(Kat,"from_pretrained()"),Kat.forEach(t),Tjo=r($W,"to load the model weights."),$W.forEach(t),Fjo=i(Fl),Nie=n(Fl,"P",{});var Zat=s(Nie);Cjo=r(Zat,"Examples:"),Zat.forEach(t),Mjo=i(Fl),m(M3.$$.fragment,Fl),Fl.forEach(t),Ejo=i(Tl),Ue=n(Tl,"DIV",{class:!0});var ea=s(Ue);m(E3.$$.fragment,ea),yjo=i(ea),Die=n(ea,"P",{});var ent=s(Die);wjo=r(ent,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),ent.forEach(t),Ajo=i(ea),nn=n(ea,"P",{});var xM=s(nn);Ljo=r(xM,"The model class to instantiate is selected based on the "),qie=n(xM,"CODE",{});var ont=s(qie);Bjo=r(ont,"model_type"),ont.forEach(t),xjo=r(xM,` property of the config object (either
passed as an argument or loaded from `),Gie=n(xM,"CODE",{});var rnt=s(Gie);kjo=r(rnt,"pretrained_model_name_or_path"),rnt.forEach(t),Rjo=r(xM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oie=n(xM,"CODE",{});var tnt=s(Oie);Sjo=r(tnt,"pretrained_model_name_or_path"),tnt.forEach(t),Pjo=r(xM,":"),xM.forEach(t),$jo=i(ea),me=n(ea,"UL",{});var Fe=s(me);dv=n(Fe,"LI",{});var iAe=s(dv);Xie=n(iAe,"STRONG",{});var ant=s(Xie);Ijo=r(ant,"beit"),ant.forEach(t),jjo=r(iAe," \u2014 "),VD=n(iAe,"A",{href:!0});var nnt=s(VD);Njo=r(nnt,"BeitForImageClassification"),nnt.forEach(t),Djo=r(iAe," (BEiT model)"),iAe.forEach(t),qjo=i(Fe),cv=n(Fe,"LI",{});var dAe=s(cv);Vie=n(dAe,"STRONG",{});var snt=s(Vie);Gjo=r(snt,"convnext"),snt.forEach(t),Ojo=r(dAe," \u2014 "),zD=n(dAe,"A",{href:!0});var lnt=s(zD);Xjo=r(lnt,"ConvNextForImageClassification"),lnt.forEach(t),Vjo=r(dAe," (ConvNext model)"),dAe.forEach(t),zjo=i(Fe),zs=n(Fe,"LI",{});var h9=s(zs);zie=n(h9,"STRONG",{});var int=s(zie);Wjo=r(int,"deit"),int.forEach(t),Qjo=r(h9," \u2014 "),WD=n(h9,"A",{href:!0});var dnt=s(WD);Hjo=r(dnt,"DeiTForImageClassification"),dnt.forEach(t),Ujo=r(h9," or "),QD=n(h9,"A",{href:!0});var cnt=s(QD);Jjo=r(cnt,"DeiTForImageClassificationWithTeacher"),cnt.forEach(t),Yjo=r(h9," (DeiT model)"),h9.forEach(t),Kjo=i(Fe),fv=n(Fe,"LI",{});var cAe=s(fv);Wie=n(cAe,"STRONG",{});var fnt=s(Wie);Zjo=r(fnt,"imagegpt"),fnt.forEach(t),eNo=r(cAe," \u2014 "),HD=n(cAe,"A",{href:!0});var mnt=s(HD);oNo=r(mnt,"ImageGPTForImageClassification"),mnt.forEach(t),rNo=r(cAe," (ImageGPT model)"),cAe.forEach(t),tNo=i(Fe),pa=n(Fe,"LI",{});var zf=s(pa);Qie=n(zf,"STRONG",{});var gnt=s(Qie);aNo=r(gnt,"perceiver"),gnt.forEach(t),nNo=r(zf," \u2014 "),UD=n(zf,"A",{href:!0});var hnt=s(UD);sNo=r(hnt,"PerceiverForImageClassificationLearned"),hnt.forEach(t),lNo=r(zf," or "),JD=n(zf,"A",{href:!0});var pnt=s(JD);iNo=r(pnt,"PerceiverForImageClassificationFourier"),pnt.forEach(t),dNo=r(zf," or "),YD=n(zf,"A",{href:!0});var _nt=s(YD);cNo=r(_nt,"PerceiverForImageClassificationConvProcessing"),_nt.forEach(t),fNo=r(zf," (Perceiver model)"),zf.forEach(t),mNo=i(Fe),mv=n(Fe,"LI",{});var fAe=s(mv);Hie=n(fAe,"STRONG",{});var unt=s(Hie);gNo=r(unt,"poolformer"),unt.forEach(t),hNo=r(fAe," \u2014 "),KD=n(fAe,"A",{href:!0});var bnt=s(KD);pNo=r(bnt,"PoolFormerForImageClassification"),bnt.forEach(t),_No=r(fAe," (PoolFormer model)"),fAe.forEach(t),uNo=i(Fe),gv=n(Fe,"LI",{});var mAe=s(gv);Uie=n(mAe,"STRONG",{});var vnt=s(Uie);bNo=r(vnt,"resnet"),vnt.forEach(t),vNo=r(mAe," \u2014 "),ZD=n(mAe,"A",{href:!0});var Tnt=s(ZD);TNo=r(Tnt,"ResNetForImageClassification"),Tnt.forEach(t),FNo=r(mAe," (ResNet model)"),mAe.forEach(t),CNo=i(Fe),hv=n(Fe,"LI",{});var gAe=s(hv);Jie=n(gAe,"STRONG",{});var Fnt=s(Jie);MNo=r(Fnt,"segformer"),Fnt.forEach(t),ENo=r(gAe," \u2014 "),eq=n(gAe,"A",{href:!0});var Cnt=s(eq);yNo=r(Cnt,"SegformerForImageClassification"),Cnt.forEach(t),wNo=r(gAe," (SegFormer model)"),gAe.forEach(t),ANo=i(Fe),pv=n(Fe,"LI",{});var hAe=s(pv);Yie=n(hAe,"STRONG",{});var Mnt=s(Yie);LNo=r(Mnt,"swin"),Mnt.forEach(t),BNo=r(hAe," \u2014 "),oq=n(hAe,"A",{href:!0});var Ent=s(oq);xNo=r(Ent,"SwinForImageClassification"),Ent.forEach(t),kNo=r(hAe," (Swin model)"),hAe.forEach(t),RNo=i(Fe),_v=n(Fe,"LI",{});var pAe=s(_v);Kie=n(pAe,"STRONG",{});var ynt=s(Kie);SNo=r(ynt,"van"),ynt.forEach(t),PNo=r(pAe," \u2014 "),rq=n(pAe,"A",{href:!0});var wnt=s(rq);$No=r(wnt,"VanForImageClassification"),wnt.forEach(t),INo=r(pAe," (VAN model)"),pAe.forEach(t),jNo=i(Fe),uv=n(Fe,"LI",{});var _Ae=s(uv);Zie=n(_Ae,"STRONG",{});var Ant=s(Zie);NNo=r(Ant,"vit"),Ant.forEach(t),DNo=r(_Ae," \u2014 "),tq=n(_Ae,"A",{href:!0});var Lnt=s(tq);qNo=r(Lnt,"ViTForImageClassification"),Lnt.forEach(t),GNo=r(_Ae," (ViT model)"),_Ae.forEach(t),Fe.forEach(t),ONo=i(ea),bv=n(ea,"P",{});var uAe=s(bv);XNo=r(uAe,"The model is set in evaluation mode by default using "),ede=n(uAe,"CODE",{});var Bnt=s(ede);VNo=r(Bnt,"model.eval()"),Bnt.forEach(t),zNo=r(uAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ode=n(uAe,"CODE",{});var xnt=s(ode);WNo=r(xnt,"model.train()"),xnt.forEach(t),uAe.forEach(t),QNo=i(ea),rde=n(ea,"P",{});var knt=s(rde);HNo=r(knt,"Examples:"),knt.forEach(t),UNo=i(ea),m(y3.$$.fragment,ea),ea.forEach(t),Tl.forEach(t),pRe=i(d),qd=n(d,"H2",{class:!0});var wPe=s(qd);vv=n(wPe,"A",{id:!0,class:!0,href:!0});var Rnt=s(vv);tde=n(Rnt,"SPAN",{});var Snt=s(tde);m(w3.$$.fragment,Snt),Snt.forEach(t),Rnt.forEach(t),JNo=i(wPe),ade=n(wPe,"SPAN",{});var Pnt=s(ade);YNo=r(Pnt,"AutoModelForVision2Seq"),Pnt.forEach(t),wPe.forEach(t),_Re=i(d),dr=n(d,"DIV",{class:!0});var Cl=s(dr);m(A3.$$.fragment,Cl),KNo=i(Cl),Gd=n(Cl,"P",{});var IW=s(Gd);ZNo=r(IW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),nde=n(IW,"CODE",{});var $nt=s(nde);eDo=r($nt,"from_pretrained()"),$nt.forEach(t),oDo=r(IW,"class method or the "),sde=n(IW,"CODE",{});var Int=s(sde);rDo=r(Int,"from_config()"),Int.forEach(t),tDo=r(IW,`class
method.`),IW.forEach(t),aDo=i(Cl),L3=n(Cl,"P",{});var APe=s(L3);nDo=r(APe,"This class cannot be instantiated directly using "),lde=n(APe,"CODE",{});var jnt=s(lde);sDo=r(jnt,"__init__()"),jnt.forEach(t),lDo=r(APe," (throws an error)."),APe.forEach(t),iDo=i(Cl),at=n(Cl,"DIV",{class:!0});var Ml=s(at);m(B3.$$.fragment,Ml),dDo=i(Ml),ide=n(Ml,"P",{});var Nnt=s(ide);cDo=r(Nnt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Nnt.forEach(t),fDo=i(Ml),Od=n(Ml,"P",{});var jW=s(Od);mDo=r(jW,`Note:
Loading a model from its configuration file does `),dde=n(jW,"STRONG",{});var Dnt=s(dde);gDo=r(Dnt,"not"),Dnt.forEach(t),hDo=r(jW,` load the model weights. It only affects the
model\u2019s configuration. Use `),cde=n(jW,"CODE",{});var qnt=s(cde);pDo=r(qnt,"from_pretrained()"),qnt.forEach(t),_Do=r(jW,"to load the model weights."),jW.forEach(t),uDo=i(Ml),fde=n(Ml,"P",{});var Gnt=s(fde);bDo=r(Gnt,"Examples:"),Gnt.forEach(t),vDo=i(Ml),m(x3.$$.fragment,Ml),Ml.forEach(t),TDo=i(Cl),Je=n(Cl,"DIV",{class:!0});var oa=s(Je);m(k3.$$.fragment,oa),FDo=i(oa),mde=n(oa,"P",{});var Ont=s(mde);CDo=r(Ont,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Ont.forEach(t),MDo=i(oa),sn=n(oa,"P",{});var kM=s(sn);EDo=r(kM,"The model class to instantiate is selected based on the "),gde=n(kM,"CODE",{});var Xnt=s(gde);yDo=r(Xnt,"model_type"),Xnt.forEach(t),wDo=r(kM,` property of the config object (either
passed as an argument or loaded from `),hde=n(kM,"CODE",{});var Vnt=s(hde);ADo=r(Vnt,"pretrained_model_name_or_path"),Vnt.forEach(t),LDo=r(kM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pde=n(kM,"CODE",{});var znt=s(pde);BDo=r(znt,"pretrained_model_name_or_path"),znt.forEach(t),xDo=r(kM,":"),kM.forEach(t),kDo=i(oa),_de=n(oa,"UL",{});var Wnt=s(_de);Tv=n(Wnt,"LI",{});var bAe=s(Tv);ude=n(bAe,"STRONG",{});var Qnt=s(ude);RDo=r(Qnt,"vision-encoder-decoder"),Qnt.forEach(t),SDo=r(bAe," \u2014 "),aq=n(bAe,"A",{href:!0});var Hnt=s(aq);PDo=r(Hnt,"VisionEncoderDecoderModel"),Hnt.forEach(t),$Do=r(bAe," (Vision Encoder decoder model)"),bAe.forEach(t),Wnt.forEach(t),IDo=i(oa),Fv=n(oa,"P",{});var vAe=s(Fv);jDo=r(vAe,"The model is set in evaluation mode by default using "),bde=n(vAe,"CODE",{});var Unt=s(bde);NDo=r(Unt,"model.eval()"),Unt.forEach(t),DDo=r(vAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vde=n(vAe,"CODE",{});var Jnt=s(vde);qDo=r(Jnt,"model.train()"),Jnt.forEach(t),vAe.forEach(t),GDo=i(oa),Tde=n(oa,"P",{});var Ynt=s(Tde);ODo=r(Ynt,"Examples:"),Ynt.forEach(t),XDo=i(oa),m(R3.$$.fragment,oa),oa.forEach(t),Cl.forEach(t),uRe=i(d),Xd=n(d,"H2",{class:!0});var LPe=s(Xd);Cv=n(LPe,"A",{id:!0,class:!0,href:!0});var Knt=s(Cv);Fde=n(Knt,"SPAN",{});var Znt=s(Fde);m(S3.$$.fragment,Znt),Znt.forEach(t),Knt.forEach(t),VDo=i(LPe),Cde=n(LPe,"SPAN",{});var est=s(Cde);zDo=r(est,"AutoModelForAudioClassification"),est.forEach(t),LPe.forEach(t),bRe=i(d),cr=n(d,"DIV",{class:!0});var El=s(cr);m(P3.$$.fragment,El),WDo=i(El),Vd=n(El,"P",{});var NW=s(Vd);QDo=r(NW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),Mde=n(NW,"CODE",{});var ost=s(Mde);HDo=r(ost,"from_pretrained()"),ost.forEach(t),UDo=r(NW,"class method or the "),Ede=n(NW,"CODE",{});var rst=s(Ede);JDo=r(rst,"from_config()"),rst.forEach(t),YDo=r(NW,`class
method.`),NW.forEach(t),KDo=i(El),$3=n(El,"P",{});var BPe=s($3);ZDo=r(BPe,"This class cannot be instantiated directly using "),yde=n(BPe,"CODE",{});var tst=s(yde);eqo=r(tst,"__init__()"),tst.forEach(t),oqo=r(BPe," (throws an error)."),BPe.forEach(t),rqo=i(El),nt=n(El,"DIV",{class:!0});var yl=s(nt);m(I3.$$.fragment,yl),tqo=i(yl),wde=n(yl,"P",{});var ast=s(wde);aqo=r(ast,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),ast.forEach(t),nqo=i(yl),zd=n(yl,"P",{});var DW=s(zd);sqo=r(DW,`Note:
Loading a model from its configuration file does `),Ade=n(DW,"STRONG",{});var nst=s(Ade);lqo=r(nst,"not"),nst.forEach(t),iqo=r(DW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lde=n(DW,"CODE",{});var sst=s(Lde);dqo=r(sst,"from_pretrained()"),sst.forEach(t),cqo=r(DW,"to load the model weights."),DW.forEach(t),fqo=i(yl),Bde=n(yl,"P",{});var lst=s(Bde);mqo=r(lst,"Examples:"),lst.forEach(t),gqo=i(yl),m(j3.$$.fragment,yl),yl.forEach(t),hqo=i(El),Ye=n(El,"DIV",{class:!0});var ra=s(Ye);m(N3.$$.fragment,ra),pqo=i(ra),xde=n(ra,"P",{});var ist=s(xde);_qo=r(ist,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),ist.forEach(t),uqo=i(ra),ln=n(ra,"P",{});var RM=s(ln);bqo=r(RM,"The model class to instantiate is selected based on the "),kde=n(RM,"CODE",{});var dst=s(kde);vqo=r(dst,"model_type"),dst.forEach(t),Tqo=r(RM,` property of the config object (either
passed as an argument or loaded from `),Rde=n(RM,"CODE",{});var cst=s(Rde);Fqo=r(cst,"pretrained_model_name_or_path"),cst.forEach(t),Cqo=r(RM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sde=n(RM,"CODE",{});var fst=s(Sde);Mqo=r(fst,"pretrained_model_name_or_path"),fst.forEach(t),Eqo=r(RM,":"),RM.forEach(t),yqo=i(ra),ke=n(ra,"UL",{});var Go=s(ke);Mv=n(Go,"LI",{});var TAe=s(Mv);Pde=n(TAe,"STRONG",{});var mst=s(Pde);wqo=r(mst,"data2vec-audio"),mst.forEach(t),Aqo=r(TAe," \u2014 "),nq=n(TAe,"A",{href:!0});var gst=s(nq);Lqo=r(gst,"Data2VecAudioForSequenceClassification"),gst.forEach(t),Bqo=r(TAe," (Data2VecAudio model)"),TAe.forEach(t),xqo=i(Go),Ev=n(Go,"LI",{});var FAe=s(Ev);$de=n(FAe,"STRONG",{});var hst=s($de);kqo=r(hst,"hubert"),hst.forEach(t),Rqo=r(FAe," \u2014 "),sq=n(FAe,"A",{href:!0});var pst=s(sq);Sqo=r(pst,"HubertForSequenceClassification"),pst.forEach(t),Pqo=r(FAe," (Hubert model)"),FAe.forEach(t),$qo=i(Go),yv=n(Go,"LI",{});var CAe=s(yv);Ide=n(CAe,"STRONG",{});var _st=s(Ide);Iqo=r(_st,"sew"),_st.forEach(t),jqo=r(CAe," \u2014 "),lq=n(CAe,"A",{href:!0});var ust=s(lq);Nqo=r(ust,"SEWForSequenceClassification"),ust.forEach(t),Dqo=r(CAe," (SEW model)"),CAe.forEach(t),qqo=i(Go),wv=n(Go,"LI",{});var MAe=s(wv);jde=n(MAe,"STRONG",{});var bst=s(jde);Gqo=r(bst,"sew-d"),bst.forEach(t),Oqo=r(MAe," \u2014 "),iq=n(MAe,"A",{href:!0});var vst=s(iq);Xqo=r(vst,"SEWDForSequenceClassification"),vst.forEach(t),Vqo=r(MAe," (SEW-D model)"),MAe.forEach(t),zqo=i(Go),Av=n(Go,"LI",{});var EAe=s(Av);Nde=n(EAe,"STRONG",{});var Tst=s(Nde);Wqo=r(Tst,"unispeech"),Tst.forEach(t),Qqo=r(EAe," \u2014 "),dq=n(EAe,"A",{href:!0});var Fst=s(dq);Hqo=r(Fst,"UniSpeechForSequenceClassification"),Fst.forEach(t),Uqo=r(EAe," (UniSpeech model)"),EAe.forEach(t),Jqo=i(Go),Lv=n(Go,"LI",{});var yAe=s(Lv);Dde=n(yAe,"STRONG",{});var Cst=s(Dde);Yqo=r(Cst,"unispeech-sat"),Cst.forEach(t),Kqo=r(yAe," \u2014 "),cq=n(yAe,"A",{href:!0});var Mst=s(cq);Zqo=r(Mst,"UniSpeechSatForSequenceClassification"),Mst.forEach(t),eGo=r(yAe," (UniSpeechSat model)"),yAe.forEach(t),oGo=i(Go),Bv=n(Go,"LI",{});var wAe=s(Bv);qde=n(wAe,"STRONG",{});var Est=s(qde);rGo=r(Est,"wav2vec2"),Est.forEach(t),tGo=r(wAe," \u2014 "),fq=n(wAe,"A",{href:!0});var yst=s(fq);aGo=r(yst,"Wav2Vec2ForSequenceClassification"),yst.forEach(t),nGo=r(wAe," (Wav2Vec2 model)"),wAe.forEach(t),sGo=i(Go),xv=n(Go,"LI",{});var AAe=s(xv);Gde=n(AAe,"STRONG",{});var wst=s(Gde);lGo=r(wst,"wavlm"),wst.forEach(t),iGo=r(AAe," \u2014 "),mq=n(AAe,"A",{href:!0});var Ast=s(mq);dGo=r(Ast,"WavLMForSequenceClassification"),Ast.forEach(t),cGo=r(AAe," (WavLM model)"),AAe.forEach(t),Go.forEach(t),fGo=i(ra),kv=n(ra,"P",{});var LAe=s(kv);mGo=r(LAe,"The model is set in evaluation mode by default using "),Ode=n(LAe,"CODE",{});var Lst=s(Ode);gGo=r(Lst,"model.eval()"),Lst.forEach(t),hGo=r(LAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xde=n(LAe,"CODE",{});var Bst=s(Xde);pGo=r(Bst,"model.train()"),Bst.forEach(t),LAe.forEach(t),_Go=i(ra),Vde=n(ra,"P",{});var xst=s(Vde);uGo=r(xst,"Examples:"),xst.forEach(t),bGo=i(ra),m(D3.$$.fragment,ra),ra.forEach(t),El.forEach(t),vRe=i(d),Wd=n(d,"H2",{class:!0});var xPe=s(Wd);Rv=n(xPe,"A",{id:!0,class:!0,href:!0});var kst=s(Rv);zde=n(kst,"SPAN",{});var Rst=s(zde);m(q3.$$.fragment,Rst),Rst.forEach(t),kst.forEach(t),vGo=i(xPe),Wde=n(xPe,"SPAN",{});var Sst=s(Wde);TGo=r(Sst,"AutoModelForAudioFrameClassification"),Sst.forEach(t),xPe.forEach(t),TRe=i(d),fr=n(d,"DIV",{class:!0});var wl=s(fr);m(G3.$$.fragment,wl),FGo=i(wl),Qd=n(wl,"P",{});var qW=s(Qd);CGo=r(qW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Qde=n(qW,"CODE",{});var Pst=s(Qde);MGo=r(Pst,"from_pretrained()"),Pst.forEach(t),EGo=r(qW,"class method or the "),Hde=n(qW,"CODE",{});var $st=s(Hde);yGo=r($st,"from_config()"),$st.forEach(t),wGo=r(qW,`class
method.`),qW.forEach(t),AGo=i(wl),O3=n(wl,"P",{});var kPe=s(O3);LGo=r(kPe,"This class cannot be instantiated directly using "),Ude=n(kPe,"CODE",{});var Ist=s(Ude);BGo=r(Ist,"__init__()"),Ist.forEach(t),xGo=r(kPe," (throws an error)."),kPe.forEach(t),kGo=i(wl),st=n(wl,"DIV",{class:!0});var Al=s(st);m(X3.$$.fragment,Al),RGo=i(Al),Jde=n(Al,"P",{});var jst=s(Jde);SGo=r(jst,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),jst.forEach(t),PGo=i(Al),Hd=n(Al,"P",{});var GW=s(Hd);$Go=r(GW,`Note:
Loading a model from its configuration file does `),Yde=n(GW,"STRONG",{});var Nst=s(Yde);IGo=r(Nst,"not"),Nst.forEach(t),jGo=r(GW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Kde=n(GW,"CODE",{});var Dst=s(Kde);NGo=r(Dst,"from_pretrained()"),Dst.forEach(t),DGo=r(GW,"to load the model weights."),GW.forEach(t),qGo=i(Al),Zde=n(Al,"P",{});var qst=s(Zde);GGo=r(qst,"Examples:"),qst.forEach(t),OGo=i(Al),m(V3.$$.fragment,Al),Al.forEach(t),XGo=i(wl),Ke=n(wl,"DIV",{class:!0});var ta=s(Ke);m(z3.$$.fragment,ta),VGo=i(ta),ece=n(ta,"P",{});var Gst=s(ece);zGo=r(Gst,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Gst.forEach(t),WGo=i(ta),dn=n(ta,"P",{});var SM=s(dn);QGo=r(SM,"The model class to instantiate is selected based on the "),oce=n(SM,"CODE",{});var Ost=s(oce);HGo=r(Ost,"model_type"),Ost.forEach(t),UGo=r(SM,` property of the config object (either
passed as an argument or loaded from `),rce=n(SM,"CODE",{});var Xst=s(rce);JGo=r(Xst,"pretrained_model_name_or_path"),Xst.forEach(t),YGo=r(SM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tce=n(SM,"CODE",{});var Vst=s(tce);KGo=r(Vst,"pretrained_model_name_or_path"),Vst.forEach(t),ZGo=r(SM,":"),SM.forEach(t),eOo=i(ta),cn=n(ta,"UL",{});var PM=s(cn);Sv=n(PM,"LI",{});var BAe=s(Sv);ace=n(BAe,"STRONG",{});var zst=s(ace);oOo=r(zst,"data2vec-audio"),zst.forEach(t),rOo=r(BAe," \u2014 "),gq=n(BAe,"A",{href:!0});var Wst=s(gq);tOo=r(Wst,"Data2VecAudioForAudioFrameClassification"),Wst.forEach(t),aOo=r(BAe," (Data2VecAudio model)"),BAe.forEach(t),nOo=i(PM),Pv=n(PM,"LI",{});var xAe=s(Pv);nce=n(xAe,"STRONG",{});var Qst=s(nce);sOo=r(Qst,"unispeech-sat"),Qst.forEach(t),lOo=r(xAe," \u2014 "),hq=n(xAe,"A",{href:!0});var Hst=s(hq);iOo=r(Hst,"UniSpeechSatForAudioFrameClassification"),Hst.forEach(t),dOo=r(xAe," (UniSpeechSat model)"),xAe.forEach(t),cOo=i(PM),$v=n(PM,"LI",{});var kAe=s($v);sce=n(kAe,"STRONG",{});var Ust=s(sce);fOo=r(Ust,"wav2vec2"),Ust.forEach(t),mOo=r(kAe," \u2014 "),pq=n(kAe,"A",{href:!0});var Jst=s(pq);gOo=r(Jst,"Wav2Vec2ForAudioFrameClassification"),Jst.forEach(t),hOo=r(kAe," (Wav2Vec2 model)"),kAe.forEach(t),pOo=i(PM),Iv=n(PM,"LI",{});var RAe=s(Iv);lce=n(RAe,"STRONG",{});var Yst=s(lce);_Oo=r(Yst,"wavlm"),Yst.forEach(t),uOo=r(RAe," \u2014 "),_q=n(RAe,"A",{href:!0});var Kst=s(_q);bOo=r(Kst,"WavLMForAudioFrameClassification"),Kst.forEach(t),vOo=r(RAe," (WavLM model)"),RAe.forEach(t),PM.forEach(t),TOo=i(ta),jv=n(ta,"P",{});var SAe=s(jv);FOo=r(SAe,"The model is set in evaluation mode by default using "),ice=n(SAe,"CODE",{});var Zst=s(ice);COo=r(Zst,"model.eval()"),Zst.forEach(t),MOo=r(SAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dce=n(SAe,"CODE",{});var elt=s(dce);EOo=r(elt,"model.train()"),elt.forEach(t),SAe.forEach(t),yOo=i(ta),cce=n(ta,"P",{});var olt=s(cce);wOo=r(olt,"Examples:"),olt.forEach(t),AOo=i(ta),m(W3.$$.fragment,ta),ta.forEach(t),wl.forEach(t),FRe=i(d),Ud=n(d,"H2",{class:!0});var RPe=s(Ud);Nv=n(RPe,"A",{id:!0,class:!0,href:!0});var rlt=s(Nv);fce=n(rlt,"SPAN",{});var tlt=s(fce);m(Q3.$$.fragment,tlt),tlt.forEach(t),rlt.forEach(t),LOo=i(RPe),mce=n(RPe,"SPAN",{});var alt=s(mce);BOo=r(alt,"AutoModelForCTC"),alt.forEach(t),RPe.forEach(t),CRe=i(d),mr=n(d,"DIV",{class:!0});var Ll=s(mr);m(H3.$$.fragment,Ll),xOo=i(Ll),Jd=n(Ll,"P",{});var OW=s(Jd);kOo=r(OW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),gce=n(OW,"CODE",{});var nlt=s(gce);ROo=r(nlt,"from_pretrained()"),nlt.forEach(t),SOo=r(OW,"class method or the "),hce=n(OW,"CODE",{});var slt=s(hce);POo=r(slt,"from_config()"),slt.forEach(t),$Oo=r(OW,`class
method.`),OW.forEach(t),IOo=i(Ll),U3=n(Ll,"P",{});var SPe=s(U3);jOo=r(SPe,"This class cannot be instantiated directly using "),pce=n(SPe,"CODE",{});var llt=s(pce);NOo=r(llt,"__init__()"),llt.forEach(t),DOo=r(SPe," (throws an error)."),SPe.forEach(t),qOo=i(Ll),lt=n(Ll,"DIV",{class:!0});var Bl=s(lt);m(J3.$$.fragment,Bl),GOo=i(Bl),_ce=n(Bl,"P",{});var ilt=s(_ce);OOo=r(ilt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),ilt.forEach(t),XOo=i(Bl),Yd=n(Bl,"P",{});var XW=s(Yd);VOo=r(XW,`Note:
Loading a model from its configuration file does `),uce=n(XW,"STRONG",{});var dlt=s(uce);zOo=r(dlt,"not"),dlt.forEach(t),WOo=r(XW,` load the model weights. It only affects the
model\u2019s configuration. Use `),bce=n(XW,"CODE",{});var clt=s(bce);QOo=r(clt,"from_pretrained()"),clt.forEach(t),HOo=r(XW,"to load the model weights."),XW.forEach(t),UOo=i(Bl),vce=n(Bl,"P",{});var flt=s(vce);JOo=r(flt,"Examples:"),flt.forEach(t),YOo=i(Bl),m(Y3.$$.fragment,Bl),Bl.forEach(t),KOo=i(Ll),Ze=n(Ll,"DIV",{class:!0});var aa=s(Ze);m(K3.$$.fragment,aa),ZOo=i(aa),Tce=n(aa,"P",{});var mlt=s(Tce);eXo=r(mlt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),mlt.forEach(t),oXo=i(aa),fn=n(aa,"P",{});var $M=s(fn);rXo=r($M,"The model class to instantiate is selected based on the "),Fce=n($M,"CODE",{});var glt=s(Fce);tXo=r(glt,"model_type"),glt.forEach(t),aXo=r($M,` property of the config object (either
passed as an argument or loaded from `),Cce=n($M,"CODE",{});var hlt=s(Cce);nXo=r(hlt,"pretrained_model_name_or_path"),hlt.forEach(t),sXo=r($M,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mce=n($M,"CODE",{});var plt=s(Mce);lXo=r(plt,"pretrained_model_name_or_path"),plt.forEach(t),iXo=r($M,":"),$M.forEach(t),dXo=i(aa),Re=n(aa,"UL",{});var Oo=s(Re);Dv=n(Oo,"LI",{});var PAe=s(Dv);Ece=n(PAe,"STRONG",{});var _lt=s(Ece);cXo=r(_lt,"data2vec-audio"),_lt.forEach(t),fXo=r(PAe," \u2014 "),uq=n(PAe,"A",{href:!0});var ult=s(uq);mXo=r(ult,"Data2VecAudioForCTC"),ult.forEach(t),gXo=r(PAe," (Data2VecAudio model)"),PAe.forEach(t),hXo=i(Oo),qv=n(Oo,"LI",{});var $Ae=s(qv);yce=n($Ae,"STRONG",{});var blt=s(yce);pXo=r(blt,"hubert"),blt.forEach(t),_Xo=r($Ae," \u2014 "),bq=n($Ae,"A",{href:!0});var vlt=s(bq);uXo=r(vlt,"HubertForCTC"),vlt.forEach(t),bXo=r($Ae," (Hubert model)"),$Ae.forEach(t),vXo=i(Oo),Gv=n(Oo,"LI",{});var IAe=s(Gv);wce=n(IAe,"STRONG",{});var Tlt=s(wce);TXo=r(Tlt,"sew"),Tlt.forEach(t),FXo=r(IAe," \u2014 "),vq=n(IAe,"A",{href:!0});var Flt=s(vq);CXo=r(Flt,"SEWForCTC"),Flt.forEach(t),MXo=r(IAe," (SEW model)"),IAe.forEach(t),EXo=i(Oo),Ov=n(Oo,"LI",{});var jAe=s(Ov);Ace=n(jAe,"STRONG",{});var Clt=s(Ace);yXo=r(Clt,"sew-d"),Clt.forEach(t),wXo=r(jAe," \u2014 "),Tq=n(jAe,"A",{href:!0});var Mlt=s(Tq);AXo=r(Mlt,"SEWDForCTC"),Mlt.forEach(t),LXo=r(jAe," (SEW-D model)"),jAe.forEach(t),BXo=i(Oo),Xv=n(Oo,"LI",{});var NAe=s(Xv);Lce=n(NAe,"STRONG",{});var Elt=s(Lce);xXo=r(Elt,"unispeech"),Elt.forEach(t),kXo=r(NAe," \u2014 "),Fq=n(NAe,"A",{href:!0});var ylt=s(Fq);RXo=r(ylt,"UniSpeechForCTC"),ylt.forEach(t),SXo=r(NAe," (UniSpeech model)"),NAe.forEach(t),PXo=i(Oo),Vv=n(Oo,"LI",{});var DAe=s(Vv);Bce=n(DAe,"STRONG",{});var wlt=s(Bce);$Xo=r(wlt,"unispeech-sat"),wlt.forEach(t),IXo=r(DAe," \u2014 "),Cq=n(DAe,"A",{href:!0});var Alt=s(Cq);jXo=r(Alt,"UniSpeechSatForCTC"),Alt.forEach(t),NXo=r(DAe," (UniSpeechSat model)"),DAe.forEach(t),DXo=i(Oo),zv=n(Oo,"LI",{});var qAe=s(zv);xce=n(qAe,"STRONG",{});var Llt=s(xce);qXo=r(Llt,"wav2vec2"),Llt.forEach(t),GXo=r(qAe," \u2014 "),Mq=n(qAe,"A",{href:!0});var Blt=s(Mq);OXo=r(Blt,"Wav2Vec2ForCTC"),Blt.forEach(t),XXo=r(qAe," (Wav2Vec2 model)"),qAe.forEach(t),VXo=i(Oo),Wv=n(Oo,"LI",{});var GAe=s(Wv);kce=n(GAe,"STRONG",{});var xlt=s(kce);zXo=r(xlt,"wavlm"),xlt.forEach(t),WXo=r(GAe," \u2014 "),Eq=n(GAe,"A",{href:!0});var klt=s(Eq);QXo=r(klt,"WavLMForCTC"),klt.forEach(t),HXo=r(GAe," (WavLM model)"),GAe.forEach(t),Oo.forEach(t),UXo=i(aa),Qv=n(aa,"P",{});var OAe=s(Qv);JXo=r(OAe,"The model is set in evaluation mode by default using "),Rce=n(OAe,"CODE",{});var Rlt=s(Rce);YXo=r(Rlt,"model.eval()"),Rlt.forEach(t),KXo=r(OAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sce=n(OAe,"CODE",{});var Slt=s(Sce);ZXo=r(Slt,"model.train()"),Slt.forEach(t),OAe.forEach(t),eVo=i(aa),Pce=n(aa,"P",{});var Plt=s(Pce);oVo=r(Plt,"Examples:"),Plt.forEach(t),rVo=i(aa),m(Z3.$$.fragment,aa),aa.forEach(t),Ll.forEach(t),MRe=i(d),Kd=n(d,"H2",{class:!0});var PPe=s(Kd);Hv=n(PPe,"A",{id:!0,class:!0,href:!0});var $lt=s(Hv);$ce=n($lt,"SPAN",{});var Ilt=s($ce);m(ey.$$.fragment,Ilt),Ilt.forEach(t),$lt.forEach(t),tVo=i(PPe),Ice=n(PPe,"SPAN",{});var jlt=s(Ice);aVo=r(jlt,"AutoModelForSpeechSeq2Seq"),jlt.forEach(t),PPe.forEach(t),ERe=i(d),gr=n(d,"DIV",{class:!0});var xl=s(gr);m(oy.$$.fragment,xl),nVo=i(xl),Zd=n(xl,"P",{});var VW=s(Zd);sVo=r(VW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),jce=n(VW,"CODE",{});var Nlt=s(jce);lVo=r(Nlt,"from_pretrained()"),Nlt.forEach(t),iVo=r(VW,"class method or the "),Nce=n(VW,"CODE",{});var Dlt=s(Nce);dVo=r(Dlt,"from_config()"),Dlt.forEach(t),cVo=r(VW,`class
method.`),VW.forEach(t),fVo=i(xl),ry=n(xl,"P",{});var $Pe=s(ry);mVo=r($Pe,"This class cannot be instantiated directly using "),Dce=n($Pe,"CODE",{});var qlt=s(Dce);gVo=r(qlt,"__init__()"),qlt.forEach(t),hVo=r($Pe," (throws an error)."),$Pe.forEach(t),pVo=i(xl),it=n(xl,"DIV",{class:!0});var kl=s(it);m(ty.$$.fragment,kl),_Vo=i(kl),qce=n(kl,"P",{});var Glt=s(qce);uVo=r(Glt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Glt.forEach(t),bVo=i(kl),ec=n(kl,"P",{});var zW=s(ec);vVo=r(zW,`Note:
Loading a model from its configuration file does `),Gce=n(zW,"STRONG",{});var Olt=s(Gce);TVo=r(Olt,"not"),Olt.forEach(t),FVo=r(zW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Oce=n(zW,"CODE",{});var Xlt=s(Oce);CVo=r(Xlt,"from_pretrained()"),Xlt.forEach(t),MVo=r(zW,"to load the model weights."),zW.forEach(t),EVo=i(kl),Xce=n(kl,"P",{});var Vlt=s(Xce);yVo=r(Vlt,"Examples:"),Vlt.forEach(t),wVo=i(kl),m(ay.$$.fragment,kl),kl.forEach(t),AVo=i(xl),eo=n(xl,"DIV",{class:!0});var na=s(eo);m(ny.$$.fragment,na),LVo=i(na),Vce=n(na,"P",{});var zlt=s(Vce);BVo=r(zlt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),zlt.forEach(t),xVo=i(na),mn=n(na,"P",{});var IM=s(mn);kVo=r(IM,"The model class to instantiate is selected based on the "),zce=n(IM,"CODE",{});var Wlt=s(zce);RVo=r(Wlt,"model_type"),Wlt.forEach(t),SVo=r(IM,` property of the config object (either
passed as an argument or loaded from `),Wce=n(IM,"CODE",{});var Qlt=s(Wce);PVo=r(Qlt,"pretrained_model_name_or_path"),Qlt.forEach(t),$Vo=r(IM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qce=n(IM,"CODE",{});var Hlt=s(Qce);IVo=r(Hlt,"pretrained_model_name_or_path"),Hlt.forEach(t),jVo=r(IM,":"),IM.forEach(t),NVo=i(na),sy=n(na,"UL",{});var IPe=s(sy);Uv=n(IPe,"LI",{});var XAe=s(Uv);Hce=n(XAe,"STRONG",{});var Ult=s(Hce);DVo=r(Ult,"speech-encoder-decoder"),Ult.forEach(t),qVo=r(XAe," \u2014 "),yq=n(XAe,"A",{href:!0});var Jlt=s(yq);GVo=r(Jlt,"SpeechEncoderDecoderModel"),Jlt.forEach(t),OVo=r(XAe," (Speech Encoder decoder model)"),XAe.forEach(t),XVo=i(IPe),Jv=n(IPe,"LI",{});var VAe=s(Jv);Uce=n(VAe,"STRONG",{});var Ylt=s(Uce);VVo=r(Ylt,"speech_to_text"),Ylt.forEach(t),zVo=r(VAe," \u2014 "),wq=n(VAe,"A",{href:!0});var Klt=s(wq);WVo=r(Klt,"Speech2TextForConditionalGeneration"),Klt.forEach(t),QVo=r(VAe," (Speech2Text model)"),VAe.forEach(t),IPe.forEach(t),HVo=i(na),Yv=n(na,"P",{});var zAe=s(Yv);UVo=r(zAe,"The model is set in evaluation mode by default using "),Jce=n(zAe,"CODE",{});var Zlt=s(Jce);JVo=r(Zlt,"model.eval()"),Zlt.forEach(t),YVo=r(zAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yce=n(zAe,"CODE",{});var eit=s(Yce);KVo=r(eit,"model.train()"),eit.forEach(t),zAe.forEach(t),ZVo=i(na),Kce=n(na,"P",{});var oit=s(Kce);ezo=r(oit,"Examples:"),oit.forEach(t),ozo=i(na),m(ly.$$.fragment,na),na.forEach(t),xl.forEach(t),yRe=i(d),oc=n(d,"H2",{class:!0});var jPe=s(oc);Kv=n(jPe,"A",{id:!0,class:!0,href:!0});var rit=s(Kv);Zce=n(rit,"SPAN",{});var tit=s(Zce);m(iy.$$.fragment,tit),tit.forEach(t),rit.forEach(t),rzo=i(jPe),efe=n(jPe,"SPAN",{});var ait=s(efe);tzo=r(ait,"AutoModelForAudioXVector"),ait.forEach(t),jPe.forEach(t),wRe=i(d),hr=n(d,"DIV",{class:!0});var Rl=s(hr);m(dy.$$.fragment,Rl),azo=i(Rl),rc=n(Rl,"P",{});var WW=s(rc);nzo=r(WW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),ofe=n(WW,"CODE",{});var nit=s(ofe);szo=r(nit,"from_pretrained()"),nit.forEach(t),lzo=r(WW,"class method or the "),rfe=n(WW,"CODE",{});var sit=s(rfe);izo=r(sit,"from_config()"),sit.forEach(t),dzo=r(WW,`class
method.`),WW.forEach(t),czo=i(Rl),cy=n(Rl,"P",{});var NPe=s(cy);fzo=r(NPe,"This class cannot be instantiated directly using "),tfe=n(NPe,"CODE",{});var lit=s(tfe);mzo=r(lit,"__init__()"),lit.forEach(t),gzo=r(NPe," (throws an error)."),NPe.forEach(t),hzo=i(Rl),dt=n(Rl,"DIV",{class:!0});var Sl=s(dt);m(fy.$$.fragment,Sl),pzo=i(Sl),afe=n(Sl,"P",{});var iit=s(afe);_zo=r(iit,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),iit.forEach(t),uzo=i(Sl),tc=n(Sl,"P",{});var QW=s(tc);bzo=r(QW,`Note:
Loading a model from its configuration file does `),nfe=n(QW,"STRONG",{});var dit=s(nfe);vzo=r(dit,"not"),dit.forEach(t),Tzo=r(QW,` load the model weights. It only affects the
model\u2019s configuration. Use `),sfe=n(QW,"CODE",{});var cit=s(sfe);Fzo=r(cit,"from_pretrained()"),cit.forEach(t),Czo=r(QW,"to load the model weights."),QW.forEach(t),Mzo=i(Sl),lfe=n(Sl,"P",{});var fit=s(lfe);Ezo=r(fit,"Examples:"),fit.forEach(t),yzo=i(Sl),m(my.$$.fragment,Sl),Sl.forEach(t),wzo=i(Rl),oo=n(Rl,"DIV",{class:!0});var sa=s(oo);m(gy.$$.fragment,sa),Azo=i(sa),ife=n(sa,"P",{});var mit=s(ife);Lzo=r(mit,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),mit.forEach(t),Bzo=i(sa),gn=n(sa,"P",{});var jM=s(gn);xzo=r(jM,"The model class to instantiate is selected based on the "),dfe=n(jM,"CODE",{});var git=s(dfe);kzo=r(git,"model_type"),git.forEach(t),Rzo=r(jM,` property of the config object (either
passed as an argument or loaded from `),cfe=n(jM,"CODE",{});var hit=s(cfe);Szo=r(hit,"pretrained_model_name_or_path"),hit.forEach(t),Pzo=r(jM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ffe=n(jM,"CODE",{});var pit=s(ffe);$zo=r(pit,"pretrained_model_name_or_path"),pit.forEach(t),Izo=r(jM,":"),jM.forEach(t),jzo=i(sa),hn=n(sa,"UL",{});var NM=s(hn);Zv=n(NM,"LI",{});var WAe=s(Zv);mfe=n(WAe,"STRONG",{});var _it=s(mfe);Nzo=r(_it,"data2vec-audio"),_it.forEach(t),Dzo=r(WAe," \u2014 "),Aq=n(WAe,"A",{href:!0});var uit=s(Aq);qzo=r(uit,"Data2VecAudioForXVector"),uit.forEach(t),Gzo=r(WAe," (Data2VecAudio model)"),WAe.forEach(t),Ozo=i(NM),e6=n(NM,"LI",{});var QAe=s(e6);gfe=n(QAe,"STRONG",{});var bit=s(gfe);Xzo=r(bit,"unispeech-sat"),bit.forEach(t),Vzo=r(QAe," \u2014 "),Lq=n(QAe,"A",{href:!0});var vit=s(Lq);zzo=r(vit,"UniSpeechSatForXVector"),vit.forEach(t),Wzo=r(QAe," (UniSpeechSat model)"),QAe.forEach(t),Qzo=i(NM),o6=n(NM,"LI",{});var HAe=s(o6);hfe=n(HAe,"STRONG",{});var Tit=s(hfe);Hzo=r(Tit,"wav2vec2"),Tit.forEach(t),Uzo=r(HAe," \u2014 "),Bq=n(HAe,"A",{href:!0});var Fit=s(Bq);Jzo=r(Fit,"Wav2Vec2ForXVector"),Fit.forEach(t),Yzo=r(HAe," (Wav2Vec2 model)"),HAe.forEach(t),Kzo=i(NM),r6=n(NM,"LI",{});var UAe=s(r6);pfe=n(UAe,"STRONG",{});var Cit=s(pfe);Zzo=r(Cit,"wavlm"),Cit.forEach(t),eWo=r(UAe," \u2014 "),xq=n(UAe,"A",{href:!0});var Mit=s(xq);oWo=r(Mit,"WavLMForXVector"),Mit.forEach(t),rWo=r(UAe," (WavLM model)"),UAe.forEach(t),NM.forEach(t),tWo=i(sa),t6=n(sa,"P",{});var JAe=s(t6);aWo=r(JAe,"The model is set in evaluation mode by default using "),_fe=n(JAe,"CODE",{});var Eit=s(_fe);nWo=r(Eit,"model.eval()"),Eit.forEach(t),sWo=r(JAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ufe=n(JAe,"CODE",{});var yit=s(ufe);lWo=r(yit,"model.train()"),yit.forEach(t),JAe.forEach(t),iWo=i(sa),bfe=n(sa,"P",{});var wit=s(bfe);dWo=r(wit,"Examples:"),wit.forEach(t),cWo=i(sa),m(hy.$$.fragment,sa),sa.forEach(t),Rl.forEach(t),ARe=i(d),ac=n(d,"H2",{class:!0});var DPe=s(ac);a6=n(DPe,"A",{id:!0,class:!0,href:!0});var Ait=s(a6);vfe=n(Ait,"SPAN",{});var Lit=s(vfe);m(py.$$.fragment,Lit),Lit.forEach(t),Ait.forEach(t),fWo=i(DPe),Tfe=n(DPe,"SPAN",{});var Bit=s(Tfe);mWo=r(Bit,"AutoModelForMaskedImageModeling"),Bit.forEach(t),DPe.forEach(t),LRe=i(d),pr=n(d,"DIV",{class:!0});var Pl=s(pr);m(_y.$$.fragment,Pl),gWo=i(Pl),nc=n(Pl,"P",{});var HW=s(nc);hWo=r(HW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Ffe=n(HW,"CODE",{});var xit=s(Ffe);pWo=r(xit,"from_pretrained()"),xit.forEach(t),_Wo=r(HW,"class method or the "),Cfe=n(HW,"CODE",{});var kit=s(Cfe);uWo=r(kit,"from_config()"),kit.forEach(t),bWo=r(HW,`class
method.`),HW.forEach(t),vWo=i(Pl),uy=n(Pl,"P",{});var qPe=s(uy);TWo=r(qPe,"This class cannot be instantiated directly using "),Mfe=n(qPe,"CODE",{});var Rit=s(Mfe);FWo=r(Rit,"__init__()"),Rit.forEach(t),CWo=r(qPe," (throws an error)."),qPe.forEach(t),MWo=i(Pl),ct=n(Pl,"DIV",{class:!0});var $l=s(ct);m(by.$$.fragment,$l),EWo=i($l),Efe=n($l,"P",{});var Sit=s(Efe);yWo=r(Sit,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Sit.forEach(t),wWo=i($l),sc=n($l,"P",{});var UW=s(sc);AWo=r(UW,`Note:
Loading a model from its configuration file does `),yfe=n(UW,"STRONG",{});var Pit=s(yfe);LWo=r(Pit,"not"),Pit.forEach(t),BWo=r(UW,` load the model weights. It only affects the
model\u2019s configuration. Use `),wfe=n(UW,"CODE",{});var $it=s(wfe);xWo=r($it,"from_pretrained()"),$it.forEach(t),kWo=r(UW,"to load the model weights."),UW.forEach(t),RWo=i($l),Afe=n($l,"P",{});var Iit=s(Afe);SWo=r(Iit,"Examples:"),Iit.forEach(t),PWo=i($l),m(vy.$$.fragment,$l),$l.forEach(t),$Wo=i(Pl),ro=n(Pl,"DIV",{class:!0});var la=s(ro);m(Ty.$$.fragment,la),IWo=i(la),Lfe=n(la,"P",{});var jit=s(Lfe);jWo=r(jit,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),jit.forEach(t),NWo=i(la),pn=n(la,"P",{});var DM=s(pn);DWo=r(DM,"The model class to instantiate is selected based on the "),Bfe=n(DM,"CODE",{});var Nit=s(Bfe);qWo=r(Nit,"model_type"),Nit.forEach(t),GWo=r(DM,` property of the config object (either
passed as an argument or loaded from `),xfe=n(DM,"CODE",{});var Dit=s(xfe);OWo=r(Dit,"pretrained_model_name_or_path"),Dit.forEach(t),XWo=r(DM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kfe=n(DM,"CODE",{});var qit=s(kfe);VWo=r(qit,"pretrained_model_name_or_path"),qit.forEach(t),zWo=r(DM,":"),DM.forEach(t),WWo=i(la),lc=n(la,"UL",{});var JW=s(lc);n6=n(JW,"LI",{});var YAe=s(n6);Rfe=n(YAe,"STRONG",{});var Git=s(Rfe);QWo=r(Git,"deit"),Git.forEach(t),HWo=r(YAe," \u2014 "),kq=n(YAe,"A",{href:!0});var Oit=s(kq);UWo=r(Oit,"DeiTForMaskedImageModeling"),Oit.forEach(t),JWo=r(YAe," (DeiT model)"),YAe.forEach(t),YWo=i(JW),s6=n(JW,"LI",{});var KAe=s(s6);Sfe=n(KAe,"STRONG",{});var Xit=s(Sfe);KWo=r(Xit,"swin"),Xit.forEach(t),ZWo=r(KAe," \u2014 "),Rq=n(KAe,"A",{href:!0});var Vit=s(Rq);eQo=r(Vit,"SwinForMaskedImageModeling"),Vit.forEach(t),oQo=r(KAe," (Swin model)"),KAe.forEach(t),rQo=i(JW),l6=n(JW,"LI",{});var ZAe=s(l6);Pfe=n(ZAe,"STRONG",{});var zit=s(Pfe);tQo=r(zit,"vit"),zit.forEach(t),aQo=r(ZAe," \u2014 "),Sq=n(ZAe,"A",{href:!0});var Wit=s(Sq);nQo=r(Wit,"ViTForMaskedImageModeling"),Wit.forEach(t),sQo=r(ZAe," (ViT model)"),ZAe.forEach(t),JW.forEach(t),lQo=i(la),i6=n(la,"P",{});var eLe=s(i6);iQo=r(eLe,"The model is set in evaluation mode by default using "),$fe=n(eLe,"CODE",{});var Qit=s($fe);dQo=r(Qit,"model.eval()"),Qit.forEach(t),cQo=r(eLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ife=n(eLe,"CODE",{});var Hit=s(Ife);fQo=r(Hit,"model.train()"),Hit.forEach(t),eLe.forEach(t),mQo=i(la),jfe=n(la,"P",{});var Uit=s(jfe);gQo=r(Uit,"Examples:"),Uit.forEach(t),hQo=i(la),m(Fy.$$.fragment,la),la.forEach(t),Pl.forEach(t),BRe=i(d),ic=n(d,"H2",{class:!0});var GPe=s(ic);d6=n(GPe,"A",{id:!0,class:!0,href:!0});var Jit=s(d6);Nfe=n(Jit,"SPAN",{});var Yit=s(Nfe);m(Cy.$$.fragment,Yit),Yit.forEach(t),Jit.forEach(t),pQo=i(GPe),Dfe=n(GPe,"SPAN",{});var Kit=s(Dfe);_Qo=r(Kit,"AutoModelForObjectDetection"),Kit.forEach(t),GPe.forEach(t),xRe=i(d),_r=n(d,"DIV",{class:!0});var Il=s(_r);m(My.$$.fragment,Il),uQo=i(Il),dc=n(Il,"P",{});var YW=s(dc);bQo=r(YW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),qfe=n(YW,"CODE",{});var Zit=s(qfe);vQo=r(Zit,"from_pretrained()"),Zit.forEach(t),TQo=r(YW,"class method or the "),Gfe=n(YW,"CODE",{});var edt=s(Gfe);FQo=r(edt,"from_config()"),edt.forEach(t),CQo=r(YW,`class
method.`),YW.forEach(t),MQo=i(Il),Ey=n(Il,"P",{});var OPe=s(Ey);EQo=r(OPe,"This class cannot be instantiated directly using "),Ofe=n(OPe,"CODE",{});var odt=s(Ofe);yQo=r(odt,"__init__()"),odt.forEach(t),wQo=r(OPe," (throws an error)."),OPe.forEach(t),AQo=i(Il),ft=n(Il,"DIV",{class:!0});var jl=s(ft);m(yy.$$.fragment,jl),LQo=i(jl),Xfe=n(jl,"P",{});var rdt=s(Xfe);BQo=r(rdt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),rdt.forEach(t),xQo=i(jl),cc=n(jl,"P",{});var KW=s(cc);kQo=r(KW,`Note:
Loading a model from its configuration file does `),Vfe=n(KW,"STRONG",{});var tdt=s(Vfe);RQo=r(tdt,"not"),tdt.forEach(t),SQo=r(KW,` load the model weights. It only affects the
model\u2019s configuration. Use `),zfe=n(KW,"CODE",{});var adt=s(zfe);PQo=r(adt,"from_pretrained()"),adt.forEach(t),$Qo=r(KW,"to load the model weights."),KW.forEach(t),IQo=i(jl),Wfe=n(jl,"P",{});var ndt=s(Wfe);jQo=r(ndt,"Examples:"),ndt.forEach(t),NQo=i(jl),m(wy.$$.fragment,jl),jl.forEach(t),DQo=i(Il),to=n(Il,"DIV",{class:!0});var ia=s(to);m(Ay.$$.fragment,ia),qQo=i(ia),Qfe=n(ia,"P",{});var sdt=s(Qfe);GQo=r(sdt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),sdt.forEach(t),OQo=i(ia),_n=n(ia,"P",{});var qM=s(_n);XQo=r(qM,"The model class to instantiate is selected based on the "),Hfe=n(qM,"CODE",{});var ldt=s(Hfe);VQo=r(ldt,"model_type"),ldt.forEach(t),zQo=r(qM,` property of the config object (either
passed as an argument or loaded from `),Ufe=n(qM,"CODE",{});var idt=s(Ufe);WQo=r(idt,"pretrained_model_name_or_path"),idt.forEach(t),QQo=r(qM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jfe=n(qM,"CODE",{});var ddt=s(Jfe);HQo=r(ddt,"pretrained_model_name_or_path"),ddt.forEach(t),UQo=r(qM,":"),qM.forEach(t),JQo=i(ia),Yfe=n(ia,"UL",{});var cdt=s(Yfe);c6=n(cdt,"LI",{});var oLe=s(c6);Kfe=n(oLe,"STRONG",{});var fdt=s(Kfe);YQo=r(fdt,"detr"),fdt.forEach(t),KQo=r(oLe," \u2014 "),Pq=n(oLe,"A",{href:!0});var mdt=s(Pq);ZQo=r(mdt,"DetrForObjectDetection"),mdt.forEach(t),eHo=r(oLe," (DETR model)"),oLe.forEach(t),cdt.forEach(t),oHo=i(ia),f6=n(ia,"P",{});var rLe=s(f6);rHo=r(rLe,"The model is set in evaluation mode by default using "),Zfe=n(rLe,"CODE",{});var gdt=s(Zfe);tHo=r(gdt,"model.eval()"),gdt.forEach(t),aHo=r(rLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eme=n(rLe,"CODE",{});var hdt=s(eme);nHo=r(hdt,"model.train()"),hdt.forEach(t),rLe.forEach(t),sHo=i(ia),ome=n(ia,"P",{});var pdt=s(ome);lHo=r(pdt,"Examples:"),pdt.forEach(t),iHo=i(ia),m(Ly.$$.fragment,ia),ia.forEach(t),Il.forEach(t),kRe=i(d),fc=n(d,"H2",{class:!0});var XPe=s(fc);m6=n(XPe,"A",{id:!0,class:!0,href:!0});var _dt=s(m6);rme=n(_dt,"SPAN",{});var udt=s(rme);m(By.$$.fragment,udt),udt.forEach(t),_dt.forEach(t),dHo=i(XPe),tme=n(XPe,"SPAN",{});var bdt=s(tme);cHo=r(bdt,"AutoModelForImageSegmentation"),bdt.forEach(t),XPe.forEach(t),RRe=i(d),ur=n(d,"DIV",{class:!0});var Nl=s(ur);m(xy.$$.fragment,Nl),fHo=i(Nl),mc=n(Nl,"P",{});var ZW=s(mc);mHo=r(ZW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),ame=n(ZW,"CODE",{});var vdt=s(ame);gHo=r(vdt,"from_pretrained()"),vdt.forEach(t),hHo=r(ZW,"class method or the "),nme=n(ZW,"CODE",{});var Tdt=s(nme);pHo=r(Tdt,"from_config()"),Tdt.forEach(t),_Ho=r(ZW,`class
method.`),ZW.forEach(t),uHo=i(Nl),ky=n(Nl,"P",{});var VPe=s(ky);bHo=r(VPe,"This class cannot be instantiated directly using "),sme=n(VPe,"CODE",{});var Fdt=s(sme);vHo=r(Fdt,"__init__()"),Fdt.forEach(t),THo=r(VPe," (throws an error)."),VPe.forEach(t),FHo=i(Nl),mt=n(Nl,"DIV",{class:!0});var Dl=s(mt);m(Ry.$$.fragment,Dl),CHo=i(Dl),lme=n(Dl,"P",{});var Cdt=s(lme);MHo=r(Cdt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Cdt.forEach(t),EHo=i(Dl),gc=n(Dl,"P",{});var eQ=s(gc);yHo=r(eQ,`Note:
Loading a model from its configuration file does `),ime=n(eQ,"STRONG",{});var Mdt=s(ime);wHo=r(Mdt,"not"),Mdt.forEach(t),AHo=r(eQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),dme=n(eQ,"CODE",{});var Edt=s(dme);LHo=r(Edt,"from_pretrained()"),Edt.forEach(t),BHo=r(eQ,"to load the model weights."),eQ.forEach(t),xHo=i(Dl),cme=n(Dl,"P",{});var ydt=s(cme);kHo=r(ydt,"Examples:"),ydt.forEach(t),RHo=i(Dl),m(Sy.$$.fragment,Dl),Dl.forEach(t),SHo=i(Nl),ao=n(Nl,"DIV",{class:!0});var da=s(ao);m(Py.$$.fragment,da),PHo=i(da),fme=n(da,"P",{});var wdt=s(fme);$Ho=r(wdt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),wdt.forEach(t),IHo=i(da),un=n(da,"P",{});var GM=s(un);jHo=r(GM,"The model class to instantiate is selected based on the "),mme=n(GM,"CODE",{});var Adt=s(mme);NHo=r(Adt,"model_type"),Adt.forEach(t),DHo=r(GM,` property of the config object (either
passed as an argument or loaded from `),gme=n(GM,"CODE",{});var Ldt=s(gme);qHo=r(Ldt,"pretrained_model_name_or_path"),Ldt.forEach(t),GHo=r(GM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hme=n(GM,"CODE",{});var Bdt=s(hme);OHo=r(Bdt,"pretrained_model_name_or_path"),Bdt.forEach(t),XHo=r(GM,":"),GM.forEach(t),VHo=i(da),pme=n(da,"UL",{});var xdt=s(pme);g6=n(xdt,"LI",{});var tLe=s(g6);_me=n(tLe,"STRONG",{});var kdt=s(_me);zHo=r(kdt,"detr"),kdt.forEach(t),WHo=r(tLe," \u2014 "),$q=n(tLe,"A",{href:!0});var Rdt=s($q);QHo=r(Rdt,"DetrForSegmentation"),Rdt.forEach(t),HHo=r(tLe," (DETR model)"),tLe.forEach(t),xdt.forEach(t),UHo=i(da),h6=n(da,"P",{});var aLe=s(h6);JHo=r(aLe,"The model is set in evaluation mode by default using "),ume=n(aLe,"CODE",{});var Sdt=s(ume);YHo=r(Sdt,"model.eval()"),Sdt.forEach(t),KHo=r(aLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bme=n(aLe,"CODE",{});var Pdt=s(bme);ZHo=r(Pdt,"model.train()"),Pdt.forEach(t),aLe.forEach(t),eUo=i(da),vme=n(da,"P",{});var $dt=s(vme);oUo=r($dt,"Examples:"),$dt.forEach(t),rUo=i(da),m($y.$$.fragment,da),da.forEach(t),Nl.forEach(t),SRe=i(d),hc=n(d,"H2",{class:!0});var zPe=s(hc);p6=n(zPe,"A",{id:!0,class:!0,href:!0});var Idt=s(p6);Tme=n(Idt,"SPAN",{});var jdt=s(Tme);m(Iy.$$.fragment,jdt),jdt.forEach(t),Idt.forEach(t),tUo=i(zPe),Fme=n(zPe,"SPAN",{});var Ndt=s(Fme);aUo=r(Ndt,"AutoModelForSemanticSegmentation"),Ndt.forEach(t),zPe.forEach(t),PRe=i(d),br=n(d,"DIV",{class:!0});var ql=s(br);m(jy.$$.fragment,ql),nUo=i(ql),pc=n(ql,"P",{});var oQ=s(pc);sUo=r(oQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Cme=n(oQ,"CODE",{});var Ddt=s(Cme);lUo=r(Ddt,"from_pretrained()"),Ddt.forEach(t),iUo=r(oQ,"class method or the "),Mme=n(oQ,"CODE",{});var qdt=s(Mme);dUo=r(qdt,"from_config()"),qdt.forEach(t),cUo=r(oQ,`class
method.`),oQ.forEach(t),fUo=i(ql),Ny=n(ql,"P",{});var WPe=s(Ny);mUo=r(WPe,"This class cannot be instantiated directly using "),Eme=n(WPe,"CODE",{});var Gdt=s(Eme);gUo=r(Gdt,"__init__()"),Gdt.forEach(t),hUo=r(WPe," (throws an error)."),WPe.forEach(t),pUo=i(ql),gt=n(ql,"DIV",{class:!0});var Gl=s(gt);m(Dy.$$.fragment,Gl),_Uo=i(Gl),yme=n(Gl,"P",{});var Odt=s(yme);uUo=r(Odt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Odt.forEach(t),bUo=i(Gl),_c=n(Gl,"P",{});var rQ=s(_c);vUo=r(rQ,`Note:
Loading a model from its configuration file does `),wme=n(rQ,"STRONG",{});var Xdt=s(wme);TUo=r(Xdt,"not"),Xdt.forEach(t),FUo=r(rQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ame=n(rQ,"CODE",{});var Vdt=s(Ame);CUo=r(Vdt,"from_pretrained()"),Vdt.forEach(t),MUo=r(rQ,"to load the model weights."),rQ.forEach(t),EUo=i(Gl),Lme=n(Gl,"P",{});var zdt=s(Lme);yUo=r(zdt,"Examples:"),zdt.forEach(t),wUo=i(Gl),m(qy.$$.fragment,Gl),Gl.forEach(t),AUo=i(ql),no=n(ql,"DIV",{class:!0});var ca=s(no);m(Gy.$$.fragment,ca),LUo=i(ca),Bme=n(ca,"P",{});var Wdt=s(Bme);BUo=r(Wdt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Wdt.forEach(t),xUo=i(ca),bn=n(ca,"P",{});var OM=s(bn);kUo=r(OM,"The model class to instantiate is selected based on the "),xme=n(OM,"CODE",{});var Qdt=s(xme);RUo=r(Qdt,"model_type"),Qdt.forEach(t),SUo=r(OM,` property of the config object (either
passed as an argument or loaded from `),kme=n(OM,"CODE",{});var Hdt=s(kme);PUo=r(Hdt,"pretrained_model_name_or_path"),Hdt.forEach(t),$Uo=r(OM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rme=n(OM,"CODE",{});var Udt=s(Rme);IUo=r(Udt,"pretrained_model_name_or_path"),Udt.forEach(t),jUo=r(OM,":"),OM.forEach(t),NUo=i(ca),Oy=n(ca,"UL",{});var QPe=s(Oy);_6=n(QPe,"LI",{});var nLe=s(_6);Sme=n(nLe,"STRONG",{});var Jdt=s(Sme);DUo=r(Jdt,"beit"),Jdt.forEach(t),qUo=r(nLe," \u2014 "),Iq=n(nLe,"A",{href:!0});var Ydt=s(Iq);GUo=r(Ydt,"BeitForSemanticSegmentation"),Ydt.forEach(t),OUo=r(nLe," (BEiT model)"),nLe.forEach(t),XUo=i(QPe),u6=n(QPe,"LI",{});var sLe=s(u6);Pme=n(sLe,"STRONG",{});var Kdt=s(Pme);VUo=r(Kdt,"segformer"),Kdt.forEach(t),zUo=r(sLe," \u2014 "),jq=n(sLe,"A",{href:!0});var Zdt=s(jq);WUo=r(Zdt,"SegformerForSemanticSegmentation"),Zdt.forEach(t),QUo=r(sLe," (SegFormer model)"),sLe.forEach(t),QPe.forEach(t),HUo=i(ca),b6=n(ca,"P",{});var lLe=s(b6);UUo=r(lLe,"The model is set in evaluation mode by default using "),$me=n(lLe,"CODE",{});var ect=s($me);JUo=r(ect,"model.eval()"),ect.forEach(t),YUo=r(lLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ime=n(lLe,"CODE",{});var oct=s(Ime);KUo=r(oct,"model.train()"),oct.forEach(t),lLe.forEach(t),ZUo=i(ca),jme=n(ca,"P",{});var rct=s(jme);eJo=r(rct,"Examples:"),rct.forEach(t),oJo=i(ca),m(Xy.$$.fragment,ca),ca.forEach(t),ql.forEach(t),$Re=i(d),uc=n(d,"H2",{class:!0});var HPe=s(uc);v6=n(HPe,"A",{id:!0,class:!0,href:!0});var tct=s(v6);Nme=n(tct,"SPAN",{});var act=s(Nme);m(Vy.$$.fragment,act),act.forEach(t),tct.forEach(t),rJo=i(HPe),Dme=n(HPe,"SPAN",{});var nct=s(Dme);tJo=r(nct,"AutoModelForInstanceSegmentation"),nct.forEach(t),HPe.forEach(t),IRe=i(d),vr=n(d,"DIV",{class:!0});var Ol=s(vr);m(zy.$$.fragment,Ol),aJo=i(Ol),bc=n(Ol,"P",{});var tQ=s(bc);nJo=r(tQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),qme=n(tQ,"CODE",{});var sct=s(qme);sJo=r(sct,"from_pretrained()"),sct.forEach(t),lJo=r(tQ,"class method or the "),Gme=n(tQ,"CODE",{});var lct=s(Gme);iJo=r(lct,"from_config()"),lct.forEach(t),dJo=r(tQ,`class
method.`),tQ.forEach(t),cJo=i(Ol),Wy=n(Ol,"P",{});var UPe=s(Wy);fJo=r(UPe,"This class cannot be instantiated directly using "),Ome=n(UPe,"CODE",{});var ict=s(Ome);mJo=r(ict,"__init__()"),ict.forEach(t),gJo=r(UPe," (throws an error)."),UPe.forEach(t),hJo=i(Ol),ht=n(Ol,"DIV",{class:!0});var Xl=s(ht);m(Qy.$$.fragment,Xl),pJo=i(Xl),Xme=n(Xl,"P",{});var dct=s(Xme);_Jo=r(dct,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),dct.forEach(t),uJo=i(Xl),vc=n(Xl,"P",{});var aQ=s(vc);bJo=r(aQ,`Note:
Loading a model from its configuration file does `),Vme=n(aQ,"STRONG",{});var cct=s(Vme);vJo=r(cct,"not"),cct.forEach(t),TJo=r(aQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),zme=n(aQ,"CODE",{});var fct=s(zme);FJo=r(fct,"from_pretrained()"),fct.forEach(t),CJo=r(aQ,"to load the model weights."),aQ.forEach(t),MJo=i(Xl),Wme=n(Xl,"P",{});var mct=s(Wme);EJo=r(mct,"Examples:"),mct.forEach(t),yJo=i(Xl),m(Hy.$$.fragment,Xl),Xl.forEach(t),wJo=i(Ol),so=n(Ol,"DIV",{class:!0});var fa=s(so);m(Uy.$$.fragment,fa),AJo=i(fa),Qme=n(fa,"P",{});var gct=s(Qme);LJo=r(gct,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),gct.forEach(t),BJo=i(fa),vn=n(fa,"P",{});var XM=s(vn);xJo=r(XM,"The model class to instantiate is selected based on the "),Hme=n(XM,"CODE",{});var hct=s(Hme);kJo=r(hct,"model_type"),hct.forEach(t),RJo=r(XM,` property of the config object (either
passed as an argument or loaded from `),Ume=n(XM,"CODE",{});var pct=s(Ume);SJo=r(pct,"pretrained_model_name_or_path"),pct.forEach(t),PJo=r(XM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jme=n(XM,"CODE",{});var _ct=s(Jme);$Jo=r(_ct,"pretrained_model_name_or_path"),_ct.forEach(t),IJo=r(XM,":"),XM.forEach(t),jJo=i(fa),Yme=n(fa,"UL",{});var uct=s(Yme);T6=n(uct,"LI",{});var iLe=s(T6);Kme=n(iLe,"STRONG",{});var bct=s(Kme);NJo=r(bct,"maskformer"),bct.forEach(t),DJo=r(iLe," \u2014 "),Nq=n(iLe,"A",{href:!0});var vct=s(Nq);qJo=r(vct,"MaskFormerForInstanceSegmentation"),vct.forEach(t),GJo=r(iLe," (MaskFormer model)"),iLe.forEach(t),uct.forEach(t),OJo=i(fa),F6=n(fa,"P",{});var dLe=s(F6);XJo=r(dLe,"The model is set in evaluation mode by default using "),Zme=n(dLe,"CODE",{});var Tct=s(Zme);VJo=r(Tct,"model.eval()"),Tct.forEach(t),zJo=r(dLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ege=n(dLe,"CODE",{});var Fct=s(ege);WJo=r(Fct,"model.train()"),Fct.forEach(t),dLe.forEach(t),QJo=i(fa),oge=n(fa,"P",{});var Cct=s(oge);HJo=r(Cct,"Examples:"),Cct.forEach(t),UJo=i(fa),m(Jy.$$.fragment,fa),fa.forEach(t),Ol.forEach(t),jRe=i(d),Tc=n(d,"H2",{class:!0});var JPe=s(Tc);C6=n(JPe,"A",{id:!0,class:!0,href:!0});var Mct=s(C6);rge=n(Mct,"SPAN",{});var Ect=s(rge);m(Yy.$$.fragment,Ect),Ect.forEach(t),Mct.forEach(t),JJo=i(JPe),tge=n(JPe,"SPAN",{});var yct=s(tge);YJo=r(yct,"TFAutoModel"),yct.forEach(t),JPe.forEach(t),NRe=i(d),Tr=n(d,"DIV",{class:!0});var Vl=s(Tr);m(Ky.$$.fragment,Vl),KJo=i(Vl),Fc=n(Vl,"P",{});var nQ=s(Fc);ZJo=r(nQ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),age=n(nQ,"CODE",{});var wct=s(age);eYo=r(wct,"from_pretrained()"),wct.forEach(t),oYo=r(nQ,"class method or the "),nge=n(nQ,"CODE",{});var Act=s(nge);rYo=r(Act,"from_config()"),Act.forEach(t),tYo=r(nQ,`class
method.`),nQ.forEach(t),aYo=i(Vl),Zy=n(Vl,"P",{});var YPe=s(Zy);nYo=r(YPe,"This class cannot be instantiated directly using "),sge=n(YPe,"CODE",{});var Lct=s(sge);sYo=r(Lct,"__init__()"),Lct.forEach(t),lYo=r(YPe," (throws an error)."),YPe.forEach(t),iYo=i(Vl),pt=n(Vl,"DIV",{class:!0});var zl=s(pt);m(ew.$$.fragment,zl),dYo=i(zl),lge=n(zl,"P",{});var Bct=s(lge);cYo=r(Bct,"Instantiates one of the base model classes of the library from a configuration."),Bct.forEach(t),fYo=i(zl),Cc=n(zl,"P",{});var sQ=s(Cc);mYo=r(sQ,`Note:
Loading a model from its configuration file does `),ige=n(sQ,"STRONG",{});var xct=s(ige);gYo=r(xct,"not"),xct.forEach(t),hYo=r(sQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),dge=n(sQ,"CODE",{});var kct=s(dge);pYo=r(kct,"from_pretrained()"),kct.forEach(t),_Yo=r(sQ,"to load the model weights."),sQ.forEach(t),uYo=i(zl),cge=n(zl,"P",{});var Rct=s(cge);bYo=r(Rct,"Examples:"),Rct.forEach(t),vYo=i(zl),m(ow.$$.fragment,zl),zl.forEach(t),TYo=i(Vl),ho=n(Vl,"DIV",{class:!0});var ba=s(ho);m(rw.$$.fragment,ba),FYo=i(ba),fge=n(ba,"P",{});var Sct=s(fge);CYo=r(Sct,"Instantiate one of the base model classes of the library from a pretrained model."),Sct.forEach(t),MYo=i(ba),Tn=n(ba,"P",{});var VM=s(Tn);EYo=r(VM,"The model class to instantiate is selected based on the "),mge=n(VM,"CODE",{});var Pct=s(mge);yYo=r(Pct,"model_type"),Pct.forEach(t),wYo=r(VM,` property of the config object (either
passed as an argument or loaded from `),gge=n(VM,"CODE",{});var $ct=s(gge);AYo=r($ct,"pretrained_model_name_or_path"),$ct.forEach(t),LYo=r(VM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hge=n(VM,"CODE",{});var Ict=s(hge);BYo=r(Ict,"pretrained_model_name_or_path"),Ict.forEach(t),xYo=r(VM,":"),VM.forEach(t),kYo=i(ba),B=n(ba,"UL",{});var x=s(B);M6=n(x,"LI",{});var cLe=s(M6);pge=n(cLe,"STRONG",{});var jct=s(pge);RYo=r(jct,"albert"),jct.forEach(t),SYo=r(cLe," \u2014 "),Dq=n(cLe,"A",{href:!0});var Nct=s(Dq);PYo=r(Nct,"TFAlbertModel"),Nct.forEach(t),$Yo=r(cLe," (ALBERT model)"),cLe.forEach(t),IYo=i(x),E6=n(x,"LI",{});var fLe=s(E6);_ge=n(fLe,"STRONG",{});var Dct=s(_ge);jYo=r(Dct,"bart"),Dct.forEach(t),NYo=r(fLe," \u2014 "),qq=n(fLe,"A",{href:!0});var qct=s(qq);DYo=r(qct,"TFBartModel"),qct.forEach(t),qYo=r(fLe," (BART model)"),fLe.forEach(t),GYo=i(x),y6=n(x,"LI",{});var mLe=s(y6);uge=n(mLe,"STRONG",{});var Gct=s(uge);OYo=r(Gct,"bert"),Gct.forEach(t),XYo=r(mLe," \u2014 "),Gq=n(mLe,"A",{href:!0});var Oct=s(Gq);VYo=r(Oct,"TFBertModel"),Oct.forEach(t),zYo=r(mLe," (BERT model)"),mLe.forEach(t),WYo=i(x),w6=n(x,"LI",{});var gLe=s(w6);bge=n(gLe,"STRONG",{});var Xct=s(bge);QYo=r(Xct,"blenderbot"),Xct.forEach(t),HYo=r(gLe," \u2014 "),Oq=n(gLe,"A",{href:!0});var Vct=s(Oq);UYo=r(Vct,"TFBlenderbotModel"),Vct.forEach(t),JYo=r(gLe," (Blenderbot model)"),gLe.forEach(t),YYo=i(x),A6=n(x,"LI",{});var hLe=s(A6);vge=n(hLe,"STRONG",{});var zct=s(vge);KYo=r(zct,"blenderbot-small"),zct.forEach(t),ZYo=r(hLe," \u2014 "),Xq=n(hLe,"A",{href:!0});var Wct=s(Xq);eKo=r(Wct,"TFBlenderbotSmallModel"),Wct.forEach(t),oKo=r(hLe," (BlenderbotSmall model)"),hLe.forEach(t),rKo=i(x),L6=n(x,"LI",{});var pLe=s(L6);Tge=n(pLe,"STRONG",{});var Qct=s(Tge);tKo=r(Qct,"camembert"),Qct.forEach(t),aKo=r(pLe," \u2014 "),Vq=n(pLe,"A",{href:!0});var Hct=s(Vq);nKo=r(Hct,"TFCamembertModel"),Hct.forEach(t),sKo=r(pLe," (CamemBERT model)"),pLe.forEach(t),lKo=i(x),B6=n(x,"LI",{});var _Le=s(B6);Fge=n(_Le,"STRONG",{});var Uct=s(Fge);iKo=r(Uct,"clip"),Uct.forEach(t),dKo=r(_Le," \u2014 "),zq=n(_Le,"A",{href:!0});var Jct=s(zq);cKo=r(Jct,"TFCLIPModel"),Jct.forEach(t),fKo=r(_Le," (CLIP model)"),_Le.forEach(t),mKo=i(x),x6=n(x,"LI",{});var uLe=s(x6);Cge=n(uLe,"STRONG",{});var Yct=s(Cge);gKo=r(Yct,"convbert"),Yct.forEach(t),hKo=r(uLe," \u2014 "),Wq=n(uLe,"A",{href:!0});var Kct=s(Wq);pKo=r(Kct,"TFConvBertModel"),Kct.forEach(t),_Ko=r(uLe," (ConvBERT model)"),uLe.forEach(t),uKo=i(x),k6=n(x,"LI",{});var bLe=s(k6);Mge=n(bLe,"STRONG",{});var Zct=s(Mge);bKo=r(Zct,"convnext"),Zct.forEach(t),vKo=r(bLe," \u2014 "),Qq=n(bLe,"A",{href:!0});var eft=s(Qq);TKo=r(eft,"TFConvNextModel"),eft.forEach(t),FKo=r(bLe," (ConvNext model)"),bLe.forEach(t),CKo=i(x),R6=n(x,"LI",{});var vLe=s(R6);Ege=n(vLe,"STRONG",{});var oft=s(Ege);MKo=r(oft,"ctrl"),oft.forEach(t),EKo=r(vLe," \u2014 "),Hq=n(vLe,"A",{href:!0});var rft=s(Hq);yKo=r(rft,"TFCTRLModel"),rft.forEach(t),wKo=r(vLe," (CTRL model)"),vLe.forEach(t),AKo=i(x),S6=n(x,"LI",{});var TLe=s(S6);yge=n(TLe,"STRONG",{});var tft=s(yge);LKo=r(tft,"deberta"),tft.forEach(t),BKo=r(TLe," \u2014 "),Uq=n(TLe,"A",{href:!0});var aft=s(Uq);xKo=r(aft,"TFDebertaModel"),aft.forEach(t),kKo=r(TLe," (DeBERTa model)"),TLe.forEach(t),RKo=i(x),P6=n(x,"LI",{});var FLe=s(P6);wge=n(FLe,"STRONG",{});var nft=s(wge);SKo=r(nft,"deberta-v2"),nft.forEach(t),PKo=r(FLe," \u2014 "),Jq=n(FLe,"A",{href:!0});var sft=s(Jq);$Ko=r(sft,"TFDebertaV2Model"),sft.forEach(t),IKo=r(FLe," (DeBERTa-v2 model)"),FLe.forEach(t),jKo=i(x),$6=n(x,"LI",{});var CLe=s($6);Age=n(CLe,"STRONG",{});var lft=s(Age);NKo=r(lft,"distilbert"),lft.forEach(t),DKo=r(CLe," \u2014 "),Yq=n(CLe,"A",{href:!0});var ift=s(Yq);qKo=r(ift,"TFDistilBertModel"),ift.forEach(t),GKo=r(CLe," (DistilBERT model)"),CLe.forEach(t),OKo=i(x),I6=n(x,"LI",{});var MLe=s(I6);Lge=n(MLe,"STRONG",{});var dft=s(Lge);XKo=r(dft,"dpr"),dft.forEach(t),VKo=r(MLe," \u2014 "),Kq=n(MLe,"A",{href:!0});var cft=s(Kq);zKo=r(cft,"TFDPRQuestionEncoder"),cft.forEach(t),WKo=r(MLe," (DPR model)"),MLe.forEach(t),QKo=i(x),j6=n(x,"LI",{});var ELe=s(j6);Bge=n(ELe,"STRONG",{});var fft=s(Bge);HKo=r(fft,"electra"),fft.forEach(t),UKo=r(ELe," \u2014 "),Zq=n(ELe,"A",{href:!0});var mft=s(Zq);JKo=r(mft,"TFElectraModel"),mft.forEach(t),YKo=r(ELe," (ELECTRA model)"),ELe.forEach(t),KKo=i(x),N6=n(x,"LI",{});var yLe=s(N6);xge=n(yLe,"STRONG",{});var gft=s(xge);ZKo=r(gft,"flaubert"),gft.forEach(t),eZo=r(yLe," \u2014 "),eG=n(yLe,"A",{href:!0});var hft=s(eG);oZo=r(hft,"TFFlaubertModel"),hft.forEach(t),rZo=r(yLe," (FlauBERT model)"),yLe.forEach(t),tZo=i(x),Ws=n(x,"LI",{});var p9=s(Ws);kge=n(p9,"STRONG",{});var pft=s(kge);aZo=r(pft,"funnel"),pft.forEach(t),nZo=r(p9," \u2014 "),oG=n(p9,"A",{href:!0});var _ft=s(oG);sZo=r(_ft,"TFFunnelModel"),_ft.forEach(t),lZo=r(p9," or "),rG=n(p9,"A",{href:!0});var uft=s(rG);iZo=r(uft,"TFFunnelBaseModel"),uft.forEach(t),dZo=r(p9," (Funnel Transformer model)"),p9.forEach(t),cZo=i(x),D6=n(x,"LI",{});var wLe=s(D6);Rge=n(wLe,"STRONG",{});var bft=s(Rge);fZo=r(bft,"gpt2"),bft.forEach(t),mZo=r(wLe," \u2014 "),tG=n(wLe,"A",{href:!0});var vft=s(tG);gZo=r(vft,"TFGPT2Model"),vft.forEach(t),hZo=r(wLe," (OpenAI GPT-2 model)"),wLe.forEach(t),pZo=i(x),q6=n(x,"LI",{});var ALe=s(q6);Sge=n(ALe,"STRONG",{});var Tft=s(Sge);_Zo=r(Tft,"hubert"),Tft.forEach(t),uZo=r(ALe," \u2014 "),aG=n(ALe,"A",{href:!0});var Fft=s(aG);bZo=r(Fft,"TFHubertModel"),Fft.forEach(t),vZo=r(ALe," (Hubert model)"),ALe.forEach(t),TZo=i(x),G6=n(x,"LI",{});var LLe=s(G6);Pge=n(LLe,"STRONG",{});var Cft=s(Pge);FZo=r(Cft,"layoutlm"),Cft.forEach(t),CZo=r(LLe," \u2014 "),nG=n(LLe,"A",{href:!0});var Mft=s(nG);MZo=r(Mft,"TFLayoutLMModel"),Mft.forEach(t),EZo=r(LLe," (LayoutLM model)"),LLe.forEach(t),yZo=i(x),O6=n(x,"LI",{});var BLe=s(O6);$ge=n(BLe,"STRONG",{});var Eft=s($ge);wZo=r(Eft,"led"),Eft.forEach(t),AZo=r(BLe," \u2014 "),sG=n(BLe,"A",{href:!0});var yft=s(sG);LZo=r(yft,"TFLEDModel"),yft.forEach(t),BZo=r(BLe," (LED model)"),BLe.forEach(t),xZo=i(x),X6=n(x,"LI",{});var xLe=s(X6);Ige=n(xLe,"STRONG",{});var wft=s(Ige);kZo=r(wft,"longformer"),wft.forEach(t),RZo=r(xLe," \u2014 "),lG=n(xLe,"A",{href:!0});var Aft=s(lG);SZo=r(Aft,"TFLongformerModel"),Aft.forEach(t),PZo=r(xLe," (Longformer model)"),xLe.forEach(t),$Zo=i(x),V6=n(x,"LI",{});var kLe=s(V6);jge=n(kLe,"STRONG",{});var Lft=s(jge);IZo=r(Lft,"lxmert"),Lft.forEach(t),jZo=r(kLe," \u2014 "),iG=n(kLe,"A",{href:!0});var Bft=s(iG);NZo=r(Bft,"TFLxmertModel"),Bft.forEach(t),DZo=r(kLe," (LXMERT model)"),kLe.forEach(t),qZo=i(x),z6=n(x,"LI",{});var RLe=s(z6);Nge=n(RLe,"STRONG",{});var xft=s(Nge);GZo=r(xft,"marian"),xft.forEach(t),OZo=r(RLe," \u2014 "),dG=n(RLe,"A",{href:!0});var kft=s(dG);XZo=r(kft,"TFMarianModel"),kft.forEach(t),VZo=r(RLe," (Marian model)"),RLe.forEach(t),zZo=i(x),W6=n(x,"LI",{});var SLe=s(W6);Dge=n(SLe,"STRONG",{});var Rft=s(Dge);WZo=r(Rft,"mbart"),Rft.forEach(t),QZo=r(SLe," \u2014 "),cG=n(SLe,"A",{href:!0});var Sft=s(cG);HZo=r(Sft,"TFMBartModel"),Sft.forEach(t),UZo=r(SLe," (mBART model)"),SLe.forEach(t),JZo=i(x),Q6=n(x,"LI",{});var PLe=s(Q6);qge=n(PLe,"STRONG",{});var Pft=s(qge);YZo=r(Pft,"mobilebert"),Pft.forEach(t),KZo=r(PLe," \u2014 "),fG=n(PLe,"A",{href:!0});var $ft=s(fG);ZZo=r($ft,"TFMobileBertModel"),$ft.forEach(t),eer=r(PLe," (MobileBERT model)"),PLe.forEach(t),oer=i(x),H6=n(x,"LI",{});var $Le=s(H6);Gge=n($Le,"STRONG",{});var Ift=s(Gge);rer=r(Ift,"mpnet"),Ift.forEach(t),ter=r($Le," \u2014 "),mG=n($Le,"A",{href:!0});var jft=s(mG);aer=r(jft,"TFMPNetModel"),jft.forEach(t),ner=r($Le," (MPNet model)"),$Le.forEach(t),ser=i(x),U6=n(x,"LI",{});var ILe=s(U6);Oge=n(ILe,"STRONG",{});var Nft=s(Oge);ler=r(Nft,"mt5"),Nft.forEach(t),ier=r(ILe," \u2014 "),gG=n(ILe,"A",{href:!0});var Dft=s(gG);der=r(Dft,"TFMT5Model"),Dft.forEach(t),cer=r(ILe," (mT5 model)"),ILe.forEach(t),fer=i(x),J6=n(x,"LI",{});var jLe=s(J6);Xge=n(jLe,"STRONG",{});var qft=s(Xge);mer=r(qft,"openai-gpt"),qft.forEach(t),ger=r(jLe," \u2014 "),hG=n(jLe,"A",{href:!0});var Gft=s(hG);her=r(Gft,"TFOpenAIGPTModel"),Gft.forEach(t),per=r(jLe," (OpenAI GPT model)"),jLe.forEach(t),_er=i(x),Y6=n(x,"LI",{});var NLe=s(Y6);Vge=n(NLe,"STRONG",{});var Oft=s(Vge);uer=r(Oft,"pegasus"),Oft.forEach(t),ber=r(NLe," \u2014 "),pG=n(NLe,"A",{href:!0});var Xft=s(pG);ver=r(Xft,"TFPegasusModel"),Xft.forEach(t),Ter=r(NLe," (Pegasus model)"),NLe.forEach(t),Fer=i(x),K6=n(x,"LI",{});var DLe=s(K6);zge=n(DLe,"STRONG",{});var Vft=s(zge);Cer=r(Vft,"rembert"),Vft.forEach(t),Mer=r(DLe," \u2014 "),_G=n(DLe,"A",{href:!0});var zft=s(_G);Eer=r(zft,"TFRemBertModel"),zft.forEach(t),yer=r(DLe," (RemBERT model)"),DLe.forEach(t),wer=i(x),Z6=n(x,"LI",{});var qLe=s(Z6);Wge=n(qLe,"STRONG",{});var Wft=s(Wge);Aer=r(Wft,"roberta"),Wft.forEach(t),Ler=r(qLe," \u2014 "),uG=n(qLe,"A",{href:!0});var Qft=s(uG);Ber=r(Qft,"TFRobertaModel"),Qft.forEach(t),xer=r(qLe," (RoBERTa model)"),qLe.forEach(t),ker=i(x),e0=n(x,"LI",{});var GLe=s(e0);Qge=n(GLe,"STRONG",{});var Hft=s(Qge);Rer=r(Hft,"roformer"),Hft.forEach(t),Ser=r(GLe," \u2014 "),bG=n(GLe,"A",{href:!0});var Uft=s(bG);Per=r(Uft,"TFRoFormerModel"),Uft.forEach(t),$er=r(GLe," (RoFormer model)"),GLe.forEach(t),Ier=i(x),o0=n(x,"LI",{});var OLe=s(o0);Hge=n(OLe,"STRONG",{});var Jft=s(Hge);jer=r(Jft,"speech_to_text"),Jft.forEach(t),Ner=r(OLe," \u2014 "),vG=n(OLe,"A",{href:!0});var Yft=s(vG);Der=r(Yft,"TFSpeech2TextModel"),Yft.forEach(t),qer=r(OLe," (Speech2Text model)"),OLe.forEach(t),Ger=i(x),r0=n(x,"LI",{});var XLe=s(r0);Uge=n(XLe,"STRONG",{});var Kft=s(Uge);Oer=r(Kft,"t5"),Kft.forEach(t),Xer=r(XLe," \u2014 "),TG=n(XLe,"A",{href:!0});var Zft=s(TG);Ver=r(Zft,"TFT5Model"),Zft.forEach(t),zer=r(XLe," (T5 model)"),XLe.forEach(t),Wer=i(x),t0=n(x,"LI",{});var VLe=s(t0);Jge=n(VLe,"STRONG",{});var emt=s(Jge);Qer=r(emt,"tapas"),emt.forEach(t),Her=r(VLe," \u2014 "),FG=n(VLe,"A",{href:!0});var omt=s(FG);Uer=r(omt,"TFTapasModel"),omt.forEach(t),Jer=r(VLe," (TAPAS model)"),VLe.forEach(t),Yer=i(x),a0=n(x,"LI",{});var zLe=s(a0);Yge=n(zLe,"STRONG",{});var rmt=s(Yge);Ker=r(rmt,"transfo-xl"),rmt.forEach(t),Zer=r(zLe," \u2014 "),CG=n(zLe,"A",{href:!0});var tmt=s(CG);eor=r(tmt,"TFTransfoXLModel"),tmt.forEach(t),oor=r(zLe," (Transformer-XL model)"),zLe.forEach(t),ror=i(x),n0=n(x,"LI",{});var WLe=s(n0);Kge=n(WLe,"STRONG",{});var amt=s(Kge);tor=r(amt,"vit"),amt.forEach(t),aor=r(WLe," \u2014 "),MG=n(WLe,"A",{href:!0});var nmt=s(MG);nor=r(nmt,"TFViTModel"),nmt.forEach(t),sor=r(WLe," (ViT model)"),WLe.forEach(t),lor=i(x),s0=n(x,"LI",{});var QLe=s(s0);Zge=n(QLe,"STRONG",{});var smt=s(Zge);ior=r(smt,"wav2vec2"),smt.forEach(t),dor=r(QLe," \u2014 "),EG=n(QLe,"A",{href:!0});var lmt=s(EG);cor=r(lmt,"TFWav2Vec2Model"),lmt.forEach(t),mor=r(QLe," (Wav2Vec2 model)"),QLe.forEach(t),gor=i(x),l0=n(x,"LI",{});var HLe=s(l0);ehe=n(HLe,"STRONG",{});var imt=s(ehe);hor=r(imt,"xlm"),imt.forEach(t),por=r(HLe," \u2014 "),yG=n(HLe,"A",{href:!0});var dmt=s(yG);_or=r(dmt,"TFXLMModel"),dmt.forEach(t),uor=r(HLe," (XLM model)"),HLe.forEach(t),bor=i(x),i0=n(x,"LI",{});var ULe=s(i0);ohe=n(ULe,"STRONG",{});var cmt=s(ohe);vor=r(cmt,"xlm-roberta"),cmt.forEach(t),Tor=r(ULe," \u2014 "),wG=n(ULe,"A",{href:!0});var fmt=s(wG);For=r(fmt,"TFXLMRobertaModel"),fmt.forEach(t),Cor=r(ULe," (XLM-RoBERTa model)"),ULe.forEach(t),Mor=i(x),d0=n(x,"LI",{});var JLe=s(d0);rhe=n(JLe,"STRONG",{});var mmt=s(rhe);Eor=r(mmt,"xlnet"),mmt.forEach(t),yor=r(JLe," \u2014 "),AG=n(JLe,"A",{href:!0});var gmt=s(AG);wor=r(gmt,"TFXLNetModel"),gmt.forEach(t),Aor=r(JLe," (XLNet model)"),JLe.forEach(t),x.forEach(t),Lor=i(ba),the=n(ba,"P",{});var hmt=s(the);Bor=r(hmt,"Examples:"),hmt.forEach(t),xor=i(ba),m(tw.$$.fragment,ba),ba.forEach(t),Vl.forEach(t),DRe=i(d),Mc=n(d,"H2",{class:!0});var KPe=s(Mc);c0=n(KPe,"A",{id:!0,class:!0,href:!0});var pmt=s(c0);ahe=n(pmt,"SPAN",{});var _mt=s(ahe);m(aw.$$.fragment,_mt),_mt.forEach(t),pmt.forEach(t),kor=i(KPe),nhe=n(KPe,"SPAN",{});var umt=s(nhe);Ror=r(umt,"TFAutoModelForPreTraining"),umt.forEach(t),KPe.forEach(t),qRe=i(d),Fr=n(d,"DIV",{class:!0});var Wl=s(Fr);m(nw.$$.fragment,Wl),Sor=i(Wl),Ec=n(Wl,"P",{});var lQ=s(Ec);Por=r(lQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),she=n(lQ,"CODE",{});var bmt=s(she);$or=r(bmt,"from_pretrained()"),bmt.forEach(t),Ior=r(lQ,"class method or the "),lhe=n(lQ,"CODE",{});var vmt=s(lhe);jor=r(vmt,"from_config()"),vmt.forEach(t),Nor=r(lQ,`class
method.`),lQ.forEach(t),Dor=i(Wl),sw=n(Wl,"P",{});var ZPe=s(sw);qor=r(ZPe,"This class cannot be instantiated directly using "),ihe=n(ZPe,"CODE",{});var Tmt=s(ihe);Gor=r(Tmt,"__init__()"),Tmt.forEach(t),Oor=r(ZPe," (throws an error)."),ZPe.forEach(t),Xor=i(Wl),_t=n(Wl,"DIV",{class:!0});var Ql=s(_t);m(lw.$$.fragment,Ql),Vor=i(Ql),dhe=n(Ql,"P",{});var Fmt=s(dhe);zor=r(Fmt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Fmt.forEach(t),Wor=i(Ql),yc=n(Ql,"P",{});var iQ=s(yc);Qor=r(iQ,`Note:
Loading a model from its configuration file does `),che=n(iQ,"STRONG",{});var Cmt=s(che);Hor=r(Cmt,"not"),Cmt.forEach(t),Uor=r(iQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),fhe=n(iQ,"CODE",{});var Mmt=s(fhe);Jor=r(Mmt,"from_pretrained()"),Mmt.forEach(t),Yor=r(iQ,"to load the model weights."),iQ.forEach(t),Kor=i(Ql),mhe=n(Ql,"P",{});var Emt=s(mhe);Zor=r(Emt,"Examples:"),Emt.forEach(t),err=i(Ql),m(iw.$$.fragment,Ql),Ql.forEach(t),orr=i(Wl),po=n(Wl,"DIV",{class:!0});var va=s(po);m(dw.$$.fragment,va),rrr=i(va),ghe=n(va,"P",{});var ymt=s(ghe);trr=r(ymt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ymt.forEach(t),arr=i(va),Fn=n(va,"P",{});var zM=s(Fn);nrr=r(zM,"The model class to instantiate is selected based on the "),hhe=n(zM,"CODE",{});var wmt=s(hhe);srr=r(wmt,"model_type"),wmt.forEach(t),lrr=r(zM,` property of the config object (either
passed as an argument or loaded from `),phe=n(zM,"CODE",{});var Amt=s(phe);irr=r(Amt,"pretrained_model_name_or_path"),Amt.forEach(t),drr=r(zM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_he=n(zM,"CODE",{});var Lmt=s(_he);crr=r(Lmt,"pretrained_model_name_or_path"),Lmt.forEach(t),frr=r(zM,":"),zM.forEach(t),mrr=i(va),H=n(va,"UL",{});var U=s(H);f0=n(U,"LI",{});var YLe=s(f0);uhe=n(YLe,"STRONG",{});var Bmt=s(uhe);grr=r(Bmt,"albert"),Bmt.forEach(t),hrr=r(YLe," \u2014 "),LG=n(YLe,"A",{href:!0});var xmt=s(LG);prr=r(xmt,"TFAlbertForPreTraining"),xmt.forEach(t),_rr=r(YLe," (ALBERT model)"),YLe.forEach(t),urr=i(U),m0=n(U,"LI",{});var KLe=s(m0);bhe=n(KLe,"STRONG",{});var kmt=s(bhe);brr=r(kmt,"bart"),kmt.forEach(t),vrr=r(KLe," \u2014 "),BG=n(KLe,"A",{href:!0});var Rmt=s(BG);Trr=r(Rmt,"TFBartForConditionalGeneration"),Rmt.forEach(t),Frr=r(KLe," (BART model)"),KLe.forEach(t),Crr=i(U),g0=n(U,"LI",{});var ZLe=s(g0);vhe=n(ZLe,"STRONG",{});var Smt=s(vhe);Mrr=r(Smt,"bert"),Smt.forEach(t),Err=r(ZLe," \u2014 "),xG=n(ZLe,"A",{href:!0});var Pmt=s(xG);yrr=r(Pmt,"TFBertForPreTraining"),Pmt.forEach(t),wrr=r(ZLe," (BERT model)"),ZLe.forEach(t),Arr=i(U),h0=n(U,"LI",{});var e7e=s(h0);The=n(e7e,"STRONG",{});var $mt=s(The);Lrr=r($mt,"camembert"),$mt.forEach(t),Brr=r(e7e," \u2014 "),kG=n(e7e,"A",{href:!0});var Imt=s(kG);xrr=r(Imt,"TFCamembertForMaskedLM"),Imt.forEach(t),krr=r(e7e," (CamemBERT model)"),e7e.forEach(t),Rrr=i(U),p0=n(U,"LI",{});var o7e=s(p0);Fhe=n(o7e,"STRONG",{});var jmt=s(Fhe);Srr=r(jmt,"ctrl"),jmt.forEach(t),Prr=r(o7e," \u2014 "),RG=n(o7e,"A",{href:!0});var Nmt=s(RG);$rr=r(Nmt,"TFCTRLLMHeadModel"),Nmt.forEach(t),Irr=r(o7e," (CTRL model)"),o7e.forEach(t),jrr=i(U),_0=n(U,"LI",{});var r7e=s(_0);Che=n(r7e,"STRONG",{});var Dmt=s(Che);Nrr=r(Dmt,"distilbert"),Dmt.forEach(t),Drr=r(r7e," \u2014 "),SG=n(r7e,"A",{href:!0});var qmt=s(SG);qrr=r(qmt,"TFDistilBertForMaskedLM"),qmt.forEach(t),Grr=r(r7e," (DistilBERT model)"),r7e.forEach(t),Orr=i(U),u0=n(U,"LI",{});var t7e=s(u0);Mhe=n(t7e,"STRONG",{});var Gmt=s(Mhe);Xrr=r(Gmt,"electra"),Gmt.forEach(t),Vrr=r(t7e," \u2014 "),PG=n(t7e,"A",{href:!0});var Omt=s(PG);zrr=r(Omt,"TFElectraForPreTraining"),Omt.forEach(t),Wrr=r(t7e," (ELECTRA model)"),t7e.forEach(t),Qrr=i(U),b0=n(U,"LI",{});var a7e=s(b0);Ehe=n(a7e,"STRONG",{});var Xmt=s(Ehe);Hrr=r(Xmt,"flaubert"),Xmt.forEach(t),Urr=r(a7e," \u2014 "),$G=n(a7e,"A",{href:!0});var Vmt=s($G);Jrr=r(Vmt,"TFFlaubertWithLMHeadModel"),Vmt.forEach(t),Yrr=r(a7e," (FlauBERT model)"),a7e.forEach(t),Krr=i(U),v0=n(U,"LI",{});var n7e=s(v0);yhe=n(n7e,"STRONG",{});var zmt=s(yhe);Zrr=r(zmt,"funnel"),zmt.forEach(t),etr=r(n7e," \u2014 "),IG=n(n7e,"A",{href:!0});var Wmt=s(IG);otr=r(Wmt,"TFFunnelForPreTraining"),Wmt.forEach(t),rtr=r(n7e," (Funnel Transformer model)"),n7e.forEach(t),ttr=i(U),T0=n(U,"LI",{});var s7e=s(T0);whe=n(s7e,"STRONG",{});var Qmt=s(whe);atr=r(Qmt,"gpt2"),Qmt.forEach(t),ntr=r(s7e," \u2014 "),jG=n(s7e,"A",{href:!0});var Hmt=s(jG);str=r(Hmt,"TFGPT2LMHeadModel"),Hmt.forEach(t),ltr=r(s7e," (OpenAI GPT-2 model)"),s7e.forEach(t),itr=i(U),F0=n(U,"LI",{});var l7e=s(F0);Ahe=n(l7e,"STRONG",{});var Umt=s(Ahe);dtr=r(Umt,"layoutlm"),Umt.forEach(t),ctr=r(l7e," \u2014 "),NG=n(l7e,"A",{href:!0});var Jmt=s(NG);ftr=r(Jmt,"TFLayoutLMForMaskedLM"),Jmt.forEach(t),mtr=r(l7e," (LayoutLM model)"),l7e.forEach(t),gtr=i(U),C0=n(U,"LI",{});var i7e=s(C0);Lhe=n(i7e,"STRONG",{});var Ymt=s(Lhe);htr=r(Ymt,"lxmert"),Ymt.forEach(t),ptr=r(i7e," \u2014 "),DG=n(i7e,"A",{href:!0});var Kmt=s(DG);_tr=r(Kmt,"TFLxmertForPreTraining"),Kmt.forEach(t),utr=r(i7e," (LXMERT model)"),i7e.forEach(t),btr=i(U),M0=n(U,"LI",{});var d7e=s(M0);Bhe=n(d7e,"STRONG",{});var Zmt=s(Bhe);vtr=r(Zmt,"mobilebert"),Zmt.forEach(t),Ttr=r(d7e," \u2014 "),qG=n(d7e,"A",{href:!0});var egt=s(qG);Ftr=r(egt,"TFMobileBertForPreTraining"),egt.forEach(t),Ctr=r(d7e," (MobileBERT model)"),d7e.forEach(t),Mtr=i(U),E0=n(U,"LI",{});var c7e=s(E0);xhe=n(c7e,"STRONG",{});var ogt=s(xhe);Etr=r(ogt,"mpnet"),ogt.forEach(t),ytr=r(c7e," \u2014 "),GG=n(c7e,"A",{href:!0});var rgt=s(GG);wtr=r(rgt,"TFMPNetForMaskedLM"),rgt.forEach(t),Atr=r(c7e," (MPNet model)"),c7e.forEach(t),Ltr=i(U),y0=n(U,"LI",{});var f7e=s(y0);khe=n(f7e,"STRONG",{});var tgt=s(khe);Btr=r(tgt,"openai-gpt"),tgt.forEach(t),xtr=r(f7e," \u2014 "),OG=n(f7e,"A",{href:!0});var agt=s(OG);ktr=r(agt,"TFOpenAIGPTLMHeadModel"),agt.forEach(t),Rtr=r(f7e," (OpenAI GPT model)"),f7e.forEach(t),Str=i(U),w0=n(U,"LI",{});var m7e=s(w0);Rhe=n(m7e,"STRONG",{});var ngt=s(Rhe);Ptr=r(ngt,"roberta"),ngt.forEach(t),$tr=r(m7e," \u2014 "),XG=n(m7e,"A",{href:!0});var sgt=s(XG);Itr=r(sgt,"TFRobertaForMaskedLM"),sgt.forEach(t),jtr=r(m7e," (RoBERTa model)"),m7e.forEach(t),Ntr=i(U),A0=n(U,"LI",{});var g7e=s(A0);She=n(g7e,"STRONG",{});var lgt=s(She);Dtr=r(lgt,"t5"),lgt.forEach(t),qtr=r(g7e," \u2014 "),VG=n(g7e,"A",{href:!0});var igt=s(VG);Gtr=r(igt,"TFT5ForConditionalGeneration"),igt.forEach(t),Otr=r(g7e," (T5 model)"),g7e.forEach(t),Xtr=i(U),L0=n(U,"LI",{});var h7e=s(L0);Phe=n(h7e,"STRONG",{});var dgt=s(Phe);Vtr=r(dgt,"tapas"),dgt.forEach(t),ztr=r(h7e," \u2014 "),zG=n(h7e,"A",{href:!0});var cgt=s(zG);Wtr=r(cgt,"TFTapasForMaskedLM"),cgt.forEach(t),Qtr=r(h7e," (TAPAS model)"),h7e.forEach(t),Htr=i(U),B0=n(U,"LI",{});var p7e=s(B0);$he=n(p7e,"STRONG",{});var fgt=s($he);Utr=r(fgt,"transfo-xl"),fgt.forEach(t),Jtr=r(p7e," \u2014 "),WG=n(p7e,"A",{href:!0});var mgt=s(WG);Ytr=r(mgt,"TFTransfoXLLMHeadModel"),mgt.forEach(t),Ktr=r(p7e," (Transformer-XL model)"),p7e.forEach(t),Ztr=i(U),x0=n(U,"LI",{});var _7e=s(x0);Ihe=n(_7e,"STRONG",{});var ggt=s(Ihe);ear=r(ggt,"xlm"),ggt.forEach(t),oar=r(_7e," \u2014 "),QG=n(_7e,"A",{href:!0});var hgt=s(QG);rar=r(hgt,"TFXLMWithLMHeadModel"),hgt.forEach(t),tar=r(_7e," (XLM model)"),_7e.forEach(t),aar=i(U),k0=n(U,"LI",{});var u7e=s(k0);jhe=n(u7e,"STRONG",{});var pgt=s(jhe);nar=r(pgt,"xlm-roberta"),pgt.forEach(t),sar=r(u7e," \u2014 "),HG=n(u7e,"A",{href:!0});var _gt=s(HG);lar=r(_gt,"TFXLMRobertaForMaskedLM"),_gt.forEach(t),iar=r(u7e," (XLM-RoBERTa model)"),u7e.forEach(t),dar=i(U),R0=n(U,"LI",{});var b7e=s(R0);Nhe=n(b7e,"STRONG",{});var ugt=s(Nhe);car=r(ugt,"xlnet"),ugt.forEach(t),far=r(b7e," \u2014 "),UG=n(b7e,"A",{href:!0});var bgt=s(UG);mar=r(bgt,"TFXLNetLMHeadModel"),bgt.forEach(t),gar=r(b7e," (XLNet model)"),b7e.forEach(t),U.forEach(t),har=i(va),Dhe=n(va,"P",{});var vgt=s(Dhe);par=r(vgt,"Examples:"),vgt.forEach(t),_ar=i(va),m(cw.$$.fragment,va),va.forEach(t),Wl.forEach(t),GRe=i(d),wc=n(d,"H2",{class:!0});var e$e=s(wc);S0=n(e$e,"A",{id:!0,class:!0,href:!0});var Tgt=s(S0);qhe=n(Tgt,"SPAN",{});var Fgt=s(qhe);m(fw.$$.fragment,Fgt),Fgt.forEach(t),Tgt.forEach(t),uar=i(e$e),Ghe=n(e$e,"SPAN",{});var Cgt=s(Ghe);bar=r(Cgt,"TFAutoModelForCausalLM"),Cgt.forEach(t),e$e.forEach(t),ORe=i(d),Cr=n(d,"DIV",{class:!0});var Hl=s(Cr);m(mw.$$.fragment,Hl),Tar=i(Hl),Ac=n(Hl,"P",{});var dQ=s(Ac);Far=r(dQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Ohe=n(dQ,"CODE",{});var Mgt=s(Ohe);Car=r(Mgt,"from_pretrained()"),Mgt.forEach(t),Mar=r(dQ,"class method or the "),Xhe=n(dQ,"CODE",{});var Egt=s(Xhe);Ear=r(Egt,"from_config()"),Egt.forEach(t),yar=r(dQ,`class
method.`),dQ.forEach(t),war=i(Hl),gw=n(Hl,"P",{});var o$e=s(gw);Aar=r(o$e,"This class cannot be instantiated directly using "),Vhe=n(o$e,"CODE",{});var ygt=s(Vhe);Lar=r(ygt,"__init__()"),ygt.forEach(t),Bar=r(o$e," (throws an error)."),o$e.forEach(t),xar=i(Hl),ut=n(Hl,"DIV",{class:!0});var Ul=s(ut);m(hw.$$.fragment,Ul),kar=i(Ul),zhe=n(Ul,"P",{});var wgt=s(zhe);Rar=r(wgt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),wgt.forEach(t),Sar=i(Ul),Lc=n(Ul,"P",{});var cQ=s(Lc);Par=r(cQ,`Note:
Loading a model from its configuration file does `),Whe=n(cQ,"STRONG",{});var Agt=s(Whe);$ar=r(Agt,"not"),Agt.forEach(t),Iar=r(cQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qhe=n(cQ,"CODE",{});var Lgt=s(Qhe);jar=r(Lgt,"from_pretrained()"),Lgt.forEach(t),Nar=r(cQ,"to load the model weights."),cQ.forEach(t),Dar=i(Ul),Hhe=n(Ul,"P",{});var Bgt=s(Hhe);qar=r(Bgt,"Examples:"),Bgt.forEach(t),Gar=i(Ul),m(pw.$$.fragment,Ul),Ul.forEach(t),Oar=i(Hl),_o=n(Hl,"DIV",{class:!0});var Ta=s(_o);m(_w.$$.fragment,Ta),Xar=i(Ta),Uhe=n(Ta,"P",{});var xgt=s(Uhe);Var=r(xgt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),xgt.forEach(t),zar=i(Ta),Cn=n(Ta,"P",{});var WM=s(Cn);War=r(WM,"The model class to instantiate is selected based on the "),Jhe=n(WM,"CODE",{});var kgt=s(Jhe);Qar=r(kgt,"model_type"),kgt.forEach(t),Har=r(WM,` property of the config object (either
passed as an argument or loaded from `),Yhe=n(WM,"CODE",{});var Rgt=s(Yhe);Uar=r(Rgt,"pretrained_model_name_or_path"),Rgt.forEach(t),Jar=r(WM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Khe=n(WM,"CODE",{});var Sgt=s(Khe);Yar=r(Sgt,"pretrained_model_name_or_path"),Sgt.forEach(t),Kar=r(WM,":"),WM.forEach(t),Zar=i(Ta),ge=n(Ta,"UL",{});var Ce=s(ge);P0=n(Ce,"LI",{});var v7e=s(P0);Zhe=n(v7e,"STRONG",{});var Pgt=s(Zhe);enr=r(Pgt,"bert"),Pgt.forEach(t),onr=r(v7e," \u2014 "),JG=n(v7e,"A",{href:!0});var $gt=s(JG);rnr=r($gt,"TFBertLMHeadModel"),$gt.forEach(t),tnr=r(v7e," (BERT model)"),v7e.forEach(t),anr=i(Ce),$0=n(Ce,"LI",{});var T7e=s($0);epe=n(T7e,"STRONG",{});var Igt=s(epe);nnr=r(Igt,"camembert"),Igt.forEach(t),snr=r(T7e," \u2014 "),YG=n(T7e,"A",{href:!0});var jgt=s(YG);lnr=r(jgt,"TFCamembertForCausalLM"),jgt.forEach(t),inr=r(T7e," (CamemBERT model)"),T7e.forEach(t),dnr=i(Ce),I0=n(Ce,"LI",{});var F7e=s(I0);ope=n(F7e,"STRONG",{});var Ngt=s(ope);cnr=r(Ngt,"ctrl"),Ngt.forEach(t),fnr=r(F7e," \u2014 "),KG=n(F7e,"A",{href:!0});var Dgt=s(KG);mnr=r(Dgt,"TFCTRLLMHeadModel"),Dgt.forEach(t),gnr=r(F7e," (CTRL model)"),F7e.forEach(t),hnr=i(Ce),j0=n(Ce,"LI",{});var C7e=s(j0);rpe=n(C7e,"STRONG",{});var qgt=s(rpe);pnr=r(qgt,"gpt2"),qgt.forEach(t),_nr=r(C7e," \u2014 "),ZG=n(C7e,"A",{href:!0});var Ggt=s(ZG);unr=r(Ggt,"TFGPT2LMHeadModel"),Ggt.forEach(t),bnr=r(C7e," (OpenAI GPT-2 model)"),C7e.forEach(t),vnr=i(Ce),N0=n(Ce,"LI",{});var M7e=s(N0);tpe=n(M7e,"STRONG",{});var Ogt=s(tpe);Tnr=r(Ogt,"openai-gpt"),Ogt.forEach(t),Fnr=r(M7e," \u2014 "),eO=n(M7e,"A",{href:!0});var Xgt=s(eO);Cnr=r(Xgt,"TFOpenAIGPTLMHeadModel"),Xgt.forEach(t),Mnr=r(M7e," (OpenAI GPT model)"),M7e.forEach(t),Enr=i(Ce),D0=n(Ce,"LI",{});var E7e=s(D0);ape=n(E7e,"STRONG",{});var Vgt=s(ape);ynr=r(Vgt,"rembert"),Vgt.forEach(t),wnr=r(E7e," \u2014 "),oO=n(E7e,"A",{href:!0});var zgt=s(oO);Anr=r(zgt,"TFRemBertForCausalLM"),zgt.forEach(t),Lnr=r(E7e," (RemBERT model)"),E7e.forEach(t),Bnr=i(Ce),q0=n(Ce,"LI",{});var y7e=s(q0);npe=n(y7e,"STRONG",{});var Wgt=s(npe);xnr=r(Wgt,"roberta"),Wgt.forEach(t),knr=r(y7e," \u2014 "),rO=n(y7e,"A",{href:!0});var Qgt=s(rO);Rnr=r(Qgt,"TFRobertaForCausalLM"),Qgt.forEach(t),Snr=r(y7e," (RoBERTa model)"),y7e.forEach(t),Pnr=i(Ce),G0=n(Ce,"LI",{});var w7e=s(G0);spe=n(w7e,"STRONG",{});var Hgt=s(spe);$nr=r(Hgt,"roformer"),Hgt.forEach(t),Inr=r(w7e," \u2014 "),tO=n(w7e,"A",{href:!0});var Ugt=s(tO);jnr=r(Ugt,"TFRoFormerForCausalLM"),Ugt.forEach(t),Nnr=r(w7e," (RoFormer model)"),w7e.forEach(t),Dnr=i(Ce),O0=n(Ce,"LI",{});var A7e=s(O0);lpe=n(A7e,"STRONG",{});var Jgt=s(lpe);qnr=r(Jgt,"transfo-xl"),Jgt.forEach(t),Gnr=r(A7e," \u2014 "),aO=n(A7e,"A",{href:!0});var Ygt=s(aO);Onr=r(Ygt,"TFTransfoXLLMHeadModel"),Ygt.forEach(t),Xnr=r(A7e," (Transformer-XL model)"),A7e.forEach(t),Vnr=i(Ce),X0=n(Ce,"LI",{});var L7e=s(X0);ipe=n(L7e,"STRONG",{});var Kgt=s(ipe);znr=r(Kgt,"xlm"),Kgt.forEach(t),Wnr=r(L7e," \u2014 "),nO=n(L7e,"A",{href:!0});var Zgt=s(nO);Qnr=r(Zgt,"TFXLMWithLMHeadModel"),Zgt.forEach(t),Hnr=r(L7e," (XLM model)"),L7e.forEach(t),Unr=i(Ce),V0=n(Ce,"LI",{});var B7e=s(V0);dpe=n(B7e,"STRONG",{});var eht=s(dpe);Jnr=r(eht,"xlnet"),eht.forEach(t),Ynr=r(B7e," \u2014 "),sO=n(B7e,"A",{href:!0});var oht=s(sO);Knr=r(oht,"TFXLNetLMHeadModel"),oht.forEach(t),Znr=r(B7e," (XLNet model)"),B7e.forEach(t),Ce.forEach(t),esr=i(Ta),cpe=n(Ta,"P",{});var rht=s(cpe);osr=r(rht,"Examples:"),rht.forEach(t),rsr=i(Ta),m(uw.$$.fragment,Ta),Ta.forEach(t),Hl.forEach(t),XRe=i(d),Bc=n(d,"H2",{class:!0});var r$e=s(Bc);z0=n(r$e,"A",{id:!0,class:!0,href:!0});var tht=s(z0);fpe=n(tht,"SPAN",{});var aht=s(fpe);m(bw.$$.fragment,aht),aht.forEach(t),tht.forEach(t),tsr=i(r$e),mpe=n(r$e,"SPAN",{});var nht=s(mpe);asr=r(nht,"TFAutoModelForImageClassification"),nht.forEach(t),r$e.forEach(t),VRe=i(d),Mr=n(d,"DIV",{class:!0});var Jl=s(Mr);m(vw.$$.fragment,Jl),nsr=i(Jl),xc=n(Jl,"P",{});var fQ=s(xc);ssr=r(fQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),gpe=n(fQ,"CODE",{});var sht=s(gpe);lsr=r(sht,"from_pretrained()"),sht.forEach(t),isr=r(fQ,"class method or the "),hpe=n(fQ,"CODE",{});var lht=s(hpe);dsr=r(lht,"from_config()"),lht.forEach(t),csr=r(fQ,`class
method.`),fQ.forEach(t),fsr=i(Jl),Tw=n(Jl,"P",{});var t$e=s(Tw);msr=r(t$e,"This class cannot be instantiated directly using "),ppe=n(t$e,"CODE",{});var iht=s(ppe);gsr=r(iht,"__init__()"),iht.forEach(t),hsr=r(t$e," (throws an error)."),t$e.forEach(t),psr=i(Jl),bt=n(Jl,"DIV",{class:!0});var Yl=s(bt);m(Fw.$$.fragment,Yl),_sr=i(Yl),_pe=n(Yl,"P",{});var dht=s(_pe);usr=r(dht,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),dht.forEach(t),bsr=i(Yl),kc=n(Yl,"P",{});var mQ=s(kc);vsr=r(mQ,`Note:
Loading a model from its configuration file does `),upe=n(mQ,"STRONG",{});var cht=s(upe);Tsr=r(cht,"not"),cht.forEach(t),Fsr=r(mQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),bpe=n(mQ,"CODE",{});var fht=s(bpe);Csr=r(fht,"from_pretrained()"),fht.forEach(t),Msr=r(mQ,"to load the model weights."),mQ.forEach(t),Esr=i(Yl),vpe=n(Yl,"P",{});var mht=s(vpe);ysr=r(mht,"Examples:"),mht.forEach(t),wsr=i(Yl),m(Cw.$$.fragment,Yl),Yl.forEach(t),Asr=i(Jl),uo=n(Jl,"DIV",{class:!0});var Fa=s(uo);m(Mw.$$.fragment,Fa),Lsr=i(Fa),Tpe=n(Fa,"P",{});var ght=s(Tpe);Bsr=r(ght,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),ght.forEach(t),xsr=i(Fa),Mn=n(Fa,"P",{});var QM=s(Mn);ksr=r(QM,"The model class to instantiate is selected based on the "),Fpe=n(QM,"CODE",{});var hht=s(Fpe);Rsr=r(hht,"model_type"),hht.forEach(t),Ssr=r(QM,` property of the config object (either
passed as an argument or loaded from `),Cpe=n(QM,"CODE",{});var pht=s(Cpe);Psr=r(pht,"pretrained_model_name_or_path"),pht.forEach(t),$sr=r(QM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mpe=n(QM,"CODE",{});var _ht=s(Mpe);Isr=r(_ht,"pretrained_model_name_or_path"),_ht.forEach(t),jsr=r(QM,":"),QM.forEach(t),Nsr=i(Fa),Ew=n(Fa,"UL",{});var a$e=s(Ew);W0=n(a$e,"LI",{});var x7e=s(W0);Epe=n(x7e,"STRONG",{});var uht=s(Epe);Dsr=r(uht,"convnext"),uht.forEach(t),qsr=r(x7e," \u2014 "),lO=n(x7e,"A",{href:!0});var bht=s(lO);Gsr=r(bht,"TFConvNextForImageClassification"),bht.forEach(t),Osr=r(x7e," (ConvNext model)"),x7e.forEach(t),Xsr=i(a$e),Q0=n(a$e,"LI",{});var k7e=s(Q0);ype=n(k7e,"STRONG",{});var vht=s(ype);Vsr=r(vht,"vit"),vht.forEach(t),zsr=r(k7e," \u2014 "),iO=n(k7e,"A",{href:!0});var Tht=s(iO);Wsr=r(Tht,"TFViTForImageClassification"),Tht.forEach(t),Qsr=r(k7e," (ViT model)"),k7e.forEach(t),a$e.forEach(t),Hsr=i(Fa),wpe=n(Fa,"P",{});var Fht=s(wpe);Usr=r(Fht,"Examples:"),Fht.forEach(t),Jsr=i(Fa),m(yw.$$.fragment,Fa),Fa.forEach(t),Jl.forEach(t),zRe=i(d),Rc=n(d,"H2",{class:!0});var n$e=s(Rc);H0=n(n$e,"A",{id:!0,class:!0,href:!0});var Cht=s(H0);Ape=n(Cht,"SPAN",{});var Mht=s(Ape);m(ww.$$.fragment,Mht),Mht.forEach(t),Cht.forEach(t),Ysr=i(n$e),Lpe=n(n$e,"SPAN",{});var Eht=s(Lpe);Ksr=r(Eht,"TFAutoModelForMaskedLM"),Eht.forEach(t),n$e.forEach(t),WRe=i(d),Er=n(d,"DIV",{class:!0});var Kl=s(Er);m(Aw.$$.fragment,Kl),Zsr=i(Kl),Sc=n(Kl,"P",{});var gQ=s(Sc);elr=r(gQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Bpe=n(gQ,"CODE",{});var yht=s(Bpe);olr=r(yht,"from_pretrained()"),yht.forEach(t),rlr=r(gQ,"class method or the "),xpe=n(gQ,"CODE",{});var wht=s(xpe);tlr=r(wht,"from_config()"),wht.forEach(t),alr=r(gQ,`class
method.`),gQ.forEach(t),nlr=i(Kl),Lw=n(Kl,"P",{});var s$e=s(Lw);slr=r(s$e,"This class cannot be instantiated directly using "),kpe=n(s$e,"CODE",{});var Aht=s(kpe);llr=r(Aht,"__init__()"),Aht.forEach(t),ilr=r(s$e," (throws an error)."),s$e.forEach(t),dlr=i(Kl),vt=n(Kl,"DIV",{class:!0});var Zl=s(vt);m(Bw.$$.fragment,Zl),clr=i(Zl),Rpe=n(Zl,"P",{});var Lht=s(Rpe);flr=r(Lht,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Lht.forEach(t),mlr=i(Zl),Pc=n(Zl,"P",{});var hQ=s(Pc);glr=r(hQ,`Note:
Loading a model from its configuration file does `),Spe=n(hQ,"STRONG",{});var Bht=s(Spe);hlr=r(Bht,"not"),Bht.forEach(t),plr=r(hQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ppe=n(hQ,"CODE",{});var xht=s(Ppe);_lr=r(xht,"from_pretrained()"),xht.forEach(t),ulr=r(hQ,"to load the model weights."),hQ.forEach(t),blr=i(Zl),$pe=n(Zl,"P",{});var kht=s($pe);vlr=r(kht,"Examples:"),kht.forEach(t),Tlr=i(Zl),m(xw.$$.fragment,Zl),Zl.forEach(t),Flr=i(Kl),bo=n(Kl,"DIV",{class:!0});var Ca=s(bo);m(kw.$$.fragment,Ca),Clr=i(Ca),Ipe=n(Ca,"P",{});var Rht=s(Ipe);Mlr=r(Rht,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Rht.forEach(t),Elr=i(Ca),En=n(Ca,"P",{});var HM=s(En);ylr=r(HM,"The model class to instantiate is selected based on the "),jpe=n(HM,"CODE",{});var Sht=s(jpe);wlr=r(Sht,"model_type"),Sht.forEach(t),Alr=r(HM,` property of the config object (either
passed as an argument or loaded from `),Npe=n(HM,"CODE",{});var Pht=s(Npe);Llr=r(Pht,"pretrained_model_name_or_path"),Pht.forEach(t),Blr=r(HM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dpe=n(HM,"CODE",{});var $ht=s(Dpe);xlr=r($ht,"pretrained_model_name_or_path"),$ht.forEach(t),klr=r(HM,":"),HM.forEach(t),Rlr=i(Ca),Y=n(Ca,"UL",{});var ee=s(Y);U0=n(ee,"LI",{});var R7e=s(U0);qpe=n(R7e,"STRONG",{});var Iht=s(qpe);Slr=r(Iht,"albert"),Iht.forEach(t),Plr=r(R7e," \u2014 "),dO=n(R7e,"A",{href:!0});var jht=s(dO);$lr=r(jht,"TFAlbertForMaskedLM"),jht.forEach(t),Ilr=r(R7e," (ALBERT model)"),R7e.forEach(t),jlr=i(ee),J0=n(ee,"LI",{});var S7e=s(J0);Gpe=n(S7e,"STRONG",{});var Nht=s(Gpe);Nlr=r(Nht,"bert"),Nht.forEach(t),Dlr=r(S7e," \u2014 "),cO=n(S7e,"A",{href:!0});var Dht=s(cO);qlr=r(Dht,"TFBertForMaskedLM"),Dht.forEach(t),Glr=r(S7e," (BERT model)"),S7e.forEach(t),Olr=i(ee),Y0=n(ee,"LI",{});var P7e=s(Y0);Ope=n(P7e,"STRONG",{});var qht=s(Ope);Xlr=r(qht,"camembert"),qht.forEach(t),Vlr=r(P7e," \u2014 "),fO=n(P7e,"A",{href:!0});var Ght=s(fO);zlr=r(Ght,"TFCamembertForMaskedLM"),Ght.forEach(t),Wlr=r(P7e," (CamemBERT model)"),P7e.forEach(t),Qlr=i(ee),K0=n(ee,"LI",{});var $7e=s(K0);Xpe=n($7e,"STRONG",{});var Oht=s(Xpe);Hlr=r(Oht,"convbert"),Oht.forEach(t),Ulr=r($7e," \u2014 "),mO=n($7e,"A",{href:!0});var Xht=s(mO);Jlr=r(Xht,"TFConvBertForMaskedLM"),Xht.forEach(t),Ylr=r($7e," (ConvBERT model)"),$7e.forEach(t),Klr=i(ee),Z0=n(ee,"LI",{});var I7e=s(Z0);Vpe=n(I7e,"STRONG",{});var Vht=s(Vpe);Zlr=r(Vht,"deberta"),Vht.forEach(t),eir=r(I7e," \u2014 "),gO=n(I7e,"A",{href:!0});var zht=s(gO);oir=r(zht,"TFDebertaForMaskedLM"),zht.forEach(t),rir=r(I7e," (DeBERTa model)"),I7e.forEach(t),tir=i(ee),eT=n(ee,"LI",{});var j7e=s(eT);zpe=n(j7e,"STRONG",{});var Wht=s(zpe);air=r(Wht,"deberta-v2"),Wht.forEach(t),nir=r(j7e," \u2014 "),hO=n(j7e,"A",{href:!0});var Qht=s(hO);sir=r(Qht,"TFDebertaV2ForMaskedLM"),Qht.forEach(t),lir=r(j7e," (DeBERTa-v2 model)"),j7e.forEach(t),iir=i(ee),oT=n(ee,"LI",{});var N7e=s(oT);Wpe=n(N7e,"STRONG",{});var Hht=s(Wpe);dir=r(Hht,"distilbert"),Hht.forEach(t),cir=r(N7e," \u2014 "),pO=n(N7e,"A",{href:!0});var Uht=s(pO);fir=r(Uht,"TFDistilBertForMaskedLM"),Uht.forEach(t),mir=r(N7e," (DistilBERT model)"),N7e.forEach(t),gir=i(ee),rT=n(ee,"LI",{});var D7e=s(rT);Qpe=n(D7e,"STRONG",{});var Jht=s(Qpe);hir=r(Jht,"electra"),Jht.forEach(t),pir=r(D7e," \u2014 "),_O=n(D7e,"A",{href:!0});var Yht=s(_O);_ir=r(Yht,"TFElectraForMaskedLM"),Yht.forEach(t),uir=r(D7e," (ELECTRA model)"),D7e.forEach(t),bir=i(ee),tT=n(ee,"LI",{});var q7e=s(tT);Hpe=n(q7e,"STRONG",{});var Kht=s(Hpe);vir=r(Kht,"flaubert"),Kht.forEach(t),Tir=r(q7e," \u2014 "),uO=n(q7e,"A",{href:!0});var Zht=s(uO);Fir=r(Zht,"TFFlaubertWithLMHeadModel"),Zht.forEach(t),Cir=r(q7e," (FlauBERT model)"),q7e.forEach(t),Mir=i(ee),aT=n(ee,"LI",{});var G7e=s(aT);Upe=n(G7e,"STRONG",{});var ept=s(Upe);Eir=r(ept,"funnel"),ept.forEach(t),yir=r(G7e," \u2014 "),bO=n(G7e,"A",{href:!0});var opt=s(bO);wir=r(opt,"TFFunnelForMaskedLM"),opt.forEach(t),Air=r(G7e," (Funnel Transformer model)"),G7e.forEach(t),Lir=i(ee),nT=n(ee,"LI",{});var O7e=s(nT);Jpe=n(O7e,"STRONG",{});var rpt=s(Jpe);Bir=r(rpt,"layoutlm"),rpt.forEach(t),xir=r(O7e," \u2014 "),vO=n(O7e,"A",{href:!0});var tpt=s(vO);kir=r(tpt,"TFLayoutLMForMaskedLM"),tpt.forEach(t),Rir=r(O7e," (LayoutLM model)"),O7e.forEach(t),Sir=i(ee),sT=n(ee,"LI",{});var X7e=s(sT);Ype=n(X7e,"STRONG",{});var apt=s(Ype);Pir=r(apt,"longformer"),apt.forEach(t),$ir=r(X7e," \u2014 "),TO=n(X7e,"A",{href:!0});var npt=s(TO);Iir=r(npt,"TFLongformerForMaskedLM"),npt.forEach(t),jir=r(X7e," (Longformer model)"),X7e.forEach(t),Nir=i(ee),lT=n(ee,"LI",{});var V7e=s(lT);Kpe=n(V7e,"STRONG",{});var spt=s(Kpe);Dir=r(spt,"mobilebert"),spt.forEach(t),qir=r(V7e," \u2014 "),FO=n(V7e,"A",{href:!0});var lpt=s(FO);Gir=r(lpt,"TFMobileBertForMaskedLM"),lpt.forEach(t),Oir=r(V7e," (MobileBERT model)"),V7e.forEach(t),Xir=i(ee),iT=n(ee,"LI",{});var z7e=s(iT);Zpe=n(z7e,"STRONG",{});var ipt=s(Zpe);Vir=r(ipt,"mpnet"),ipt.forEach(t),zir=r(z7e," \u2014 "),CO=n(z7e,"A",{href:!0});var dpt=s(CO);Wir=r(dpt,"TFMPNetForMaskedLM"),dpt.forEach(t),Qir=r(z7e," (MPNet model)"),z7e.forEach(t),Hir=i(ee),dT=n(ee,"LI",{});var W7e=s(dT);e_e=n(W7e,"STRONG",{});var cpt=s(e_e);Uir=r(cpt,"rembert"),cpt.forEach(t),Jir=r(W7e," \u2014 "),MO=n(W7e,"A",{href:!0});var fpt=s(MO);Yir=r(fpt,"TFRemBertForMaskedLM"),fpt.forEach(t),Kir=r(W7e," (RemBERT model)"),W7e.forEach(t),Zir=i(ee),cT=n(ee,"LI",{});var Q7e=s(cT);o_e=n(Q7e,"STRONG",{});var mpt=s(o_e);edr=r(mpt,"roberta"),mpt.forEach(t),odr=r(Q7e," \u2014 "),EO=n(Q7e,"A",{href:!0});var gpt=s(EO);rdr=r(gpt,"TFRobertaForMaskedLM"),gpt.forEach(t),tdr=r(Q7e," (RoBERTa model)"),Q7e.forEach(t),adr=i(ee),fT=n(ee,"LI",{});var H7e=s(fT);r_e=n(H7e,"STRONG",{});var hpt=s(r_e);ndr=r(hpt,"roformer"),hpt.forEach(t),sdr=r(H7e," \u2014 "),yO=n(H7e,"A",{href:!0});var ppt=s(yO);ldr=r(ppt,"TFRoFormerForMaskedLM"),ppt.forEach(t),idr=r(H7e," (RoFormer model)"),H7e.forEach(t),ddr=i(ee),mT=n(ee,"LI",{});var U7e=s(mT);t_e=n(U7e,"STRONG",{});var _pt=s(t_e);cdr=r(_pt,"tapas"),_pt.forEach(t),fdr=r(U7e," \u2014 "),wO=n(U7e,"A",{href:!0});var upt=s(wO);mdr=r(upt,"TFTapasForMaskedLM"),upt.forEach(t),gdr=r(U7e," (TAPAS model)"),U7e.forEach(t),hdr=i(ee),gT=n(ee,"LI",{});var J7e=s(gT);a_e=n(J7e,"STRONG",{});var bpt=s(a_e);pdr=r(bpt,"xlm"),bpt.forEach(t),_dr=r(J7e," \u2014 "),AO=n(J7e,"A",{href:!0});var vpt=s(AO);udr=r(vpt,"TFXLMWithLMHeadModel"),vpt.forEach(t),bdr=r(J7e," (XLM model)"),J7e.forEach(t),vdr=i(ee),hT=n(ee,"LI",{});var Y7e=s(hT);n_e=n(Y7e,"STRONG",{});var Tpt=s(n_e);Tdr=r(Tpt,"xlm-roberta"),Tpt.forEach(t),Fdr=r(Y7e," \u2014 "),LO=n(Y7e,"A",{href:!0});var Fpt=s(LO);Cdr=r(Fpt,"TFXLMRobertaForMaskedLM"),Fpt.forEach(t),Mdr=r(Y7e," (XLM-RoBERTa model)"),Y7e.forEach(t),ee.forEach(t),Edr=i(Ca),s_e=n(Ca,"P",{});var Cpt=s(s_e);ydr=r(Cpt,"Examples:"),Cpt.forEach(t),wdr=i(Ca),m(Rw.$$.fragment,Ca),Ca.forEach(t),Kl.forEach(t),QRe=i(d),$c=n(d,"H2",{class:!0});var l$e=s($c);pT=n(l$e,"A",{id:!0,class:!0,href:!0});var Mpt=s(pT);l_e=n(Mpt,"SPAN",{});var Ept=s(l_e);m(Sw.$$.fragment,Ept),Ept.forEach(t),Mpt.forEach(t),Adr=i(l$e),i_e=n(l$e,"SPAN",{});var ypt=s(i_e);Ldr=r(ypt,"TFAutoModelForSeq2SeqLM"),ypt.forEach(t),l$e.forEach(t),HRe=i(d),yr=n(d,"DIV",{class:!0});var ei=s(yr);m(Pw.$$.fragment,ei),Bdr=i(ei),Ic=n(ei,"P",{});var pQ=s(Ic);xdr=r(pQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),d_e=n(pQ,"CODE",{});var wpt=s(d_e);kdr=r(wpt,"from_pretrained()"),wpt.forEach(t),Rdr=r(pQ,"class method or the "),c_e=n(pQ,"CODE",{});var Apt=s(c_e);Sdr=r(Apt,"from_config()"),Apt.forEach(t),Pdr=r(pQ,`class
method.`),pQ.forEach(t),$dr=i(ei),$w=n(ei,"P",{});var i$e=s($w);Idr=r(i$e,"This class cannot be instantiated directly using "),f_e=n(i$e,"CODE",{});var Lpt=s(f_e);jdr=r(Lpt,"__init__()"),Lpt.forEach(t),Ndr=r(i$e," (throws an error)."),i$e.forEach(t),Ddr=i(ei),Tt=n(ei,"DIV",{class:!0});var oi=s(Tt);m(Iw.$$.fragment,oi),qdr=i(oi),m_e=n(oi,"P",{});var Bpt=s(m_e);Gdr=r(Bpt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Bpt.forEach(t),Odr=i(oi),jc=n(oi,"P",{});var _Q=s(jc);Xdr=r(_Q,`Note:
Loading a model from its configuration file does `),g_e=n(_Q,"STRONG",{});var xpt=s(g_e);Vdr=r(xpt,"not"),xpt.forEach(t),zdr=r(_Q,` load the model weights. It only affects the
model\u2019s configuration. Use `),h_e=n(_Q,"CODE",{});var kpt=s(h_e);Wdr=r(kpt,"from_pretrained()"),kpt.forEach(t),Qdr=r(_Q,"to load the model weights."),_Q.forEach(t),Hdr=i(oi),p_e=n(oi,"P",{});var Rpt=s(p_e);Udr=r(Rpt,"Examples:"),Rpt.forEach(t),Jdr=i(oi),m(jw.$$.fragment,oi),oi.forEach(t),Ydr=i(ei),vo=n(ei,"DIV",{class:!0});var Ma=s(vo);m(Nw.$$.fragment,Ma),Kdr=i(Ma),__e=n(Ma,"P",{});var Spt=s(__e);Zdr=r(Spt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Spt.forEach(t),ecr=i(Ma),yn=n(Ma,"P",{});var UM=s(yn);ocr=r(UM,"The model class to instantiate is selected based on the "),u_e=n(UM,"CODE",{});var Ppt=s(u_e);rcr=r(Ppt,"model_type"),Ppt.forEach(t),tcr=r(UM,` property of the config object (either
passed as an argument or loaded from `),b_e=n(UM,"CODE",{});var $pt=s(b_e);acr=r($pt,"pretrained_model_name_or_path"),$pt.forEach(t),ncr=r(UM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v_e=n(UM,"CODE",{});var Ipt=s(v_e);scr=r(Ipt,"pretrained_model_name_or_path"),Ipt.forEach(t),lcr=r(UM,":"),UM.forEach(t),icr=i(Ma),ue=n(Ma,"UL",{});var ye=s(ue);_T=n(ye,"LI",{});var K7e=s(_T);T_e=n(K7e,"STRONG",{});var jpt=s(T_e);dcr=r(jpt,"bart"),jpt.forEach(t),ccr=r(K7e," \u2014 "),BO=n(K7e,"A",{href:!0});var Npt=s(BO);fcr=r(Npt,"TFBartForConditionalGeneration"),Npt.forEach(t),mcr=r(K7e," (BART model)"),K7e.forEach(t),gcr=i(ye),uT=n(ye,"LI",{});var Z7e=s(uT);F_e=n(Z7e,"STRONG",{});var Dpt=s(F_e);hcr=r(Dpt,"blenderbot"),Dpt.forEach(t),pcr=r(Z7e," \u2014 "),xO=n(Z7e,"A",{href:!0});var qpt=s(xO);_cr=r(qpt,"TFBlenderbotForConditionalGeneration"),qpt.forEach(t),ucr=r(Z7e," (Blenderbot model)"),Z7e.forEach(t),bcr=i(ye),bT=n(ye,"LI",{});var e9e=s(bT);C_e=n(e9e,"STRONG",{});var Gpt=s(C_e);vcr=r(Gpt,"blenderbot-small"),Gpt.forEach(t),Tcr=r(e9e," \u2014 "),kO=n(e9e,"A",{href:!0});var Opt=s(kO);Fcr=r(Opt,"TFBlenderbotSmallForConditionalGeneration"),Opt.forEach(t),Ccr=r(e9e," (BlenderbotSmall model)"),e9e.forEach(t),Mcr=i(ye),vT=n(ye,"LI",{});var o9e=s(vT);M_e=n(o9e,"STRONG",{});var Xpt=s(M_e);Ecr=r(Xpt,"encoder-decoder"),Xpt.forEach(t),ycr=r(o9e," \u2014 "),RO=n(o9e,"A",{href:!0});var Vpt=s(RO);wcr=r(Vpt,"TFEncoderDecoderModel"),Vpt.forEach(t),Acr=r(o9e," (Encoder decoder model)"),o9e.forEach(t),Lcr=i(ye),TT=n(ye,"LI",{});var r9e=s(TT);E_e=n(r9e,"STRONG",{});var zpt=s(E_e);Bcr=r(zpt,"led"),zpt.forEach(t),xcr=r(r9e," \u2014 "),SO=n(r9e,"A",{href:!0});var Wpt=s(SO);kcr=r(Wpt,"TFLEDForConditionalGeneration"),Wpt.forEach(t),Rcr=r(r9e," (LED model)"),r9e.forEach(t),Scr=i(ye),FT=n(ye,"LI",{});var t9e=s(FT);y_e=n(t9e,"STRONG",{});var Qpt=s(y_e);Pcr=r(Qpt,"marian"),Qpt.forEach(t),$cr=r(t9e," \u2014 "),PO=n(t9e,"A",{href:!0});var Hpt=s(PO);Icr=r(Hpt,"TFMarianMTModel"),Hpt.forEach(t),jcr=r(t9e," (Marian model)"),t9e.forEach(t),Ncr=i(ye),CT=n(ye,"LI",{});var a9e=s(CT);w_e=n(a9e,"STRONG",{});var Upt=s(w_e);Dcr=r(Upt,"mbart"),Upt.forEach(t),qcr=r(a9e," \u2014 "),$O=n(a9e,"A",{href:!0});var Jpt=s($O);Gcr=r(Jpt,"TFMBartForConditionalGeneration"),Jpt.forEach(t),Ocr=r(a9e," (mBART model)"),a9e.forEach(t),Xcr=i(ye),MT=n(ye,"LI",{});var n9e=s(MT);A_e=n(n9e,"STRONG",{});var Ypt=s(A_e);Vcr=r(Ypt,"mt5"),Ypt.forEach(t),zcr=r(n9e," \u2014 "),IO=n(n9e,"A",{href:!0});var Kpt=s(IO);Wcr=r(Kpt,"TFMT5ForConditionalGeneration"),Kpt.forEach(t),Qcr=r(n9e," (mT5 model)"),n9e.forEach(t),Hcr=i(ye),ET=n(ye,"LI",{});var s9e=s(ET);L_e=n(s9e,"STRONG",{});var Zpt=s(L_e);Ucr=r(Zpt,"pegasus"),Zpt.forEach(t),Jcr=r(s9e," \u2014 "),jO=n(s9e,"A",{href:!0});var e_t=s(jO);Ycr=r(e_t,"TFPegasusForConditionalGeneration"),e_t.forEach(t),Kcr=r(s9e," (Pegasus model)"),s9e.forEach(t),Zcr=i(ye),yT=n(ye,"LI",{});var l9e=s(yT);B_e=n(l9e,"STRONG",{});var o_t=s(B_e);efr=r(o_t,"t5"),o_t.forEach(t),ofr=r(l9e," \u2014 "),NO=n(l9e,"A",{href:!0});var r_t=s(NO);rfr=r(r_t,"TFT5ForConditionalGeneration"),r_t.forEach(t),tfr=r(l9e," (T5 model)"),l9e.forEach(t),ye.forEach(t),afr=i(Ma),x_e=n(Ma,"P",{});var t_t=s(x_e);nfr=r(t_t,"Examples:"),t_t.forEach(t),sfr=i(Ma),m(Dw.$$.fragment,Ma),Ma.forEach(t),ei.forEach(t),URe=i(d),Nc=n(d,"H2",{class:!0});var d$e=s(Nc);wT=n(d$e,"A",{id:!0,class:!0,href:!0});var a_t=s(wT);k_e=n(a_t,"SPAN",{});var n_t=s(k_e);m(qw.$$.fragment,n_t),n_t.forEach(t),a_t.forEach(t),lfr=i(d$e),R_e=n(d$e,"SPAN",{});var s_t=s(R_e);ifr=r(s_t,"TFAutoModelForSequenceClassification"),s_t.forEach(t),d$e.forEach(t),JRe=i(d),wr=n(d,"DIV",{class:!0});var ri=s(wr);m(Gw.$$.fragment,ri),dfr=i(ri),Dc=n(ri,"P",{});var uQ=s(Dc);cfr=r(uQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),S_e=n(uQ,"CODE",{});var l_t=s(S_e);ffr=r(l_t,"from_pretrained()"),l_t.forEach(t),mfr=r(uQ,"class method or the "),P_e=n(uQ,"CODE",{});var i_t=s(P_e);gfr=r(i_t,"from_config()"),i_t.forEach(t),hfr=r(uQ,`class
method.`),uQ.forEach(t),pfr=i(ri),Ow=n(ri,"P",{});var c$e=s(Ow);_fr=r(c$e,"This class cannot be instantiated directly using "),$_e=n(c$e,"CODE",{});var d_t=s($_e);ufr=r(d_t,"__init__()"),d_t.forEach(t),bfr=r(c$e," (throws an error)."),c$e.forEach(t),vfr=i(ri),Ft=n(ri,"DIV",{class:!0});var ti=s(Ft);m(Xw.$$.fragment,ti),Tfr=i(ti),I_e=n(ti,"P",{});var c_t=s(I_e);Ffr=r(c_t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),c_t.forEach(t),Cfr=i(ti),qc=n(ti,"P",{});var bQ=s(qc);Mfr=r(bQ,`Note:
Loading a model from its configuration file does `),j_e=n(bQ,"STRONG",{});var f_t=s(j_e);Efr=r(f_t,"not"),f_t.forEach(t),yfr=r(bQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),N_e=n(bQ,"CODE",{});var m_t=s(N_e);wfr=r(m_t,"from_pretrained()"),m_t.forEach(t),Afr=r(bQ,"to load the model weights."),bQ.forEach(t),Lfr=i(ti),D_e=n(ti,"P",{});var g_t=s(D_e);Bfr=r(g_t,"Examples:"),g_t.forEach(t),xfr=i(ti),m(Vw.$$.fragment,ti),ti.forEach(t),kfr=i(ri),To=n(ri,"DIV",{class:!0});var Ea=s(To);m(zw.$$.fragment,Ea),Rfr=i(Ea),q_e=n(Ea,"P",{});var h_t=s(q_e);Sfr=r(h_t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),h_t.forEach(t),Pfr=i(Ea),wn=n(Ea,"P",{});var JM=s(wn);$fr=r(JM,"The model class to instantiate is selected based on the "),G_e=n(JM,"CODE",{});var p_t=s(G_e);Ifr=r(p_t,"model_type"),p_t.forEach(t),jfr=r(JM,` property of the config object (either
passed as an argument or loaded from `),O_e=n(JM,"CODE",{});var __t=s(O_e);Nfr=r(__t,"pretrained_model_name_or_path"),__t.forEach(t),Dfr=r(JM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X_e=n(JM,"CODE",{});var u_t=s(X_e);qfr=r(u_t,"pretrained_model_name_or_path"),u_t.forEach(t),Gfr=r(JM,":"),JM.forEach(t),Ofr=i(Ea),V=n(Ea,"UL",{});var W=s(V);AT=n(W,"LI",{});var i9e=s(AT);V_e=n(i9e,"STRONG",{});var b_t=s(V_e);Xfr=r(b_t,"albert"),b_t.forEach(t),Vfr=r(i9e," \u2014 "),DO=n(i9e,"A",{href:!0});var v_t=s(DO);zfr=r(v_t,"TFAlbertForSequenceClassification"),v_t.forEach(t),Wfr=r(i9e," (ALBERT model)"),i9e.forEach(t),Qfr=i(W),LT=n(W,"LI",{});var d9e=s(LT);z_e=n(d9e,"STRONG",{});var T_t=s(z_e);Hfr=r(T_t,"bert"),T_t.forEach(t),Ufr=r(d9e," \u2014 "),qO=n(d9e,"A",{href:!0});var F_t=s(qO);Jfr=r(F_t,"TFBertForSequenceClassification"),F_t.forEach(t),Yfr=r(d9e," (BERT model)"),d9e.forEach(t),Kfr=i(W),BT=n(W,"LI",{});var c9e=s(BT);W_e=n(c9e,"STRONG",{});var C_t=s(W_e);Zfr=r(C_t,"camembert"),C_t.forEach(t),emr=r(c9e," \u2014 "),GO=n(c9e,"A",{href:!0});var M_t=s(GO);omr=r(M_t,"TFCamembertForSequenceClassification"),M_t.forEach(t),rmr=r(c9e," (CamemBERT model)"),c9e.forEach(t),tmr=i(W),xT=n(W,"LI",{});var f9e=s(xT);Q_e=n(f9e,"STRONG",{});var E_t=s(Q_e);amr=r(E_t,"convbert"),E_t.forEach(t),nmr=r(f9e," \u2014 "),OO=n(f9e,"A",{href:!0});var y_t=s(OO);smr=r(y_t,"TFConvBertForSequenceClassification"),y_t.forEach(t),lmr=r(f9e," (ConvBERT model)"),f9e.forEach(t),imr=i(W),kT=n(W,"LI",{});var m9e=s(kT);H_e=n(m9e,"STRONG",{});var w_t=s(H_e);dmr=r(w_t,"ctrl"),w_t.forEach(t),cmr=r(m9e," \u2014 "),XO=n(m9e,"A",{href:!0});var A_t=s(XO);fmr=r(A_t,"TFCTRLForSequenceClassification"),A_t.forEach(t),mmr=r(m9e," (CTRL model)"),m9e.forEach(t),gmr=i(W),RT=n(W,"LI",{});var g9e=s(RT);U_e=n(g9e,"STRONG",{});var L_t=s(U_e);hmr=r(L_t,"deberta"),L_t.forEach(t),pmr=r(g9e," \u2014 "),VO=n(g9e,"A",{href:!0});var B_t=s(VO);_mr=r(B_t,"TFDebertaForSequenceClassification"),B_t.forEach(t),umr=r(g9e," (DeBERTa model)"),g9e.forEach(t),bmr=i(W),ST=n(W,"LI",{});var h9e=s(ST);J_e=n(h9e,"STRONG",{});var x_t=s(J_e);vmr=r(x_t,"deberta-v2"),x_t.forEach(t),Tmr=r(h9e," \u2014 "),zO=n(h9e,"A",{href:!0});var k_t=s(zO);Fmr=r(k_t,"TFDebertaV2ForSequenceClassification"),k_t.forEach(t),Cmr=r(h9e," (DeBERTa-v2 model)"),h9e.forEach(t),Mmr=i(W),PT=n(W,"LI",{});var p9e=s(PT);Y_e=n(p9e,"STRONG",{});var R_t=s(Y_e);Emr=r(R_t,"distilbert"),R_t.forEach(t),ymr=r(p9e," \u2014 "),WO=n(p9e,"A",{href:!0});var S_t=s(WO);wmr=r(S_t,"TFDistilBertForSequenceClassification"),S_t.forEach(t),Amr=r(p9e," (DistilBERT model)"),p9e.forEach(t),Lmr=i(W),$T=n(W,"LI",{});var _9e=s($T);K_e=n(_9e,"STRONG",{});var P_t=s(K_e);Bmr=r(P_t,"electra"),P_t.forEach(t),xmr=r(_9e," \u2014 "),QO=n(_9e,"A",{href:!0});var $_t=s(QO);kmr=r($_t,"TFElectraForSequenceClassification"),$_t.forEach(t),Rmr=r(_9e," (ELECTRA model)"),_9e.forEach(t),Smr=i(W),IT=n(W,"LI",{});var u9e=s(IT);Z_e=n(u9e,"STRONG",{});var I_t=s(Z_e);Pmr=r(I_t,"flaubert"),I_t.forEach(t),$mr=r(u9e," \u2014 "),HO=n(u9e,"A",{href:!0});var j_t=s(HO);Imr=r(j_t,"TFFlaubertForSequenceClassification"),j_t.forEach(t),jmr=r(u9e," (FlauBERT model)"),u9e.forEach(t),Nmr=i(W),jT=n(W,"LI",{});var b9e=s(jT);eue=n(b9e,"STRONG",{});var N_t=s(eue);Dmr=r(N_t,"funnel"),N_t.forEach(t),qmr=r(b9e," \u2014 "),UO=n(b9e,"A",{href:!0});var D_t=s(UO);Gmr=r(D_t,"TFFunnelForSequenceClassification"),D_t.forEach(t),Omr=r(b9e," (Funnel Transformer model)"),b9e.forEach(t),Xmr=i(W),NT=n(W,"LI",{});var v9e=s(NT);oue=n(v9e,"STRONG",{});var q_t=s(oue);Vmr=r(q_t,"gpt2"),q_t.forEach(t),zmr=r(v9e," \u2014 "),JO=n(v9e,"A",{href:!0});var G_t=s(JO);Wmr=r(G_t,"TFGPT2ForSequenceClassification"),G_t.forEach(t),Qmr=r(v9e," (OpenAI GPT-2 model)"),v9e.forEach(t),Hmr=i(W),DT=n(W,"LI",{});var T9e=s(DT);rue=n(T9e,"STRONG",{});var O_t=s(rue);Umr=r(O_t,"layoutlm"),O_t.forEach(t),Jmr=r(T9e," \u2014 "),YO=n(T9e,"A",{href:!0});var X_t=s(YO);Ymr=r(X_t,"TFLayoutLMForSequenceClassification"),X_t.forEach(t),Kmr=r(T9e," (LayoutLM model)"),T9e.forEach(t),Zmr=i(W),qT=n(W,"LI",{});var F9e=s(qT);tue=n(F9e,"STRONG",{});var V_t=s(tue);egr=r(V_t,"longformer"),V_t.forEach(t),ogr=r(F9e," \u2014 "),KO=n(F9e,"A",{href:!0});var z_t=s(KO);rgr=r(z_t,"TFLongformerForSequenceClassification"),z_t.forEach(t),tgr=r(F9e," (Longformer model)"),F9e.forEach(t),agr=i(W),GT=n(W,"LI",{});var C9e=s(GT);aue=n(C9e,"STRONG",{});var W_t=s(aue);ngr=r(W_t,"mobilebert"),W_t.forEach(t),sgr=r(C9e," \u2014 "),ZO=n(C9e,"A",{href:!0});var Q_t=s(ZO);lgr=r(Q_t,"TFMobileBertForSequenceClassification"),Q_t.forEach(t),igr=r(C9e," (MobileBERT model)"),C9e.forEach(t),dgr=i(W),OT=n(W,"LI",{});var M9e=s(OT);nue=n(M9e,"STRONG",{});var H_t=s(nue);cgr=r(H_t,"mpnet"),H_t.forEach(t),fgr=r(M9e," \u2014 "),eX=n(M9e,"A",{href:!0});var U_t=s(eX);mgr=r(U_t,"TFMPNetForSequenceClassification"),U_t.forEach(t),ggr=r(M9e," (MPNet model)"),M9e.forEach(t),hgr=i(W),XT=n(W,"LI",{});var E9e=s(XT);sue=n(E9e,"STRONG",{});var J_t=s(sue);pgr=r(J_t,"openai-gpt"),J_t.forEach(t),_gr=r(E9e," \u2014 "),oX=n(E9e,"A",{href:!0});var Y_t=s(oX);ugr=r(Y_t,"TFOpenAIGPTForSequenceClassification"),Y_t.forEach(t),bgr=r(E9e," (OpenAI GPT model)"),E9e.forEach(t),vgr=i(W),VT=n(W,"LI",{});var y9e=s(VT);lue=n(y9e,"STRONG",{});var K_t=s(lue);Tgr=r(K_t,"rembert"),K_t.forEach(t),Fgr=r(y9e," \u2014 "),rX=n(y9e,"A",{href:!0});var Z_t=s(rX);Cgr=r(Z_t,"TFRemBertForSequenceClassification"),Z_t.forEach(t),Mgr=r(y9e," (RemBERT model)"),y9e.forEach(t),Egr=i(W),zT=n(W,"LI",{});var w9e=s(zT);iue=n(w9e,"STRONG",{});var eut=s(iue);ygr=r(eut,"roberta"),eut.forEach(t),wgr=r(w9e," \u2014 "),tX=n(w9e,"A",{href:!0});var out=s(tX);Agr=r(out,"TFRobertaForSequenceClassification"),out.forEach(t),Lgr=r(w9e," (RoBERTa model)"),w9e.forEach(t),Bgr=i(W),WT=n(W,"LI",{});var A9e=s(WT);due=n(A9e,"STRONG",{});var rut=s(due);xgr=r(rut,"roformer"),rut.forEach(t),kgr=r(A9e," \u2014 "),aX=n(A9e,"A",{href:!0});var tut=s(aX);Rgr=r(tut,"TFRoFormerForSequenceClassification"),tut.forEach(t),Sgr=r(A9e," (RoFormer model)"),A9e.forEach(t),Pgr=i(W),QT=n(W,"LI",{});var L9e=s(QT);cue=n(L9e,"STRONG",{});var aut=s(cue);$gr=r(aut,"tapas"),aut.forEach(t),Igr=r(L9e," \u2014 "),nX=n(L9e,"A",{href:!0});var nut=s(nX);jgr=r(nut,"TFTapasForSequenceClassification"),nut.forEach(t),Ngr=r(L9e," (TAPAS model)"),L9e.forEach(t),Dgr=i(W),HT=n(W,"LI",{});var B9e=s(HT);fue=n(B9e,"STRONG",{});var sut=s(fue);qgr=r(sut,"transfo-xl"),sut.forEach(t),Ggr=r(B9e," \u2014 "),sX=n(B9e,"A",{href:!0});var lut=s(sX);Ogr=r(lut,"TFTransfoXLForSequenceClassification"),lut.forEach(t),Xgr=r(B9e," (Transformer-XL model)"),B9e.forEach(t),Vgr=i(W),UT=n(W,"LI",{});var x9e=s(UT);mue=n(x9e,"STRONG",{});var iut=s(mue);zgr=r(iut,"xlm"),iut.forEach(t),Wgr=r(x9e," \u2014 "),lX=n(x9e,"A",{href:!0});var dut=s(lX);Qgr=r(dut,"TFXLMForSequenceClassification"),dut.forEach(t),Hgr=r(x9e," (XLM model)"),x9e.forEach(t),Ugr=i(W),JT=n(W,"LI",{});var k9e=s(JT);gue=n(k9e,"STRONG",{});var cut=s(gue);Jgr=r(cut,"xlm-roberta"),cut.forEach(t),Ygr=r(k9e," \u2014 "),iX=n(k9e,"A",{href:!0});var fut=s(iX);Kgr=r(fut,"TFXLMRobertaForSequenceClassification"),fut.forEach(t),Zgr=r(k9e," (XLM-RoBERTa model)"),k9e.forEach(t),ehr=i(W),YT=n(W,"LI",{});var R9e=s(YT);hue=n(R9e,"STRONG",{});var mut=s(hue);ohr=r(mut,"xlnet"),mut.forEach(t),rhr=r(R9e," \u2014 "),dX=n(R9e,"A",{href:!0});var gut=s(dX);thr=r(gut,"TFXLNetForSequenceClassification"),gut.forEach(t),ahr=r(R9e," (XLNet model)"),R9e.forEach(t),W.forEach(t),nhr=i(Ea),pue=n(Ea,"P",{});var hut=s(pue);shr=r(hut,"Examples:"),hut.forEach(t),lhr=i(Ea),m(Ww.$$.fragment,Ea),Ea.forEach(t),ri.forEach(t),YRe=i(d),Gc=n(d,"H2",{class:!0});var f$e=s(Gc);KT=n(f$e,"A",{id:!0,class:!0,href:!0});var put=s(KT);_ue=n(put,"SPAN",{});var _ut=s(_ue);m(Qw.$$.fragment,_ut),_ut.forEach(t),put.forEach(t),ihr=i(f$e),uue=n(f$e,"SPAN",{});var uut=s(uue);dhr=r(uut,"TFAutoModelForMultipleChoice"),uut.forEach(t),f$e.forEach(t),KRe=i(d),Ar=n(d,"DIV",{class:!0});var ai=s(Ar);m(Hw.$$.fragment,ai),chr=i(ai),Oc=n(ai,"P",{});var vQ=s(Oc);fhr=r(vQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),bue=n(vQ,"CODE",{});var but=s(bue);mhr=r(but,"from_pretrained()"),but.forEach(t),ghr=r(vQ,"class method or the "),vue=n(vQ,"CODE",{});var vut=s(vue);hhr=r(vut,"from_config()"),vut.forEach(t),phr=r(vQ,`class
method.`),vQ.forEach(t),_hr=i(ai),Uw=n(ai,"P",{});var m$e=s(Uw);uhr=r(m$e,"This class cannot be instantiated directly using "),Tue=n(m$e,"CODE",{});var Tut=s(Tue);bhr=r(Tut,"__init__()"),Tut.forEach(t),vhr=r(m$e," (throws an error)."),m$e.forEach(t),Thr=i(ai),Ct=n(ai,"DIV",{class:!0});var ni=s(Ct);m(Jw.$$.fragment,ni),Fhr=i(ni),Fue=n(ni,"P",{});var Fut=s(Fue);Chr=r(Fut,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Fut.forEach(t),Mhr=i(ni),Xc=n(ni,"P",{});var TQ=s(Xc);Ehr=r(TQ,`Note:
Loading a model from its configuration file does `),Cue=n(TQ,"STRONG",{});var Cut=s(Cue);yhr=r(Cut,"not"),Cut.forEach(t),whr=r(TQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mue=n(TQ,"CODE",{});var Mut=s(Mue);Ahr=r(Mut,"from_pretrained()"),Mut.forEach(t),Lhr=r(TQ,"to load the model weights."),TQ.forEach(t),Bhr=i(ni),Eue=n(ni,"P",{});var Eut=s(Eue);xhr=r(Eut,"Examples:"),Eut.forEach(t),khr=i(ni),m(Yw.$$.fragment,ni),ni.forEach(t),Rhr=i(ai),Fo=n(ai,"DIV",{class:!0});var ya=s(Fo);m(Kw.$$.fragment,ya),Shr=i(ya),yue=n(ya,"P",{});var yut=s(yue);Phr=r(yut,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),yut.forEach(t),$hr=i(ya),An=n(ya,"P",{});var YM=s(An);Ihr=r(YM,"The model class to instantiate is selected based on the "),wue=n(YM,"CODE",{});var wut=s(wue);jhr=r(wut,"model_type"),wut.forEach(t),Nhr=r(YM,` property of the config object (either
passed as an argument or loaded from `),Aue=n(YM,"CODE",{});var Aut=s(Aue);Dhr=r(Aut,"pretrained_model_name_or_path"),Aut.forEach(t),qhr=r(YM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lue=n(YM,"CODE",{});var Lut=s(Lue);Ghr=r(Lut,"pretrained_model_name_or_path"),Lut.forEach(t),Ohr=r(YM,":"),YM.forEach(t),Xhr=i(ya),ae=n(ya,"UL",{});var le=s(ae);ZT=n(le,"LI",{});var S9e=s(ZT);Bue=n(S9e,"STRONG",{});var But=s(Bue);Vhr=r(But,"albert"),But.forEach(t),zhr=r(S9e," \u2014 "),cX=n(S9e,"A",{href:!0});var xut=s(cX);Whr=r(xut,"TFAlbertForMultipleChoice"),xut.forEach(t),Qhr=r(S9e," (ALBERT model)"),S9e.forEach(t),Hhr=i(le),e8=n(le,"LI",{});var P9e=s(e8);xue=n(P9e,"STRONG",{});var kut=s(xue);Uhr=r(kut,"bert"),kut.forEach(t),Jhr=r(P9e," \u2014 "),fX=n(P9e,"A",{href:!0});var Rut=s(fX);Yhr=r(Rut,"TFBertForMultipleChoice"),Rut.forEach(t),Khr=r(P9e," (BERT model)"),P9e.forEach(t),Zhr=i(le),o8=n(le,"LI",{});var $9e=s(o8);kue=n($9e,"STRONG",{});var Sut=s(kue);epr=r(Sut,"camembert"),Sut.forEach(t),opr=r($9e," \u2014 "),mX=n($9e,"A",{href:!0});var Put=s(mX);rpr=r(Put,"TFCamembertForMultipleChoice"),Put.forEach(t),tpr=r($9e," (CamemBERT model)"),$9e.forEach(t),apr=i(le),r8=n(le,"LI",{});var I9e=s(r8);Rue=n(I9e,"STRONG",{});var $ut=s(Rue);npr=r($ut,"convbert"),$ut.forEach(t),spr=r(I9e," \u2014 "),gX=n(I9e,"A",{href:!0});var Iut=s(gX);lpr=r(Iut,"TFConvBertForMultipleChoice"),Iut.forEach(t),ipr=r(I9e," (ConvBERT model)"),I9e.forEach(t),dpr=i(le),t8=n(le,"LI",{});var j9e=s(t8);Sue=n(j9e,"STRONG",{});var jut=s(Sue);cpr=r(jut,"distilbert"),jut.forEach(t),fpr=r(j9e," \u2014 "),hX=n(j9e,"A",{href:!0});var Nut=s(hX);mpr=r(Nut,"TFDistilBertForMultipleChoice"),Nut.forEach(t),gpr=r(j9e," (DistilBERT model)"),j9e.forEach(t),hpr=i(le),a8=n(le,"LI",{});var N9e=s(a8);Pue=n(N9e,"STRONG",{});var Dut=s(Pue);ppr=r(Dut,"electra"),Dut.forEach(t),_pr=r(N9e," \u2014 "),pX=n(N9e,"A",{href:!0});var qut=s(pX);upr=r(qut,"TFElectraForMultipleChoice"),qut.forEach(t),bpr=r(N9e," (ELECTRA model)"),N9e.forEach(t),vpr=i(le),n8=n(le,"LI",{});var D9e=s(n8);$ue=n(D9e,"STRONG",{});var Gut=s($ue);Tpr=r(Gut,"flaubert"),Gut.forEach(t),Fpr=r(D9e," \u2014 "),_X=n(D9e,"A",{href:!0});var Out=s(_X);Cpr=r(Out,"TFFlaubertForMultipleChoice"),Out.forEach(t),Mpr=r(D9e," (FlauBERT model)"),D9e.forEach(t),Epr=i(le),s8=n(le,"LI",{});var q9e=s(s8);Iue=n(q9e,"STRONG",{});var Xut=s(Iue);ypr=r(Xut,"funnel"),Xut.forEach(t),wpr=r(q9e," \u2014 "),uX=n(q9e,"A",{href:!0});var Vut=s(uX);Apr=r(Vut,"TFFunnelForMultipleChoice"),Vut.forEach(t),Lpr=r(q9e," (Funnel Transformer model)"),q9e.forEach(t),Bpr=i(le),l8=n(le,"LI",{});var G9e=s(l8);jue=n(G9e,"STRONG",{});var zut=s(jue);xpr=r(zut,"longformer"),zut.forEach(t),kpr=r(G9e," \u2014 "),bX=n(G9e,"A",{href:!0});var Wut=s(bX);Rpr=r(Wut,"TFLongformerForMultipleChoice"),Wut.forEach(t),Spr=r(G9e," (Longformer model)"),G9e.forEach(t),Ppr=i(le),i8=n(le,"LI",{});var O9e=s(i8);Nue=n(O9e,"STRONG",{});var Qut=s(Nue);$pr=r(Qut,"mobilebert"),Qut.forEach(t),Ipr=r(O9e," \u2014 "),vX=n(O9e,"A",{href:!0});var Hut=s(vX);jpr=r(Hut,"TFMobileBertForMultipleChoice"),Hut.forEach(t),Npr=r(O9e," (MobileBERT model)"),O9e.forEach(t),Dpr=i(le),d8=n(le,"LI",{});var X9e=s(d8);Due=n(X9e,"STRONG",{});var Uut=s(Due);qpr=r(Uut,"mpnet"),Uut.forEach(t),Gpr=r(X9e," \u2014 "),TX=n(X9e,"A",{href:!0});var Jut=s(TX);Opr=r(Jut,"TFMPNetForMultipleChoice"),Jut.forEach(t),Xpr=r(X9e," (MPNet model)"),X9e.forEach(t),Vpr=i(le),c8=n(le,"LI",{});var V9e=s(c8);que=n(V9e,"STRONG",{});var Yut=s(que);zpr=r(Yut,"rembert"),Yut.forEach(t),Wpr=r(V9e," \u2014 "),FX=n(V9e,"A",{href:!0});var Kut=s(FX);Qpr=r(Kut,"TFRemBertForMultipleChoice"),Kut.forEach(t),Hpr=r(V9e," (RemBERT model)"),V9e.forEach(t),Upr=i(le),f8=n(le,"LI",{});var z9e=s(f8);Gue=n(z9e,"STRONG",{});var Zut=s(Gue);Jpr=r(Zut,"roberta"),Zut.forEach(t),Ypr=r(z9e," \u2014 "),CX=n(z9e,"A",{href:!0});var e1t=s(CX);Kpr=r(e1t,"TFRobertaForMultipleChoice"),e1t.forEach(t),Zpr=r(z9e," (RoBERTa model)"),z9e.forEach(t),e_r=i(le),m8=n(le,"LI",{});var W9e=s(m8);Oue=n(W9e,"STRONG",{});var o1t=s(Oue);o_r=r(o1t,"roformer"),o1t.forEach(t),r_r=r(W9e," \u2014 "),MX=n(W9e,"A",{href:!0});var r1t=s(MX);t_r=r(r1t,"TFRoFormerForMultipleChoice"),r1t.forEach(t),a_r=r(W9e," (RoFormer model)"),W9e.forEach(t),n_r=i(le),g8=n(le,"LI",{});var Q9e=s(g8);Xue=n(Q9e,"STRONG",{});var t1t=s(Xue);s_r=r(t1t,"xlm"),t1t.forEach(t),l_r=r(Q9e," \u2014 "),EX=n(Q9e,"A",{href:!0});var a1t=s(EX);i_r=r(a1t,"TFXLMForMultipleChoice"),a1t.forEach(t),d_r=r(Q9e," (XLM model)"),Q9e.forEach(t),c_r=i(le),h8=n(le,"LI",{});var H9e=s(h8);Vue=n(H9e,"STRONG",{});var n1t=s(Vue);f_r=r(n1t,"xlm-roberta"),n1t.forEach(t),m_r=r(H9e," \u2014 "),yX=n(H9e,"A",{href:!0});var s1t=s(yX);g_r=r(s1t,"TFXLMRobertaForMultipleChoice"),s1t.forEach(t),h_r=r(H9e," (XLM-RoBERTa model)"),H9e.forEach(t),p_r=i(le),p8=n(le,"LI",{});var U9e=s(p8);zue=n(U9e,"STRONG",{});var l1t=s(zue);__r=r(l1t,"xlnet"),l1t.forEach(t),u_r=r(U9e," \u2014 "),wX=n(U9e,"A",{href:!0});var i1t=s(wX);b_r=r(i1t,"TFXLNetForMultipleChoice"),i1t.forEach(t),v_r=r(U9e," (XLNet model)"),U9e.forEach(t),le.forEach(t),T_r=i(ya),Wue=n(ya,"P",{});var d1t=s(Wue);F_r=r(d1t,"Examples:"),d1t.forEach(t),C_r=i(ya),m(Zw.$$.fragment,ya),ya.forEach(t),ai.forEach(t),ZRe=i(d),Vc=n(d,"H2",{class:!0});var g$e=s(Vc);_8=n(g$e,"A",{id:!0,class:!0,href:!0});var c1t=s(_8);Que=n(c1t,"SPAN",{});var f1t=s(Que);m(eA.$$.fragment,f1t),f1t.forEach(t),c1t.forEach(t),M_r=i(g$e),Hue=n(g$e,"SPAN",{});var m1t=s(Hue);E_r=r(m1t,"TFAutoModelForTableQuestionAnswering"),m1t.forEach(t),g$e.forEach(t),eSe=i(d),Lr=n(d,"DIV",{class:!0});var si=s(Lr);m(oA.$$.fragment,si),y_r=i(si),zc=n(si,"P",{});var FQ=s(zc);w_r=r(FQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Uue=n(FQ,"CODE",{});var g1t=s(Uue);A_r=r(g1t,"from_pretrained()"),g1t.forEach(t),L_r=r(FQ,"class method or the "),Jue=n(FQ,"CODE",{});var h1t=s(Jue);B_r=r(h1t,"from_config()"),h1t.forEach(t),x_r=r(FQ,`class
method.`),FQ.forEach(t),k_r=i(si),rA=n(si,"P",{});var h$e=s(rA);R_r=r(h$e,"This class cannot be instantiated directly using "),Yue=n(h$e,"CODE",{});var p1t=s(Yue);S_r=r(p1t,"__init__()"),p1t.forEach(t),P_r=r(h$e," (throws an error)."),h$e.forEach(t),$_r=i(si),Mt=n(si,"DIV",{class:!0});var li=s(Mt);m(tA.$$.fragment,li),I_r=i(li),Kue=n(li,"P",{});var _1t=s(Kue);j_r=r(_1t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),_1t.forEach(t),N_r=i(li),Wc=n(li,"P",{});var CQ=s(Wc);D_r=r(CQ,`Note:
Loading a model from its configuration file does `),Zue=n(CQ,"STRONG",{});var u1t=s(Zue);q_r=r(u1t,"not"),u1t.forEach(t),G_r=r(CQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),e1e=n(CQ,"CODE",{});var b1t=s(e1e);O_r=r(b1t,"from_pretrained()"),b1t.forEach(t),X_r=r(CQ,"to load the model weights."),CQ.forEach(t),V_r=i(li),o1e=n(li,"P",{});var v1t=s(o1e);z_r=r(v1t,"Examples:"),v1t.forEach(t),W_r=i(li),m(aA.$$.fragment,li),li.forEach(t),Q_r=i(si),Co=n(si,"DIV",{class:!0});var wa=s(Co);m(nA.$$.fragment,wa),H_r=i(wa),r1e=n(wa,"P",{});var T1t=s(r1e);U_r=r(T1t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),T1t.forEach(t),J_r=i(wa),Ln=n(wa,"P",{});var KM=s(Ln);Y_r=r(KM,"The model class to instantiate is selected based on the "),t1e=n(KM,"CODE",{});var F1t=s(t1e);K_r=r(F1t,"model_type"),F1t.forEach(t),Z_r=r(KM,` property of the config object (either
passed as an argument or loaded from `),a1e=n(KM,"CODE",{});var C1t=s(a1e);eur=r(C1t,"pretrained_model_name_or_path"),C1t.forEach(t),our=r(KM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n1e=n(KM,"CODE",{});var M1t=s(n1e);rur=r(M1t,"pretrained_model_name_or_path"),M1t.forEach(t),tur=r(KM,":"),KM.forEach(t),aur=i(wa),s1e=n(wa,"UL",{});var E1t=s(s1e);u8=n(E1t,"LI",{});var J9e=s(u8);l1e=n(J9e,"STRONG",{});var y1t=s(l1e);nur=r(y1t,"tapas"),y1t.forEach(t),sur=r(J9e," \u2014 "),AX=n(J9e,"A",{href:!0});var w1t=s(AX);lur=r(w1t,"TFTapasForQuestionAnswering"),w1t.forEach(t),iur=r(J9e," (TAPAS model)"),J9e.forEach(t),E1t.forEach(t),dur=i(wa),i1e=n(wa,"P",{});var A1t=s(i1e);cur=r(A1t,"Examples:"),A1t.forEach(t),fur=i(wa),m(sA.$$.fragment,wa),wa.forEach(t),si.forEach(t),oSe=i(d),Qc=n(d,"H2",{class:!0});var p$e=s(Qc);b8=n(p$e,"A",{id:!0,class:!0,href:!0});var L1t=s(b8);d1e=n(L1t,"SPAN",{});var B1t=s(d1e);m(lA.$$.fragment,B1t),B1t.forEach(t),L1t.forEach(t),mur=i(p$e),c1e=n(p$e,"SPAN",{});var x1t=s(c1e);gur=r(x1t,"TFAutoModelForTokenClassification"),x1t.forEach(t),p$e.forEach(t),rSe=i(d),Br=n(d,"DIV",{class:!0});var ii=s(Br);m(iA.$$.fragment,ii),hur=i(ii),Hc=n(ii,"P",{});var MQ=s(Hc);pur=r(MQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),f1e=n(MQ,"CODE",{});var k1t=s(f1e);_ur=r(k1t,"from_pretrained()"),k1t.forEach(t),uur=r(MQ,"class method or the "),m1e=n(MQ,"CODE",{});var R1t=s(m1e);bur=r(R1t,"from_config()"),R1t.forEach(t),vur=r(MQ,`class
method.`),MQ.forEach(t),Tur=i(ii),dA=n(ii,"P",{});var _$e=s(dA);Fur=r(_$e,"This class cannot be instantiated directly using "),g1e=n(_$e,"CODE",{});var S1t=s(g1e);Cur=r(S1t,"__init__()"),S1t.forEach(t),Mur=r(_$e," (throws an error)."),_$e.forEach(t),Eur=i(ii),Et=n(ii,"DIV",{class:!0});var di=s(Et);m(cA.$$.fragment,di),yur=i(di),h1e=n(di,"P",{});var P1t=s(h1e);wur=r(P1t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),P1t.forEach(t),Aur=i(di),Uc=n(di,"P",{});var EQ=s(Uc);Lur=r(EQ,`Note:
Loading a model from its configuration file does `),p1e=n(EQ,"STRONG",{});var $1t=s(p1e);Bur=r($1t,"not"),$1t.forEach(t),xur=r(EQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),_1e=n(EQ,"CODE",{});var I1t=s(_1e);kur=r(I1t,"from_pretrained()"),I1t.forEach(t),Rur=r(EQ,"to load the model weights."),EQ.forEach(t),Sur=i(di),u1e=n(di,"P",{});var j1t=s(u1e);Pur=r(j1t,"Examples:"),j1t.forEach(t),$ur=i(di),m(fA.$$.fragment,di),di.forEach(t),Iur=i(ii),Mo=n(ii,"DIV",{class:!0});var Aa=s(Mo);m(mA.$$.fragment,Aa),jur=i(Aa),b1e=n(Aa,"P",{});var N1t=s(b1e);Nur=r(N1t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),N1t.forEach(t),Dur=i(Aa),Bn=n(Aa,"P",{});var ZM=s(Bn);qur=r(ZM,"The model class to instantiate is selected based on the "),v1e=n(ZM,"CODE",{});var D1t=s(v1e);Gur=r(D1t,"model_type"),D1t.forEach(t),Our=r(ZM,` property of the config object (either
passed as an argument or loaded from `),T1e=n(ZM,"CODE",{});var q1t=s(T1e);Xur=r(q1t,"pretrained_model_name_or_path"),q1t.forEach(t),Vur=r(ZM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F1e=n(ZM,"CODE",{});var G1t=s(F1e);zur=r(G1t,"pretrained_model_name_or_path"),G1t.forEach(t),Wur=r(ZM,":"),ZM.forEach(t),Qur=i(Aa),K=n(Aa,"UL",{});var oe=s(K);v8=n(oe,"LI",{});var Y9e=s(v8);C1e=n(Y9e,"STRONG",{});var O1t=s(C1e);Hur=r(O1t,"albert"),O1t.forEach(t),Uur=r(Y9e," \u2014 "),LX=n(Y9e,"A",{href:!0});var X1t=s(LX);Jur=r(X1t,"TFAlbertForTokenClassification"),X1t.forEach(t),Yur=r(Y9e," (ALBERT model)"),Y9e.forEach(t),Kur=i(oe),T8=n(oe,"LI",{});var K9e=s(T8);M1e=n(K9e,"STRONG",{});var V1t=s(M1e);Zur=r(V1t,"bert"),V1t.forEach(t),e1r=r(K9e," \u2014 "),BX=n(K9e,"A",{href:!0});var z1t=s(BX);o1r=r(z1t,"TFBertForTokenClassification"),z1t.forEach(t),r1r=r(K9e," (BERT model)"),K9e.forEach(t),t1r=i(oe),F8=n(oe,"LI",{});var Z9e=s(F8);E1e=n(Z9e,"STRONG",{});var W1t=s(E1e);a1r=r(W1t,"camembert"),W1t.forEach(t),n1r=r(Z9e," \u2014 "),xX=n(Z9e,"A",{href:!0});var Q1t=s(xX);s1r=r(Q1t,"TFCamembertForTokenClassification"),Q1t.forEach(t),l1r=r(Z9e," (CamemBERT model)"),Z9e.forEach(t),i1r=i(oe),C8=n(oe,"LI",{});var eBe=s(C8);y1e=n(eBe,"STRONG",{});var H1t=s(y1e);d1r=r(H1t,"convbert"),H1t.forEach(t),c1r=r(eBe," \u2014 "),kX=n(eBe,"A",{href:!0});var U1t=s(kX);f1r=r(U1t,"TFConvBertForTokenClassification"),U1t.forEach(t),m1r=r(eBe," (ConvBERT model)"),eBe.forEach(t),g1r=i(oe),M8=n(oe,"LI",{});var oBe=s(M8);w1e=n(oBe,"STRONG",{});var J1t=s(w1e);h1r=r(J1t,"deberta"),J1t.forEach(t),p1r=r(oBe," \u2014 "),RX=n(oBe,"A",{href:!0});var Y1t=s(RX);_1r=r(Y1t,"TFDebertaForTokenClassification"),Y1t.forEach(t),u1r=r(oBe," (DeBERTa model)"),oBe.forEach(t),b1r=i(oe),E8=n(oe,"LI",{});var rBe=s(E8);A1e=n(rBe,"STRONG",{});var K1t=s(A1e);v1r=r(K1t,"deberta-v2"),K1t.forEach(t),T1r=r(rBe," \u2014 "),SX=n(rBe,"A",{href:!0});var Z1t=s(SX);F1r=r(Z1t,"TFDebertaV2ForTokenClassification"),Z1t.forEach(t),C1r=r(rBe," (DeBERTa-v2 model)"),rBe.forEach(t),M1r=i(oe),y8=n(oe,"LI",{});var tBe=s(y8);L1e=n(tBe,"STRONG",{});var ebt=s(L1e);E1r=r(ebt,"distilbert"),ebt.forEach(t),y1r=r(tBe," \u2014 "),PX=n(tBe,"A",{href:!0});var obt=s(PX);w1r=r(obt,"TFDistilBertForTokenClassification"),obt.forEach(t),A1r=r(tBe," (DistilBERT model)"),tBe.forEach(t),L1r=i(oe),w8=n(oe,"LI",{});var aBe=s(w8);B1e=n(aBe,"STRONG",{});var rbt=s(B1e);B1r=r(rbt,"electra"),rbt.forEach(t),x1r=r(aBe," \u2014 "),$X=n(aBe,"A",{href:!0});var tbt=s($X);k1r=r(tbt,"TFElectraForTokenClassification"),tbt.forEach(t),R1r=r(aBe," (ELECTRA model)"),aBe.forEach(t),S1r=i(oe),A8=n(oe,"LI",{});var nBe=s(A8);x1e=n(nBe,"STRONG",{});var abt=s(x1e);P1r=r(abt,"flaubert"),abt.forEach(t),$1r=r(nBe," \u2014 "),IX=n(nBe,"A",{href:!0});var nbt=s(IX);I1r=r(nbt,"TFFlaubertForTokenClassification"),nbt.forEach(t),j1r=r(nBe," (FlauBERT model)"),nBe.forEach(t),N1r=i(oe),L8=n(oe,"LI",{});var sBe=s(L8);k1e=n(sBe,"STRONG",{});var sbt=s(k1e);D1r=r(sbt,"funnel"),sbt.forEach(t),q1r=r(sBe," \u2014 "),jX=n(sBe,"A",{href:!0});var lbt=s(jX);G1r=r(lbt,"TFFunnelForTokenClassification"),lbt.forEach(t),O1r=r(sBe," (Funnel Transformer model)"),sBe.forEach(t),X1r=i(oe),B8=n(oe,"LI",{});var lBe=s(B8);R1e=n(lBe,"STRONG",{});var ibt=s(R1e);V1r=r(ibt,"layoutlm"),ibt.forEach(t),z1r=r(lBe," \u2014 "),NX=n(lBe,"A",{href:!0});var dbt=s(NX);W1r=r(dbt,"TFLayoutLMForTokenClassification"),dbt.forEach(t),Q1r=r(lBe," (LayoutLM model)"),lBe.forEach(t),H1r=i(oe),x8=n(oe,"LI",{});var iBe=s(x8);S1e=n(iBe,"STRONG",{});var cbt=s(S1e);U1r=r(cbt,"longformer"),cbt.forEach(t),J1r=r(iBe," \u2014 "),DX=n(iBe,"A",{href:!0});var fbt=s(DX);Y1r=r(fbt,"TFLongformerForTokenClassification"),fbt.forEach(t),K1r=r(iBe," (Longformer model)"),iBe.forEach(t),Z1r=i(oe),k8=n(oe,"LI",{});var dBe=s(k8);P1e=n(dBe,"STRONG",{});var mbt=s(P1e);ebr=r(mbt,"mobilebert"),mbt.forEach(t),obr=r(dBe," \u2014 "),qX=n(dBe,"A",{href:!0});var gbt=s(qX);rbr=r(gbt,"TFMobileBertForTokenClassification"),gbt.forEach(t),tbr=r(dBe," (MobileBERT model)"),dBe.forEach(t),abr=i(oe),R8=n(oe,"LI",{});var cBe=s(R8);$1e=n(cBe,"STRONG",{});var hbt=s($1e);nbr=r(hbt,"mpnet"),hbt.forEach(t),sbr=r(cBe," \u2014 "),GX=n(cBe,"A",{href:!0});var pbt=s(GX);lbr=r(pbt,"TFMPNetForTokenClassification"),pbt.forEach(t),ibr=r(cBe," (MPNet model)"),cBe.forEach(t),dbr=i(oe),S8=n(oe,"LI",{});var fBe=s(S8);I1e=n(fBe,"STRONG",{});var _bt=s(I1e);cbr=r(_bt,"rembert"),_bt.forEach(t),fbr=r(fBe," \u2014 "),OX=n(fBe,"A",{href:!0});var ubt=s(OX);mbr=r(ubt,"TFRemBertForTokenClassification"),ubt.forEach(t),gbr=r(fBe," (RemBERT model)"),fBe.forEach(t),hbr=i(oe),P8=n(oe,"LI",{});var mBe=s(P8);j1e=n(mBe,"STRONG",{});var bbt=s(j1e);pbr=r(bbt,"roberta"),bbt.forEach(t),_br=r(mBe," \u2014 "),XX=n(mBe,"A",{href:!0});var vbt=s(XX);ubr=r(vbt,"TFRobertaForTokenClassification"),vbt.forEach(t),bbr=r(mBe," (RoBERTa model)"),mBe.forEach(t),vbr=i(oe),$8=n(oe,"LI",{});var gBe=s($8);N1e=n(gBe,"STRONG",{});var Tbt=s(N1e);Tbr=r(Tbt,"roformer"),Tbt.forEach(t),Fbr=r(gBe," \u2014 "),VX=n(gBe,"A",{href:!0});var Fbt=s(VX);Cbr=r(Fbt,"TFRoFormerForTokenClassification"),Fbt.forEach(t),Mbr=r(gBe," (RoFormer model)"),gBe.forEach(t),Ebr=i(oe),I8=n(oe,"LI",{});var hBe=s(I8);D1e=n(hBe,"STRONG",{});var Cbt=s(D1e);ybr=r(Cbt,"xlm"),Cbt.forEach(t),wbr=r(hBe," \u2014 "),zX=n(hBe,"A",{href:!0});var Mbt=s(zX);Abr=r(Mbt,"TFXLMForTokenClassification"),Mbt.forEach(t),Lbr=r(hBe," (XLM model)"),hBe.forEach(t),Bbr=i(oe),j8=n(oe,"LI",{});var pBe=s(j8);q1e=n(pBe,"STRONG",{});var Ebt=s(q1e);xbr=r(Ebt,"xlm-roberta"),Ebt.forEach(t),kbr=r(pBe," \u2014 "),WX=n(pBe,"A",{href:!0});var ybt=s(WX);Rbr=r(ybt,"TFXLMRobertaForTokenClassification"),ybt.forEach(t),Sbr=r(pBe," (XLM-RoBERTa model)"),pBe.forEach(t),Pbr=i(oe),N8=n(oe,"LI",{});var _Be=s(N8);G1e=n(_Be,"STRONG",{});var wbt=s(G1e);$br=r(wbt,"xlnet"),wbt.forEach(t),Ibr=r(_Be," \u2014 "),QX=n(_Be,"A",{href:!0});var Abt=s(QX);jbr=r(Abt,"TFXLNetForTokenClassification"),Abt.forEach(t),Nbr=r(_Be," (XLNet model)"),_Be.forEach(t),oe.forEach(t),Dbr=i(Aa),O1e=n(Aa,"P",{});var Lbt=s(O1e);qbr=r(Lbt,"Examples:"),Lbt.forEach(t),Gbr=i(Aa),m(gA.$$.fragment,Aa),Aa.forEach(t),ii.forEach(t),tSe=i(d),Jc=n(d,"H2",{class:!0});var u$e=s(Jc);D8=n(u$e,"A",{id:!0,class:!0,href:!0});var Bbt=s(D8);X1e=n(Bbt,"SPAN",{});var xbt=s(X1e);m(hA.$$.fragment,xbt),xbt.forEach(t),Bbt.forEach(t),Obr=i(u$e),V1e=n(u$e,"SPAN",{});var kbt=s(V1e);Xbr=r(kbt,"TFAutoModelForQuestionAnswering"),kbt.forEach(t),u$e.forEach(t),aSe=i(d),xr=n(d,"DIV",{class:!0});var ci=s(xr);m(pA.$$.fragment,ci),Vbr=i(ci),Yc=n(ci,"P",{});var yQ=s(Yc);zbr=r(yQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),z1e=n(yQ,"CODE",{});var Rbt=s(z1e);Wbr=r(Rbt,"from_pretrained()"),Rbt.forEach(t),Qbr=r(yQ,"class method or the "),W1e=n(yQ,"CODE",{});var Sbt=s(W1e);Hbr=r(Sbt,"from_config()"),Sbt.forEach(t),Ubr=r(yQ,`class
method.`),yQ.forEach(t),Jbr=i(ci),_A=n(ci,"P",{});var b$e=s(_A);Ybr=r(b$e,"This class cannot be instantiated directly using "),Q1e=n(b$e,"CODE",{});var Pbt=s(Q1e);Kbr=r(Pbt,"__init__()"),Pbt.forEach(t),Zbr=r(b$e," (throws an error)."),b$e.forEach(t),e5r=i(ci),yt=n(ci,"DIV",{class:!0});var fi=s(yt);m(uA.$$.fragment,fi),o5r=i(fi),H1e=n(fi,"P",{});var $bt=s(H1e);r5r=r($bt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),$bt.forEach(t),t5r=i(fi),Kc=n(fi,"P",{});var wQ=s(Kc);a5r=r(wQ,`Note:
Loading a model from its configuration file does `),U1e=n(wQ,"STRONG",{});var Ibt=s(U1e);n5r=r(Ibt,"not"),Ibt.forEach(t),s5r=r(wQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),J1e=n(wQ,"CODE",{});var jbt=s(J1e);l5r=r(jbt,"from_pretrained()"),jbt.forEach(t),i5r=r(wQ,"to load the model weights."),wQ.forEach(t),d5r=i(fi),Y1e=n(fi,"P",{});var Nbt=s(Y1e);c5r=r(Nbt,"Examples:"),Nbt.forEach(t),f5r=i(fi),m(bA.$$.fragment,fi),fi.forEach(t),m5r=i(ci),Eo=n(ci,"DIV",{class:!0});var La=s(Eo);m(vA.$$.fragment,La),g5r=i(La),K1e=n(La,"P",{});var Dbt=s(K1e);h5r=r(Dbt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Dbt.forEach(t),p5r=i(La),xn=n(La,"P",{});var e4=s(xn);_5r=r(e4,"The model class to instantiate is selected based on the "),Z1e=n(e4,"CODE",{});var qbt=s(Z1e);u5r=r(qbt,"model_type"),qbt.forEach(t),b5r=r(e4,` property of the config object (either
passed as an argument or loaded from `),ebe=n(e4,"CODE",{});var Gbt=s(ebe);v5r=r(Gbt,"pretrained_model_name_or_path"),Gbt.forEach(t),T5r=r(e4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),obe=n(e4,"CODE",{});var Obt=s(obe);F5r=r(Obt,"pretrained_model_name_or_path"),Obt.forEach(t),C5r=r(e4,":"),e4.forEach(t),M5r=i(La),Z=n(La,"UL",{});var te=s(Z);q8=n(te,"LI",{});var uBe=s(q8);rbe=n(uBe,"STRONG",{});var Xbt=s(rbe);E5r=r(Xbt,"albert"),Xbt.forEach(t),y5r=r(uBe," \u2014 "),HX=n(uBe,"A",{href:!0});var Vbt=s(HX);w5r=r(Vbt,"TFAlbertForQuestionAnswering"),Vbt.forEach(t),A5r=r(uBe," (ALBERT model)"),uBe.forEach(t),L5r=i(te),G8=n(te,"LI",{});var bBe=s(G8);tbe=n(bBe,"STRONG",{});var zbt=s(tbe);B5r=r(zbt,"bert"),zbt.forEach(t),x5r=r(bBe," \u2014 "),UX=n(bBe,"A",{href:!0});var Wbt=s(UX);k5r=r(Wbt,"TFBertForQuestionAnswering"),Wbt.forEach(t),R5r=r(bBe," (BERT model)"),bBe.forEach(t),S5r=i(te),O8=n(te,"LI",{});var vBe=s(O8);abe=n(vBe,"STRONG",{});var Qbt=s(abe);P5r=r(Qbt,"camembert"),Qbt.forEach(t),$5r=r(vBe," \u2014 "),JX=n(vBe,"A",{href:!0});var Hbt=s(JX);I5r=r(Hbt,"TFCamembertForQuestionAnswering"),Hbt.forEach(t),j5r=r(vBe," (CamemBERT model)"),vBe.forEach(t),N5r=i(te),X8=n(te,"LI",{});var TBe=s(X8);nbe=n(TBe,"STRONG",{});var Ubt=s(nbe);D5r=r(Ubt,"convbert"),Ubt.forEach(t),q5r=r(TBe," \u2014 "),YX=n(TBe,"A",{href:!0});var Jbt=s(YX);G5r=r(Jbt,"TFConvBertForQuestionAnswering"),Jbt.forEach(t),O5r=r(TBe," (ConvBERT model)"),TBe.forEach(t),X5r=i(te),V8=n(te,"LI",{});var FBe=s(V8);sbe=n(FBe,"STRONG",{});var Ybt=s(sbe);V5r=r(Ybt,"deberta"),Ybt.forEach(t),z5r=r(FBe," \u2014 "),KX=n(FBe,"A",{href:!0});var Kbt=s(KX);W5r=r(Kbt,"TFDebertaForQuestionAnswering"),Kbt.forEach(t),Q5r=r(FBe," (DeBERTa model)"),FBe.forEach(t),H5r=i(te),z8=n(te,"LI",{});var CBe=s(z8);lbe=n(CBe,"STRONG",{});var Zbt=s(lbe);U5r=r(Zbt,"deberta-v2"),Zbt.forEach(t),J5r=r(CBe," \u2014 "),ZX=n(CBe,"A",{href:!0});var e5t=s(ZX);Y5r=r(e5t,"TFDebertaV2ForQuestionAnswering"),e5t.forEach(t),K5r=r(CBe," (DeBERTa-v2 model)"),CBe.forEach(t),Z5r=i(te),W8=n(te,"LI",{});var MBe=s(W8);ibe=n(MBe,"STRONG",{});var o5t=s(ibe);e2r=r(o5t,"distilbert"),o5t.forEach(t),o2r=r(MBe," \u2014 "),eV=n(MBe,"A",{href:!0});var r5t=s(eV);r2r=r(r5t,"TFDistilBertForQuestionAnswering"),r5t.forEach(t),t2r=r(MBe," (DistilBERT model)"),MBe.forEach(t),a2r=i(te),Q8=n(te,"LI",{});var EBe=s(Q8);dbe=n(EBe,"STRONG",{});var t5t=s(dbe);n2r=r(t5t,"electra"),t5t.forEach(t),s2r=r(EBe," \u2014 "),oV=n(EBe,"A",{href:!0});var a5t=s(oV);l2r=r(a5t,"TFElectraForQuestionAnswering"),a5t.forEach(t),i2r=r(EBe," (ELECTRA model)"),EBe.forEach(t),d2r=i(te),H8=n(te,"LI",{});var yBe=s(H8);cbe=n(yBe,"STRONG",{});var n5t=s(cbe);c2r=r(n5t,"flaubert"),n5t.forEach(t),f2r=r(yBe," \u2014 "),rV=n(yBe,"A",{href:!0});var s5t=s(rV);m2r=r(s5t,"TFFlaubertForQuestionAnsweringSimple"),s5t.forEach(t),g2r=r(yBe," (FlauBERT model)"),yBe.forEach(t),h2r=i(te),U8=n(te,"LI",{});var wBe=s(U8);fbe=n(wBe,"STRONG",{});var l5t=s(fbe);p2r=r(l5t,"funnel"),l5t.forEach(t),_2r=r(wBe," \u2014 "),tV=n(wBe,"A",{href:!0});var i5t=s(tV);u2r=r(i5t,"TFFunnelForQuestionAnswering"),i5t.forEach(t),b2r=r(wBe," (Funnel Transformer model)"),wBe.forEach(t),v2r=i(te),J8=n(te,"LI",{});var ABe=s(J8);mbe=n(ABe,"STRONG",{});var d5t=s(mbe);T2r=r(d5t,"longformer"),d5t.forEach(t),F2r=r(ABe," \u2014 "),aV=n(ABe,"A",{href:!0});var c5t=s(aV);C2r=r(c5t,"TFLongformerForQuestionAnswering"),c5t.forEach(t),M2r=r(ABe," (Longformer model)"),ABe.forEach(t),E2r=i(te),Y8=n(te,"LI",{});var LBe=s(Y8);gbe=n(LBe,"STRONG",{});var f5t=s(gbe);y2r=r(f5t,"mobilebert"),f5t.forEach(t),w2r=r(LBe," \u2014 "),nV=n(LBe,"A",{href:!0});var m5t=s(nV);A2r=r(m5t,"TFMobileBertForQuestionAnswering"),m5t.forEach(t),L2r=r(LBe," (MobileBERT model)"),LBe.forEach(t),B2r=i(te),K8=n(te,"LI",{});var BBe=s(K8);hbe=n(BBe,"STRONG",{});var g5t=s(hbe);x2r=r(g5t,"mpnet"),g5t.forEach(t),k2r=r(BBe," \u2014 "),sV=n(BBe,"A",{href:!0});var h5t=s(sV);R2r=r(h5t,"TFMPNetForQuestionAnswering"),h5t.forEach(t),S2r=r(BBe," (MPNet model)"),BBe.forEach(t),P2r=i(te),Z8=n(te,"LI",{});var xBe=s(Z8);pbe=n(xBe,"STRONG",{});var p5t=s(pbe);$2r=r(p5t,"rembert"),p5t.forEach(t),I2r=r(xBe," \u2014 "),lV=n(xBe,"A",{href:!0});var _5t=s(lV);j2r=r(_5t,"TFRemBertForQuestionAnswering"),_5t.forEach(t),N2r=r(xBe," (RemBERT model)"),xBe.forEach(t),D2r=i(te),eF=n(te,"LI",{});var kBe=s(eF);_be=n(kBe,"STRONG",{});var u5t=s(_be);q2r=r(u5t,"roberta"),u5t.forEach(t),G2r=r(kBe," \u2014 "),iV=n(kBe,"A",{href:!0});var b5t=s(iV);O2r=r(b5t,"TFRobertaForQuestionAnswering"),b5t.forEach(t),X2r=r(kBe," (RoBERTa model)"),kBe.forEach(t),V2r=i(te),oF=n(te,"LI",{});var RBe=s(oF);ube=n(RBe,"STRONG",{});var v5t=s(ube);z2r=r(v5t,"roformer"),v5t.forEach(t),W2r=r(RBe," \u2014 "),dV=n(RBe,"A",{href:!0});var T5t=s(dV);Q2r=r(T5t,"TFRoFormerForQuestionAnswering"),T5t.forEach(t),H2r=r(RBe," (RoFormer model)"),RBe.forEach(t),U2r=i(te),rF=n(te,"LI",{});var SBe=s(rF);bbe=n(SBe,"STRONG",{});var F5t=s(bbe);J2r=r(F5t,"xlm"),F5t.forEach(t),Y2r=r(SBe," \u2014 "),cV=n(SBe,"A",{href:!0});var C5t=s(cV);K2r=r(C5t,"TFXLMForQuestionAnsweringSimple"),C5t.forEach(t),Z2r=r(SBe," (XLM model)"),SBe.forEach(t),evr=i(te),tF=n(te,"LI",{});var PBe=s(tF);vbe=n(PBe,"STRONG",{});var M5t=s(vbe);ovr=r(M5t,"xlm-roberta"),M5t.forEach(t),rvr=r(PBe," \u2014 "),fV=n(PBe,"A",{href:!0});var E5t=s(fV);tvr=r(E5t,"TFXLMRobertaForQuestionAnswering"),E5t.forEach(t),avr=r(PBe," (XLM-RoBERTa model)"),PBe.forEach(t),nvr=i(te),aF=n(te,"LI",{});var $Be=s(aF);Tbe=n($Be,"STRONG",{});var y5t=s(Tbe);svr=r(y5t,"xlnet"),y5t.forEach(t),lvr=r($Be," \u2014 "),mV=n($Be,"A",{href:!0});var w5t=s(mV);ivr=r(w5t,"TFXLNetForQuestionAnsweringSimple"),w5t.forEach(t),dvr=r($Be," (XLNet model)"),$Be.forEach(t),te.forEach(t),cvr=i(La),Fbe=n(La,"P",{});var A5t=s(Fbe);fvr=r(A5t,"Examples:"),A5t.forEach(t),mvr=i(La),m(TA.$$.fragment,La),La.forEach(t),ci.forEach(t),nSe=i(d),Zc=n(d,"H2",{class:!0});var v$e=s(Zc);nF=n(v$e,"A",{id:!0,class:!0,href:!0});var L5t=s(nF);Cbe=n(L5t,"SPAN",{});var B5t=s(Cbe);m(FA.$$.fragment,B5t),B5t.forEach(t),L5t.forEach(t),gvr=i(v$e),Mbe=n(v$e,"SPAN",{});var x5t=s(Mbe);hvr=r(x5t,"TFAutoModelForVision2Seq"),x5t.forEach(t),v$e.forEach(t),sSe=i(d),kr=n(d,"DIV",{class:!0});var mi=s(kr);m(CA.$$.fragment,mi),pvr=i(mi),ef=n(mi,"P",{});var AQ=s(ef);_vr=r(AQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Ebe=n(AQ,"CODE",{});var k5t=s(Ebe);uvr=r(k5t,"from_pretrained()"),k5t.forEach(t),bvr=r(AQ,"class method or the "),ybe=n(AQ,"CODE",{});var R5t=s(ybe);vvr=r(R5t,"from_config()"),R5t.forEach(t),Tvr=r(AQ,`class
method.`),AQ.forEach(t),Fvr=i(mi),MA=n(mi,"P",{});var T$e=s(MA);Cvr=r(T$e,"This class cannot be instantiated directly using "),wbe=n(T$e,"CODE",{});var S5t=s(wbe);Mvr=r(S5t,"__init__()"),S5t.forEach(t),Evr=r(T$e," (throws an error)."),T$e.forEach(t),yvr=i(mi),wt=n(mi,"DIV",{class:!0});var gi=s(wt);m(EA.$$.fragment,gi),wvr=i(gi),Abe=n(gi,"P",{});var P5t=s(Abe);Avr=r(P5t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),P5t.forEach(t),Lvr=i(gi),of=n(gi,"P",{});var LQ=s(of);Bvr=r(LQ,`Note:
Loading a model from its configuration file does `),Lbe=n(LQ,"STRONG",{});var $5t=s(Lbe);xvr=r($5t,"not"),$5t.forEach(t),kvr=r(LQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bbe=n(LQ,"CODE",{});var I5t=s(Bbe);Rvr=r(I5t,"from_pretrained()"),I5t.forEach(t),Svr=r(LQ,"to load the model weights."),LQ.forEach(t),Pvr=i(gi),xbe=n(gi,"P",{});var j5t=s(xbe);$vr=r(j5t,"Examples:"),j5t.forEach(t),Ivr=i(gi),m(yA.$$.fragment,gi),gi.forEach(t),jvr=i(mi),yo=n(mi,"DIV",{class:!0});var Ba=s(yo);m(wA.$$.fragment,Ba),Nvr=i(Ba),kbe=n(Ba,"P",{});var N5t=s(kbe);Dvr=r(N5t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),N5t.forEach(t),qvr=i(Ba),kn=n(Ba,"P",{});var o4=s(kn);Gvr=r(o4,"The model class to instantiate is selected based on the "),Rbe=n(o4,"CODE",{});var D5t=s(Rbe);Ovr=r(D5t,"model_type"),D5t.forEach(t),Xvr=r(o4,` property of the config object (either
passed as an argument or loaded from `),Sbe=n(o4,"CODE",{});var q5t=s(Sbe);Vvr=r(q5t,"pretrained_model_name_or_path"),q5t.forEach(t),zvr=r(o4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pbe=n(o4,"CODE",{});var G5t=s(Pbe);Wvr=r(G5t,"pretrained_model_name_or_path"),G5t.forEach(t),Qvr=r(o4,":"),o4.forEach(t),Hvr=i(Ba),$be=n(Ba,"UL",{});var O5t=s($be);sF=n(O5t,"LI",{});var IBe=s(sF);Ibe=n(IBe,"STRONG",{});var X5t=s(Ibe);Uvr=r(X5t,"vision-encoder-decoder"),X5t.forEach(t),Jvr=r(IBe," \u2014 "),gV=n(IBe,"A",{href:!0});var V5t=s(gV);Yvr=r(V5t,"TFVisionEncoderDecoderModel"),V5t.forEach(t),Kvr=r(IBe," (Vision Encoder decoder model)"),IBe.forEach(t),O5t.forEach(t),Zvr=i(Ba),jbe=n(Ba,"P",{});var z5t=s(jbe);e6r=r(z5t,"Examples:"),z5t.forEach(t),o6r=i(Ba),m(AA.$$.fragment,Ba),Ba.forEach(t),mi.forEach(t),lSe=i(d),rf=n(d,"H2",{class:!0});var F$e=s(rf);lF=n(F$e,"A",{id:!0,class:!0,href:!0});var W5t=s(lF);Nbe=n(W5t,"SPAN",{});var Q5t=s(Nbe);m(LA.$$.fragment,Q5t),Q5t.forEach(t),W5t.forEach(t),r6r=i(F$e),Dbe=n(F$e,"SPAN",{});var H5t=s(Dbe);t6r=r(H5t,"TFAutoModelForSpeechSeq2Seq"),H5t.forEach(t),F$e.forEach(t),iSe=i(d),Rr=n(d,"DIV",{class:!0});var hi=s(Rr);m(BA.$$.fragment,hi),a6r=i(hi),tf=n(hi,"P",{});var BQ=s(tf);n6r=r(BQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),qbe=n(BQ,"CODE",{});var U5t=s(qbe);s6r=r(U5t,"from_pretrained()"),U5t.forEach(t),l6r=r(BQ,"class method or the "),Gbe=n(BQ,"CODE",{});var J5t=s(Gbe);i6r=r(J5t,"from_config()"),J5t.forEach(t),d6r=r(BQ,`class
method.`),BQ.forEach(t),c6r=i(hi),xA=n(hi,"P",{});var C$e=s(xA);f6r=r(C$e,"This class cannot be instantiated directly using "),Obe=n(C$e,"CODE",{});var Y5t=s(Obe);m6r=r(Y5t,"__init__()"),Y5t.forEach(t),g6r=r(C$e," (throws an error)."),C$e.forEach(t),h6r=i(hi),At=n(hi,"DIV",{class:!0});var pi=s(At);m(kA.$$.fragment,pi),p6r=i(pi),Xbe=n(pi,"P",{});var K5t=s(Xbe);_6r=r(K5t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),K5t.forEach(t),u6r=i(pi),af=n(pi,"P",{});var xQ=s(af);b6r=r(xQ,`Note:
Loading a model from its configuration file does `),Vbe=n(xQ,"STRONG",{});var Z5t=s(Vbe);v6r=r(Z5t,"not"),Z5t.forEach(t),T6r=r(xQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),zbe=n(xQ,"CODE",{});var e2t=s(zbe);F6r=r(e2t,"from_pretrained()"),e2t.forEach(t),C6r=r(xQ,"to load the model weights."),xQ.forEach(t),M6r=i(pi),Wbe=n(pi,"P",{});var o2t=s(Wbe);E6r=r(o2t,"Examples:"),o2t.forEach(t),y6r=i(pi),m(RA.$$.fragment,pi),pi.forEach(t),w6r=i(hi),wo=n(hi,"DIV",{class:!0});var xa=s(wo);m(SA.$$.fragment,xa),A6r=i(xa),Qbe=n(xa,"P",{});var r2t=s(Qbe);L6r=r(r2t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),r2t.forEach(t),B6r=i(xa),Rn=n(xa,"P",{});var r4=s(Rn);x6r=r(r4,"The model class to instantiate is selected based on the "),Hbe=n(r4,"CODE",{});var t2t=s(Hbe);k6r=r(t2t,"model_type"),t2t.forEach(t),R6r=r(r4,` property of the config object (either
passed as an argument or loaded from `),Ube=n(r4,"CODE",{});var a2t=s(Ube);S6r=r(a2t,"pretrained_model_name_or_path"),a2t.forEach(t),P6r=r(r4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jbe=n(r4,"CODE",{});var n2t=s(Jbe);$6r=r(n2t,"pretrained_model_name_or_path"),n2t.forEach(t),I6r=r(r4,":"),r4.forEach(t),j6r=i(xa),Ybe=n(xa,"UL",{});var s2t=s(Ybe);iF=n(s2t,"LI",{});var jBe=s(iF);Kbe=n(jBe,"STRONG",{});var l2t=s(Kbe);N6r=r(l2t,"speech_to_text"),l2t.forEach(t),D6r=r(jBe," \u2014 "),hV=n(jBe,"A",{href:!0});var i2t=s(hV);q6r=r(i2t,"TFSpeech2TextForConditionalGeneration"),i2t.forEach(t),G6r=r(jBe," (Speech2Text model)"),jBe.forEach(t),s2t.forEach(t),O6r=i(xa),Zbe=n(xa,"P",{});var d2t=s(Zbe);X6r=r(d2t,"Examples:"),d2t.forEach(t),V6r=i(xa),m(PA.$$.fragment,xa),xa.forEach(t),hi.forEach(t),dSe=i(d),nf=n(d,"H2",{class:!0});var M$e=s(nf);dF=n(M$e,"A",{id:!0,class:!0,href:!0});var c2t=s(dF);e5e=n(c2t,"SPAN",{});var f2t=s(e5e);m($A.$$.fragment,f2t),f2t.forEach(t),c2t.forEach(t),z6r=i(M$e),o5e=n(M$e,"SPAN",{});var m2t=s(o5e);W6r=r(m2t,"FlaxAutoModel"),m2t.forEach(t),M$e.forEach(t),cSe=i(d),Sr=n(d,"DIV",{class:!0});var _i=s(Sr);m(IA.$$.fragment,_i),Q6r=i(_i),sf=n(_i,"P",{});var kQ=s(sf);H6r=r(kQ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),r5e=n(kQ,"CODE",{});var g2t=s(r5e);U6r=r(g2t,"from_pretrained()"),g2t.forEach(t),J6r=r(kQ,"class method or the "),t5e=n(kQ,"CODE",{});var h2t=s(t5e);Y6r=r(h2t,"from_config()"),h2t.forEach(t),K6r=r(kQ,`class
method.`),kQ.forEach(t),Z6r=i(_i),jA=n(_i,"P",{});var E$e=s(jA);e0r=r(E$e,"This class cannot be instantiated directly using "),a5e=n(E$e,"CODE",{});var p2t=s(a5e);o0r=r(p2t,"__init__()"),p2t.forEach(t),r0r=r(E$e," (throws an error)."),E$e.forEach(t),t0r=i(_i),Lt=n(_i,"DIV",{class:!0});var ui=s(Lt);m(NA.$$.fragment,ui),a0r=i(ui),n5e=n(ui,"P",{});var _2t=s(n5e);n0r=r(_2t,"Instantiates one of the base model classes of the library from a configuration."),_2t.forEach(t),s0r=i(ui),lf=n(ui,"P",{});var RQ=s(lf);l0r=r(RQ,`Note:
Loading a model from its configuration file does `),s5e=n(RQ,"STRONG",{});var u2t=s(s5e);i0r=r(u2t,"not"),u2t.forEach(t),d0r=r(RQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),l5e=n(RQ,"CODE",{});var b2t=s(l5e);c0r=r(b2t,"from_pretrained()"),b2t.forEach(t),f0r=r(RQ,"to load the model weights."),RQ.forEach(t),m0r=i(ui),i5e=n(ui,"P",{});var v2t=s(i5e);g0r=r(v2t,"Examples:"),v2t.forEach(t),h0r=i(ui),m(DA.$$.fragment,ui),ui.forEach(t),p0r=i(_i),Ao=n(_i,"DIV",{class:!0});var ka=s(Ao);m(qA.$$.fragment,ka),_0r=i(ka),d5e=n(ka,"P",{});var T2t=s(d5e);u0r=r(T2t,"Instantiate one of the base model classes of the library from a pretrained model."),T2t.forEach(t),b0r=i(ka),Sn=n(ka,"P",{});var t4=s(Sn);v0r=r(t4,"The model class to instantiate is selected based on the "),c5e=n(t4,"CODE",{});var F2t=s(c5e);T0r=r(F2t,"model_type"),F2t.forEach(t),F0r=r(t4,` property of the config object (either
passed as an argument or loaded from `),f5e=n(t4,"CODE",{});var C2t=s(f5e);C0r=r(C2t,"pretrained_model_name_or_path"),C2t.forEach(t),M0r=r(t4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m5e=n(t4,"CODE",{});var M2t=s(m5e);E0r=r(M2t,"pretrained_model_name_or_path"),M2t.forEach(t),y0r=r(t4,":"),t4.forEach(t),w0r=i(ka),z=n(ka,"UL",{});var Q=s(z);cF=n(Q,"LI",{});var NBe=s(cF);g5e=n(NBe,"STRONG",{});var E2t=s(g5e);A0r=r(E2t,"albert"),E2t.forEach(t),L0r=r(NBe," \u2014 "),pV=n(NBe,"A",{href:!0});var y2t=s(pV);B0r=r(y2t,"FlaxAlbertModel"),y2t.forEach(t),x0r=r(NBe," (ALBERT model)"),NBe.forEach(t),k0r=i(Q),fF=n(Q,"LI",{});var DBe=s(fF);h5e=n(DBe,"STRONG",{});var w2t=s(h5e);R0r=r(w2t,"bart"),w2t.forEach(t),S0r=r(DBe," \u2014 "),_V=n(DBe,"A",{href:!0});var A2t=s(_V);P0r=r(A2t,"FlaxBartModel"),A2t.forEach(t),$0r=r(DBe," (BART model)"),DBe.forEach(t),I0r=i(Q),mF=n(Q,"LI",{});var qBe=s(mF);p5e=n(qBe,"STRONG",{});var L2t=s(p5e);j0r=r(L2t,"beit"),L2t.forEach(t),N0r=r(qBe," \u2014 "),uV=n(qBe,"A",{href:!0});var B2t=s(uV);D0r=r(B2t,"FlaxBeitModel"),B2t.forEach(t),q0r=r(qBe," (BEiT model)"),qBe.forEach(t),G0r=i(Q),gF=n(Q,"LI",{});var GBe=s(gF);_5e=n(GBe,"STRONG",{});var x2t=s(_5e);O0r=r(x2t,"bert"),x2t.forEach(t),X0r=r(GBe," \u2014 "),bV=n(GBe,"A",{href:!0});var k2t=s(bV);V0r=r(k2t,"FlaxBertModel"),k2t.forEach(t),z0r=r(GBe," (BERT model)"),GBe.forEach(t),W0r=i(Q),hF=n(Q,"LI",{});var OBe=s(hF);u5e=n(OBe,"STRONG",{});var R2t=s(u5e);Q0r=r(R2t,"big_bird"),R2t.forEach(t),H0r=r(OBe," \u2014 "),vV=n(OBe,"A",{href:!0});var S2t=s(vV);U0r=r(S2t,"FlaxBigBirdModel"),S2t.forEach(t),J0r=r(OBe," (BigBird model)"),OBe.forEach(t),Y0r=i(Q),pF=n(Q,"LI",{});var XBe=s(pF);b5e=n(XBe,"STRONG",{});var P2t=s(b5e);K0r=r(P2t,"blenderbot"),P2t.forEach(t),Z0r=r(XBe," \u2014 "),TV=n(XBe,"A",{href:!0});var $2t=s(TV);eTr=r($2t,"FlaxBlenderbotModel"),$2t.forEach(t),oTr=r(XBe," (Blenderbot model)"),XBe.forEach(t),rTr=i(Q),_F=n(Q,"LI",{});var VBe=s(_F);v5e=n(VBe,"STRONG",{});var I2t=s(v5e);tTr=r(I2t,"blenderbot-small"),I2t.forEach(t),aTr=r(VBe," \u2014 "),FV=n(VBe,"A",{href:!0});var j2t=s(FV);nTr=r(j2t,"FlaxBlenderbotSmallModel"),j2t.forEach(t),sTr=r(VBe," (BlenderbotSmall model)"),VBe.forEach(t),lTr=i(Q),uF=n(Q,"LI",{});var zBe=s(uF);T5e=n(zBe,"STRONG",{});var N2t=s(T5e);iTr=r(N2t,"clip"),N2t.forEach(t),dTr=r(zBe," \u2014 "),CV=n(zBe,"A",{href:!0});var D2t=s(CV);cTr=r(D2t,"FlaxCLIPModel"),D2t.forEach(t),fTr=r(zBe," (CLIP model)"),zBe.forEach(t),mTr=i(Q),bF=n(Q,"LI",{});var WBe=s(bF);F5e=n(WBe,"STRONG",{});var q2t=s(F5e);gTr=r(q2t,"distilbert"),q2t.forEach(t),hTr=r(WBe," \u2014 "),MV=n(WBe,"A",{href:!0});var G2t=s(MV);pTr=r(G2t,"FlaxDistilBertModel"),G2t.forEach(t),_Tr=r(WBe," (DistilBERT model)"),WBe.forEach(t),uTr=i(Q),vF=n(Q,"LI",{});var QBe=s(vF);C5e=n(QBe,"STRONG",{});var O2t=s(C5e);bTr=r(O2t,"electra"),O2t.forEach(t),vTr=r(QBe," \u2014 "),EV=n(QBe,"A",{href:!0});var X2t=s(EV);TTr=r(X2t,"FlaxElectraModel"),X2t.forEach(t),FTr=r(QBe," (ELECTRA model)"),QBe.forEach(t),CTr=i(Q),TF=n(Q,"LI",{});var HBe=s(TF);M5e=n(HBe,"STRONG",{});var V2t=s(M5e);MTr=r(V2t,"gpt2"),V2t.forEach(t),ETr=r(HBe," \u2014 "),yV=n(HBe,"A",{href:!0});var z2t=s(yV);yTr=r(z2t,"FlaxGPT2Model"),z2t.forEach(t),wTr=r(HBe," (OpenAI GPT-2 model)"),HBe.forEach(t),ATr=i(Q),FF=n(Q,"LI",{});var UBe=s(FF);E5e=n(UBe,"STRONG",{});var W2t=s(E5e);LTr=r(W2t,"gpt_neo"),W2t.forEach(t),BTr=r(UBe," \u2014 "),wV=n(UBe,"A",{href:!0});var Q2t=s(wV);xTr=r(Q2t,"FlaxGPTNeoModel"),Q2t.forEach(t),kTr=r(UBe," (GPT Neo model)"),UBe.forEach(t),RTr=i(Q),CF=n(Q,"LI",{});var JBe=s(CF);y5e=n(JBe,"STRONG",{});var H2t=s(y5e);STr=r(H2t,"gptj"),H2t.forEach(t),PTr=r(JBe," \u2014 "),AV=n(JBe,"A",{href:!0});var U2t=s(AV);$Tr=r(U2t,"FlaxGPTJModel"),U2t.forEach(t),ITr=r(JBe," (GPT-J model)"),JBe.forEach(t),jTr=i(Q),MF=n(Q,"LI",{});var YBe=s(MF);w5e=n(YBe,"STRONG",{});var J2t=s(w5e);NTr=r(J2t,"marian"),J2t.forEach(t),DTr=r(YBe," \u2014 "),LV=n(YBe,"A",{href:!0});var Y2t=s(LV);qTr=r(Y2t,"FlaxMarianModel"),Y2t.forEach(t),GTr=r(YBe," (Marian model)"),YBe.forEach(t),OTr=i(Q),EF=n(Q,"LI",{});var KBe=s(EF);A5e=n(KBe,"STRONG",{});var K2t=s(A5e);XTr=r(K2t,"mbart"),K2t.forEach(t),VTr=r(KBe," \u2014 "),BV=n(KBe,"A",{href:!0});var Z2t=s(BV);zTr=r(Z2t,"FlaxMBartModel"),Z2t.forEach(t),WTr=r(KBe," (mBART model)"),KBe.forEach(t),QTr=i(Q),yF=n(Q,"LI",{});var ZBe=s(yF);L5e=n(ZBe,"STRONG",{});var evt=s(L5e);HTr=r(evt,"mt5"),evt.forEach(t),UTr=r(ZBe," \u2014 "),xV=n(ZBe,"A",{href:!0});var ovt=s(xV);JTr=r(ovt,"FlaxMT5Model"),ovt.forEach(t),YTr=r(ZBe," (mT5 model)"),ZBe.forEach(t),KTr=i(Q),wF=n(Q,"LI",{});var exe=s(wF);B5e=n(exe,"STRONG",{});var rvt=s(B5e);ZTr=r(rvt,"pegasus"),rvt.forEach(t),e8r=r(exe," \u2014 "),kV=n(exe,"A",{href:!0});var tvt=s(kV);o8r=r(tvt,"FlaxPegasusModel"),tvt.forEach(t),r8r=r(exe," (Pegasus model)"),exe.forEach(t),t8r=i(Q),AF=n(Q,"LI",{});var oxe=s(AF);x5e=n(oxe,"STRONG",{});var avt=s(x5e);a8r=r(avt,"roberta"),avt.forEach(t),n8r=r(oxe," \u2014 "),RV=n(oxe,"A",{href:!0});var nvt=s(RV);s8r=r(nvt,"FlaxRobertaModel"),nvt.forEach(t),l8r=r(oxe," (RoBERTa model)"),oxe.forEach(t),i8r=i(Q),LF=n(Q,"LI",{});var rxe=s(LF);k5e=n(rxe,"STRONG",{});var svt=s(k5e);d8r=r(svt,"roformer"),svt.forEach(t),c8r=r(rxe," \u2014 "),SV=n(rxe,"A",{href:!0});var lvt=s(SV);f8r=r(lvt,"FlaxRoFormerModel"),lvt.forEach(t),m8r=r(rxe," (RoFormer model)"),rxe.forEach(t),g8r=i(Q),BF=n(Q,"LI",{});var txe=s(BF);R5e=n(txe,"STRONG",{});var ivt=s(R5e);h8r=r(ivt,"t5"),ivt.forEach(t),p8r=r(txe," \u2014 "),PV=n(txe,"A",{href:!0});var dvt=s(PV);_8r=r(dvt,"FlaxT5Model"),dvt.forEach(t),u8r=r(txe," (T5 model)"),txe.forEach(t),b8r=i(Q),xF=n(Q,"LI",{});var axe=s(xF);S5e=n(axe,"STRONG",{});var cvt=s(S5e);v8r=r(cvt,"vision-text-dual-encoder"),cvt.forEach(t),T8r=r(axe," \u2014 "),$V=n(axe,"A",{href:!0});var fvt=s($V);F8r=r(fvt,"FlaxVisionTextDualEncoderModel"),fvt.forEach(t),C8r=r(axe," (VisionTextDualEncoder model)"),axe.forEach(t),M8r=i(Q),kF=n(Q,"LI",{});var nxe=s(kF);P5e=n(nxe,"STRONG",{});var mvt=s(P5e);E8r=r(mvt,"vit"),mvt.forEach(t),y8r=r(nxe," \u2014 "),IV=n(nxe,"A",{href:!0});var gvt=s(IV);w8r=r(gvt,"FlaxViTModel"),gvt.forEach(t),A8r=r(nxe," (ViT model)"),nxe.forEach(t),L8r=i(Q),RF=n(Q,"LI",{});var sxe=s(RF);$5e=n(sxe,"STRONG",{});var hvt=s($5e);B8r=r(hvt,"wav2vec2"),hvt.forEach(t),x8r=r(sxe," \u2014 "),jV=n(sxe,"A",{href:!0});var pvt=s(jV);k8r=r(pvt,"FlaxWav2Vec2Model"),pvt.forEach(t),R8r=r(sxe," (Wav2Vec2 model)"),sxe.forEach(t),S8r=i(Q),SF=n(Q,"LI",{});var lxe=s(SF);I5e=n(lxe,"STRONG",{});var _vt=s(I5e);P8r=r(_vt,"xglm"),_vt.forEach(t),$8r=r(lxe," \u2014 "),NV=n(lxe,"A",{href:!0});var uvt=s(NV);I8r=r(uvt,"FlaxXGLMModel"),uvt.forEach(t),j8r=r(lxe," (XGLM model)"),lxe.forEach(t),N8r=i(Q),PF=n(Q,"LI",{});var ixe=s(PF);j5e=n(ixe,"STRONG",{});var bvt=s(j5e);D8r=r(bvt,"xlm-roberta"),bvt.forEach(t),q8r=r(ixe," \u2014 "),DV=n(ixe,"A",{href:!0});var vvt=s(DV);G8r=r(vvt,"FlaxXLMRobertaModel"),vvt.forEach(t),O8r=r(ixe," (XLM-RoBERTa model)"),ixe.forEach(t),Q.forEach(t),X8r=i(ka),N5e=n(ka,"P",{});var Tvt=s(N5e);V8r=r(Tvt,"Examples:"),Tvt.forEach(t),z8r=i(ka),m(GA.$$.fragment,ka),ka.forEach(t),_i.forEach(t),fSe=i(d),df=n(d,"H2",{class:!0});var y$e=s(df);$F=n(y$e,"A",{id:!0,class:!0,href:!0});var Fvt=s($F);D5e=n(Fvt,"SPAN",{});var Cvt=s(D5e);m(OA.$$.fragment,Cvt),Cvt.forEach(t),Fvt.forEach(t),W8r=i(y$e),q5e=n(y$e,"SPAN",{});var Mvt=s(q5e);Q8r=r(Mvt,"FlaxAutoModelForCausalLM"),Mvt.forEach(t),y$e.forEach(t),mSe=i(d),Pr=n(d,"DIV",{class:!0});var bi=s(Pr);m(XA.$$.fragment,bi),H8r=i(bi),cf=n(bi,"P",{});var SQ=s(cf);U8r=r(SQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),G5e=n(SQ,"CODE",{});var Evt=s(G5e);J8r=r(Evt,"from_pretrained()"),Evt.forEach(t),Y8r=r(SQ,"class method or the "),O5e=n(SQ,"CODE",{});var yvt=s(O5e);K8r=r(yvt,"from_config()"),yvt.forEach(t),Z8r=r(SQ,`class
method.`),SQ.forEach(t),eFr=i(bi),VA=n(bi,"P",{});var w$e=s(VA);oFr=r(w$e,"This class cannot be instantiated directly using "),X5e=n(w$e,"CODE",{});var wvt=s(X5e);rFr=r(wvt,"__init__()"),wvt.forEach(t),tFr=r(w$e," (throws an error)."),w$e.forEach(t),aFr=i(bi),Bt=n(bi,"DIV",{class:!0});var vi=s(Bt);m(zA.$$.fragment,vi),nFr=i(vi),V5e=n(vi,"P",{});var Avt=s(V5e);sFr=r(Avt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Avt.forEach(t),lFr=i(vi),ff=n(vi,"P",{});var PQ=s(ff);iFr=r(PQ,`Note:
Loading a model from its configuration file does `),z5e=n(PQ,"STRONG",{});var Lvt=s(z5e);dFr=r(Lvt,"not"),Lvt.forEach(t),cFr=r(PQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),W5e=n(PQ,"CODE",{});var Bvt=s(W5e);fFr=r(Bvt,"from_pretrained()"),Bvt.forEach(t),mFr=r(PQ,"to load the model weights."),PQ.forEach(t),gFr=i(vi),Q5e=n(vi,"P",{});var xvt=s(Q5e);hFr=r(xvt,"Examples:"),xvt.forEach(t),pFr=i(vi),m(WA.$$.fragment,vi),vi.forEach(t),_Fr=i(bi),Lo=n(bi,"DIV",{class:!0});var Ra=s(Lo);m(QA.$$.fragment,Ra),uFr=i(Ra),H5e=n(Ra,"P",{});var kvt=s(H5e);bFr=r(kvt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),kvt.forEach(t),vFr=i(Ra),Pn=n(Ra,"P",{});var a4=s(Pn);TFr=r(a4,"The model class to instantiate is selected based on the "),U5e=n(a4,"CODE",{});var Rvt=s(U5e);FFr=r(Rvt,"model_type"),Rvt.forEach(t),CFr=r(a4,` property of the config object (either
passed as an argument or loaded from `),J5e=n(a4,"CODE",{});var Svt=s(J5e);MFr=r(Svt,"pretrained_model_name_or_path"),Svt.forEach(t),EFr=r(a4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y5e=n(a4,"CODE",{});var Pvt=s(Y5e);yFr=r(Pvt,"pretrained_model_name_or_path"),Pvt.forEach(t),wFr=r(a4,":"),a4.forEach(t),AFr=i(Ra),ga=n(Ra,"UL",{});var Ti=s(ga);IF=n(Ti,"LI",{});var dxe=s(IF);K5e=n(dxe,"STRONG",{});var $vt=s(K5e);LFr=r($vt,"bart"),$vt.forEach(t),BFr=r(dxe," \u2014 "),qV=n(dxe,"A",{href:!0});var Ivt=s(qV);xFr=r(Ivt,"FlaxBartForCausalLM"),Ivt.forEach(t),kFr=r(dxe," (BART model)"),dxe.forEach(t),RFr=i(Ti),jF=n(Ti,"LI",{});var cxe=s(jF);Z5e=n(cxe,"STRONG",{});var jvt=s(Z5e);SFr=r(jvt,"gpt2"),jvt.forEach(t),PFr=r(cxe," \u2014 "),GV=n(cxe,"A",{href:!0});var Nvt=s(GV);$Fr=r(Nvt,"FlaxGPT2LMHeadModel"),Nvt.forEach(t),IFr=r(cxe," (OpenAI GPT-2 model)"),cxe.forEach(t),jFr=i(Ti),NF=n(Ti,"LI",{});var fxe=s(NF);e2e=n(fxe,"STRONG",{});var Dvt=s(e2e);NFr=r(Dvt,"gpt_neo"),Dvt.forEach(t),DFr=r(fxe," \u2014 "),OV=n(fxe,"A",{href:!0});var qvt=s(OV);qFr=r(qvt,"FlaxGPTNeoForCausalLM"),qvt.forEach(t),GFr=r(fxe," (GPT Neo model)"),fxe.forEach(t),OFr=i(Ti),DF=n(Ti,"LI",{});var mxe=s(DF);o2e=n(mxe,"STRONG",{});var Gvt=s(o2e);XFr=r(Gvt,"gptj"),Gvt.forEach(t),VFr=r(mxe," \u2014 "),XV=n(mxe,"A",{href:!0});var Ovt=s(XV);zFr=r(Ovt,"FlaxGPTJForCausalLM"),Ovt.forEach(t),WFr=r(mxe," (GPT-J model)"),mxe.forEach(t),QFr=i(Ti),qF=n(Ti,"LI",{});var gxe=s(qF);r2e=n(gxe,"STRONG",{});var Xvt=s(r2e);HFr=r(Xvt,"xglm"),Xvt.forEach(t),UFr=r(gxe," \u2014 "),VV=n(gxe,"A",{href:!0});var Vvt=s(VV);JFr=r(Vvt,"FlaxXGLMForCausalLM"),Vvt.forEach(t),YFr=r(gxe," (XGLM model)"),gxe.forEach(t),Ti.forEach(t),KFr=i(Ra),t2e=n(Ra,"P",{});var zvt=s(t2e);ZFr=r(zvt,"Examples:"),zvt.forEach(t),eCr=i(Ra),m(HA.$$.fragment,Ra),Ra.forEach(t),bi.forEach(t),gSe=i(d),mf=n(d,"H2",{class:!0});var A$e=s(mf);GF=n(A$e,"A",{id:!0,class:!0,href:!0});var Wvt=s(GF);a2e=n(Wvt,"SPAN",{});var Qvt=s(a2e);m(UA.$$.fragment,Qvt),Qvt.forEach(t),Wvt.forEach(t),oCr=i(A$e),n2e=n(A$e,"SPAN",{});var Hvt=s(n2e);rCr=r(Hvt,"FlaxAutoModelForPreTraining"),Hvt.forEach(t),A$e.forEach(t),hSe=i(d),$r=n(d,"DIV",{class:!0});var Fi=s($r);m(JA.$$.fragment,Fi),tCr=i(Fi),gf=n(Fi,"P",{});var $Q=s(gf);aCr=r($Q,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),s2e=n($Q,"CODE",{});var Uvt=s(s2e);nCr=r(Uvt,"from_pretrained()"),Uvt.forEach(t),sCr=r($Q,"class method or the "),l2e=n($Q,"CODE",{});var Jvt=s(l2e);lCr=r(Jvt,"from_config()"),Jvt.forEach(t),iCr=r($Q,`class
method.`),$Q.forEach(t),dCr=i(Fi),YA=n(Fi,"P",{});var L$e=s(YA);cCr=r(L$e,"This class cannot be instantiated directly using "),i2e=n(L$e,"CODE",{});var Yvt=s(i2e);fCr=r(Yvt,"__init__()"),Yvt.forEach(t),mCr=r(L$e," (throws an error)."),L$e.forEach(t),gCr=i(Fi),xt=n(Fi,"DIV",{class:!0});var Ci=s(xt);m(KA.$$.fragment,Ci),hCr=i(Ci),d2e=n(Ci,"P",{});var Kvt=s(d2e);pCr=r(Kvt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Kvt.forEach(t),_Cr=i(Ci),hf=n(Ci,"P",{});var IQ=s(hf);uCr=r(IQ,`Note:
Loading a model from its configuration file does `),c2e=n(IQ,"STRONG",{});var Zvt=s(c2e);bCr=r(Zvt,"not"),Zvt.forEach(t),vCr=r(IQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),f2e=n(IQ,"CODE",{});var e6t=s(f2e);TCr=r(e6t,"from_pretrained()"),e6t.forEach(t),FCr=r(IQ,"to load the model weights."),IQ.forEach(t),CCr=i(Ci),m2e=n(Ci,"P",{});var o6t=s(m2e);MCr=r(o6t,"Examples:"),o6t.forEach(t),ECr=i(Ci),m(ZA.$$.fragment,Ci),Ci.forEach(t),yCr=i(Fi),Bo=n(Fi,"DIV",{class:!0});var Sa=s(Bo);m(eL.$$.fragment,Sa),wCr=i(Sa),g2e=n(Sa,"P",{});var r6t=s(g2e);ACr=r(r6t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),r6t.forEach(t),LCr=i(Sa),$n=n(Sa,"P",{});var n4=s($n);BCr=r(n4,"The model class to instantiate is selected based on the "),h2e=n(n4,"CODE",{});var t6t=s(h2e);xCr=r(t6t,"model_type"),t6t.forEach(t),kCr=r(n4,` property of the config object (either
passed as an argument or loaded from `),p2e=n(n4,"CODE",{});var a6t=s(p2e);RCr=r(a6t,"pretrained_model_name_or_path"),a6t.forEach(t),SCr=r(n4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_2e=n(n4,"CODE",{});var n6t=s(_2e);PCr=r(n6t,"pretrained_model_name_or_path"),n6t.forEach(t),$Cr=r(n4,":"),n4.forEach(t),ICr=i(Sa),ce=n(Sa,"UL",{});var he=s(ce);OF=n(he,"LI",{});var hxe=s(OF);u2e=n(hxe,"STRONG",{});var s6t=s(u2e);jCr=r(s6t,"albert"),s6t.forEach(t),NCr=r(hxe," \u2014 "),zV=n(hxe,"A",{href:!0});var l6t=s(zV);DCr=r(l6t,"FlaxAlbertForPreTraining"),l6t.forEach(t),qCr=r(hxe," (ALBERT model)"),hxe.forEach(t),GCr=i(he),XF=n(he,"LI",{});var pxe=s(XF);b2e=n(pxe,"STRONG",{});var i6t=s(b2e);OCr=r(i6t,"bart"),i6t.forEach(t),XCr=r(pxe," \u2014 "),WV=n(pxe,"A",{href:!0});var d6t=s(WV);VCr=r(d6t,"FlaxBartForConditionalGeneration"),d6t.forEach(t),zCr=r(pxe," (BART model)"),pxe.forEach(t),WCr=i(he),VF=n(he,"LI",{});var _xe=s(VF);v2e=n(_xe,"STRONG",{});var c6t=s(v2e);QCr=r(c6t,"bert"),c6t.forEach(t),HCr=r(_xe," \u2014 "),QV=n(_xe,"A",{href:!0});var f6t=s(QV);UCr=r(f6t,"FlaxBertForPreTraining"),f6t.forEach(t),JCr=r(_xe," (BERT model)"),_xe.forEach(t),YCr=i(he),zF=n(he,"LI",{});var uxe=s(zF);T2e=n(uxe,"STRONG",{});var m6t=s(T2e);KCr=r(m6t,"big_bird"),m6t.forEach(t),ZCr=r(uxe," \u2014 "),HV=n(uxe,"A",{href:!0});var g6t=s(HV);eMr=r(g6t,"FlaxBigBirdForPreTraining"),g6t.forEach(t),oMr=r(uxe," (BigBird model)"),uxe.forEach(t),rMr=i(he),WF=n(he,"LI",{});var bxe=s(WF);F2e=n(bxe,"STRONG",{});var h6t=s(F2e);tMr=r(h6t,"electra"),h6t.forEach(t),aMr=r(bxe," \u2014 "),UV=n(bxe,"A",{href:!0});var p6t=s(UV);nMr=r(p6t,"FlaxElectraForPreTraining"),p6t.forEach(t),sMr=r(bxe," (ELECTRA model)"),bxe.forEach(t),lMr=i(he),QF=n(he,"LI",{});var vxe=s(QF);C2e=n(vxe,"STRONG",{});var _6t=s(C2e);iMr=r(_6t,"mbart"),_6t.forEach(t),dMr=r(vxe," \u2014 "),JV=n(vxe,"A",{href:!0});var u6t=s(JV);cMr=r(u6t,"FlaxMBartForConditionalGeneration"),u6t.forEach(t),fMr=r(vxe," (mBART model)"),vxe.forEach(t),mMr=i(he),HF=n(he,"LI",{});var Txe=s(HF);M2e=n(Txe,"STRONG",{});var b6t=s(M2e);gMr=r(b6t,"mt5"),b6t.forEach(t),hMr=r(Txe," \u2014 "),YV=n(Txe,"A",{href:!0});var v6t=s(YV);pMr=r(v6t,"FlaxMT5ForConditionalGeneration"),v6t.forEach(t),_Mr=r(Txe," (mT5 model)"),Txe.forEach(t),uMr=i(he),UF=n(he,"LI",{});var Fxe=s(UF);E2e=n(Fxe,"STRONG",{});var T6t=s(E2e);bMr=r(T6t,"roberta"),T6t.forEach(t),vMr=r(Fxe," \u2014 "),KV=n(Fxe,"A",{href:!0});var F6t=s(KV);TMr=r(F6t,"FlaxRobertaForMaskedLM"),F6t.forEach(t),FMr=r(Fxe," (RoBERTa model)"),Fxe.forEach(t),CMr=i(he),JF=n(he,"LI",{});var Cxe=s(JF);y2e=n(Cxe,"STRONG",{});var C6t=s(y2e);MMr=r(C6t,"roformer"),C6t.forEach(t),EMr=r(Cxe," \u2014 "),ZV=n(Cxe,"A",{href:!0});var M6t=s(ZV);yMr=r(M6t,"FlaxRoFormerForMaskedLM"),M6t.forEach(t),wMr=r(Cxe," (RoFormer model)"),Cxe.forEach(t),AMr=i(he),YF=n(he,"LI",{});var Mxe=s(YF);w2e=n(Mxe,"STRONG",{});var E6t=s(w2e);LMr=r(E6t,"t5"),E6t.forEach(t),BMr=r(Mxe," \u2014 "),ez=n(Mxe,"A",{href:!0});var y6t=s(ez);xMr=r(y6t,"FlaxT5ForConditionalGeneration"),y6t.forEach(t),kMr=r(Mxe," (T5 model)"),Mxe.forEach(t),RMr=i(he),KF=n(he,"LI",{});var Exe=s(KF);A2e=n(Exe,"STRONG",{});var w6t=s(A2e);SMr=r(w6t,"wav2vec2"),w6t.forEach(t),PMr=r(Exe," \u2014 "),oz=n(Exe,"A",{href:!0});var A6t=s(oz);$Mr=r(A6t,"FlaxWav2Vec2ForPreTraining"),A6t.forEach(t),IMr=r(Exe," (Wav2Vec2 model)"),Exe.forEach(t),jMr=i(he),ZF=n(he,"LI",{});var yxe=s(ZF);L2e=n(yxe,"STRONG",{});var L6t=s(L2e);NMr=r(L6t,"xlm-roberta"),L6t.forEach(t),DMr=r(yxe," \u2014 "),rz=n(yxe,"A",{href:!0});var B6t=s(rz);qMr=r(B6t,"FlaxXLMRobertaForMaskedLM"),B6t.forEach(t),GMr=r(yxe," (XLM-RoBERTa model)"),yxe.forEach(t),he.forEach(t),OMr=i(Sa),B2e=n(Sa,"P",{});var x6t=s(B2e);XMr=r(x6t,"Examples:"),x6t.forEach(t),VMr=i(Sa),m(oL.$$.fragment,Sa),Sa.forEach(t),Fi.forEach(t),pSe=i(d),pf=n(d,"H2",{class:!0});var B$e=s(pf);eC=n(B$e,"A",{id:!0,class:!0,href:!0});var k6t=s(eC);x2e=n(k6t,"SPAN",{});var R6t=s(x2e);m(rL.$$.fragment,R6t),R6t.forEach(t),k6t.forEach(t),zMr=i(B$e),k2e=n(B$e,"SPAN",{});var S6t=s(k2e);WMr=r(S6t,"FlaxAutoModelForMaskedLM"),S6t.forEach(t),B$e.forEach(t),_Se=i(d),Ir=n(d,"DIV",{class:!0});var Mi=s(Ir);m(tL.$$.fragment,Mi),QMr=i(Mi),_f=n(Mi,"P",{});var jQ=s(_f);HMr=r(jQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),R2e=n(jQ,"CODE",{});var P6t=s(R2e);UMr=r(P6t,"from_pretrained()"),P6t.forEach(t),JMr=r(jQ,"class method or the "),S2e=n(jQ,"CODE",{});var $6t=s(S2e);YMr=r($6t,"from_config()"),$6t.forEach(t),KMr=r(jQ,`class
method.`),jQ.forEach(t),ZMr=i(Mi),aL=n(Mi,"P",{});var x$e=s(aL);e4r=r(x$e,"This class cannot be instantiated directly using "),P2e=n(x$e,"CODE",{});var I6t=s(P2e);o4r=r(I6t,"__init__()"),I6t.forEach(t),r4r=r(x$e," (throws an error)."),x$e.forEach(t),t4r=i(Mi),kt=n(Mi,"DIV",{class:!0});var Ei=s(kt);m(nL.$$.fragment,Ei),a4r=i(Ei),$2e=n(Ei,"P",{});var j6t=s($2e);n4r=r(j6t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),j6t.forEach(t),s4r=i(Ei),uf=n(Ei,"P",{});var NQ=s(uf);l4r=r(NQ,`Note:
Loading a model from its configuration file does `),I2e=n(NQ,"STRONG",{});var N6t=s(I2e);i4r=r(N6t,"not"),N6t.forEach(t),d4r=r(NQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),j2e=n(NQ,"CODE",{});var D6t=s(j2e);c4r=r(D6t,"from_pretrained()"),D6t.forEach(t),f4r=r(NQ,"to load the model weights."),NQ.forEach(t),m4r=i(Ei),N2e=n(Ei,"P",{});var q6t=s(N2e);g4r=r(q6t,"Examples:"),q6t.forEach(t),h4r=i(Ei),m(sL.$$.fragment,Ei),Ei.forEach(t),p4r=i(Mi),xo=n(Mi,"DIV",{class:!0});var Pa=s(xo);m(lL.$$.fragment,Pa),_4r=i(Pa),D2e=n(Pa,"P",{});var G6t=s(D2e);u4r=r(G6t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),G6t.forEach(t),b4r=i(Pa),In=n(Pa,"P",{});var s4=s(In);v4r=r(s4,"The model class to instantiate is selected based on the "),q2e=n(s4,"CODE",{});var O6t=s(q2e);T4r=r(O6t,"model_type"),O6t.forEach(t),F4r=r(s4,` property of the config object (either
passed as an argument or loaded from `),G2e=n(s4,"CODE",{});var X6t=s(G2e);C4r=r(X6t,"pretrained_model_name_or_path"),X6t.forEach(t),M4r=r(s4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O2e=n(s4,"CODE",{});var V6t=s(O2e);E4r=r(V6t,"pretrained_model_name_or_path"),V6t.forEach(t),y4r=r(s4,":"),s4.forEach(t),w4r=i(Pa),be=n(Pa,"UL",{});var we=s(be);oC=n(we,"LI",{});var wxe=s(oC);X2e=n(wxe,"STRONG",{});var z6t=s(X2e);A4r=r(z6t,"albert"),z6t.forEach(t),L4r=r(wxe," \u2014 "),tz=n(wxe,"A",{href:!0});var W6t=s(tz);B4r=r(W6t,"FlaxAlbertForMaskedLM"),W6t.forEach(t),x4r=r(wxe," (ALBERT model)"),wxe.forEach(t),k4r=i(we),rC=n(we,"LI",{});var Axe=s(rC);V2e=n(Axe,"STRONG",{});var Q6t=s(V2e);R4r=r(Q6t,"bart"),Q6t.forEach(t),S4r=r(Axe," \u2014 "),az=n(Axe,"A",{href:!0});var H6t=s(az);P4r=r(H6t,"FlaxBartForConditionalGeneration"),H6t.forEach(t),$4r=r(Axe," (BART model)"),Axe.forEach(t),I4r=i(we),tC=n(we,"LI",{});var Lxe=s(tC);z2e=n(Lxe,"STRONG",{});var U6t=s(z2e);j4r=r(U6t,"bert"),U6t.forEach(t),N4r=r(Lxe," \u2014 "),nz=n(Lxe,"A",{href:!0});var J6t=s(nz);D4r=r(J6t,"FlaxBertForMaskedLM"),J6t.forEach(t),q4r=r(Lxe," (BERT model)"),Lxe.forEach(t),G4r=i(we),aC=n(we,"LI",{});var Bxe=s(aC);W2e=n(Bxe,"STRONG",{});var Y6t=s(W2e);O4r=r(Y6t,"big_bird"),Y6t.forEach(t),X4r=r(Bxe," \u2014 "),sz=n(Bxe,"A",{href:!0});var K6t=s(sz);V4r=r(K6t,"FlaxBigBirdForMaskedLM"),K6t.forEach(t),z4r=r(Bxe," (BigBird model)"),Bxe.forEach(t),W4r=i(we),nC=n(we,"LI",{});var xxe=s(nC);Q2e=n(xxe,"STRONG",{});var Z6t=s(Q2e);Q4r=r(Z6t,"distilbert"),Z6t.forEach(t),H4r=r(xxe," \u2014 "),lz=n(xxe,"A",{href:!0});var e0t=s(lz);U4r=r(e0t,"FlaxDistilBertForMaskedLM"),e0t.forEach(t),J4r=r(xxe," (DistilBERT model)"),xxe.forEach(t),Y4r=i(we),sC=n(we,"LI",{});var kxe=s(sC);H2e=n(kxe,"STRONG",{});var o0t=s(H2e);K4r=r(o0t,"electra"),o0t.forEach(t),Z4r=r(kxe," \u2014 "),iz=n(kxe,"A",{href:!0});var r0t=s(iz);eEr=r(r0t,"FlaxElectraForMaskedLM"),r0t.forEach(t),oEr=r(kxe," (ELECTRA model)"),kxe.forEach(t),rEr=i(we),lC=n(we,"LI",{});var Rxe=s(lC);U2e=n(Rxe,"STRONG",{});var t0t=s(U2e);tEr=r(t0t,"mbart"),t0t.forEach(t),aEr=r(Rxe," \u2014 "),dz=n(Rxe,"A",{href:!0});var a0t=s(dz);nEr=r(a0t,"FlaxMBartForConditionalGeneration"),a0t.forEach(t),sEr=r(Rxe," (mBART model)"),Rxe.forEach(t),lEr=i(we),iC=n(we,"LI",{});var Sxe=s(iC);J2e=n(Sxe,"STRONG",{});var n0t=s(J2e);iEr=r(n0t,"roberta"),n0t.forEach(t),dEr=r(Sxe," \u2014 "),cz=n(Sxe,"A",{href:!0});var s0t=s(cz);cEr=r(s0t,"FlaxRobertaForMaskedLM"),s0t.forEach(t),fEr=r(Sxe," (RoBERTa model)"),Sxe.forEach(t),mEr=i(we),dC=n(we,"LI",{});var Pxe=s(dC);Y2e=n(Pxe,"STRONG",{});var l0t=s(Y2e);gEr=r(l0t,"roformer"),l0t.forEach(t),hEr=r(Pxe," \u2014 "),fz=n(Pxe,"A",{href:!0});var i0t=s(fz);pEr=r(i0t,"FlaxRoFormerForMaskedLM"),i0t.forEach(t),_Er=r(Pxe," (RoFormer model)"),Pxe.forEach(t),uEr=i(we),cC=n(we,"LI",{});var $xe=s(cC);K2e=n($xe,"STRONG",{});var d0t=s(K2e);bEr=r(d0t,"xlm-roberta"),d0t.forEach(t),vEr=r($xe," \u2014 "),mz=n($xe,"A",{href:!0});var c0t=s(mz);TEr=r(c0t,"FlaxXLMRobertaForMaskedLM"),c0t.forEach(t),FEr=r($xe," (XLM-RoBERTa model)"),$xe.forEach(t),we.forEach(t),CEr=i(Pa),Z2e=n(Pa,"P",{});var f0t=s(Z2e);MEr=r(f0t,"Examples:"),f0t.forEach(t),EEr=i(Pa),m(iL.$$.fragment,Pa),Pa.forEach(t),Mi.forEach(t),uSe=i(d),bf=n(d,"H2",{class:!0});var k$e=s(bf);fC=n(k$e,"A",{id:!0,class:!0,href:!0});var m0t=s(fC);eve=n(m0t,"SPAN",{});var g0t=s(eve);m(dL.$$.fragment,g0t),g0t.forEach(t),m0t.forEach(t),yEr=i(k$e),ove=n(k$e,"SPAN",{});var h0t=s(ove);wEr=r(h0t,"FlaxAutoModelForSeq2SeqLM"),h0t.forEach(t),k$e.forEach(t),bSe=i(d),jr=n(d,"DIV",{class:!0});var yi=s(jr);m(cL.$$.fragment,yi),AEr=i(yi),vf=n(yi,"P",{});var DQ=s(vf);LEr=r(DQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),rve=n(DQ,"CODE",{});var p0t=s(rve);BEr=r(p0t,"from_pretrained()"),p0t.forEach(t),xEr=r(DQ,"class method or the "),tve=n(DQ,"CODE",{});var _0t=s(tve);kEr=r(_0t,"from_config()"),_0t.forEach(t),REr=r(DQ,`class
method.`),DQ.forEach(t),SEr=i(yi),fL=n(yi,"P",{});var R$e=s(fL);PEr=r(R$e,"This class cannot be instantiated directly using "),ave=n(R$e,"CODE",{});var u0t=s(ave);$Er=r(u0t,"__init__()"),u0t.forEach(t),IEr=r(R$e," (throws an error)."),R$e.forEach(t),jEr=i(yi),Rt=n(yi,"DIV",{class:!0});var wi=s(Rt);m(mL.$$.fragment,wi),NEr=i(wi),nve=n(wi,"P",{});var b0t=s(nve);DEr=r(b0t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),b0t.forEach(t),qEr=i(wi),Tf=n(wi,"P",{});var qQ=s(Tf);GEr=r(qQ,`Note:
Loading a model from its configuration file does `),sve=n(qQ,"STRONG",{});var v0t=s(sve);OEr=r(v0t,"not"),v0t.forEach(t),XEr=r(qQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),lve=n(qQ,"CODE",{});var T0t=s(lve);VEr=r(T0t,"from_pretrained()"),T0t.forEach(t),zEr=r(qQ,"to load the model weights."),qQ.forEach(t),WEr=i(wi),ive=n(wi,"P",{});var F0t=s(ive);QEr=r(F0t,"Examples:"),F0t.forEach(t),HEr=i(wi),m(gL.$$.fragment,wi),wi.forEach(t),UEr=i(yi),ko=n(yi,"DIV",{class:!0});var $a=s(ko);m(hL.$$.fragment,$a),JEr=i($a),dve=n($a,"P",{});var C0t=s(dve);YEr=r(C0t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),C0t.forEach(t),KEr=i($a),jn=n($a,"P",{});var l4=s(jn);ZEr=r(l4,"The model class to instantiate is selected based on the "),cve=n(l4,"CODE",{});var M0t=s(cve);e3r=r(M0t,"model_type"),M0t.forEach(t),o3r=r(l4,` property of the config object (either
passed as an argument or loaded from `),fve=n(l4,"CODE",{});var E0t=s(fve);r3r=r(E0t,"pretrained_model_name_or_path"),E0t.forEach(t),t3r=r(l4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mve=n(l4,"CODE",{});var y0t=s(mve);a3r=r(y0t,"pretrained_model_name_or_path"),y0t.forEach(t),n3r=r(l4,":"),l4.forEach(t),s3r=i($a),Ee=n($a,"UL",{});var lo=s(Ee);mC=n(lo,"LI",{});var Ixe=s(mC);gve=n(Ixe,"STRONG",{});var w0t=s(gve);l3r=r(w0t,"bart"),w0t.forEach(t),i3r=r(Ixe," \u2014 "),gz=n(Ixe,"A",{href:!0});var A0t=s(gz);d3r=r(A0t,"FlaxBartForConditionalGeneration"),A0t.forEach(t),c3r=r(Ixe," (BART model)"),Ixe.forEach(t),f3r=i(lo),gC=n(lo,"LI",{});var jxe=s(gC);hve=n(jxe,"STRONG",{});var L0t=s(hve);m3r=r(L0t,"blenderbot"),L0t.forEach(t),g3r=r(jxe," \u2014 "),hz=n(jxe,"A",{href:!0});var B0t=s(hz);h3r=r(B0t,"FlaxBlenderbotForConditionalGeneration"),B0t.forEach(t),p3r=r(jxe," (Blenderbot model)"),jxe.forEach(t),_3r=i(lo),hC=n(lo,"LI",{});var Nxe=s(hC);pve=n(Nxe,"STRONG",{});var x0t=s(pve);u3r=r(x0t,"blenderbot-small"),x0t.forEach(t),b3r=r(Nxe," \u2014 "),pz=n(Nxe,"A",{href:!0});var k0t=s(pz);v3r=r(k0t,"FlaxBlenderbotSmallForConditionalGeneration"),k0t.forEach(t),T3r=r(Nxe," (BlenderbotSmall model)"),Nxe.forEach(t),F3r=i(lo),pC=n(lo,"LI",{});var Dxe=s(pC);_ve=n(Dxe,"STRONG",{});var R0t=s(_ve);C3r=r(R0t,"encoder-decoder"),R0t.forEach(t),M3r=r(Dxe," \u2014 "),_z=n(Dxe,"A",{href:!0});var S0t=s(_z);E3r=r(S0t,"FlaxEncoderDecoderModel"),S0t.forEach(t),y3r=r(Dxe," (Encoder decoder model)"),Dxe.forEach(t),w3r=i(lo),_C=n(lo,"LI",{});var qxe=s(_C);uve=n(qxe,"STRONG",{});var P0t=s(uve);A3r=r(P0t,"marian"),P0t.forEach(t),L3r=r(qxe," \u2014 "),uz=n(qxe,"A",{href:!0});var $0t=s(uz);B3r=r($0t,"FlaxMarianMTModel"),$0t.forEach(t),x3r=r(qxe," (Marian model)"),qxe.forEach(t),k3r=i(lo),uC=n(lo,"LI",{});var Gxe=s(uC);bve=n(Gxe,"STRONG",{});var I0t=s(bve);R3r=r(I0t,"mbart"),I0t.forEach(t),S3r=r(Gxe," \u2014 "),bz=n(Gxe,"A",{href:!0});var j0t=s(bz);P3r=r(j0t,"FlaxMBartForConditionalGeneration"),j0t.forEach(t),$3r=r(Gxe," (mBART model)"),Gxe.forEach(t),I3r=i(lo),bC=n(lo,"LI",{});var Oxe=s(bC);vve=n(Oxe,"STRONG",{});var N0t=s(vve);j3r=r(N0t,"mt5"),N0t.forEach(t),N3r=r(Oxe," \u2014 "),vz=n(Oxe,"A",{href:!0});var D0t=s(vz);D3r=r(D0t,"FlaxMT5ForConditionalGeneration"),D0t.forEach(t),q3r=r(Oxe," (mT5 model)"),Oxe.forEach(t),G3r=i(lo),vC=n(lo,"LI",{});var Xxe=s(vC);Tve=n(Xxe,"STRONG",{});var q0t=s(Tve);O3r=r(q0t,"pegasus"),q0t.forEach(t),X3r=r(Xxe," \u2014 "),Tz=n(Xxe,"A",{href:!0});var G0t=s(Tz);V3r=r(G0t,"FlaxPegasusForConditionalGeneration"),G0t.forEach(t),z3r=r(Xxe," (Pegasus model)"),Xxe.forEach(t),W3r=i(lo),TC=n(lo,"LI",{});var Vxe=s(TC);Fve=n(Vxe,"STRONG",{});var O0t=s(Fve);Q3r=r(O0t,"t5"),O0t.forEach(t),H3r=r(Vxe," \u2014 "),Fz=n(Vxe,"A",{href:!0});var X0t=s(Fz);U3r=r(X0t,"FlaxT5ForConditionalGeneration"),X0t.forEach(t),J3r=r(Vxe," (T5 model)"),Vxe.forEach(t),lo.forEach(t),Y3r=i($a),Cve=n($a,"P",{});var V0t=s(Cve);K3r=r(V0t,"Examples:"),V0t.forEach(t),Z3r=i($a),m(pL.$$.fragment,$a),$a.forEach(t),yi.forEach(t),vSe=i(d),Ff=n(d,"H2",{class:!0});var S$e=s(Ff);FC=n(S$e,"A",{id:!0,class:!0,href:!0});var z0t=s(FC);Mve=n(z0t,"SPAN",{});var W0t=s(Mve);m(_L.$$.fragment,W0t),W0t.forEach(t),z0t.forEach(t),eyr=i(S$e),Eve=n(S$e,"SPAN",{});var Q0t=s(Eve);oyr=r(Q0t,"FlaxAutoModelForSequenceClassification"),Q0t.forEach(t),S$e.forEach(t),TSe=i(d),Nr=n(d,"DIV",{class:!0});var Ai=s(Nr);m(uL.$$.fragment,Ai),ryr=i(Ai),Cf=n(Ai,"P",{});var GQ=s(Cf);tyr=r(GQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),yve=n(GQ,"CODE",{});var H0t=s(yve);ayr=r(H0t,"from_pretrained()"),H0t.forEach(t),nyr=r(GQ,"class method or the "),wve=n(GQ,"CODE",{});var U0t=s(wve);syr=r(U0t,"from_config()"),U0t.forEach(t),lyr=r(GQ,`class
method.`),GQ.forEach(t),iyr=i(Ai),bL=n(Ai,"P",{});var P$e=s(bL);dyr=r(P$e,"This class cannot be instantiated directly using "),Ave=n(P$e,"CODE",{});var J0t=s(Ave);cyr=r(J0t,"__init__()"),J0t.forEach(t),fyr=r(P$e," (throws an error)."),P$e.forEach(t),myr=i(Ai),St=n(Ai,"DIV",{class:!0});var Li=s(St);m(vL.$$.fragment,Li),gyr=i(Li),Lve=n(Li,"P",{});var Y0t=s(Lve);hyr=r(Y0t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Y0t.forEach(t),pyr=i(Li),Mf=n(Li,"P",{});var OQ=s(Mf);_yr=r(OQ,`Note:
Loading a model from its configuration file does `),Bve=n(OQ,"STRONG",{});var K0t=s(Bve);uyr=r(K0t,"not"),K0t.forEach(t),byr=r(OQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),xve=n(OQ,"CODE",{});var Z0t=s(xve);vyr=r(Z0t,"from_pretrained()"),Z0t.forEach(t),Tyr=r(OQ,"to load the model weights."),OQ.forEach(t),Fyr=i(Li),kve=n(Li,"P",{});var eTt=s(kve);Cyr=r(eTt,"Examples:"),eTt.forEach(t),Myr=i(Li),m(TL.$$.fragment,Li),Li.forEach(t),Eyr=i(Ai),Ro=n(Ai,"DIV",{class:!0});var Ia=s(Ro);m(FL.$$.fragment,Ia),yyr=i(Ia),Rve=n(Ia,"P",{});var oTt=s(Rve);wyr=r(oTt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),oTt.forEach(t),Ayr=i(Ia),Nn=n(Ia,"P",{});var i4=s(Nn);Lyr=r(i4,"The model class to instantiate is selected based on the "),Sve=n(i4,"CODE",{});var rTt=s(Sve);Byr=r(rTt,"model_type"),rTt.forEach(t),xyr=r(i4,` property of the config object (either
passed as an argument or loaded from `),Pve=n(i4,"CODE",{});var tTt=s(Pve);kyr=r(tTt,"pretrained_model_name_or_path"),tTt.forEach(t),Ryr=r(i4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ve=n(i4,"CODE",{});var aTt=s($ve);Syr=r(aTt,"pretrained_model_name_or_path"),aTt.forEach(t),Pyr=r(i4,":"),i4.forEach(t),$yr=i(Ia),ve=n(Ia,"UL",{});var Ae=s(ve);CC=n(Ae,"LI",{});var zxe=s(CC);Ive=n(zxe,"STRONG",{});var nTt=s(Ive);Iyr=r(nTt,"albert"),nTt.forEach(t),jyr=r(zxe," \u2014 "),Cz=n(zxe,"A",{href:!0});var sTt=s(Cz);Nyr=r(sTt,"FlaxAlbertForSequenceClassification"),sTt.forEach(t),Dyr=r(zxe," (ALBERT model)"),zxe.forEach(t),qyr=i(Ae),MC=n(Ae,"LI",{});var Wxe=s(MC);jve=n(Wxe,"STRONG",{});var lTt=s(jve);Gyr=r(lTt,"bart"),lTt.forEach(t),Oyr=r(Wxe," \u2014 "),Mz=n(Wxe,"A",{href:!0});var iTt=s(Mz);Xyr=r(iTt,"FlaxBartForSequenceClassification"),iTt.forEach(t),Vyr=r(Wxe," (BART model)"),Wxe.forEach(t),zyr=i(Ae),EC=n(Ae,"LI",{});var Qxe=s(EC);Nve=n(Qxe,"STRONG",{});var dTt=s(Nve);Wyr=r(dTt,"bert"),dTt.forEach(t),Qyr=r(Qxe," \u2014 "),Ez=n(Qxe,"A",{href:!0});var cTt=s(Ez);Hyr=r(cTt,"FlaxBertForSequenceClassification"),cTt.forEach(t),Uyr=r(Qxe," (BERT model)"),Qxe.forEach(t),Jyr=i(Ae),yC=n(Ae,"LI",{});var Hxe=s(yC);Dve=n(Hxe,"STRONG",{});var fTt=s(Dve);Yyr=r(fTt,"big_bird"),fTt.forEach(t),Kyr=r(Hxe," \u2014 "),yz=n(Hxe,"A",{href:!0});var mTt=s(yz);Zyr=r(mTt,"FlaxBigBirdForSequenceClassification"),mTt.forEach(t),ewr=r(Hxe," (BigBird model)"),Hxe.forEach(t),owr=i(Ae),wC=n(Ae,"LI",{});var Uxe=s(wC);qve=n(Uxe,"STRONG",{});var gTt=s(qve);rwr=r(gTt,"distilbert"),gTt.forEach(t),twr=r(Uxe," \u2014 "),wz=n(Uxe,"A",{href:!0});var hTt=s(wz);awr=r(hTt,"FlaxDistilBertForSequenceClassification"),hTt.forEach(t),nwr=r(Uxe," (DistilBERT model)"),Uxe.forEach(t),swr=i(Ae),AC=n(Ae,"LI",{});var Jxe=s(AC);Gve=n(Jxe,"STRONG",{});var pTt=s(Gve);lwr=r(pTt,"electra"),pTt.forEach(t),iwr=r(Jxe," \u2014 "),Az=n(Jxe,"A",{href:!0});var _Tt=s(Az);dwr=r(_Tt,"FlaxElectraForSequenceClassification"),_Tt.forEach(t),cwr=r(Jxe," (ELECTRA model)"),Jxe.forEach(t),fwr=i(Ae),LC=n(Ae,"LI",{});var Yxe=s(LC);Ove=n(Yxe,"STRONG",{});var uTt=s(Ove);mwr=r(uTt,"mbart"),uTt.forEach(t),gwr=r(Yxe," \u2014 "),Lz=n(Yxe,"A",{href:!0});var bTt=s(Lz);hwr=r(bTt,"FlaxMBartForSequenceClassification"),bTt.forEach(t),pwr=r(Yxe," (mBART model)"),Yxe.forEach(t),_wr=i(Ae),BC=n(Ae,"LI",{});var Kxe=s(BC);Xve=n(Kxe,"STRONG",{});var vTt=s(Xve);uwr=r(vTt,"roberta"),vTt.forEach(t),bwr=r(Kxe," \u2014 "),Bz=n(Kxe,"A",{href:!0});var TTt=s(Bz);vwr=r(TTt,"FlaxRobertaForSequenceClassification"),TTt.forEach(t),Twr=r(Kxe," (RoBERTa model)"),Kxe.forEach(t),Fwr=i(Ae),xC=n(Ae,"LI",{});var Zxe=s(xC);Vve=n(Zxe,"STRONG",{});var FTt=s(Vve);Cwr=r(FTt,"roformer"),FTt.forEach(t),Mwr=r(Zxe," \u2014 "),xz=n(Zxe,"A",{href:!0});var CTt=s(xz);Ewr=r(CTt,"FlaxRoFormerForSequenceClassification"),CTt.forEach(t),ywr=r(Zxe," (RoFormer model)"),Zxe.forEach(t),wwr=i(Ae),kC=n(Ae,"LI",{});var eke=s(kC);zve=n(eke,"STRONG",{});var MTt=s(zve);Awr=r(MTt,"xlm-roberta"),MTt.forEach(t),Lwr=r(eke," \u2014 "),kz=n(eke,"A",{href:!0});var ETt=s(kz);Bwr=r(ETt,"FlaxXLMRobertaForSequenceClassification"),ETt.forEach(t),xwr=r(eke," (XLM-RoBERTa model)"),eke.forEach(t),Ae.forEach(t),kwr=i(Ia),Wve=n(Ia,"P",{});var yTt=s(Wve);Rwr=r(yTt,"Examples:"),yTt.forEach(t),Swr=i(Ia),m(CL.$$.fragment,Ia),Ia.forEach(t),Ai.forEach(t),FSe=i(d),Ef=n(d,"H2",{class:!0});var $$e=s(Ef);RC=n($$e,"A",{id:!0,class:!0,href:!0});var wTt=s(RC);Qve=n(wTt,"SPAN",{});var ATt=s(Qve);m(ML.$$.fragment,ATt),ATt.forEach(t),wTt.forEach(t),Pwr=i($$e),Hve=n($$e,"SPAN",{});var LTt=s(Hve);$wr=r(LTt,"FlaxAutoModelForSpeechSeq2Seq"),LTt.forEach(t),$$e.forEach(t),CSe=i(d),Dr=n(d,"DIV",{class:!0});var Bi=s(Dr);m(EL.$$.fragment,Bi),Iwr=i(Bi),yf=n(Bi,"P",{});var XQ=s(yf);jwr=r(XQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Uve=n(XQ,"CODE",{});var BTt=s(Uve);Nwr=r(BTt,"from_pretrained()"),BTt.forEach(t),Dwr=r(XQ,"class method or the "),Jve=n(XQ,"CODE",{});var xTt=s(Jve);qwr=r(xTt,"from_config()"),xTt.forEach(t),Gwr=r(XQ,`class
method.`),XQ.forEach(t),Owr=i(Bi),yL=n(Bi,"P",{});var I$e=s(yL);Xwr=r(I$e,"This class cannot be instantiated directly using "),Yve=n(I$e,"CODE",{});var kTt=s(Yve);Vwr=r(kTt,"__init__()"),kTt.forEach(t),zwr=r(I$e," (throws an error)."),I$e.forEach(t),Wwr=i(Bi),Pt=n(Bi,"DIV",{class:!0});var xi=s(Pt);m(wL.$$.fragment,xi),Qwr=i(xi),Kve=n(xi,"P",{});var RTt=s(Kve);Hwr=r(RTt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),RTt.forEach(t),Uwr=i(xi),wf=n(xi,"P",{});var VQ=s(wf);Jwr=r(VQ,`Note:
Loading a model from its configuration file does `),Zve=n(VQ,"STRONG",{});var STt=s(Zve);Ywr=r(STt,"not"),STt.forEach(t),Kwr=r(VQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),e6e=n(VQ,"CODE",{});var PTt=s(e6e);Zwr=r(PTt,"from_pretrained()"),PTt.forEach(t),eAr=r(VQ,"to load the model weights."),VQ.forEach(t),oAr=i(xi),o6e=n(xi,"P",{});var $Tt=s(o6e);rAr=r($Tt,"Examples:"),$Tt.forEach(t),tAr=i(xi),m(AL.$$.fragment,xi),xi.forEach(t),aAr=i(Bi),So=n(Bi,"DIV",{class:!0});var ja=s(So);m(LL.$$.fragment,ja),nAr=i(ja),r6e=n(ja,"P",{});var ITt=s(r6e);sAr=r(ITt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),ITt.forEach(t),lAr=i(ja),Dn=n(ja,"P",{});var d4=s(Dn);iAr=r(d4,"The model class to instantiate is selected based on the "),t6e=n(d4,"CODE",{});var jTt=s(t6e);dAr=r(jTt,"model_type"),jTt.forEach(t),cAr=r(d4,` property of the config object (either
passed as an argument or loaded from `),a6e=n(d4,"CODE",{});var NTt=s(a6e);fAr=r(NTt,"pretrained_model_name_or_path"),NTt.forEach(t),mAr=r(d4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n6e=n(d4,"CODE",{});var DTt=s(n6e);gAr=r(DTt,"pretrained_model_name_or_path"),DTt.forEach(t),hAr=r(d4,":"),d4.forEach(t),pAr=i(ja),s6e=n(ja,"UL",{});var qTt=s(s6e);SC=n(qTt,"LI",{});var oke=s(SC);l6e=n(oke,"STRONG",{});var GTt=s(l6e);_Ar=r(GTt,"speech-encoder-decoder"),GTt.forEach(t),uAr=r(oke," \u2014 "),Rz=n(oke,"A",{href:!0});var OTt=s(Rz);bAr=r(OTt,"FlaxSpeechEncoderDecoderModel"),OTt.forEach(t),vAr=r(oke," (Speech Encoder decoder model)"),oke.forEach(t),qTt.forEach(t),TAr=i(ja),i6e=n(ja,"P",{});var XTt=s(i6e);FAr=r(XTt,"Examples:"),XTt.forEach(t),CAr=i(ja),m(BL.$$.fragment,ja),ja.forEach(t),Bi.forEach(t),MSe=i(d),Af=n(d,"H2",{class:!0});var j$e=s(Af);PC=n(j$e,"A",{id:!0,class:!0,href:!0});var VTt=s(PC);d6e=n(VTt,"SPAN",{});var zTt=s(d6e);m(xL.$$.fragment,zTt),zTt.forEach(t),VTt.forEach(t),MAr=i(j$e),c6e=n(j$e,"SPAN",{});var WTt=s(c6e);EAr=r(WTt,"FlaxAutoModelForQuestionAnswering"),WTt.forEach(t),j$e.forEach(t),ESe=i(d),qr=n(d,"DIV",{class:!0});var ki=s(qr);m(kL.$$.fragment,ki),yAr=i(ki),Lf=n(ki,"P",{});var zQ=s(Lf);wAr=r(zQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),f6e=n(zQ,"CODE",{});var QTt=s(f6e);AAr=r(QTt,"from_pretrained()"),QTt.forEach(t),LAr=r(zQ,"class method or the "),m6e=n(zQ,"CODE",{});var HTt=s(m6e);BAr=r(HTt,"from_config()"),HTt.forEach(t),xAr=r(zQ,`class
method.`),zQ.forEach(t),kAr=i(ki),RL=n(ki,"P",{});var N$e=s(RL);RAr=r(N$e,"This class cannot be instantiated directly using "),g6e=n(N$e,"CODE",{});var UTt=s(g6e);SAr=r(UTt,"__init__()"),UTt.forEach(t),PAr=r(N$e," (throws an error)."),N$e.forEach(t),$Ar=i(ki),$t=n(ki,"DIV",{class:!0});var Ri=s($t);m(SL.$$.fragment,Ri),IAr=i(Ri),h6e=n(Ri,"P",{});var JTt=s(h6e);jAr=r(JTt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),JTt.forEach(t),NAr=i(Ri),Bf=n(Ri,"P",{});var WQ=s(Bf);DAr=r(WQ,`Note:
Loading a model from its configuration file does `),p6e=n(WQ,"STRONG",{});var YTt=s(p6e);qAr=r(YTt,"not"),YTt.forEach(t),GAr=r(WQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),_6e=n(WQ,"CODE",{});var KTt=s(_6e);OAr=r(KTt,"from_pretrained()"),KTt.forEach(t),XAr=r(WQ,"to load the model weights."),WQ.forEach(t),VAr=i(Ri),u6e=n(Ri,"P",{});var ZTt=s(u6e);zAr=r(ZTt,"Examples:"),ZTt.forEach(t),WAr=i(Ri),m(PL.$$.fragment,Ri),Ri.forEach(t),QAr=i(ki),Po=n(ki,"DIV",{class:!0});var Na=s(Po);m($L.$$.fragment,Na),HAr=i(Na),b6e=n(Na,"P",{});var e8t=s(b6e);UAr=r(e8t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),e8t.forEach(t),JAr=i(Na),qn=n(Na,"P",{});var c4=s(qn);YAr=r(c4,"The model class to instantiate is selected based on the "),v6e=n(c4,"CODE",{});var o8t=s(v6e);KAr=r(o8t,"model_type"),o8t.forEach(t),ZAr=r(c4,` property of the config object (either
passed as an argument or loaded from `),T6e=n(c4,"CODE",{});var r8t=s(T6e);eLr=r(r8t,"pretrained_model_name_or_path"),r8t.forEach(t),oLr=r(c4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F6e=n(c4,"CODE",{});var t8t=s(F6e);rLr=r(t8t,"pretrained_model_name_or_path"),t8t.forEach(t),tLr=r(c4,":"),c4.forEach(t),aLr=i(Na),Te=n(Na,"UL",{});var Le=s(Te);$C=n(Le,"LI",{});var rke=s($C);C6e=n(rke,"STRONG",{});var a8t=s(C6e);nLr=r(a8t,"albert"),a8t.forEach(t),sLr=r(rke," \u2014 "),Sz=n(rke,"A",{href:!0});var n8t=s(Sz);lLr=r(n8t,"FlaxAlbertForQuestionAnswering"),n8t.forEach(t),iLr=r(rke," (ALBERT model)"),rke.forEach(t),dLr=i(Le),IC=n(Le,"LI",{});var tke=s(IC);M6e=n(tke,"STRONG",{});var s8t=s(M6e);cLr=r(s8t,"bart"),s8t.forEach(t),fLr=r(tke," \u2014 "),Pz=n(tke,"A",{href:!0});var l8t=s(Pz);mLr=r(l8t,"FlaxBartForQuestionAnswering"),l8t.forEach(t),gLr=r(tke," (BART model)"),tke.forEach(t),hLr=i(Le),jC=n(Le,"LI",{});var ake=s(jC);E6e=n(ake,"STRONG",{});var i8t=s(E6e);pLr=r(i8t,"bert"),i8t.forEach(t),_Lr=r(ake," \u2014 "),$z=n(ake,"A",{href:!0});var d8t=s($z);uLr=r(d8t,"FlaxBertForQuestionAnswering"),d8t.forEach(t),bLr=r(ake," (BERT model)"),ake.forEach(t),vLr=i(Le),NC=n(Le,"LI",{});var nke=s(NC);y6e=n(nke,"STRONG",{});var c8t=s(y6e);TLr=r(c8t,"big_bird"),c8t.forEach(t),FLr=r(nke," \u2014 "),Iz=n(nke,"A",{href:!0});var f8t=s(Iz);CLr=r(f8t,"FlaxBigBirdForQuestionAnswering"),f8t.forEach(t),MLr=r(nke," (BigBird model)"),nke.forEach(t),ELr=i(Le),DC=n(Le,"LI",{});var ske=s(DC);w6e=n(ske,"STRONG",{});var m8t=s(w6e);yLr=r(m8t,"distilbert"),m8t.forEach(t),wLr=r(ske," \u2014 "),jz=n(ske,"A",{href:!0});var g8t=s(jz);ALr=r(g8t,"FlaxDistilBertForQuestionAnswering"),g8t.forEach(t),LLr=r(ske," (DistilBERT model)"),ske.forEach(t),BLr=i(Le),qC=n(Le,"LI",{});var lke=s(qC);A6e=n(lke,"STRONG",{});var h8t=s(A6e);xLr=r(h8t,"electra"),h8t.forEach(t),kLr=r(lke," \u2014 "),Nz=n(lke,"A",{href:!0});var p8t=s(Nz);RLr=r(p8t,"FlaxElectraForQuestionAnswering"),p8t.forEach(t),SLr=r(lke," (ELECTRA model)"),lke.forEach(t),PLr=i(Le),GC=n(Le,"LI",{});var ike=s(GC);L6e=n(ike,"STRONG",{});var _8t=s(L6e);$Lr=r(_8t,"mbart"),_8t.forEach(t),ILr=r(ike," \u2014 "),Dz=n(ike,"A",{href:!0});var u8t=s(Dz);jLr=r(u8t,"FlaxMBartForQuestionAnswering"),u8t.forEach(t),NLr=r(ike," (mBART model)"),ike.forEach(t),DLr=i(Le),OC=n(Le,"LI",{});var dke=s(OC);B6e=n(dke,"STRONG",{});var b8t=s(B6e);qLr=r(b8t,"roberta"),b8t.forEach(t),GLr=r(dke," \u2014 "),qz=n(dke,"A",{href:!0});var v8t=s(qz);OLr=r(v8t,"FlaxRobertaForQuestionAnswering"),v8t.forEach(t),XLr=r(dke," (RoBERTa model)"),dke.forEach(t),VLr=i(Le),XC=n(Le,"LI",{});var cke=s(XC);x6e=n(cke,"STRONG",{});var T8t=s(x6e);zLr=r(T8t,"roformer"),T8t.forEach(t),WLr=r(cke," \u2014 "),Gz=n(cke,"A",{href:!0});var F8t=s(Gz);QLr=r(F8t,"FlaxRoFormerForQuestionAnswering"),F8t.forEach(t),HLr=r(cke," (RoFormer model)"),cke.forEach(t),ULr=i(Le),VC=n(Le,"LI",{});var fke=s(VC);k6e=n(fke,"STRONG",{});var C8t=s(k6e);JLr=r(C8t,"xlm-roberta"),C8t.forEach(t),YLr=r(fke," \u2014 "),Oz=n(fke,"A",{href:!0});var M8t=s(Oz);KLr=r(M8t,"FlaxXLMRobertaForQuestionAnswering"),M8t.forEach(t),ZLr=r(fke," (XLM-RoBERTa model)"),fke.forEach(t),Le.forEach(t),e7r=i(Na),R6e=n(Na,"P",{});var E8t=s(R6e);o7r=r(E8t,"Examples:"),E8t.forEach(t),r7r=i(Na),m(IL.$$.fragment,Na),Na.forEach(t),ki.forEach(t),ySe=i(d),xf=n(d,"H2",{class:!0});var D$e=s(xf);zC=n(D$e,"A",{id:!0,class:!0,href:!0});var y8t=s(zC);S6e=n(y8t,"SPAN",{});var w8t=s(S6e);m(jL.$$.fragment,w8t),w8t.forEach(t),y8t.forEach(t),t7r=i(D$e),P6e=n(D$e,"SPAN",{});var A8t=s(P6e);a7r=r(A8t,"FlaxAutoModelForTokenClassification"),A8t.forEach(t),D$e.forEach(t),wSe=i(d),Gr=n(d,"DIV",{class:!0});var Si=s(Gr);m(NL.$$.fragment,Si),n7r=i(Si),kf=n(Si,"P",{});var QQ=s(kf);s7r=r(QQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),$6e=n(QQ,"CODE",{});var L8t=s($6e);l7r=r(L8t,"from_pretrained()"),L8t.forEach(t),i7r=r(QQ,"class method or the "),I6e=n(QQ,"CODE",{});var B8t=s(I6e);d7r=r(B8t,"from_config()"),B8t.forEach(t),c7r=r(QQ,`class
method.`),QQ.forEach(t),f7r=i(Si),DL=n(Si,"P",{});var q$e=s(DL);m7r=r(q$e,"This class cannot be instantiated directly using "),j6e=n(q$e,"CODE",{});var x8t=s(j6e);g7r=r(x8t,"__init__()"),x8t.forEach(t),h7r=r(q$e," (throws an error)."),q$e.forEach(t),p7r=i(Si),It=n(Si,"DIV",{class:!0});var Pi=s(It);m(qL.$$.fragment,Pi),_7r=i(Pi),N6e=n(Pi,"P",{});var k8t=s(N6e);u7r=r(k8t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),k8t.forEach(t),b7r=i(Pi),Rf=n(Pi,"P",{});var HQ=s(Rf);v7r=r(HQ,`Note:
Loading a model from its configuration file does `),D6e=n(HQ,"STRONG",{});var R8t=s(D6e);T7r=r(R8t,"not"),R8t.forEach(t),F7r=r(HQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),q6e=n(HQ,"CODE",{});var S8t=s(q6e);C7r=r(S8t,"from_pretrained()"),S8t.forEach(t),M7r=r(HQ,"to load the model weights."),HQ.forEach(t),E7r=i(Pi),G6e=n(Pi,"P",{});var P8t=s(G6e);y7r=r(P8t,"Examples:"),P8t.forEach(t),w7r=i(Pi),m(GL.$$.fragment,Pi),Pi.forEach(t),A7r=i(Si),$o=n(Si,"DIV",{class:!0});var Da=s($o);m(OL.$$.fragment,Da),L7r=i(Da),O6e=n(Da,"P",{});var $8t=s(O6e);B7r=r($8t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),$8t.forEach(t),x7r=i(Da),Gn=n(Da,"P",{});var f4=s(Gn);k7r=r(f4,"The model class to instantiate is selected based on the "),X6e=n(f4,"CODE",{});var I8t=s(X6e);R7r=r(I8t,"model_type"),I8t.forEach(t),S7r=r(f4,` property of the config object (either
passed as an argument or loaded from `),V6e=n(f4,"CODE",{});var j8t=s(V6e);P7r=r(j8t,"pretrained_model_name_or_path"),j8t.forEach(t),$7r=r(f4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z6e=n(f4,"CODE",{});var N8t=s(z6e);I7r=r(N8t,"pretrained_model_name_or_path"),N8t.forEach(t),j7r=r(f4,":"),f4.forEach(t),N7r=i(Da),Se=n(Da,"UL",{});var Xo=s(Se);WC=n(Xo,"LI",{});var mke=s(WC);W6e=n(mke,"STRONG",{});var D8t=s(W6e);D7r=r(D8t,"albert"),D8t.forEach(t),q7r=r(mke," \u2014 "),Xz=n(mke,"A",{href:!0});var q8t=s(Xz);G7r=r(q8t,"FlaxAlbertForTokenClassification"),q8t.forEach(t),O7r=r(mke," (ALBERT model)"),mke.forEach(t),X7r=i(Xo),QC=n(Xo,"LI",{});var gke=s(QC);Q6e=n(gke,"STRONG",{});var G8t=s(Q6e);V7r=r(G8t,"bert"),G8t.forEach(t),z7r=r(gke," \u2014 "),Vz=n(gke,"A",{href:!0});var O8t=s(Vz);W7r=r(O8t,"FlaxBertForTokenClassification"),O8t.forEach(t),Q7r=r(gke," (BERT model)"),gke.forEach(t),H7r=i(Xo),HC=n(Xo,"LI",{});var hke=s(HC);H6e=n(hke,"STRONG",{});var X8t=s(H6e);U7r=r(X8t,"big_bird"),X8t.forEach(t),J7r=r(hke," \u2014 "),zz=n(hke,"A",{href:!0});var V8t=s(zz);Y7r=r(V8t,"FlaxBigBirdForTokenClassification"),V8t.forEach(t),K7r=r(hke," (BigBird model)"),hke.forEach(t),Z7r=i(Xo),UC=n(Xo,"LI",{});var pke=s(UC);U6e=n(pke,"STRONG",{});var z8t=s(U6e);e9r=r(z8t,"distilbert"),z8t.forEach(t),o9r=r(pke," \u2014 "),Wz=n(pke,"A",{href:!0});var W8t=s(Wz);r9r=r(W8t,"FlaxDistilBertForTokenClassification"),W8t.forEach(t),t9r=r(pke," (DistilBERT model)"),pke.forEach(t),a9r=i(Xo),JC=n(Xo,"LI",{});var _ke=s(JC);J6e=n(_ke,"STRONG",{});var Q8t=s(J6e);n9r=r(Q8t,"electra"),Q8t.forEach(t),s9r=r(_ke," \u2014 "),Qz=n(_ke,"A",{href:!0});var H8t=s(Qz);l9r=r(H8t,"FlaxElectraForTokenClassification"),H8t.forEach(t),i9r=r(_ke," (ELECTRA model)"),_ke.forEach(t),d9r=i(Xo),YC=n(Xo,"LI",{});var uke=s(YC);Y6e=n(uke,"STRONG",{});var U8t=s(Y6e);c9r=r(U8t,"roberta"),U8t.forEach(t),f9r=r(uke," \u2014 "),Hz=n(uke,"A",{href:!0});var J8t=s(Hz);m9r=r(J8t,"FlaxRobertaForTokenClassification"),J8t.forEach(t),g9r=r(uke," (RoBERTa model)"),uke.forEach(t),h9r=i(Xo),KC=n(Xo,"LI",{});var bke=s(KC);K6e=n(bke,"STRONG",{});var Y8t=s(K6e);p9r=r(Y8t,"roformer"),Y8t.forEach(t),_9r=r(bke," \u2014 "),Uz=n(bke,"A",{href:!0});var K8t=s(Uz);u9r=r(K8t,"FlaxRoFormerForTokenClassification"),K8t.forEach(t),b9r=r(bke," (RoFormer model)"),bke.forEach(t),v9r=i(Xo),ZC=n(Xo,"LI",{});var vke=s(ZC);Z6e=n(vke,"STRONG",{});var Z8t=s(Z6e);T9r=r(Z8t,"xlm-roberta"),Z8t.forEach(t),F9r=r(vke," \u2014 "),Jz=n(vke,"A",{href:!0});var eFt=s(Jz);C9r=r(eFt,"FlaxXLMRobertaForTokenClassification"),eFt.forEach(t),M9r=r(vke," (XLM-RoBERTa model)"),vke.forEach(t),Xo.forEach(t),E9r=i(Da),e0e=n(Da,"P",{});var oFt=s(e0e);y9r=r(oFt,"Examples:"),oFt.forEach(t),w9r=i(Da),m(XL.$$.fragment,Da),Da.forEach(t),Si.forEach(t),ASe=i(d),Sf=n(d,"H2",{class:!0});var G$e=s(Sf);eM=n(G$e,"A",{id:!0,class:!0,href:!0});var rFt=s(eM);o0e=n(rFt,"SPAN",{});var tFt=s(o0e);m(VL.$$.fragment,tFt),tFt.forEach(t),rFt.forEach(t),A9r=i(G$e),r0e=n(G$e,"SPAN",{});var aFt=s(r0e);L9r=r(aFt,"FlaxAutoModelForMultipleChoice"),aFt.forEach(t),G$e.forEach(t),LSe=i(d),Or=n(d,"DIV",{class:!0});var $i=s(Or);m(zL.$$.fragment,$i),B9r=i($i),Pf=n($i,"P",{});var UQ=s(Pf);x9r=r(UQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),t0e=n(UQ,"CODE",{});var nFt=s(t0e);k9r=r(nFt,"from_pretrained()"),nFt.forEach(t),R9r=r(UQ,"class method or the "),a0e=n(UQ,"CODE",{});var sFt=s(a0e);S9r=r(sFt,"from_config()"),sFt.forEach(t),P9r=r(UQ,`class
method.`),UQ.forEach(t),$9r=i($i),WL=n($i,"P",{});var O$e=s(WL);I9r=r(O$e,"This class cannot be instantiated directly using "),n0e=n(O$e,"CODE",{});var lFt=s(n0e);j9r=r(lFt,"__init__()"),lFt.forEach(t),N9r=r(O$e," (throws an error)."),O$e.forEach(t),D9r=i($i),jt=n($i,"DIV",{class:!0});var Ii=s(jt);m(QL.$$.fragment,Ii),q9r=i(Ii),s0e=n(Ii,"P",{});var iFt=s(s0e);G9r=r(iFt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),iFt.forEach(t),O9r=i(Ii),$f=n(Ii,"P",{});var JQ=s($f);X9r=r(JQ,`Note:
Loading a model from its configuration file does `),l0e=n(JQ,"STRONG",{});var dFt=s(l0e);V9r=r(dFt,"not"),dFt.forEach(t),z9r=r(JQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),i0e=n(JQ,"CODE",{});var cFt=s(i0e);W9r=r(cFt,"from_pretrained()"),cFt.forEach(t),Q9r=r(JQ,"to load the model weights."),JQ.forEach(t),H9r=i(Ii),d0e=n(Ii,"P",{});var fFt=s(d0e);U9r=r(fFt,"Examples:"),fFt.forEach(t),J9r=i(Ii),m(HL.$$.fragment,Ii),Ii.forEach(t),Y9r=i($i),Io=n($i,"DIV",{class:!0});var qa=s(Io);m(UL.$$.fragment,qa),K9r=i(qa),c0e=n(qa,"P",{});var mFt=s(c0e);Z9r=r(mFt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),mFt.forEach(t),eBr=i(qa),On=n(qa,"P",{});var m4=s(On);oBr=r(m4,"The model class to instantiate is selected based on the "),f0e=n(m4,"CODE",{});var gFt=s(f0e);rBr=r(gFt,"model_type"),gFt.forEach(t),tBr=r(m4,` property of the config object (either
passed as an argument or loaded from `),m0e=n(m4,"CODE",{});var hFt=s(m0e);aBr=r(hFt,"pretrained_model_name_or_path"),hFt.forEach(t),nBr=r(m4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g0e=n(m4,"CODE",{});var pFt=s(g0e);sBr=r(pFt,"pretrained_model_name_or_path"),pFt.forEach(t),lBr=r(m4,":"),m4.forEach(t),iBr=i(qa),Pe=n(qa,"UL",{});var Vo=s(Pe);oM=n(Vo,"LI",{});var Tke=s(oM);h0e=n(Tke,"STRONG",{});var _Ft=s(h0e);dBr=r(_Ft,"albert"),_Ft.forEach(t),cBr=r(Tke," \u2014 "),Yz=n(Tke,"A",{href:!0});var uFt=s(Yz);fBr=r(uFt,"FlaxAlbertForMultipleChoice"),uFt.forEach(t),mBr=r(Tke," (ALBERT model)"),Tke.forEach(t),gBr=i(Vo),rM=n(Vo,"LI",{});var Fke=s(rM);p0e=n(Fke,"STRONG",{});var bFt=s(p0e);hBr=r(bFt,"bert"),bFt.forEach(t),pBr=r(Fke," \u2014 "),Kz=n(Fke,"A",{href:!0});var vFt=s(Kz);_Br=r(vFt,"FlaxBertForMultipleChoice"),vFt.forEach(t),uBr=r(Fke," (BERT model)"),Fke.forEach(t),bBr=i(Vo),tM=n(Vo,"LI",{});var Cke=s(tM);_0e=n(Cke,"STRONG",{});var TFt=s(_0e);vBr=r(TFt,"big_bird"),TFt.forEach(t),TBr=r(Cke," \u2014 "),Zz=n(Cke,"A",{href:!0});var FFt=s(Zz);FBr=r(FFt,"FlaxBigBirdForMultipleChoice"),FFt.forEach(t),CBr=r(Cke," (BigBird model)"),Cke.forEach(t),MBr=i(Vo),aM=n(Vo,"LI",{});var Mke=s(aM);u0e=n(Mke,"STRONG",{});var CFt=s(u0e);EBr=r(CFt,"distilbert"),CFt.forEach(t),yBr=r(Mke," \u2014 "),eW=n(Mke,"A",{href:!0});var MFt=s(eW);wBr=r(MFt,"FlaxDistilBertForMultipleChoice"),MFt.forEach(t),ABr=r(Mke," (DistilBERT model)"),Mke.forEach(t),LBr=i(Vo),nM=n(Vo,"LI",{});var Eke=s(nM);b0e=n(Eke,"STRONG",{});var EFt=s(b0e);BBr=r(EFt,"electra"),EFt.forEach(t),xBr=r(Eke," \u2014 "),oW=n(Eke,"A",{href:!0});var yFt=s(oW);kBr=r(yFt,"FlaxElectraForMultipleChoice"),yFt.forEach(t),RBr=r(Eke," (ELECTRA model)"),Eke.forEach(t),SBr=i(Vo),sM=n(Vo,"LI",{});var yke=s(sM);v0e=n(yke,"STRONG",{});var wFt=s(v0e);PBr=r(wFt,"roberta"),wFt.forEach(t),$Br=r(yke," \u2014 "),rW=n(yke,"A",{href:!0});var AFt=s(rW);IBr=r(AFt,"FlaxRobertaForMultipleChoice"),AFt.forEach(t),jBr=r(yke," (RoBERTa model)"),yke.forEach(t),NBr=i(Vo),lM=n(Vo,"LI",{});var wke=s(lM);T0e=n(wke,"STRONG",{});var LFt=s(T0e);DBr=r(LFt,"roformer"),LFt.forEach(t),qBr=r(wke," \u2014 "),tW=n(wke,"A",{href:!0});var BFt=s(tW);GBr=r(BFt,"FlaxRoFormerForMultipleChoice"),BFt.forEach(t),OBr=r(wke," (RoFormer model)"),wke.forEach(t),XBr=i(Vo),iM=n(Vo,"LI",{});var Ake=s(iM);F0e=n(Ake,"STRONG",{});var xFt=s(F0e);VBr=r(xFt,"xlm-roberta"),xFt.forEach(t),zBr=r(Ake," \u2014 "),aW=n(Ake,"A",{href:!0});var kFt=s(aW);WBr=r(kFt,"FlaxXLMRobertaForMultipleChoice"),kFt.forEach(t),QBr=r(Ake," (XLM-RoBERTa model)"),Ake.forEach(t),Vo.forEach(t),HBr=i(qa),C0e=n(qa,"P",{});var RFt=s(C0e);UBr=r(RFt,"Examples:"),RFt.forEach(t),JBr=i(qa),m(JL.$$.fragment,qa),qa.forEach(t),$i.forEach(t),BSe=i(d),If=n(d,"H2",{class:!0});var X$e=s(If);dM=n(X$e,"A",{id:!0,class:!0,href:!0});var SFt=s(dM);M0e=n(SFt,"SPAN",{});var PFt=s(M0e);m(YL.$$.fragment,PFt),PFt.forEach(t),SFt.forEach(t),YBr=i(X$e),E0e=n(X$e,"SPAN",{});var $Ft=s(E0e);KBr=r($Ft,"FlaxAutoModelForNextSentencePrediction"),$Ft.forEach(t),X$e.forEach(t),xSe=i(d),Xr=n(d,"DIV",{class:!0});var ji=s(Xr);m(KL.$$.fragment,ji),ZBr=i(ji),jf=n(ji,"P",{});var YQ=s(jf);exr=r(YQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),y0e=n(YQ,"CODE",{});var IFt=s(y0e);oxr=r(IFt,"from_pretrained()"),IFt.forEach(t),rxr=r(YQ,"class method or the "),w0e=n(YQ,"CODE",{});var jFt=s(w0e);txr=r(jFt,"from_config()"),jFt.forEach(t),axr=r(YQ,`class
method.`),YQ.forEach(t),nxr=i(ji),ZL=n(ji,"P",{});var V$e=s(ZL);sxr=r(V$e,"This class cannot be instantiated directly using "),A0e=n(V$e,"CODE",{});var NFt=s(A0e);lxr=r(NFt,"__init__()"),NFt.forEach(t),ixr=r(V$e," (throws an error)."),V$e.forEach(t),dxr=i(ji),Nt=n(ji,"DIV",{class:!0});var Ni=s(Nt);m(e7.$$.fragment,Ni),cxr=i(Ni),L0e=n(Ni,"P",{});var DFt=s(L0e);fxr=r(DFt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),DFt.forEach(t),mxr=i(Ni),Nf=n(Ni,"P",{});var KQ=s(Nf);gxr=r(KQ,`Note:
Loading a model from its configuration file does `),B0e=n(KQ,"STRONG",{});var qFt=s(B0e);hxr=r(qFt,"not"),qFt.forEach(t),pxr=r(KQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),x0e=n(KQ,"CODE",{});var GFt=s(x0e);_xr=r(GFt,"from_pretrained()"),GFt.forEach(t),uxr=r(KQ,"to load the model weights."),KQ.forEach(t),bxr=i(Ni),k0e=n(Ni,"P",{});var OFt=s(k0e);vxr=r(OFt,"Examples:"),OFt.forEach(t),Txr=i(Ni),m(o7.$$.fragment,Ni),Ni.forEach(t),Fxr=i(ji),jo=n(ji,"DIV",{class:!0});var Ga=s(jo);m(r7.$$.fragment,Ga),Cxr=i(Ga),R0e=n(Ga,"P",{});var XFt=s(R0e);Mxr=r(XFt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),XFt.forEach(t),Exr=i(Ga),Xn=n(Ga,"P",{});var g4=s(Xn);yxr=r(g4,"The model class to instantiate is selected based on the "),S0e=n(g4,"CODE",{});var VFt=s(S0e);wxr=r(VFt,"model_type"),VFt.forEach(t),Axr=r(g4,` property of the config object (either
passed as an argument or loaded from `),P0e=n(g4,"CODE",{});var zFt=s(P0e);Lxr=r(zFt,"pretrained_model_name_or_path"),zFt.forEach(t),Bxr=r(g4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$0e=n(g4,"CODE",{});var WFt=s($0e);xxr=r(WFt,"pretrained_model_name_or_path"),WFt.forEach(t),kxr=r(g4,":"),g4.forEach(t),Rxr=i(Ga),I0e=n(Ga,"UL",{});var QFt=s(I0e);cM=n(QFt,"LI",{});var Lke=s(cM);j0e=n(Lke,"STRONG",{});var HFt=s(j0e);Sxr=r(HFt,"bert"),HFt.forEach(t),Pxr=r(Lke," \u2014 "),nW=n(Lke,"A",{href:!0});var UFt=s(nW);$xr=r(UFt,"FlaxBertForNextSentencePrediction"),UFt.forEach(t),Ixr=r(Lke," (BERT model)"),Lke.forEach(t),QFt.forEach(t),jxr=i(Ga),N0e=n(Ga,"P",{});var JFt=s(N0e);Nxr=r(JFt,"Examples:"),JFt.forEach(t),Dxr=i(Ga),m(t7.$$.fragment,Ga),Ga.forEach(t),ji.forEach(t),kSe=i(d),Df=n(d,"H2",{class:!0});var z$e=s(Df);fM=n(z$e,"A",{id:!0,class:!0,href:!0});var YFt=s(fM);D0e=n(YFt,"SPAN",{});var KFt=s(D0e);m(a7.$$.fragment,KFt),KFt.forEach(t),YFt.forEach(t),qxr=i(z$e),q0e=n(z$e,"SPAN",{});var ZFt=s(q0e);Gxr=r(ZFt,"FlaxAutoModelForImageClassification"),ZFt.forEach(t),z$e.forEach(t),RSe=i(d),Vr=n(d,"DIV",{class:!0});var Di=s(Vr);m(n7.$$.fragment,Di),Oxr=i(Di),qf=n(Di,"P",{});var ZQ=s(qf);Xxr=r(ZQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),G0e=n(ZQ,"CODE",{});var eCt=s(G0e);Vxr=r(eCt,"from_pretrained()"),eCt.forEach(t),zxr=r(ZQ,"class method or the "),O0e=n(ZQ,"CODE",{});var oCt=s(O0e);Wxr=r(oCt,"from_config()"),oCt.forEach(t),Qxr=r(ZQ,`class
method.`),ZQ.forEach(t),Hxr=i(Di),s7=n(Di,"P",{});var W$e=s(s7);Uxr=r(W$e,"This class cannot be instantiated directly using "),X0e=n(W$e,"CODE",{});var rCt=s(X0e);Jxr=r(rCt,"__init__()"),rCt.forEach(t),Yxr=r(W$e," (throws an error)."),W$e.forEach(t),Kxr=i(Di),Dt=n(Di,"DIV",{class:!0});var qi=s(Dt);m(l7.$$.fragment,qi),Zxr=i(qi),V0e=n(qi,"P",{});var tCt=s(V0e);ekr=r(tCt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),tCt.forEach(t),okr=i(qi),Gf=n(qi,"P",{});var eH=s(Gf);rkr=r(eH,`Note:
Loading a model from its configuration file does `),z0e=n(eH,"STRONG",{});var aCt=s(z0e);tkr=r(aCt,"not"),aCt.forEach(t),akr=r(eH,` load the model weights. It only affects the
model\u2019s configuration. Use `),W0e=n(eH,"CODE",{});var nCt=s(W0e);nkr=r(nCt,"from_pretrained()"),nCt.forEach(t),skr=r(eH,"to load the model weights."),eH.forEach(t),lkr=i(qi),Q0e=n(qi,"P",{});var sCt=s(Q0e);ikr=r(sCt,"Examples:"),sCt.forEach(t),dkr=i(qi),m(i7.$$.fragment,qi),qi.forEach(t),ckr=i(Di),No=n(Di,"DIV",{class:!0});var Oa=s(No);m(d7.$$.fragment,Oa),fkr=i(Oa),H0e=n(Oa,"P",{});var lCt=s(H0e);mkr=r(lCt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),lCt.forEach(t),gkr=i(Oa),Vn=n(Oa,"P",{});var h4=s(Vn);hkr=r(h4,"The model class to instantiate is selected based on the "),U0e=n(h4,"CODE",{});var iCt=s(U0e);pkr=r(iCt,"model_type"),iCt.forEach(t),_kr=r(h4,` property of the config object (either
passed as an argument or loaded from `),J0e=n(h4,"CODE",{});var dCt=s(J0e);ukr=r(dCt,"pretrained_model_name_or_path"),dCt.forEach(t),bkr=r(h4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y0e=n(h4,"CODE",{});var cCt=s(Y0e);vkr=r(cCt,"pretrained_model_name_or_path"),cCt.forEach(t),Tkr=r(h4,":"),h4.forEach(t),Fkr=i(Oa),c7=n(Oa,"UL",{});var Q$e=s(c7);mM=n(Q$e,"LI",{});var Bke=s(mM);K0e=n(Bke,"STRONG",{});var fCt=s(K0e);Ckr=r(fCt,"beit"),fCt.forEach(t),Mkr=r(Bke," \u2014 "),sW=n(Bke,"A",{href:!0});var mCt=s(sW);Ekr=r(mCt,"FlaxBeitForImageClassification"),mCt.forEach(t),ykr=r(Bke," (BEiT model)"),Bke.forEach(t),wkr=i(Q$e),gM=n(Q$e,"LI",{});var xke=s(gM);Z0e=n(xke,"STRONG",{});var gCt=s(Z0e);Akr=r(gCt,"vit"),gCt.forEach(t),Lkr=r(xke," \u2014 "),lW=n(xke,"A",{href:!0});var hCt=s(lW);Bkr=r(hCt,"FlaxViTForImageClassification"),hCt.forEach(t),xkr=r(xke," (ViT model)"),xke.forEach(t),Q$e.forEach(t),kkr=i(Oa),eTe=n(Oa,"P",{});var pCt=s(eTe);Rkr=r(pCt,"Examples:"),pCt.forEach(t),Skr=i(Oa),m(f7.$$.fragment,Oa),Oa.forEach(t),Di.forEach(t),SSe=i(d),Of=n(d,"H2",{class:!0});var H$e=s(Of);hM=n(H$e,"A",{id:!0,class:!0,href:!0});var _Ct=s(hM);oTe=n(_Ct,"SPAN",{});var uCt=s(oTe);m(m7.$$.fragment,uCt),uCt.forEach(t),_Ct.forEach(t),Pkr=i(H$e),rTe=n(H$e,"SPAN",{});var bCt=s(rTe);$kr=r(bCt,"FlaxAutoModelForVision2Seq"),bCt.forEach(t),H$e.forEach(t),PSe=i(d),zr=n(d,"DIV",{class:!0});var Gi=s(zr);m(g7.$$.fragment,Gi),Ikr=i(Gi),Xf=n(Gi,"P",{});var oH=s(Xf);jkr=r(oH,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),tTe=n(oH,"CODE",{});var vCt=s(tTe);Nkr=r(vCt,"from_pretrained()"),vCt.forEach(t),Dkr=r(oH,"class method or the "),aTe=n(oH,"CODE",{});var TCt=s(aTe);qkr=r(TCt,"from_config()"),TCt.forEach(t),Gkr=r(oH,`class
method.`),oH.forEach(t),Okr=i(Gi),h7=n(Gi,"P",{});var U$e=s(h7);Xkr=r(U$e,"This class cannot be instantiated directly using "),nTe=n(U$e,"CODE",{});var FCt=s(nTe);Vkr=r(FCt,"__init__()"),FCt.forEach(t),zkr=r(U$e," (throws an error)."),U$e.forEach(t),Wkr=i(Gi),qt=n(Gi,"DIV",{class:!0});var Oi=s(qt);m(p7.$$.fragment,Oi),Qkr=i(Oi),sTe=n(Oi,"P",{});var CCt=s(sTe);Hkr=r(CCt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),CCt.forEach(t),Ukr=i(Oi),Vf=n(Oi,"P",{});var rH=s(Vf);Jkr=r(rH,`Note:
Loading a model from its configuration file does `),lTe=n(rH,"STRONG",{});var MCt=s(lTe);Ykr=r(MCt,"not"),MCt.forEach(t),Kkr=r(rH,` load the model weights. It only affects the
model\u2019s configuration. Use `),iTe=n(rH,"CODE",{});var ECt=s(iTe);Zkr=r(ECt,"from_pretrained()"),ECt.forEach(t),eRr=r(rH,"to load the model weights."),rH.forEach(t),oRr=i(Oi),dTe=n(Oi,"P",{});var yCt=s(dTe);rRr=r(yCt,"Examples:"),yCt.forEach(t),tRr=i(Oi),m(_7.$$.fragment,Oi),Oi.forEach(t),aRr=i(Gi),Do=n(Gi,"DIV",{class:!0});var Xa=s(Do);m(u7.$$.fragment,Xa),nRr=i(Xa),cTe=n(Xa,"P",{});var wCt=s(cTe);sRr=r(wCt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),wCt.forEach(t),lRr=i(Xa),zn=n(Xa,"P",{});var p4=s(zn);iRr=r(p4,"The model class to instantiate is selected based on the "),fTe=n(p4,"CODE",{});var ACt=s(fTe);dRr=r(ACt,"model_type"),ACt.forEach(t),cRr=r(p4,` property of the config object (either
passed as an argument or loaded from `),mTe=n(p4,"CODE",{});var LCt=s(mTe);fRr=r(LCt,"pretrained_model_name_or_path"),LCt.forEach(t),mRr=r(p4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gTe=n(p4,"CODE",{});var BCt=s(gTe);gRr=r(BCt,"pretrained_model_name_or_path"),BCt.forEach(t),hRr=r(p4,":"),p4.forEach(t),pRr=i(Xa),hTe=n(Xa,"UL",{});var xCt=s(hTe);pM=n(xCt,"LI",{});var kke=s(pM);pTe=n(kke,"STRONG",{});var kCt=s(pTe);_Rr=r(kCt,"vision-encoder-decoder"),kCt.forEach(t),uRr=r(kke," \u2014 "),iW=n(kke,"A",{href:!0});var RCt=s(iW);bRr=r(RCt,"FlaxVisionEncoderDecoderModel"),RCt.forEach(t),vRr=r(kke," (Vision Encoder decoder model)"),kke.forEach(t),xCt.forEach(t),TRr=i(Xa),_Te=n(Xa,"P",{});var SCt=s(_Te);FRr=r(SCt,"Examples:"),SCt.forEach(t),CRr=i(Xa),m(b7.$$.fragment,Xa),Xa.forEach(t),Gi.forEach(t),this.h()},h(){c(J,"name","hf:doc:metadata"),c(J,"content",JSON.stringify(OCt)),c(pe,"id","auto-classes"),c(pe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pe,"href","#auto-classes"),c(de,"class","relative group"),c(Wn,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.AutoConfig"),c(Hn,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.AutoModel"),c(Un,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.AutoTokenizer"),c(Ji,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertModel"),c(Jf,"id","extending-the-auto-classes"),c(Jf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Jf,"href","#extending-the-auto-classes"),c(Yi,"class","relative group"),c(Kf,"id","transformers.AutoConfig"),c(Kf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Kf,"href","#transformers.AutoConfig"),c(Ki,"class","relative group"),c(C9,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(M9,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig"),c(E9,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig"),c(y9,"href","/docs/transformers/pr_16058/en/model_doc/beit#transformers.BeitConfig"),c(w9,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig"),c(A9,"href","/docs/transformers/pr_16058/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(L9,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig"),c(B9,"href","/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(x9,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(k9,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(R9,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig"),c(S9,"href","/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineConfig"),c(P9,"href","/docs/transformers/pr_16058/en/model_doc/clip#transformers.CLIPConfig"),c($9,"href","/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertConfig"),c(I9,"href","/docs/transformers/pr_16058/en/model_doc/convnext#transformers.ConvNextConfig"),c(j9,"href","/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLConfig"),c(N9,"href","/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(D9,"href","/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(q9,"href","/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaConfig"),c(G9,"href","/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(O9,"href","/docs/transformers/pr_16058/en/model_doc/deit#transformers.DeiTConfig"),c(X9,"href","/docs/transformers/pr_16058/en/model_doc/detr#transformers.DetrConfig"),c(V9,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig"),c(z9,"href","/docs/transformers/pr_16058/en/model_doc/dpr#transformers.DPRConfig"),c(W9,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig"),c(Q9,"href","/docs/transformers/pr_16058/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(H9,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertConfig"),c(U9,"href","/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetConfig"),c(J9,"href","/docs/transformers/pr_16058/en/model_doc/fsmt#transformers.FSMTConfig"),c(Y9,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelConfig"),c(K9,"href","/docs/transformers/pr_16058/en/model_doc/glpn#transformers.GLPNConfig"),c(Z9,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Config"),c(eB,"href","/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(oB,"href","/docs/transformers/pr_16058/en/model_doc/gptj#transformers.GPTJConfig"),c(rB,"href","/docs/transformers/pr_16058/en/model_doc/hubert#transformers.HubertConfig"),c(tB,"href","/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertConfig"),c(aB,"href","/docs/transformers/pr_16058/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(nB,"href","/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(sB,"href","/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(lB,"href","/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDConfig"),c(iB,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerConfig"),c(dB,"href","/docs/transformers/pr_16058/en/model_doc/luke#transformers.LukeConfig"),c(cB,"href","/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.LxmertConfig"),c(fB,"href","/docs/transformers/pr_16058/en/model_doc/m2m_100#transformers.M2M100Config"),c(mB,"href","/docs/transformers/pr_16058/en/model_doc/marian#transformers.MarianConfig"),c(gB,"href","/docs/transformers/pr_16058/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(hB,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartConfig"),c(pB,"href","/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(_B,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(uB,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetConfig"),c(bB,"href","/docs/transformers/pr_16058/en/model_doc/mt5#transformers.MT5Config"),c(vB,"href","/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(TB,"href","/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(FB,"href","/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusConfig"),c(CB,"href","/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverConfig"),c(MB,"href","/docs/transformers/pr_16058/en/model_doc/plbart#transformers.PLBartConfig"),c(EB,"href","/docs/transformers/pr_16058/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(yB,"href","/docs/transformers/pr_16058/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(wB,"href","/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(AB,"href","/docs/transformers/pr_16058/en/model_doc/rag#transformers.RagConfig"),c(LB,"href","/docs/transformers/pr_16058/en/model_doc/realm#transformers.RealmConfig"),c(BB,"href","/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerConfig"),c(xB,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertConfig"),c(kB,"href","/docs/transformers/pr_16058/en/model_doc/resnet#transformers.ResNetConfig"),c(RB,"href","/docs/transformers/pr_16058/en/model_doc/retribert#transformers.RetriBertConfig"),c(SB,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig"),c(PB,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig"),c($B,"href","/docs/transformers/pr_16058/en/model_doc/segformer#transformers.SegformerConfig"),c(IB,"href","/docs/transformers/pr_16058/en/model_doc/sew#transformers.SEWConfig"),c(jB,"href","/docs/transformers/pr_16058/en/model_doc/sew-d#transformers.SEWDConfig"),c(NB,"href","/docs/transformers/pr_16058/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(DB,"href","/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(qB,"href","/docs/transformers/pr_16058/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(GB,"href","/docs/transformers/pr_16058/en/model_doc/splinter#transformers.SplinterConfig"),c(OB,"href","/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(XB,"href","/docs/transformers/pr_16058/en/model_doc/swin#transformers.SwinConfig"),c(VB,"href","/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5Config"),c(zB,"href","/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasConfig"),c(WB,"href","/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(QB,"href","/docs/transformers/pr_16058/en/model_doc/trocr#transformers.TrOCRConfig"),c(HB,"href","/docs/transformers/pr_16058/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(UB,"href","/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(JB,"href","/docs/transformers/pr_16058/en/model_doc/van#transformers.VanConfig"),c(YB,"href","/docs/transformers/pr_16058/en/model_doc/vilt#transformers.ViltConfig"),c(KB,"href","/docs/transformers/pr_16058/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(ZB,"href","/docs/transformers/pr_16058/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(ex,"href","/docs/transformers/pr_16058/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(ox,"href","/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTConfig"),c(rx,"href","/docs/transformers/pr_16058/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(tx,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(ax,"href","/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMConfig"),c(nx,"href","/docs/transformers/pr_16058/en/model_doc/xglm#transformers.XGLMConfig"),c(sx,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig"),c(lx,"href","/docs/transformers/pr_16058/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(ix,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(dx,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(cx,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetConfig"),c(fx,"href","/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoConfig"),c(mo,"class","docstring"),c(Og,"class","docstring"),c(Qo,"class","docstring"),c(Xg,"id","transformers.AutoTokenizer"),c(Xg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Xg,"href","#transformers.AutoTokenizer"),c(ed,"class","relative group"),c(mx,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(gx,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertTokenizer"),c(hx,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(px,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartTokenizer"),c(_x,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartTokenizerFast"),c(ux,"href","/docs/transformers/pr_16058/en/model_doc/barthez#transformers.BarthezTokenizer"),c(bx,"href","/docs/transformers/pr_16058/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(vx,"href","/docs/transformers/pr_16058/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(Tx,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertTokenizer"),c(Fx,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertTokenizerFast"),c(Cx,"href","/docs/transformers/pr_16058/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(Mx,"href","/docs/transformers/pr_16058/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(Ex,"href","/docs/transformers/pr_16058/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(yx,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(wx,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(Ax,"href","/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(Lx,"href","/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(Bx,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(xx,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(kx,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(Rx,"href","/docs/transformers/pr_16058/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(Sx,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertTokenizer"),c(Px,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c($x,"href","/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineTokenizer"),c(Ix,"href","/docs/transformers/pr_16058/en/model_doc/clip#transformers.CLIPTokenizer"),c(jx,"href","/docs/transformers/pr_16058/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(Nx,"href","/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(Dx,"href","/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(qx,"href","/docs/transformers/pr_16058/en/model_doc/cpm#transformers.CpmTokenizer"),c(Gx,"href","/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(Ox,"href","/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaTokenizer"),c(Xx,"href","/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(Vx,"href","/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(zx,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(Wx,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(Qx,"href","/docs/transformers/pr_16058/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(Hx,"href","/docs/transformers/pr_16058/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(Ux,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraTokenizer"),c(Jx,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(Yx,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(Kx,"href","/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetTokenizer"),c(Zx,"href","/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(ek,"href","/docs/transformers/pr_16058/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(ok,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelTokenizer"),c(rk,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(tk,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(ak,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(nk,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(sk,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(lk,"href","/docs/transformers/pr_16058/en/model_doc/herbert#transformers.HerbertTokenizer"),c(ik,"href","/docs/transformers/pr_16058/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(dk,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(ck,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaTokenizer"),c(fk,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(mk,"href","/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(gk,"href","/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(hk,"href","/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(pk,"href","/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(_k,"href","/docs/transformers/pr_16058/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(uk,"href","/docs/transformers/pr_16058/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(bk,"href","/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDTokenizer"),c(vk,"href","/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDTokenizerFast"),c(Tk,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerTokenizer"),c(Fk,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(Ck,"href","/docs/transformers/pr_16058/en/model_doc/luke#transformers.LukeTokenizer"),c(Mk,"href","/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(Ek,"href","/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(yk,"href","/docs/transformers/pr_16058/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(wk,"href","/docs/transformers/pr_16058/en/model_doc/marian#transformers.MarianTokenizer"),c(Ak,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartTokenizer"),c(Lk,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(Bk,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(xk,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(kk,"href","/docs/transformers/pr_16058/en/model_doc/mluke#transformers.MLukeTokenizer"),c(Rk,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(Sk,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(Pk,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetTokenizer"),c($k,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(Ik,"href","/docs/transformers/pr_16058/en/model_doc/mt5#transformers.T5Tokenizer"),c(jk,"href","/docs/transformers/pr_16058/en/model_doc/mt5#transformers.T5TokenizerFast"),c(Nk,"href","/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(Dk,"href","/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(qk,"href","/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(Gk,"href","/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(Ok,"href","/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(Xk,"href","/docs/transformers/pr_16058/en/model_doc/phobert#transformers.PhobertTokenizer"),c(Vk,"href","/docs/transformers/pr_16058/en/model_doc/plbart#transformers.PLBartTokenizer"),c(zk,"href","/docs/transformers/pr_16058/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(Wk,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertTokenizer"),c(Qk,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertTokenizerFast"),c(Hk,"href","/docs/transformers/pr_16058/en/model_doc/rag#transformers.RagTokenizer"),c(Uk,"href","/docs/transformers/pr_16058/en/model_doc/realm#transformers.RealmTokenizer"),c(Jk,"href","/docs/transformers/pr_16058/en/model_doc/realm#transformers.RealmTokenizerFast"),c(Yk,"href","/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerTokenizer"),c(Kk,"href","/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(Zk,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertTokenizer"),c(eR,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(oR,"href","/docs/transformers/pr_16058/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(rR,"href","/docs/transformers/pr_16058/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(tR,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaTokenizer"),c(aR,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(nR,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(sR,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(lR,"href","/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(iR,"href","/docs/transformers/pr_16058/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(dR,"href","/docs/transformers/pr_16058/en/model_doc/splinter#transformers.SplinterTokenizer"),c(cR,"href","/docs/transformers/pr_16058/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(fR,"href","/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(mR,"href","/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(gR,"href","/docs/transformers/pr_16058/en/model_doc/mt5#transformers.T5Tokenizer"),c(hR,"href","/docs/transformers/pr_16058/en/model_doc/mt5#transformers.T5TokenizerFast"),c(pR,"href","/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasTokenizer"),c(_R,"href","/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(uR,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(bR,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(vR,"href","/docs/transformers/pr_16058/en/model_doc/xglm#transformers.XGLMTokenizer"),c(TR,"href","/docs/transformers/pr_16058/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(FR,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMTokenizer"),c(CR,"href","/docs/transformers/pr_16058/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(MR,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(ER,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(yR,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(wR,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(go,"class","docstring"),c(vh,"class","docstring"),c(Ho,"class","docstring"),c(Th,"id","transformers.AutoFeatureExtractor"),c(Th,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Th,"href","#transformers.AutoFeatureExtractor"),c(od,"class","relative group"),c(AR,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(LR,"href","/docs/transformers/pr_16058/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(BR,"href","/docs/transformers/pr_16058/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(xR,"href","/docs/transformers/pr_16058/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(kR,"href","/docs/transformers/pr_16058/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(RR,"href","/docs/transformers/pr_16058/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(SR,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(PR,"href","/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c($R,"href","/docs/transformers/pr_16058/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(IR,"href","/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(jR,"href","/docs/transformers/pr_16058/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(NR,"href","/docs/transformers/pr_16058/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(DR,"href","/docs/transformers/pr_16058/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(qR,"href","/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(GR,"href","/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(OR,"href","/docs/transformers/pr_16058/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(XR,"href","/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(VR,"href","/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(zR,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Ie,"class","docstring"),c(qh,"class","docstring"),c(Uo,"class","docstring"),c(Gh,"id","transformers.AutoProcessor"),c(Gh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gh,"href","#transformers.AutoProcessor"),c(rd,"class","relative group"),c(WR,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(QR,"href","/docs/transformers/pr_16058/en/model_doc/clip#transformers.CLIPProcessor"),c(HR,"href","/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(UR,"href","/docs/transformers/pr_16058/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(JR,"href","/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(YR,"href","/docs/transformers/pr_16058/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(KR,"href","/docs/transformers/pr_16058/en/model_doc/trocr#transformers.TrOCRProcessor"),c(ZR,"href","/docs/transformers/pr_16058/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(eS,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(je,"class","docstring"),c(Yh,"class","docstring"),c(Jo,"class","docstring"),c(Kh,"id","transformers.AutoModel"),c(Kh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Kh,"href","#transformers.AutoModel"),c(ad,"class","relative group"),c(Wr,"class","docstring"),c(oS,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertModel"),c(rS,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartModel"),c(tS,"href","/docs/transformers/pr_16058/en/model_doc/beit#transformers.BeitModel"),c(aS,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertModel"),c(nS,"href","/docs/transformers/pr_16058/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(sS,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdModel"),c(lS,"href","/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(iS,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(dS,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(cS,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertModel"),c(fS,"href","/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineModel"),c(mS,"href","/docs/transformers/pr_16058/en/model_doc/clip#transformers.CLIPModel"),c(gS,"href","/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertModel"),c(hS,"href","/docs/transformers/pr_16058/en/model_doc/convnext#transformers.ConvNextModel"),c(pS,"href","/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLModel"),c(_S,"href","/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(uS,"href","/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(bS,"href","/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaModel"),c(vS,"href","/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(TS,"href","/docs/transformers/pr_16058/en/model_doc/deit#transformers.DeiTModel"),c(FS,"href","/docs/transformers/pr_16058/en/model_doc/detr#transformers.DetrModel"),c(CS,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertModel"),c(MS,"href","/docs/transformers/pr_16058/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(ES,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraModel"),c(yS,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertModel"),c(wS,"href","/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetModel"),c(AS,"href","/docs/transformers/pr_16058/en/model_doc/fsmt#transformers.FSMTModel"),c(LS,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelModel"),c(BS,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelBaseModel"),c(xS,"href","/docs/transformers/pr_16058/en/model_doc/glpn#transformers.GLPNModel"),c(kS,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Model"),c(RS,"href","/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(SS,"href","/docs/transformers/pr_16058/en/model_doc/gptj#transformers.GPTJModel"),c(PS,"href","/docs/transformers/pr_16058/en/model_doc/hubert#transformers.HubertModel"),c($S,"href","/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertModel"),c(IS,"href","/docs/transformers/pr_16058/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(jS,"href","/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(NS,"href","/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(DS,"href","/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDModel"),c(qS,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerModel"),c(GS,"href","/docs/transformers/pr_16058/en/model_doc/luke#transformers.LukeModel"),c(OS,"href","/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.LxmertModel"),c(XS,"href","/docs/transformers/pr_16058/en/model_doc/m2m_100#transformers.M2M100Model"),c(VS,"href","/docs/transformers/pr_16058/en/model_doc/marian#transformers.MarianModel"),c(zS,"href","/docs/transformers/pr_16058/en/model_doc/maskformer#transformers.MaskFormerModel"),c(WS,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartModel"),c(QS,"href","/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(HS,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertModel"),c(US,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetModel"),c(JS,"href","/docs/transformers/pr_16058/en/model_doc/mt5#transformers.MT5Model"),c(YS,"href","/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerModel"),c(KS,"href","/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(ZS,"href","/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusModel"),c(eP,"href","/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverModel"),c(oP,"href","/docs/transformers/pr_16058/en/model_doc/plbart#transformers.PLBartModel"),c(rP,"href","/docs/transformers/pr_16058/en/model_doc/poolformer#transformers.PoolFormerModel"),c(tP,"href","/docs/transformers/pr_16058/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(aP,"href","/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertModel"),c(nP,"href","/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerModel"),c(sP,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertModel"),c(lP,"href","/docs/transformers/pr_16058/en/model_doc/resnet#transformers.ResNetModel"),c(iP,"href","/docs/transformers/pr_16058/en/model_doc/retribert#transformers.RetriBertModel"),c(dP,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaModel"),c(cP,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerModel"),c(fP,"href","/docs/transformers/pr_16058/en/model_doc/segformer#transformers.SegformerModel"),c(mP,"href","/docs/transformers/pr_16058/en/model_doc/sew#transformers.SEWModel"),c(gP,"href","/docs/transformers/pr_16058/en/model_doc/sew-d#transformers.SEWDModel"),c(hP,"href","/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(pP,"href","/docs/transformers/pr_16058/en/model_doc/splinter#transformers.SplinterModel"),c(_P,"href","/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(uP,"href","/docs/transformers/pr_16058/en/model_doc/swin#transformers.SwinModel"),c(bP,"href","/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5Model"),c(vP,"href","/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasModel"),c(TP,"href","/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(FP,"href","/docs/transformers/pr_16058/en/model_doc/unispeech#transformers.UniSpeechModel"),c(CP,"href","/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(MP,"href","/docs/transformers/pr_16058/en/model_doc/van#transformers.VanModel"),c(EP,"href","/docs/transformers/pr_16058/en/model_doc/vilt#transformers.ViltModel"),c(yP,"href","/docs/transformers/pr_16058/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(wP,"href","/docs/transformers/pr_16058/en/model_doc/visual_bert#transformers.VisualBertModel"),c(AP,"href","/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTModel"),c(LP,"href","/docs/transformers/pr_16058/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(BP,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(xP,"href","/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMModel"),c(kP,"href","/docs/transformers/pr_16058/en/model_doc/xglm#transformers.XGLMModel"),c(RP,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMModel"),c(SP,"href","/docs/transformers/pr_16058/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(PP,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c($P,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(IP,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetModel"),c(jP,"href","/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoModel"),c(Ne,"class","docstring"),c(Yo,"class","docstring"),c($_,"id","transformers.AutoModelForPreTraining"),c($_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($_,"href","#transformers.AutoModelForPreTraining"),c(ld,"class","relative group"),c(Qr,"class","docstring"),c(NP,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertForPreTraining"),c(DP,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(qP,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertForPreTraining"),c(GP,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(OP,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(XP,"href","/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(VP,"href","/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(zP,"href","/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(WP,"href","/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(QP,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(HP,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraForPreTraining"),c(UP,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(JP,"href","/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetForPreTraining"),c(YP,"href","/docs/transformers/pr_16058/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(KP,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(ZP,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(e$,"href","/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(o$,"href","/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(r$,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(t$,"href","/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(a$,"href","/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(n$,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(s$,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(l$,"href","/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(i$,"href","/docs/transformers/pr_16058/en/model_doc/retribert#transformers.RetriBertModel"),c(d$,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(c$,"href","/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(f$,"href","/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(m$,"href","/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(g$,"href","/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(h$,"href","/docs/transformers/pr_16058/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(p$,"href","/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(_$,"href","/docs/transformers/pr_16058/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(u$,"href","/docs/transformers/pr_16058/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(b$,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(v$,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(T$,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(F$,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(C$,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(De,"class","docstring"),c(Ko,"class","docstring"),c(Cu,"id","transformers.AutoModelForCausalLM"),c(Cu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Cu,"href","#transformers.AutoModelForCausalLM"),c(cd,"class","relative group"),c(Hr,"class","docstring"),c(M$,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartForCausalLM"),c(E$,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertLMHeadModel"),c(y$,"href","/docs/transformers/pr_16058/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(w$,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(A$,"href","/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(L$,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(B$,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(x$,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(k$,"href","/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(R$,"href","/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(S$,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraForCausalLM"),c(P$,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c($$,"href","/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(I$,"href","/docs/transformers/pr_16058/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(j$,"href","/docs/transformers/pr_16058/en/model_doc/marian#transformers.MarianForCausalLM"),c(N$,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartForCausalLM"),c(D$,"href","/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(q$,"href","/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(G$,"href","/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(O$,"href","/docs/transformers/pr_16058/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(X$,"href","/docs/transformers/pr_16058/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(V$,"href","/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(z$,"href","/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(W$,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(Q$,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(H$,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(U$,"href","/docs/transformers/pr_16058/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(J$,"href","/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(Y$,"href","/docs/transformers/pr_16058/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(K$,"href","/docs/transformers/pr_16058/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(Z$,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(eI,"href","/docs/transformers/pr_16058/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(oI,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(rI,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(tI,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(qe,"class","docstring"),c(Zo,"class","docstring"),c(n1,"id","transformers.AutoModelForMaskedLM"),c(n1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n1,"href","#transformers.AutoModelForMaskedLM"),c(gd,"class","relative group"),c(Ur,"class","docstring"),c(aI,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(nI,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(sI,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertForMaskedLM"),c(lI,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(iI,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(dI,"href","/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(cI,"href","/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(fI,"href","/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(mI,"href","/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(gI,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(hI,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(pI,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(_I,"href","/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(uI,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(bI,"href","/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(vI,"href","/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(TI,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(FI,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(CI,"href","/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(MI,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(EI,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(yI,"href","/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(wI,"href","/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(AI,"href","/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(LI,"href","/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(BI,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(xI,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(kI,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(RI,"href","/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(SI,"href","/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(PI,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c($I,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(II,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(jI,"href","/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ge,"class","docstring"),c(er,"class","docstring"),c(O1,"id","transformers.AutoModelForSeq2SeqLM"),c(O1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O1,"href","#transformers.AutoModelForSeq2SeqLM"),c(_d,"class","relative group"),c(Jr,"class","docstring"),c(NI,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(DI,"href","/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(qI,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(GI,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(OI,"href","/docs/transformers/pr_16058/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(XI,"href","/docs/transformers/pr_16058/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(VI,"href","/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(zI,"href","/docs/transformers/pr_16058/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(WI,"href","/docs/transformers/pr_16058/en/model_doc/marian#transformers.MarianMTModel"),c(QI,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(HI,"href","/docs/transformers/pr_16058/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(UI,"href","/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(JI,"href","/docs/transformers/pr_16058/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(YI,"href","/docs/transformers/pr_16058/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(KI,"href","/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(ZI,"href","/docs/transformers/pr_16058/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Oe,"class","docstring"),c(or,"class","docstring"),c(sb,"id","transformers.AutoModelForSequenceClassification"),c(sb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sb,"href","#transformers.AutoModelForSequenceClassification"),c(vd,"class","relative group"),c(Yr,"class","docstring"),c(ej,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(oj,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartForSequenceClassification"),c(rj,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertForSequenceClassification"),c(tj,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(aj,"href","/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(nj,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(sj,"href","/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(lj,"href","/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(ij,"href","/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(dj,"href","/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(cj,"href","/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(fj,"href","/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(mj,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(gj,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(hj,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(pj,"href","/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(_j,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(uj,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(bj,"href","/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(vj,"href","/docs/transformers/pr_16058/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(Tj,"href","/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(Fj,"href","/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(Cj,"href","/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(Mj,"href","/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDForSequenceClassification"),c(Ej,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(yj,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(wj,"href","/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(Aj,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(Lj,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(Bj,"href","/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(xj,"href","/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(kj,"href","/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(Rj,"href","/docs/transformers/pr_16058/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(Sj,"href","/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(Pj,"href","/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c($j,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(Ij,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(jj,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(Nj,"href","/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(Dj,"href","/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(qj,"href","/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(Gj,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(Oj,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(Xj,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(Vj,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(zj,"href","/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(Xe,"class","docstring"),c(rr,"class","docstring"),c(e5,"id","transformers.AutoModelForMultipleChoice"),c(e5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e5,"href","#transformers.AutoModelForMultipleChoice"),c(Cd,"class","relative group"),c(Kr,"class","docstring"),c(Wj,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(Qj,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertForMultipleChoice"),c(Hj,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(Uj,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(Jj,"href","/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(Yj,"href","/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(Kj,"href","/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(Zj,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(eN,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(oN,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(rN,"href","/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(tN,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(aN,"href","/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(nN,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(sN,"href","/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(lN,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(iN,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(dN,"href","/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(cN,"href","/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(fN,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(mN,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(gN,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(hN,"href","/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(pN,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(_N,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(uN,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(bN,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(vN,"href","/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(Ve,"class","docstring"),c(tr,"class","docstring"),c(x5,"id","transformers.AutoModelForNextSentencePrediction"),c(x5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x5,"href","#transformers.AutoModelForNextSentencePrediction"),c(yd,"class","relative group"),c(Zr,"class","docstring"),c(TN,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(FN,"href","/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(CN,"href","/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(MN,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(EN,"href","/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(ze,"class","docstring"),c(ar,"class","docstring"),c(j5,"id","transformers.AutoModelForTokenClassification"),c(j5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j5,"href","#transformers.AutoModelForTokenClassification"),c(Ld,"class","relative group"),c(et,"class","docstring"),c(yN,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(wN,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertForTokenClassification"),c(AN,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(LN,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(BN,"href","/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineForTokenClassification"),c(xN,"href","/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(kN,"href","/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(RN,"href","/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(SN,"href","/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(PN,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c($N,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(IN,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(jN,"href","/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(NN,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(DN,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(qN,"href","/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(GN,"href","/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(ON,"href","/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(XN,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(VN,"href","/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(zN,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(WN,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(QN,"href","/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(HN,"href","/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(UN,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(JN,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(YN,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(KN,"href","/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(ZN,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(eD,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(oD,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(rD,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(tD,"href","/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(We,"class","docstring"),c(nr,"class","docstring"),c(b2,"id","transformers.AutoModelForQuestionAnswering"),c(b2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b2,"href","#transformers.AutoModelForQuestionAnswering"),c(kd,"class","relative group"),c(ot,"class","docstring"),c(aD,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(nD,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(sD,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(lD,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(iD,"href","/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(dD,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(cD,"href","/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(fD,"href","/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(mD,"href","/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(gD,"href","/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(hD,"href","/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(pD,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(_D,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(uD,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(bD,"href","/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(vD,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(TD,"href","/docs/transformers/pr_16058/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(FD,"href","/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(CD,"href","/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(MD,"href","/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(ED,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(yD,"href","/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(wD,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(AD,"href","/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(LD,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(BD,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(xD,"href","/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(kD,"href","/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(RD,"href","/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(SD,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(PD,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c($D,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(ID,"href","/docs/transformers/pr_16058/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(jD,"href","/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(ND,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(DD,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(qD,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(GD,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(OD,"href","/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(Qe,"class","docstring"),c(sr,"class","docstring"),c(nv,"id","transformers.AutoModelForTableQuestionAnswering"),c(nv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nv,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Pd,"class","relative group"),c(rt,"class","docstring"),c(XD,"href","/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(He,"class","docstring"),c(lr,"class","docstring"),c(iv,"id","transformers.AutoModelForImageClassification"),c(iv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iv,"href","#transformers.AutoModelForImageClassification"),c(jd,"class","relative group"),c(tt,"class","docstring"),c(VD,"href","/docs/transformers/pr_16058/en/model_doc/beit#transformers.BeitForImageClassification"),c(zD,"href","/docs/transformers/pr_16058/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(WD,"href","/docs/transformers/pr_16058/en/model_doc/deit#transformers.DeiTForImageClassification"),c(QD,"href","/docs/transformers/pr_16058/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(HD,"href","/docs/transformers/pr_16058/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(UD,"href","/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(JD,"href","/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(YD,"href","/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(KD,"href","/docs/transformers/pr_16058/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(ZD,"href","/docs/transformers/pr_16058/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(eq,"href","/docs/transformers/pr_16058/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(oq,"href","/docs/transformers/pr_16058/en/model_doc/swin#transformers.SwinForImageClassification"),c(rq,"href","/docs/transformers/pr_16058/en/model_doc/van#transformers.VanForImageClassification"),c(tq,"href","/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTForImageClassification"),c(Ue,"class","docstring"),c(ir,"class","docstring"),c(vv,"id","transformers.AutoModelForVision2Seq"),c(vv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vv,"href","#transformers.AutoModelForVision2Seq"),c(qd,"class","relative group"),c(at,"class","docstring"),c(aq,"href","/docs/transformers/pr_16058/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(Je,"class","docstring"),c(dr,"class","docstring"),c(Cv,"id","transformers.AutoModelForAudioClassification"),c(Cv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Cv,"href","#transformers.AutoModelForAudioClassification"),c(Xd,"class","relative group"),c(nt,"class","docstring"),c(nq,"href","/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(sq,"href","/docs/transformers/pr_16058/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(lq,"href","/docs/transformers/pr_16058/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(iq,"href","/docs/transformers/pr_16058/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(dq,"href","/docs/transformers/pr_16058/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(cq,"href","/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(fq,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(mq,"href","/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(Ye,"class","docstring"),c(cr,"class","docstring"),c(Rv,"id","transformers.AutoModelForAudioFrameClassification"),c(Rv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Rv,"href","#transformers.AutoModelForAudioFrameClassification"),c(Wd,"class","relative group"),c(st,"class","docstring"),c(gq,"href","/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(hq,"href","/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(pq,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(_q,"href","/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(Ke,"class","docstring"),c(fr,"class","docstring"),c(Nv,"id","transformers.AutoModelForCTC"),c(Nv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Nv,"href","#transformers.AutoModelForCTC"),c(Ud,"class","relative group"),c(lt,"class","docstring"),c(uq,"href","/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(bq,"href","/docs/transformers/pr_16058/en/model_doc/hubert#transformers.HubertForCTC"),c(vq,"href","/docs/transformers/pr_16058/en/model_doc/sew#transformers.SEWForCTC"),c(Tq,"href","/docs/transformers/pr_16058/en/model_doc/sew-d#transformers.SEWDForCTC"),c(Fq,"href","/docs/transformers/pr_16058/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(Cq,"href","/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(Mq,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(Eq,"href","/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMForCTC"),c(Ze,"class","docstring"),c(mr,"class","docstring"),c(Hv,"id","transformers.AutoModelForSpeechSeq2Seq"),c(Hv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Hv,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Kd,"class","relative group"),c(it,"class","docstring"),c(yq,"href","/docs/transformers/pr_16058/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(wq,"href","/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(eo,"class","docstring"),c(gr,"class","docstring"),c(Kv,"id","transformers.AutoModelForAudioXVector"),c(Kv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Kv,"href","#transformers.AutoModelForAudioXVector"),c(oc,"class","relative group"),c(dt,"class","docstring"),c(Aq,"href","/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(Lq,"href","/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(Bq,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(xq,"href","/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMForXVector"),c(oo,"class","docstring"),c(hr,"class","docstring"),c(a6,"id","transformers.AutoModelForMaskedImageModeling"),c(a6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a6,"href","#transformers.AutoModelForMaskedImageModeling"),c(ac,"class","relative group"),c(ct,"class","docstring"),c(kq,"href","/docs/transformers/pr_16058/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(Rq,"href","/docs/transformers/pr_16058/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(Sq,"href","/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(ro,"class","docstring"),c(pr,"class","docstring"),c(d6,"id","transformers.AutoModelForObjectDetection"),c(d6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d6,"href","#transformers.AutoModelForObjectDetection"),c(ic,"class","relative group"),c(ft,"class","docstring"),c(Pq,"href","/docs/transformers/pr_16058/en/model_doc/detr#transformers.DetrForObjectDetection"),c(to,"class","docstring"),c(_r,"class","docstring"),c(m6,"id","transformers.AutoModelForImageSegmentation"),c(m6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m6,"href","#transformers.AutoModelForImageSegmentation"),c(fc,"class","relative group"),c(mt,"class","docstring"),c($q,"href","/docs/transformers/pr_16058/en/model_doc/detr#transformers.DetrForSegmentation"),c(ao,"class","docstring"),c(ur,"class","docstring"),c(p6,"id","transformers.AutoModelForSemanticSegmentation"),c(p6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p6,"href","#transformers.AutoModelForSemanticSegmentation"),c(hc,"class","relative group"),c(gt,"class","docstring"),c(Iq,"href","/docs/transformers/pr_16058/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(jq,"href","/docs/transformers/pr_16058/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(no,"class","docstring"),c(br,"class","docstring"),c(v6,"id","transformers.AutoModelForInstanceSegmentation"),c(v6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v6,"href","#transformers.AutoModelForInstanceSegmentation"),c(uc,"class","relative group"),c(ht,"class","docstring"),c(Nq,"href","/docs/transformers/pr_16058/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(so,"class","docstring"),c(vr,"class","docstring"),c(C6,"id","transformers.TFAutoModel"),c(C6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C6,"href","#transformers.TFAutoModel"),c(Tc,"class","relative group"),c(pt,"class","docstring"),c(Dq,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.TFAlbertModel"),c(qq,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.TFBartModel"),c(Gq,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertModel"),c(Oq,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(Xq,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(Vq,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.TFCamembertModel"),c(zq,"href","/docs/transformers/pr_16058/en/model_doc/clip#transformers.TFCLIPModel"),c(Wq,"href","/docs/transformers/pr_16058/en/model_doc/convbert#transformers.TFConvBertModel"),c(Qq,"href","/docs/transformers/pr_16058/en/model_doc/convnext#transformers.TFConvNextModel"),c(Hq,"href","/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.TFCTRLModel"),c(Uq,"href","/docs/transformers/pr_16058/en/model_doc/deberta#transformers.TFDebertaModel"),c(Jq,"href","/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(Yq,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(Kq,"href","/docs/transformers/pr_16058/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(Zq,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.TFElectraModel"),c(eG,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(oG,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelModel"),c(rG,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(tG,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.TFGPT2Model"),c(aG,"href","/docs/transformers/pr_16058/en/model_doc/hubert#transformers.TFHubertModel"),c(nG,"href","/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(sG,"href","/docs/transformers/pr_16058/en/model_doc/led#transformers.TFLEDModel"),c(lG,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.TFLongformerModel"),c(iG,"href","/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.TFLxmertModel"),c(dG,"href","/docs/transformers/pr_16058/en/model_doc/marian#transformers.TFMarianModel"),c(cG,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.TFMBartModel"),c(fG,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(mG,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.TFMPNetModel"),c(gG,"href","/docs/transformers/pr_16058/en/model_doc/mt5#transformers.TFMT5Model"),c(hG,"href","/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(pG,"href","/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.TFPegasusModel"),c(_G,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.TFRemBertModel"),c(uG,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaModel"),c(bG,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.TFRoFormerModel"),c(vG,"href","/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(TG,"href","/docs/transformers/pr_16058/en/model_doc/t5#transformers.TFT5Model"),c(FG,"href","/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TFTapasModel"),c(CG,"href","/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(MG,"href","/docs/transformers/pr_16058/en/model_doc/vit#transformers.TFViTModel"),c(EG,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(yG,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMModel"),c(wG,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(AG,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.TFXLNetModel"),c(ho,"class","docstring"),c(Tr,"class","docstring"),c(c0,"id","transformers.TFAutoModelForPreTraining"),c(c0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c0,"href","#transformers.TFAutoModelForPreTraining"),c(Mc,"class","relative group"),c(_t,"class","docstring"),c(LG,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(BG,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(xG,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertForPreTraining"),c(kG,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(RG,"href","/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(SG,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(PG,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.TFElectraForPreTraining"),c($G,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(IG,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(jG,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(NG,"href","/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(DG,"href","/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(qG,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(GG,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(OG,"href","/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(XG,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(VG,"href","/docs/transformers/pr_16058/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(zG,"href","/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(WG,"href","/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(QG,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(HG,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(UG,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(po,"class","docstring"),c(Fr,"class","docstring"),c(S0,"id","transformers.TFAutoModelForCausalLM"),c(S0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S0,"href","#transformers.TFAutoModelForCausalLM"),c(wc,"class","relative group"),c(ut,"class","docstring"),c(JG,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(YG,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(KG,"href","/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(ZG,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(eO,"href","/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(oO,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(rO,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(tO,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(aO,"href","/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(nO,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(sO,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(_o,"class","docstring"),c(Cr,"class","docstring"),c(z0,"id","transformers.TFAutoModelForImageClassification"),c(z0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z0,"href","#transformers.TFAutoModelForImageClassification"),c(Bc,"class","relative group"),c(bt,"class","docstring"),c(lO,"href","/docs/transformers/pr_16058/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(iO,"href","/docs/transformers/pr_16058/en/model_doc/vit#transformers.TFViTForImageClassification"),c(uo,"class","docstring"),c(Mr,"class","docstring"),c(H0,"id","transformers.TFAutoModelForMaskedLM"),c(H0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H0,"href","#transformers.TFAutoModelForMaskedLM"),c(Rc,"class","relative group"),c(vt,"class","docstring"),c(dO,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(cO,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(fO,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(mO,"href","/docs/transformers/pr_16058/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(gO,"href","/docs/transformers/pr_16058/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(hO,"href","/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(pO,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(_O,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(uO,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(bO,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(vO,"href","/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(TO,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(FO,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(CO,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(MO,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(EO,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(yO,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(wO,"href","/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(AO,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(LO,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(bo,"class","docstring"),c(Er,"class","docstring"),c(pT,"id","transformers.TFAutoModelForSeq2SeqLM"),c(pT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pT,"href","#transformers.TFAutoModelForSeq2SeqLM"),c($c,"class","relative group"),c(Tt,"class","docstring"),c(BO,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(xO,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(kO,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(RO,"href","/docs/transformers/pr_16058/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(SO,"href","/docs/transformers/pr_16058/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(PO,"href","/docs/transformers/pr_16058/en/model_doc/marian#transformers.TFMarianMTModel"),c($O,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(IO,"href","/docs/transformers/pr_16058/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(jO,"href","/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(NO,"href","/docs/transformers/pr_16058/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(vo,"class","docstring"),c(yr,"class","docstring"),c(wT,"id","transformers.TFAutoModelForSequenceClassification"),c(wT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wT,"href","#transformers.TFAutoModelForSequenceClassification"),c(Nc,"class","relative group"),c(Ft,"class","docstring"),c(DO,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(qO,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(GO,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(OO,"href","/docs/transformers/pr_16058/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(XO,"href","/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(VO,"href","/docs/transformers/pr_16058/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(zO,"href","/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(WO,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(QO,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(HO,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(UO,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(JO,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(YO,"href","/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(KO,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(ZO,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(eX,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(oX,"href","/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(rX,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(tX,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(aX,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(nX,"href","/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(sX,"href","/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(lX,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(iX,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(dX,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(To,"class","docstring"),c(wr,"class","docstring"),c(KT,"id","transformers.TFAutoModelForMultipleChoice"),c(KT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KT,"href","#transformers.TFAutoModelForMultipleChoice"),c(Gc,"class","relative group"),c(Ct,"class","docstring"),c(cX,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(fX,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(mX,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(gX,"href","/docs/transformers/pr_16058/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(hX,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(pX,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(_X,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(uX,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(bX,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(vX,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(TX,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(FX,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(CX,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(MX,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(EX,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(yX,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(wX,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Fo,"class","docstring"),c(Ar,"class","docstring"),c(_8,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(_8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_8,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(Vc,"class","relative group"),c(Mt,"class","docstring"),c(AX,"href","/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Co,"class","docstring"),c(Lr,"class","docstring"),c(b8,"id","transformers.TFAutoModelForTokenClassification"),c(b8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b8,"href","#transformers.TFAutoModelForTokenClassification"),c(Qc,"class","relative group"),c(Et,"class","docstring"),c(LX,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(BX,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(xX,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(kX,"href","/docs/transformers/pr_16058/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(RX,"href","/docs/transformers/pr_16058/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(SX,"href","/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(PX,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c($X,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(IX,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(jX,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(NX,"href","/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(DX,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(qX,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(GX,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(OX,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(XX,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(VX,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(zX,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(WX,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(QX,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Mo,"class","docstring"),c(Br,"class","docstring"),c(D8,"id","transformers.TFAutoModelForQuestionAnswering"),c(D8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D8,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Jc,"class","relative group"),c(yt,"class","docstring"),c(HX,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(UX,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(JX,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(YX,"href","/docs/transformers/pr_16058/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(KX,"href","/docs/transformers/pr_16058/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(ZX,"href","/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(eV,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(oV,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(rV,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(tV,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(aV,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(nV,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(sV,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(lV,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(iV,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(dV,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(cV,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(fV,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(mV,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Eo,"class","docstring"),c(xr,"class","docstring"),c(nF,"id","transformers.TFAutoModelForVision2Seq"),c(nF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nF,"href","#transformers.TFAutoModelForVision2Seq"),c(Zc,"class","relative group"),c(wt,"class","docstring"),c(gV,"href","/docs/transformers/pr_16058/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(yo,"class","docstring"),c(kr,"class","docstring"),c(lF,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(lF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lF,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(rf,"class","relative group"),c(At,"class","docstring"),c(hV,"href","/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(wo,"class","docstring"),c(Rr,"class","docstring"),c(dF,"id","transformers.FlaxAutoModel"),c(dF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dF,"href","#transformers.FlaxAutoModel"),c(nf,"class","relative group"),c(Lt,"class","docstring"),c(pV,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.FlaxAlbertModel"),c(_V,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.FlaxBartModel"),c(uV,"href","/docs/transformers/pr_16058/en/model_doc/beit#transformers.FlaxBeitModel"),c(bV,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertModel"),c(vV,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(TV,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(FV,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(CV,"href","/docs/transformers/pr_16058/en/model_doc/clip#transformers.FlaxCLIPModel"),c(MV,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(EV,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.FlaxElectraModel"),c(yV,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(wV,"href","/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(AV,"href","/docs/transformers/pr_16058/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(LV,"href","/docs/transformers/pr_16058/en/model_doc/marian#transformers.FlaxMarianModel"),c(BV,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.FlaxMBartModel"),c(xV,"href","/docs/transformers/pr_16058/en/model_doc/mt5#transformers.FlaxMT5Model"),c(kV,"href","/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(RV,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(SV,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(PV,"href","/docs/transformers/pr_16058/en/model_doc/t5#transformers.FlaxT5Model"),c($V,"href","/docs/transformers/pr_16058/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(IV,"href","/docs/transformers/pr_16058/en/model_doc/vit#transformers.FlaxViTModel"),c(jV,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(NV,"href","/docs/transformers/pr_16058/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(DV,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Ao,"class","docstring"),c(Sr,"class","docstring"),c($F,"id","transformers.FlaxAutoModelForCausalLM"),c($F,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($F,"href","#transformers.FlaxAutoModelForCausalLM"),c(df,"class","relative group"),c(Bt,"class","docstring"),c(qV,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(GV,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(OV,"href","/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(XV,"href","/docs/transformers/pr_16058/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(VV,"href","/docs/transformers/pr_16058/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Lo,"class","docstring"),c(Pr,"class","docstring"),c(GF,"id","transformers.FlaxAutoModelForPreTraining"),c(GF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GF,"href","#transformers.FlaxAutoModelForPreTraining"),c(mf,"class","relative group"),c(xt,"class","docstring"),c(zV,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(WV,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(QV,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(HV,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(UV,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(JV,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(YV,"href","/docs/transformers/pr_16058/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(KV,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(ZV,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(ez,"href","/docs/transformers/pr_16058/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(oz,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(rz,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Bo,"class","docstring"),c($r,"class","docstring"),c(eC,"id","transformers.FlaxAutoModelForMaskedLM"),c(eC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eC,"href","#transformers.FlaxAutoModelForMaskedLM"),c(pf,"class","relative group"),c(kt,"class","docstring"),c(tz,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(az,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(nz,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(sz,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(lz,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(iz,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(dz,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(cz,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(fz,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(mz,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(xo,"class","docstring"),c(Ir,"class","docstring"),c(fC,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(fC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fC,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(bf,"class","relative group"),c(Rt,"class","docstring"),c(gz,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(hz,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(pz,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(_z,"href","/docs/transformers/pr_16058/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(uz,"href","/docs/transformers/pr_16058/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(bz,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(vz,"href","/docs/transformers/pr_16058/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(Tz,"href","/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(Fz,"href","/docs/transformers/pr_16058/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(ko,"class","docstring"),c(jr,"class","docstring"),c(FC,"id","transformers.FlaxAutoModelForSequenceClassification"),c(FC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FC,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Ff,"class","relative group"),c(St,"class","docstring"),c(Cz,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(Mz,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(Ez,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(yz,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(wz,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(Az,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(Lz,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(Bz,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(xz,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(kz,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Ro,"class","docstring"),c(Nr,"class","docstring"),c(RC,"id","transformers.FlaxAutoModelForSpeechSeq2Seq"),c(RC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RC,"href","#transformers.FlaxAutoModelForSpeechSeq2Seq"),c(Ef,"class","relative group"),c(Pt,"class","docstring"),c(Rz,"href","/docs/transformers/pr_16058/en/model_doc/speech-encoder-decoder#transformers.FlaxSpeechEncoderDecoderModel"),c(So,"class","docstring"),c(Dr,"class","docstring"),c(PC,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(PC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PC,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Af,"class","relative group"),c($t,"class","docstring"),c(Sz,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(Pz,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c($z,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(Iz,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(jz,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(Nz,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(Dz,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(qz,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(Gz,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(Oz,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Po,"class","docstring"),c(qr,"class","docstring"),c(zC,"id","transformers.FlaxAutoModelForTokenClassification"),c(zC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zC,"href","#transformers.FlaxAutoModelForTokenClassification"),c(xf,"class","relative group"),c(It,"class","docstring"),c(Xz,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(Vz,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(zz,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(Wz,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(Qz,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(Hz,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(Uz,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(Jz,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c($o,"class","docstring"),c(Gr,"class","docstring"),c(eM,"id","transformers.FlaxAutoModelForMultipleChoice"),c(eM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eM,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Sf,"class","relative group"),c(jt,"class","docstring"),c(Yz,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(Kz,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(Zz,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(eW,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(oW,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(rW,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(tW,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(aW,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Io,"class","docstring"),c(Or,"class","docstring"),c(dM,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(dM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dM,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(If,"class","relative group"),c(Nt,"class","docstring"),c(nW,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(jo,"class","docstring"),c(Xr,"class","docstring"),c(fM,"id","transformers.FlaxAutoModelForImageClassification"),c(fM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fM,"href","#transformers.FlaxAutoModelForImageClassification"),c(Df,"class","relative group"),c(Dt,"class","docstring"),c(sW,"href","/docs/transformers/pr_16058/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(lW,"href","/docs/transformers/pr_16058/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(No,"class","docstring"),c(Vr,"class","docstring"),c(hM,"id","transformers.FlaxAutoModelForVision2Seq"),c(hM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hM,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Of,"class","relative group"),c(qt,"class","docstring"),c(iW,"href","/docs/transformers/pr_16058/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Do,"class","docstring"),c(zr,"class","docstring")},m(d,u){e(document.head,J),b(d,$e,u),b(d,de,u),e(de,pe),e(pe,io),g(fe,io,null),e(de,Me),e(de,zo),e(zo,Vi),b(d,Wf,u),b(d,ha,u),e(ha,zi),e(ha,Wi),e(Wi,_4),e(ha,Qf),b(d,Be,u),b(d,co,u),e(co,Qi),e(co,Wn),e(Wn,u4),e(co,Qn),e(co,Hn),e(Hn,b4),e(co,Hi),e(co,Un),e(Un,v4),e(co,Ui),b(d,Hf,u),g(Va,d,u),b(d,fo,u),b(d,_e,u),e(_e,_9),e(_e,Ji),e(Ji,u9),e(_e,b9),b(d,Wo,u),b(d,za,u),e(za,v9),e(za,Uf),e(Uf,T9),e(za,J$e),b(d,Rke,u),b(d,Yi,u),e(Yi,Jf),e(Jf,tH),g(T4,tH,null),e(Yi,Y$e),e(Yi,aH),e(aH,K$e),b(d,Ske,u),b(d,Jn,u),e(Jn,Z$e),e(Jn,nH),e(nH,eIe),e(Jn,oIe),e(Jn,sH),e(sH,rIe),e(Jn,tIe),b(d,Pke,u),g(F4,d,u),b(d,$ke,u),b(d,F9,u),e(F9,aIe),b(d,Ike,u),g(Yf,d,u),b(d,jke,u),b(d,Ki,u),e(Ki,Kf),e(Kf,lH),g(C4,lH,null),e(Ki,nIe),e(Ki,iH),e(iH,sIe),b(d,Nke,u),b(d,Qo,u),g(M4,Qo,null),e(Qo,lIe),e(Qo,E4),e(E4,iIe),e(E4,C9),e(C9,dIe),e(E4,cIe),e(Qo,fIe),e(Qo,y4),e(y4,mIe),e(y4,dH),e(dH,gIe),e(y4,hIe),e(Qo,pIe),e(Qo,mo),g(w4,mo,null),e(mo,_Ie),e(mo,cH),e(cH,uIe),e(mo,bIe),e(mo,Zi),e(Zi,vIe),e(Zi,fH),e(fH,TIe),e(Zi,FIe),e(Zi,mH),e(mH,CIe),e(Zi,MIe),e(mo,EIe),e(mo,v),e(v,Zf),e(Zf,gH),e(gH,yIe),e(Zf,wIe),e(Zf,M9),e(M9,AIe),e(Zf,LIe),e(v,BIe),e(v,em),e(em,hH),e(hH,xIe),e(em,kIe),e(em,E9),e(E9,RIe),e(em,SIe),e(v,PIe),e(v,om),e(om,pH),e(pH,$Ie),e(om,IIe),e(om,y9),e(y9,jIe),e(om,NIe),e(v,DIe),e(v,rm),e(rm,_H),e(_H,qIe),e(rm,GIe),e(rm,w9),e(w9,OIe),e(rm,XIe),e(v,VIe),e(v,tm),e(tm,uH),e(uH,zIe),e(tm,WIe),e(tm,A9),e(A9,QIe),e(tm,HIe),e(v,UIe),e(v,am),e(am,bH),e(bH,JIe),e(am,YIe),e(am,L9),e(L9,KIe),e(am,ZIe),e(v,eje),e(v,nm),e(nm,vH),e(vH,oje),e(nm,rje),e(nm,B9),e(B9,tje),e(nm,aje),e(v,nje),e(v,sm),e(sm,TH),e(TH,sje),e(sm,lje),e(sm,x9),e(x9,ije),e(sm,dje),e(v,cje),e(v,lm),e(lm,FH),e(FH,fje),e(lm,mje),e(lm,k9),e(k9,gje),e(lm,hje),e(v,pje),e(v,im),e(im,CH),e(CH,_je),e(im,uje),e(im,R9),e(R9,bje),e(im,vje),e(v,Tje),e(v,dm),e(dm,MH),e(MH,Fje),e(dm,Cje),e(dm,S9),e(S9,Mje),e(dm,Eje),e(v,yje),e(v,cm),e(cm,EH),e(EH,wje),e(cm,Aje),e(cm,P9),e(P9,Lje),e(cm,Bje),e(v,xje),e(v,fm),e(fm,yH),e(yH,kje),e(fm,Rje),e(fm,$9),e($9,Sje),e(fm,Pje),e(v,$je),e(v,mm),e(mm,wH),e(wH,Ije),e(mm,jje),e(mm,I9),e(I9,Nje),e(mm,Dje),e(v,qje),e(v,gm),e(gm,AH),e(AH,Gje),e(gm,Oje),e(gm,j9),e(j9,Xje),e(gm,Vje),e(v,zje),e(v,hm),e(hm,LH),e(LH,Wje),e(hm,Qje),e(hm,N9),e(N9,Hje),e(hm,Uje),e(v,Jje),e(v,pm),e(pm,BH),e(BH,Yje),e(pm,Kje),e(pm,D9),e(D9,Zje),e(pm,eNe),e(v,oNe),e(v,_m),e(_m,xH),e(xH,rNe),e(_m,tNe),e(_m,q9),e(q9,aNe),e(_m,nNe),e(v,sNe),e(v,um),e(um,kH),e(kH,lNe),e(um,iNe),e(um,G9),e(G9,dNe),e(um,cNe),e(v,fNe),e(v,bm),e(bm,RH),e(RH,mNe),e(bm,gNe),e(bm,O9),e(O9,hNe),e(bm,pNe),e(v,_Ne),e(v,vm),e(vm,SH),e(SH,uNe),e(vm,bNe),e(vm,X9),e(X9,vNe),e(vm,TNe),e(v,FNe),e(v,Tm),e(Tm,PH),e(PH,CNe),e(Tm,MNe),e(Tm,V9),e(V9,ENe),e(Tm,yNe),e(v,wNe),e(v,Fm),e(Fm,$H),e($H,ANe),e(Fm,LNe),e(Fm,z9),e(z9,BNe),e(Fm,xNe),e(v,kNe),e(v,Cm),e(Cm,IH),e(IH,RNe),e(Cm,SNe),e(Cm,W9),e(W9,PNe),e(Cm,$Ne),e(v,INe),e(v,Mm),e(Mm,jH),e(jH,jNe),e(Mm,NNe),e(Mm,Q9),e(Q9,DNe),e(Mm,qNe),e(v,GNe),e(v,Em),e(Em,NH),e(NH,ONe),e(Em,XNe),e(Em,H9),e(H9,VNe),e(Em,zNe),e(v,WNe),e(v,ym),e(ym,DH),e(DH,QNe),e(ym,HNe),e(ym,U9),e(U9,UNe),e(ym,JNe),e(v,YNe),e(v,wm),e(wm,qH),e(qH,KNe),e(wm,ZNe),e(wm,J9),e(J9,eDe),e(wm,oDe),e(v,rDe),e(v,Am),e(Am,GH),e(GH,tDe),e(Am,aDe),e(Am,Y9),e(Y9,nDe),e(Am,sDe),e(v,lDe),e(v,Lm),e(Lm,OH),e(OH,iDe),e(Lm,dDe),e(Lm,K9),e(K9,cDe),e(Lm,fDe),e(v,mDe),e(v,Bm),e(Bm,XH),e(XH,gDe),e(Bm,hDe),e(Bm,Z9),e(Z9,pDe),e(Bm,_De),e(v,uDe),e(v,xm),e(xm,VH),e(VH,bDe),e(xm,vDe),e(xm,eB),e(eB,TDe),e(xm,FDe),e(v,CDe),e(v,km),e(km,zH),e(zH,MDe),e(km,EDe),e(km,oB),e(oB,yDe),e(km,wDe),e(v,ADe),e(v,Rm),e(Rm,WH),e(WH,LDe),e(Rm,BDe),e(Rm,rB),e(rB,xDe),e(Rm,kDe),e(v,RDe),e(v,Sm),e(Sm,QH),e(QH,SDe),e(Sm,PDe),e(Sm,tB),e(tB,$De),e(Sm,IDe),e(v,jDe),e(v,Pm),e(Pm,HH),e(HH,NDe),e(Pm,DDe),e(Pm,aB),e(aB,qDe),e(Pm,GDe),e(v,ODe),e(v,$m),e($m,UH),e(UH,XDe),e($m,VDe),e($m,nB),e(nB,zDe),e($m,WDe),e(v,QDe),e(v,Im),e(Im,JH),e(JH,HDe),e(Im,UDe),e(Im,sB),e(sB,JDe),e(Im,YDe),e(v,KDe),e(v,jm),e(jm,YH),e(YH,ZDe),e(jm,eqe),e(jm,lB),e(lB,oqe),e(jm,rqe),e(v,tqe),e(v,Nm),e(Nm,KH),e(KH,aqe),e(Nm,nqe),e(Nm,iB),e(iB,sqe),e(Nm,lqe),e(v,iqe),e(v,Dm),e(Dm,ZH),e(ZH,dqe),e(Dm,cqe),e(Dm,dB),e(dB,fqe),e(Dm,mqe),e(v,gqe),e(v,qm),e(qm,eU),e(eU,hqe),e(qm,pqe),e(qm,cB),e(cB,_qe),e(qm,uqe),e(v,bqe),e(v,Gm),e(Gm,oU),e(oU,vqe),e(Gm,Tqe),e(Gm,fB),e(fB,Fqe),e(Gm,Cqe),e(v,Mqe),e(v,Om),e(Om,rU),e(rU,Eqe),e(Om,yqe),e(Om,mB),e(mB,wqe),e(Om,Aqe),e(v,Lqe),e(v,Xm),e(Xm,tU),e(tU,Bqe),e(Xm,xqe),e(Xm,gB),e(gB,kqe),e(Xm,Rqe),e(v,Sqe),e(v,Vm),e(Vm,aU),e(aU,Pqe),e(Vm,$qe),e(Vm,hB),e(hB,Iqe),e(Vm,jqe),e(v,Nqe),e(v,zm),e(zm,nU),e(nU,Dqe),e(zm,qqe),e(zm,pB),e(pB,Gqe),e(zm,Oqe),e(v,Xqe),e(v,Wm),e(Wm,sU),e(sU,Vqe),e(Wm,zqe),e(Wm,_B),e(_B,Wqe),e(Wm,Qqe),e(v,Hqe),e(v,Qm),e(Qm,lU),e(lU,Uqe),e(Qm,Jqe),e(Qm,uB),e(uB,Yqe),e(Qm,Kqe),e(v,Zqe),e(v,Hm),e(Hm,iU),e(iU,eGe),e(Hm,oGe),e(Hm,bB),e(bB,rGe),e(Hm,tGe),e(v,aGe),e(v,Um),e(Um,dU),e(dU,nGe),e(Um,sGe),e(Um,vB),e(vB,lGe),e(Um,iGe),e(v,dGe),e(v,Jm),e(Jm,cU),e(cU,cGe),e(Jm,fGe),e(Jm,TB),e(TB,mGe),e(Jm,gGe),e(v,hGe),e(v,Ym),e(Ym,fU),e(fU,pGe),e(Ym,_Ge),e(Ym,FB),e(FB,uGe),e(Ym,bGe),e(v,vGe),e(v,Km),e(Km,mU),e(mU,TGe),e(Km,FGe),e(Km,CB),e(CB,CGe),e(Km,MGe),e(v,EGe),e(v,Zm),e(Zm,gU),e(gU,yGe),e(Zm,wGe),e(Zm,MB),e(MB,AGe),e(Zm,LGe),e(v,BGe),e(v,eg),e(eg,hU),e(hU,xGe),e(eg,kGe),e(eg,EB),e(EB,RGe),e(eg,SGe),e(v,PGe),e(v,og),e(og,pU),e(pU,$Ge),e(og,IGe),e(og,yB),e(yB,jGe),e(og,NGe),e(v,DGe),e(v,rg),e(rg,_U),e(_U,qGe),e(rg,GGe),e(rg,wB),e(wB,OGe),e(rg,XGe),e(v,VGe),e(v,tg),e(tg,uU),e(uU,zGe),e(tg,WGe),e(tg,AB),e(AB,QGe),e(tg,HGe),e(v,UGe),e(v,ag),e(ag,bU),e(bU,JGe),e(ag,YGe),e(ag,LB),e(LB,KGe),e(ag,ZGe),e(v,eOe),e(v,ng),e(ng,vU),e(vU,oOe),e(ng,rOe),e(ng,BB),e(BB,tOe),e(ng,aOe),e(v,nOe),e(v,sg),e(sg,TU),e(TU,sOe),e(sg,lOe),e(sg,xB),e(xB,iOe),e(sg,dOe),e(v,cOe),e(v,lg),e(lg,FU),e(FU,fOe),e(lg,mOe),e(lg,kB),e(kB,gOe),e(lg,hOe),e(v,pOe),e(v,ig),e(ig,CU),e(CU,_Oe),e(ig,uOe),e(ig,RB),e(RB,bOe),e(ig,vOe),e(v,TOe),e(v,dg),e(dg,MU),e(MU,FOe),e(dg,COe),e(dg,SB),e(SB,MOe),e(dg,EOe),e(v,yOe),e(v,cg),e(cg,EU),e(EU,wOe),e(cg,AOe),e(cg,PB),e(PB,LOe),e(cg,BOe),e(v,xOe),e(v,fg),e(fg,yU),e(yU,kOe),e(fg,ROe),e(fg,$B),e($B,SOe),e(fg,POe),e(v,$Oe),e(v,mg),e(mg,wU),e(wU,IOe),e(mg,jOe),e(mg,IB),e(IB,NOe),e(mg,DOe),e(v,qOe),e(v,gg),e(gg,AU),e(AU,GOe),e(gg,OOe),e(gg,jB),e(jB,XOe),e(gg,VOe),e(v,zOe),e(v,hg),e(hg,LU),e(LU,WOe),e(hg,QOe),e(hg,NB),e(NB,HOe),e(hg,UOe),e(v,JOe),e(v,pg),e(pg,BU),e(BU,YOe),e(pg,KOe),e(pg,DB),e(DB,ZOe),e(pg,eXe),e(v,oXe),e(v,_g),e(_g,xU),e(xU,rXe),e(_g,tXe),e(_g,qB),e(qB,aXe),e(_g,nXe),e(v,sXe),e(v,ug),e(ug,kU),e(kU,lXe),e(ug,iXe),e(ug,GB),e(GB,dXe),e(ug,cXe),e(v,fXe),e(v,bg),e(bg,RU),e(RU,mXe),e(bg,gXe),e(bg,OB),e(OB,hXe),e(bg,pXe),e(v,_Xe),e(v,vg),e(vg,SU),e(SU,uXe),e(vg,bXe),e(vg,XB),e(XB,vXe),e(vg,TXe),e(v,FXe),e(v,Tg),e(Tg,PU),e(PU,CXe),e(Tg,MXe),e(Tg,VB),e(VB,EXe),e(Tg,yXe),e(v,wXe),e(v,Fg),e(Fg,$U),e($U,AXe),e(Fg,LXe),e(Fg,zB),e(zB,BXe),e(Fg,xXe),e(v,kXe),e(v,Cg),e(Cg,IU),e(IU,RXe),e(Cg,SXe),e(Cg,WB),e(WB,PXe),e(Cg,$Xe),e(v,IXe),e(v,Mg),e(Mg,jU),e(jU,jXe),e(Mg,NXe),e(Mg,QB),e(QB,DXe),e(Mg,qXe),e(v,GXe),e(v,Eg),e(Eg,NU),e(NU,OXe),e(Eg,XXe),e(Eg,HB),e(HB,VXe),e(Eg,zXe),e(v,WXe),e(v,yg),e(yg,DU),e(DU,QXe),e(yg,HXe),e(yg,UB),e(UB,UXe),e(yg,JXe),e(v,YXe),e(v,wg),e(wg,qU),e(qU,KXe),e(wg,ZXe),e(wg,JB),e(JB,eVe),e(wg,oVe),e(v,rVe),e(v,Ag),e(Ag,GU),e(GU,tVe),e(Ag,aVe),e(Ag,YB),e(YB,nVe),e(Ag,sVe),e(v,lVe),e(v,Lg),e(Lg,OU),e(OU,iVe),e(Lg,dVe),e(Lg,KB),e(KB,cVe),e(Lg,fVe),e(v,mVe),e(v,Bg),e(Bg,XU),e(XU,gVe),e(Bg,hVe),e(Bg,ZB),e(ZB,pVe),e(Bg,_Ve),e(v,uVe),e(v,xg),e(xg,VU),e(VU,bVe),e(xg,vVe),e(xg,ex),e(ex,TVe),e(xg,FVe),e(v,CVe),e(v,kg),e(kg,zU),e(zU,MVe),e(kg,EVe),e(kg,ox),e(ox,yVe),e(kg,wVe),e(v,AVe),e(v,Rg),e(Rg,WU),e(WU,LVe),e(Rg,BVe),e(Rg,rx),e(rx,xVe),e(Rg,kVe),e(v,RVe),e(v,Sg),e(Sg,QU),e(QU,SVe),e(Sg,PVe),e(Sg,tx),e(tx,$Ve),e(Sg,IVe),e(v,jVe),e(v,Pg),e(Pg,HU),e(HU,NVe),e(Pg,DVe),e(Pg,ax),e(ax,qVe),e(Pg,GVe),e(v,OVe),e(v,$g),e($g,UU),e(UU,XVe),e($g,VVe),e($g,nx),e(nx,zVe),e($g,WVe),e(v,QVe),e(v,Ig),e(Ig,JU),e(JU,HVe),e(Ig,UVe),e(Ig,sx),e(sx,JVe),e(Ig,YVe),e(v,KVe),e(v,jg),e(jg,YU),e(YU,ZVe),e(jg,eze),e(jg,lx),e(lx,oze),e(jg,rze),e(v,tze),e(v,Ng),e(Ng,KU),e(KU,aze),e(Ng,nze),e(Ng,ix),e(ix,sze),e(Ng,lze),e(v,ize),e(v,Dg),e(Dg,ZU),e(ZU,dze),e(Dg,cze),e(Dg,dx),e(dx,fze),e(Dg,mze),e(v,gze),e(v,qg),e(qg,eJ),e(eJ,hze),e(qg,pze),e(qg,cx),e(cx,_ze),e(qg,uze),e(v,bze),e(v,Gg),e(Gg,oJ),e(oJ,vze),e(Gg,Tze),e(Gg,fx),e(fx,Fze),e(Gg,Cze),e(mo,Mze),e(mo,rJ),e(rJ,Eze),e(mo,yze),g(A4,mo,null),e(Qo,wze),e(Qo,Og),g(L4,Og,null),e(Og,Aze),e(Og,tJ),e(tJ,Lze),b(d,Dke,u),b(d,ed,u),e(ed,Xg),e(Xg,aJ),g(B4,aJ,null),e(ed,Bze),e(ed,nJ),e(nJ,xze),b(d,qke,u),b(d,Ho,u),g(x4,Ho,null),e(Ho,kze),e(Ho,k4),e(k4,Rze),e(k4,mx),e(mx,Sze),e(k4,Pze),e(Ho,$ze),e(Ho,R4),e(R4,Ize),e(R4,sJ),e(sJ,jze),e(R4,Nze),e(Ho,Dze),e(Ho,go),g(S4,go,null),e(go,qze),e(go,lJ),e(lJ,Gze),e(go,Oze),e(go,Wa),e(Wa,Xze),e(Wa,iJ),e(iJ,Vze),e(Wa,zze),e(Wa,dJ),e(dJ,Wze),e(Wa,Qze),e(Wa,cJ),e(cJ,Hze),e(Wa,Uze),e(go,Jze),e(go,E),e(E,Yn),e(Yn,fJ),e(fJ,Yze),e(Yn,Kze),e(Yn,gx),e(gx,Zze),e(Yn,eWe),e(Yn,hx),e(hx,oWe),e(Yn,rWe),e(E,tWe),e(E,Kn),e(Kn,mJ),e(mJ,aWe),e(Kn,nWe),e(Kn,px),e(px,sWe),e(Kn,lWe),e(Kn,_x),e(_x,iWe),e(Kn,dWe),e(E,cWe),e(E,Zn),e(Zn,gJ),e(gJ,fWe),e(Zn,mWe),e(Zn,ux),e(ux,gWe),e(Zn,hWe),e(Zn,bx),e(bx,pWe),e(Zn,_We),e(E,uWe),e(E,Vg),e(Vg,hJ),e(hJ,bWe),e(Vg,vWe),e(Vg,vx),e(vx,TWe),e(Vg,FWe),e(E,CWe),e(E,es),e(es,pJ),e(pJ,MWe),e(es,EWe),e(es,Tx),e(Tx,yWe),e(es,wWe),e(es,Fx),e(Fx,AWe),e(es,LWe),e(E,BWe),e(E,zg),e(zg,_J),e(_J,xWe),e(zg,kWe),e(zg,Cx),e(Cx,RWe),e(zg,SWe),e(E,PWe),e(E,Wg),e(Wg,uJ),e(uJ,$We),e(Wg,IWe),e(Wg,Mx),e(Mx,jWe),e(Wg,NWe),e(E,DWe),e(E,Qg),e(Qg,bJ),e(bJ,qWe),e(Qg,GWe),e(Qg,Ex),e(Ex,OWe),e(Qg,XWe),e(E,VWe),e(E,os),e(os,vJ),e(vJ,zWe),e(os,WWe),e(os,yx),e(yx,QWe),e(os,HWe),e(os,wx),e(wx,UWe),e(os,JWe),e(E,YWe),e(E,rs),e(rs,TJ),e(TJ,KWe),e(rs,ZWe),e(rs,Ax),e(Ax,eQe),e(rs,oQe),e(rs,Lx),e(Lx,rQe),e(rs,tQe),e(E,aQe),e(E,ts),e(ts,FJ),e(FJ,nQe),e(ts,sQe),e(ts,Bx),e(Bx,lQe),e(ts,iQe),e(ts,xx),e(xx,dQe),e(ts,cQe),e(E,fQe),e(E,Hg),e(Hg,CJ),e(CJ,mQe),e(Hg,gQe),e(Hg,kx),e(kx,hQe),e(Hg,pQe),e(E,_Qe),e(E,Ug),e(Ug,MJ),e(MJ,uQe),e(Ug,bQe),e(Ug,Rx),e(Rx,vQe),e(Ug,TQe),e(E,FQe),e(E,as),e(as,EJ),e(EJ,CQe),e(as,MQe),e(as,Sx),e(Sx,EQe),e(as,yQe),e(as,Px),e(Px,wQe),e(as,AQe),e(E,LQe),e(E,Jg),e(Jg,yJ),e(yJ,BQe),e(Jg,xQe),e(Jg,$x),e($x,kQe),e(Jg,RQe),e(E,SQe),e(E,ns),e(ns,wJ),e(wJ,PQe),e(ns,$Qe),e(ns,Ix),e(Ix,IQe),e(ns,jQe),e(ns,jx),e(jx,NQe),e(ns,DQe),e(E,qQe),e(E,ss),e(ss,AJ),e(AJ,GQe),e(ss,OQe),e(ss,Nx),e(Nx,XQe),e(ss,VQe),e(ss,Dx),e(Dx,zQe),e(ss,WQe),e(E,QQe),e(E,ls),e(ls,LJ),e(LJ,HQe),e(ls,UQe),e(ls,qx),e(qx,JQe),e(ls,YQe),e(ls,BJ),e(BJ,KQe),e(ls,ZQe),e(E,eHe),e(E,Yg),e(Yg,xJ),e(xJ,oHe),e(Yg,rHe),e(Yg,Gx),e(Gx,tHe),e(Yg,aHe),e(E,nHe),e(E,is),e(is,kJ),e(kJ,sHe),e(is,lHe),e(is,Ox),e(Ox,iHe),e(is,dHe),e(is,Xx),e(Xx,cHe),e(is,fHe),e(E,mHe),e(E,Kg),e(Kg,RJ),e(RJ,gHe),e(Kg,hHe),e(Kg,Vx),e(Vx,pHe),e(Kg,_He),e(E,uHe),e(E,ds),e(ds,SJ),e(SJ,bHe),e(ds,vHe),e(ds,zx),e(zx,THe),e(ds,FHe),e(ds,Wx),e(Wx,CHe),e(ds,MHe),e(E,EHe),e(E,cs),e(cs,PJ),e(PJ,yHe),e(cs,wHe),e(cs,Qx),e(Qx,AHe),e(cs,LHe),e(cs,Hx),e(Hx,BHe),e(cs,xHe),e(E,kHe),e(E,fs),e(fs,$J),e($J,RHe),e(fs,SHe),e(fs,Ux),e(Ux,PHe),e(fs,$He),e(fs,Jx),e(Jx,IHe),e(fs,jHe),e(E,NHe),e(E,Zg),e(Zg,IJ),e(IJ,DHe),e(Zg,qHe),e(Zg,Yx),e(Yx,GHe),e(Zg,OHe),e(E,XHe),e(E,ms),e(ms,jJ),e(jJ,VHe),e(ms,zHe),e(ms,Kx),e(Kx,WHe),e(ms,QHe),e(ms,Zx),e(Zx,HHe),e(ms,UHe),e(E,JHe),e(E,eh),e(eh,NJ),e(NJ,YHe),e(eh,KHe),e(eh,ek),e(ek,ZHe),e(eh,eUe),e(E,oUe),e(E,gs),e(gs,DJ),e(DJ,rUe),e(gs,tUe),e(gs,ok),e(ok,aUe),e(gs,nUe),e(gs,rk),e(rk,sUe),e(gs,lUe),e(E,iUe),e(E,hs),e(hs,qJ),e(qJ,dUe),e(hs,cUe),e(hs,tk),e(tk,fUe),e(hs,mUe),e(hs,ak),e(ak,gUe),e(hs,hUe),e(E,pUe),e(E,ps),e(ps,GJ),e(GJ,_Ue),e(ps,uUe),e(ps,nk),e(nk,bUe),e(ps,vUe),e(ps,sk),e(sk,TUe),e(ps,FUe),e(E,CUe),e(E,_s),e(_s,OJ),e(OJ,MUe),e(_s,EUe),e(_s,lk),e(lk,yUe),e(_s,wUe),e(_s,ik),e(ik,AUe),e(_s,LUe),e(E,BUe),e(E,oh),e(oh,XJ),e(XJ,xUe),e(oh,kUe),e(oh,dk),e(dk,RUe),e(oh,SUe),e(E,PUe),e(E,us),e(us,VJ),e(VJ,$Ue),e(us,IUe),e(us,ck),e(ck,jUe),e(us,NUe),e(us,fk),e(fk,DUe),e(us,qUe),e(E,GUe),e(E,bs),e(bs,zJ),e(zJ,OUe),e(bs,XUe),e(bs,mk),e(mk,VUe),e(bs,zUe),e(bs,gk),e(gk,WUe),e(bs,QUe),e(E,HUe),e(E,vs),e(vs,WJ),e(WJ,UUe),e(vs,JUe),e(vs,hk),e(hk,YUe),e(vs,KUe),e(vs,pk),e(pk,ZUe),e(vs,eJe),e(E,oJe),e(E,Ts),e(Ts,QJ),e(QJ,rJe),e(Ts,tJe),e(Ts,_k),e(_k,aJe),e(Ts,nJe),e(Ts,uk),e(uk,sJe),e(Ts,lJe),e(E,iJe),e(E,Fs),e(Fs,HJ),e(HJ,dJe),e(Fs,cJe),e(Fs,bk),e(bk,fJe),e(Fs,mJe),e(Fs,vk),e(vk,gJe),e(Fs,hJe),e(E,pJe),e(E,Cs),e(Cs,UJ),e(UJ,_Je),e(Cs,uJe),e(Cs,Tk),e(Tk,bJe),e(Cs,vJe),e(Cs,Fk),e(Fk,TJe),e(Cs,FJe),e(E,CJe),e(E,rh),e(rh,JJ),e(JJ,MJe),e(rh,EJe),e(rh,Ck),e(Ck,yJe),e(rh,wJe),e(E,AJe),e(E,Ms),e(Ms,YJ),e(YJ,LJe),e(Ms,BJe),e(Ms,Mk),e(Mk,xJe),e(Ms,kJe),e(Ms,Ek),e(Ek,RJe),e(Ms,SJe),e(E,PJe),e(E,th),e(th,KJ),e(KJ,$Je),e(th,IJe),e(th,yk),e(yk,jJe),e(th,NJe),e(E,DJe),e(E,ah),e(ah,ZJ),e(ZJ,qJe),e(ah,GJe),e(ah,wk),e(wk,OJe),e(ah,XJe),e(E,VJe),e(E,Es),e(Es,eY),e(eY,zJe),e(Es,WJe),e(Es,Ak),e(Ak,QJe),e(Es,HJe),e(Es,Lk),e(Lk,UJe),e(Es,JJe),e(E,YJe),e(E,ys),e(ys,oY),e(oY,KJe),e(ys,ZJe),e(ys,Bk),e(Bk,eYe),e(ys,oYe),e(ys,xk),e(xk,rYe),e(ys,tYe),e(E,aYe),e(E,nh),e(nh,rY),e(rY,nYe),e(nh,sYe),e(nh,kk),e(kk,lYe),e(nh,iYe),e(E,dYe),e(E,ws),e(ws,tY),e(tY,cYe),e(ws,fYe),e(ws,Rk),e(Rk,mYe),e(ws,gYe),e(ws,Sk),e(Sk,hYe),e(ws,pYe),e(E,_Ye),e(E,As),e(As,aY),e(aY,uYe),e(As,bYe),e(As,Pk),e(Pk,vYe),e(As,TYe),e(As,$k),e($k,FYe),e(As,CYe),e(E,MYe),e(E,Ls),e(Ls,nY),e(nY,EYe),e(Ls,yYe),e(Ls,Ik),e(Ik,wYe),e(Ls,AYe),e(Ls,jk),e(jk,LYe),e(Ls,BYe),e(E,xYe),e(E,Bs),e(Bs,sY),e(sY,kYe),e(Bs,RYe),e(Bs,Nk),e(Nk,SYe),e(Bs,PYe),e(Bs,Dk),e(Dk,$Ye),e(Bs,IYe),e(E,jYe),e(E,xs),e(xs,lY),e(lY,NYe),e(xs,DYe),e(xs,qk),e(qk,qYe),e(xs,GYe),e(xs,Gk),e(Gk,OYe),e(xs,XYe),e(E,VYe),e(E,sh),e(sh,iY),e(iY,zYe),e(sh,WYe),e(sh,Ok),e(Ok,QYe),e(sh,HYe),e(E,UYe),e(E,lh),e(lh,dY),e(dY,JYe),e(lh,YYe),e(lh,Xk),e(Xk,KYe),e(lh,ZYe),e(E,eKe),e(E,ih),e(ih,cY),e(cY,oKe),e(ih,rKe),e(ih,Vk),e(Vk,tKe),e(ih,aKe),e(E,nKe),e(E,dh),e(dh,fY),e(fY,sKe),e(dh,lKe),e(dh,zk),e(zk,iKe),e(dh,dKe),e(E,cKe),e(E,ks),e(ks,mY),e(mY,fKe),e(ks,mKe),e(ks,Wk),e(Wk,gKe),e(ks,hKe),e(ks,Qk),e(Qk,pKe),e(ks,_Ke),e(E,uKe),e(E,ch),e(ch,gY),e(gY,bKe),e(ch,vKe),e(ch,Hk),e(Hk,TKe),e(ch,FKe),e(E,CKe),e(E,Rs),e(Rs,hY),e(hY,MKe),e(Rs,EKe),e(Rs,Uk),e(Uk,yKe),e(Rs,wKe),e(Rs,Jk),e(Jk,AKe),e(Rs,LKe),e(E,BKe),e(E,Ss),e(Ss,pY),e(pY,xKe),e(Ss,kKe),e(Ss,Yk),e(Yk,RKe),e(Ss,SKe),e(Ss,Kk),e(Kk,PKe),e(Ss,$Ke),e(E,IKe),e(E,Ps),e(Ps,_Y),e(_Y,jKe),e(Ps,NKe),e(Ps,Zk),e(Zk,DKe),e(Ps,qKe),e(Ps,eR),e(eR,GKe),e(Ps,OKe),e(E,XKe),e(E,$s),e($s,uY),e(uY,VKe),e($s,zKe),e($s,oR),e(oR,WKe),e($s,QKe),e($s,rR),e(rR,HKe),e($s,UKe),e(E,JKe),e(E,Is),e(Is,bY),e(bY,YKe),e(Is,KKe),e(Is,tR),e(tR,ZKe),e(Is,eZe),e(Is,aR),e(aR,oZe),e(Is,rZe),e(E,tZe),e(E,js),e(js,vY),e(vY,aZe),e(js,nZe),e(js,nR),e(nR,sZe),e(js,lZe),e(js,sR),e(sR,iZe),e(js,dZe),e(E,cZe),e(E,fh),e(fh,TY),e(TY,fZe),e(fh,mZe),e(fh,lR),e(lR,gZe),e(fh,hZe),e(E,pZe),e(E,mh),e(mh,FY),e(FY,_Ze),e(mh,uZe),e(mh,iR),e(iR,bZe),e(mh,vZe),e(E,TZe),e(E,Ns),e(Ns,CY),e(CY,FZe),e(Ns,CZe),e(Ns,dR),e(dR,MZe),e(Ns,EZe),e(Ns,cR),e(cR,yZe),e(Ns,wZe),e(E,AZe),e(E,Ds),e(Ds,MY),e(MY,LZe),e(Ds,BZe),e(Ds,fR),e(fR,xZe),e(Ds,kZe),e(Ds,mR),e(mR,RZe),e(Ds,SZe),e(E,PZe),e(E,qs),e(qs,EY),e(EY,$Ze),e(qs,IZe),e(qs,gR),e(gR,jZe),e(qs,NZe),e(qs,hR),e(hR,DZe),e(qs,qZe),e(E,GZe),e(E,gh),e(gh,yY),e(yY,OZe),e(gh,XZe),e(gh,pR),e(pR,VZe),e(gh,zZe),e(E,WZe),e(E,hh),e(hh,wY),e(wY,QZe),e(hh,HZe),e(hh,_R),e(_R,UZe),e(hh,JZe),e(E,YZe),e(E,ph),e(ph,AY),e(AY,KZe),e(ph,ZZe),e(ph,uR),e(uR,eeo),e(ph,oeo),e(E,reo),e(E,_h),e(_h,LY),e(LY,teo),e(_h,aeo),e(_h,bR),e(bR,neo),e(_h,seo),e(E,leo),e(E,Gs),e(Gs,BY),e(BY,ieo),e(Gs,deo),e(Gs,vR),e(vR,ceo),e(Gs,feo),e(Gs,TR),e(TR,meo),e(Gs,geo),e(E,heo),e(E,uh),e(uh,xY),e(xY,peo),e(uh,_eo),e(uh,FR),e(FR,ueo),e(uh,beo),e(E,veo),e(E,bh),e(bh,kY),e(kY,Teo),e(bh,Feo),e(bh,CR),e(CR,Ceo),e(bh,Meo),e(E,Eeo),e(E,Os),e(Os,RY),e(RY,yeo),e(Os,weo),e(Os,MR),e(MR,Aeo),e(Os,Leo),e(Os,ER),e(ER,Beo),e(Os,xeo),e(E,keo),e(E,Xs),e(Xs,SY),e(SY,Reo),e(Xs,Seo),e(Xs,yR),e(yR,Peo),e(Xs,$eo),e(Xs,wR),e(wR,Ieo),e(Xs,jeo),e(go,Neo),e(go,PY),e(PY,Deo),e(go,qeo),g(P4,go,null),e(Ho,Geo),e(Ho,vh),g($4,vh,null),e(vh,Oeo),e(vh,$Y),e($Y,Xeo),b(d,Gke,u),b(d,od,u),e(od,Th),e(Th,IY),g(I4,IY,null),e(od,Veo),e(od,jY),e(jY,zeo),b(d,Oke,u),b(d,Uo,u),g(j4,Uo,null),e(Uo,Weo),e(Uo,N4),e(N4,Qeo),e(N4,AR),e(AR,Heo),e(N4,Ueo),e(Uo,Jeo),e(Uo,D4),e(D4,Yeo),e(D4,NY),e(NY,Keo),e(D4,Zeo),e(Uo,eoo),e(Uo,Ie),g(q4,Ie,null),e(Ie,ooo),e(Ie,DY),e(DY,roo),e(Ie,too),e(Ie,Qa),e(Qa,aoo),e(Qa,qY),e(qY,noo),e(Qa,soo),e(Qa,GY),e(GY,loo),e(Qa,ioo),e(Qa,OY),e(OY,doo),e(Qa,coo),e(Ie,foo),e(Ie,re),e(re,Fh),e(Fh,XY),e(XY,moo),e(Fh,goo),e(Fh,LR),e(LR,hoo),e(Fh,poo),e(re,_oo),e(re,Ch),e(Ch,VY),e(VY,uoo),e(Ch,boo),e(Ch,BR),e(BR,voo),e(Ch,Too),e(re,Foo),e(re,Mh),e(Mh,zY),e(zY,Coo),e(Mh,Moo),e(Mh,xR),e(xR,Eoo),e(Mh,yoo),e(re,woo),e(re,Eh),e(Eh,WY),e(WY,Aoo),e(Eh,Loo),e(Eh,kR),e(kR,Boo),e(Eh,xoo),e(re,koo),e(re,yh),e(yh,QY),e(QY,Roo),e(yh,Soo),e(yh,RR),e(RR,Poo),e(yh,$oo),e(re,Ioo),e(re,wh),e(wh,HY),e(HY,joo),e(wh,Noo),e(wh,SR),e(SR,Doo),e(wh,qoo),e(re,Goo),e(re,Ah),e(Ah,UY),e(UY,Ooo),e(Ah,Xoo),e(Ah,PR),e(PR,Voo),e(Ah,zoo),e(re,Woo),e(re,Lh),e(Lh,JY),e(JY,Qoo),e(Lh,Hoo),e(Lh,$R),e($R,Uoo),e(Lh,Joo),e(re,Yoo),e(re,Bh),e(Bh,YY),e(YY,Koo),e(Bh,Zoo),e(Bh,IR),e(IR,ero),e(Bh,oro),e(re,rro),e(re,xh),e(xh,KY),e(KY,tro),e(xh,aro),e(xh,jR),e(jR,nro),e(xh,sro),e(re,lro),e(re,kh),e(kh,ZY),e(ZY,iro),e(kh,dro),e(kh,NR),e(NR,cro),e(kh,fro),e(re,mro),e(re,Rh),e(Rh,eK),e(eK,gro),e(Rh,hro),e(Rh,DR),e(DR,pro),e(Rh,_ro),e(re,uro),e(re,Sh),e(Sh,oK),e(oK,bro),e(Sh,vro),e(Sh,qR),e(qR,Tro),e(Sh,Fro),e(re,Cro),e(re,Ph),e(Ph,rK),e(rK,Mro),e(Ph,Ero),e(Ph,GR),e(GR,yro),e(Ph,wro),e(re,Aro),e(re,$h),e($h,tK),e(tK,Lro),e($h,Bro),e($h,OR),e(OR,xro),e($h,kro),e(re,Rro),e(re,Ih),e(Ih,aK),e(aK,Sro),e(Ih,Pro),e(Ih,XR),e(XR,$ro),e(Ih,Iro),e(re,jro),e(re,jh),e(jh,nK),e(nK,Nro),e(jh,Dro),e(jh,VR),e(VR,qro),e(jh,Gro),e(re,Oro),e(re,Nh),e(Nh,sK),e(sK,Xro),e(Nh,Vro),e(Nh,zR),e(zR,zro),e(Nh,Wro),e(Ie,Qro),g(Dh,Ie,null),e(Ie,Hro),e(Ie,lK),e(lK,Uro),e(Ie,Jro),g(G4,Ie,null),e(Uo,Yro),e(Uo,qh),g(O4,qh,null),e(qh,Kro),e(qh,iK),e(iK,Zro),b(d,Xke,u),b(d,rd,u),e(rd,Gh),e(Gh,dK),g(X4,dK,null),e(rd,eto),e(rd,cK),e(cK,oto),b(d,Vke,u),b(d,Jo,u),g(V4,Jo,null),e(Jo,rto),e(Jo,z4),e(z4,tto),e(z4,WR),e(WR,ato),e(z4,nto),e(Jo,sto),e(Jo,W4),e(W4,lto),e(W4,fK),e(fK,ito),e(W4,dto),e(Jo,cto),e(Jo,je),g(Q4,je,null),e(je,fto),e(je,mK),e(mK,mto),e(je,gto),e(je,td),e(td,hto),e(td,gK),e(gK,pto),e(td,_to),e(td,hK),e(hK,uto),e(td,bto),e(je,vto),e(je,xe),e(xe,Oh),e(Oh,pK),e(pK,Tto),e(Oh,Fto),e(Oh,QR),e(QR,Cto),e(Oh,Mto),e(xe,Eto),e(xe,Xh),e(Xh,_K),e(_K,yto),e(Xh,wto),e(Xh,HR),e(HR,Ato),e(Xh,Lto),e(xe,Bto),e(xe,Vh),e(Vh,uK),e(uK,xto),e(Vh,kto),e(Vh,UR),e(UR,Rto),e(Vh,Sto),e(xe,Pto),e(xe,zh),e(zh,bK),e(bK,$to),e(zh,Ito),e(zh,JR),e(JR,jto),e(zh,Nto),e(xe,Dto),e(xe,Wh),e(Wh,vK),e(vK,qto),e(Wh,Gto),e(Wh,YR),e(YR,Oto),e(Wh,Xto),e(xe,Vto),e(xe,Qh),e(Qh,TK),e(TK,zto),e(Qh,Wto),e(Qh,KR),e(KR,Qto),e(Qh,Hto),e(xe,Uto),e(xe,Hh),e(Hh,FK),e(FK,Jto),e(Hh,Yto),e(Hh,ZR),e(ZR,Kto),e(Hh,Zto),e(xe,eao),e(xe,Uh),e(Uh,CK),e(CK,oao),e(Uh,rao),e(Uh,eS),e(eS,tao),e(Uh,aao),e(je,nao),g(Jh,je,null),e(je,sao),e(je,MK),e(MK,lao),e(je,iao),g(H4,je,null),e(Jo,dao),e(Jo,Yh),g(U4,Yh,null),e(Yh,cao),e(Yh,EK),e(EK,fao),b(d,zke,u),b(d,ad,u),e(ad,Kh),e(Kh,yK),g(J4,yK,null),e(ad,mao),e(ad,wK),e(wK,gao),b(d,Wke,u),b(d,Yo,u),g(Y4,Yo,null),e(Yo,hao),e(Yo,nd),e(nd,pao),e(nd,AK),e(AK,_ao),e(nd,uao),e(nd,LK),e(LK,bao),e(nd,vao),e(Yo,Tao),e(Yo,K4),e(K4,Fao),e(K4,BK),e(BK,Cao),e(K4,Mao),e(Yo,Eao),e(Yo,Wr),g(Z4,Wr,null),e(Wr,yao),e(Wr,xK),e(xK,wao),e(Wr,Aao),e(Wr,sd),e(sd,Lao),e(sd,kK),e(kK,Bao),e(sd,xao),e(sd,RK),e(RK,kao),e(sd,Rao),e(Wr,Sao),e(Wr,SK),e(SK,Pao),e(Wr,$ao),g(eE,Wr,null),e(Yo,Iao),e(Yo,Ne),g(oE,Ne,null),e(Ne,jao),e(Ne,PK),e(PK,Nao),e(Ne,Dao),e(Ne,Ha),e(Ha,qao),e(Ha,$K),e($K,Gao),e(Ha,Oao),e(Ha,IK),e(IK,Xao),e(Ha,Vao),e(Ha,jK),e(jK,zao),e(Ha,Wao),e(Ne,Qao),e(Ne,F),e(F,Zh),e(Zh,NK),e(NK,Hao),e(Zh,Uao),e(Zh,oS),e(oS,Jao),e(Zh,Yao),e(F,Kao),e(F,ep),e(ep,DK),e(DK,Zao),e(ep,eno),e(ep,rS),e(rS,ono),e(ep,rno),e(F,tno),e(F,op),e(op,qK),e(qK,ano),e(op,nno),e(op,tS),e(tS,sno),e(op,lno),e(F,ino),e(F,rp),e(rp,GK),e(GK,dno),e(rp,cno),e(rp,aS),e(aS,fno),e(rp,mno),e(F,gno),e(F,tp),e(tp,OK),e(OK,hno),e(tp,pno),e(tp,nS),e(nS,_no),e(tp,uno),e(F,bno),e(F,ap),e(ap,XK),e(XK,vno),e(ap,Tno),e(ap,sS),e(sS,Fno),e(ap,Cno),e(F,Mno),e(F,np),e(np,VK),e(VK,Eno),e(np,yno),e(np,lS),e(lS,wno),e(np,Ano),e(F,Lno),e(F,sp),e(sp,zK),e(zK,Bno),e(sp,xno),e(sp,iS),e(iS,kno),e(sp,Rno),e(F,Sno),e(F,lp),e(lp,WK),e(WK,Pno),e(lp,$no),e(lp,dS),e(dS,Ino),e(lp,jno),e(F,Nno),e(F,ip),e(ip,QK),e(QK,Dno),e(ip,qno),e(ip,cS),e(cS,Gno),e(ip,Ono),e(F,Xno),e(F,dp),e(dp,HK),e(HK,Vno),e(dp,zno),e(dp,fS),e(fS,Wno),e(dp,Qno),e(F,Hno),e(F,cp),e(cp,UK),e(UK,Uno),e(cp,Jno),e(cp,mS),e(mS,Yno),e(cp,Kno),e(F,Zno),e(F,fp),e(fp,JK),e(JK,eso),e(fp,oso),e(fp,gS),e(gS,rso),e(fp,tso),e(F,aso),e(F,mp),e(mp,YK),e(YK,nso),e(mp,sso),e(mp,hS),e(hS,lso),e(mp,iso),e(F,dso),e(F,gp),e(gp,KK),e(KK,cso),e(gp,fso),e(gp,pS),e(pS,mso),e(gp,gso),e(F,hso),e(F,hp),e(hp,ZK),e(ZK,pso),e(hp,_so),e(hp,_S),e(_S,uso),e(hp,bso),e(F,vso),e(F,pp),e(pp,eZ),e(eZ,Tso),e(pp,Fso),e(pp,uS),e(uS,Cso),e(pp,Mso),e(F,Eso),e(F,_p),e(_p,oZ),e(oZ,yso),e(_p,wso),e(_p,bS),e(bS,Aso),e(_p,Lso),e(F,Bso),e(F,up),e(up,rZ),e(rZ,xso),e(up,kso),e(up,vS),e(vS,Rso),e(up,Sso),e(F,Pso),e(F,bp),e(bp,tZ),e(tZ,$so),e(bp,Iso),e(bp,TS),e(TS,jso),e(bp,Nso),e(F,Dso),e(F,vp),e(vp,aZ),e(aZ,qso),e(vp,Gso),e(vp,FS),e(FS,Oso),e(vp,Xso),e(F,Vso),e(F,Tp),e(Tp,nZ),e(nZ,zso),e(Tp,Wso),e(Tp,CS),e(CS,Qso),e(Tp,Hso),e(F,Uso),e(F,Fp),e(Fp,sZ),e(sZ,Jso),e(Fp,Yso),e(Fp,MS),e(MS,Kso),e(Fp,Zso),e(F,elo),e(F,Cp),e(Cp,lZ),e(lZ,olo),e(Cp,rlo),e(Cp,ES),e(ES,tlo),e(Cp,alo),e(F,nlo),e(F,Mp),e(Mp,iZ),e(iZ,slo),e(Mp,llo),e(Mp,yS),e(yS,ilo),e(Mp,dlo),e(F,clo),e(F,Ep),e(Ep,dZ),e(dZ,flo),e(Ep,mlo),e(Ep,wS),e(wS,glo),e(Ep,hlo),e(F,plo),e(F,yp),e(yp,cZ),e(cZ,_lo),e(yp,ulo),e(yp,AS),e(AS,blo),e(yp,vlo),e(F,Tlo),e(F,Vs),e(Vs,fZ),e(fZ,Flo),e(Vs,Clo),e(Vs,LS),e(LS,Mlo),e(Vs,Elo),e(Vs,BS),e(BS,ylo),e(Vs,wlo),e(F,Alo),e(F,wp),e(wp,mZ),e(mZ,Llo),e(wp,Blo),e(wp,xS),e(xS,xlo),e(wp,klo),e(F,Rlo),e(F,Ap),e(Ap,gZ),e(gZ,Slo),e(Ap,Plo),e(Ap,kS),e(kS,$lo),e(Ap,Ilo),e(F,jlo),e(F,Lp),e(Lp,hZ),e(hZ,Nlo),e(Lp,Dlo),e(Lp,RS),e(RS,qlo),e(Lp,Glo),e(F,Olo),e(F,Bp),e(Bp,pZ),e(pZ,Xlo),e(Bp,Vlo),e(Bp,SS),e(SS,zlo),e(Bp,Wlo),e(F,Qlo),e(F,xp),e(xp,_Z),e(_Z,Hlo),e(xp,Ulo),e(xp,PS),e(PS,Jlo),e(xp,Ylo),e(F,Klo),e(F,kp),e(kp,uZ),e(uZ,Zlo),e(kp,eio),e(kp,$S),e($S,oio),e(kp,rio),e(F,tio),e(F,Rp),e(Rp,bZ),e(bZ,aio),e(Rp,nio),e(Rp,IS),e(IS,sio),e(Rp,lio),e(F,iio),e(F,Sp),e(Sp,vZ),e(vZ,dio),e(Sp,cio),e(Sp,jS),e(jS,fio),e(Sp,mio),e(F,gio),e(F,Pp),e(Pp,TZ),e(TZ,hio),e(Pp,pio),e(Pp,NS),e(NS,_io),e(Pp,uio),e(F,bio),e(F,$p),e($p,FZ),e(FZ,vio),e($p,Tio),e($p,DS),e(DS,Fio),e($p,Cio),e(F,Mio),e(F,Ip),e(Ip,CZ),e(CZ,Eio),e(Ip,yio),e(Ip,qS),e(qS,wio),e(Ip,Aio),e(F,Lio),e(F,jp),e(jp,MZ),e(MZ,Bio),e(jp,xio),e(jp,GS),e(GS,kio),e(jp,Rio),e(F,Sio),e(F,Np),e(Np,EZ),e(EZ,Pio),e(Np,$io),e(Np,OS),e(OS,Iio),e(Np,jio),e(F,Nio),e(F,Dp),e(Dp,yZ),e(yZ,Dio),e(Dp,qio),e(Dp,XS),e(XS,Gio),e(Dp,Oio),e(F,Xio),e(F,qp),e(qp,wZ),e(wZ,Vio),e(qp,zio),e(qp,VS),e(VS,Wio),e(qp,Qio),e(F,Hio),e(F,Gp),e(Gp,AZ),e(AZ,Uio),e(Gp,Jio),e(Gp,zS),e(zS,Yio),e(Gp,Kio),e(F,Zio),e(F,Op),e(Op,LZ),e(LZ,edo),e(Op,odo),e(Op,WS),e(WS,rdo),e(Op,tdo),e(F,ado),e(F,Xp),e(Xp,BZ),e(BZ,ndo),e(Xp,sdo),e(Xp,QS),e(QS,ldo),e(Xp,ido),e(F,ddo),e(F,Vp),e(Vp,xZ),e(xZ,cdo),e(Vp,fdo),e(Vp,HS),e(HS,mdo),e(Vp,gdo),e(F,hdo),e(F,zp),e(zp,kZ),e(kZ,pdo),e(zp,_do),e(zp,US),e(US,udo),e(zp,bdo),e(F,vdo),e(F,Wp),e(Wp,RZ),e(RZ,Tdo),e(Wp,Fdo),e(Wp,JS),e(JS,Cdo),e(Wp,Mdo),e(F,Edo),e(F,Qp),e(Qp,SZ),e(SZ,ydo),e(Qp,wdo),e(Qp,YS),e(YS,Ado),e(Qp,Ldo),e(F,Bdo),e(F,Hp),e(Hp,PZ),e(PZ,xdo),e(Hp,kdo),e(Hp,KS),e(KS,Rdo),e(Hp,Sdo),e(F,Pdo),e(F,Up),e(Up,$Z),e($Z,$do),e(Up,Ido),e(Up,ZS),e(ZS,jdo),e(Up,Ndo),e(F,Ddo),e(F,Jp),e(Jp,IZ),e(IZ,qdo),e(Jp,Gdo),e(Jp,eP),e(eP,Odo),e(Jp,Xdo),e(F,Vdo),e(F,Yp),e(Yp,jZ),e(jZ,zdo),e(Yp,Wdo),e(Yp,oP),e(oP,Qdo),e(Yp,Hdo),e(F,Udo),e(F,Kp),e(Kp,NZ),e(NZ,Jdo),e(Kp,Ydo),e(Kp,rP),e(rP,Kdo),e(Kp,Zdo),e(F,eco),e(F,Zp),e(Zp,DZ),e(DZ,oco),e(Zp,rco),e(Zp,tP),e(tP,tco),e(Zp,aco),e(F,nco),e(F,e_),e(e_,qZ),e(qZ,sco),e(e_,lco),e(e_,aP),e(aP,ico),e(e_,dco),e(F,cco),e(F,o_),e(o_,GZ),e(GZ,fco),e(o_,mco),e(o_,nP),e(nP,gco),e(o_,hco),e(F,pco),e(F,r_),e(r_,OZ),e(OZ,_co),e(r_,uco),e(r_,sP),e(sP,bco),e(r_,vco),e(F,Tco),e(F,t_),e(t_,XZ),e(XZ,Fco),e(t_,Cco),e(t_,lP),e(lP,Mco),e(t_,Eco),e(F,yco),e(F,a_),e(a_,VZ),e(VZ,wco),e(a_,Aco),e(a_,iP),e(iP,Lco),e(a_,Bco),e(F,xco),e(F,n_),e(n_,zZ),e(zZ,kco),e(n_,Rco),e(n_,dP),e(dP,Sco),e(n_,Pco),e(F,$co),e(F,s_),e(s_,WZ),e(WZ,Ico),e(s_,jco),e(s_,cP),e(cP,Nco),e(s_,Dco),e(F,qco),e(F,l_),e(l_,QZ),e(QZ,Gco),e(l_,Oco),e(l_,fP),e(fP,Xco),e(l_,Vco),e(F,zco),e(F,i_),e(i_,HZ),e(HZ,Wco),e(i_,Qco),e(i_,mP),e(mP,Hco),e(i_,Uco),e(F,Jco),e(F,d_),e(d_,UZ),e(UZ,Yco),e(d_,Kco),e(d_,gP),e(gP,Zco),e(d_,efo),e(F,ofo),e(F,c_),e(c_,JZ),e(JZ,rfo),e(c_,tfo),e(c_,hP),e(hP,afo),e(c_,nfo),e(F,sfo),e(F,f_),e(f_,YZ),e(YZ,lfo),e(f_,ifo),e(f_,pP),e(pP,dfo),e(f_,cfo),e(F,ffo),e(F,m_),e(m_,KZ),e(KZ,mfo),e(m_,gfo),e(m_,_P),e(_P,hfo),e(m_,pfo),e(F,_fo),e(F,g_),e(g_,ZZ),e(ZZ,ufo),e(g_,bfo),e(g_,uP),e(uP,vfo),e(g_,Tfo),e(F,Ffo),e(F,h_),e(h_,eee),e(eee,Cfo),e(h_,Mfo),e(h_,bP),e(bP,Efo),e(h_,yfo),e(F,wfo),e(F,p_),e(p_,oee),e(oee,Afo),e(p_,Lfo),e(p_,vP),e(vP,Bfo),e(p_,xfo),e(F,kfo),e(F,__),e(__,ree),e(ree,Rfo),e(__,Sfo),e(__,TP),e(TP,Pfo),e(__,$fo),e(F,Ifo),e(F,u_),e(u_,tee),e(tee,jfo),e(u_,Nfo),e(u_,FP),e(FP,Dfo),e(u_,qfo),e(F,Gfo),e(F,b_),e(b_,aee),e(aee,Ofo),e(b_,Xfo),e(b_,CP),e(CP,Vfo),e(b_,zfo),e(F,Wfo),e(F,v_),e(v_,nee),e(nee,Qfo),e(v_,Hfo),e(v_,MP),e(MP,Ufo),e(v_,Jfo),e(F,Yfo),e(F,T_),e(T_,see),e(see,Kfo),e(T_,Zfo),e(T_,EP),e(EP,emo),e(T_,omo),e(F,rmo),e(F,F_),e(F_,lee),e(lee,tmo),e(F_,amo),e(F_,yP),e(yP,nmo),e(F_,smo),e(F,lmo),e(F,C_),e(C_,iee),e(iee,imo),e(C_,dmo),e(C_,wP),e(wP,cmo),e(C_,fmo),e(F,mmo),e(F,M_),e(M_,dee),e(dee,gmo),e(M_,hmo),e(M_,AP),e(AP,pmo),e(M_,_mo),e(F,umo),e(F,E_),e(E_,cee),e(cee,bmo),e(E_,vmo),e(E_,LP),e(LP,Tmo),e(E_,Fmo),e(F,Cmo),e(F,y_),e(y_,fee),e(fee,Mmo),e(y_,Emo),e(y_,BP),e(BP,ymo),e(y_,wmo),e(F,Amo),e(F,w_),e(w_,mee),e(mee,Lmo),e(w_,Bmo),e(w_,xP),e(xP,xmo),e(w_,kmo),e(F,Rmo),e(F,A_),e(A_,gee),e(gee,Smo),e(A_,Pmo),e(A_,kP),e(kP,$mo),e(A_,Imo),e(F,jmo),e(F,L_),e(L_,hee),e(hee,Nmo),e(L_,Dmo),e(L_,RP),e(RP,qmo),e(L_,Gmo),e(F,Omo),e(F,B_),e(B_,pee),e(pee,Xmo),e(B_,Vmo),e(B_,SP),e(SP,zmo),e(B_,Wmo),e(F,Qmo),e(F,x_),e(x_,_ee),e(_ee,Hmo),e(x_,Umo),e(x_,PP),e(PP,Jmo),e(x_,Ymo),e(F,Kmo),e(F,k_),e(k_,uee),e(uee,Zmo),e(k_,ego),e(k_,$P),e($P,ogo),e(k_,rgo),e(F,tgo),e(F,R_),e(R_,bee),e(bee,ago),e(R_,ngo),e(R_,IP),e(IP,sgo),e(R_,lgo),e(F,igo),e(F,S_),e(S_,vee),e(vee,dgo),e(S_,cgo),e(S_,jP),e(jP,fgo),e(S_,mgo),e(Ne,ggo),e(Ne,P_),e(P_,hgo),e(P_,Tee),e(Tee,pgo),e(P_,_go),e(P_,Fee),e(Fee,ugo),e(Ne,bgo),e(Ne,Cee),e(Cee,vgo),e(Ne,Tgo),g(rE,Ne,null),b(d,Qke,u),b(d,ld,u),e(ld,$_),e($_,Mee),g(tE,Mee,null),e(ld,Fgo),e(ld,Eee),e(Eee,Cgo),b(d,Hke,u),b(d,Ko,u),g(aE,Ko,null),e(Ko,Mgo),e(Ko,id),e(id,Ego),e(id,yee),e(yee,ygo),e(id,wgo),e(id,wee),e(wee,Ago),e(id,Lgo),e(Ko,Bgo),e(Ko,nE),e(nE,xgo),e(nE,Aee),e(Aee,kgo),e(nE,Rgo),e(Ko,Sgo),e(Ko,Qr),g(sE,Qr,null),e(Qr,Pgo),e(Qr,Lee),e(Lee,$go),e(Qr,Igo),e(Qr,dd),e(dd,jgo),e(dd,Bee),e(Bee,Ngo),e(dd,Dgo),e(dd,xee),e(xee,qgo),e(dd,Ggo),e(Qr,Ogo),e(Qr,kee),e(kee,Xgo),e(Qr,Vgo),g(lE,Qr,null),e(Ko,zgo),e(Ko,De),g(iE,De,null),e(De,Wgo),e(De,Ree),e(Ree,Qgo),e(De,Hgo),e(De,Ua),e(Ua,Ugo),e(Ua,See),e(See,Jgo),e(Ua,Ygo),e(Ua,Pee),e(Pee,Kgo),e(Ua,Zgo),e(Ua,$ee),e($ee,eho),e(Ua,oho),e(De,rho),e(De,k),e(k,I_),e(I_,Iee),e(Iee,tho),e(I_,aho),e(I_,NP),e(NP,nho),e(I_,sho),e(k,lho),e(k,j_),e(j_,jee),e(jee,iho),e(j_,dho),e(j_,DP),e(DP,cho),e(j_,fho),e(k,mho),e(k,N_),e(N_,Nee),e(Nee,gho),e(N_,hho),e(N_,qP),e(qP,pho),e(N_,_ho),e(k,uho),e(k,D_),e(D_,Dee),e(Dee,bho),e(D_,vho),e(D_,GP),e(GP,Tho),e(D_,Fho),e(k,Cho),e(k,q_),e(q_,qee),e(qee,Mho),e(q_,Eho),e(q_,OP),e(OP,yho),e(q_,who),e(k,Aho),e(k,G_),e(G_,Gee),e(Gee,Lho),e(G_,Bho),e(G_,XP),e(XP,xho),e(G_,kho),e(k,Rho),e(k,O_),e(O_,Oee),e(Oee,Sho),e(O_,Pho),e(O_,VP),e(VP,$ho),e(O_,Iho),e(k,jho),e(k,X_),e(X_,Xee),e(Xee,Nho),e(X_,Dho),e(X_,zP),e(zP,qho),e(X_,Gho),e(k,Oho),e(k,V_),e(V_,Vee),e(Vee,Xho),e(V_,Vho),e(V_,WP),e(WP,zho),e(V_,Who),e(k,Qho),e(k,z_),e(z_,zee),e(zee,Hho),e(z_,Uho),e(z_,QP),e(QP,Jho),e(z_,Yho),e(k,Kho),e(k,W_),e(W_,Wee),e(Wee,Zho),e(W_,epo),e(W_,HP),e(HP,opo),e(W_,rpo),e(k,tpo),e(k,Q_),e(Q_,Qee),e(Qee,apo),e(Q_,npo),e(Q_,UP),e(UP,spo),e(Q_,lpo),e(k,ipo),e(k,H_),e(H_,Hee),e(Hee,dpo),e(H_,cpo),e(H_,JP),e(JP,fpo),e(H_,mpo),e(k,gpo),e(k,U_),e(U_,Uee),e(Uee,hpo),e(U_,ppo),e(U_,YP),e(YP,_po),e(U_,upo),e(k,bpo),e(k,J_),e(J_,Jee),e(Jee,vpo),e(J_,Tpo),e(J_,KP),e(KP,Fpo),e(J_,Cpo),e(k,Mpo),e(k,Y_),e(Y_,Yee),e(Yee,Epo),e(Y_,ypo),e(Y_,ZP),e(ZP,wpo),e(Y_,Apo),e(k,Lpo),e(k,K_),e(K_,Kee),e(Kee,Bpo),e(K_,xpo),e(K_,e$),e(e$,kpo),e(K_,Rpo),e(k,Spo),e(k,Z_),e(Z_,Zee),e(Zee,Ppo),e(Z_,$po),e(Z_,o$),e(o$,Ipo),e(Z_,jpo),e(k,Npo),e(k,eu),e(eu,eoe),e(eoe,Dpo),e(eu,qpo),e(eu,r$),e(r$,Gpo),e(eu,Opo),e(k,Xpo),e(k,ou),e(ou,ooe),e(ooe,Vpo),e(ou,zpo),e(ou,t$),e(t$,Wpo),e(ou,Qpo),e(k,Hpo),e(k,ru),e(ru,roe),e(roe,Upo),e(ru,Jpo),e(ru,a$),e(a$,Ypo),e(ru,Kpo),e(k,Zpo),e(k,tu),e(tu,toe),e(toe,e_o),e(tu,o_o),e(tu,n$),e(n$,r_o),e(tu,t_o),e(k,a_o),e(k,au),e(au,aoe),e(aoe,n_o),e(au,s_o),e(au,s$),e(s$,l_o),e(au,i_o),e(k,d_o),e(k,nu),e(nu,noe),e(noe,c_o),e(nu,f_o),e(nu,l$),e(l$,m_o),e(nu,g_o),e(k,h_o),e(k,su),e(su,soe),e(soe,p_o),e(su,__o),e(su,i$),e(i$,u_o),e(su,b_o),e(k,v_o),e(k,lu),e(lu,loe),e(loe,T_o),e(lu,F_o),e(lu,d$),e(d$,C_o),e(lu,M_o),e(k,E_o),e(k,iu),e(iu,ioe),e(ioe,y_o),e(iu,w_o),e(iu,c$),e(c$,A_o),e(iu,L_o),e(k,B_o),e(k,du),e(du,doe),e(doe,x_o),e(du,k_o),e(du,f$),e(f$,R_o),e(du,S_o),e(k,P_o),e(k,cu),e(cu,coe),e(coe,$_o),e(cu,I_o),e(cu,m$),e(m$,j_o),e(cu,N_o),e(k,D_o),e(k,fu),e(fu,foe),e(foe,q_o),e(fu,G_o),e(fu,g$),e(g$,O_o),e(fu,X_o),e(k,V_o),e(k,mu),e(mu,moe),e(moe,z_o),e(mu,W_o),e(mu,h$),e(h$,Q_o),e(mu,H_o),e(k,U_o),e(k,gu),e(gu,goe),e(goe,J_o),e(gu,Y_o),e(gu,p$),e(p$,K_o),e(gu,Z_o),e(k,euo),e(k,hu),e(hu,hoe),e(hoe,ouo),e(hu,ruo),e(hu,_$),e(_$,tuo),e(hu,auo),e(k,nuo),e(k,pu),e(pu,poe),e(poe,suo),e(pu,luo),e(pu,u$),e(u$,iuo),e(pu,duo),e(k,cuo),e(k,_u),e(_u,_oe),e(_oe,fuo),e(_u,muo),e(_u,b$),e(b$,guo),e(_u,huo),e(k,puo),e(k,uu),e(uu,uoe),e(uoe,_uo),e(uu,uuo),e(uu,v$),e(v$,buo),e(uu,vuo),e(k,Tuo),e(k,bu),e(bu,boe),e(boe,Fuo),e(bu,Cuo),e(bu,T$),e(T$,Muo),e(bu,Euo),e(k,yuo),e(k,vu),e(vu,voe),e(voe,wuo),e(vu,Auo),e(vu,F$),e(F$,Luo),e(vu,Buo),e(k,xuo),e(k,Tu),e(Tu,Toe),e(Toe,kuo),e(Tu,Ruo),e(Tu,C$),e(C$,Suo),e(Tu,Puo),e(De,$uo),e(De,Fu),e(Fu,Iuo),e(Fu,Foe),e(Foe,juo),e(Fu,Nuo),e(Fu,Coe),e(Coe,Duo),e(De,quo),e(De,Moe),e(Moe,Guo),e(De,Ouo),g(dE,De,null),b(d,Uke,u),b(d,cd,u),e(cd,Cu),e(Cu,Eoe),g(cE,Eoe,null),e(cd,Xuo),e(cd,yoe),e(yoe,Vuo),b(d,Jke,u),b(d,Zo,u),g(fE,Zo,null),e(Zo,zuo),e(Zo,fd),e(fd,Wuo),e(fd,woe),e(woe,Quo),e(fd,Huo),e(fd,Aoe),e(Aoe,Uuo),e(fd,Juo),e(Zo,Yuo),e(Zo,mE),e(mE,Kuo),e(mE,Loe),e(Loe,Zuo),e(mE,e1o),e(Zo,o1o),e(Zo,Hr),g(gE,Hr,null),e(Hr,r1o),e(Hr,Boe),e(Boe,t1o),e(Hr,a1o),e(Hr,md),e(md,n1o),e(md,xoe),e(xoe,s1o),e(md,l1o),e(md,koe),e(koe,i1o),e(md,d1o),e(Hr,c1o),e(Hr,Roe),e(Roe,f1o),e(Hr,m1o),g(hE,Hr,null),e(Zo,g1o),e(Zo,qe),g(pE,qe,null),e(qe,h1o),e(qe,Soe),e(Soe,p1o),e(qe,_1o),e(qe,Ja),e(Ja,u1o),e(Ja,Poe),e(Poe,b1o),e(Ja,v1o),e(Ja,$oe),e($oe,T1o),e(Ja,F1o),e(Ja,Ioe),e(Ioe,C1o),e(Ja,M1o),e(qe,E1o),e(qe,$),e($,Mu),e(Mu,joe),e(joe,y1o),e(Mu,w1o),e(Mu,M$),e(M$,A1o),e(Mu,L1o),e($,B1o),e($,Eu),e(Eu,Noe),e(Noe,x1o),e(Eu,k1o),e(Eu,E$),e(E$,R1o),e(Eu,S1o),e($,P1o),e($,yu),e(yu,Doe),e(Doe,$1o),e(yu,I1o),e(yu,y$),e(y$,j1o),e(yu,N1o),e($,D1o),e($,wu),e(wu,qoe),e(qoe,q1o),e(wu,G1o),e(wu,w$),e(w$,O1o),e(wu,X1o),e($,V1o),e($,Au),e(Au,Goe),e(Goe,z1o),e(Au,W1o),e(Au,A$),e(A$,Q1o),e(Au,H1o),e($,U1o),e($,Lu),e(Lu,Ooe),e(Ooe,J1o),e(Lu,Y1o),e(Lu,L$),e(L$,K1o),e(Lu,Z1o),e($,ebo),e($,Bu),e(Bu,Xoe),e(Xoe,obo),e(Bu,rbo),e(Bu,B$),e(B$,tbo),e(Bu,abo),e($,nbo),e($,xu),e(xu,Voe),e(Voe,sbo),e(xu,lbo),e(xu,x$),e(x$,ibo),e(xu,dbo),e($,cbo),e($,ku),e(ku,zoe),e(zoe,fbo),e(ku,mbo),e(ku,k$),e(k$,gbo),e(ku,hbo),e($,pbo),e($,Ru),e(Ru,Woe),e(Woe,_bo),e(Ru,ubo),e(Ru,R$),e(R$,bbo),e(Ru,vbo),e($,Tbo),e($,Su),e(Su,Qoe),e(Qoe,Fbo),e(Su,Cbo),e(Su,S$),e(S$,Mbo),e(Su,Ebo),e($,ybo),e($,Pu),e(Pu,Hoe),e(Hoe,wbo),e(Pu,Abo),e(Pu,P$),e(P$,Lbo),e(Pu,Bbo),e($,xbo),e($,$u),e($u,Uoe),e(Uoe,kbo),e($u,Rbo),e($u,$$),e($$,Sbo),e($u,Pbo),e($,$bo),e($,Iu),e(Iu,Joe),e(Joe,Ibo),e(Iu,jbo),e(Iu,I$),e(I$,Nbo),e(Iu,Dbo),e($,qbo),e($,ju),e(ju,Yoe),e(Yoe,Gbo),e(ju,Obo),e(ju,j$),e(j$,Xbo),e(ju,Vbo),e($,zbo),e($,Nu),e(Nu,Koe),e(Koe,Wbo),e(Nu,Qbo),e(Nu,N$),e(N$,Hbo),e(Nu,Ubo),e($,Jbo),e($,Du),e(Du,Zoe),e(Zoe,Ybo),e(Du,Kbo),e(Du,D$),e(D$,Zbo),e(Du,e5o),e($,o5o),e($,qu),e(qu,ere),e(ere,r5o),e(qu,t5o),e(qu,q$),e(q$,a5o),e(qu,n5o),e($,s5o),e($,Gu),e(Gu,ore),e(ore,l5o),e(Gu,i5o),e(Gu,G$),e(G$,d5o),e(Gu,c5o),e($,f5o),e($,Ou),e(Ou,rre),e(rre,m5o),e(Ou,g5o),e(Ou,O$),e(O$,h5o),e(Ou,p5o),e($,_5o),e($,Xu),e(Xu,tre),e(tre,u5o),e(Xu,b5o),e(Xu,X$),e(X$,v5o),e(Xu,T5o),e($,F5o),e($,Vu),e(Vu,are),e(are,C5o),e(Vu,M5o),e(Vu,V$),e(V$,E5o),e(Vu,y5o),e($,w5o),e($,zu),e(zu,nre),e(nre,A5o),e(zu,L5o),e(zu,z$),e(z$,B5o),e(zu,x5o),e($,k5o),e($,Wu),e(Wu,sre),e(sre,R5o),e(Wu,S5o),e(Wu,W$),e(W$,P5o),e(Wu,$5o),e($,I5o),e($,Qu),e(Qu,lre),e(lre,j5o),e(Qu,N5o),e(Qu,Q$),e(Q$,D5o),e(Qu,q5o),e($,G5o),e($,Hu),e(Hu,ire),e(ire,O5o),e(Hu,X5o),e(Hu,H$),e(H$,V5o),e(Hu,z5o),e($,W5o),e($,Uu),e(Uu,dre),e(dre,Q5o),e(Uu,H5o),e(Uu,U$),e(U$,U5o),e(Uu,J5o),e($,Y5o),e($,Ju),e(Ju,cre),e(cre,K5o),e(Ju,Z5o),e(Ju,J$),e(J$,e2o),e(Ju,o2o),e($,r2o),e($,Yu),e(Yu,fre),e(fre,t2o),e(Yu,a2o),e(Yu,Y$),e(Y$,n2o),e(Yu,s2o),e($,l2o),e($,Ku),e(Ku,mre),e(mre,i2o),e(Ku,d2o),e(Ku,K$),e(K$,c2o),e(Ku,f2o),e($,m2o),e($,Zu),e(Zu,gre),e(gre,g2o),e(Zu,h2o),e(Zu,Z$),e(Z$,p2o),e(Zu,_2o),e($,u2o),e($,e1),e(e1,hre),e(hre,b2o),e(e1,v2o),e(e1,eI),e(eI,T2o),e(e1,F2o),e($,C2o),e($,o1),e(o1,pre),e(pre,M2o),e(o1,E2o),e(o1,oI),e(oI,y2o),e(o1,w2o),e($,A2o),e($,r1),e(r1,_re),e(_re,L2o),e(r1,B2o),e(r1,rI),e(rI,x2o),e(r1,k2o),e($,R2o),e($,t1),e(t1,ure),e(ure,S2o),e(t1,P2o),e(t1,tI),e(tI,$2o),e(t1,I2o),e(qe,j2o),e(qe,a1),e(a1,N2o),e(a1,bre),e(bre,D2o),e(a1,q2o),e(a1,vre),e(vre,G2o),e(qe,O2o),e(qe,Tre),e(Tre,X2o),e(qe,V2o),g(_E,qe,null),b(d,Yke,u),b(d,gd,u),e(gd,n1),e(n1,Fre),g(uE,Fre,null),e(gd,z2o),e(gd,Cre),e(Cre,W2o),b(d,Kke,u),b(d,er,u),g(bE,er,null),e(er,Q2o),e(er,hd),e(hd,H2o),e(hd,Mre),e(Mre,U2o),e(hd,J2o),e(hd,Ere),e(Ere,Y2o),e(hd,K2o),e(er,Z2o),e(er,vE),e(vE,evo),e(vE,yre),e(yre,ovo),e(vE,rvo),e(er,tvo),e(er,Ur),g(TE,Ur,null),e(Ur,avo),e(Ur,wre),e(wre,nvo),e(Ur,svo),e(Ur,pd),e(pd,lvo),e(pd,Are),e(Are,ivo),e(pd,dvo),e(pd,Lre),e(Lre,cvo),e(pd,fvo),e(Ur,mvo),e(Ur,Bre),e(Bre,gvo),e(Ur,hvo),g(FE,Ur,null),e(er,pvo),e(er,Ge),g(CE,Ge,null),e(Ge,_vo),e(Ge,xre),e(xre,uvo),e(Ge,bvo),e(Ge,Ya),e(Ya,vvo),e(Ya,kre),e(kre,Tvo),e(Ya,Fvo),e(Ya,Rre),e(Rre,Cvo),e(Ya,Mvo),e(Ya,Sre),e(Sre,Evo),e(Ya,yvo),e(Ge,wvo),e(Ge,I),e(I,s1),e(s1,Pre),e(Pre,Avo),e(s1,Lvo),e(s1,aI),e(aI,Bvo),e(s1,xvo),e(I,kvo),e(I,l1),e(l1,$re),e($re,Rvo),e(l1,Svo),e(l1,nI),e(nI,Pvo),e(l1,$vo),e(I,Ivo),e(I,i1),e(i1,Ire),e(Ire,jvo),e(i1,Nvo),e(i1,sI),e(sI,Dvo),e(i1,qvo),e(I,Gvo),e(I,d1),e(d1,jre),e(jre,Ovo),e(d1,Xvo),e(d1,lI),e(lI,Vvo),e(d1,zvo),e(I,Wvo),e(I,c1),e(c1,Nre),e(Nre,Qvo),e(c1,Hvo),e(c1,iI),e(iI,Uvo),e(c1,Jvo),e(I,Yvo),e(I,f1),e(f1,Dre),e(Dre,Kvo),e(f1,Zvo),e(f1,dI),e(dI,e6o),e(f1,o6o),e(I,r6o),e(I,m1),e(m1,qre),e(qre,t6o),e(m1,a6o),e(m1,cI),e(cI,n6o),e(m1,s6o),e(I,l6o),e(I,g1),e(g1,Gre),e(Gre,i6o),e(g1,d6o),e(g1,fI),e(fI,c6o),e(g1,f6o),e(I,m6o),e(I,h1),e(h1,Ore),e(Ore,g6o),e(h1,h6o),e(h1,mI),e(mI,p6o),e(h1,_6o),e(I,u6o),e(I,p1),e(p1,Xre),e(Xre,b6o),e(p1,v6o),e(p1,gI),e(gI,T6o),e(p1,F6o),e(I,C6o),e(I,_1),e(_1,Vre),e(Vre,M6o),e(_1,E6o),e(_1,hI),e(hI,y6o),e(_1,w6o),e(I,A6o),e(I,u1),e(u1,zre),e(zre,L6o),e(u1,B6o),e(u1,pI),e(pI,x6o),e(u1,k6o),e(I,R6o),e(I,b1),e(b1,Wre),e(Wre,S6o),e(b1,P6o),e(b1,_I),e(_I,$6o),e(b1,I6o),e(I,j6o),e(I,v1),e(v1,Qre),e(Qre,N6o),e(v1,D6o),e(v1,uI),e(uI,q6o),e(v1,G6o),e(I,O6o),e(I,T1),e(T1,Hre),e(Hre,X6o),e(T1,V6o),e(T1,bI),e(bI,z6o),e(T1,W6o),e(I,Q6o),e(I,F1),e(F1,Ure),e(Ure,H6o),e(F1,U6o),e(F1,vI),e(vI,J6o),e(F1,Y6o),e(I,K6o),e(I,C1),e(C1,Jre),e(Jre,Z6o),e(C1,e0o),e(C1,TI),e(TI,o0o),e(C1,r0o),e(I,t0o),e(I,M1),e(M1,Yre),e(Yre,a0o),e(M1,n0o),e(M1,FI),e(FI,s0o),e(M1,l0o),e(I,i0o),e(I,E1),e(E1,Kre),e(Kre,d0o),e(E1,c0o),e(E1,CI),e(CI,f0o),e(E1,m0o),e(I,g0o),e(I,y1),e(y1,Zre),e(Zre,h0o),e(y1,p0o),e(y1,MI),e(MI,_0o),e(y1,u0o),e(I,b0o),e(I,w1),e(w1,ete),e(ete,v0o),e(w1,T0o),e(w1,EI),e(EI,F0o),e(w1,C0o),e(I,M0o),e(I,A1),e(A1,ote),e(ote,E0o),e(A1,y0o),e(A1,yI),e(yI,w0o),e(A1,A0o),e(I,L0o),e(I,L1),e(L1,rte),e(rte,B0o),e(L1,x0o),e(L1,wI),e(wI,k0o),e(L1,R0o),e(I,S0o),e(I,B1),e(B1,tte),e(tte,P0o),e(B1,$0o),e(B1,AI),e(AI,I0o),e(B1,j0o),e(I,N0o),e(I,x1),e(x1,ate),e(ate,D0o),e(x1,q0o),e(x1,LI),e(LI,G0o),e(x1,O0o),e(I,X0o),e(I,k1),e(k1,nte),e(nte,V0o),e(k1,z0o),e(k1,BI),e(BI,W0o),e(k1,Q0o),e(I,H0o),e(I,R1),e(R1,ste),e(ste,U0o),e(R1,J0o),e(R1,xI),e(xI,Y0o),e(R1,K0o),e(I,Z0o),e(I,S1),e(S1,lte),e(lte,eTo),e(S1,oTo),e(S1,kI),e(kI,rTo),e(S1,tTo),e(I,aTo),e(I,P1),e(P1,ite),e(ite,nTo),e(P1,sTo),e(P1,RI),e(RI,lTo),e(P1,iTo),e(I,dTo),e(I,$1),e($1,dte),e(dte,cTo),e($1,fTo),e($1,SI),e(SI,mTo),e($1,gTo),e(I,hTo),e(I,I1),e(I1,cte),e(cte,pTo),e(I1,_To),e(I1,fte),e(fte,uTo),e(I1,bTo),e(I,vTo),e(I,j1),e(j1,mte),e(mte,TTo),e(j1,FTo),e(j1,PI),e(PI,CTo),e(j1,MTo),e(I,ETo),e(I,N1),e(N1,gte),e(gte,yTo),e(N1,wTo),e(N1,$I),e($I,ATo),e(N1,LTo),e(I,BTo),e(I,D1),e(D1,hte),e(hte,xTo),e(D1,kTo),e(D1,II),e(II,RTo),e(D1,STo),e(I,PTo),e(I,q1),e(q1,pte),e(pte,$To),e(q1,ITo),e(q1,jI),e(jI,jTo),e(q1,NTo),e(Ge,DTo),e(Ge,G1),e(G1,qTo),e(G1,_te),e(_te,GTo),e(G1,OTo),e(G1,ute),e(ute,XTo),e(Ge,VTo),e(Ge,bte),e(bte,zTo),e(Ge,WTo),g(ME,Ge,null),b(d,Zke,u),b(d,_d,u),e(_d,O1),e(O1,vte),g(EE,vte,null),e(_d,QTo),e(_d,Tte),e(Tte,HTo),b(d,eRe,u),b(d,or,u),g(yE,or,null),e(or,UTo),e(or,ud),e(ud,JTo),e(ud,Fte),e(Fte,YTo),e(ud,KTo),e(ud,Cte),e(Cte,ZTo),e(ud,e8o),e(or,o8o),e(or,wE),e(wE,r8o),e(wE,Mte),e(Mte,t8o),e(wE,a8o),e(or,n8o),e(or,Jr),g(AE,Jr,null),e(Jr,s8o),e(Jr,Ete),e(Ete,l8o),e(Jr,i8o),e(Jr,bd),e(bd,d8o),e(bd,yte),e(yte,c8o),e(bd,f8o),e(bd,wte),e(wte,m8o),e(bd,g8o),e(Jr,h8o),e(Jr,Ate),e(Ate,p8o),e(Jr,_8o),g(LE,Jr,null),e(or,u8o),e(or,Oe),g(BE,Oe,null),e(Oe,b8o),e(Oe,Lte),e(Lte,v8o),e(Oe,T8o),e(Oe,Ka),e(Ka,F8o),e(Ka,Bte),e(Bte,C8o),e(Ka,M8o),e(Ka,xte),e(xte,E8o),e(Ka,y8o),e(Ka,kte),e(kte,w8o),e(Ka,A8o),e(Oe,L8o),e(Oe,se),e(se,X1),e(X1,Rte),e(Rte,B8o),e(X1,x8o),e(X1,NI),e(NI,k8o),e(X1,R8o),e(se,S8o),e(se,V1),e(V1,Ste),e(Ste,P8o),e(V1,$8o),e(V1,DI),e(DI,I8o),e(V1,j8o),e(se,N8o),e(se,z1),e(z1,Pte),e(Pte,D8o),e(z1,q8o),e(z1,qI),e(qI,G8o),e(z1,O8o),e(se,X8o),e(se,W1),e(W1,$te),e($te,V8o),e(W1,z8o),e(W1,GI),e(GI,W8o),e(W1,Q8o),e(se,H8o),e(se,Q1),e(Q1,Ite),e(Ite,U8o),e(Q1,J8o),e(Q1,OI),e(OI,Y8o),e(Q1,K8o),e(se,Z8o),e(se,H1),e(H1,jte),e(jte,eFo),e(H1,oFo),e(H1,XI),e(XI,rFo),e(H1,tFo),e(se,aFo),e(se,U1),e(U1,Nte),e(Nte,nFo),e(U1,sFo),e(U1,VI),e(VI,lFo),e(U1,iFo),e(se,dFo),e(se,J1),e(J1,Dte),e(Dte,cFo),e(J1,fFo),e(J1,zI),e(zI,mFo),e(J1,gFo),e(se,hFo),e(se,Y1),e(Y1,qte),e(qte,pFo),e(Y1,_Fo),e(Y1,WI),e(WI,uFo),e(Y1,bFo),e(se,vFo),e(se,K1),e(K1,Gte),e(Gte,TFo),e(K1,FFo),e(K1,QI),e(QI,CFo),e(K1,MFo),e(se,EFo),e(se,Z1),e(Z1,Ote),e(Ote,yFo),e(Z1,wFo),e(Z1,HI),e(HI,AFo),e(Z1,LFo),e(se,BFo),e(se,eb),e(eb,Xte),e(Xte,xFo),e(eb,kFo),e(eb,UI),e(UI,RFo),e(eb,SFo),e(se,PFo),e(se,ob),e(ob,Vte),e(Vte,$Fo),e(ob,IFo),e(ob,JI),e(JI,jFo),e(ob,NFo),e(se,DFo),e(se,rb),e(rb,zte),e(zte,qFo),e(rb,GFo),e(rb,YI),e(YI,OFo),e(rb,XFo),e(se,VFo),e(se,tb),e(tb,Wte),e(Wte,zFo),e(tb,WFo),e(tb,KI),e(KI,QFo),e(tb,HFo),e(se,UFo),e(se,ab),e(ab,Qte),e(Qte,JFo),e(ab,YFo),e(ab,ZI),e(ZI,KFo),e(ab,ZFo),e(Oe,eCo),e(Oe,nb),e(nb,oCo),e(nb,Hte),e(Hte,rCo),e(nb,tCo),e(nb,Ute),e(Ute,aCo),e(Oe,nCo),e(Oe,Jte),e(Jte,sCo),e(Oe,lCo),g(xE,Oe,null),b(d,oRe,u),b(d,vd,u),e(vd,sb),e(sb,Yte),g(kE,Yte,null),e(vd,iCo),e(vd,Kte),e(Kte,dCo),b(d,rRe,u),b(d,rr,u),g(RE,rr,null),e(rr,cCo),e(rr,Td),e(Td,fCo),e(Td,Zte),e(Zte,mCo),e(Td,gCo),e(Td,eae),e(eae,hCo),e(Td,pCo),e(rr,_Co),e(rr,SE),e(SE,uCo),e(SE,oae),e(oae,bCo),e(SE,vCo),e(rr,TCo),e(rr,Yr),g(PE,Yr,null),e(Yr,FCo),e(Yr,rae),e(rae,CCo),e(Yr,MCo),e(Yr,Fd),e(Fd,ECo),e(Fd,tae),e(tae,yCo),e(Fd,wCo),e(Fd,aae),e(aae,ACo),e(Fd,LCo),e(Yr,BCo),e(Yr,nae),e(nae,xCo),e(Yr,kCo),g($E,Yr,null),e(rr,RCo),e(rr,Xe),g(IE,Xe,null),e(Xe,SCo),e(Xe,sae),e(sae,PCo),e(Xe,$Co),e(Xe,Za),e(Za,ICo),e(Za,lae),e(lae,jCo),e(Za,NCo),e(Za,iae),e(iae,DCo),e(Za,qCo),e(Za,dae),e(dae,GCo),e(Za,OCo),e(Xe,XCo),e(Xe,A),e(A,lb),e(lb,cae),e(cae,VCo),e(lb,zCo),e(lb,ej),e(ej,WCo),e(lb,QCo),e(A,HCo),e(A,ib),e(ib,fae),e(fae,UCo),e(ib,JCo),e(ib,oj),e(oj,YCo),e(ib,KCo),e(A,ZCo),e(A,db),e(db,mae),e(mae,eMo),e(db,oMo),e(db,rj),e(rj,rMo),e(db,tMo),e(A,aMo),e(A,cb),e(cb,gae),e(gae,nMo),e(cb,sMo),e(cb,tj),e(tj,lMo),e(cb,iMo),e(A,dMo),e(A,fb),e(fb,hae),e(hae,cMo),e(fb,fMo),e(fb,aj),e(aj,mMo),e(fb,gMo),e(A,hMo),e(A,mb),e(mb,pae),e(pae,pMo),e(mb,_Mo),e(mb,nj),e(nj,uMo),e(mb,bMo),e(A,vMo),e(A,gb),e(gb,_ae),e(_ae,TMo),e(gb,FMo),e(gb,sj),e(sj,CMo),e(gb,MMo),e(A,EMo),e(A,hb),e(hb,uae),e(uae,yMo),e(hb,wMo),e(hb,lj),e(lj,AMo),e(hb,LMo),e(A,BMo),e(A,pb),e(pb,bae),e(bae,xMo),e(pb,kMo),e(pb,ij),e(ij,RMo),e(pb,SMo),e(A,PMo),e(A,_b),e(_b,vae),e(vae,$Mo),e(_b,IMo),e(_b,dj),e(dj,jMo),e(_b,NMo),e(A,DMo),e(A,ub),e(ub,Tae),e(Tae,qMo),e(ub,GMo),e(ub,cj),e(cj,OMo),e(ub,XMo),e(A,VMo),e(A,bb),e(bb,Fae),e(Fae,zMo),e(bb,WMo),e(bb,fj),e(fj,QMo),e(bb,HMo),e(A,UMo),e(A,vb),e(vb,Cae),e(Cae,JMo),e(vb,YMo),e(vb,mj),e(mj,KMo),e(vb,ZMo),e(A,e4o),e(A,Tb),e(Tb,Mae),e(Mae,o4o),e(Tb,r4o),e(Tb,gj),e(gj,t4o),e(Tb,a4o),e(A,n4o),e(A,Fb),e(Fb,Eae),e(Eae,s4o),e(Fb,l4o),e(Fb,hj),e(hj,i4o),e(Fb,d4o),e(A,c4o),e(A,Cb),e(Cb,yae),e(yae,f4o),e(Cb,m4o),e(Cb,pj),e(pj,g4o),e(Cb,h4o),e(A,p4o),e(A,Mb),e(Mb,wae),e(wae,_4o),e(Mb,u4o),e(Mb,_j),e(_j,b4o),e(Mb,v4o),e(A,T4o),e(A,Eb),e(Eb,Aae),e(Aae,F4o),e(Eb,C4o),e(Eb,uj),e(uj,M4o),e(Eb,E4o),e(A,y4o),e(A,yb),e(yb,Lae),e(Lae,w4o),e(yb,A4o),e(yb,bj),e(bj,L4o),e(yb,B4o),e(A,x4o),e(A,wb),e(wb,Bae),e(Bae,k4o),e(wb,R4o),e(wb,vj),e(vj,S4o),e(wb,P4o),e(A,$4o),e(A,Ab),e(Ab,xae),e(xae,I4o),e(Ab,j4o),e(Ab,Tj),e(Tj,N4o),e(Ab,D4o),e(A,q4o),e(A,Lb),e(Lb,kae),e(kae,G4o),e(Lb,O4o),e(Lb,Fj),e(Fj,X4o),e(Lb,V4o),e(A,z4o),e(A,Bb),e(Bb,Rae),e(Rae,W4o),e(Bb,Q4o),e(Bb,Cj),e(Cj,H4o),e(Bb,U4o),e(A,J4o),e(A,xb),e(xb,Sae),e(Sae,Y4o),e(xb,K4o),e(xb,Mj),e(Mj,Z4o),e(xb,eEo),e(A,oEo),e(A,kb),e(kb,Pae),e(Pae,rEo),e(kb,tEo),e(kb,Ej),e(Ej,aEo),e(kb,nEo),e(A,sEo),e(A,Rb),e(Rb,$ae),e($ae,lEo),e(Rb,iEo),e(Rb,yj),e(yj,dEo),e(Rb,cEo),e(A,fEo),e(A,Sb),e(Sb,Iae),e(Iae,mEo),e(Sb,gEo),e(Sb,wj),e(wj,hEo),e(Sb,pEo),e(A,_Eo),e(A,Pb),e(Pb,jae),e(jae,uEo),e(Pb,bEo),e(Pb,Aj),e(Aj,vEo),e(Pb,TEo),e(A,FEo),e(A,$b),e($b,Nae),e(Nae,CEo),e($b,MEo),e($b,Lj),e(Lj,EEo),e($b,yEo),e(A,wEo),e(A,Ib),e(Ib,Dae),e(Dae,AEo),e(Ib,LEo),e(Ib,Bj),e(Bj,BEo),e(Ib,xEo),e(A,kEo),e(A,jb),e(jb,qae),e(qae,REo),e(jb,SEo),e(jb,xj),e(xj,PEo),e(jb,$Eo),e(A,IEo),e(A,Nb),e(Nb,Gae),e(Gae,jEo),e(Nb,NEo),e(Nb,kj),e(kj,DEo),e(Nb,qEo),e(A,GEo),e(A,Db),e(Db,Oae),e(Oae,OEo),e(Db,XEo),e(Db,Rj),e(Rj,VEo),e(Db,zEo),e(A,WEo),e(A,qb),e(qb,Xae),e(Xae,QEo),e(qb,HEo),e(qb,Sj),e(Sj,UEo),e(qb,JEo),e(A,YEo),e(A,Gb),e(Gb,Vae),e(Vae,KEo),e(Gb,ZEo),e(Gb,Pj),e(Pj,e3o),e(Gb,o3o),e(A,r3o),e(A,Ob),e(Ob,zae),e(zae,t3o),e(Ob,a3o),e(Ob,$j),e($j,n3o),e(Ob,s3o),e(A,l3o),e(A,Xb),e(Xb,Wae),e(Wae,i3o),e(Xb,d3o),e(Xb,Ij),e(Ij,c3o),e(Xb,f3o),e(A,m3o),e(A,Vb),e(Vb,Qae),e(Qae,g3o),e(Vb,h3o),e(Vb,jj),e(jj,p3o),e(Vb,_3o),e(A,u3o),e(A,zb),e(zb,Hae),e(Hae,b3o),e(zb,v3o),e(zb,Nj),e(Nj,T3o),e(zb,F3o),e(A,C3o),e(A,Wb),e(Wb,Uae),e(Uae,M3o),e(Wb,E3o),e(Wb,Dj),e(Dj,y3o),e(Wb,w3o),e(A,A3o),e(A,Qb),e(Qb,Jae),e(Jae,L3o),e(Qb,B3o),e(Qb,qj),e(qj,x3o),e(Qb,k3o),e(A,R3o),e(A,Hb),e(Hb,Yae),e(Yae,S3o),e(Hb,P3o),e(Hb,Gj),e(Gj,$3o),e(Hb,I3o),e(A,j3o),e(A,Ub),e(Ub,Kae),e(Kae,N3o),e(Ub,D3o),e(Ub,Oj),e(Oj,q3o),e(Ub,G3o),e(A,O3o),e(A,Jb),e(Jb,Zae),e(Zae,X3o),e(Jb,V3o),e(Jb,Xj),e(Xj,z3o),e(Jb,W3o),e(A,Q3o),e(A,Yb),e(Yb,ene),e(ene,H3o),e(Yb,U3o),e(Yb,Vj),e(Vj,J3o),e(Yb,Y3o),e(A,K3o),e(A,Kb),e(Kb,one),e(one,Z3o),e(Kb,eyo),e(Kb,zj),e(zj,oyo),e(Kb,ryo),e(Xe,tyo),e(Xe,Zb),e(Zb,ayo),e(Zb,rne),e(rne,nyo),e(Zb,syo),e(Zb,tne),e(tne,lyo),e(Xe,iyo),e(Xe,ane),e(ane,dyo),e(Xe,cyo),g(jE,Xe,null),b(d,tRe,u),b(d,Cd,u),e(Cd,e5),e(e5,nne),g(NE,nne,null),e(Cd,fyo),e(Cd,sne),e(sne,myo),b(d,aRe,u),b(d,tr,u),g(DE,tr,null),e(tr,gyo),e(tr,Md),e(Md,hyo),e(Md,lne),e(lne,pyo),e(Md,_yo),e(Md,ine),e(ine,uyo),e(Md,byo),e(tr,vyo),e(tr,qE),e(qE,Tyo),e(qE,dne),e(dne,Fyo),e(qE,Cyo),e(tr,Myo),e(tr,Kr),g(GE,Kr,null),e(Kr,Eyo),e(Kr,cne),e(cne,yyo),e(Kr,wyo),e(Kr,Ed),e(Ed,Ayo),e(Ed,fne),e(fne,Lyo),e(Ed,Byo),e(Ed,mne),e(mne,xyo),e(Ed,kyo),e(Kr,Ryo),e(Kr,gne),e(gne,Syo),e(Kr,Pyo),g(OE,Kr,null),e(tr,$yo),e(tr,Ve),g(XE,Ve,null),e(Ve,Iyo),e(Ve,hne),e(hne,jyo),e(Ve,Nyo),e(Ve,en),e(en,Dyo),e(en,pne),e(pne,qyo),e(en,Gyo),e(en,_ne),e(_ne,Oyo),e(en,Xyo),e(en,une),e(une,Vyo),e(en,zyo),e(Ve,Wyo),e(Ve,G),e(G,o5),e(o5,bne),e(bne,Qyo),e(o5,Hyo),e(o5,Wj),e(Wj,Uyo),e(o5,Jyo),e(G,Yyo),e(G,r5),e(r5,vne),e(vne,Kyo),e(r5,Zyo),e(r5,Qj),e(Qj,ewo),e(r5,owo),e(G,rwo),e(G,t5),e(t5,Tne),e(Tne,two),e(t5,awo),e(t5,Hj),e(Hj,nwo),e(t5,swo),e(G,lwo),e(G,a5),e(a5,Fne),e(Fne,iwo),e(a5,dwo),e(a5,Uj),e(Uj,cwo),e(a5,fwo),e(G,mwo),e(G,n5),e(n5,Cne),e(Cne,gwo),e(n5,hwo),e(n5,Jj),e(Jj,pwo),e(n5,_wo),e(G,uwo),e(G,s5),e(s5,Mne),e(Mne,bwo),e(s5,vwo),e(s5,Yj),e(Yj,Two),e(s5,Fwo),e(G,Cwo),e(G,l5),e(l5,Ene),e(Ene,Mwo),e(l5,Ewo),e(l5,Kj),e(Kj,ywo),e(l5,wwo),e(G,Awo),e(G,i5),e(i5,yne),e(yne,Lwo),e(i5,Bwo),e(i5,Zj),e(Zj,xwo),e(i5,kwo),e(G,Rwo),e(G,d5),e(d5,wne),e(wne,Swo),e(d5,Pwo),e(d5,eN),e(eN,$wo),e(d5,Iwo),e(G,jwo),e(G,c5),e(c5,Ane),e(Ane,Nwo),e(c5,Dwo),e(c5,oN),e(oN,qwo),e(c5,Gwo),e(G,Owo),e(G,f5),e(f5,Lne),e(Lne,Xwo),e(f5,Vwo),e(f5,rN),e(rN,zwo),e(f5,Wwo),e(G,Qwo),e(G,m5),e(m5,Bne),e(Bne,Hwo),e(m5,Uwo),e(m5,tN),e(tN,Jwo),e(m5,Ywo),e(G,Kwo),e(G,g5),e(g5,xne),e(xne,Zwo),e(g5,eAo),e(g5,aN),e(aN,oAo),e(g5,rAo),e(G,tAo),e(G,h5),e(h5,kne),e(kne,aAo),e(h5,nAo),e(h5,nN),e(nN,sAo),e(h5,lAo),e(G,iAo),e(G,p5),e(p5,Rne),e(Rne,dAo),e(p5,cAo),e(p5,sN),e(sN,fAo),e(p5,mAo),e(G,gAo),e(G,_5),e(_5,Sne),e(Sne,hAo),e(_5,pAo),e(_5,lN),e(lN,_Ao),e(_5,uAo),e(G,bAo),e(G,u5),e(u5,Pne),e(Pne,vAo),e(u5,TAo),e(u5,iN),e(iN,FAo),e(u5,CAo),e(G,MAo),e(G,b5),e(b5,$ne),e($ne,EAo),e(b5,yAo),e(b5,dN),e(dN,wAo),e(b5,AAo),e(G,LAo),e(G,v5),e(v5,Ine),e(Ine,BAo),e(v5,xAo),e(v5,cN),e(cN,kAo),e(v5,RAo),e(G,SAo),e(G,T5),e(T5,jne),e(jne,PAo),e(T5,$Ao),e(T5,fN),e(fN,IAo),e(T5,jAo),e(G,NAo),e(G,F5),e(F5,Nne),e(Nne,DAo),e(F5,qAo),e(F5,mN),e(mN,GAo),e(F5,OAo),e(G,XAo),e(G,C5),e(C5,Dne),e(Dne,VAo),e(C5,zAo),e(C5,gN),e(gN,WAo),e(C5,QAo),e(G,HAo),e(G,M5),e(M5,qne),e(qne,UAo),e(M5,JAo),e(M5,hN),e(hN,YAo),e(M5,KAo),e(G,ZAo),e(G,E5),e(E5,Gne),e(Gne,eLo),e(E5,oLo),e(E5,pN),e(pN,rLo),e(E5,tLo),e(G,aLo),e(G,y5),e(y5,One),e(One,nLo),e(y5,sLo),e(y5,_N),e(_N,lLo),e(y5,iLo),e(G,dLo),e(G,w5),e(w5,Xne),e(Xne,cLo),e(w5,fLo),e(w5,uN),e(uN,mLo),e(w5,gLo),e(G,hLo),e(G,A5),e(A5,Vne),e(Vne,pLo),e(A5,_Lo),e(A5,bN),e(bN,uLo),e(A5,bLo),e(G,vLo),e(G,L5),e(L5,zne),e(zne,TLo),e(L5,FLo),e(L5,vN),e(vN,CLo),e(L5,MLo),e(Ve,ELo),e(Ve,B5),e(B5,yLo),e(B5,Wne),e(Wne,wLo),e(B5,ALo),e(B5,Qne),e(Qne,LLo),e(Ve,BLo),e(Ve,Hne),e(Hne,xLo),e(Ve,kLo),g(VE,Ve,null),b(d,nRe,u),b(d,yd,u),e(yd,x5),e(x5,Une),g(zE,Une,null),e(yd,RLo),e(yd,Jne),e(Jne,SLo),b(d,sRe,u),b(d,ar,u),g(WE,ar,null),e(ar,PLo),e(ar,wd),e(wd,$Lo),e(wd,Yne),e(Yne,ILo),e(wd,jLo),e(wd,Kne),e(Kne,NLo),e(wd,DLo),e(ar,qLo),e(ar,QE),e(QE,GLo),e(QE,Zne),e(Zne,OLo),e(QE,XLo),e(ar,VLo),e(ar,Zr),g(HE,Zr,null),e(Zr,zLo),e(Zr,ese),e(ese,WLo),e(Zr,QLo),e(Zr,Ad),e(Ad,HLo),e(Ad,ose),e(ose,ULo),e(Ad,JLo),e(Ad,rse),e(rse,YLo),e(Ad,KLo),e(Zr,ZLo),e(Zr,tse),e(tse,e7o),e(Zr,o7o),g(UE,Zr,null),e(ar,r7o),e(ar,ze),g(JE,ze,null),e(ze,t7o),e(ze,ase),e(ase,a7o),e(ze,n7o),e(ze,on),e(on,s7o),e(on,nse),e(nse,l7o),e(on,i7o),e(on,sse),e(sse,d7o),e(on,c7o),e(on,lse),e(lse,f7o),e(on,m7o),e(ze,g7o),e(ze,ma),e(ma,k5),e(k5,ise),e(ise,h7o),e(k5,p7o),e(k5,TN),e(TN,_7o),e(k5,u7o),e(ma,b7o),e(ma,R5),e(R5,dse),e(dse,v7o),e(R5,T7o),e(R5,FN),e(FN,F7o),e(R5,C7o),e(ma,M7o),e(ma,S5),e(S5,cse),e(cse,E7o),e(S5,y7o),e(S5,CN),e(CN,w7o),e(S5,A7o),e(ma,L7o),e(ma,P5),e(P5,fse),e(fse,B7o),e(P5,x7o),e(P5,MN),e(MN,k7o),e(P5,R7o),e(ma,S7o),e(ma,$5),e($5,mse),e(mse,P7o),e($5,$7o),e($5,EN),e(EN,I7o),e($5,j7o),e(ze,N7o),e(ze,I5),e(I5,D7o),e(I5,gse),e(gse,q7o),e(I5,G7o),e(I5,hse),e(hse,O7o),e(ze,X7o),e(ze,pse),e(pse,V7o),e(ze,z7o),g(YE,ze,null),b(d,lRe,u),b(d,Ld,u),e(Ld,j5),e(j5,_se),g(KE,_se,null),e(Ld,W7o),e(Ld,use),e(use,Q7o),b(d,iRe,u),b(d,nr,u),g(ZE,nr,null),e(nr,H7o),e(nr,Bd),e(Bd,U7o),e(Bd,bse),e(bse,J7o),e(Bd,Y7o),e(Bd,vse),e(vse,K7o),e(Bd,Z7o),e(nr,e9o),e(nr,e3),e(e3,o9o),e(e3,Tse),e(Tse,r9o),e(e3,t9o),e(nr,a9o),e(nr,et),g(o3,et,null),e(et,n9o),e(et,Fse),e(Fse,s9o),e(et,l9o),e(et,xd),e(xd,i9o),e(xd,Cse),e(Cse,d9o),e(xd,c9o),e(xd,Mse),e(Mse,f9o),e(xd,m9o),e(et,g9o),e(et,Ese),e(Ese,h9o),e(et,p9o),g(r3,et,null),e(nr,_9o),e(nr,We),g(t3,We,null),e(We,u9o),e(We,yse),e(yse,b9o),e(We,v9o),e(We,rn),e(rn,T9o),e(rn,wse),e(wse,F9o),e(rn,C9o),e(rn,Ase),e(Ase,M9o),e(rn,E9o),e(rn,Lse),e(Lse,y9o),e(rn,w9o),e(We,A9o),e(We,D),e(D,N5),e(N5,Bse),e(Bse,L9o),e(N5,B9o),e(N5,yN),e(yN,x9o),e(N5,k9o),e(D,R9o),e(D,D5),e(D5,xse),e(xse,S9o),e(D5,P9o),e(D5,wN),e(wN,$9o),e(D5,I9o),e(D,j9o),e(D,q5),e(q5,kse),e(kse,N9o),e(q5,D9o),e(q5,AN),e(AN,q9o),e(q5,G9o),e(D,O9o),e(D,G5),e(G5,Rse),e(Rse,X9o),e(G5,V9o),e(G5,LN),e(LN,z9o),e(G5,W9o),e(D,Q9o),e(D,O5),e(O5,Sse),e(Sse,H9o),e(O5,U9o),e(O5,BN),e(BN,J9o),e(O5,Y9o),e(D,K9o),e(D,X5),e(X5,Pse),e(Pse,Z9o),e(X5,eBo),e(X5,xN),e(xN,oBo),e(X5,rBo),e(D,tBo),e(D,V5),e(V5,$se),e($se,aBo),e(V5,nBo),e(V5,kN),e(kN,sBo),e(V5,lBo),e(D,iBo),e(D,z5),e(z5,Ise),e(Ise,dBo),e(z5,cBo),e(z5,RN),e(RN,fBo),e(z5,mBo),e(D,gBo),e(D,W5),e(W5,jse),e(jse,hBo),e(W5,pBo),e(W5,SN),e(SN,_Bo),e(W5,uBo),e(D,bBo),e(D,Q5),e(Q5,Nse),e(Nse,vBo),e(Q5,TBo),e(Q5,PN),e(PN,FBo),e(Q5,CBo),e(D,MBo),e(D,H5),e(H5,Dse),e(Dse,EBo),e(H5,yBo),e(H5,$N),e($N,wBo),e(H5,ABo),e(D,LBo),e(D,U5),e(U5,qse),e(qse,BBo),e(U5,xBo),e(U5,IN),e(IN,kBo),e(U5,RBo),e(D,SBo),e(D,J5),e(J5,Gse),e(Gse,PBo),e(J5,$Bo),e(J5,jN),e(jN,IBo),e(J5,jBo),e(D,NBo),e(D,Y5),e(Y5,Ose),e(Ose,DBo),e(Y5,qBo),e(Y5,NN),e(NN,GBo),e(Y5,OBo),e(D,XBo),e(D,K5),e(K5,Xse),e(Xse,VBo),e(K5,zBo),e(K5,DN),e(DN,WBo),e(K5,QBo),e(D,HBo),e(D,Z5),e(Z5,Vse),e(Vse,UBo),e(Z5,JBo),e(Z5,qN),e(qN,YBo),e(Z5,KBo),e(D,ZBo),e(D,e2),e(e2,zse),e(zse,exo),e(e2,oxo),e(e2,GN),e(GN,rxo),e(e2,txo),e(D,axo),e(D,o2),e(o2,Wse),e(Wse,nxo),e(o2,sxo),e(o2,ON),e(ON,lxo),e(o2,ixo),e(D,dxo),e(D,r2),e(r2,Qse),e(Qse,cxo),e(r2,fxo),e(r2,XN),e(XN,mxo),e(r2,gxo),e(D,hxo),e(D,t2),e(t2,Hse),e(Hse,pxo),e(t2,_xo),e(t2,VN),e(VN,uxo),e(t2,bxo),e(D,vxo),e(D,a2),e(a2,Use),e(Use,Txo),e(a2,Fxo),e(a2,zN),e(zN,Cxo),e(a2,Mxo),e(D,Exo),e(D,n2),e(n2,Jse),e(Jse,yxo),e(n2,wxo),e(n2,WN),e(WN,Axo),e(n2,Lxo),e(D,Bxo),e(D,s2),e(s2,Yse),e(Yse,xxo),e(s2,kxo),e(s2,QN),e(QN,Rxo),e(s2,Sxo),e(D,Pxo),e(D,l2),e(l2,Kse),e(Kse,$xo),e(l2,Ixo),e(l2,HN),e(HN,jxo),e(l2,Nxo),e(D,Dxo),e(D,i2),e(i2,Zse),e(Zse,qxo),e(i2,Gxo),e(i2,UN),e(UN,Oxo),e(i2,Xxo),e(D,Vxo),e(D,d2),e(d2,ele),e(ele,zxo),e(d2,Wxo),e(d2,JN),e(JN,Qxo),e(d2,Hxo),e(D,Uxo),e(D,c2),e(c2,ole),e(ole,Jxo),e(c2,Yxo),e(c2,YN),e(YN,Kxo),e(c2,Zxo),e(D,eko),e(D,f2),e(f2,rle),e(rle,oko),e(f2,rko),e(f2,KN),e(KN,tko),e(f2,ako),e(D,nko),e(D,m2),e(m2,tle),e(tle,sko),e(m2,lko),e(m2,ZN),e(ZN,iko),e(m2,dko),e(D,cko),e(D,g2),e(g2,ale),e(ale,fko),e(g2,mko),e(g2,eD),e(eD,gko),e(g2,hko),e(D,pko),e(D,h2),e(h2,nle),e(nle,_ko),e(h2,uko),e(h2,oD),e(oD,bko),e(h2,vko),e(D,Tko),e(D,p2),e(p2,sle),e(sle,Fko),e(p2,Cko),e(p2,rD),e(rD,Mko),e(p2,Eko),e(D,yko),e(D,_2),e(_2,lle),e(lle,wko),e(_2,Ako),e(_2,tD),e(tD,Lko),e(_2,Bko),e(We,xko),e(We,u2),e(u2,kko),e(u2,ile),e(ile,Rko),e(u2,Sko),e(u2,dle),e(dle,Pko),e(We,$ko),e(We,cle),e(cle,Iko),e(We,jko),g(a3,We,null),b(d,dRe,u),b(d,kd,u),e(kd,b2),e(b2,fle),g(n3,fle,null),e(kd,Nko),e(kd,mle),e(mle,Dko),b(d,cRe,u),b(d,sr,u),g(s3,sr,null),e(sr,qko),e(sr,Rd),e(Rd,Gko),e(Rd,gle),e(gle,Oko),e(Rd,Xko),e(Rd,hle),e(hle,Vko),e(Rd,zko),e(sr,Wko),e(sr,l3),e(l3,Qko),e(l3,ple),e(ple,Hko),e(l3,Uko),e(sr,Jko),e(sr,ot),g(i3,ot,null),e(ot,Yko),e(ot,_le),e(_le,Kko),e(ot,Zko),e(ot,Sd),e(Sd,eRo),e(Sd,ule),e(ule,oRo),e(Sd,rRo),e(Sd,ble),e(ble,tRo),e(Sd,aRo),e(ot,nRo),e(ot,vle),e(vle,sRo),e(ot,lRo),g(d3,ot,null),e(sr,iRo),e(sr,Qe),g(c3,Qe,null),e(Qe,dRo),e(Qe,Tle),e(Tle,cRo),e(Qe,fRo),e(Qe,tn),e(tn,mRo),e(tn,Fle),e(Fle,gRo),e(tn,hRo),e(tn,Cle),e(Cle,pRo),e(tn,_Ro),e(tn,Mle),e(Mle,uRo),e(tn,bRo),e(Qe,vRo),e(Qe,R),e(R,v2),e(v2,Ele),e(Ele,TRo),e(v2,FRo),e(v2,aD),e(aD,CRo),e(v2,MRo),e(R,ERo),e(R,T2),e(T2,yle),e(yle,yRo),e(T2,wRo),e(T2,nD),e(nD,ARo),e(T2,LRo),e(R,BRo),e(R,F2),e(F2,wle),e(wle,xRo),e(F2,kRo),e(F2,sD),e(sD,RRo),e(F2,SRo),e(R,PRo),e(R,C2),e(C2,Ale),e(Ale,$Ro),e(C2,IRo),e(C2,lD),e(lD,jRo),e(C2,NRo),e(R,DRo),e(R,M2),e(M2,Lle),e(Lle,qRo),e(M2,GRo),e(M2,iD),e(iD,ORo),e(M2,XRo),e(R,VRo),e(R,E2),e(E2,Ble),e(Ble,zRo),e(E2,WRo),e(E2,dD),e(dD,QRo),e(E2,HRo),e(R,URo),e(R,y2),e(y2,xle),e(xle,JRo),e(y2,YRo),e(y2,cD),e(cD,KRo),e(y2,ZRo),e(R,eSo),e(R,w2),e(w2,kle),e(kle,oSo),e(w2,rSo),e(w2,fD),e(fD,tSo),e(w2,aSo),e(R,nSo),e(R,A2),e(A2,Rle),e(Rle,sSo),e(A2,lSo),e(A2,mD),e(mD,iSo),e(A2,dSo),e(R,cSo),e(R,L2),e(L2,Sle),e(Sle,fSo),e(L2,mSo),e(L2,gD),e(gD,gSo),e(L2,hSo),e(R,pSo),e(R,B2),e(B2,Ple),e(Ple,_So),e(B2,uSo),e(B2,hD),e(hD,bSo),e(B2,vSo),e(R,TSo),e(R,x2),e(x2,$le),e($le,FSo),e(x2,CSo),e(x2,pD),e(pD,MSo),e(x2,ESo),e(R,ySo),e(R,k2),e(k2,Ile),e(Ile,wSo),e(k2,ASo),e(k2,_D),e(_D,LSo),e(k2,BSo),e(R,xSo),e(R,R2),e(R2,jle),e(jle,kSo),e(R2,RSo),e(R2,uD),e(uD,SSo),e(R2,PSo),e(R,$So),e(R,S2),e(S2,Nle),e(Nle,ISo),e(S2,jSo),e(S2,bD),e(bD,NSo),e(S2,DSo),e(R,qSo),e(R,P2),e(P2,Dle),e(Dle,GSo),e(P2,OSo),e(P2,vD),e(vD,XSo),e(P2,VSo),e(R,zSo),e(R,$2),e($2,qle),e(qle,WSo),e($2,QSo),e($2,TD),e(TD,HSo),e($2,USo),e(R,JSo),e(R,I2),e(I2,Gle),e(Gle,YSo),e(I2,KSo),e(I2,FD),e(FD,ZSo),e(I2,ePo),e(R,oPo),e(R,j2),e(j2,Ole),e(Ole,rPo),e(j2,tPo),e(j2,CD),e(CD,aPo),e(j2,nPo),e(R,sPo),e(R,N2),e(N2,Xle),e(Xle,lPo),e(N2,iPo),e(N2,MD),e(MD,dPo),e(N2,cPo),e(R,fPo),e(R,D2),e(D2,Vle),e(Vle,mPo),e(D2,gPo),e(D2,ED),e(ED,hPo),e(D2,pPo),e(R,_Po),e(R,q2),e(q2,zle),e(zle,uPo),e(q2,bPo),e(q2,yD),e(yD,vPo),e(q2,TPo),e(R,FPo),e(R,G2),e(G2,Wle),e(Wle,CPo),e(G2,MPo),e(G2,wD),e(wD,EPo),e(G2,yPo),e(R,wPo),e(R,O2),e(O2,Qle),e(Qle,APo),e(O2,LPo),e(O2,AD),e(AD,BPo),e(O2,xPo),e(R,kPo),e(R,X2),e(X2,Hle),e(Hle,RPo),e(X2,SPo),e(X2,LD),e(LD,PPo),e(X2,$Po),e(R,IPo),e(R,V2),e(V2,Ule),e(Ule,jPo),e(V2,NPo),e(V2,BD),e(BD,DPo),e(V2,qPo),e(R,GPo),e(R,z2),e(z2,Jle),e(Jle,OPo),e(z2,XPo),e(z2,xD),e(xD,VPo),e(z2,zPo),e(R,WPo),e(R,W2),e(W2,Yle),e(Yle,QPo),e(W2,HPo),e(W2,kD),e(kD,UPo),e(W2,JPo),e(R,YPo),e(R,Q2),e(Q2,Kle),e(Kle,KPo),e(Q2,ZPo),e(Q2,RD),e(RD,e$o),e(Q2,o$o),e(R,r$o),e(R,H2),e(H2,Zle),e(Zle,t$o),e(H2,a$o),e(H2,SD),e(SD,n$o),e(H2,s$o),e(R,l$o),e(R,U2),e(U2,eie),e(eie,i$o),e(U2,d$o),e(U2,PD),e(PD,c$o),e(U2,f$o),e(R,m$o),e(R,J2),e(J2,oie),e(oie,g$o),e(J2,h$o),e(J2,$D),e($D,p$o),e(J2,_$o),e(R,u$o),e(R,Y2),e(Y2,rie),e(rie,b$o),e(Y2,v$o),e(Y2,ID),e(ID,T$o),e(Y2,F$o),e(R,C$o),e(R,K2),e(K2,tie),e(tie,M$o),e(K2,E$o),e(K2,jD),e(jD,y$o),e(K2,w$o),e(R,A$o),e(R,Z2),e(Z2,aie),e(aie,L$o),e(Z2,B$o),e(Z2,ND),e(ND,x$o),e(Z2,k$o),e(R,R$o),e(R,ev),e(ev,nie),e(nie,S$o),e(ev,P$o),e(ev,DD),e(DD,$$o),e(ev,I$o),e(R,j$o),e(R,ov),e(ov,sie),e(sie,N$o),e(ov,D$o),e(ov,qD),e(qD,q$o),e(ov,G$o),e(R,O$o),e(R,rv),e(rv,lie),e(lie,X$o),e(rv,V$o),e(rv,GD),e(GD,z$o),e(rv,W$o),e(R,Q$o),e(R,tv),e(tv,iie),e(iie,H$o),e(tv,U$o),e(tv,OD),e(OD,J$o),e(tv,Y$o),e(Qe,K$o),e(Qe,av),e(av,Z$o),e(av,die),e(die,eIo),e(av,oIo),e(av,cie),e(cie,rIo),e(Qe,tIo),e(Qe,fie),e(fie,aIo),e(Qe,nIo),g(f3,Qe,null),b(d,fRe,u),b(d,Pd,u),e(Pd,nv),e(nv,mie),g(m3,mie,null),e(Pd,sIo),e(Pd,gie),e(gie,lIo),b(d,mRe,u),b(d,lr,u),g(g3,lr,null),e(lr,iIo),e(lr,$d),e($d,dIo),e($d,hie),e(hie,cIo),e($d,fIo),e($d,pie),e(pie,mIo),e($d,gIo),e(lr,hIo),e(lr,h3),e(h3,pIo),e(h3,_ie),e(_ie,_Io),e(h3,uIo),e(lr,bIo),e(lr,rt),g(p3,rt,null),e(rt,vIo),e(rt,uie),e(uie,TIo),e(rt,FIo),e(rt,Id),e(Id,CIo),e(Id,bie),e(bie,MIo),e(Id,EIo),e(Id,vie),e(vie,yIo),e(Id,wIo),e(rt,AIo),e(rt,Tie),e(Tie,LIo),e(rt,BIo),g(_3,rt,null),e(lr,xIo),e(lr,He),g(u3,He,null),e(He,kIo),e(He,Fie),e(Fie,RIo),e(He,SIo),e(He,an),e(an,PIo),e(an,Cie),e(Cie,$Io),e(an,IIo),e(an,Mie),e(Mie,jIo),e(an,NIo),e(an,Eie),e(Eie,DIo),e(an,qIo),e(He,GIo),e(He,yie),e(yie,sv),e(sv,wie),e(wie,OIo),e(sv,XIo),e(sv,XD),e(XD,VIo),e(sv,zIo),e(He,WIo),e(He,lv),e(lv,QIo),e(lv,Aie),e(Aie,HIo),e(lv,UIo),e(lv,Lie),e(Lie,JIo),e(He,YIo),e(He,Bie),e(Bie,KIo),e(He,ZIo),g(b3,He,null),b(d,gRe,u),b(d,jd,u),e(jd,iv),e(iv,xie),g(v3,xie,null),e(jd,ejo),e(jd,kie),e(kie,ojo),b(d,hRe,u),b(d,ir,u),g(T3,ir,null),e(ir,rjo),e(ir,Nd),e(Nd,tjo),e(Nd,Rie),e(Rie,ajo),e(Nd,njo),e(Nd,Sie),e(Sie,sjo),e(Nd,ljo),e(ir,ijo),e(ir,F3),e(F3,djo),e(F3,Pie),e(Pie,cjo),e(F3,fjo),e(ir,mjo),e(ir,tt),g(C3,tt,null),e(tt,gjo),e(tt,$ie),e($ie,hjo),e(tt,pjo),e(tt,Dd),e(Dd,_jo),e(Dd,Iie),e(Iie,ujo),e(Dd,bjo),e(Dd,jie),e(jie,vjo),e(Dd,Tjo),e(tt,Fjo),e(tt,Nie),e(Nie,Cjo),e(tt,Mjo),g(M3,tt,null),e(ir,Ejo),e(ir,Ue),g(E3,Ue,null),e(Ue,yjo),e(Ue,Die),e(Die,wjo),e(Ue,Ajo),e(Ue,nn),e(nn,Ljo),e(nn,qie),e(qie,Bjo),e(nn,xjo),e(nn,Gie),e(Gie,kjo),e(nn,Rjo),e(nn,Oie),e(Oie,Sjo),e(nn,Pjo),e(Ue,$jo),e(Ue,me),e(me,dv),e(dv,Xie),e(Xie,Ijo),e(dv,jjo),e(dv,VD),e(VD,Njo),e(dv,Djo),e(me,qjo),e(me,cv),e(cv,Vie),e(Vie,Gjo),e(cv,Ojo),e(cv,zD),e(zD,Xjo),e(cv,Vjo),e(me,zjo),e(me,zs),e(zs,zie),e(zie,Wjo),e(zs,Qjo),e(zs,WD),e(WD,Hjo),e(zs,Ujo),e(zs,QD),e(QD,Jjo),e(zs,Yjo),e(me,Kjo),e(me,fv),e(fv,Wie),e(Wie,Zjo),e(fv,eNo),e(fv,HD),e(HD,oNo),e(fv,rNo),e(me,tNo),e(me,pa),e(pa,Qie),e(Qie,aNo),e(pa,nNo),e(pa,UD),e(UD,sNo),e(pa,lNo),e(pa,JD),e(JD,iNo),e(pa,dNo),e(pa,YD),e(YD,cNo),e(pa,fNo),e(me,mNo),e(me,mv),e(mv,Hie),e(Hie,gNo),e(mv,hNo),e(mv,KD),e(KD,pNo),e(mv,_No),e(me,uNo),e(me,gv),e(gv,Uie),e(Uie,bNo),e(gv,vNo),e(gv,ZD),e(ZD,TNo),e(gv,FNo),e(me,CNo),e(me,hv),e(hv,Jie),e(Jie,MNo),e(hv,ENo),e(hv,eq),e(eq,yNo),e(hv,wNo),e(me,ANo),e(me,pv),e(pv,Yie),e(Yie,LNo),e(pv,BNo),e(pv,oq),e(oq,xNo),e(pv,kNo),e(me,RNo),e(me,_v),e(_v,Kie),e(Kie,SNo),e(_v,PNo),e(_v,rq),e(rq,$No),e(_v,INo),e(me,jNo),e(me,uv),e(uv,Zie),e(Zie,NNo),e(uv,DNo),e(uv,tq),e(tq,qNo),e(uv,GNo),e(Ue,ONo),e(Ue,bv),e(bv,XNo),e(bv,ede),e(ede,VNo),e(bv,zNo),e(bv,ode),e(ode,WNo),e(Ue,QNo),e(Ue,rde),e(rde,HNo),e(Ue,UNo),g(y3,Ue,null),b(d,pRe,u),b(d,qd,u),e(qd,vv),e(vv,tde),g(w3,tde,null),e(qd,JNo),e(qd,ade),e(ade,YNo),b(d,_Re,u),b(d,dr,u),g(A3,dr,null),e(dr,KNo),e(dr,Gd),e(Gd,ZNo),e(Gd,nde),e(nde,eDo),e(Gd,oDo),e(Gd,sde),e(sde,rDo),e(Gd,tDo),e(dr,aDo),e(dr,L3),e(L3,nDo),e(L3,lde),e(lde,sDo),e(L3,lDo),e(dr,iDo),e(dr,at),g(B3,at,null),e(at,dDo),e(at,ide),e(ide,cDo),e(at,fDo),e(at,Od),e(Od,mDo),e(Od,dde),e(dde,gDo),e(Od,hDo),e(Od,cde),e(cde,pDo),e(Od,_Do),e(at,uDo),e(at,fde),e(fde,bDo),e(at,vDo),g(x3,at,null),e(dr,TDo),e(dr,Je),g(k3,Je,null),e(Je,FDo),e(Je,mde),e(mde,CDo),e(Je,MDo),e(Je,sn),e(sn,EDo),e(sn,gde),e(gde,yDo),e(sn,wDo),e(sn,hde),e(hde,ADo),e(sn,LDo),e(sn,pde),e(pde,BDo),e(sn,xDo),e(Je,kDo),e(Je,_de),e(_de,Tv),e(Tv,ude),e(ude,RDo),e(Tv,SDo),e(Tv,aq),e(aq,PDo),e(Tv,$Do),e(Je,IDo),e(Je,Fv),e(Fv,jDo),e(Fv,bde),e(bde,NDo),e(Fv,DDo),e(Fv,vde),e(vde,qDo),e(Je,GDo),e(Je,Tde),e(Tde,ODo),e(Je,XDo),g(R3,Je,null),b(d,uRe,u),b(d,Xd,u),e(Xd,Cv),e(Cv,Fde),g(S3,Fde,null),e(Xd,VDo),e(Xd,Cde),e(Cde,zDo),b(d,bRe,u),b(d,cr,u),g(P3,cr,null),e(cr,WDo),e(cr,Vd),e(Vd,QDo),e(Vd,Mde),e(Mde,HDo),e(Vd,UDo),e(Vd,Ede),e(Ede,JDo),e(Vd,YDo),e(cr,KDo),e(cr,$3),e($3,ZDo),e($3,yde),e(yde,eqo),e($3,oqo),e(cr,rqo),e(cr,nt),g(I3,nt,null),e(nt,tqo),e(nt,wde),e(wde,aqo),e(nt,nqo),e(nt,zd),e(zd,sqo),e(zd,Ade),e(Ade,lqo),e(zd,iqo),e(zd,Lde),e(Lde,dqo),e(zd,cqo),e(nt,fqo),e(nt,Bde),e(Bde,mqo),e(nt,gqo),g(j3,nt,null),e(cr,hqo),e(cr,Ye),g(N3,Ye,null),e(Ye,pqo),e(Ye,xde),e(xde,_qo),e(Ye,uqo),e(Ye,ln),e(ln,bqo),e(ln,kde),e(kde,vqo),e(ln,Tqo),e(ln,Rde),e(Rde,Fqo),e(ln,Cqo),e(ln,Sde),e(Sde,Mqo),e(ln,Eqo),e(Ye,yqo),e(Ye,ke),e(ke,Mv),e(Mv,Pde),e(Pde,wqo),e(Mv,Aqo),e(Mv,nq),e(nq,Lqo),e(Mv,Bqo),e(ke,xqo),e(ke,Ev),e(Ev,$de),e($de,kqo),e(Ev,Rqo),e(Ev,sq),e(sq,Sqo),e(Ev,Pqo),e(ke,$qo),e(ke,yv),e(yv,Ide),e(Ide,Iqo),e(yv,jqo),e(yv,lq),e(lq,Nqo),e(yv,Dqo),e(ke,qqo),e(ke,wv),e(wv,jde),e(jde,Gqo),e(wv,Oqo),e(wv,iq),e(iq,Xqo),e(wv,Vqo),e(ke,zqo),e(ke,Av),e(Av,Nde),e(Nde,Wqo),e(Av,Qqo),e(Av,dq),e(dq,Hqo),e(Av,Uqo),e(ke,Jqo),e(ke,Lv),e(Lv,Dde),e(Dde,Yqo),e(Lv,Kqo),e(Lv,cq),e(cq,Zqo),e(Lv,eGo),e(ke,oGo),e(ke,Bv),e(Bv,qde),e(qde,rGo),e(Bv,tGo),e(Bv,fq),e(fq,aGo),e(Bv,nGo),e(ke,sGo),e(ke,xv),e(xv,Gde),e(Gde,lGo),e(xv,iGo),e(xv,mq),e(mq,dGo),e(xv,cGo),e(Ye,fGo),e(Ye,kv),e(kv,mGo),e(kv,Ode),e(Ode,gGo),e(kv,hGo),e(kv,Xde),e(Xde,pGo),e(Ye,_Go),e(Ye,Vde),e(Vde,uGo),e(Ye,bGo),g(D3,Ye,null),b(d,vRe,u),b(d,Wd,u),e(Wd,Rv),e(Rv,zde),g(q3,zde,null),e(Wd,vGo),e(Wd,Wde),e(Wde,TGo),b(d,TRe,u),b(d,fr,u),g(G3,fr,null),e(fr,FGo),e(fr,Qd),e(Qd,CGo),e(Qd,Qde),e(Qde,MGo),e(Qd,EGo),e(Qd,Hde),e(Hde,yGo),e(Qd,wGo),e(fr,AGo),e(fr,O3),e(O3,LGo),e(O3,Ude),e(Ude,BGo),e(O3,xGo),e(fr,kGo),e(fr,st),g(X3,st,null),e(st,RGo),e(st,Jde),e(Jde,SGo),e(st,PGo),e(st,Hd),e(Hd,$Go),e(Hd,Yde),e(Yde,IGo),e(Hd,jGo),e(Hd,Kde),e(Kde,NGo),e(Hd,DGo),e(st,qGo),e(st,Zde),e(Zde,GGo),e(st,OGo),g(V3,st,null),e(fr,XGo),e(fr,Ke),g(z3,Ke,null),e(Ke,VGo),e(Ke,ece),e(ece,zGo),e(Ke,WGo),e(Ke,dn),e(dn,QGo),e(dn,oce),e(oce,HGo),e(dn,UGo),e(dn,rce),e(rce,JGo),e(dn,YGo),e(dn,tce),e(tce,KGo),e(dn,ZGo),e(Ke,eOo),e(Ke,cn),e(cn,Sv),e(Sv,ace),e(ace,oOo),e(Sv,rOo),e(Sv,gq),e(gq,tOo),e(Sv,aOo),e(cn,nOo),e(cn,Pv),e(Pv,nce),e(nce,sOo),e(Pv,lOo),e(Pv,hq),e(hq,iOo),e(Pv,dOo),e(cn,cOo),e(cn,$v),e($v,sce),e(sce,fOo),e($v,mOo),e($v,pq),e(pq,gOo),e($v,hOo),e(cn,pOo),e(cn,Iv),e(Iv,lce),e(lce,_Oo),e(Iv,uOo),e(Iv,_q),e(_q,bOo),e(Iv,vOo),e(Ke,TOo),e(Ke,jv),e(jv,FOo),e(jv,ice),e(ice,COo),e(jv,MOo),e(jv,dce),e(dce,EOo),e(Ke,yOo),e(Ke,cce),e(cce,wOo),e(Ke,AOo),g(W3,Ke,null),b(d,FRe,u),b(d,Ud,u),e(Ud,Nv),e(Nv,fce),g(Q3,fce,null),e(Ud,LOo),e(Ud,mce),e(mce,BOo),b(d,CRe,u),b(d,mr,u),g(H3,mr,null),e(mr,xOo),e(mr,Jd),e(Jd,kOo),e(Jd,gce),e(gce,ROo),e(Jd,SOo),e(Jd,hce),e(hce,POo),e(Jd,$Oo),e(mr,IOo),e(mr,U3),e(U3,jOo),e(U3,pce),e(pce,NOo),e(U3,DOo),e(mr,qOo),e(mr,lt),g(J3,lt,null),e(lt,GOo),e(lt,_ce),e(_ce,OOo),e(lt,XOo),e(lt,Yd),e(Yd,VOo),e(Yd,uce),e(uce,zOo),e(Yd,WOo),e(Yd,bce),e(bce,QOo),e(Yd,HOo),e(lt,UOo),e(lt,vce),e(vce,JOo),e(lt,YOo),g(Y3,lt,null),e(mr,KOo),e(mr,Ze),g(K3,Ze,null),e(Ze,ZOo),e(Ze,Tce),e(Tce,eXo),e(Ze,oXo),e(Ze,fn),e(fn,rXo),e(fn,Fce),e(Fce,tXo),e(fn,aXo),e(fn,Cce),e(Cce,nXo),e(fn,sXo),e(fn,Mce),e(Mce,lXo),e(fn,iXo),e(Ze,dXo),e(Ze,Re),e(Re,Dv),e(Dv,Ece),e(Ece,cXo),e(Dv,fXo),e(Dv,uq),e(uq,mXo),e(Dv,gXo),e(Re,hXo),e(Re,qv),e(qv,yce),e(yce,pXo),e(qv,_Xo),e(qv,bq),e(bq,uXo),e(qv,bXo),e(Re,vXo),e(Re,Gv),e(Gv,wce),e(wce,TXo),e(Gv,FXo),e(Gv,vq),e(vq,CXo),e(Gv,MXo),e(Re,EXo),e(Re,Ov),e(Ov,Ace),e(Ace,yXo),e(Ov,wXo),e(Ov,Tq),e(Tq,AXo),e(Ov,LXo),e(Re,BXo),e(Re,Xv),e(Xv,Lce),e(Lce,xXo),e(Xv,kXo),e(Xv,Fq),e(Fq,RXo),e(Xv,SXo),e(Re,PXo),e(Re,Vv),e(Vv,Bce),e(Bce,$Xo),e(Vv,IXo),e(Vv,Cq),e(Cq,jXo),e(Vv,NXo),e(Re,DXo),e(Re,zv),e(zv,xce),e(xce,qXo),e(zv,GXo),e(zv,Mq),e(Mq,OXo),e(zv,XXo),e(Re,VXo),e(Re,Wv),e(Wv,kce),e(kce,zXo),e(Wv,WXo),e(Wv,Eq),e(Eq,QXo),e(Wv,HXo),e(Ze,UXo),e(Ze,Qv),e(Qv,JXo),e(Qv,Rce),e(Rce,YXo),e(Qv,KXo),e(Qv,Sce),e(Sce,ZXo),e(Ze,eVo),e(Ze,Pce),e(Pce,oVo),e(Ze,rVo),g(Z3,Ze,null),b(d,MRe,u),b(d,Kd,u),e(Kd,Hv),e(Hv,$ce),g(ey,$ce,null),e(Kd,tVo),e(Kd,Ice),e(Ice,aVo),b(d,ERe,u),b(d,gr,u),g(oy,gr,null),e(gr,nVo),e(gr,Zd),e(Zd,sVo),e(Zd,jce),e(jce,lVo),e(Zd,iVo),e(Zd,Nce),e(Nce,dVo),e(Zd,cVo),e(gr,fVo),e(gr,ry),e(ry,mVo),e(ry,Dce),e(Dce,gVo),e(ry,hVo),e(gr,pVo),e(gr,it),g(ty,it,null),e(it,_Vo),e(it,qce),e(qce,uVo),e(it,bVo),e(it,ec),e(ec,vVo),e(ec,Gce),e(Gce,TVo),e(ec,FVo),e(ec,Oce),e(Oce,CVo),e(ec,MVo),e(it,EVo),e(it,Xce),e(Xce,yVo),e(it,wVo),g(ay,it,null),e(gr,AVo),e(gr,eo),g(ny,eo,null),e(eo,LVo),e(eo,Vce),e(Vce,BVo),e(eo,xVo),e(eo,mn),e(mn,kVo),e(mn,zce),e(zce,RVo),e(mn,SVo),e(mn,Wce),e(Wce,PVo),e(mn,$Vo),e(mn,Qce),e(Qce,IVo),e(mn,jVo),e(eo,NVo),e(eo,sy),e(sy,Uv),e(Uv,Hce),e(Hce,DVo),e(Uv,qVo),e(Uv,yq),e(yq,GVo),e(Uv,OVo),e(sy,XVo),e(sy,Jv),e(Jv,Uce),e(Uce,VVo),e(Jv,zVo),e(Jv,wq),e(wq,WVo),e(Jv,QVo),e(eo,HVo),e(eo,Yv),e(Yv,UVo),e(Yv,Jce),e(Jce,JVo),e(Yv,YVo),e(Yv,Yce),e(Yce,KVo),e(eo,ZVo),e(eo,Kce),e(Kce,ezo),e(eo,ozo),g(ly,eo,null),b(d,yRe,u),b(d,oc,u),e(oc,Kv),e(Kv,Zce),g(iy,Zce,null),e(oc,rzo),e(oc,efe),e(efe,tzo),b(d,wRe,u),b(d,hr,u),g(dy,hr,null),e(hr,azo),e(hr,rc),e(rc,nzo),e(rc,ofe),e(ofe,szo),e(rc,lzo),e(rc,rfe),e(rfe,izo),e(rc,dzo),e(hr,czo),e(hr,cy),e(cy,fzo),e(cy,tfe),e(tfe,mzo),e(cy,gzo),e(hr,hzo),e(hr,dt),g(fy,dt,null),e(dt,pzo),e(dt,afe),e(afe,_zo),e(dt,uzo),e(dt,tc),e(tc,bzo),e(tc,nfe),e(nfe,vzo),e(tc,Tzo),e(tc,sfe),e(sfe,Fzo),e(tc,Czo),e(dt,Mzo),e(dt,lfe),e(lfe,Ezo),e(dt,yzo),g(my,dt,null),e(hr,wzo),e(hr,oo),g(gy,oo,null),e(oo,Azo),e(oo,ife),e(ife,Lzo),e(oo,Bzo),e(oo,gn),e(gn,xzo),e(gn,dfe),e(dfe,kzo),e(gn,Rzo),e(gn,cfe),e(cfe,Szo),e(gn,Pzo),e(gn,ffe),e(ffe,$zo),e(gn,Izo),e(oo,jzo),e(oo,hn),e(hn,Zv),e(Zv,mfe),e(mfe,Nzo),e(Zv,Dzo),e(Zv,Aq),e(Aq,qzo),e(Zv,Gzo),e(hn,Ozo),e(hn,e6),e(e6,gfe),e(gfe,Xzo),e(e6,Vzo),e(e6,Lq),e(Lq,zzo),e(e6,Wzo),e(hn,Qzo),e(hn,o6),e(o6,hfe),e(hfe,Hzo),e(o6,Uzo),e(o6,Bq),e(Bq,Jzo),e(o6,Yzo),e(hn,Kzo),e(hn,r6),e(r6,pfe),e(pfe,Zzo),e(r6,eWo),e(r6,xq),e(xq,oWo),e(r6,rWo),e(oo,tWo),e(oo,t6),e(t6,aWo),e(t6,_fe),e(_fe,nWo),e(t6,sWo),e(t6,ufe),e(ufe,lWo),e(oo,iWo),e(oo,bfe),e(bfe,dWo),e(oo,cWo),g(hy,oo,null),b(d,ARe,u),b(d,ac,u),e(ac,a6),e(a6,vfe),g(py,vfe,null),e(ac,fWo),e(ac,Tfe),e(Tfe,mWo),b(d,LRe,u),b(d,pr,u),g(_y,pr,null),e(pr,gWo),e(pr,nc),e(nc,hWo),e(nc,Ffe),e(Ffe,pWo),e(nc,_Wo),e(nc,Cfe),e(Cfe,uWo),e(nc,bWo),e(pr,vWo),e(pr,uy),e(uy,TWo),e(uy,Mfe),e(Mfe,FWo),e(uy,CWo),e(pr,MWo),e(pr,ct),g(by,ct,null),e(ct,EWo),e(ct,Efe),e(Efe,yWo),e(ct,wWo),e(ct,sc),e(sc,AWo),e(sc,yfe),e(yfe,LWo),e(sc,BWo),e(sc,wfe),e(wfe,xWo),e(sc,kWo),e(ct,RWo),e(ct,Afe),e(Afe,SWo),e(ct,PWo),g(vy,ct,null),e(pr,$Wo),e(pr,ro),g(Ty,ro,null),e(ro,IWo),e(ro,Lfe),e(Lfe,jWo),e(ro,NWo),e(ro,pn),e(pn,DWo),e(pn,Bfe),e(Bfe,qWo),e(pn,GWo),e(pn,xfe),e(xfe,OWo),e(pn,XWo),e(pn,kfe),e(kfe,VWo),e(pn,zWo),e(ro,WWo),e(ro,lc),e(lc,n6),e(n6,Rfe),e(Rfe,QWo),e(n6,HWo),e(n6,kq),e(kq,UWo),e(n6,JWo),e(lc,YWo),e(lc,s6),e(s6,Sfe),e(Sfe,KWo),e(s6,ZWo),e(s6,Rq),e(Rq,eQo),e(s6,oQo),e(lc,rQo),e(lc,l6),e(l6,Pfe),e(Pfe,tQo),e(l6,aQo),e(l6,Sq),e(Sq,nQo),e(l6,sQo),e(ro,lQo),e(ro,i6),e(i6,iQo),e(i6,$fe),e($fe,dQo),e(i6,cQo),e(i6,Ife),e(Ife,fQo),e(ro,mQo),e(ro,jfe),e(jfe,gQo),e(ro,hQo),g(Fy,ro,null),b(d,BRe,u),b(d,ic,u),e(ic,d6),e(d6,Nfe),g(Cy,Nfe,null),e(ic,pQo),e(ic,Dfe),e(Dfe,_Qo),b(d,xRe,u),b(d,_r,u),g(My,_r,null),e(_r,uQo),e(_r,dc),e(dc,bQo),e(dc,qfe),e(qfe,vQo),e(dc,TQo),e(dc,Gfe),e(Gfe,FQo),e(dc,CQo),e(_r,MQo),e(_r,Ey),e(Ey,EQo),e(Ey,Ofe),e(Ofe,yQo),e(Ey,wQo),e(_r,AQo),e(_r,ft),g(yy,ft,null),e(ft,LQo),e(ft,Xfe),e(Xfe,BQo),e(ft,xQo),e(ft,cc),e(cc,kQo),e(cc,Vfe),e(Vfe,RQo),e(cc,SQo),e(cc,zfe),e(zfe,PQo),e(cc,$Qo),e(ft,IQo),e(ft,Wfe),e(Wfe,jQo),e(ft,NQo),g(wy,ft,null),e(_r,DQo),e(_r,to),g(Ay,to,null),e(to,qQo),e(to,Qfe),e(Qfe,GQo),e(to,OQo),e(to,_n),e(_n,XQo),e(_n,Hfe),e(Hfe,VQo),e(_n,zQo),e(_n,Ufe),e(Ufe,WQo),e(_n,QQo),e(_n,Jfe),e(Jfe,HQo),e(_n,UQo),e(to,JQo),e(to,Yfe),e(Yfe,c6),e(c6,Kfe),e(Kfe,YQo),e(c6,KQo),e(c6,Pq),e(Pq,ZQo),e(c6,eHo),e(to,oHo),e(to,f6),e(f6,rHo),e(f6,Zfe),e(Zfe,tHo),e(f6,aHo),e(f6,eme),e(eme,nHo),e(to,sHo),e(to,ome),e(ome,lHo),e(to,iHo),g(Ly,to,null),b(d,kRe,u),b(d,fc,u),e(fc,m6),e(m6,rme),g(By,rme,null),e(fc,dHo),e(fc,tme),e(tme,cHo),b(d,RRe,u),b(d,ur,u),g(xy,ur,null),e(ur,fHo),e(ur,mc),e(mc,mHo),e(mc,ame),e(ame,gHo),e(mc,hHo),e(mc,nme),e(nme,pHo),e(mc,_Ho),e(ur,uHo),e(ur,ky),e(ky,bHo),e(ky,sme),e(sme,vHo),e(ky,THo),e(ur,FHo),e(ur,mt),g(Ry,mt,null),e(mt,CHo),e(mt,lme),e(lme,MHo),e(mt,EHo),e(mt,gc),e(gc,yHo),e(gc,ime),e(ime,wHo),e(gc,AHo),e(gc,dme),e(dme,LHo),e(gc,BHo),e(mt,xHo),e(mt,cme),e(cme,kHo),e(mt,RHo),g(Sy,mt,null),e(ur,SHo),e(ur,ao),g(Py,ao,null),e(ao,PHo),e(ao,fme),e(fme,$Ho),e(ao,IHo),e(ao,un),e(un,jHo),e(un,mme),e(mme,NHo),e(un,DHo),e(un,gme),e(gme,qHo),e(un,GHo),e(un,hme),e(hme,OHo),e(un,XHo),e(ao,VHo),e(ao,pme),e(pme,g6),e(g6,_me),e(_me,zHo),e(g6,WHo),e(g6,$q),e($q,QHo),e(g6,HHo),e(ao,UHo),e(ao,h6),e(h6,JHo),e(h6,ume),e(ume,YHo),e(h6,KHo),e(h6,bme),e(bme,ZHo),e(ao,eUo),e(ao,vme),e(vme,oUo),e(ao,rUo),g($y,ao,null),b(d,SRe,u),b(d,hc,u),e(hc,p6),e(p6,Tme),g(Iy,Tme,null),e(hc,tUo),e(hc,Fme),e(Fme,aUo),b(d,PRe,u),b(d,br,u),g(jy,br,null),e(br,nUo),e(br,pc),e(pc,sUo),e(pc,Cme),e(Cme,lUo),e(pc,iUo),e(pc,Mme),e(Mme,dUo),e(pc,cUo),e(br,fUo),e(br,Ny),e(Ny,mUo),e(Ny,Eme),e(Eme,gUo),e(Ny,hUo),e(br,pUo),e(br,gt),g(Dy,gt,null),e(gt,_Uo),e(gt,yme),e(yme,uUo),e(gt,bUo),e(gt,_c),e(_c,vUo),e(_c,wme),e(wme,TUo),e(_c,FUo),e(_c,Ame),e(Ame,CUo),e(_c,MUo),e(gt,EUo),e(gt,Lme),e(Lme,yUo),e(gt,wUo),g(qy,gt,null),e(br,AUo),e(br,no),g(Gy,no,null),e(no,LUo),e(no,Bme),e(Bme,BUo),e(no,xUo),e(no,bn),e(bn,kUo),e(bn,xme),e(xme,RUo),e(bn,SUo),e(bn,kme),e(kme,PUo),e(bn,$Uo),e(bn,Rme),e(Rme,IUo),e(bn,jUo),e(no,NUo),e(no,Oy),e(Oy,_6),e(_6,Sme),e(Sme,DUo),e(_6,qUo),e(_6,Iq),e(Iq,GUo),e(_6,OUo),e(Oy,XUo),e(Oy,u6),e(u6,Pme),e(Pme,VUo),e(u6,zUo),e(u6,jq),e(jq,WUo),e(u6,QUo),e(no,HUo),e(no,b6),e(b6,UUo),e(b6,$me),e($me,JUo),e(b6,YUo),e(b6,Ime),e(Ime,KUo),e(no,ZUo),e(no,jme),e(jme,eJo),e(no,oJo),g(Xy,no,null),b(d,$Re,u),b(d,uc,u),e(uc,v6),e(v6,Nme),g(Vy,Nme,null),e(uc,rJo),e(uc,Dme),e(Dme,tJo),b(d,IRe,u),b(d,vr,u),g(zy,vr,null),e(vr,aJo),e(vr,bc),e(bc,nJo),e(bc,qme),e(qme,sJo),e(bc,lJo),e(bc,Gme),e(Gme,iJo),e(bc,dJo),e(vr,cJo),e(vr,Wy),e(Wy,fJo),e(Wy,Ome),e(Ome,mJo),e(Wy,gJo),e(vr,hJo),e(vr,ht),g(Qy,ht,null),e(ht,pJo),e(ht,Xme),e(Xme,_Jo),e(ht,uJo),e(ht,vc),e(vc,bJo),e(vc,Vme),e(Vme,vJo),e(vc,TJo),e(vc,zme),e(zme,FJo),e(vc,CJo),e(ht,MJo),e(ht,Wme),e(Wme,EJo),e(ht,yJo),g(Hy,ht,null),e(vr,wJo),e(vr,so),g(Uy,so,null),e(so,AJo),e(so,Qme),e(Qme,LJo),e(so,BJo),e(so,vn),e(vn,xJo),e(vn,Hme),e(Hme,kJo),e(vn,RJo),e(vn,Ume),e(Ume,SJo),e(vn,PJo),e(vn,Jme),e(Jme,$Jo),e(vn,IJo),e(so,jJo),e(so,Yme),e(Yme,T6),e(T6,Kme),e(Kme,NJo),e(T6,DJo),e(T6,Nq),e(Nq,qJo),e(T6,GJo),e(so,OJo),e(so,F6),e(F6,XJo),e(F6,Zme),e(Zme,VJo),e(F6,zJo),e(F6,ege),e(ege,WJo),e(so,QJo),e(so,oge),e(oge,HJo),e(so,UJo),g(Jy,so,null),b(d,jRe,u),b(d,Tc,u),e(Tc,C6),e(C6,rge),g(Yy,rge,null),e(Tc,JJo),e(Tc,tge),e(tge,YJo),b(d,NRe,u),b(d,Tr,u),g(Ky,Tr,null),e(Tr,KJo),e(Tr,Fc),e(Fc,ZJo),e(Fc,age),e(age,eYo),e(Fc,oYo),e(Fc,nge),e(nge,rYo),e(Fc,tYo),e(Tr,aYo),e(Tr,Zy),e(Zy,nYo),e(Zy,sge),e(sge,sYo),e(Zy,lYo),e(Tr,iYo),e(Tr,pt),g(ew,pt,null),e(pt,dYo),e(pt,lge),e(lge,cYo),e(pt,fYo),e(pt,Cc),e(Cc,mYo),e(Cc,ige),e(ige,gYo),e(Cc,hYo),e(Cc,dge),e(dge,pYo),e(Cc,_Yo),e(pt,uYo),e(pt,cge),e(cge,bYo),e(pt,vYo),g(ow,pt,null),e(Tr,TYo),e(Tr,ho),g(rw,ho,null),e(ho,FYo),e(ho,fge),e(fge,CYo),e(ho,MYo),e(ho,Tn),e(Tn,EYo),e(Tn,mge),e(mge,yYo),e(Tn,wYo),e(Tn,gge),e(gge,AYo),e(Tn,LYo),e(Tn,hge),e(hge,BYo),e(Tn,xYo),e(ho,kYo),e(ho,B),e(B,M6),e(M6,pge),e(pge,RYo),e(M6,SYo),e(M6,Dq),e(Dq,PYo),e(M6,$Yo),e(B,IYo),e(B,E6),e(E6,_ge),e(_ge,jYo),e(E6,NYo),e(E6,qq),e(qq,DYo),e(E6,qYo),e(B,GYo),e(B,y6),e(y6,uge),e(uge,OYo),e(y6,XYo),e(y6,Gq),e(Gq,VYo),e(y6,zYo),e(B,WYo),e(B,w6),e(w6,bge),e(bge,QYo),e(w6,HYo),e(w6,Oq),e(Oq,UYo),e(w6,JYo),e(B,YYo),e(B,A6),e(A6,vge),e(vge,KYo),e(A6,ZYo),e(A6,Xq),e(Xq,eKo),e(A6,oKo),e(B,rKo),e(B,L6),e(L6,Tge),e(Tge,tKo),e(L6,aKo),e(L6,Vq),e(Vq,nKo),e(L6,sKo),e(B,lKo),e(B,B6),e(B6,Fge),e(Fge,iKo),e(B6,dKo),e(B6,zq),e(zq,cKo),e(B6,fKo),e(B,mKo),e(B,x6),e(x6,Cge),e(Cge,gKo),e(x6,hKo),e(x6,Wq),e(Wq,pKo),e(x6,_Ko),e(B,uKo),e(B,k6),e(k6,Mge),e(Mge,bKo),e(k6,vKo),e(k6,Qq),e(Qq,TKo),e(k6,FKo),e(B,CKo),e(B,R6),e(R6,Ege),e(Ege,MKo),e(R6,EKo),e(R6,Hq),e(Hq,yKo),e(R6,wKo),e(B,AKo),e(B,S6),e(S6,yge),e(yge,LKo),e(S6,BKo),e(S6,Uq),e(Uq,xKo),e(S6,kKo),e(B,RKo),e(B,P6),e(P6,wge),e(wge,SKo),e(P6,PKo),e(P6,Jq),e(Jq,$Ko),e(P6,IKo),e(B,jKo),e(B,$6),e($6,Age),e(Age,NKo),e($6,DKo),e($6,Yq),e(Yq,qKo),e($6,GKo),e(B,OKo),e(B,I6),e(I6,Lge),e(Lge,XKo),e(I6,VKo),e(I6,Kq),e(Kq,zKo),e(I6,WKo),e(B,QKo),e(B,j6),e(j6,Bge),e(Bge,HKo),e(j6,UKo),e(j6,Zq),e(Zq,JKo),e(j6,YKo),e(B,KKo),e(B,N6),e(N6,xge),e(xge,ZKo),e(N6,eZo),e(N6,eG),e(eG,oZo),e(N6,rZo),e(B,tZo),e(B,Ws),e(Ws,kge),e(kge,aZo),e(Ws,nZo),e(Ws,oG),e(oG,sZo),e(Ws,lZo),e(Ws,rG),e(rG,iZo),e(Ws,dZo),e(B,cZo),e(B,D6),e(D6,Rge),e(Rge,fZo),e(D6,mZo),e(D6,tG),e(tG,gZo),e(D6,hZo),e(B,pZo),e(B,q6),e(q6,Sge),e(Sge,_Zo),e(q6,uZo),e(q6,aG),e(aG,bZo),e(q6,vZo),e(B,TZo),e(B,G6),e(G6,Pge),e(Pge,FZo),e(G6,CZo),e(G6,nG),e(nG,MZo),e(G6,EZo),e(B,yZo),e(B,O6),e(O6,$ge),e($ge,wZo),e(O6,AZo),e(O6,sG),e(sG,LZo),e(O6,BZo),e(B,xZo),e(B,X6),e(X6,Ige),e(Ige,kZo),e(X6,RZo),e(X6,lG),e(lG,SZo),e(X6,PZo),e(B,$Zo),e(B,V6),e(V6,jge),e(jge,IZo),e(V6,jZo),e(V6,iG),e(iG,NZo),e(V6,DZo),e(B,qZo),e(B,z6),e(z6,Nge),e(Nge,GZo),e(z6,OZo),e(z6,dG),e(dG,XZo),e(z6,VZo),e(B,zZo),e(B,W6),e(W6,Dge),e(Dge,WZo),e(W6,QZo),e(W6,cG),e(cG,HZo),e(W6,UZo),e(B,JZo),e(B,Q6),e(Q6,qge),e(qge,YZo),e(Q6,KZo),e(Q6,fG),e(fG,ZZo),e(Q6,eer),e(B,oer),e(B,H6),e(H6,Gge),e(Gge,rer),e(H6,ter),e(H6,mG),e(mG,aer),e(H6,ner),e(B,ser),e(B,U6),e(U6,Oge),e(Oge,ler),e(U6,ier),e(U6,gG),e(gG,der),e(U6,cer),e(B,fer),e(B,J6),e(J6,Xge),e(Xge,mer),e(J6,ger),e(J6,hG),e(hG,her),e(J6,per),e(B,_er),e(B,Y6),e(Y6,Vge),e(Vge,uer),e(Y6,ber),e(Y6,pG),e(pG,ver),e(Y6,Ter),e(B,Fer),e(B,K6),e(K6,zge),e(zge,Cer),e(K6,Mer),e(K6,_G),e(_G,Eer),e(K6,yer),e(B,wer),e(B,Z6),e(Z6,Wge),e(Wge,Aer),e(Z6,Ler),e(Z6,uG),e(uG,Ber),e(Z6,xer),e(B,ker),e(B,e0),e(e0,Qge),e(Qge,Rer),e(e0,Ser),e(e0,bG),e(bG,Per),e(e0,$er),e(B,Ier),e(B,o0),e(o0,Hge),e(Hge,jer),e(o0,Ner),e(o0,vG),e(vG,Der),e(o0,qer),e(B,Ger),e(B,r0),e(r0,Uge),e(Uge,Oer),e(r0,Xer),e(r0,TG),e(TG,Ver),e(r0,zer),e(B,Wer),e(B,t0),e(t0,Jge),e(Jge,Qer),e(t0,Her),e(t0,FG),e(FG,Uer),e(t0,Jer),e(B,Yer),e(B,a0),e(a0,Yge),e(Yge,Ker),e(a0,Zer),e(a0,CG),e(CG,eor),e(a0,oor),e(B,ror),e(B,n0),e(n0,Kge),e(Kge,tor),e(n0,aor),e(n0,MG),e(MG,nor),e(n0,sor),e(B,lor),e(B,s0),e(s0,Zge),e(Zge,ior),e(s0,dor),e(s0,EG),e(EG,cor),e(s0,mor),e(B,gor),e(B,l0),e(l0,ehe),e(ehe,hor),e(l0,por),e(l0,yG),e(yG,_or),e(l0,uor),e(B,bor),e(B,i0),e(i0,ohe),e(ohe,vor),e(i0,Tor),e(i0,wG),e(wG,For),e(i0,Cor),e(B,Mor),e(B,d0),e(d0,rhe),e(rhe,Eor),e(d0,yor),e(d0,AG),e(AG,wor),e(d0,Aor),e(ho,Lor),e(ho,the),e(the,Bor),e(ho,xor),g(tw,ho,null),b(d,DRe,u),b(d,Mc,u),e(Mc,c0),e(c0,ahe),g(aw,ahe,null),e(Mc,kor),e(Mc,nhe),e(nhe,Ror),b(d,qRe,u),b(d,Fr,u),g(nw,Fr,null),e(Fr,Sor),e(Fr,Ec),e(Ec,Por),e(Ec,she),e(she,$or),e(Ec,Ior),e(Ec,lhe),e(lhe,jor),e(Ec,Nor),e(Fr,Dor),e(Fr,sw),e(sw,qor),e(sw,ihe),e(ihe,Gor),e(sw,Oor),e(Fr,Xor),e(Fr,_t),g(lw,_t,null),e(_t,Vor),e(_t,dhe),e(dhe,zor),e(_t,Wor),e(_t,yc),e(yc,Qor),e(yc,che),e(che,Hor),e(yc,Uor),e(yc,fhe),e(fhe,Jor),e(yc,Yor),e(_t,Kor),e(_t,mhe),e(mhe,Zor),e(_t,err),g(iw,_t,null),e(Fr,orr),e(Fr,po),g(dw,po,null),e(po,rrr),e(po,ghe),e(ghe,trr),e(po,arr),e(po,Fn),e(Fn,nrr),e(Fn,hhe),e(hhe,srr),e(Fn,lrr),e(Fn,phe),e(phe,irr),e(Fn,drr),e(Fn,_he),e(_he,crr),e(Fn,frr),e(po,mrr),e(po,H),e(H,f0),e(f0,uhe),e(uhe,grr),e(f0,hrr),e(f0,LG),e(LG,prr),e(f0,_rr),e(H,urr),e(H,m0),e(m0,bhe),e(bhe,brr),e(m0,vrr),e(m0,BG),e(BG,Trr),e(m0,Frr),e(H,Crr),e(H,g0),e(g0,vhe),e(vhe,Mrr),e(g0,Err),e(g0,xG),e(xG,yrr),e(g0,wrr),e(H,Arr),e(H,h0),e(h0,The),e(The,Lrr),e(h0,Brr),e(h0,kG),e(kG,xrr),e(h0,krr),e(H,Rrr),e(H,p0),e(p0,Fhe),e(Fhe,Srr),e(p0,Prr),e(p0,RG),e(RG,$rr),e(p0,Irr),e(H,jrr),e(H,_0),e(_0,Che),e(Che,Nrr),e(_0,Drr),e(_0,SG),e(SG,qrr),e(_0,Grr),e(H,Orr),e(H,u0),e(u0,Mhe),e(Mhe,Xrr),e(u0,Vrr),e(u0,PG),e(PG,zrr),e(u0,Wrr),e(H,Qrr),e(H,b0),e(b0,Ehe),e(Ehe,Hrr),e(b0,Urr),e(b0,$G),e($G,Jrr),e(b0,Yrr),e(H,Krr),e(H,v0),e(v0,yhe),e(yhe,Zrr),e(v0,etr),e(v0,IG),e(IG,otr),e(v0,rtr),e(H,ttr),e(H,T0),e(T0,whe),e(whe,atr),e(T0,ntr),e(T0,jG),e(jG,str),e(T0,ltr),e(H,itr),e(H,F0),e(F0,Ahe),e(Ahe,dtr),e(F0,ctr),e(F0,NG),e(NG,ftr),e(F0,mtr),e(H,gtr),e(H,C0),e(C0,Lhe),e(Lhe,htr),e(C0,ptr),e(C0,DG),e(DG,_tr),e(C0,utr),e(H,btr),e(H,M0),e(M0,Bhe),e(Bhe,vtr),e(M0,Ttr),e(M0,qG),e(qG,Ftr),e(M0,Ctr),e(H,Mtr),e(H,E0),e(E0,xhe),e(xhe,Etr),e(E0,ytr),e(E0,GG),e(GG,wtr),e(E0,Atr),e(H,Ltr),e(H,y0),e(y0,khe),e(khe,Btr),e(y0,xtr),e(y0,OG),e(OG,ktr),e(y0,Rtr),e(H,Str),e(H,w0),e(w0,Rhe),e(Rhe,Ptr),e(w0,$tr),e(w0,XG),e(XG,Itr),e(w0,jtr),e(H,Ntr),e(H,A0),e(A0,She),e(She,Dtr),e(A0,qtr),e(A0,VG),e(VG,Gtr),e(A0,Otr),e(H,Xtr),e(H,L0),e(L0,Phe),e(Phe,Vtr),e(L0,ztr),e(L0,zG),e(zG,Wtr),e(L0,Qtr),e(H,Htr),e(H,B0),e(B0,$he),e($he,Utr),e(B0,Jtr),e(B0,WG),e(WG,Ytr),e(B0,Ktr),e(H,Ztr),e(H,x0),e(x0,Ihe),e(Ihe,ear),e(x0,oar),e(x0,QG),e(QG,rar),e(x0,tar),e(H,aar),e(H,k0),e(k0,jhe),e(jhe,nar),e(k0,sar),e(k0,HG),e(HG,lar),e(k0,iar),e(H,dar),e(H,R0),e(R0,Nhe),e(Nhe,car),e(R0,far),e(R0,UG),e(UG,mar),e(R0,gar),e(po,har),e(po,Dhe),e(Dhe,par),e(po,_ar),g(cw,po,null),b(d,GRe,u),b(d,wc,u),e(wc,S0),e(S0,qhe),g(fw,qhe,null),e(wc,uar),e(wc,Ghe),e(Ghe,bar),b(d,ORe,u),b(d,Cr,u),g(mw,Cr,null),e(Cr,Tar),e(Cr,Ac),e(Ac,Far),e(Ac,Ohe),e(Ohe,Car),e(Ac,Mar),e(Ac,Xhe),e(Xhe,Ear),e(Ac,yar),e(Cr,war),e(Cr,gw),e(gw,Aar),e(gw,Vhe),e(Vhe,Lar),e(gw,Bar),e(Cr,xar),e(Cr,ut),g(hw,ut,null),e(ut,kar),e(ut,zhe),e(zhe,Rar),e(ut,Sar),e(ut,Lc),e(Lc,Par),e(Lc,Whe),e(Whe,$ar),e(Lc,Iar),e(Lc,Qhe),e(Qhe,jar),e(Lc,Nar),e(ut,Dar),e(ut,Hhe),e(Hhe,qar),e(ut,Gar),g(pw,ut,null),e(Cr,Oar),e(Cr,_o),g(_w,_o,null),e(_o,Xar),e(_o,Uhe),e(Uhe,Var),e(_o,zar),e(_o,Cn),e(Cn,War),e(Cn,Jhe),e(Jhe,Qar),e(Cn,Har),e(Cn,Yhe),e(Yhe,Uar),e(Cn,Jar),e(Cn,Khe),e(Khe,Yar),e(Cn,Kar),e(_o,Zar),e(_o,ge),e(ge,P0),e(P0,Zhe),e(Zhe,enr),e(P0,onr),e(P0,JG),e(JG,rnr),e(P0,tnr),e(ge,anr),e(ge,$0),e($0,epe),e(epe,nnr),e($0,snr),e($0,YG),e(YG,lnr),e($0,inr),e(ge,dnr),e(ge,I0),e(I0,ope),e(ope,cnr),e(I0,fnr),e(I0,KG),e(KG,mnr),e(I0,gnr),e(ge,hnr),e(ge,j0),e(j0,rpe),e(rpe,pnr),e(j0,_nr),e(j0,ZG),e(ZG,unr),e(j0,bnr),e(ge,vnr),e(ge,N0),e(N0,tpe),e(tpe,Tnr),e(N0,Fnr),e(N0,eO),e(eO,Cnr),e(N0,Mnr),e(ge,Enr),e(ge,D0),e(D0,ape),e(ape,ynr),e(D0,wnr),e(D0,oO),e(oO,Anr),e(D0,Lnr),e(ge,Bnr),e(ge,q0),e(q0,npe),e(npe,xnr),e(q0,knr),e(q0,rO),e(rO,Rnr),e(q0,Snr),e(ge,Pnr),e(ge,G0),e(G0,spe),e(spe,$nr),e(G0,Inr),e(G0,tO),e(tO,jnr),e(G0,Nnr),e(ge,Dnr),e(ge,O0),e(O0,lpe),e(lpe,qnr),e(O0,Gnr),e(O0,aO),e(aO,Onr),e(O0,Xnr),e(ge,Vnr),e(ge,X0),e(X0,ipe),e(ipe,znr),e(X0,Wnr),e(X0,nO),e(nO,Qnr),e(X0,Hnr),e(ge,Unr),e(ge,V0),e(V0,dpe),e(dpe,Jnr),e(V0,Ynr),e(V0,sO),e(sO,Knr),e(V0,Znr),e(_o,esr),e(_o,cpe),e(cpe,osr),e(_o,rsr),g(uw,_o,null),b(d,XRe,u),b(d,Bc,u),e(Bc,z0),e(z0,fpe),g(bw,fpe,null),e(Bc,tsr),e(Bc,mpe),e(mpe,asr),b(d,VRe,u),b(d,Mr,u),g(vw,Mr,null),e(Mr,nsr),e(Mr,xc),e(xc,ssr),e(xc,gpe),e(gpe,lsr),e(xc,isr),e(xc,hpe),e(hpe,dsr),e(xc,csr),e(Mr,fsr),e(Mr,Tw),e(Tw,msr),e(Tw,ppe),e(ppe,gsr),e(Tw,hsr),e(Mr,psr),e(Mr,bt),g(Fw,bt,null),e(bt,_sr),e(bt,_pe),e(_pe,usr),e(bt,bsr),e(bt,kc),e(kc,vsr),e(kc,upe),e(upe,Tsr),e(kc,Fsr),e(kc,bpe),e(bpe,Csr),e(kc,Msr),e(bt,Esr),e(bt,vpe),e(vpe,ysr),e(bt,wsr),g(Cw,bt,null),e(Mr,Asr),e(Mr,uo),g(Mw,uo,null),e(uo,Lsr),e(uo,Tpe),e(Tpe,Bsr),e(uo,xsr),e(uo,Mn),e(Mn,ksr),e(Mn,Fpe),e(Fpe,Rsr),e(Mn,Ssr),e(Mn,Cpe),e(Cpe,Psr),e(Mn,$sr),e(Mn,Mpe),e(Mpe,Isr),e(Mn,jsr),e(uo,Nsr),e(uo,Ew),e(Ew,W0),e(W0,Epe),e(Epe,Dsr),e(W0,qsr),e(W0,lO),e(lO,Gsr),e(W0,Osr),e(Ew,Xsr),e(Ew,Q0),e(Q0,ype),e(ype,Vsr),e(Q0,zsr),e(Q0,iO),e(iO,Wsr),e(Q0,Qsr),e(uo,Hsr),e(uo,wpe),e(wpe,Usr),e(uo,Jsr),g(yw,uo,null),b(d,zRe,u),b(d,Rc,u),e(Rc,H0),e(H0,Ape),g(ww,Ape,null),e(Rc,Ysr),e(Rc,Lpe),e(Lpe,Ksr),b(d,WRe,u),b(d,Er,u),g(Aw,Er,null),e(Er,Zsr),e(Er,Sc),e(Sc,elr),e(Sc,Bpe),e(Bpe,olr),e(Sc,rlr),e(Sc,xpe),e(xpe,tlr),e(Sc,alr),e(Er,nlr),e(Er,Lw),e(Lw,slr),e(Lw,kpe),e(kpe,llr),e(Lw,ilr),e(Er,dlr),e(Er,vt),g(Bw,vt,null),e(vt,clr),e(vt,Rpe),e(Rpe,flr),e(vt,mlr),e(vt,Pc),e(Pc,glr),e(Pc,Spe),e(Spe,hlr),e(Pc,plr),e(Pc,Ppe),e(Ppe,_lr),e(Pc,ulr),e(vt,blr),e(vt,$pe),e($pe,vlr),e(vt,Tlr),g(xw,vt,null),e(Er,Flr),e(Er,bo),g(kw,bo,null),e(bo,Clr),e(bo,Ipe),e(Ipe,Mlr),e(bo,Elr),e(bo,En),e(En,ylr),e(En,jpe),e(jpe,wlr),e(En,Alr),e(En,Npe),e(Npe,Llr),e(En,Blr),e(En,Dpe),e(Dpe,xlr),e(En,klr),e(bo,Rlr),e(bo,Y),e(Y,U0),e(U0,qpe),e(qpe,Slr),e(U0,Plr),e(U0,dO),e(dO,$lr),e(U0,Ilr),e(Y,jlr),e(Y,J0),e(J0,Gpe),e(Gpe,Nlr),e(J0,Dlr),e(J0,cO),e(cO,qlr),e(J0,Glr),e(Y,Olr),e(Y,Y0),e(Y0,Ope),e(Ope,Xlr),e(Y0,Vlr),e(Y0,fO),e(fO,zlr),e(Y0,Wlr),e(Y,Qlr),e(Y,K0),e(K0,Xpe),e(Xpe,Hlr),e(K0,Ulr),e(K0,mO),e(mO,Jlr),e(K0,Ylr),e(Y,Klr),e(Y,Z0),e(Z0,Vpe),e(Vpe,Zlr),e(Z0,eir),e(Z0,gO),e(gO,oir),e(Z0,rir),e(Y,tir),e(Y,eT),e(eT,zpe),e(zpe,air),e(eT,nir),e(eT,hO),e(hO,sir),e(eT,lir),e(Y,iir),e(Y,oT),e(oT,Wpe),e(Wpe,dir),e(oT,cir),e(oT,pO),e(pO,fir),e(oT,mir),e(Y,gir),e(Y,rT),e(rT,Qpe),e(Qpe,hir),e(rT,pir),e(rT,_O),e(_O,_ir),e(rT,uir),e(Y,bir),e(Y,tT),e(tT,Hpe),e(Hpe,vir),e(tT,Tir),e(tT,uO),e(uO,Fir),e(tT,Cir),e(Y,Mir),e(Y,aT),e(aT,Upe),e(Upe,Eir),e(aT,yir),e(aT,bO),e(bO,wir),e(aT,Air),e(Y,Lir),e(Y,nT),e(nT,Jpe),e(Jpe,Bir),e(nT,xir),e(nT,vO),e(vO,kir),e(nT,Rir),e(Y,Sir),e(Y,sT),e(sT,Ype),e(Ype,Pir),e(sT,$ir),e(sT,TO),e(TO,Iir),e(sT,jir),e(Y,Nir),e(Y,lT),e(lT,Kpe),e(Kpe,Dir),e(lT,qir),e(lT,FO),e(FO,Gir),e(lT,Oir),e(Y,Xir),e(Y,iT),e(iT,Zpe),e(Zpe,Vir),e(iT,zir),e(iT,CO),e(CO,Wir),e(iT,Qir),e(Y,Hir),e(Y,dT),e(dT,e_e),e(e_e,Uir),e(dT,Jir),e(dT,MO),e(MO,Yir),e(dT,Kir),e(Y,Zir),e(Y,cT),e(cT,o_e),e(o_e,edr),e(cT,odr),e(cT,EO),e(EO,rdr),e(cT,tdr),e(Y,adr),e(Y,fT),e(fT,r_e),e(r_e,ndr),e(fT,sdr),e(fT,yO),e(yO,ldr),e(fT,idr),e(Y,ddr),e(Y,mT),e(mT,t_e),e(t_e,cdr),e(mT,fdr),e(mT,wO),e(wO,mdr),e(mT,gdr),e(Y,hdr),e(Y,gT),e(gT,a_e),e(a_e,pdr),e(gT,_dr),e(gT,AO),e(AO,udr),e(gT,bdr),e(Y,vdr),e(Y,hT),e(hT,n_e),e(n_e,Tdr),e(hT,Fdr),e(hT,LO),e(LO,Cdr),e(hT,Mdr),e(bo,Edr),e(bo,s_e),e(s_e,ydr),e(bo,wdr),g(Rw,bo,null),b(d,QRe,u),b(d,$c,u),e($c,pT),e(pT,l_e),g(Sw,l_e,null),e($c,Adr),e($c,i_e),e(i_e,Ldr),b(d,HRe,u),b(d,yr,u),g(Pw,yr,null),e(yr,Bdr),e(yr,Ic),e(Ic,xdr),e(Ic,d_e),e(d_e,kdr),e(Ic,Rdr),e(Ic,c_e),e(c_e,Sdr),e(Ic,Pdr),e(yr,$dr),e(yr,$w),e($w,Idr),e($w,f_e),e(f_e,jdr),e($w,Ndr),e(yr,Ddr),e(yr,Tt),g(Iw,Tt,null),e(Tt,qdr),e(Tt,m_e),e(m_e,Gdr),e(Tt,Odr),e(Tt,jc),e(jc,Xdr),e(jc,g_e),e(g_e,Vdr),e(jc,zdr),e(jc,h_e),e(h_e,Wdr),e(jc,Qdr),e(Tt,Hdr),e(Tt,p_e),e(p_e,Udr),e(Tt,Jdr),g(jw,Tt,null),e(yr,Ydr),e(yr,vo),g(Nw,vo,null),e(vo,Kdr),e(vo,__e),e(__e,Zdr),e(vo,ecr),e(vo,yn),e(yn,ocr),e(yn,u_e),e(u_e,rcr),e(yn,tcr),e(yn,b_e),e(b_e,acr),e(yn,ncr),e(yn,v_e),e(v_e,scr),e(yn,lcr),e(vo,icr),e(vo,ue),e(ue,_T),e(_T,T_e),e(T_e,dcr),e(_T,ccr),e(_T,BO),e(BO,fcr),e(_T,mcr),e(ue,gcr),e(ue,uT),e(uT,F_e),e(F_e,hcr),e(uT,pcr),e(uT,xO),e(xO,_cr),e(uT,ucr),e(ue,bcr),e(ue,bT),e(bT,C_e),e(C_e,vcr),e(bT,Tcr),e(bT,kO),e(kO,Fcr),e(bT,Ccr),e(ue,Mcr),e(ue,vT),e(vT,M_e),e(M_e,Ecr),e(vT,ycr),e(vT,RO),e(RO,wcr),e(vT,Acr),e(ue,Lcr),e(ue,TT),e(TT,E_e),e(E_e,Bcr),e(TT,xcr),e(TT,SO),e(SO,kcr),e(TT,Rcr),e(ue,Scr),e(ue,FT),e(FT,y_e),e(y_e,Pcr),e(FT,$cr),e(FT,PO),e(PO,Icr),e(FT,jcr),e(ue,Ncr),e(ue,CT),e(CT,w_e),e(w_e,Dcr),e(CT,qcr),e(CT,$O),e($O,Gcr),e(CT,Ocr),e(ue,Xcr),e(ue,MT),e(MT,A_e),e(A_e,Vcr),e(MT,zcr),e(MT,IO),e(IO,Wcr),e(MT,Qcr),e(ue,Hcr),e(ue,ET),e(ET,L_e),e(L_e,Ucr),e(ET,Jcr),e(ET,jO),e(jO,Ycr),e(ET,Kcr),e(ue,Zcr),e(ue,yT),e(yT,B_e),e(B_e,efr),e(yT,ofr),e(yT,NO),e(NO,rfr),e(yT,tfr),e(vo,afr),e(vo,x_e),e(x_e,nfr),e(vo,sfr),g(Dw,vo,null),b(d,URe,u),b(d,Nc,u),e(Nc,wT),e(wT,k_e),g(qw,k_e,null),e(Nc,lfr),e(Nc,R_e),e(R_e,ifr),b(d,JRe,u),b(d,wr,u),g(Gw,wr,null),e(wr,dfr),e(wr,Dc),e(Dc,cfr),e(Dc,S_e),e(S_e,ffr),e(Dc,mfr),e(Dc,P_e),e(P_e,gfr),e(Dc,hfr),e(wr,pfr),e(wr,Ow),e(Ow,_fr),e(Ow,$_e),e($_e,ufr),e(Ow,bfr),e(wr,vfr),e(wr,Ft),g(Xw,Ft,null),e(Ft,Tfr),e(Ft,I_e),e(I_e,Ffr),e(Ft,Cfr),e(Ft,qc),e(qc,Mfr),e(qc,j_e),e(j_e,Efr),e(qc,yfr),e(qc,N_e),e(N_e,wfr),e(qc,Afr),e(Ft,Lfr),e(Ft,D_e),e(D_e,Bfr),e(Ft,xfr),g(Vw,Ft,null),e(wr,kfr),e(wr,To),g(zw,To,null),e(To,Rfr),e(To,q_e),e(q_e,Sfr),e(To,Pfr),e(To,wn),e(wn,$fr),e(wn,G_e),e(G_e,Ifr),e(wn,jfr),e(wn,O_e),e(O_e,Nfr),e(wn,Dfr),e(wn,X_e),e(X_e,qfr),e(wn,Gfr),e(To,Ofr),e(To,V),e(V,AT),e(AT,V_e),e(V_e,Xfr),e(AT,Vfr),e(AT,DO),e(DO,zfr),e(AT,Wfr),e(V,Qfr),e(V,LT),e(LT,z_e),e(z_e,Hfr),e(LT,Ufr),e(LT,qO),e(qO,Jfr),e(LT,Yfr),e(V,Kfr),e(V,BT),e(BT,W_e),e(W_e,Zfr),e(BT,emr),e(BT,GO),e(GO,omr),e(BT,rmr),e(V,tmr),e(V,xT),e(xT,Q_e),e(Q_e,amr),e(xT,nmr),e(xT,OO),e(OO,smr),e(xT,lmr),e(V,imr),e(V,kT),e(kT,H_e),e(H_e,dmr),e(kT,cmr),e(kT,XO),e(XO,fmr),e(kT,mmr),e(V,gmr),e(V,RT),e(RT,U_e),e(U_e,hmr),e(RT,pmr),e(RT,VO),e(VO,_mr),e(RT,umr),e(V,bmr),e(V,ST),e(ST,J_e),e(J_e,vmr),e(ST,Tmr),e(ST,zO),e(zO,Fmr),e(ST,Cmr),e(V,Mmr),e(V,PT),e(PT,Y_e),e(Y_e,Emr),e(PT,ymr),e(PT,WO),e(WO,wmr),e(PT,Amr),e(V,Lmr),e(V,$T),e($T,K_e),e(K_e,Bmr),e($T,xmr),e($T,QO),e(QO,kmr),e($T,Rmr),e(V,Smr),e(V,IT),e(IT,Z_e),e(Z_e,Pmr),e(IT,$mr),e(IT,HO),e(HO,Imr),e(IT,jmr),e(V,Nmr),e(V,jT),e(jT,eue),e(eue,Dmr),e(jT,qmr),e(jT,UO),e(UO,Gmr),e(jT,Omr),e(V,Xmr),e(V,NT),e(NT,oue),e(oue,Vmr),e(NT,zmr),e(NT,JO),e(JO,Wmr),e(NT,Qmr),e(V,Hmr),e(V,DT),e(DT,rue),e(rue,Umr),e(DT,Jmr),e(DT,YO),e(YO,Ymr),e(DT,Kmr),e(V,Zmr),e(V,qT),e(qT,tue),e(tue,egr),e(qT,ogr),e(qT,KO),e(KO,rgr),e(qT,tgr),e(V,agr),e(V,GT),e(GT,aue),e(aue,ngr),e(GT,sgr),e(GT,ZO),e(ZO,lgr),e(GT,igr),e(V,dgr),e(V,OT),e(OT,nue),e(nue,cgr),e(OT,fgr),e(OT,eX),e(eX,mgr),e(OT,ggr),e(V,hgr),e(V,XT),e(XT,sue),e(sue,pgr),e(XT,_gr),e(XT,oX),e(oX,ugr),e(XT,bgr),e(V,vgr),e(V,VT),e(VT,lue),e(lue,Tgr),e(VT,Fgr),e(VT,rX),e(rX,Cgr),e(VT,Mgr),e(V,Egr),e(V,zT),e(zT,iue),e(iue,ygr),e(zT,wgr),e(zT,tX),e(tX,Agr),e(zT,Lgr),e(V,Bgr),e(V,WT),e(WT,due),e(due,xgr),e(WT,kgr),e(WT,aX),e(aX,Rgr),e(WT,Sgr),e(V,Pgr),e(V,QT),e(QT,cue),e(cue,$gr),e(QT,Igr),e(QT,nX),e(nX,jgr),e(QT,Ngr),e(V,Dgr),e(V,HT),e(HT,fue),e(fue,qgr),e(HT,Ggr),e(HT,sX),e(sX,Ogr),e(HT,Xgr),e(V,Vgr),e(V,UT),e(UT,mue),e(mue,zgr),e(UT,Wgr),e(UT,lX),e(lX,Qgr),e(UT,Hgr),e(V,Ugr),e(V,JT),e(JT,gue),e(gue,Jgr),e(JT,Ygr),e(JT,iX),e(iX,Kgr),e(JT,Zgr),e(V,ehr),e(V,YT),e(YT,hue),e(hue,ohr),e(YT,rhr),e(YT,dX),e(dX,thr),e(YT,ahr),e(To,nhr),e(To,pue),e(pue,shr),e(To,lhr),g(Ww,To,null),b(d,YRe,u),b(d,Gc,u),e(Gc,KT),e(KT,_ue),g(Qw,_ue,null),e(Gc,ihr),e(Gc,uue),e(uue,dhr),b(d,KRe,u),b(d,Ar,u),g(Hw,Ar,null),e(Ar,chr),e(Ar,Oc),e(Oc,fhr),e(Oc,bue),e(bue,mhr),e(Oc,ghr),e(Oc,vue),e(vue,hhr),e(Oc,phr),e(Ar,_hr),e(Ar,Uw),e(Uw,uhr),e(Uw,Tue),e(Tue,bhr),e(Uw,vhr),e(Ar,Thr),e(Ar,Ct),g(Jw,Ct,null),e(Ct,Fhr),e(Ct,Fue),e(Fue,Chr),e(Ct,Mhr),e(Ct,Xc),e(Xc,Ehr),e(Xc,Cue),e(Cue,yhr),e(Xc,whr),e(Xc,Mue),e(Mue,Ahr),e(Xc,Lhr),e(Ct,Bhr),e(Ct,Eue),e(Eue,xhr),e(Ct,khr),g(Yw,Ct,null),e(Ar,Rhr),e(Ar,Fo),g(Kw,Fo,null),e(Fo,Shr),e(Fo,yue),e(yue,Phr),e(Fo,$hr),e(Fo,An),e(An,Ihr),e(An,wue),e(wue,jhr),e(An,Nhr),e(An,Aue),e(Aue,Dhr),e(An,qhr),e(An,Lue),e(Lue,Ghr),e(An,Ohr),e(Fo,Xhr),e(Fo,ae),e(ae,ZT),e(ZT,Bue),e(Bue,Vhr),e(ZT,zhr),e(ZT,cX),e(cX,Whr),e(ZT,Qhr),e(ae,Hhr),e(ae,e8),e(e8,xue),e(xue,Uhr),e(e8,Jhr),e(e8,fX),e(fX,Yhr),e(e8,Khr),e(ae,Zhr),e(ae,o8),e(o8,kue),e(kue,epr),e(o8,opr),e(o8,mX),e(mX,rpr),e(o8,tpr),e(ae,apr),e(ae,r8),e(r8,Rue),e(Rue,npr),e(r8,spr),e(r8,gX),e(gX,lpr),e(r8,ipr),e(ae,dpr),e(ae,t8),e(t8,Sue),e(Sue,cpr),e(t8,fpr),e(t8,hX),e(hX,mpr),e(t8,gpr),e(ae,hpr),e(ae,a8),e(a8,Pue),e(Pue,ppr),e(a8,_pr),e(a8,pX),e(pX,upr),e(a8,bpr),e(ae,vpr),e(ae,n8),e(n8,$ue),e($ue,Tpr),e(n8,Fpr),e(n8,_X),e(_X,Cpr),e(n8,Mpr),e(ae,Epr),e(ae,s8),e(s8,Iue),e(Iue,ypr),e(s8,wpr),e(s8,uX),e(uX,Apr),e(s8,Lpr),e(ae,Bpr),e(ae,l8),e(l8,jue),e(jue,xpr),e(l8,kpr),e(l8,bX),e(bX,Rpr),e(l8,Spr),e(ae,Ppr),e(ae,i8),e(i8,Nue),e(Nue,$pr),e(i8,Ipr),e(i8,vX),e(vX,jpr),e(i8,Npr),e(ae,Dpr),e(ae,d8),e(d8,Due),e(Due,qpr),e(d8,Gpr),e(d8,TX),e(TX,Opr),e(d8,Xpr),e(ae,Vpr),e(ae,c8),e(c8,que),e(que,zpr),e(c8,Wpr),e(c8,FX),e(FX,Qpr),e(c8,Hpr),e(ae,Upr),e(ae,f8),e(f8,Gue),e(Gue,Jpr),e(f8,Ypr),e(f8,CX),e(CX,Kpr),e(f8,Zpr),e(ae,e_r),e(ae,m8),e(m8,Oue),e(Oue,o_r),e(m8,r_r),e(m8,MX),e(MX,t_r),e(m8,a_r),e(ae,n_r),e(ae,g8),e(g8,Xue),e(Xue,s_r),e(g8,l_r),e(g8,EX),e(EX,i_r),e(g8,d_r),e(ae,c_r),e(ae,h8),e(h8,Vue),e(Vue,f_r),e(h8,m_r),e(h8,yX),e(yX,g_r),e(h8,h_r),e(ae,p_r),e(ae,p8),e(p8,zue),e(zue,__r),e(p8,u_r),e(p8,wX),e(wX,b_r),e(p8,v_r),e(Fo,T_r),e(Fo,Wue),e(Wue,F_r),e(Fo,C_r),g(Zw,Fo,null),b(d,ZRe,u),b(d,Vc,u),e(Vc,_8),e(_8,Que),g(eA,Que,null),e(Vc,M_r),e(Vc,Hue),e(Hue,E_r),b(d,eSe,u),b(d,Lr,u),g(oA,Lr,null),e(Lr,y_r),e(Lr,zc),e(zc,w_r),e(zc,Uue),e(Uue,A_r),e(zc,L_r),e(zc,Jue),e(Jue,B_r),e(zc,x_r),e(Lr,k_r),e(Lr,rA),e(rA,R_r),e(rA,Yue),e(Yue,S_r),e(rA,P_r),e(Lr,$_r),e(Lr,Mt),g(tA,Mt,null),e(Mt,I_r),e(Mt,Kue),e(Kue,j_r),e(Mt,N_r),e(Mt,Wc),e(Wc,D_r),e(Wc,Zue),e(Zue,q_r),e(Wc,G_r),e(Wc,e1e),e(e1e,O_r),e(Wc,X_r),e(Mt,V_r),e(Mt,o1e),e(o1e,z_r),e(Mt,W_r),g(aA,Mt,null),e(Lr,Q_r),e(Lr,Co),g(nA,Co,null),e(Co,H_r),e(Co,r1e),e(r1e,U_r),e(Co,J_r),e(Co,Ln),e(Ln,Y_r),e(Ln,t1e),e(t1e,K_r),e(Ln,Z_r),e(Ln,a1e),e(a1e,eur),e(Ln,our),e(Ln,n1e),e(n1e,rur),e(Ln,tur),e(Co,aur),e(Co,s1e),e(s1e,u8),e(u8,l1e),e(l1e,nur),e(u8,sur),e(u8,AX),e(AX,lur),e(u8,iur),e(Co,dur),e(Co,i1e),e(i1e,cur),e(Co,fur),g(sA,Co,null),b(d,oSe,u),b(d,Qc,u),e(Qc,b8),e(b8,d1e),g(lA,d1e,null),e(Qc,mur),e(Qc,c1e),e(c1e,gur),b(d,rSe,u),b(d,Br,u),g(iA,Br,null),e(Br,hur),e(Br,Hc),e(Hc,pur),e(Hc,f1e),e(f1e,_ur),e(Hc,uur),e(Hc,m1e),e(m1e,bur),e(Hc,vur),e(Br,Tur),e(Br,dA),e(dA,Fur),e(dA,g1e),e(g1e,Cur),e(dA,Mur),e(Br,Eur),e(Br,Et),g(cA,Et,null),e(Et,yur),e(Et,h1e),e(h1e,wur),e(Et,Aur),e(Et,Uc),e(Uc,Lur),e(Uc,p1e),e(p1e,Bur),e(Uc,xur),e(Uc,_1e),e(_1e,kur),e(Uc,Rur),e(Et,Sur),e(Et,u1e),e(u1e,Pur),e(Et,$ur),g(fA,Et,null),e(Br,Iur),e(Br,Mo),g(mA,Mo,null),e(Mo,jur),e(Mo,b1e),e(b1e,Nur),e(Mo,Dur),e(Mo,Bn),e(Bn,qur),e(Bn,v1e),e(v1e,Gur),e(Bn,Our),e(Bn,T1e),e(T1e,Xur),e(Bn,Vur),e(Bn,F1e),e(F1e,zur),e(Bn,Wur),e(Mo,Qur),e(Mo,K),e(K,v8),e(v8,C1e),e(C1e,Hur),e(v8,Uur),e(v8,LX),e(LX,Jur),e(v8,Yur),e(K,Kur),e(K,T8),e(T8,M1e),e(M1e,Zur),e(T8,e1r),e(T8,BX),e(BX,o1r),e(T8,r1r),e(K,t1r),e(K,F8),e(F8,E1e),e(E1e,a1r),e(F8,n1r),e(F8,xX),e(xX,s1r),e(F8,l1r),e(K,i1r),e(K,C8),e(C8,y1e),e(y1e,d1r),e(C8,c1r),e(C8,kX),e(kX,f1r),e(C8,m1r),e(K,g1r),e(K,M8),e(M8,w1e),e(w1e,h1r),e(M8,p1r),e(M8,RX),e(RX,_1r),e(M8,u1r),e(K,b1r),e(K,E8),e(E8,A1e),e(A1e,v1r),e(E8,T1r),e(E8,SX),e(SX,F1r),e(E8,C1r),e(K,M1r),e(K,y8),e(y8,L1e),e(L1e,E1r),e(y8,y1r),e(y8,PX),e(PX,w1r),e(y8,A1r),e(K,L1r),e(K,w8),e(w8,B1e),e(B1e,B1r),e(w8,x1r),e(w8,$X),e($X,k1r),e(w8,R1r),e(K,S1r),e(K,A8),e(A8,x1e),e(x1e,P1r),e(A8,$1r),e(A8,IX),e(IX,I1r),e(A8,j1r),e(K,N1r),e(K,L8),e(L8,k1e),e(k1e,D1r),e(L8,q1r),e(L8,jX),e(jX,G1r),e(L8,O1r),e(K,X1r),e(K,B8),e(B8,R1e),e(R1e,V1r),e(B8,z1r),e(B8,NX),e(NX,W1r),e(B8,Q1r),e(K,H1r),e(K,x8),e(x8,S1e),e(S1e,U1r),e(x8,J1r),e(x8,DX),e(DX,Y1r),e(x8,K1r),e(K,Z1r),e(K,k8),e(k8,P1e),e(P1e,ebr),e(k8,obr),e(k8,qX),e(qX,rbr),e(k8,tbr),e(K,abr),e(K,R8),e(R8,$1e),e($1e,nbr),e(R8,sbr),e(R8,GX),e(GX,lbr),e(R8,ibr),e(K,dbr),e(K,S8),e(S8,I1e),e(I1e,cbr),e(S8,fbr),e(S8,OX),e(OX,mbr),e(S8,gbr),e(K,hbr),e(K,P8),e(P8,j1e),e(j1e,pbr),e(P8,_br),e(P8,XX),e(XX,ubr),e(P8,bbr),e(K,vbr),e(K,$8),e($8,N1e),e(N1e,Tbr),e($8,Fbr),e($8,VX),e(VX,Cbr),e($8,Mbr),e(K,Ebr),e(K,I8),e(I8,D1e),e(D1e,ybr),e(I8,wbr),e(I8,zX),e(zX,Abr),e(I8,Lbr),e(K,Bbr),e(K,j8),e(j8,q1e),e(q1e,xbr),e(j8,kbr),e(j8,WX),e(WX,Rbr),e(j8,Sbr),e(K,Pbr),e(K,N8),e(N8,G1e),e(G1e,$br),e(N8,Ibr),e(N8,QX),e(QX,jbr),e(N8,Nbr),e(Mo,Dbr),e(Mo,O1e),e(O1e,qbr),e(Mo,Gbr),g(gA,Mo,null),b(d,tSe,u),b(d,Jc,u),e(Jc,D8),e(D8,X1e),g(hA,X1e,null),e(Jc,Obr),e(Jc,V1e),e(V1e,Xbr),b(d,aSe,u),b(d,xr,u),g(pA,xr,null),e(xr,Vbr),e(xr,Yc),e(Yc,zbr),e(Yc,z1e),e(z1e,Wbr),e(Yc,Qbr),e(Yc,W1e),e(W1e,Hbr),e(Yc,Ubr),e(xr,Jbr),e(xr,_A),e(_A,Ybr),e(_A,Q1e),e(Q1e,Kbr),e(_A,Zbr),e(xr,e5r),e(xr,yt),g(uA,yt,null),e(yt,o5r),e(yt,H1e),e(H1e,r5r),e(yt,t5r),e(yt,Kc),e(Kc,a5r),e(Kc,U1e),e(U1e,n5r),e(Kc,s5r),e(Kc,J1e),e(J1e,l5r),e(Kc,i5r),e(yt,d5r),e(yt,Y1e),e(Y1e,c5r),e(yt,f5r),g(bA,yt,null),e(xr,m5r),e(xr,Eo),g(vA,Eo,null),e(Eo,g5r),e(Eo,K1e),e(K1e,h5r),e(Eo,p5r),e(Eo,xn),e(xn,_5r),e(xn,Z1e),e(Z1e,u5r),e(xn,b5r),e(xn,ebe),e(ebe,v5r),e(xn,T5r),e(xn,obe),e(obe,F5r),e(xn,C5r),e(Eo,M5r),e(Eo,Z),e(Z,q8),e(q8,rbe),e(rbe,E5r),e(q8,y5r),e(q8,HX),e(HX,w5r),e(q8,A5r),e(Z,L5r),e(Z,G8),e(G8,tbe),e(tbe,B5r),e(G8,x5r),e(G8,UX),e(UX,k5r),e(G8,R5r),e(Z,S5r),e(Z,O8),e(O8,abe),e(abe,P5r),e(O8,$5r),e(O8,JX),e(JX,I5r),e(O8,j5r),e(Z,N5r),e(Z,X8),e(X8,nbe),e(nbe,D5r),e(X8,q5r),e(X8,YX),e(YX,G5r),e(X8,O5r),e(Z,X5r),e(Z,V8),e(V8,sbe),e(sbe,V5r),e(V8,z5r),e(V8,KX),e(KX,W5r),e(V8,Q5r),e(Z,H5r),e(Z,z8),e(z8,lbe),e(lbe,U5r),e(z8,J5r),e(z8,ZX),e(ZX,Y5r),e(z8,K5r),e(Z,Z5r),e(Z,W8),e(W8,ibe),e(ibe,e2r),e(W8,o2r),e(W8,eV),e(eV,r2r),e(W8,t2r),e(Z,a2r),e(Z,Q8),e(Q8,dbe),e(dbe,n2r),e(Q8,s2r),e(Q8,oV),e(oV,l2r),e(Q8,i2r),e(Z,d2r),e(Z,H8),e(H8,cbe),e(cbe,c2r),e(H8,f2r),e(H8,rV),e(rV,m2r),e(H8,g2r),e(Z,h2r),e(Z,U8),e(U8,fbe),e(fbe,p2r),e(U8,_2r),e(U8,tV),e(tV,u2r),e(U8,b2r),e(Z,v2r),e(Z,J8),e(J8,mbe),e(mbe,T2r),e(J8,F2r),e(J8,aV),e(aV,C2r),e(J8,M2r),e(Z,E2r),e(Z,Y8),e(Y8,gbe),e(gbe,y2r),e(Y8,w2r),e(Y8,nV),e(nV,A2r),e(Y8,L2r),e(Z,B2r),e(Z,K8),e(K8,hbe),e(hbe,x2r),e(K8,k2r),e(K8,sV),e(sV,R2r),e(K8,S2r),e(Z,P2r),e(Z,Z8),e(Z8,pbe),e(pbe,$2r),e(Z8,I2r),e(Z8,lV),e(lV,j2r),e(Z8,N2r),e(Z,D2r),e(Z,eF),e(eF,_be),e(_be,q2r),e(eF,G2r),e(eF,iV),e(iV,O2r),e(eF,X2r),e(Z,V2r),e(Z,oF),e(oF,ube),e(ube,z2r),e(oF,W2r),e(oF,dV),e(dV,Q2r),e(oF,H2r),e(Z,U2r),e(Z,rF),e(rF,bbe),e(bbe,J2r),e(rF,Y2r),e(rF,cV),e(cV,K2r),e(rF,Z2r),e(Z,evr),e(Z,tF),e(tF,vbe),e(vbe,ovr),e(tF,rvr),e(tF,fV),e(fV,tvr),e(tF,avr),e(Z,nvr),e(Z,aF),e(aF,Tbe),e(Tbe,svr),e(aF,lvr),e(aF,mV),e(mV,ivr),e(aF,dvr),e(Eo,cvr),e(Eo,Fbe),e(Fbe,fvr),e(Eo,mvr),g(TA,Eo,null),b(d,nSe,u),b(d,Zc,u),e(Zc,nF),e(nF,Cbe),g(FA,Cbe,null),e(Zc,gvr),e(Zc,Mbe),e(Mbe,hvr),b(d,sSe,u),b(d,kr,u),g(CA,kr,null),e(kr,pvr),e(kr,ef),e(ef,_vr),e(ef,Ebe),e(Ebe,uvr),e(ef,bvr),e(ef,ybe),e(ybe,vvr),e(ef,Tvr),e(kr,Fvr),e(kr,MA),e(MA,Cvr),e(MA,wbe),e(wbe,Mvr),e(MA,Evr),e(kr,yvr),e(kr,wt),g(EA,wt,null),e(wt,wvr),e(wt,Abe),e(Abe,Avr),e(wt,Lvr),e(wt,of),e(of,Bvr),e(of,Lbe),e(Lbe,xvr),e(of,kvr),e(of,Bbe),e(Bbe,Rvr),e(of,Svr),e(wt,Pvr),e(wt,xbe),e(xbe,$vr),e(wt,Ivr),g(yA,wt,null),e(kr,jvr),e(kr,yo),g(wA,yo,null),e(yo,Nvr),e(yo,kbe),e(kbe,Dvr),e(yo,qvr),e(yo,kn),e(kn,Gvr),e(kn,Rbe),e(Rbe,Ovr),e(kn,Xvr),e(kn,Sbe),e(Sbe,Vvr),e(kn,zvr),e(kn,Pbe),e(Pbe,Wvr),e(kn,Qvr),e(yo,Hvr),e(yo,$be),e($be,sF),e(sF,Ibe),e(Ibe,Uvr),e(sF,Jvr),e(sF,gV),e(gV,Yvr),e(sF,Kvr),e(yo,Zvr),e(yo,jbe),e(jbe,e6r),e(yo,o6r),g(AA,yo,null),b(d,lSe,u),b(d,rf,u),e(rf,lF),e(lF,Nbe),g(LA,Nbe,null),e(rf,r6r),e(rf,Dbe),e(Dbe,t6r),b(d,iSe,u),b(d,Rr,u),g(BA,Rr,null),e(Rr,a6r),e(Rr,tf),e(tf,n6r),e(tf,qbe),e(qbe,s6r),e(tf,l6r),e(tf,Gbe),e(Gbe,i6r),e(tf,d6r),e(Rr,c6r),e(Rr,xA),e(xA,f6r),e(xA,Obe),e(Obe,m6r),e(xA,g6r),e(Rr,h6r),e(Rr,At),g(kA,At,null),e(At,p6r),e(At,Xbe),e(Xbe,_6r),e(At,u6r),e(At,af),e(af,b6r),e(af,Vbe),e(Vbe,v6r),e(af,T6r),e(af,zbe),e(zbe,F6r),e(af,C6r),e(At,M6r),e(At,Wbe),e(Wbe,E6r),e(At,y6r),g(RA,At,null),e(Rr,w6r),e(Rr,wo),g(SA,wo,null),e(wo,A6r),e(wo,Qbe),e(Qbe,L6r),e(wo,B6r),e(wo,Rn),e(Rn,x6r),e(Rn,Hbe),e(Hbe,k6r),e(Rn,R6r),e(Rn,Ube),e(Ube,S6r),e(Rn,P6r),e(Rn,Jbe),e(Jbe,$6r),e(Rn,I6r),e(wo,j6r),e(wo,Ybe),e(Ybe,iF),e(iF,Kbe),e(Kbe,N6r),e(iF,D6r),e(iF,hV),e(hV,q6r),e(iF,G6r),e(wo,O6r),e(wo,Zbe),e(Zbe,X6r),e(wo,V6r),g(PA,wo,null),b(d,dSe,u),b(d,nf,u),e(nf,dF),e(dF,e5e),g($A,e5e,null),e(nf,z6r),e(nf,o5e),e(o5e,W6r),b(d,cSe,u),b(d,Sr,u),g(IA,Sr,null),e(Sr,Q6r),e(Sr,sf),e(sf,H6r),e(sf,r5e),e(r5e,U6r),e(sf,J6r),e(sf,t5e),e(t5e,Y6r),e(sf,K6r),e(Sr,Z6r),e(Sr,jA),e(jA,e0r),e(jA,a5e),e(a5e,o0r),e(jA,r0r),e(Sr,t0r),e(Sr,Lt),g(NA,Lt,null),e(Lt,a0r),e(Lt,n5e),e(n5e,n0r),e(Lt,s0r),e(Lt,lf),e(lf,l0r),e(lf,s5e),e(s5e,i0r),e(lf,d0r),e(lf,l5e),e(l5e,c0r),e(lf,f0r),e(Lt,m0r),e(Lt,i5e),e(i5e,g0r),e(Lt,h0r),g(DA,Lt,null),e(Sr,p0r),e(Sr,Ao),g(qA,Ao,null),e(Ao,_0r),e(Ao,d5e),e(d5e,u0r),e(Ao,b0r),e(Ao,Sn),e(Sn,v0r),e(Sn,c5e),e(c5e,T0r),e(Sn,F0r),e(Sn,f5e),e(f5e,C0r),e(Sn,M0r),e(Sn,m5e),e(m5e,E0r),e(Sn,y0r),e(Ao,w0r),e(Ao,z),e(z,cF),e(cF,g5e),e(g5e,A0r),e(cF,L0r),e(cF,pV),e(pV,B0r),e(cF,x0r),e(z,k0r),e(z,fF),e(fF,h5e),e(h5e,R0r),e(fF,S0r),e(fF,_V),e(_V,P0r),e(fF,$0r),e(z,I0r),e(z,mF),e(mF,p5e),e(p5e,j0r),e(mF,N0r),e(mF,uV),e(uV,D0r),e(mF,q0r),e(z,G0r),e(z,gF),e(gF,_5e),e(_5e,O0r),e(gF,X0r),e(gF,bV),e(bV,V0r),e(gF,z0r),e(z,W0r),e(z,hF),e(hF,u5e),e(u5e,Q0r),e(hF,H0r),e(hF,vV),e(vV,U0r),e(hF,J0r),e(z,Y0r),e(z,pF),e(pF,b5e),e(b5e,K0r),e(pF,Z0r),e(pF,TV),e(TV,eTr),e(pF,oTr),e(z,rTr),e(z,_F),e(_F,v5e),e(v5e,tTr),e(_F,aTr),e(_F,FV),e(FV,nTr),e(_F,sTr),e(z,lTr),e(z,uF),e(uF,T5e),e(T5e,iTr),e(uF,dTr),e(uF,CV),e(CV,cTr),e(uF,fTr),e(z,mTr),e(z,bF),e(bF,F5e),e(F5e,gTr),e(bF,hTr),e(bF,MV),e(MV,pTr),e(bF,_Tr),e(z,uTr),e(z,vF),e(vF,C5e),e(C5e,bTr),e(vF,vTr),e(vF,EV),e(EV,TTr),e(vF,FTr),e(z,CTr),e(z,TF),e(TF,M5e),e(M5e,MTr),e(TF,ETr),e(TF,yV),e(yV,yTr),e(TF,wTr),e(z,ATr),e(z,FF),e(FF,E5e),e(E5e,LTr),e(FF,BTr),e(FF,wV),e(wV,xTr),e(FF,kTr),e(z,RTr),e(z,CF),e(CF,y5e),e(y5e,STr),e(CF,PTr),e(CF,AV),e(AV,$Tr),e(CF,ITr),e(z,jTr),e(z,MF),e(MF,w5e),e(w5e,NTr),e(MF,DTr),e(MF,LV),e(LV,qTr),e(MF,GTr),e(z,OTr),e(z,EF),e(EF,A5e),e(A5e,XTr),e(EF,VTr),e(EF,BV),e(BV,zTr),e(EF,WTr),e(z,QTr),e(z,yF),e(yF,L5e),e(L5e,HTr),e(yF,UTr),e(yF,xV),e(xV,JTr),e(yF,YTr),e(z,KTr),e(z,wF),e(wF,B5e),e(B5e,ZTr),e(wF,e8r),e(wF,kV),e(kV,o8r),e(wF,r8r),e(z,t8r),e(z,AF),e(AF,x5e),e(x5e,a8r),e(AF,n8r),e(AF,RV),e(RV,s8r),e(AF,l8r),e(z,i8r),e(z,LF),e(LF,k5e),e(k5e,d8r),e(LF,c8r),e(LF,SV),e(SV,f8r),e(LF,m8r),e(z,g8r),e(z,BF),e(BF,R5e),e(R5e,h8r),e(BF,p8r),e(BF,PV),e(PV,_8r),e(BF,u8r),e(z,b8r),e(z,xF),e(xF,S5e),e(S5e,v8r),e(xF,T8r),e(xF,$V),e($V,F8r),e(xF,C8r),e(z,M8r),e(z,kF),e(kF,P5e),e(P5e,E8r),e(kF,y8r),e(kF,IV),e(IV,w8r),e(kF,A8r),e(z,L8r),e(z,RF),e(RF,$5e),e($5e,B8r),e(RF,x8r),e(RF,jV),e(jV,k8r),e(RF,R8r),e(z,S8r),e(z,SF),e(SF,I5e),e(I5e,P8r),e(SF,$8r),e(SF,NV),e(NV,I8r),e(SF,j8r),e(z,N8r),e(z,PF),e(PF,j5e),e(j5e,D8r),e(PF,q8r),e(PF,DV),e(DV,G8r),e(PF,O8r),e(Ao,X8r),e(Ao,N5e),e(N5e,V8r),e(Ao,z8r),g(GA,Ao,null),b(d,fSe,u),b(d,df,u),e(df,$F),e($F,D5e),g(OA,D5e,null),e(df,W8r),e(df,q5e),e(q5e,Q8r),b(d,mSe,u),b(d,Pr,u),g(XA,Pr,null),e(Pr,H8r),e(Pr,cf),e(cf,U8r),e(cf,G5e),e(G5e,J8r),e(cf,Y8r),e(cf,O5e),e(O5e,K8r),e(cf,Z8r),e(Pr,eFr),e(Pr,VA),e(VA,oFr),e(VA,X5e),e(X5e,rFr),e(VA,tFr),e(Pr,aFr),e(Pr,Bt),g(zA,Bt,null),e(Bt,nFr),e(Bt,V5e),e(V5e,sFr),e(Bt,lFr),e(Bt,ff),e(ff,iFr),e(ff,z5e),e(z5e,dFr),e(ff,cFr),e(ff,W5e),e(W5e,fFr),e(ff,mFr),e(Bt,gFr),e(Bt,Q5e),e(Q5e,hFr),e(Bt,pFr),g(WA,Bt,null),e(Pr,_Fr),e(Pr,Lo),g(QA,Lo,null),e(Lo,uFr),e(Lo,H5e),e(H5e,bFr),e(Lo,vFr),e(Lo,Pn),e(Pn,TFr),e(Pn,U5e),e(U5e,FFr),e(Pn,CFr),e(Pn,J5e),e(J5e,MFr),e(Pn,EFr),e(Pn,Y5e),e(Y5e,yFr),e(Pn,wFr),e(Lo,AFr),e(Lo,ga),e(ga,IF),e(IF,K5e),e(K5e,LFr),e(IF,BFr),e(IF,qV),e(qV,xFr),e(IF,kFr),e(ga,RFr),e(ga,jF),e(jF,Z5e),e(Z5e,SFr),e(jF,PFr),e(jF,GV),e(GV,$Fr),e(jF,IFr),e(ga,jFr),e(ga,NF),e(NF,e2e),e(e2e,NFr),e(NF,DFr),e(NF,OV),e(OV,qFr),e(NF,GFr),e(ga,OFr),e(ga,DF),e(DF,o2e),e(o2e,XFr),e(DF,VFr),e(DF,XV),e(XV,zFr),e(DF,WFr),e(ga,QFr),e(ga,qF),e(qF,r2e),e(r2e,HFr),e(qF,UFr),e(qF,VV),e(VV,JFr),e(qF,YFr),e(Lo,KFr),e(Lo,t2e),e(t2e,ZFr),e(Lo,eCr),g(HA,Lo,null),b(d,gSe,u),b(d,mf,u),e(mf,GF),e(GF,a2e),g(UA,a2e,null),e(mf,oCr),e(mf,n2e),e(n2e,rCr),b(d,hSe,u),b(d,$r,u),g(JA,$r,null),e($r,tCr),e($r,gf),e(gf,aCr),e(gf,s2e),e(s2e,nCr),e(gf,sCr),e(gf,l2e),e(l2e,lCr),e(gf,iCr),e($r,dCr),e($r,YA),e(YA,cCr),e(YA,i2e),e(i2e,fCr),e(YA,mCr),e($r,gCr),e($r,xt),g(KA,xt,null),e(xt,hCr),e(xt,d2e),e(d2e,pCr),e(xt,_Cr),e(xt,hf),e(hf,uCr),e(hf,c2e),e(c2e,bCr),e(hf,vCr),e(hf,f2e),e(f2e,TCr),e(hf,FCr),e(xt,CCr),e(xt,m2e),e(m2e,MCr),e(xt,ECr),g(ZA,xt,null),e($r,yCr),e($r,Bo),g(eL,Bo,null),e(Bo,wCr),e(Bo,g2e),e(g2e,ACr),e(Bo,LCr),e(Bo,$n),e($n,BCr),e($n,h2e),e(h2e,xCr),e($n,kCr),e($n,p2e),e(p2e,RCr),e($n,SCr),e($n,_2e),e(_2e,PCr),e($n,$Cr),e(Bo,ICr),e(Bo,ce),e(ce,OF),e(OF,u2e),e(u2e,jCr),e(OF,NCr),e(OF,zV),e(zV,DCr),e(OF,qCr),e(ce,GCr),e(ce,XF),e(XF,b2e),e(b2e,OCr),e(XF,XCr),e(XF,WV),e(WV,VCr),e(XF,zCr),e(ce,WCr),e(ce,VF),e(VF,v2e),e(v2e,QCr),e(VF,HCr),e(VF,QV),e(QV,UCr),e(VF,JCr),e(ce,YCr),e(ce,zF),e(zF,T2e),e(T2e,KCr),e(zF,ZCr),e(zF,HV),e(HV,eMr),e(zF,oMr),e(ce,rMr),e(ce,WF),e(WF,F2e),e(F2e,tMr),e(WF,aMr),e(WF,UV),e(UV,nMr),e(WF,sMr),e(ce,lMr),e(ce,QF),e(QF,C2e),e(C2e,iMr),e(QF,dMr),e(QF,JV),e(JV,cMr),e(QF,fMr),e(ce,mMr),e(ce,HF),e(HF,M2e),e(M2e,gMr),e(HF,hMr),e(HF,YV),e(YV,pMr),e(HF,_Mr),e(ce,uMr),e(ce,UF),e(UF,E2e),e(E2e,bMr),e(UF,vMr),e(UF,KV),e(KV,TMr),e(UF,FMr),e(ce,CMr),e(ce,JF),e(JF,y2e),e(y2e,MMr),e(JF,EMr),e(JF,ZV),e(ZV,yMr),e(JF,wMr),e(ce,AMr),e(ce,YF),e(YF,w2e),e(w2e,LMr),e(YF,BMr),e(YF,ez),e(ez,xMr),e(YF,kMr),e(ce,RMr),e(ce,KF),e(KF,A2e),e(A2e,SMr),e(KF,PMr),e(KF,oz),e(oz,$Mr),e(KF,IMr),e(ce,jMr),e(ce,ZF),e(ZF,L2e),e(L2e,NMr),e(ZF,DMr),e(ZF,rz),e(rz,qMr),e(ZF,GMr),e(Bo,OMr),e(Bo,B2e),e(B2e,XMr),e(Bo,VMr),g(oL,Bo,null),b(d,pSe,u),b(d,pf,u),e(pf,eC),e(eC,x2e),g(rL,x2e,null),e(pf,zMr),e(pf,k2e),e(k2e,WMr),b(d,_Se,u),b(d,Ir,u),g(tL,Ir,null),e(Ir,QMr),e(Ir,_f),e(_f,HMr),e(_f,R2e),e(R2e,UMr),e(_f,JMr),e(_f,S2e),e(S2e,YMr),e(_f,KMr),e(Ir,ZMr),e(Ir,aL),e(aL,e4r),e(aL,P2e),e(P2e,o4r),e(aL,r4r),e(Ir,t4r),e(Ir,kt),g(nL,kt,null),e(kt,a4r),e(kt,$2e),e($2e,n4r),e(kt,s4r),e(kt,uf),e(uf,l4r),e(uf,I2e),e(I2e,i4r),e(uf,d4r),e(uf,j2e),e(j2e,c4r),e(uf,f4r),e(kt,m4r),e(kt,N2e),e(N2e,g4r),e(kt,h4r),g(sL,kt,null),e(Ir,p4r),e(Ir,xo),g(lL,xo,null),e(xo,_4r),e(xo,D2e),e(D2e,u4r),e(xo,b4r),e(xo,In),e(In,v4r),e(In,q2e),e(q2e,T4r),e(In,F4r),e(In,G2e),e(G2e,C4r),e(In,M4r),e(In,O2e),e(O2e,E4r),e(In,y4r),e(xo,w4r),e(xo,be),e(be,oC),e(oC,X2e),e(X2e,A4r),e(oC,L4r),e(oC,tz),e(tz,B4r),e(oC,x4r),e(be,k4r),e(be,rC),e(rC,V2e),e(V2e,R4r),e(rC,S4r),e(rC,az),e(az,P4r),e(rC,$4r),e(be,I4r),e(be,tC),e(tC,z2e),e(z2e,j4r),e(tC,N4r),e(tC,nz),e(nz,D4r),e(tC,q4r),e(be,G4r),e(be,aC),e(aC,W2e),e(W2e,O4r),e(aC,X4r),e(aC,sz),e(sz,V4r),e(aC,z4r),e(be,W4r),e(be,nC),e(nC,Q2e),e(Q2e,Q4r),e(nC,H4r),e(nC,lz),e(lz,U4r),e(nC,J4r),e(be,Y4r),e(be,sC),e(sC,H2e),e(H2e,K4r),e(sC,Z4r),e(sC,iz),e(iz,eEr),e(sC,oEr),e(be,rEr),e(be,lC),e(lC,U2e),e(U2e,tEr),e(lC,aEr),e(lC,dz),e(dz,nEr),e(lC,sEr),e(be,lEr),e(be,iC),e(iC,J2e),e(J2e,iEr),e(iC,dEr),e(iC,cz),e(cz,cEr),e(iC,fEr),e(be,mEr),e(be,dC),e(dC,Y2e),e(Y2e,gEr),e(dC,hEr),e(dC,fz),e(fz,pEr),e(dC,_Er),e(be,uEr),e(be,cC),e(cC,K2e),e(K2e,bEr),e(cC,vEr),e(cC,mz),e(mz,TEr),e(cC,FEr),e(xo,CEr),e(xo,Z2e),e(Z2e,MEr),e(xo,EEr),g(iL,xo,null),b(d,uSe,u),b(d,bf,u),e(bf,fC),e(fC,eve),g(dL,eve,null),e(bf,yEr),e(bf,ove),e(ove,wEr),b(d,bSe,u),b(d,jr,u),g(cL,jr,null),e(jr,AEr),e(jr,vf),e(vf,LEr),e(vf,rve),e(rve,BEr),e(vf,xEr),e(vf,tve),e(tve,kEr),e(vf,REr),e(jr,SEr),e(jr,fL),e(fL,PEr),e(fL,ave),e(ave,$Er),e(fL,IEr),e(jr,jEr),e(jr,Rt),g(mL,Rt,null),e(Rt,NEr),e(Rt,nve),e(nve,DEr),e(Rt,qEr),e(Rt,Tf),e(Tf,GEr),e(Tf,sve),e(sve,OEr),e(Tf,XEr),e(Tf,lve),e(lve,VEr),e(Tf,zEr),e(Rt,WEr),e(Rt,ive),e(ive,QEr),e(Rt,HEr),g(gL,Rt,null),e(jr,UEr),e(jr,ko),g(hL,ko,null),e(ko,JEr),e(ko,dve),e(dve,YEr),e(ko,KEr),e(ko,jn),e(jn,ZEr),e(jn,cve),e(cve,e3r),e(jn,o3r),e(jn,fve),e(fve,r3r),e(jn,t3r),e(jn,mve),e(mve,a3r),e(jn,n3r),e(ko,s3r),e(ko,Ee),e(Ee,mC),e(mC,gve),e(gve,l3r),e(mC,i3r),e(mC,gz),e(gz,d3r),e(mC,c3r),e(Ee,f3r),e(Ee,gC),e(gC,hve),e(hve,m3r),e(gC,g3r),e(gC,hz),e(hz,h3r),e(gC,p3r),e(Ee,_3r),e(Ee,hC),e(hC,pve),e(pve,u3r),e(hC,b3r),e(hC,pz),e(pz,v3r),e(hC,T3r),e(Ee,F3r),e(Ee,pC),e(pC,_ve),e(_ve,C3r),e(pC,M3r),e(pC,_z),e(_z,E3r),e(pC,y3r),e(Ee,w3r),e(Ee,_C),e(_C,uve),e(uve,A3r),e(_C,L3r),e(_C,uz),e(uz,B3r),e(_C,x3r),e(Ee,k3r),e(Ee,uC),e(uC,bve),e(bve,R3r),e(uC,S3r),e(uC,bz),e(bz,P3r),e(uC,$3r),e(Ee,I3r),e(Ee,bC),e(bC,vve),e(vve,j3r),e(bC,N3r),e(bC,vz),e(vz,D3r),e(bC,q3r),e(Ee,G3r),e(Ee,vC),e(vC,Tve),e(Tve,O3r),e(vC,X3r),e(vC,Tz),e(Tz,V3r),e(vC,z3r),e(Ee,W3r),e(Ee,TC),e(TC,Fve),e(Fve,Q3r),e(TC,H3r),e(TC,Fz),e(Fz,U3r),e(TC,J3r),e(ko,Y3r),e(ko,Cve),e(Cve,K3r),e(ko,Z3r),g(pL,ko,null),b(d,vSe,u),b(d,Ff,u),e(Ff,FC),e(FC,Mve),g(_L,Mve,null),e(Ff,eyr),e(Ff,Eve),e(Eve,oyr),b(d,TSe,u),b(d,Nr,u),g(uL,Nr,null),e(Nr,ryr),e(Nr,Cf),e(Cf,tyr),e(Cf,yve),e(yve,ayr),e(Cf,nyr),e(Cf,wve),e(wve,syr),e(Cf,lyr),e(Nr,iyr),e(Nr,bL),e(bL,dyr),e(bL,Ave),e(Ave,cyr),e(bL,fyr),e(Nr,myr),e(Nr,St),g(vL,St,null),e(St,gyr),e(St,Lve),e(Lve,hyr),e(St,pyr),e(St,Mf),e(Mf,_yr),e(Mf,Bve),e(Bve,uyr),e(Mf,byr),e(Mf,xve),e(xve,vyr),e(Mf,Tyr),e(St,Fyr),e(St,kve),e(kve,Cyr),e(St,Myr),g(TL,St,null),e(Nr,Eyr),e(Nr,Ro),g(FL,Ro,null),e(Ro,yyr),e(Ro,Rve),e(Rve,wyr),e(Ro,Ayr),e(Ro,Nn),e(Nn,Lyr),e(Nn,Sve),e(Sve,Byr),e(Nn,xyr),e(Nn,Pve),e(Pve,kyr),e(Nn,Ryr),e(Nn,$ve),e($ve,Syr),e(Nn,Pyr),e(Ro,$yr),e(Ro,ve),e(ve,CC),e(CC,Ive),e(Ive,Iyr),e(CC,jyr),e(CC,Cz),e(Cz,Nyr),e(CC,Dyr),e(ve,qyr),e(ve,MC),e(MC,jve),e(jve,Gyr),e(MC,Oyr),e(MC,Mz),e(Mz,Xyr),e(MC,Vyr),e(ve,zyr),e(ve,EC),e(EC,Nve),e(Nve,Wyr),e(EC,Qyr),e(EC,Ez),e(Ez,Hyr),e(EC,Uyr),e(ve,Jyr),e(ve,yC),e(yC,Dve),e(Dve,Yyr),e(yC,Kyr),e(yC,yz),e(yz,Zyr),e(yC,ewr),e(ve,owr),e(ve,wC),e(wC,qve),e(qve,rwr),e(wC,twr),e(wC,wz),e(wz,awr),e(wC,nwr),e(ve,swr),e(ve,AC),e(AC,Gve),e(Gve,lwr),e(AC,iwr),e(AC,Az),e(Az,dwr),e(AC,cwr),e(ve,fwr),e(ve,LC),e(LC,Ove),e(Ove,mwr),e(LC,gwr),e(LC,Lz),e(Lz,hwr),e(LC,pwr),e(ve,_wr),e(ve,BC),e(BC,Xve),e(Xve,uwr),e(BC,bwr),e(BC,Bz),e(Bz,vwr),e(BC,Twr),e(ve,Fwr),e(ve,xC),e(xC,Vve),e(Vve,Cwr),e(xC,Mwr),e(xC,xz),e(xz,Ewr),e(xC,ywr),e(ve,wwr),e(ve,kC),e(kC,zve),e(zve,Awr),e(kC,Lwr),e(kC,kz),e(kz,Bwr),e(kC,xwr),e(Ro,kwr),e(Ro,Wve),e(Wve,Rwr),e(Ro,Swr),g(CL,Ro,null),b(d,FSe,u),b(d,Ef,u),e(Ef,RC),e(RC,Qve),g(ML,Qve,null),e(Ef,Pwr),e(Ef,Hve),e(Hve,$wr),b(d,CSe,u),b(d,Dr,u),g(EL,Dr,null),e(Dr,Iwr),e(Dr,yf),e(yf,jwr),e(yf,Uve),e(Uve,Nwr),e(yf,Dwr),e(yf,Jve),e(Jve,qwr),e(yf,Gwr),e(Dr,Owr),e(Dr,yL),e(yL,Xwr),e(yL,Yve),e(Yve,Vwr),e(yL,zwr),e(Dr,Wwr),e(Dr,Pt),g(wL,Pt,null),e(Pt,Qwr),e(Pt,Kve),e(Kve,Hwr),e(Pt,Uwr),e(Pt,wf),e(wf,Jwr),e(wf,Zve),e(Zve,Ywr),e(wf,Kwr),e(wf,e6e),e(e6e,Zwr),e(wf,eAr),e(Pt,oAr),e(Pt,o6e),e(o6e,rAr),e(Pt,tAr),g(AL,Pt,null),e(Dr,aAr),e(Dr,So),g(LL,So,null),e(So,nAr),e(So,r6e),e(r6e,sAr),e(So,lAr),e(So,Dn),e(Dn,iAr),e(Dn,t6e),e(t6e,dAr),e(Dn,cAr),e(Dn,a6e),e(a6e,fAr),e(Dn,mAr),e(Dn,n6e),e(n6e,gAr),e(Dn,hAr),e(So,pAr),e(So,s6e),e(s6e,SC),e(SC,l6e),e(l6e,_Ar),e(SC,uAr),e(SC,Rz),e(Rz,bAr),e(SC,vAr),e(So,TAr),e(So,i6e),e(i6e,FAr),e(So,CAr),g(BL,So,null),b(d,MSe,u),b(d,Af,u),e(Af,PC),e(PC,d6e),g(xL,d6e,null),e(Af,MAr),e(Af,c6e),e(c6e,EAr),b(d,ESe,u),b(d,qr,u),g(kL,qr,null),e(qr,yAr),e(qr,Lf),e(Lf,wAr),e(Lf,f6e),e(f6e,AAr),e(Lf,LAr),e(Lf,m6e),e(m6e,BAr),e(Lf,xAr),e(qr,kAr),e(qr,RL),e(RL,RAr),e(RL,g6e),e(g6e,SAr),e(RL,PAr),e(qr,$Ar),e(qr,$t),g(SL,$t,null),e($t,IAr),e($t,h6e),e(h6e,jAr),e($t,NAr),e($t,Bf),e(Bf,DAr),e(Bf,p6e),e(p6e,qAr),e(Bf,GAr),e(Bf,_6e),e(_6e,OAr),e(Bf,XAr),e($t,VAr),e($t,u6e),e(u6e,zAr),e($t,WAr),g(PL,$t,null),e(qr,QAr),e(qr,Po),g($L,Po,null),e(Po,HAr),e(Po,b6e),e(b6e,UAr),e(Po,JAr),e(Po,qn),e(qn,YAr),e(qn,v6e),e(v6e,KAr),e(qn,ZAr),e(qn,T6e),e(T6e,eLr),e(qn,oLr),e(qn,F6e),e(F6e,rLr),e(qn,tLr),e(Po,aLr),e(Po,Te),e(Te,$C),e($C,C6e),e(C6e,nLr),e($C,sLr),e($C,Sz),e(Sz,lLr),e($C,iLr),e(Te,dLr),e(Te,IC),e(IC,M6e),e(M6e,cLr),e(IC,fLr),e(IC,Pz),e(Pz,mLr),e(IC,gLr),e(Te,hLr),e(Te,jC),e(jC,E6e),e(E6e,pLr),e(jC,_Lr),e(jC,$z),e($z,uLr),e(jC,bLr),e(Te,vLr),e(Te,NC),e(NC,y6e),e(y6e,TLr),e(NC,FLr),e(NC,Iz),e(Iz,CLr),e(NC,MLr),e(Te,ELr),e(Te,DC),e(DC,w6e),e(w6e,yLr),e(DC,wLr),e(DC,jz),e(jz,ALr),e(DC,LLr),e(Te,BLr),e(Te,qC),e(qC,A6e),e(A6e,xLr),e(qC,kLr),e(qC,Nz),e(Nz,RLr),e(qC,SLr),e(Te,PLr),e(Te,GC),e(GC,L6e),e(L6e,$Lr),e(GC,ILr),e(GC,Dz),e(Dz,jLr),e(GC,NLr),e(Te,DLr),e(Te,OC),e(OC,B6e),e(B6e,qLr),e(OC,GLr),e(OC,qz),e(qz,OLr),e(OC,XLr),e(Te,VLr),e(Te,XC),e(XC,x6e),e(x6e,zLr),e(XC,WLr),e(XC,Gz),e(Gz,QLr),e(XC,HLr),e(Te,ULr),e(Te,VC),e(VC,k6e),e(k6e,JLr),e(VC,YLr),e(VC,Oz),e(Oz,KLr),e(VC,ZLr),e(Po,e7r),e(Po,R6e),e(R6e,o7r),e(Po,r7r),g(IL,Po,null),b(d,ySe,u),b(d,xf,u),e(xf,zC),e(zC,S6e),g(jL,S6e,null),e(xf,t7r),e(xf,P6e),e(P6e,a7r),b(d,wSe,u),b(d,Gr,u),g(NL,Gr,null),e(Gr,n7r),e(Gr,kf),e(kf,s7r),e(kf,$6e),e($6e,l7r),e(kf,i7r),e(kf,I6e),e(I6e,d7r),e(kf,c7r),e(Gr,f7r),e(Gr,DL),e(DL,m7r),e(DL,j6e),e(j6e,g7r),e(DL,h7r),e(Gr,p7r),e(Gr,It),g(qL,It,null),e(It,_7r),e(It,N6e),e(N6e,u7r),e(It,b7r),e(It,Rf),e(Rf,v7r),e(Rf,D6e),e(D6e,T7r),e(Rf,F7r),e(Rf,q6e),e(q6e,C7r),e(Rf,M7r),e(It,E7r),e(It,G6e),e(G6e,y7r),e(It,w7r),g(GL,It,null),e(Gr,A7r),e(Gr,$o),g(OL,$o,null),e($o,L7r),e($o,O6e),e(O6e,B7r),e($o,x7r),e($o,Gn),e(Gn,k7r),e(Gn,X6e),e(X6e,R7r),e(Gn,S7r),e(Gn,V6e),e(V6e,P7r),e(Gn,$7r),e(Gn,z6e),e(z6e,I7r),e(Gn,j7r),e($o,N7r),e($o,Se),e(Se,WC),e(WC,W6e),e(W6e,D7r),e(WC,q7r),e(WC,Xz),e(Xz,G7r),e(WC,O7r),e(Se,X7r),e(Se,QC),e(QC,Q6e),e(Q6e,V7r),e(QC,z7r),e(QC,Vz),e(Vz,W7r),e(QC,Q7r),e(Se,H7r),e(Se,HC),e(HC,H6e),e(H6e,U7r),e(HC,J7r),e(HC,zz),e(zz,Y7r),e(HC,K7r),e(Se,Z7r),e(Se,UC),e(UC,U6e),e(U6e,e9r),e(UC,o9r),e(UC,Wz),e(Wz,r9r),e(UC,t9r),e(Se,a9r),e(Se,JC),e(JC,J6e),e(J6e,n9r),e(JC,s9r),e(JC,Qz),e(Qz,l9r),e(JC,i9r),e(Se,d9r),e(Se,YC),e(YC,Y6e),e(Y6e,c9r),e(YC,f9r),e(YC,Hz),e(Hz,m9r),e(YC,g9r),e(Se,h9r),e(Se,KC),e(KC,K6e),e(K6e,p9r),e(KC,_9r),e(KC,Uz),e(Uz,u9r),e(KC,b9r),e(Se,v9r),e(Se,ZC),e(ZC,Z6e),e(Z6e,T9r),e(ZC,F9r),e(ZC,Jz),e(Jz,C9r),e(ZC,M9r),e($o,E9r),e($o,e0e),e(e0e,y9r),e($o,w9r),g(XL,$o,null),b(d,ASe,u),b(d,Sf,u),e(Sf,eM),e(eM,o0e),g(VL,o0e,null),e(Sf,A9r),e(Sf,r0e),e(r0e,L9r),b(d,LSe,u),b(d,Or,u),g(zL,Or,null),e(Or,B9r),e(Or,Pf),e(Pf,x9r),e(Pf,t0e),e(t0e,k9r),e(Pf,R9r),e(Pf,a0e),e(a0e,S9r),e(Pf,P9r),e(Or,$9r),e(Or,WL),e(WL,I9r),e(WL,n0e),e(n0e,j9r),e(WL,N9r),e(Or,D9r),e(Or,jt),g(QL,jt,null),e(jt,q9r),e(jt,s0e),e(s0e,G9r),e(jt,O9r),e(jt,$f),e($f,X9r),e($f,l0e),e(l0e,V9r),e($f,z9r),e($f,i0e),e(i0e,W9r),e($f,Q9r),e(jt,H9r),e(jt,d0e),e(d0e,U9r),e(jt,J9r),g(HL,jt,null),e(Or,Y9r),e(Or,Io),g(UL,Io,null),e(Io,K9r),e(Io,c0e),e(c0e,Z9r),e(Io,eBr),e(Io,On),e(On,oBr),e(On,f0e),e(f0e,rBr),e(On,tBr),e(On,m0e),e(m0e,aBr),e(On,nBr),e(On,g0e),e(g0e,sBr),e(On,lBr),e(Io,iBr),e(Io,Pe),e(Pe,oM),e(oM,h0e),e(h0e,dBr),e(oM,cBr),e(oM,Yz),e(Yz,fBr),e(oM,mBr),e(Pe,gBr),e(Pe,rM),e(rM,p0e),e(p0e,hBr),e(rM,pBr),e(rM,Kz),e(Kz,_Br),e(rM,uBr),e(Pe,bBr),e(Pe,tM),e(tM,_0e),e(_0e,vBr),e(tM,TBr),e(tM,Zz),e(Zz,FBr),e(tM,CBr),e(Pe,MBr),e(Pe,aM),e(aM,u0e),e(u0e,EBr),e(aM,yBr),e(aM,eW),e(eW,wBr),e(aM,ABr),e(Pe,LBr),e(Pe,nM),e(nM,b0e),e(b0e,BBr),e(nM,xBr),e(nM,oW),e(oW,kBr),e(nM,RBr),e(Pe,SBr),e(Pe,sM),e(sM,v0e),e(v0e,PBr),e(sM,$Br),e(sM,rW),e(rW,IBr),e(sM,jBr),e(Pe,NBr),e(Pe,lM),e(lM,T0e),e(T0e,DBr),e(lM,qBr),e(lM,tW),e(tW,GBr),e(lM,OBr),e(Pe,XBr),e(Pe,iM),e(iM,F0e),e(F0e,VBr),e(iM,zBr),e(iM,aW),e(aW,WBr),e(iM,QBr),e(Io,HBr),e(Io,C0e),e(C0e,UBr),e(Io,JBr),g(JL,Io,null),b(d,BSe,u),b(d,If,u),e(If,dM),e(dM,M0e),g(YL,M0e,null),e(If,YBr),e(If,E0e),e(E0e,KBr),b(d,xSe,u),b(d,Xr,u),g(KL,Xr,null),e(Xr,ZBr),e(Xr,jf),e(jf,exr),e(jf,y0e),e(y0e,oxr),e(jf,rxr),e(jf,w0e),e(w0e,txr),e(jf,axr),e(Xr,nxr),e(Xr,ZL),e(ZL,sxr),e(ZL,A0e),e(A0e,lxr),e(ZL,ixr),e(Xr,dxr),e(Xr,Nt),g(e7,Nt,null),e(Nt,cxr),e(Nt,L0e),e(L0e,fxr),e(Nt,mxr),e(Nt,Nf),e(Nf,gxr),e(Nf,B0e),e(B0e,hxr),e(Nf,pxr),e(Nf,x0e),e(x0e,_xr),e(Nf,uxr),e(Nt,bxr),e(Nt,k0e),e(k0e,vxr),e(Nt,Txr),g(o7,Nt,null),e(Xr,Fxr),e(Xr,jo),g(r7,jo,null),e(jo,Cxr),e(jo,R0e),e(R0e,Mxr),e(jo,Exr),e(jo,Xn),e(Xn,yxr),e(Xn,S0e),e(S0e,wxr),e(Xn,Axr),e(Xn,P0e),e(P0e,Lxr),e(Xn,Bxr),e(Xn,$0e),e($0e,xxr),e(Xn,kxr),e(jo,Rxr),e(jo,I0e),e(I0e,cM),e(cM,j0e),e(j0e,Sxr),e(cM,Pxr),e(cM,nW),e(nW,$xr),e(cM,Ixr),e(jo,jxr),e(jo,N0e),e(N0e,Nxr),e(jo,Dxr),g(t7,jo,null),b(d,kSe,u),b(d,Df,u),e(Df,fM),e(fM,D0e),g(a7,D0e,null),e(Df,qxr),e(Df,q0e),e(q0e,Gxr),b(d,RSe,u),b(d,Vr,u),g(n7,Vr,null),e(Vr,Oxr),e(Vr,qf),e(qf,Xxr),e(qf,G0e),e(G0e,Vxr),e(qf,zxr),e(qf,O0e),e(O0e,Wxr),e(qf,Qxr),e(Vr,Hxr),e(Vr,s7),e(s7,Uxr),e(s7,X0e),e(X0e,Jxr),e(s7,Yxr),e(Vr,Kxr),e(Vr,Dt),g(l7,Dt,null),e(Dt,Zxr),e(Dt,V0e),e(V0e,ekr),e(Dt,okr),e(Dt,Gf),e(Gf,rkr),e(Gf,z0e),e(z0e,tkr),e(Gf,akr),e(Gf,W0e),e(W0e,nkr),e(Gf,skr),e(Dt,lkr),e(Dt,Q0e),e(Q0e,ikr),e(Dt,dkr),g(i7,Dt,null),e(Vr,ckr),e(Vr,No),g(d7,No,null),e(No,fkr),e(No,H0e),e(H0e,mkr),e(No,gkr),e(No,Vn),e(Vn,hkr),e(Vn,U0e),e(U0e,pkr),e(Vn,_kr),e(Vn,J0e),e(J0e,ukr),e(Vn,bkr),e(Vn,Y0e),e(Y0e,vkr),e(Vn,Tkr),e(No,Fkr),e(No,c7),e(c7,mM),e(mM,K0e),e(K0e,Ckr),e(mM,Mkr),e(mM,sW),e(sW,Ekr),e(mM,ykr),e(c7,wkr),e(c7,gM),e(gM,Z0e),e(Z0e,Akr),e(gM,Lkr),e(gM,lW),e(lW,Bkr),e(gM,xkr),e(No,kkr),e(No,eTe),e(eTe,Rkr),e(No,Skr),g(f7,No,null),b(d,SSe,u),b(d,Of,u),e(Of,hM),e(hM,oTe),g(m7,oTe,null),e(Of,Pkr),e(Of,rTe),e(rTe,$kr),b(d,PSe,u),b(d,zr,u),g(g7,zr,null),e(zr,Ikr),e(zr,Xf),e(Xf,jkr),e(Xf,tTe),e(tTe,Nkr),e(Xf,Dkr),e(Xf,aTe),e(aTe,qkr),e(Xf,Gkr),e(zr,Okr),e(zr,h7),e(h7,Xkr),e(h7,nTe),e(nTe,Vkr),e(h7,zkr),e(zr,Wkr),e(zr,qt),g(p7,qt,null),e(qt,Qkr),e(qt,sTe),e(sTe,Hkr),e(qt,Ukr),e(qt,Vf),e(Vf,Jkr),e(Vf,lTe),e(lTe,Ykr),e(Vf,Kkr),e(Vf,iTe),e(iTe,Zkr),e(Vf,eRr),e(qt,oRr),e(qt,dTe),e(dTe,rRr),e(qt,tRr),g(_7,qt,null),e(zr,aRr),e(zr,Do),g(u7,Do,null),e(Do,nRr),e(Do,cTe),e(cTe,sRr),e(Do,lRr),e(Do,zn),e(zn,iRr),e(zn,fTe),e(fTe,dRr),e(zn,cRr),e(zn,mTe),e(mTe,fRr),e(zn,mRr),e(zn,gTe),e(gTe,gRr),e(zn,hRr),e(Do,pRr),e(Do,hTe),e(hTe,pM),e(pM,pTe),e(pTe,_Rr),e(pM,uRr),e(pM,iW),e(iW,bRr),e(pM,vRr),e(Do,TRr),e(Do,_Te),e(_Te,FRr),e(Do,CRr),g(b7,Do,null),$Se=!0},p(d,[u]){const v7={};u&2&&(v7.$$scope={dirty:u,ctx:d}),Yf.$set(v7);const uTe={};u&2&&(uTe.$$scope={dirty:u,ctx:d}),Dh.$set(uTe);const bTe={};u&2&&(bTe.$$scope={dirty:u,ctx:d}),Jh.$set(bTe)},i(d){$Se||(h(fe.$$.fragment,d),h(Va.$$.fragment,d),h(T4.$$.fragment,d),h(F4.$$.fragment,d),h(Yf.$$.fragment,d),h(C4.$$.fragment,d),h(M4.$$.fragment,d),h(w4.$$.fragment,d),h(A4.$$.fragment,d),h(L4.$$.fragment,d),h(B4.$$.fragment,d),h(x4.$$.fragment,d),h(S4.$$.fragment,d),h(P4.$$.fragment,d),h($4.$$.fragment,d),h(I4.$$.fragment,d),h(j4.$$.fragment,d),h(q4.$$.fragment,d),h(Dh.$$.fragment,d),h(G4.$$.fragment,d),h(O4.$$.fragment,d),h(X4.$$.fragment,d),h(V4.$$.fragment,d),h(Q4.$$.fragment,d),h(Jh.$$.fragment,d),h(H4.$$.fragment,d),h(U4.$$.fragment,d),h(J4.$$.fragment,d),h(Y4.$$.fragment,d),h(Z4.$$.fragment,d),h(eE.$$.fragment,d),h(oE.$$.fragment,d),h(rE.$$.fragment,d),h(tE.$$.fragment,d),h(aE.$$.fragment,d),h(sE.$$.fragment,d),h(lE.$$.fragment,d),h(iE.$$.fragment,d),h(dE.$$.fragment,d),h(cE.$$.fragment,d),h(fE.$$.fragment,d),h(gE.$$.fragment,d),h(hE.$$.fragment,d),h(pE.$$.fragment,d),h(_E.$$.fragment,d),h(uE.$$.fragment,d),h(bE.$$.fragment,d),h(TE.$$.fragment,d),h(FE.$$.fragment,d),h(CE.$$.fragment,d),h(ME.$$.fragment,d),h(EE.$$.fragment,d),h(yE.$$.fragment,d),h(AE.$$.fragment,d),h(LE.$$.fragment,d),h(BE.$$.fragment,d),h(xE.$$.fragment,d),h(kE.$$.fragment,d),h(RE.$$.fragment,d),h(PE.$$.fragment,d),h($E.$$.fragment,d),h(IE.$$.fragment,d),h(jE.$$.fragment,d),h(NE.$$.fragment,d),h(DE.$$.fragment,d),h(GE.$$.fragment,d),h(OE.$$.fragment,d),h(XE.$$.fragment,d),h(VE.$$.fragment,d),h(zE.$$.fragment,d),h(WE.$$.fragment,d),h(HE.$$.fragment,d),h(UE.$$.fragment,d),h(JE.$$.fragment,d),h(YE.$$.fragment,d),h(KE.$$.fragment,d),h(ZE.$$.fragment,d),h(o3.$$.fragment,d),h(r3.$$.fragment,d),h(t3.$$.fragment,d),h(a3.$$.fragment,d),h(n3.$$.fragment,d),h(s3.$$.fragment,d),h(i3.$$.fragment,d),h(d3.$$.fragment,d),h(c3.$$.fragment,d),h(f3.$$.fragment,d),h(m3.$$.fragment,d),h(g3.$$.fragment,d),h(p3.$$.fragment,d),h(_3.$$.fragment,d),h(u3.$$.fragment,d),h(b3.$$.fragment,d),h(v3.$$.fragment,d),h(T3.$$.fragment,d),h(C3.$$.fragment,d),h(M3.$$.fragment,d),h(E3.$$.fragment,d),h(y3.$$.fragment,d),h(w3.$$.fragment,d),h(A3.$$.fragment,d),h(B3.$$.fragment,d),h(x3.$$.fragment,d),h(k3.$$.fragment,d),h(R3.$$.fragment,d),h(S3.$$.fragment,d),h(P3.$$.fragment,d),h(I3.$$.fragment,d),h(j3.$$.fragment,d),h(N3.$$.fragment,d),h(D3.$$.fragment,d),h(q3.$$.fragment,d),h(G3.$$.fragment,d),h(X3.$$.fragment,d),h(V3.$$.fragment,d),h(z3.$$.fragment,d),h(W3.$$.fragment,d),h(Q3.$$.fragment,d),h(H3.$$.fragment,d),h(J3.$$.fragment,d),h(Y3.$$.fragment,d),h(K3.$$.fragment,d),h(Z3.$$.fragment,d),h(ey.$$.fragment,d),h(oy.$$.fragment,d),h(ty.$$.fragment,d),h(ay.$$.fragment,d),h(ny.$$.fragment,d),h(ly.$$.fragment,d),h(iy.$$.fragment,d),h(dy.$$.fragment,d),h(fy.$$.fragment,d),h(my.$$.fragment,d),h(gy.$$.fragment,d),h(hy.$$.fragment,d),h(py.$$.fragment,d),h(_y.$$.fragment,d),h(by.$$.fragment,d),h(vy.$$.fragment,d),h(Ty.$$.fragment,d),h(Fy.$$.fragment,d),h(Cy.$$.fragment,d),h(My.$$.fragment,d),h(yy.$$.fragment,d),h(wy.$$.fragment,d),h(Ay.$$.fragment,d),h(Ly.$$.fragment,d),h(By.$$.fragment,d),h(xy.$$.fragment,d),h(Ry.$$.fragment,d),h(Sy.$$.fragment,d),h(Py.$$.fragment,d),h($y.$$.fragment,d),h(Iy.$$.fragment,d),h(jy.$$.fragment,d),h(Dy.$$.fragment,d),h(qy.$$.fragment,d),h(Gy.$$.fragment,d),h(Xy.$$.fragment,d),h(Vy.$$.fragment,d),h(zy.$$.fragment,d),h(Qy.$$.fragment,d),h(Hy.$$.fragment,d),h(Uy.$$.fragment,d),h(Jy.$$.fragment,d),h(Yy.$$.fragment,d),h(Ky.$$.fragment,d),h(ew.$$.fragment,d),h(ow.$$.fragment,d),h(rw.$$.fragment,d),h(tw.$$.fragment,d),h(aw.$$.fragment,d),h(nw.$$.fragment,d),h(lw.$$.fragment,d),h(iw.$$.fragment,d),h(dw.$$.fragment,d),h(cw.$$.fragment,d),h(fw.$$.fragment,d),h(mw.$$.fragment,d),h(hw.$$.fragment,d),h(pw.$$.fragment,d),h(_w.$$.fragment,d),h(uw.$$.fragment,d),h(bw.$$.fragment,d),h(vw.$$.fragment,d),h(Fw.$$.fragment,d),h(Cw.$$.fragment,d),h(Mw.$$.fragment,d),h(yw.$$.fragment,d),h(ww.$$.fragment,d),h(Aw.$$.fragment,d),h(Bw.$$.fragment,d),h(xw.$$.fragment,d),h(kw.$$.fragment,d),h(Rw.$$.fragment,d),h(Sw.$$.fragment,d),h(Pw.$$.fragment,d),h(Iw.$$.fragment,d),h(jw.$$.fragment,d),h(Nw.$$.fragment,d),h(Dw.$$.fragment,d),h(qw.$$.fragment,d),h(Gw.$$.fragment,d),h(Xw.$$.fragment,d),h(Vw.$$.fragment,d),h(zw.$$.fragment,d),h(Ww.$$.fragment,d),h(Qw.$$.fragment,d),h(Hw.$$.fragment,d),h(Jw.$$.fragment,d),h(Yw.$$.fragment,d),h(Kw.$$.fragment,d),h(Zw.$$.fragment,d),h(eA.$$.fragment,d),h(oA.$$.fragment,d),h(tA.$$.fragment,d),h(aA.$$.fragment,d),h(nA.$$.fragment,d),h(sA.$$.fragment,d),h(lA.$$.fragment,d),h(iA.$$.fragment,d),h(cA.$$.fragment,d),h(fA.$$.fragment,d),h(mA.$$.fragment,d),h(gA.$$.fragment,d),h(hA.$$.fragment,d),h(pA.$$.fragment,d),h(uA.$$.fragment,d),h(bA.$$.fragment,d),h(vA.$$.fragment,d),h(TA.$$.fragment,d),h(FA.$$.fragment,d),h(CA.$$.fragment,d),h(EA.$$.fragment,d),h(yA.$$.fragment,d),h(wA.$$.fragment,d),h(AA.$$.fragment,d),h(LA.$$.fragment,d),h(BA.$$.fragment,d),h(kA.$$.fragment,d),h(RA.$$.fragment,d),h(SA.$$.fragment,d),h(PA.$$.fragment,d),h($A.$$.fragment,d),h(IA.$$.fragment,d),h(NA.$$.fragment,d),h(DA.$$.fragment,d),h(qA.$$.fragment,d),h(GA.$$.fragment,d),h(OA.$$.fragment,d),h(XA.$$.fragment,d),h(zA.$$.fragment,d),h(WA.$$.fragment,d),h(QA.$$.fragment,d),h(HA.$$.fragment,d),h(UA.$$.fragment,d),h(JA.$$.fragment,d),h(KA.$$.fragment,d),h(ZA.$$.fragment,d),h(eL.$$.fragment,d),h(oL.$$.fragment,d),h(rL.$$.fragment,d),h(tL.$$.fragment,d),h(nL.$$.fragment,d),h(sL.$$.fragment,d),h(lL.$$.fragment,d),h(iL.$$.fragment,d),h(dL.$$.fragment,d),h(cL.$$.fragment,d),h(mL.$$.fragment,d),h(gL.$$.fragment,d),h(hL.$$.fragment,d),h(pL.$$.fragment,d),h(_L.$$.fragment,d),h(uL.$$.fragment,d),h(vL.$$.fragment,d),h(TL.$$.fragment,d),h(FL.$$.fragment,d),h(CL.$$.fragment,d),h(ML.$$.fragment,d),h(EL.$$.fragment,d),h(wL.$$.fragment,d),h(AL.$$.fragment,d),h(LL.$$.fragment,d),h(BL.$$.fragment,d),h(xL.$$.fragment,d),h(kL.$$.fragment,d),h(SL.$$.fragment,d),h(PL.$$.fragment,d),h($L.$$.fragment,d),h(IL.$$.fragment,d),h(jL.$$.fragment,d),h(NL.$$.fragment,d),h(qL.$$.fragment,d),h(GL.$$.fragment,d),h(OL.$$.fragment,d),h(XL.$$.fragment,d),h(VL.$$.fragment,d),h(zL.$$.fragment,d),h(QL.$$.fragment,d),h(HL.$$.fragment,d),h(UL.$$.fragment,d),h(JL.$$.fragment,d),h(YL.$$.fragment,d),h(KL.$$.fragment,d),h(e7.$$.fragment,d),h(o7.$$.fragment,d),h(r7.$$.fragment,d),h(t7.$$.fragment,d),h(a7.$$.fragment,d),h(n7.$$.fragment,d),h(l7.$$.fragment,d),h(i7.$$.fragment,d),h(d7.$$.fragment,d),h(f7.$$.fragment,d),h(m7.$$.fragment,d),h(g7.$$.fragment,d),h(p7.$$.fragment,d),h(_7.$$.fragment,d),h(u7.$$.fragment,d),h(b7.$$.fragment,d),$Se=!0)},o(d){p(fe.$$.fragment,d),p(Va.$$.fragment,d),p(T4.$$.fragment,d),p(F4.$$.fragment,d),p(Yf.$$.fragment,d),p(C4.$$.fragment,d),p(M4.$$.fragment,d),p(w4.$$.fragment,d),p(A4.$$.fragment,d),p(L4.$$.fragment,d),p(B4.$$.fragment,d),p(x4.$$.fragment,d),p(S4.$$.fragment,d),p(P4.$$.fragment,d),p($4.$$.fragment,d),p(I4.$$.fragment,d),p(j4.$$.fragment,d),p(q4.$$.fragment,d),p(Dh.$$.fragment,d),p(G4.$$.fragment,d),p(O4.$$.fragment,d),p(X4.$$.fragment,d),p(V4.$$.fragment,d),p(Q4.$$.fragment,d),p(Jh.$$.fragment,d),p(H4.$$.fragment,d),p(U4.$$.fragment,d),p(J4.$$.fragment,d),p(Y4.$$.fragment,d),p(Z4.$$.fragment,d),p(eE.$$.fragment,d),p(oE.$$.fragment,d),p(rE.$$.fragment,d),p(tE.$$.fragment,d),p(aE.$$.fragment,d),p(sE.$$.fragment,d),p(lE.$$.fragment,d),p(iE.$$.fragment,d),p(dE.$$.fragment,d),p(cE.$$.fragment,d),p(fE.$$.fragment,d),p(gE.$$.fragment,d),p(hE.$$.fragment,d),p(pE.$$.fragment,d),p(_E.$$.fragment,d),p(uE.$$.fragment,d),p(bE.$$.fragment,d),p(TE.$$.fragment,d),p(FE.$$.fragment,d),p(CE.$$.fragment,d),p(ME.$$.fragment,d),p(EE.$$.fragment,d),p(yE.$$.fragment,d),p(AE.$$.fragment,d),p(LE.$$.fragment,d),p(BE.$$.fragment,d),p(xE.$$.fragment,d),p(kE.$$.fragment,d),p(RE.$$.fragment,d),p(PE.$$.fragment,d),p($E.$$.fragment,d),p(IE.$$.fragment,d),p(jE.$$.fragment,d),p(NE.$$.fragment,d),p(DE.$$.fragment,d),p(GE.$$.fragment,d),p(OE.$$.fragment,d),p(XE.$$.fragment,d),p(VE.$$.fragment,d),p(zE.$$.fragment,d),p(WE.$$.fragment,d),p(HE.$$.fragment,d),p(UE.$$.fragment,d),p(JE.$$.fragment,d),p(YE.$$.fragment,d),p(KE.$$.fragment,d),p(ZE.$$.fragment,d),p(o3.$$.fragment,d),p(r3.$$.fragment,d),p(t3.$$.fragment,d),p(a3.$$.fragment,d),p(n3.$$.fragment,d),p(s3.$$.fragment,d),p(i3.$$.fragment,d),p(d3.$$.fragment,d),p(c3.$$.fragment,d),p(f3.$$.fragment,d),p(m3.$$.fragment,d),p(g3.$$.fragment,d),p(p3.$$.fragment,d),p(_3.$$.fragment,d),p(u3.$$.fragment,d),p(b3.$$.fragment,d),p(v3.$$.fragment,d),p(T3.$$.fragment,d),p(C3.$$.fragment,d),p(M3.$$.fragment,d),p(E3.$$.fragment,d),p(y3.$$.fragment,d),p(w3.$$.fragment,d),p(A3.$$.fragment,d),p(B3.$$.fragment,d),p(x3.$$.fragment,d),p(k3.$$.fragment,d),p(R3.$$.fragment,d),p(S3.$$.fragment,d),p(P3.$$.fragment,d),p(I3.$$.fragment,d),p(j3.$$.fragment,d),p(N3.$$.fragment,d),p(D3.$$.fragment,d),p(q3.$$.fragment,d),p(G3.$$.fragment,d),p(X3.$$.fragment,d),p(V3.$$.fragment,d),p(z3.$$.fragment,d),p(W3.$$.fragment,d),p(Q3.$$.fragment,d),p(H3.$$.fragment,d),p(J3.$$.fragment,d),p(Y3.$$.fragment,d),p(K3.$$.fragment,d),p(Z3.$$.fragment,d),p(ey.$$.fragment,d),p(oy.$$.fragment,d),p(ty.$$.fragment,d),p(ay.$$.fragment,d),p(ny.$$.fragment,d),p(ly.$$.fragment,d),p(iy.$$.fragment,d),p(dy.$$.fragment,d),p(fy.$$.fragment,d),p(my.$$.fragment,d),p(gy.$$.fragment,d),p(hy.$$.fragment,d),p(py.$$.fragment,d),p(_y.$$.fragment,d),p(by.$$.fragment,d),p(vy.$$.fragment,d),p(Ty.$$.fragment,d),p(Fy.$$.fragment,d),p(Cy.$$.fragment,d),p(My.$$.fragment,d),p(yy.$$.fragment,d),p(wy.$$.fragment,d),p(Ay.$$.fragment,d),p(Ly.$$.fragment,d),p(By.$$.fragment,d),p(xy.$$.fragment,d),p(Ry.$$.fragment,d),p(Sy.$$.fragment,d),p(Py.$$.fragment,d),p($y.$$.fragment,d),p(Iy.$$.fragment,d),p(jy.$$.fragment,d),p(Dy.$$.fragment,d),p(qy.$$.fragment,d),p(Gy.$$.fragment,d),p(Xy.$$.fragment,d),p(Vy.$$.fragment,d),p(zy.$$.fragment,d),p(Qy.$$.fragment,d),p(Hy.$$.fragment,d),p(Uy.$$.fragment,d),p(Jy.$$.fragment,d),p(Yy.$$.fragment,d),p(Ky.$$.fragment,d),p(ew.$$.fragment,d),p(ow.$$.fragment,d),p(rw.$$.fragment,d),p(tw.$$.fragment,d),p(aw.$$.fragment,d),p(nw.$$.fragment,d),p(lw.$$.fragment,d),p(iw.$$.fragment,d),p(dw.$$.fragment,d),p(cw.$$.fragment,d),p(fw.$$.fragment,d),p(mw.$$.fragment,d),p(hw.$$.fragment,d),p(pw.$$.fragment,d),p(_w.$$.fragment,d),p(uw.$$.fragment,d),p(bw.$$.fragment,d),p(vw.$$.fragment,d),p(Fw.$$.fragment,d),p(Cw.$$.fragment,d),p(Mw.$$.fragment,d),p(yw.$$.fragment,d),p(ww.$$.fragment,d),p(Aw.$$.fragment,d),p(Bw.$$.fragment,d),p(xw.$$.fragment,d),p(kw.$$.fragment,d),p(Rw.$$.fragment,d),p(Sw.$$.fragment,d),p(Pw.$$.fragment,d),p(Iw.$$.fragment,d),p(jw.$$.fragment,d),p(Nw.$$.fragment,d),p(Dw.$$.fragment,d),p(qw.$$.fragment,d),p(Gw.$$.fragment,d),p(Xw.$$.fragment,d),p(Vw.$$.fragment,d),p(zw.$$.fragment,d),p(Ww.$$.fragment,d),p(Qw.$$.fragment,d),p(Hw.$$.fragment,d),p(Jw.$$.fragment,d),p(Yw.$$.fragment,d),p(Kw.$$.fragment,d),p(Zw.$$.fragment,d),p(eA.$$.fragment,d),p(oA.$$.fragment,d),p(tA.$$.fragment,d),p(aA.$$.fragment,d),p(nA.$$.fragment,d),p(sA.$$.fragment,d),p(lA.$$.fragment,d),p(iA.$$.fragment,d),p(cA.$$.fragment,d),p(fA.$$.fragment,d),p(mA.$$.fragment,d),p(gA.$$.fragment,d),p(hA.$$.fragment,d),p(pA.$$.fragment,d),p(uA.$$.fragment,d),p(bA.$$.fragment,d),p(vA.$$.fragment,d),p(TA.$$.fragment,d),p(FA.$$.fragment,d),p(CA.$$.fragment,d),p(EA.$$.fragment,d),p(yA.$$.fragment,d),p(wA.$$.fragment,d),p(AA.$$.fragment,d),p(LA.$$.fragment,d),p(BA.$$.fragment,d),p(kA.$$.fragment,d),p(RA.$$.fragment,d),p(SA.$$.fragment,d),p(PA.$$.fragment,d),p($A.$$.fragment,d),p(IA.$$.fragment,d),p(NA.$$.fragment,d),p(DA.$$.fragment,d),p(qA.$$.fragment,d),p(GA.$$.fragment,d),p(OA.$$.fragment,d),p(XA.$$.fragment,d),p(zA.$$.fragment,d),p(WA.$$.fragment,d),p(QA.$$.fragment,d),p(HA.$$.fragment,d),p(UA.$$.fragment,d),p(JA.$$.fragment,d),p(KA.$$.fragment,d),p(ZA.$$.fragment,d),p(eL.$$.fragment,d),p(oL.$$.fragment,d),p(rL.$$.fragment,d),p(tL.$$.fragment,d),p(nL.$$.fragment,d),p(sL.$$.fragment,d),p(lL.$$.fragment,d),p(iL.$$.fragment,d),p(dL.$$.fragment,d),p(cL.$$.fragment,d),p(mL.$$.fragment,d),p(gL.$$.fragment,d),p(hL.$$.fragment,d),p(pL.$$.fragment,d),p(_L.$$.fragment,d),p(uL.$$.fragment,d),p(vL.$$.fragment,d),p(TL.$$.fragment,d),p(FL.$$.fragment,d),p(CL.$$.fragment,d),p(ML.$$.fragment,d),p(EL.$$.fragment,d),p(wL.$$.fragment,d),p(AL.$$.fragment,d),p(LL.$$.fragment,d),p(BL.$$.fragment,d),p(xL.$$.fragment,d),p(kL.$$.fragment,d),p(SL.$$.fragment,d),p(PL.$$.fragment,d),p($L.$$.fragment,d),p(IL.$$.fragment,d),p(jL.$$.fragment,d),p(NL.$$.fragment,d),p(qL.$$.fragment,d),p(GL.$$.fragment,d),p(OL.$$.fragment,d),p(XL.$$.fragment,d),p(VL.$$.fragment,d),p(zL.$$.fragment,d),p(QL.$$.fragment,d),p(HL.$$.fragment,d),p(UL.$$.fragment,d),p(JL.$$.fragment,d),p(YL.$$.fragment,d),p(KL.$$.fragment,d),p(e7.$$.fragment,d),p(o7.$$.fragment,d),p(r7.$$.fragment,d),p(t7.$$.fragment,d),p(a7.$$.fragment,d),p(n7.$$.fragment,d),p(l7.$$.fragment,d),p(i7.$$.fragment,d),p(d7.$$.fragment,d),p(f7.$$.fragment,d),p(m7.$$.fragment,d),p(g7.$$.fragment,d),p(p7.$$.fragment,d),p(_7.$$.fragment,d),p(u7.$$.fragment,d),p(b7.$$.fragment,d),$Se=!1},d(d){t(J),d&&t($e),d&&t(de),_(fe),d&&t(Wf),d&&t(ha),d&&t(Be),d&&t(co),d&&t(Hf),_(Va,d),d&&t(fo),d&&t(_e),d&&t(Wo),d&&t(za),d&&t(Rke),d&&t(Yi),_(T4),d&&t(Ske),d&&t(Jn),d&&t(Pke),_(F4,d),d&&t($ke),d&&t(F9),d&&t(Ike),_(Yf,d),d&&t(jke),d&&t(Ki),_(C4),d&&t(Nke),d&&t(Qo),_(M4),_(w4),_(A4),_(L4),d&&t(Dke),d&&t(ed),_(B4),d&&t(qke),d&&t(Ho),_(x4),_(S4),_(P4),_($4),d&&t(Gke),d&&t(od),_(I4),d&&t(Oke),d&&t(Uo),_(j4),_(q4),_(Dh),_(G4),_(O4),d&&t(Xke),d&&t(rd),_(X4),d&&t(Vke),d&&t(Jo),_(V4),_(Q4),_(Jh),_(H4),_(U4),d&&t(zke),d&&t(ad),_(J4),d&&t(Wke),d&&t(Yo),_(Y4),_(Z4),_(eE),_(oE),_(rE),d&&t(Qke),d&&t(ld),_(tE),d&&t(Hke),d&&t(Ko),_(aE),_(sE),_(lE),_(iE),_(dE),d&&t(Uke),d&&t(cd),_(cE),d&&t(Jke),d&&t(Zo),_(fE),_(gE),_(hE),_(pE),_(_E),d&&t(Yke),d&&t(gd),_(uE),d&&t(Kke),d&&t(er),_(bE),_(TE),_(FE),_(CE),_(ME),d&&t(Zke),d&&t(_d),_(EE),d&&t(eRe),d&&t(or),_(yE),_(AE),_(LE),_(BE),_(xE),d&&t(oRe),d&&t(vd),_(kE),d&&t(rRe),d&&t(rr),_(RE),_(PE),_($E),_(IE),_(jE),d&&t(tRe),d&&t(Cd),_(NE),d&&t(aRe),d&&t(tr),_(DE),_(GE),_(OE),_(XE),_(VE),d&&t(nRe),d&&t(yd),_(zE),d&&t(sRe),d&&t(ar),_(WE),_(HE),_(UE),_(JE),_(YE),d&&t(lRe),d&&t(Ld),_(KE),d&&t(iRe),d&&t(nr),_(ZE),_(o3),_(r3),_(t3),_(a3),d&&t(dRe),d&&t(kd),_(n3),d&&t(cRe),d&&t(sr),_(s3),_(i3),_(d3),_(c3),_(f3),d&&t(fRe),d&&t(Pd),_(m3),d&&t(mRe),d&&t(lr),_(g3),_(p3),_(_3),_(u3),_(b3),d&&t(gRe),d&&t(jd),_(v3),d&&t(hRe),d&&t(ir),_(T3),_(C3),_(M3),_(E3),_(y3),d&&t(pRe),d&&t(qd),_(w3),d&&t(_Re),d&&t(dr),_(A3),_(B3),_(x3),_(k3),_(R3),d&&t(uRe),d&&t(Xd),_(S3),d&&t(bRe),d&&t(cr),_(P3),_(I3),_(j3),_(N3),_(D3),d&&t(vRe),d&&t(Wd),_(q3),d&&t(TRe),d&&t(fr),_(G3),_(X3),_(V3),_(z3),_(W3),d&&t(FRe),d&&t(Ud),_(Q3),d&&t(CRe),d&&t(mr),_(H3),_(J3),_(Y3),_(K3),_(Z3),d&&t(MRe),d&&t(Kd),_(ey),d&&t(ERe),d&&t(gr),_(oy),_(ty),_(ay),_(ny),_(ly),d&&t(yRe),d&&t(oc),_(iy),d&&t(wRe),d&&t(hr),_(dy),_(fy),_(my),_(gy),_(hy),d&&t(ARe),d&&t(ac),_(py),d&&t(LRe),d&&t(pr),_(_y),_(by),_(vy),_(Ty),_(Fy),d&&t(BRe),d&&t(ic),_(Cy),d&&t(xRe),d&&t(_r),_(My),_(yy),_(wy),_(Ay),_(Ly),d&&t(kRe),d&&t(fc),_(By),d&&t(RRe),d&&t(ur),_(xy),_(Ry),_(Sy),_(Py),_($y),d&&t(SRe),d&&t(hc),_(Iy),d&&t(PRe),d&&t(br),_(jy),_(Dy),_(qy),_(Gy),_(Xy),d&&t($Re),d&&t(uc),_(Vy),d&&t(IRe),d&&t(vr),_(zy),_(Qy),_(Hy),_(Uy),_(Jy),d&&t(jRe),d&&t(Tc),_(Yy),d&&t(NRe),d&&t(Tr),_(Ky),_(ew),_(ow),_(rw),_(tw),d&&t(DRe),d&&t(Mc),_(aw),d&&t(qRe),d&&t(Fr),_(nw),_(lw),_(iw),_(dw),_(cw),d&&t(GRe),d&&t(wc),_(fw),d&&t(ORe),d&&t(Cr),_(mw),_(hw),_(pw),_(_w),_(uw),d&&t(XRe),d&&t(Bc),_(bw),d&&t(VRe),d&&t(Mr),_(vw),_(Fw),_(Cw),_(Mw),_(yw),d&&t(zRe),d&&t(Rc),_(ww),d&&t(WRe),d&&t(Er),_(Aw),_(Bw),_(xw),_(kw),_(Rw),d&&t(QRe),d&&t($c),_(Sw),d&&t(HRe),d&&t(yr),_(Pw),_(Iw),_(jw),_(Nw),_(Dw),d&&t(URe),d&&t(Nc),_(qw),d&&t(JRe),d&&t(wr),_(Gw),_(Xw),_(Vw),_(zw),_(Ww),d&&t(YRe),d&&t(Gc),_(Qw),d&&t(KRe),d&&t(Ar),_(Hw),_(Jw),_(Yw),_(Kw),_(Zw),d&&t(ZRe),d&&t(Vc),_(eA),d&&t(eSe),d&&t(Lr),_(oA),_(tA),_(aA),_(nA),_(sA),d&&t(oSe),d&&t(Qc),_(lA),d&&t(rSe),d&&t(Br),_(iA),_(cA),_(fA),_(mA),_(gA),d&&t(tSe),d&&t(Jc),_(hA),d&&t(aSe),d&&t(xr),_(pA),_(uA),_(bA),_(vA),_(TA),d&&t(nSe),d&&t(Zc),_(FA),d&&t(sSe),d&&t(kr),_(CA),_(EA),_(yA),_(wA),_(AA),d&&t(lSe),d&&t(rf),_(LA),d&&t(iSe),d&&t(Rr),_(BA),_(kA),_(RA),_(SA),_(PA),d&&t(dSe),d&&t(nf),_($A),d&&t(cSe),d&&t(Sr),_(IA),_(NA),_(DA),_(qA),_(GA),d&&t(fSe),d&&t(df),_(OA),d&&t(mSe),d&&t(Pr),_(XA),_(zA),_(WA),_(QA),_(HA),d&&t(gSe),d&&t(mf),_(UA),d&&t(hSe),d&&t($r),_(JA),_(KA),_(ZA),_(eL),_(oL),d&&t(pSe),d&&t(pf),_(rL),d&&t(_Se),d&&t(Ir),_(tL),_(nL),_(sL),_(lL),_(iL),d&&t(uSe),d&&t(bf),_(dL),d&&t(bSe),d&&t(jr),_(cL),_(mL),_(gL),_(hL),_(pL),d&&t(vSe),d&&t(Ff),_(_L),d&&t(TSe),d&&t(Nr),_(uL),_(vL),_(TL),_(FL),_(CL),d&&t(FSe),d&&t(Ef),_(ML),d&&t(CSe),d&&t(Dr),_(EL),_(wL),_(AL),_(LL),_(BL),d&&t(MSe),d&&t(Af),_(xL),d&&t(ESe),d&&t(qr),_(kL),_(SL),_(PL),_($L),_(IL),d&&t(ySe),d&&t(xf),_(jL),d&&t(wSe),d&&t(Gr),_(NL),_(qL),_(GL),_(OL),_(XL),d&&t(ASe),d&&t(Sf),_(VL),d&&t(LSe),d&&t(Or),_(zL),_(QL),_(HL),_(UL),_(JL),d&&t(BSe),d&&t(If),_(YL),d&&t(xSe),d&&t(Xr),_(KL),_(e7),_(o7),_(r7),_(t7),d&&t(kSe),d&&t(Df),_(a7),d&&t(RSe),d&&t(Vr),_(n7),_(l7),_(i7),_(d7),_(f7),d&&t(SSe),d&&t(Of),_(m7),d&&t(PSe),d&&t(zr),_(g7),_(p7),_(_7),_(u7),_(b7)}}}const OCt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForSpeechSeq2Seq",title:"FlaxAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function XCt(Xi,J,$e){let{fw:de}=J;return Xi.$$set=pe=>{"fw"in pe&&$e(0,de=pe.fw)},[de]}class UCt extends PCt{constructor(J){super();$Ct(this,J,XCt,GCt,ICt,{fw:0})}}export{UCt as default,OCt as metadata};
