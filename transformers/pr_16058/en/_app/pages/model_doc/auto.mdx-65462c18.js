import{S as WEt,i as HEt,s as UEt,e as a,k as l,w as f,t as o,M as JEt,c as n,d as t,m as i,a as s,x as m,h as r,b as d,F as e,g as b,y as g,q as h,o as p,B as _,v as YEt}from"../../chunks/vendor-6b77c823.js";import{T as hPr}from"../../chunks/Tip-39098574.js";import{D as E}from"../../chunks/Docstring-abef54e3.js";import{C as A}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as X}from"../../chunks/IconCopyLink-7a11ce68.js";function KEt(Qf){let Z,io,de,Ce,lo,me,Me,zo,Vi,Wf,ha,Xi,zi,LE,Hf,xe,co,Qi,Qn,xE,Wn,Hn,kE,Wi,Un,SE,Hi,Uf,Xa;return{c(){Z=a("p"),io=o("If your "),de=a("code"),Ce=o("NewModelConfig"),lo=o(" is a subclass of "),me=a("code"),Me=o("PretrainedConfig"),zo=o(`, make sure its
`),Vi=a("code"),Wf=o("model_type"),ha=o(" attribute is set to the same key you use when registering the config (here "),Xi=a("code"),zi=o('"new-model"'),LE=o(")."),Hf=l(),xe=a("p"),co=o("Likewise, if your "),Qi=a("code"),Qn=o("NewModel"),xE=o(" is a subclass of "),Wn=a("a"),Hn=o("PreTrainedModel"),kE=o(`, make sure its
`),Wi=a("code"),Un=o("config_class"),SE=o(` attribute is set to the same class you use when registering the model (here
`),Hi=a("code"),Uf=o("NewModelConfig"),Xa=o(")."),this.h()},l(fo){Z=n(fo,"P",{});var _e=s(Z);io=r(_e,"If your "),de=n(_e,"CODE",{});var y9=s(de);Ce=r(y9,"NewModelConfig"),y9.forEach(t),lo=r(_e," is a subclass of "),me=n(_e,"CODE",{});var Ui=s(me);Me=r(Ui,"PretrainedConfig"),Ui.forEach(t),zo=r(_e,`, make sure its
`),Vi=n(_e,"CODE",{});var L9=s(Vi);Wf=r(L9,"model_type"),L9.forEach(t),ha=r(_e," attribute is set to the same key you use when registering the config (here "),Xi=n(_e,"CODE",{});var x9=s(Xi);zi=r(x9,'"new-model"'),x9.forEach(t),LE=r(_e,")."),_e.forEach(t),Hf=i(fo),xe=n(fo,"P",{});var Qo=s(xe);co=r(Qo,"Likewise, if your "),Qi=n(Qo,"CODE",{});var za=s(Qi);Qn=r(za,"NewModel"),za.forEach(t),xE=r(Qo," is a subclass of "),Wn=n(Qo,"A",{href:!0});var k9=s(Wn);Hn=r(k9,"PreTrainedModel"),k9.forEach(t),kE=r(Qo,`, make sure its
`),Wi=n(Qo,"CODE",{});var Jf=s(Wi);Un=r(Jf,"config_class"),Jf.forEach(t),SE=r(Qo,` attribute is set to the same class you use when registering the model (here
`),Hi=n(Qo,"CODE",{});var S9=s(Hi);Uf=r(S9,"NewModelConfig"),S9.forEach(t),Xa=r(Qo,")."),Qo.forEach(t),this.h()},h(){d(Wn,"href","/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel")},m(fo,_e){b(fo,Z,_e),e(Z,io),e(Z,de),e(de,Ce),e(Z,lo),e(Z,me),e(me,Me),e(Z,zo),e(Z,Vi),e(Vi,Wf),e(Z,ha),e(Z,Xi),e(Xi,zi),e(Z,LE),b(fo,Hf,_e),b(fo,xe,_e),e(xe,co),e(xe,Qi),e(Qi,Qn),e(xe,xE),e(xe,Wn),e(Wn,Hn),e(xe,kE),e(xe,Wi),e(Wi,Un),e(xe,SE),e(xe,Hi),e(Hi,Uf),e(xe,Xa)},d(fo){fo&&t(Z),fo&&t(Hf),fo&&t(xe)}}}function ZEt(Qf){let Z,io,de,Ce,lo;return{c(){Z=a("p"),io=o("Passing "),de=a("code"),Ce=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(me){Z=n(me,"P",{});var Me=s(Z);io=r(Me,"Passing "),de=n(Me,"CODE",{});var zo=s(de);Ce=r(zo,"use_auth_token=True"),zo.forEach(t),lo=r(Me," is required when you want to use a private model."),Me.forEach(t)},m(me,Me){b(me,Z,Me),e(Z,io),e(Z,de),e(de,Ce),e(Z,lo)},d(me){me&&t(Z)}}}function eCt(Qf){let Z,io,de,Ce,lo;return{c(){Z=a("p"),io=o("Passing "),de=a("code"),Ce=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(me){Z=n(me,"P",{});var Me=s(Z);io=r(Me,"Passing "),de=n(Me,"CODE",{});var zo=s(de);Ce=r(zo,"use_auth_token=True"),zo.forEach(t),lo=r(Me," is required when you want to use a private model."),Me.forEach(t)},m(me,Me){b(me,Z,Me),e(Z,io),e(Z,de),e(de,Ce),e(Z,lo)},d(me){me&&t(Z)}}}function oCt(Qf){let Z,io,de,Ce,lo,me,Me,zo,Vi,Wf,ha,Xi,zi,LE,Hf,xe,co,Qi,Qn,xE,Wn,Hn,kE,Wi,Un,SE,Hi,Uf,Xa,fo,_e,y9,Ui,L9,x9,Qo,za,k9,Jf,S9,Dqe,ERe,Ji,Yf,fY,RE,Gqe,mY,Oqe,CRe,Jn,Vqe,gY,Xqe,zqe,hY,Qqe,Wqe,wRe,BE,ARe,R9,Hqe,yRe,Kf,LRe,Yi,Zf,pY,PE,Uqe,_Y,Jqe,xRe,Wo,$E,Yqe,qE,Kqe,B9,Zqe,eIe,oIe,IE,rIe,uY,tIe,aIe,nIe,mo,jE,sIe,bY,lIe,iIe,Ki,dIe,FY,cIe,fIe,vY,mIe,gIe,hIe,F,em,TY,pIe,_Ie,P9,uIe,bIe,FIe,om,MY,vIe,TIe,$9,MIe,EIe,CIe,rm,EY,wIe,AIe,q9,yIe,LIe,xIe,tm,CY,kIe,SIe,I9,RIe,BIe,PIe,am,wY,$Ie,qIe,j9,IIe,jIe,NIe,nm,AY,DIe,GIe,N9,OIe,VIe,XIe,sm,yY,zIe,QIe,D9,WIe,HIe,UIe,lm,LY,JIe,YIe,G9,KIe,ZIe,eje,im,xY,oje,rje,O9,tje,aje,nje,dm,kY,sje,lje,V9,ije,dje,cje,cm,SY,fje,mje,X9,gje,hje,pje,fm,RY,_je,uje,z9,bje,Fje,vje,mm,BY,Tje,Mje,Q9,Eje,Cje,wje,gm,PY,Aje,yje,W9,Lje,xje,kje,hm,$Y,Sje,Rje,H9,Bje,Pje,$je,pm,qY,qje,Ije,U9,jje,Nje,Dje,_m,IY,Gje,Oje,J9,Vje,Xje,zje,um,jY,Qje,Wje,Y9,Hje,Uje,Jje,bm,NY,Yje,Kje,K9,Zje,eNe,oNe,Fm,DY,rNe,tNe,Z9,aNe,nNe,sNe,vm,GY,lNe,iNe,ex,dNe,cNe,fNe,Tm,OY,mNe,gNe,ox,hNe,pNe,_Ne,Mm,VY,uNe,bNe,rx,FNe,vNe,TNe,Em,XY,MNe,ENe,tx,CNe,wNe,ANe,Cm,zY,yNe,LNe,ax,xNe,kNe,SNe,wm,QY,RNe,BNe,nx,PNe,$Ne,qNe,Am,WY,INe,jNe,sx,NNe,DNe,GNe,ym,HY,ONe,VNe,lx,XNe,zNe,QNe,Lm,UY,WNe,HNe,ix,UNe,JNe,YNe,xm,JY,KNe,ZNe,dx,eDe,oDe,rDe,km,YY,tDe,aDe,cx,nDe,sDe,lDe,Sm,KY,iDe,dDe,fx,cDe,fDe,mDe,Rm,ZY,gDe,hDe,mx,pDe,_De,uDe,Bm,eK,bDe,FDe,gx,vDe,TDe,MDe,Pm,oK,EDe,CDe,hx,wDe,ADe,yDe,$m,rK,LDe,xDe,px,kDe,SDe,RDe,qm,tK,BDe,PDe,_x,$De,qDe,IDe,Im,aK,jDe,NDe,ux,DDe,GDe,ODe,jm,nK,VDe,XDe,bx,zDe,QDe,WDe,Nm,sK,HDe,UDe,Fx,JDe,YDe,KDe,Dm,lK,ZDe,eGe,vx,oGe,rGe,tGe,Gm,iK,aGe,nGe,Tx,sGe,lGe,iGe,Om,dK,dGe,cGe,Mx,fGe,mGe,gGe,Vm,cK,hGe,pGe,Ex,_Ge,uGe,bGe,Xm,fK,FGe,vGe,Cx,TGe,MGe,EGe,zm,mK,CGe,wGe,wx,AGe,yGe,LGe,Qm,gK,xGe,kGe,Ax,SGe,RGe,BGe,Wm,hK,PGe,$Ge,yx,qGe,IGe,jGe,Hm,pK,NGe,DGe,Lx,GGe,OGe,VGe,Um,_K,XGe,zGe,xx,QGe,WGe,HGe,Jm,uK,UGe,JGe,kx,YGe,KGe,ZGe,Ym,bK,eOe,oOe,Sx,rOe,tOe,aOe,Km,FK,nOe,sOe,Rx,lOe,iOe,dOe,Zm,vK,cOe,fOe,Bx,mOe,gOe,hOe,eg,TK,pOe,_Oe,Px,uOe,bOe,FOe,og,MK,vOe,TOe,$x,MOe,EOe,COe,rg,EK,wOe,AOe,qx,yOe,LOe,xOe,tg,CK,kOe,SOe,Ix,ROe,BOe,POe,ag,wK,$Oe,qOe,jx,IOe,jOe,NOe,ng,AK,DOe,GOe,Nx,OOe,VOe,XOe,sg,yK,zOe,QOe,Dx,WOe,HOe,UOe,lg,LK,JOe,YOe,Gx,KOe,ZOe,eVe,ig,xK,oVe,rVe,Ox,tVe,aVe,nVe,dg,kK,sVe,lVe,Vx,iVe,dVe,cVe,cg,SK,fVe,mVe,Xx,gVe,hVe,pVe,fg,RK,_Ve,uVe,zx,bVe,FVe,vVe,mg,BK,TVe,MVe,Qx,EVe,CVe,wVe,gg,PK,AVe,yVe,Wx,LVe,xVe,kVe,hg,$K,SVe,RVe,Hx,BVe,PVe,$Ve,pg,qK,qVe,IVe,Ux,jVe,NVe,DVe,_g,IK,GVe,OVe,Jx,VVe,XVe,zVe,ug,jK,QVe,WVe,Yx,HVe,UVe,JVe,bg,NK,YVe,KVe,Kx,ZVe,eXe,oXe,Fg,DK,rXe,tXe,Zx,aXe,nXe,sXe,vg,GK,lXe,iXe,ek,dXe,cXe,fXe,Tg,OK,mXe,gXe,ok,hXe,pXe,_Xe,Mg,VK,uXe,bXe,rk,FXe,vXe,TXe,Eg,XK,MXe,EXe,tk,CXe,wXe,AXe,Cg,zK,yXe,LXe,ak,xXe,kXe,SXe,wg,QK,RXe,BXe,nk,PXe,$Xe,qXe,Ag,WK,IXe,jXe,sk,NXe,DXe,GXe,yg,HK,OXe,VXe,lk,XXe,zXe,QXe,Lg,UK,WXe,HXe,ik,UXe,JXe,YXe,xg,JK,KXe,ZXe,dk,eze,oze,rze,kg,YK,tze,aze,ck,nze,sze,lze,Sg,KK,ize,dze,fk,cze,fze,mze,Rg,ZK,gze,hze,mk,pze,_ze,uze,Bg,eZ,bze,Fze,gk,vze,Tze,Mze,Pg,oZ,Eze,Cze,hk,wze,Aze,yze,$g,rZ,Lze,xze,pk,kze,Sze,Rze,qg,tZ,Bze,Pze,_k,$ze,qze,Ize,Ig,aZ,jze,Nze,uk,Dze,Gze,Oze,jg,nZ,Vze,Xze,bk,zze,Qze,Wze,Ng,sZ,Hze,Uze,Fk,Jze,Yze,Kze,Dg,lZ,Zze,eQe,vk,oQe,rQe,tQe,Gg,iZ,aQe,nQe,Tk,sQe,lQe,iQe,Og,dZ,dQe,cQe,Mk,fQe,mQe,gQe,Vg,cZ,hQe,pQe,Ek,_Qe,uQe,bQe,Xg,fZ,FQe,vQe,Ck,TQe,MQe,EQe,mZ,CQe,wQe,NE,AQe,zg,DE,yQe,gZ,LQe,kRe,Zi,Qg,hZ,GE,xQe,pZ,kQe,SRe,Ho,OE,SQe,VE,RQe,wk,BQe,PQe,$Qe,XE,qQe,_Z,IQe,jQe,NQe,go,zE,DQe,uZ,GQe,OQe,Qa,VQe,bZ,XQe,zQe,FZ,QQe,WQe,vZ,HQe,UQe,JQe,C,Yn,TZ,YQe,KQe,Ak,ZQe,eWe,yk,oWe,rWe,tWe,Kn,MZ,aWe,nWe,Lk,sWe,lWe,xk,iWe,dWe,cWe,Zn,EZ,fWe,mWe,kk,gWe,hWe,Sk,pWe,_We,uWe,Wg,CZ,bWe,FWe,Rk,vWe,TWe,MWe,es,wZ,EWe,CWe,Bk,wWe,AWe,Pk,yWe,LWe,xWe,Hg,AZ,kWe,SWe,$k,RWe,BWe,PWe,Ug,yZ,$We,qWe,qk,IWe,jWe,NWe,Jg,LZ,DWe,GWe,Ik,OWe,VWe,XWe,os,xZ,zWe,QWe,jk,WWe,HWe,Nk,UWe,JWe,YWe,rs,kZ,KWe,ZWe,Dk,eHe,oHe,Gk,rHe,tHe,aHe,ts,SZ,nHe,sHe,Ok,lHe,iHe,Vk,dHe,cHe,fHe,Yg,RZ,mHe,gHe,Xk,hHe,pHe,_He,Kg,BZ,uHe,bHe,zk,FHe,vHe,THe,as,PZ,MHe,EHe,Qk,CHe,wHe,Wk,AHe,yHe,LHe,Zg,$Z,xHe,kHe,Hk,SHe,RHe,BHe,ns,qZ,PHe,$He,Uk,qHe,IHe,Jk,jHe,NHe,DHe,ss,IZ,GHe,OHe,Yk,VHe,XHe,Kk,zHe,QHe,WHe,ls,jZ,HHe,UHe,Zk,JHe,YHe,NZ,KHe,ZHe,eUe,eh,DZ,oUe,rUe,eS,tUe,aUe,nUe,is,GZ,sUe,lUe,oS,iUe,dUe,rS,cUe,fUe,mUe,oh,OZ,gUe,hUe,tS,pUe,_Ue,uUe,ds,VZ,bUe,FUe,aS,vUe,TUe,nS,MUe,EUe,CUe,cs,XZ,wUe,AUe,sS,yUe,LUe,lS,xUe,kUe,SUe,fs,zZ,RUe,BUe,iS,PUe,$Ue,dS,qUe,IUe,jUe,rh,QZ,NUe,DUe,cS,GUe,OUe,VUe,ms,WZ,XUe,zUe,fS,QUe,WUe,mS,HUe,UUe,JUe,th,HZ,YUe,KUe,gS,ZUe,eJe,oJe,gs,UZ,rJe,tJe,hS,aJe,nJe,pS,sJe,lJe,iJe,hs,JZ,dJe,cJe,_S,fJe,mJe,uS,gJe,hJe,pJe,ps,YZ,_Je,uJe,bS,bJe,FJe,FS,vJe,TJe,MJe,_s,KZ,EJe,CJe,vS,wJe,AJe,TS,yJe,LJe,xJe,ah,ZZ,kJe,SJe,MS,RJe,BJe,PJe,us,eee,$Je,qJe,ES,IJe,jJe,CS,NJe,DJe,GJe,bs,oee,OJe,VJe,wS,XJe,zJe,AS,QJe,WJe,HJe,Fs,ree,UJe,JJe,yS,YJe,KJe,LS,ZJe,eYe,oYe,vs,tee,rYe,tYe,xS,aYe,nYe,kS,sYe,lYe,iYe,Ts,aee,dYe,cYe,SS,fYe,mYe,RS,gYe,hYe,pYe,Ms,nee,_Ye,uYe,BS,bYe,FYe,PS,vYe,TYe,MYe,nh,see,EYe,CYe,$S,wYe,AYe,yYe,Es,lee,LYe,xYe,qS,kYe,SYe,IS,RYe,BYe,PYe,sh,iee,$Ye,qYe,jS,IYe,jYe,NYe,lh,dee,DYe,GYe,NS,OYe,VYe,XYe,Cs,cee,zYe,QYe,DS,WYe,HYe,GS,UYe,JYe,YYe,ws,fee,KYe,ZYe,OS,eKe,oKe,VS,rKe,tKe,aKe,ih,mee,nKe,sKe,XS,lKe,iKe,dKe,As,gee,cKe,fKe,zS,mKe,gKe,QS,hKe,pKe,_Ke,ys,hee,uKe,bKe,WS,FKe,vKe,HS,TKe,MKe,EKe,Ls,pee,CKe,wKe,US,AKe,yKe,JS,LKe,xKe,kKe,xs,_ee,SKe,RKe,YS,BKe,PKe,KS,$Ke,qKe,IKe,ks,uee,jKe,NKe,ZS,DKe,GKe,eR,OKe,VKe,XKe,dh,bee,zKe,QKe,oR,WKe,HKe,UKe,ch,Fee,JKe,YKe,rR,KKe,ZKe,eZe,fh,vee,oZe,rZe,tR,tZe,aZe,nZe,mh,Tee,sZe,lZe,aR,iZe,dZe,cZe,Ss,Mee,fZe,mZe,nR,gZe,hZe,sR,pZe,_Ze,uZe,gh,Eee,bZe,FZe,lR,vZe,TZe,MZe,Rs,Cee,EZe,CZe,iR,wZe,AZe,dR,yZe,LZe,xZe,Bs,wee,kZe,SZe,cR,RZe,BZe,fR,PZe,$Ze,qZe,Ps,Aee,IZe,jZe,mR,NZe,DZe,gR,GZe,OZe,VZe,$s,yee,XZe,zZe,hR,QZe,WZe,pR,HZe,UZe,JZe,qs,Lee,YZe,KZe,_R,ZZe,eeo,uR,oeo,reo,teo,Is,xee,aeo,neo,bR,seo,leo,FR,ieo,deo,ceo,hh,kee,feo,meo,vR,geo,heo,peo,ph,See,_eo,ueo,TR,beo,Feo,veo,js,Ree,Teo,Meo,MR,Eeo,Ceo,ER,weo,Aeo,yeo,Ns,Bee,Leo,xeo,CR,keo,Seo,wR,Reo,Beo,Peo,Ds,Pee,$eo,qeo,AR,Ieo,jeo,yR,Neo,Deo,Geo,_h,$ee,Oeo,Veo,LR,Xeo,zeo,Qeo,uh,qee,Weo,Heo,xR,Ueo,Jeo,Yeo,bh,Iee,Keo,Zeo,kR,eoo,ooo,roo,Fh,jee,too,aoo,SR,noo,soo,loo,Gs,Nee,ioo,doo,RR,coo,foo,BR,moo,goo,hoo,vh,Dee,poo,_oo,PR,uoo,boo,Foo,Th,Gee,voo,Too,$R,Moo,Eoo,Coo,Os,Oee,woo,Aoo,qR,yoo,Loo,IR,xoo,koo,Soo,Vs,Vee,Roo,Boo,jR,Poo,$oo,NR,qoo,Ioo,joo,Xee,Noo,Doo,QE,Goo,Mh,WE,Ooo,zee,Voo,RRe,ed,Eh,Qee,HE,Xoo,Wee,zoo,BRe,Uo,UE,Qoo,JE,Woo,DR,Hoo,Uoo,Joo,YE,Yoo,Hee,Koo,Zoo,ero,$e,KE,oro,Uee,rro,tro,Wa,aro,Jee,nro,sro,Yee,lro,iro,Kee,dro,cro,fro,te,Ch,Zee,mro,gro,GR,hro,pro,_ro,wh,eoe,uro,bro,OR,Fro,vro,Tro,Ah,ooe,Mro,Ero,VR,Cro,wro,Aro,yh,roe,yro,Lro,XR,xro,kro,Sro,Lh,toe,Rro,Bro,zR,Pro,$ro,qro,xh,aoe,Iro,jro,QR,Nro,Dro,Gro,kh,noe,Oro,Vro,WR,Xro,zro,Qro,Sh,soe,Wro,Hro,HR,Uro,Jro,Yro,Rh,loe,Kro,Zro,UR,eto,oto,rto,Bh,ioe,tto,ato,JR,nto,sto,lto,Ph,doe,ito,dto,YR,cto,fto,mto,$h,coe,gto,hto,KR,pto,_to,uto,qh,foe,bto,Fto,ZR,vto,Tto,Mto,Ih,moe,Eto,Cto,eB,wto,Ato,yto,jh,goe,Lto,xto,oB,kto,Sto,Rto,Nh,hoe,Bto,Pto,rB,$to,qto,Ito,Dh,poe,jto,Nto,tB,Dto,Gto,Oto,Gh,_oe,Vto,Xto,aB,zto,Qto,Wto,Oh,Hto,uoe,Uto,Jto,ZE,Yto,Vh,eC,Kto,boe,Zto,PRe,od,Xh,Foe,oC,eao,voe,oao,$Re,Jo,rC,rao,tC,tao,nB,aao,nao,sao,aC,lao,Toe,iao,dao,cao,qe,nC,fao,Moe,mao,gao,rd,hao,Eoe,pao,_ao,Coe,uao,bao,Fao,ke,zh,woe,vao,Tao,sB,Mao,Eao,Cao,Qh,Aoe,wao,Aao,lB,yao,Lao,xao,Wh,yoe,kao,Sao,iB,Rao,Bao,Pao,Hh,Loe,$ao,qao,dB,Iao,jao,Nao,Uh,xoe,Dao,Gao,cB,Oao,Vao,Xao,Jh,koe,zao,Qao,fB,Wao,Hao,Uao,Yh,Soe,Jao,Yao,mB,Kao,Zao,eno,Kh,Roe,ono,rno,gB,tno,ano,nno,Zh,sno,Boe,lno,ino,sC,dno,ep,lC,cno,Poe,fno,qRe,td,op,$oe,iC,mno,qoe,gno,IRe,Yo,dC,hno,ad,pno,hB,_no,uno,pB,bno,Fno,vno,cC,Tno,Ioe,Mno,Eno,Cno,Qr,fC,wno,joe,Ano,yno,nd,Lno,Noe,xno,kno,_B,Sno,Rno,Bno,Doe,Pno,$no,mC,qno,Ie,gC,Ino,Goe,jno,Nno,Ha,Dno,Ooe,Gno,Ono,Voe,Vno,Xno,Xoe,zno,Qno,Wno,T,rp,zoe,Hno,Uno,uB,Jno,Yno,Kno,tp,Qoe,Zno,eso,bB,oso,rso,tso,ap,Woe,aso,nso,FB,sso,lso,iso,np,Hoe,dso,cso,vB,fso,mso,gso,sp,Uoe,hso,pso,TB,_so,uso,bso,lp,Joe,Fso,vso,MB,Tso,Mso,Eso,ip,Yoe,Cso,wso,EB,Aso,yso,Lso,dp,Koe,xso,kso,CB,Sso,Rso,Bso,cp,Zoe,Pso,$so,wB,qso,Iso,jso,fp,ere,Nso,Dso,AB,Gso,Oso,Vso,mp,ore,Xso,zso,yB,Qso,Wso,Hso,gp,rre,Uso,Jso,LB,Yso,Kso,Zso,hp,tre,elo,olo,xB,rlo,tlo,alo,pp,are,nlo,slo,kB,llo,ilo,dlo,_p,nre,clo,flo,SB,mlo,glo,hlo,up,sre,plo,_lo,RB,ulo,blo,Flo,bp,lre,vlo,Tlo,BB,Mlo,Elo,Clo,Fp,ire,wlo,Alo,PB,ylo,Llo,xlo,vp,dre,klo,Slo,$B,Rlo,Blo,Plo,Tp,cre,$lo,qlo,qB,Ilo,jlo,Nlo,Mp,fre,Dlo,Glo,IB,Olo,Vlo,Xlo,Ep,mre,zlo,Qlo,jB,Wlo,Hlo,Ulo,Cp,gre,Jlo,Ylo,NB,Klo,Zlo,eio,wp,hre,oio,rio,DB,tio,aio,nio,Ap,pre,sio,lio,GB,iio,dio,cio,yp,_re,fio,mio,OB,gio,hio,pio,Lp,ure,_io,uio,VB,bio,Fio,vio,xp,bre,Tio,Mio,XB,Eio,Cio,wio,kp,Fre,Aio,yio,zB,Lio,xio,kio,Xs,vre,Sio,Rio,QB,Bio,Pio,WB,$io,qio,Iio,Sp,Tre,jio,Nio,HB,Dio,Gio,Oio,Rp,Mre,Vio,Xio,UB,zio,Qio,Wio,Bp,Ere,Hio,Uio,JB,Jio,Yio,Kio,Pp,Cre,Zio,edo,YB,odo,rdo,tdo,$p,wre,ado,ndo,KB,sdo,ldo,ido,qp,Are,ddo,cdo,ZB,fdo,mdo,gdo,Ip,yre,hdo,pdo,eP,_do,udo,bdo,jp,Lre,Fdo,vdo,oP,Tdo,Mdo,Edo,Np,xre,Cdo,wdo,rP,Ado,ydo,Ldo,Dp,kre,xdo,kdo,tP,Sdo,Rdo,Bdo,Gp,Sre,Pdo,$do,aP,qdo,Ido,jdo,Op,Rre,Ndo,Ddo,nP,Gdo,Odo,Vdo,Vp,Bre,Xdo,zdo,sP,Qdo,Wdo,Hdo,Xp,Pre,Udo,Jdo,lP,Ydo,Kdo,Zdo,zp,$re,eco,oco,iP,rco,tco,aco,Qp,qre,nco,sco,dP,lco,ico,dco,Wp,Ire,cco,fco,cP,mco,gco,hco,Hp,jre,pco,_co,fP,uco,bco,Fco,Up,Nre,vco,Tco,mP,Mco,Eco,Cco,Jp,Dre,wco,Aco,gP,yco,Lco,xco,Yp,Gre,kco,Sco,hP,Rco,Bco,Pco,Kp,Ore,$co,qco,pP,Ico,jco,Nco,Zp,Vre,Dco,Gco,_P,Oco,Vco,Xco,e_,Xre,zco,Qco,uP,Wco,Hco,Uco,o_,zre,Jco,Yco,bP,Kco,Zco,efo,r_,Qre,ofo,rfo,FP,tfo,afo,nfo,t_,Wre,sfo,lfo,vP,ifo,dfo,cfo,a_,Hre,ffo,mfo,TP,gfo,hfo,pfo,n_,Ure,_fo,ufo,MP,bfo,Ffo,vfo,s_,Jre,Tfo,Mfo,EP,Efo,Cfo,wfo,l_,Yre,Afo,yfo,CP,Lfo,xfo,kfo,i_,Kre,Sfo,Rfo,wP,Bfo,Pfo,$fo,d_,Zre,qfo,Ifo,AP,jfo,Nfo,Dfo,c_,ete,Gfo,Ofo,yP,Vfo,Xfo,zfo,f_,ote,Qfo,Wfo,LP,Hfo,Ufo,Jfo,m_,rte,Yfo,Kfo,xP,Zfo,emo,omo,g_,tte,rmo,tmo,kP,amo,nmo,smo,h_,ate,lmo,imo,SP,dmo,cmo,fmo,p_,nte,mmo,gmo,RP,hmo,pmo,_mo,__,ste,umo,bmo,BP,Fmo,vmo,Tmo,u_,lte,Mmo,Emo,PP,Cmo,wmo,Amo,b_,ite,ymo,Lmo,$P,xmo,kmo,Smo,F_,dte,Rmo,Bmo,qP,Pmo,$mo,qmo,v_,cte,Imo,jmo,IP,Nmo,Dmo,Gmo,T_,fte,Omo,Vmo,jP,Xmo,zmo,Qmo,M_,mte,Wmo,Hmo,NP,Umo,Jmo,Ymo,E_,gte,Kmo,Zmo,DP,ego,ogo,rgo,C_,hte,tgo,ago,GP,ngo,sgo,lgo,w_,pte,igo,dgo,OP,cgo,fgo,mgo,A_,_te,ggo,hgo,VP,pgo,_go,ugo,y_,ute,bgo,Fgo,XP,vgo,Tgo,Mgo,L_,bte,Ego,Cgo,zP,wgo,Ago,ygo,x_,Fte,Lgo,xgo,QP,kgo,Sgo,Rgo,k_,vte,Bgo,Pgo,WP,$go,qgo,Igo,S_,Tte,jgo,Ngo,HP,Dgo,Ggo,Ogo,R_,Mte,Vgo,Xgo,UP,zgo,Qgo,Wgo,B_,Ete,Hgo,Ugo,JP,Jgo,Ygo,Kgo,P_,Cte,Zgo,eho,YP,oho,rho,tho,$_,wte,aho,nho,KP,sho,lho,iho,q_,Ate,dho,cho,ZP,fho,mho,gho,I_,yte,hho,pho,e$,_ho,uho,bho,j_,Lte,Fho,vho,o$,Tho,Mho,Eho,N_,Cho,xte,who,Aho,kte,yho,Lho,Ste,xho,kho,hC,jRe,sd,D_,Rte,pC,Sho,Bte,Rho,NRe,Ko,_C,Bho,ld,Pho,r$,$ho,qho,t$,Iho,jho,Nho,uC,Dho,Pte,Gho,Oho,Vho,Wr,bC,Xho,$te,zho,Qho,id,Who,qte,Hho,Uho,a$,Jho,Yho,Kho,Ite,Zho,epo,FC,opo,je,vC,rpo,jte,tpo,apo,Ua,npo,Nte,spo,lpo,Dte,ipo,dpo,Gte,cpo,fpo,mpo,S,G_,Ote,gpo,hpo,n$,ppo,_po,upo,O_,Vte,bpo,Fpo,s$,vpo,Tpo,Mpo,V_,Xte,Epo,Cpo,l$,wpo,Apo,ypo,X_,zte,Lpo,xpo,i$,kpo,Spo,Rpo,z_,Qte,Bpo,Ppo,d$,$po,qpo,Ipo,Q_,Wte,jpo,Npo,c$,Dpo,Gpo,Opo,W_,Hte,Vpo,Xpo,f$,zpo,Qpo,Wpo,H_,Ute,Hpo,Upo,m$,Jpo,Ypo,Kpo,U_,Jte,Zpo,e_o,g$,o_o,r_o,t_o,J_,Yte,a_o,n_o,h$,s_o,l_o,i_o,Y_,Kte,d_o,c_o,p$,f_o,m_o,g_o,K_,Zte,h_o,p_o,_$,__o,u_o,b_o,Z_,eae,F_o,v_o,u$,T_o,M_o,E_o,eu,oae,C_o,w_o,b$,A_o,y_o,L_o,ou,rae,x_o,k_o,F$,S_o,R_o,B_o,ru,tae,P_o,$_o,v$,q_o,I_o,j_o,tu,aae,N_o,D_o,T$,G_o,O_o,V_o,au,nae,X_o,z_o,M$,Q_o,W_o,H_o,nu,sae,U_o,J_o,E$,Y_o,K_o,Z_o,su,lae,euo,ouo,C$,ruo,tuo,auo,lu,iae,nuo,suo,w$,luo,iuo,duo,iu,dae,cuo,fuo,A$,muo,guo,huo,du,cae,puo,_uo,y$,uuo,buo,Fuo,cu,fae,vuo,Tuo,L$,Muo,Euo,Cuo,fu,mae,wuo,Auo,x$,yuo,Luo,xuo,mu,gae,kuo,Suo,k$,Ruo,Buo,Puo,gu,hae,$uo,quo,S$,Iuo,juo,Nuo,hu,pae,Duo,Guo,R$,Ouo,Vuo,Xuo,pu,_ae,zuo,Quo,B$,Wuo,Huo,Uuo,_u,uae,Juo,Yuo,P$,Kuo,Zuo,e1o,uu,bae,o1o,r1o,$$,t1o,a1o,n1o,bu,Fae,s1o,l1o,q$,i1o,d1o,c1o,Fu,vae,f1o,m1o,I$,g1o,h1o,p1o,vu,Tae,_1o,u1o,j$,b1o,F1o,v1o,Tu,Mae,T1o,M1o,N$,E1o,C1o,w1o,Mu,Eae,A1o,y1o,D$,L1o,x1o,k1o,Eu,Cae,S1o,R1o,G$,B1o,P1o,$1o,Cu,wae,q1o,I1o,O$,j1o,N1o,D1o,wu,Aae,G1o,O1o,V$,V1o,X1o,z1o,Au,Q1o,yae,W1o,H1o,Lae,U1o,J1o,xae,Y1o,K1o,TC,DRe,dd,yu,kae,MC,Z1o,Sae,ebo,GRe,Zo,EC,obo,cd,rbo,X$,tbo,abo,z$,nbo,sbo,lbo,CC,ibo,Rae,dbo,cbo,fbo,Hr,wC,mbo,Bae,gbo,hbo,fd,pbo,Pae,_bo,ubo,Q$,bbo,Fbo,vbo,$ae,Tbo,Mbo,AC,Ebo,Ne,yC,Cbo,qae,wbo,Abo,Ja,ybo,Iae,Lbo,xbo,jae,kbo,Sbo,Nae,Rbo,Bbo,Pbo,$,Lu,Dae,$bo,qbo,W$,Ibo,jbo,Nbo,xu,Gae,Dbo,Gbo,H$,Obo,Vbo,Xbo,ku,Oae,zbo,Qbo,U$,Wbo,Hbo,Ubo,Su,Vae,Jbo,Ybo,J$,Kbo,Zbo,e5o,Ru,Xae,o5o,r5o,Y$,t5o,a5o,n5o,Bu,zae,s5o,l5o,K$,i5o,d5o,c5o,Pu,Qae,f5o,m5o,Z$,g5o,h5o,p5o,$u,Wae,_5o,u5o,eq,b5o,F5o,v5o,qu,Hae,T5o,M5o,oq,E5o,C5o,w5o,Iu,Uae,A5o,y5o,rq,L5o,x5o,k5o,ju,Jae,S5o,R5o,tq,B5o,P5o,$5o,Nu,Yae,q5o,I5o,aq,j5o,N5o,D5o,Du,Kae,G5o,O5o,nq,V5o,X5o,z5o,Gu,Zae,Q5o,W5o,sq,H5o,U5o,J5o,Ou,ene,Y5o,K5o,lq,Z5o,e2o,o2o,Vu,one,r2o,t2o,iq,a2o,n2o,s2o,Xu,rne,l2o,i2o,dq,d2o,c2o,f2o,zu,tne,m2o,g2o,cq,h2o,p2o,_2o,Qu,ane,u2o,b2o,fq,F2o,v2o,T2o,Wu,nne,M2o,E2o,mq,C2o,w2o,A2o,Hu,sne,y2o,L2o,gq,x2o,k2o,S2o,Uu,lne,R2o,B2o,hq,P2o,$2o,q2o,Ju,ine,I2o,j2o,pq,N2o,D2o,G2o,Yu,dne,O2o,V2o,_q,X2o,z2o,Q2o,Ku,cne,W2o,H2o,uq,U2o,J2o,Y2o,Zu,fne,K2o,Z2o,bq,eFo,oFo,rFo,e1,mne,tFo,aFo,Fq,nFo,sFo,lFo,o1,gne,iFo,dFo,vq,cFo,fFo,mFo,r1,hne,gFo,hFo,Tq,pFo,_Fo,uFo,t1,pne,bFo,FFo,Mq,vFo,TFo,MFo,a1,_ne,EFo,CFo,Eq,wFo,AFo,yFo,n1,une,LFo,xFo,Cq,kFo,SFo,RFo,s1,bne,BFo,PFo,wq,$Fo,qFo,IFo,l1,Fne,jFo,NFo,Aq,DFo,GFo,OFo,i1,vne,VFo,XFo,yq,zFo,QFo,WFo,d1,HFo,Tne,UFo,JFo,Mne,YFo,KFo,Ene,ZFo,evo,LC,ORe,md,c1,Cne,xC,ovo,wne,rvo,VRe,er,kC,tvo,gd,avo,Lq,nvo,svo,xq,lvo,ivo,dvo,SC,cvo,Ane,fvo,mvo,gvo,Ur,RC,hvo,yne,pvo,_vo,hd,uvo,Lne,bvo,Fvo,kq,vvo,Tvo,Mvo,xne,Evo,Cvo,BC,wvo,De,PC,Avo,kne,yvo,Lvo,Ya,xvo,Sne,kvo,Svo,Rne,Rvo,Bvo,Bne,Pvo,$vo,qvo,q,f1,Pne,Ivo,jvo,Sq,Nvo,Dvo,Gvo,m1,$ne,Ovo,Vvo,Rq,Xvo,zvo,Qvo,g1,qne,Wvo,Hvo,Bq,Uvo,Jvo,Yvo,h1,Ine,Kvo,Zvo,Pq,e6o,o6o,r6o,p1,jne,t6o,a6o,$q,n6o,s6o,l6o,_1,Nne,i6o,d6o,qq,c6o,f6o,m6o,u1,Dne,g6o,h6o,Iq,p6o,_6o,u6o,b1,Gne,b6o,F6o,jq,v6o,T6o,M6o,F1,One,E6o,C6o,Nq,w6o,A6o,y6o,v1,Vne,L6o,x6o,Dq,k6o,S6o,R6o,T1,Xne,B6o,P6o,Gq,$6o,q6o,I6o,M1,zne,j6o,N6o,Oq,D6o,G6o,O6o,E1,Qne,V6o,X6o,Vq,z6o,Q6o,W6o,C1,Wne,H6o,U6o,Xq,J6o,Y6o,K6o,w1,Hne,Z6o,e0o,zq,o0o,r0o,t0o,A1,Une,a0o,n0o,Qq,s0o,l0o,i0o,y1,Jne,d0o,c0o,Wq,f0o,m0o,g0o,L1,Yne,h0o,p0o,Hq,_0o,u0o,b0o,x1,Kne,F0o,v0o,Uq,T0o,M0o,E0o,k1,Zne,C0o,w0o,Jq,A0o,y0o,L0o,S1,ese,x0o,k0o,Yq,S0o,R0o,B0o,R1,ose,P0o,$0o,Kq,q0o,I0o,j0o,B1,rse,N0o,D0o,Zq,G0o,O0o,V0o,P1,tse,X0o,z0o,eI,Q0o,W0o,H0o,$1,ase,U0o,J0o,oI,Y0o,K0o,Z0o,q1,nse,eTo,oTo,rI,rTo,tTo,aTo,I1,sse,nTo,sTo,tI,lTo,iTo,dTo,j1,lse,cTo,fTo,aI,mTo,gTo,hTo,N1,ise,pTo,_To,nI,uTo,bTo,FTo,D1,dse,vTo,TTo,sI,MTo,ETo,CTo,G1,cse,wTo,ATo,fse,yTo,LTo,xTo,O1,mse,kTo,STo,lI,RTo,BTo,PTo,V1,gse,$To,qTo,iI,ITo,jTo,NTo,X1,hse,DTo,GTo,dI,OTo,VTo,XTo,z1,pse,zTo,QTo,cI,WTo,HTo,UTo,Q1,JTo,_se,YTo,KTo,use,ZTo,e8o,bse,o8o,r8o,$C,XRe,pd,W1,Fse,qC,t8o,vse,a8o,zRe,or,IC,n8o,_d,s8o,fI,l8o,i8o,mI,d8o,c8o,f8o,jC,m8o,Tse,g8o,h8o,p8o,Jr,NC,_8o,Mse,u8o,b8o,ud,F8o,Ese,v8o,T8o,gI,M8o,E8o,C8o,Cse,w8o,A8o,DC,y8o,Ge,GC,L8o,wse,x8o,k8o,Ka,S8o,Ase,R8o,B8o,yse,P8o,$8o,Lse,q8o,I8o,j8o,se,H1,xse,N8o,D8o,hI,G8o,O8o,V8o,U1,kse,X8o,z8o,pI,Q8o,W8o,H8o,J1,Sse,U8o,J8o,_I,Y8o,K8o,Z8o,Y1,Rse,eMo,oMo,uI,rMo,tMo,aMo,K1,Bse,nMo,sMo,bI,lMo,iMo,dMo,Z1,Pse,cMo,fMo,FI,mMo,gMo,hMo,eb,$se,pMo,_Mo,vI,uMo,bMo,FMo,ob,qse,vMo,TMo,TI,MMo,EMo,CMo,rb,Ise,wMo,AMo,MI,yMo,LMo,xMo,tb,jse,kMo,SMo,EI,RMo,BMo,PMo,ab,Nse,$Mo,qMo,CI,IMo,jMo,NMo,nb,Dse,DMo,GMo,wI,OMo,VMo,XMo,sb,Gse,zMo,QMo,AI,WMo,HMo,UMo,lb,Ose,JMo,YMo,yI,KMo,ZMo,e4o,ib,Vse,o4o,r4o,LI,t4o,a4o,n4o,db,Xse,s4o,l4o,xI,i4o,d4o,c4o,cb,f4o,zse,m4o,g4o,Qse,h4o,p4o,Wse,_4o,u4o,OC,QRe,bd,fb,Hse,VC,b4o,Use,F4o,WRe,rr,XC,v4o,Fd,T4o,kI,M4o,E4o,SI,C4o,w4o,A4o,zC,y4o,Jse,L4o,x4o,k4o,Yr,QC,S4o,Yse,R4o,B4o,vd,P4o,Kse,$4o,q4o,RI,I4o,j4o,N4o,Zse,D4o,G4o,WC,O4o,Oe,HC,V4o,ele,X4o,z4o,Za,Q4o,ole,W4o,H4o,rle,U4o,J4o,tle,Y4o,K4o,Z4o,y,mb,ale,eEo,oEo,BI,rEo,tEo,aEo,gb,nle,nEo,sEo,PI,lEo,iEo,dEo,hb,sle,cEo,fEo,$I,mEo,gEo,hEo,pb,lle,pEo,_Eo,qI,uEo,bEo,FEo,_b,ile,vEo,TEo,II,MEo,EEo,CEo,ub,dle,wEo,AEo,jI,yEo,LEo,xEo,bb,cle,kEo,SEo,NI,REo,BEo,PEo,Fb,fle,$Eo,qEo,DI,IEo,jEo,NEo,vb,mle,DEo,GEo,GI,OEo,VEo,XEo,Tb,gle,zEo,QEo,OI,WEo,HEo,UEo,Mb,hle,JEo,YEo,VI,KEo,ZEo,eCo,Eb,ple,oCo,rCo,XI,tCo,aCo,nCo,Cb,_le,sCo,lCo,zI,iCo,dCo,cCo,wb,ule,fCo,mCo,QI,gCo,hCo,pCo,Ab,ble,_Co,uCo,WI,bCo,FCo,vCo,yb,Fle,TCo,MCo,HI,ECo,CCo,wCo,Lb,vle,ACo,yCo,UI,LCo,xCo,kCo,xb,Tle,SCo,RCo,JI,BCo,PCo,$Co,kb,Mle,qCo,ICo,YI,jCo,NCo,DCo,Sb,Ele,GCo,OCo,KI,VCo,XCo,zCo,Rb,Cle,QCo,WCo,ZI,HCo,UCo,JCo,Bb,wle,YCo,KCo,ej,ZCo,e3o,o3o,Pb,Ale,r3o,t3o,oj,a3o,n3o,s3o,$b,yle,l3o,i3o,rj,d3o,c3o,f3o,qb,Lle,m3o,g3o,tj,h3o,p3o,_3o,Ib,xle,u3o,b3o,aj,F3o,v3o,T3o,jb,kle,M3o,E3o,nj,C3o,w3o,A3o,Nb,Sle,y3o,L3o,sj,x3o,k3o,S3o,Db,Rle,R3o,B3o,lj,P3o,$3o,q3o,Gb,Ble,I3o,j3o,ij,N3o,D3o,G3o,Ob,Ple,O3o,V3o,dj,X3o,z3o,Q3o,Vb,$le,W3o,H3o,cj,U3o,J3o,Y3o,Xb,qle,K3o,Z3o,fj,ewo,owo,rwo,zb,Ile,two,awo,mj,nwo,swo,lwo,Qb,jle,iwo,dwo,gj,cwo,fwo,mwo,Wb,Nle,gwo,hwo,hj,pwo,_wo,uwo,Hb,Dle,bwo,Fwo,pj,vwo,Two,Mwo,Ub,Gle,Ewo,Cwo,_j,wwo,Awo,ywo,Jb,Ole,Lwo,xwo,uj,kwo,Swo,Rwo,Yb,Vle,Bwo,Pwo,bj,$wo,qwo,Iwo,Kb,Xle,jwo,Nwo,Fj,Dwo,Gwo,Owo,Zb,zle,Vwo,Xwo,vj,zwo,Qwo,Wwo,e5,Qle,Hwo,Uwo,Tj,Jwo,Ywo,Kwo,o5,Wle,Zwo,eAo,Mj,oAo,rAo,tAo,r5,Hle,aAo,nAo,Ej,sAo,lAo,iAo,t5,Ule,dAo,cAo,Cj,fAo,mAo,gAo,a5,hAo,Jle,pAo,_Ao,Yle,uAo,bAo,Kle,FAo,vAo,UC,HRe,Td,n5,Zle,JC,TAo,eie,MAo,URe,tr,YC,EAo,Md,CAo,wj,wAo,AAo,Aj,yAo,LAo,xAo,KC,kAo,oie,SAo,RAo,BAo,Kr,ZC,PAo,rie,$Ao,qAo,Ed,IAo,tie,jAo,NAo,yj,DAo,GAo,OAo,aie,VAo,XAo,e3,zAo,Ve,o3,QAo,nie,WAo,HAo,en,UAo,sie,JAo,YAo,lie,KAo,ZAo,iie,eyo,oyo,ryo,G,s5,die,tyo,ayo,Lj,nyo,syo,lyo,l5,cie,iyo,dyo,xj,cyo,fyo,myo,i5,fie,gyo,hyo,kj,pyo,_yo,uyo,d5,mie,byo,Fyo,Sj,vyo,Tyo,Myo,c5,gie,Eyo,Cyo,Rj,wyo,Ayo,yyo,f5,hie,Lyo,xyo,Bj,kyo,Syo,Ryo,m5,pie,Byo,Pyo,Pj,$yo,qyo,Iyo,g5,_ie,jyo,Nyo,$j,Dyo,Gyo,Oyo,h5,uie,Vyo,Xyo,qj,zyo,Qyo,Wyo,p5,bie,Hyo,Uyo,Ij,Jyo,Yyo,Kyo,_5,Fie,Zyo,eLo,jj,oLo,rLo,tLo,u5,vie,aLo,nLo,Nj,sLo,lLo,iLo,b5,Tie,dLo,cLo,Dj,fLo,mLo,gLo,F5,Mie,hLo,pLo,Gj,_Lo,uLo,bLo,v5,Eie,FLo,vLo,Oj,TLo,MLo,ELo,T5,Cie,CLo,wLo,Vj,ALo,yLo,LLo,M5,wie,xLo,kLo,Xj,SLo,RLo,BLo,E5,Aie,PLo,$Lo,zj,qLo,ILo,jLo,C5,yie,NLo,DLo,Qj,GLo,OLo,VLo,w5,Lie,XLo,zLo,Wj,QLo,WLo,HLo,A5,xie,ULo,JLo,Hj,YLo,KLo,ZLo,y5,kie,e7o,o7o,Uj,r7o,t7o,a7o,L5,Sie,n7o,s7o,Jj,l7o,i7o,d7o,x5,Rie,c7o,f7o,Yj,m7o,g7o,h7o,k5,Bie,p7o,_7o,Kj,u7o,b7o,F7o,S5,Pie,v7o,T7o,Zj,M7o,E7o,C7o,R5,$ie,w7o,A7o,eN,y7o,L7o,x7o,B5,qie,k7o,S7o,oN,R7o,B7o,P7o,P5,$7o,Iie,q7o,I7o,jie,j7o,N7o,Nie,D7o,G7o,r3,JRe,Cd,$5,Die,t3,O7o,Gie,V7o,YRe,ar,a3,X7o,wd,z7o,rN,Q7o,W7o,tN,H7o,U7o,J7o,n3,Y7o,Oie,K7o,Z7o,e9o,Zr,s3,o9o,Vie,r9o,t9o,Ad,a9o,Xie,n9o,s9o,aN,l9o,i9o,d9o,zie,c9o,f9o,l3,m9o,Xe,i3,g9o,Qie,h9o,p9o,on,_9o,Wie,u9o,b9o,Hie,F9o,v9o,Uie,T9o,M9o,E9o,ma,q5,Jie,C9o,w9o,nN,A9o,y9o,L9o,I5,Yie,x9o,k9o,sN,S9o,R9o,B9o,j5,Kie,P9o,$9o,lN,q9o,I9o,j9o,N5,Zie,N9o,D9o,iN,G9o,O9o,V9o,D5,ede,X9o,z9o,dN,Q9o,W9o,H9o,G5,U9o,ode,J9o,Y9o,rde,K9o,Z9o,tde,exo,oxo,d3,KRe,yd,O5,ade,c3,rxo,nde,txo,ZRe,nr,f3,axo,Ld,nxo,cN,sxo,lxo,fN,ixo,dxo,cxo,m3,fxo,sde,mxo,gxo,hxo,et,g3,pxo,lde,_xo,uxo,xd,bxo,ide,Fxo,vxo,mN,Txo,Mxo,Exo,dde,Cxo,wxo,h3,Axo,ze,p3,yxo,cde,Lxo,xxo,rn,kxo,fde,Sxo,Rxo,mde,Bxo,Pxo,gde,$xo,qxo,Ixo,N,V5,hde,jxo,Nxo,gN,Dxo,Gxo,Oxo,X5,pde,Vxo,Xxo,hN,zxo,Qxo,Wxo,z5,_de,Hxo,Uxo,pN,Jxo,Yxo,Kxo,Q5,ude,Zxo,eko,_N,oko,rko,tko,W5,bde,ako,nko,uN,sko,lko,iko,H5,Fde,dko,cko,bN,fko,mko,gko,U5,vde,hko,pko,FN,_ko,uko,bko,J5,Tde,Fko,vko,vN,Tko,Mko,Eko,Y5,Mde,Cko,wko,TN,Ako,yko,Lko,K5,Ede,xko,kko,MN,Sko,Rko,Bko,Z5,Cde,Pko,$ko,EN,qko,Iko,jko,e2,wde,Nko,Dko,CN,Gko,Oko,Vko,o2,Ade,Xko,zko,wN,Qko,Wko,Hko,r2,yde,Uko,Jko,AN,Yko,Kko,Zko,t2,Lde,eSo,oSo,yN,rSo,tSo,aSo,a2,xde,nSo,sSo,LN,lSo,iSo,dSo,n2,kde,cSo,fSo,xN,mSo,gSo,hSo,s2,Sde,pSo,_So,kN,uSo,bSo,FSo,l2,Rde,vSo,TSo,SN,MSo,ESo,CSo,i2,Bde,wSo,ASo,RN,ySo,LSo,xSo,d2,Pde,kSo,SSo,BN,RSo,BSo,PSo,c2,$de,$So,qSo,PN,ISo,jSo,NSo,f2,qde,DSo,GSo,$N,OSo,VSo,XSo,m2,Ide,zSo,QSo,qN,WSo,HSo,USo,g2,jde,JSo,YSo,IN,KSo,ZSo,eRo,h2,Nde,oRo,rRo,jN,tRo,aRo,nRo,p2,Dde,sRo,lRo,NN,iRo,dRo,cRo,_2,Gde,fRo,mRo,DN,gRo,hRo,pRo,u2,Ode,_Ro,uRo,GN,bRo,FRo,vRo,b2,Vde,TRo,MRo,ON,ERo,CRo,wRo,F2,Xde,ARo,yRo,VN,LRo,xRo,kRo,v2,zde,SRo,RRo,XN,BRo,PRo,$Ro,T2,Qde,qRo,IRo,zN,jRo,NRo,DRo,M2,GRo,Wde,ORo,VRo,Hde,XRo,zRo,Ude,QRo,WRo,_3,eBe,kd,E2,Jde,u3,HRo,Yde,URo,oBe,sr,b3,JRo,Sd,YRo,QN,KRo,ZRo,WN,eBo,oBo,rBo,F3,tBo,Kde,aBo,nBo,sBo,ot,v3,lBo,Zde,iBo,dBo,Rd,cBo,ece,fBo,mBo,HN,gBo,hBo,pBo,oce,_Bo,uBo,T3,bBo,Qe,M3,FBo,rce,vBo,TBo,tn,MBo,tce,EBo,CBo,ace,wBo,ABo,nce,yBo,LBo,xBo,R,C2,sce,kBo,SBo,UN,RBo,BBo,PBo,w2,lce,$Bo,qBo,JN,IBo,jBo,NBo,A2,ice,DBo,GBo,YN,OBo,VBo,XBo,y2,dce,zBo,QBo,KN,WBo,HBo,UBo,L2,cce,JBo,YBo,ZN,KBo,ZBo,ePo,x2,fce,oPo,rPo,eD,tPo,aPo,nPo,k2,mce,sPo,lPo,oD,iPo,dPo,cPo,S2,gce,fPo,mPo,rD,gPo,hPo,pPo,R2,hce,_Po,uPo,tD,bPo,FPo,vPo,B2,pce,TPo,MPo,aD,EPo,CPo,wPo,P2,_ce,APo,yPo,nD,LPo,xPo,kPo,$2,uce,SPo,RPo,sD,BPo,PPo,$Po,q2,bce,qPo,IPo,lD,jPo,NPo,DPo,I2,Fce,GPo,OPo,iD,VPo,XPo,zPo,j2,vce,QPo,WPo,dD,HPo,UPo,JPo,N2,Tce,YPo,KPo,cD,ZPo,e$o,o$o,D2,Mce,r$o,t$o,fD,a$o,n$o,s$o,G2,Ece,l$o,i$o,mD,d$o,c$o,f$o,O2,Cce,m$o,g$o,gD,h$o,p$o,_$o,V2,wce,u$o,b$o,hD,F$o,v$o,T$o,X2,Ace,M$o,E$o,pD,C$o,w$o,A$o,z2,yce,y$o,L$o,_D,x$o,k$o,S$o,Q2,Lce,R$o,B$o,uD,P$o,$$o,q$o,W2,xce,I$o,j$o,bD,N$o,D$o,G$o,H2,kce,O$o,V$o,FD,X$o,z$o,Q$o,U2,Sce,W$o,H$o,vD,U$o,J$o,Y$o,J2,Rce,K$o,Z$o,TD,eqo,oqo,rqo,Y2,Bce,tqo,aqo,MD,nqo,sqo,lqo,K2,Pce,iqo,dqo,ED,cqo,fqo,mqo,Z2,$ce,gqo,hqo,CD,pqo,_qo,uqo,eF,qce,bqo,Fqo,wD,vqo,Tqo,Mqo,oF,Ice,Eqo,Cqo,AD,wqo,Aqo,yqo,rF,jce,Lqo,xqo,yD,kqo,Sqo,Rqo,tF,Nce,Bqo,Pqo,LD,$qo,qqo,Iqo,aF,Dce,jqo,Nqo,xD,Dqo,Gqo,Oqo,nF,Gce,Vqo,Xqo,kD,zqo,Qqo,Wqo,sF,Oce,Hqo,Uqo,SD,Jqo,Yqo,Kqo,lF,Vce,Zqo,eIo,RD,oIo,rIo,tIo,iF,Xce,aIo,nIo,BD,sIo,lIo,iIo,dF,dIo,zce,cIo,fIo,Qce,mIo,gIo,Wce,hIo,pIo,E3,rBe,Bd,cF,Hce,C3,_Io,Uce,uIo,tBe,lr,w3,bIo,Pd,FIo,PD,vIo,TIo,$D,MIo,EIo,CIo,A3,wIo,Jce,AIo,yIo,LIo,rt,y3,xIo,Yce,kIo,SIo,$d,RIo,Kce,BIo,PIo,qD,$Io,qIo,IIo,Zce,jIo,NIo,L3,DIo,We,x3,GIo,efe,OIo,VIo,an,XIo,ofe,zIo,QIo,rfe,WIo,HIo,tfe,UIo,JIo,YIo,afe,fF,nfe,KIo,ZIo,ID,ejo,ojo,rjo,mF,tjo,sfe,ajo,njo,lfe,sjo,ljo,ife,ijo,djo,k3,aBe,qd,gF,dfe,S3,cjo,cfe,fjo,nBe,ir,R3,mjo,Id,gjo,jD,hjo,pjo,ND,_jo,ujo,bjo,B3,Fjo,ffe,vjo,Tjo,Mjo,tt,P3,Ejo,mfe,Cjo,wjo,jd,Ajo,gfe,yjo,Ljo,DD,xjo,kjo,Sjo,hfe,Rjo,Bjo,$3,Pjo,He,q3,$jo,pfe,qjo,Ijo,nn,jjo,_fe,Njo,Djo,ufe,Gjo,Ojo,bfe,Vjo,Xjo,zjo,ge,hF,Ffe,Qjo,Wjo,GD,Hjo,Ujo,Jjo,pF,vfe,Yjo,Kjo,OD,Zjo,eNo,oNo,zs,Tfe,rNo,tNo,VD,aNo,nNo,XD,sNo,lNo,iNo,_F,Mfe,dNo,cNo,zD,fNo,mNo,gNo,pa,Efe,hNo,pNo,QD,_No,uNo,WD,bNo,FNo,HD,vNo,TNo,MNo,uF,Cfe,ENo,CNo,UD,wNo,ANo,yNo,bF,wfe,LNo,xNo,JD,kNo,SNo,RNo,FF,Afe,BNo,PNo,YD,$No,qNo,INo,vF,yfe,jNo,NNo,KD,DNo,GNo,ONo,TF,Lfe,VNo,XNo,ZD,zNo,QNo,WNo,MF,xfe,HNo,UNo,eG,JNo,YNo,KNo,EF,ZNo,kfe,eDo,oDo,Sfe,rDo,tDo,Rfe,aDo,nDo,I3,sBe,Nd,CF,Bfe,j3,sDo,Pfe,lDo,lBe,dr,N3,iDo,Dd,dDo,oG,cDo,fDo,rG,mDo,gDo,hDo,D3,pDo,$fe,_Do,uDo,bDo,at,G3,FDo,qfe,vDo,TDo,Gd,MDo,Ife,EDo,CDo,tG,wDo,ADo,yDo,jfe,LDo,xDo,O3,kDo,Ue,V3,SDo,Nfe,RDo,BDo,sn,PDo,Dfe,$Do,qDo,Gfe,IDo,jDo,Ofe,NDo,DDo,GDo,Vfe,wF,Xfe,ODo,VDo,aG,XDo,zDo,QDo,AF,WDo,zfe,HDo,UDo,Qfe,JDo,YDo,Wfe,KDo,ZDo,X3,iBe,Od,yF,Hfe,z3,eGo,Ufe,oGo,dBe,cr,Q3,rGo,Vd,tGo,nG,aGo,nGo,sG,sGo,lGo,iGo,W3,dGo,Jfe,cGo,fGo,mGo,nt,H3,gGo,Yfe,hGo,pGo,Xd,_Go,Kfe,uGo,bGo,lG,FGo,vGo,TGo,Zfe,MGo,EGo,U3,CGo,Je,J3,wGo,eme,AGo,yGo,ln,LGo,ome,xGo,kGo,rme,SGo,RGo,tme,BGo,PGo,$Go,Se,LF,ame,qGo,IGo,iG,jGo,NGo,DGo,xF,nme,GGo,OGo,dG,VGo,XGo,zGo,kF,sme,QGo,WGo,cG,HGo,UGo,JGo,SF,lme,YGo,KGo,fG,ZGo,eOo,oOo,RF,ime,rOo,tOo,mG,aOo,nOo,sOo,BF,dme,lOo,iOo,gG,dOo,cOo,fOo,PF,cme,mOo,gOo,hG,hOo,pOo,_Oo,$F,fme,uOo,bOo,pG,FOo,vOo,TOo,qF,MOo,mme,EOo,COo,gme,wOo,AOo,hme,yOo,LOo,Y3,cBe,zd,IF,pme,K3,xOo,_me,kOo,fBe,fr,Z3,SOo,Qd,ROo,_G,BOo,POo,uG,$Oo,qOo,IOo,ew,jOo,ume,NOo,DOo,GOo,st,ow,OOo,bme,VOo,XOo,Wd,zOo,Fme,QOo,WOo,bG,HOo,UOo,JOo,vme,YOo,KOo,rw,ZOo,Ye,tw,eVo,Tme,oVo,rVo,dn,tVo,Mme,aVo,nVo,Eme,sVo,lVo,Cme,iVo,dVo,cVo,cn,jF,wme,fVo,mVo,FG,gVo,hVo,pVo,NF,Ame,_Vo,uVo,vG,bVo,FVo,vVo,DF,yme,TVo,MVo,TG,EVo,CVo,wVo,GF,Lme,AVo,yVo,MG,LVo,xVo,kVo,OF,SVo,xme,RVo,BVo,kme,PVo,$Vo,Sme,qVo,IVo,aw,mBe,Hd,VF,Rme,nw,jVo,Bme,NVo,gBe,mr,sw,DVo,Ud,GVo,EG,OVo,VVo,CG,XVo,zVo,QVo,lw,WVo,Pme,HVo,UVo,JVo,lt,iw,YVo,$me,KVo,ZVo,Jd,eXo,qme,oXo,rXo,wG,tXo,aXo,nXo,Ime,sXo,lXo,dw,iXo,Ke,cw,dXo,jme,cXo,fXo,fn,mXo,Nme,gXo,hXo,Dme,pXo,_Xo,Gme,uXo,bXo,FXo,Re,XF,Ome,vXo,TXo,AG,MXo,EXo,CXo,zF,Vme,wXo,AXo,yG,yXo,LXo,xXo,QF,Xme,kXo,SXo,LG,RXo,BXo,PXo,WF,zme,$Xo,qXo,xG,IXo,jXo,NXo,HF,Qme,DXo,GXo,kG,OXo,VXo,XXo,UF,Wme,zXo,QXo,SG,WXo,HXo,UXo,JF,Hme,JXo,YXo,RG,KXo,ZXo,ezo,YF,Ume,ozo,rzo,BG,tzo,azo,nzo,KF,szo,Jme,lzo,izo,Yme,dzo,czo,Kme,fzo,mzo,fw,hBe,Yd,ZF,Zme,mw,gzo,ege,hzo,pBe,gr,gw,pzo,Kd,_zo,PG,uzo,bzo,$G,Fzo,vzo,Tzo,hw,Mzo,oge,Ezo,Czo,wzo,it,pw,Azo,rge,yzo,Lzo,Zd,xzo,tge,kzo,Szo,qG,Rzo,Bzo,Pzo,age,$zo,qzo,_w,Izo,Ze,uw,jzo,nge,Nzo,Dzo,mn,Gzo,sge,Ozo,Vzo,lge,Xzo,zzo,ige,Qzo,Wzo,Hzo,bw,ev,dge,Uzo,Jzo,IG,Yzo,Kzo,Zzo,ov,cge,eQo,oQo,jG,rQo,tQo,aQo,rv,nQo,fge,sQo,lQo,mge,iQo,dQo,gge,cQo,fQo,Fw,_Be,ec,tv,hge,vw,mQo,pge,gQo,uBe,hr,Tw,hQo,oc,pQo,NG,_Qo,uQo,DG,bQo,FQo,vQo,Mw,TQo,_ge,MQo,EQo,CQo,dt,Ew,wQo,uge,AQo,yQo,rc,LQo,bge,xQo,kQo,GG,SQo,RQo,BQo,Fge,PQo,$Qo,Cw,qQo,eo,ww,IQo,vge,jQo,NQo,gn,DQo,Tge,GQo,OQo,Mge,VQo,XQo,Ege,zQo,QQo,WQo,hn,av,Cge,HQo,UQo,OG,JQo,YQo,KQo,nv,wge,ZQo,eWo,VG,oWo,rWo,tWo,sv,Age,aWo,nWo,XG,sWo,lWo,iWo,lv,yge,dWo,cWo,zG,fWo,mWo,gWo,iv,hWo,Lge,pWo,_Wo,xge,uWo,bWo,kge,FWo,vWo,Aw,bBe,tc,dv,Sge,yw,TWo,Rge,MWo,FBe,pr,Lw,EWo,ac,CWo,QG,wWo,AWo,WG,yWo,LWo,xWo,xw,kWo,Bge,SWo,RWo,BWo,ct,kw,PWo,Pge,$Wo,qWo,nc,IWo,$ge,jWo,NWo,HG,DWo,GWo,OWo,qge,VWo,XWo,Sw,zWo,oo,Rw,QWo,Ige,WWo,HWo,pn,UWo,jge,JWo,YWo,Nge,KWo,ZWo,Dge,eHo,oHo,rHo,sc,cv,Gge,tHo,aHo,UG,nHo,sHo,lHo,fv,Oge,iHo,dHo,JG,cHo,fHo,mHo,mv,Vge,gHo,hHo,YG,pHo,_Ho,uHo,gv,bHo,Xge,FHo,vHo,zge,THo,MHo,Qge,EHo,CHo,Bw,vBe,lc,hv,Wge,Pw,wHo,Hge,AHo,TBe,_r,$w,yHo,ic,LHo,KG,xHo,kHo,ZG,SHo,RHo,BHo,qw,PHo,Uge,$Ho,qHo,IHo,ft,Iw,jHo,Jge,NHo,DHo,dc,GHo,Yge,OHo,VHo,eO,XHo,zHo,QHo,Kge,WHo,HHo,jw,UHo,ro,Nw,JHo,Zge,YHo,KHo,_n,ZHo,ehe,eUo,oUo,ohe,rUo,tUo,rhe,aUo,nUo,sUo,the,pv,ahe,lUo,iUo,oO,dUo,cUo,fUo,_v,mUo,nhe,gUo,hUo,she,pUo,_Uo,lhe,uUo,bUo,Dw,MBe,cc,uv,ihe,Gw,FUo,dhe,vUo,EBe,ur,Ow,TUo,fc,MUo,rO,EUo,CUo,tO,wUo,AUo,yUo,Vw,LUo,che,xUo,kUo,SUo,mt,Xw,RUo,fhe,BUo,PUo,mc,$Uo,mhe,qUo,IUo,aO,jUo,NUo,DUo,ghe,GUo,OUo,zw,VUo,to,Qw,XUo,hhe,zUo,QUo,un,WUo,phe,HUo,UUo,_he,JUo,YUo,uhe,KUo,ZUo,eJo,bhe,bv,Fhe,oJo,rJo,nO,tJo,aJo,nJo,Fv,sJo,vhe,lJo,iJo,The,dJo,cJo,Mhe,fJo,mJo,Ww,CBe,gc,vv,Ehe,Hw,gJo,Che,hJo,wBe,br,Uw,pJo,hc,_Jo,sO,uJo,bJo,lO,FJo,vJo,TJo,Jw,MJo,whe,EJo,CJo,wJo,gt,Yw,AJo,Ahe,yJo,LJo,pc,xJo,yhe,kJo,SJo,iO,RJo,BJo,PJo,Lhe,$Jo,qJo,Kw,IJo,ao,Zw,jJo,xhe,NJo,DJo,bn,GJo,khe,OJo,VJo,She,XJo,zJo,Rhe,QJo,WJo,HJo,_c,Tv,Bhe,UJo,JJo,dO,YJo,KJo,ZJo,Mv,Phe,eYo,oYo,cO,rYo,tYo,aYo,Ev,$he,nYo,sYo,fO,lYo,iYo,dYo,Cv,cYo,qhe,fYo,mYo,Ihe,gYo,hYo,jhe,pYo,_Yo,eA,ABe,uc,wv,Nhe,oA,uYo,Dhe,bYo,yBe,Fr,rA,FYo,bc,vYo,mO,TYo,MYo,gO,EYo,CYo,wYo,tA,AYo,Ghe,yYo,LYo,xYo,ht,aA,kYo,Ohe,SYo,RYo,Fc,BYo,Vhe,PYo,$Yo,hO,qYo,IYo,jYo,Xhe,NYo,DYo,nA,GYo,no,sA,OYo,zhe,VYo,XYo,Fn,zYo,Qhe,QYo,WYo,Whe,HYo,UYo,Hhe,JYo,YYo,KYo,Uhe,Av,Jhe,ZYo,eKo,pO,oKo,rKo,tKo,yv,aKo,Yhe,nKo,sKo,Khe,lKo,iKo,Zhe,dKo,cKo,lA,LBe,vc,Lv,epe,iA,fKo,ope,mKo,xBe,vr,dA,gKo,Tc,hKo,_O,pKo,_Ko,uO,uKo,bKo,FKo,cA,vKo,rpe,TKo,MKo,EKo,pt,fA,CKo,tpe,wKo,AKo,Mc,yKo,ape,LKo,xKo,bO,kKo,SKo,RKo,npe,BKo,PKo,mA,$Ko,ho,gA,qKo,spe,IKo,jKo,vn,NKo,lpe,DKo,GKo,ipe,OKo,VKo,dpe,XKo,zKo,QKo,x,xv,cpe,WKo,HKo,FO,UKo,JKo,YKo,kv,fpe,KKo,ZKo,vO,eZo,oZo,rZo,Sv,mpe,tZo,aZo,TO,nZo,sZo,lZo,Rv,gpe,iZo,dZo,MO,cZo,fZo,mZo,Bv,hpe,gZo,hZo,EO,pZo,_Zo,uZo,Pv,ppe,bZo,FZo,CO,vZo,TZo,MZo,$v,_pe,EZo,CZo,wO,wZo,AZo,yZo,qv,upe,LZo,xZo,AO,kZo,SZo,RZo,Iv,bpe,BZo,PZo,yO,$Zo,qZo,IZo,jv,Fpe,jZo,NZo,LO,DZo,GZo,OZo,Nv,vpe,VZo,XZo,xO,zZo,QZo,WZo,Dv,Tpe,HZo,UZo,kO,JZo,YZo,KZo,Gv,Mpe,ZZo,eer,SO,oer,rer,ter,Ov,Epe,aer,ner,RO,ser,ler,ier,Vv,Cpe,der,cer,BO,fer,mer,ger,Xv,wpe,her,per,PO,_er,uer,ber,Qs,Ape,Fer,ver,$O,Ter,Mer,qO,Eer,Cer,wer,zv,ype,Aer,yer,IO,Ler,xer,ker,Qv,Lpe,Ser,Rer,jO,Ber,Per,$er,Wv,xpe,qer,Ier,NO,jer,Ner,Der,Hv,kpe,Ger,Oer,DO,Ver,Xer,zer,Uv,Spe,Qer,Wer,GO,Her,Uer,Jer,Jv,Rpe,Yer,Ker,OO,Zer,eor,oor,Yv,Bpe,ror,tor,VO,aor,nor,sor,Kv,Ppe,lor,ior,XO,dor,cor,mor,Zv,$pe,gor,hor,zO,por,_or,uor,e6,qpe,bor,For,QO,vor,Tor,Mor,o6,Ipe,Eor,Cor,WO,wor,Aor,yor,r6,jpe,Lor,xor,HO,kor,Sor,Ror,t6,Npe,Bor,Por,UO,$or,qor,Ior,a6,Dpe,jor,Nor,JO,Dor,Gor,Oor,n6,Gpe,Vor,Xor,YO,zor,Qor,Wor,s6,Ope,Hor,Uor,KO,Jor,Yor,Kor,l6,Vpe,Zor,err,ZO,orr,rrr,trr,i6,Xpe,arr,nrr,eV,srr,lrr,irr,d6,zpe,drr,crr,oV,frr,mrr,grr,c6,Qpe,hrr,prr,rV,_rr,urr,brr,f6,Wpe,Frr,vrr,tV,Trr,Mrr,Err,m6,Hpe,Crr,wrr,aV,Arr,yrr,Lrr,g6,Upe,xrr,krr,nV,Srr,Rrr,Brr,h6,Jpe,Prr,$rr,sV,qrr,Irr,jrr,p6,Ype,Nrr,Drr,lV,Grr,Orr,Vrr,_6,Kpe,Xrr,zrr,iV,Qrr,Wrr,Hrr,u6,Zpe,Urr,Jrr,dV,Yrr,Krr,Zrr,e_e,etr,otr,hA,kBe,Ec,b6,o_e,pA,rtr,r_e,ttr,SBe,Tr,_A,atr,Cc,ntr,cV,str,ltr,fV,itr,dtr,ctr,uA,ftr,t_e,mtr,gtr,htr,_t,bA,ptr,a_e,_tr,utr,wc,btr,n_e,Ftr,vtr,mV,Ttr,Mtr,Etr,s_e,Ctr,wtr,FA,Atr,po,vA,ytr,l_e,Ltr,xtr,Tn,ktr,i_e,Str,Rtr,d_e,Btr,Ptr,c_e,$tr,qtr,Itr,H,F6,f_e,jtr,Ntr,gV,Dtr,Gtr,Otr,v6,m_e,Vtr,Xtr,hV,ztr,Qtr,Wtr,T6,g_e,Htr,Utr,pV,Jtr,Ytr,Ktr,M6,h_e,Ztr,ear,_V,oar,rar,tar,E6,p_e,aar,nar,uV,sar,lar,iar,C6,__e,dar,car,bV,far,mar,gar,w6,u_e,har,par,FV,_ar,uar,bar,A6,b_e,Far,Tar,vV,Mar,Ear,Car,y6,F_e,war,Aar,TV,yar,Lar,xar,L6,v_e,kar,Sar,MV,Rar,Bar,Par,x6,T_e,$ar,qar,EV,Iar,jar,Nar,k6,M_e,Dar,Gar,CV,Oar,Var,Xar,S6,E_e,zar,Qar,wV,War,Har,Uar,R6,C_e,Jar,Yar,AV,Kar,Zar,enr,B6,w_e,onr,rnr,yV,tnr,anr,nnr,P6,A_e,snr,lnr,LV,inr,dnr,cnr,$6,y_e,fnr,mnr,xV,gnr,hnr,pnr,q6,L_e,_nr,unr,kV,bnr,Fnr,vnr,I6,x_e,Tnr,Mnr,SV,Enr,Cnr,wnr,j6,k_e,Anr,ynr,RV,Lnr,xnr,knr,N6,S_e,Snr,Rnr,BV,Bnr,Pnr,$nr,D6,R_e,qnr,Inr,PV,jnr,Nnr,Dnr,G6,B_e,Gnr,Onr,$V,Vnr,Xnr,znr,P_e,Qnr,Wnr,TA,RBe,Ac,O6,$_e,MA,Hnr,q_e,Unr,BBe,Mr,EA,Jnr,yc,Ynr,qV,Knr,Znr,IV,esr,osr,rsr,CA,tsr,I_e,asr,nsr,ssr,ut,wA,lsr,j_e,isr,dsr,Lc,csr,N_e,fsr,msr,jV,gsr,hsr,psr,D_e,_sr,usr,AA,bsr,_o,yA,Fsr,G_e,vsr,Tsr,Mn,Msr,O_e,Esr,Csr,V_e,wsr,Asr,X_e,ysr,Lsr,xsr,ce,V6,z_e,ksr,Ssr,NV,Rsr,Bsr,Psr,X6,Q_e,$sr,qsr,DV,Isr,jsr,Nsr,z6,W_e,Dsr,Gsr,GV,Osr,Vsr,Xsr,Q6,H_e,zsr,Qsr,OV,Wsr,Hsr,Usr,W6,U_e,Jsr,Ysr,VV,Ksr,Zsr,elr,H6,J_e,olr,rlr,XV,tlr,alr,nlr,U6,Y_e,slr,llr,zV,ilr,dlr,clr,J6,K_e,flr,mlr,QV,glr,hlr,plr,Y6,Z_e,_lr,ulr,WV,blr,Flr,vlr,K6,eue,Tlr,Mlr,HV,Elr,Clr,wlr,Z6,oue,Alr,ylr,UV,Llr,xlr,klr,e0,rue,Slr,Rlr,JV,Blr,Plr,$lr,tue,qlr,Ilr,LA,PBe,xc,o0,aue,xA,jlr,nue,Nlr,$Be,Er,kA,Dlr,kc,Glr,YV,Olr,Vlr,KV,Xlr,zlr,Qlr,SA,Wlr,sue,Hlr,Ulr,Jlr,bt,RA,Ylr,lue,Klr,Zlr,Sc,eir,iue,oir,rir,ZV,tir,air,nir,due,sir,lir,BA,iir,uo,PA,dir,cue,cir,fir,En,mir,fue,gir,hir,mue,pir,_ir,gue,uir,bir,Fir,$A,r0,hue,vir,Tir,eX,Mir,Eir,Cir,t0,pue,wir,Air,oX,yir,Lir,xir,_ue,kir,Sir,qA,qBe,Rc,a0,uue,IA,Rir,bue,Bir,IBe,Cr,jA,Pir,Bc,$ir,rX,qir,Iir,tX,jir,Nir,Dir,NA,Gir,Fue,Oir,Vir,Xir,Ft,DA,zir,vue,Qir,Wir,Pc,Hir,Tue,Uir,Jir,aX,Yir,Kir,Zir,Mue,edr,odr,GA,rdr,bo,OA,tdr,Eue,adr,ndr,Cn,sdr,Cue,ldr,idr,wue,ddr,cdr,Aue,fdr,mdr,gdr,J,n0,yue,hdr,pdr,nX,_dr,udr,bdr,s0,Lue,Fdr,vdr,sX,Tdr,Mdr,Edr,l0,xue,Cdr,wdr,lX,Adr,ydr,Ldr,i0,kue,xdr,kdr,iX,Sdr,Rdr,Bdr,d0,Sue,Pdr,$dr,dX,qdr,Idr,jdr,c0,Rue,Ndr,Ddr,cX,Gdr,Odr,Vdr,f0,Bue,Xdr,zdr,fX,Qdr,Wdr,Hdr,m0,Pue,Udr,Jdr,mX,Ydr,Kdr,Zdr,g0,$ue,ecr,ocr,gX,rcr,tcr,acr,h0,que,ncr,scr,hX,lcr,icr,dcr,p0,Iue,ccr,fcr,pX,mcr,gcr,hcr,_0,jue,pcr,_cr,_X,ucr,bcr,Fcr,u0,Nue,vcr,Tcr,uX,Mcr,Ecr,Ccr,b0,Due,wcr,Acr,bX,ycr,Lcr,xcr,F0,Gue,kcr,Scr,FX,Rcr,Bcr,Pcr,v0,Oue,$cr,qcr,vX,Icr,jcr,Ncr,T0,Vue,Dcr,Gcr,TX,Ocr,Vcr,Xcr,M0,Xue,zcr,Qcr,MX,Wcr,Hcr,Ucr,E0,zue,Jcr,Ycr,EX,Kcr,Zcr,efr,C0,Que,ofr,rfr,CX,tfr,afr,nfr,Wue,sfr,lfr,VA,jBe,$c,w0,Hue,XA,ifr,Uue,dfr,NBe,wr,zA,cfr,qc,ffr,wX,mfr,gfr,AX,hfr,pfr,_fr,QA,ufr,Jue,bfr,Ffr,vfr,vt,WA,Tfr,Yue,Mfr,Efr,Ic,Cfr,Kue,wfr,Afr,yX,yfr,Lfr,xfr,Zue,kfr,Sfr,HA,Rfr,Fo,UA,Bfr,e1e,Pfr,$fr,wn,qfr,o1e,Ifr,jfr,r1e,Nfr,Dfr,t1e,Gfr,Ofr,Vfr,ue,A0,a1e,Xfr,zfr,LX,Qfr,Wfr,Hfr,y0,n1e,Ufr,Jfr,xX,Yfr,Kfr,Zfr,L0,s1e,emr,omr,kX,rmr,tmr,amr,x0,l1e,nmr,smr,SX,lmr,imr,dmr,k0,i1e,cmr,fmr,RX,mmr,gmr,hmr,S0,d1e,pmr,_mr,BX,umr,bmr,Fmr,R0,c1e,vmr,Tmr,PX,Mmr,Emr,Cmr,B0,f1e,wmr,Amr,$X,ymr,Lmr,xmr,P0,m1e,kmr,Smr,qX,Rmr,Bmr,Pmr,$0,g1e,$mr,qmr,IX,Imr,jmr,Nmr,h1e,Dmr,Gmr,JA,DBe,jc,q0,p1e,YA,Omr,_1e,Vmr,GBe,Ar,KA,Xmr,Nc,zmr,jX,Qmr,Wmr,NX,Hmr,Umr,Jmr,ZA,Ymr,u1e,Kmr,Zmr,egr,Tt,ey,ogr,b1e,rgr,tgr,Dc,agr,F1e,ngr,sgr,DX,lgr,igr,dgr,v1e,cgr,fgr,oy,mgr,vo,ry,ggr,T1e,hgr,pgr,An,_gr,M1e,ugr,bgr,E1e,Fgr,vgr,C1e,Tgr,Mgr,Egr,V,I0,w1e,Cgr,wgr,GX,Agr,ygr,Lgr,j0,A1e,xgr,kgr,OX,Sgr,Rgr,Bgr,N0,y1e,Pgr,$gr,VX,qgr,Igr,jgr,D0,L1e,Ngr,Dgr,XX,Ggr,Ogr,Vgr,G0,x1e,Xgr,zgr,zX,Qgr,Wgr,Hgr,O0,k1e,Ugr,Jgr,QX,Ygr,Kgr,Zgr,V0,S1e,ehr,ohr,WX,rhr,thr,ahr,X0,R1e,nhr,shr,HX,lhr,ihr,dhr,z0,B1e,chr,fhr,UX,mhr,ghr,hhr,Q0,P1e,phr,_hr,JX,uhr,bhr,Fhr,W0,$1e,vhr,Thr,YX,Mhr,Ehr,Chr,H0,q1e,whr,Ahr,KX,yhr,Lhr,xhr,U0,I1e,khr,Shr,ZX,Rhr,Bhr,Phr,J0,j1e,$hr,qhr,ez,Ihr,jhr,Nhr,Y0,N1e,Dhr,Ghr,oz,Ohr,Vhr,Xhr,K0,D1e,zhr,Qhr,rz,Whr,Hhr,Uhr,Z0,G1e,Jhr,Yhr,tz,Khr,Zhr,epr,eT,O1e,opr,rpr,az,tpr,apr,npr,oT,V1e,spr,lpr,nz,ipr,dpr,cpr,rT,X1e,fpr,mpr,sz,gpr,hpr,ppr,tT,z1e,_pr,upr,lz,bpr,Fpr,vpr,aT,Q1e,Tpr,Mpr,iz,Epr,Cpr,wpr,nT,W1e,Apr,ypr,dz,Lpr,xpr,kpr,sT,H1e,Spr,Rpr,cz,Bpr,Ppr,$pr,lT,U1e,qpr,Ipr,fz,jpr,Npr,Dpr,iT,J1e,Gpr,Opr,mz,Vpr,Xpr,zpr,Y1e,Qpr,Wpr,ty,OBe,Gc,dT,K1e,ay,Hpr,Z1e,Upr,VBe,yr,ny,Jpr,Oc,Ypr,gz,Kpr,Zpr,hz,e_r,o_r,r_r,sy,t_r,ebe,a_r,n_r,s_r,Mt,ly,l_r,obe,i_r,d_r,Vc,c_r,rbe,f_r,m_r,pz,g_r,h_r,p_r,tbe,__r,u_r,iy,b_r,To,dy,F_r,abe,v_r,T_r,yn,M_r,nbe,E_r,C_r,sbe,w_r,A_r,lbe,y_r,L_r,x_r,ae,cT,ibe,k_r,S_r,_z,R_r,B_r,P_r,fT,dbe,$_r,q_r,uz,I_r,j_r,N_r,mT,cbe,D_r,G_r,bz,O_r,V_r,X_r,gT,fbe,z_r,Q_r,Fz,W_r,H_r,U_r,hT,mbe,J_r,Y_r,vz,K_r,Z_r,eur,pT,gbe,our,rur,Tz,tur,aur,nur,_T,hbe,sur,lur,Mz,iur,dur,cur,uT,pbe,fur,mur,Ez,gur,hur,pur,bT,_be,_ur,uur,Cz,bur,Fur,vur,FT,ube,Tur,Mur,wz,Eur,Cur,wur,vT,bbe,Aur,yur,Az,Lur,xur,kur,TT,Fbe,Sur,Rur,yz,Bur,Pur,$ur,MT,vbe,qur,Iur,Lz,jur,Nur,Dur,ET,Tbe,Gur,Our,xz,Vur,Xur,zur,CT,Mbe,Qur,Wur,kz,Hur,Uur,Jur,wT,Ebe,Yur,Kur,Sz,Zur,e1r,o1r,AT,Cbe,r1r,t1r,Rz,a1r,n1r,s1r,wbe,l1r,i1r,cy,XBe,Xc,yT,Abe,fy,d1r,ybe,c1r,zBe,Lr,my,f1r,zc,m1r,Bz,g1r,h1r,Pz,p1r,_1r,u1r,gy,b1r,Lbe,F1r,v1r,T1r,Et,hy,M1r,xbe,E1r,C1r,Qc,w1r,kbe,A1r,y1r,$z,L1r,x1r,k1r,Sbe,S1r,R1r,py,B1r,Mo,_y,P1r,Rbe,$1r,q1r,Ln,I1r,Bbe,j1r,N1r,Pbe,D1r,G1r,$be,O1r,V1r,X1r,qbe,LT,Ibe,z1r,Q1r,qz,W1r,H1r,U1r,jbe,J1r,Y1r,uy,QBe,Wc,xT,Nbe,by,K1r,Dbe,Z1r,WBe,xr,Fy,ebr,Hc,obr,Iz,rbr,tbr,jz,abr,nbr,sbr,vy,lbr,Gbe,ibr,dbr,cbr,Ct,Ty,fbr,Obe,mbr,gbr,Uc,hbr,Vbe,pbr,_br,Nz,ubr,bbr,Fbr,Xbe,vbr,Tbr,My,Mbr,Eo,Ey,Ebr,zbe,Cbr,wbr,xn,Abr,Qbe,ybr,Lbr,Wbe,xbr,kbr,Hbe,Sbr,Rbr,Bbr,Y,kT,Ube,Pbr,$br,Dz,qbr,Ibr,jbr,ST,Jbe,Nbr,Dbr,Gz,Gbr,Obr,Vbr,RT,Ybe,Xbr,zbr,Oz,Qbr,Wbr,Hbr,BT,Kbe,Ubr,Jbr,Vz,Ybr,Kbr,Zbr,PT,Zbe,e5r,o5r,Xz,r5r,t5r,a5r,$T,e5e,n5r,s5r,zz,l5r,i5r,d5r,qT,o5e,c5r,f5r,Qz,m5r,g5r,h5r,IT,r5e,p5r,_5r,Wz,u5r,b5r,F5r,jT,t5e,v5r,T5r,Hz,M5r,E5r,C5r,NT,a5e,w5r,A5r,Uz,y5r,L5r,x5r,DT,n5e,k5r,S5r,Jz,R5r,B5r,P5r,GT,s5e,$5r,q5r,Yz,I5r,j5r,N5r,OT,l5e,D5r,G5r,Kz,O5r,V5r,X5r,VT,i5e,z5r,Q5r,Zz,W5r,H5r,U5r,XT,d5e,J5r,Y5r,eQ,K5r,Z5r,e2r,zT,c5e,o2r,r2r,oQ,t2r,a2r,n2r,QT,f5e,s2r,l2r,rQ,i2r,d2r,c2r,WT,m5e,f2r,m2r,tQ,g2r,h2r,p2r,HT,g5e,_2r,u2r,aQ,b2r,F2r,v2r,UT,h5e,T2r,M2r,nQ,E2r,C2r,w2r,p5e,A2r,y2r,Cy,HBe,Jc,JT,_5e,wy,L2r,u5e,x2r,UBe,kr,Ay,k2r,Yc,S2r,sQ,R2r,B2r,lQ,P2r,$2r,q2r,yy,I2r,b5e,j2r,N2r,D2r,wt,Ly,G2r,F5e,O2r,V2r,Kc,X2r,v5e,z2r,Q2r,iQ,W2r,H2r,U2r,T5e,J2r,Y2r,xy,K2r,Co,ky,Z2r,M5e,eFr,oFr,kn,rFr,E5e,tFr,aFr,C5e,nFr,sFr,w5e,lFr,iFr,dFr,K,YT,A5e,cFr,fFr,dQ,mFr,gFr,hFr,KT,y5e,pFr,_Fr,cQ,uFr,bFr,FFr,ZT,L5e,vFr,TFr,fQ,MFr,EFr,CFr,e8,x5e,wFr,AFr,mQ,yFr,LFr,xFr,o8,k5e,kFr,SFr,gQ,RFr,BFr,PFr,r8,S5e,$Fr,qFr,hQ,IFr,jFr,NFr,t8,R5e,DFr,GFr,pQ,OFr,VFr,XFr,a8,B5e,zFr,QFr,_Q,WFr,HFr,UFr,n8,P5e,JFr,YFr,uQ,KFr,ZFr,evr,s8,$5e,ovr,rvr,bQ,tvr,avr,nvr,l8,q5e,svr,lvr,FQ,ivr,dvr,cvr,i8,I5e,fvr,mvr,vQ,gvr,hvr,pvr,d8,j5e,_vr,uvr,TQ,bvr,Fvr,vvr,c8,N5e,Tvr,Mvr,MQ,Evr,Cvr,wvr,f8,D5e,Avr,yvr,EQ,Lvr,xvr,kvr,m8,G5e,Svr,Rvr,CQ,Bvr,Pvr,$vr,g8,O5e,qvr,Ivr,wQ,jvr,Nvr,Dvr,h8,V5e,Gvr,Ovr,AQ,Vvr,Xvr,zvr,p8,X5e,Qvr,Wvr,yQ,Hvr,Uvr,Jvr,_8,z5e,Yvr,Kvr,LQ,Zvr,e6r,o6r,Q5e,r6r,t6r,Sy,JBe,Zc,u8,W5e,Ry,a6r,H5e,n6r,YBe,Sr,By,s6r,ef,l6r,xQ,i6r,d6r,kQ,c6r,f6r,m6r,Py,g6r,U5e,h6r,p6r,_6r,At,$y,u6r,J5e,b6r,F6r,of,v6r,Y5e,T6r,M6r,SQ,E6r,C6r,w6r,K5e,A6r,y6r,qy,L6r,wo,Iy,x6r,Z5e,k6r,S6r,Sn,R6r,e2e,B6r,P6r,o2e,$6r,q6r,r2e,I6r,j6r,N6r,t2e,b8,a2e,D6r,G6r,RQ,O6r,V6r,X6r,n2e,z6r,Q6r,jy,KBe,rf,F8,s2e,Ny,W6r,l2e,H6r,ZBe,Rr,Dy,U6r,tf,J6r,BQ,Y6r,K6r,PQ,Z6r,e0r,o0r,Gy,r0r,i2e,t0r,a0r,n0r,yt,Oy,s0r,d2e,l0r,i0r,af,d0r,c2e,c0r,f0r,$Q,m0r,g0r,h0r,f2e,p0r,_0r,Vy,u0r,Ao,Xy,b0r,m2e,F0r,v0r,Rn,T0r,g2e,M0r,E0r,h2e,C0r,w0r,p2e,A0r,y0r,L0r,_2e,v8,u2e,x0r,k0r,qQ,S0r,R0r,B0r,b2e,P0r,$0r,zy,ePe,nf,T8,F2e,Qy,q0r,v2e,I0r,oPe,Br,Wy,j0r,sf,N0r,IQ,D0r,G0r,jQ,O0r,V0r,X0r,Hy,z0r,T2e,Q0r,W0r,H0r,Lt,Uy,U0r,M2e,J0r,Y0r,lf,K0r,E2e,Z0r,eTr,NQ,oTr,rTr,tTr,C2e,aTr,nTr,Jy,sTr,yo,Yy,lTr,w2e,iTr,dTr,Bn,cTr,A2e,fTr,mTr,y2e,gTr,hTr,L2e,pTr,_Tr,uTr,z,M8,x2e,bTr,FTr,DQ,vTr,TTr,MTr,E8,k2e,ETr,CTr,GQ,wTr,ATr,yTr,C8,S2e,LTr,xTr,OQ,kTr,STr,RTr,w8,R2e,BTr,PTr,VQ,$Tr,qTr,ITr,A8,B2e,jTr,NTr,XQ,DTr,GTr,OTr,y8,P2e,VTr,XTr,zQ,zTr,QTr,WTr,L8,$2e,HTr,UTr,QQ,JTr,YTr,KTr,x8,q2e,ZTr,e8r,WQ,o8r,r8r,t8r,k8,I2e,a8r,n8r,HQ,s8r,l8r,i8r,S8,j2e,d8r,c8r,UQ,f8r,m8r,g8r,R8,N2e,h8r,p8r,JQ,_8r,u8r,b8r,B8,D2e,F8r,v8r,YQ,T8r,M8r,E8r,P8,G2e,C8r,w8r,KQ,A8r,y8r,L8r,$8,O2e,x8r,k8r,ZQ,S8r,R8r,B8r,q8,V2e,P8r,$8r,eW,q8r,I8r,j8r,I8,X2e,N8r,D8r,oW,G8r,O8r,V8r,j8,z2e,X8r,z8r,rW,Q8r,W8r,H8r,N8,Q2e,U8r,J8r,tW,Y8r,K8r,Z8r,D8,W2e,eMr,oMr,aW,rMr,tMr,aMr,G8,H2e,nMr,sMr,nW,lMr,iMr,dMr,O8,U2e,cMr,fMr,sW,mMr,gMr,hMr,V8,J2e,pMr,_Mr,lW,uMr,bMr,FMr,X8,Y2e,vMr,TMr,iW,MMr,EMr,CMr,z8,K2e,wMr,AMr,dW,yMr,LMr,xMr,Q8,Z2e,kMr,SMr,cW,RMr,BMr,PMr,eFe,$Mr,qMr,Ky,rPe,df,W8,oFe,Zy,IMr,rFe,jMr,tPe,Pr,eL,NMr,cf,DMr,fW,GMr,OMr,mW,VMr,XMr,zMr,oL,QMr,tFe,WMr,HMr,UMr,xt,rL,JMr,aFe,YMr,KMr,ff,ZMr,nFe,e4r,o4r,gW,r4r,t4r,a4r,sFe,n4r,s4r,tL,l4r,Lo,aL,i4r,lFe,d4r,c4r,Pn,f4r,iFe,m4r,g4r,dFe,h4r,p4r,cFe,_4r,u4r,b4r,ga,H8,fFe,F4r,v4r,hW,T4r,M4r,E4r,U8,mFe,C4r,w4r,pW,A4r,y4r,L4r,J8,gFe,x4r,k4r,_W,S4r,R4r,B4r,Y8,hFe,P4r,$4r,uW,q4r,I4r,j4r,K8,pFe,N4r,D4r,bW,G4r,O4r,V4r,_Fe,X4r,z4r,nL,aPe,mf,Z8,uFe,sL,Q4r,bFe,W4r,nPe,$r,lL,H4r,gf,U4r,FW,J4r,Y4r,vW,K4r,Z4r,eEr,iL,oEr,FFe,rEr,tEr,aEr,kt,dL,nEr,vFe,sEr,lEr,hf,iEr,TFe,dEr,cEr,TW,fEr,mEr,gEr,MFe,hEr,pEr,cL,_Er,xo,fL,uEr,EFe,bEr,FEr,$n,vEr,CFe,TEr,MEr,wFe,EEr,CEr,AFe,wEr,AEr,yEr,fe,eM,yFe,LEr,xEr,MW,kEr,SEr,REr,oM,LFe,BEr,PEr,EW,$Er,qEr,IEr,rM,xFe,jEr,NEr,CW,DEr,GEr,OEr,tM,kFe,VEr,XEr,wW,zEr,QEr,WEr,aM,SFe,HEr,UEr,AW,JEr,YEr,KEr,nM,RFe,ZEr,eCr,yW,oCr,rCr,tCr,sM,BFe,aCr,nCr,LW,sCr,lCr,iCr,lM,PFe,dCr,cCr,xW,fCr,mCr,gCr,iM,$Fe,hCr,pCr,kW,_Cr,uCr,bCr,dM,qFe,FCr,vCr,SW,TCr,MCr,ECr,cM,IFe,CCr,wCr,RW,ACr,yCr,LCr,fM,jFe,xCr,kCr,BW,SCr,RCr,BCr,NFe,PCr,$Cr,mL,sPe,pf,mM,DFe,gL,qCr,GFe,ICr,lPe,qr,hL,jCr,_f,NCr,PW,DCr,GCr,$W,OCr,VCr,XCr,pL,zCr,OFe,QCr,WCr,HCr,St,_L,UCr,VFe,JCr,YCr,uf,KCr,XFe,ZCr,e3r,qW,o3r,r3r,t3r,zFe,a3r,n3r,uL,s3r,ko,bL,l3r,QFe,i3r,d3r,qn,c3r,WFe,f3r,m3r,HFe,g3r,h3r,UFe,p3r,_3r,u3r,be,gM,JFe,b3r,F3r,IW,v3r,T3r,M3r,hM,YFe,E3r,C3r,jW,w3r,A3r,y3r,pM,KFe,L3r,x3r,NW,k3r,S3r,R3r,_M,ZFe,B3r,P3r,DW,$3r,q3r,I3r,uM,eve,j3r,N3r,GW,D3r,G3r,O3r,bM,ove,V3r,X3r,OW,z3r,Q3r,W3r,FM,rve,H3r,U3r,VW,J3r,Y3r,K3r,vM,tve,Z3r,ewr,XW,owr,rwr,twr,TM,ave,awr,nwr,zW,swr,lwr,iwr,MM,nve,dwr,cwr,QW,fwr,mwr,gwr,sve,hwr,pwr,FL,iPe,bf,EM,lve,vL,_wr,ive,uwr,dPe,Ir,TL,bwr,Ff,Fwr,WW,vwr,Twr,HW,Mwr,Ewr,Cwr,ML,wwr,dve,Awr,ywr,Lwr,Rt,EL,xwr,cve,kwr,Swr,vf,Rwr,fve,Bwr,Pwr,UW,$wr,qwr,Iwr,mve,jwr,Nwr,CL,Dwr,So,wL,Gwr,gve,Owr,Vwr,In,Xwr,hve,zwr,Qwr,pve,Wwr,Hwr,_ve,Uwr,Jwr,Ywr,Ee,CM,uve,Kwr,Zwr,JW,eAr,oAr,rAr,wM,bve,tAr,aAr,YW,nAr,sAr,lAr,AM,Fve,iAr,dAr,KW,cAr,fAr,mAr,yM,vve,gAr,hAr,ZW,pAr,_Ar,uAr,LM,Tve,bAr,FAr,eH,vAr,TAr,MAr,xM,Mve,EAr,CAr,oH,wAr,AAr,yAr,kM,Eve,LAr,xAr,rH,kAr,SAr,RAr,SM,Cve,BAr,PAr,tH,$Ar,qAr,IAr,RM,wve,jAr,NAr,aH,DAr,GAr,OAr,Ave,VAr,XAr,AL,cPe,Tf,BM,yve,yL,zAr,Lve,QAr,fPe,jr,LL,WAr,Mf,HAr,nH,UAr,JAr,sH,YAr,KAr,ZAr,xL,eyr,xve,oyr,ryr,tyr,Bt,kL,ayr,kve,nyr,syr,Ef,lyr,Sve,iyr,dyr,lH,cyr,fyr,myr,Rve,gyr,hyr,SL,pyr,Ro,RL,_yr,Bve,uyr,byr,jn,Fyr,Pve,vyr,Tyr,$ve,Myr,Eyr,qve,Cyr,wyr,Ayr,Fe,PM,Ive,yyr,Lyr,iH,xyr,kyr,Syr,$M,jve,Ryr,Byr,dH,Pyr,$yr,qyr,qM,Nve,Iyr,jyr,cH,Nyr,Dyr,Gyr,IM,Dve,Oyr,Vyr,fH,Xyr,zyr,Qyr,jM,Gve,Wyr,Hyr,mH,Uyr,Jyr,Yyr,NM,Ove,Kyr,Zyr,gH,eLr,oLr,rLr,DM,Vve,tLr,aLr,hH,nLr,sLr,lLr,GM,Xve,iLr,dLr,pH,cLr,fLr,mLr,OM,zve,gLr,hLr,_H,pLr,_Lr,uLr,VM,Qve,bLr,FLr,uH,vLr,TLr,MLr,Wve,ELr,CLr,BL,mPe,Cf,XM,Hve,PL,wLr,Uve,ALr,gPe,Nr,$L,yLr,wf,LLr,bH,xLr,kLr,FH,SLr,RLr,BLr,qL,PLr,Jve,$Lr,qLr,ILr,Pt,IL,jLr,Yve,NLr,DLr,Af,GLr,Kve,OLr,VLr,vH,XLr,zLr,QLr,Zve,WLr,HLr,jL,ULr,Bo,NL,JLr,e6e,YLr,KLr,Nn,ZLr,o6e,e7r,o7r,r6e,r7r,t7r,t6e,a7r,n7r,s7r,a6e,zM,n6e,l7r,i7r,TH,d7r,c7r,f7r,s6e,m7r,g7r,DL,hPe,yf,QM,l6e,GL,h7r,i6e,p7r,pPe,Dr,OL,_7r,Lf,u7r,MH,b7r,F7r,EH,v7r,T7r,M7r,VL,E7r,d6e,C7r,w7r,A7r,$t,XL,y7r,c6e,L7r,x7r,xf,k7r,f6e,S7r,R7r,CH,B7r,P7r,$7r,m6e,q7r,I7r,zL,j7r,Po,QL,N7r,g6e,D7r,G7r,Dn,O7r,h6e,V7r,X7r,p6e,z7r,Q7r,_6e,W7r,H7r,U7r,ve,WM,u6e,J7r,Y7r,wH,K7r,Z7r,e9r,HM,b6e,o9r,r9r,AH,t9r,a9r,n9r,UM,F6e,s9r,l9r,yH,i9r,d9r,c9r,JM,v6e,f9r,m9r,LH,g9r,h9r,p9r,YM,T6e,_9r,u9r,xH,b9r,F9r,v9r,KM,M6e,T9r,M9r,kH,E9r,C9r,w9r,ZM,E6e,A9r,y9r,SH,L9r,x9r,k9r,e4,C6e,S9r,R9r,RH,B9r,P9r,$9r,o4,w6e,q9r,I9r,BH,j9r,N9r,D9r,r4,A6e,G9r,O9r,PH,V9r,X9r,z9r,y6e,Q9r,W9r,WL,_Pe,kf,t4,L6e,HL,H9r,x6e,U9r,uPe,Gr,UL,J9r,Sf,Y9r,$H,K9r,Z9r,qH,exr,oxr,rxr,JL,txr,k6e,axr,nxr,sxr,qt,YL,lxr,S6e,ixr,dxr,Rf,cxr,R6e,fxr,mxr,IH,gxr,hxr,pxr,B6e,_xr,uxr,KL,bxr,$o,ZL,Fxr,P6e,vxr,Txr,Gn,Mxr,$6e,Exr,Cxr,q6e,wxr,Axr,I6e,yxr,Lxr,xxr,Be,a4,j6e,kxr,Sxr,jH,Rxr,Bxr,Pxr,n4,N6e,$xr,qxr,NH,Ixr,jxr,Nxr,s4,D6e,Dxr,Gxr,DH,Oxr,Vxr,Xxr,l4,G6e,zxr,Qxr,GH,Wxr,Hxr,Uxr,i4,O6e,Jxr,Yxr,OH,Kxr,Zxr,ekr,d4,V6e,okr,rkr,VH,tkr,akr,nkr,c4,X6e,skr,lkr,XH,ikr,dkr,ckr,f4,z6e,fkr,mkr,zH,gkr,hkr,pkr,Q6e,_kr,ukr,e7,bPe,Bf,m4,W6e,o7,bkr,H6e,Fkr,FPe,Or,r7,vkr,Pf,Tkr,QH,Mkr,Ekr,WH,Ckr,wkr,Akr,t7,ykr,U6e,Lkr,xkr,kkr,It,a7,Skr,J6e,Rkr,Bkr,$f,Pkr,Y6e,$kr,qkr,HH,Ikr,jkr,Nkr,K6e,Dkr,Gkr,n7,Okr,qo,s7,Vkr,Z6e,Xkr,zkr,On,Qkr,e0e,Wkr,Hkr,o0e,Ukr,Jkr,r0e,Ykr,Kkr,Zkr,Pe,g4,t0e,eSr,oSr,UH,rSr,tSr,aSr,h4,a0e,nSr,sSr,JH,lSr,iSr,dSr,p4,n0e,cSr,fSr,YH,mSr,gSr,hSr,_4,s0e,pSr,_Sr,KH,uSr,bSr,FSr,u4,l0e,vSr,TSr,ZH,MSr,ESr,CSr,b4,i0e,wSr,ASr,eU,ySr,LSr,xSr,F4,d0e,kSr,SSr,oU,RSr,BSr,PSr,v4,c0e,$Sr,qSr,rU,ISr,jSr,NSr,f0e,DSr,GSr,l7,vPe,qf,T4,m0e,i7,OSr,g0e,VSr,TPe,Vr,d7,XSr,If,zSr,tU,QSr,WSr,aU,HSr,USr,JSr,c7,YSr,h0e,KSr,ZSr,eRr,jt,f7,oRr,p0e,rRr,tRr,jf,aRr,_0e,nRr,sRr,nU,lRr,iRr,dRr,u0e,cRr,fRr,m7,mRr,Io,g7,gRr,b0e,hRr,pRr,Vn,_Rr,F0e,uRr,bRr,v0e,FRr,vRr,T0e,TRr,MRr,ERr,M0e,M4,E0e,CRr,wRr,sU,ARr,yRr,LRr,C0e,xRr,kRr,h7,MPe,Nf,E4,w0e,p7,SRr,A0e,RRr,EPe,Xr,_7,BRr,Df,PRr,lU,$Rr,qRr,iU,IRr,jRr,NRr,u7,DRr,y0e,GRr,ORr,VRr,Nt,b7,XRr,L0e,zRr,QRr,Gf,WRr,x0e,HRr,URr,dU,JRr,YRr,KRr,k0e,ZRr,eBr,F7,oBr,jo,v7,rBr,S0e,tBr,aBr,Xn,nBr,R0e,sBr,lBr,B0e,iBr,dBr,P0e,cBr,fBr,mBr,T7,C4,$0e,gBr,hBr,cU,pBr,_Br,uBr,w4,q0e,bBr,FBr,fU,vBr,TBr,MBr,I0e,EBr,CBr,M7,CPe,Of,A4,j0e,E7,wBr,N0e,ABr,wPe,zr,C7,yBr,Vf,LBr,mU,xBr,kBr,gU,SBr,RBr,BBr,w7,PBr,D0e,$Br,qBr,IBr,Dt,A7,jBr,G0e,NBr,DBr,Xf,GBr,O0e,OBr,VBr,hU,XBr,zBr,QBr,V0e,WBr,HBr,y7,UBr,No,L7,JBr,X0e,YBr,KBr,zn,ZBr,z0e,ePr,oPr,Q0e,rPr,tPr,W0e,aPr,nPr,sPr,H0e,y4,U0e,lPr,iPr,pU,dPr,cPr,fPr,J0e,mPr,gPr,x7,APe;return me=new X({}),Xa=new A({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),RE=new X({}),BE=new A({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Kf=new hPr({props:{warning:!0,$$slots:{default:[KEt]},$$scope:{ctx:Qf}}}),PE=new X({}),$E=new E({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/configuration_auto.py#L547"}}),jE=new E({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/configuration_auto.py#L570",parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}]}}),NE=new A({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),DE=new E({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/configuration_auto.py#L692",parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}]}}),GE=new X({}),OE=new E({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/tokenization_auto.py#L351"}}),zE=new E({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/tokenization_auto.py#L365",parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16058/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}]}}),QE=new A({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),WE=new E({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/tokenization_auto.py#L561",parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}]}}),HE=new X({}),UE=new E({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/feature_extraction_auto.py#L171"}}),KE=new E({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/feature_extraction_auto.py#L185",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16058/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Oh=new hPr({props:{$$slots:{default:[ZEt]},$$scope:{ctx:Qf}}}),ZE=new A({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),eC=new E({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/feature_extraction_auto.py#L312",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}]}}),oC=new X({}),rC=new E({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/processing_auto.py#L70"}}),nC=new E({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/processing_auto.py#L84",parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Zh=new hPr({props:{$$slots:{default:[eCt]},$$scope:{ctx:Qf}}}),sC=new A({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),lC=new E({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/processing_auto.py#L237",parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}]}}),iC=new X({}),dC=new E({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L707"}}),fC=new E({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),mC=new A({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),gC=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),hC=new A({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),pC=new X({}),_C=new E({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L714"}}),bC=new E({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),FC=new A({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),vC=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),TC=new A({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),MC=new X({}),EC=new E({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L729"}}),wC=new E({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),AC=new A({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),yC=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),LC=new A({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),xC=new X({}),kC=new E({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L736"}}),RC=new E({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),BC=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),PC=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),$C=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),qC=new X({}),IC=new E({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L743"}}),NC=new E({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}]}}),DC=new A({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),GC=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),OC=new A({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),VC=new X({}),XC=new E({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L752"}}),QC=new E({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),WC=new A({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),HC=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),UC=new A({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),JC=new X({}),YC=new E({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L786"}}),ZC=new E({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),e3=new A({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),o3=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),r3=new A({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),t3=new X({}),a3=new E({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L793"}}),s3=new E({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}]}}),l3=new A({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),i3=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),d3=new A({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),c3=new X({}),f3=new E({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L779"}}),g3=new E({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),h3=new A({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),p3=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),_3=new A({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),u3=new X({}),b3=new E({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L761"}}),v3=new E({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),T3=new A({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),M3=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),E3=new A({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),C3=new X({}),w3=new E({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L768"}}),y3=new E({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),L3=new A({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),x3=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),k3=new A({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),S3=new X({}),R3=new E({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L802"}}),P3=new E({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16058/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),$3=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),q3=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),I3=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),j3=new X({}),N3=new E({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L841"}}),G3=new E({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),O3=new A({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),V3=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),X3=new A({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),z3=new X({}),Q3=new E({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L848"}}),H3=new E({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),U3=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),J3=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Y3=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),K3=new X({}),Z3=new E({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L871"}}),ow=new E({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),rw=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),tw=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),aw=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),nw=new X({}),sw=new E({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L855"}}),iw=new E({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),dw=new A({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),cw=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),fw=new A({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),mw=new X({}),gw=new E({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L862"}}),pw=new E({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}]}}),_w=new A({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),uw=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Fw=new A({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),vw=new X({}),Tw=new E({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L880"}}),Ew=new E({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),Cw=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),ww=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Aw=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),yw=new X({}),Lw=new E({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L887"}}),kw=new E({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}]}}),Sw=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),Rw=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Bw=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Pw=new X({}),$w=new E({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L834"}}),Iw=new E({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}]}}),jw=new A({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),Nw=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Dw=new A({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Gw=new X({}),Ow=new E({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L809"}}),Xw=new E({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}]}}),zw=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),Qw=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ww=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Hw=new X({}),Uw=new E({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L816"}}),Yw=new E({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}]}}),Kw=new A({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),Zw=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),eA=new A({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),oA=new X({}),rA=new E({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L825"}}),aA=new E({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}]}}),nA=new A({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),sA=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),lA=new A({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),iA=new X({}),dA=new E({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_tf_auto.py#L381"}}),fA=new E({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),mA=new A({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),gA=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),hA=new A({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),pA=new X({}),_A=new E({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_tf_auto.py#L388"}}),bA=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),FA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),vA=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),TA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),MA=new X({}),EA=new E({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),wA=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),AA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),yA=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),LA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),xA=new X({}),kA=new E({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_tf_auto.py#L410"}}),RA=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),BA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),PA=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),qA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),IA=new X({}),jA=new E({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_tf_auto.py#L424"}}),DA=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),GA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),OA=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),VA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),XA=new X({}),zA=new E({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_tf_auto.py#L431"}}),WA=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),HA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),UA=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),JA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),YA=new X({}),KA=new E({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_tf_auto.py#L440"}}),ey=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),oy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),ry=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ty=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ay=new X({}),ny=new E({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),ly=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),iy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),dy=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),cy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),fy=new X({}),my=new E({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_tf_auto.py#L456"}}),hy=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),py=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),_y=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),uy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),by=new X({}),Fy=new E({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_tf_auto.py#L467"}}),Ty=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),My=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),Ey=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Cy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),wy=new X({}),Ay=new E({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_tf_auto.py#L449"}}),Ly=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),xy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),ky=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Sy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ry=new X({}),By=new E({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_tf_auto.py#L417"}}),$y=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),qy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),Iy=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),jy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ny=new X({}),Dy=new E({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_tf_auto.py#L492"}}),Oy=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}]}}),Vy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),Xy=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),zy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Qy=new X({}),Wy=new E({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_flax_auto.py#L237"}}),Uy=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),Jy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),Yy=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ky=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Zy=new X({}),eL=new E({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),rL=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),tL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),aL=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),nL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),sL=new X({}),lL=new E({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),dL=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),cL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),fL=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),mL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),gL=new X({}),hL=new E({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),_L=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),uL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),bL=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),FL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),vL=new X({}),TL=new E({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),EL=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),CL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),wL=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),AL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),yL=new X({}),LL=new E({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),kL=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),SL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),RL=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),BL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),PL=new X({}),$L=new E({props:{name:"class transformers.FlaxAutoModelForSpeechSeq2Seq",anchor:"transformers.FlaxAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_flax_auto.py#L331"}}),IL=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/speech-encoder-decoder#transformers.FlaxSpeechEncoderDecoderModel">FlaxSpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}]}}),jL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSpeechSeq2Seq.from_config(config)`}}),NL=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),DL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),GL=new X({}),OL=new E({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),XL=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),zL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),QL=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),WL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),HL=new X({}),UL=new E({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),YL=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),KL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),ZL=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),e7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),o7=new X({}),r7=new E({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),a7=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),n7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),s7=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),l7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),i7=new X({}),d7=new E({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),f7=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}]}}),m7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),g7=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),h7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),p7=new X({}),_7=new E({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),b7=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),F7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),v7=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),M7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),E7=new X({}),C7=new E({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),A7=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),y7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),L7=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),x7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){Z=a("meta"),io=l(),de=a("h1"),Ce=a("a"),lo=a("span"),f(me.$$.fragment),Me=l(),zo=a("span"),Vi=o("Auto Classes"),Wf=l(),ha=a("p"),Xi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),zi=a("code"),LE=o("from_pretrained()"),Hf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),xe=l(),co=a("p"),Qi=o("Instantiating one of "),Qn=a("a"),xE=o("AutoConfig"),Wn=o(", "),Hn=a("a"),kE=o("AutoModel"),Wi=o(`, and
`),Un=a("a"),SE=o("AutoTokenizer"),Hi=o(" will directly create a class of the relevant architecture. For instance"),Uf=l(),f(Xa.$$.fragment),fo=l(),_e=a("p"),y9=o("will create a model that is an instance of "),Ui=a("a"),L9=o("BertModel"),x9=o("."),Qo=l(),za=a("p"),k9=o("There is one class of "),Jf=a("code"),S9=o("AutoModel"),Dqe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),ERe=l(),Ji=a("h2"),Yf=a("a"),fY=a("span"),f(RE.$$.fragment),Gqe=l(),mY=a("span"),Oqe=o("Extending the Auto Classes"),CRe=l(),Jn=a("p"),Vqe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),gY=a("code"),Xqe=o("NewModel"),zqe=o(", make sure you have a "),hY=a("code"),Qqe=o("NewModelConfig"),Wqe=o(` then you can add those to the auto
classes like this:`),wRe=l(),f(BE.$$.fragment),ARe=l(),R9=a("p"),Hqe=o("You will then be able to use the auto classes like you would usually do!"),yRe=l(),f(Kf.$$.fragment),LRe=l(),Yi=a("h2"),Zf=a("a"),pY=a("span"),f(PE.$$.fragment),Uqe=l(),_Y=a("span"),Jqe=o("AutoConfig"),xRe=l(),Wo=a("div"),f($E.$$.fragment),Yqe=l(),qE=a("p"),Kqe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),B9=a("a"),Zqe=o("from_pretrained()"),eIe=o(" class method."),oIe=l(),IE=a("p"),rIe=o("This class cannot be instantiated directly using "),uY=a("code"),tIe=o("__init__()"),aIe=o(" (throws an error)."),nIe=l(),mo=a("div"),f(jE.$$.fragment),sIe=l(),bY=a("p"),lIe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),iIe=l(),Ki=a("p"),dIe=o("The configuration class to instantiate is selected based on the "),FY=a("code"),cIe=o("model_type"),fIe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),vY=a("code"),mIe=o("pretrained_model_name_or_path"),gIe=o(":"),hIe=l(),F=a("ul"),em=a("li"),TY=a("strong"),pIe=o("albert"),_Ie=o(" \u2014 "),P9=a("a"),uIe=o("AlbertConfig"),bIe=o(" (ALBERT model)"),FIe=l(),om=a("li"),MY=a("strong"),vIe=o("bart"),TIe=o(" \u2014 "),$9=a("a"),MIe=o("BartConfig"),EIe=o(" (BART model)"),CIe=l(),rm=a("li"),EY=a("strong"),wIe=o("beit"),AIe=o(" \u2014 "),q9=a("a"),yIe=o("BeitConfig"),LIe=o(" (BEiT model)"),xIe=l(),tm=a("li"),CY=a("strong"),kIe=o("bert"),SIe=o(" \u2014 "),I9=a("a"),RIe=o("BertConfig"),BIe=o(" (BERT model)"),PIe=l(),am=a("li"),wY=a("strong"),$Ie=o("bert-generation"),qIe=o(" \u2014 "),j9=a("a"),IIe=o("BertGenerationConfig"),jIe=o(" (Bert Generation model)"),NIe=l(),nm=a("li"),AY=a("strong"),DIe=o("big_bird"),GIe=o(" \u2014 "),N9=a("a"),OIe=o("BigBirdConfig"),VIe=o(" (BigBird model)"),XIe=l(),sm=a("li"),yY=a("strong"),zIe=o("bigbird_pegasus"),QIe=o(" \u2014 "),D9=a("a"),WIe=o("BigBirdPegasusConfig"),HIe=o(" (BigBirdPegasus model)"),UIe=l(),lm=a("li"),LY=a("strong"),JIe=o("blenderbot"),YIe=o(" \u2014 "),G9=a("a"),KIe=o("BlenderbotConfig"),ZIe=o(" (Blenderbot model)"),eje=l(),im=a("li"),xY=a("strong"),oje=o("blenderbot-small"),rje=o(" \u2014 "),O9=a("a"),tje=o("BlenderbotSmallConfig"),aje=o(" (BlenderbotSmall model)"),nje=l(),dm=a("li"),kY=a("strong"),sje=o("camembert"),lje=o(" \u2014 "),V9=a("a"),ije=o("CamembertConfig"),dje=o(" (CamemBERT model)"),cje=l(),cm=a("li"),SY=a("strong"),fje=o("canine"),mje=o(" \u2014 "),X9=a("a"),gje=o("CanineConfig"),hje=o(" (Canine model)"),pje=l(),fm=a("li"),RY=a("strong"),_je=o("clip"),uje=o(" \u2014 "),z9=a("a"),bje=o("CLIPConfig"),Fje=o(" (CLIP model)"),vje=l(),mm=a("li"),BY=a("strong"),Tje=o("convbert"),Mje=o(" \u2014 "),Q9=a("a"),Eje=o("ConvBertConfig"),Cje=o(" (ConvBERT model)"),wje=l(),gm=a("li"),PY=a("strong"),Aje=o("convnext"),yje=o(" \u2014 "),W9=a("a"),Lje=o("ConvNextConfig"),xje=o(" (ConvNext model)"),kje=l(),hm=a("li"),$Y=a("strong"),Sje=o("ctrl"),Rje=o(" \u2014 "),H9=a("a"),Bje=o("CTRLConfig"),Pje=o(" (CTRL model)"),$je=l(),pm=a("li"),qY=a("strong"),qje=o("data2vec-audio"),Ije=o(" \u2014 "),U9=a("a"),jje=o("Data2VecAudioConfig"),Nje=o(" (Data2VecAudio model)"),Dje=l(),_m=a("li"),IY=a("strong"),Gje=o("data2vec-text"),Oje=o(" \u2014 "),J9=a("a"),Vje=o("Data2VecTextConfig"),Xje=o(" (Data2VecText model)"),zje=l(),um=a("li"),jY=a("strong"),Qje=o("deberta"),Wje=o(" \u2014 "),Y9=a("a"),Hje=o("DebertaConfig"),Uje=o(" (DeBERTa model)"),Jje=l(),bm=a("li"),NY=a("strong"),Yje=o("deberta-v2"),Kje=o(" \u2014 "),K9=a("a"),Zje=o("DebertaV2Config"),eNe=o(" (DeBERTa-v2 model)"),oNe=l(),Fm=a("li"),DY=a("strong"),rNe=o("decision_transformer"),tNe=o(" \u2014 "),Z9=a("a"),aNe=o("DecisionTransformerConfig"),nNe=o(" (Decision Transformer model)"),sNe=l(),vm=a("li"),GY=a("strong"),lNe=o("deit"),iNe=o(" \u2014 "),ex=a("a"),dNe=o("DeiTConfig"),cNe=o(" (DeiT model)"),fNe=l(),Tm=a("li"),OY=a("strong"),mNe=o("detr"),gNe=o(" \u2014 "),ox=a("a"),hNe=o("DetrConfig"),pNe=o(" (DETR model)"),_Ne=l(),Mm=a("li"),VY=a("strong"),uNe=o("distilbert"),bNe=o(" \u2014 "),rx=a("a"),FNe=o("DistilBertConfig"),vNe=o(" (DistilBERT model)"),TNe=l(),Em=a("li"),XY=a("strong"),MNe=o("dpr"),ENe=o(" \u2014 "),tx=a("a"),CNe=o("DPRConfig"),wNe=o(" (DPR model)"),ANe=l(),Cm=a("li"),zY=a("strong"),yNe=o("dpt"),LNe=o(" \u2014 "),ax=a("a"),xNe=o("DPTConfig"),kNe=o(" (DPT model)"),SNe=l(),wm=a("li"),QY=a("strong"),RNe=o("electra"),BNe=o(" \u2014 "),nx=a("a"),PNe=o("ElectraConfig"),$Ne=o(" (ELECTRA model)"),qNe=l(),Am=a("li"),WY=a("strong"),INe=o("encoder-decoder"),jNe=o(" \u2014 "),sx=a("a"),NNe=o("EncoderDecoderConfig"),DNe=o(" (Encoder decoder model)"),GNe=l(),ym=a("li"),HY=a("strong"),ONe=o("flaubert"),VNe=o(" \u2014 "),lx=a("a"),XNe=o("FlaubertConfig"),zNe=o(" (FlauBERT model)"),QNe=l(),Lm=a("li"),UY=a("strong"),WNe=o("fnet"),HNe=o(" \u2014 "),ix=a("a"),UNe=o("FNetConfig"),JNe=o(" (FNet model)"),YNe=l(),xm=a("li"),JY=a("strong"),KNe=o("fsmt"),ZNe=o(" \u2014 "),dx=a("a"),eDe=o("FSMTConfig"),oDe=o(" (FairSeq Machine-Translation model)"),rDe=l(),km=a("li"),YY=a("strong"),tDe=o("funnel"),aDe=o(" \u2014 "),cx=a("a"),nDe=o("FunnelConfig"),sDe=o(" (Funnel Transformer model)"),lDe=l(),Sm=a("li"),KY=a("strong"),iDe=o("glpn"),dDe=o(" \u2014 "),fx=a("a"),cDe=o("GLPNConfig"),fDe=o(" (GLPN model)"),mDe=l(),Rm=a("li"),ZY=a("strong"),gDe=o("gpt2"),hDe=o(" \u2014 "),mx=a("a"),pDe=o("GPT2Config"),_De=o(" (OpenAI GPT-2 model)"),uDe=l(),Bm=a("li"),eK=a("strong"),bDe=o("gpt_neo"),FDe=o(" \u2014 "),gx=a("a"),vDe=o("GPTNeoConfig"),TDe=o(" (GPT Neo model)"),MDe=l(),Pm=a("li"),oK=a("strong"),EDe=o("gptj"),CDe=o(" \u2014 "),hx=a("a"),wDe=o("GPTJConfig"),ADe=o(" (GPT-J model)"),yDe=l(),$m=a("li"),rK=a("strong"),LDe=o("hubert"),xDe=o(" \u2014 "),px=a("a"),kDe=o("HubertConfig"),SDe=o(" (Hubert model)"),RDe=l(),qm=a("li"),tK=a("strong"),BDe=o("ibert"),PDe=o(" \u2014 "),_x=a("a"),$De=o("IBertConfig"),qDe=o(" (I-BERT model)"),IDe=l(),Im=a("li"),aK=a("strong"),jDe=o("imagegpt"),NDe=o(" \u2014 "),ux=a("a"),DDe=o("ImageGPTConfig"),GDe=o(" (ImageGPT model)"),ODe=l(),jm=a("li"),nK=a("strong"),VDe=o("layoutlm"),XDe=o(" \u2014 "),bx=a("a"),zDe=o("LayoutLMConfig"),QDe=o(" (LayoutLM model)"),WDe=l(),Nm=a("li"),sK=a("strong"),HDe=o("layoutlmv2"),UDe=o(" \u2014 "),Fx=a("a"),JDe=o("LayoutLMv2Config"),YDe=o(" (LayoutLMv2 model)"),KDe=l(),Dm=a("li"),lK=a("strong"),ZDe=o("led"),eGe=o(" \u2014 "),vx=a("a"),oGe=o("LEDConfig"),rGe=o(" (LED model)"),tGe=l(),Gm=a("li"),iK=a("strong"),aGe=o("longformer"),nGe=o(" \u2014 "),Tx=a("a"),sGe=o("LongformerConfig"),lGe=o(" (Longformer model)"),iGe=l(),Om=a("li"),dK=a("strong"),dGe=o("luke"),cGe=o(" \u2014 "),Mx=a("a"),fGe=o("LukeConfig"),mGe=o(" (LUKE model)"),gGe=l(),Vm=a("li"),cK=a("strong"),hGe=o("lxmert"),pGe=o(" \u2014 "),Ex=a("a"),_Ge=o("LxmertConfig"),uGe=o(" (LXMERT model)"),bGe=l(),Xm=a("li"),fK=a("strong"),FGe=o("m2m_100"),vGe=o(" \u2014 "),Cx=a("a"),TGe=o("M2M100Config"),MGe=o(" (M2M100 model)"),EGe=l(),zm=a("li"),mK=a("strong"),CGe=o("marian"),wGe=o(" \u2014 "),wx=a("a"),AGe=o("MarianConfig"),yGe=o(" (Marian model)"),LGe=l(),Qm=a("li"),gK=a("strong"),xGe=o("maskformer"),kGe=o(" \u2014 "),Ax=a("a"),SGe=o("MaskFormerConfig"),RGe=o(" (MaskFormer model)"),BGe=l(),Wm=a("li"),hK=a("strong"),PGe=o("mbart"),$Ge=o(" \u2014 "),yx=a("a"),qGe=o("MBartConfig"),IGe=o(" (mBART model)"),jGe=l(),Hm=a("li"),pK=a("strong"),NGe=o("megatron-bert"),DGe=o(" \u2014 "),Lx=a("a"),GGe=o("MegatronBertConfig"),OGe=o(" (MegatronBert model)"),VGe=l(),Um=a("li"),_K=a("strong"),XGe=o("mobilebert"),zGe=o(" \u2014 "),xx=a("a"),QGe=o("MobileBertConfig"),WGe=o(" (MobileBERT model)"),HGe=l(),Jm=a("li"),uK=a("strong"),UGe=o("mpnet"),JGe=o(" \u2014 "),kx=a("a"),YGe=o("MPNetConfig"),KGe=o(" (MPNet model)"),ZGe=l(),Ym=a("li"),bK=a("strong"),eOe=o("mt5"),oOe=o(" \u2014 "),Sx=a("a"),rOe=o("MT5Config"),tOe=o(" (mT5 model)"),aOe=l(),Km=a("li"),FK=a("strong"),nOe=o("nystromformer"),sOe=o(" \u2014 "),Rx=a("a"),lOe=o("NystromformerConfig"),iOe=o(" (Nystromformer model)"),dOe=l(),Zm=a("li"),vK=a("strong"),cOe=o("openai-gpt"),fOe=o(" \u2014 "),Bx=a("a"),mOe=o("OpenAIGPTConfig"),gOe=o(" (OpenAI GPT model)"),hOe=l(),eg=a("li"),TK=a("strong"),pOe=o("pegasus"),_Oe=o(" \u2014 "),Px=a("a"),uOe=o("PegasusConfig"),bOe=o(" (Pegasus model)"),FOe=l(),og=a("li"),MK=a("strong"),vOe=o("perceiver"),TOe=o(" \u2014 "),$x=a("a"),MOe=o("PerceiverConfig"),EOe=o(" (Perceiver model)"),COe=l(),rg=a("li"),EK=a("strong"),wOe=o("plbart"),AOe=o(" \u2014 "),qx=a("a"),yOe=o("PLBartConfig"),LOe=o(" (PLBart model)"),xOe=l(),tg=a("li"),CK=a("strong"),kOe=o("poolformer"),SOe=o(" \u2014 "),Ix=a("a"),ROe=o("PoolFormerConfig"),BOe=o(" (PoolFormer model)"),POe=l(),ag=a("li"),wK=a("strong"),$Oe=o("prophetnet"),qOe=o(" \u2014 "),jx=a("a"),IOe=o("ProphetNetConfig"),jOe=o(" (ProphetNet model)"),NOe=l(),ng=a("li"),AK=a("strong"),DOe=o("qdqbert"),GOe=o(" \u2014 "),Nx=a("a"),OOe=o("QDQBertConfig"),VOe=o(" (QDQBert model)"),XOe=l(),sg=a("li"),yK=a("strong"),zOe=o("rag"),QOe=o(" \u2014 "),Dx=a("a"),WOe=o("RagConfig"),HOe=o(" (RAG model)"),UOe=l(),lg=a("li"),LK=a("strong"),JOe=o("realm"),YOe=o(" \u2014 "),Gx=a("a"),KOe=o("RealmConfig"),ZOe=o(" (Realm model)"),eVe=l(),ig=a("li"),xK=a("strong"),oVe=o("reformer"),rVe=o(" \u2014 "),Ox=a("a"),tVe=o("ReformerConfig"),aVe=o(" (Reformer model)"),nVe=l(),dg=a("li"),kK=a("strong"),sVe=o("rembert"),lVe=o(" \u2014 "),Vx=a("a"),iVe=o("RemBertConfig"),dVe=o(" (RemBERT model)"),cVe=l(),cg=a("li"),SK=a("strong"),fVe=o("resnet"),mVe=o(" \u2014 "),Xx=a("a"),gVe=o("ResNetConfig"),hVe=o(" (ResNet model)"),pVe=l(),fg=a("li"),RK=a("strong"),_Ve=o("retribert"),uVe=o(" \u2014 "),zx=a("a"),bVe=o("RetriBertConfig"),FVe=o(" (RetriBERT model)"),vVe=l(),mg=a("li"),BK=a("strong"),TVe=o("roberta"),MVe=o(" \u2014 "),Qx=a("a"),EVe=o("RobertaConfig"),CVe=o(" (RoBERTa model)"),wVe=l(),gg=a("li"),PK=a("strong"),AVe=o("roformer"),yVe=o(" \u2014 "),Wx=a("a"),LVe=o("RoFormerConfig"),xVe=o(" (RoFormer model)"),kVe=l(),hg=a("li"),$K=a("strong"),SVe=o("segformer"),RVe=o(" \u2014 "),Hx=a("a"),BVe=o("SegformerConfig"),PVe=o(" (SegFormer model)"),$Ve=l(),pg=a("li"),qK=a("strong"),qVe=o("sew"),IVe=o(" \u2014 "),Ux=a("a"),jVe=o("SEWConfig"),NVe=o(" (SEW model)"),DVe=l(),_g=a("li"),IK=a("strong"),GVe=o("sew-d"),OVe=o(" \u2014 "),Jx=a("a"),VVe=o("SEWDConfig"),XVe=o(" (SEW-D model)"),zVe=l(),ug=a("li"),jK=a("strong"),QVe=o("speech-encoder-decoder"),WVe=o(" \u2014 "),Yx=a("a"),HVe=o("SpeechEncoderDecoderConfig"),UVe=o(" (Speech Encoder decoder model)"),JVe=l(),bg=a("li"),NK=a("strong"),YVe=o("speech_to_text"),KVe=o(" \u2014 "),Kx=a("a"),ZVe=o("Speech2TextConfig"),eXe=o(" (Speech2Text model)"),oXe=l(),Fg=a("li"),DK=a("strong"),rXe=o("speech_to_text_2"),tXe=o(" \u2014 "),Zx=a("a"),aXe=o("Speech2Text2Config"),nXe=o(" (Speech2Text2 model)"),sXe=l(),vg=a("li"),GK=a("strong"),lXe=o("splinter"),iXe=o(" \u2014 "),ek=a("a"),dXe=o("SplinterConfig"),cXe=o(" (Splinter model)"),fXe=l(),Tg=a("li"),OK=a("strong"),mXe=o("squeezebert"),gXe=o(" \u2014 "),ok=a("a"),hXe=o("SqueezeBertConfig"),pXe=o(" (SqueezeBERT model)"),_Xe=l(),Mg=a("li"),VK=a("strong"),uXe=o("swin"),bXe=o(" \u2014 "),rk=a("a"),FXe=o("SwinConfig"),vXe=o(" (Swin model)"),TXe=l(),Eg=a("li"),XK=a("strong"),MXe=o("t5"),EXe=o(" \u2014 "),tk=a("a"),CXe=o("T5Config"),wXe=o(" (T5 model)"),AXe=l(),Cg=a("li"),zK=a("strong"),yXe=o("tapas"),LXe=o(" \u2014 "),ak=a("a"),xXe=o("TapasConfig"),kXe=o(" (TAPAS model)"),SXe=l(),wg=a("li"),QK=a("strong"),RXe=o("transfo-xl"),BXe=o(" \u2014 "),nk=a("a"),PXe=o("TransfoXLConfig"),$Xe=o(" (Transformer-XL model)"),qXe=l(),Ag=a("li"),WK=a("strong"),IXe=o("trocr"),jXe=o(" \u2014 "),sk=a("a"),NXe=o("TrOCRConfig"),DXe=o(" (TrOCR model)"),GXe=l(),yg=a("li"),HK=a("strong"),OXe=o("unispeech"),VXe=o(" \u2014 "),lk=a("a"),XXe=o("UniSpeechConfig"),zXe=o(" (UniSpeech model)"),QXe=l(),Lg=a("li"),UK=a("strong"),WXe=o("unispeech-sat"),HXe=o(" \u2014 "),ik=a("a"),UXe=o("UniSpeechSatConfig"),JXe=o(" (UniSpeechSat model)"),YXe=l(),xg=a("li"),JK=a("strong"),KXe=o("van"),ZXe=o(" \u2014 "),dk=a("a"),eze=o("VanConfig"),oze=o(" (VAN model)"),rze=l(),kg=a("li"),YK=a("strong"),tze=o("vilt"),aze=o(" \u2014 "),ck=a("a"),nze=o("ViltConfig"),sze=o(" (ViLT model)"),lze=l(),Sg=a("li"),KK=a("strong"),ize=o("vision-encoder-decoder"),dze=o(" \u2014 "),fk=a("a"),cze=o("VisionEncoderDecoderConfig"),fze=o(" (Vision Encoder decoder model)"),mze=l(),Rg=a("li"),ZK=a("strong"),gze=o("vision-text-dual-encoder"),hze=o(" \u2014 "),mk=a("a"),pze=o("VisionTextDualEncoderConfig"),_ze=o(" (VisionTextDualEncoder model)"),uze=l(),Bg=a("li"),eZ=a("strong"),bze=o("visual_bert"),Fze=o(" \u2014 "),gk=a("a"),vze=o("VisualBertConfig"),Tze=o(" (VisualBert model)"),Mze=l(),Pg=a("li"),oZ=a("strong"),Eze=o("vit"),Cze=o(" \u2014 "),hk=a("a"),wze=o("ViTConfig"),Aze=o(" (ViT model)"),yze=l(),$g=a("li"),rZ=a("strong"),Lze=o("vit_mae"),xze=o(" \u2014 "),pk=a("a"),kze=o("ViTMAEConfig"),Sze=o(" (ViTMAE model)"),Rze=l(),qg=a("li"),tZ=a("strong"),Bze=o("wav2vec2"),Pze=o(" \u2014 "),_k=a("a"),$ze=o("Wav2Vec2Config"),qze=o(" (Wav2Vec2 model)"),Ize=l(),Ig=a("li"),aZ=a("strong"),jze=o("wavlm"),Nze=o(" \u2014 "),uk=a("a"),Dze=o("WavLMConfig"),Gze=o(" (WavLM model)"),Oze=l(),jg=a("li"),nZ=a("strong"),Vze=o("xglm"),Xze=o(" \u2014 "),bk=a("a"),zze=o("XGLMConfig"),Qze=o(" (XGLM model)"),Wze=l(),Ng=a("li"),sZ=a("strong"),Hze=o("xlm"),Uze=o(" \u2014 "),Fk=a("a"),Jze=o("XLMConfig"),Yze=o(" (XLM model)"),Kze=l(),Dg=a("li"),lZ=a("strong"),Zze=o("xlm-prophetnet"),eQe=o(" \u2014 "),vk=a("a"),oQe=o("XLMProphetNetConfig"),rQe=o(" (XLMProphetNet model)"),tQe=l(),Gg=a("li"),iZ=a("strong"),aQe=o("xlm-roberta"),nQe=o(" \u2014 "),Tk=a("a"),sQe=o("XLMRobertaConfig"),lQe=o(" (XLM-RoBERTa model)"),iQe=l(),Og=a("li"),dZ=a("strong"),dQe=o("xlm-roberta-xl"),cQe=o(" \u2014 "),Mk=a("a"),fQe=o("XLMRobertaXLConfig"),mQe=o(" (XLM-RoBERTa-XL model)"),gQe=l(),Vg=a("li"),cZ=a("strong"),hQe=o("xlnet"),pQe=o(" \u2014 "),Ek=a("a"),_Qe=o("XLNetConfig"),uQe=o(" (XLNet model)"),bQe=l(),Xg=a("li"),fZ=a("strong"),FQe=o("yoso"),vQe=o(" \u2014 "),Ck=a("a"),TQe=o("YosoConfig"),MQe=o(" (YOSO model)"),EQe=l(),mZ=a("p"),CQe=o("Examples:"),wQe=l(),f(NE.$$.fragment),AQe=l(),zg=a("div"),f(DE.$$.fragment),yQe=l(),gZ=a("p"),LQe=o("Register a new configuration for this class."),kRe=l(),Zi=a("h2"),Qg=a("a"),hZ=a("span"),f(GE.$$.fragment),xQe=l(),pZ=a("span"),kQe=o("AutoTokenizer"),SRe=l(),Ho=a("div"),f(OE.$$.fragment),SQe=l(),VE=a("p"),RQe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),wk=a("a"),BQe=o("AutoTokenizer.from_pretrained()"),PQe=o(" class method."),$Qe=l(),XE=a("p"),qQe=o("This class cannot be instantiated directly using "),_Z=a("code"),IQe=o("__init__()"),jQe=o(" (throws an error)."),NQe=l(),go=a("div"),f(zE.$$.fragment),DQe=l(),uZ=a("p"),GQe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),OQe=l(),Qa=a("p"),VQe=o("The tokenizer class to instantiate is selected based on the "),bZ=a("code"),XQe=o("model_type"),zQe=o(` property of the config object (either
passed as an argument or loaded from `),FZ=a("code"),QQe=o("pretrained_model_name_or_path"),WQe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vZ=a("code"),HQe=o("pretrained_model_name_or_path"),UQe=o(":"),JQe=l(),C=a("ul"),Yn=a("li"),TZ=a("strong"),YQe=o("albert"),KQe=o(" \u2014 "),Ak=a("a"),ZQe=o("AlbertTokenizer"),eWe=o(" or "),yk=a("a"),oWe=o("AlbertTokenizerFast"),rWe=o(" (ALBERT model)"),tWe=l(),Kn=a("li"),MZ=a("strong"),aWe=o("bart"),nWe=o(" \u2014 "),Lk=a("a"),sWe=o("BartTokenizer"),lWe=o(" or "),xk=a("a"),iWe=o("BartTokenizerFast"),dWe=o(" (BART model)"),cWe=l(),Zn=a("li"),EZ=a("strong"),fWe=o("barthez"),mWe=o(" \u2014 "),kk=a("a"),gWe=o("BarthezTokenizer"),hWe=o(" or "),Sk=a("a"),pWe=o("BarthezTokenizerFast"),_We=o(" (BARThez model)"),uWe=l(),Wg=a("li"),CZ=a("strong"),bWe=o("bartpho"),FWe=o(" \u2014 "),Rk=a("a"),vWe=o("BartphoTokenizer"),TWe=o(" (BARTpho model)"),MWe=l(),es=a("li"),wZ=a("strong"),EWe=o("bert"),CWe=o(" \u2014 "),Bk=a("a"),wWe=o("BertTokenizer"),AWe=o(" or "),Pk=a("a"),yWe=o("BertTokenizerFast"),LWe=o(" (BERT model)"),xWe=l(),Hg=a("li"),AZ=a("strong"),kWe=o("bert-generation"),SWe=o(" \u2014 "),$k=a("a"),RWe=o("BertGenerationTokenizer"),BWe=o(" (Bert Generation model)"),PWe=l(),Ug=a("li"),yZ=a("strong"),$We=o("bert-japanese"),qWe=o(" \u2014 "),qk=a("a"),IWe=o("BertJapaneseTokenizer"),jWe=o(" (BertJapanese model)"),NWe=l(),Jg=a("li"),LZ=a("strong"),DWe=o("bertweet"),GWe=o(" \u2014 "),Ik=a("a"),OWe=o("BertweetTokenizer"),VWe=o(" (Bertweet model)"),XWe=l(),os=a("li"),xZ=a("strong"),zWe=o("big_bird"),QWe=o(" \u2014 "),jk=a("a"),WWe=o("BigBirdTokenizer"),HWe=o(" or "),Nk=a("a"),UWe=o("BigBirdTokenizerFast"),JWe=o(" (BigBird model)"),YWe=l(),rs=a("li"),kZ=a("strong"),KWe=o("bigbird_pegasus"),ZWe=o(" \u2014 "),Dk=a("a"),eHe=o("PegasusTokenizer"),oHe=o(" or "),Gk=a("a"),rHe=o("PegasusTokenizerFast"),tHe=o(" (BigBirdPegasus model)"),aHe=l(),ts=a("li"),SZ=a("strong"),nHe=o("blenderbot"),sHe=o(" \u2014 "),Ok=a("a"),lHe=o("BlenderbotTokenizer"),iHe=o(" or "),Vk=a("a"),dHe=o("BlenderbotTokenizerFast"),cHe=o(" (Blenderbot model)"),fHe=l(),Yg=a("li"),RZ=a("strong"),mHe=o("blenderbot-small"),gHe=o(" \u2014 "),Xk=a("a"),hHe=o("BlenderbotSmallTokenizer"),pHe=o(" (BlenderbotSmall model)"),_He=l(),Kg=a("li"),BZ=a("strong"),uHe=o("byt5"),bHe=o(" \u2014 "),zk=a("a"),FHe=o("ByT5Tokenizer"),vHe=o(" (ByT5 model)"),THe=l(),as=a("li"),PZ=a("strong"),MHe=o("camembert"),EHe=o(" \u2014 "),Qk=a("a"),CHe=o("CamembertTokenizer"),wHe=o(" or "),Wk=a("a"),AHe=o("CamembertTokenizerFast"),yHe=o(" (CamemBERT model)"),LHe=l(),Zg=a("li"),$Z=a("strong"),xHe=o("canine"),kHe=o(" \u2014 "),Hk=a("a"),SHe=o("CanineTokenizer"),RHe=o(" (Canine model)"),BHe=l(),ns=a("li"),qZ=a("strong"),PHe=o("clip"),$He=o(" \u2014 "),Uk=a("a"),qHe=o("CLIPTokenizer"),IHe=o(" or "),Jk=a("a"),jHe=o("CLIPTokenizerFast"),NHe=o(" (CLIP model)"),DHe=l(),ss=a("li"),IZ=a("strong"),GHe=o("convbert"),OHe=o(" \u2014 "),Yk=a("a"),VHe=o("ConvBertTokenizer"),XHe=o(" or "),Kk=a("a"),zHe=o("ConvBertTokenizerFast"),QHe=o(" (ConvBERT model)"),WHe=l(),ls=a("li"),jZ=a("strong"),HHe=o("cpm"),UHe=o(" \u2014 "),Zk=a("a"),JHe=o("CpmTokenizer"),YHe=o(" or "),NZ=a("code"),KHe=o("CpmTokenizerFast"),ZHe=o(" (CPM model)"),eUe=l(),eh=a("li"),DZ=a("strong"),oUe=o("ctrl"),rUe=o(" \u2014 "),eS=a("a"),tUe=o("CTRLTokenizer"),aUe=o(" (CTRL model)"),nUe=l(),is=a("li"),GZ=a("strong"),sUe=o("deberta"),lUe=o(" \u2014 "),oS=a("a"),iUe=o("DebertaTokenizer"),dUe=o(" or "),rS=a("a"),cUe=o("DebertaTokenizerFast"),fUe=o(" (DeBERTa model)"),mUe=l(),oh=a("li"),OZ=a("strong"),gUe=o("deberta-v2"),hUe=o(" \u2014 "),tS=a("a"),pUe=o("DebertaV2Tokenizer"),_Ue=o(" (DeBERTa-v2 model)"),uUe=l(),ds=a("li"),VZ=a("strong"),bUe=o("distilbert"),FUe=o(" \u2014 "),aS=a("a"),vUe=o("DistilBertTokenizer"),TUe=o(" or "),nS=a("a"),MUe=o("DistilBertTokenizerFast"),EUe=o(" (DistilBERT model)"),CUe=l(),cs=a("li"),XZ=a("strong"),wUe=o("dpr"),AUe=o(" \u2014 "),sS=a("a"),yUe=o("DPRQuestionEncoderTokenizer"),LUe=o(" or "),lS=a("a"),xUe=o("DPRQuestionEncoderTokenizerFast"),kUe=o(" (DPR model)"),SUe=l(),fs=a("li"),zZ=a("strong"),RUe=o("electra"),BUe=o(" \u2014 "),iS=a("a"),PUe=o("ElectraTokenizer"),$Ue=o(" or "),dS=a("a"),qUe=o("ElectraTokenizerFast"),IUe=o(" (ELECTRA model)"),jUe=l(),rh=a("li"),QZ=a("strong"),NUe=o("flaubert"),DUe=o(" \u2014 "),cS=a("a"),GUe=o("FlaubertTokenizer"),OUe=o(" (FlauBERT model)"),VUe=l(),ms=a("li"),WZ=a("strong"),XUe=o("fnet"),zUe=o(" \u2014 "),fS=a("a"),QUe=o("FNetTokenizer"),WUe=o(" or "),mS=a("a"),HUe=o("FNetTokenizerFast"),UUe=o(" (FNet model)"),JUe=l(),th=a("li"),HZ=a("strong"),YUe=o("fsmt"),KUe=o(" \u2014 "),gS=a("a"),ZUe=o("FSMTTokenizer"),eJe=o(" (FairSeq Machine-Translation model)"),oJe=l(),gs=a("li"),UZ=a("strong"),rJe=o("funnel"),tJe=o(" \u2014 "),hS=a("a"),aJe=o("FunnelTokenizer"),nJe=o(" or "),pS=a("a"),sJe=o("FunnelTokenizerFast"),lJe=o(" (Funnel Transformer model)"),iJe=l(),hs=a("li"),JZ=a("strong"),dJe=o("gpt2"),cJe=o(" \u2014 "),_S=a("a"),fJe=o("GPT2Tokenizer"),mJe=o(" or "),uS=a("a"),gJe=o("GPT2TokenizerFast"),hJe=o(" (OpenAI GPT-2 model)"),pJe=l(),ps=a("li"),YZ=a("strong"),_Je=o("gpt_neo"),uJe=o(" \u2014 "),bS=a("a"),bJe=o("GPT2Tokenizer"),FJe=o(" or "),FS=a("a"),vJe=o("GPT2TokenizerFast"),TJe=o(" (GPT Neo model)"),MJe=l(),_s=a("li"),KZ=a("strong"),EJe=o("herbert"),CJe=o(" \u2014 "),vS=a("a"),wJe=o("HerbertTokenizer"),AJe=o(" or "),TS=a("a"),yJe=o("HerbertTokenizerFast"),LJe=o(" (HerBERT model)"),xJe=l(),ah=a("li"),ZZ=a("strong"),kJe=o("hubert"),SJe=o(" \u2014 "),MS=a("a"),RJe=o("Wav2Vec2CTCTokenizer"),BJe=o(" (Hubert model)"),PJe=l(),us=a("li"),eee=a("strong"),$Je=o("ibert"),qJe=o(" \u2014 "),ES=a("a"),IJe=o("RobertaTokenizer"),jJe=o(" or "),CS=a("a"),NJe=o("RobertaTokenizerFast"),DJe=o(" (I-BERT model)"),GJe=l(),bs=a("li"),oee=a("strong"),OJe=o("layoutlm"),VJe=o(" \u2014 "),wS=a("a"),XJe=o("LayoutLMTokenizer"),zJe=o(" or "),AS=a("a"),QJe=o("LayoutLMTokenizerFast"),WJe=o(" (LayoutLM model)"),HJe=l(),Fs=a("li"),ree=a("strong"),UJe=o("layoutlmv2"),JJe=o(" \u2014 "),yS=a("a"),YJe=o("LayoutLMv2Tokenizer"),KJe=o(" or "),LS=a("a"),ZJe=o("LayoutLMv2TokenizerFast"),eYe=o(" (LayoutLMv2 model)"),oYe=l(),vs=a("li"),tee=a("strong"),rYe=o("layoutxlm"),tYe=o(" \u2014 "),xS=a("a"),aYe=o("LayoutXLMTokenizer"),nYe=o(" or "),kS=a("a"),sYe=o("LayoutXLMTokenizerFast"),lYe=o(" (LayoutXLM model)"),iYe=l(),Ts=a("li"),aee=a("strong"),dYe=o("led"),cYe=o(" \u2014 "),SS=a("a"),fYe=o("LEDTokenizer"),mYe=o(" or "),RS=a("a"),gYe=o("LEDTokenizerFast"),hYe=o(" (LED model)"),pYe=l(),Ms=a("li"),nee=a("strong"),_Ye=o("longformer"),uYe=o(" \u2014 "),BS=a("a"),bYe=o("LongformerTokenizer"),FYe=o(" or "),PS=a("a"),vYe=o("LongformerTokenizerFast"),TYe=o(" (Longformer model)"),MYe=l(),nh=a("li"),see=a("strong"),EYe=o("luke"),CYe=o(" \u2014 "),$S=a("a"),wYe=o("LukeTokenizer"),AYe=o(" (LUKE model)"),yYe=l(),Es=a("li"),lee=a("strong"),LYe=o("lxmert"),xYe=o(" \u2014 "),qS=a("a"),kYe=o("LxmertTokenizer"),SYe=o(" or "),IS=a("a"),RYe=o("LxmertTokenizerFast"),BYe=o(" (LXMERT model)"),PYe=l(),sh=a("li"),iee=a("strong"),$Ye=o("m2m_100"),qYe=o(" \u2014 "),jS=a("a"),IYe=o("M2M100Tokenizer"),jYe=o(" (M2M100 model)"),NYe=l(),lh=a("li"),dee=a("strong"),DYe=o("marian"),GYe=o(" \u2014 "),NS=a("a"),OYe=o("MarianTokenizer"),VYe=o(" (Marian model)"),XYe=l(),Cs=a("li"),cee=a("strong"),zYe=o("mbart"),QYe=o(" \u2014 "),DS=a("a"),WYe=o("MBartTokenizer"),HYe=o(" or "),GS=a("a"),UYe=o("MBartTokenizerFast"),JYe=o(" (mBART model)"),YYe=l(),ws=a("li"),fee=a("strong"),KYe=o("mbart50"),ZYe=o(" \u2014 "),OS=a("a"),eKe=o("MBart50Tokenizer"),oKe=o(" or "),VS=a("a"),rKe=o("MBart50TokenizerFast"),tKe=o(" (mBART-50 model)"),aKe=l(),ih=a("li"),mee=a("strong"),nKe=o("mluke"),sKe=o(" \u2014 "),XS=a("a"),lKe=o("MLukeTokenizer"),iKe=o(" (mLUKE model)"),dKe=l(),As=a("li"),gee=a("strong"),cKe=o("mobilebert"),fKe=o(" \u2014 "),zS=a("a"),mKe=o("MobileBertTokenizer"),gKe=o(" or "),QS=a("a"),hKe=o("MobileBertTokenizerFast"),pKe=o(" (MobileBERT model)"),_Ke=l(),ys=a("li"),hee=a("strong"),uKe=o("mpnet"),bKe=o(" \u2014 "),WS=a("a"),FKe=o("MPNetTokenizer"),vKe=o(" or "),HS=a("a"),TKe=o("MPNetTokenizerFast"),MKe=o(" (MPNet model)"),EKe=l(),Ls=a("li"),pee=a("strong"),CKe=o("mt5"),wKe=o(" \u2014 "),US=a("a"),AKe=o("MT5Tokenizer"),yKe=o(" or "),JS=a("a"),LKe=o("MT5TokenizerFast"),xKe=o(" (mT5 model)"),kKe=l(),xs=a("li"),_ee=a("strong"),SKe=o("openai-gpt"),RKe=o(" \u2014 "),YS=a("a"),BKe=o("OpenAIGPTTokenizer"),PKe=o(" or "),KS=a("a"),$Ke=o("OpenAIGPTTokenizerFast"),qKe=o(" (OpenAI GPT model)"),IKe=l(),ks=a("li"),uee=a("strong"),jKe=o("pegasus"),NKe=o(" \u2014 "),ZS=a("a"),DKe=o("PegasusTokenizer"),GKe=o(" or "),eR=a("a"),OKe=o("PegasusTokenizerFast"),VKe=o(" (Pegasus model)"),XKe=l(),dh=a("li"),bee=a("strong"),zKe=o("perceiver"),QKe=o(" \u2014 "),oR=a("a"),WKe=o("PerceiverTokenizer"),HKe=o(" (Perceiver model)"),UKe=l(),ch=a("li"),Fee=a("strong"),JKe=o("phobert"),YKe=o(" \u2014 "),rR=a("a"),KKe=o("PhobertTokenizer"),ZKe=o(" (PhoBERT model)"),eZe=l(),fh=a("li"),vee=a("strong"),oZe=o("plbart"),rZe=o(" \u2014 "),tR=a("a"),tZe=o("PLBartTokenizer"),aZe=o(" (PLBart model)"),nZe=l(),mh=a("li"),Tee=a("strong"),sZe=o("prophetnet"),lZe=o(" \u2014 "),aR=a("a"),iZe=o("ProphetNetTokenizer"),dZe=o(" (ProphetNet model)"),cZe=l(),Ss=a("li"),Mee=a("strong"),fZe=o("qdqbert"),mZe=o(" \u2014 "),nR=a("a"),gZe=o("BertTokenizer"),hZe=o(" or "),sR=a("a"),pZe=o("BertTokenizerFast"),_Ze=o(" (QDQBert model)"),uZe=l(),gh=a("li"),Eee=a("strong"),bZe=o("rag"),FZe=o(" \u2014 "),lR=a("a"),vZe=o("RagTokenizer"),TZe=o(" (RAG model)"),MZe=l(),Rs=a("li"),Cee=a("strong"),EZe=o("realm"),CZe=o(" \u2014 "),iR=a("a"),wZe=o("RealmTokenizer"),AZe=o(" or "),dR=a("a"),yZe=o("RealmTokenizerFast"),LZe=o(" (Realm model)"),xZe=l(),Bs=a("li"),wee=a("strong"),kZe=o("reformer"),SZe=o(" \u2014 "),cR=a("a"),RZe=o("ReformerTokenizer"),BZe=o(" or "),fR=a("a"),PZe=o("ReformerTokenizerFast"),$Ze=o(" (Reformer model)"),qZe=l(),Ps=a("li"),Aee=a("strong"),IZe=o("rembert"),jZe=o(" \u2014 "),mR=a("a"),NZe=o("RemBertTokenizer"),DZe=o(" or "),gR=a("a"),GZe=o("RemBertTokenizerFast"),OZe=o(" (RemBERT model)"),VZe=l(),$s=a("li"),yee=a("strong"),XZe=o("retribert"),zZe=o(" \u2014 "),hR=a("a"),QZe=o("RetriBertTokenizer"),WZe=o(" or "),pR=a("a"),HZe=o("RetriBertTokenizerFast"),UZe=o(" (RetriBERT model)"),JZe=l(),qs=a("li"),Lee=a("strong"),YZe=o("roberta"),KZe=o(" \u2014 "),_R=a("a"),ZZe=o("RobertaTokenizer"),eeo=o(" or "),uR=a("a"),oeo=o("RobertaTokenizerFast"),reo=o(" (RoBERTa model)"),teo=l(),Is=a("li"),xee=a("strong"),aeo=o("roformer"),neo=o(" \u2014 "),bR=a("a"),seo=o("RoFormerTokenizer"),leo=o(" or "),FR=a("a"),ieo=o("RoFormerTokenizerFast"),deo=o(" (RoFormer model)"),ceo=l(),hh=a("li"),kee=a("strong"),feo=o("speech_to_text"),meo=o(" \u2014 "),vR=a("a"),geo=o("Speech2TextTokenizer"),heo=o(" (Speech2Text model)"),peo=l(),ph=a("li"),See=a("strong"),_eo=o("speech_to_text_2"),ueo=o(" \u2014 "),TR=a("a"),beo=o("Speech2Text2Tokenizer"),Feo=o(" (Speech2Text2 model)"),veo=l(),js=a("li"),Ree=a("strong"),Teo=o("splinter"),Meo=o(" \u2014 "),MR=a("a"),Eeo=o("SplinterTokenizer"),Ceo=o(" or "),ER=a("a"),weo=o("SplinterTokenizerFast"),Aeo=o(" (Splinter model)"),yeo=l(),Ns=a("li"),Bee=a("strong"),Leo=o("squeezebert"),xeo=o(" \u2014 "),CR=a("a"),keo=o("SqueezeBertTokenizer"),Seo=o(" or "),wR=a("a"),Reo=o("SqueezeBertTokenizerFast"),Beo=o(" (SqueezeBERT model)"),Peo=l(),Ds=a("li"),Pee=a("strong"),$eo=o("t5"),qeo=o(" \u2014 "),AR=a("a"),Ieo=o("T5Tokenizer"),jeo=o(" or "),yR=a("a"),Neo=o("T5TokenizerFast"),Deo=o(" (T5 model)"),Geo=l(),_h=a("li"),$ee=a("strong"),Oeo=o("tapas"),Veo=o(" \u2014 "),LR=a("a"),Xeo=o("TapasTokenizer"),zeo=o(" (TAPAS model)"),Qeo=l(),uh=a("li"),qee=a("strong"),Weo=o("transfo-xl"),Heo=o(" \u2014 "),xR=a("a"),Ueo=o("TransfoXLTokenizer"),Jeo=o(" (Transformer-XL model)"),Yeo=l(),bh=a("li"),Iee=a("strong"),Keo=o("wav2vec2"),Zeo=o(" \u2014 "),kR=a("a"),eoo=o("Wav2Vec2CTCTokenizer"),ooo=o(" (Wav2Vec2 model)"),roo=l(),Fh=a("li"),jee=a("strong"),too=o("wav2vec2_phoneme"),aoo=o(" \u2014 "),SR=a("a"),noo=o("Wav2Vec2PhonemeCTCTokenizer"),soo=o(" (Wav2Vec2Phoneme model)"),loo=l(),Gs=a("li"),Nee=a("strong"),ioo=o("xglm"),doo=o(" \u2014 "),RR=a("a"),coo=o("XGLMTokenizer"),foo=o(" or "),BR=a("a"),moo=o("XGLMTokenizerFast"),goo=o(" (XGLM model)"),hoo=l(),vh=a("li"),Dee=a("strong"),poo=o("xlm"),_oo=o(" \u2014 "),PR=a("a"),uoo=o("XLMTokenizer"),boo=o(" (XLM model)"),Foo=l(),Th=a("li"),Gee=a("strong"),voo=o("xlm-prophetnet"),Too=o(" \u2014 "),$R=a("a"),Moo=o("XLMProphetNetTokenizer"),Eoo=o(" (XLMProphetNet model)"),Coo=l(),Os=a("li"),Oee=a("strong"),woo=o("xlm-roberta"),Aoo=o(" \u2014 "),qR=a("a"),yoo=o("XLMRobertaTokenizer"),Loo=o(" or "),IR=a("a"),xoo=o("XLMRobertaTokenizerFast"),koo=o(" (XLM-RoBERTa model)"),Soo=l(),Vs=a("li"),Vee=a("strong"),Roo=o("xlnet"),Boo=o(" \u2014 "),jR=a("a"),Poo=o("XLNetTokenizer"),$oo=o(" or "),NR=a("a"),qoo=o("XLNetTokenizerFast"),Ioo=o(" (XLNet model)"),joo=l(),Xee=a("p"),Noo=o("Examples:"),Doo=l(),f(QE.$$.fragment),Goo=l(),Mh=a("div"),f(WE.$$.fragment),Ooo=l(),zee=a("p"),Voo=o("Register a new tokenizer in this mapping."),RRe=l(),ed=a("h2"),Eh=a("a"),Qee=a("span"),f(HE.$$.fragment),Xoo=l(),Wee=a("span"),zoo=o("AutoFeatureExtractor"),BRe=l(),Uo=a("div"),f(UE.$$.fragment),Qoo=l(),JE=a("p"),Woo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),DR=a("a"),Hoo=o("AutoFeatureExtractor.from_pretrained()"),Uoo=o(" class method."),Joo=l(),YE=a("p"),Yoo=o("This class cannot be instantiated directly using "),Hee=a("code"),Koo=o("__init__()"),Zoo=o(" (throws an error)."),ero=l(),$e=a("div"),f(KE.$$.fragment),oro=l(),Uee=a("p"),rro=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),tro=l(),Wa=a("p"),aro=o("The feature extractor class to instantiate is selected based on the "),Jee=a("code"),nro=o("model_type"),sro=o(` property of the config object
(either passed as an argument or loaded from `),Yee=a("code"),lro=o("pretrained_model_name_or_path"),iro=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Kee=a("code"),dro=o("pretrained_model_name_or_path"),cro=o(":"),fro=l(),te=a("ul"),Ch=a("li"),Zee=a("strong"),mro=o("beit"),gro=o(" \u2014 "),GR=a("a"),hro=o("BeitFeatureExtractor"),pro=o(" (BEiT model)"),_ro=l(),wh=a("li"),eoe=a("strong"),uro=o("clip"),bro=o(" \u2014 "),OR=a("a"),Fro=o("CLIPFeatureExtractor"),vro=o(" (CLIP model)"),Tro=l(),Ah=a("li"),ooe=a("strong"),Mro=o("convnext"),Ero=o(" \u2014 "),VR=a("a"),Cro=o("ConvNextFeatureExtractor"),wro=o(" (ConvNext model)"),Aro=l(),yh=a("li"),roe=a("strong"),yro=o("deit"),Lro=o(" \u2014 "),XR=a("a"),xro=o("DeiTFeatureExtractor"),kro=o(" (DeiT model)"),Sro=l(),Lh=a("li"),toe=a("strong"),Rro=o("detr"),Bro=o(" \u2014 "),zR=a("a"),Pro=o("DetrFeatureExtractor"),$ro=o(" (DETR model)"),qro=l(),xh=a("li"),aoe=a("strong"),Iro=o("hubert"),jro=o(" \u2014 "),QR=a("a"),Nro=o("Wav2Vec2FeatureExtractor"),Dro=o(" (Hubert model)"),Gro=l(),kh=a("li"),noe=a("strong"),Oro=o("layoutlmv2"),Vro=o(" \u2014 "),WR=a("a"),Xro=o("LayoutLMv2FeatureExtractor"),zro=o(" (LayoutLMv2 model)"),Qro=l(),Sh=a("li"),soe=a("strong"),Wro=o("maskformer"),Hro=o(" \u2014 "),HR=a("a"),Uro=o("MaskFormerFeatureExtractor"),Jro=o(" (MaskFormer model)"),Yro=l(),Rh=a("li"),loe=a("strong"),Kro=o("perceiver"),Zro=o(" \u2014 "),UR=a("a"),eto=o("PerceiverFeatureExtractor"),oto=o(" (Perceiver model)"),rto=l(),Bh=a("li"),ioe=a("strong"),tto=o("poolformer"),ato=o(" \u2014 "),JR=a("a"),nto=o("PoolFormerFeatureExtractor"),sto=o(" (PoolFormer model)"),lto=l(),Ph=a("li"),doe=a("strong"),ito=o("resnet"),dto=o(" \u2014 "),YR=a("a"),cto=o("ConvNextFeatureExtractor"),fto=o(" (ResNet model)"),mto=l(),$h=a("li"),coe=a("strong"),gto=o("segformer"),hto=o(" \u2014 "),KR=a("a"),pto=o("SegformerFeatureExtractor"),_to=o(" (SegFormer model)"),uto=l(),qh=a("li"),foe=a("strong"),bto=o("speech_to_text"),Fto=o(" \u2014 "),ZR=a("a"),vto=o("Speech2TextFeatureExtractor"),Tto=o(" (Speech2Text model)"),Mto=l(),Ih=a("li"),moe=a("strong"),Eto=o("swin"),Cto=o(" \u2014 "),eB=a("a"),wto=o("ViTFeatureExtractor"),Ato=o(" (Swin model)"),yto=l(),jh=a("li"),goe=a("strong"),Lto=o("van"),xto=o(" \u2014 "),oB=a("a"),kto=o("ConvNextFeatureExtractor"),Sto=o(" (VAN model)"),Rto=l(),Nh=a("li"),hoe=a("strong"),Bto=o("vit"),Pto=o(" \u2014 "),rB=a("a"),$to=o("ViTFeatureExtractor"),qto=o(" (ViT model)"),Ito=l(),Dh=a("li"),poe=a("strong"),jto=o("vit_mae"),Nto=o(" \u2014 "),tB=a("a"),Dto=o("ViTFeatureExtractor"),Gto=o(" (ViTMAE model)"),Oto=l(),Gh=a("li"),_oe=a("strong"),Vto=o("wav2vec2"),Xto=o(" \u2014 "),aB=a("a"),zto=o("Wav2Vec2FeatureExtractor"),Qto=o(" (Wav2Vec2 model)"),Wto=l(),f(Oh.$$.fragment),Hto=l(),uoe=a("p"),Uto=o("Examples:"),Jto=l(),f(ZE.$$.fragment),Yto=l(),Vh=a("div"),f(eC.$$.fragment),Kto=l(),boe=a("p"),Zto=o("Register a new feature extractor for this class."),PRe=l(),od=a("h2"),Xh=a("a"),Foe=a("span"),f(oC.$$.fragment),eao=l(),voe=a("span"),oao=o("AutoProcessor"),$Re=l(),Jo=a("div"),f(rC.$$.fragment),rao=l(),tC=a("p"),tao=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),nB=a("a"),aao=o("AutoProcessor.from_pretrained()"),nao=o(" class method."),sao=l(),aC=a("p"),lao=o("This class cannot be instantiated directly using "),Toe=a("code"),iao=o("__init__()"),dao=o(" (throws an error)."),cao=l(),qe=a("div"),f(nC.$$.fragment),fao=l(),Moe=a("p"),mao=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),gao=l(),rd=a("p"),hao=o("The processor class to instantiate is selected based on the "),Eoe=a("code"),pao=o("model_type"),_ao=o(` property of the config object (either
passed as an argument or loaded from `),Coe=a("code"),uao=o("pretrained_model_name_or_path"),bao=o(" if possible):"),Fao=l(),ke=a("ul"),zh=a("li"),woe=a("strong"),vao=o("clip"),Tao=o(" \u2014 "),sB=a("a"),Mao=o("CLIPProcessor"),Eao=o(" (CLIP model)"),Cao=l(),Qh=a("li"),Aoe=a("strong"),wao=o("layoutlmv2"),Aao=o(" \u2014 "),lB=a("a"),yao=o("LayoutLMv2Processor"),Lao=o(" (LayoutLMv2 model)"),xao=l(),Wh=a("li"),yoe=a("strong"),kao=o("layoutxlm"),Sao=o(" \u2014 "),iB=a("a"),Rao=o("LayoutXLMProcessor"),Bao=o(" (LayoutXLM model)"),Pao=l(),Hh=a("li"),Loe=a("strong"),$ao=o("speech_to_text"),qao=o(" \u2014 "),dB=a("a"),Iao=o("Speech2TextProcessor"),jao=o(" (Speech2Text model)"),Nao=l(),Uh=a("li"),xoe=a("strong"),Dao=o("speech_to_text_2"),Gao=o(" \u2014 "),cB=a("a"),Oao=o("Speech2Text2Processor"),Vao=o(" (Speech2Text2 model)"),Xao=l(),Jh=a("li"),koe=a("strong"),zao=o("trocr"),Qao=o(" \u2014 "),fB=a("a"),Wao=o("TrOCRProcessor"),Hao=o(" (TrOCR model)"),Uao=l(),Yh=a("li"),Soe=a("strong"),Jao=o("vision-text-dual-encoder"),Yao=o(" \u2014 "),mB=a("a"),Kao=o("VisionTextDualEncoderProcessor"),Zao=o(" (VisionTextDualEncoder model)"),eno=l(),Kh=a("li"),Roe=a("strong"),ono=o("wav2vec2"),rno=o(" \u2014 "),gB=a("a"),tno=o("Wav2Vec2Processor"),ano=o(" (Wav2Vec2 model)"),nno=l(),f(Zh.$$.fragment),sno=l(),Boe=a("p"),lno=o("Examples:"),ino=l(),f(sC.$$.fragment),dno=l(),ep=a("div"),f(lC.$$.fragment),cno=l(),Poe=a("p"),fno=o("Register a new processor for this class."),qRe=l(),td=a("h2"),op=a("a"),$oe=a("span"),f(iC.$$.fragment),mno=l(),qoe=a("span"),gno=o("AutoModel"),IRe=l(),Yo=a("div"),f(dC.$$.fragment),hno=l(),ad=a("p"),pno=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),hB=a("a"),_no=o("from_pretrained()"),uno=o(" class method or the "),pB=a("a"),bno=o("from_config()"),Fno=o(` class
method.`),vno=l(),cC=a("p"),Tno=o("This class cannot be instantiated directly using "),Ioe=a("code"),Mno=o("__init__()"),Eno=o(" (throws an error)."),Cno=l(),Qr=a("div"),f(fC.$$.fragment),wno=l(),joe=a("p"),Ano=o("Instantiates one of the base model classes of the library from a configuration."),yno=l(),nd=a("p"),Lno=o(`Note:
Loading a model from its configuration file does `),Noe=a("strong"),xno=o("not"),kno=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_B=a("a"),Sno=o("from_pretrained()"),Rno=o(" to load the model weights."),Bno=l(),Doe=a("p"),Pno=o("Examples:"),$no=l(),f(mC.$$.fragment),qno=l(),Ie=a("div"),f(gC.$$.fragment),Ino=l(),Goe=a("p"),jno=o("Instantiate one of the base model classes of the library from a pretrained model."),Nno=l(),Ha=a("p"),Dno=o("The model class to instantiate is selected based on the "),Ooe=a("code"),Gno=o("model_type"),Ono=o(` property of the config object (either
passed as an argument or loaded from `),Voe=a("code"),Vno=o("pretrained_model_name_or_path"),Xno=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xoe=a("code"),zno=o("pretrained_model_name_or_path"),Qno=o(":"),Wno=l(),T=a("ul"),rp=a("li"),zoe=a("strong"),Hno=o("albert"),Uno=o(" \u2014 "),uB=a("a"),Jno=o("AlbertModel"),Yno=o(" (ALBERT model)"),Kno=l(),tp=a("li"),Qoe=a("strong"),Zno=o("bart"),eso=o(" \u2014 "),bB=a("a"),oso=o("BartModel"),rso=o(" (BART model)"),tso=l(),ap=a("li"),Woe=a("strong"),aso=o("beit"),nso=o(" \u2014 "),FB=a("a"),sso=o("BeitModel"),lso=o(" (BEiT model)"),iso=l(),np=a("li"),Hoe=a("strong"),dso=o("bert"),cso=o(" \u2014 "),vB=a("a"),fso=o("BertModel"),mso=o(" (BERT model)"),gso=l(),sp=a("li"),Uoe=a("strong"),hso=o("bert-generation"),pso=o(" \u2014 "),TB=a("a"),_so=o("BertGenerationEncoder"),uso=o(" (Bert Generation model)"),bso=l(),lp=a("li"),Joe=a("strong"),Fso=o("big_bird"),vso=o(" \u2014 "),MB=a("a"),Tso=o("BigBirdModel"),Mso=o(" (BigBird model)"),Eso=l(),ip=a("li"),Yoe=a("strong"),Cso=o("bigbird_pegasus"),wso=o(" \u2014 "),EB=a("a"),Aso=o("BigBirdPegasusModel"),yso=o(" (BigBirdPegasus model)"),Lso=l(),dp=a("li"),Koe=a("strong"),xso=o("blenderbot"),kso=o(" \u2014 "),CB=a("a"),Sso=o("BlenderbotModel"),Rso=o(" (Blenderbot model)"),Bso=l(),cp=a("li"),Zoe=a("strong"),Pso=o("blenderbot-small"),$so=o(" \u2014 "),wB=a("a"),qso=o("BlenderbotSmallModel"),Iso=o(" (BlenderbotSmall model)"),jso=l(),fp=a("li"),ere=a("strong"),Nso=o("camembert"),Dso=o(" \u2014 "),AB=a("a"),Gso=o("CamembertModel"),Oso=o(" (CamemBERT model)"),Vso=l(),mp=a("li"),ore=a("strong"),Xso=o("canine"),zso=o(" \u2014 "),yB=a("a"),Qso=o("CanineModel"),Wso=o(" (Canine model)"),Hso=l(),gp=a("li"),rre=a("strong"),Uso=o("clip"),Jso=o(" \u2014 "),LB=a("a"),Yso=o("CLIPModel"),Kso=o(" (CLIP model)"),Zso=l(),hp=a("li"),tre=a("strong"),elo=o("convbert"),olo=o(" \u2014 "),xB=a("a"),rlo=o("ConvBertModel"),tlo=o(" (ConvBERT model)"),alo=l(),pp=a("li"),are=a("strong"),nlo=o("convnext"),slo=o(" \u2014 "),kB=a("a"),llo=o("ConvNextModel"),ilo=o(" (ConvNext model)"),dlo=l(),_p=a("li"),nre=a("strong"),clo=o("ctrl"),flo=o(" \u2014 "),SB=a("a"),mlo=o("CTRLModel"),glo=o(" (CTRL model)"),hlo=l(),up=a("li"),sre=a("strong"),plo=o("data2vec-audio"),_lo=o(" \u2014 "),RB=a("a"),ulo=o("Data2VecAudioModel"),blo=o(" (Data2VecAudio model)"),Flo=l(),bp=a("li"),lre=a("strong"),vlo=o("data2vec-text"),Tlo=o(" \u2014 "),BB=a("a"),Mlo=o("Data2VecTextModel"),Elo=o(" (Data2VecText model)"),Clo=l(),Fp=a("li"),ire=a("strong"),wlo=o("deberta"),Alo=o(" \u2014 "),PB=a("a"),ylo=o("DebertaModel"),Llo=o(" (DeBERTa model)"),xlo=l(),vp=a("li"),dre=a("strong"),klo=o("deberta-v2"),Slo=o(" \u2014 "),$B=a("a"),Rlo=o("DebertaV2Model"),Blo=o(" (DeBERTa-v2 model)"),Plo=l(),Tp=a("li"),cre=a("strong"),$lo=o("decision_transformer"),qlo=o(" \u2014 "),qB=a("a"),Ilo=o("DecisionTransformerModel"),jlo=o(" (Decision Transformer model)"),Nlo=l(),Mp=a("li"),fre=a("strong"),Dlo=o("deit"),Glo=o(" \u2014 "),IB=a("a"),Olo=o("DeiTModel"),Vlo=o(" (DeiT model)"),Xlo=l(),Ep=a("li"),mre=a("strong"),zlo=o("detr"),Qlo=o(" \u2014 "),jB=a("a"),Wlo=o("DetrModel"),Hlo=o(" (DETR model)"),Ulo=l(),Cp=a("li"),gre=a("strong"),Jlo=o("distilbert"),Ylo=o(" \u2014 "),NB=a("a"),Klo=o("DistilBertModel"),Zlo=o(" (DistilBERT model)"),eio=l(),wp=a("li"),hre=a("strong"),oio=o("dpr"),rio=o(" \u2014 "),DB=a("a"),tio=o("DPRQuestionEncoder"),aio=o(" (DPR model)"),nio=l(),Ap=a("li"),pre=a("strong"),sio=o("dpt"),lio=o(" \u2014 "),GB=a("a"),iio=o("DPTModel"),dio=o(" (DPT model)"),cio=l(),yp=a("li"),_re=a("strong"),fio=o("electra"),mio=o(" \u2014 "),OB=a("a"),gio=o("ElectraModel"),hio=o(" (ELECTRA model)"),pio=l(),Lp=a("li"),ure=a("strong"),_io=o("flaubert"),uio=o(" \u2014 "),VB=a("a"),bio=o("FlaubertModel"),Fio=o(" (FlauBERT model)"),vio=l(),xp=a("li"),bre=a("strong"),Tio=o("fnet"),Mio=o(" \u2014 "),XB=a("a"),Eio=o("FNetModel"),Cio=o(" (FNet model)"),wio=l(),kp=a("li"),Fre=a("strong"),Aio=o("fsmt"),yio=o(" \u2014 "),zB=a("a"),Lio=o("FSMTModel"),xio=o(" (FairSeq Machine-Translation model)"),kio=l(),Xs=a("li"),vre=a("strong"),Sio=o("funnel"),Rio=o(" \u2014 "),QB=a("a"),Bio=o("FunnelModel"),Pio=o(" or "),WB=a("a"),$io=o("FunnelBaseModel"),qio=o(" (Funnel Transformer model)"),Iio=l(),Sp=a("li"),Tre=a("strong"),jio=o("glpn"),Nio=o(" \u2014 "),HB=a("a"),Dio=o("GLPNModel"),Gio=o(" (GLPN model)"),Oio=l(),Rp=a("li"),Mre=a("strong"),Vio=o("gpt2"),Xio=o(" \u2014 "),UB=a("a"),zio=o("GPT2Model"),Qio=o(" (OpenAI GPT-2 model)"),Wio=l(),Bp=a("li"),Ere=a("strong"),Hio=o("gpt_neo"),Uio=o(" \u2014 "),JB=a("a"),Jio=o("GPTNeoModel"),Yio=o(" (GPT Neo model)"),Kio=l(),Pp=a("li"),Cre=a("strong"),Zio=o("gptj"),edo=o(" \u2014 "),YB=a("a"),odo=o("GPTJModel"),rdo=o(" (GPT-J model)"),tdo=l(),$p=a("li"),wre=a("strong"),ado=o("hubert"),ndo=o(" \u2014 "),KB=a("a"),sdo=o("HubertModel"),ldo=o(" (Hubert model)"),ido=l(),qp=a("li"),Are=a("strong"),ddo=o("ibert"),cdo=o(" \u2014 "),ZB=a("a"),fdo=o("IBertModel"),mdo=o(" (I-BERT model)"),gdo=l(),Ip=a("li"),yre=a("strong"),hdo=o("imagegpt"),pdo=o(" \u2014 "),eP=a("a"),_do=o("ImageGPTModel"),udo=o(" (ImageGPT model)"),bdo=l(),jp=a("li"),Lre=a("strong"),Fdo=o("layoutlm"),vdo=o(" \u2014 "),oP=a("a"),Tdo=o("LayoutLMModel"),Mdo=o(" (LayoutLM model)"),Edo=l(),Np=a("li"),xre=a("strong"),Cdo=o("layoutlmv2"),wdo=o(" \u2014 "),rP=a("a"),Ado=o("LayoutLMv2Model"),ydo=o(" (LayoutLMv2 model)"),Ldo=l(),Dp=a("li"),kre=a("strong"),xdo=o("led"),kdo=o(" \u2014 "),tP=a("a"),Sdo=o("LEDModel"),Rdo=o(" (LED model)"),Bdo=l(),Gp=a("li"),Sre=a("strong"),Pdo=o("longformer"),$do=o(" \u2014 "),aP=a("a"),qdo=o("LongformerModel"),Ido=o(" (Longformer model)"),jdo=l(),Op=a("li"),Rre=a("strong"),Ndo=o("luke"),Ddo=o(" \u2014 "),nP=a("a"),Gdo=o("LukeModel"),Odo=o(" (LUKE model)"),Vdo=l(),Vp=a("li"),Bre=a("strong"),Xdo=o("lxmert"),zdo=o(" \u2014 "),sP=a("a"),Qdo=o("LxmertModel"),Wdo=o(" (LXMERT model)"),Hdo=l(),Xp=a("li"),Pre=a("strong"),Udo=o("m2m_100"),Jdo=o(" \u2014 "),lP=a("a"),Ydo=o("M2M100Model"),Kdo=o(" (M2M100 model)"),Zdo=l(),zp=a("li"),$re=a("strong"),eco=o("marian"),oco=o(" \u2014 "),iP=a("a"),rco=o("MarianModel"),tco=o(" (Marian model)"),aco=l(),Qp=a("li"),qre=a("strong"),nco=o("maskformer"),sco=o(" \u2014 "),dP=a("a"),lco=o("MaskFormerModel"),ico=o(" (MaskFormer model)"),dco=l(),Wp=a("li"),Ire=a("strong"),cco=o("mbart"),fco=o(" \u2014 "),cP=a("a"),mco=o("MBartModel"),gco=o(" (mBART model)"),hco=l(),Hp=a("li"),jre=a("strong"),pco=o("megatron-bert"),_co=o(" \u2014 "),fP=a("a"),uco=o("MegatronBertModel"),bco=o(" (MegatronBert model)"),Fco=l(),Up=a("li"),Nre=a("strong"),vco=o("mobilebert"),Tco=o(" \u2014 "),mP=a("a"),Mco=o("MobileBertModel"),Eco=o(" (MobileBERT model)"),Cco=l(),Jp=a("li"),Dre=a("strong"),wco=o("mpnet"),Aco=o(" \u2014 "),gP=a("a"),yco=o("MPNetModel"),Lco=o(" (MPNet model)"),xco=l(),Yp=a("li"),Gre=a("strong"),kco=o("mt5"),Sco=o(" \u2014 "),hP=a("a"),Rco=o("MT5Model"),Bco=o(" (mT5 model)"),Pco=l(),Kp=a("li"),Ore=a("strong"),$co=o("nystromformer"),qco=o(" \u2014 "),pP=a("a"),Ico=o("NystromformerModel"),jco=o(" (Nystromformer model)"),Nco=l(),Zp=a("li"),Vre=a("strong"),Dco=o("openai-gpt"),Gco=o(" \u2014 "),_P=a("a"),Oco=o("OpenAIGPTModel"),Vco=o(" (OpenAI GPT model)"),Xco=l(),e_=a("li"),Xre=a("strong"),zco=o("pegasus"),Qco=o(" \u2014 "),uP=a("a"),Wco=o("PegasusModel"),Hco=o(" (Pegasus model)"),Uco=l(),o_=a("li"),zre=a("strong"),Jco=o("perceiver"),Yco=o(" \u2014 "),bP=a("a"),Kco=o("PerceiverModel"),Zco=o(" (Perceiver model)"),efo=l(),r_=a("li"),Qre=a("strong"),ofo=o("plbart"),rfo=o(" \u2014 "),FP=a("a"),tfo=o("PLBartModel"),afo=o(" (PLBart model)"),nfo=l(),t_=a("li"),Wre=a("strong"),sfo=o("poolformer"),lfo=o(" \u2014 "),vP=a("a"),ifo=o("PoolFormerModel"),dfo=o(" (PoolFormer model)"),cfo=l(),a_=a("li"),Hre=a("strong"),ffo=o("prophetnet"),mfo=o(" \u2014 "),TP=a("a"),gfo=o("ProphetNetModel"),hfo=o(" (ProphetNet model)"),pfo=l(),n_=a("li"),Ure=a("strong"),_fo=o("qdqbert"),ufo=o(" \u2014 "),MP=a("a"),bfo=o("QDQBertModel"),Ffo=o(" (QDQBert model)"),vfo=l(),s_=a("li"),Jre=a("strong"),Tfo=o("reformer"),Mfo=o(" \u2014 "),EP=a("a"),Efo=o("ReformerModel"),Cfo=o(" (Reformer model)"),wfo=l(),l_=a("li"),Yre=a("strong"),Afo=o("rembert"),yfo=o(" \u2014 "),CP=a("a"),Lfo=o("RemBertModel"),xfo=o(" (RemBERT model)"),kfo=l(),i_=a("li"),Kre=a("strong"),Sfo=o("resnet"),Rfo=o(" \u2014 "),wP=a("a"),Bfo=o("ResNetModel"),Pfo=o(" (ResNet model)"),$fo=l(),d_=a("li"),Zre=a("strong"),qfo=o("retribert"),Ifo=o(" \u2014 "),AP=a("a"),jfo=o("RetriBertModel"),Nfo=o(" (RetriBERT model)"),Dfo=l(),c_=a("li"),ete=a("strong"),Gfo=o("roberta"),Ofo=o(" \u2014 "),yP=a("a"),Vfo=o("RobertaModel"),Xfo=o(" (RoBERTa model)"),zfo=l(),f_=a("li"),ote=a("strong"),Qfo=o("roformer"),Wfo=o(" \u2014 "),LP=a("a"),Hfo=o("RoFormerModel"),Ufo=o(" (RoFormer model)"),Jfo=l(),m_=a("li"),rte=a("strong"),Yfo=o("segformer"),Kfo=o(" \u2014 "),xP=a("a"),Zfo=o("SegformerModel"),emo=o(" (SegFormer model)"),omo=l(),g_=a("li"),tte=a("strong"),rmo=o("sew"),tmo=o(" \u2014 "),kP=a("a"),amo=o("SEWModel"),nmo=o(" (SEW model)"),smo=l(),h_=a("li"),ate=a("strong"),lmo=o("sew-d"),imo=o(" \u2014 "),SP=a("a"),dmo=o("SEWDModel"),cmo=o(" (SEW-D model)"),fmo=l(),p_=a("li"),nte=a("strong"),mmo=o("speech_to_text"),gmo=o(" \u2014 "),RP=a("a"),hmo=o("Speech2TextModel"),pmo=o(" (Speech2Text model)"),_mo=l(),__=a("li"),ste=a("strong"),umo=o("splinter"),bmo=o(" \u2014 "),BP=a("a"),Fmo=o("SplinterModel"),vmo=o(" (Splinter model)"),Tmo=l(),u_=a("li"),lte=a("strong"),Mmo=o("squeezebert"),Emo=o(" \u2014 "),PP=a("a"),Cmo=o("SqueezeBertModel"),wmo=o(" (SqueezeBERT model)"),Amo=l(),b_=a("li"),ite=a("strong"),ymo=o("swin"),Lmo=o(" \u2014 "),$P=a("a"),xmo=o("SwinModel"),kmo=o(" (Swin model)"),Smo=l(),F_=a("li"),dte=a("strong"),Rmo=o("t5"),Bmo=o(" \u2014 "),qP=a("a"),Pmo=o("T5Model"),$mo=o(" (T5 model)"),qmo=l(),v_=a("li"),cte=a("strong"),Imo=o("tapas"),jmo=o(" \u2014 "),IP=a("a"),Nmo=o("TapasModel"),Dmo=o(" (TAPAS model)"),Gmo=l(),T_=a("li"),fte=a("strong"),Omo=o("transfo-xl"),Vmo=o(" \u2014 "),jP=a("a"),Xmo=o("TransfoXLModel"),zmo=o(" (Transformer-XL model)"),Qmo=l(),M_=a("li"),mte=a("strong"),Wmo=o("unispeech"),Hmo=o(" \u2014 "),NP=a("a"),Umo=o("UniSpeechModel"),Jmo=o(" (UniSpeech model)"),Ymo=l(),E_=a("li"),gte=a("strong"),Kmo=o("unispeech-sat"),Zmo=o(" \u2014 "),DP=a("a"),ego=o("UniSpeechSatModel"),ogo=o(" (UniSpeechSat model)"),rgo=l(),C_=a("li"),hte=a("strong"),tgo=o("van"),ago=o(" \u2014 "),GP=a("a"),ngo=o("VanModel"),sgo=o(" (VAN model)"),lgo=l(),w_=a("li"),pte=a("strong"),igo=o("vilt"),dgo=o(" \u2014 "),OP=a("a"),cgo=o("ViltModel"),fgo=o(" (ViLT model)"),mgo=l(),A_=a("li"),_te=a("strong"),ggo=o("vision-text-dual-encoder"),hgo=o(" \u2014 "),VP=a("a"),pgo=o("VisionTextDualEncoderModel"),_go=o(" (VisionTextDualEncoder model)"),ugo=l(),y_=a("li"),ute=a("strong"),bgo=o("visual_bert"),Fgo=o(" \u2014 "),XP=a("a"),vgo=o("VisualBertModel"),Tgo=o(" (VisualBert model)"),Mgo=l(),L_=a("li"),bte=a("strong"),Ego=o("vit"),Cgo=o(" \u2014 "),zP=a("a"),wgo=o("ViTModel"),Ago=o(" (ViT model)"),ygo=l(),x_=a("li"),Fte=a("strong"),Lgo=o("vit_mae"),xgo=o(" \u2014 "),QP=a("a"),kgo=o("ViTMAEModel"),Sgo=o(" (ViTMAE model)"),Rgo=l(),k_=a("li"),vte=a("strong"),Bgo=o("wav2vec2"),Pgo=o(" \u2014 "),WP=a("a"),$go=o("Wav2Vec2Model"),qgo=o(" (Wav2Vec2 model)"),Igo=l(),S_=a("li"),Tte=a("strong"),jgo=o("wavlm"),Ngo=o(" \u2014 "),HP=a("a"),Dgo=o("WavLMModel"),Ggo=o(" (WavLM model)"),Ogo=l(),R_=a("li"),Mte=a("strong"),Vgo=o("xglm"),Xgo=o(" \u2014 "),UP=a("a"),zgo=o("XGLMModel"),Qgo=o(" (XGLM model)"),Wgo=l(),B_=a("li"),Ete=a("strong"),Hgo=o("xlm"),Ugo=o(" \u2014 "),JP=a("a"),Jgo=o("XLMModel"),Ygo=o(" (XLM model)"),Kgo=l(),P_=a("li"),Cte=a("strong"),Zgo=o("xlm-prophetnet"),eho=o(" \u2014 "),YP=a("a"),oho=o("XLMProphetNetModel"),rho=o(" (XLMProphetNet model)"),tho=l(),$_=a("li"),wte=a("strong"),aho=o("xlm-roberta"),nho=o(" \u2014 "),KP=a("a"),sho=o("XLMRobertaModel"),lho=o(" (XLM-RoBERTa model)"),iho=l(),q_=a("li"),Ate=a("strong"),dho=o("xlm-roberta-xl"),cho=o(" \u2014 "),ZP=a("a"),fho=o("XLMRobertaXLModel"),mho=o(" (XLM-RoBERTa-XL model)"),gho=l(),I_=a("li"),yte=a("strong"),hho=o("xlnet"),pho=o(" \u2014 "),e$=a("a"),_ho=o("XLNetModel"),uho=o(" (XLNet model)"),bho=l(),j_=a("li"),Lte=a("strong"),Fho=o("yoso"),vho=o(" \u2014 "),o$=a("a"),Tho=o("YosoModel"),Mho=o(" (YOSO model)"),Eho=l(),N_=a("p"),Cho=o("The model is set in evaluation mode by default using "),xte=a("code"),who=o("model.eval()"),Aho=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kte=a("code"),yho=o("model.train()"),Lho=l(),Ste=a("p"),xho=o("Examples:"),kho=l(),f(hC.$$.fragment),jRe=l(),sd=a("h2"),D_=a("a"),Rte=a("span"),f(pC.$$.fragment),Sho=l(),Bte=a("span"),Rho=o("AutoModelForPreTraining"),NRe=l(),Ko=a("div"),f(_C.$$.fragment),Bho=l(),ld=a("p"),Pho=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),r$=a("a"),$ho=o("from_pretrained()"),qho=o(" class method or the "),t$=a("a"),Iho=o("from_config()"),jho=o(` class
method.`),Nho=l(),uC=a("p"),Dho=o("This class cannot be instantiated directly using "),Pte=a("code"),Gho=o("__init__()"),Oho=o(" (throws an error)."),Vho=l(),Wr=a("div"),f(bC.$$.fragment),Xho=l(),$te=a("p"),zho=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Qho=l(),id=a("p"),Who=o(`Note:
Loading a model from its configuration file does `),qte=a("strong"),Hho=o("not"),Uho=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),a$=a("a"),Jho=o("from_pretrained()"),Yho=o(" to load the model weights."),Kho=l(),Ite=a("p"),Zho=o("Examples:"),epo=l(),f(FC.$$.fragment),opo=l(),je=a("div"),f(vC.$$.fragment),rpo=l(),jte=a("p"),tpo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),apo=l(),Ua=a("p"),npo=o("The model class to instantiate is selected based on the "),Nte=a("code"),spo=o("model_type"),lpo=o(` property of the config object (either
passed as an argument or loaded from `),Dte=a("code"),ipo=o("pretrained_model_name_or_path"),dpo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gte=a("code"),cpo=o("pretrained_model_name_or_path"),fpo=o(":"),mpo=l(),S=a("ul"),G_=a("li"),Ote=a("strong"),gpo=o("albert"),hpo=o(" \u2014 "),n$=a("a"),ppo=o("AlbertForPreTraining"),_po=o(" (ALBERT model)"),upo=l(),O_=a("li"),Vte=a("strong"),bpo=o("bart"),Fpo=o(" \u2014 "),s$=a("a"),vpo=o("BartForConditionalGeneration"),Tpo=o(" (BART model)"),Mpo=l(),V_=a("li"),Xte=a("strong"),Epo=o("bert"),Cpo=o(" \u2014 "),l$=a("a"),wpo=o("BertForPreTraining"),Apo=o(" (BERT model)"),ypo=l(),X_=a("li"),zte=a("strong"),Lpo=o("big_bird"),xpo=o(" \u2014 "),i$=a("a"),kpo=o("BigBirdForPreTraining"),Spo=o(" (BigBird model)"),Rpo=l(),z_=a("li"),Qte=a("strong"),Bpo=o("camembert"),Ppo=o(" \u2014 "),d$=a("a"),$po=o("CamembertForMaskedLM"),qpo=o(" (CamemBERT model)"),Ipo=l(),Q_=a("li"),Wte=a("strong"),jpo=o("ctrl"),Npo=o(" \u2014 "),c$=a("a"),Dpo=o("CTRLLMHeadModel"),Gpo=o(" (CTRL model)"),Opo=l(),W_=a("li"),Hte=a("strong"),Vpo=o("data2vec-text"),Xpo=o(" \u2014 "),f$=a("a"),zpo=o("Data2VecTextForMaskedLM"),Qpo=o(" (Data2VecText model)"),Wpo=l(),H_=a("li"),Ute=a("strong"),Hpo=o("deberta"),Upo=o(" \u2014 "),m$=a("a"),Jpo=o("DebertaForMaskedLM"),Ypo=o(" (DeBERTa model)"),Kpo=l(),U_=a("li"),Jte=a("strong"),Zpo=o("deberta-v2"),e_o=o(" \u2014 "),g$=a("a"),o_o=o("DebertaV2ForMaskedLM"),r_o=o(" (DeBERTa-v2 model)"),t_o=l(),J_=a("li"),Yte=a("strong"),a_o=o("distilbert"),n_o=o(" \u2014 "),h$=a("a"),s_o=o("DistilBertForMaskedLM"),l_o=o(" (DistilBERT model)"),i_o=l(),Y_=a("li"),Kte=a("strong"),d_o=o("electra"),c_o=o(" \u2014 "),p$=a("a"),f_o=o("ElectraForPreTraining"),m_o=o(" (ELECTRA model)"),g_o=l(),K_=a("li"),Zte=a("strong"),h_o=o("flaubert"),p_o=o(" \u2014 "),_$=a("a"),__o=o("FlaubertWithLMHeadModel"),u_o=o(" (FlauBERT model)"),b_o=l(),Z_=a("li"),eae=a("strong"),F_o=o("fnet"),v_o=o(" \u2014 "),u$=a("a"),T_o=o("FNetForPreTraining"),M_o=o(" (FNet model)"),E_o=l(),eu=a("li"),oae=a("strong"),C_o=o("fsmt"),w_o=o(" \u2014 "),b$=a("a"),A_o=o("FSMTForConditionalGeneration"),y_o=o(" (FairSeq Machine-Translation model)"),L_o=l(),ou=a("li"),rae=a("strong"),x_o=o("funnel"),k_o=o(" \u2014 "),F$=a("a"),S_o=o("FunnelForPreTraining"),R_o=o(" (Funnel Transformer model)"),B_o=l(),ru=a("li"),tae=a("strong"),P_o=o("gpt2"),$_o=o(" \u2014 "),v$=a("a"),q_o=o("GPT2LMHeadModel"),I_o=o(" (OpenAI GPT-2 model)"),j_o=l(),tu=a("li"),aae=a("strong"),N_o=o("ibert"),D_o=o(" \u2014 "),T$=a("a"),G_o=o("IBertForMaskedLM"),O_o=o(" (I-BERT model)"),V_o=l(),au=a("li"),nae=a("strong"),X_o=o("layoutlm"),z_o=o(" \u2014 "),M$=a("a"),Q_o=o("LayoutLMForMaskedLM"),W_o=o(" (LayoutLM model)"),H_o=l(),nu=a("li"),sae=a("strong"),U_o=o("longformer"),J_o=o(" \u2014 "),E$=a("a"),Y_o=o("LongformerForMaskedLM"),K_o=o(" (Longformer model)"),Z_o=l(),su=a("li"),lae=a("strong"),euo=o("lxmert"),ouo=o(" \u2014 "),C$=a("a"),ruo=o("LxmertForPreTraining"),tuo=o(" (LXMERT model)"),auo=l(),lu=a("li"),iae=a("strong"),nuo=o("megatron-bert"),suo=o(" \u2014 "),w$=a("a"),luo=o("MegatronBertForPreTraining"),iuo=o(" (MegatronBert model)"),duo=l(),iu=a("li"),dae=a("strong"),cuo=o("mobilebert"),fuo=o(" \u2014 "),A$=a("a"),muo=o("MobileBertForPreTraining"),guo=o(" (MobileBERT model)"),huo=l(),du=a("li"),cae=a("strong"),puo=o("mpnet"),_uo=o(" \u2014 "),y$=a("a"),uuo=o("MPNetForMaskedLM"),buo=o(" (MPNet model)"),Fuo=l(),cu=a("li"),fae=a("strong"),vuo=o("openai-gpt"),Tuo=o(" \u2014 "),L$=a("a"),Muo=o("OpenAIGPTLMHeadModel"),Euo=o(" (OpenAI GPT model)"),Cuo=l(),fu=a("li"),mae=a("strong"),wuo=o("retribert"),Auo=o(" \u2014 "),x$=a("a"),yuo=o("RetriBertModel"),Luo=o(" (RetriBERT model)"),xuo=l(),mu=a("li"),gae=a("strong"),kuo=o("roberta"),Suo=o(" \u2014 "),k$=a("a"),Ruo=o("RobertaForMaskedLM"),Buo=o(" (RoBERTa model)"),Puo=l(),gu=a("li"),hae=a("strong"),$uo=o("squeezebert"),quo=o(" \u2014 "),S$=a("a"),Iuo=o("SqueezeBertForMaskedLM"),juo=o(" (SqueezeBERT model)"),Nuo=l(),hu=a("li"),pae=a("strong"),Duo=o("t5"),Guo=o(" \u2014 "),R$=a("a"),Ouo=o("T5ForConditionalGeneration"),Vuo=o(" (T5 model)"),Xuo=l(),pu=a("li"),_ae=a("strong"),zuo=o("tapas"),Quo=o(" \u2014 "),B$=a("a"),Wuo=o("TapasForMaskedLM"),Huo=o(" (TAPAS model)"),Uuo=l(),_u=a("li"),uae=a("strong"),Juo=o("transfo-xl"),Yuo=o(" \u2014 "),P$=a("a"),Kuo=o("TransfoXLLMHeadModel"),Zuo=o(" (Transformer-XL model)"),e1o=l(),uu=a("li"),bae=a("strong"),o1o=o("unispeech"),r1o=o(" \u2014 "),$$=a("a"),t1o=o("UniSpeechForPreTraining"),a1o=o(" (UniSpeech model)"),n1o=l(),bu=a("li"),Fae=a("strong"),s1o=o("unispeech-sat"),l1o=o(" \u2014 "),q$=a("a"),i1o=o("UniSpeechSatForPreTraining"),d1o=o(" (UniSpeechSat model)"),c1o=l(),Fu=a("li"),vae=a("strong"),f1o=o("visual_bert"),m1o=o(" \u2014 "),I$=a("a"),g1o=o("VisualBertForPreTraining"),h1o=o(" (VisualBert model)"),p1o=l(),vu=a("li"),Tae=a("strong"),_1o=o("vit_mae"),u1o=o(" \u2014 "),j$=a("a"),b1o=o("ViTMAEForPreTraining"),F1o=o(" (ViTMAE model)"),v1o=l(),Tu=a("li"),Mae=a("strong"),T1o=o("wav2vec2"),M1o=o(" \u2014 "),N$=a("a"),E1o=o("Wav2Vec2ForPreTraining"),C1o=o(" (Wav2Vec2 model)"),w1o=l(),Mu=a("li"),Eae=a("strong"),A1o=o("xlm"),y1o=o(" \u2014 "),D$=a("a"),L1o=o("XLMWithLMHeadModel"),x1o=o(" (XLM model)"),k1o=l(),Eu=a("li"),Cae=a("strong"),S1o=o("xlm-roberta"),R1o=o(" \u2014 "),G$=a("a"),B1o=o("XLMRobertaForMaskedLM"),P1o=o(" (XLM-RoBERTa model)"),$1o=l(),Cu=a("li"),wae=a("strong"),q1o=o("xlm-roberta-xl"),I1o=o(" \u2014 "),O$=a("a"),j1o=o("XLMRobertaXLForMaskedLM"),N1o=o(" (XLM-RoBERTa-XL model)"),D1o=l(),wu=a("li"),Aae=a("strong"),G1o=o("xlnet"),O1o=o(" \u2014 "),V$=a("a"),V1o=o("XLNetLMHeadModel"),X1o=o(" (XLNet model)"),z1o=l(),Au=a("p"),Q1o=o("The model is set in evaluation mode by default using "),yae=a("code"),W1o=o("model.eval()"),H1o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lae=a("code"),U1o=o("model.train()"),J1o=l(),xae=a("p"),Y1o=o("Examples:"),K1o=l(),f(TC.$$.fragment),DRe=l(),dd=a("h2"),yu=a("a"),kae=a("span"),f(MC.$$.fragment),Z1o=l(),Sae=a("span"),ebo=o("AutoModelForCausalLM"),GRe=l(),Zo=a("div"),f(EC.$$.fragment),obo=l(),cd=a("p"),rbo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),X$=a("a"),tbo=o("from_pretrained()"),abo=o(" class method or the "),z$=a("a"),nbo=o("from_config()"),sbo=o(` class
method.`),lbo=l(),CC=a("p"),ibo=o("This class cannot be instantiated directly using "),Rae=a("code"),dbo=o("__init__()"),cbo=o(" (throws an error)."),fbo=l(),Hr=a("div"),f(wC.$$.fragment),mbo=l(),Bae=a("p"),gbo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),hbo=l(),fd=a("p"),pbo=o(`Note:
Loading a model from its configuration file does `),Pae=a("strong"),_bo=o("not"),ubo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Q$=a("a"),bbo=o("from_pretrained()"),Fbo=o(" to load the model weights."),vbo=l(),$ae=a("p"),Tbo=o("Examples:"),Mbo=l(),f(AC.$$.fragment),Ebo=l(),Ne=a("div"),f(yC.$$.fragment),Cbo=l(),qae=a("p"),wbo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Abo=l(),Ja=a("p"),ybo=o("The model class to instantiate is selected based on the "),Iae=a("code"),Lbo=o("model_type"),xbo=o(` property of the config object (either
passed as an argument or loaded from `),jae=a("code"),kbo=o("pretrained_model_name_or_path"),Sbo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nae=a("code"),Rbo=o("pretrained_model_name_or_path"),Bbo=o(":"),Pbo=l(),$=a("ul"),Lu=a("li"),Dae=a("strong"),$bo=o("bart"),qbo=o(" \u2014 "),W$=a("a"),Ibo=o("BartForCausalLM"),jbo=o(" (BART model)"),Nbo=l(),xu=a("li"),Gae=a("strong"),Dbo=o("bert"),Gbo=o(" \u2014 "),H$=a("a"),Obo=o("BertLMHeadModel"),Vbo=o(" (BERT model)"),Xbo=l(),ku=a("li"),Oae=a("strong"),zbo=o("bert-generation"),Qbo=o(" \u2014 "),U$=a("a"),Wbo=o("BertGenerationDecoder"),Hbo=o(" (Bert Generation model)"),Ubo=l(),Su=a("li"),Vae=a("strong"),Jbo=o("big_bird"),Ybo=o(" \u2014 "),J$=a("a"),Kbo=o("BigBirdForCausalLM"),Zbo=o(" (BigBird model)"),e5o=l(),Ru=a("li"),Xae=a("strong"),o5o=o("bigbird_pegasus"),r5o=o(" \u2014 "),Y$=a("a"),t5o=o("BigBirdPegasusForCausalLM"),a5o=o(" (BigBirdPegasus model)"),n5o=l(),Bu=a("li"),zae=a("strong"),s5o=o("blenderbot"),l5o=o(" \u2014 "),K$=a("a"),i5o=o("BlenderbotForCausalLM"),d5o=o(" (Blenderbot model)"),c5o=l(),Pu=a("li"),Qae=a("strong"),f5o=o("blenderbot-small"),m5o=o(" \u2014 "),Z$=a("a"),g5o=o("BlenderbotSmallForCausalLM"),h5o=o(" (BlenderbotSmall model)"),p5o=l(),$u=a("li"),Wae=a("strong"),_5o=o("camembert"),u5o=o(" \u2014 "),eq=a("a"),b5o=o("CamembertForCausalLM"),F5o=o(" (CamemBERT model)"),v5o=l(),qu=a("li"),Hae=a("strong"),T5o=o("ctrl"),M5o=o(" \u2014 "),oq=a("a"),E5o=o("CTRLLMHeadModel"),C5o=o(" (CTRL model)"),w5o=l(),Iu=a("li"),Uae=a("strong"),A5o=o("data2vec-text"),y5o=o(" \u2014 "),rq=a("a"),L5o=o("Data2VecTextForCausalLM"),x5o=o(" (Data2VecText model)"),k5o=l(),ju=a("li"),Jae=a("strong"),S5o=o("electra"),R5o=o(" \u2014 "),tq=a("a"),B5o=o("ElectraForCausalLM"),P5o=o(" (ELECTRA model)"),$5o=l(),Nu=a("li"),Yae=a("strong"),q5o=o("gpt2"),I5o=o(" \u2014 "),aq=a("a"),j5o=o("GPT2LMHeadModel"),N5o=o(" (OpenAI GPT-2 model)"),D5o=l(),Du=a("li"),Kae=a("strong"),G5o=o("gpt_neo"),O5o=o(" \u2014 "),nq=a("a"),V5o=o("GPTNeoForCausalLM"),X5o=o(" (GPT Neo model)"),z5o=l(),Gu=a("li"),Zae=a("strong"),Q5o=o("gptj"),W5o=o(" \u2014 "),sq=a("a"),H5o=o("GPTJForCausalLM"),U5o=o(" (GPT-J model)"),J5o=l(),Ou=a("li"),ene=a("strong"),Y5o=o("marian"),K5o=o(" \u2014 "),lq=a("a"),Z5o=o("MarianForCausalLM"),e2o=o(" (Marian model)"),o2o=l(),Vu=a("li"),one=a("strong"),r2o=o("mbart"),t2o=o(" \u2014 "),iq=a("a"),a2o=o("MBartForCausalLM"),n2o=o(" (mBART model)"),s2o=l(),Xu=a("li"),rne=a("strong"),l2o=o("megatron-bert"),i2o=o(" \u2014 "),dq=a("a"),d2o=o("MegatronBertForCausalLM"),c2o=o(" (MegatronBert model)"),f2o=l(),zu=a("li"),tne=a("strong"),m2o=o("openai-gpt"),g2o=o(" \u2014 "),cq=a("a"),h2o=o("OpenAIGPTLMHeadModel"),p2o=o(" (OpenAI GPT model)"),_2o=l(),Qu=a("li"),ane=a("strong"),u2o=o("pegasus"),b2o=o(" \u2014 "),fq=a("a"),F2o=o("PegasusForCausalLM"),v2o=o(" (Pegasus model)"),T2o=l(),Wu=a("li"),nne=a("strong"),M2o=o("plbart"),E2o=o(" \u2014 "),mq=a("a"),C2o=o("PLBartForCausalLM"),w2o=o(" (PLBart model)"),A2o=l(),Hu=a("li"),sne=a("strong"),y2o=o("prophetnet"),L2o=o(" \u2014 "),gq=a("a"),x2o=o("ProphetNetForCausalLM"),k2o=o(" (ProphetNet model)"),S2o=l(),Uu=a("li"),lne=a("strong"),R2o=o("qdqbert"),B2o=o(" \u2014 "),hq=a("a"),P2o=o("QDQBertLMHeadModel"),$2o=o(" (QDQBert model)"),q2o=l(),Ju=a("li"),ine=a("strong"),I2o=o("reformer"),j2o=o(" \u2014 "),pq=a("a"),N2o=o("ReformerModelWithLMHead"),D2o=o(" (Reformer model)"),G2o=l(),Yu=a("li"),dne=a("strong"),O2o=o("rembert"),V2o=o(" \u2014 "),_q=a("a"),X2o=o("RemBertForCausalLM"),z2o=o(" (RemBERT model)"),Q2o=l(),Ku=a("li"),cne=a("strong"),W2o=o("roberta"),H2o=o(" \u2014 "),uq=a("a"),U2o=o("RobertaForCausalLM"),J2o=o(" (RoBERTa model)"),Y2o=l(),Zu=a("li"),fne=a("strong"),K2o=o("roformer"),Z2o=o(" \u2014 "),bq=a("a"),eFo=o("RoFormerForCausalLM"),oFo=o(" (RoFormer model)"),rFo=l(),e1=a("li"),mne=a("strong"),tFo=o("speech_to_text_2"),aFo=o(" \u2014 "),Fq=a("a"),nFo=o("Speech2Text2ForCausalLM"),sFo=o(" (Speech2Text2 model)"),lFo=l(),o1=a("li"),gne=a("strong"),iFo=o("transfo-xl"),dFo=o(" \u2014 "),vq=a("a"),cFo=o("TransfoXLLMHeadModel"),fFo=o(" (Transformer-XL model)"),mFo=l(),r1=a("li"),hne=a("strong"),gFo=o("trocr"),hFo=o(" \u2014 "),Tq=a("a"),pFo=o("TrOCRForCausalLM"),_Fo=o(" (TrOCR model)"),uFo=l(),t1=a("li"),pne=a("strong"),bFo=o("xglm"),FFo=o(" \u2014 "),Mq=a("a"),vFo=o("XGLMForCausalLM"),TFo=o(" (XGLM model)"),MFo=l(),a1=a("li"),_ne=a("strong"),EFo=o("xlm"),CFo=o(" \u2014 "),Eq=a("a"),wFo=o("XLMWithLMHeadModel"),AFo=o(" (XLM model)"),yFo=l(),n1=a("li"),une=a("strong"),LFo=o("xlm-prophetnet"),xFo=o(" \u2014 "),Cq=a("a"),kFo=o("XLMProphetNetForCausalLM"),SFo=o(" (XLMProphetNet model)"),RFo=l(),s1=a("li"),bne=a("strong"),BFo=o("xlm-roberta"),PFo=o(" \u2014 "),wq=a("a"),$Fo=o("XLMRobertaForCausalLM"),qFo=o(" (XLM-RoBERTa model)"),IFo=l(),l1=a("li"),Fne=a("strong"),jFo=o("xlm-roberta-xl"),NFo=o(" \u2014 "),Aq=a("a"),DFo=o("XLMRobertaXLForCausalLM"),GFo=o(" (XLM-RoBERTa-XL model)"),OFo=l(),i1=a("li"),vne=a("strong"),VFo=o("xlnet"),XFo=o(" \u2014 "),yq=a("a"),zFo=o("XLNetLMHeadModel"),QFo=o(" (XLNet model)"),WFo=l(),d1=a("p"),HFo=o("The model is set in evaluation mode by default using "),Tne=a("code"),UFo=o("model.eval()"),JFo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mne=a("code"),YFo=o("model.train()"),KFo=l(),Ene=a("p"),ZFo=o("Examples:"),evo=l(),f(LC.$$.fragment),ORe=l(),md=a("h2"),c1=a("a"),Cne=a("span"),f(xC.$$.fragment),ovo=l(),wne=a("span"),rvo=o("AutoModelForMaskedLM"),VRe=l(),er=a("div"),f(kC.$$.fragment),tvo=l(),gd=a("p"),avo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Lq=a("a"),nvo=o("from_pretrained()"),svo=o(" class method or the "),xq=a("a"),lvo=o("from_config()"),ivo=o(` class
method.`),dvo=l(),SC=a("p"),cvo=o("This class cannot be instantiated directly using "),Ane=a("code"),fvo=o("__init__()"),mvo=o(" (throws an error)."),gvo=l(),Ur=a("div"),f(RC.$$.fragment),hvo=l(),yne=a("p"),pvo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),_vo=l(),hd=a("p"),uvo=o(`Note:
Loading a model from its configuration file does `),Lne=a("strong"),bvo=o("not"),Fvo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kq=a("a"),vvo=o("from_pretrained()"),Tvo=o(" to load the model weights."),Mvo=l(),xne=a("p"),Evo=o("Examples:"),Cvo=l(),f(BC.$$.fragment),wvo=l(),De=a("div"),f(PC.$$.fragment),Avo=l(),kne=a("p"),yvo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Lvo=l(),Ya=a("p"),xvo=o("The model class to instantiate is selected based on the "),Sne=a("code"),kvo=o("model_type"),Svo=o(` property of the config object (either
passed as an argument or loaded from `),Rne=a("code"),Rvo=o("pretrained_model_name_or_path"),Bvo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bne=a("code"),Pvo=o("pretrained_model_name_or_path"),$vo=o(":"),qvo=l(),q=a("ul"),f1=a("li"),Pne=a("strong"),Ivo=o("albert"),jvo=o(" \u2014 "),Sq=a("a"),Nvo=o("AlbertForMaskedLM"),Dvo=o(" (ALBERT model)"),Gvo=l(),m1=a("li"),$ne=a("strong"),Ovo=o("bart"),Vvo=o(" \u2014 "),Rq=a("a"),Xvo=o("BartForConditionalGeneration"),zvo=o(" (BART model)"),Qvo=l(),g1=a("li"),qne=a("strong"),Wvo=o("bert"),Hvo=o(" \u2014 "),Bq=a("a"),Uvo=o("BertForMaskedLM"),Jvo=o(" (BERT model)"),Yvo=l(),h1=a("li"),Ine=a("strong"),Kvo=o("big_bird"),Zvo=o(" \u2014 "),Pq=a("a"),e6o=o("BigBirdForMaskedLM"),o6o=o(" (BigBird model)"),r6o=l(),p1=a("li"),jne=a("strong"),t6o=o("camembert"),a6o=o(" \u2014 "),$q=a("a"),n6o=o("CamembertForMaskedLM"),s6o=o(" (CamemBERT model)"),l6o=l(),_1=a("li"),Nne=a("strong"),i6o=o("convbert"),d6o=o(" \u2014 "),qq=a("a"),c6o=o("ConvBertForMaskedLM"),f6o=o(" (ConvBERT model)"),m6o=l(),u1=a("li"),Dne=a("strong"),g6o=o("data2vec-text"),h6o=o(" \u2014 "),Iq=a("a"),p6o=o("Data2VecTextForMaskedLM"),_6o=o(" (Data2VecText model)"),u6o=l(),b1=a("li"),Gne=a("strong"),b6o=o("deberta"),F6o=o(" \u2014 "),jq=a("a"),v6o=o("DebertaForMaskedLM"),T6o=o(" (DeBERTa model)"),M6o=l(),F1=a("li"),One=a("strong"),E6o=o("deberta-v2"),C6o=o(" \u2014 "),Nq=a("a"),w6o=o("DebertaV2ForMaskedLM"),A6o=o(" (DeBERTa-v2 model)"),y6o=l(),v1=a("li"),Vne=a("strong"),L6o=o("distilbert"),x6o=o(" \u2014 "),Dq=a("a"),k6o=o("DistilBertForMaskedLM"),S6o=o(" (DistilBERT model)"),R6o=l(),T1=a("li"),Xne=a("strong"),B6o=o("electra"),P6o=o(" \u2014 "),Gq=a("a"),$6o=o("ElectraForMaskedLM"),q6o=o(" (ELECTRA model)"),I6o=l(),M1=a("li"),zne=a("strong"),j6o=o("flaubert"),N6o=o(" \u2014 "),Oq=a("a"),D6o=o("FlaubertWithLMHeadModel"),G6o=o(" (FlauBERT model)"),O6o=l(),E1=a("li"),Qne=a("strong"),V6o=o("fnet"),X6o=o(" \u2014 "),Vq=a("a"),z6o=o("FNetForMaskedLM"),Q6o=o(" (FNet model)"),W6o=l(),C1=a("li"),Wne=a("strong"),H6o=o("funnel"),U6o=o(" \u2014 "),Xq=a("a"),J6o=o("FunnelForMaskedLM"),Y6o=o(" (Funnel Transformer model)"),K6o=l(),w1=a("li"),Hne=a("strong"),Z6o=o("ibert"),e0o=o(" \u2014 "),zq=a("a"),o0o=o("IBertForMaskedLM"),r0o=o(" (I-BERT model)"),t0o=l(),A1=a("li"),Une=a("strong"),a0o=o("layoutlm"),n0o=o(" \u2014 "),Qq=a("a"),s0o=o("LayoutLMForMaskedLM"),l0o=o(" (LayoutLM model)"),i0o=l(),y1=a("li"),Jne=a("strong"),d0o=o("longformer"),c0o=o(" \u2014 "),Wq=a("a"),f0o=o("LongformerForMaskedLM"),m0o=o(" (Longformer model)"),g0o=l(),L1=a("li"),Yne=a("strong"),h0o=o("mbart"),p0o=o(" \u2014 "),Hq=a("a"),_0o=o("MBartForConditionalGeneration"),u0o=o(" (mBART model)"),b0o=l(),x1=a("li"),Kne=a("strong"),F0o=o("megatron-bert"),v0o=o(" \u2014 "),Uq=a("a"),T0o=o("MegatronBertForMaskedLM"),M0o=o(" (MegatronBert model)"),E0o=l(),k1=a("li"),Zne=a("strong"),C0o=o("mobilebert"),w0o=o(" \u2014 "),Jq=a("a"),A0o=o("MobileBertForMaskedLM"),y0o=o(" (MobileBERT model)"),L0o=l(),S1=a("li"),ese=a("strong"),x0o=o("mpnet"),k0o=o(" \u2014 "),Yq=a("a"),S0o=o("MPNetForMaskedLM"),R0o=o(" (MPNet model)"),B0o=l(),R1=a("li"),ose=a("strong"),P0o=o("nystromformer"),$0o=o(" \u2014 "),Kq=a("a"),q0o=o("NystromformerForMaskedLM"),I0o=o(" (Nystromformer model)"),j0o=l(),B1=a("li"),rse=a("strong"),N0o=o("perceiver"),D0o=o(" \u2014 "),Zq=a("a"),G0o=o("PerceiverForMaskedLM"),O0o=o(" (Perceiver model)"),V0o=l(),P1=a("li"),tse=a("strong"),X0o=o("qdqbert"),z0o=o(" \u2014 "),eI=a("a"),Q0o=o("QDQBertForMaskedLM"),W0o=o(" (QDQBert model)"),H0o=l(),$1=a("li"),ase=a("strong"),U0o=o("reformer"),J0o=o(" \u2014 "),oI=a("a"),Y0o=o("ReformerForMaskedLM"),K0o=o(" (Reformer model)"),Z0o=l(),q1=a("li"),nse=a("strong"),eTo=o("rembert"),oTo=o(" \u2014 "),rI=a("a"),rTo=o("RemBertForMaskedLM"),tTo=o(" (RemBERT model)"),aTo=l(),I1=a("li"),sse=a("strong"),nTo=o("roberta"),sTo=o(" \u2014 "),tI=a("a"),lTo=o("RobertaForMaskedLM"),iTo=o(" (RoBERTa model)"),dTo=l(),j1=a("li"),lse=a("strong"),cTo=o("roformer"),fTo=o(" \u2014 "),aI=a("a"),mTo=o("RoFormerForMaskedLM"),gTo=o(" (RoFormer model)"),hTo=l(),N1=a("li"),ise=a("strong"),pTo=o("squeezebert"),_To=o(" \u2014 "),nI=a("a"),uTo=o("SqueezeBertForMaskedLM"),bTo=o(" (SqueezeBERT model)"),FTo=l(),D1=a("li"),dse=a("strong"),vTo=o("tapas"),TTo=o(" \u2014 "),sI=a("a"),MTo=o("TapasForMaskedLM"),ETo=o(" (TAPAS model)"),CTo=l(),G1=a("li"),cse=a("strong"),wTo=o("wav2vec2"),ATo=o(" \u2014 "),fse=a("code"),yTo=o("Wav2Vec2ForMaskedLM"),LTo=o(" (Wav2Vec2 model)"),xTo=l(),O1=a("li"),mse=a("strong"),kTo=o("xlm"),STo=o(" \u2014 "),lI=a("a"),RTo=o("XLMWithLMHeadModel"),BTo=o(" (XLM model)"),PTo=l(),V1=a("li"),gse=a("strong"),$To=o("xlm-roberta"),qTo=o(" \u2014 "),iI=a("a"),ITo=o("XLMRobertaForMaskedLM"),jTo=o(" (XLM-RoBERTa model)"),NTo=l(),X1=a("li"),hse=a("strong"),DTo=o("xlm-roberta-xl"),GTo=o(" \u2014 "),dI=a("a"),OTo=o("XLMRobertaXLForMaskedLM"),VTo=o(" (XLM-RoBERTa-XL model)"),XTo=l(),z1=a("li"),pse=a("strong"),zTo=o("yoso"),QTo=o(" \u2014 "),cI=a("a"),WTo=o("YosoForMaskedLM"),HTo=o(" (YOSO model)"),UTo=l(),Q1=a("p"),JTo=o("The model is set in evaluation mode by default using "),_se=a("code"),YTo=o("model.eval()"),KTo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),use=a("code"),ZTo=o("model.train()"),e8o=l(),bse=a("p"),o8o=o("Examples:"),r8o=l(),f($C.$$.fragment),XRe=l(),pd=a("h2"),W1=a("a"),Fse=a("span"),f(qC.$$.fragment),t8o=l(),vse=a("span"),a8o=o("AutoModelForSeq2SeqLM"),zRe=l(),or=a("div"),f(IC.$$.fragment),n8o=l(),_d=a("p"),s8o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),fI=a("a"),l8o=o("from_pretrained()"),i8o=o(" class method or the "),mI=a("a"),d8o=o("from_config()"),c8o=o(` class
method.`),f8o=l(),jC=a("p"),m8o=o("This class cannot be instantiated directly using "),Tse=a("code"),g8o=o("__init__()"),h8o=o(" (throws an error)."),p8o=l(),Jr=a("div"),f(NC.$$.fragment),_8o=l(),Mse=a("p"),u8o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),b8o=l(),ud=a("p"),F8o=o(`Note:
Loading a model from its configuration file does `),Ese=a("strong"),v8o=o("not"),T8o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gI=a("a"),M8o=o("from_pretrained()"),E8o=o(" to load the model weights."),C8o=l(),Cse=a("p"),w8o=o("Examples:"),A8o=l(),f(DC.$$.fragment),y8o=l(),Ge=a("div"),f(GC.$$.fragment),L8o=l(),wse=a("p"),x8o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),k8o=l(),Ka=a("p"),S8o=o("The model class to instantiate is selected based on the "),Ase=a("code"),R8o=o("model_type"),B8o=o(` property of the config object (either
passed as an argument or loaded from `),yse=a("code"),P8o=o("pretrained_model_name_or_path"),$8o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lse=a("code"),q8o=o("pretrained_model_name_or_path"),I8o=o(":"),j8o=l(),se=a("ul"),H1=a("li"),xse=a("strong"),N8o=o("bart"),D8o=o(" \u2014 "),hI=a("a"),G8o=o("BartForConditionalGeneration"),O8o=o(" (BART model)"),V8o=l(),U1=a("li"),kse=a("strong"),X8o=o("bigbird_pegasus"),z8o=o(" \u2014 "),pI=a("a"),Q8o=o("BigBirdPegasusForConditionalGeneration"),W8o=o(" (BigBirdPegasus model)"),H8o=l(),J1=a("li"),Sse=a("strong"),U8o=o("blenderbot"),J8o=o(" \u2014 "),_I=a("a"),Y8o=o("BlenderbotForConditionalGeneration"),K8o=o(" (Blenderbot model)"),Z8o=l(),Y1=a("li"),Rse=a("strong"),eMo=o("blenderbot-small"),oMo=o(" \u2014 "),uI=a("a"),rMo=o("BlenderbotSmallForConditionalGeneration"),tMo=o(" (BlenderbotSmall model)"),aMo=l(),K1=a("li"),Bse=a("strong"),nMo=o("encoder-decoder"),sMo=o(" \u2014 "),bI=a("a"),lMo=o("EncoderDecoderModel"),iMo=o(" (Encoder decoder model)"),dMo=l(),Z1=a("li"),Pse=a("strong"),cMo=o("fsmt"),fMo=o(" \u2014 "),FI=a("a"),mMo=o("FSMTForConditionalGeneration"),gMo=o(" (FairSeq Machine-Translation model)"),hMo=l(),eb=a("li"),$se=a("strong"),pMo=o("led"),_Mo=o(" \u2014 "),vI=a("a"),uMo=o("LEDForConditionalGeneration"),bMo=o(" (LED model)"),FMo=l(),ob=a("li"),qse=a("strong"),vMo=o("m2m_100"),TMo=o(" \u2014 "),TI=a("a"),MMo=o("M2M100ForConditionalGeneration"),EMo=o(" (M2M100 model)"),CMo=l(),rb=a("li"),Ise=a("strong"),wMo=o("marian"),AMo=o(" \u2014 "),MI=a("a"),yMo=o("MarianMTModel"),LMo=o(" (Marian model)"),xMo=l(),tb=a("li"),jse=a("strong"),kMo=o("mbart"),SMo=o(" \u2014 "),EI=a("a"),RMo=o("MBartForConditionalGeneration"),BMo=o(" (mBART model)"),PMo=l(),ab=a("li"),Nse=a("strong"),$Mo=o("mt5"),qMo=o(" \u2014 "),CI=a("a"),IMo=o("MT5ForConditionalGeneration"),jMo=o(" (mT5 model)"),NMo=l(),nb=a("li"),Dse=a("strong"),DMo=o("pegasus"),GMo=o(" \u2014 "),wI=a("a"),OMo=o("PegasusForConditionalGeneration"),VMo=o(" (Pegasus model)"),XMo=l(),sb=a("li"),Gse=a("strong"),zMo=o("plbart"),QMo=o(" \u2014 "),AI=a("a"),WMo=o("PLBartForConditionalGeneration"),HMo=o(" (PLBart model)"),UMo=l(),lb=a("li"),Ose=a("strong"),JMo=o("prophetnet"),YMo=o(" \u2014 "),yI=a("a"),KMo=o("ProphetNetForConditionalGeneration"),ZMo=o(" (ProphetNet model)"),e4o=l(),ib=a("li"),Vse=a("strong"),o4o=o("t5"),r4o=o(" \u2014 "),LI=a("a"),t4o=o("T5ForConditionalGeneration"),a4o=o(" (T5 model)"),n4o=l(),db=a("li"),Xse=a("strong"),s4o=o("xlm-prophetnet"),l4o=o(" \u2014 "),xI=a("a"),i4o=o("XLMProphetNetForConditionalGeneration"),d4o=o(" (XLMProphetNet model)"),c4o=l(),cb=a("p"),f4o=o("The model is set in evaluation mode by default using "),zse=a("code"),m4o=o("model.eval()"),g4o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qse=a("code"),h4o=o("model.train()"),p4o=l(),Wse=a("p"),_4o=o("Examples:"),u4o=l(),f(OC.$$.fragment),QRe=l(),bd=a("h2"),fb=a("a"),Hse=a("span"),f(VC.$$.fragment),b4o=l(),Use=a("span"),F4o=o("AutoModelForSequenceClassification"),WRe=l(),rr=a("div"),f(XC.$$.fragment),v4o=l(),Fd=a("p"),T4o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),kI=a("a"),M4o=o("from_pretrained()"),E4o=o(" class method or the "),SI=a("a"),C4o=o("from_config()"),w4o=o(` class
method.`),A4o=l(),zC=a("p"),y4o=o("This class cannot be instantiated directly using "),Jse=a("code"),L4o=o("__init__()"),x4o=o(" (throws an error)."),k4o=l(),Yr=a("div"),f(QC.$$.fragment),S4o=l(),Yse=a("p"),R4o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),B4o=l(),vd=a("p"),P4o=o(`Note:
Loading a model from its configuration file does `),Kse=a("strong"),$4o=o("not"),q4o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RI=a("a"),I4o=o("from_pretrained()"),j4o=o(" to load the model weights."),N4o=l(),Zse=a("p"),D4o=o("Examples:"),G4o=l(),f(WC.$$.fragment),O4o=l(),Oe=a("div"),f(HC.$$.fragment),V4o=l(),ele=a("p"),X4o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),z4o=l(),Za=a("p"),Q4o=o("The model class to instantiate is selected based on the "),ole=a("code"),W4o=o("model_type"),H4o=o(` property of the config object (either
passed as an argument or loaded from `),rle=a("code"),U4o=o("pretrained_model_name_or_path"),J4o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tle=a("code"),Y4o=o("pretrained_model_name_or_path"),K4o=o(":"),Z4o=l(),y=a("ul"),mb=a("li"),ale=a("strong"),eEo=o("albert"),oEo=o(" \u2014 "),BI=a("a"),rEo=o("AlbertForSequenceClassification"),tEo=o(" (ALBERT model)"),aEo=l(),gb=a("li"),nle=a("strong"),nEo=o("bart"),sEo=o(" \u2014 "),PI=a("a"),lEo=o("BartForSequenceClassification"),iEo=o(" (BART model)"),dEo=l(),hb=a("li"),sle=a("strong"),cEo=o("bert"),fEo=o(" \u2014 "),$I=a("a"),mEo=o("BertForSequenceClassification"),gEo=o(" (BERT model)"),hEo=l(),pb=a("li"),lle=a("strong"),pEo=o("big_bird"),_Eo=o(" \u2014 "),qI=a("a"),uEo=o("BigBirdForSequenceClassification"),bEo=o(" (BigBird model)"),FEo=l(),_b=a("li"),ile=a("strong"),vEo=o("bigbird_pegasus"),TEo=o(" \u2014 "),II=a("a"),MEo=o("BigBirdPegasusForSequenceClassification"),EEo=o(" (BigBirdPegasus model)"),CEo=l(),ub=a("li"),dle=a("strong"),wEo=o("camembert"),AEo=o(" \u2014 "),jI=a("a"),yEo=o("CamembertForSequenceClassification"),LEo=o(" (CamemBERT model)"),xEo=l(),bb=a("li"),cle=a("strong"),kEo=o("canine"),SEo=o(" \u2014 "),NI=a("a"),REo=o("CanineForSequenceClassification"),BEo=o(" (Canine model)"),PEo=l(),Fb=a("li"),fle=a("strong"),$Eo=o("convbert"),qEo=o(" \u2014 "),DI=a("a"),IEo=o("ConvBertForSequenceClassification"),jEo=o(" (ConvBERT model)"),NEo=l(),vb=a("li"),mle=a("strong"),DEo=o("ctrl"),GEo=o(" \u2014 "),GI=a("a"),OEo=o("CTRLForSequenceClassification"),VEo=o(" (CTRL model)"),XEo=l(),Tb=a("li"),gle=a("strong"),zEo=o("data2vec-text"),QEo=o(" \u2014 "),OI=a("a"),WEo=o("Data2VecTextForSequenceClassification"),HEo=o(" (Data2VecText model)"),UEo=l(),Mb=a("li"),hle=a("strong"),JEo=o("deberta"),YEo=o(" \u2014 "),VI=a("a"),KEo=o("DebertaForSequenceClassification"),ZEo=o(" (DeBERTa model)"),eCo=l(),Eb=a("li"),ple=a("strong"),oCo=o("deberta-v2"),rCo=o(" \u2014 "),XI=a("a"),tCo=o("DebertaV2ForSequenceClassification"),aCo=o(" (DeBERTa-v2 model)"),nCo=l(),Cb=a("li"),_le=a("strong"),sCo=o("distilbert"),lCo=o(" \u2014 "),zI=a("a"),iCo=o("DistilBertForSequenceClassification"),dCo=o(" (DistilBERT model)"),cCo=l(),wb=a("li"),ule=a("strong"),fCo=o("electra"),mCo=o(" \u2014 "),QI=a("a"),gCo=o("ElectraForSequenceClassification"),hCo=o(" (ELECTRA model)"),pCo=l(),Ab=a("li"),ble=a("strong"),_Co=o("flaubert"),uCo=o(" \u2014 "),WI=a("a"),bCo=o("FlaubertForSequenceClassification"),FCo=o(" (FlauBERT model)"),vCo=l(),yb=a("li"),Fle=a("strong"),TCo=o("fnet"),MCo=o(" \u2014 "),HI=a("a"),ECo=o("FNetForSequenceClassification"),CCo=o(" (FNet model)"),wCo=l(),Lb=a("li"),vle=a("strong"),ACo=o("funnel"),yCo=o(" \u2014 "),UI=a("a"),LCo=o("FunnelForSequenceClassification"),xCo=o(" (Funnel Transformer model)"),kCo=l(),xb=a("li"),Tle=a("strong"),SCo=o("gpt2"),RCo=o(" \u2014 "),JI=a("a"),BCo=o("GPT2ForSequenceClassification"),PCo=o(" (OpenAI GPT-2 model)"),$Co=l(),kb=a("li"),Mle=a("strong"),qCo=o("gpt_neo"),ICo=o(" \u2014 "),YI=a("a"),jCo=o("GPTNeoForSequenceClassification"),NCo=o(" (GPT Neo model)"),DCo=l(),Sb=a("li"),Ele=a("strong"),GCo=o("gptj"),OCo=o(" \u2014 "),KI=a("a"),VCo=o("GPTJForSequenceClassification"),XCo=o(" (GPT-J model)"),zCo=l(),Rb=a("li"),Cle=a("strong"),QCo=o("ibert"),WCo=o(" \u2014 "),ZI=a("a"),HCo=o("IBertForSequenceClassification"),UCo=o(" (I-BERT model)"),JCo=l(),Bb=a("li"),wle=a("strong"),YCo=o("layoutlm"),KCo=o(" \u2014 "),ej=a("a"),ZCo=o("LayoutLMForSequenceClassification"),e3o=o(" (LayoutLM model)"),o3o=l(),Pb=a("li"),Ale=a("strong"),r3o=o("layoutlmv2"),t3o=o(" \u2014 "),oj=a("a"),a3o=o("LayoutLMv2ForSequenceClassification"),n3o=o(" (LayoutLMv2 model)"),s3o=l(),$b=a("li"),yle=a("strong"),l3o=o("led"),i3o=o(" \u2014 "),rj=a("a"),d3o=o("LEDForSequenceClassification"),c3o=o(" (LED model)"),f3o=l(),qb=a("li"),Lle=a("strong"),m3o=o("longformer"),g3o=o(" \u2014 "),tj=a("a"),h3o=o("LongformerForSequenceClassification"),p3o=o(" (Longformer model)"),_3o=l(),Ib=a("li"),xle=a("strong"),u3o=o("mbart"),b3o=o(" \u2014 "),aj=a("a"),F3o=o("MBartForSequenceClassification"),v3o=o(" (mBART model)"),T3o=l(),jb=a("li"),kle=a("strong"),M3o=o("megatron-bert"),E3o=o(" \u2014 "),nj=a("a"),C3o=o("MegatronBertForSequenceClassification"),w3o=o(" (MegatronBert model)"),A3o=l(),Nb=a("li"),Sle=a("strong"),y3o=o("mobilebert"),L3o=o(" \u2014 "),sj=a("a"),x3o=o("MobileBertForSequenceClassification"),k3o=o(" (MobileBERT model)"),S3o=l(),Db=a("li"),Rle=a("strong"),R3o=o("mpnet"),B3o=o(" \u2014 "),lj=a("a"),P3o=o("MPNetForSequenceClassification"),$3o=o(" (MPNet model)"),q3o=l(),Gb=a("li"),Ble=a("strong"),I3o=o("nystromformer"),j3o=o(" \u2014 "),ij=a("a"),N3o=o("NystromformerForSequenceClassification"),D3o=o(" (Nystromformer model)"),G3o=l(),Ob=a("li"),Ple=a("strong"),O3o=o("openai-gpt"),V3o=o(" \u2014 "),dj=a("a"),X3o=o("OpenAIGPTForSequenceClassification"),z3o=o(" (OpenAI GPT model)"),Q3o=l(),Vb=a("li"),$le=a("strong"),W3o=o("perceiver"),H3o=o(" \u2014 "),cj=a("a"),U3o=o("PerceiverForSequenceClassification"),J3o=o(" (Perceiver model)"),Y3o=l(),Xb=a("li"),qle=a("strong"),K3o=o("plbart"),Z3o=o(" \u2014 "),fj=a("a"),ewo=o("PLBartForSequenceClassification"),owo=o(" (PLBart model)"),rwo=l(),zb=a("li"),Ile=a("strong"),two=o("qdqbert"),awo=o(" \u2014 "),mj=a("a"),nwo=o("QDQBertForSequenceClassification"),swo=o(" (QDQBert model)"),lwo=l(),Qb=a("li"),jle=a("strong"),iwo=o("reformer"),dwo=o(" \u2014 "),gj=a("a"),cwo=o("ReformerForSequenceClassification"),fwo=o(" (Reformer model)"),mwo=l(),Wb=a("li"),Nle=a("strong"),gwo=o("rembert"),hwo=o(" \u2014 "),hj=a("a"),pwo=o("RemBertForSequenceClassification"),_wo=o(" (RemBERT model)"),uwo=l(),Hb=a("li"),Dle=a("strong"),bwo=o("roberta"),Fwo=o(" \u2014 "),pj=a("a"),vwo=o("RobertaForSequenceClassification"),Two=o(" (RoBERTa model)"),Mwo=l(),Ub=a("li"),Gle=a("strong"),Ewo=o("roformer"),Cwo=o(" \u2014 "),_j=a("a"),wwo=o("RoFormerForSequenceClassification"),Awo=o(" (RoFormer model)"),ywo=l(),Jb=a("li"),Ole=a("strong"),Lwo=o("squeezebert"),xwo=o(" \u2014 "),uj=a("a"),kwo=o("SqueezeBertForSequenceClassification"),Swo=o(" (SqueezeBERT model)"),Rwo=l(),Yb=a("li"),Vle=a("strong"),Bwo=o("tapas"),Pwo=o(" \u2014 "),bj=a("a"),$wo=o("TapasForSequenceClassification"),qwo=o(" (TAPAS model)"),Iwo=l(),Kb=a("li"),Xle=a("strong"),jwo=o("transfo-xl"),Nwo=o(" \u2014 "),Fj=a("a"),Dwo=o("TransfoXLForSequenceClassification"),Gwo=o(" (Transformer-XL model)"),Owo=l(),Zb=a("li"),zle=a("strong"),Vwo=o("xlm"),Xwo=o(" \u2014 "),vj=a("a"),zwo=o("XLMForSequenceClassification"),Qwo=o(" (XLM model)"),Wwo=l(),e5=a("li"),Qle=a("strong"),Hwo=o("xlm-roberta"),Uwo=o(" \u2014 "),Tj=a("a"),Jwo=o("XLMRobertaForSequenceClassification"),Ywo=o(" (XLM-RoBERTa model)"),Kwo=l(),o5=a("li"),Wle=a("strong"),Zwo=o("xlm-roberta-xl"),eAo=o(" \u2014 "),Mj=a("a"),oAo=o("XLMRobertaXLForSequenceClassification"),rAo=o(" (XLM-RoBERTa-XL model)"),tAo=l(),r5=a("li"),Hle=a("strong"),aAo=o("xlnet"),nAo=o(" \u2014 "),Ej=a("a"),sAo=o("XLNetForSequenceClassification"),lAo=o(" (XLNet model)"),iAo=l(),t5=a("li"),Ule=a("strong"),dAo=o("yoso"),cAo=o(" \u2014 "),Cj=a("a"),fAo=o("YosoForSequenceClassification"),mAo=o(" (YOSO model)"),gAo=l(),a5=a("p"),hAo=o("The model is set in evaluation mode by default using "),Jle=a("code"),pAo=o("model.eval()"),_Ao=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yle=a("code"),uAo=o("model.train()"),bAo=l(),Kle=a("p"),FAo=o("Examples:"),vAo=l(),f(UC.$$.fragment),HRe=l(),Td=a("h2"),n5=a("a"),Zle=a("span"),f(JC.$$.fragment),TAo=l(),eie=a("span"),MAo=o("AutoModelForMultipleChoice"),URe=l(),tr=a("div"),f(YC.$$.fragment),EAo=l(),Md=a("p"),CAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),wj=a("a"),wAo=o("from_pretrained()"),AAo=o(" class method or the "),Aj=a("a"),yAo=o("from_config()"),LAo=o(` class
method.`),xAo=l(),KC=a("p"),kAo=o("This class cannot be instantiated directly using "),oie=a("code"),SAo=o("__init__()"),RAo=o(" (throws an error)."),BAo=l(),Kr=a("div"),f(ZC.$$.fragment),PAo=l(),rie=a("p"),$Ao=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),qAo=l(),Ed=a("p"),IAo=o(`Note:
Loading a model from its configuration file does `),tie=a("strong"),jAo=o("not"),NAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yj=a("a"),DAo=o("from_pretrained()"),GAo=o(" to load the model weights."),OAo=l(),aie=a("p"),VAo=o("Examples:"),XAo=l(),f(e3.$$.fragment),zAo=l(),Ve=a("div"),f(o3.$$.fragment),QAo=l(),nie=a("p"),WAo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),HAo=l(),en=a("p"),UAo=o("The model class to instantiate is selected based on the "),sie=a("code"),JAo=o("model_type"),YAo=o(` property of the config object (either
passed as an argument or loaded from `),lie=a("code"),KAo=o("pretrained_model_name_or_path"),ZAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iie=a("code"),eyo=o("pretrained_model_name_or_path"),oyo=o(":"),ryo=l(),G=a("ul"),s5=a("li"),die=a("strong"),tyo=o("albert"),ayo=o(" \u2014 "),Lj=a("a"),nyo=o("AlbertForMultipleChoice"),syo=o(" (ALBERT model)"),lyo=l(),l5=a("li"),cie=a("strong"),iyo=o("bert"),dyo=o(" \u2014 "),xj=a("a"),cyo=o("BertForMultipleChoice"),fyo=o(" (BERT model)"),myo=l(),i5=a("li"),fie=a("strong"),gyo=o("big_bird"),hyo=o(" \u2014 "),kj=a("a"),pyo=o("BigBirdForMultipleChoice"),_yo=o(" (BigBird model)"),uyo=l(),d5=a("li"),mie=a("strong"),byo=o("camembert"),Fyo=o(" \u2014 "),Sj=a("a"),vyo=o("CamembertForMultipleChoice"),Tyo=o(" (CamemBERT model)"),Myo=l(),c5=a("li"),gie=a("strong"),Eyo=o("canine"),Cyo=o(" \u2014 "),Rj=a("a"),wyo=o("CanineForMultipleChoice"),Ayo=o(" (Canine model)"),yyo=l(),f5=a("li"),hie=a("strong"),Lyo=o("convbert"),xyo=o(" \u2014 "),Bj=a("a"),kyo=o("ConvBertForMultipleChoice"),Syo=o(" (ConvBERT model)"),Ryo=l(),m5=a("li"),pie=a("strong"),Byo=o("data2vec-text"),Pyo=o(" \u2014 "),Pj=a("a"),$yo=o("Data2VecTextForMultipleChoice"),qyo=o(" (Data2VecText model)"),Iyo=l(),g5=a("li"),_ie=a("strong"),jyo=o("distilbert"),Nyo=o(" \u2014 "),$j=a("a"),Dyo=o("DistilBertForMultipleChoice"),Gyo=o(" (DistilBERT model)"),Oyo=l(),h5=a("li"),uie=a("strong"),Vyo=o("electra"),Xyo=o(" \u2014 "),qj=a("a"),zyo=o("ElectraForMultipleChoice"),Qyo=o(" (ELECTRA model)"),Wyo=l(),p5=a("li"),bie=a("strong"),Hyo=o("flaubert"),Uyo=o(" \u2014 "),Ij=a("a"),Jyo=o("FlaubertForMultipleChoice"),Yyo=o(" (FlauBERT model)"),Kyo=l(),_5=a("li"),Fie=a("strong"),Zyo=o("fnet"),eLo=o(" \u2014 "),jj=a("a"),oLo=o("FNetForMultipleChoice"),rLo=o(" (FNet model)"),tLo=l(),u5=a("li"),vie=a("strong"),aLo=o("funnel"),nLo=o(" \u2014 "),Nj=a("a"),sLo=o("FunnelForMultipleChoice"),lLo=o(" (Funnel Transformer model)"),iLo=l(),b5=a("li"),Tie=a("strong"),dLo=o("ibert"),cLo=o(" \u2014 "),Dj=a("a"),fLo=o("IBertForMultipleChoice"),mLo=o(" (I-BERT model)"),gLo=l(),F5=a("li"),Mie=a("strong"),hLo=o("longformer"),pLo=o(" \u2014 "),Gj=a("a"),_Lo=o("LongformerForMultipleChoice"),uLo=o(" (Longformer model)"),bLo=l(),v5=a("li"),Eie=a("strong"),FLo=o("megatron-bert"),vLo=o(" \u2014 "),Oj=a("a"),TLo=o("MegatronBertForMultipleChoice"),MLo=o(" (MegatronBert model)"),ELo=l(),T5=a("li"),Cie=a("strong"),CLo=o("mobilebert"),wLo=o(" \u2014 "),Vj=a("a"),ALo=o("MobileBertForMultipleChoice"),yLo=o(" (MobileBERT model)"),LLo=l(),M5=a("li"),wie=a("strong"),xLo=o("mpnet"),kLo=o(" \u2014 "),Xj=a("a"),SLo=o("MPNetForMultipleChoice"),RLo=o(" (MPNet model)"),BLo=l(),E5=a("li"),Aie=a("strong"),PLo=o("nystromformer"),$Lo=o(" \u2014 "),zj=a("a"),qLo=o("NystromformerForMultipleChoice"),ILo=o(" (Nystromformer model)"),jLo=l(),C5=a("li"),yie=a("strong"),NLo=o("qdqbert"),DLo=o(" \u2014 "),Qj=a("a"),GLo=o("QDQBertForMultipleChoice"),OLo=o(" (QDQBert model)"),VLo=l(),w5=a("li"),Lie=a("strong"),XLo=o("rembert"),zLo=o(" \u2014 "),Wj=a("a"),QLo=o("RemBertForMultipleChoice"),WLo=o(" (RemBERT model)"),HLo=l(),A5=a("li"),xie=a("strong"),ULo=o("roberta"),JLo=o(" \u2014 "),Hj=a("a"),YLo=o("RobertaForMultipleChoice"),KLo=o(" (RoBERTa model)"),ZLo=l(),y5=a("li"),kie=a("strong"),e7o=o("roformer"),o7o=o(" \u2014 "),Uj=a("a"),r7o=o("RoFormerForMultipleChoice"),t7o=o(" (RoFormer model)"),a7o=l(),L5=a("li"),Sie=a("strong"),n7o=o("squeezebert"),s7o=o(" \u2014 "),Jj=a("a"),l7o=o("SqueezeBertForMultipleChoice"),i7o=o(" (SqueezeBERT model)"),d7o=l(),x5=a("li"),Rie=a("strong"),c7o=o("xlm"),f7o=o(" \u2014 "),Yj=a("a"),m7o=o("XLMForMultipleChoice"),g7o=o(" (XLM model)"),h7o=l(),k5=a("li"),Bie=a("strong"),p7o=o("xlm-roberta"),_7o=o(" \u2014 "),Kj=a("a"),u7o=o("XLMRobertaForMultipleChoice"),b7o=o(" (XLM-RoBERTa model)"),F7o=l(),S5=a("li"),Pie=a("strong"),v7o=o("xlm-roberta-xl"),T7o=o(" \u2014 "),Zj=a("a"),M7o=o("XLMRobertaXLForMultipleChoice"),E7o=o(" (XLM-RoBERTa-XL model)"),C7o=l(),R5=a("li"),$ie=a("strong"),w7o=o("xlnet"),A7o=o(" \u2014 "),eN=a("a"),y7o=o("XLNetForMultipleChoice"),L7o=o(" (XLNet model)"),x7o=l(),B5=a("li"),qie=a("strong"),k7o=o("yoso"),S7o=o(" \u2014 "),oN=a("a"),R7o=o("YosoForMultipleChoice"),B7o=o(" (YOSO model)"),P7o=l(),P5=a("p"),$7o=o("The model is set in evaluation mode by default using "),Iie=a("code"),q7o=o("model.eval()"),I7o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jie=a("code"),j7o=o("model.train()"),N7o=l(),Nie=a("p"),D7o=o("Examples:"),G7o=l(),f(r3.$$.fragment),JRe=l(),Cd=a("h2"),$5=a("a"),Die=a("span"),f(t3.$$.fragment),O7o=l(),Gie=a("span"),V7o=o("AutoModelForNextSentencePrediction"),YRe=l(),ar=a("div"),f(a3.$$.fragment),X7o=l(),wd=a("p"),z7o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),rN=a("a"),Q7o=o("from_pretrained()"),W7o=o(" class method or the "),tN=a("a"),H7o=o("from_config()"),U7o=o(` class
method.`),J7o=l(),n3=a("p"),Y7o=o("This class cannot be instantiated directly using "),Oie=a("code"),K7o=o("__init__()"),Z7o=o(" (throws an error)."),e9o=l(),Zr=a("div"),f(s3.$$.fragment),o9o=l(),Vie=a("p"),r9o=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),t9o=l(),Ad=a("p"),a9o=o(`Note:
Loading a model from its configuration file does `),Xie=a("strong"),n9o=o("not"),s9o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aN=a("a"),l9o=o("from_pretrained()"),i9o=o(" to load the model weights."),d9o=l(),zie=a("p"),c9o=o("Examples:"),f9o=l(),f(l3.$$.fragment),m9o=l(),Xe=a("div"),f(i3.$$.fragment),g9o=l(),Qie=a("p"),h9o=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),p9o=l(),on=a("p"),_9o=o("The model class to instantiate is selected based on the "),Wie=a("code"),u9o=o("model_type"),b9o=o(` property of the config object (either
passed as an argument or loaded from `),Hie=a("code"),F9o=o("pretrained_model_name_or_path"),v9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uie=a("code"),T9o=o("pretrained_model_name_or_path"),M9o=o(":"),E9o=l(),ma=a("ul"),q5=a("li"),Jie=a("strong"),C9o=o("bert"),w9o=o(" \u2014 "),nN=a("a"),A9o=o("BertForNextSentencePrediction"),y9o=o(" (BERT model)"),L9o=l(),I5=a("li"),Yie=a("strong"),x9o=o("fnet"),k9o=o(" \u2014 "),sN=a("a"),S9o=o("FNetForNextSentencePrediction"),R9o=o(" (FNet model)"),B9o=l(),j5=a("li"),Kie=a("strong"),P9o=o("megatron-bert"),$9o=o(" \u2014 "),lN=a("a"),q9o=o("MegatronBertForNextSentencePrediction"),I9o=o(" (MegatronBert model)"),j9o=l(),N5=a("li"),Zie=a("strong"),N9o=o("mobilebert"),D9o=o(" \u2014 "),iN=a("a"),G9o=o("MobileBertForNextSentencePrediction"),O9o=o(" (MobileBERT model)"),V9o=l(),D5=a("li"),ede=a("strong"),X9o=o("qdqbert"),z9o=o(" \u2014 "),dN=a("a"),Q9o=o("QDQBertForNextSentencePrediction"),W9o=o(" (QDQBert model)"),H9o=l(),G5=a("p"),U9o=o("The model is set in evaluation mode by default using "),ode=a("code"),J9o=o("model.eval()"),Y9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rde=a("code"),K9o=o("model.train()"),Z9o=l(),tde=a("p"),exo=o("Examples:"),oxo=l(),f(d3.$$.fragment),KRe=l(),yd=a("h2"),O5=a("a"),ade=a("span"),f(c3.$$.fragment),rxo=l(),nde=a("span"),txo=o("AutoModelForTokenClassification"),ZRe=l(),nr=a("div"),f(f3.$$.fragment),axo=l(),Ld=a("p"),nxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),cN=a("a"),sxo=o("from_pretrained()"),lxo=o(" class method or the "),fN=a("a"),ixo=o("from_config()"),dxo=o(` class
method.`),cxo=l(),m3=a("p"),fxo=o("This class cannot be instantiated directly using "),sde=a("code"),mxo=o("__init__()"),gxo=o(" (throws an error)."),hxo=l(),et=a("div"),f(g3.$$.fragment),pxo=l(),lde=a("p"),_xo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),uxo=l(),xd=a("p"),bxo=o(`Note:
Loading a model from its configuration file does `),ide=a("strong"),Fxo=o("not"),vxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mN=a("a"),Txo=o("from_pretrained()"),Mxo=o(" to load the model weights."),Exo=l(),dde=a("p"),Cxo=o("Examples:"),wxo=l(),f(h3.$$.fragment),Axo=l(),ze=a("div"),f(p3.$$.fragment),yxo=l(),cde=a("p"),Lxo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),xxo=l(),rn=a("p"),kxo=o("The model class to instantiate is selected based on the "),fde=a("code"),Sxo=o("model_type"),Rxo=o(` property of the config object (either
passed as an argument or loaded from `),mde=a("code"),Bxo=o("pretrained_model_name_or_path"),Pxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gde=a("code"),$xo=o("pretrained_model_name_or_path"),qxo=o(":"),Ixo=l(),N=a("ul"),V5=a("li"),hde=a("strong"),jxo=o("albert"),Nxo=o(" \u2014 "),gN=a("a"),Dxo=o("AlbertForTokenClassification"),Gxo=o(" (ALBERT model)"),Oxo=l(),X5=a("li"),pde=a("strong"),Vxo=o("bert"),Xxo=o(" \u2014 "),hN=a("a"),zxo=o("BertForTokenClassification"),Qxo=o(" (BERT model)"),Wxo=l(),z5=a("li"),_de=a("strong"),Hxo=o("big_bird"),Uxo=o(" \u2014 "),pN=a("a"),Jxo=o("BigBirdForTokenClassification"),Yxo=o(" (BigBird model)"),Kxo=l(),Q5=a("li"),ude=a("strong"),Zxo=o("camembert"),eko=o(" \u2014 "),_N=a("a"),oko=o("CamembertForTokenClassification"),rko=o(" (CamemBERT model)"),tko=l(),W5=a("li"),bde=a("strong"),ako=o("canine"),nko=o(" \u2014 "),uN=a("a"),sko=o("CanineForTokenClassification"),lko=o(" (Canine model)"),iko=l(),H5=a("li"),Fde=a("strong"),dko=o("convbert"),cko=o(" \u2014 "),bN=a("a"),fko=o("ConvBertForTokenClassification"),mko=o(" (ConvBERT model)"),gko=l(),U5=a("li"),vde=a("strong"),hko=o("data2vec-text"),pko=o(" \u2014 "),FN=a("a"),_ko=o("Data2VecTextForTokenClassification"),uko=o(" (Data2VecText model)"),bko=l(),J5=a("li"),Tde=a("strong"),Fko=o("deberta"),vko=o(" \u2014 "),vN=a("a"),Tko=o("DebertaForTokenClassification"),Mko=o(" (DeBERTa model)"),Eko=l(),Y5=a("li"),Mde=a("strong"),Cko=o("deberta-v2"),wko=o(" \u2014 "),TN=a("a"),Ako=o("DebertaV2ForTokenClassification"),yko=o(" (DeBERTa-v2 model)"),Lko=l(),K5=a("li"),Ede=a("strong"),xko=o("distilbert"),kko=o(" \u2014 "),MN=a("a"),Sko=o("DistilBertForTokenClassification"),Rko=o(" (DistilBERT model)"),Bko=l(),Z5=a("li"),Cde=a("strong"),Pko=o("electra"),$ko=o(" \u2014 "),EN=a("a"),qko=o("ElectraForTokenClassification"),Iko=o(" (ELECTRA model)"),jko=l(),e2=a("li"),wde=a("strong"),Nko=o("flaubert"),Dko=o(" \u2014 "),CN=a("a"),Gko=o("FlaubertForTokenClassification"),Oko=o(" (FlauBERT model)"),Vko=l(),o2=a("li"),Ade=a("strong"),Xko=o("fnet"),zko=o(" \u2014 "),wN=a("a"),Qko=o("FNetForTokenClassification"),Wko=o(" (FNet model)"),Hko=l(),r2=a("li"),yde=a("strong"),Uko=o("funnel"),Jko=o(" \u2014 "),AN=a("a"),Yko=o("FunnelForTokenClassification"),Kko=o(" (Funnel Transformer model)"),Zko=l(),t2=a("li"),Lde=a("strong"),eSo=o("gpt2"),oSo=o(" \u2014 "),yN=a("a"),rSo=o("GPT2ForTokenClassification"),tSo=o(" (OpenAI GPT-2 model)"),aSo=l(),a2=a("li"),xde=a("strong"),nSo=o("ibert"),sSo=o(" \u2014 "),LN=a("a"),lSo=o("IBertForTokenClassification"),iSo=o(" (I-BERT model)"),dSo=l(),n2=a("li"),kde=a("strong"),cSo=o("layoutlm"),fSo=o(" \u2014 "),xN=a("a"),mSo=o("LayoutLMForTokenClassification"),gSo=o(" (LayoutLM model)"),hSo=l(),s2=a("li"),Sde=a("strong"),pSo=o("layoutlmv2"),_So=o(" \u2014 "),kN=a("a"),uSo=o("LayoutLMv2ForTokenClassification"),bSo=o(" (LayoutLMv2 model)"),FSo=l(),l2=a("li"),Rde=a("strong"),vSo=o("longformer"),TSo=o(" \u2014 "),SN=a("a"),MSo=o("LongformerForTokenClassification"),ESo=o(" (Longformer model)"),CSo=l(),i2=a("li"),Bde=a("strong"),wSo=o("megatron-bert"),ASo=o(" \u2014 "),RN=a("a"),ySo=o("MegatronBertForTokenClassification"),LSo=o(" (MegatronBert model)"),xSo=l(),d2=a("li"),Pde=a("strong"),kSo=o("mobilebert"),SSo=o(" \u2014 "),BN=a("a"),RSo=o("MobileBertForTokenClassification"),BSo=o(" (MobileBERT model)"),PSo=l(),c2=a("li"),$de=a("strong"),$So=o("mpnet"),qSo=o(" \u2014 "),PN=a("a"),ISo=o("MPNetForTokenClassification"),jSo=o(" (MPNet model)"),NSo=l(),f2=a("li"),qde=a("strong"),DSo=o("nystromformer"),GSo=o(" \u2014 "),$N=a("a"),OSo=o("NystromformerForTokenClassification"),VSo=o(" (Nystromformer model)"),XSo=l(),m2=a("li"),Ide=a("strong"),zSo=o("qdqbert"),QSo=o(" \u2014 "),qN=a("a"),WSo=o("QDQBertForTokenClassification"),HSo=o(" (QDQBert model)"),USo=l(),g2=a("li"),jde=a("strong"),JSo=o("rembert"),YSo=o(" \u2014 "),IN=a("a"),KSo=o("RemBertForTokenClassification"),ZSo=o(" (RemBERT model)"),eRo=l(),h2=a("li"),Nde=a("strong"),oRo=o("roberta"),rRo=o(" \u2014 "),jN=a("a"),tRo=o("RobertaForTokenClassification"),aRo=o(" (RoBERTa model)"),nRo=l(),p2=a("li"),Dde=a("strong"),sRo=o("roformer"),lRo=o(" \u2014 "),NN=a("a"),iRo=o("RoFormerForTokenClassification"),dRo=o(" (RoFormer model)"),cRo=l(),_2=a("li"),Gde=a("strong"),fRo=o("squeezebert"),mRo=o(" \u2014 "),DN=a("a"),gRo=o("SqueezeBertForTokenClassification"),hRo=o(" (SqueezeBERT model)"),pRo=l(),u2=a("li"),Ode=a("strong"),_Ro=o("xlm"),uRo=o(" \u2014 "),GN=a("a"),bRo=o("XLMForTokenClassification"),FRo=o(" (XLM model)"),vRo=l(),b2=a("li"),Vde=a("strong"),TRo=o("xlm-roberta"),MRo=o(" \u2014 "),ON=a("a"),ERo=o("XLMRobertaForTokenClassification"),CRo=o(" (XLM-RoBERTa model)"),wRo=l(),F2=a("li"),Xde=a("strong"),ARo=o("xlm-roberta-xl"),yRo=o(" \u2014 "),VN=a("a"),LRo=o("XLMRobertaXLForTokenClassification"),xRo=o(" (XLM-RoBERTa-XL model)"),kRo=l(),v2=a("li"),zde=a("strong"),SRo=o("xlnet"),RRo=o(" \u2014 "),XN=a("a"),BRo=o("XLNetForTokenClassification"),PRo=o(" (XLNet model)"),$Ro=l(),T2=a("li"),Qde=a("strong"),qRo=o("yoso"),IRo=o(" \u2014 "),zN=a("a"),jRo=o("YosoForTokenClassification"),NRo=o(" (YOSO model)"),DRo=l(),M2=a("p"),GRo=o("The model is set in evaluation mode by default using "),Wde=a("code"),ORo=o("model.eval()"),VRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hde=a("code"),XRo=o("model.train()"),zRo=l(),Ude=a("p"),QRo=o("Examples:"),WRo=l(),f(_3.$$.fragment),eBe=l(),kd=a("h2"),E2=a("a"),Jde=a("span"),f(u3.$$.fragment),HRo=l(),Yde=a("span"),URo=o("AutoModelForQuestionAnswering"),oBe=l(),sr=a("div"),f(b3.$$.fragment),JRo=l(),Sd=a("p"),YRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),QN=a("a"),KRo=o("from_pretrained()"),ZRo=o(" class method or the "),WN=a("a"),eBo=o("from_config()"),oBo=o(` class
method.`),rBo=l(),F3=a("p"),tBo=o("This class cannot be instantiated directly using "),Kde=a("code"),aBo=o("__init__()"),nBo=o(" (throws an error)."),sBo=l(),ot=a("div"),f(v3.$$.fragment),lBo=l(),Zde=a("p"),iBo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),dBo=l(),Rd=a("p"),cBo=o(`Note:
Loading a model from its configuration file does `),ece=a("strong"),fBo=o("not"),mBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HN=a("a"),gBo=o("from_pretrained()"),hBo=o(" to load the model weights."),pBo=l(),oce=a("p"),_Bo=o("Examples:"),uBo=l(),f(T3.$$.fragment),bBo=l(),Qe=a("div"),f(M3.$$.fragment),FBo=l(),rce=a("p"),vBo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),TBo=l(),tn=a("p"),MBo=o("The model class to instantiate is selected based on the "),tce=a("code"),EBo=o("model_type"),CBo=o(` property of the config object (either
passed as an argument or loaded from `),ace=a("code"),wBo=o("pretrained_model_name_or_path"),ABo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nce=a("code"),yBo=o("pretrained_model_name_or_path"),LBo=o(":"),xBo=l(),R=a("ul"),C2=a("li"),sce=a("strong"),kBo=o("albert"),SBo=o(" \u2014 "),UN=a("a"),RBo=o("AlbertForQuestionAnswering"),BBo=o(" (ALBERT model)"),PBo=l(),w2=a("li"),lce=a("strong"),$Bo=o("bart"),qBo=o(" \u2014 "),JN=a("a"),IBo=o("BartForQuestionAnswering"),jBo=o(" (BART model)"),NBo=l(),A2=a("li"),ice=a("strong"),DBo=o("bert"),GBo=o(" \u2014 "),YN=a("a"),OBo=o("BertForQuestionAnswering"),VBo=o(" (BERT model)"),XBo=l(),y2=a("li"),dce=a("strong"),zBo=o("big_bird"),QBo=o(" \u2014 "),KN=a("a"),WBo=o("BigBirdForQuestionAnswering"),HBo=o(" (BigBird model)"),UBo=l(),L2=a("li"),cce=a("strong"),JBo=o("bigbird_pegasus"),YBo=o(" \u2014 "),ZN=a("a"),KBo=o("BigBirdPegasusForQuestionAnswering"),ZBo=o(" (BigBirdPegasus model)"),ePo=l(),x2=a("li"),fce=a("strong"),oPo=o("camembert"),rPo=o(" \u2014 "),eD=a("a"),tPo=o("CamembertForQuestionAnswering"),aPo=o(" (CamemBERT model)"),nPo=l(),k2=a("li"),mce=a("strong"),sPo=o("canine"),lPo=o(" \u2014 "),oD=a("a"),iPo=o("CanineForQuestionAnswering"),dPo=o(" (Canine model)"),cPo=l(),S2=a("li"),gce=a("strong"),fPo=o("convbert"),mPo=o(" \u2014 "),rD=a("a"),gPo=o("ConvBertForQuestionAnswering"),hPo=o(" (ConvBERT model)"),pPo=l(),R2=a("li"),hce=a("strong"),_Po=o("data2vec-text"),uPo=o(" \u2014 "),tD=a("a"),bPo=o("Data2VecTextForQuestionAnswering"),FPo=o(" (Data2VecText model)"),vPo=l(),B2=a("li"),pce=a("strong"),TPo=o("deberta"),MPo=o(" \u2014 "),aD=a("a"),EPo=o("DebertaForQuestionAnswering"),CPo=o(" (DeBERTa model)"),wPo=l(),P2=a("li"),_ce=a("strong"),APo=o("deberta-v2"),yPo=o(" \u2014 "),nD=a("a"),LPo=o("DebertaV2ForQuestionAnswering"),xPo=o(" (DeBERTa-v2 model)"),kPo=l(),$2=a("li"),uce=a("strong"),SPo=o("distilbert"),RPo=o(" \u2014 "),sD=a("a"),BPo=o("DistilBertForQuestionAnswering"),PPo=o(" (DistilBERT model)"),$Po=l(),q2=a("li"),bce=a("strong"),qPo=o("electra"),IPo=o(" \u2014 "),lD=a("a"),jPo=o("ElectraForQuestionAnswering"),NPo=o(" (ELECTRA model)"),DPo=l(),I2=a("li"),Fce=a("strong"),GPo=o("flaubert"),OPo=o(" \u2014 "),iD=a("a"),VPo=o("FlaubertForQuestionAnsweringSimple"),XPo=o(" (FlauBERT model)"),zPo=l(),j2=a("li"),vce=a("strong"),QPo=o("fnet"),WPo=o(" \u2014 "),dD=a("a"),HPo=o("FNetForQuestionAnswering"),UPo=o(" (FNet model)"),JPo=l(),N2=a("li"),Tce=a("strong"),YPo=o("funnel"),KPo=o(" \u2014 "),cD=a("a"),ZPo=o("FunnelForQuestionAnswering"),e$o=o(" (Funnel Transformer model)"),o$o=l(),D2=a("li"),Mce=a("strong"),r$o=o("gptj"),t$o=o(" \u2014 "),fD=a("a"),a$o=o("GPTJForQuestionAnswering"),n$o=o(" (GPT-J model)"),s$o=l(),G2=a("li"),Ece=a("strong"),l$o=o("ibert"),i$o=o(" \u2014 "),mD=a("a"),d$o=o("IBertForQuestionAnswering"),c$o=o(" (I-BERT model)"),f$o=l(),O2=a("li"),Cce=a("strong"),m$o=o("layoutlmv2"),g$o=o(" \u2014 "),gD=a("a"),h$o=o("LayoutLMv2ForQuestionAnswering"),p$o=o(" (LayoutLMv2 model)"),_$o=l(),V2=a("li"),wce=a("strong"),u$o=o("led"),b$o=o(" \u2014 "),hD=a("a"),F$o=o("LEDForQuestionAnswering"),v$o=o(" (LED model)"),T$o=l(),X2=a("li"),Ace=a("strong"),M$o=o("longformer"),E$o=o(" \u2014 "),pD=a("a"),C$o=o("LongformerForQuestionAnswering"),w$o=o(" (Longformer model)"),A$o=l(),z2=a("li"),yce=a("strong"),y$o=o("lxmert"),L$o=o(" \u2014 "),_D=a("a"),x$o=o("LxmertForQuestionAnswering"),k$o=o(" (LXMERT model)"),S$o=l(),Q2=a("li"),Lce=a("strong"),R$o=o("mbart"),B$o=o(" \u2014 "),uD=a("a"),P$o=o("MBartForQuestionAnswering"),$$o=o(" (mBART model)"),q$o=l(),W2=a("li"),xce=a("strong"),I$o=o("megatron-bert"),j$o=o(" \u2014 "),bD=a("a"),N$o=o("MegatronBertForQuestionAnswering"),D$o=o(" (MegatronBert model)"),G$o=l(),H2=a("li"),kce=a("strong"),O$o=o("mobilebert"),V$o=o(" \u2014 "),FD=a("a"),X$o=o("MobileBertForQuestionAnswering"),z$o=o(" (MobileBERT model)"),Q$o=l(),U2=a("li"),Sce=a("strong"),W$o=o("mpnet"),H$o=o(" \u2014 "),vD=a("a"),U$o=o("MPNetForQuestionAnswering"),J$o=o(" (MPNet model)"),Y$o=l(),J2=a("li"),Rce=a("strong"),K$o=o("nystromformer"),Z$o=o(" \u2014 "),TD=a("a"),eqo=o("NystromformerForQuestionAnswering"),oqo=o(" (Nystromformer model)"),rqo=l(),Y2=a("li"),Bce=a("strong"),tqo=o("qdqbert"),aqo=o(" \u2014 "),MD=a("a"),nqo=o("QDQBertForQuestionAnswering"),sqo=o(" (QDQBert model)"),lqo=l(),K2=a("li"),Pce=a("strong"),iqo=o("reformer"),dqo=o(" \u2014 "),ED=a("a"),cqo=o("ReformerForQuestionAnswering"),fqo=o(" (Reformer model)"),mqo=l(),Z2=a("li"),$ce=a("strong"),gqo=o("rembert"),hqo=o(" \u2014 "),CD=a("a"),pqo=o("RemBertForQuestionAnswering"),_qo=o(" (RemBERT model)"),uqo=l(),eF=a("li"),qce=a("strong"),bqo=o("roberta"),Fqo=o(" \u2014 "),wD=a("a"),vqo=o("RobertaForQuestionAnswering"),Tqo=o(" (RoBERTa model)"),Mqo=l(),oF=a("li"),Ice=a("strong"),Eqo=o("roformer"),Cqo=o(" \u2014 "),AD=a("a"),wqo=o("RoFormerForQuestionAnswering"),Aqo=o(" (RoFormer model)"),yqo=l(),rF=a("li"),jce=a("strong"),Lqo=o("splinter"),xqo=o(" \u2014 "),yD=a("a"),kqo=o("SplinterForQuestionAnswering"),Sqo=o(" (Splinter model)"),Rqo=l(),tF=a("li"),Nce=a("strong"),Bqo=o("squeezebert"),Pqo=o(" \u2014 "),LD=a("a"),$qo=o("SqueezeBertForQuestionAnswering"),qqo=o(" (SqueezeBERT model)"),Iqo=l(),aF=a("li"),Dce=a("strong"),jqo=o("xlm"),Nqo=o(" \u2014 "),xD=a("a"),Dqo=o("XLMForQuestionAnsweringSimple"),Gqo=o(" (XLM model)"),Oqo=l(),nF=a("li"),Gce=a("strong"),Vqo=o("xlm-roberta"),Xqo=o(" \u2014 "),kD=a("a"),zqo=o("XLMRobertaForQuestionAnswering"),Qqo=o(" (XLM-RoBERTa model)"),Wqo=l(),sF=a("li"),Oce=a("strong"),Hqo=o("xlm-roberta-xl"),Uqo=o(" \u2014 "),SD=a("a"),Jqo=o("XLMRobertaXLForQuestionAnswering"),Yqo=o(" (XLM-RoBERTa-XL model)"),Kqo=l(),lF=a("li"),Vce=a("strong"),Zqo=o("xlnet"),eIo=o(" \u2014 "),RD=a("a"),oIo=o("XLNetForQuestionAnsweringSimple"),rIo=o(" (XLNet model)"),tIo=l(),iF=a("li"),Xce=a("strong"),aIo=o("yoso"),nIo=o(" \u2014 "),BD=a("a"),sIo=o("YosoForQuestionAnswering"),lIo=o(" (YOSO model)"),iIo=l(),dF=a("p"),dIo=o("The model is set in evaluation mode by default using "),zce=a("code"),cIo=o("model.eval()"),fIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qce=a("code"),mIo=o("model.train()"),gIo=l(),Wce=a("p"),hIo=o("Examples:"),pIo=l(),f(E3.$$.fragment),rBe=l(),Bd=a("h2"),cF=a("a"),Hce=a("span"),f(C3.$$.fragment),_Io=l(),Uce=a("span"),uIo=o("AutoModelForTableQuestionAnswering"),tBe=l(),lr=a("div"),f(w3.$$.fragment),bIo=l(),Pd=a("p"),FIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),PD=a("a"),vIo=o("from_pretrained()"),TIo=o(" class method or the "),$D=a("a"),MIo=o("from_config()"),EIo=o(` class
method.`),CIo=l(),A3=a("p"),wIo=o("This class cannot be instantiated directly using "),Jce=a("code"),AIo=o("__init__()"),yIo=o(" (throws an error)."),LIo=l(),rt=a("div"),f(y3.$$.fragment),xIo=l(),Yce=a("p"),kIo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),SIo=l(),$d=a("p"),RIo=o(`Note:
Loading a model from its configuration file does `),Kce=a("strong"),BIo=o("not"),PIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qD=a("a"),$Io=o("from_pretrained()"),qIo=o(" to load the model weights."),IIo=l(),Zce=a("p"),jIo=o("Examples:"),NIo=l(),f(L3.$$.fragment),DIo=l(),We=a("div"),f(x3.$$.fragment),GIo=l(),efe=a("p"),OIo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),VIo=l(),an=a("p"),XIo=o("The model class to instantiate is selected based on the "),ofe=a("code"),zIo=o("model_type"),QIo=o(` property of the config object (either
passed as an argument or loaded from `),rfe=a("code"),WIo=o("pretrained_model_name_or_path"),HIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tfe=a("code"),UIo=o("pretrained_model_name_or_path"),JIo=o(":"),YIo=l(),afe=a("ul"),fF=a("li"),nfe=a("strong"),KIo=o("tapas"),ZIo=o(" \u2014 "),ID=a("a"),ejo=o("TapasForQuestionAnswering"),ojo=o(" (TAPAS model)"),rjo=l(),mF=a("p"),tjo=o("The model is set in evaluation mode by default using "),sfe=a("code"),ajo=o("model.eval()"),njo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lfe=a("code"),sjo=o("model.train()"),ljo=l(),ife=a("p"),ijo=o("Examples:"),djo=l(),f(k3.$$.fragment),aBe=l(),qd=a("h2"),gF=a("a"),dfe=a("span"),f(S3.$$.fragment),cjo=l(),cfe=a("span"),fjo=o("AutoModelForImageClassification"),nBe=l(),ir=a("div"),f(R3.$$.fragment),mjo=l(),Id=a("p"),gjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),jD=a("a"),hjo=o("from_pretrained()"),pjo=o(" class method or the "),ND=a("a"),_jo=o("from_config()"),ujo=o(` class
method.`),bjo=l(),B3=a("p"),Fjo=o("This class cannot be instantiated directly using "),ffe=a("code"),vjo=o("__init__()"),Tjo=o(" (throws an error)."),Mjo=l(),tt=a("div"),f(P3.$$.fragment),Ejo=l(),mfe=a("p"),Cjo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),wjo=l(),jd=a("p"),Ajo=o(`Note:
Loading a model from its configuration file does `),gfe=a("strong"),yjo=o("not"),Ljo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DD=a("a"),xjo=o("from_pretrained()"),kjo=o(" to load the model weights."),Sjo=l(),hfe=a("p"),Rjo=o("Examples:"),Bjo=l(),f($3.$$.fragment),Pjo=l(),He=a("div"),f(q3.$$.fragment),$jo=l(),pfe=a("p"),qjo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Ijo=l(),nn=a("p"),jjo=o("The model class to instantiate is selected based on the "),_fe=a("code"),Njo=o("model_type"),Djo=o(` property of the config object (either
passed as an argument or loaded from `),ufe=a("code"),Gjo=o("pretrained_model_name_or_path"),Ojo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bfe=a("code"),Vjo=o("pretrained_model_name_or_path"),Xjo=o(":"),zjo=l(),ge=a("ul"),hF=a("li"),Ffe=a("strong"),Qjo=o("beit"),Wjo=o(" \u2014 "),GD=a("a"),Hjo=o("BeitForImageClassification"),Ujo=o(" (BEiT model)"),Jjo=l(),pF=a("li"),vfe=a("strong"),Yjo=o("convnext"),Kjo=o(" \u2014 "),OD=a("a"),Zjo=o("ConvNextForImageClassification"),eNo=o(" (ConvNext model)"),oNo=l(),zs=a("li"),Tfe=a("strong"),rNo=o("deit"),tNo=o(" \u2014 "),VD=a("a"),aNo=o("DeiTForImageClassification"),nNo=o(" or "),XD=a("a"),sNo=o("DeiTForImageClassificationWithTeacher"),lNo=o(" (DeiT model)"),iNo=l(),_F=a("li"),Mfe=a("strong"),dNo=o("imagegpt"),cNo=o(" \u2014 "),zD=a("a"),fNo=o("ImageGPTForImageClassification"),mNo=o(" (ImageGPT model)"),gNo=l(),pa=a("li"),Efe=a("strong"),hNo=o("perceiver"),pNo=o(" \u2014 "),QD=a("a"),_No=o("PerceiverForImageClassificationLearned"),uNo=o(" or "),WD=a("a"),bNo=o("PerceiverForImageClassificationFourier"),FNo=o(" or "),HD=a("a"),vNo=o("PerceiverForImageClassificationConvProcessing"),TNo=o(" (Perceiver model)"),MNo=l(),uF=a("li"),Cfe=a("strong"),ENo=o("poolformer"),CNo=o(" \u2014 "),UD=a("a"),wNo=o("PoolFormerForImageClassification"),ANo=o(" (PoolFormer model)"),yNo=l(),bF=a("li"),wfe=a("strong"),LNo=o("resnet"),xNo=o(" \u2014 "),JD=a("a"),kNo=o("ResNetForImageClassification"),SNo=o(" (ResNet model)"),RNo=l(),FF=a("li"),Afe=a("strong"),BNo=o("segformer"),PNo=o(" \u2014 "),YD=a("a"),$No=o("SegformerForImageClassification"),qNo=o(" (SegFormer model)"),INo=l(),vF=a("li"),yfe=a("strong"),jNo=o("swin"),NNo=o(" \u2014 "),KD=a("a"),DNo=o("SwinForImageClassification"),GNo=o(" (Swin model)"),ONo=l(),TF=a("li"),Lfe=a("strong"),VNo=o("van"),XNo=o(" \u2014 "),ZD=a("a"),zNo=o("VanForImageClassification"),QNo=o(" (VAN model)"),WNo=l(),MF=a("li"),xfe=a("strong"),HNo=o("vit"),UNo=o(" \u2014 "),eG=a("a"),JNo=o("ViTForImageClassification"),YNo=o(" (ViT model)"),KNo=l(),EF=a("p"),ZNo=o("The model is set in evaluation mode by default using "),kfe=a("code"),eDo=o("model.eval()"),oDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sfe=a("code"),rDo=o("model.train()"),tDo=l(),Rfe=a("p"),aDo=o("Examples:"),nDo=l(),f(I3.$$.fragment),sBe=l(),Nd=a("h2"),CF=a("a"),Bfe=a("span"),f(j3.$$.fragment),sDo=l(),Pfe=a("span"),lDo=o("AutoModelForVision2Seq"),lBe=l(),dr=a("div"),f(N3.$$.fragment),iDo=l(),Dd=a("p"),dDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),oG=a("a"),cDo=o("from_pretrained()"),fDo=o(" class method or the "),rG=a("a"),mDo=o("from_config()"),gDo=o(` class
method.`),hDo=l(),D3=a("p"),pDo=o("This class cannot be instantiated directly using "),$fe=a("code"),_Do=o("__init__()"),uDo=o(" (throws an error)."),bDo=l(),at=a("div"),f(G3.$$.fragment),FDo=l(),qfe=a("p"),vDo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),TDo=l(),Gd=a("p"),MDo=o(`Note:
Loading a model from its configuration file does `),Ife=a("strong"),EDo=o("not"),CDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tG=a("a"),wDo=o("from_pretrained()"),ADo=o(" to load the model weights."),yDo=l(),jfe=a("p"),LDo=o("Examples:"),xDo=l(),f(O3.$$.fragment),kDo=l(),Ue=a("div"),f(V3.$$.fragment),SDo=l(),Nfe=a("p"),RDo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),BDo=l(),sn=a("p"),PDo=o("The model class to instantiate is selected based on the "),Dfe=a("code"),$Do=o("model_type"),qDo=o(` property of the config object (either
passed as an argument or loaded from `),Gfe=a("code"),IDo=o("pretrained_model_name_or_path"),jDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ofe=a("code"),NDo=o("pretrained_model_name_or_path"),DDo=o(":"),GDo=l(),Vfe=a("ul"),wF=a("li"),Xfe=a("strong"),ODo=o("vision-encoder-decoder"),VDo=o(" \u2014 "),aG=a("a"),XDo=o("VisionEncoderDecoderModel"),zDo=o(" (Vision Encoder decoder model)"),QDo=l(),AF=a("p"),WDo=o("The model is set in evaluation mode by default using "),zfe=a("code"),HDo=o("model.eval()"),UDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qfe=a("code"),JDo=o("model.train()"),YDo=l(),Wfe=a("p"),KDo=o("Examples:"),ZDo=l(),f(X3.$$.fragment),iBe=l(),Od=a("h2"),yF=a("a"),Hfe=a("span"),f(z3.$$.fragment),eGo=l(),Ufe=a("span"),oGo=o("AutoModelForAudioClassification"),dBe=l(),cr=a("div"),f(Q3.$$.fragment),rGo=l(),Vd=a("p"),tGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),nG=a("a"),aGo=o("from_pretrained()"),nGo=o(" class method or the "),sG=a("a"),sGo=o("from_config()"),lGo=o(` class
method.`),iGo=l(),W3=a("p"),dGo=o("This class cannot be instantiated directly using "),Jfe=a("code"),cGo=o("__init__()"),fGo=o(" (throws an error)."),mGo=l(),nt=a("div"),f(H3.$$.fragment),gGo=l(),Yfe=a("p"),hGo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),pGo=l(),Xd=a("p"),_Go=o(`Note:
Loading a model from its configuration file does `),Kfe=a("strong"),uGo=o("not"),bGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lG=a("a"),FGo=o("from_pretrained()"),vGo=o(" to load the model weights."),TGo=l(),Zfe=a("p"),MGo=o("Examples:"),EGo=l(),f(U3.$$.fragment),CGo=l(),Je=a("div"),f(J3.$$.fragment),wGo=l(),eme=a("p"),AGo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),yGo=l(),ln=a("p"),LGo=o("The model class to instantiate is selected based on the "),ome=a("code"),xGo=o("model_type"),kGo=o(` property of the config object (either
passed as an argument or loaded from `),rme=a("code"),SGo=o("pretrained_model_name_or_path"),RGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tme=a("code"),BGo=o("pretrained_model_name_or_path"),PGo=o(":"),$Go=l(),Se=a("ul"),LF=a("li"),ame=a("strong"),qGo=o("data2vec-audio"),IGo=o(" \u2014 "),iG=a("a"),jGo=o("Data2VecAudioForSequenceClassification"),NGo=o(" (Data2VecAudio model)"),DGo=l(),xF=a("li"),nme=a("strong"),GGo=o("hubert"),OGo=o(" \u2014 "),dG=a("a"),VGo=o("HubertForSequenceClassification"),XGo=o(" (Hubert model)"),zGo=l(),kF=a("li"),sme=a("strong"),QGo=o("sew"),WGo=o(" \u2014 "),cG=a("a"),HGo=o("SEWForSequenceClassification"),UGo=o(" (SEW model)"),JGo=l(),SF=a("li"),lme=a("strong"),YGo=o("sew-d"),KGo=o(" \u2014 "),fG=a("a"),ZGo=o("SEWDForSequenceClassification"),eOo=o(" (SEW-D model)"),oOo=l(),RF=a("li"),ime=a("strong"),rOo=o("unispeech"),tOo=o(" \u2014 "),mG=a("a"),aOo=o("UniSpeechForSequenceClassification"),nOo=o(" (UniSpeech model)"),sOo=l(),BF=a("li"),dme=a("strong"),lOo=o("unispeech-sat"),iOo=o(" \u2014 "),gG=a("a"),dOo=o("UniSpeechSatForSequenceClassification"),cOo=o(" (UniSpeechSat model)"),fOo=l(),PF=a("li"),cme=a("strong"),mOo=o("wav2vec2"),gOo=o(" \u2014 "),hG=a("a"),hOo=o("Wav2Vec2ForSequenceClassification"),pOo=o(" (Wav2Vec2 model)"),_Oo=l(),$F=a("li"),fme=a("strong"),uOo=o("wavlm"),bOo=o(" \u2014 "),pG=a("a"),FOo=o("WavLMForSequenceClassification"),vOo=o(" (WavLM model)"),TOo=l(),qF=a("p"),MOo=o("The model is set in evaluation mode by default using "),mme=a("code"),EOo=o("model.eval()"),COo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gme=a("code"),wOo=o("model.train()"),AOo=l(),hme=a("p"),yOo=o("Examples:"),LOo=l(),f(Y3.$$.fragment),cBe=l(),zd=a("h2"),IF=a("a"),pme=a("span"),f(K3.$$.fragment),xOo=l(),_me=a("span"),kOo=o("AutoModelForAudioFrameClassification"),fBe=l(),fr=a("div"),f(Z3.$$.fragment),SOo=l(),Qd=a("p"),ROo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),_G=a("a"),BOo=o("from_pretrained()"),POo=o(" class method or the "),uG=a("a"),$Oo=o("from_config()"),qOo=o(` class
method.`),IOo=l(),ew=a("p"),jOo=o("This class cannot be instantiated directly using "),ume=a("code"),NOo=o("__init__()"),DOo=o(" (throws an error)."),GOo=l(),st=a("div"),f(ow.$$.fragment),OOo=l(),bme=a("p"),VOo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),XOo=l(),Wd=a("p"),zOo=o(`Note:
Loading a model from its configuration file does `),Fme=a("strong"),QOo=o("not"),WOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bG=a("a"),HOo=o("from_pretrained()"),UOo=o(" to load the model weights."),JOo=l(),vme=a("p"),YOo=o("Examples:"),KOo=l(),f(rw.$$.fragment),ZOo=l(),Ye=a("div"),f(tw.$$.fragment),eVo=l(),Tme=a("p"),oVo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),rVo=l(),dn=a("p"),tVo=o("The model class to instantiate is selected based on the "),Mme=a("code"),aVo=o("model_type"),nVo=o(` property of the config object (either
passed as an argument or loaded from `),Eme=a("code"),sVo=o("pretrained_model_name_or_path"),lVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cme=a("code"),iVo=o("pretrained_model_name_or_path"),dVo=o(":"),cVo=l(),cn=a("ul"),jF=a("li"),wme=a("strong"),fVo=o("data2vec-audio"),mVo=o(" \u2014 "),FG=a("a"),gVo=o("Data2VecAudioForAudioFrameClassification"),hVo=o(" (Data2VecAudio model)"),pVo=l(),NF=a("li"),Ame=a("strong"),_Vo=o("unispeech-sat"),uVo=o(" \u2014 "),vG=a("a"),bVo=o("UniSpeechSatForAudioFrameClassification"),FVo=o(" (UniSpeechSat model)"),vVo=l(),DF=a("li"),yme=a("strong"),TVo=o("wav2vec2"),MVo=o(" \u2014 "),TG=a("a"),EVo=o("Wav2Vec2ForAudioFrameClassification"),CVo=o(" (Wav2Vec2 model)"),wVo=l(),GF=a("li"),Lme=a("strong"),AVo=o("wavlm"),yVo=o(" \u2014 "),MG=a("a"),LVo=o("WavLMForAudioFrameClassification"),xVo=o(" (WavLM model)"),kVo=l(),OF=a("p"),SVo=o("The model is set in evaluation mode by default using "),xme=a("code"),RVo=o("model.eval()"),BVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kme=a("code"),PVo=o("model.train()"),$Vo=l(),Sme=a("p"),qVo=o("Examples:"),IVo=l(),f(aw.$$.fragment),mBe=l(),Hd=a("h2"),VF=a("a"),Rme=a("span"),f(nw.$$.fragment),jVo=l(),Bme=a("span"),NVo=o("AutoModelForCTC"),gBe=l(),mr=a("div"),f(sw.$$.fragment),DVo=l(),Ud=a("p"),GVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),EG=a("a"),OVo=o("from_pretrained()"),VVo=o(" class method or the "),CG=a("a"),XVo=o("from_config()"),zVo=o(` class
method.`),QVo=l(),lw=a("p"),WVo=o("This class cannot be instantiated directly using "),Pme=a("code"),HVo=o("__init__()"),UVo=o(" (throws an error)."),JVo=l(),lt=a("div"),f(iw.$$.fragment),YVo=l(),$me=a("p"),KVo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),ZVo=l(),Jd=a("p"),eXo=o(`Note:
Loading a model from its configuration file does `),qme=a("strong"),oXo=o("not"),rXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wG=a("a"),tXo=o("from_pretrained()"),aXo=o(" to load the model weights."),nXo=l(),Ime=a("p"),sXo=o("Examples:"),lXo=l(),f(dw.$$.fragment),iXo=l(),Ke=a("div"),f(cw.$$.fragment),dXo=l(),jme=a("p"),cXo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),fXo=l(),fn=a("p"),mXo=o("The model class to instantiate is selected based on the "),Nme=a("code"),gXo=o("model_type"),hXo=o(` property of the config object (either
passed as an argument or loaded from `),Dme=a("code"),pXo=o("pretrained_model_name_or_path"),_Xo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gme=a("code"),uXo=o("pretrained_model_name_or_path"),bXo=o(":"),FXo=l(),Re=a("ul"),XF=a("li"),Ome=a("strong"),vXo=o("data2vec-audio"),TXo=o(" \u2014 "),AG=a("a"),MXo=o("Data2VecAudioForCTC"),EXo=o(" (Data2VecAudio model)"),CXo=l(),zF=a("li"),Vme=a("strong"),wXo=o("hubert"),AXo=o(" \u2014 "),yG=a("a"),yXo=o("HubertForCTC"),LXo=o(" (Hubert model)"),xXo=l(),QF=a("li"),Xme=a("strong"),kXo=o("sew"),SXo=o(" \u2014 "),LG=a("a"),RXo=o("SEWForCTC"),BXo=o(" (SEW model)"),PXo=l(),WF=a("li"),zme=a("strong"),$Xo=o("sew-d"),qXo=o(" \u2014 "),xG=a("a"),IXo=o("SEWDForCTC"),jXo=o(" (SEW-D model)"),NXo=l(),HF=a("li"),Qme=a("strong"),DXo=o("unispeech"),GXo=o(" \u2014 "),kG=a("a"),OXo=o("UniSpeechForCTC"),VXo=o(" (UniSpeech model)"),XXo=l(),UF=a("li"),Wme=a("strong"),zXo=o("unispeech-sat"),QXo=o(" \u2014 "),SG=a("a"),WXo=o("UniSpeechSatForCTC"),HXo=o(" (UniSpeechSat model)"),UXo=l(),JF=a("li"),Hme=a("strong"),JXo=o("wav2vec2"),YXo=o(" \u2014 "),RG=a("a"),KXo=o("Wav2Vec2ForCTC"),ZXo=o(" (Wav2Vec2 model)"),ezo=l(),YF=a("li"),Ume=a("strong"),ozo=o("wavlm"),rzo=o(" \u2014 "),BG=a("a"),tzo=o("WavLMForCTC"),azo=o(" (WavLM model)"),nzo=l(),KF=a("p"),szo=o("The model is set in evaluation mode by default using "),Jme=a("code"),lzo=o("model.eval()"),izo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yme=a("code"),dzo=o("model.train()"),czo=l(),Kme=a("p"),fzo=o("Examples:"),mzo=l(),f(fw.$$.fragment),hBe=l(),Yd=a("h2"),ZF=a("a"),Zme=a("span"),f(mw.$$.fragment),gzo=l(),ege=a("span"),hzo=o("AutoModelForSpeechSeq2Seq"),pBe=l(),gr=a("div"),f(gw.$$.fragment),pzo=l(),Kd=a("p"),_zo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),PG=a("a"),uzo=o("from_pretrained()"),bzo=o(" class method or the "),$G=a("a"),Fzo=o("from_config()"),vzo=o(` class
method.`),Tzo=l(),hw=a("p"),Mzo=o("This class cannot be instantiated directly using "),oge=a("code"),Ezo=o("__init__()"),Czo=o(" (throws an error)."),wzo=l(),it=a("div"),f(pw.$$.fragment),Azo=l(),rge=a("p"),yzo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Lzo=l(),Zd=a("p"),xzo=o(`Note:
Loading a model from its configuration file does `),tge=a("strong"),kzo=o("not"),Szo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qG=a("a"),Rzo=o("from_pretrained()"),Bzo=o(" to load the model weights."),Pzo=l(),age=a("p"),$zo=o("Examples:"),qzo=l(),f(_w.$$.fragment),Izo=l(),Ze=a("div"),f(uw.$$.fragment),jzo=l(),nge=a("p"),Nzo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Dzo=l(),mn=a("p"),Gzo=o("The model class to instantiate is selected based on the "),sge=a("code"),Ozo=o("model_type"),Vzo=o(` property of the config object (either
passed as an argument or loaded from `),lge=a("code"),Xzo=o("pretrained_model_name_or_path"),zzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ige=a("code"),Qzo=o("pretrained_model_name_or_path"),Wzo=o(":"),Hzo=l(),bw=a("ul"),ev=a("li"),dge=a("strong"),Uzo=o("speech-encoder-decoder"),Jzo=o(" \u2014 "),IG=a("a"),Yzo=o("SpeechEncoderDecoderModel"),Kzo=o(" (Speech Encoder decoder model)"),Zzo=l(),ov=a("li"),cge=a("strong"),eQo=o("speech_to_text"),oQo=o(" \u2014 "),jG=a("a"),rQo=o("Speech2TextForConditionalGeneration"),tQo=o(" (Speech2Text model)"),aQo=l(),rv=a("p"),nQo=o("The model is set in evaluation mode by default using "),fge=a("code"),sQo=o("model.eval()"),lQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mge=a("code"),iQo=o("model.train()"),dQo=l(),gge=a("p"),cQo=o("Examples:"),fQo=l(),f(Fw.$$.fragment),_Be=l(),ec=a("h2"),tv=a("a"),hge=a("span"),f(vw.$$.fragment),mQo=l(),pge=a("span"),gQo=o("AutoModelForAudioXVector"),uBe=l(),hr=a("div"),f(Tw.$$.fragment),hQo=l(),oc=a("p"),pQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),NG=a("a"),_Qo=o("from_pretrained()"),uQo=o(" class method or the "),DG=a("a"),bQo=o("from_config()"),FQo=o(` class
method.`),vQo=l(),Mw=a("p"),TQo=o("This class cannot be instantiated directly using "),_ge=a("code"),MQo=o("__init__()"),EQo=o(" (throws an error)."),CQo=l(),dt=a("div"),f(Ew.$$.fragment),wQo=l(),uge=a("p"),AQo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),yQo=l(),rc=a("p"),LQo=o(`Note:
Loading a model from its configuration file does `),bge=a("strong"),xQo=o("not"),kQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GG=a("a"),SQo=o("from_pretrained()"),RQo=o(" to load the model weights."),BQo=l(),Fge=a("p"),PQo=o("Examples:"),$Qo=l(),f(Cw.$$.fragment),qQo=l(),eo=a("div"),f(ww.$$.fragment),IQo=l(),vge=a("p"),jQo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),NQo=l(),gn=a("p"),DQo=o("The model class to instantiate is selected based on the "),Tge=a("code"),GQo=o("model_type"),OQo=o(` property of the config object (either
passed as an argument or loaded from `),Mge=a("code"),VQo=o("pretrained_model_name_or_path"),XQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ege=a("code"),zQo=o("pretrained_model_name_or_path"),QQo=o(":"),WQo=l(),hn=a("ul"),av=a("li"),Cge=a("strong"),HQo=o("data2vec-audio"),UQo=o(" \u2014 "),OG=a("a"),JQo=o("Data2VecAudioForXVector"),YQo=o(" (Data2VecAudio model)"),KQo=l(),nv=a("li"),wge=a("strong"),ZQo=o("unispeech-sat"),eWo=o(" \u2014 "),VG=a("a"),oWo=o("UniSpeechSatForXVector"),rWo=o(" (UniSpeechSat model)"),tWo=l(),sv=a("li"),Age=a("strong"),aWo=o("wav2vec2"),nWo=o(" \u2014 "),XG=a("a"),sWo=o("Wav2Vec2ForXVector"),lWo=o(" (Wav2Vec2 model)"),iWo=l(),lv=a("li"),yge=a("strong"),dWo=o("wavlm"),cWo=o(" \u2014 "),zG=a("a"),fWo=o("WavLMForXVector"),mWo=o(" (WavLM model)"),gWo=l(),iv=a("p"),hWo=o("The model is set in evaluation mode by default using "),Lge=a("code"),pWo=o("model.eval()"),_Wo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xge=a("code"),uWo=o("model.train()"),bWo=l(),kge=a("p"),FWo=o("Examples:"),vWo=l(),f(Aw.$$.fragment),bBe=l(),tc=a("h2"),dv=a("a"),Sge=a("span"),f(yw.$$.fragment),TWo=l(),Rge=a("span"),MWo=o("AutoModelForMaskedImageModeling"),FBe=l(),pr=a("div"),f(Lw.$$.fragment),EWo=l(),ac=a("p"),CWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),QG=a("a"),wWo=o("from_pretrained()"),AWo=o(" class method or the "),WG=a("a"),yWo=o("from_config()"),LWo=o(` class
method.`),xWo=l(),xw=a("p"),kWo=o("This class cannot be instantiated directly using "),Bge=a("code"),SWo=o("__init__()"),RWo=o(" (throws an error)."),BWo=l(),ct=a("div"),f(kw.$$.fragment),PWo=l(),Pge=a("p"),$Wo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),qWo=l(),nc=a("p"),IWo=o(`Note:
Loading a model from its configuration file does `),$ge=a("strong"),jWo=o("not"),NWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HG=a("a"),DWo=o("from_pretrained()"),GWo=o(" to load the model weights."),OWo=l(),qge=a("p"),VWo=o("Examples:"),XWo=l(),f(Sw.$$.fragment),zWo=l(),oo=a("div"),f(Rw.$$.fragment),QWo=l(),Ige=a("p"),WWo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),HWo=l(),pn=a("p"),UWo=o("The model class to instantiate is selected based on the "),jge=a("code"),JWo=o("model_type"),YWo=o(` property of the config object (either
passed as an argument or loaded from `),Nge=a("code"),KWo=o("pretrained_model_name_or_path"),ZWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dge=a("code"),eHo=o("pretrained_model_name_or_path"),oHo=o(":"),rHo=l(),sc=a("ul"),cv=a("li"),Gge=a("strong"),tHo=o("deit"),aHo=o(" \u2014 "),UG=a("a"),nHo=o("DeiTForMaskedImageModeling"),sHo=o(" (DeiT model)"),lHo=l(),fv=a("li"),Oge=a("strong"),iHo=o("swin"),dHo=o(" \u2014 "),JG=a("a"),cHo=o("SwinForMaskedImageModeling"),fHo=o(" (Swin model)"),mHo=l(),mv=a("li"),Vge=a("strong"),gHo=o("vit"),hHo=o(" \u2014 "),YG=a("a"),pHo=o("ViTForMaskedImageModeling"),_Ho=o(" (ViT model)"),uHo=l(),gv=a("p"),bHo=o("The model is set in evaluation mode by default using "),Xge=a("code"),FHo=o("model.eval()"),vHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zge=a("code"),THo=o("model.train()"),MHo=l(),Qge=a("p"),EHo=o("Examples:"),CHo=l(),f(Bw.$$.fragment),vBe=l(),lc=a("h2"),hv=a("a"),Wge=a("span"),f(Pw.$$.fragment),wHo=l(),Hge=a("span"),AHo=o("AutoModelForObjectDetection"),TBe=l(),_r=a("div"),f($w.$$.fragment),yHo=l(),ic=a("p"),LHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),KG=a("a"),xHo=o("from_pretrained()"),kHo=o(" class method or the "),ZG=a("a"),SHo=o("from_config()"),RHo=o(` class
method.`),BHo=l(),qw=a("p"),PHo=o("This class cannot be instantiated directly using "),Uge=a("code"),$Ho=o("__init__()"),qHo=o(" (throws an error)."),IHo=l(),ft=a("div"),f(Iw.$$.fragment),jHo=l(),Jge=a("p"),NHo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),DHo=l(),dc=a("p"),GHo=o(`Note:
Loading a model from its configuration file does `),Yge=a("strong"),OHo=o("not"),VHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eO=a("a"),XHo=o("from_pretrained()"),zHo=o(" to load the model weights."),QHo=l(),Kge=a("p"),WHo=o("Examples:"),HHo=l(),f(jw.$$.fragment),UHo=l(),ro=a("div"),f(Nw.$$.fragment),JHo=l(),Zge=a("p"),YHo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),KHo=l(),_n=a("p"),ZHo=o("The model class to instantiate is selected based on the "),ehe=a("code"),eUo=o("model_type"),oUo=o(` property of the config object (either
passed as an argument or loaded from `),ohe=a("code"),rUo=o("pretrained_model_name_or_path"),tUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rhe=a("code"),aUo=o("pretrained_model_name_or_path"),nUo=o(":"),sUo=l(),the=a("ul"),pv=a("li"),ahe=a("strong"),lUo=o("detr"),iUo=o(" \u2014 "),oO=a("a"),dUo=o("DetrForObjectDetection"),cUo=o(" (DETR model)"),fUo=l(),_v=a("p"),mUo=o("The model is set in evaluation mode by default using "),nhe=a("code"),gUo=o("model.eval()"),hUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),she=a("code"),pUo=o("model.train()"),_Uo=l(),lhe=a("p"),uUo=o("Examples:"),bUo=l(),f(Dw.$$.fragment),MBe=l(),cc=a("h2"),uv=a("a"),ihe=a("span"),f(Gw.$$.fragment),FUo=l(),dhe=a("span"),vUo=o("AutoModelForImageSegmentation"),EBe=l(),ur=a("div"),f(Ow.$$.fragment),TUo=l(),fc=a("p"),MUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),rO=a("a"),EUo=o("from_pretrained()"),CUo=o(" class method or the "),tO=a("a"),wUo=o("from_config()"),AUo=o(` class
method.`),yUo=l(),Vw=a("p"),LUo=o("This class cannot be instantiated directly using "),che=a("code"),xUo=o("__init__()"),kUo=o(" (throws an error)."),SUo=l(),mt=a("div"),f(Xw.$$.fragment),RUo=l(),fhe=a("p"),BUo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),PUo=l(),mc=a("p"),$Uo=o(`Note:
Loading a model from its configuration file does `),mhe=a("strong"),qUo=o("not"),IUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aO=a("a"),jUo=o("from_pretrained()"),NUo=o(" to load the model weights."),DUo=l(),ghe=a("p"),GUo=o("Examples:"),OUo=l(),f(zw.$$.fragment),VUo=l(),to=a("div"),f(Qw.$$.fragment),XUo=l(),hhe=a("p"),zUo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),QUo=l(),un=a("p"),WUo=o("The model class to instantiate is selected based on the "),phe=a("code"),HUo=o("model_type"),UUo=o(` property of the config object (either
passed as an argument or loaded from `),_he=a("code"),JUo=o("pretrained_model_name_or_path"),YUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uhe=a("code"),KUo=o("pretrained_model_name_or_path"),ZUo=o(":"),eJo=l(),bhe=a("ul"),bv=a("li"),Fhe=a("strong"),oJo=o("detr"),rJo=o(" \u2014 "),nO=a("a"),tJo=o("DetrForSegmentation"),aJo=o(" (DETR model)"),nJo=l(),Fv=a("p"),sJo=o("The model is set in evaluation mode by default using "),vhe=a("code"),lJo=o("model.eval()"),iJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),The=a("code"),dJo=o("model.train()"),cJo=l(),Mhe=a("p"),fJo=o("Examples:"),mJo=l(),f(Ww.$$.fragment),CBe=l(),gc=a("h2"),vv=a("a"),Ehe=a("span"),f(Hw.$$.fragment),gJo=l(),Che=a("span"),hJo=o("AutoModelForSemanticSegmentation"),wBe=l(),br=a("div"),f(Uw.$$.fragment),pJo=l(),hc=a("p"),_Jo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),sO=a("a"),uJo=o("from_pretrained()"),bJo=o(" class method or the "),lO=a("a"),FJo=o("from_config()"),vJo=o(` class
method.`),TJo=l(),Jw=a("p"),MJo=o("This class cannot be instantiated directly using "),whe=a("code"),EJo=o("__init__()"),CJo=o(" (throws an error)."),wJo=l(),gt=a("div"),f(Yw.$$.fragment),AJo=l(),Ahe=a("p"),yJo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),LJo=l(),pc=a("p"),xJo=o(`Note:
Loading a model from its configuration file does `),yhe=a("strong"),kJo=o("not"),SJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iO=a("a"),RJo=o("from_pretrained()"),BJo=o(" to load the model weights."),PJo=l(),Lhe=a("p"),$Jo=o("Examples:"),qJo=l(),f(Kw.$$.fragment),IJo=l(),ao=a("div"),f(Zw.$$.fragment),jJo=l(),xhe=a("p"),NJo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),DJo=l(),bn=a("p"),GJo=o("The model class to instantiate is selected based on the "),khe=a("code"),OJo=o("model_type"),VJo=o(` property of the config object (either
passed as an argument or loaded from `),She=a("code"),XJo=o("pretrained_model_name_or_path"),zJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rhe=a("code"),QJo=o("pretrained_model_name_or_path"),WJo=o(":"),HJo=l(),_c=a("ul"),Tv=a("li"),Bhe=a("strong"),UJo=o("beit"),JJo=o(" \u2014 "),dO=a("a"),YJo=o("BeitForSemanticSegmentation"),KJo=o(" (BEiT model)"),ZJo=l(),Mv=a("li"),Phe=a("strong"),eYo=o("dpt"),oYo=o(" \u2014 "),cO=a("a"),rYo=o("DPTForSemanticSegmentation"),tYo=o(" (DPT model)"),aYo=l(),Ev=a("li"),$he=a("strong"),nYo=o("segformer"),sYo=o(" \u2014 "),fO=a("a"),lYo=o("SegformerForSemanticSegmentation"),iYo=o(" (SegFormer model)"),dYo=l(),Cv=a("p"),cYo=o("The model is set in evaluation mode by default using "),qhe=a("code"),fYo=o("model.eval()"),mYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ihe=a("code"),gYo=o("model.train()"),hYo=l(),jhe=a("p"),pYo=o("Examples:"),_Yo=l(),f(eA.$$.fragment),ABe=l(),uc=a("h2"),wv=a("a"),Nhe=a("span"),f(oA.$$.fragment),uYo=l(),Dhe=a("span"),bYo=o("AutoModelForInstanceSegmentation"),yBe=l(),Fr=a("div"),f(rA.$$.fragment),FYo=l(),bc=a("p"),vYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),mO=a("a"),TYo=o("from_pretrained()"),MYo=o(" class method or the "),gO=a("a"),EYo=o("from_config()"),CYo=o(` class
method.`),wYo=l(),tA=a("p"),AYo=o("This class cannot be instantiated directly using "),Ghe=a("code"),yYo=o("__init__()"),LYo=o(" (throws an error)."),xYo=l(),ht=a("div"),f(aA.$$.fragment),kYo=l(),Ohe=a("p"),SYo=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),RYo=l(),Fc=a("p"),BYo=o(`Note:
Loading a model from its configuration file does `),Vhe=a("strong"),PYo=o("not"),$Yo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hO=a("a"),qYo=o("from_pretrained()"),IYo=o(" to load the model weights."),jYo=l(),Xhe=a("p"),NYo=o("Examples:"),DYo=l(),f(nA.$$.fragment),GYo=l(),no=a("div"),f(sA.$$.fragment),OYo=l(),zhe=a("p"),VYo=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),XYo=l(),Fn=a("p"),zYo=o("The model class to instantiate is selected based on the "),Qhe=a("code"),QYo=o("model_type"),WYo=o(` property of the config object (either
passed as an argument or loaded from `),Whe=a("code"),HYo=o("pretrained_model_name_or_path"),UYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hhe=a("code"),JYo=o("pretrained_model_name_or_path"),YYo=o(":"),KYo=l(),Uhe=a("ul"),Av=a("li"),Jhe=a("strong"),ZYo=o("maskformer"),eKo=o(" \u2014 "),pO=a("a"),oKo=o("MaskFormerForInstanceSegmentation"),rKo=o(" (MaskFormer model)"),tKo=l(),yv=a("p"),aKo=o("The model is set in evaluation mode by default using "),Yhe=a("code"),nKo=o("model.eval()"),sKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Khe=a("code"),lKo=o("model.train()"),iKo=l(),Zhe=a("p"),dKo=o("Examples:"),cKo=l(),f(lA.$$.fragment),LBe=l(),vc=a("h2"),Lv=a("a"),epe=a("span"),f(iA.$$.fragment),fKo=l(),ope=a("span"),mKo=o("TFAutoModel"),xBe=l(),vr=a("div"),f(dA.$$.fragment),gKo=l(),Tc=a("p"),hKo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),_O=a("a"),pKo=o("from_pretrained()"),_Ko=o(" class method or the "),uO=a("a"),uKo=o("from_config()"),bKo=o(` class
method.`),FKo=l(),cA=a("p"),vKo=o("This class cannot be instantiated directly using "),rpe=a("code"),TKo=o("__init__()"),MKo=o(" (throws an error)."),EKo=l(),pt=a("div"),f(fA.$$.fragment),CKo=l(),tpe=a("p"),wKo=o("Instantiates one of the base model classes of the library from a configuration."),AKo=l(),Mc=a("p"),yKo=o(`Note:
Loading a model from its configuration file does `),ape=a("strong"),LKo=o("not"),xKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bO=a("a"),kKo=o("from_pretrained()"),SKo=o(" to load the model weights."),RKo=l(),npe=a("p"),BKo=o("Examples:"),PKo=l(),f(mA.$$.fragment),$Ko=l(),ho=a("div"),f(gA.$$.fragment),qKo=l(),spe=a("p"),IKo=o("Instantiate one of the base model classes of the library from a pretrained model."),jKo=l(),vn=a("p"),NKo=o("The model class to instantiate is selected based on the "),lpe=a("code"),DKo=o("model_type"),GKo=o(` property of the config object (either
passed as an argument or loaded from `),ipe=a("code"),OKo=o("pretrained_model_name_or_path"),VKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dpe=a("code"),XKo=o("pretrained_model_name_or_path"),zKo=o(":"),QKo=l(),x=a("ul"),xv=a("li"),cpe=a("strong"),WKo=o("albert"),HKo=o(" \u2014 "),FO=a("a"),UKo=o("TFAlbertModel"),JKo=o(" (ALBERT model)"),YKo=l(),kv=a("li"),fpe=a("strong"),KKo=o("bart"),ZKo=o(" \u2014 "),vO=a("a"),eZo=o("TFBartModel"),oZo=o(" (BART model)"),rZo=l(),Sv=a("li"),mpe=a("strong"),tZo=o("bert"),aZo=o(" \u2014 "),TO=a("a"),nZo=o("TFBertModel"),sZo=o(" (BERT model)"),lZo=l(),Rv=a("li"),gpe=a("strong"),iZo=o("blenderbot"),dZo=o(" \u2014 "),MO=a("a"),cZo=o("TFBlenderbotModel"),fZo=o(" (Blenderbot model)"),mZo=l(),Bv=a("li"),hpe=a("strong"),gZo=o("blenderbot-small"),hZo=o(" \u2014 "),EO=a("a"),pZo=o("TFBlenderbotSmallModel"),_Zo=o(" (BlenderbotSmall model)"),uZo=l(),Pv=a("li"),ppe=a("strong"),bZo=o("camembert"),FZo=o(" \u2014 "),CO=a("a"),vZo=o("TFCamembertModel"),TZo=o(" (CamemBERT model)"),MZo=l(),$v=a("li"),_pe=a("strong"),EZo=o("clip"),CZo=o(" \u2014 "),wO=a("a"),wZo=o("TFCLIPModel"),AZo=o(" (CLIP model)"),yZo=l(),qv=a("li"),upe=a("strong"),LZo=o("convbert"),xZo=o(" \u2014 "),AO=a("a"),kZo=o("TFConvBertModel"),SZo=o(" (ConvBERT model)"),RZo=l(),Iv=a("li"),bpe=a("strong"),BZo=o("convnext"),PZo=o(" \u2014 "),yO=a("a"),$Zo=o("TFConvNextModel"),qZo=o(" (ConvNext model)"),IZo=l(),jv=a("li"),Fpe=a("strong"),jZo=o("ctrl"),NZo=o(" \u2014 "),LO=a("a"),DZo=o("TFCTRLModel"),GZo=o(" (CTRL model)"),OZo=l(),Nv=a("li"),vpe=a("strong"),VZo=o("deberta"),XZo=o(" \u2014 "),xO=a("a"),zZo=o("TFDebertaModel"),QZo=o(" (DeBERTa model)"),WZo=l(),Dv=a("li"),Tpe=a("strong"),HZo=o("deberta-v2"),UZo=o(" \u2014 "),kO=a("a"),JZo=o("TFDebertaV2Model"),YZo=o(" (DeBERTa-v2 model)"),KZo=l(),Gv=a("li"),Mpe=a("strong"),ZZo=o("distilbert"),eer=o(" \u2014 "),SO=a("a"),oer=o("TFDistilBertModel"),rer=o(" (DistilBERT model)"),ter=l(),Ov=a("li"),Epe=a("strong"),aer=o("dpr"),ner=o(" \u2014 "),RO=a("a"),ser=o("TFDPRQuestionEncoder"),ler=o(" (DPR model)"),ier=l(),Vv=a("li"),Cpe=a("strong"),der=o("electra"),cer=o(" \u2014 "),BO=a("a"),fer=o("TFElectraModel"),mer=o(" (ELECTRA model)"),ger=l(),Xv=a("li"),wpe=a("strong"),her=o("flaubert"),per=o(" \u2014 "),PO=a("a"),_er=o("TFFlaubertModel"),uer=o(" (FlauBERT model)"),ber=l(),Qs=a("li"),Ape=a("strong"),Fer=o("funnel"),ver=o(" \u2014 "),$O=a("a"),Ter=o("TFFunnelModel"),Mer=o(" or "),qO=a("a"),Eer=o("TFFunnelBaseModel"),Cer=o(" (Funnel Transformer model)"),wer=l(),zv=a("li"),ype=a("strong"),Aer=o("gpt2"),yer=o(" \u2014 "),IO=a("a"),Ler=o("TFGPT2Model"),xer=o(" (OpenAI GPT-2 model)"),ker=l(),Qv=a("li"),Lpe=a("strong"),Ser=o("gptj"),Rer=o(" \u2014 "),jO=a("a"),Ber=o("TFGPTJModel"),Per=o(" (GPT-J model)"),$er=l(),Wv=a("li"),xpe=a("strong"),qer=o("hubert"),Ier=o(" \u2014 "),NO=a("a"),jer=o("TFHubertModel"),Ner=o(" (Hubert model)"),Der=l(),Hv=a("li"),kpe=a("strong"),Ger=o("layoutlm"),Oer=o(" \u2014 "),DO=a("a"),Ver=o("TFLayoutLMModel"),Xer=o(" (LayoutLM model)"),zer=l(),Uv=a("li"),Spe=a("strong"),Qer=o("led"),Wer=o(" \u2014 "),GO=a("a"),Her=o("TFLEDModel"),Uer=o(" (LED model)"),Jer=l(),Jv=a("li"),Rpe=a("strong"),Yer=o("longformer"),Ker=o(" \u2014 "),OO=a("a"),Zer=o("TFLongformerModel"),eor=o(" (Longformer model)"),oor=l(),Yv=a("li"),Bpe=a("strong"),ror=o("lxmert"),tor=o(" \u2014 "),VO=a("a"),aor=o("TFLxmertModel"),nor=o(" (LXMERT model)"),sor=l(),Kv=a("li"),Ppe=a("strong"),lor=o("marian"),ior=o(" \u2014 "),XO=a("a"),dor=o("TFMarianModel"),cor=o(" (Marian model)"),mor=l(),Zv=a("li"),$pe=a("strong"),gor=o("mbart"),hor=o(" \u2014 "),zO=a("a"),por=o("TFMBartModel"),_or=o(" (mBART model)"),uor=l(),e6=a("li"),qpe=a("strong"),bor=o("mobilebert"),For=o(" \u2014 "),QO=a("a"),vor=o("TFMobileBertModel"),Tor=o(" (MobileBERT model)"),Mor=l(),o6=a("li"),Ipe=a("strong"),Eor=o("mpnet"),Cor=o(" \u2014 "),WO=a("a"),wor=o("TFMPNetModel"),Aor=o(" (MPNet model)"),yor=l(),r6=a("li"),jpe=a("strong"),Lor=o("mt5"),xor=o(" \u2014 "),HO=a("a"),kor=o("TFMT5Model"),Sor=o(" (mT5 model)"),Ror=l(),t6=a("li"),Npe=a("strong"),Bor=o("openai-gpt"),Por=o(" \u2014 "),UO=a("a"),$or=o("TFOpenAIGPTModel"),qor=o(" (OpenAI GPT model)"),Ior=l(),a6=a("li"),Dpe=a("strong"),jor=o("pegasus"),Nor=o(" \u2014 "),JO=a("a"),Dor=o("TFPegasusModel"),Gor=o(" (Pegasus model)"),Oor=l(),n6=a("li"),Gpe=a("strong"),Vor=o("rembert"),Xor=o(" \u2014 "),YO=a("a"),zor=o("TFRemBertModel"),Qor=o(" (RemBERT model)"),Wor=l(),s6=a("li"),Ope=a("strong"),Hor=o("roberta"),Uor=o(" \u2014 "),KO=a("a"),Jor=o("TFRobertaModel"),Yor=o(" (RoBERTa model)"),Kor=l(),l6=a("li"),Vpe=a("strong"),Zor=o("roformer"),err=o(" \u2014 "),ZO=a("a"),orr=o("TFRoFormerModel"),rrr=o(" (RoFormer model)"),trr=l(),i6=a("li"),Xpe=a("strong"),arr=o("speech_to_text"),nrr=o(" \u2014 "),eV=a("a"),srr=o("TFSpeech2TextModel"),lrr=o(" (Speech2Text model)"),irr=l(),d6=a("li"),zpe=a("strong"),drr=o("t5"),crr=o(" \u2014 "),oV=a("a"),frr=o("TFT5Model"),mrr=o(" (T5 model)"),grr=l(),c6=a("li"),Qpe=a("strong"),hrr=o("tapas"),prr=o(" \u2014 "),rV=a("a"),_rr=o("TFTapasModel"),urr=o(" (TAPAS model)"),brr=l(),f6=a("li"),Wpe=a("strong"),Frr=o("transfo-xl"),vrr=o(" \u2014 "),tV=a("a"),Trr=o("TFTransfoXLModel"),Mrr=o(" (Transformer-XL model)"),Err=l(),m6=a("li"),Hpe=a("strong"),Crr=o("vit"),wrr=o(" \u2014 "),aV=a("a"),Arr=o("TFViTModel"),yrr=o(" (ViT model)"),Lrr=l(),g6=a("li"),Upe=a("strong"),xrr=o("vit_mae"),krr=o(" \u2014 "),nV=a("a"),Srr=o("TFViTMAEModel"),Rrr=o(" (ViTMAE model)"),Brr=l(),h6=a("li"),Jpe=a("strong"),Prr=o("wav2vec2"),$rr=o(" \u2014 "),sV=a("a"),qrr=o("TFWav2Vec2Model"),Irr=o(" (Wav2Vec2 model)"),jrr=l(),p6=a("li"),Ype=a("strong"),Nrr=o("xlm"),Drr=o(" \u2014 "),lV=a("a"),Grr=o("TFXLMModel"),Orr=o(" (XLM model)"),Vrr=l(),_6=a("li"),Kpe=a("strong"),Xrr=o("xlm-roberta"),zrr=o(" \u2014 "),iV=a("a"),Qrr=o("TFXLMRobertaModel"),Wrr=o(" (XLM-RoBERTa model)"),Hrr=l(),u6=a("li"),Zpe=a("strong"),Urr=o("xlnet"),Jrr=o(" \u2014 "),dV=a("a"),Yrr=o("TFXLNetModel"),Krr=o(" (XLNet model)"),Zrr=l(),e_e=a("p"),etr=o("Examples:"),otr=l(),f(hA.$$.fragment),kBe=l(),Ec=a("h2"),b6=a("a"),o_e=a("span"),f(pA.$$.fragment),rtr=l(),r_e=a("span"),ttr=o("TFAutoModelForPreTraining"),SBe=l(),Tr=a("div"),f(_A.$$.fragment),atr=l(),Cc=a("p"),ntr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),cV=a("a"),str=o("from_pretrained()"),ltr=o(" class method or the "),fV=a("a"),itr=o("from_config()"),dtr=o(` class
method.`),ctr=l(),uA=a("p"),ftr=o("This class cannot be instantiated directly using "),t_e=a("code"),mtr=o("__init__()"),gtr=o(" (throws an error)."),htr=l(),_t=a("div"),f(bA.$$.fragment),ptr=l(),a_e=a("p"),_tr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),utr=l(),wc=a("p"),btr=o(`Note:
Loading a model from its configuration file does `),n_e=a("strong"),Ftr=o("not"),vtr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mV=a("a"),Ttr=o("from_pretrained()"),Mtr=o(" to load the model weights."),Etr=l(),s_e=a("p"),Ctr=o("Examples:"),wtr=l(),f(FA.$$.fragment),Atr=l(),po=a("div"),f(vA.$$.fragment),ytr=l(),l_e=a("p"),Ltr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),xtr=l(),Tn=a("p"),ktr=o("The model class to instantiate is selected based on the "),i_e=a("code"),Str=o("model_type"),Rtr=o(` property of the config object (either
passed as an argument or loaded from `),d_e=a("code"),Btr=o("pretrained_model_name_or_path"),Ptr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c_e=a("code"),$tr=o("pretrained_model_name_or_path"),qtr=o(":"),Itr=l(),H=a("ul"),F6=a("li"),f_e=a("strong"),jtr=o("albert"),Ntr=o(" \u2014 "),gV=a("a"),Dtr=o("TFAlbertForPreTraining"),Gtr=o(" (ALBERT model)"),Otr=l(),v6=a("li"),m_e=a("strong"),Vtr=o("bart"),Xtr=o(" \u2014 "),hV=a("a"),ztr=o("TFBartForConditionalGeneration"),Qtr=o(" (BART model)"),Wtr=l(),T6=a("li"),g_e=a("strong"),Htr=o("bert"),Utr=o(" \u2014 "),pV=a("a"),Jtr=o("TFBertForPreTraining"),Ytr=o(" (BERT model)"),Ktr=l(),M6=a("li"),h_e=a("strong"),Ztr=o("camembert"),ear=o(" \u2014 "),_V=a("a"),oar=o("TFCamembertForMaskedLM"),rar=o(" (CamemBERT model)"),tar=l(),E6=a("li"),p_e=a("strong"),aar=o("ctrl"),nar=o(" \u2014 "),uV=a("a"),sar=o("TFCTRLLMHeadModel"),lar=o(" (CTRL model)"),iar=l(),C6=a("li"),__e=a("strong"),dar=o("distilbert"),car=o(" \u2014 "),bV=a("a"),far=o("TFDistilBertForMaskedLM"),mar=o(" (DistilBERT model)"),gar=l(),w6=a("li"),u_e=a("strong"),har=o("electra"),par=o(" \u2014 "),FV=a("a"),_ar=o("TFElectraForPreTraining"),uar=o(" (ELECTRA model)"),bar=l(),A6=a("li"),b_e=a("strong"),Far=o("flaubert"),Tar=o(" \u2014 "),vV=a("a"),Mar=o("TFFlaubertWithLMHeadModel"),Ear=o(" (FlauBERT model)"),Car=l(),y6=a("li"),F_e=a("strong"),war=o("funnel"),Aar=o(" \u2014 "),TV=a("a"),yar=o("TFFunnelForPreTraining"),Lar=o(" (Funnel Transformer model)"),xar=l(),L6=a("li"),v_e=a("strong"),kar=o("gpt2"),Sar=o(" \u2014 "),MV=a("a"),Rar=o("TFGPT2LMHeadModel"),Bar=o(" (OpenAI GPT-2 model)"),Par=l(),x6=a("li"),T_e=a("strong"),$ar=o("layoutlm"),qar=o(" \u2014 "),EV=a("a"),Iar=o("TFLayoutLMForMaskedLM"),jar=o(" (LayoutLM model)"),Nar=l(),k6=a("li"),M_e=a("strong"),Dar=o("lxmert"),Gar=o(" \u2014 "),CV=a("a"),Oar=o("TFLxmertForPreTraining"),Var=o(" (LXMERT model)"),Xar=l(),S6=a("li"),E_e=a("strong"),zar=o("mobilebert"),Qar=o(" \u2014 "),wV=a("a"),War=o("TFMobileBertForPreTraining"),Har=o(" (MobileBERT model)"),Uar=l(),R6=a("li"),C_e=a("strong"),Jar=o("mpnet"),Yar=o(" \u2014 "),AV=a("a"),Kar=o("TFMPNetForMaskedLM"),Zar=o(" (MPNet model)"),enr=l(),B6=a("li"),w_e=a("strong"),onr=o("openai-gpt"),rnr=o(" \u2014 "),yV=a("a"),tnr=o("TFOpenAIGPTLMHeadModel"),anr=o(" (OpenAI GPT model)"),nnr=l(),P6=a("li"),A_e=a("strong"),snr=o("roberta"),lnr=o(" \u2014 "),LV=a("a"),inr=o("TFRobertaForMaskedLM"),dnr=o(" (RoBERTa model)"),cnr=l(),$6=a("li"),y_e=a("strong"),fnr=o("t5"),mnr=o(" \u2014 "),xV=a("a"),gnr=o("TFT5ForConditionalGeneration"),hnr=o(" (T5 model)"),pnr=l(),q6=a("li"),L_e=a("strong"),_nr=o("tapas"),unr=o(" \u2014 "),kV=a("a"),bnr=o("TFTapasForMaskedLM"),Fnr=o(" (TAPAS model)"),vnr=l(),I6=a("li"),x_e=a("strong"),Tnr=o("transfo-xl"),Mnr=o(" \u2014 "),SV=a("a"),Enr=o("TFTransfoXLLMHeadModel"),Cnr=o(" (Transformer-XL model)"),wnr=l(),j6=a("li"),k_e=a("strong"),Anr=o("vit_mae"),ynr=o(" \u2014 "),RV=a("a"),Lnr=o("TFViTMAEForPreTraining"),xnr=o(" (ViTMAE model)"),knr=l(),N6=a("li"),S_e=a("strong"),Snr=o("xlm"),Rnr=o(" \u2014 "),BV=a("a"),Bnr=o("TFXLMWithLMHeadModel"),Pnr=o(" (XLM model)"),$nr=l(),D6=a("li"),R_e=a("strong"),qnr=o("xlm-roberta"),Inr=o(" \u2014 "),PV=a("a"),jnr=o("TFXLMRobertaForMaskedLM"),Nnr=o(" (XLM-RoBERTa model)"),Dnr=l(),G6=a("li"),B_e=a("strong"),Gnr=o("xlnet"),Onr=o(" \u2014 "),$V=a("a"),Vnr=o("TFXLNetLMHeadModel"),Xnr=o(" (XLNet model)"),znr=l(),P_e=a("p"),Qnr=o("Examples:"),Wnr=l(),f(TA.$$.fragment),RBe=l(),Ac=a("h2"),O6=a("a"),$_e=a("span"),f(MA.$$.fragment),Hnr=l(),q_e=a("span"),Unr=o("TFAutoModelForCausalLM"),BBe=l(),Mr=a("div"),f(EA.$$.fragment),Jnr=l(),yc=a("p"),Ynr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),qV=a("a"),Knr=o("from_pretrained()"),Znr=o(" class method or the "),IV=a("a"),esr=o("from_config()"),osr=o(` class
method.`),rsr=l(),CA=a("p"),tsr=o("This class cannot be instantiated directly using "),I_e=a("code"),asr=o("__init__()"),nsr=o(" (throws an error)."),ssr=l(),ut=a("div"),f(wA.$$.fragment),lsr=l(),j_e=a("p"),isr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),dsr=l(),Lc=a("p"),csr=o(`Note:
Loading a model from its configuration file does `),N_e=a("strong"),fsr=o("not"),msr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jV=a("a"),gsr=o("from_pretrained()"),hsr=o(" to load the model weights."),psr=l(),D_e=a("p"),_sr=o("Examples:"),usr=l(),f(AA.$$.fragment),bsr=l(),_o=a("div"),f(yA.$$.fragment),Fsr=l(),G_e=a("p"),vsr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Tsr=l(),Mn=a("p"),Msr=o("The model class to instantiate is selected based on the "),O_e=a("code"),Esr=o("model_type"),Csr=o(` property of the config object (either
passed as an argument or loaded from `),V_e=a("code"),wsr=o("pretrained_model_name_or_path"),Asr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X_e=a("code"),ysr=o("pretrained_model_name_or_path"),Lsr=o(":"),xsr=l(),ce=a("ul"),V6=a("li"),z_e=a("strong"),ksr=o("bert"),Ssr=o(" \u2014 "),NV=a("a"),Rsr=o("TFBertLMHeadModel"),Bsr=o(" (BERT model)"),Psr=l(),X6=a("li"),Q_e=a("strong"),$sr=o("camembert"),qsr=o(" \u2014 "),DV=a("a"),Isr=o("TFCamembertForCausalLM"),jsr=o(" (CamemBERT model)"),Nsr=l(),z6=a("li"),W_e=a("strong"),Dsr=o("ctrl"),Gsr=o(" \u2014 "),GV=a("a"),Osr=o("TFCTRLLMHeadModel"),Vsr=o(" (CTRL model)"),Xsr=l(),Q6=a("li"),H_e=a("strong"),zsr=o("gpt2"),Qsr=o(" \u2014 "),OV=a("a"),Wsr=o("TFGPT2LMHeadModel"),Hsr=o(" (OpenAI GPT-2 model)"),Usr=l(),W6=a("li"),U_e=a("strong"),Jsr=o("gptj"),Ysr=o(" \u2014 "),VV=a("a"),Ksr=o("TFGPTJForCausalLM"),Zsr=o(" (GPT-J model)"),elr=l(),H6=a("li"),J_e=a("strong"),olr=o("openai-gpt"),rlr=o(" \u2014 "),XV=a("a"),tlr=o("TFOpenAIGPTLMHeadModel"),alr=o(" (OpenAI GPT model)"),nlr=l(),U6=a("li"),Y_e=a("strong"),slr=o("rembert"),llr=o(" \u2014 "),zV=a("a"),ilr=o("TFRemBertForCausalLM"),dlr=o(" (RemBERT model)"),clr=l(),J6=a("li"),K_e=a("strong"),flr=o("roberta"),mlr=o(" \u2014 "),QV=a("a"),glr=o("TFRobertaForCausalLM"),hlr=o(" (RoBERTa model)"),plr=l(),Y6=a("li"),Z_e=a("strong"),_lr=o("roformer"),ulr=o(" \u2014 "),WV=a("a"),blr=o("TFRoFormerForCausalLM"),Flr=o(" (RoFormer model)"),vlr=l(),K6=a("li"),eue=a("strong"),Tlr=o("transfo-xl"),Mlr=o(" \u2014 "),HV=a("a"),Elr=o("TFTransfoXLLMHeadModel"),Clr=o(" (Transformer-XL model)"),wlr=l(),Z6=a("li"),oue=a("strong"),Alr=o("xlm"),ylr=o(" \u2014 "),UV=a("a"),Llr=o("TFXLMWithLMHeadModel"),xlr=o(" (XLM model)"),klr=l(),e0=a("li"),rue=a("strong"),Slr=o("xlnet"),Rlr=o(" \u2014 "),JV=a("a"),Blr=o("TFXLNetLMHeadModel"),Plr=o(" (XLNet model)"),$lr=l(),tue=a("p"),qlr=o("Examples:"),Ilr=l(),f(LA.$$.fragment),PBe=l(),xc=a("h2"),o0=a("a"),aue=a("span"),f(xA.$$.fragment),jlr=l(),nue=a("span"),Nlr=o("TFAutoModelForImageClassification"),$Be=l(),Er=a("div"),f(kA.$$.fragment),Dlr=l(),kc=a("p"),Glr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),YV=a("a"),Olr=o("from_pretrained()"),Vlr=o(" class method or the "),KV=a("a"),Xlr=o("from_config()"),zlr=o(` class
method.`),Qlr=l(),SA=a("p"),Wlr=o("This class cannot be instantiated directly using "),sue=a("code"),Hlr=o("__init__()"),Ulr=o(" (throws an error)."),Jlr=l(),bt=a("div"),f(RA.$$.fragment),Ylr=l(),lue=a("p"),Klr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Zlr=l(),Sc=a("p"),eir=o(`Note:
Loading a model from its configuration file does `),iue=a("strong"),oir=o("not"),rir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZV=a("a"),tir=o("from_pretrained()"),air=o(" to load the model weights."),nir=l(),due=a("p"),sir=o("Examples:"),lir=l(),f(BA.$$.fragment),iir=l(),uo=a("div"),f(PA.$$.fragment),dir=l(),cue=a("p"),cir=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),fir=l(),En=a("p"),mir=o("The model class to instantiate is selected based on the "),fue=a("code"),gir=o("model_type"),hir=o(` property of the config object (either
passed as an argument or loaded from `),mue=a("code"),pir=o("pretrained_model_name_or_path"),_ir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gue=a("code"),uir=o("pretrained_model_name_or_path"),bir=o(":"),Fir=l(),$A=a("ul"),r0=a("li"),hue=a("strong"),vir=o("convnext"),Tir=o(" \u2014 "),eX=a("a"),Mir=o("TFConvNextForImageClassification"),Eir=o(" (ConvNext model)"),Cir=l(),t0=a("li"),pue=a("strong"),wir=o("vit"),Air=o(" \u2014 "),oX=a("a"),yir=o("TFViTForImageClassification"),Lir=o(" (ViT model)"),xir=l(),_ue=a("p"),kir=o("Examples:"),Sir=l(),f(qA.$$.fragment),qBe=l(),Rc=a("h2"),a0=a("a"),uue=a("span"),f(IA.$$.fragment),Rir=l(),bue=a("span"),Bir=o("TFAutoModelForMaskedLM"),IBe=l(),Cr=a("div"),f(jA.$$.fragment),Pir=l(),Bc=a("p"),$ir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),rX=a("a"),qir=o("from_pretrained()"),Iir=o(" class method or the "),tX=a("a"),jir=o("from_config()"),Nir=o(` class
method.`),Dir=l(),NA=a("p"),Gir=o("This class cannot be instantiated directly using "),Fue=a("code"),Oir=o("__init__()"),Vir=o(" (throws an error)."),Xir=l(),Ft=a("div"),f(DA.$$.fragment),zir=l(),vue=a("p"),Qir=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Wir=l(),Pc=a("p"),Hir=o(`Note:
Loading a model from its configuration file does `),Tue=a("strong"),Uir=o("not"),Jir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aX=a("a"),Yir=o("from_pretrained()"),Kir=o(" to load the model weights."),Zir=l(),Mue=a("p"),edr=o("Examples:"),odr=l(),f(GA.$$.fragment),rdr=l(),bo=a("div"),f(OA.$$.fragment),tdr=l(),Eue=a("p"),adr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),ndr=l(),Cn=a("p"),sdr=o("The model class to instantiate is selected based on the "),Cue=a("code"),ldr=o("model_type"),idr=o(` property of the config object (either
passed as an argument or loaded from `),wue=a("code"),ddr=o("pretrained_model_name_or_path"),cdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Aue=a("code"),fdr=o("pretrained_model_name_or_path"),mdr=o(":"),gdr=l(),J=a("ul"),n0=a("li"),yue=a("strong"),hdr=o("albert"),pdr=o(" \u2014 "),nX=a("a"),_dr=o("TFAlbertForMaskedLM"),udr=o(" (ALBERT model)"),bdr=l(),s0=a("li"),Lue=a("strong"),Fdr=o("bert"),vdr=o(" \u2014 "),sX=a("a"),Tdr=o("TFBertForMaskedLM"),Mdr=o(" (BERT model)"),Edr=l(),l0=a("li"),xue=a("strong"),Cdr=o("camembert"),wdr=o(" \u2014 "),lX=a("a"),Adr=o("TFCamembertForMaskedLM"),ydr=o(" (CamemBERT model)"),Ldr=l(),i0=a("li"),kue=a("strong"),xdr=o("convbert"),kdr=o(" \u2014 "),iX=a("a"),Sdr=o("TFConvBertForMaskedLM"),Rdr=o(" (ConvBERT model)"),Bdr=l(),d0=a("li"),Sue=a("strong"),Pdr=o("deberta"),$dr=o(" \u2014 "),dX=a("a"),qdr=o("TFDebertaForMaskedLM"),Idr=o(" (DeBERTa model)"),jdr=l(),c0=a("li"),Rue=a("strong"),Ndr=o("deberta-v2"),Ddr=o(" \u2014 "),cX=a("a"),Gdr=o("TFDebertaV2ForMaskedLM"),Odr=o(" (DeBERTa-v2 model)"),Vdr=l(),f0=a("li"),Bue=a("strong"),Xdr=o("distilbert"),zdr=o(" \u2014 "),fX=a("a"),Qdr=o("TFDistilBertForMaskedLM"),Wdr=o(" (DistilBERT model)"),Hdr=l(),m0=a("li"),Pue=a("strong"),Udr=o("electra"),Jdr=o(" \u2014 "),mX=a("a"),Ydr=o("TFElectraForMaskedLM"),Kdr=o(" (ELECTRA model)"),Zdr=l(),g0=a("li"),$ue=a("strong"),ecr=o("flaubert"),ocr=o(" \u2014 "),gX=a("a"),rcr=o("TFFlaubertWithLMHeadModel"),tcr=o(" (FlauBERT model)"),acr=l(),h0=a("li"),que=a("strong"),ncr=o("funnel"),scr=o(" \u2014 "),hX=a("a"),lcr=o("TFFunnelForMaskedLM"),icr=o(" (Funnel Transformer model)"),dcr=l(),p0=a("li"),Iue=a("strong"),ccr=o("layoutlm"),fcr=o(" \u2014 "),pX=a("a"),mcr=o("TFLayoutLMForMaskedLM"),gcr=o(" (LayoutLM model)"),hcr=l(),_0=a("li"),jue=a("strong"),pcr=o("longformer"),_cr=o(" \u2014 "),_X=a("a"),ucr=o("TFLongformerForMaskedLM"),bcr=o(" (Longformer model)"),Fcr=l(),u0=a("li"),Nue=a("strong"),vcr=o("mobilebert"),Tcr=o(" \u2014 "),uX=a("a"),Mcr=o("TFMobileBertForMaskedLM"),Ecr=o(" (MobileBERT model)"),Ccr=l(),b0=a("li"),Due=a("strong"),wcr=o("mpnet"),Acr=o(" \u2014 "),bX=a("a"),ycr=o("TFMPNetForMaskedLM"),Lcr=o(" (MPNet model)"),xcr=l(),F0=a("li"),Gue=a("strong"),kcr=o("rembert"),Scr=o(" \u2014 "),FX=a("a"),Rcr=o("TFRemBertForMaskedLM"),Bcr=o(" (RemBERT model)"),Pcr=l(),v0=a("li"),Oue=a("strong"),$cr=o("roberta"),qcr=o(" \u2014 "),vX=a("a"),Icr=o("TFRobertaForMaskedLM"),jcr=o(" (RoBERTa model)"),Ncr=l(),T0=a("li"),Vue=a("strong"),Dcr=o("roformer"),Gcr=o(" \u2014 "),TX=a("a"),Ocr=o("TFRoFormerForMaskedLM"),Vcr=o(" (RoFormer model)"),Xcr=l(),M0=a("li"),Xue=a("strong"),zcr=o("tapas"),Qcr=o(" \u2014 "),MX=a("a"),Wcr=o("TFTapasForMaskedLM"),Hcr=o(" (TAPAS model)"),Ucr=l(),E0=a("li"),zue=a("strong"),Jcr=o("xlm"),Ycr=o(" \u2014 "),EX=a("a"),Kcr=o("TFXLMWithLMHeadModel"),Zcr=o(" (XLM model)"),efr=l(),C0=a("li"),Que=a("strong"),ofr=o("xlm-roberta"),rfr=o(" \u2014 "),CX=a("a"),tfr=o("TFXLMRobertaForMaskedLM"),afr=o(" (XLM-RoBERTa model)"),nfr=l(),Wue=a("p"),sfr=o("Examples:"),lfr=l(),f(VA.$$.fragment),jBe=l(),$c=a("h2"),w0=a("a"),Hue=a("span"),f(XA.$$.fragment),ifr=l(),Uue=a("span"),dfr=o("TFAutoModelForSeq2SeqLM"),NBe=l(),wr=a("div"),f(zA.$$.fragment),cfr=l(),qc=a("p"),ffr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),wX=a("a"),mfr=o("from_pretrained()"),gfr=o(" class method or the "),AX=a("a"),hfr=o("from_config()"),pfr=o(` class
method.`),_fr=l(),QA=a("p"),ufr=o("This class cannot be instantiated directly using "),Jue=a("code"),bfr=o("__init__()"),Ffr=o(" (throws an error)."),vfr=l(),vt=a("div"),f(WA.$$.fragment),Tfr=l(),Yue=a("p"),Mfr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Efr=l(),Ic=a("p"),Cfr=o(`Note:
Loading a model from its configuration file does `),Kue=a("strong"),wfr=o("not"),Afr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yX=a("a"),yfr=o("from_pretrained()"),Lfr=o(" to load the model weights."),xfr=l(),Zue=a("p"),kfr=o("Examples:"),Sfr=l(),f(HA.$$.fragment),Rfr=l(),Fo=a("div"),f(UA.$$.fragment),Bfr=l(),e1e=a("p"),Pfr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),$fr=l(),wn=a("p"),qfr=o("The model class to instantiate is selected based on the "),o1e=a("code"),Ifr=o("model_type"),jfr=o(` property of the config object (either
passed as an argument or loaded from `),r1e=a("code"),Nfr=o("pretrained_model_name_or_path"),Dfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t1e=a("code"),Gfr=o("pretrained_model_name_or_path"),Ofr=o(":"),Vfr=l(),ue=a("ul"),A0=a("li"),a1e=a("strong"),Xfr=o("bart"),zfr=o(" \u2014 "),LX=a("a"),Qfr=o("TFBartForConditionalGeneration"),Wfr=o(" (BART model)"),Hfr=l(),y0=a("li"),n1e=a("strong"),Ufr=o("blenderbot"),Jfr=o(" \u2014 "),xX=a("a"),Yfr=o("TFBlenderbotForConditionalGeneration"),Kfr=o(" (Blenderbot model)"),Zfr=l(),L0=a("li"),s1e=a("strong"),emr=o("blenderbot-small"),omr=o(" \u2014 "),kX=a("a"),rmr=o("TFBlenderbotSmallForConditionalGeneration"),tmr=o(" (BlenderbotSmall model)"),amr=l(),x0=a("li"),l1e=a("strong"),nmr=o("encoder-decoder"),smr=o(" \u2014 "),SX=a("a"),lmr=o("TFEncoderDecoderModel"),imr=o(" (Encoder decoder model)"),dmr=l(),k0=a("li"),i1e=a("strong"),cmr=o("led"),fmr=o(" \u2014 "),RX=a("a"),mmr=o("TFLEDForConditionalGeneration"),gmr=o(" (LED model)"),hmr=l(),S0=a("li"),d1e=a("strong"),pmr=o("marian"),_mr=o(" \u2014 "),BX=a("a"),umr=o("TFMarianMTModel"),bmr=o(" (Marian model)"),Fmr=l(),R0=a("li"),c1e=a("strong"),vmr=o("mbart"),Tmr=o(" \u2014 "),PX=a("a"),Mmr=o("TFMBartForConditionalGeneration"),Emr=o(" (mBART model)"),Cmr=l(),B0=a("li"),f1e=a("strong"),wmr=o("mt5"),Amr=o(" \u2014 "),$X=a("a"),ymr=o("TFMT5ForConditionalGeneration"),Lmr=o(" (mT5 model)"),xmr=l(),P0=a("li"),m1e=a("strong"),kmr=o("pegasus"),Smr=o(" \u2014 "),qX=a("a"),Rmr=o("TFPegasusForConditionalGeneration"),Bmr=o(" (Pegasus model)"),Pmr=l(),$0=a("li"),g1e=a("strong"),$mr=o("t5"),qmr=o(" \u2014 "),IX=a("a"),Imr=o("TFT5ForConditionalGeneration"),jmr=o(" (T5 model)"),Nmr=l(),h1e=a("p"),Dmr=o("Examples:"),Gmr=l(),f(JA.$$.fragment),DBe=l(),jc=a("h2"),q0=a("a"),p1e=a("span"),f(YA.$$.fragment),Omr=l(),_1e=a("span"),Vmr=o("TFAutoModelForSequenceClassification"),GBe=l(),Ar=a("div"),f(KA.$$.fragment),Xmr=l(),Nc=a("p"),zmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),jX=a("a"),Qmr=o("from_pretrained()"),Wmr=o(" class method or the "),NX=a("a"),Hmr=o("from_config()"),Umr=o(` class
method.`),Jmr=l(),ZA=a("p"),Ymr=o("This class cannot be instantiated directly using "),u1e=a("code"),Kmr=o("__init__()"),Zmr=o(" (throws an error)."),egr=l(),Tt=a("div"),f(ey.$$.fragment),ogr=l(),b1e=a("p"),rgr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),tgr=l(),Dc=a("p"),agr=o(`Note:
Loading a model from its configuration file does `),F1e=a("strong"),ngr=o("not"),sgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DX=a("a"),lgr=o("from_pretrained()"),igr=o(" to load the model weights."),dgr=l(),v1e=a("p"),cgr=o("Examples:"),fgr=l(),f(oy.$$.fragment),mgr=l(),vo=a("div"),f(ry.$$.fragment),ggr=l(),T1e=a("p"),hgr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),pgr=l(),An=a("p"),_gr=o("The model class to instantiate is selected based on the "),M1e=a("code"),ugr=o("model_type"),bgr=o(` property of the config object (either
passed as an argument or loaded from `),E1e=a("code"),Fgr=o("pretrained_model_name_or_path"),vgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C1e=a("code"),Tgr=o("pretrained_model_name_or_path"),Mgr=o(":"),Egr=l(),V=a("ul"),I0=a("li"),w1e=a("strong"),Cgr=o("albert"),wgr=o(" \u2014 "),GX=a("a"),Agr=o("TFAlbertForSequenceClassification"),ygr=o(" (ALBERT model)"),Lgr=l(),j0=a("li"),A1e=a("strong"),xgr=o("bert"),kgr=o(" \u2014 "),OX=a("a"),Sgr=o("TFBertForSequenceClassification"),Rgr=o(" (BERT model)"),Bgr=l(),N0=a("li"),y1e=a("strong"),Pgr=o("camembert"),$gr=o(" \u2014 "),VX=a("a"),qgr=o("TFCamembertForSequenceClassification"),Igr=o(" (CamemBERT model)"),jgr=l(),D0=a("li"),L1e=a("strong"),Ngr=o("convbert"),Dgr=o(" \u2014 "),XX=a("a"),Ggr=o("TFConvBertForSequenceClassification"),Ogr=o(" (ConvBERT model)"),Vgr=l(),G0=a("li"),x1e=a("strong"),Xgr=o("ctrl"),zgr=o(" \u2014 "),zX=a("a"),Qgr=o("TFCTRLForSequenceClassification"),Wgr=o(" (CTRL model)"),Hgr=l(),O0=a("li"),k1e=a("strong"),Ugr=o("deberta"),Jgr=o(" \u2014 "),QX=a("a"),Ygr=o("TFDebertaForSequenceClassification"),Kgr=o(" (DeBERTa model)"),Zgr=l(),V0=a("li"),S1e=a("strong"),ehr=o("deberta-v2"),ohr=o(" \u2014 "),WX=a("a"),rhr=o("TFDebertaV2ForSequenceClassification"),thr=o(" (DeBERTa-v2 model)"),ahr=l(),X0=a("li"),R1e=a("strong"),nhr=o("distilbert"),shr=o(" \u2014 "),HX=a("a"),lhr=o("TFDistilBertForSequenceClassification"),ihr=o(" (DistilBERT model)"),dhr=l(),z0=a("li"),B1e=a("strong"),chr=o("electra"),fhr=o(" \u2014 "),UX=a("a"),mhr=o("TFElectraForSequenceClassification"),ghr=o(" (ELECTRA model)"),hhr=l(),Q0=a("li"),P1e=a("strong"),phr=o("flaubert"),_hr=o(" \u2014 "),JX=a("a"),uhr=o("TFFlaubertForSequenceClassification"),bhr=o(" (FlauBERT model)"),Fhr=l(),W0=a("li"),$1e=a("strong"),vhr=o("funnel"),Thr=o(" \u2014 "),YX=a("a"),Mhr=o("TFFunnelForSequenceClassification"),Ehr=o(" (Funnel Transformer model)"),Chr=l(),H0=a("li"),q1e=a("strong"),whr=o("gpt2"),Ahr=o(" \u2014 "),KX=a("a"),yhr=o("TFGPT2ForSequenceClassification"),Lhr=o(" (OpenAI GPT-2 model)"),xhr=l(),U0=a("li"),I1e=a("strong"),khr=o("gptj"),Shr=o(" \u2014 "),ZX=a("a"),Rhr=o("TFGPTJForSequenceClassification"),Bhr=o(" (GPT-J model)"),Phr=l(),J0=a("li"),j1e=a("strong"),$hr=o("layoutlm"),qhr=o(" \u2014 "),ez=a("a"),Ihr=o("TFLayoutLMForSequenceClassification"),jhr=o(" (LayoutLM model)"),Nhr=l(),Y0=a("li"),N1e=a("strong"),Dhr=o("longformer"),Ghr=o(" \u2014 "),oz=a("a"),Ohr=o("TFLongformerForSequenceClassification"),Vhr=o(" (Longformer model)"),Xhr=l(),K0=a("li"),D1e=a("strong"),zhr=o("mobilebert"),Qhr=o(" \u2014 "),rz=a("a"),Whr=o("TFMobileBertForSequenceClassification"),Hhr=o(" (MobileBERT model)"),Uhr=l(),Z0=a("li"),G1e=a("strong"),Jhr=o("mpnet"),Yhr=o(" \u2014 "),tz=a("a"),Khr=o("TFMPNetForSequenceClassification"),Zhr=o(" (MPNet model)"),epr=l(),eT=a("li"),O1e=a("strong"),opr=o("openai-gpt"),rpr=o(" \u2014 "),az=a("a"),tpr=o("TFOpenAIGPTForSequenceClassification"),apr=o(" (OpenAI GPT model)"),npr=l(),oT=a("li"),V1e=a("strong"),spr=o("rembert"),lpr=o(" \u2014 "),nz=a("a"),ipr=o("TFRemBertForSequenceClassification"),dpr=o(" (RemBERT model)"),cpr=l(),rT=a("li"),X1e=a("strong"),fpr=o("roberta"),mpr=o(" \u2014 "),sz=a("a"),gpr=o("TFRobertaForSequenceClassification"),hpr=o(" (RoBERTa model)"),ppr=l(),tT=a("li"),z1e=a("strong"),_pr=o("roformer"),upr=o(" \u2014 "),lz=a("a"),bpr=o("TFRoFormerForSequenceClassification"),Fpr=o(" (RoFormer model)"),vpr=l(),aT=a("li"),Q1e=a("strong"),Tpr=o("tapas"),Mpr=o(" \u2014 "),iz=a("a"),Epr=o("TFTapasForSequenceClassification"),Cpr=o(" (TAPAS model)"),wpr=l(),nT=a("li"),W1e=a("strong"),Apr=o("transfo-xl"),ypr=o(" \u2014 "),dz=a("a"),Lpr=o("TFTransfoXLForSequenceClassification"),xpr=o(" (Transformer-XL model)"),kpr=l(),sT=a("li"),H1e=a("strong"),Spr=o("xlm"),Rpr=o(" \u2014 "),cz=a("a"),Bpr=o("TFXLMForSequenceClassification"),Ppr=o(" (XLM model)"),$pr=l(),lT=a("li"),U1e=a("strong"),qpr=o("xlm-roberta"),Ipr=o(" \u2014 "),fz=a("a"),jpr=o("TFXLMRobertaForSequenceClassification"),Npr=o(" (XLM-RoBERTa model)"),Dpr=l(),iT=a("li"),J1e=a("strong"),Gpr=o("xlnet"),Opr=o(" \u2014 "),mz=a("a"),Vpr=o("TFXLNetForSequenceClassification"),Xpr=o(" (XLNet model)"),zpr=l(),Y1e=a("p"),Qpr=o("Examples:"),Wpr=l(),f(ty.$$.fragment),OBe=l(),Gc=a("h2"),dT=a("a"),K1e=a("span"),f(ay.$$.fragment),Hpr=l(),Z1e=a("span"),Upr=o("TFAutoModelForMultipleChoice"),VBe=l(),yr=a("div"),f(ny.$$.fragment),Jpr=l(),Oc=a("p"),Ypr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),gz=a("a"),Kpr=o("from_pretrained()"),Zpr=o(" class method or the "),hz=a("a"),e_r=o("from_config()"),o_r=o(` class
method.`),r_r=l(),sy=a("p"),t_r=o("This class cannot be instantiated directly using "),ebe=a("code"),a_r=o("__init__()"),n_r=o(" (throws an error)."),s_r=l(),Mt=a("div"),f(ly.$$.fragment),l_r=l(),obe=a("p"),i_r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),d_r=l(),Vc=a("p"),c_r=o(`Note:
Loading a model from its configuration file does `),rbe=a("strong"),f_r=o("not"),m_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pz=a("a"),g_r=o("from_pretrained()"),h_r=o(" to load the model weights."),p_r=l(),tbe=a("p"),__r=o("Examples:"),u_r=l(),f(iy.$$.fragment),b_r=l(),To=a("div"),f(dy.$$.fragment),F_r=l(),abe=a("p"),v_r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),T_r=l(),yn=a("p"),M_r=o("The model class to instantiate is selected based on the "),nbe=a("code"),E_r=o("model_type"),C_r=o(` property of the config object (either
passed as an argument or loaded from `),sbe=a("code"),w_r=o("pretrained_model_name_or_path"),A_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lbe=a("code"),y_r=o("pretrained_model_name_or_path"),L_r=o(":"),x_r=l(),ae=a("ul"),cT=a("li"),ibe=a("strong"),k_r=o("albert"),S_r=o(" \u2014 "),_z=a("a"),R_r=o("TFAlbertForMultipleChoice"),B_r=o(" (ALBERT model)"),P_r=l(),fT=a("li"),dbe=a("strong"),$_r=o("bert"),q_r=o(" \u2014 "),uz=a("a"),I_r=o("TFBertForMultipleChoice"),j_r=o(" (BERT model)"),N_r=l(),mT=a("li"),cbe=a("strong"),D_r=o("camembert"),G_r=o(" \u2014 "),bz=a("a"),O_r=o("TFCamembertForMultipleChoice"),V_r=o(" (CamemBERT model)"),X_r=l(),gT=a("li"),fbe=a("strong"),z_r=o("convbert"),Q_r=o(" \u2014 "),Fz=a("a"),W_r=o("TFConvBertForMultipleChoice"),H_r=o(" (ConvBERT model)"),U_r=l(),hT=a("li"),mbe=a("strong"),J_r=o("distilbert"),Y_r=o(" \u2014 "),vz=a("a"),K_r=o("TFDistilBertForMultipleChoice"),Z_r=o(" (DistilBERT model)"),eur=l(),pT=a("li"),gbe=a("strong"),our=o("electra"),rur=o(" \u2014 "),Tz=a("a"),tur=o("TFElectraForMultipleChoice"),aur=o(" (ELECTRA model)"),nur=l(),_T=a("li"),hbe=a("strong"),sur=o("flaubert"),lur=o(" \u2014 "),Mz=a("a"),iur=o("TFFlaubertForMultipleChoice"),dur=o(" (FlauBERT model)"),cur=l(),uT=a("li"),pbe=a("strong"),fur=o("funnel"),mur=o(" \u2014 "),Ez=a("a"),gur=o("TFFunnelForMultipleChoice"),hur=o(" (Funnel Transformer model)"),pur=l(),bT=a("li"),_be=a("strong"),_ur=o("longformer"),uur=o(" \u2014 "),Cz=a("a"),bur=o("TFLongformerForMultipleChoice"),Fur=o(" (Longformer model)"),vur=l(),FT=a("li"),ube=a("strong"),Tur=o("mobilebert"),Mur=o(" \u2014 "),wz=a("a"),Eur=o("TFMobileBertForMultipleChoice"),Cur=o(" (MobileBERT model)"),wur=l(),vT=a("li"),bbe=a("strong"),Aur=o("mpnet"),yur=o(" \u2014 "),Az=a("a"),Lur=o("TFMPNetForMultipleChoice"),xur=o(" (MPNet model)"),kur=l(),TT=a("li"),Fbe=a("strong"),Sur=o("rembert"),Rur=o(" \u2014 "),yz=a("a"),Bur=o("TFRemBertForMultipleChoice"),Pur=o(" (RemBERT model)"),$ur=l(),MT=a("li"),vbe=a("strong"),qur=o("roberta"),Iur=o(" \u2014 "),Lz=a("a"),jur=o("TFRobertaForMultipleChoice"),Nur=o(" (RoBERTa model)"),Dur=l(),ET=a("li"),Tbe=a("strong"),Gur=o("roformer"),Our=o(" \u2014 "),xz=a("a"),Vur=o("TFRoFormerForMultipleChoice"),Xur=o(" (RoFormer model)"),zur=l(),CT=a("li"),Mbe=a("strong"),Qur=o("xlm"),Wur=o(" \u2014 "),kz=a("a"),Hur=o("TFXLMForMultipleChoice"),Uur=o(" (XLM model)"),Jur=l(),wT=a("li"),Ebe=a("strong"),Yur=o("xlm-roberta"),Kur=o(" \u2014 "),Sz=a("a"),Zur=o("TFXLMRobertaForMultipleChoice"),e1r=o(" (XLM-RoBERTa model)"),o1r=l(),AT=a("li"),Cbe=a("strong"),r1r=o("xlnet"),t1r=o(" \u2014 "),Rz=a("a"),a1r=o("TFXLNetForMultipleChoice"),n1r=o(" (XLNet model)"),s1r=l(),wbe=a("p"),l1r=o("Examples:"),i1r=l(),f(cy.$$.fragment),XBe=l(),Xc=a("h2"),yT=a("a"),Abe=a("span"),f(fy.$$.fragment),d1r=l(),ybe=a("span"),c1r=o("TFAutoModelForTableQuestionAnswering"),zBe=l(),Lr=a("div"),f(my.$$.fragment),f1r=l(),zc=a("p"),m1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Bz=a("a"),g1r=o("from_pretrained()"),h1r=o(" class method or the "),Pz=a("a"),p1r=o("from_config()"),_1r=o(` class
method.`),u1r=l(),gy=a("p"),b1r=o("This class cannot be instantiated directly using "),Lbe=a("code"),F1r=o("__init__()"),v1r=o(" (throws an error)."),T1r=l(),Et=a("div"),f(hy.$$.fragment),M1r=l(),xbe=a("p"),E1r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),C1r=l(),Qc=a("p"),w1r=o(`Note:
Loading a model from its configuration file does `),kbe=a("strong"),A1r=o("not"),y1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$z=a("a"),L1r=o("from_pretrained()"),x1r=o(" to load the model weights."),k1r=l(),Sbe=a("p"),S1r=o("Examples:"),R1r=l(),f(py.$$.fragment),B1r=l(),Mo=a("div"),f(_y.$$.fragment),P1r=l(),Rbe=a("p"),$1r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),q1r=l(),Ln=a("p"),I1r=o("The model class to instantiate is selected based on the "),Bbe=a("code"),j1r=o("model_type"),N1r=o(` property of the config object (either
passed as an argument or loaded from `),Pbe=a("code"),D1r=o("pretrained_model_name_or_path"),G1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$be=a("code"),O1r=o("pretrained_model_name_or_path"),V1r=o(":"),X1r=l(),qbe=a("ul"),LT=a("li"),Ibe=a("strong"),z1r=o("tapas"),Q1r=o(" \u2014 "),qz=a("a"),W1r=o("TFTapasForQuestionAnswering"),H1r=o(" (TAPAS model)"),U1r=l(),jbe=a("p"),J1r=o("Examples:"),Y1r=l(),f(uy.$$.fragment),QBe=l(),Wc=a("h2"),xT=a("a"),Nbe=a("span"),f(by.$$.fragment),K1r=l(),Dbe=a("span"),Z1r=o("TFAutoModelForTokenClassification"),WBe=l(),xr=a("div"),f(Fy.$$.fragment),ebr=l(),Hc=a("p"),obr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Iz=a("a"),rbr=o("from_pretrained()"),tbr=o(" class method or the "),jz=a("a"),abr=o("from_config()"),nbr=o(` class
method.`),sbr=l(),vy=a("p"),lbr=o("This class cannot be instantiated directly using "),Gbe=a("code"),ibr=o("__init__()"),dbr=o(" (throws an error)."),cbr=l(),Ct=a("div"),f(Ty.$$.fragment),fbr=l(),Obe=a("p"),mbr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),gbr=l(),Uc=a("p"),hbr=o(`Note:
Loading a model from its configuration file does `),Vbe=a("strong"),pbr=o("not"),_br=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nz=a("a"),ubr=o("from_pretrained()"),bbr=o(" to load the model weights."),Fbr=l(),Xbe=a("p"),vbr=o("Examples:"),Tbr=l(),f(My.$$.fragment),Mbr=l(),Eo=a("div"),f(Ey.$$.fragment),Ebr=l(),zbe=a("p"),Cbr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),wbr=l(),xn=a("p"),Abr=o("The model class to instantiate is selected based on the "),Qbe=a("code"),ybr=o("model_type"),Lbr=o(` property of the config object (either
passed as an argument or loaded from `),Wbe=a("code"),xbr=o("pretrained_model_name_or_path"),kbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hbe=a("code"),Sbr=o("pretrained_model_name_or_path"),Rbr=o(":"),Bbr=l(),Y=a("ul"),kT=a("li"),Ube=a("strong"),Pbr=o("albert"),$br=o(" \u2014 "),Dz=a("a"),qbr=o("TFAlbertForTokenClassification"),Ibr=o(" (ALBERT model)"),jbr=l(),ST=a("li"),Jbe=a("strong"),Nbr=o("bert"),Dbr=o(" \u2014 "),Gz=a("a"),Gbr=o("TFBertForTokenClassification"),Obr=o(" (BERT model)"),Vbr=l(),RT=a("li"),Ybe=a("strong"),Xbr=o("camembert"),zbr=o(" \u2014 "),Oz=a("a"),Qbr=o("TFCamembertForTokenClassification"),Wbr=o(" (CamemBERT model)"),Hbr=l(),BT=a("li"),Kbe=a("strong"),Ubr=o("convbert"),Jbr=o(" \u2014 "),Vz=a("a"),Ybr=o("TFConvBertForTokenClassification"),Kbr=o(" (ConvBERT model)"),Zbr=l(),PT=a("li"),Zbe=a("strong"),e5r=o("deberta"),o5r=o(" \u2014 "),Xz=a("a"),r5r=o("TFDebertaForTokenClassification"),t5r=o(" (DeBERTa model)"),a5r=l(),$T=a("li"),e5e=a("strong"),n5r=o("deberta-v2"),s5r=o(" \u2014 "),zz=a("a"),l5r=o("TFDebertaV2ForTokenClassification"),i5r=o(" (DeBERTa-v2 model)"),d5r=l(),qT=a("li"),o5e=a("strong"),c5r=o("distilbert"),f5r=o(" \u2014 "),Qz=a("a"),m5r=o("TFDistilBertForTokenClassification"),g5r=o(" (DistilBERT model)"),h5r=l(),IT=a("li"),r5e=a("strong"),p5r=o("electra"),_5r=o(" \u2014 "),Wz=a("a"),u5r=o("TFElectraForTokenClassification"),b5r=o(" (ELECTRA model)"),F5r=l(),jT=a("li"),t5e=a("strong"),v5r=o("flaubert"),T5r=o(" \u2014 "),Hz=a("a"),M5r=o("TFFlaubertForTokenClassification"),E5r=o(" (FlauBERT model)"),C5r=l(),NT=a("li"),a5e=a("strong"),w5r=o("funnel"),A5r=o(" \u2014 "),Uz=a("a"),y5r=o("TFFunnelForTokenClassification"),L5r=o(" (Funnel Transformer model)"),x5r=l(),DT=a("li"),n5e=a("strong"),k5r=o("layoutlm"),S5r=o(" \u2014 "),Jz=a("a"),R5r=o("TFLayoutLMForTokenClassification"),B5r=o(" (LayoutLM model)"),P5r=l(),GT=a("li"),s5e=a("strong"),$5r=o("longformer"),q5r=o(" \u2014 "),Yz=a("a"),I5r=o("TFLongformerForTokenClassification"),j5r=o(" (Longformer model)"),N5r=l(),OT=a("li"),l5e=a("strong"),D5r=o("mobilebert"),G5r=o(" \u2014 "),Kz=a("a"),O5r=o("TFMobileBertForTokenClassification"),V5r=o(" (MobileBERT model)"),X5r=l(),VT=a("li"),i5e=a("strong"),z5r=o("mpnet"),Q5r=o(" \u2014 "),Zz=a("a"),W5r=o("TFMPNetForTokenClassification"),H5r=o(" (MPNet model)"),U5r=l(),XT=a("li"),d5e=a("strong"),J5r=o("rembert"),Y5r=o(" \u2014 "),eQ=a("a"),K5r=o("TFRemBertForTokenClassification"),Z5r=o(" (RemBERT model)"),e2r=l(),zT=a("li"),c5e=a("strong"),o2r=o("roberta"),r2r=o(" \u2014 "),oQ=a("a"),t2r=o("TFRobertaForTokenClassification"),a2r=o(" (RoBERTa model)"),n2r=l(),QT=a("li"),f5e=a("strong"),s2r=o("roformer"),l2r=o(" \u2014 "),rQ=a("a"),i2r=o("TFRoFormerForTokenClassification"),d2r=o(" (RoFormer model)"),c2r=l(),WT=a("li"),m5e=a("strong"),f2r=o("xlm"),m2r=o(" \u2014 "),tQ=a("a"),g2r=o("TFXLMForTokenClassification"),h2r=o(" (XLM model)"),p2r=l(),HT=a("li"),g5e=a("strong"),_2r=o("xlm-roberta"),u2r=o(" \u2014 "),aQ=a("a"),b2r=o("TFXLMRobertaForTokenClassification"),F2r=o(" (XLM-RoBERTa model)"),v2r=l(),UT=a("li"),h5e=a("strong"),T2r=o("xlnet"),M2r=o(" \u2014 "),nQ=a("a"),E2r=o("TFXLNetForTokenClassification"),C2r=o(" (XLNet model)"),w2r=l(),p5e=a("p"),A2r=o("Examples:"),y2r=l(),f(Cy.$$.fragment),HBe=l(),Jc=a("h2"),JT=a("a"),_5e=a("span"),f(wy.$$.fragment),L2r=l(),u5e=a("span"),x2r=o("TFAutoModelForQuestionAnswering"),UBe=l(),kr=a("div"),f(Ay.$$.fragment),k2r=l(),Yc=a("p"),S2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),sQ=a("a"),R2r=o("from_pretrained()"),B2r=o(" class method or the "),lQ=a("a"),P2r=o("from_config()"),$2r=o(` class
method.`),q2r=l(),yy=a("p"),I2r=o("This class cannot be instantiated directly using "),b5e=a("code"),j2r=o("__init__()"),N2r=o(" (throws an error)."),D2r=l(),wt=a("div"),f(Ly.$$.fragment),G2r=l(),F5e=a("p"),O2r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),V2r=l(),Kc=a("p"),X2r=o(`Note:
Loading a model from its configuration file does `),v5e=a("strong"),z2r=o("not"),Q2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iQ=a("a"),W2r=o("from_pretrained()"),H2r=o(" to load the model weights."),U2r=l(),T5e=a("p"),J2r=o("Examples:"),Y2r=l(),f(xy.$$.fragment),K2r=l(),Co=a("div"),f(ky.$$.fragment),Z2r=l(),M5e=a("p"),eFr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),oFr=l(),kn=a("p"),rFr=o("The model class to instantiate is selected based on the "),E5e=a("code"),tFr=o("model_type"),aFr=o(` property of the config object (either
passed as an argument or loaded from `),C5e=a("code"),nFr=o("pretrained_model_name_or_path"),sFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w5e=a("code"),lFr=o("pretrained_model_name_or_path"),iFr=o(":"),dFr=l(),K=a("ul"),YT=a("li"),A5e=a("strong"),cFr=o("albert"),fFr=o(" \u2014 "),dQ=a("a"),mFr=o("TFAlbertForQuestionAnswering"),gFr=o(" (ALBERT model)"),hFr=l(),KT=a("li"),y5e=a("strong"),pFr=o("bert"),_Fr=o(" \u2014 "),cQ=a("a"),uFr=o("TFBertForQuestionAnswering"),bFr=o(" (BERT model)"),FFr=l(),ZT=a("li"),L5e=a("strong"),vFr=o("camembert"),TFr=o(" \u2014 "),fQ=a("a"),MFr=o("TFCamembertForQuestionAnswering"),EFr=o(" (CamemBERT model)"),CFr=l(),e8=a("li"),x5e=a("strong"),wFr=o("convbert"),AFr=o(" \u2014 "),mQ=a("a"),yFr=o("TFConvBertForQuestionAnswering"),LFr=o(" (ConvBERT model)"),xFr=l(),o8=a("li"),k5e=a("strong"),kFr=o("deberta"),SFr=o(" \u2014 "),gQ=a("a"),RFr=o("TFDebertaForQuestionAnswering"),BFr=o(" (DeBERTa model)"),PFr=l(),r8=a("li"),S5e=a("strong"),$Fr=o("deberta-v2"),qFr=o(" \u2014 "),hQ=a("a"),IFr=o("TFDebertaV2ForQuestionAnswering"),jFr=o(" (DeBERTa-v2 model)"),NFr=l(),t8=a("li"),R5e=a("strong"),DFr=o("distilbert"),GFr=o(" \u2014 "),pQ=a("a"),OFr=o("TFDistilBertForQuestionAnswering"),VFr=o(" (DistilBERT model)"),XFr=l(),a8=a("li"),B5e=a("strong"),zFr=o("electra"),QFr=o(" \u2014 "),_Q=a("a"),WFr=o("TFElectraForQuestionAnswering"),HFr=o(" (ELECTRA model)"),UFr=l(),n8=a("li"),P5e=a("strong"),JFr=o("flaubert"),YFr=o(" \u2014 "),uQ=a("a"),KFr=o("TFFlaubertForQuestionAnsweringSimple"),ZFr=o(" (FlauBERT model)"),evr=l(),s8=a("li"),$5e=a("strong"),ovr=o("funnel"),rvr=o(" \u2014 "),bQ=a("a"),tvr=o("TFFunnelForQuestionAnswering"),avr=o(" (Funnel Transformer model)"),nvr=l(),l8=a("li"),q5e=a("strong"),svr=o("gptj"),lvr=o(" \u2014 "),FQ=a("a"),ivr=o("TFGPTJForQuestionAnswering"),dvr=o(" (GPT-J model)"),cvr=l(),i8=a("li"),I5e=a("strong"),fvr=o("longformer"),mvr=o(" \u2014 "),vQ=a("a"),gvr=o("TFLongformerForQuestionAnswering"),hvr=o(" (Longformer model)"),pvr=l(),d8=a("li"),j5e=a("strong"),_vr=o("mobilebert"),uvr=o(" \u2014 "),TQ=a("a"),bvr=o("TFMobileBertForQuestionAnswering"),Fvr=o(" (MobileBERT model)"),vvr=l(),c8=a("li"),N5e=a("strong"),Tvr=o("mpnet"),Mvr=o(" \u2014 "),MQ=a("a"),Evr=o("TFMPNetForQuestionAnswering"),Cvr=o(" (MPNet model)"),wvr=l(),f8=a("li"),D5e=a("strong"),Avr=o("rembert"),yvr=o(" \u2014 "),EQ=a("a"),Lvr=o("TFRemBertForQuestionAnswering"),xvr=o(" (RemBERT model)"),kvr=l(),m8=a("li"),G5e=a("strong"),Svr=o("roberta"),Rvr=o(" \u2014 "),CQ=a("a"),Bvr=o("TFRobertaForQuestionAnswering"),Pvr=o(" (RoBERTa model)"),$vr=l(),g8=a("li"),O5e=a("strong"),qvr=o("roformer"),Ivr=o(" \u2014 "),wQ=a("a"),jvr=o("TFRoFormerForQuestionAnswering"),Nvr=o(" (RoFormer model)"),Dvr=l(),h8=a("li"),V5e=a("strong"),Gvr=o("xlm"),Ovr=o(" \u2014 "),AQ=a("a"),Vvr=o("TFXLMForQuestionAnsweringSimple"),Xvr=o(" (XLM model)"),zvr=l(),p8=a("li"),X5e=a("strong"),Qvr=o("xlm-roberta"),Wvr=o(" \u2014 "),yQ=a("a"),Hvr=o("TFXLMRobertaForQuestionAnswering"),Uvr=o(" (XLM-RoBERTa model)"),Jvr=l(),_8=a("li"),z5e=a("strong"),Yvr=o("xlnet"),Kvr=o(" \u2014 "),LQ=a("a"),Zvr=o("TFXLNetForQuestionAnsweringSimple"),e6r=o(" (XLNet model)"),o6r=l(),Q5e=a("p"),r6r=o("Examples:"),t6r=l(),f(Sy.$$.fragment),JBe=l(),Zc=a("h2"),u8=a("a"),W5e=a("span"),f(Ry.$$.fragment),a6r=l(),H5e=a("span"),n6r=o("TFAutoModelForVision2Seq"),YBe=l(),Sr=a("div"),f(By.$$.fragment),s6r=l(),ef=a("p"),l6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),xQ=a("a"),i6r=o("from_pretrained()"),d6r=o(" class method or the "),kQ=a("a"),c6r=o("from_config()"),f6r=o(` class
method.`),m6r=l(),Py=a("p"),g6r=o("This class cannot be instantiated directly using "),U5e=a("code"),h6r=o("__init__()"),p6r=o(" (throws an error)."),_6r=l(),At=a("div"),f($y.$$.fragment),u6r=l(),J5e=a("p"),b6r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),F6r=l(),of=a("p"),v6r=o(`Note:
Loading a model from its configuration file does `),Y5e=a("strong"),T6r=o("not"),M6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SQ=a("a"),E6r=o("from_pretrained()"),C6r=o(" to load the model weights."),w6r=l(),K5e=a("p"),A6r=o("Examples:"),y6r=l(),f(qy.$$.fragment),L6r=l(),wo=a("div"),f(Iy.$$.fragment),x6r=l(),Z5e=a("p"),k6r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),S6r=l(),Sn=a("p"),R6r=o("The model class to instantiate is selected based on the "),e2e=a("code"),B6r=o("model_type"),P6r=o(` property of the config object (either
passed as an argument or loaded from `),o2e=a("code"),$6r=o("pretrained_model_name_or_path"),q6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r2e=a("code"),I6r=o("pretrained_model_name_or_path"),j6r=o(":"),N6r=l(),t2e=a("ul"),b8=a("li"),a2e=a("strong"),D6r=o("vision-encoder-decoder"),G6r=o(" \u2014 "),RQ=a("a"),O6r=o("TFVisionEncoderDecoderModel"),V6r=o(" (Vision Encoder decoder model)"),X6r=l(),n2e=a("p"),z6r=o("Examples:"),Q6r=l(),f(jy.$$.fragment),KBe=l(),rf=a("h2"),F8=a("a"),s2e=a("span"),f(Ny.$$.fragment),W6r=l(),l2e=a("span"),H6r=o("TFAutoModelForSpeechSeq2Seq"),ZBe=l(),Rr=a("div"),f(Dy.$$.fragment),U6r=l(),tf=a("p"),J6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),BQ=a("a"),Y6r=o("from_pretrained()"),K6r=o(" class method or the "),PQ=a("a"),Z6r=o("from_config()"),e0r=o(` class
method.`),o0r=l(),Gy=a("p"),r0r=o("This class cannot be instantiated directly using "),i2e=a("code"),t0r=o("__init__()"),a0r=o(" (throws an error)."),n0r=l(),yt=a("div"),f(Oy.$$.fragment),s0r=l(),d2e=a("p"),l0r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),i0r=l(),af=a("p"),d0r=o(`Note:
Loading a model from its configuration file does `),c2e=a("strong"),c0r=o("not"),f0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$Q=a("a"),m0r=o("from_pretrained()"),g0r=o(" to load the model weights."),h0r=l(),f2e=a("p"),p0r=o("Examples:"),_0r=l(),f(Vy.$$.fragment),u0r=l(),Ao=a("div"),f(Xy.$$.fragment),b0r=l(),m2e=a("p"),F0r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),v0r=l(),Rn=a("p"),T0r=o("The model class to instantiate is selected based on the "),g2e=a("code"),M0r=o("model_type"),E0r=o(` property of the config object (either
passed as an argument or loaded from `),h2e=a("code"),C0r=o("pretrained_model_name_or_path"),w0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p2e=a("code"),A0r=o("pretrained_model_name_or_path"),y0r=o(":"),L0r=l(),_2e=a("ul"),v8=a("li"),u2e=a("strong"),x0r=o("speech_to_text"),k0r=o(" \u2014 "),qQ=a("a"),S0r=o("TFSpeech2TextForConditionalGeneration"),R0r=o(" (Speech2Text model)"),B0r=l(),b2e=a("p"),P0r=o("Examples:"),$0r=l(),f(zy.$$.fragment),ePe=l(),nf=a("h2"),T8=a("a"),F2e=a("span"),f(Qy.$$.fragment),q0r=l(),v2e=a("span"),I0r=o("FlaxAutoModel"),oPe=l(),Br=a("div"),f(Wy.$$.fragment),j0r=l(),sf=a("p"),N0r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),IQ=a("a"),D0r=o("from_pretrained()"),G0r=o(" class method or the "),jQ=a("a"),O0r=o("from_config()"),V0r=o(` class
method.`),X0r=l(),Hy=a("p"),z0r=o("This class cannot be instantiated directly using "),T2e=a("code"),Q0r=o("__init__()"),W0r=o(" (throws an error)."),H0r=l(),Lt=a("div"),f(Uy.$$.fragment),U0r=l(),M2e=a("p"),J0r=o("Instantiates one of the base model classes of the library from a configuration."),Y0r=l(),lf=a("p"),K0r=o(`Note:
Loading a model from its configuration file does `),E2e=a("strong"),Z0r=o("not"),eTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NQ=a("a"),oTr=o("from_pretrained()"),rTr=o(" to load the model weights."),tTr=l(),C2e=a("p"),aTr=o("Examples:"),nTr=l(),f(Jy.$$.fragment),sTr=l(),yo=a("div"),f(Yy.$$.fragment),lTr=l(),w2e=a("p"),iTr=o("Instantiate one of the base model classes of the library from a pretrained model."),dTr=l(),Bn=a("p"),cTr=o("The model class to instantiate is selected based on the "),A2e=a("code"),fTr=o("model_type"),mTr=o(` property of the config object (either
passed as an argument or loaded from `),y2e=a("code"),gTr=o("pretrained_model_name_or_path"),hTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L2e=a("code"),pTr=o("pretrained_model_name_or_path"),_Tr=o(":"),uTr=l(),z=a("ul"),M8=a("li"),x2e=a("strong"),bTr=o("albert"),FTr=o(" \u2014 "),DQ=a("a"),vTr=o("FlaxAlbertModel"),TTr=o(" (ALBERT model)"),MTr=l(),E8=a("li"),k2e=a("strong"),ETr=o("bart"),CTr=o(" \u2014 "),GQ=a("a"),wTr=o("FlaxBartModel"),ATr=o(" (BART model)"),yTr=l(),C8=a("li"),S2e=a("strong"),LTr=o("beit"),xTr=o(" \u2014 "),OQ=a("a"),kTr=o("FlaxBeitModel"),STr=o(" (BEiT model)"),RTr=l(),w8=a("li"),R2e=a("strong"),BTr=o("bert"),PTr=o(" \u2014 "),VQ=a("a"),$Tr=o("FlaxBertModel"),qTr=o(" (BERT model)"),ITr=l(),A8=a("li"),B2e=a("strong"),jTr=o("big_bird"),NTr=o(" \u2014 "),XQ=a("a"),DTr=o("FlaxBigBirdModel"),GTr=o(" (BigBird model)"),OTr=l(),y8=a("li"),P2e=a("strong"),VTr=o("blenderbot"),XTr=o(" \u2014 "),zQ=a("a"),zTr=o("FlaxBlenderbotModel"),QTr=o(" (Blenderbot model)"),WTr=l(),L8=a("li"),$2e=a("strong"),HTr=o("blenderbot-small"),UTr=o(" \u2014 "),QQ=a("a"),JTr=o("FlaxBlenderbotSmallModel"),YTr=o(" (BlenderbotSmall model)"),KTr=l(),x8=a("li"),q2e=a("strong"),ZTr=o("clip"),e8r=o(" \u2014 "),WQ=a("a"),o8r=o("FlaxCLIPModel"),r8r=o(" (CLIP model)"),t8r=l(),k8=a("li"),I2e=a("strong"),a8r=o("distilbert"),n8r=o(" \u2014 "),HQ=a("a"),s8r=o("FlaxDistilBertModel"),l8r=o(" (DistilBERT model)"),i8r=l(),S8=a("li"),j2e=a("strong"),d8r=o("electra"),c8r=o(" \u2014 "),UQ=a("a"),f8r=o("FlaxElectraModel"),m8r=o(" (ELECTRA model)"),g8r=l(),R8=a("li"),N2e=a("strong"),h8r=o("gpt2"),p8r=o(" \u2014 "),JQ=a("a"),_8r=o("FlaxGPT2Model"),u8r=o(" (OpenAI GPT-2 model)"),b8r=l(),B8=a("li"),D2e=a("strong"),F8r=o("gpt_neo"),v8r=o(" \u2014 "),YQ=a("a"),T8r=o("FlaxGPTNeoModel"),M8r=o(" (GPT Neo model)"),E8r=l(),P8=a("li"),G2e=a("strong"),C8r=o("gptj"),w8r=o(" \u2014 "),KQ=a("a"),A8r=o("FlaxGPTJModel"),y8r=o(" (GPT-J model)"),L8r=l(),$8=a("li"),O2e=a("strong"),x8r=o("marian"),k8r=o(" \u2014 "),ZQ=a("a"),S8r=o("FlaxMarianModel"),R8r=o(" (Marian model)"),B8r=l(),q8=a("li"),V2e=a("strong"),P8r=o("mbart"),$8r=o(" \u2014 "),eW=a("a"),q8r=o("FlaxMBartModel"),I8r=o(" (mBART model)"),j8r=l(),I8=a("li"),X2e=a("strong"),N8r=o("mt5"),D8r=o(" \u2014 "),oW=a("a"),G8r=o("FlaxMT5Model"),O8r=o(" (mT5 model)"),V8r=l(),j8=a("li"),z2e=a("strong"),X8r=o("pegasus"),z8r=o(" \u2014 "),rW=a("a"),Q8r=o("FlaxPegasusModel"),W8r=o(" (Pegasus model)"),H8r=l(),N8=a("li"),Q2e=a("strong"),U8r=o("roberta"),J8r=o(" \u2014 "),tW=a("a"),Y8r=o("FlaxRobertaModel"),K8r=o(" (RoBERTa model)"),Z8r=l(),D8=a("li"),W2e=a("strong"),eMr=o("roformer"),oMr=o(" \u2014 "),aW=a("a"),rMr=o("FlaxRoFormerModel"),tMr=o(" (RoFormer model)"),aMr=l(),G8=a("li"),H2e=a("strong"),nMr=o("t5"),sMr=o(" \u2014 "),nW=a("a"),lMr=o("FlaxT5Model"),iMr=o(" (T5 model)"),dMr=l(),O8=a("li"),U2e=a("strong"),cMr=o("vision-text-dual-encoder"),fMr=o(" \u2014 "),sW=a("a"),mMr=o("FlaxVisionTextDualEncoderModel"),gMr=o(" (VisionTextDualEncoder model)"),hMr=l(),V8=a("li"),J2e=a("strong"),pMr=o("vit"),_Mr=o(" \u2014 "),lW=a("a"),uMr=o("FlaxViTModel"),bMr=o(" (ViT model)"),FMr=l(),X8=a("li"),Y2e=a("strong"),vMr=o("wav2vec2"),TMr=o(" \u2014 "),iW=a("a"),MMr=o("FlaxWav2Vec2Model"),EMr=o(" (Wav2Vec2 model)"),CMr=l(),z8=a("li"),K2e=a("strong"),wMr=o("xglm"),AMr=o(" \u2014 "),dW=a("a"),yMr=o("FlaxXGLMModel"),LMr=o(" (XGLM model)"),xMr=l(),Q8=a("li"),Z2e=a("strong"),kMr=o("xlm-roberta"),SMr=o(" \u2014 "),cW=a("a"),RMr=o("FlaxXLMRobertaModel"),BMr=o(" (XLM-RoBERTa model)"),PMr=l(),eFe=a("p"),$Mr=o("Examples:"),qMr=l(),f(Ky.$$.fragment),rPe=l(),df=a("h2"),W8=a("a"),oFe=a("span"),f(Zy.$$.fragment),IMr=l(),rFe=a("span"),jMr=o("FlaxAutoModelForCausalLM"),tPe=l(),Pr=a("div"),f(eL.$$.fragment),NMr=l(),cf=a("p"),DMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),fW=a("a"),GMr=o("from_pretrained()"),OMr=o(" class method or the "),mW=a("a"),VMr=o("from_config()"),XMr=o(` class
method.`),zMr=l(),oL=a("p"),QMr=o("This class cannot be instantiated directly using "),tFe=a("code"),WMr=o("__init__()"),HMr=o(" (throws an error)."),UMr=l(),xt=a("div"),f(rL.$$.fragment),JMr=l(),aFe=a("p"),YMr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),KMr=l(),ff=a("p"),ZMr=o(`Note:
Loading a model from its configuration file does `),nFe=a("strong"),e4r=o("not"),o4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gW=a("a"),r4r=o("from_pretrained()"),t4r=o(" to load the model weights."),a4r=l(),sFe=a("p"),n4r=o("Examples:"),s4r=l(),f(tL.$$.fragment),l4r=l(),Lo=a("div"),f(aL.$$.fragment),i4r=l(),lFe=a("p"),d4r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),c4r=l(),Pn=a("p"),f4r=o("The model class to instantiate is selected based on the "),iFe=a("code"),m4r=o("model_type"),g4r=o(` property of the config object (either
passed as an argument or loaded from `),dFe=a("code"),h4r=o("pretrained_model_name_or_path"),p4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cFe=a("code"),_4r=o("pretrained_model_name_or_path"),u4r=o(":"),b4r=l(),ga=a("ul"),H8=a("li"),fFe=a("strong"),F4r=o("bart"),v4r=o(" \u2014 "),hW=a("a"),T4r=o("FlaxBartForCausalLM"),M4r=o(" (BART model)"),E4r=l(),U8=a("li"),mFe=a("strong"),C4r=o("gpt2"),w4r=o(" \u2014 "),pW=a("a"),A4r=o("FlaxGPT2LMHeadModel"),y4r=o(" (OpenAI GPT-2 model)"),L4r=l(),J8=a("li"),gFe=a("strong"),x4r=o("gpt_neo"),k4r=o(" \u2014 "),_W=a("a"),S4r=o("FlaxGPTNeoForCausalLM"),R4r=o(" (GPT Neo model)"),B4r=l(),Y8=a("li"),hFe=a("strong"),P4r=o("gptj"),$4r=o(" \u2014 "),uW=a("a"),q4r=o("FlaxGPTJForCausalLM"),I4r=o(" (GPT-J model)"),j4r=l(),K8=a("li"),pFe=a("strong"),N4r=o("xglm"),D4r=o(" \u2014 "),bW=a("a"),G4r=o("FlaxXGLMForCausalLM"),O4r=o(" (XGLM model)"),V4r=l(),_Fe=a("p"),X4r=o("Examples:"),z4r=l(),f(nL.$$.fragment),aPe=l(),mf=a("h2"),Z8=a("a"),uFe=a("span"),f(sL.$$.fragment),Q4r=l(),bFe=a("span"),W4r=o("FlaxAutoModelForPreTraining"),nPe=l(),$r=a("div"),f(lL.$$.fragment),H4r=l(),gf=a("p"),U4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),FW=a("a"),J4r=o("from_pretrained()"),Y4r=o(" class method or the "),vW=a("a"),K4r=o("from_config()"),Z4r=o(` class
method.`),eEr=l(),iL=a("p"),oEr=o("This class cannot be instantiated directly using "),FFe=a("code"),rEr=o("__init__()"),tEr=o(" (throws an error)."),aEr=l(),kt=a("div"),f(dL.$$.fragment),nEr=l(),vFe=a("p"),sEr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),lEr=l(),hf=a("p"),iEr=o(`Note:
Loading a model from its configuration file does `),TFe=a("strong"),dEr=o("not"),cEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TW=a("a"),fEr=o("from_pretrained()"),mEr=o(" to load the model weights."),gEr=l(),MFe=a("p"),hEr=o("Examples:"),pEr=l(),f(cL.$$.fragment),_Er=l(),xo=a("div"),f(fL.$$.fragment),uEr=l(),EFe=a("p"),bEr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),FEr=l(),$n=a("p"),vEr=o("The model class to instantiate is selected based on the "),CFe=a("code"),TEr=o("model_type"),MEr=o(` property of the config object (either
passed as an argument or loaded from `),wFe=a("code"),EEr=o("pretrained_model_name_or_path"),CEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AFe=a("code"),wEr=o("pretrained_model_name_or_path"),AEr=o(":"),yEr=l(),fe=a("ul"),eM=a("li"),yFe=a("strong"),LEr=o("albert"),xEr=o(" \u2014 "),MW=a("a"),kEr=o("FlaxAlbertForPreTraining"),SEr=o(" (ALBERT model)"),REr=l(),oM=a("li"),LFe=a("strong"),BEr=o("bart"),PEr=o(" \u2014 "),EW=a("a"),$Er=o("FlaxBartForConditionalGeneration"),qEr=o(" (BART model)"),IEr=l(),rM=a("li"),xFe=a("strong"),jEr=o("bert"),NEr=o(" \u2014 "),CW=a("a"),DEr=o("FlaxBertForPreTraining"),GEr=o(" (BERT model)"),OEr=l(),tM=a("li"),kFe=a("strong"),VEr=o("big_bird"),XEr=o(" \u2014 "),wW=a("a"),zEr=o("FlaxBigBirdForPreTraining"),QEr=o(" (BigBird model)"),WEr=l(),aM=a("li"),SFe=a("strong"),HEr=o("electra"),UEr=o(" \u2014 "),AW=a("a"),JEr=o("FlaxElectraForPreTraining"),YEr=o(" (ELECTRA model)"),KEr=l(),nM=a("li"),RFe=a("strong"),ZEr=o("mbart"),eCr=o(" \u2014 "),yW=a("a"),oCr=o("FlaxMBartForConditionalGeneration"),rCr=o(" (mBART model)"),tCr=l(),sM=a("li"),BFe=a("strong"),aCr=o("mt5"),nCr=o(" \u2014 "),LW=a("a"),sCr=o("FlaxMT5ForConditionalGeneration"),lCr=o(" (mT5 model)"),iCr=l(),lM=a("li"),PFe=a("strong"),dCr=o("roberta"),cCr=o(" \u2014 "),xW=a("a"),fCr=o("FlaxRobertaForMaskedLM"),mCr=o(" (RoBERTa model)"),gCr=l(),iM=a("li"),$Fe=a("strong"),hCr=o("roformer"),pCr=o(" \u2014 "),kW=a("a"),_Cr=o("FlaxRoFormerForMaskedLM"),uCr=o(" (RoFormer model)"),bCr=l(),dM=a("li"),qFe=a("strong"),FCr=o("t5"),vCr=o(" \u2014 "),SW=a("a"),TCr=o("FlaxT5ForConditionalGeneration"),MCr=o(" (T5 model)"),ECr=l(),cM=a("li"),IFe=a("strong"),CCr=o("wav2vec2"),wCr=o(" \u2014 "),RW=a("a"),ACr=o("FlaxWav2Vec2ForPreTraining"),yCr=o(" (Wav2Vec2 model)"),LCr=l(),fM=a("li"),jFe=a("strong"),xCr=o("xlm-roberta"),kCr=o(" \u2014 "),BW=a("a"),SCr=o("FlaxXLMRobertaForMaskedLM"),RCr=o(" (XLM-RoBERTa model)"),BCr=l(),NFe=a("p"),PCr=o("Examples:"),$Cr=l(),f(mL.$$.fragment),sPe=l(),pf=a("h2"),mM=a("a"),DFe=a("span"),f(gL.$$.fragment),qCr=l(),GFe=a("span"),ICr=o("FlaxAutoModelForMaskedLM"),lPe=l(),qr=a("div"),f(hL.$$.fragment),jCr=l(),_f=a("p"),NCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),PW=a("a"),DCr=o("from_pretrained()"),GCr=o(" class method or the "),$W=a("a"),OCr=o("from_config()"),VCr=o(` class
method.`),XCr=l(),pL=a("p"),zCr=o("This class cannot be instantiated directly using "),OFe=a("code"),QCr=o("__init__()"),WCr=o(" (throws an error)."),HCr=l(),St=a("div"),f(_L.$$.fragment),UCr=l(),VFe=a("p"),JCr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),YCr=l(),uf=a("p"),KCr=o(`Note:
Loading a model from its configuration file does `),XFe=a("strong"),ZCr=o("not"),e3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qW=a("a"),o3r=o("from_pretrained()"),r3r=o(" to load the model weights."),t3r=l(),zFe=a("p"),a3r=o("Examples:"),n3r=l(),f(uL.$$.fragment),s3r=l(),ko=a("div"),f(bL.$$.fragment),l3r=l(),QFe=a("p"),i3r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),d3r=l(),qn=a("p"),c3r=o("The model class to instantiate is selected based on the "),WFe=a("code"),f3r=o("model_type"),m3r=o(` property of the config object (either
passed as an argument or loaded from `),HFe=a("code"),g3r=o("pretrained_model_name_or_path"),h3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UFe=a("code"),p3r=o("pretrained_model_name_or_path"),_3r=o(":"),u3r=l(),be=a("ul"),gM=a("li"),JFe=a("strong"),b3r=o("albert"),F3r=o(" \u2014 "),IW=a("a"),v3r=o("FlaxAlbertForMaskedLM"),T3r=o(" (ALBERT model)"),M3r=l(),hM=a("li"),YFe=a("strong"),E3r=o("bart"),C3r=o(" \u2014 "),jW=a("a"),w3r=o("FlaxBartForConditionalGeneration"),A3r=o(" (BART model)"),y3r=l(),pM=a("li"),KFe=a("strong"),L3r=o("bert"),x3r=o(" \u2014 "),NW=a("a"),k3r=o("FlaxBertForMaskedLM"),S3r=o(" (BERT model)"),R3r=l(),_M=a("li"),ZFe=a("strong"),B3r=o("big_bird"),P3r=o(" \u2014 "),DW=a("a"),$3r=o("FlaxBigBirdForMaskedLM"),q3r=o(" (BigBird model)"),I3r=l(),uM=a("li"),eve=a("strong"),j3r=o("distilbert"),N3r=o(" \u2014 "),GW=a("a"),D3r=o("FlaxDistilBertForMaskedLM"),G3r=o(" (DistilBERT model)"),O3r=l(),bM=a("li"),ove=a("strong"),V3r=o("electra"),X3r=o(" \u2014 "),OW=a("a"),z3r=o("FlaxElectraForMaskedLM"),Q3r=o(" (ELECTRA model)"),W3r=l(),FM=a("li"),rve=a("strong"),H3r=o("mbart"),U3r=o(" \u2014 "),VW=a("a"),J3r=o("FlaxMBartForConditionalGeneration"),Y3r=o(" (mBART model)"),K3r=l(),vM=a("li"),tve=a("strong"),Z3r=o("roberta"),ewr=o(" \u2014 "),XW=a("a"),owr=o("FlaxRobertaForMaskedLM"),rwr=o(" (RoBERTa model)"),twr=l(),TM=a("li"),ave=a("strong"),awr=o("roformer"),nwr=o(" \u2014 "),zW=a("a"),swr=o("FlaxRoFormerForMaskedLM"),lwr=o(" (RoFormer model)"),iwr=l(),MM=a("li"),nve=a("strong"),dwr=o("xlm-roberta"),cwr=o(" \u2014 "),QW=a("a"),fwr=o("FlaxXLMRobertaForMaskedLM"),mwr=o(" (XLM-RoBERTa model)"),gwr=l(),sve=a("p"),hwr=o("Examples:"),pwr=l(),f(FL.$$.fragment),iPe=l(),bf=a("h2"),EM=a("a"),lve=a("span"),f(vL.$$.fragment),_wr=l(),ive=a("span"),uwr=o("FlaxAutoModelForSeq2SeqLM"),dPe=l(),Ir=a("div"),f(TL.$$.fragment),bwr=l(),Ff=a("p"),Fwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),WW=a("a"),vwr=o("from_pretrained()"),Twr=o(" class method or the "),HW=a("a"),Mwr=o("from_config()"),Ewr=o(` class
method.`),Cwr=l(),ML=a("p"),wwr=o("This class cannot be instantiated directly using "),dve=a("code"),Awr=o("__init__()"),ywr=o(" (throws an error)."),Lwr=l(),Rt=a("div"),f(EL.$$.fragment),xwr=l(),cve=a("p"),kwr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Swr=l(),vf=a("p"),Rwr=o(`Note:
Loading a model from its configuration file does `),fve=a("strong"),Bwr=o("not"),Pwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UW=a("a"),$wr=o("from_pretrained()"),qwr=o(" to load the model weights."),Iwr=l(),mve=a("p"),jwr=o("Examples:"),Nwr=l(),f(CL.$$.fragment),Dwr=l(),So=a("div"),f(wL.$$.fragment),Gwr=l(),gve=a("p"),Owr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Vwr=l(),In=a("p"),Xwr=o("The model class to instantiate is selected based on the "),hve=a("code"),zwr=o("model_type"),Qwr=o(` property of the config object (either
passed as an argument or loaded from `),pve=a("code"),Wwr=o("pretrained_model_name_or_path"),Hwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ve=a("code"),Uwr=o("pretrained_model_name_or_path"),Jwr=o(":"),Ywr=l(),Ee=a("ul"),CM=a("li"),uve=a("strong"),Kwr=o("bart"),Zwr=o(" \u2014 "),JW=a("a"),eAr=o("FlaxBartForConditionalGeneration"),oAr=o(" (BART model)"),rAr=l(),wM=a("li"),bve=a("strong"),tAr=o("blenderbot"),aAr=o(" \u2014 "),YW=a("a"),nAr=o("FlaxBlenderbotForConditionalGeneration"),sAr=o(" (Blenderbot model)"),lAr=l(),AM=a("li"),Fve=a("strong"),iAr=o("blenderbot-small"),dAr=o(" \u2014 "),KW=a("a"),cAr=o("FlaxBlenderbotSmallForConditionalGeneration"),fAr=o(" (BlenderbotSmall model)"),mAr=l(),yM=a("li"),vve=a("strong"),gAr=o("encoder-decoder"),hAr=o(" \u2014 "),ZW=a("a"),pAr=o("FlaxEncoderDecoderModel"),_Ar=o(" (Encoder decoder model)"),uAr=l(),LM=a("li"),Tve=a("strong"),bAr=o("marian"),FAr=o(" \u2014 "),eH=a("a"),vAr=o("FlaxMarianMTModel"),TAr=o(" (Marian model)"),MAr=l(),xM=a("li"),Mve=a("strong"),EAr=o("mbart"),CAr=o(" \u2014 "),oH=a("a"),wAr=o("FlaxMBartForConditionalGeneration"),AAr=o(" (mBART model)"),yAr=l(),kM=a("li"),Eve=a("strong"),LAr=o("mt5"),xAr=o(" \u2014 "),rH=a("a"),kAr=o("FlaxMT5ForConditionalGeneration"),SAr=o(" (mT5 model)"),RAr=l(),SM=a("li"),Cve=a("strong"),BAr=o("pegasus"),PAr=o(" \u2014 "),tH=a("a"),$Ar=o("FlaxPegasusForConditionalGeneration"),qAr=o(" (Pegasus model)"),IAr=l(),RM=a("li"),wve=a("strong"),jAr=o("t5"),NAr=o(" \u2014 "),aH=a("a"),DAr=o("FlaxT5ForConditionalGeneration"),GAr=o(" (T5 model)"),OAr=l(),Ave=a("p"),VAr=o("Examples:"),XAr=l(),f(AL.$$.fragment),cPe=l(),Tf=a("h2"),BM=a("a"),yve=a("span"),f(yL.$$.fragment),zAr=l(),Lve=a("span"),QAr=o("FlaxAutoModelForSequenceClassification"),fPe=l(),jr=a("div"),f(LL.$$.fragment),WAr=l(),Mf=a("p"),HAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),nH=a("a"),UAr=o("from_pretrained()"),JAr=o(" class method or the "),sH=a("a"),YAr=o("from_config()"),KAr=o(` class
method.`),ZAr=l(),xL=a("p"),eyr=o("This class cannot be instantiated directly using "),xve=a("code"),oyr=o("__init__()"),ryr=o(" (throws an error)."),tyr=l(),Bt=a("div"),f(kL.$$.fragment),ayr=l(),kve=a("p"),nyr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),syr=l(),Ef=a("p"),lyr=o(`Note:
Loading a model from its configuration file does `),Sve=a("strong"),iyr=o("not"),dyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lH=a("a"),cyr=o("from_pretrained()"),fyr=o(" to load the model weights."),myr=l(),Rve=a("p"),gyr=o("Examples:"),hyr=l(),f(SL.$$.fragment),pyr=l(),Ro=a("div"),f(RL.$$.fragment),_yr=l(),Bve=a("p"),uyr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),byr=l(),jn=a("p"),Fyr=o("The model class to instantiate is selected based on the "),Pve=a("code"),vyr=o("model_type"),Tyr=o(` property of the config object (either
passed as an argument or loaded from `),$ve=a("code"),Myr=o("pretrained_model_name_or_path"),Eyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qve=a("code"),Cyr=o("pretrained_model_name_or_path"),wyr=o(":"),Ayr=l(),Fe=a("ul"),PM=a("li"),Ive=a("strong"),yyr=o("albert"),Lyr=o(" \u2014 "),iH=a("a"),xyr=o("FlaxAlbertForSequenceClassification"),kyr=o(" (ALBERT model)"),Syr=l(),$M=a("li"),jve=a("strong"),Ryr=o("bart"),Byr=o(" \u2014 "),dH=a("a"),Pyr=o("FlaxBartForSequenceClassification"),$yr=o(" (BART model)"),qyr=l(),qM=a("li"),Nve=a("strong"),Iyr=o("bert"),jyr=o(" \u2014 "),cH=a("a"),Nyr=o("FlaxBertForSequenceClassification"),Dyr=o(" (BERT model)"),Gyr=l(),IM=a("li"),Dve=a("strong"),Oyr=o("big_bird"),Vyr=o(" \u2014 "),fH=a("a"),Xyr=o("FlaxBigBirdForSequenceClassification"),zyr=o(" (BigBird model)"),Qyr=l(),jM=a("li"),Gve=a("strong"),Wyr=o("distilbert"),Hyr=o(" \u2014 "),mH=a("a"),Uyr=o("FlaxDistilBertForSequenceClassification"),Jyr=o(" (DistilBERT model)"),Yyr=l(),NM=a("li"),Ove=a("strong"),Kyr=o("electra"),Zyr=o(" \u2014 "),gH=a("a"),eLr=o("FlaxElectraForSequenceClassification"),oLr=o(" (ELECTRA model)"),rLr=l(),DM=a("li"),Vve=a("strong"),tLr=o("mbart"),aLr=o(" \u2014 "),hH=a("a"),nLr=o("FlaxMBartForSequenceClassification"),sLr=o(" (mBART model)"),lLr=l(),GM=a("li"),Xve=a("strong"),iLr=o("roberta"),dLr=o(" \u2014 "),pH=a("a"),cLr=o("FlaxRobertaForSequenceClassification"),fLr=o(" (RoBERTa model)"),mLr=l(),OM=a("li"),zve=a("strong"),gLr=o("roformer"),hLr=o(" \u2014 "),_H=a("a"),pLr=o("FlaxRoFormerForSequenceClassification"),_Lr=o(" (RoFormer model)"),uLr=l(),VM=a("li"),Qve=a("strong"),bLr=o("xlm-roberta"),FLr=o(" \u2014 "),uH=a("a"),vLr=o("FlaxXLMRobertaForSequenceClassification"),TLr=o(" (XLM-RoBERTa model)"),MLr=l(),Wve=a("p"),ELr=o("Examples:"),CLr=l(),f(BL.$$.fragment),mPe=l(),Cf=a("h2"),XM=a("a"),Hve=a("span"),f(PL.$$.fragment),wLr=l(),Uve=a("span"),ALr=o("FlaxAutoModelForSpeechSeq2Seq"),gPe=l(),Nr=a("div"),f($L.$$.fragment),yLr=l(),wf=a("p"),LLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),bH=a("a"),xLr=o("from_pretrained()"),kLr=o(" class method or the "),FH=a("a"),SLr=o("from_config()"),RLr=o(` class
method.`),BLr=l(),qL=a("p"),PLr=o("This class cannot be instantiated directly using "),Jve=a("code"),$Lr=o("__init__()"),qLr=o(" (throws an error)."),ILr=l(),Pt=a("div"),f(IL.$$.fragment),jLr=l(),Yve=a("p"),NLr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),DLr=l(),Af=a("p"),GLr=o(`Note:
Loading a model from its configuration file does `),Kve=a("strong"),OLr=o("not"),VLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vH=a("a"),XLr=o("from_pretrained()"),zLr=o(" to load the model weights."),QLr=l(),Zve=a("p"),WLr=o("Examples:"),HLr=l(),f(jL.$$.fragment),ULr=l(),Bo=a("div"),f(NL.$$.fragment),JLr=l(),e6e=a("p"),YLr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),KLr=l(),Nn=a("p"),ZLr=o("The model class to instantiate is selected based on the "),o6e=a("code"),e7r=o("model_type"),o7r=o(` property of the config object (either
passed as an argument or loaded from `),r6e=a("code"),r7r=o("pretrained_model_name_or_path"),t7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t6e=a("code"),a7r=o("pretrained_model_name_or_path"),n7r=o(":"),s7r=l(),a6e=a("ul"),zM=a("li"),n6e=a("strong"),l7r=o("speech-encoder-decoder"),i7r=o(" \u2014 "),TH=a("a"),d7r=o("FlaxSpeechEncoderDecoderModel"),c7r=o(" (Speech Encoder decoder model)"),f7r=l(),s6e=a("p"),m7r=o("Examples:"),g7r=l(),f(DL.$$.fragment),hPe=l(),yf=a("h2"),QM=a("a"),l6e=a("span"),f(GL.$$.fragment),h7r=l(),i6e=a("span"),p7r=o("FlaxAutoModelForQuestionAnswering"),pPe=l(),Dr=a("div"),f(OL.$$.fragment),_7r=l(),Lf=a("p"),u7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),MH=a("a"),b7r=o("from_pretrained()"),F7r=o(" class method or the "),EH=a("a"),v7r=o("from_config()"),T7r=o(` class
method.`),M7r=l(),VL=a("p"),E7r=o("This class cannot be instantiated directly using "),d6e=a("code"),C7r=o("__init__()"),w7r=o(" (throws an error)."),A7r=l(),$t=a("div"),f(XL.$$.fragment),y7r=l(),c6e=a("p"),L7r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),x7r=l(),xf=a("p"),k7r=o(`Note:
Loading a model from its configuration file does `),f6e=a("strong"),S7r=o("not"),R7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CH=a("a"),B7r=o("from_pretrained()"),P7r=o(" to load the model weights."),$7r=l(),m6e=a("p"),q7r=o("Examples:"),I7r=l(),f(zL.$$.fragment),j7r=l(),Po=a("div"),f(QL.$$.fragment),N7r=l(),g6e=a("p"),D7r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),G7r=l(),Dn=a("p"),O7r=o("The model class to instantiate is selected based on the "),h6e=a("code"),V7r=o("model_type"),X7r=o(` property of the config object (either
passed as an argument or loaded from `),p6e=a("code"),z7r=o("pretrained_model_name_or_path"),Q7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_6e=a("code"),W7r=o("pretrained_model_name_or_path"),H7r=o(":"),U7r=l(),ve=a("ul"),WM=a("li"),u6e=a("strong"),J7r=o("albert"),Y7r=o(" \u2014 "),wH=a("a"),K7r=o("FlaxAlbertForQuestionAnswering"),Z7r=o(" (ALBERT model)"),e9r=l(),HM=a("li"),b6e=a("strong"),o9r=o("bart"),r9r=o(" \u2014 "),AH=a("a"),t9r=o("FlaxBartForQuestionAnswering"),a9r=o(" (BART model)"),n9r=l(),UM=a("li"),F6e=a("strong"),s9r=o("bert"),l9r=o(" \u2014 "),yH=a("a"),i9r=o("FlaxBertForQuestionAnswering"),d9r=o(" (BERT model)"),c9r=l(),JM=a("li"),v6e=a("strong"),f9r=o("big_bird"),m9r=o(" \u2014 "),LH=a("a"),g9r=o("FlaxBigBirdForQuestionAnswering"),h9r=o(" (BigBird model)"),p9r=l(),YM=a("li"),T6e=a("strong"),_9r=o("distilbert"),u9r=o(" \u2014 "),xH=a("a"),b9r=o("FlaxDistilBertForQuestionAnswering"),F9r=o(" (DistilBERT model)"),v9r=l(),KM=a("li"),M6e=a("strong"),T9r=o("electra"),M9r=o(" \u2014 "),kH=a("a"),E9r=o("FlaxElectraForQuestionAnswering"),C9r=o(" (ELECTRA model)"),w9r=l(),ZM=a("li"),E6e=a("strong"),A9r=o("mbart"),y9r=o(" \u2014 "),SH=a("a"),L9r=o("FlaxMBartForQuestionAnswering"),x9r=o(" (mBART model)"),k9r=l(),e4=a("li"),C6e=a("strong"),S9r=o("roberta"),R9r=o(" \u2014 "),RH=a("a"),B9r=o("FlaxRobertaForQuestionAnswering"),P9r=o(" (RoBERTa model)"),$9r=l(),o4=a("li"),w6e=a("strong"),q9r=o("roformer"),I9r=o(" \u2014 "),BH=a("a"),j9r=o("FlaxRoFormerForQuestionAnswering"),N9r=o(" (RoFormer model)"),D9r=l(),r4=a("li"),A6e=a("strong"),G9r=o("xlm-roberta"),O9r=o(" \u2014 "),PH=a("a"),V9r=o("FlaxXLMRobertaForQuestionAnswering"),X9r=o(" (XLM-RoBERTa model)"),z9r=l(),y6e=a("p"),Q9r=o("Examples:"),W9r=l(),f(WL.$$.fragment),_Pe=l(),kf=a("h2"),t4=a("a"),L6e=a("span"),f(HL.$$.fragment),H9r=l(),x6e=a("span"),U9r=o("FlaxAutoModelForTokenClassification"),uPe=l(),Gr=a("div"),f(UL.$$.fragment),J9r=l(),Sf=a("p"),Y9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),$H=a("a"),K9r=o("from_pretrained()"),Z9r=o(" class method or the "),qH=a("a"),exr=o("from_config()"),oxr=o(` class
method.`),rxr=l(),JL=a("p"),txr=o("This class cannot be instantiated directly using "),k6e=a("code"),axr=o("__init__()"),nxr=o(" (throws an error)."),sxr=l(),qt=a("div"),f(YL.$$.fragment),lxr=l(),S6e=a("p"),ixr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),dxr=l(),Rf=a("p"),cxr=o(`Note:
Loading a model from its configuration file does `),R6e=a("strong"),fxr=o("not"),mxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IH=a("a"),gxr=o("from_pretrained()"),hxr=o(" to load the model weights."),pxr=l(),B6e=a("p"),_xr=o("Examples:"),uxr=l(),f(KL.$$.fragment),bxr=l(),$o=a("div"),f(ZL.$$.fragment),Fxr=l(),P6e=a("p"),vxr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Txr=l(),Gn=a("p"),Mxr=o("The model class to instantiate is selected based on the "),$6e=a("code"),Exr=o("model_type"),Cxr=o(` property of the config object (either
passed as an argument or loaded from `),q6e=a("code"),wxr=o("pretrained_model_name_or_path"),Axr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I6e=a("code"),yxr=o("pretrained_model_name_or_path"),Lxr=o(":"),xxr=l(),Be=a("ul"),a4=a("li"),j6e=a("strong"),kxr=o("albert"),Sxr=o(" \u2014 "),jH=a("a"),Rxr=o("FlaxAlbertForTokenClassification"),Bxr=o(" (ALBERT model)"),Pxr=l(),n4=a("li"),N6e=a("strong"),$xr=o("bert"),qxr=o(" \u2014 "),NH=a("a"),Ixr=o("FlaxBertForTokenClassification"),jxr=o(" (BERT model)"),Nxr=l(),s4=a("li"),D6e=a("strong"),Dxr=o("big_bird"),Gxr=o(" \u2014 "),DH=a("a"),Oxr=o("FlaxBigBirdForTokenClassification"),Vxr=o(" (BigBird model)"),Xxr=l(),l4=a("li"),G6e=a("strong"),zxr=o("distilbert"),Qxr=o(" \u2014 "),GH=a("a"),Wxr=o("FlaxDistilBertForTokenClassification"),Hxr=o(" (DistilBERT model)"),Uxr=l(),i4=a("li"),O6e=a("strong"),Jxr=o("electra"),Yxr=o(" \u2014 "),OH=a("a"),Kxr=o("FlaxElectraForTokenClassification"),Zxr=o(" (ELECTRA model)"),ekr=l(),d4=a("li"),V6e=a("strong"),okr=o("roberta"),rkr=o(" \u2014 "),VH=a("a"),tkr=o("FlaxRobertaForTokenClassification"),akr=o(" (RoBERTa model)"),nkr=l(),c4=a("li"),X6e=a("strong"),skr=o("roformer"),lkr=o(" \u2014 "),XH=a("a"),ikr=o("FlaxRoFormerForTokenClassification"),dkr=o(" (RoFormer model)"),ckr=l(),f4=a("li"),z6e=a("strong"),fkr=o("xlm-roberta"),mkr=o(" \u2014 "),zH=a("a"),gkr=o("FlaxXLMRobertaForTokenClassification"),hkr=o(" (XLM-RoBERTa model)"),pkr=l(),Q6e=a("p"),_kr=o("Examples:"),ukr=l(),f(e7.$$.fragment),bPe=l(),Bf=a("h2"),m4=a("a"),W6e=a("span"),f(o7.$$.fragment),bkr=l(),H6e=a("span"),Fkr=o("FlaxAutoModelForMultipleChoice"),FPe=l(),Or=a("div"),f(r7.$$.fragment),vkr=l(),Pf=a("p"),Tkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),QH=a("a"),Mkr=o("from_pretrained()"),Ekr=o(" class method or the "),WH=a("a"),Ckr=o("from_config()"),wkr=o(` class
method.`),Akr=l(),t7=a("p"),ykr=o("This class cannot be instantiated directly using "),U6e=a("code"),Lkr=o("__init__()"),xkr=o(" (throws an error)."),kkr=l(),It=a("div"),f(a7.$$.fragment),Skr=l(),J6e=a("p"),Rkr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Bkr=l(),$f=a("p"),Pkr=o(`Note:
Loading a model from its configuration file does `),Y6e=a("strong"),$kr=o("not"),qkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HH=a("a"),Ikr=o("from_pretrained()"),jkr=o(" to load the model weights."),Nkr=l(),K6e=a("p"),Dkr=o("Examples:"),Gkr=l(),f(n7.$$.fragment),Okr=l(),qo=a("div"),f(s7.$$.fragment),Vkr=l(),Z6e=a("p"),Xkr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),zkr=l(),On=a("p"),Qkr=o("The model class to instantiate is selected based on the "),e0e=a("code"),Wkr=o("model_type"),Hkr=o(` property of the config object (either
passed as an argument or loaded from `),o0e=a("code"),Ukr=o("pretrained_model_name_or_path"),Jkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r0e=a("code"),Ykr=o("pretrained_model_name_or_path"),Kkr=o(":"),Zkr=l(),Pe=a("ul"),g4=a("li"),t0e=a("strong"),eSr=o("albert"),oSr=o(" \u2014 "),UH=a("a"),rSr=o("FlaxAlbertForMultipleChoice"),tSr=o(" (ALBERT model)"),aSr=l(),h4=a("li"),a0e=a("strong"),nSr=o("bert"),sSr=o(" \u2014 "),JH=a("a"),lSr=o("FlaxBertForMultipleChoice"),iSr=o(" (BERT model)"),dSr=l(),p4=a("li"),n0e=a("strong"),cSr=o("big_bird"),fSr=o(" \u2014 "),YH=a("a"),mSr=o("FlaxBigBirdForMultipleChoice"),gSr=o(" (BigBird model)"),hSr=l(),_4=a("li"),s0e=a("strong"),pSr=o("distilbert"),_Sr=o(" \u2014 "),KH=a("a"),uSr=o("FlaxDistilBertForMultipleChoice"),bSr=o(" (DistilBERT model)"),FSr=l(),u4=a("li"),l0e=a("strong"),vSr=o("electra"),TSr=o(" \u2014 "),ZH=a("a"),MSr=o("FlaxElectraForMultipleChoice"),ESr=o(" (ELECTRA model)"),CSr=l(),b4=a("li"),i0e=a("strong"),wSr=o("roberta"),ASr=o(" \u2014 "),eU=a("a"),ySr=o("FlaxRobertaForMultipleChoice"),LSr=o(" (RoBERTa model)"),xSr=l(),F4=a("li"),d0e=a("strong"),kSr=o("roformer"),SSr=o(" \u2014 "),oU=a("a"),RSr=o("FlaxRoFormerForMultipleChoice"),BSr=o(" (RoFormer model)"),PSr=l(),v4=a("li"),c0e=a("strong"),$Sr=o("xlm-roberta"),qSr=o(" \u2014 "),rU=a("a"),ISr=o("FlaxXLMRobertaForMultipleChoice"),jSr=o(" (XLM-RoBERTa model)"),NSr=l(),f0e=a("p"),DSr=o("Examples:"),GSr=l(),f(l7.$$.fragment),vPe=l(),qf=a("h2"),T4=a("a"),m0e=a("span"),f(i7.$$.fragment),OSr=l(),g0e=a("span"),VSr=o("FlaxAutoModelForNextSentencePrediction"),TPe=l(),Vr=a("div"),f(d7.$$.fragment),XSr=l(),If=a("p"),zSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),tU=a("a"),QSr=o("from_pretrained()"),WSr=o(" class method or the "),aU=a("a"),HSr=o("from_config()"),USr=o(` class
method.`),JSr=l(),c7=a("p"),YSr=o("This class cannot be instantiated directly using "),h0e=a("code"),KSr=o("__init__()"),ZSr=o(" (throws an error)."),eRr=l(),jt=a("div"),f(f7.$$.fragment),oRr=l(),p0e=a("p"),rRr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),tRr=l(),jf=a("p"),aRr=o(`Note:
Loading a model from its configuration file does `),_0e=a("strong"),nRr=o("not"),sRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nU=a("a"),lRr=o("from_pretrained()"),iRr=o(" to load the model weights."),dRr=l(),u0e=a("p"),cRr=o("Examples:"),fRr=l(),f(m7.$$.fragment),mRr=l(),Io=a("div"),f(g7.$$.fragment),gRr=l(),b0e=a("p"),hRr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),pRr=l(),Vn=a("p"),_Rr=o("The model class to instantiate is selected based on the "),F0e=a("code"),uRr=o("model_type"),bRr=o(` property of the config object (either
passed as an argument or loaded from `),v0e=a("code"),FRr=o("pretrained_model_name_or_path"),vRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T0e=a("code"),TRr=o("pretrained_model_name_or_path"),MRr=o(":"),ERr=l(),M0e=a("ul"),M4=a("li"),E0e=a("strong"),CRr=o("bert"),wRr=o(" \u2014 "),sU=a("a"),ARr=o("FlaxBertForNextSentencePrediction"),yRr=o(" (BERT model)"),LRr=l(),C0e=a("p"),xRr=o("Examples:"),kRr=l(),f(h7.$$.fragment),MPe=l(),Nf=a("h2"),E4=a("a"),w0e=a("span"),f(p7.$$.fragment),SRr=l(),A0e=a("span"),RRr=o("FlaxAutoModelForImageClassification"),EPe=l(),Xr=a("div"),f(_7.$$.fragment),BRr=l(),Df=a("p"),PRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),lU=a("a"),$Rr=o("from_pretrained()"),qRr=o(" class method or the "),iU=a("a"),IRr=o("from_config()"),jRr=o(` class
method.`),NRr=l(),u7=a("p"),DRr=o("This class cannot be instantiated directly using "),y0e=a("code"),GRr=o("__init__()"),ORr=o(" (throws an error)."),VRr=l(),Nt=a("div"),f(b7.$$.fragment),XRr=l(),L0e=a("p"),zRr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),QRr=l(),Gf=a("p"),WRr=o(`Note:
Loading a model from its configuration file does `),x0e=a("strong"),HRr=o("not"),URr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dU=a("a"),JRr=o("from_pretrained()"),YRr=o(" to load the model weights."),KRr=l(),k0e=a("p"),ZRr=o("Examples:"),eBr=l(),f(F7.$$.fragment),oBr=l(),jo=a("div"),f(v7.$$.fragment),rBr=l(),S0e=a("p"),tBr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),aBr=l(),Xn=a("p"),nBr=o("The model class to instantiate is selected based on the "),R0e=a("code"),sBr=o("model_type"),lBr=o(` property of the config object (either
passed as an argument or loaded from `),B0e=a("code"),iBr=o("pretrained_model_name_or_path"),dBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P0e=a("code"),cBr=o("pretrained_model_name_or_path"),fBr=o(":"),mBr=l(),T7=a("ul"),C4=a("li"),$0e=a("strong"),gBr=o("beit"),hBr=o(" \u2014 "),cU=a("a"),pBr=o("FlaxBeitForImageClassification"),_Br=o(" (BEiT model)"),uBr=l(),w4=a("li"),q0e=a("strong"),bBr=o("vit"),FBr=o(" \u2014 "),fU=a("a"),vBr=o("FlaxViTForImageClassification"),TBr=o(" (ViT model)"),MBr=l(),I0e=a("p"),EBr=o("Examples:"),CBr=l(),f(M7.$$.fragment),CPe=l(),Of=a("h2"),A4=a("a"),j0e=a("span"),f(E7.$$.fragment),wBr=l(),N0e=a("span"),ABr=o("FlaxAutoModelForVision2Seq"),wPe=l(),zr=a("div"),f(C7.$$.fragment),yBr=l(),Vf=a("p"),LBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),mU=a("a"),xBr=o("from_pretrained()"),kBr=o(" class method or the "),gU=a("a"),SBr=o("from_config()"),RBr=o(` class
method.`),BBr=l(),w7=a("p"),PBr=o("This class cannot be instantiated directly using "),D0e=a("code"),$Br=o("__init__()"),qBr=o(" (throws an error)."),IBr=l(),Dt=a("div"),f(A7.$$.fragment),jBr=l(),G0e=a("p"),NBr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),DBr=l(),Xf=a("p"),GBr=o(`Note:
Loading a model from its configuration file does `),O0e=a("strong"),OBr=o("not"),VBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hU=a("a"),XBr=o("from_pretrained()"),zBr=o(" to load the model weights."),QBr=l(),V0e=a("p"),WBr=o("Examples:"),HBr=l(),f(y7.$$.fragment),UBr=l(),No=a("div"),f(L7.$$.fragment),JBr=l(),X0e=a("p"),YBr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),KBr=l(),zn=a("p"),ZBr=o("The model class to instantiate is selected based on the "),z0e=a("code"),ePr=o("model_type"),oPr=o(` property of the config object (either
passed as an argument or loaded from `),Q0e=a("code"),rPr=o("pretrained_model_name_or_path"),tPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W0e=a("code"),aPr=o("pretrained_model_name_or_path"),nPr=o(":"),sPr=l(),H0e=a("ul"),y4=a("li"),U0e=a("strong"),lPr=o("vision-encoder-decoder"),iPr=o(" \u2014 "),pU=a("a"),dPr=o("FlaxVisionEncoderDecoderModel"),cPr=o(" (Vision Encoder decoder model)"),fPr=l(),J0e=a("p"),mPr=o("Examples:"),gPr=l(),f(x7.$$.fragment),this.h()},l(c){const u=JEt('[data-svelte="svelte-1phssyn"]',document.head);Z=n(u,"META",{name:!0,content:!0}),u.forEach(t),io=i(c),de=n(c,"H1",{class:!0});var k7=s(de);Ce=n(k7,"A",{id:!0,class:!0,href:!0});var Y0e=s(Ce);lo=n(Y0e,"SPAN",{});var K0e=s(lo);m(me.$$.fragment,K0e),K0e.forEach(t),Y0e.forEach(t),Me=i(k7),zo=n(k7,"SPAN",{});var pPr=s(zo);Vi=r(pPr,"Auto Classes"),pPr.forEach(t),k7.forEach(t),Wf=i(c),ha=n(c,"P",{});var yPe=s(ha);Xi=r(yPe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),zi=n(yPe,"CODE",{});var _Pr=s(zi);LE=r(_Pr,"from_pretrained()"),_Pr.forEach(t),Hf=r(yPe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),yPe.forEach(t),xe=i(c),co=n(c,"P",{});var L4=s(co);Qi=r(L4,"Instantiating one of "),Qn=n(L4,"A",{href:!0});var uPr=s(Qn);xE=r(uPr,"AutoConfig"),uPr.forEach(t),Wn=r(L4,", "),Hn=n(L4,"A",{href:!0});var bPr=s(Hn);kE=r(bPr,"AutoModel"),bPr.forEach(t),Wi=r(L4,`, and
`),Un=n(L4,"A",{href:!0});var FPr=s(Un);SE=r(FPr,"AutoTokenizer"),FPr.forEach(t),Hi=r(L4," will directly create a class of the relevant architecture. For instance"),L4.forEach(t),Uf=i(c),m(Xa.$$.fragment,c),fo=i(c),_e=n(c,"P",{});var LPe=s(_e);y9=r(LPe,"will create a model that is an instance of "),Ui=n(LPe,"A",{href:!0});var vPr=s(Ui);L9=r(vPr,"BertModel"),vPr.forEach(t),x9=r(LPe,"."),LPe.forEach(t),Qo=i(c),za=n(c,"P",{});var xPe=s(za);k9=r(xPe,"There is one class of "),Jf=n(xPe,"CODE",{});var TPr=s(Jf);S9=r(TPr,"AutoModel"),TPr.forEach(t),Dqe=r(xPe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),xPe.forEach(t),ERe=i(c),Ji=n(c,"H2",{class:!0});var kPe=s(Ji);Yf=n(kPe,"A",{id:!0,class:!0,href:!0});var MPr=s(Yf);fY=n(MPr,"SPAN",{});var EPr=s(fY);m(RE.$$.fragment,EPr),EPr.forEach(t),MPr.forEach(t),Gqe=i(kPe),mY=n(kPe,"SPAN",{});var CPr=s(mY);Oqe=r(CPr,"Extending the Auto Classes"),CPr.forEach(t),kPe.forEach(t),CRe=i(c),Jn=n(c,"P",{});var _U=s(Jn);Vqe=r(_U,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),gY=n(_U,"CODE",{});var wPr=s(gY);Xqe=r(wPr,"NewModel"),wPr.forEach(t),zqe=r(_U,", make sure you have a "),hY=n(_U,"CODE",{});var APr=s(hY);Qqe=r(APr,"NewModelConfig"),APr.forEach(t),Wqe=r(_U,` then you can add those to the auto
classes like this:`),_U.forEach(t),wRe=i(c),m(BE.$$.fragment,c),ARe=i(c),R9=n(c,"P",{});var yPr=s(R9);Hqe=r(yPr,"You will then be able to use the auto classes like you would usually do!"),yPr.forEach(t),yRe=i(c),m(Kf.$$.fragment,c),LRe=i(c),Yi=n(c,"H2",{class:!0});var SPe=s(Yi);Zf=n(SPe,"A",{id:!0,class:!0,href:!0});var LPr=s(Zf);pY=n(LPr,"SPAN",{});var xPr=s(pY);m(PE.$$.fragment,xPr),xPr.forEach(t),LPr.forEach(t),Uqe=i(SPe),_Y=n(SPe,"SPAN",{});var kPr=s(_Y);Jqe=r(kPr,"AutoConfig"),kPr.forEach(t),SPe.forEach(t),xRe=i(c),Wo=n(c,"DIV",{class:!0});var Ws=s(Wo);m($E.$$.fragment,Ws),Yqe=i(Ws),qE=n(Ws,"P",{});var RPe=s(qE);Kqe=r(RPe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),B9=n(RPe,"A",{href:!0});var SPr=s(B9);Zqe=r(SPr,"from_pretrained()"),SPr.forEach(t),eIe=r(RPe," class method."),RPe.forEach(t),oIe=i(Ws),IE=n(Ws,"P",{});var BPe=s(IE);rIe=r(BPe,"This class cannot be instantiated directly using "),uY=n(BPe,"CODE",{});var RPr=s(uY);tIe=r(RPr,"__init__()"),RPr.forEach(t),aIe=r(BPe," (throws an error)."),BPe.forEach(t),nIe=i(Ws),mo=n(Ws,"DIV",{class:!0});var _a=s(mo);m(jE.$$.fragment,_a),sIe=i(_a),bY=n(_a,"P",{});var BPr=s(bY);lIe=r(BPr,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),BPr.forEach(t),iIe=i(_a),Ki=n(_a,"P",{});var uU=s(Ki);dIe=r(uU,"The configuration class to instantiate is selected based on the "),FY=n(uU,"CODE",{});var PPr=s(FY);cIe=r(PPr,"model_type"),PPr.forEach(t),fIe=r(uU,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),vY=n(uU,"CODE",{});var $Pr=s(vY);mIe=r($Pr,"pretrained_model_name_or_path"),$Pr.forEach(t),gIe=r(uU,":"),uU.forEach(t),hIe=i(_a),F=n(_a,"UL",{});var v=s(F);em=n(v,"LI",{});var Z0e=s(em);TY=n(Z0e,"STRONG",{});var qPr=s(TY);pIe=r(qPr,"albert"),qPr.forEach(t),_Ie=r(Z0e," \u2014 "),P9=n(Z0e,"A",{href:!0});var IPr=s(P9);uIe=r(IPr,"AlbertConfig"),IPr.forEach(t),bIe=r(Z0e," (ALBERT model)"),Z0e.forEach(t),FIe=i(v),om=n(v,"LI",{});var eTe=s(om);MY=n(eTe,"STRONG",{});var jPr=s(MY);vIe=r(jPr,"bart"),jPr.forEach(t),TIe=r(eTe," \u2014 "),$9=n(eTe,"A",{href:!0});var NPr=s($9);MIe=r(NPr,"BartConfig"),NPr.forEach(t),EIe=r(eTe," (BART model)"),eTe.forEach(t),CIe=i(v),rm=n(v,"LI",{});var oTe=s(rm);EY=n(oTe,"STRONG",{});var DPr=s(EY);wIe=r(DPr,"beit"),DPr.forEach(t),AIe=r(oTe," \u2014 "),q9=n(oTe,"A",{href:!0});var GPr=s(q9);yIe=r(GPr,"BeitConfig"),GPr.forEach(t),LIe=r(oTe," (BEiT model)"),oTe.forEach(t),xIe=i(v),tm=n(v,"LI",{});var rTe=s(tm);CY=n(rTe,"STRONG",{});var OPr=s(CY);kIe=r(OPr,"bert"),OPr.forEach(t),SIe=r(rTe," \u2014 "),I9=n(rTe,"A",{href:!0});var VPr=s(I9);RIe=r(VPr,"BertConfig"),VPr.forEach(t),BIe=r(rTe," (BERT model)"),rTe.forEach(t),PIe=i(v),am=n(v,"LI",{});var tTe=s(am);wY=n(tTe,"STRONG",{});var XPr=s(wY);$Ie=r(XPr,"bert-generation"),XPr.forEach(t),qIe=r(tTe," \u2014 "),j9=n(tTe,"A",{href:!0});var zPr=s(j9);IIe=r(zPr,"BertGenerationConfig"),zPr.forEach(t),jIe=r(tTe," (Bert Generation model)"),tTe.forEach(t),NIe=i(v),nm=n(v,"LI",{});var aTe=s(nm);AY=n(aTe,"STRONG",{});var QPr=s(AY);DIe=r(QPr,"big_bird"),QPr.forEach(t),GIe=r(aTe," \u2014 "),N9=n(aTe,"A",{href:!0});var WPr=s(N9);OIe=r(WPr,"BigBirdConfig"),WPr.forEach(t),VIe=r(aTe," (BigBird model)"),aTe.forEach(t),XIe=i(v),sm=n(v,"LI",{});var nTe=s(sm);yY=n(nTe,"STRONG",{});var HPr=s(yY);zIe=r(HPr,"bigbird_pegasus"),HPr.forEach(t),QIe=r(nTe," \u2014 "),D9=n(nTe,"A",{href:!0});var UPr=s(D9);WIe=r(UPr,"BigBirdPegasusConfig"),UPr.forEach(t),HIe=r(nTe," (BigBirdPegasus model)"),nTe.forEach(t),UIe=i(v),lm=n(v,"LI",{});var sTe=s(lm);LY=n(sTe,"STRONG",{});var JPr=s(LY);JIe=r(JPr,"blenderbot"),JPr.forEach(t),YIe=r(sTe," \u2014 "),G9=n(sTe,"A",{href:!0});var YPr=s(G9);KIe=r(YPr,"BlenderbotConfig"),YPr.forEach(t),ZIe=r(sTe," (Blenderbot model)"),sTe.forEach(t),eje=i(v),im=n(v,"LI",{});var lTe=s(im);xY=n(lTe,"STRONG",{});var KPr=s(xY);oje=r(KPr,"blenderbot-small"),KPr.forEach(t),rje=r(lTe," \u2014 "),O9=n(lTe,"A",{href:!0});var ZPr=s(O9);tje=r(ZPr,"BlenderbotSmallConfig"),ZPr.forEach(t),aje=r(lTe," (BlenderbotSmall model)"),lTe.forEach(t),nje=i(v),dm=n(v,"LI",{});var iTe=s(dm);kY=n(iTe,"STRONG",{});var e$r=s(kY);sje=r(e$r,"camembert"),e$r.forEach(t),lje=r(iTe," \u2014 "),V9=n(iTe,"A",{href:!0});var o$r=s(V9);ije=r(o$r,"CamembertConfig"),o$r.forEach(t),dje=r(iTe," (CamemBERT model)"),iTe.forEach(t),cje=i(v),cm=n(v,"LI",{});var dTe=s(cm);SY=n(dTe,"STRONG",{});var r$r=s(SY);fje=r(r$r,"canine"),r$r.forEach(t),mje=r(dTe," \u2014 "),X9=n(dTe,"A",{href:!0});var t$r=s(X9);gje=r(t$r,"CanineConfig"),t$r.forEach(t),hje=r(dTe," (Canine model)"),dTe.forEach(t),pje=i(v),fm=n(v,"LI",{});var cTe=s(fm);RY=n(cTe,"STRONG",{});var a$r=s(RY);_je=r(a$r,"clip"),a$r.forEach(t),uje=r(cTe," \u2014 "),z9=n(cTe,"A",{href:!0});var n$r=s(z9);bje=r(n$r,"CLIPConfig"),n$r.forEach(t),Fje=r(cTe," (CLIP model)"),cTe.forEach(t),vje=i(v),mm=n(v,"LI",{});var fTe=s(mm);BY=n(fTe,"STRONG",{});var s$r=s(BY);Tje=r(s$r,"convbert"),s$r.forEach(t),Mje=r(fTe," \u2014 "),Q9=n(fTe,"A",{href:!0});var l$r=s(Q9);Eje=r(l$r,"ConvBertConfig"),l$r.forEach(t),Cje=r(fTe," (ConvBERT model)"),fTe.forEach(t),wje=i(v),gm=n(v,"LI",{});var mTe=s(gm);PY=n(mTe,"STRONG",{});var i$r=s(PY);Aje=r(i$r,"convnext"),i$r.forEach(t),yje=r(mTe," \u2014 "),W9=n(mTe,"A",{href:!0});var d$r=s(W9);Lje=r(d$r,"ConvNextConfig"),d$r.forEach(t),xje=r(mTe," (ConvNext model)"),mTe.forEach(t),kje=i(v),hm=n(v,"LI",{});var gTe=s(hm);$Y=n(gTe,"STRONG",{});var c$r=s($Y);Sje=r(c$r,"ctrl"),c$r.forEach(t),Rje=r(gTe," \u2014 "),H9=n(gTe,"A",{href:!0});var f$r=s(H9);Bje=r(f$r,"CTRLConfig"),f$r.forEach(t),Pje=r(gTe," (CTRL model)"),gTe.forEach(t),$je=i(v),pm=n(v,"LI",{});var hTe=s(pm);qY=n(hTe,"STRONG",{});var m$r=s(qY);qje=r(m$r,"data2vec-audio"),m$r.forEach(t),Ije=r(hTe," \u2014 "),U9=n(hTe,"A",{href:!0});var g$r=s(U9);jje=r(g$r,"Data2VecAudioConfig"),g$r.forEach(t),Nje=r(hTe," (Data2VecAudio model)"),hTe.forEach(t),Dje=i(v),_m=n(v,"LI",{});var pTe=s(_m);IY=n(pTe,"STRONG",{});var h$r=s(IY);Gje=r(h$r,"data2vec-text"),h$r.forEach(t),Oje=r(pTe," \u2014 "),J9=n(pTe,"A",{href:!0});var p$r=s(J9);Vje=r(p$r,"Data2VecTextConfig"),p$r.forEach(t),Xje=r(pTe," (Data2VecText model)"),pTe.forEach(t),zje=i(v),um=n(v,"LI",{});var _Te=s(um);jY=n(_Te,"STRONG",{});var _$r=s(jY);Qje=r(_$r,"deberta"),_$r.forEach(t),Wje=r(_Te," \u2014 "),Y9=n(_Te,"A",{href:!0});var u$r=s(Y9);Hje=r(u$r,"DebertaConfig"),u$r.forEach(t),Uje=r(_Te," (DeBERTa model)"),_Te.forEach(t),Jje=i(v),bm=n(v,"LI",{});var uTe=s(bm);NY=n(uTe,"STRONG",{});var b$r=s(NY);Yje=r(b$r,"deberta-v2"),b$r.forEach(t),Kje=r(uTe," \u2014 "),K9=n(uTe,"A",{href:!0});var F$r=s(K9);Zje=r(F$r,"DebertaV2Config"),F$r.forEach(t),eNe=r(uTe," (DeBERTa-v2 model)"),uTe.forEach(t),oNe=i(v),Fm=n(v,"LI",{});var bTe=s(Fm);DY=n(bTe,"STRONG",{});var v$r=s(DY);rNe=r(v$r,"decision_transformer"),v$r.forEach(t),tNe=r(bTe," \u2014 "),Z9=n(bTe,"A",{href:!0});var T$r=s(Z9);aNe=r(T$r,"DecisionTransformerConfig"),T$r.forEach(t),nNe=r(bTe," (Decision Transformer model)"),bTe.forEach(t),sNe=i(v),vm=n(v,"LI",{});var FTe=s(vm);GY=n(FTe,"STRONG",{});var M$r=s(GY);lNe=r(M$r,"deit"),M$r.forEach(t),iNe=r(FTe," \u2014 "),ex=n(FTe,"A",{href:!0});var E$r=s(ex);dNe=r(E$r,"DeiTConfig"),E$r.forEach(t),cNe=r(FTe," (DeiT model)"),FTe.forEach(t),fNe=i(v),Tm=n(v,"LI",{});var vTe=s(Tm);OY=n(vTe,"STRONG",{});var C$r=s(OY);mNe=r(C$r,"detr"),C$r.forEach(t),gNe=r(vTe," \u2014 "),ox=n(vTe,"A",{href:!0});var w$r=s(ox);hNe=r(w$r,"DetrConfig"),w$r.forEach(t),pNe=r(vTe," (DETR model)"),vTe.forEach(t),_Ne=i(v),Mm=n(v,"LI",{});var TTe=s(Mm);VY=n(TTe,"STRONG",{});var A$r=s(VY);uNe=r(A$r,"distilbert"),A$r.forEach(t),bNe=r(TTe," \u2014 "),rx=n(TTe,"A",{href:!0});var y$r=s(rx);FNe=r(y$r,"DistilBertConfig"),y$r.forEach(t),vNe=r(TTe," (DistilBERT model)"),TTe.forEach(t),TNe=i(v),Em=n(v,"LI",{});var MTe=s(Em);XY=n(MTe,"STRONG",{});var L$r=s(XY);MNe=r(L$r,"dpr"),L$r.forEach(t),ENe=r(MTe," \u2014 "),tx=n(MTe,"A",{href:!0});var x$r=s(tx);CNe=r(x$r,"DPRConfig"),x$r.forEach(t),wNe=r(MTe," (DPR model)"),MTe.forEach(t),ANe=i(v),Cm=n(v,"LI",{});var ETe=s(Cm);zY=n(ETe,"STRONG",{});var k$r=s(zY);yNe=r(k$r,"dpt"),k$r.forEach(t),LNe=r(ETe," \u2014 "),ax=n(ETe,"A",{href:!0});var S$r=s(ax);xNe=r(S$r,"DPTConfig"),S$r.forEach(t),kNe=r(ETe," (DPT model)"),ETe.forEach(t),SNe=i(v),wm=n(v,"LI",{});var CTe=s(wm);QY=n(CTe,"STRONG",{});var R$r=s(QY);RNe=r(R$r,"electra"),R$r.forEach(t),BNe=r(CTe," \u2014 "),nx=n(CTe,"A",{href:!0});var B$r=s(nx);PNe=r(B$r,"ElectraConfig"),B$r.forEach(t),$Ne=r(CTe," (ELECTRA model)"),CTe.forEach(t),qNe=i(v),Am=n(v,"LI",{});var wTe=s(Am);WY=n(wTe,"STRONG",{});var P$r=s(WY);INe=r(P$r,"encoder-decoder"),P$r.forEach(t),jNe=r(wTe," \u2014 "),sx=n(wTe,"A",{href:!0});var $$r=s(sx);NNe=r($$r,"EncoderDecoderConfig"),$$r.forEach(t),DNe=r(wTe," (Encoder decoder model)"),wTe.forEach(t),GNe=i(v),ym=n(v,"LI",{});var ATe=s(ym);HY=n(ATe,"STRONG",{});var q$r=s(HY);ONe=r(q$r,"flaubert"),q$r.forEach(t),VNe=r(ATe," \u2014 "),lx=n(ATe,"A",{href:!0});var I$r=s(lx);XNe=r(I$r,"FlaubertConfig"),I$r.forEach(t),zNe=r(ATe," (FlauBERT model)"),ATe.forEach(t),QNe=i(v),Lm=n(v,"LI",{});var yTe=s(Lm);UY=n(yTe,"STRONG",{});var j$r=s(UY);WNe=r(j$r,"fnet"),j$r.forEach(t),HNe=r(yTe," \u2014 "),ix=n(yTe,"A",{href:!0});var N$r=s(ix);UNe=r(N$r,"FNetConfig"),N$r.forEach(t),JNe=r(yTe," (FNet model)"),yTe.forEach(t),YNe=i(v),xm=n(v,"LI",{});var LTe=s(xm);JY=n(LTe,"STRONG",{});var D$r=s(JY);KNe=r(D$r,"fsmt"),D$r.forEach(t),ZNe=r(LTe," \u2014 "),dx=n(LTe,"A",{href:!0});var G$r=s(dx);eDe=r(G$r,"FSMTConfig"),G$r.forEach(t),oDe=r(LTe," (FairSeq Machine-Translation model)"),LTe.forEach(t),rDe=i(v),km=n(v,"LI",{});var xTe=s(km);YY=n(xTe,"STRONG",{});var O$r=s(YY);tDe=r(O$r,"funnel"),O$r.forEach(t),aDe=r(xTe," \u2014 "),cx=n(xTe,"A",{href:!0});var V$r=s(cx);nDe=r(V$r,"FunnelConfig"),V$r.forEach(t),sDe=r(xTe," (Funnel Transformer model)"),xTe.forEach(t),lDe=i(v),Sm=n(v,"LI",{});var kTe=s(Sm);KY=n(kTe,"STRONG",{});var X$r=s(KY);iDe=r(X$r,"glpn"),X$r.forEach(t),dDe=r(kTe," \u2014 "),fx=n(kTe,"A",{href:!0});var z$r=s(fx);cDe=r(z$r,"GLPNConfig"),z$r.forEach(t),fDe=r(kTe," (GLPN model)"),kTe.forEach(t),mDe=i(v),Rm=n(v,"LI",{});var STe=s(Rm);ZY=n(STe,"STRONG",{});var Q$r=s(ZY);gDe=r(Q$r,"gpt2"),Q$r.forEach(t),hDe=r(STe," \u2014 "),mx=n(STe,"A",{href:!0});var W$r=s(mx);pDe=r(W$r,"GPT2Config"),W$r.forEach(t),_De=r(STe," (OpenAI GPT-2 model)"),STe.forEach(t),uDe=i(v),Bm=n(v,"LI",{});var RTe=s(Bm);eK=n(RTe,"STRONG",{});var H$r=s(eK);bDe=r(H$r,"gpt_neo"),H$r.forEach(t),FDe=r(RTe," \u2014 "),gx=n(RTe,"A",{href:!0});var U$r=s(gx);vDe=r(U$r,"GPTNeoConfig"),U$r.forEach(t),TDe=r(RTe," (GPT Neo model)"),RTe.forEach(t),MDe=i(v),Pm=n(v,"LI",{});var BTe=s(Pm);oK=n(BTe,"STRONG",{});var J$r=s(oK);EDe=r(J$r,"gptj"),J$r.forEach(t),CDe=r(BTe," \u2014 "),hx=n(BTe,"A",{href:!0});var Y$r=s(hx);wDe=r(Y$r,"GPTJConfig"),Y$r.forEach(t),ADe=r(BTe," (GPT-J model)"),BTe.forEach(t),yDe=i(v),$m=n(v,"LI",{});var PTe=s($m);rK=n(PTe,"STRONG",{});var K$r=s(rK);LDe=r(K$r,"hubert"),K$r.forEach(t),xDe=r(PTe," \u2014 "),px=n(PTe,"A",{href:!0});var Z$r=s(px);kDe=r(Z$r,"HubertConfig"),Z$r.forEach(t),SDe=r(PTe," (Hubert model)"),PTe.forEach(t),RDe=i(v),qm=n(v,"LI",{});var $Te=s(qm);tK=n($Te,"STRONG",{});var eqr=s(tK);BDe=r(eqr,"ibert"),eqr.forEach(t),PDe=r($Te," \u2014 "),_x=n($Te,"A",{href:!0});var oqr=s(_x);$De=r(oqr,"IBertConfig"),oqr.forEach(t),qDe=r($Te," (I-BERT model)"),$Te.forEach(t),IDe=i(v),Im=n(v,"LI",{});var qTe=s(Im);aK=n(qTe,"STRONG",{});var rqr=s(aK);jDe=r(rqr,"imagegpt"),rqr.forEach(t),NDe=r(qTe," \u2014 "),ux=n(qTe,"A",{href:!0});var tqr=s(ux);DDe=r(tqr,"ImageGPTConfig"),tqr.forEach(t),GDe=r(qTe," (ImageGPT model)"),qTe.forEach(t),ODe=i(v),jm=n(v,"LI",{});var ITe=s(jm);nK=n(ITe,"STRONG",{});var aqr=s(nK);VDe=r(aqr,"layoutlm"),aqr.forEach(t),XDe=r(ITe," \u2014 "),bx=n(ITe,"A",{href:!0});var nqr=s(bx);zDe=r(nqr,"LayoutLMConfig"),nqr.forEach(t),QDe=r(ITe," (LayoutLM model)"),ITe.forEach(t),WDe=i(v),Nm=n(v,"LI",{});var jTe=s(Nm);sK=n(jTe,"STRONG",{});var sqr=s(sK);HDe=r(sqr,"layoutlmv2"),sqr.forEach(t),UDe=r(jTe," \u2014 "),Fx=n(jTe,"A",{href:!0});var lqr=s(Fx);JDe=r(lqr,"LayoutLMv2Config"),lqr.forEach(t),YDe=r(jTe," (LayoutLMv2 model)"),jTe.forEach(t),KDe=i(v),Dm=n(v,"LI",{});var NTe=s(Dm);lK=n(NTe,"STRONG",{});var iqr=s(lK);ZDe=r(iqr,"led"),iqr.forEach(t),eGe=r(NTe," \u2014 "),vx=n(NTe,"A",{href:!0});var dqr=s(vx);oGe=r(dqr,"LEDConfig"),dqr.forEach(t),rGe=r(NTe," (LED model)"),NTe.forEach(t),tGe=i(v),Gm=n(v,"LI",{});var DTe=s(Gm);iK=n(DTe,"STRONG",{});var cqr=s(iK);aGe=r(cqr,"longformer"),cqr.forEach(t),nGe=r(DTe," \u2014 "),Tx=n(DTe,"A",{href:!0});var fqr=s(Tx);sGe=r(fqr,"LongformerConfig"),fqr.forEach(t),lGe=r(DTe," (Longformer model)"),DTe.forEach(t),iGe=i(v),Om=n(v,"LI",{});var GTe=s(Om);dK=n(GTe,"STRONG",{});var mqr=s(dK);dGe=r(mqr,"luke"),mqr.forEach(t),cGe=r(GTe," \u2014 "),Mx=n(GTe,"A",{href:!0});var gqr=s(Mx);fGe=r(gqr,"LukeConfig"),gqr.forEach(t),mGe=r(GTe," (LUKE model)"),GTe.forEach(t),gGe=i(v),Vm=n(v,"LI",{});var OTe=s(Vm);cK=n(OTe,"STRONG",{});var hqr=s(cK);hGe=r(hqr,"lxmert"),hqr.forEach(t),pGe=r(OTe," \u2014 "),Ex=n(OTe,"A",{href:!0});var pqr=s(Ex);_Ge=r(pqr,"LxmertConfig"),pqr.forEach(t),uGe=r(OTe," (LXMERT model)"),OTe.forEach(t),bGe=i(v),Xm=n(v,"LI",{});var VTe=s(Xm);fK=n(VTe,"STRONG",{});var _qr=s(fK);FGe=r(_qr,"m2m_100"),_qr.forEach(t),vGe=r(VTe," \u2014 "),Cx=n(VTe,"A",{href:!0});var uqr=s(Cx);TGe=r(uqr,"M2M100Config"),uqr.forEach(t),MGe=r(VTe," (M2M100 model)"),VTe.forEach(t),EGe=i(v),zm=n(v,"LI",{});var XTe=s(zm);mK=n(XTe,"STRONG",{});var bqr=s(mK);CGe=r(bqr,"marian"),bqr.forEach(t),wGe=r(XTe," \u2014 "),wx=n(XTe,"A",{href:!0});var Fqr=s(wx);AGe=r(Fqr,"MarianConfig"),Fqr.forEach(t),yGe=r(XTe," (Marian model)"),XTe.forEach(t),LGe=i(v),Qm=n(v,"LI",{});var zTe=s(Qm);gK=n(zTe,"STRONG",{});var vqr=s(gK);xGe=r(vqr,"maskformer"),vqr.forEach(t),kGe=r(zTe," \u2014 "),Ax=n(zTe,"A",{href:!0});var Tqr=s(Ax);SGe=r(Tqr,"MaskFormerConfig"),Tqr.forEach(t),RGe=r(zTe," (MaskFormer model)"),zTe.forEach(t),BGe=i(v),Wm=n(v,"LI",{});var QTe=s(Wm);hK=n(QTe,"STRONG",{});var Mqr=s(hK);PGe=r(Mqr,"mbart"),Mqr.forEach(t),$Ge=r(QTe," \u2014 "),yx=n(QTe,"A",{href:!0});var Eqr=s(yx);qGe=r(Eqr,"MBartConfig"),Eqr.forEach(t),IGe=r(QTe," (mBART model)"),QTe.forEach(t),jGe=i(v),Hm=n(v,"LI",{});var WTe=s(Hm);pK=n(WTe,"STRONG",{});var Cqr=s(pK);NGe=r(Cqr,"megatron-bert"),Cqr.forEach(t),DGe=r(WTe," \u2014 "),Lx=n(WTe,"A",{href:!0});var wqr=s(Lx);GGe=r(wqr,"MegatronBertConfig"),wqr.forEach(t),OGe=r(WTe," (MegatronBert model)"),WTe.forEach(t),VGe=i(v),Um=n(v,"LI",{});var HTe=s(Um);_K=n(HTe,"STRONG",{});var Aqr=s(_K);XGe=r(Aqr,"mobilebert"),Aqr.forEach(t),zGe=r(HTe," \u2014 "),xx=n(HTe,"A",{href:!0});var yqr=s(xx);QGe=r(yqr,"MobileBertConfig"),yqr.forEach(t),WGe=r(HTe," (MobileBERT model)"),HTe.forEach(t),HGe=i(v),Jm=n(v,"LI",{});var UTe=s(Jm);uK=n(UTe,"STRONG",{});var Lqr=s(uK);UGe=r(Lqr,"mpnet"),Lqr.forEach(t),JGe=r(UTe," \u2014 "),kx=n(UTe,"A",{href:!0});var xqr=s(kx);YGe=r(xqr,"MPNetConfig"),xqr.forEach(t),KGe=r(UTe," (MPNet model)"),UTe.forEach(t),ZGe=i(v),Ym=n(v,"LI",{});var JTe=s(Ym);bK=n(JTe,"STRONG",{});var kqr=s(bK);eOe=r(kqr,"mt5"),kqr.forEach(t),oOe=r(JTe," \u2014 "),Sx=n(JTe,"A",{href:!0});var Sqr=s(Sx);rOe=r(Sqr,"MT5Config"),Sqr.forEach(t),tOe=r(JTe," (mT5 model)"),JTe.forEach(t),aOe=i(v),Km=n(v,"LI",{});var YTe=s(Km);FK=n(YTe,"STRONG",{});var Rqr=s(FK);nOe=r(Rqr,"nystromformer"),Rqr.forEach(t),sOe=r(YTe," \u2014 "),Rx=n(YTe,"A",{href:!0});var Bqr=s(Rx);lOe=r(Bqr,"NystromformerConfig"),Bqr.forEach(t),iOe=r(YTe," (Nystromformer model)"),YTe.forEach(t),dOe=i(v),Zm=n(v,"LI",{});var KTe=s(Zm);vK=n(KTe,"STRONG",{});var Pqr=s(vK);cOe=r(Pqr,"openai-gpt"),Pqr.forEach(t),fOe=r(KTe," \u2014 "),Bx=n(KTe,"A",{href:!0});var $qr=s(Bx);mOe=r($qr,"OpenAIGPTConfig"),$qr.forEach(t),gOe=r(KTe," (OpenAI GPT model)"),KTe.forEach(t),hOe=i(v),eg=n(v,"LI",{});var ZTe=s(eg);TK=n(ZTe,"STRONG",{});var qqr=s(TK);pOe=r(qqr,"pegasus"),qqr.forEach(t),_Oe=r(ZTe," \u2014 "),Px=n(ZTe,"A",{href:!0});var Iqr=s(Px);uOe=r(Iqr,"PegasusConfig"),Iqr.forEach(t),bOe=r(ZTe," (Pegasus model)"),ZTe.forEach(t),FOe=i(v),og=n(v,"LI",{});var e8e=s(og);MK=n(e8e,"STRONG",{});var jqr=s(MK);vOe=r(jqr,"perceiver"),jqr.forEach(t),TOe=r(e8e," \u2014 "),$x=n(e8e,"A",{href:!0});var Nqr=s($x);MOe=r(Nqr,"PerceiverConfig"),Nqr.forEach(t),EOe=r(e8e," (Perceiver model)"),e8e.forEach(t),COe=i(v),rg=n(v,"LI",{});var o8e=s(rg);EK=n(o8e,"STRONG",{});var Dqr=s(EK);wOe=r(Dqr,"plbart"),Dqr.forEach(t),AOe=r(o8e," \u2014 "),qx=n(o8e,"A",{href:!0});var Gqr=s(qx);yOe=r(Gqr,"PLBartConfig"),Gqr.forEach(t),LOe=r(o8e," (PLBart model)"),o8e.forEach(t),xOe=i(v),tg=n(v,"LI",{});var r8e=s(tg);CK=n(r8e,"STRONG",{});var Oqr=s(CK);kOe=r(Oqr,"poolformer"),Oqr.forEach(t),SOe=r(r8e," \u2014 "),Ix=n(r8e,"A",{href:!0});var Vqr=s(Ix);ROe=r(Vqr,"PoolFormerConfig"),Vqr.forEach(t),BOe=r(r8e," (PoolFormer model)"),r8e.forEach(t),POe=i(v),ag=n(v,"LI",{});var t8e=s(ag);wK=n(t8e,"STRONG",{});var Xqr=s(wK);$Oe=r(Xqr,"prophetnet"),Xqr.forEach(t),qOe=r(t8e," \u2014 "),jx=n(t8e,"A",{href:!0});var zqr=s(jx);IOe=r(zqr,"ProphetNetConfig"),zqr.forEach(t),jOe=r(t8e," (ProphetNet model)"),t8e.forEach(t),NOe=i(v),ng=n(v,"LI",{});var a8e=s(ng);AK=n(a8e,"STRONG",{});var Qqr=s(AK);DOe=r(Qqr,"qdqbert"),Qqr.forEach(t),GOe=r(a8e," \u2014 "),Nx=n(a8e,"A",{href:!0});var Wqr=s(Nx);OOe=r(Wqr,"QDQBertConfig"),Wqr.forEach(t),VOe=r(a8e," (QDQBert model)"),a8e.forEach(t),XOe=i(v),sg=n(v,"LI",{});var n8e=s(sg);yK=n(n8e,"STRONG",{});var Hqr=s(yK);zOe=r(Hqr,"rag"),Hqr.forEach(t),QOe=r(n8e," \u2014 "),Dx=n(n8e,"A",{href:!0});var Uqr=s(Dx);WOe=r(Uqr,"RagConfig"),Uqr.forEach(t),HOe=r(n8e," (RAG model)"),n8e.forEach(t),UOe=i(v),lg=n(v,"LI",{});var s8e=s(lg);LK=n(s8e,"STRONG",{});var Jqr=s(LK);JOe=r(Jqr,"realm"),Jqr.forEach(t),YOe=r(s8e," \u2014 "),Gx=n(s8e,"A",{href:!0});var Yqr=s(Gx);KOe=r(Yqr,"RealmConfig"),Yqr.forEach(t),ZOe=r(s8e," (Realm model)"),s8e.forEach(t),eVe=i(v),ig=n(v,"LI",{});var l8e=s(ig);xK=n(l8e,"STRONG",{});var Kqr=s(xK);oVe=r(Kqr,"reformer"),Kqr.forEach(t),rVe=r(l8e," \u2014 "),Ox=n(l8e,"A",{href:!0});var Zqr=s(Ox);tVe=r(Zqr,"ReformerConfig"),Zqr.forEach(t),aVe=r(l8e," (Reformer model)"),l8e.forEach(t),nVe=i(v),dg=n(v,"LI",{});var i8e=s(dg);kK=n(i8e,"STRONG",{});var eIr=s(kK);sVe=r(eIr,"rembert"),eIr.forEach(t),lVe=r(i8e," \u2014 "),Vx=n(i8e,"A",{href:!0});var oIr=s(Vx);iVe=r(oIr,"RemBertConfig"),oIr.forEach(t),dVe=r(i8e," (RemBERT model)"),i8e.forEach(t),cVe=i(v),cg=n(v,"LI",{});var d8e=s(cg);SK=n(d8e,"STRONG",{});var rIr=s(SK);fVe=r(rIr,"resnet"),rIr.forEach(t),mVe=r(d8e," \u2014 "),Xx=n(d8e,"A",{href:!0});var tIr=s(Xx);gVe=r(tIr,"ResNetConfig"),tIr.forEach(t),hVe=r(d8e," (ResNet model)"),d8e.forEach(t),pVe=i(v),fg=n(v,"LI",{});var c8e=s(fg);RK=n(c8e,"STRONG",{});var aIr=s(RK);_Ve=r(aIr,"retribert"),aIr.forEach(t),uVe=r(c8e," \u2014 "),zx=n(c8e,"A",{href:!0});var nIr=s(zx);bVe=r(nIr,"RetriBertConfig"),nIr.forEach(t),FVe=r(c8e," (RetriBERT model)"),c8e.forEach(t),vVe=i(v),mg=n(v,"LI",{});var f8e=s(mg);BK=n(f8e,"STRONG",{});var sIr=s(BK);TVe=r(sIr,"roberta"),sIr.forEach(t),MVe=r(f8e," \u2014 "),Qx=n(f8e,"A",{href:!0});var lIr=s(Qx);EVe=r(lIr,"RobertaConfig"),lIr.forEach(t),CVe=r(f8e," (RoBERTa model)"),f8e.forEach(t),wVe=i(v),gg=n(v,"LI",{});var m8e=s(gg);PK=n(m8e,"STRONG",{});var iIr=s(PK);AVe=r(iIr,"roformer"),iIr.forEach(t),yVe=r(m8e," \u2014 "),Wx=n(m8e,"A",{href:!0});var dIr=s(Wx);LVe=r(dIr,"RoFormerConfig"),dIr.forEach(t),xVe=r(m8e," (RoFormer model)"),m8e.forEach(t),kVe=i(v),hg=n(v,"LI",{});var g8e=s(hg);$K=n(g8e,"STRONG",{});var cIr=s($K);SVe=r(cIr,"segformer"),cIr.forEach(t),RVe=r(g8e," \u2014 "),Hx=n(g8e,"A",{href:!0});var fIr=s(Hx);BVe=r(fIr,"SegformerConfig"),fIr.forEach(t),PVe=r(g8e," (SegFormer model)"),g8e.forEach(t),$Ve=i(v),pg=n(v,"LI",{});var h8e=s(pg);qK=n(h8e,"STRONG",{});var mIr=s(qK);qVe=r(mIr,"sew"),mIr.forEach(t),IVe=r(h8e," \u2014 "),Ux=n(h8e,"A",{href:!0});var gIr=s(Ux);jVe=r(gIr,"SEWConfig"),gIr.forEach(t),NVe=r(h8e," (SEW model)"),h8e.forEach(t),DVe=i(v),_g=n(v,"LI",{});var p8e=s(_g);IK=n(p8e,"STRONG",{});var hIr=s(IK);GVe=r(hIr,"sew-d"),hIr.forEach(t),OVe=r(p8e," \u2014 "),Jx=n(p8e,"A",{href:!0});var pIr=s(Jx);VVe=r(pIr,"SEWDConfig"),pIr.forEach(t),XVe=r(p8e," (SEW-D model)"),p8e.forEach(t),zVe=i(v),ug=n(v,"LI",{});var _8e=s(ug);jK=n(_8e,"STRONG",{});var _Ir=s(jK);QVe=r(_Ir,"speech-encoder-decoder"),_Ir.forEach(t),WVe=r(_8e," \u2014 "),Yx=n(_8e,"A",{href:!0});var uIr=s(Yx);HVe=r(uIr,"SpeechEncoderDecoderConfig"),uIr.forEach(t),UVe=r(_8e," (Speech Encoder decoder model)"),_8e.forEach(t),JVe=i(v),bg=n(v,"LI",{});var u8e=s(bg);NK=n(u8e,"STRONG",{});var bIr=s(NK);YVe=r(bIr,"speech_to_text"),bIr.forEach(t),KVe=r(u8e," \u2014 "),Kx=n(u8e,"A",{href:!0});var FIr=s(Kx);ZVe=r(FIr,"Speech2TextConfig"),FIr.forEach(t),eXe=r(u8e," (Speech2Text model)"),u8e.forEach(t),oXe=i(v),Fg=n(v,"LI",{});var b8e=s(Fg);DK=n(b8e,"STRONG",{});var vIr=s(DK);rXe=r(vIr,"speech_to_text_2"),vIr.forEach(t),tXe=r(b8e," \u2014 "),Zx=n(b8e,"A",{href:!0});var TIr=s(Zx);aXe=r(TIr,"Speech2Text2Config"),TIr.forEach(t),nXe=r(b8e," (Speech2Text2 model)"),b8e.forEach(t),sXe=i(v),vg=n(v,"LI",{});var F8e=s(vg);GK=n(F8e,"STRONG",{});var MIr=s(GK);lXe=r(MIr,"splinter"),MIr.forEach(t),iXe=r(F8e," \u2014 "),ek=n(F8e,"A",{href:!0});var EIr=s(ek);dXe=r(EIr,"SplinterConfig"),EIr.forEach(t),cXe=r(F8e," (Splinter model)"),F8e.forEach(t),fXe=i(v),Tg=n(v,"LI",{});var v8e=s(Tg);OK=n(v8e,"STRONG",{});var CIr=s(OK);mXe=r(CIr,"squeezebert"),CIr.forEach(t),gXe=r(v8e," \u2014 "),ok=n(v8e,"A",{href:!0});var wIr=s(ok);hXe=r(wIr,"SqueezeBertConfig"),wIr.forEach(t),pXe=r(v8e," (SqueezeBERT model)"),v8e.forEach(t),_Xe=i(v),Mg=n(v,"LI",{});var T8e=s(Mg);VK=n(T8e,"STRONG",{});var AIr=s(VK);uXe=r(AIr,"swin"),AIr.forEach(t),bXe=r(T8e," \u2014 "),rk=n(T8e,"A",{href:!0});var yIr=s(rk);FXe=r(yIr,"SwinConfig"),yIr.forEach(t),vXe=r(T8e," (Swin model)"),T8e.forEach(t),TXe=i(v),Eg=n(v,"LI",{});var M8e=s(Eg);XK=n(M8e,"STRONG",{});var LIr=s(XK);MXe=r(LIr,"t5"),LIr.forEach(t),EXe=r(M8e," \u2014 "),tk=n(M8e,"A",{href:!0});var xIr=s(tk);CXe=r(xIr,"T5Config"),xIr.forEach(t),wXe=r(M8e," (T5 model)"),M8e.forEach(t),AXe=i(v),Cg=n(v,"LI",{});var E8e=s(Cg);zK=n(E8e,"STRONG",{});var kIr=s(zK);yXe=r(kIr,"tapas"),kIr.forEach(t),LXe=r(E8e," \u2014 "),ak=n(E8e,"A",{href:!0});var SIr=s(ak);xXe=r(SIr,"TapasConfig"),SIr.forEach(t),kXe=r(E8e," (TAPAS model)"),E8e.forEach(t),SXe=i(v),wg=n(v,"LI",{});var C8e=s(wg);QK=n(C8e,"STRONG",{});var RIr=s(QK);RXe=r(RIr,"transfo-xl"),RIr.forEach(t),BXe=r(C8e," \u2014 "),nk=n(C8e,"A",{href:!0});var BIr=s(nk);PXe=r(BIr,"TransfoXLConfig"),BIr.forEach(t),$Xe=r(C8e," (Transformer-XL model)"),C8e.forEach(t),qXe=i(v),Ag=n(v,"LI",{});var w8e=s(Ag);WK=n(w8e,"STRONG",{});var PIr=s(WK);IXe=r(PIr,"trocr"),PIr.forEach(t),jXe=r(w8e," \u2014 "),sk=n(w8e,"A",{href:!0});var $Ir=s(sk);NXe=r($Ir,"TrOCRConfig"),$Ir.forEach(t),DXe=r(w8e," (TrOCR model)"),w8e.forEach(t),GXe=i(v),yg=n(v,"LI",{});var A8e=s(yg);HK=n(A8e,"STRONG",{});var qIr=s(HK);OXe=r(qIr,"unispeech"),qIr.forEach(t),VXe=r(A8e," \u2014 "),lk=n(A8e,"A",{href:!0});var IIr=s(lk);XXe=r(IIr,"UniSpeechConfig"),IIr.forEach(t),zXe=r(A8e," (UniSpeech model)"),A8e.forEach(t),QXe=i(v),Lg=n(v,"LI",{});var y8e=s(Lg);UK=n(y8e,"STRONG",{});var jIr=s(UK);WXe=r(jIr,"unispeech-sat"),jIr.forEach(t),HXe=r(y8e," \u2014 "),ik=n(y8e,"A",{href:!0});var NIr=s(ik);UXe=r(NIr,"UniSpeechSatConfig"),NIr.forEach(t),JXe=r(y8e," (UniSpeechSat model)"),y8e.forEach(t),YXe=i(v),xg=n(v,"LI",{});var L8e=s(xg);JK=n(L8e,"STRONG",{});var DIr=s(JK);KXe=r(DIr,"van"),DIr.forEach(t),ZXe=r(L8e," \u2014 "),dk=n(L8e,"A",{href:!0});var GIr=s(dk);eze=r(GIr,"VanConfig"),GIr.forEach(t),oze=r(L8e," (VAN model)"),L8e.forEach(t),rze=i(v),kg=n(v,"LI",{});var x8e=s(kg);YK=n(x8e,"STRONG",{});var OIr=s(YK);tze=r(OIr,"vilt"),OIr.forEach(t),aze=r(x8e," \u2014 "),ck=n(x8e,"A",{href:!0});var VIr=s(ck);nze=r(VIr,"ViltConfig"),VIr.forEach(t),sze=r(x8e," (ViLT model)"),x8e.forEach(t),lze=i(v),Sg=n(v,"LI",{});var k8e=s(Sg);KK=n(k8e,"STRONG",{});var XIr=s(KK);ize=r(XIr,"vision-encoder-decoder"),XIr.forEach(t),dze=r(k8e," \u2014 "),fk=n(k8e,"A",{href:!0});var zIr=s(fk);cze=r(zIr,"VisionEncoderDecoderConfig"),zIr.forEach(t),fze=r(k8e," (Vision Encoder decoder model)"),k8e.forEach(t),mze=i(v),Rg=n(v,"LI",{});var S8e=s(Rg);ZK=n(S8e,"STRONG",{});var QIr=s(ZK);gze=r(QIr,"vision-text-dual-encoder"),QIr.forEach(t),hze=r(S8e," \u2014 "),mk=n(S8e,"A",{href:!0});var WIr=s(mk);pze=r(WIr,"VisionTextDualEncoderConfig"),WIr.forEach(t),_ze=r(S8e," (VisionTextDualEncoder model)"),S8e.forEach(t),uze=i(v),Bg=n(v,"LI",{});var R8e=s(Bg);eZ=n(R8e,"STRONG",{});var HIr=s(eZ);bze=r(HIr,"visual_bert"),HIr.forEach(t),Fze=r(R8e," \u2014 "),gk=n(R8e,"A",{href:!0});var UIr=s(gk);vze=r(UIr,"VisualBertConfig"),UIr.forEach(t),Tze=r(R8e," (VisualBert model)"),R8e.forEach(t),Mze=i(v),Pg=n(v,"LI",{});var B8e=s(Pg);oZ=n(B8e,"STRONG",{});var JIr=s(oZ);Eze=r(JIr,"vit"),JIr.forEach(t),Cze=r(B8e," \u2014 "),hk=n(B8e,"A",{href:!0});var YIr=s(hk);wze=r(YIr,"ViTConfig"),YIr.forEach(t),Aze=r(B8e," (ViT model)"),B8e.forEach(t),yze=i(v),$g=n(v,"LI",{});var P8e=s($g);rZ=n(P8e,"STRONG",{});var KIr=s(rZ);Lze=r(KIr,"vit_mae"),KIr.forEach(t),xze=r(P8e," \u2014 "),pk=n(P8e,"A",{href:!0});var ZIr=s(pk);kze=r(ZIr,"ViTMAEConfig"),ZIr.forEach(t),Sze=r(P8e," (ViTMAE model)"),P8e.forEach(t),Rze=i(v),qg=n(v,"LI",{});var $8e=s(qg);tZ=n($8e,"STRONG",{});var ejr=s(tZ);Bze=r(ejr,"wav2vec2"),ejr.forEach(t),Pze=r($8e," \u2014 "),_k=n($8e,"A",{href:!0});var ojr=s(_k);$ze=r(ojr,"Wav2Vec2Config"),ojr.forEach(t),qze=r($8e," (Wav2Vec2 model)"),$8e.forEach(t),Ize=i(v),Ig=n(v,"LI",{});var q8e=s(Ig);aZ=n(q8e,"STRONG",{});var rjr=s(aZ);jze=r(rjr,"wavlm"),rjr.forEach(t),Nze=r(q8e," \u2014 "),uk=n(q8e,"A",{href:!0});var tjr=s(uk);Dze=r(tjr,"WavLMConfig"),tjr.forEach(t),Gze=r(q8e," (WavLM model)"),q8e.forEach(t),Oze=i(v),jg=n(v,"LI",{});var I8e=s(jg);nZ=n(I8e,"STRONG",{});var ajr=s(nZ);Vze=r(ajr,"xglm"),ajr.forEach(t),Xze=r(I8e," \u2014 "),bk=n(I8e,"A",{href:!0});var njr=s(bk);zze=r(njr,"XGLMConfig"),njr.forEach(t),Qze=r(I8e," (XGLM model)"),I8e.forEach(t),Wze=i(v),Ng=n(v,"LI",{});var j8e=s(Ng);sZ=n(j8e,"STRONG",{});var sjr=s(sZ);Hze=r(sjr,"xlm"),sjr.forEach(t),Uze=r(j8e," \u2014 "),Fk=n(j8e,"A",{href:!0});var ljr=s(Fk);Jze=r(ljr,"XLMConfig"),ljr.forEach(t),Yze=r(j8e," (XLM model)"),j8e.forEach(t),Kze=i(v),Dg=n(v,"LI",{});var N8e=s(Dg);lZ=n(N8e,"STRONG",{});var ijr=s(lZ);Zze=r(ijr,"xlm-prophetnet"),ijr.forEach(t),eQe=r(N8e," \u2014 "),vk=n(N8e,"A",{href:!0});var djr=s(vk);oQe=r(djr,"XLMProphetNetConfig"),djr.forEach(t),rQe=r(N8e," (XLMProphetNet model)"),N8e.forEach(t),tQe=i(v),Gg=n(v,"LI",{});var D8e=s(Gg);iZ=n(D8e,"STRONG",{});var cjr=s(iZ);aQe=r(cjr,"xlm-roberta"),cjr.forEach(t),nQe=r(D8e," \u2014 "),Tk=n(D8e,"A",{href:!0});var fjr=s(Tk);sQe=r(fjr,"XLMRobertaConfig"),fjr.forEach(t),lQe=r(D8e," (XLM-RoBERTa model)"),D8e.forEach(t),iQe=i(v),Og=n(v,"LI",{});var G8e=s(Og);dZ=n(G8e,"STRONG",{});var mjr=s(dZ);dQe=r(mjr,"xlm-roberta-xl"),mjr.forEach(t),cQe=r(G8e," \u2014 "),Mk=n(G8e,"A",{href:!0});var gjr=s(Mk);fQe=r(gjr,"XLMRobertaXLConfig"),gjr.forEach(t),mQe=r(G8e," (XLM-RoBERTa-XL model)"),G8e.forEach(t),gQe=i(v),Vg=n(v,"LI",{});var O8e=s(Vg);cZ=n(O8e,"STRONG",{});var hjr=s(cZ);hQe=r(hjr,"xlnet"),hjr.forEach(t),pQe=r(O8e," \u2014 "),Ek=n(O8e,"A",{href:!0});var pjr=s(Ek);_Qe=r(pjr,"XLNetConfig"),pjr.forEach(t),uQe=r(O8e," (XLNet model)"),O8e.forEach(t),bQe=i(v),Xg=n(v,"LI",{});var V8e=s(Xg);fZ=n(V8e,"STRONG",{});var _jr=s(fZ);FQe=r(_jr,"yoso"),_jr.forEach(t),vQe=r(V8e," \u2014 "),Ck=n(V8e,"A",{href:!0});var ujr=s(Ck);TQe=r(ujr,"YosoConfig"),ujr.forEach(t),MQe=r(V8e," (YOSO model)"),V8e.forEach(t),v.forEach(t),EQe=i(_a),mZ=n(_a,"P",{});var bjr=s(mZ);CQe=r(bjr,"Examples:"),bjr.forEach(t),wQe=i(_a),m(NE.$$.fragment,_a),_a.forEach(t),AQe=i(Ws),zg=n(Ws,"DIV",{class:!0});var PPe=s(zg);m(DE.$$.fragment,PPe),yQe=i(PPe),gZ=n(PPe,"P",{});var Fjr=s(gZ);LQe=r(Fjr,"Register a new configuration for this class."),Fjr.forEach(t),PPe.forEach(t),Ws.forEach(t),kRe=i(c),Zi=n(c,"H2",{class:!0});var $Pe=s(Zi);Qg=n($Pe,"A",{id:!0,class:!0,href:!0});var vjr=s(Qg);hZ=n(vjr,"SPAN",{});var Tjr=s(hZ);m(GE.$$.fragment,Tjr),Tjr.forEach(t),vjr.forEach(t),xQe=i($Pe),pZ=n($Pe,"SPAN",{});var Mjr=s(pZ);kQe=r(Mjr,"AutoTokenizer"),Mjr.forEach(t),$Pe.forEach(t),SRe=i(c),Ho=n(c,"DIV",{class:!0});var Hs=s(Ho);m(OE.$$.fragment,Hs),SQe=i(Hs),VE=n(Hs,"P",{});var qPe=s(VE);RQe=r(qPe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),wk=n(qPe,"A",{href:!0});var Ejr=s(wk);BQe=r(Ejr,"AutoTokenizer.from_pretrained()"),Ejr.forEach(t),PQe=r(qPe," class method."),qPe.forEach(t),$Qe=i(Hs),XE=n(Hs,"P",{});var IPe=s(XE);qQe=r(IPe,"This class cannot be instantiated directly using "),_Z=n(IPe,"CODE",{});var Cjr=s(_Z);IQe=r(Cjr,"__init__()"),Cjr.forEach(t),jQe=r(IPe," (throws an error)."),IPe.forEach(t),NQe=i(Hs),go=n(Hs,"DIV",{class:!0});var ua=s(go);m(zE.$$.fragment,ua),DQe=i(ua),uZ=n(ua,"P",{});var wjr=s(uZ);GQe=r(wjr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),wjr.forEach(t),OQe=i(ua),Qa=n(ua,"P",{});var x4=s(Qa);VQe=r(x4,"The tokenizer class to instantiate is selected based on the "),bZ=n(x4,"CODE",{});var Ajr=s(bZ);XQe=r(Ajr,"model_type"),Ajr.forEach(t),zQe=r(x4,` property of the config object (either
passed as an argument or loaded from `),FZ=n(x4,"CODE",{});var yjr=s(FZ);QQe=r(yjr,"pretrained_model_name_or_path"),yjr.forEach(t),WQe=r(x4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vZ=n(x4,"CODE",{});var Ljr=s(vZ);HQe=r(Ljr,"pretrained_model_name_or_path"),Ljr.forEach(t),UQe=r(x4,":"),x4.forEach(t),JQe=i(ua),C=n(ua,"UL",{});var w=s(C);Yn=n(w,"LI",{});var S7=s(Yn);TZ=n(S7,"STRONG",{});var xjr=s(TZ);YQe=r(xjr,"albert"),xjr.forEach(t),KQe=r(S7," \u2014 "),Ak=n(S7,"A",{href:!0});var kjr=s(Ak);ZQe=r(kjr,"AlbertTokenizer"),kjr.forEach(t),eWe=r(S7," or "),yk=n(S7,"A",{href:!0});var Sjr=s(yk);oWe=r(Sjr,"AlbertTokenizerFast"),Sjr.forEach(t),rWe=r(S7," (ALBERT model)"),S7.forEach(t),tWe=i(w),Kn=n(w,"LI",{});var R7=s(Kn);MZ=n(R7,"STRONG",{});var Rjr=s(MZ);aWe=r(Rjr,"bart"),Rjr.forEach(t),nWe=r(R7," \u2014 "),Lk=n(R7,"A",{href:!0});var Bjr=s(Lk);sWe=r(Bjr,"BartTokenizer"),Bjr.forEach(t),lWe=r(R7," or "),xk=n(R7,"A",{href:!0});var Pjr=s(xk);iWe=r(Pjr,"BartTokenizerFast"),Pjr.forEach(t),dWe=r(R7," (BART model)"),R7.forEach(t),cWe=i(w),Zn=n(w,"LI",{});var B7=s(Zn);EZ=n(B7,"STRONG",{});var $jr=s(EZ);fWe=r($jr,"barthez"),$jr.forEach(t),mWe=r(B7," \u2014 "),kk=n(B7,"A",{href:!0});var qjr=s(kk);gWe=r(qjr,"BarthezTokenizer"),qjr.forEach(t),hWe=r(B7," or "),Sk=n(B7,"A",{href:!0});var Ijr=s(Sk);pWe=r(Ijr,"BarthezTokenizerFast"),Ijr.forEach(t),_We=r(B7," (BARThez model)"),B7.forEach(t),uWe=i(w),Wg=n(w,"LI",{});var X8e=s(Wg);CZ=n(X8e,"STRONG",{});var jjr=s(CZ);bWe=r(jjr,"bartpho"),jjr.forEach(t),FWe=r(X8e," \u2014 "),Rk=n(X8e,"A",{href:!0});var Njr=s(Rk);vWe=r(Njr,"BartphoTokenizer"),Njr.forEach(t),TWe=r(X8e," (BARTpho model)"),X8e.forEach(t),MWe=i(w),es=n(w,"LI",{});var P7=s(es);wZ=n(P7,"STRONG",{});var Djr=s(wZ);EWe=r(Djr,"bert"),Djr.forEach(t),CWe=r(P7," \u2014 "),Bk=n(P7,"A",{href:!0});var Gjr=s(Bk);wWe=r(Gjr,"BertTokenizer"),Gjr.forEach(t),AWe=r(P7," or "),Pk=n(P7,"A",{href:!0});var Ojr=s(Pk);yWe=r(Ojr,"BertTokenizerFast"),Ojr.forEach(t),LWe=r(P7," (BERT model)"),P7.forEach(t),xWe=i(w),Hg=n(w,"LI",{});var z8e=s(Hg);AZ=n(z8e,"STRONG",{});var Vjr=s(AZ);kWe=r(Vjr,"bert-generation"),Vjr.forEach(t),SWe=r(z8e," \u2014 "),$k=n(z8e,"A",{href:!0});var Xjr=s($k);RWe=r(Xjr,"BertGenerationTokenizer"),Xjr.forEach(t),BWe=r(z8e," (Bert Generation model)"),z8e.forEach(t),PWe=i(w),Ug=n(w,"LI",{});var Q8e=s(Ug);yZ=n(Q8e,"STRONG",{});var zjr=s(yZ);$We=r(zjr,"bert-japanese"),zjr.forEach(t),qWe=r(Q8e," \u2014 "),qk=n(Q8e,"A",{href:!0});var Qjr=s(qk);IWe=r(Qjr,"BertJapaneseTokenizer"),Qjr.forEach(t),jWe=r(Q8e," (BertJapanese model)"),Q8e.forEach(t),NWe=i(w),Jg=n(w,"LI",{});var W8e=s(Jg);LZ=n(W8e,"STRONG",{});var Wjr=s(LZ);DWe=r(Wjr,"bertweet"),Wjr.forEach(t),GWe=r(W8e," \u2014 "),Ik=n(W8e,"A",{href:!0});var Hjr=s(Ik);OWe=r(Hjr,"BertweetTokenizer"),Hjr.forEach(t),VWe=r(W8e," (Bertweet model)"),W8e.forEach(t),XWe=i(w),os=n(w,"LI",{});var $7=s(os);xZ=n($7,"STRONG",{});var Ujr=s(xZ);zWe=r(Ujr,"big_bird"),Ujr.forEach(t),QWe=r($7," \u2014 "),jk=n($7,"A",{href:!0});var Jjr=s(jk);WWe=r(Jjr,"BigBirdTokenizer"),Jjr.forEach(t),HWe=r($7," or "),Nk=n($7,"A",{href:!0});var Yjr=s(Nk);UWe=r(Yjr,"BigBirdTokenizerFast"),Yjr.forEach(t),JWe=r($7," (BigBird model)"),$7.forEach(t),YWe=i(w),rs=n(w,"LI",{});var q7=s(rs);kZ=n(q7,"STRONG",{});var Kjr=s(kZ);KWe=r(Kjr,"bigbird_pegasus"),Kjr.forEach(t),ZWe=r(q7," \u2014 "),Dk=n(q7,"A",{href:!0});var Zjr=s(Dk);eHe=r(Zjr,"PegasusTokenizer"),Zjr.forEach(t),oHe=r(q7," or "),Gk=n(q7,"A",{href:!0});var eNr=s(Gk);rHe=r(eNr,"PegasusTokenizerFast"),eNr.forEach(t),tHe=r(q7," (BigBirdPegasus model)"),q7.forEach(t),aHe=i(w),ts=n(w,"LI",{});var I7=s(ts);SZ=n(I7,"STRONG",{});var oNr=s(SZ);nHe=r(oNr,"blenderbot"),oNr.forEach(t),sHe=r(I7," \u2014 "),Ok=n(I7,"A",{href:!0});var rNr=s(Ok);lHe=r(rNr,"BlenderbotTokenizer"),rNr.forEach(t),iHe=r(I7," or "),Vk=n(I7,"A",{href:!0});var tNr=s(Vk);dHe=r(tNr,"BlenderbotTokenizerFast"),tNr.forEach(t),cHe=r(I7," (Blenderbot model)"),I7.forEach(t),fHe=i(w),Yg=n(w,"LI",{});var H8e=s(Yg);RZ=n(H8e,"STRONG",{});var aNr=s(RZ);mHe=r(aNr,"blenderbot-small"),aNr.forEach(t),gHe=r(H8e," \u2014 "),Xk=n(H8e,"A",{href:!0});var nNr=s(Xk);hHe=r(nNr,"BlenderbotSmallTokenizer"),nNr.forEach(t),pHe=r(H8e," (BlenderbotSmall model)"),H8e.forEach(t),_He=i(w),Kg=n(w,"LI",{});var U8e=s(Kg);BZ=n(U8e,"STRONG",{});var sNr=s(BZ);uHe=r(sNr,"byt5"),sNr.forEach(t),bHe=r(U8e," \u2014 "),zk=n(U8e,"A",{href:!0});var lNr=s(zk);FHe=r(lNr,"ByT5Tokenizer"),lNr.forEach(t),vHe=r(U8e," (ByT5 model)"),U8e.forEach(t),THe=i(w),as=n(w,"LI",{});var j7=s(as);PZ=n(j7,"STRONG",{});var iNr=s(PZ);MHe=r(iNr,"camembert"),iNr.forEach(t),EHe=r(j7," \u2014 "),Qk=n(j7,"A",{href:!0});var dNr=s(Qk);CHe=r(dNr,"CamembertTokenizer"),dNr.forEach(t),wHe=r(j7," or "),Wk=n(j7,"A",{href:!0});var cNr=s(Wk);AHe=r(cNr,"CamembertTokenizerFast"),cNr.forEach(t),yHe=r(j7," (CamemBERT model)"),j7.forEach(t),LHe=i(w),Zg=n(w,"LI",{});var J8e=s(Zg);$Z=n(J8e,"STRONG",{});var fNr=s($Z);xHe=r(fNr,"canine"),fNr.forEach(t),kHe=r(J8e," \u2014 "),Hk=n(J8e,"A",{href:!0});var mNr=s(Hk);SHe=r(mNr,"CanineTokenizer"),mNr.forEach(t),RHe=r(J8e," (Canine model)"),J8e.forEach(t),BHe=i(w),ns=n(w,"LI",{});var N7=s(ns);qZ=n(N7,"STRONG",{});var gNr=s(qZ);PHe=r(gNr,"clip"),gNr.forEach(t),$He=r(N7," \u2014 "),Uk=n(N7,"A",{href:!0});var hNr=s(Uk);qHe=r(hNr,"CLIPTokenizer"),hNr.forEach(t),IHe=r(N7," or "),Jk=n(N7,"A",{href:!0});var pNr=s(Jk);jHe=r(pNr,"CLIPTokenizerFast"),pNr.forEach(t),NHe=r(N7," (CLIP model)"),N7.forEach(t),DHe=i(w),ss=n(w,"LI",{});var D7=s(ss);IZ=n(D7,"STRONG",{});var _Nr=s(IZ);GHe=r(_Nr,"convbert"),_Nr.forEach(t),OHe=r(D7," \u2014 "),Yk=n(D7,"A",{href:!0});var uNr=s(Yk);VHe=r(uNr,"ConvBertTokenizer"),uNr.forEach(t),XHe=r(D7," or "),Kk=n(D7,"A",{href:!0});var bNr=s(Kk);zHe=r(bNr,"ConvBertTokenizerFast"),bNr.forEach(t),QHe=r(D7," (ConvBERT model)"),D7.forEach(t),WHe=i(w),ls=n(w,"LI",{});var G7=s(ls);jZ=n(G7,"STRONG",{});var FNr=s(jZ);HHe=r(FNr,"cpm"),FNr.forEach(t),UHe=r(G7," \u2014 "),Zk=n(G7,"A",{href:!0});var vNr=s(Zk);JHe=r(vNr,"CpmTokenizer"),vNr.forEach(t),YHe=r(G7," or "),NZ=n(G7,"CODE",{});var TNr=s(NZ);KHe=r(TNr,"CpmTokenizerFast"),TNr.forEach(t),ZHe=r(G7," (CPM model)"),G7.forEach(t),eUe=i(w),eh=n(w,"LI",{});var Y8e=s(eh);DZ=n(Y8e,"STRONG",{});var MNr=s(DZ);oUe=r(MNr,"ctrl"),MNr.forEach(t),rUe=r(Y8e," \u2014 "),eS=n(Y8e,"A",{href:!0});var ENr=s(eS);tUe=r(ENr,"CTRLTokenizer"),ENr.forEach(t),aUe=r(Y8e," (CTRL model)"),Y8e.forEach(t),nUe=i(w),is=n(w,"LI",{});var O7=s(is);GZ=n(O7,"STRONG",{});var CNr=s(GZ);sUe=r(CNr,"deberta"),CNr.forEach(t),lUe=r(O7," \u2014 "),oS=n(O7,"A",{href:!0});var wNr=s(oS);iUe=r(wNr,"DebertaTokenizer"),wNr.forEach(t),dUe=r(O7," or "),rS=n(O7,"A",{href:!0});var ANr=s(rS);cUe=r(ANr,"DebertaTokenizerFast"),ANr.forEach(t),fUe=r(O7," (DeBERTa model)"),O7.forEach(t),mUe=i(w),oh=n(w,"LI",{});var K8e=s(oh);OZ=n(K8e,"STRONG",{});var yNr=s(OZ);gUe=r(yNr,"deberta-v2"),yNr.forEach(t),hUe=r(K8e," \u2014 "),tS=n(K8e,"A",{href:!0});var LNr=s(tS);pUe=r(LNr,"DebertaV2Tokenizer"),LNr.forEach(t),_Ue=r(K8e," (DeBERTa-v2 model)"),K8e.forEach(t),uUe=i(w),ds=n(w,"LI",{});var V7=s(ds);VZ=n(V7,"STRONG",{});var xNr=s(VZ);bUe=r(xNr,"distilbert"),xNr.forEach(t),FUe=r(V7," \u2014 "),aS=n(V7,"A",{href:!0});var kNr=s(aS);vUe=r(kNr,"DistilBertTokenizer"),kNr.forEach(t),TUe=r(V7," or "),nS=n(V7,"A",{href:!0});var SNr=s(nS);MUe=r(SNr,"DistilBertTokenizerFast"),SNr.forEach(t),EUe=r(V7," (DistilBERT model)"),V7.forEach(t),CUe=i(w),cs=n(w,"LI",{});var X7=s(cs);XZ=n(X7,"STRONG",{});var RNr=s(XZ);wUe=r(RNr,"dpr"),RNr.forEach(t),AUe=r(X7," \u2014 "),sS=n(X7,"A",{href:!0});var BNr=s(sS);yUe=r(BNr,"DPRQuestionEncoderTokenizer"),BNr.forEach(t),LUe=r(X7," or "),lS=n(X7,"A",{href:!0});var PNr=s(lS);xUe=r(PNr,"DPRQuestionEncoderTokenizerFast"),PNr.forEach(t),kUe=r(X7," (DPR model)"),X7.forEach(t),SUe=i(w),fs=n(w,"LI",{});var z7=s(fs);zZ=n(z7,"STRONG",{});var $Nr=s(zZ);RUe=r($Nr,"electra"),$Nr.forEach(t),BUe=r(z7," \u2014 "),iS=n(z7,"A",{href:!0});var qNr=s(iS);PUe=r(qNr,"ElectraTokenizer"),qNr.forEach(t),$Ue=r(z7," or "),dS=n(z7,"A",{href:!0});var INr=s(dS);qUe=r(INr,"ElectraTokenizerFast"),INr.forEach(t),IUe=r(z7," (ELECTRA model)"),z7.forEach(t),jUe=i(w),rh=n(w,"LI",{});var Z8e=s(rh);QZ=n(Z8e,"STRONG",{});var jNr=s(QZ);NUe=r(jNr,"flaubert"),jNr.forEach(t),DUe=r(Z8e," \u2014 "),cS=n(Z8e,"A",{href:!0});var NNr=s(cS);GUe=r(NNr,"FlaubertTokenizer"),NNr.forEach(t),OUe=r(Z8e," (FlauBERT model)"),Z8e.forEach(t),VUe=i(w),ms=n(w,"LI",{});var Q7=s(ms);WZ=n(Q7,"STRONG",{});var DNr=s(WZ);XUe=r(DNr,"fnet"),DNr.forEach(t),zUe=r(Q7," \u2014 "),fS=n(Q7,"A",{href:!0});var GNr=s(fS);QUe=r(GNr,"FNetTokenizer"),GNr.forEach(t),WUe=r(Q7," or "),mS=n(Q7,"A",{href:!0});var ONr=s(mS);HUe=r(ONr,"FNetTokenizerFast"),ONr.forEach(t),UUe=r(Q7," (FNet model)"),Q7.forEach(t),JUe=i(w),th=n(w,"LI",{});var eMe=s(th);HZ=n(eMe,"STRONG",{});var VNr=s(HZ);YUe=r(VNr,"fsmt"),VNr.forEach(t),KUe=r(eMe," \u2014 "),gS=n(eMe,"A",{href:!0});var XNr=s(gS);ZUe=r(XNr,"FSMTTokenizer"),XNr.forEach(t),eJe=r(eMe," (FairSeq Machine-Translation model)"),eMe.forEach(t),oJe=i(w),gs=n(w,"LI",{});var W7=s(gs);UZ=n(W7,"STRONG",{});var zNr=s(UZ);rJe=r(zNr,"funnel"),zNr.forEach(t),tJe=r(W7," \u2014 "),hS=n(W7,"A",{href:!0});var QNr=s(hS);aJe=r(QNr,"FunnelTokenizer"),QNr.forEach(t),nJe=r(W7," or "),pS=n(W7,"A",{href:!0});var WNr=s(pS);sJe=r(WNr,"FunnelTokenizerFast"),WNr.forEach(t),lJe=r(W7," (Funnel Transformer model)"),W7.forEach(t),iJe=i(w),hs=n(w,"LI",{});var H7=s(hs);JZ=n(H7,"STRONG",{});var HNr=s(JZ);dJe=r(HNr,"gpt2"),HNr.forEach(t),cJe=r(H7," \u2014 "),_S=n(H7,"A",{href:!0});var UNr=s(_S);fJe=r(UNr,"GPT2Tokenizer"),UNr.forEach(t),mJe=r(H7," or "),uS=n(H7,"A",{href:!0});var JNr=s(uS);gJe=r(JNr,"GPT2TokenizerFast"),JNr.forEach(t),hJe=r(H7," (OpenAI GPT-2 model)"),H7.forEach(t),pJe=i(w),ps=n(w,"LI",{});var U7=s(ps);YZ=n(U7,"STRONG",{});var YNr=s(YZ);_Je=r(YNr,"gpt_neo"),YNr.forEach(t),uJe=r(U7," \u2014 "),bS=n(U7,"A",{href:!0});var KNr=s(bS);bJe=r(KNr,"GPT2Tokenizer"),KNr.forEach(t),FJe=r(U7," or "),FS=n(U7,"A",{href:!0});var ZNr=s(FS);vJe=r(ZNr,"GPT2TokenizerFast"),ZNr.forEach(t),TJe=r(U7," (GPT Neo model)"),U7.forEach(t),MJe=i(w),_s=n(w,"LI",{});var J7=s(_s);KZ=n(J7,"STRONG",{});var eDr=s(KZ);EJe=r(eDr,"herbert"),eDr.forEach(t),CJe=r(J7," \u2014 "),vS=n(J7,"A",{href:!0});var oDr=s(vS);wJe=r(oDr,"HerbertTokenizer"),oDr.forEach(t),AJe=r(J7," or "),TS=n(J7,"A",{href:!0});var rDr=s(TS);yJe=r(rDr,"HerbertTokenizerFast"),rDr.forEach(t),LJe=r(J7," (HerBERT model)"),J7.forEach(t),xJe=i(w),ah=n(w,"LI",{});var oMe=s(ah);ZZ=n(oMe,"STRONG",{});var tDr=s(ZZ);kJe=r(tDr,"hubert"),tDr.forEach(t),SJe=r(oMe," \u2014 "),MS=n(oMe,"A",{href:!0});var aDr=s(MS);RJe=r(aDr,"Wav2Vec2CTCTokenizer"),aDr.forEach(t),BJe=r(oMe," (Hubert model)"),oMe.forEach(t),PJe=i(w),us=n(w,"LI",{});var Y7=s(us);eee=n(Y7,"STRONG",{});var nDr=s(eee);$Je=r(nDr,"ibert"),nDr.forEach(t),qJe=r(Y7," \u2014 "),ES=n(Y7,"A",{href:!0});var sDr=s(ES);IJe=r(sDr,"RobertaTokenizer"),sDr.forEach(t),jJe=r(Y7," or "),CS=n(Y7,"A",{href:!0});var lDr=s(CS);NJe=r(lDr,"RobertaTokenizerFast"),lDr.forEach(t),DJe=r(Y7," (I-BERT model)"),Y7.forEach(t),GJe=i(w),bs=n(w,"LI",{});var K7=s(bs);oee=n(K7,"STRONG",{});var iDr=s(oee);OJe=r(iDr,"layoutlm"),iDr.forEach(t),VJe=r(K7," \u2014 "),wS=n(K7,"A",{href:!0});var dDr=s(wS);XJe=r(dDr,"LayoutLMTokenizer"),dDr.forEach(t),zJe=r(K7," or "),AS=n(K7,"A",{href:!0});var cDr=s(AS);QJe=r(cDr,"LayoutLMTokenizerFast"),cDr.forEach(t),WJe=r(K7," (LayoutLM model)"),K7.forEach(t),HJe=i(w),Fs=n(w,"LI",{});var Z7=s(Fs);ree=n(Z7,"STRONG",{});var fDr=s(ree);UJe=r(fDr,"layoutlmv2"),fDr.forEach(t),JJe=r(Z7," \u2014 "),yS=n(Z7,"A",{href:!0});var mDr=s(yS);YJe=r(mDr,"LayoutLMv2Tokenizer"),mDr.forEach(t),KJe=r(Z7," or "),LS=n(Z7,"A",{href:!0});var gDr=s(LS);ZJe=r(gDr,"LayoutLMv2TokenizerFast"),gDr.forEach(t),eYe=r(Z7," (LayoutLMv2 model)"),Z7.forEach(t),oYe=i(w),vs=n(w,"LI",{});var e9=s(vs);tee=n(e9,"STRONG",{});var hDr=s(tee);rYe=r(hDr,"layoutxlm"),hDr.forEach(t),tYe=r(e9," \u2014 "),xS=n(e9,"A",{href:!0});var pDr=s(xS);aYe=r(pDr,"LayoutXLMTokenizer"),pDr.forEach(t),nYe=r(e9," or "),kS=n(e9,"A",{href:!0});var _Dr=s(kS);sYe=r(_Dr,"LayoutXLMTokenizerFast"),_Dr.forEach(t),lYe=r(e9," (LayoutXLM model)"),e9.forEach(t),iYe=i(w),Ts=n(w,"LI",{});var o9=s(Ts);aee=n(o9,"STRONG",{});var uDr=s(aee);dYe=r(uDr,"led"),uDr.forEach(t),cYe=r(o9," \u2014 "),SS=n(o9,"A",{href:!0});var bDr=s(SS);fYe=r(bDr,"LEDTokenizer"),bDr.forEach(t),mYe=r(o9," or "),RS=n(o9,"A",{href:!0});var FDr=s(RS);gYe=r(FDr,"LEDTokenizerFast"),FDr.forEach(t),hYe=r(o9," (LED model)"),o9.forEach(t),pYe=i(w),Ms=n(w,"LI",{});var r9=s(Ms);nee=n(r9,"STRONG",{});var vDr=s(nee);_Ye=r(vDr,"longformer"),vDr.forEach(t),uYe=r(r9," \u2014 "),BS=n(r9,"A",{href:!0});var TDr=s(BS);bYe=r(TDr,"LongformerTokenizer"),TDr.forEach(t),FYe=r(r9," or "),PS=n(r9,"A",{href:!0});var MDr=s(PS);vYe=r(MDr,"LongformerTokenizerFast"),MDr.forEach(t),TYe=r(r9," (Longformer model)"),r9.forEach(t),MYe=i(w),nh=n(w,"LI",{});var rMe=s(nh);see=n(rMe,"STRONG",{});var EDr=s(see);EYe=r(EDr,"luke"),EDr.forEach(t),CYe=r(rMe," \u2014 "),$S=n(rMe,"A",{href:!0});var CDr=s($S);wYe=r(CDr,"LukeTokenizer"),CDr.forEach(t),AYe=r(rMe," (LUKE model)"),rMe.forEach(t),yYe=i(w),Es=n(w,"LI",{});var t9=s(Es);lee=n(t9,"STRONG",{});var wDr=s(lee);LYe=r(wDr,"lxmert"),wDr.forEach(t),xYe=r(t9," \u2014 "),qS=n(t9,"A",{href:!0});var ADr=s(qS);kYe=r(ADr,"LxmertTokenizer"),ADr.forEach(t),SYe=r(t9," or "),IS=n(t9,"A",{href:!0});var yDr=s(IS);RYe=r(yDr,"LxmertTokenizerFast"),yDr.forEach(t),BYe=r(t9," (LXMERT model)"),t9.forEach(t),PYe=i(w),sh=n(w,"LI",{});var tMe=s(sh);iee=n(tMe,"STRONG",{});var LDr=s(iee);$Ye=r(LDr,"m2m_100"),LDr.forEach(t),qYe=r(tMe," \u2014 "),jS=n(tMe,"A",{href:!0});var xDr=s(jS);IYe=r(xDr,"M2M100Tokenizer"),xDr.forEach(t),jYe=r(tMe," (M2M100 model)"),tMe.forEach(t),NYe=i(w),lh=n(w,"LI",{});var aMe=s(lh);dee=n(aMe,"STRONG",{});var kDr=s(dee);DYe=r(kDr,"marian"),kDr.forEach(t),GYe=r(aMe," \u2014 "),NS=n(aMe,"A",{href:!0});var SDr=s(NS);OYe=r(SDr,"MarianTokenizer"),SDr.forEach(t),VYe=r(aMe," (Marian model)"),aMe.forEach(t),XYe=i(w),Cs=n(w,"LI",{});var a9=s(Cs);cee=n(a9,"STRONG",{});var RDr=s(cee);zYe=r(RDr,"mbart"),RDr.forEach(t),QYe=r(a9," \u2014 "),DS=n(a9,"A",{href:!0});var BDr=s(DS);WYe=r(BDr,"MBartTokenizer"),BDr.forEach(t),HYe=r(a9," or "),GS=n(a9,"A",{href:!0});var PDr=s(GS);UYe=r(PDr,"MBartTokenizerFast"),PDr.forEach(t),JYe=r(a9," (mBART model)"),a9.forEach(t),YYe=i(w),ws=n(w,"LI",{});var n9=s(ws);fee=n(n9,"STRONG",{});var $Dr=s(fee);KYe=r($Dr,"mbart50"),$Dr.forEach(t),ZYe=r(n9," \u2014 "),OS=n(n9,"A",{href:!0});var qDr=s(OS);eKe=r(qDr,"MBart50Tokenizer"),qDr.forEach(t),oKe=r(n9," or "),VS=n(n9,"A",{href:!0});var IDr=s(VS);rKe=r(IDr,"MBart50TokenizerFast"),IDr.forEach(t),tKe=r(n9," (mBART-50 model)"),n9.forEach(t),aKe=i(w),ih=n(w,"LI",{});var nMe=s(ih);mee=n(nMe,"STRONG",{});var jDr=s(mee);nKe=r(jDr,"mluke"),jDr.forEach(t),sKe=r(nMe," \u2014 "),XS=n(nMe,"A",{href:!0});var NDr=s(XS);lKe=r(NDr,"MLukeTokenizer"),NDr.forEach(t),iKe=r(nMe," (mLUKE model)"),nMe.forEach(t),dKe=i(w),As=n(w,"LI",{});var s9=s(As);gee=n(s9,"STRONG",{});var DDr=s(gee);cKe=r(DDr,"mobilebert"),DDr.forEach(t),fKe=r(s9," \u2014 "),zS=n(s9,"A",{href:!0});var GDr=s(zS);mKe=r(GDr,"MobileBertTokenizer"),GDr.forEach(t),gKe=r(s9," or "),QS=n(s9,"A",{href:!0});var ODr=s(QS);hKe=r(ODr,"MobileBertTokenizerFast"),ODr.forEach(t),pKe=r(s9," (MobileBERT model)"),s9.forEach(t),_Ke=i(w),ys=n(w,"LI",{});var l9=s(ys);hee=n(l9,"STRONG",{});var VDr=s(hee);uKe=r(VDr,"mpnet"),VDr.forEach(t),bKe=r(l9," \u2014 "),WS=n(l9,"A",{href:!0});var XDr=s(WS);FKe=r(XDr,"MPNetTokenizer"),XDr.forEach(t),vKe=r(l9," or "),HS=n(l9,"A",{href:!0});var zDr=s(HS);TKe=r(zDr,"MPNetTokenizerFast"),zDr.forEach(t),MKe=r(l9," (MPNet model)"),l9.forEach(t),EKe=i(w),Ls=n(w,"LI",{});var i9=s(Ls);pee=n(i9,"STRONG",{});var QDr=s(pee);CKe=r(QDr,"mt5"),QDr.forEach(t),wKe=r(i9," \u2014 "),US=n(i9,"A",{href:!0});var WDr=s(US);AKe=r(WDr,"MT5Tokenizer"),WDr.forEach(t),yKe=r(i9," or "),JS=n(i9,"A",{href:!0});var HDr=s(JS);LKe=r(HDr,"MT5TokenizerFast"),HDr.forEach(t),xKe=r(i9," (mT5 model)"),i9.forEach(t),kKe=i(w),xs=n(w,"LI",{});var d9=s(xs);_ee=n(d9,"STRONG",{});var UDr=s(_ee);SKe=r(UDr,"openai-gpt"),UDr.forEach(t),RKe=r(d9," \u2014 "),YS=n(d9,"A",{href:!0});var JDr=s(YS);BKe=r(JDr,"OpenAIGPTTokenizer"),JDr.forEach(t),PKe=r(d9," or "),KS=n(d9,"A",{href:!0});var YDr=s(KS);$Ke=r(YDr,"OpenAIGPTTokenizerFast"),YDr.forEach(t),qKe=r(d9," (OpenAI GPT model)"),d9.forEach(t),IKe=i(w),ks=n(w,"LI",{});var c9=s(ks);uee=n(c9,"STRONG",{});var KDr=s(uee);jKe=r(KDr,"pegasus"),KDr.forEach(t),NKe=r(c9," \u2014 "),ZS=n(c9,"A",{href:!0});var ZDr=s(ZS);DKe=r(ZDr,"PegasusTokenizer"),ZDr.forEach(t),GKe=r(c9," or "),eR=n(c9,"A",{href:!0});var eGr=s(eR);OKe=r(eGr,"PegasusTokenizerFast"),eGr.forEach(t),VKe=r(c9," (Pegasus model)"),c9.forEach(t),XKe=i(w),dh=n(w,"LI",{});var sMe=s(dh);bee=n(sMe,"STRONG",{});var oGr=s(bee);zKe=r(oGr,"perceiver"),oGr.forEach(t),QKe=r(sMe," \u2014 "),oR=n(sMe,"A",{href:!0});var rGr=s(oR);WKe=r(rGr,"PerceiverTokenizer"),rGr.forEach(t),HKe=r(sMe," (Perceiver model)"),sMe.forEach(t),UKe=i(w),ch=n(w,"LI",{});var lMe=s(ch);Fee=n(lMe,"STRONG",{});var tGr=s(Fee);JKe=r(tGr,"phobert"),tGr.forEach(t),YKe=r(lMe," \u2014 "),rR=n(lMe,"A",{href:!0});var aGr=s(rR);KKe=r(aGr,"PhobertTokenizer"),aGr.forEach(t),ZKe=r(lMe," (PhoBERT model)"),lMe.forEach(t),eZe=i(w),fh=n(w,"LI",{});var iMe=s(fh);vee=n(iMe,"STRONG",{});var nGr=s(vee);oZe=r(nGr,"plbart"),nGr.forEach(t),rZe=r(iMe," \u2014 "),tR=n(iMe,"A",{href:!0});var sGr=s(tR);tZe=r(sGr,"PLBartTokenizer"),sGr.forEach(t),aZe=r(iMe," (PLBart model)"),iMe.forEach(t),nZe=i(w),mh=n(w,"LI",{});var dMe=s(mh);Tee=n(dMe,"STRONG",{});var lGr=s(Tee);sZe=r(lGr,"prophetnet"),lGr.forEach(t),lZe=r(dMe," \u2014 "),aR=n(dMe,"A",{href:!0});var iGr=s(aR);iZe=r(iGr,"ProphetNetTokenizer"),iGr.forEach(t),dZe=r(dMe," (ProphetNet model)"),dMe.forEach(t),cZe=i(w),Ss=n(w,"LI",{});var f9=s(Ss);Mee=n(f9,"STRONG",{});var dGr=s(Mee);fZe=r(dGr,"qdqbert"),dGr.forEach(t),mZe=r(f9," \u2014 "),nR=n(f9,"A",{href:!0});var cGr=s(nR);gZe=r(cGr,"BertTokenizer"),cGr.forEach(t),hZe=r(f9," or "),sR=n(f9,"A",{href:!0});var fGr=s(sR);pZe=r(fGr,"BertTokenizerFast"),fGr.forEach(t),_Ze=r(f9," (QDQBert model)"),f9.forEach(t),uZe=i(w),gh=n(w,"LI",{});var cMe=s(gh);Eee=n(cMe,"STRONG",{});var mGr=s(Eee);bZe=r(mGr,"rag"),mGr.forEach(t),FZe=r(cMe," \u2014 "),lR=n(cMe,"A",{href:!0});var gGr=s(lR);vZe=r(gGr,"RagTokenizer"),gGr.forEach(t),TZe=r(cMe," (RAG model)"),cMe.forEach(t),MZe=i(w),Rs=n(w,"LI",{});var m9=s(Rs);Cee=n(m9,"STRONG",{});var hGr=s(Cee);EZe=r(hGr,"realm"),hGr.forEach(t),CZe=r(m9," \u2014 "),iR=n(m9,"A",{href:!0});var pGr=s(iR);wZe=r(pGr,"RealmTokenizer"),pGr.forEach(t),AZe=r(m9," or "),dR=n(m9,"A",{href:!0});var _Gr=s(dR);yZe=r(_Gr,"RealmTokenizerFast"),_Gr.forEach(t),LZe=r(m9," (Realm model)"),m9.forEach(t),xZe=i(w),Bs=n(w,"LI",{});var g9=s(Bs);wee=n(g9,"STRONG",{});var uGr=s(wee);kZe=r(uGr,"reformer"),uGr.forEach(t),SZe=r(g9," \u2014 "),cR=n(g9,"A",{href:!0});var bGr=s(cR);RZe=r(bGr,"ReformerTokenizer"),bGr.forEach(t),BZe=r(g9," or "),fR=n(g9,"A",{href:!0});var FGr=s(fR);PZe=r(FGr,"ReformerTokenizerFast"),FGr.forEach(t),$Ze=r(g9," (Reformer model)"),g9.forEach(t),qZe=i(w),Ps=n(w,"LI",{});var h9=s(Ps);Aee=n(h9,"STRONG",{});var vGr=s(Aee);IZe=r(vGr,"rembert"),vGr.forEach(t),jZe=r(h9," \u2014 "),mR=n(h9,"A",{href:!0});var TGr=s(mR);NZe=r(TGr,"RemBertTokenizer"),TGr.forEach(t),DZe=r(h9," or "),gR=n(h9,"A",{href:!0});var MGr=s(gR);GZe=r(MGr,"RemBertTokenizerFast"),MGr.forEach(t),OZe=r(h9," (RemBERT model)"),h9.forEach(t),VZe=i(w),$s=n(w,"LI",{});var p9=s($s);yee=n(p9,"STRONG",{});var EGr=s(yee);XZe=r(EGr,"retribert"),EGr.forEach(t),zZe=r(p9," \u2014 "),hR=n(p9,"A",{href:!0});var CGr=s(hR);QZe=r(CGr,"RetriBertTokenizer"),CGr.forEach(t),WZe=r(p9," or "),pR=n(p9,"A",{href:!0});var wGr=s(pR);HZe=r(wGr,"RetriBertTokenizerFast"),wGr.forEach(t),UZe=r(p9," (RetriBERT model)"),p9.forEach(t),JZe=i(w),qs=n(w,"LI",{});var _9=s(qs);Lee=n(_9,"STRONG",{});var AGr=s(Lee);YZe=r(AGr,"roberta"),AGr.forEach(t),KZe=r(_9," \u2014 "),_R=n(_9,"A",{href:!0});var yGr=s(_R);ZZe=r(yGr,"RobertaTokenizer"),yGr.forEach(t),eeo=r(_9," or "),uR=n(_9,"A",{href:!0});var LGr=s(uR);oeo=r(LGr,"RobertaTokenizerFast"),LGr.forEach(t),reo=r(_9," (RoBERTa model)"),_9.forEach(t),teo=i(w),Is=n(w,"LI",{});var u9=s(Is);xee=n(u9,"STRONG",{});var xGr=s(xee);aeo=r(xGr,"roformer"),xGr.forEach(t),neo=r(u9," \u2014 "),bR=n(u9,"A",{href:!0});var kGr=s(bR);seo=r(kGr,"RoFormerTokenizer"),kGr.forEach(t),leo=r(u9," or "),FR=n(u9,"A",{href:!0});var SGr=s(FR);ieo=r(SGr,"RoFormerTokenizerFast"),SGr.forEach(t),deo=r(u9," (RoFormer model)"),u9.forEach(t),ceo=i(w),hh=n(w,"LI",{});var fMe=s(hh);kee=n(fMe,"STRONG",{});var RGr=s(kee);feo=r(RGr,"speech_to_text"),RGr.forEach(t),meo=r(fMe," \u2014 "),vR=n(fMe,"A",{href:!0});var BGr=s(vR);geo=r(BGr,"Speech2TextTokenizer"),BGr.forEach(t),heo=r(fMe," (Speech2Text model)"),fMe.forEach(t),peo=i(w),ph=n(w,"LI",{});var mMe=s(ph);See=n(mMe,"STRONG",{});var PGr=s(See);_eo=r(PGr,"speech_to_text_2"),PGr.forEach(t),ueo=r(mMe," \u2014 "),TR=n(mMe,"A",{href:!0});var $Gr=s(TR);beo=r($Gr,"Speech2Text2Tokenizer"),$Gr.forEach(t),Feo=r(mMe," (Speech2Text2 model)"),mMe.forEach(t),veo=i(w),js=n(w,"LI",{});var b9=s(js);Ree=n(b9,"STRONG",{});var qGr=s(Ree);Teo=r(qGr,"splinter"),qGr.forEach(t),Meo=r(b9," \u2014 "),MR=n(b9,"A",{href:!0});var IGr=s(MR);Eeo=r(IGr,"SplinterTokenizer"),IGr.forEach(t),Ceo=r(b9," or "),ER=n(b9,"A",{href:!0});var jGr=s(ER);weo=r(jGr,"SplinterTokenizerFast"),jGr.forEach(t),Aeo=r(b9," (Splinter model)"),b9.forEach(t),yeo=i(w),Ns=n(w,"LI",{});var F9=s(Ns);Bee=n(F9,"STRONG",{});var NGr=s(Bee);Leo=r(NGr,"squeezebert"),NGr.forEach(t),xeo=r(F9," \u2014 "),CR=n(F9,"A",{href:!0});var DGr=s(CR);keo=r(DGr,"SqueezeBertTokenizer"),DGr.forEach(t),Seo=r(F9," or "),wR=n(F9,"A",{href:!0});var GGr=s(wR);Reo=r(GGr,"SqueezeBertTokenizerFast"),GGr.forEach(t),Beo=r(F9," (SqueezeBERT model)"),F9.forEach(t),Peo=i(w),Ds=n(w,"LI",{});var v9=s(Ds);Pee=n(v9,"STRONG",{});var OGr=s(Pee);$eo=r(OGr,"t5"),OGr.forEach(t),qeo=r(v9," \u2014 "),AR=n(v9,"A",{href:!0});var VGr=s(AR);Ieo=r(VGr,"T5Tokenizer"),VGr.forEach(t),jeo=r(v9," or "),yR=n(v9,"A",{href:!0});var XGr=s(yR);Neo=r(XGr,"T5TokenizerFast"),XGr.forEach(t),Deo=r(v9," (T5 model)"),v9.forEach(t),Geo=i(w),_h=n(w,"LI",{});var gMe=s(_h);$ee=n(gMe,"STRONG",{});var zGr=s($ee);Oeo=r(zGr,"tapas"),zGr.forEach(t),Veo=r(gMe," \u2014 "),LR=n(gMe,"A",{href:!0});var QGr=s(LR);Xeo=r(QGr,"TapasTokenizer"),QGr.forEach(t),zeo=r(gMe," (TAPAS model)"),gMe.forEach(t),Qeo=i(w),uh=n(w,"LI",{});var hMe=s(uh);qee=n(hMe,"STRONG",{});var WGr=s(qee);Weo=r(WGr,"transfo-xl"),WGr.forEach(t),Heo=r(hMe," \u2014 "),xR=n(hMe,"A",{href:!0});var HGr=s(xR);Ueo=r(HGr,"TransfoXLTokenizer"),HGr.forEach(t),Jeo=r(hMe," (Transformer-XL model)"),hMe.forEach(t),Yeo=i(w),bh=n(w,"LI",{});var pMe=s(bh);Iee=n(pMe,"STRONG",{});var UGr=s(Iee);Keo=r(UGr,"wav2vec2"),UGr.forEach(t),Zeo=r(pMe," \u2014 "),kR=n(pMe,"A",{href:!0});var JGr=s(kR);eoo=r(JGr,"Wav2Vec2CTCTokenizer"),JGr.forEach(t),ooo=r(pMe," (Wav2Vec2 model)"),pMe.forEach(t),roo=i(w),Fh=n(w,"LI",{});var _Me=s(Fh);jee=n(_Me,"STRONG",{});var YGr=s(jee);too=r(YGr,"wav2vec2_phoneme"),YGr.forEach(t),aoo=r(_Me," \u2014 "),SR=n(_Me,"A",{href:!0});var KGr=s(SR);noo=r(KGr,"Wav2Vec2PhonemeCTCTokenizer"),KGr.forEach(t),soo=r(_Me," (Wav2Vec2Phoneme model)"),_Me.forEach(t),loo=i(w),Gs=n(w,"LI",{});var T9=s(Gs);Nee=n(T9,"STRONG",{});var ZGr=s(Nee);ioo=r(ZGr,"xglm"),ZGr.forEach(t),doo=r(T9," \u2014 "),RR=n(T9,"A",{href:!0});var eOr=s(RR);coo=r(eOr,"XGLMTokenizer"),eOr.forEach(t),foo=r(T9," or "),BR=n(T9,"A",{href:!0});var oOr=s(BR);moo=r(oOr,"XGLMTokenizerFast"),oOr.forEach(t),goo=r(T9," (XGLM model)"),T9.forEach(t),hoo=i(w),vh=n(w,"LI",{});var uMe=s(vh);Dee=n(uMe,"STRONG",{});var rOr=s(Dee);poo=r(rOr,"xlm"),rOr.forEach(t),_oo=r(uMe," \u2014 "),PR=n(uMe,"A",{href:!0});var tOr=s(PR);uoo=r(tOr,"XLMTokenizer"),tOr.forEach(t),boo=r(uMe," (XLM model)"),uMe.forEach(t),Foo=i(w),Th=n(w,"LI",{});var bMe=s(Th);Gee=n(bMe,"STRONG",{});var aOr=s(Gee);voo=r(aOr,"xlm-prophetnet"),aOr.forEach(t),Too=r(bMe," \u2014 "),$R=n(bMe,"A",{href:!0});var nOr=s($R);Moo=r(nOr,"XLMProphetNetTokenizer"),nOr.forEach(t),Eoo=r(bMe," (XLMProphetNet model)"),bMe.forEach(t),Coo=i(w),Os=n(w,"LI",{});var M9=s(Os);Oee=n(M9,"STRONG",{});var sOr=s(Oee);woo=r(sOr,"xlm-roberta"),sOr.forEach(t),Aoo=r(M9," \u2014 "),qR=n(M9,"A",{href:!0});var lOr=s(qR);yoo=r(lOr,"XLMRobertaTokenizer"),lOr.forEach(t),Loo=r(M9," or "),IR=n(M9,"A",{href:!0});var iOr=s(IR);xoo=r(iOr,"XLMRobertaTokenizerFast"),iOr.forEach(t),koo=r(M9," (XLM-RoBERTa model)"),M9.forEach(t),Soo=i(w),Vs=n(w,"LI",{});var E9=s(Vs);Vee=n(E9,"STRONG",{});var dOr=s(Vee);Roo=r(dOr,"xlnet"),dOr.forEach(t),Boo=r(E9," \u2014 "),jR=n(E9,"A",{href:!0});var cOr=s(jR);Poo=r(cOr,"XLNetTokenizer"),cOr.forEach(t),$oo=r(E9," or "),NR=n(E9,"A",{href:!0});var fOr=s(NR);qoo=r(fOr,"XLNetTokenizerFast"),fOr.forEach(t),Ioo=r(E9," (XLNet model)"),E9.forEach(t),w.forEach(t),joo=i(ua),Xee=n(ua,"P",{});var mOr=s(Xee);Noo=r(mOr,"Examples:"),mOr.forEach(t),Doo=i(ua),m(QE.$$.fragment,ua),ua.forEach(t),Goo=i(Hs),Mh=n(Hs,"DIV",{class:!0});var jPe=s(Mh);m(WE.$$.fragment,jPe),Ooo=i(jPe),zee=n(jPe,"P",{});var gOr=s(zee);Voo=r(gOr,"Register a new tokenizer in this mapping."),gOr.forEach(t),jPe.forEach(t),Hs.forEach(t),RRe=i(c),ed=n(c,"H2",{class:!0});var NPe=s(ed);Eh=n(NPe,"A",{id:!0,class:!0,href:!0});var hOr=s(Eh);Qee=n(hOr,"SPAN",{});var pOr=s(Qee);m(HE.$$.fragment,pOr),pOr.forEach(t),hOr.forEach(t),Xoo=i(NPe),Wee=n(NPe,"SPAN",{});var _Or=s(Wee);zoo=r(_Or,"AutoFeatureExtractor"),_Or.forEach(t),NPe.forEach(t),BRe=i(c),Uo=n(c,"DIV",{class:!0});var Us=s(Uo);m(UE.$$.fragment,Us),Qoo=i(Us),JE=n(Us,"P",{});var DPe=s(JE);Woo=r(DPe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),DR=n(DPe,"A",{href:!0});var uOr=s(DR);Hoo=r(uOr,"AutoFeatureExtractor.from_pretrained()"),uOr.forEach(t),Uoo=r(DPe," class method."),DPe.forEach(t),Joo=i(Us),YE=n(Us,"P",{});var GPe=s(YE);Yoo=r(GPe,"This class cannot be instantiated directly using "),Hee=n(GPe,"CODE",{});var bOr=s(Hee);Koo=r(bOr,"__init__()"),bOr.forEach(t),Zoo=r(GPe," (throws an error)."),GPe.forEach(t),ero=i(Us),$e=n(Us,"DIV",{class:!0});var Gt=s($e);m(KE.$$.fragment,Gt),oro=i(Gt),Uee=n(Gt,"P",{});var FOr=s(Uee);rro=r(FOr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),FOr.forEach(t),tro=i(Gt),Wa=n(Gt,"P",{});var k4=s(Wa);aro=r(k4,"The feature extractor class to instantiate is selected based on the "),Jee=n(k4,"CODE",{});var vOr=s(Jee);nro=r(vOr,"model_type"),vOr.forEach(t),sro=r(k4,` property of the config object
(either passed as an argument or loaded from `),Yee=n(k4,"CODE",{});var TOr=s(Yee);lro=r(TOr,"pretrained_model_name_or_path"),TOr.forEach(t),iro=r(k4,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Kee=n(k4,"CODE",{});var MOr=s(Kee);dro=r(MOr,"pretrained_model_name_or_path"),MOr.forEach(t),cro=r(k4,":"),k4.forEach(t),fro=i(Gt),te=n(Gt,"UL",{});var ne=s(te);Ch=n(ne,"LI",{});var FMe=s(Ch);Zee=n(FMe,"STRONG",{});var EOr=s(Zee);mro=r(EOr,"beit"),EOr.forEach(t),gro=r(FMe," \u2014 "),GR=n(FMe,"A",{href:!0});var COr=s(GR);hro=r(COr,"BeitFeatureExtractor"),COr.forEach(t),pro=r(FMe," (BEiT model)"),FMe.forEach(t),_ro=i(ne),wh=n(ne,"LI",{});var vMe=s(wh);eoe=n(vMe,"STRONG",{});var wOr=s(eoe);uro=r(wOr,"clip"),wOr.forEach(t),bro=r(vMe," \u2014 "),OR=n(vMe,"A",{href:!0});var AOr=s(OR);Fro=r(AOr,"CLIPFeatureExtractor"),AOr.forEach(t),vro=r(vMe," (CLIP model)"),vMe.forEach(t),Tro=i(ne),Ah=n(ne,"LI",{});var TMe=s(Ah);ooe=n(TMe,"STRONG",{});var yOr=s(ooe);Mro=r(yOr,"convnext"),yOr.forEach(t),Ero=r(TMe," \u2014 "),VR=n(TMe,"A",{href:!0});var LOr=s(VR);Cro=r(LOr,"ConvNextFeatureExtractor"),LOr.forEach(t),wro=r(TMe," (ConvNext model)"),TMe.forEach(t),Aro=i(ne),yh=n(ne,"LI",{});var MMe=s(yh);roe=n(MMe,"STRONG",{});var xOr=s(roe);yro=r(xOr,"deit"),xOr.forEach(t),Lro=r(MMe," \u2014 "),XR=n(MMe,"A",{href:!0});var kOr=s(XR);xro=r(kOr,"DeiTFeatureExtractor"),kOr.forEach(t),kro=r(MMe," (DeiT model)"),MMe.forEach(t),Sro=i(ne),Lh=n(ne,"LI",{});var EMe=s(Lh);toe=n(EMe,"STRONG",{});var SOr=s(toe);Rro=r(SOr,"detr"),SOr.forEach(t),Bro=r(EMe," \u2014 "),zR=n(EMe,"A",{href:!0});var ROr=s(zR);Pro=r(ROr,"DetrFeatureExtractor"),ROr.forEach(t),$ro=r(EMe," (DETR model)"),EMe.forEach(t),qro=i(ne),xh=n(ne,"LI",{});var CMe=s(xh);aoe=n(CMe,"STRONG",{});var BOr=s(aoe);Iro=r(BOr,"hubert"),BOr.forEach(t),jro=r(CMe," \u2014 "),QR=n(CMe,"A",{href:!0});var POr=s(QR);Nro=r(POr,"Wav2Vec2FeatureExtractor"),POr.forEach(t),Dro=r(CMe," (Hubert model)"),CMe.forEach(t),Gro=i(ne),kh=n(ne,"LI",{});var wMe=s(kh);noe=n(wMe,"STRONG",{});var $Or=s(noe);Oro=r($Or,"layoutlmv2"),$Or.forEach(t),Vro=r(wMe," \u2014 "),WR=n(wMe,"A",{href:!0});var qOr=s(WR);Xro=r(qOr,"LayoutLMv2FeatureExtractor"),qOr.forEach(t),zro=r(wMe," (LayoutLMv2 model)"),wMe.forEach(t),Qro=i(ne),Sh=n(ne,"LI",{});var AMe=s(Sh);soe=n(AMe,"STRONG",{});var IOr=s(soe);Wro=r(IOr,"maskformer"),IOr.forEach(t),Hro=r(AMe," \u2014 "),HR=n(AMe,"A",{href:!0});var jOr=s(HR);Uro=r(jOr,"MaskFormerFeatureExtractor"),jOr.forEach(t),Jro=r(AMe," (MaskFormer model)"),AMe.forEach(t),Yro=i(ne),Rh=n(ne,"LI",{});var yMe=s(Rh);loe=n(yMe,"STRONG",{});var NOr=s(loe);Kro=r(NOr,"perceiver"),NOr.forEach(t),Zro=r(yMe," \u2014 "),UR=n(yMe,"A",{href:!0});var DOr=s(UR);eto=r(DOr,"PerceiverFeatureExtractor"),DOr.forEach(t),oto=r(yMe," (Perceiver model)"),yMe.forEach(t),rto=i(ne),Bh=n(ne,"LI",{});var LMe=s(Bh);ioe=n(LMe,"STRONG",{});var GOr=s(ioe);tto=r(GOr,"poolformer"),GOr.forEach(t),ato=r(LMe," \u2014 "),JR=n(LMe,"A",{href:!0});var OOr=s(JR);nto=r(OOr,"PoolFormerFeatureExtractor"),OOr.forEach(t),sto=r(LMe," (PoolFormer model)"),LMe.forEach(t),lto=i(ne),Ph=n(ne,"LI",{});var xMe=s(Ph);doe=n(xMe,"STRONG",{});var VOr=s(doe);ito=r(VOr,"resnet"),VOr.forEach(t),dto=r(xMe," \u2014 "),YR=n(xMe,"A",{href:!0});var XOr=s(YR);cto=r(XOr,"ConvNextFeatureExtractor"),XOr.forEach(t),fto=r(xMe," (ResNet model)"),xMe.forEach(t),mto=i(ne),$h=n(ne,"LI",{});var kMe=s($h);coe=n(kMe,"STRONG",{});var zOr=s(coe);gto=r(zOr,"segformer"),zOr.forEach(t),hto=r(kMe," \u2014 "),KR=n(kMe,"A",{href:!0});var QOr=s(KR);pto=r(QOr,"SegformerFeatureExtractor"),QOr.forEach(t),_to=r(kMe," (SegFormer model)"),kMe.forEach(t),uto=i(ne),qh=n(ne,"LI",{});var SMe=s(qh);foe=n(SMe,"STRONG",{});var WOr=s(foe);bto=r(WOr,"speech_to_text"),WOr.forEach(t),Fto=r(SMe," \u2014 "),ZR=n(SMe,"A",{href:!0});var HOr=s(ZR);vto=r(HOr,"Speech2TextFeatureExtractor"),HOr.forEach(t),Tto=r(SMe," (Speech2Text model)"),SMe.forEach(t),Mto=i(ne),Ih=n(ne,"LI",{});var RMe=s(Ih);moe=n(RMe,"STRONG",{});var UOr=s(moe);Eto=r(UOr,"swin"),UOr.forEach(t),Cto=r(RMe," \u2014 "),eB=n(RMe,"A",{href:!0});var JOr=s(eB);wto=r(JOr,"ViTFeatureExtractor"),JOr.forEach(t),Ato=r(RMe," (Swin model)"),RMe.forEach(t),yto=i(ne),jh=n(ne,"LI",{});var BMe=s(jh);goe=n(BMe,"STRONG",{});var YOr=s(goe);Lto=r(YOr,"van"),YOr.forEach(t),xto=r(BMe," \u2014 "),oB=n(BMe,"A",{href:!0});var KOr=s(oB);kto=r(KOr,"ConvNextFeatureExtractor"),KOr.forEach(t),Sto=r(BMe," (VAN model)"),BMe.forEach(t),Rto=i(ne),Nh=n(ne,"LI",{});var PMe=s(Nh);hoe=n(PMe,"STRONG",{});var ZOr=s(hoe);Bto=r(ZOr,"vit"),ZOr.forEach(t),Pto=r(PMe," \u2014 "),rB=n(PMe,"A",{href:!0});var eVr=s(rB);$to=r(eVr,"ViTFeatureExtractor"),eVr.forEach(t),qto=r(PMe," (ViT model)"),PMe.forEach(t),Ito=i(ne),Dh=n(ne,"LI",{});var $Me=s(Dh);poe=n($Me,"STRONG",{});var oVr=s(poe);jto=r(oVr,"vit_mae"),oVr.forEach(t),Nto=r($Me," \u2014 "),tB=n($Me,"A",{href:!0});var rVr=s(tB);Dto=r(rVr,"ViTFeatureExtractor"),rVr.forEach(t),Gto=r($Me," (ViTMAE model)"),$Me.forEach(t),Oto=i(ne),Gh=n(ne,"LI",{});var qMe=s(Gh);_oe=n(qMe,"STRONG",{});var tVr=s(_oe);Vto=r(tVr,"wav2vec2"),tVr.forEach(t),Xto=r(qMe," \u2014 "),aB=n(qMe,"A",{href:!0});var aVr=s(aB);zto=r(aVr,"Wav2Vec2FeatureExtractor"),aVr.forEach(t),Qto=r(qMe," (Wav2Vec2 model)"),qMe.forEach(t),ne.forEach(t),Wto=i(Gt),m(Oh.$$.fragment,Gt),Hto=i(Gt),uoe=n(Gt,"P",{});var nVr=s(uoe);Uto=r(nVr,"Examples:"),nVr.forEach(t),Jto=i(Gt),m(ZE.$$.fragment,Gt),Gt.forEach(t),Yto=i(Us),Vh=n(Us,"DIV",{class:!0});var OPe=s(Vh);m(eC.$$.fragment,OPe),Kto=i(OPe),boe=n(OPe,"P",{});var sVr=s(boe);Zto=r(sVr,"Register a new feature extractor for this class."),sVr.forEach(t),OPe.forEach(t),Us.forEach(t),PRe=i(c),od=n(c,"H2",{class:!0});var VPe=s(od);Xh=n(VPe,"A",{id:!0,class:!0,href:!0});var lVr=s(Xh);Foe=n(lVr,"SPAN",{});var iVr=s(Foe);m(oC.$$.fragment,iVr),iVr.forEach(t),lVr.forEach(t),eao=i(VPe),voe=n(VPe,"SPAN",{});var dVr=s(voe);oao=r(dVr,"AutoProcessor"),dVr.forEach(t),VPe.forEach(t),$Re=i(c),Jo=n(c,"DIV",{class:!0});var Js=s(Jo);m(rC.$$.fragment,Js),rao=i(Js),tC=n(Js,"P",{});var XPe=s(tC);tao=r(XPe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),nB=n(XPe,"A",{href:!0});var cVr=s(nB);aao=r(cVr,"AutoProcessor.from_pretrained()"),cVr.forEach(t),nao=r(XPe," class method."),XPe.forEach(t),sao=i(Js),aC=n(Js,"P",{});var zPe=s(aC);lao=r(zPe,"This class cannot be instantiated directly using "),Toe=n(zPe,"CODE",{});var fVr=s(Toe);iao=r(fVr,"__init__()"),fVr.forEach(t),dao=r(zPe," (throws an error)."),zPe.forEach(t),cao=i(Js),qe=n(Js,"DIV",{class:!0});var Ot=s(qe);m(nC.$$.fragment,Ot),fao=i(Ot),Moe=n(Ot,"P",{});var mVr=s(Moe);mao=r(mVr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),mVr.forEach(t),gao=i(Ot),rd=n(Ot,"P",{});var bU=s(rd);hao=r(bU,"The processor class to instantiate is selected based on the "),Eoe=n(bU,"CODE",{});var gVr=s(Eoe);pao=r(gVr,"model_type"),gVr.forEach(t),_ao=r(bU,` property of the config object (either
passed as an argument or loaded from `),Coe=n(bU,"CODE",{});var hVr=s(Coe);uao=r(hVr,"pretrained_model_name_or_path"),hVr.forEach(t),bao=r(bU," if possible):"),bU.forEach(t),Fao=i(Ot),ke=n(Ot,"UL",{});var Do=s(ke);zh=n(Do,"LI",{});var IMe=s(zh);woe=n(IMe,"STRONG",{});var pVr=s(woe);vao=r(pVr,"clip"),pVr.forEach(t),Tao=r(IMe," \u2014 "),sB=n(IMe,"A",{href:!0});var _Vr=s(sB);Mao=r(_Vr,"CLIPProcessor"),_Vr.forEach(t),Eao=r(IMe," (CLIP model)"),IMe.forEach(t),Cao=i(Do),Qh=n(Do,"LI",{});var jMe=s(Qh);Aoe=n(jMe,"STRONG",{});var uVr=s(Aoe);wao=r(uVr,"layoutlmv2"),uVr.forEach(t),Aao=r(jMe," \u2014 "),lB=n(jMe,"A",{href:!0});var bVr=s(lB);yao=r(bVr,"LayoutLMv2Processor"),bVr.forEach(t),Lao=r(jMe," (LayoutLMv2 model)"),jMe.forEach(t),xao=i(Do),Wh=n(Do,"LI",{});var NMe=s(Wh);yoe=n(NMe,"STRONG",{});var FVr=s(yoe);kao=r(FVr,"layoutxlm"),FVr.forEach(t),Sao=r(NMe," \u2014 "),iB=n(NMe,"A",{href:!0});var vVr=s(iB);Rao=r(vVr,"LayoutXLMProcessor"),vVr.forEach(t),Bao=r(NMe," (LayoutXLM model)"),NMe.forEach(t),Pao=i(Do),Hh=n(Do,"LI",{});var DMe=s(Hh);Loe=n(DMe,"STRONG",{});var TVr=s(Loe);$ao=r(TVr,"speech_to_text"),TVr.forEach(t),qao=r(DMe," \u2014 "),dB=n(DMe,"A",{href:!0});var MVr=s(dB);Iao=r(MVr,"Speech2TextProcessor"),MVr.forEach(t),jao=r(DMe," (Speech2Text model)"),DMe.forEach(t),Nao=i(Do),Uh=n(Do,"LI",{});var GMe=s(Uh);xoe=n(GMe,"STRONG",{});var EVr=s(xoe);Dao=r(EVr,"speech_to_text_2"),EVr.forEach(t),Gao=r(GMe," \u2014 "),cB=n(GMe,"A",{href:!0});var CVr=s(cB);Oao=r(CVr,"Speech2Text2Processor"),CVr.forEach(t),Vao=r(GMe," (Speech2Text2 model)"),GMe.forEach(t),Xao=i(Do),Jh=n(Do,"LI",{});var OMe=s(Jh);koe=n(OMe,"STRONG",{});var wVr=s(koe);zao=r(wVr,"trocr"),wVr.forEach(t),Qao=r(OMe," \u2014 "),fB=n(OMe,"A",{href:!0});var AVr=s(fB);Wao=r(AVr,"TrOCRProcessor"),AVr.forEach(t),Hao=r(OMe," (TrOCR model)"),OMe.forEach(t),Uao=i(Do),Yh=n(Do,"LI",{});var VMe=s(Yh);Soe=n(VMe,"STRONG",{});var yVr=s(Soe);Jao=r(yVr,"vision-text-dual-encoder"),yVr.forEach(t),Yao=r(VMe," \u2014 "),mB=n(VMe,"A",{href:!0});var LVr=s(mB);Kao=r(LVr,"VisionTextDualEncoderProcessor"),LVr.forEach(t),Zao=r(VMe," (VisionTextDualEncoder model)"),VMe.forEach(t),eno=i(Do),Kh=n(Do,"LI",{});var XMe=s(Kh);Roe=n(XMe,"STRONG",{});var xVr=s(Roe);ono=r(xVr,"wav2vec2"),xVr.forEach(t),rno=r(XMe," \u2014 "),gB=n(XMe,"A",{href:!0});var kVr=s(gB);tno=r(kVr,"Wav2Vec2Processor"),kVr.forEach(t),ano=r(XMe," (Wav2Vec2 model)"),XMe.forEach(t),Do.forEach(t),nno=i(Ot),m(Zh.$$.fragment,Ot),sno=i(Ot),Boe=n(Ot,"P",{});var SVr=s(Boe);lno=r(SVr,"Examples:"),SVr.forEach(t),ino=i(Ot),m(sC.$$.fragment,Ot),Ot.forEach(t),dno=i(Js),ep=n(Js,"DIV",{class:!0});var QPe=s(ep);m(lC.$$.fragment,QPe),cno=i(QPe),Poe=n(QPe,"P",{});var RVr=s(Poe);fno=r(RVr,"Register a new processor for this class."),RVr.forEach(t),QPe.forEach(t),Js.forEach(t),qRe=i(c),td=n(c,"H2",{class:!0});var WPe=s(td);op=n(WPe,"A",{id:!0,class:!0,href:!0});var BVr=s(op);$oe=n(BVr,"SPAN",{});var PVr=s($oe);m(iC.$$.fragment,PVr),PVr.forEach(t),BVr.forEach(t),mno=i(WPe),qoe=n(WPe,"SPAN",{});var $Vr=s(qoe);gno=r($Vr,"AutoModel"),$Vr.forEach(t),WPe.forEach(t),IRe=i(c),Yo=n(c,"DIV",{class:!0});var Ys=s(Yo);m(dC.$$.fragment,Ys),hno=i(Ys),ad=n(Ys,"P",{});var FU=s(ad);pno=r(FU,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),hB=n(FU,"A",{href:!0});var qVr=s(hB);_no=r(qVr,"from_pretrained()"),qVr.forEach(t),uno=r(FU," class method or the "),pB=n(FU,"A",{href:!0});var IVr=s(pB);bno=r(IVr,"from_config()"),IVr.forEach(t),Fno=r(FU,` class
method.`),FU.forEach(t),vno=i(Ys),cC=n(Ys,"P",{});var HPe=s(cC);Tno=r(HPe,"This class cannot be instantiated directly using "),Ioe=n(HPe,"CODE",{});var jVr=s(Ioe);Mno=r(jVr,"__init__()"),jVr.forEach(t),Eno=r(HPe," (throws an error)."),HPe.forEach(t),Cno=i(Ys),Qr=n(Ys,"DIV",{class:!0});var Ks=s(Qr);m(fC.$$.fragment,Ks),wno=i(Ks),joe=n(Ks,"P",{});var NVr=s(joe);Ano=r(NVr,"Instantiates one of the base model classes of the library from a configuration."),NVr.forEach(t),yno=i(Ks),nd=n(Ks,"P",{});var vU=s(nd);Lno=r(vU,`Note:
Loading a model from its configuration file does `),Noe=n(vU,"STRONG",{});var DVr=s(Noe);xno=r(DVr,"not"),DVr.forEach(t),kno=r(vU,` load the model weights. It only affects the
model\u2019s configuration. Use `),_B=n(vU,"A",{href:!0});var GVr=s(_B);Sno=r(GVr,"from_pretrained()"),GVr.forEach(t),Rno=r(vU," to load the model weights."),vU.forEach(t),Bno=i(Ks),Doe=n(Ks,"P",{});var OVr=s(Doe);Pno=r(OVr,"Examples:"),OVr.forEach(t),$no=i(Ks),m(mC.$$.fragment,Ks),Ks.forEach(t),qno=i(Ys),Ie=n(Ys,"DIV",{class:!0});var Vt=s(Ie);m(gC.$$.fragment,Vt),Ino=i(Vt),Goe=n(Vt,"P",{});var VVr=s(Goe);jno=r(VVr,"Instantiate one of the base model classes of the library from a pretrained model."),VVr.forEach(t),Nno=i(Vt),Ha=n(Vt,"P",{});var S4=s(Ha);Dno=r(S4,"The model class to instantiate is selected based on the "),Ooe=n(S4,"CODE",{});var XVr=s(Ooe);Gno=r(XVr,"model_type"),XVr.forEach(t),Ono=r(S4,` property of the config object (either
passed as an argument or loaded from `),Voe=n(S4,"CODE",{});var zVr=s(Voe);Vno=r(zVr,"pretrained_model_name_or_path"),zVr.forEach(t),Xno=r(S4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xoe=n(S4,"CODE",{});var QVr=s(Xoe);zno=r(QVr,"pretrained_model_name_or_path"),QVr.forEach(t),Qno=r(S4,":"),S4.forEach(t),Wno=i(Vt),T=n(Vt,"UL",{});var M=s(T);rp=n(M,"LI",{});var zMe=s(rp);zoe=n(zMe,"STRONG",{});var WVr=s(zoe);Hno=r(WVr,"albert"),WVr.forEach(t),Uno=r(zMe," \u2014 "),uB=n(zMe,"A",{href:!0});var HVr=s(uB);Jno=r(HVr,"AlbertModel"),HVr.forEach(t),Yno=r(zMe," (ALBERT model)"),zMe.forEach(t),Kno=i(M),tp=n(M,"LI",{});var QMe=s(tp);Qoe=n(QMe,"STRONG",{});var UVr=s(Qoe);Zno=r(UVr,"bart"),UVr.forEach(t),eso=r(QMe," \u2014 "),bB=n(QMe,"A",{href:!0});var JVr=s(bB);oso=r(JVr,"BartModel"),JVr.forEach(t),rso=r(QMe," (BART model)"),QMe.forEach(t),tso=i(M),ap=n(M,"LI",{});var WMe=s(ap);Woe=n(WMe,"STRONG",{});var YVr=s(Woe);aso=r(YVr,"beit"),YVr.forEach(t),nso=r(WMe," \u2014 "),FB=n(WMe,"A",{href:!0});var KVr=s(FB);sso=r(KVr,"BeitModel"),KVr.forEach(t),lso=r(WMe," (BEiT model)"),WMe.forEach(t),iso=i(M),np=n(M,"LI",{});var HMe=s(np);Hoe=n(HMe,"STRONG",{});var ZVr=s(Hoe);dso=r(ZVr,"bert"),ZVr.forEach(t),cso=r(HMe," \u2014 "),vB=n(HMe,"A",{href:!0});var eXr=s(vB);fso=r(eXr,"BertModel"),eXr.forEach(t),mso=r(HMe," (BERT model)"),HMe.forEach(t),gso=i(M),sp=n(M,"LI",{});var UMe=s(sp);Uoe=n(UMe,"STRONG",{});var oXr=s(Uoe);hso=r(oXr,"bert-generation"),oXr.forEach(t),pso=r(UMe," \u2014 "),TB=n(UMe,"A",{href:!0});var rXr=s(TB);_so=r(rXr,"BertGenerationEncoder"),rXr.forEach(t),uso=r(UMe," (Bert Generation model)"),UMe.forEach(t),bso=i(M),lp=n(M,"LI",{});var JMe=s(lp);Joe=n(JMe,"STRONG",{});var tXr=s(Joe);Fso=r(tXr,"big_bird"),tXr.forEach(t),vso=r(JMe," \u2014 "),MB=n(JMe,"A",{href:!0});var aXr=s(MB);Tso=r(aXr,"BigBirdModel"),aXr.forEach(t),Mso=r(JMe," (BigBird model)"),JMe.forEach(t),Eso=i(M),ip=n(M,"LI",{});var YMe=s(ip);Yoe=n(YMe,"STRONG",{});var nXr=s(Yoe);Cso=r(nXr,"bigbird_pegasus"),nXr.forEach(t),wso=r(YMe," \u2014 "),EB=n(YMe,"A",{href:!0});var sXr=s(EB);Aso=r(sXr,"BigBirdPegasusModel"),sXr.forEach(t),yso=r(YMe," (BigBirdPegasus model)"),YMe.forEach(t),Lso=i(M),dp=n(M,"LI",{});var KMe=s(dp);Koe=n(KMe,"STRONG",{});var lXr=s(Koe);xso=r(lXr,"blenderbot"),lXr.forEach(t),kso=r(KMe," \u2014 "),CB=n(KMe,"A",{href:!0});var iXr=s(CB);Sso=r(iXr,"BlenderbotModel"),iXr.forEach(t),Rso=r(KMe," (Blenderbot model)"),KMe.forEach(t),Bso=i(M),cp=n(M,"LI",{});var ZMe=s(cp);Zoe=n(ZMe,"STRONG",{});var dXr=s(Zoe);Pso=r(dXr,"blenderbot-small"),dXr.forEach(t),$so=r(ZMe," \u2014 "),wB=n(ZMe,"A",{href:!0});var cXr=s(wB);qso=r(cXr,"BlenderbotSmallModel"),cXr.forEach(t),Iso=r(ZMe," (BlenderbotSmall model)"),ZMe.forEach(t),jso=i(M),fp=n(M,"LI",{});var e4e=s(fp);ere=n(e4e,"STRONG",{});var fXr=s(ere);Nso=r(fXr,"camembert"),fXr.forEach(t),Dso=r(e4e," \u2014 "),AB=n(e4e,"A",{href:!0});var mXr=s(AB);Gso=r(mXr,"CamembertModel"),mXr.forEach(t),Oso=r(e4e," (CamemBERT model)"),e4e.forEach(t),Vso=i(M),mp=n(M,"LI",{});var o4e=s(mp);ore=n(o4e,"STRONG",{});var gXr=s(ore);Xso=r(gXr,"canine"),gXr.forEach(t),zso=r(o4e," \u2014 "),yB=n(o4e,"A",{href:!0});var hXr=s(yB);Qso=r(hXr,"CanineModel"),hXr.forEach(t),Wso=r(o4e," (Canine model)"),o4e.forEach(t),Hso=i(M),gp=n(M,"LI",{});var r4e=s(gp);rre=n(r4e,"STRONG",{});var pXr=s(rre);Uso=r(pXr,"clip"),pXr.forEach(t),Jso=r(r4e," \u2014 "),LB=n(r4e,"A",{href:!0});var _Xr=s(LB);Yso=r(_Xr,"CLIPModel"),_Xr.forEach(t),Kso=r(r4e," (CLIP model)"),r4e.forEach(t),Zso=i(M),hp=n(M,"LI",{});var t4e=s(hp);tre=n(t4e,"STRONG",{});var uXr=s(tre);elo=r(uXr,"convbert"),uXr.forEach(t),olo=r(t4e," \u2014 "),xB=n(t4e,"A",{href:!0});var bXr=s(xB);rlo=r(bXr,"ConvBertModel"),bXr.forEach(t),tlo=r(t4e," (ConvBERT model)"),t4e.forEach(t),alo=i(M),pp=n(M,"LI",{});var a4e=s(pp);are=n(a4e,"STRONG",{});var FXr=s(are);nlo=r(FXr,"convnext"),FXr.forEach(t),slo=r(a4e," \u2014 "),kB=n(a4e,"A",{href:!0});var vXr=s(kB);llo=r(vXr,"ConvNextModel"),vXr.forEach(t),ilo=r(a4e," (ConvNext model)"),a4e.forEach(t),dlo=i(M),_p=n(M,"LI",{});var n4e=s(_p);nre=n(n4e,"STRONG",{});var TXr=s(nre);clo=r(TXr,"ctrl"),TXr.forEach(t),flo=r(n4e," \u2014 "),SB=n(n4e,"A",{href:!0});var MXr=s(SB);mlo=r(MXr,"CTRLModel"),MXr.forEach(t),glo=r(n4e," (CTRL model)"),n4e.forEach(t),hlo=i(M),up=n(M,"LI",{});var s4e=s(up);sre=n(s4e,"STRONG",{});var EXr=s(sre);plo=r(EXr,"data2vec-audio"),EXr.forEach(t),_lo=r(s4e," \u2014 "),RB=n(s4e,"A",{href:!0});var CXr=s(RB);ulo=r(CXr,"Data2VecAudioModel"),CXr.forEach(t),blo=r(s4e," (Data2VecAudio model)"),s4e.forEach(t),Flo=i(M),bp=n(M,"LI",{});var l4e=s(bp);lre=n(l4e,"STRONG",{});var wXr=s(lre);vlo=r(wXr,"data2vec-text"),wXr.forEach(t),Tlo=r(l4e," \u2014 "),BB=n(l4e,"A",{href:!0});var AXr=s(BB);Mlo=r(AXr,"Data2VecTextModel"),AXr.forEach(t),Elo=r(l4e," (Data2VecText model)"),l4e.forEach(t),Clo=i(M),Fp=n(M,"LI",{});var i4e=s(Fp);ire=n(i4e,"STRONG",{});var yXr=s(ire);wlo=r(yXr,"deberta"),yXr.forEach(t),Alo=r(i4e," \u2014 "),PB=n(i4e,"A",{href:!0});var LXr=s(PB);ylo=r(LXr,"DebertaModel"),LXr.forEach(t),Llo=r(i4e," (DeBERTa model)"),i4e.forEach(t),xlo=i(M),vp=n(M,"LI",{});var d4e=s(vp);dre=n(d4e,"STRONG",{});var xXr=s(dre);klo=r(xXr,"deberta-v2"),xXr.forEach(t),Slo=r(d4e," \u2014 "),$B=n(d4e,"A",{href:!0});var kXr=s($B);Rlo=r(kXr,"DebertaV2Model"),kXr.forEach(t),Blo=r(d4e," (DeBERTa-v2 model)"),d4e.forEach(t),Plo=i(M),Tp=n(M,"LI",{});var c4e=s(Tp);cre=n(c4e,"STRONG",{});var SXr=s(cre);$lo=r(SXr,"decision_transformer"),SXr.forEach(t),qlo=r(c4e," \u2014 "),qB=n(c4e,"A",{href:!0});var RXr=s(qB);Ilo=r(RXr,"DecisionTransformerModel"),RXr.forEach(t),jlo=r(c4e," (Decision Transformer model)"),c4e.forEach(t),Nlo=i(M),Mp=n(M,"LI",{});var f4e=s(Mp);fre=n(f4e,"STRONG",{});var BXr=s(fre);Dlo=r(BXr,"deit"),BXr.forEach(t),Glo=r(f4e," \u2014 "),IB=n(f4e,"A",{href:!0});var PXr=s(IB);Olo=r(PXr,"DeiTModel"),PXr.forEach(t),Vlo=r(f4e," (DeiT model)"),f4e.forEach(t),Xlo=i(M),Ep=n(M,"LI",{});var m4e=s(Ep);mre=n(m4e,"STRONG",{});var $Xr=s(mre);zlo=r($Xr,"detr"),$Xr.forEach(t),Qlo=r(m4e," \u2014 "),jB=n(m4e,"A",{href:!0});var qXr=s(jB);Wlo=r(qXr,"DetrModel"),qXr.forEach(t),Hlo=r(m4e," (DETR model)"),m4e.forEach(t),Ulo=i(M),Cp=n(M,"LI",{});var g4e=s(Cp);gre=n(g4e,"STRONG",{});var IXr=s(gre);Jlo=r(IXr,"distilbert"),IXr.forEach(t),Ylo=r(g4e," \u2014 "),NB=n(g4e,"A",{href:!0});var jXr=s(NB);Klo=r(jXr,"DistilBertModel"),jXr.forEach(t),Zlo=r(g4e," (DistilBERT model)"),g4e.forEach(t),eio=i(M),wp=n(M,"LI",{});var h4e=s(wp);hre=n(h4e,"STRONG",{});var NXr=s(hre);oio=r(NXr,"dpr"),NXr.forEach(t),rio=r(h4e," \u2014 "),DB=n(h4e,"A",{href:!0});var DXr=s(DB);tio=r(DXr,"DPRQuestionEncoder"),DXr.forEach(t),aio=r(h4e," (DPR model)"),h4e.forEach(t),nio=i(M),Ap=n(M,"LI",{});var p4e=s(Ap);pre=n(p4e,"STRONG",{});var GXr=s(pre);sio=r(GXr,"dpt"),GXr.forEach(t),lio=r(p4e," \u2014 "),GB=n(p4e,"A",{href:!0});var OXr=s(GB);iio=r(OXr,"DPTModel"),OXr.forEach(t),dio=r(p4e," (DPT model)"),p4e.forEach(t),cio=i(M),yp=n(M,"LI",{});var _4e=s(yp);_re=n(_4e,"STRONG",{});var VXr=s(_re);fio=r(VXr,"electra"),VXr.forEach(t),mio=r(_4e," \u2014 "),OB=n(_4e,"A",{href:!0});var XXr=s(OB);gio=r(XXr,"ElectraModel"),XXr.forEach(t),hio=r(_4e," (ELECTRA model)"),_4e.forEach(t),pio=i(M),Lp=n(M,"LI",{});var u4e=s(Lp);ure=n(u4e,"STRONG",{});var zXr=s(ure);_io=r(zXr,"flaubert"),zXr.forEach(t),uio=r(u4e," \u2014 "),VB=n(u4e,"A",{href:!0});var QXr=s(VB);bio=r(QXr,"FlaubertModel"),QXr.forEach(t),Fio=r(u4e," (FlauBERT model)"),u4e.forEach(t),vio=i(M),xp=n(M,"LI",{});var b4e=s(xp);bre=n(b4e,"STRONG",{});var WXr=s(bre);Tio=r(WXr,"fnet"),WXr.forEach(t),Mio=r(b4e," \u2014 "),XB=n(b4e,"A",{href:!0});var HXr=s(XB);Eio=r(HXr,"FNetModel"),HXr.forEach(t),Cio=r(b4e," (FNet model)"),b4e.forEach(t),wio=i(M),kp=n(M,"LI",{});var F4e=s(kp);Fre=n(F4e,"STRONG",{});var UXr=s(Fre);Aio=r(UXr,"fsmt"),UXr.forEach(t),yio=r(F4e," \u2014 "),zB=n(F4e,"A",{href:!0});var JXr=s(zB);Lio=r(JXr,"FSMTModel"),JXr.forEach(t),xio=r(F4e," (FairSeq Machine-Translation model)"),F4e.forEach(t),kio=i(M),Xs=n(M,"LI",{});var C9=s(Xs);vre=n(C9,"STRONG",{});var YXr=s(vre);Sio=r(YXr,"funnel"),YXr.forEach(t),Rio=r(C9," \u2014 "),QB=n(C9,"A",{href:!0});var KXr=s(QB);Bio=r(KXr,"FunnelModel"),KXr.forEach(t),Pio=r(C9," or "),WB=n(C9,"A",{href:!0});var ZXr=s(WB);$io=r(ZXr,"FunnelBaseModel"),ZXr.forEach(t),qio=r(C9," (Funnel Transformer model)"),C9.forEach(t),Iio=i(M),Sp=n(M,"LI",{});var v4e=s(Sp);Tre=n(v4e,"STRONG",{});var ezr=s(Tre);jio=r(ezr,"glpn"),ezr.forEach(t),Nio=r(v4e," \u2014 "),HB=n(v4e,"A",{href:!0});var ozr=s(HB);Dio=r(ozr,"GLPNModel"),ozr.forEach(t),Gio=r(v4e," (GLPN model)"),v4e.forEach(t),Oio=i(M),Rp=n(M,"LI",{});var T4e=s(Rp);Mre=n(T4e,"STRONG",{});var rzr=s(Mre);Vio=r(rzr,"gpt2"),rzr.forEach(t),Xio=r(T4e," \u2014 "),UB=n(T4e,"A",{href:!0});var tzr=s(UB);zio=r(tzr,"GPT2Model"),tzr.forEach(t),Qio=r(T4e," (OpenAI GPT-2 model)"),T4e.forEach(t),Wio=i(M),Bp=n(M,"LI",{});var M4e=s(Bp);Ere=n(M4e,"STRONG",{});var azr=s(Ere);Hio=r(azr,"gpt_neo"),azr.forEach(t),Uio=r(M4e," \u2014 "),JB=n(M4e,"A",{href:!0});var nzr=s(JB);Jio=r(nzr,"GPTNeoModel"),nzr.forEach(t),Yio=r(M4e," (GPT Neo model)"),M4e.forEach(t),Kio=i(M),Pp=n(M,"LI",{});var E4e=s(Pp);Cre=n(E4e,"STRONG",{});var szr=s(Cre);Zio=r(szr,"gptj"),szr.forEach(t),edo=r(E4e," \u2014 "),YB=n(E4e,"A",{href:!0});var lzr=s(YB);odo=r(lzr,"GPTJModel"),lzr.forEach(t),rdo=r(E4e," (GPT-J model)"),E4e.forEach(t),tdo=i(M),$p=n(M,"LI",{});var C4e=s($p);wre=n(C4e,"STRONG",{});var izr=s(wre);ado=r(izr,"hubert"),izr.forEach(t),ndo=r(C4e," \u2014 "),KB=n(C4e,"A",{href:!0});var dzr=s(KB);sdo=r(dzr,"HubertModel"),dzr.forEach(t),ldo=r(C4e," (Hubert model)"),C4e.forEach(t),ido=i(M),qp=n(M,"LI",{});var w4e=s(qp);Are=n(w4e,"STRONG",{});var czr=s(Are);ddo=r(czr,"ibert"),czr.forEach(t),cdo=r(w4e," \u2014 "),ZB=n(w4e,"A",{href:!0});var fzr=s(ZB);fdo=r(fzr,"IBertModel"),fzr.forEach(t),mdo=r(w4e," (I-BERT model)"),w4e.forEach(t),gdo=i(M),Ip=n(M,"LI",{});var A4e=s(Ip);yre=n(A4e,"STRONG",{});var mzr=s(yre);hdo=r(mzr,"imagegpt"),mzr.forEach(t),pdo=r(A4e," \u2014 "),eP=n(A4e,"A",{href:!0});var gzr=s(eP);_do=r(gzr,"ImageGPTModel"),gzr.forEach(t),udo=r(A4e," (ImageGPT model)"),A4e.forEach(t),bdo=i(M),jp=n(M,"LI",{});var y4e=s(jp);Lre=n(y4e,"STRONG",{});var hzr=s(Lre);Fdo=r(hzr,"layoutlm"),hzr.forEach(t),vdo=r(y4e," \u2014 "),oP=n(y4e,"A",{href:!0});var pzr=s(oP);Tdo=r(pzr,"LayoutLMModel"),pzr.forEach(t),Mdo=r(y4e," (LayoutLM model)"),y4e.forEach(t),Edo=i(M),Np=n(M,"LI",{});var L4e=s(Np);xre=n(L4e,"STRONG",{});var _zr=s(xre);Cdo=r(_zr,"layoutlmv2"),_zr.forEach(t),wdo=r(L4e," \u2014 "),rP=n(L4e,"A",{href:!0});var uzr=s(rP);Ado=r(uzr,"LayoutLMv2Model"),uzr.forEach(t),ydo=r(L4e," (LayoutLMv2 model)"),L4e.forEach(t),Ldo=i(M),Dp=n(M,"LI",{});var x4e=s(Dp);kre=n(x4e,"STRONG",{});var bzr=s(kre);xdo=r(bzr,"led"),bzr.forEach(t),kdo=r(x4e," \u2014 "),tP=n(x4e,"A",{href:!0});var Fzr=s(tP);Sdo=r(Fzr,"LEDModel"),Fzr.forEach(t),Rdo=r(x4e," (LED model)"),x4e.forEach(t),Bdo=i(M),Gp=n(M,"LI",{});var k4e=s(Gp);Sre=n(k4e,"STRONG",{});var vzr=s(Sre);Pdo=r(vzr,"longformer"),vzr.forEach(t),$do=r(k4e," \u2014 "),aP=n(k4e,"A",{href:!0});var Tzr=s(aP);qdo=r(Tzr,"LongformerModel"),Tzr.forEach(t),Ido=r(k4e," (Longformer model)"),k4e.forEach(t),jdo=i(M),Op=n(M,"LI",{});var S4e=s(Op);Rre=n(S4e,"STRONG",{});var Mzr=s(Rre);Ndo=r(Mzr,"luke"),Mzr.forEach(t),Ddo=r(S4e," \u2014 "),nP=n(S4e,"A",{href:!0});var Ezr=s(nP);Gdo=r(Ezr,"LukeModel"),Ezr.forEach(t),Odo=r(S4e," (LUKE model)"),S4e.forEach(t),Vdo=i(M),Vp=n(M,"LI",{});var R4e=s(Vp);Bre=n(R4e,"STRONG",{});var Czr=s(Bre);Xdo=r(Czr,"lxmert"),Czr.forEach(t),zdo=r(R4e," \u2014 "),sP=n(R4e,"A",{href:!0});var wzr=s(sP);Qdo=r(wzr,"LxmertModel"),wzr.forEach(t),Wdo=r(R4e," (LXMERT model)"),R4e.forEach(t),Hdo=i(M),Xp=n(M,"LI",{});var B4e=s(Xp);Pre=n(B4e,"STRONG",{});var Azr=s(Pre);Udo=r(Azr,"m2m_100"),Azr.forEach(t),Jdo=r(B4e," \u2014 "),lP=n(B4e,"A",{href:!0});var yzr=s(lP);Ydo=r(yzr,"M2M100Model"),yzr.forEach(t),Kdo=r(B4e," (M2M100 model)"),B4e.forEach(t),Zdo=i(M),zp=n(M,"LI",{});var P4e=s(zp);$re=n(P4e,"STRONG",{});var Lzr=s($re);eco=r(Lzr,"marian"),Lzr.forEach(t),oco=r(P4e," \u2014 "),iP=n(P4e,"A",{href:!0});var xzr=s(iP);rco=r(xzr,"MarianModel"),xzr.forEach(t),tco=r(P4e," (Marian model)"),P4e.forEach(t),aco=i(M),Qp=n(M,"LI",{});var $4e=s(Qp);qre=n($4e,"STRONG",{});var kzr=s(qre);nco=r(kzr,"maskformer"),kzr.forEach(t),sco=r($4e," \u2014 "),dP=n($4e,"A",{href:!0});var Szr=s(dP);lco=r(Szr,"MaskFormerModel"),Szr.forEach(t),ico=r($4e," (MaskFormer model)"),$4e.forEach(t),dco=i(M),Wp=n(M,"LI",{});var q4e=s(Wp);Ire=n(q4e,"STRONG",{});var Rzr=s(Ire);cco=r(Rzr,"mbart"),Rzr.forEach(t),fco=r(q4e," \u2014 "),cP=n(q4e,"A",{href:!0});var Bzr=s(cP);mco=r(Bzr,"MBartModel"),Bzr.forEach(t),gco=r(q4e," (mBART model)"),q4e.forEach(t),hco=i(M),Hp=n(M,"LI",{});var I4e=s(Hp);jre=n(I4e,"STRONG",{});var Pzr=s(jre);pco=r(Pzr,"megatron-bert"),Pzr.forEach(t),_co=r(I4e," \u2014 "),fP=n(I4e,"A",{href:!0});var $zr=s(fP);uco=r($zr,"MegatronBertModel"),$zr.forEach(t),bco=r(I4e," (MegatronBert model)"),I4e.forEach(t),Fco=i(M),Up=n(M,"LI",{});var j4e=s(Up);Nre=n(j4e,"STRONG",{});var qzr=s(Nre);vco=r(qzr,"mobilebert"),qzr.forEach(t),Tco=r(j4e," \u2014 "),mP=n(j4e,"A",{href:!0});var Izr=s(mP);Mco=r(Izr,"MobileBertModel"),Izr.forEach(t),Eco=r(j4e," (MobileBERT model)"),j4e.forEach(t),Cco=i(M),Jp=n(M,"LI",{});var N4e=s(Jp);Dre=n(N4e,"STRONG",{});var jzr=s(Dre);wco=r(jzr,"mpnet"),jzr.forEach(t),Aco=r(N4e," \u2014 "),gP=n(N4e,"A",{href:!0});var Nzr=s(gP);yco=r(Nzr,"MPNetModel"),Nzr.forEach(t),Lco=r(N4e," (MPNet model)"),N4e.forEach(t),xco=i(M),Yp=n(M,"LI",{});var D4e=s(Yp);Gre=n(D4e,"STRONG",{});var Dzr=s(Gre);kco=r(Dzr,"mt5"),Dzr.forEach(t),Sco=r(D4e," \u2014 "),hP=n(D4e,"A",{href:!0});var Gzr=s(hP);Rco=r(Gzr,"MT5Model"),Gzr.forEach(t),Bco=r(D4e," (mT5 model)"),D4e.forEach(t),Pco=i(M),Kp=n(M,"LI",{});var G4e=s(Kp);Ore=n(G4e,"STRONG",{});var Ozr=s(Ore);$co=r(Ozr,"nystromformer"),Ozr.forEach(t),qco=r(G4e," \u2014 "),pP=n(G4e,"A",{href:!0});var Vzr=s(pP);Ico=r(Vzr,"NystromformerModel"),Vzr.forEach(t),jco=r(G4e," (Nystromformer model)"),G4e.forEach(t),Nco=i(M),Zp=n(M,"LI",{});var O4e=s(Zp);Vre=n(O4e,"STRONG",{});var Xzr=s(Vre);Dco=r(Xzr,"openai-gpt"),Xzr.forEach(t),Gco=r(O4e," \u2014 "),_P=n(O4e,"A",{href:!0});var zzr=s(_P);Oco=r(zzr,"OpenAIGPTModel"),zzr.forEach(t),Vco=r(O4e," (OpenAI GPT model)"),O4e.forEach(t),Xco=i(M),e_=n(M,"LI",{});var V4e=s(e_);Xre=n(V4e,"STRONG",{});var Qzr=s(Xre);zco=r(Qzr,"pegasus"),Qzr.forEach(t),Qco=r(V4e," \u2014 "),uP=n(V4e,"A",{href:!0});var Wzr=s(uP);Wco=r(Wzr,"PegasusModel"),Wzr.forEach(t),Hco=r(V4e," (Pegasus model)"),V4e.forEach(t),Uco=i(M),o_=n(M,"LI",{});var X4e=s(o_);zre=n(X4e,"STRONG",{});var Hzr=s(zre);Jco=r(Hzr,"perceiver"),Hzr.forEach(t),Yco=r(X4e," \u2014 "),bP=n(X4e,"A",{href:!0});var Uzr=s(bP);Kco=r(Uzr,"PerceiverModel"),Uzr.forEach(t),Zco=r(X4e," (Perceiver model)"),X4e.forEach(t),efo=i(M),r_=n(M,"LI",{});var z4e=s(r_);Qre=n(z4e,"STRONG",{});var Jzr=s(Qre);ofo=r(Jzr,"plbart"),Jzr.forEach(t),rfo=r(z4e," \u2014 "),FP=n(z4e,"A",{href:!0});var Yzr=s(FP);tfo=r(Yzr,"PLBartModel"),Yzr.forEach(t),afo=r(z4e," (PLBart model)"),z4e.forEach(t),nfo=i(M),t_=n(M,"LI",{});var Q4e=s(t_);Wre=n(Q4e,"STRONG",{});var Kzr=s(Wre);sfo=r(Kzr,"poolformer"),Kzr.forEach(t),lfo=r(Q4e," \u2014 "),vP=n(Q4e,"A",{href:!0});var Zzr=s(vP);ifo=r(Zzr,"PoolFormerModel"),Zzr.forEach(t),dfo=r(Q4e," (PoolFormer model)"),Q4e.forEach(t),cfo=i(M),a_=n(M,"LI",{});var W4e=s(a_);Hre=n(W4e,"STRONG",{});var eQr=s(Hre);ffo=r(eQr,"prophetnet"),eQr.forEach(t),mfo=r(W4e," \u2014 "),TP=n(W4e,"A",{href:!0});var oQr=s(TP);gfo=r(oQr,"ProphetNetModel"),oQr.forEach(t),hfo=r(W4e," (ProphetNet model)"),W4e.forEach(t),pfo=i(M),n_=n(M,"LI",{});var H4e=s(n_);Ure=n(H4e,"STRONG",{});var rQr=s(Ure);_fo=r(rQr,"qdqbert"),rQr.forEach(t),ufo=r(H4e," \u2014 "),MP=n(H4e,"A",{href:!0});var tQr=s(MP);bfo=r(tQr,"QDQBertModel"),tQr.forEach(t),Ffo=r(H4e," (QDQBert model)"),H4e.forEach(t),vfo=i(M),s_=n(M,"LI",{});var U4e=s(s_);Jre=n(U4e,"STRONG",{});var aQr=s(Jre);Tfo=r(aQr,"reformer"),aQr.forEach(t),Mfo=r(U4e," \u2014 "),EP=n(U4e,"A",{href:!0});var nQr=s(EP);Efo=r(nQr,"ReformerModel"),nQr.forEach(t),Cfo=r(U4e," (Reformer model)"),U4e.forEach(t),wfo=i(M),l_=n(M,"LI",{});var J4e=s(l_);Yre=n(J4e,"STRONG",{});var sQr=s(Yre);Afo=r(sQr,"rembert"),sQr.forEach(t),yfo=r(J4e," \u2014 "),CP=n(J4e,"A",{href:!0});var lQr=s(CP);Lfo=r(lQr,"RemBertModel"),lQr.forEach(t),xfo=r(J4e," (RemBERT model)"),J4e.forEach(t),kfo=i(M),i_=n(M,"LI",{});var Y4e=s(i_);Kre=n(Y4e,"STRONG",{});var iQr=s(Kre);Sfo=r(iQr,"resnet"),iQr.forEach(t),Rfo=r(Y4e," \u2014 "),wP=n(Y4e,"A",{href:!0});var dQr=s(wP);Bfo=r(dQr,"ResNetModel"),dQr.forEach(t),Pfo=r(Y4e," (ResNet model)"),Y4e.forEach(t),$fo=i(M),d_=n(M,"LI",{});var K4e=s(d_);Zre=n(K4e,"STRONG",{});var cQr=s(Zre);qfo=r(cQr,"retribert"),cQr.forEach(t),Ifo=r(K4e," \u2014 "),AP=n(K4e,"A",{href:!0});var fQr=s(AP);jfo=r(fQr,"RetriBertModel"),fQr.forEach(t),Nfo=r(K4e," (RetriBERT model)"),K4e.forEach(t),Dfo=i(M),c_=n(M,"LI",{});var Z4e=s(c_);ete=n(Z4e,"STRONG",{});var mQr=s(ete);Gfo=r(mQr,"roberta"),mQr.forEach(t),Ofo=r(Z4e," \u2014 "),yP=n(Z4e,"A",{href:!0});var gQr=s(yP);Vfo=r(gQr,"RobertaModel"),gQr.forEach(t),Xfo=r(Z4e," (RoBERTa model)"),Z4e.forEach(t),zfo=i(M),f_=n(M,"LI",{});var eEe=s(f_);ote=n(eEe,"STRONG",{});var hQr=s(ote);Qfo=r(hQr,"roformer"),hQr.forEach(t),Wfo=r(eEe," \u2014 "),LP=n(eEe,"A",{href:!0});var pQr=s(LP);Hfo=r(pQr,"RoFormerModel"),pQr.forEach(t),Ufo=r(eEe," (RoFormer model)"),eEe.forEach(t),Jfo=i(M),m_=n(M,"LI",{});var oEe=s(m_);rte=n(oEe,"STRONG",{});var _Qr=s(rte);Yfo=r(_Qr,"segformer"),_Qr.forEach(t),Kfo=r(oEe," \u2014 "),xP=n(oEe,"A",{href:!0});var uQr=s(xP);Zfo=r(uQr,"SegformerModel"),uQr.forEach(t),emo=r(oEe," (SegFormer model)"),oEe.forEach(t),omo=i(M),g_=n(M,"LI",{});var rEe=s(g_);tte=n(rEe,"STRONG",{});var bQr=s(tte);rmo=r(bQr,"sew"),bQr.forEach(t),tmo=r(rEe," \u2014 "),kP=n(rEe,"A",{href:!0});var FQr=s(kP);amo=r(FQr,"SEWModel"),FQr.forEach(t),nmo=r(rEe," (SEW model)"),rEe.forEach(t),smo=i(M),h_=n(M,"LI",{});var tEe=s(h_);ate=n(tEe,"STRONG",{});var vQr=s(ate);lmo=r(vQr,"sew-d"),vQr.forEach(t),imo=r(tEe," \u2014 "),SP=n(tEe,"A",{href:!0});var TQr=s(SP);dmo=r(TQr,"SEWDModel"),TQr.forEach(t),cmo=r(tEe," (SEW-D model)"),tEe.forEach(t),fmo=i(M),p_=n(M,"LI",{});var aEe=s(p_);nte=n(aEe,"STRONG",{});var MQr=s(nte);mmo=r(MQr,"speech_to_text"),MQr.forEach(t),gmo=r(aEe," \u2014 "),RP=n(aEe,"A",{href:!0});var EQr=s(RP);hmo=r(EQr,"Speech2TextModel"),EQr.forEach(t),pmo=r(aEe," (Speech2Text model)"),aEe.forEach(t),_mo=i(M),__=n(M,"LI",{});var nEe=s(__);ste=n(nEe,"STRONG",{});var CQr=s(ste);umo=r(CQr,"splinter"),CQr.forEach(t),bmo=r(nEe," \u2014 "),BP=n(nEe,"A",{href:!0});var wQr=s(BP);Fmo=r(wQr,"SplinterModel"),wQr.forEach(t),vmo=r(nEe," (Splinter model)"),nEe.forEach(t),Tmo=i(M),u_=n(M,"LI",{});var sEe=s(u_);lte=n(sEe,"STRONG",{});var AQr=s(lte);Mmo=r(AQr,"squeezebert"),AQr.forEach(t),Emo=r(sEe," \u2014 "),PP=n(sEe,"A",{href:!0});var yQr=s(PP);Cmo=r(yQr,"SqueezeBertModel"),yQr.forEach(t),wmo=r(sEe," (SqueezeBERT model)"),sEe.forEach(t),Amo=i(M),b_=n(M,"LI",{});var lEe=s(b_);ite=n(lEe,"STRONG",{});var LQr=s(ite);ymo=r(LQr,"swin"),LQr.forEach(t),Lmo=r(lEe," \u2014 "),$P=n(lEe,"A",{href:!0});var xQr=s($P);xmo=r(xQr,"SwinModel"),xQr.forEach(t),kmo=r(lEe," (Swin model)"),lEe.forEach(t),Smo=i(M),F_=n(M,"LI",{});var iEe=s(F_);dte=n(iEe,"STRONG",{});var kQr=s(dte);Rmo=r(kQr,"t5"),kQr.forEach(t),Bmo=r(iEe," \u2014 "),qP=n(iEe,"A",{href:!0});var SQr=s(qP);Pmo=r(SQr,"T5Model"),SQr.forEach(t),$mo=r(iEe," (T5 model)"),iEe.forEach(t),qmo=i(M),v_=n(M,"LI",{});var dEe=s(v_);cte=n(dEe,"STRONG",{});var RQr=s(cte);Imo=r(RQr,"tapas"),RQr.forEach(t),jmo=r(dEe," \u2014 "),IP=n(dEe,"A",{href:!0});var BQr=s(IP);Nmo=r(BQr,"TapasModel"),BQr.forEach(t),Dmo=r(dEe," (TAPAS model)"),dEe.forEach(t),Gmo=i(M),T_=n(M,"LI",{});var cEe=s(T_);fte=n(cEe,"STRONG",{});var PQr=s(fte);Omo=r(PQr,"transfo-xl"),PQr.forEach(t),Vmo=r(cEe," \u2014 "),jP=n(cEe,"A",{href:!0});var $Qr=s(jP);Xmo=r($Qr,"TransfoXLModel"),$Qr.forEach(t),zmo=r(cEe," (Transformer-XL model)"),cEe.forEach(t),Qmo=i(M),M_=n(M,"LI",{});var fEe=s(M_);mte=n(fEe,"STRONG",{});var qQr=s(mte);Wmo=r(qQr,"unispeech"),qQr.forEach(t),Hmo=r(fEe," \u2014 "),NP=n(fEe,"A",{href:!0});var IQr=s(NP);Umo=r(IQr,"UniSpeechModel"),IQr.forEach(t),Jmo=r(fEe," (UniSpeech model)"),fEe.forEach(t),Ymo=i(M),E_=n(M,"LI",{});var mEe=s(E_);gte=n(mEe,"STRONG",{});var jQr=s(gte);Kmo=r(jQr,"unispeech-sat"),jQr.forEach(t),Zmo=r(mEe," \u2014 "),DP=n(mEe,"A",{href:!0});var NQr=s(DP);ego=r(NQr,"UniSpeechSatModel"),NQr.forEach(t),ogo=r(mEe," (UniSpeechSat model)"),mEe.forEach(t),rgo=i(M),C_=n(M,"LI",{});var gEe=s(C_);hte=n(gEe,"STRONG",{});var DQr=s(hte);tgo=r(DQr,"van"),DQr.forEach(t),ago=r(gEe," \u2014 "),GP=n(gEe,"A",{href:!0});var GQr=s(GP);ngo=r(GQr,"VanModel"),GQr.forEach(t),sgo=r(gEe," (VAN model)"),gEe.forEach(t),lgo=i(M),w_=n(M,"LI",{});var hEe=s(w_);pte=n(hEe,"STRONG",{});var OQr=s(pte);igo=r(OQr,"vilt"),OQr.forEach(t),dgo=r(hEe," \u2014 "),OP=n(hEe,"A",{href:!0});var VQr=s(OP);cgo=r(VQr,"ViltModel"),VQr.forEach(t),fgo=r(hEe," (ViLT model)"),hEe.forEach(t),mgo=i(M),A_=n(M,"LI",{});var pEe=s(A_);_te=n(pEe,"STRONG",{});var XQr=s(_te);ggo=r(XQr,"vision-text-dual-encoder"),XQr.forEach(t),hgo=r(pEe," \u2014 "),VP=n(pEe,"A",{href:!0});var zQr=s(VP);pgo=r(zQr,"VisionTextDualEncoderModel"),zQr.forEach(t),_go=r(pEe," (VisionTextDualEncoder model)"),pEe.forEach(t),ugo=i(M),y_=n(M,"LI",{});var _Ee=s(y_);ute=n(_Ee,"STRONG",{});var QQr=s(ute);bgo=r(QQr,"visual_bert"),QQr.forEach(t),Fgo=r(_Ee," \u2014 "),XP=n(_Ee,"A",{href:!0});var WQr=s(XP);vgo=r(WQr,"VisualBertModel"),WQr.forEach(t),Tgo=r(_Ee," (VisualBert model)"),_Ee.forEach(t),Mgo=i(M),L_=n(M,"LI",{});var uEe=s(L_);bte=n(uEe,"STRONG",{});var HQr=s(bte);Ego=r(HQr,"vit"),HQr.forEach(t),Cgo=r(uEe," \u2014 "),zP=n(uEe,"A",{href:!0});var UQr=s(zP);wgo=r(UQr,"ViTModel"),UQr.forEach(t),Ago=r(uEe," (ViT model)"),uEe.forEach(t),ygo=i(M),x_=n(M,"LI",{});var bEe=s(x_);Fte=n(bEe,"STRONG",{});var JQr=s(Fte);Lgo=r(JQr,"vit_mae"),JQr.forEach(t),xgo=r(bEe," \u2014 "),QP=n(bEe,"A",{href:!0});var YQr=s(QP);kgo=r(YQr,"ViTMAEModel"),YQr.forEach(t),Sgo=r(bEe," (ViTMAE model)"),bEe.forEach(t),Rgo=i(M),k_=n(M,"LI",{});var FEe=s(k_);vte=n(FEe,"STRONG",{});var KQr=s(vte);Bgo=r(KQr,"wav2vec2"),KQr.forEach(t),Pgo=r(FEe," \u2014 "),WP=n(FEe,"A",{href:!0});var ZQr=s(WP);$go=r(ZQr,"Wav2Vec2Model"),ZQr.forEach(t),qgo=r(FEe," (Wav2Vec2 model)"),FEe.forEach(t),Igo=i(M),S_=n(M,"LI",{});var vEe=s(S_);Tte=n(vEe,"STRONG",{});var eWr=s(Tte);jgo=r(eWr,"wavlm"),eWr.forEach(t),Ngo=r(vEe," \u2014 "),HP=n(vEe,"A",{href:!0});var oWr=s(HP);Dgo=r(oWr,"WavLMModel"),oWr.forEach(t),Ggo=r(vEe," (WavLM model)"),vEe.forEach(t),Ogo=i(M),R_=n(M,"LI",{});var TEe=s(R_);Mte=n(TEe,"STRONG",{});var rWr=s(Mte);Vgo=r(rWr,"xglm"),rWr.forEach(t),Xgo=r(TEe," \u2014 "),UP=n(TEe,"A",{href:!0});var tWr=s(UP);zgo=r(tWr,"XGLMModel"),tWr.forEach(t),Qgo=r(TEe," (XGLM model)"),TEe.forEach(t),Wgo=i(M),B_=n(M,"LI",{});var MEe=s(B_);Ete=n(MEe,"STRONG",{});var aWr=s(Ete);Hgo=r(aWr,"xlm"),aWr.forEach(t),Ugo=r(MEe," \u2014 "),JP=n(MEe,"A",{href:!0});var nWr=s(JP);Jgo=r(nWr,"XLMModel"),nWr.forEach(t),Ygo=r(MEe," (XLM model)"),MEe.forEach(t),Kgo=i(M),P_=n(M,"LI",{});var EEe=s(P_);Cte=n(EEe,"STRONG",{});var sWr=s(Cte);Zgo=r(sWr,"xlm-prophetnet"),sWr.forEach(t),eho=r(EEe," \u2014 "),YP=n(EEe,"A",{href:!0});var lWr=s(YP);oho=r(lWr,"XLMProphetNetModel"),lWr.forEach(t),rho=r(EEe," (XLMProphetNet model)"),EEe.forEach(t),tho=i(M),$_=n(M,"LI",{});var CEe=s($_);wte=n(CEe,"STRONG",{});var iWr=s(wte);aho=r(iWr,"xlm-roberta"),iWr.forEach(t),nho=r(CEe," \u2014 "),KP=n(CEe,"A",{href:!0});var dWr=s(KP);sho=r(dWr,"XLMRobertaModel"),dWr.forEach(t),lho=r(CEe," (XLM-RoBERTa model)"),CEe.forEach(t),iho=i(M),q_=n(M,"LI",{});var wEe=s(q_);Ate=n(wEe,"STRONG",{});var cWr=s(Ate);dho=r(cWr,"xlm-roberta-xl"),cWr.forEach(t),cho=r(wEe," \u2014 "),ZP=n(wEe,"A",{href:!0});var fWr=s(ZP);fho=r(fWr,"XLMRobertaXLModel"),fWr.forEach(t),mho=r(wEe," (XLM-RoBERTa-XL model)"),wEe.forEach(t),gho=i(M),I_=n(M,"LI",{});var AEe=s(I_);yte=n(AEe,"STRONG",{});var mWr=s(yte);hho=r(mWr,"xlnet"),mWr.forEach(t),pho=r(AEe," \u2014 "),e$=n(AEe,"A",{href:!0});var gWr=s(e$);_ho=r(gWr,"XLNetModel"),gWr.forEach(t),uho=r(AEe," (XLNet model)"),AEe.forEach(t),bho=i(M),j_=n(M,"LI",{});var yEe=s(j_);Lte=n(yEe,"STRONG",{});var hWr=s(Lte);Fho=r(hWr,"yoso"),hWr.forEach(t),vho=r(yEe," \u2014 "),o$=n(yEe,"A",{href:!0});var pWr=s(o$);Tho=r(pWr,"YosoModel"),pWr.forEach(t),Mho=r(yEe," (YOSO model)"),yEe.forEach(t),M.forEach(t),Eho=i(Vt),N_=n(Vt,"P",{});var LEe=s(N_);Cho=r(LEe,"The model is set in evaluation mode by default using "),xte=n(LEe,"CODE",{});var _Wr=s(xte);who=r(_Wr,"model.eval()"),_Wr.forEach(t),Aho=r(LEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kte=n(LEe,"CODE",{});var uWr=s(kte);yho=r(uWr,"model.train()"),uWr.forEach(t),LEe.forEach(t),Lho=i(Vt),Ste=n(Vt,"P",{});var bWr=s(Ste);xho=r(bWr,"Examples:"),bWr.forEach(t),kho=i(Vt),m(hC.$$.fragment,Vt),Vt.forEach(t),Ys.forEach(t),jRe=i(c),sd=n(c,"H2",{class:!0});var UPe=s(sd);D_=n(UPe,"A",{id:!0,class:!0,href:!0});var FWr=s(D_);Rte=n(FWr,"SPAN",{});var vWr=s(Rte);m(pC.$$.fragment,vWr),vWr.forEach(t),FWr.forEach(t),Sho=i(UPe),Bte=n(UPe,"SPAN",{});var TWr=s(Bte);Rho=r(TWr,"AutoModelForPreTraining"),TWr.forEach(t),UPe.forEach(t),NRe=i(c),Ko=n(c,"DIV",{class:!0});var Zs=s(Ko);m(_C.$$.fragment,Zs),Bho=i(Zs),ld=n(Zs,"P",{});var TU=s(ld);Pho=r(TU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),r$=n(TU,"A",{href:!0});var MWr=s(r$);$ho=r(MWr,"from_pretrained()"),MWr.forEach(t),qho=r(TU," class method or the "),t$=n(TU,"A",{href:!0});var EWr=s(t$);Iho=r(EWr,"from_config()"),EWr.forEach(t),jho=r(TU,` class
method.`),TU.forEach(t),Nho=i(Zs),uC=n(Zs,"P",{});var JPe=s(uC);Dho=r(JPe,"This class cannot be instantiated directly using "),Pte=n(JPe,"CODE",{});var CWr=s(Pte);Gho=r(CWr,"__init__()"),CWr.forEach(t),Oho=r(JPe," (throws an error)."),JPe.forEach(t),Vho=i(Zs),Wr=n(Zs,"DIV",{class:!0});var el=s(Wr);m(bC.$$.fragment,el),Xho=i(el),$te=n(el,"P",{});var wWr=s($te);zho=r(wWr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),wWr.forEach(t),Qho=i(el),id=n(el,"P",{});var MU=s(id);Who=r(MU,`Note:
Loading a model from its configuration file does `),qte=n(MU,"STRONG",{});var AWr=s(qte);Hho=r(AWr,"not"),AWr.forEach(t),Uho=r(MU,` load the model weights. It only affects the
model\u2019s configuration. Use `),a$=n(MU,"A",{href:!0});var yWr=s(a$);Jho=r(yWr,"from_pretrained()"),yWr.forEach(t),Yho=r(MU," to load the model weights."),MU.forEach(t),Kho=i(el),Ite=n(el,"P",{});var LWr=s(Ite);Zho=r(LWr,"Examples:"),LWr.forEach(t),epo=i(el),m(FC.$$.fragment,el),el.forEach(t),opo=i(Zs),je=n(Zs,"DIV",{class:!0});var Xt=s(je);m(vC.$$.fragment,Xt),rpo=i(Xt),jte=n(Xt,"P",{});var xWr=s(jte);tpo=r(xWr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),xWr.forEach(t),apo=i(Xt),Ua=n(Xt,"P",{});var R4=s(Ua);npo=r(R4,"The model class to instantiate is selected based on the "),Nte=n(R4,"CODE",{});var kWr=s(Nte);spo=r(kWr,"model_type"),kWr.forEach(t),lpo=r(R4,` property of the config object (either
passed as an argument or loaded from `),Dte=n(R4,"CODE",{});var SWr=s(Dte);ipo=r(SWr,"pretrained_model_name_or_path"),SWr.forEach(t),dpo=r(R4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gte=n(R4,"CODE",{});var RWr=s(Gte);cpo=r(RWr,"pretrained_model_name_or_path"),RWr.forEach(t),fpo=r(R4,":"),R4.forEach(t),mpo=i(Xt),S=n(Xt,"UL",{});var B=s(S);G_=n(B,"LI",{});var xEe=s(G_);Ote=n(xEe,"STRONG",{});var BWr=s(Ote);gpo=r(BWr,"albert"),BWr.forEach(t),hpo=r(xEe," \u2014 "),n$=n(xEe,"A",{href:!0});var PWr=s(n$);ppo=r(PWr,"AlbertForPreTraining"),PWr.forEach(t),_po=r(xEe," (ALBERT model)"),xEe.forEach(t),upo=i(B),O_=n(B,"LI",{});var kEe=s(O_);Vte=n(kEe,"STRONG",{});var $Wr=s(Vte);bpo=r($Wr,"bart"),$Wr.forEach(t),Fpo=r(kEe," \u2014 "),s$=n(kEe,"A",{href:!0});var qWr=s(s$);vpo=r(qWr,"BartForConditionalGeneration"),qWr.forEach(t),Tpo=r(kEe," (BART model)"),kEe.forEach(t),Mpo=i(B),V_=n(B,"LI",{});var SEe=s(V_);Xte=n(SEe,"STRONG",{});var IWr=s(Xte);Epo=r(IWr,"bert"),IWr.forEach(t),Cpo=r(SEe," \u2014 "),l$=n(SEe,"A",{href:!0});var jWr=s(l$);wpo=r(jWr,"BertForPreTraining"),jWr.forEach(t),Apo=r(SEe," (BERT model)"),SEe.forEach(t),ypo=i(B),X_=n(B,"LI",{});var REe=s(X_);zte=n(REe,"STRONG",{});var NWr=s(zte);Lpo=r(NWr,"big_bird"),NWr.forEach(t),xpo=r(REe," \u2014 "),i$=n(REe,"A",{href:!0});var DWr=s(i$);kpo=r(DWr,"BigBirdForPreTraining"),DWr.forEach(t),Spo=r(REe," (BigBird model)"),REe.forEach(t),Rpo=i(B),z_=n(B,"LI",{});var BEe=s(z_);Qte=n(BEe,"STRONG",{});var GWr=s(Qte);Bpo=r(GWr,"camembert"),GWr.forEach(t),Ppo=r(BEe," \u2014 "),d$=n(BEe,"A",{href:!0});var OWr=s(d$);$po=r(OWr,"CamembertForMaskedLM"),OWr.forEach(t),qpo=r(BEe," (CamemBERT model)"),BEe.forEach(t),Ipo=i(B),Q_=n(B,"LI",{});var PEe=s(Q_);Wte=n(PEe,"STRONG",{});var VWr=s(Wte);jpo=r(VWr,"ctrl"),VWr.forEach(t),Npo=r(PEe," \u2014 "),c$=n(PEe,"A",{href:!0});var XWr=s(c$);Dpo=r(XWr,"CTRLLMHeadModel"),XWr.forEach(t),Gpo=r(PEe," (CTRL model)"),PEe.forEach(t),Opo=i(B),W_=n(B,"LI",{});var $Ee=s(W_);Hte=n($Ee,"STRONG",{});var zWr=s(Hte);Vpo=r(zWr,"data2vec-text"),zWr.forEach(t),Xpo=r($Ee," \u2014 "),f$=n($Ee,"A",{href:!0});var QWr=s(f$);zpo=r(QWr,"Data2VecTextForMaskedLM"),QWr.forEach(t),Qpo=r($Ee," (Data2VecText model)"),$Ee.forEach(t),Wpo=i(B),H_=n(B,"LI",{});var qEe=s(H_);Ute=n(qEe,"STRONG",{});var WWr=s(Ute);Hpo=r(WWr,"deberta"),WWr.forEach(t),Upo=r(qEe," \u2014 "),m$=n(qEe,"A",{href:!0});var HWr=s(m$);Jpo=r(HWr,"DebertaForMaskedLM"),HWr.forEach(t),Ypo=r(qEe," (DeBERTa model)"),qEe.forEach(t),Kpo=i(B),U_=n(B,"LI",{});var IEe=s(U_);Jte=n(IEe,"STRONG",{});var UWr=s(Jte);Zpo=r(UWr,"deberta-v2"),UWr.forEach(t),e_o=r(IEe," \u2014 "),g$=n(IEe,"A",{href:!0});var JWr=s(g$);o_o=r(JWr,"DebertaV2ForMaskedLM"),JWr.forEach(t),r_o=r(IEe," (DeBERTa-v2 model)"),IEe.forEach(t),t_o=i(B),J_=n(B,"LI",{});var jEe=s(J_);Yte=n(jEe,"STRONG",{});var YWr=s(Yte);a_o=r(YWr,"distilbert"),YWr.forEach(t),n_o=r(jEe," \u2014 "),h$=n(jEe,"A",{href:!0});var KWr=s(h$);s_o=r(KWr,"DistilBertForMaskedLM"),KWr.forEach(t),l_o=r(jEe," (DistilBERT model)"),jEe.forEach(t),i_o=i(B),Y_=n(B,"LI",{});var NEe=s(Y_);Kte=n(NEe,"STRONG",{});var ZWr=s(Kte);d_o=r(ZWr,"electra"),ZWr.forEach(t),c_o=r(NEe," \u2014 "),p$=n(NEe,"A",{href:!0});var eHr=s(p$);f_o=r(eHr,"ElectraForPreTraining"),eHr.forEach(t),m_o=r(NEe," (ELECTRA model)"),NEe.forEach(t),g_o=i(B),K_=n(B,"LI",{});var DEe=s(K_);Zte=n(DEe,"STRONG",{});var oHr=s(Zte);h_o=r(oHr,"flaubert"),oHr.forEach(t),p_o=r(DEe," \u2014 "),_$=n(DEe,"A",{href:!0});var rHr=s(_$);__o=r(rHr,"FlaubertWithLMHeadModel"),rHr.forEach(t),u_o=r(DEe," (FlauBERT model)"),DEe.forEach(t),b_o=i(B),Z_=n(B,"LI",{});var GEe=s(Z_);eae=n(GEe,"STRONG",{});var tHr=s(eae);F_o=r(tHr,"fnet"),tHr.forEach(t),v_o=r(GEe," \u2014 "),u$=n(GEe,"A",{href:!0});var aHr=s(u$);T_o=r(aHr,"FNetForPreTraining"),aHr.forEach(t),M_o=r(GEe," (FNet model)"),GEe.forEach(t),E_o=i(B),eu=n(B,"LI",{});var OEe=s(eu);oae=n(OEe,"STRONG",{});var nHr=s(oae);C_o=r(nHr,"fsmt"),nHr.forEach(t),w_o=r(OEe," \u2014 "),b$=n(OEe,"A",{href:!0});var sHr=s(b$);A_o=r(sHr,"FSMTForConditionalGeneration"),sHr.forEach(t),y_o=r(OEe," (FairSeq Machine-Translation model)"),OEe.forEach(t),L_o=i(B),ou=n(B,"LI",{});var VEe=s(ou);rae=n(VEe,"STRONG",{});var lHr=s(rae);x_o=r(lHr,"funnel"),lHr.forEach(t),k_o=r(VEe," \u2014 "),F$=n(VEe,"A",{href:!0});var iHr=s(F$);S_o=r(iHr,"FunnelForPreTraining"),iHr.forEach(t),R_o=r(VEe," (Funnel Transformer model)"),VEe.forEach(t),B_o=i(B),ru=n(B,"LI",{});var XEe=s(ru);tae=n(XEe,"STRONG",{});var dHr=s(tae);P_o=r(dHr,"gpt2"),dHr.forEach(t),$_o=r(XEe," \u2014 "),v$=n(XEe,"A",{href:!0});var cHr=s(v$);q_o=r(cHr,"GPT2LMHeadModel"),cHr.forEach(t),I_o=r(XEe," (OpenAI GPT-2 model)"),XEe.forEach(t),j_o=i(B),tu=n(B,"LI",{});var zEe=s(tu);aae=n(zEe,"STRONG",{});var fHr=s(aae);N_o=r(fHr,"ibert"),fHr.forEach(t),D_o=r(zEe," \u2014 "),T$=n(zEe,"A",{href:!0});var mHr=s(T$);G_o=r(mHr,"IBertForMaskedLM"),mHr.forEach(t),O_o=r(zEe," (I-BERT model)"),zEe.forEach(t),V_o=i(B),au=n(B,"LI",{});var QEe=s(au);nae=n(QEe,"STRONG",{});var gHr=s(nae);X_o=r(gHr,"layoutlm"),gHr.forEach(t),z_o=r(QEe," \u2014 "),M$=n(QEe,"A",{href:!0});var hHr=s(M$);Q_o=r(hHr,"LayoutLMForMaskedLM"),hHr.forEach(t),W_o=r(QEe," (LayoutLM model)"),QEe.forEach(t),H_o=i(B),nu=n(B,"LI",{});var WEe=s(nu);sae=n(WEe,"STRONG",{});var pHr=s(sae);U_o=r(pHr,"longformer"),pHr.forEach(t),J_o=r(WEe," \u2014 "),E$=n(WEe,"A",{href:!0});var _Hr=s(E$);Y_o=r(_Hr,"LongformerForMaskedLM"),_Hr.forEach(t),K_o=r(WEe," (Longformer model)"),WEe.forEach(t),Z_o=i(B),su=n(B,"LI",{});var HEe=s(su);lae=n(HEe,"STRONG",{});var uHr=s(lae);euo=r(uHr,"lxmert"),uHr.forEach(t),ouo=r(HEe," \u2014 "),C$=n(HEe,"A",{href:!0});var bHr=s(C$);ruo=r(bHr,"LxmertForPreTraining"),bHr.forEach(t),tuo=r(HEe," (LXMERT model)"),HEe.forEach(t),auo=i(B),lu=n(B,"LI",{});var UEe=s(lu);iae=n(UEe,"STRONG",{});var FHr=s(iae);nuo=r(FHr,"megatron-bert"),FHr.forEach(t),suo=r(UEe," \u2014 "),w$=n(UEe,"A",{href:!0});var vHr=s(w$);luo=r(vHr,"MegatronBertForPreTraining"),vHr.forEach(t),iuo=r(UEe," (MegatronBert model)"),UEe.forEach(t),duo=i(B),iu=n(B,"LI",{});var JEe=s(iu);dae=n(JEe,"STRONG",{});var THr=s(dae);cuo=r(THr,"mobilebert"),THr.forEach(t),fuo=r(JEe," \u2014 "),A$=n(JEe,"A",{href:!0});var MHr=s(A$);muo=r(MHr,"MobileBertForPreTraining"),MHr.forEach(t),guo=r(JEe," (MobileBERT model)"),JEe.forEach(t),huo=i(B),du=n(B,"LI",{});var YEe=s(du);cae=n(YEe,"STRONG",{});var EHr=s(cae);puo=r(EHr,"mpnet"),EHr.forEach(t),_uo=r(YEe," \u2014 "),y$=n(YEe,"A",{href:!0});var CHr=s(y$);uuo=r(CHr,"MPNetForMaskedLM"),CHr.forEach(t),buo=r(YEe," (MPNet model)"),YEe.forEach(t),Fuo=i(B),cu=n(B,"LI",{});var KEe=s(cu);fae=n(KEe,"STRONG",{});var wHr=s(fae);vuo=r(wHr,"openai-gpt"),wHr.forEach(t),Tuo=r(KEe," \u2014 "),L$=n(KEe,"A",{href:!0});var AHr=s(L$);Muo=r(AHr,"OpenAIGPTLMHeadModel"),AHr.forEach(t),Euo=r(KEe," (OpenAI GPT model)"),KEe.forEach(t),Cuo=i(B),fu=n(B,"LI",{});var ZEe=s(fu);mae=n(ZEe,"STRONG",{});var yHr=s(mae);wuo=r(yHr,"retribert"),yHr.forEach(t),Auo=r(ZEe," \u2014 "),x$=n(ZEe,"A",{href:!0});var LHr=s(x$);yuo=r(LHr,"RetriBertModel"),LHr.forEach(t),Luo=r(ZEe," (RetriBERT model)"),ZEe.forEach(t),xuo=i(B),mu=n(B,"LI",{});var eCe=s(mu);gae=n(eCe,"STRONG",{});var xHr=s(gae);kuo=r(xHr,"roberta"),xHr.forEach(t),Suo=r(eCe," \u2014 "),k$=n(eCe,"A",{href:!0});var kHr=s(k$);Ruo=r(kHr,"RobertaForMaskedLM"),kHr.forEach(t),Buo=r(eCe," (RoBERTa model)"),eCe.forEach(t),Puo=i(B),gu=n(B,"LI",{});var oCe=s(gu);hae=n(oCe,"STRONG",{});var SHr=s(hae);$uo=r(SHr,"squeezebert"),SHr.forEach(t),quo=r(oCe," \u2014 "),S$=n(oCe,"A",{href:!0});var RHr=s(S$);Iuo=r(RHr,"SqueezeBertForMaskedLM"),RHr.forEach(t),juo=r(oCe," (SqueezeBERT model)"),oCe.forEach(t),Nuo=i(B),hu=n(B,"LI",{});var rCe=s(hu);pae=n(rCe,"STRONG",{});var BHr=s(pae);Duo=r(BHr,"t5"),BHr.forEach(t),Guo=r(rCe," \u2014 "),R$=n(rCe,"A",{href:!0});var PHr=s(R$);Ouo=r(PHr,"T5ForConditionalGeneration"),PHr.forEach(t),Vuo=r(rCe," (T5 model)"),rCe.forEach(t),Xuo=i(B),pu=n(B,"LI",{});var tCe=s(pu);_ae=n(tCe,"STRONG",{});var $Hr=s(_ae);zuo=r($Hr,"tapas"),$Hr.forEach(t),Quo=r(tCe," \u2014 "),B$=n(tCe,"A",{href:!0});var qHr=s(B$);Wuo=r(qHr,"TapasForMaskedLM"),qHr.forEach(t),Huo=r(tCe," (TAPAS model)"),tCe.forEach(t),Uuo=i(B),_u=n(B,"LI",{});var aCe=s(_u);uae=n(aCe,"STRONG",{});var IHr=s(uae);Juo=r(IHr,"transfo-xl"),IHr.forEach(t),Yuo=r(aCe," \u2014 "),P$=n(aCe,"A",{href:!0});var jHr=s(P$);Kuo=r(jHr,"TransfoXLLMHeadModel"),jHr.forEach(t),Zuo=r(aCe," (Transformer-XL model)"),aCe.forEach(t),e1o=i(B),uu=n(B,"LI",{});var nCe=s(uu);bae=n(nCe,"STRONG",{});var NHr=s(bae);o1o=r(NHr,"unispeech"),NHr.forEach(t),r1o=r(nCe," \u2014 "),$$=n(nCe,"A",{href:!0});var DHr=s($$);t1o=r(DHr,"UniSpeechForPreTraining"),DHr.forEach(t),a1o=r(nCe," (UniSpeech model)"),nCe.forEach(t),n1o=i(B),bu=n(B,"LI",{});var sCe=s(bu);Fae=n(sCe,"STRONG",{});var GHr=s(Fae);s1o=r(GHr,"unispeech-sat"),GHr.forEach(t),l1o=r(sCe," \u2014 "),q$=n(sCe,"A",{href:!0});var OHr=s(q$);i1o=r(OHr,"UniSpeechSatForPreTraining"),OHr.forEach(t),d1o=r(sCe," (UniSpeechSat model)"),sCe.forEach(t),c1o=i(B),Fu=n(B,"LI",{});var lCe=s(Fu);vae=n(lCe,"STRONG",{});var VHr=s(vae);f1o=r(VHr,"visual_bert"),VHr.forEach(t),m1o=r(lCe," \u2014 "),I$=n(lCe,"A",{href:!0});var XHr=s(I$);g1o=r(XHr,"VisualBertForPreTraining"),XHr.forEach(t),h1o=r(lCe," (VisualBert model)"),lCe.forEach(t),p1o=i(B),vu=n(B,"LI",{});var iCe=s(vu);Tae=n(iCe,"STRONG",{});var zHr=s(Tae);_1o=r(zHr,"vit_mae"),zHr.forEach(t),u1o=r(iCe," \u2014 "),j$=n(iCe,"A",{href:!0});var QHr=s(j$);b1o=r(QHr,"ViTMAEForPreTraining"),QHr.forEach(t),F1o=r(iCe," (ViTMAE model)"),iCe.forEach(t),v1o=i(B),Tu=n(B,"LI",{});var dCe=s(Tu);Mae=n(dCe,"STRONG",{});var WHr=s(Mae);T1o=r(WHr,"wav2vec2"),WHr.forEach(t),M1o=r(dCe," \u2014 "),N$=n(dCe,"A",{href:!0});var HHr=s(N$);E1o=r(HHr,"Wav2Vec2ForPreTraining"),HHr.forEach(t),C1o=r(dCe," (Wav2Vec2 model)"),dCe.forEach(t),w1o=i(B),Mu=n(B,"LI",{});var cCe=s(Mu);Eae=n(cCe,"STRONG",{});var UHr=s(Eae);A1o=r(UHr,"xlm"),UHr.forEach(t),y1o=r(cCe," \u2014 "),D$=n(cCe,"A",{href:!0});var JHr=s(D$);L1o=r(JHr,"XLMWithLMHeadModel"),JHr.forEach(t),x1o=r(cCe," (XLM model)"),cCe.forEach(t),k1o=i(B),Eu=n(B,"LI",{});var fCe=s(Eu);Cae=n(fCe,"STRONG",{});var YHr=s(Cae);S1o=r(YHr,"xlm-roberta"),YHr.forEach(t),R1o=r(fCe," \u2014 "),G$=n(fCe,"A",{href:!0});var KHr=s(G$);B1o=r(KHr,"XLMRobertaForMaskedLM"),KHr.forEach(t),P1o=r(fCe," (XLM-RoBERTa model)"),fCe.forEach(t),$1o=i(B),Cu=n(B,"LI",{});var mCe=s(Cu);wae=n(mCe,"STRONG",{});var ZHr=s(wae);q1o=r(ZHr,"xlm-roberta-xl"),ZHr.forEach(t),I1o=r(mCe," \u2014 "),O$=n(mCe,"A",{href:!0});var eUr=s(O$);j1o=r(eUr,"XLMRobertaXLForMaskedLM"),eUr.forEach(t),N1o=r(mCe," (XLM-RoBERTa-XL model)"),mCe.forEach(t),D1o=i(B),wu=n(B,"LI",{});var gCe=s(wu);Aae=n(gCe,"STRONG",{});var oUr=s(Aae);G1o=r(oUr,"xlnet"),oUr.forEach(t),O1o=r(gCe," \u2014 "),V$=n(gCe,"A",{href:!0});var rUr=s(V$);V1o=r(rUr,"XLNetLMHeadModel"),rUr.forEach(t),X1o=r(gCe," (XLNet model)"),gCe.forEach(t),B.forEach(t),z1o=i(Xt),Au=n(Xt,"P",{});var hCe=s(Au);Q1o=r(hCe,"The model is set in evaluation mode by default using "),yae=n(hCe,"CODE",{});var tUr=s(yae);W1o=r(tUr,"model.eval()"),tUr.forEach(t),H1o=r(hCe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lae=n(hCe,"CODE",{});var aUr=s(Lae);U1o=r(aUr,"model.train()"),aUr.forEach(t),hCe.forEach(t),J1o=i(Xt),xae=n(Xt,"P",{});var nUr=s(xae);Y1o=r(nUr,"Examples:"),nUr.forEach(t),K1o=i(Xt),m(TC.$$.fragment,Xt),Xt.forEach(t),Zs.forEach(t),DRe=i(c),dd=n(c,"H2",{class:!0});var YPe=s(dd);yu=n(YPe,"A",{id:!0,class:!0,href:!0});var sUr=s(yu);kae=n(sUr,"SPAN",{});var lUr=s(kae);m(MC.$$.fragment,lUr),lUr.forEach(t),sUr.forEach(t),Z1o=i(YPe),Sae=n(YPe,"SPAN",{});var iUr=s(Sae);ebo=r(iUr,"AutoModelForCausalLM"),iUr.forEach(t),YPe.forEach(t),GRe=i(c),Zo=n(c,"DIV",{class:!0});var ol=s(Zo);m(EC.$$.fragment,ol),obo=i(ol),cd=n(ol,"P",{});var EU=s(cd);rbo=r(EU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),X$=n(EU,"A",{href:!0});var dUr=s(X$);tbo=r(dUr,"from_pretrained()"),dUr.forEach(t),abo=r(EU," class method or the "),z$=n(EU,"A",{href:!0});var cUr=s(z$);nbo=r(cUr,"from_config()"),cUr.forEach(t),sbo=r(EU,` class
method.`),EU.forEach(t),lbo=i(ol),CC=n(ol,"P",{});var KPe=s(CC);ibo=r(KPe,"This class cannot be instantiated directly using "),Rae=n(KPe,"CODE",{});var fUr=s(Rae);dbo=r(fUr,"__init__()"),fUr.forEach(t),cbo=r(KPe," (throws an error)."),KPe.forEach(t),fbo=i(ol),Hr=n(ol,"DIV",{class:!0});var rl=s(Hr);m(wC.$$.fragment,rl),mbo=i(rl),Bae=n(rl,"P",{});var mUr=s(Bae);gbo=r(mUr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),mUr.forEach(t),hbo=i(rl),fd=n(rl,"P",{});var CU=s(fd);pbo=r(CU,`Note:
Loading a model from its configuration file does `),Pae=n(CU,"STRONG",{});var gUr=s(Pae);_bo=r(gUr,"not"),gUr.forEach(t),ubo=r(CU,` load the model weights. It only affects the
model\u2019s configuration. Use `),Q$=n(CU,"A",{href:!0});var hUr=s(Q$);bbo=r(hUr,"from_pretrained()"),hUr.forEach(t),Fbo=r(CU," to load the model weights."),CU.forEach(t),vbo=i(rl),$ae=n(rl,"P",{});var pUr=s($ae);Tbo=r(pUr,"Examples:"),pUr.forEach(t),Mbo=i(rl),m(AC.$$.fragment,rl),rl.forEach(t),Ebo=i(ol),Ne=n(ol,"DIV",{class:!0});var zt=s(Ne);m(yC.$$.fragment,zt),Cbo=i(zt),qae=n(zt,"P",{});var _Ur=s(qae);wbo=r(_Ur,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),_Ur.forEach(t),Abo=i(zt),Ja=n(zt,"P",{});var B4=s(Ja);ybo=r(B4,"The model class to instantiate is selected based on the "),Iae=n(B4,"CODE",{});var uUr=s(Iae);Lbo=r(uUr,"model_type"),uUr.forEach(t),xbo=r(B4,` property of the config object (either
passed as an argument or loaded from `),jae=n(B4,"CODE",{});var bUr=s(jae);kbo=r(bUr,"pretrained_model_name_or_path"),bUr.forEach(t),Sbo=r(B4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nae=n(B4,"CODE",{});var FUr=s(Nae);Rbo=r(FUr,"pretrained_model_name_or_path"),FUr.forEach(t),Bbo=r(B4,":"),B4.forEach(t),Pbo=i(zt),$=n(zt,"UL",{});var I=s($);Lu=n(I,"LI",{});var pCe=s(Lu);Dae=n(pCe,"STRONG",{});var vUr=s(Dae);$bo=r(vUr,"bart"),vUr.forEach(t),qbo=r(pCe," \u2014 "),W$=n(pCe,"A",{href:!0});var TUr=s(W$);Ibo=r(TUr,"BartForCausalLM"),TUr.forEach(t),jbo=r(pCe," (BART model)"),pCe.forEach(t),Nbo=i(I),xu=n(I,"LI",{});var _Ce=s(xu);Gae=n(_Ce,"STRONG",{});var MUr=s(Gae);Dbo=r(MUr,"bert"),MUr.forEach(t),Gbo=r(_Ce," \u2014 "),H$=n(_Ce,"A",{href:!0});var EUr=s(H$);Obo=r(EUr,"BertLMHeadModel"),EUr.forEach(t),Vbo=r(_Ce," (BERT model)"),_Ce.forEach(t),Xbo=i(I),ku=n(I,"LI",{});var uCe=s(ku);Oae=n(uCe,"STRONG",{});var CUr=s(Oae);zbo=r(CUr,"bert-generation"),CUr.forEach(t),Qbo=r(uCe," \u2014 "),U$=n(uCe,"A",{href:!0});var wUr=s(U$);Wbo=r(wUr,"BertGenerationDecoder"),wUr.forEach(t),Hbo=r(uCe," (Bert Generation model)"),uCe.forEach(t),Ubo=i(I),Su=n(I,"LI",{});var bCe=s(Su);Vae=n(bCe,"STRONG",{});var AUr=s(Vae);Jbo=r(AUr,"big_bird"),AUr.forEach(t),Ybo=r(bCe," \u2014 "),J$=n(bCe,"A",{href:!0});var yUr=s(J$);Kbo=r(yUr,"BigBirdForCausalLM"),yUr.forEach(t),Zbo=r(bCe," (BigBird model)"),bCe.forEach(t),e5o=i(I),Ru=n(I,"LI",{});var FCe=s(Ru);Xae=n(FCe,"STRONG",{});var LUr=s(Xae);o5o=r(LUr,"bigbird_pegasus"),LUr.forEach(t),r5o=r(FCe," \u2014 "),Y$=n(FCe,"A",{href:!0});var xUr=s(Y$);t5o=r(xUr,"BigBirdPegasusForCausalLM"),xUr.forEach(t),a5o=r(FCe," (BigBirdPegasus model)"),FCe.forEach(t),n5o=i(I),Bu=n(I,"LI",{});var vCe=s(Bu);zae=n(vCe,"STRONG",{});var kUr=s(zae);s5o=r(kUr,"blenderbot"),kUr.forEach(t),l5o=r(vCe," \u2014 "),K$=n(vCe,"A",{href:!0});var SUr=s(K$);i5o=r(SUr,"BlenderbotForCausalLM"),SUr.forEach(t),d5o=r(vCe," (Blenderbot model)"),vCe.forEach(t),c5o=i(I),Pu=n(I,"LI",{});var TCe=s(Pu);Qae=n(TCe,"STRONG",{});var RUr=s(Qae);f5o=r(RUr,"blenderbot-small"),RUr.forEach(t),m5o=r(TCe," \u2014 "),Z$=n(TCe,"A",{href:!0});var BUr=s(Z$);g5o=r(BUr,"BlenderbotSmallForCausalLM"),BUr.forEach(t),h5o=r(TCe," (BlenderbotSmall model)"),TCe.forEach(t),p5o=i(I),$u=n(I,"LI",{});var MCe=s($u);Wae=n(MCe,"STRONG",{});var PUr=s(Wae);_5o=r(PUr,"camembert"),PUr.forEach(t),u5o=r(MCe," \u2014 "),eq=n(MCe,"A",{href:!0});var $Ur=s(eq);b5o=r($Ur,"CamembertForCausalLM"),$Ur.forEach(t),F5o=r(MCe," (CamemBERT model)"),MCe.forEach(t),v5o=i(I),qu=n(I,"LI",{});var ECe=s(qu);Hae=n(ECe,"STRONG",{});var qUr=s(Hae);T5o=r(qUr,"ctrl"),qUr.forEach(t),M5o=r(ECe," \u2014 "),oq=n(ECe,"A",{href:!0});var IUr=s(oq);E5o=r(IUr,"CTRLLMHeadModel"),IUr.forEach(t),C5o=r(ECe," (CTRL model)"),ECe.forEach(t),w5o=i(I),Iu=n(I,"LI",{});var CCe=s(Iu);Uae=n(CCe,"STRONG",{});var jUr=s(Uae);A5o=r(jUr,"data2vec-text"),jUr.forEach(t),y5o=r(CCe," \u2014 "),rq=n(CCe,"A",{href:!0});var NUr=s(rq);L5o=r(NUr,"Data2VecTextForCausalLM"),NUr.forEach(t),x5o=r(CCe," (Data2VecText model)"),CCe.forEach(t),k5o=i(I),ju=n(I,"LI",{});var wCe=s(ju);Jae=n(wCe,"STRONG",{});var DUr=s(Jae);S5o=r(DUr,"electra"),DUr.forEach(t),R5o=r(wCe," \u2014 "),tq=n(wCe,"A",{href:!0});var GUr=s(tq);B5o=r(GUr,"ElectraForCausalLM"),GUr.forEach(t),P5o=r(wCe," (ELECTRA model)"),wCe.forEach(t),$5o=i(I),Nu=n(I,"LI",{});var ACe=s(Nu);Yae=n(ACe,"STRONG",{});var OUr=s(Yae);q5o=r(OUr,"gpt2"),OUr.forEach(t),I5o=r(ACe," \u2014 "),aq=n(ACe,"A",{href:!0});var VUr=s(aq);j5o=r(VUr,"GPT2LMHeadModel"),VUr.forEach(t),N5o=r(ACe," (OpenAI GPT-2 model)"),ACe.forEach(t),D5o=i(I),Du=n(I,"LI",{});var yCe=s(Du);Kae=n(yCe,"STRONG",{});var XUr=s(Kae);G5o=r(XUr,"gpt_neo"),XUr.forEach(t),O5o=r(yCe," \u2014 "),nq=n(yCe,"A",{href:!0});var zUr=s(nq);V5o=r(zUr,"GPTNeoForCausalLM"),zUr.forEach(t),X5o=r(yCe," (GPT Neo model)"),yCe.forEach(t),z5o=i(I),Gu=n(I,"LI",{});var LCe=s(Gu);Zae=n(LCe,"STRONG",{});var QUr=s(Zae);Q5o=r(QUr,"gptj"),QUr.forEach(t),W5o=r(LCe," \u2014 "),sq=n(LCe,"A",{href:!0});var WUr=s(sq);H5o=r(WUr,"GPTJForCausalLM"),WUr.forEach(t),U5o=r(LCe," (GPT-J model)"),LCe.forEach(t),J5o=i(I),Ou=n(I,"LI",{});var xCe=s(Ou);ene=n(xCe,"STRONG",{});var HUr=s(ene);Y5o=r(HUr,"marian"),HUr.forEach(t),K5o=r(xCe," \u2014 "),lq=n(xCe,"A",{href:!0});var UUr=s(lq);Z5o=r(UUr,"MarianForCausalLM"),UUr.forEach(t),e2o=r(xCe," (Marian model)"),xCe.forEach(t),o2o=i(I),Vu=n(I,"LI",{});var kCe=s(Vu);one=n(kCe,"STRONG",{});var JUr=s(one);r2o=r(JUr,"mbart"),JUr.forEach(t),t2o=r(kCe," \u2014 "),iq=n(kCe,"A",{href:!0});var YUr=s(iq);a2o=r(YUr,"MBartForCausalLM"),YUr.forEach(t),n2o=r(kCe," (mBART model)"),kCe.forEach(t),s2o=i(I),Xu=n(I,"LI",{});var SCe=s(Xu);rne=n(SCe,"STRONG",{});var KUr=s(rne);l2o=r(KUr,"megatron-bert"),KUr.forEach(t),i2o=r(SCe," \u2014 "),dq=n(SCe,"A",{href:!0});var ZUr=s(dq);d2o=r(ZUr,"MegatronBertForCausalLM"),ZUr.forEach(t),c2o=r(SCe," (MegatronBert model)"),SCe.forEach(t),f2o=i(I),zu=n(I,"LI",{});var RCe=s(zu);tne=n(RCe,"STRONG",{});var eJr=s(tne);m2o=r(eJr,"openai-gpt"),eJr.forEach(t),g2o=r(RCe," \u2014 "),cq=n(RCe,"A",{href:!0});var oJr=s(cq);h2o=r(oJr,"OpenAIGPTLMHeadModel"),oJr.forEach(t),p2o=r(RCe," (OpenAI GPT model)"),RCe.forEach(t),_2o=i(I),Qu=n(I,"LI",{});var BCe=s(Qu);ane=n(BCe,"STRONG",{});var rJr=s(ane);u2o=r(rJr,"pegasus"),rJr.forEach(t),b2o=r(BCe," \u2014 "),fq=n(BCe,"A",{href:!0});var tJr=s(fq);F2o=r(tJr,"PegasusForCausalLM"),tJr.forEach(t),v2o=r(BCe," (Pegasus model)"),BCe.forEach(t),T2o=i(I),Wu=n(I,"LI",{});var PCe=s(Wu);nne=n(PCe,"STRONG",{});var aJr=s(nne);M2o=r(aJr,"plbart"),aJr.forEach(t),E2o=r(PCe," \u2014 "),mq=n(PCe,"A",{href:!0});var nJr=s(mq);C2o=r(nJr,"PLBartForCausalLM"),nJr.forEach(t),w2o=r(PCe," (PLBart model)"),PCe.forEach(t),A2o=i(I),Hu=n(I,"LI",{});var $Ce=s(Hu);sne=n($Ce,"STRONG",{});var sJr=s(sne);y2o=r(sJr,"prophetnet"),sJr.forEach(t),L2o=r($Ce," \u2014 "),gq=n($Ce,"A",{href:!0});var lJr=s(gq);x2o=r(lJr,"ProphetNetForCausalLM"),lJr.forEach(t),k2o=r($Ce," (ProphetNet model)"),$Ce.forEach(t),S2o=i(I),Uu=n(I,"LI",{});var qCe=s(Uu);lne=n(qCe,"STRONG",{});var iJr=s(lne);R2o=r(iJr,"qdqbert"),iJr.forEach(t),B2o=r(qCe," \u2014 "),hq=n(qCe,"A",{href:!0});var dJr=s(hq);P2o=r(dJr,"QDQBertLMHeadModel"),dJr.forEach(t),$2o=r(qCe," (QDQBert model)"),qCe.forEach(t),q2o=i(I),Ju=n(I,"LI",{});var ICe=s(Ju);ine=n(ICe,"STRONG",{});var cJr=s(ine);I2o=r(cJr,"reformer"),cJr.forEach(t),j2o=r(ICe," \u2014 "),pq=n(ICe,"A",{href:!0});var fJr=s(pq);N2o=r(fJr,"ReformerModelWithLMHead"),fJr.forEach(t),D2o=r(ICe," (Reformer model)"),ICe.forEach(t),G2o=i(I),Yu=n(I,"LI",{});var jCe=s(Yu);dne=n(jCe,"STRONG",{});var mJr=s(dne);O2o=r(mJr,"rembert"),mJr.forEach(t),V2o=r(jCe," \u2014 "),_q=n(jCe,"A",{href:!0});var gJr=s(_q);X2o=r(gJr,"RemBertForCausalLM"),gJr.forEach(t),z2o=r(jCe," (RemBERT model)"),jCe.forEach(t),Q2o=i(I),Ku=n(I,"LI",{});var NCe=s(Ku);cne=n(NCe,"STRONG",{});var hJr=s(cne);W2o=r(hJr,"roberta"),hJr.forEach(t),H2o=r(NCe," \u2014 "),uq=n(NCe,"A",{href:!0});var pJr=s(uq);U2o=r(pJr,"RobertaForCausalLM"),pJr.forEach(t),J2o=r(NCe," (RoBERTa model)"),NCe.forEach(t),Y2o=i(I),Zu=n(I,"LI",{});var DCe=s(Zu);fne=n(DCe,"STRONG",{});var _Jr=s(fne);K2o=r(_Jr,"roformer"),_Jr.forEach(t),Z2o=r(DCe," \u2014 "),bq=n(DCe,"A",{href:!0});var uJr=s(bq);eFo=r(uJr,"RoFormerForCausalLM"),uJr.forEach(t),oFo=r(DCe," (RoFormer model)"),DCe.forEach(t),rFo=i(I),e1=n(I,"LI",{});var GCe=s(e1);mne=n(GCe,"STRONG",{});var bJr=s(mne);tFo=r(bJr,"speech_to_text_2"),bJr.forEach(t),aFo=r(GCe," \u2014 "),Fq=n(GCe,"A",{href:!0});var FJr=s(Fq);nFo=r(FJr,"Speech2Text2ForCausalLM"),FJr.forEach(t),sFo=r(GCe," (Speech2Text2 model)"),GCe.forEach(t),lFo=i(I),o1=n(I,"LI",{});var OCe=s(o1);gne=n(OCe,"STRONG",{});var vJr=s(gne);iFo=r(vJr,"transfo-xl"),vJr.forEach(t),dFo=r(OCe," \u2014 "),vq=n(OCe,"A",{href:!0});var TJr=s(vq);cFo=r(TJr,"TransfoXLLMHeadModel"),TJr.forEach(t),fFo=r(OCe," (Transformer-XL model)"),OCe.forEach(t),mFo=i(I),r1=n(I,"LI",{});var VCe=s(r1);hne=n(VCe,"STRONG",{});var MJr=s(hne);gFo=r(MJr,"trocr"),MJr.forEach(t),hFo=r(VCe," \u2014 "),Tq=n(VCe,"A",{href:!0});var EJr=s(Tq);pFo=r(EJr,"TrOCRForCausalLM"),EJr.forEach(t),_Fo=r(VCe," (TrOCR model)"),VCe.forEach(t),uFo=i(I),t1=n(I,"LI",{});var XCe=s(t1);pne=n(XCe,"STRONG",{});var CJr=s(pne);bFo=r(CJr,"xglm"),CJr.forEach(t),FFo=r(XCe," \u2014 "),Mq=n(XCe,"A",{href:!0});var wJr=s(Mq);vFo=r(wJr,"XGLMForCausalLM"),wJr.forEach(t),TFo=r(XCe," (XGLM model)"),XCe.forEach(t),MFo=i(I),a1=n(I,"LI",{});var zCe=s(a1);_ne=n(zCe,"STRONG",{});var AJr=s(_ne);EFo=r(AJr,"xlm"),AJr.forEach(t),CFo=r(zCe," \u2014 "),Eq=n(zCe,"A",{href:!0});var yJr=s(Eq);wFo=r(yJr,"XLMWithLMHeadModel"),yJr.forEach(t),AFo=r(zCe," (XLM model)"),zCe.forEach(t),yFo=i(I),n1=n(I,"LI",{});var QCe=s(n1);une=n(QCe,"STRONG",{});var LJr=s(une);LFo=r(LJr,"xlm-prophetnet"),LJr.forEach(t),xFo=r(QCe," \u2014 "),Cq=n(QCe,"A",{href:!0});var xJr=s(Cq);kFo=r(xJr,"XLMProphetNetForCausalLM"),xJr.forEach(t),SFo=r(QCe," (XLMProphetNet model)"),QCe.forEach(t),RFo=i(I),s1=n(I,"LI",{});var WCe=s(s1);bne=n(WCe,"STRONG",{});var kJr=s(bne);BFo=r(kJr,"xlm-roberta"),kJr.forEach(t),PFo=r(WCe," \u2014 "),wq=n(WCe,"A",{href:!0});var SJr=s(wq);$Fo=r(SJr,"XLMRobertaForCausalLM"),SJr.forEach(t),qFo=r(WCe," (XLM-RoBERTa model)"),WCe.forEach(t),IFo=i(I),l1=n(I,"LI",{});var HCe=s(l1);Fne=n(HCe,"STRONG",{});var RJr=s(Fne);jFo=r(RJr,"xlm-roberta-xl"),RJr.forEach(t),NFo=r(HCe," \u2014 "),Aq=n(HCe,"A",{href:!0});var BJr=s(Aq);DFo=r(BJr,"XLMRobertaXLForCausalLM"),BJr.forEach(t),GFo=r(HCe," (XLM-RoBERTa-XL model)"),HCe.forEach(t),OFo=i(I),i1=n(I,"LI",{});var UCe=s(i1);vne=n(UCe,"STRONG",{});var PJr=s(vne);VFo=r(PJr,"xlnet"),PJr.forEach(t),XFo=r(UCe," \u2014 "),yq=n(UCe,"A",{href:!0});var $Jr=s(yq);zFo=r($Jr,"XLNetLMHeadModel"),$Jr.forEach(t),QFo=r(UCe," (XLNet model)"),UCe.forEach(t),I.forEach(t),WFo=i(zt),d1=n(zt,"P",{});var JCe=s(d1);HFo=r(JCe,"The model is set in evaluation mode by default using "),Tne=n(JCe,"CODE",{});var qJr=s(Tne);UFo=r(qJr,"model.eval()"),qJr.forEach(t),JFo=r(JCe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mne=n(JCe,"CODE",{});var IJr=s(Mne);YFo=r(IJr,"model.train()"),IJr.forEach(t),JCe.forEach(t),KFo=i(zt),Ene=n(zt,"P",{});var jJr=s(Ene);ZFo=r(jJr,"Examples:"),jJr.forEach(t),evo=i(zt),m(LC.$$.fragment,zt),zt.forEach(t),ol.forEach(t),ORe=i(c),md=n(c,"H2",{class:!0});var ZPe=s(md);c1=n(ZPe,"A",{id:!0,class:!0,href:!0});var NJr=s(c1);Cne=n(NJr,"SPAN",{});var DJr=s(Cne);m(xC.$$.fragment,DJr),DJr.forEach(t),NJr.forEach(t),ovo=i(ZPe),wne=n(ZPe,"SPAN",{});var GJr=s(wne);rvo=r(GJr,"AutoModelForMaskedLM"),GJr.forEach(t),ZPe.forEach(t),VRe=i(c),er=n(c,"DIV",{class:!0});var tl=s(er);m(kC.$$.fragment,tl),tvo=i(tl),gd=n(tl,"P",{});var wU=s(gd);avo=r(wU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Lq=n(wU,"A",{href:!0});var OJr=s(Lq);nvo=r(OJr,"from_pretrained()"),OJr.forEach(t),svo=r(wU," class method or the "),xq=n(wU,"A",{href:!0});var VJr=s(xq);lvo=r(VJr,"from_config()"),VJr.forEach(t),ivo=r(wU,` class
method.`),wU.forEach(t),dvo=i(tl),SC=n(tl,"P",{});var e$e=s(SC);cvo=r(e$e,"This class cannot be instantiated directly using "),Ane=n(e$e,"CODE",{});var XJr=s(Ane);fvo=r(XJr,"__init__()"),XJr.forEach(t),mvo=r(e$e," (throws an error)."),e$e.forEach(t),gvo=i(tl),Ur=n(tl,"DIV",{class:!0});var al=s(Ur);m(RC.$$.fragment,al),hvo=i(al),yne=n(al,"P",{});var zJr=s(yne);pvo=r(zJr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),zJr.forEach(t),_vo=i(al),hd=n(al,"P",{});var AU=s(hd);uvo=r(AU,`Note:
Loading a model from its configuration file does `),Lne=n(AU,"STRONG",{});var QJr=s(Lne);bvo=r(QJr,"not"),QJr.forEach(t),Fvo=r(AU,` load the model weights. It only affects the
model\u2019s configuration. Use `),kq=n(AU,"A",{href:!0});var WJr=s(kq);vvo=r(WJr,"from_pretrained()"),WJr.forEach(t),Tvo=r(AU," to load the model weights."),AU.forEach(t),Mvo=i(al),xne=n(al,"P",{});var HJr=s(xne);Evo=r(HJr,"Examples:"),HJr.forEach(t),Cvo=i(al),m(BC.$$.fragment,al),al.forEach(t),wvo=i(tl),De=n(tl,"DIV",{class:!0});var Qt=s(De);m(PC.$$.fragment,Qt),Avo=i(Qt),kne=n(Qt,"P",{});var UJr=s(kne);yvo=r(UJr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),UJr.forEach(t),Lvo=i(Qt),Ya=n(Qt,"P",{});var P4=s(Ya);xvo=r(P4,"The model class to instantiate is selected based on the "),Sne=n(P4,"CODE",{});var JJr=s(Sne);kvo=r(JJr,"model_type"),JJr.forEach(t),Svo=r(P4,` property of the config object (either
passed as an argument or loaded from `),Rne=n(P4,"CODE",{});var YJr=s(Rne);Rvo=r(YJr,"pretrained_model_name_or_path"),YJr.forEach(t),Bvo=r(P4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bne=n(P4,"CODE",{});var KJr=s(Bne);Pvo=r(KJr,"pretrained_model_name_or_path"),KJr.forEach(t),$vo=r(P4,":"),P4.forEach(t),qvo=i(Qt),q=n(Qt,"UL",{});var j=s(q);f1=n(j,"LI",{});var YCe=s(f1);Pne=n(YCe,"STRONG",{});var ZJr=s(Pne);Ivo=r(ZJr,"albert"),ZJr.forEach(t),jvo=r(YCe," \u2014 "),Sq=n(YCe,"A",{href:!0});var eYr=s(Sq);Nvo=r(eYr,"AlbertForMaskedLM"),eYr.forEach(t),Dvo=r(YCe," (ALBERT model)"),YCe.forEach(t),Gvo=i(j),m1=n(j,"LI",{});var KCe=s(m1);$ne=n(KCe,"STRONG",{});var oYr=s($ne);Ovo=r(oYr,"bart"),oYr.forEach(t),Vvo=r(KCe," \u2014 "),Rq=n(KCe,"A",{href:!0});var rYr=s(Rq);Xvo=r(rYr,"BartForConditionalGeneration"),rYr.forEach(t),zvo=r(KCe," (BART model)"),KCe.forEach(t),Qvo=i(j),g1=n(j,"LI",{});var ZCe=s(g1);qne=n(ZCe,"STRONG",{});var tYr=s(qne);Wvo=r(tYr,"bert"),tYr.forEach(t),Hvo=r(ZCe," \u2014 "),Bq=n(ZCe,"A",{href:!0});var aYr=s(Bq);Uvo=r(aYr,"BertForMaskedLM"),aYr.forEach(t),Jvo=r(ZCe," (BERT model)"),ZCe.forEach(t),Yvo=i(j),h1=n(j,"LI",{});var e3e=s(h1);Ine=n(e3e,"STRONG",{});var nYr=s(Ine);Kvo=r(nYr,"big_bird"),nYr.forEach(t),Zvo=r(e3e," \u2014 "),Pq=n(e3e,"A",{href:!0});var sYr=s(Pq);e6o=r(sYr,"BigBirdForMaskedLM"),sYr.forEach(t),o6o=r(e3e," (BigBird model)"),e3e.forEach(t),r6o=i(j),p1=n(j,"LI",{});var o3e=s(p1);jne=n(o3e,"STRONG",{});var lYr=s(jne);t6o=r(lYr,"camembert"),lYr.forEach(t),a6o=r(o3e," \u2014 "),$q=n(o3e,"A",{href:!0});var iYr=s($q);n6o=r(iYr,"CamembertForMaskedLM"),iYr.forEach(t),s6o=r(o3e," (CamemBERT model)"),o3e.forEach(t),l6o=i(j),_1=n(j,"LI",{});var r3e=s(_1);Nne=n(r3e,"STRONG",{});var dYr=s(Nne);i6o=r(dYr,"convbert"),dYr.forEach(t),d6o=r(r3e," \u2014 "),qq=n(r3e,"A",{href:!0});var cYr=s(qq);c6o=r(cYr,"ConvBertForMaskedLM"),cYr.forEach(t),f6o=r(r3e," (ConvBERT model)"),r3e.forEach(t),m6o=i(j),u1=n(j,"LI",{});var t3e=s(u1);Dne=n(t3e,"STRONG",{});var fYr=s(Dne);g6o=r(fYr,"data2vec-text"),fYr.forEach(t),h6o=r(t3e," \u2014 "),Iq=n(t3e,"A",{href:!0});var mYr=s(Iq);p6o=r(mYr,"Data2VecTextForMaskedLM"),mYr.forEach(t),_6o=r(t3e," (Data2VecText model)"),t3e.forEach(t),u6o=i(j),b1=n(j,"LI",{});var a3e=s(b1);Gne=n(a3e,"STRONG",{});var gYr=s(Gne);b6o=r(gYr,"deberta"),gYr.forEach(t),F6o=r(a3e," \u2014 "),jq=n(a3e,"A",{href:!0});var hYr=s(jq);v6o=r(hYr,"DebertaForMaskedLM"),hYr.forEach(t),T6o=r(a3e," (DeBERTa model)"),a3e.forEach(t),M6o=i(j),F1=n(j,"LI",{});var n3e=s(F1);One=n(n3e,"STRONG",{});var pYr=s(One);E6o=r(pYr,"deberta-v2"),pYr.forEach(t),C6o=r(n3e," \u2014 "),Nq=n(n3e,"A",{href:!0});var _Yr=s(Nq);w6o=r(_Yr,"DebertaV2ForMaskedLM"),_Yr.forEach(t),A6o=r(n3e," (DeBERTa-v2 model)"),n3e.forEach(t),y6o=i(j),v1=n(j,"LI",{});var s3e=s(v1);Vne=n(s3e,"STRONG",{});var uYr=s(Vne);L6o=r(uYr,"distilbert"),uYr.forEach(t),x6o=r(s3e," \u2014 "),Dq=n(s3e,"A",{href:!0});var bYr=s(Dq);k6o=r(bYr,"DistilBertForMaskedLM"),bYr.forEach(t),S6o=r(s3e," (DistilBERT model)"),s3e.forEach(t),R6o=i(j),T1=n(j,"LI",{});var l3e=s(T1);Xne=n(l3e,"STRONG",{});var FYr=s(Xne);B6o=r(FYr,"electra"),FYr.forEach(t),P6o=r(l3e," \u2014 "),Gq=n(l3e,"A",{href:!0});var vYr=s(Gq);$6o=r(vYr,"ElectraForMaskedLM"),vYr.forEach(t),q6o=r(l3e," (ELECTRA model)"),l3e.forEach(t),I6o=i(j),M1=n(j,"LI",{});var i3e=s(M1);zne=n(i3e,"STRONG",{});var TYr=s(zne);j6o=r(TYr,"flaubert"),TYr.forEach(t),N6o=r(i3e," \u2014 "),Oq=n(i3e,"A",{href:!0});var MYr=s(Oq);D6o=r(MYr,"FlaubertWithLMHeadModel"),MYr.forEach(t),G6o=r(i3e," (FlauBERT model)"),i3e.forEach(t),O6o=i(j),E1=n(j,"LI",{});var d3e=s(E1);Qne=n(d3e,"STRONG",{});var EYr=s(Qne);V6o=r(EYr,"fnet"),EYr.forEach(t),X6o=r(d3e," \u2014 "),Vq=n(d3e,"A",{href:!0});var CYr=s(Vq);z6o=r(CYr,"FNetForMaskedLM"),CYr.forEach(t),Q6o=r(d3e," (FNet model)"),d3e.forEach(t),W6o=i(j),C1=n(j,"LI",{});var c3e=s(C1);Wne=n(c3e,"STRONG",{});var wYr=s(Wne);H6o=r(wYr,"funnel"),wYr.forEach(t),U6o=r(c3e," \u2014 "),Xq=n(c3e,"A",{href:!0});var AYr=s(Xq);J6o=r(AYr,"FunnelForMaskedLM"),AYr.forEach(t),Y6o=r(c3e," (Funnel Transformer model)"),c3e.forEach(t),K6o=i(j),w1=n(j,"LI",{});var f3e=s(w1);Hne=n(f3e,"STRONG",{});var yYr=s(Hne);Z6o=r(yYr,"ibert"),yYr.forEach(t),e0o=r(f3e," \u2014 "),zq=n(f3e,"A",{href:!0});var LYr=s(zq);o0o=r(LYr,"IBertForMaskedLM"),LYr.forEach(t),r0o=r(f3e," (I-BERT model)"),f3e.forEach(t),t0o=i(j),A1=n(j,"LI",{});var m3e=s(A1);Une=n(m3e,"STRONG",{});var xYr=s(Une);a0o=r(xYr,"layoutlm"),xYr.forEach(t),n0o=r(m3e," \u2014 "),Qq=n(m3e,"A",{href:!0});var kYr=s(Qq);s0o=r(kYr,"LayoutLMForMaskedLM"),kYr.forEach(t),l0o=r(m3e," (LayoutLM model)"),m3e.forEach(t),i0o=i(j),y1=n(j,"LI",{});var g3e=s(y1);Jne=n(g3e,"STRONG",{});var SYr=s(Jne);d0o=r(SYr,"longformer"),SYr.forEach(t),c0o=r(g3e," \u2014 "),Wq=n(g3e,"A",{href:!0});var RYr=s(Wq);f0o=r(RYr,"LongformerForMaskedLM"),RYr.forEach(t),m0o=r(g3e," (Longformer model)"),g3e.forEach(t),g0o=i(j),L1=n(j,"LI",{});var h3e=s(L1);Yne=n(h3e,"STRONG",{});var BYr=s(Yne);h0o=r(BYr,"mbart"),BYr.forEach(t),p0o=r(h3e," \u2014 "),Hq=n(h3e,"A",{href:!0});var PYr=s(Hq);_0o=r(PYr,"MBartForConditionalGeneration"),PYr.forEach(t),u0o=r(h3e," (mBART model)"),h3e.forEach(t),b0o=i(j),x1=n(j,"LI",{});var p3e=s(x1);Kne=n(p3e,"STRONG",{});var $Yr=s(Kne);F0o=r($Yr,"megatron-bert"),$Yr.forEach(t),v0o=r(p3e," \u2014 "),Uq=n(p3e,"A",{href:!0});var qYr=s(Uq);T0o=r(qYr,"MegatronBertForMaskedLM"),qYr.forEach(t),M0o=r(p3e," (MegatronBert model)"),p3e.forEach(t),E0o=i(j),k1=n(j,"LI",{});var _3e=s(k1);Zne=n(_3e,"STRONG",{});var IYr=s(Zne);C0o=r(IYr,"mobilebert"),IYr.forEach(t),w0o=r(_3e," \u2014 "),Jq=n(_3e,"A",{href:!0});var jYr=s(Jq);A0o=r(jYr,"MobileBertForMaskedLM"),jYr.forEach(t),y0o=r(_3e," (MobileBERT model)"),_3e.forEach(t),L0o=i(j),S1=n(j,"LI",{});var u3e=s(S1);ese=n(u3e,"STRONG",{});var NYr=s(ese);x0o=r(NYr,"mpnet"),NYr.forEach(t),k0o=r(u3e," \u2014 "),Yq=n(u3e,"A",{href:!0});var DYr=s(Yq);S0o=r(DYr,"MPNetForMaskedLM"),DYr.forEach(t),R0o=r(u3e," (MPNet model)"),u3e.forEach(t),B0o=i(j),R1=n(j,"LI",{});var b3e=s(R1);ose=n(b3e,"STRONG",{});var GYr=s(ose);P0o=r(GYr,"nystromformer"),GYr.forEach(t),$0o=r(b3e," \u2014 "),Kq=n(b3e,"A",{href:!0});var OYr=s(Kq);q0o=r(OYr,"NystromformerForMaskedLM"),OYr.forEach(t),I0o=r(b3e," (Nystromformer model)"),b3e.forEach(t),j0o=i(j),B1=n(j,"LI",{});var F3e=s(B1);rse=n(F3e,"STRONG",{});var VYr=s(rse);N0o=r(VYr,"perceiver"),VYr.forEach(t),D0o=r(F3e," \u2014 "),Zq=n(F3e,"A",{href:!0});var XYr=s(Zq);G0o=r(XYr,"PerceiverForMaskedLM"),XYr.forEach(t),O0o=r(F3e," (Perceiver model)"),F3e.forEach(t),V0o=i(j),P1=n(j,"LI",{});var v3e=s(P1);tse=n(v3e,"STRONG",{});var zYr=s(tse);X0o=r(zYr,"qdqbert"),zYr.forEach(t),z0o=r(v3e," \u2014 "),eI=n(v3e,"A",{href:!0});var QYr=s(eI);Q0o=r(QYr,"QDQBertForMaskedLM"),QYr.forEach(t),W0o=r(v3e," (QDQBert model)"),v3e.forEach(t),H0o=i(j),$1=n(j,"LI",{});var T3e=s($1);ase=n(T3e,"STRONG",{});var WYr=s(ase);U0o=r(WYr,"reformer"),WYr.forEach(t),J0o=r(T3e," \u2014 "),oI=n(T3e,"A",{href:!0});var HYr=s(oI);Y0o=r(HYr,"ReformerForMaskedLM"),HYr.forEach(t),K0o=r(T3e," (Reformer model)"),T3e.forEach(t),Z0o=i(j),q1=n(j,"LI",{});var M3e=s(q1);nse=n(M3e,"STRONG",{});var UYr=s(nse);eTo=r(UYr,"rembert"),UYr.forEach(t),oTo=r(M3e," \u2014 "),rI=n(M3e,"A",{href:!0});var JYr=s(rI);rTo=r(JYr,"RemBertForMaskedLM"),JYr.forEach(t),tTo=r(M3e," (RemBERT model)"),M3e.forEach(t),aTo=i(j),I1=n(j,"LI",{});var E3e=s(I1);sse=n(E3e,"STRONG",{});var YYr=s(sse);nTo=r(YYr,"roberta"),YYr.forEach(t),sTo=r(E3e," \u2014 "),tI=n(E3e,"A",{href:!0});var KYr=s(tI);lTo=r(KYr,"RobertaForMaskedLM"),KYr.forEach(t),iTo=r(E3e," (RoBERTa model)"),E3e.forEach(t),dTo=i(j),j1=n(j,"LI",{});var C3e=s(j1);lse=n(C3e,"STRONG",{});var ZYr=s(lse);cTo=r(ZYr,"roformer"),ZYr.forEach(t),fTo=r(C3e," \u2014 "),aI=n(C3e,"A",{href:!0});var eKr=s(aI);mTo=r(eKr,"RoFormerForMaskedLM"),eKr.forEach(t),gTo=r(C3e," (RoFormer model)"),C3e.forEach(t),hTo=i(j),N1=n(j,"LI",{});var w3e=s(N1);ise=n(w3e,"STRONG",{});var oKr=s(ise);pTo=r(oKr,"squeezebert"),oKr.forEach(t),_To=r(w3e," \u2014 "),nI=n(w3e,"A",{href:!0});var rKr=s(nI);uTo=r(rKr,"SqueezeBertForMaskedLM"),rKr.forEach(t),bTo=r(w3e," (SqueezeBERT model)"),w3e.forEach(t),FTo=i(j),D1=n(j,"LI",{});var A3e=s(D1);dse=n(A3e,"STRONG",{});var tKr=s(dse);vTo=r(tKr,"tapas"),tKr.forEach(t),TTo=r(A3e," \u2014 "),sI=n(A3e,"A",{href:!0});var aKr=s(sI);MTo=r(aKr,"TapasForMaskedLM"),aKr.forEach(t),ETo=r(A3e," (TAPAS model)"),A3e.forEach(t),CTo=i(j),G1=n(j,"LI",{});var y3e=s(G1);cse=n(y3e,"STRONG",{});var nKr=s(cse);wTo=r(nKr,"wav2vec2"),nKr.forEach(t),ATo=r(y3e," \u2014 "),fse=n(y3e,"CODE",{});var sKr=s(fse);yTo=r(sKr,"Wav2Vec2ForMaskedLM"),sKr.forEach(t),LTo=r(y3e," (Wav2Vec2 model)"),y3e.forEach(t),xTo=i(j),O1=n(j,"LI",{});var L3e=s(O1);mse=n(L3e,"STRONG",{});var lKr=s(mse);kTo=r(lKr,"xlm"),lKr.forEach(t),STo=r(L3e," \u2014 "),lI=n(L3e,"A",{href:!0});var iKr=s(lI);RTo=r(iKr,"XLMWithLMHeadModel"),iKr.forEach(t),BTo=r(L3e," (XLM model)"),L3e.forEach(t),PTo=i(j),V1=n(j,"LI",{});var x3e=s(V1);gse=n(x3e,"STRONG",{});var dKr=s(gse);$To=r(dKr,"xlm-roberta"),dKr.forEach(t),qTo=r(x3e," \u2014 "),iI=n(x3e,"A",{href:!0});var cKr=s(iI);ITo=r(cKr,"XLMRobertaForMaskedLM"),cKr.forEach(t),jTo=r(x3e," (XLM-RoBERTa model)"),x3e.forEach(t),NTo=i(j),X1=n(j,"LI",{});var k3e=s(X1);hse=n(k3e,"STRONG",{});var fKr=s(hse);DTo=r(fKr,"xlm-roberta-xl"),fKr.forEach(t),GTo=r(k3e," \u2014 "),dI=n(k3e,"A",{href:!0});var mKr=s(dI);OTo=r(mKr,"XLMRobertaXLForMaskedLM"),mKr.forEach(t),VTo=r(k3e," (XLM-RoBERTa-XL model)"),k3e.forEach(t),XTo=i(j),z1=n(j,"LI",{});var S3e=s(z1);pse=n(S3e,"STRONG",{});var gKr=s(pse);zTo=r(gKr,"yoso"),gKr.forEach(t),QTo=r(S3e," \u2014 "),cI=n(S3e,"A",{href:!0});var hKr=s(cI);WTo=r(hKr,"YosoForMaskedLM"),hKr.forEach(t),HTo=r(S3e," (YOSO model)"),S3e.forEach(t),j.forEach(t),UTo=i(Qt),Q1=n(Qt,"P",{});var R3e=s(Q1);JTo=r(R3e,"The model is set in evaluation mode by default using "),_se=n(R3e,"CODE",{});var pKr=s(_se);YTo=r(pKr,"model.eval()"),pKr.forEach(t),KTo=r(R3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),use=n(R3e,"CODE",{});var _Kr=s(use);ZTo=r(_Kr,"model.train()"),_Kr.forEach(t),R3e.forEach(t),e8o=i(Qt),bse=n(Qt,"P",{});var uKr=s(bse);o8o=r(uKr,"Examples:"),uKr.forEach(t),r8o=i(Qt),m($C.$$.fragment,Qt),Qt.forEach(t),tl.forEach(t),XRe=i(c),pd=n(c,"H2",{class:!0});var o$e=s(pd);W1=n(o$e,"A",{id:!0,class:!0,href:!0});var bKr=s(W1);Fse=n(bKr,"SPAN",{});var FKr=s(Fse);m(qC.$$.fragment,FKr),FKr.forEach(t),bKr.forEach(t),t8o=i(o$e),vse=n(o$e,"SPAN",{});var vKr=s(vse);a8o=r(vKr,"AutoModelForSeq2SeqLM"),vKr.forEach(t),o$e.forEach(t),zRe=i(c),or=n(c,"DIV",{class:!0});var nl=s(or);m(IC.$$.fragment,nl),n8o=i(nl),_d=n(nl,"P",{});var yU=s(_d);s8o=r(yU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),fI=n(yU,"A",{href:!0});var TKr=s(fI);l8o=r(TKr,"from_pretrained()"),TKr.forEach(t),i8o=r(yU," class method or the "),mI=n(yU,"A",{href:!0});var MKr=s(mI);d8o=r(MKr,"from_config()"),MKr.forEach(t),c8o=r(yU,` class
method.`),yU.forEach(t),f8o=i(nl),jC=n(nl,"P",{});var r$e=s(jC);m8o=r(r$e,"This class cannot be instantiated directly using "),Tse=n(r$e,"CODE",{});var EKr=s(Tse);g8o=r(EKr,"__init__()"),EKr.forEach(t),h8o=r(r$e," (throws an error)."),r$e.forEach(t),p8o=i(nl),Jr=n(nl,"DIV",{class:!0});var sl=s(Jr);m(NC.$$.fragment,sl),_8o=i(sl),Mse=n(sl,"P",{});var CKr=s(Mse);u8o=r(CKr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),CKr.forEach(t),b8o=i(sl),ud=n(sl,"P",{});var LU=s(ud);F8o=r(LU,`Note:
Loading a model from its configuration file does `),Ese=n(LU,"STRONG",{});var wKr=s(Ese);v8o=r(wKr,"not"),wKr.forEach(t),T8o=r(LU,` load the model weights. It only affects the
model\u2019s configuration. Use `),gI=n(LU,"A",{href:!0});var AKr=s(gI);M8o=r(AKr,"from_pretrained()"),AKr.forEach(t),E8o=r(LU," to load the model weights."),LU.forEach(t),C8o=i(sl),Cse=n(sl,"P",{});var yKr=s(Cse);w8o=r(yKr,"Examples:"),yKr.forEach(t),A8o=i(sl),m(DC.$$.fragment,sl),sl.forEach(t),y8o=i(nl),Ge=n(nl,"DIV",{class:!0});var Wt=s(Ge);m(GC.$$.fragment,Wt),L8o=i(Wt),wse=n(Wt,"P",{});var LKr=s(wse);x8o=r(LKr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),LKr.forEach(t),k8o=i(Wt),Ka=n(Wt,"P",{});var $4=s(Ka);S8o=r($4,"The model class to instantiate is selected based on the "),Ase=n($4,"CODE",{});var xKr=s(Ase);R8o=r(xKr,"model_type"),xKr.forEach(t),B8o=r($4,` property of the config object (either
passed as an argument or loaded from `),yse=n($4,"CODE",{});var kKr=s(yse);P8o=r(kKr,"pretrained_model_name_or_path"),kKr.forEach(t),$8o=r($4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lse=n($4,"CODE",{});var SKr=s(Lse);q8o=r(SKr,"pretrained_model_name_or_path"),SKr.forEach(t),I8o=r($4,":"),$4.forEach(t),j8o=i(Wt),se=n(Wt,"UL",{});var ie=s(se);H1=n(ie,"LI",{});var B3e=s(H1);xse=n(B3e,"STRONG",{});var RKr=s(xse);N8o=r(RKr,"bart"),RKr.forEach(t),D8o=r(B3e," \u2014 "),hI=n(B3e,"A",{href:!0});var BKr=s(hI);G8o=r(BKr,"BartForConditionalGeneration"),BKr.forEach(t),O8o=r(B3e," (BART model)"),B3e.forEach(t),V8o=i(ie),U1=n(ie,"LI",{});var P3e=s(U1);kse=n(P3e,"STRONG",{});var PKr=s(kse);X8o=r(PKr,"bigbird_pegasus"),PKr.forEach(t),z8o=r(P3e," \u2014 "),pI=n(P3e,"A",{href:!0});var $Kr=s(pI);Q8o=r($Kr,"BigBirdPegasusForConditionalGeneration"),$Kr.forEach(t),W8o=r(P3e," (BigBirdPegasus model)"),P3e.forEach(t),H8o=i(ie),J1=n(ie,"LI",{});var $3e=s(J1);Sse=n($3e,"STRONG",{});var qKr=s(Sse);U8o=r(qKr,"blenderbot"),qKr.forEach(t),J8o=r($3e," \u2014 "),_I=n($3e,"A",{href:!0});var IKr=s(_I);Y8o=r(IKr,"BlenderbotForConditionalGeneration"),IKr.forEach(t),K8o=r($3e," (Blenderbot model)"),$3e.forEach(t),Z8o=i(ie),Y1=n(ie,"LI",{});var q3e=s(Y1);Rse=n(q3e,"STRONG",{});var jKr=s(Rse);eMo=r(jKr,"blenderbot-small"),jKr.forEach(t),oMo=r(q3e," \u2014 "),uI=n(q3e,"A",{href:!0});var NKr=s(uI);rMo=r(NKr,"BlenderbotSmallForConditionalGeneration"),NKr.forEach(t),tMo=r(q3e," (BlenderbotSmall model)"),q3e.forEach(t),aMo=i(ie),K1=n(ie,"LI",{});var I3e=s(K1);Bse=n(I3e,"STRONG",{});var DKr=s(Bse);nMo=r(DKr,"encoder-decoder"),DKr.forEach(t),sMo=r(I3e," \u2014 "),bI=n(I3e,"A",{href:!0});var GKr=s(bI);lMo=r(GKr,"EncoderDecoderModel"),GKr.forEach(t),iMo=r(I3e," (Encoder decoder model)"),I3e.forEach(t),dMo=i(ie),Z1=n(ie,"LI",{});var j3e=s(Z1);Pse=n(j3e,"STRONG",{});var OKr=s(Pse);cMo=r(OKr,"fsmt"),OKr.forEach(t),fMo=r(j3e," \u2014 "),FI=n(j3e,"A",{href:!0});var VKr=s(FI);mMo=r(VKr,"FSMTForConditionalGeneration"),VKr.forEach(t),gMo=r(j3e," (FairSeq Machine-Translation model)"),j3e.forEach(t),hMo=i(ie),eb=n(ie,"LI",{});var N3e=s(eb);$se=n(N3e,"STRONG",{});var XKr=s($se);pMo=r(XKr,"led"),XKr.forEach(t),_Mo=r(N3e," \u2014 "),vI=n(N3e,"A",{href:!0});var zKr=s(vI);uMo=r(zKr,"LEDForConditionalGeneration"),zKr.forEach(t),bMo=r(N3e," (LED model)"),N3e.forEach(t),FMo=i(ie),ob=n(ie,"LI",{});var D3e=s(ob);qse=n(D3e,"STRONG",{});var QKr=s(qse);vMo=r(QKr,"m2m_100"),QKr.forEach(t),TMo=r(D3e," \u2014 "),TI=n(D3e,"A",{href:!0});var WKr=s(TI);MMo=r(WKr,"M2M100ForConditionalGeneration"),WKr.forEach(t),EMo=r(D3e," (M2M100 model)"),D3e.forEach(t),CMo=i(ie),rb=n(ie,"LI",{});var G3e=s(rb);Ise=n(G3e,"STRONG",{});var HKr=s(Ise);wMo=r(HKr,"marian"),HKr.forEach(t),AMo=r(G3e," \u2014 "),MI=n(G3e,"A",{href:!0});var UKr=s(MI);yMo=r(UKr,"MarianMTModel"),UKr.forEach(t),LMo=r(G3e," (Marian model)"),G3e.forEach(t),xMo=i(ie),tb=n(ie,"LI",{});var O3e=s(tb);jse=n(O3e,"STRONG",{});var JKr=s(jse);kMo=r(JKr,"mbart"),JKr.forEach(t),SMo=r(O3e," \u2014 "),EI=n(O3e,"A",{href:!0});var YKr=s(EI);RMo=r(YKr,"MBartForConditionalGeneration"),YKr.forEach(t),BMo=r(O3e," (mBART model)"),O3e.forEach(t),PMo=i(ie),ab=n(ie,"LI",{});var V3e=s(ab);Nse=n(V3e,"STRONG",{});var KKr=s(Nse);$Mo=r(KKr,"mt5"),KKr.forEach(t),qMo=r(V3e," \u2014 "),CI=n(V3e,"A",{href:!0});var ZKr=s(CI);IMo=r(ZKr,"MT5ForConditionalGeneration"),ZKr.forEach(t),jMo=r(V3e," (mT5 model)"),V3e.forEach(t),NMo=i(ie),nb=n(ie,"LI",{});var X3e=s(nb);Dse=n(X3e,"STRONG",{});var eZr=s(Dse);DMo=r(eZr,"pegasus"),eZr.forEach(t),GMo=r(X3e," \u2014 "),wI=n(X3e,"A",{href:!0});var oZr=s(wI);OMo=r(oZr,"PegasusForConditionalGeneration"),oZr.forEach(t),VMo=r(X3e," (Pegasus model)"),X3e.forEach(t),XMo=i(ie),sb=n(ie,"LI",{});var z3e=s(sb);Gse=n(z3e,"STRONG",{});var rZr=s(Gse);zMo=r(rZr,"plbart"),rZr.forEach(t),QMo=r(z3e," \u2014 "),AI=n(z3e,"A",{href:!0});var tZr=s(AI);WMo=r(tZr,"PLBartForConditionalGeneration"),tZr.forEach(t),HMo=r(z3e," (PLBart model)"),z3e.forEach(t),UMo=i(ie),lb=n(ie,"LI",{});var Q3e=s(lb);Ose=n(Q3e,"STRONG",{});var aZr=s(Ose);JMo=r(aZr,"prophetnet"),aZr.forEach(t),YMo=r(Q3e," \u2014 "),yI=n(Q3e,"A",{href:!0});var nZr=s(yI);KMo=r(nZr,"ProphetNetForConditionalGeneration"),nZr.forEach(t),ZMo=r(Q3e," (ProphetNet model)"),Q3e.forEach(t),e4o=i(ie),ib=n(ie,"LI",{});var W3e=s(ib);Vse=n(W3e,"STRONG",{});var sZr=s(Vse);o4o=r(sZr,"t5"),sZr.forEach(t),r4o=r(W3e," \u2014 "),LI=n(W3e,"A",{href:!0});var lZr=s(LI);t4o=r(lZr,"T5ForConditionalGeneration"),lZr.forEach(t),a4o=r(W3e," (T5 model)"),W3e.forEach(t),n4o=i(ie),db=n(ie,"LI",{});var H3e=s(db);Xse=n(H3e,"STRONG",{});var iZr=s(Xse);s4o=r(iZr,"xlm-prophetnet"),iZr.forEach(t),l4o=r(H3e," \u2014 "),xI=n(H3e,"A",{href:!0});var dZr=s(xI);i4o=r(dZr,"XLMProphetNetForConditionalGeneration"),dZr.forEach(t),d4o=r(H3e," (XLMProphetNet model)"),H3e.forEach(t),ie.forEach(t),c4o=i(Wt),cb=n(Wt,"P",{});var U3e=s(cb);f4o=r(U3e,"The model is set in evaluation mode by default using "),zse=n(U3e,"CODE",{});var cZr=s(zse);m4o=r(cZr,"model.eval()"),cZr.forEach(t),g4o=r(U3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qse=n(U3e,"CODE",{});var fZr=s(Qse);h4o=r(fZr,"model.train()"),fZr.forEach(t),U3e.forEach(t),p4o=i(Wt),Wse=n(Wt,"P",{});var mZr=s(Wse);_4o=r(mZr,"Examples:"),mZr.forEach(t),u4o=i(Wt),m(OC.$$.fragment,Wt),Wt.forEach(t),nl.forEach(t),QRe=i(c),bd=n(c,"H2",{class:!0});var t$e=s(bd);fb=n(t$e,"A",{id:!0,class:!0,href:!0});var gZr=s(fb);Hse=n(gZr,"SPAN",{});var hZr=s(Hse);m(VC.$$.fragment,hZr),hZr.forEach(t),gZr.forEach(t),b4o=i(t$e),Use=n(t$e,"SPAN",{});var pZr=s(Use);F4o=r(pZr,"AutoModelForSequenceClassification"),pZr.forEach(t),t$e.forEach(t),WRe=i(c),rr=n(c,"DIV",{class:!0});var ll=s(rr);m(XC.$$.fragment,ll),v4o=i(ll),Fd=n(ll,"P",{});var xU=s(Fd);T4o=r(xU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),kI=n(xU,"A",{href:!0});var _Zr=s(kI);M4o=r(_Zr,"from_pretrained()"),_Zr.forEach(t),E4o=r(xU," class method or the "),SI=n(xU,"A",{href:!0});var uZr=s(SI);C4o=r(uZr,"from_config()"),uZr.forEach(t),w4o=r(xU,` class
method.`),xU.forEach(t),A4o=i(ll),zC=n(ll,"P",{});var a$e=s(zC);y4o=r(a$e,"This class cannot be instantiated directly using "),Jse=n(a$e,"CODE",{});var bZr=s(Jse);L4o=r(bZr,"__init__()"),bZr.forEach(t),x4o=r(a$e," (throws an error)."),a$e.forEach(t),k4o=i(ll),Yr=n(ll,"DIV",{class:!0});var il=s(Yr);m(QC.$$.fragment,il),S4o=i(il),Yse=n(il,"P",{});var FZr=s(Yse);R4o=r(FZr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),FZr.forEach(t),B4o=i(il),vd=n(il,"P",{});var kU=s(vd);P4o=r(kU,`Note:
Loading a model from its configuration file does `),Kse=n(kU,"STRONG",{});var vZr=s(Kse);$4o=r(vZr,"not"),vZr.forEach(t),q4o=r(kU,` load the model weights. It only affects the
model\u2019s configuration. Use `),RI=n(kU,"A",{href:!0});var TZr=s(RI);I4o=r(TZr,"from_pretrained()"),TZr.forEach(t),j4o=r(kU," to load the model weights."),kU.forEach(t),N4o=i(il),Zse=n(il,"P",{});var MZr=s(Zse);D4o=r(MZr,"Examples:"),MZr.forEach(t),G4o=i(il),m(WC.$$.fragment,il),il.forEach(t),O4o=i(ll),Oe=n(ll,"DIV",{class:!0});var Ht=s(Oe);m(HC.$$.fragment,Ht),V4o=i(Ht),ele=n(Ht,"P",{});var EZr=s(ele);X4o=r(EZr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),EZr.forEach(t),z4o=i(Ht),Za=n(Ht,"P",{});var q4=s(Za);Q4o=r(q4,"The model class to instantiate is selected based on the "),ole=n(q4,"CODE",{});var CZr=s(ole);W4o=r(CZr,"model_type"),CZr.forEach(t),H4o=r(q4,` property of the config object (either
passed as an argument or loaded from `),rle=n(q4,"CODE",{});var wZr=s(rle);U4o=r(wZr,"pretrained_model_name_or_path"),wZr.forEach(t),J4o=r(q4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tle=n(q4,"CODE",{});var AZr=s(tle);Y4o=r(AZr,"pretrained_model_name_or_path"),AZr.forEach(t),K4o=r(q4,":"),q4.forEach(t),Z4o=i(Ht),y=n(Ht,"UL",{});var L=s(y);mb=n(L,"LI",{});var J3e=s(mb);ale=n(J3e,"STRONG",{});var yZr=s(ale);eEo=r(yZr,"albert"),yZr.forEach(t),oEo=r(J3e," \u2014 "),BI=n(J3e,"A",{href:!0});var LZr=s(BI);rEo=r(LZr,"AlbertForSequenceClassification"),LZr.forEach(t),tEo=r(J3e," (ALBERT model)"),J3e.forEach(t),aEo=i(L),gb=n(L,"LI",{});var Y3e=s(gb);nle=n(Y3e,"STRONG",{});var xZr=s(nle);nEo=r(xZr,"bart"),xZr.forEach(t),sEo=r(Y3e," \u2014 "),PI=n(Y3e,"A",{href:!0});var kZr=s(PI);lEo=r(kZr,"BartForSequenceClassification"),kZr.forEach(t),iEo=r(Y3e," (BART model)"),Y3e.forEach(t),dEo=i(L),hb=n(L,"LI",{});var K3e=s(hb);sle=n(K3e,"STRONG",{});var SZr=s(sle);cEo=r(SZr,"bert"),SZr.forEach(t),fEo=r(K3e," \u2014 "),$I=n(K3e,"A",{href:!0});var RZr=s($I);mEo=r(RZr,"BertForSequenceClassification"),RZr.forEach(t),gEo=r(K3e," (BERT model)"),K3e.forEach(t),hEo=i(L),pb=n(L,"LI",{});var Z3e=s(pb);lle=n(Z3e,"STRONG",{});var BZr=s(lle);pEo=r(BZr,"big_bird"),BZr.forEach(t),_Eo=r(Z3e," \u2014 "),qI=n(Z3e,"A",{href:!0});var PZr=s(qI);uEo=r(PZr,"BigBirdForSequenceClassification"),PZr.forEach(t),bEo=r(Z3e," (BigBird model)"),Z3e.forEach(t),FEo=i(L),_b=n(L,"LI",{});var ewe=s(_b);ile=n(ewe,"STRONG",{});var $Zr=s(ile);vEo=r($Zr,"bigbird_pegasus"),$Zr.forEach(t),TEo=r(ewe," \u2014 "),II=n(ewe,"A",{href:!0});var qZr=s(II);MEo=r(qZr,"BigBirdPegasusForSequenceClassification"),qZr.forEach(t),EEo=r(ewe," (BigBirdPegasus model)"),ewe.forEach(t),CEo=i(L),ub=n(L,"LI",{});var owe=s(ub);dle=n(owe,"STRONG",{});var IZr=s(dle);wEo=r(IZr,"camembert"),IZr.forEach(t),AEo=r(owe," \u2014 "),jI=n(owe,"A",{href:!0});var jZr=s(jI);yEo=r(jZr,"CamembertForSequenceClassification"),jZr.forEach(t),LEo=r(owe," (CamemBERT model)"),owe.forEach(t),xEo=i(L),bb=n(L,"LI",{});var rwe=s(bb);cle=n(rwe,"STRONG",{});var NZr=s(cle);kEo=r(NZr,"canine"),NZr.forEach(t),SEo=r(rwe," \u2014 "),NI=n(rwe,"A",{href:!0});var DZr=s(NI);REo=r(DZr,"CanineForSequenceClassification"),DZr.forEach(t),BEo=r(rwe," (Canine model)"),rwe.forEach(t),PEo=i(L),Fb=n(L,"LI",{});var twe=s(Fb);fle=n(twe,"STRONG",{});var GZr=s(fle);$Eo=r(GZr,"convbert"),GZr.forEach(t),qEo=r(twe," \u2014 "),DI=n(twe,"A",{href:!0});var OZr=s(DI);IEo=r(OZr,"ConvBertForSequenceClassification"),OZr.forEach(t),jEo=r(twe," (ConvBERT model)"),twe.forEach(t),NEo=i(L),vb=n(L,"LI",{});var awe=s(vb);mle=n(awe,"STRONG",{});var VZr=s(mle);DEo=r(VZr,"ctrl"),VZr.forEach(t),GEo=r(awe," \u2014 "),GI=n(awe,"A",{href:!0});var XZr=s(GI);OEo=r(XZr,"CTRLForSequenceClassification"),XZr.forEach(t),VEo=r(awe," (CTRL model)"),awe.forEach(t),XEo=i(L),Tb=n(L,"LI",{});var nwe=s(Tb);gle=n(nwe,"STRONG",{});var zZr=s(gle);zEo=r(zZr,"data2vec-text"),zZr.forEach(t),QEo=r(nwe," \u2014 "),OI=n(nwe,"A",{href:!0});var QZr=s(OI);WEo=r(QZr,"Data2VecTextForSequenceClassification"),QZr.forEach(t),HEo=r(nwe," (Data2VecText model)"),nwe.forEach(t),UEo=i(L),Mb=n(L,"LI",{});var swe=s(Mb);hle=n(swe,"STRONG",{});var WZr=s(hle);JEo=r(WZr,"deberta"),WZr.forEach(t),YEo=r(swe," \u2014 "),VI=n(swe,"A",{href:!0});var HZr=s(VI);KEo=r(HZr,"DebertaForSequenceClassification"),HZr.forEach(t),ZEo=r(swe," (DeBERTa model)"),swe.forEach(t),eCo=i(L),Eb=n(L,"LI",{});var lwe=s(Eb);ple=n(lwe,"STRONG",{});var UZr=s(ple);oCo=r(UZr,"deberta-v2"),UZr.forEach(t),rCo=r(lwe," \u2014 "),XI=n(lwe,"A",{href:!0});var JZr=s(XI);tCo=r(JZr,"DebertaV2ForSequenceClassification"),JZr.forEach(t),aCo=r(lwe," (DeBERTa-v2 model)"),lwe.forEach(t),nCo=i(L),Cb=n(L,"LI",{});var iwe=s(Cb);_le=n(iwe,"STRONG",{});var YZr=s(_le);sCo=r(YZr,"distilbert"),YZr.forEach(t),lCo=r(iwe," \u2014 "),zI=n(iwe,"A",{href:!0});var KZr=s(zI);iCo=r(KZr,"DistilBertForSequenceClassification"),KZr.forEach(t),dCo=r(iwe," (DistilBERT model)"),iwe.forEach(t),cCo=i(L),wb=n(L,"LI",{});var dwe=s(wb);ule=n(dwe,"STRONG",{});var ZZr=s(ule);fCo=r(ZZr,"electra"),ZZr.forEach(t),mCo=r(dwe," \u2014 "),QI=n(dwe,"A",{href:!0});var eet=s(QI);gCo=r(eet,"ElectraForSequenceClassification"),eet.forEach(t),hCo=r(dwe," (ELECTRA model)"),dwe.forEach(t),pCo=i(L),Ab=n(L,"LI",{});var cwe=s(Ab);ble=n(cwe,"STRONG",{});var oet=s(ble);_Co=r(oet,"flaubert"),oet.forEach(t),uCo=r(cwe," \u2014 "),WI=n(cwe,"A",{href:!0});var ret=s(WI);bCo=r(ret,"FlaubertForSequenceClassification"),ret.forEach(t),FCo=r(cwe," (FlauBERT model)"),cwe.forEach(t),vCo=i(L),yb=n(L,"LI",{});var fwe=s(yb);Fle=n(fwe,"STRONG",{});var tet=s(Fle);TCo=r(tet,"fnet"),tet.forEach(t),MCo=r(fwe," \u2014 "),HI=n(fwe,"A",{href:!0});var aet=s(HI);ECo=r(aet,"FNetForSequenceClassification"),aet.forEach(t),CCo=r(fwe," (FNet model)"),fwe.forEach(t),wCo=i(L),Lb=n(L,"LI",{});var mwe=s(Lb);vle=n(mwe,"STRONG",{});var net=s(vle);ACo=r(net,"funnel"),net.forEach(t),yCo=r(mwe," \u2014 "),UI=n(mwe,"A",{href:!0});var set=s(UI);LCo=r(set,"FunnelForSequenceClassification"),set.forEach(t),xCo=r(mwe," (Funnel Transformer model)"),mwe.forEach(t),kCo=i(L),xb=n(L,"LI",{});var gwe=s(xb);Tle=n(gwe,"STRONG",{});var iet=s(Tle);SCo=r(iet,"gpt2"),iet.forEach(t),RCo=r(gwe," \u2014 "),JI=n(gwe,"A",{href:!0});var det=s(JI);BCo=r(det,"GPT2ForSequenceClassification"),det.forEach(t),PCo=r(gwe," (OpenAI GPT-2 model)"),gwe.forEach(t),$Co=i(L),kb=n(L,"LI",{});var hwe=s(kb);Mle=n(hwe,"STRONG",{});var cet=s(Mle);qCo=r(cet,"gpt_neo"),cet.forEach(t),ICo=r(hwe," \u2014 "),YI=n(hwe,"A",{href:!0});var fet=s(YI);jCo=r(fet,"GPTNeoForSequenceClassification"),fet.forEach(t),NCo=r(hwe," (GPT Neo model)"),hwe.forEach(t),DCo=i(L),Sb=n(L,"LI",{});var pwe=s(Sb);Ele=n(pwe,"STRONG",{});var met=s(Ele);GCo=r(met,"gptj"),met.forEach(t),OCo=r(pwe," \u2014 "),KI=n(pwe,"A",{href:!0});var get=s(KI);VCo=r(get,"GPTJForSequenceClassification"),get.forEach(t),XCo=r(pwe," (GPT-J model)"),pwe.forEach(t),zCo=i(L),Rb=n(L,"LI",{});var _we=s(Rb);Cle=n(_we,"STRONG",{});var het=s(Cle);QCo=r(het,"ibert"),het.forEach(t),WCo=r(_we," \u2014 "),ZI=n(_we,"A",{href:!0});var pet=s(ZI);HCo=r(pet,"IBertForSequenceClassification"),pet.forEach(t),UCo=r(_we," (I-BERT model)"),_we.forEach(t),JCo=i(L),Bb=n(L,"LI",{});var uwe=s(Bb);wle=n(uwe,"STRONG",{});var _et=s(wle);YCo=r(_et,"layoutlm"),_et.forEach(t),KCo=r(uwe," \u2014 "),ej=n(uwe,"A",{href:!0});var uet=s(ej);ZCo=r(uet,"LayoutLMForSequenceClassification"),uet.forEach(t),e3o=r(uwe," (LayoutLM model)"),uwe.forEach(t),o3o=i(L),Pb=n(L,"LI",{});var bwe=s(Pb);Ale=n(bwe,"STRONG",{});var bet=s(Ale);r3o=r(bet,"layoutlmv2"),bet.forEach(t),t3o=r(bwe," \u2014 "),oj=n(bwe,"A",{href:!0});var Fet=s(oj);a3o=r(Fet,"LayoutLMv2ForSequenceClassification"),Fet.forEach(t),n3o=r(bwe," (LayoutLMv2 model)"),bwe.forEach(t),s3o=i(L),$b=n(L,"LI",{});var Fwe=s($b);yle=n(Fwe,"STRONG",{});var vet=s(yle);l3o=r(vet,"led"),vet.forEach(t),i3o=r(Fwe," \u2014 "),rj=n(Fwe,"A",{href:!0});var Tet=s(rj);d3o=r(Tet,"LEDForSequenceClassification"),Tet.forEach(t),c3o=r(Fwe," (LED model)"),Fwe.forEach(t),f3o=i(L),qb=n(L,"LI",{});var vwe=s(qb);Lle=n(vwe,"STRONG",{});var Met=s(Lle);m3o=r(Met,"longformer"),Met.forEach(t),g3o=r(vwe," \u2014 "),tj=n(vwe,"A",{href:!0});var Eet=s(tj);h3o=r(Eet,"LongformerForSequenceClassification"),Eet.forEach(t),p3o=r(vwe," (Longformer model)"),vwe.forEach(t),_3o=i(L),Ib=n(L,"LI",{});var Twe=s(Ib);xle=n(Twe,"STRONG",{});var Cet=s(xle);u3o=r(Cet,"mbart"),Cet.forEach(t),b3o=r(Twe," \u2014 "),aj=n(Twe,"A",{href:!0});var wet=s(aj);F3o=r(wet,"MBartForSequenceClassification"),wet.forEach(t),v3o=r(Twe," (mBART model)"),Twe.forEach(t),T3o=i(L),jb=n(L,"LI",{});var Mwe=s(jb);kle=n(Mwe,"STRONG",{});var Aet=s(kle);M3o=r(Aet,"megatron-bert"),Aet.forEach(t),E3o=r(Mwe," \u2014 "),nj=n(Mwe,"A",{href:!0});var yet=s(nj);C3o=r(yet,"MegatronBertForSequenceClassification"),yet.forEach(t),w3o=r(Mwe," (MegatronBert model)"),Mwe.forEach(t),A3o=i(L),Nb=n(L,"LI",{});var Ewe=s(Nb);Sle=n(Ewe,"STRONG",{});var Let=s(Sle);y3o=r(Let,"mobilebert"),Let.forEach(t),L3o=r(Ewe," \u2014 "),sj=n(Ewe,"A",{href:!0});var xet=s(sj);x3o=r(xet,"MobileBertForSequenceClassification"),xet.forEach(t),k3o=r(Ewe," (MobileBERT model)"),Ewe.forEach(t),S3o=i(L),Db=n(L,"LI",{});var Cwe=s(Db);Rle=n(Cwe,"STRONG",{});var ket=s(Rle);R3o=r(ket,"mpnet"),ket.forEach(t),B3o=r(Cwe," \u2014 "),lj=n(Cwe,"A",{href:!0});var Set=s(lj);P3o=r(Set,"MPNetForSequenceClassification"),Set.forEach(t),$3o=r(Cwe," (MPNet model)"),Cwe.forEach(t),q3o=i(L),Gb=n(L,"LI",{});var wwe=s(Gb);Ble=n(wwe,"STRONG",{});var Ret=s(Ble);I3o=r(Ret,"nystromformer"),Ret.forEach(t),j3o=r(wwe," \u2014 "),ij=n(wwe,"A",{href:!0});var Bet=s(ij);N3o=r(Bet,"NystromformerForSequenceClassification"),Bet.forEach(t),D3o=r(wwe," (Nystromformer model)"),wwe.forEach(t),G3o=i(L),Ob=n(L,"LI",{});var Awe=s(Ob);Ple=n(Awe,"STRONG",{});var Pet=s(Ple);O3o=r(Pet,"openai-gpt"),Pet.forEach(t),V3o=r(Awe," \u2014 "),dj=n(Awe,"A",{href:!0});var $et=s(dj);X3o=r($et,"OpenAIGPTForSequenceClassification"),$et.forEach(t),z3o=r(Awe," (OpenAI GPT model)"),Awe.forEach(t),Q3o=i(L),Vb=n(L,"LI",{});var ywe=s(Vb);$le=n(ywe,"STRONG",{});var qet=s($le);W3o=r(qet,"perceiver"),qet.forEach(t),H3o=r(ywe," \u2014 "),cj=n(ywe,"A",{href:!0});var Iet=s(cj);U3o=r(Iet,"PerceiverForSequenceClassification"),Iet.forEach(t),J3o=r(ywe," (Perceiver model)"),ywe.forEach(t),Y3o=i(L),Xb=n(L,"LI",{});var Lwe=s(Xb);qle=n(Lwe,"STRONG",{});var jet=s(qle);K3o=r(jet,"plbart"),jet.forEach(t),Z3o=r(Lwe," \u2014 "),fj=n(Lwe,"A",{href:!0});var Net=s(fj);ewo=r(Net,"PLBartForSequenceClassification"),Net.forEach(t),owo=r(Lwe," (PLBart model)"),Lwe.forEach(t),rwo=i(L),zb=n(L,"LI",{});var xwe=s(zb);Ile=n(xwe,"STRONG",{});var Det=s(Ile);two=r(Det,"qdqbert"),Det.forEach(t),awo=r(xwe," \u2014 "),mj=n(xwe,"A",{href:!0});var Get=s(mj);nwo=r(Get,"QDQBertForSequenceClassification"),Get.forEach(t),swo=r(xwe," (QDQBert model)"),xwe.forEach(t),lwo=i(L),Qb=n(L,"LI",{});var kwe=s(Qb);jle=n(kwe,"STRONG",{});var Oet=s(jle);iwo=r(Oet,"reformer"),Oet.forEach(t),dwo=r(kwe," \u2014 "),gj=n(kwe,"A",{href:!0});var Vet=s(gj);cwo=r(Vet,"ReformerForSequenceClassification"),Vet.forEach(t),fwo=r(kwe," (Reformer model)"),kwe.forEach(t),mwo=i(L),Wb=n(L,"LI",{});var Swe=s(Wb);Nle=n(Swe,"STRONG",{});var Xet=s(Nle);gwo=r(Xet,"rembert"),Xet.forEach(t),hwo=r(Swe," \u2014 "),hj=n(Swe,"A",{href:!0});var zet=s(hj);pwo=r(zet,"RemBertForSequenceClassification"),zet.forEach(t),_wo=r(Swe," (RemBERT model)"),Swe.forEach(t),uwo=i(L),Hb=n(L,"LI",{});var Rwe=s(Hb);Dle=n(Rwe,"STRONG",{});var Qet=s(Dle);bwo=r(Qet,"roberta"),Qet.forEach(t),Fwo=r(Rwe," \u2014 "),pj=n(Rwe,"A",{href:!0});var Wet=s(pj);vwo=r(Wet,"RobertaForSequenceClassification"),Wet.forEach(t),Two=r(Rwe," (RoBERTa model)"),Rwe.forEach(t),Mwo=i(L),Ub=n(L,"LI",{});var Bwe=s(Ub);Gle=n(Bwe,"STRONG",{});var Het=s(Gle);Ewo=r(Het,"roformer"),Het.forEach(t),Cwo=r(Bwe," \u2014 "),_j=n(Bwe,"A",{href:!0});var Uet=s(_j);wwo=r(Uet,"RoFormerForSequenceClassification"),Uet.forEach(t),Awo=r(Bwe," (RoFormer model)"),Bwe.forEach(t),ywo=i(L),Jb=n(L,"LI",{});var Pwe=s(Jb);Ole=n(Pwe,"STRONG",{});var Jet=s(Ole);Lwo=r(Jet,"squeezebert"),Jet.forEach(t),xwo=r(Pwe," \u2014 "),uj=n(Pwe,"A",{href:!0});var Yet=s(uj);kwo=r(Yet,"SqueezeBertForSequenceClassification"),Yet.forEach(t),Swo=r(Pwe," (SqueezeBERT model)"),Pwe.forEach(t),Rwo=i(L),Yb=n(L,"LI",{});var $we=s(Yb);Vle=n($we,"STRONG",{});var Ket=s(Vle);Bwo=r(Ket,"tapas"),Ket.forEach(t),Pwo=r($we," \u2014 "),bj=n($we,"A",{href:!0});var Zet=s(bj);$wo=r(Zet,"TapasForSequenceClassification"),Zet.forEach(t),qwo=r($we," (TAPAS model)"),$we.forEach(t),Iwo=i(L),Kb=n(L,"LI",{});var qwe=s(Kb);Xle=n(qwe,"STRONG",{});var eot=s(Xle);jwo=r(eot,"transfo-xl"),eot.forEach(t),Nwo=r(qwe," \u2014 "),Fj=n(qwe,"A",{href:!0});var oot=s(Fj);Dwo=r(oot,"TransfoXLForSequenceClassification"),oot.forEach(t),Gwo=r(qwe," (Transformer-XL model)"),qwe.forEach(t),Owo=i(L),Zb=n(L,"LI",{});var Iwe=s(Zb);zle=n(Iwe,"STRONG",{});var rot=s(zle);Vwo=r(rot,"xlm"),rot.forEach(t),Xwo=r(Iwe," \u2014 "),vj=n(Iwe,"A",{href:!0});var tot=s(vj);zwo=r(tot,"XLMForSequenceClassification"),tot.forEach(t),Qwo=r(Iwe," (XLM model)"),Iwe.forEach(t),Wwo=i(L),e5=n(L,"LI",{});var jwe=s(e5);Qle=n(jwe,"STRONG",{});var aot=s(Qle);Hwo=r(aot,"xlm-roberta"),aot.forEach(t),Uwo=r(jwe," \u2014 "),Tj=n(jwe,"A",{href:!0});var not=s(Tj);Jwo=r(not,"XLMRobertaForSequenceClassification"),not.forEach(t),Ywo=r(jwe," (XLM-RoBERTa model)"),jwe.forEach(t),Kwo=i(L),o5=n(L,"LI",{});var Nwe=s(o5);Wle=n(Nwe,"STRONG",{});var sot=s(Wle);Zwo=r(sot,"xlm-roberta-xl"),sot.forEach(t),eAo=r(Nwe," \u2014 "),Mj=n(Nwe,"A",{href:!0});var lot=s(Mj);oAo=r(lot,"XLMRobertaXLForSequenceClassification"),lot.forEach(t),rAo=r(Nwe," (XLM-RoBERTa-XL model)"),Nwe.forEach(t),tAo=i(L),r5=n(L,"LI",{});var Dwe=s(r5);Hle=n(Dwe,"STRONG",{});var iot=s(Hle);aAo=r(iot,"xlnet"),iot.forEach(t),nAo=r(Dwe," \u2014 "),Ej=n(Dwe,"A",{href:!0});var dot=s(Ej);sAo=r(dot,"XLNetForSequenceClassification"),dot.forEach(t),lAo=r(Dwe," (XLNet model)"),Dwe.forEach(t),iAo=i(L),t5=n(L,"LI",{});var Gwe=s(t5);Ule=n(Gwe,"STRONG",{});var cot=s(Ule);dAo=r(cot,"yoso"),cot.forEach(t),cAo=r(Gwe," \u2014 "),Cj=n(Gwe,"A",{href:!0});var fot=s(Cj);fAo=r(fot,"YosoForSequenceClassification"),fot.forEach(t),mAo=r(Gwe," (YOSO model)"),Gwe.forEach(t),L.forEach(t),gAo=i(Ht),a5=n(Ht,"P",{});var Owe=s(a5);hAo=r(Owe,"The model is set in evaluation mode by default using "),Jle=n(Owe,"CODE",{});var mot=s(Jle);pAo=r(mot,"model.eval()"),mot.forEach(t),_Ao=r(Owe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yle=n(Owe,"CODE",{});var got=s(Yle);uAo=r(got,"model.train()"),got.forEach(t),Owe.forEach(t),bAo=i(Ht),Kle=n(Ht,"P",{});var hot=s(Kle);FAo=r(hot,"Examples:"),hot.forEach(t),vAo=i(Ht),m(UC.$$.fragment,Ht),Ht.forEach(t),ll.forEach(t),HRe=i(c),Td=n(c,"H2",{class:!0});var n$e=s(Td);n5=n(n$e,"A",{id:!0,class:!0,href:!0});var pot=s(n5);Zle=n(pot,"SPAN",{});var _ot=s(Zle);m(JC.$$.fragment,_ot),_ot.forEach(t),pot.forEach(t),TAo=i(n$e),eie=n(n$e,"SPAN",{});var uot=s(eie);MAo=r(uot,"AutoModelForMultipleChoice"),uot.forEach(t),n$e.forEach(t),URe=i(c),tr=n(c,"DIV",{class:!0});var dl=s(tr);m(YC.$$.fragment,dl),EAo=i(dl),Md=n(dl,"P",{});var SU=s(Md);CAo=r(SU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),wj=n(SU,"A",{href:!0});var bot=s(wj);wAo=r(bot,"from_pretrained()"),bot.forEach(t),AAo=r(SU," class method or the "),Aj=n(SU,"A",{href:!0});var Fot=s(Aj);yAo=r(Fot,"from_config()"),Fot.forEach(t),LAo=r(SU,` class
method.`),SU.forEach(t),xAo=i(dl),KC=n(dl,"P",{});var s$e=s(KC);kAo=r(s$e,"This class cannot be instantiated directly using "),oie=n(s$e,"CODE",{});var vot=s(oie);SAo=r(vot,"__init__()"),vot.forEach(t),RAo=r(s$e," (throws an error)."),s$e.forEach(t),BAo=i(dl),Kr=n(dl,"DIV",{class:!0});var cl=s(Kr);m(ZC.$$.fragment,cl),PAo=i(cl),rie=n(cl,"P",{});var Tot=s(rie);$Ao=r(Tot,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Tot.forEach(t),qAo=i(cl),Ed=n(cl,"P",{});var RU=s(Ed);IAo=r(RU,`Note:
Loading a model from its configuration file does `),tie=n(RU,"STRONG",{});var Mot=s(tie);jAo=r(Mot,"not"),Mot.forEach(t),NAo=r(RU,` load the model weights. It only affects the
model\u2019s configuration. Use `),yj=n(RU,"A",{href:!0});var Eot=s(yj);DAo=r(Eot,"from_pretrained()"),Eot.forEach(t),GAo=r(RU," to load the model weights."),RU.forEach(t),OAo=i(cl),aie=n(cl,"P",{});var Cot=s(aie);VAo=r(Cot,"Examples:"),Cot.forEach(t),XAo=i(cl),m(e3.$$.fragment,cl),cl.forEach(t),zAo=i(dl),Ve=n(dl,"DIV",{class:!0});var Ut=s(Ve);m(o3.$$.fragment,Ut),QAo=i(Ut),nie=n(Ut,"P",{});var wot=s(nie);WAo=r(wot,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),wot.forEach(t),HAo=i(Ut),en=n(Ut,"P",{});var I4=s(en);UAo=r(I4,"The model class to instantiate is selected based on the "),sie=n(I4,"CODE",{});var Aot=s(sie);JAo=r(Aot,"model_type"),Aot.forEach(t),YAo=r(I4,` property of the config object (either
passed as an argument or loaded from `),lie=n(I4,"CODE",{});var yot=s(lie);KAo=r(yot,"pretrained_model_name_or_path"),yot.forEach(t),ZAo=r(I4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iie=n(I4,"CODE",{});var Lot=s(iie);eyo=r(Lot,"pretrained_model_name_or_path"),Lot.forEach(t),oyo=r(I4,":"),I4.forEach(t),ryo=i(Ut),G=n(Ut,"UL",{});var O=s(G);s5=n(O,"LI",{});var Vwe=s(s5);die=n(Vwe,"STRONG",{});var xot=s(die);tyo=r(xot,"albert"),xot.forEach(t),ayo=r(Vwe," \u2014 "),Lj=n(Vwe,"A",{href:!0});var kot=s(Lj);nyo=r(kot,"AlbertForMultipleChoice"),kot.forEach(t),syo=r(Vwe," (ALBERT model)"),Vwe.forEach(t),lyo=i(O),l5=n(O,"LI",{});var Xwe=s(l5);cie=n(Xwe,"STRONG",{});var Sot=s(cie);iyo=r(Sot,"bert"),Sot.forEach(t),dyo=r(Xwe," \u2014 "),xj=n(Xwe,"A",{href:!0});var Rot=s(xj);cyo=r(Rot,"BertForMultipleChoice"),Rot.forEach(t),fyo=r(Xwe," (BERT model)"),Xwe.forEach(t),myo=i(O),i5=n(O,"LI",{});var zwe=s(i5);fie=n(zwe,"STRONG",{});var Bot=s(fie);gyo=r(Bot,"big_bird"),Bot.forEach(t),hyo=r(zwe," \u2014 "),kj=n(zwe,"A",{href:!0});var Pot=s(kj);pyo=r(Pot,"BigBirdForMultipleChoice"),Pot.forEach(t),_yo=r(zwe," (BigBird model)"),zwe.forEach(t),uyo=i(O),d5=n(O,"LI",{});var Qwe=s(d5);mie=n(Qwe,"STRONG",{});var $ot=s(mie);byo=r($ot,"camembert"),$ot.forEach(t),Fyo=r(Qwe," \u2014 "),Sj=n(Qwe,"A",{href:!0});var qot=s(Sj);vyo=r(qot,"CamembertForMultipleChoice"),qot.forEach(t),Tyo=r(Qwe," (CamemBERT model)"),Qwe.forEach(t),Myo=i(O),c5=n(O,"LI",{});var Wwe=s(c5);gie=n(Wwe,"STRONG",{});var Iot=s(gie);Eyo=r(Iot,"canine"),Iot.forEach(t),Cyo=r(Wwe," \u2014 "),Rj=n(Wwe,"A",{href:!0});var jot=s(Rj);wyo=r(jot,"CanineForMultipleChoice"),jot.forEach(t),Ayo=r(Wwe," (Canine model)"),Wwe.forEach(t),yyo=i(O),f5=n(O,"LI",{});var Hwe=s(f5);hie=n(Hwe,"STRONG",{});var Not=s(hie);Lyo=r(Not,"convbert"),Not.forEach(t),xyo=r(Hwe," \u2014 "),Bj=n(Hwe,"A",{href:!0});var Dot=s(Bj);kyo=r(Dot,"ConvBertForMultipleChoice"),Dot.forEach(t),Syo=r(Hwe," (ConvBERT model)"),Hwe.forEach(t),Ryo=i(O),m5=n(O,"LI",{});var Uwe=s(m5);pie=n(Uwe,"STRONG",{});var Got=s(pie);Byo=r(Got,"data2vec-text"),Got.forEach(t),Pyo=r(Uwe," \u2014 "),Pj=n(Uwe,"A",{href:!0});var Oot=s(Pj);$yo=r(Oot,"Data2VecTextForMultipleChoice"),Oot.forEach(t),qyo=r(Uwe," (Data2VecText model)"),Uwe.forEach(t),Iyo=i(O),g5=n(O,"LI",{});var Jwe=s(g5);_ie=n(Jwe,"STRONG",{});var Vot=s(_ie);jyo=r(Vot,"distilbert"),Vot.forEach(t),Nyo=r(Jwe," \u2014 "),$j=n(Jwe,"A",{href:!0});var Xot=s($j);Dyo=r(Xot,"DistilBertForMultipleChoice"),Xot.forEach(t),Gyo=r(Jwe," (DistilBERT model)"),Jwe.forEach(t),Oyo=i(O),h5=n(O,"LI",{});var Ywe=s(h5);uie=n(Ywe,"STRONG",{});var zot=s(uie);Vyo=r(zot,"electra"),zot.forEach(t),Xyo=r(Ywe," \u2014 "),qj=n(Ywe,"A",{href:!0});var Qot=s(qj);zyo=r(Qot,"ElectraForMultipleChoice"),Qot.forEach(t),Qyo=r(Ywe," (ELECTRA model)"),Ywe.forEach(t),Wyo=i(O),p5=n(O,"LI",{});var Kwe=s(p5);bie=n(Kwe,"STRONG",{});var Wot=s(bie);Hyo=r(Wot,"flaubert"),Wot.forEach(t),Uyo=r(Kwe," \u2014 "),Ij=n(Kwe,"A",{href:!0});var Hot=s(Ij);Jyo=r(Hot,"FlaubertForMultipleChoice"),Hot.forEach(t),Yyo=r(Kwe," (FlauBERT model)"),Kwe.forEach(t),Kyo=i(O),_5=n(O,"LI",{});var Zwe=s(_5);Fie=n(Zwe,"STRONG",{});var Uot=s(Fie);Zyo=r(Uot,"fnet"),Uot.forEach(t),eLo=r(Zwe," \u2014 "),jj=n(Zwe,"A",{href:!0});var Jot=s(jj);oLo=r(Jot,"FNetForMultipleChoice"),Jot.forEach(t),rLo=r(Zwe," (FNet model)"),Zwe.forEach(t),tLo=i(O),u5=n(O,"LI",{});var eAe=s(u5);vie=n(eAe,"STRONG",{});var Yot=s(vie);aLo=r(Yot,"funnel"),Yot.forEach(t),nLo=r(eAe," \u2014 "),Nj=n(eAe,"A",{href:!0});var Kot=s(Nj);sLo=r(Kot,"FunnelForMultipleChoice"),Kot.forEach(t),lLo=r(eAe," (Funnel Transformer model)"),eAe.forEach(t),iLo=i(O),b5=n(O,"LI",{});var oAe=s(b5);Tie=n(oAe,"STRONG",{});var Zot=s(Tie);dLo=r(Zot,"ibert"),Zot.forEach(t),cLo=r(oAe," \u2014 "),Dj=n(oAe,"A",{href:!0});var ert=s(Dj);fLo=r(ert,"IBertForMultipleChoice"),ert.forEach(t),mLo=r(oAe," (I-BERT model)"),oAe.forEach(t),gLo=i(O),F5=n(O,"LI",{});var rAe=s(F5);Mie=n(rAe,"STRONG",{});var ort=s(Mie);hLo=r(ort,"longformer"),ort.forEach(t),pLo=r(rAe," \u2014 "),Gj=n(rAe,"A",{href:!0});var rrt=s(Gj);_Lo=r(rrt,"LongformerForMultipleChoice"),rrt.forEach(t),uLo=r(rAe," (Longformer model)"),rAe.forEach(t),bLo=i(O),v5=n(O,"LI",{});var tAe=s(v5);Eie=n(tAe,"STRONG",{});var trt=s(Eie);FLo=r(trt,"megatron-bert"),trt.forEach(t),vLo=r(tAe," \u2014 "),Oj=n(tAe,"A",{href:!0});var art=s(Oj);TLo=r(art,"MegatronBertForMultipleChoice"),art.forEach(t),MLo=r(tAe," (MegatronBert model)"),tAe.forEach(t),ELo=i(O),T5=n(O,"LI",{});var aAe=s(T5);Cie=n(aAe,"STRONG",{});var nrt=s(Cie);CLo=r(nrt,"mobilebert"),nrt.forEach(t),wLo=r(aAe," \u2014 "),Vj=n(aAe,"A",{href:!0});var srt=s(Vj);ALo=r(srt,"MobileBertForMultipleChoice"),srt.forEach(t),yLo=r(aAe," (MobileBERT model)"),aAe.forEach(t),LLo=i(O),M5=n(O,"LI",{});var nAe=s(M5);wie=n(nAe,"STRONG",{});var lrt=s(wie);xLo=r(lrt,"mpnet"),lrt.forEach(t),kLo=r(nAe," \u2014 "),Xj=n(nAe,"A",{href:!0});var irt=s(Xj);SLo=r(irt,"MPNetForMultipleChoice"),irt.forEach(t),RLo=r(nAe," (MPNet model)"),nAe.forEach(t),BLo=i(O),E5=n(O,"LI",{});var sAe=s(E5);Aie=n(sAe,"STRONG",{});var drt=s(Aie);PLo=r(drt,"nystromformer"),drt.forEach(t),$Lo=r(sAe," \u2014 "),zj=n(sAe,"A",{href:!0});var crt=s(zj);qLo=r(crt,"NystromformerForMultipleChoice"),crt.forEach(t),ILo=r(sAe," (Nystromformer model)"),sAe.forEach(t),jLo=i(O),C5=n(O,"LI",{});var lAe=s(C5);yie=n(lAe,"STRONG",{});var frt=s(yie);NLo=r(frt,"qdqbert"),frt.forEach(t),DLo=r(lAe," \u2014 "),Qj=n(lAe,"A",{href:!0});var mrt=s(Qj);GLo=r(mrt,"QDQBertForMultipleChoice"),mrt.forEach(t),OLo=r(lAe," (QDQBert model)"),lAe.forEach(t),VLo=i(O),w5=n(O,"LI",{});var iAe=s(w5);Lie=n(iAe,"STRONG",{});var grt=s(Lie);XLo=r(grt,"rembert"),grt.forEach(t),zLo=r(iAe," \u2014 "),Wj=n(iAe,"A",{href:!0});var hrt=s(Wj);QLo=r(hrt,"RemBertForMultipleChoice"),hrt.forEach(t),WLo=r(iAe," (RemBERT model)"),iAe.forEach(t),HLo=i(O),A5=n(O,"LI",{});var dAe=s(A5);xie=n(dAe,"STRONG",{});var prt=s(xie);ULo=r(prt,"roberta"),prt.forEach(t),JLo=r(dAe," \u2014 "),Hj=n(dAe,"A",{href:!0});var _rt=s(Hj);YLo=r(_rt,"RobertaForMultipleChoice"),_rt.forEach(t),KLo=r(dAe," (RoBERTa model)"),dAe.forEach(t),ZLo=i(O),y5=n(O,"LI",{});var cAe=s(y5);kie=n(cAe,"STRONG",{});var urt=s(kie);e7o=r(urt,"roformer"),urt.forEach(t),o7o=r(cAe," \u2014 "),Uj=n(cAe,"A",{href:!0});var brt=s(Uj);r7o=r(brt,"RoFormerForMultipleChoice"),brt.forEach(t),t7o=r(cAe," (RoFormer model)"),cAe.forEach(t),a7o=i(O),L5=n(O,"LI",{});var fAe=s(L5);Sie=n(fAe,"STRONG",{});var Frt=s(Sie);n7o=r(Frt,"squeezebert"),Frt.forEach(t),s7o=r(fAe," \u2014 "),Jj=n(fAe,"A",{href:!0});var vrt=s(Jj);l7o=r(vrt,"SqueezeBertForMultipleChoice"),vrt.forEach(t),i7o=r(fAe," (SqueezeBERT model)"),fAe.forEach(t),d7o=i(O),x5=n(O,"LI",{});var mAe=s(x5);Rie=n(mAe,"STRONG",{});var Trt=s(Rie);c7o=r(Trt,"xlm"),Trt.forEach(t),f7o=r(mAe," \u2014 "),Yj=n(mAe,"A",{href:!0});var Mrt=s(Yj);m7o=r(Mrt,"XLMForMultipleChoice"),Mrt.forEach(t),g7o=r(mAe," (XLM model)"),mAe.forEach(t),h7o=i(O),k5=n(O,"LI",{});var gAe=s(k5);Bie=n(gAe,"STRONG",{});var Ert=s(Bie);p7o=r(Ert,"xlm-roberta"),Ert.forEach(t),_7o=r(gAe," \u2014 "),Kj=n(gAe,"A",{href:!0});var Crt=s(Kj);u7o=r(Crt,"XLMRobertaForMultipleChoice"),Crt.forEach(t),b7o=r(gAe," (XLM-RoBERTa model)"),gAe.forEach(t),F7o=i(O),S5=n(O,"LI",{});var hAe=s(S5);Pie=n(hAe,"STRONG",{});var wrt=s(Pie);v7o=r(wrt,"xlm-roberta-xl"),wrt.forEach(t),T7o=r(hAe," \u2014 "),Zj=n(hAe,"A",{href:!0});var Art=s(Zj);M7o=r(Art,"XLMRobertaXLForMultipleChoice"),Art.forEach(t),E7o=r(hAe," (XLM-RoBERTa-XL model)"),hAe.forEach(t),C7o=i(O),R5=n(O,"LI",{});var pAe=s(R5);$ie=n(pAe,"STRONG",{});var yrt=s($ie);w7o=r(yrt,"xlnet"),yrt.forEach(t),A7o=r(pAe," \u2014 "),eN=n(pAe,"A",{href:!0});var Lrt=s(eN);y7o=r(Lrt,"XLNetForMultipleChoice"),Lrt.forEach(t),L7o=r(pAe," (XLNet model)"),pAe.forEach(t),x7o=i(O),B5=n(O,"LI",{});var _Ae=s(B5);qie=n(_Ae,"STRONG",{});var xrt=s(qie);k7o=r(xrt,"yoso"),xrt.forEach(t),S7o=r(_Ae," \u2014 "),oN=n(_Ae,"A",{href:!0});var krt=s(oN);R7o=r(krt,"YosoForMultipleChoice"),krt.forEach(t),B7o=r(_Ae," (YOSO model)"),_Ae.forEach(t),O.forEach(t),P7o=i(Ut),P5=n(Ut,"P",{});var uAe=s(P5);$7o=r(uAe,"The model is set in evaluation mode by default using "),Iie=n(uAe,"CODE",{});var Srt=s(Iie);q7o=r(Srt,"model.eval()"),Srt.forEach(t),I7o=r(uAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jie=n(uAe,"CODE",{});var Rrt=s(jie);j7o=r(Rrt,"model.train()"),Rrt.forEach(t),uAe.forEach(t),N7o=i(Ut),Nie=n(Ut,"P",{});var Brt=s(Nie);D7o=r(Brt,"Examples:"),Brt.forEach(t),G7o=i(Ut),m(r3.$$.fragment,Ut),Ut.forEach(t),dl.forEach(t),JRe=i(c),Cd=n(c,"H2",{class:!0});var l$e=s(Cd);$5=n(l$e,"A",{id:!0,class:!0,href:!0});var Prt=s($5);Die=n(Prt,"SPAN",{});var $rt=s(Die);m(t3.$$.fragment,$rt),$rt.forEach(t),Prt.forEach(t),O7o=i(l$e),Gie=n(l$e,"SPAN",{});var qrt=s(Gie);V7o=r(qrt,"AutoModelForNextSentencePrediction"),qrt.forEach(t),l$e.forEach(t),YRe=i(c),ar=n(c,"DIV",{class:!0});var fl=s(ar);m(a3.$$.fragment,fl),X7o=i(fl),wd=n(fl,"P",{});var BU=s(wd);z7o=r(BU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),rN=n(BU,"A",{href:!0});var Irt=s(rN);Q7o=r(Irt,"from_pretrained()"),Irt.forEach(t),W7o=r(BU," class method or the "),tN=n(BU,"A",{href:!0});var jrt=s(tN);H7o=r(jrt,"from_config()"),jrt.forEach(t),U7o=r(BU,` class
method.`),BU.forEach(t),J7o=i(fl),n3=n(fl,"P",{});var i$e=s(n3);Y7o=r(i$e,"This class cannot be instantiated directly using "),Oie=n(i$e,"CODE",{});var Nrt=s(Oie);K7o=r(Nrt,"__init__()"),Nrt.forEach(t),Z7o=r(i$e," (throws an error)."),i$e.forEach(t),e9o=i(fl),Zr=n(fl,"DIV",{class:!0});var ml=s(Zr);m(s3.$$.fragment,ml),o9o=i(ml),Vie=n(ml,"P",{});var Drt=s(Vie);r9o=r(Drt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Drt.forEach(t),t9o=i(ml),Ad=n(ml,"P",{});var PU=s(Ad);a9o=r(PU,`Note:
Loading a model from its configuration file does `),Xie=n(PU,"STRONG",{});var Grt=s(Xie);n9o=r(Grt,"not"),Grt.forEach(t),s9o=r(PU,` load the model weights. It only affects the
model\u2019s configuration. Use `),aN=n(PU,"A",{href:!0});var Ort=s(aN);l9o=r(Ort,"from_pretrained()"),Ort.forEach(t),i9o=r(PU," to load the model weights."),PU.forEach(t),d9o=i(ml),zie=n(ml,"P",{});var Vrt=s(zie);c9o=r(Vrt,"Examples:"),Vrt.forEach(t),f9o=i(ml),m(l3.$$.fragment,ml),ml.forEach(t),m9o=i(fl),Xe=n(fl,"DIV",{class:!0});var Jt=s(Xe);m(i3.$$.fragment,Jt),g9o=i(Jt),Qie=n(Jt,"P",{});var Xrt=s(Qie);h9o=r(Xrt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Xrt.forEach(t),p9o=i(Jt),on=n(Jt,"P",{});var j4=s(on);_9o=r(j4,"The model class to instantiate is selected based on the "),Wie=n(j4,"CODE",{});var zrt=s(Wie);u9o=r(zrt,"model_type"),zrt.forEach(t),b9o=r(j4,` property of the config object (either
passed as an argument or loaded from `),Hie=n(j4,"CODE",{});var Qrt=s(Hie);F9o=r(Qrt,"pretrained_model_name_or_path"),Qrt.forEach(t),v9o=r(j4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uie=n(j4,"CODE",{});var Wrt=s(Uie);T9o=r(Wrt,"pretrained_model_name_or_path"),Wrt.forEach(t),M9o=r(j4,":"),j4.forEach(t),E9o=i(Jt),ma=n(Jt,"UL",{});var gl=s(ma);q5=n(gl,"LI",{});var bAe=s(q5);Jie=n(bAe,"STRONG",{});var Hrt=s(Jie);C9o=r(Hrt,"bert"),Hrt.forEach(t),w9o=r(bAe," \u2014 "),nN=n(bAe,"A",{href:!0});var Urt=s(nN);A9o=r(Urt,"BertForNextSentencePrediction"),Urt.forEach(t),y9o=r(bAe," (BERT model)"),bAe.forEach(t),L9o=i(gl),I5=n(gl,"LI",{});var FAe=s(I5);Yie=n(FAe,"STRONG",{});var Jrt=s(Yie);x9o=r(Jrt,"fnet"),Jrt.forEach(t),k9o=r(FAe," \u2014 "),sN=n(FAe,"A",{href:!0});var Yrt=s(sN);S9o=r(Yrt,"FNetForNextSentencePrediction"),Yrt.forEach(t),R9o=r(FAe," (FNet model)"),FAe.forEach(t),B9o=i(gl),j5=n(gl,"LI",{});var vAe=s(j5);Kie=n(vAe,"STRONG",{});var Krt=s(Kie);P9o=r(Krt,"megatron-bert"),Krt.forEach(t),$9o=r(vAe," \u2014 "),lN=n(vAe,"A",{href:!0});var Zrt=s(lN);q9o=r(Zrt,"MegatronBertForNextSentencePrediction"),Zrt.forEach(t),I9o=r(vAe," (MegatronBert model)"),vAe.forEach(t),j9o=i(gl),N5=n(gl,"LI",{});var TAe=s(N5);Zie=n(TAe,"STRONG",{});var ett=s(Zie);N9o=r(ett,"mobilebert"),ett.forEach(t),D9o=r(TAe," \u2014 "),iN=n(TAe,"A",{href:!0});var ott=s(iN);G9o=r(ott,"MobileBertForNextSentencePrediction"),ott.forEach(t),O9o=r(TAe," (MobileBERT model)"),TAe.forEach(t),V9o=i(gl),D5=n(gl,"LI",{});var MAe=s(D5);ede=n(MAe,"STRONG",{});var rtt=s(ede);X9o=r(rtt,"qdqbert"),rtt.forEach(t),z9o=r(MAe," \u2014 "),dN=n(MAe,"A",{href:!0});var ttt=s(dN);Q9o=r(ttt,"QDQBertForNextSentencePrediction"),ttt.forEach(t),W9o=r(MAe," (QDQBert model)"),MAe.forEach(t),gl.forEach(t),H9o=i(Jt),G5=n(Jt,"P",{});var EAe=s(G5);U9o=r(EAe,"The model is set in evaluation mode by default using "),ode=n(EAe,"CODE",{});var att=s(ode);J9o=r(att,"model.eval()"),att.forEach(t),Y9o=r(EAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rde=n(EAe,"CODE",{});var ntt=s(rde);K9o=r(ntt,"model.train()"),ntt.forEach(t),EAe.forEach(t),Z9o=i(Jt),tde=n(Jt,"P",{});var stt=s(tde);exo=r(stt,"Examples:"),stt.forEach(t),oxo=i(Jt),m(d3.$$.fragment,Jt),Jt.forEach(t),fl.forEach(t),KRe=i(c),yd=n(c,"H2",{class:!0});var d$e=s(yd);O5=n(d$e,"A",{id:!0,class:!0,href:!0});var ltt=s(O5);ade=n(ltt,"SPAN",{});var itt=s(ade);m(c3.$$.fragment,itt),itt.forEach(t),ltt.forEach(t),rxo=i(d$e),nde=n(d$e,"SPAN",{});var dtt=s(nde);txo=r(dtt,"AutoModelForTokenClassification"),dtt.forEach(t),d$e.forEach(t),ZRe=i(c),nr=n(c,"DIV",{class:!0});var hl=s(nr);m(f3.$$.fragment,hl),axo=i(hl),Ld=n(hl,"P",{});var $U=s(Ld);nxo=r($U,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),cN=n($U,"A",{href:!0});var ctt=s(cN);sxo=r(ctt,"from_pretrained()"),ctt.forEach(t),lxo=r($U," class method or the "),fN=n($U,"A",{href:!0});var ftt=s(fN);ixo=r(ftt,"from_config()"),ftt.forEach(t),dxo=r($U,` class
method.`),$U.forEach(t),cxo=i(hl),m3=n(hl,"P",{});var c$e=s(m3);fxo=r(c$e,"This class cannot be instantiated directly using "),sde=n(c$e,"CODE",{});var mtt=s(sde);mxo=r(mtt,"__init__()"),mtt.forEach(t),gxo=r(c$e," (throws an error)."),c$e.forEach(t),hxo=i(hl),et=n(hl,"DIV",{class:!0});var pl=s(et);m(g3.$$.fragment,pl),pxo=i(pl),lde=n(pl,"P",{});var gtt=s(lde);_xo=r(gtt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),gtt.forEach(t),uxo=i(pl),xd=n(pl,"P",{});var qU=s(xd);bxo=r(qU,`Note:
Loading a model from its configuration file does `),ide=n(qU,"STRONG",{});var htt=s(ide);Fxo=r(htt,"not"),htt.forEach(t),vxo=r(qU,` load the model weights. It only affects the
model\u2019s configuration. Use `),mN=n(qU,"A",{href:!0});var ptt=s(mN);Txo=r(ptt,"from_pretrained()"),ptt.forEach(t),Mxo=r(qU," to load the model weights."),qU.forEach(t),Exo=i(pl),dde=n(pl,"P",{});var _tt=s(dde);Cxo=r(_tt,"Examples:"),_tt.forEach(t),wxo=i(pl),m(h3.$$.fragment,pl),pl.forEach(t),Axo=i(hl),ze=n(hl,"DIV",{class:!0});var Yt=s(ze);m(p3.$$.fragment,Yt),yxo=i(Yt),cde=n(Yt,"P",{});var utt=s(cde);Lxo=r(utt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),utt.forEach(t),xxo=i(Yt),rn=n(Yt,"P",{});var N4=s(rn);kxo=r(N4,"The model class to instantiate is selected based on the "),fde=n(N4,"CODE",{});var btt=s(fde);Sxo=r(btt,"model_type"),btt.forEach(t),Rxo=r(N4,` property of the config object (either
passed as an argument or loaded from `),mde=n(N4,"CODE",{});var Ftt=s(mde);Bxo=r(Ftt,"pretrained_model_name_or_path"),Ftt.forEach(t),Pxo=r(N4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gde=n(N4,"CODE",{});var vtt=s(gde);$xo=r(vtt,"pretrained_model_name_or_path"),vtt.forEach(t),qxo=r(N4,":"),N4.forEach(t),Ixo=i(Yt),N=n(Yt,"UL",{});var D=s(N);V5=n(D,"LI",{});var CAe=s(V5);hde=n(CAe,"STRONG",{});var Ttt=s(hde);jxo=r(Ttt,"albert"),Ttt.forEach(t),Nxo=r(CAe," \u2014 "),gN=n(CAe,"A",{href:!0});var Mtt=s(gN);Dxo=r(Mtt,"AlbertForTokenClassification"),Mtt.forEach(t),Gxo=r(CAe," (ALBERT model)"),CAe.forEach(t),Oxo=i(D),X5=n(D,"LI",{});var wAe=s(X5);pde=n(wAe,"STRONG",{});var Ett=s(pde);Vxo=r(Ett,"bert"),Ett.forEach(t),Xxo=r(wAe," \u2014 "),hN=n(wAe,"A",{href:!0});var Ctt=s(hN);zxo=r(Ctt,"BertForTokenClassification"),Ctt.forEach(t),Qxo=r(wAe," (BERT model)"),wAe.forEach(t),Wxo=i(D),z5=n(D,"LI",{});var AAe=s(z5);_de=n(AAe,"STRONG",{});var wtt=s(_de);Hxo=r(wtt,"big_bird"),wtt.forEach(t),Uxo=r(AAe," \u2014 "),pN=n(AAe,"A",{href:!0});var Att=s(pN);Jxo=r(Att,"BigBirdForTokenClassification"),Att.forEach(t),Yxo=r(AAe," (BigBird model)"),AAe.forEach(t),Kxo=i(D),Q5=n(D,"LI",{});var yAe=s(Q5);ude=n(yAe,"STRONG",{});var ytt=s(ude);Zxo=r(ytt,"camembert"),ytt.forEach(t),eko=r(yAe," \u2014 "),_N=n(yAe,"A",{href:!0});var Ltt=s(_N);oko=r(Ltt,"CamembertForTokenClassification"),Ltt.forEach(t),rko=r(yAe," (CamemBERT model)"),yAe.forEach(t),tko=i(D),W5=n(D,"LI",{});var LAe=s(W5);bde=n(LAe,"STRONG",{});var xtt=s(bde);ako=r(xtt,"canine"),xtt.forEach(t),nko=r(LAe," \u2014 "),uN=n(LAe,"A",{href:!0});var ktt=s(uN);sko=r(ktt,"CanineForTokenClassification"),ktt.forEach(t),lko=r(LAe," (Canine model)"),LAe.forEach(t),iko=i(D),H5=n(D,"LI",{});var xAe=s(H5);Fde=n(xAe,"STRONG",{});var Stt=s(Fde);dko=r(Stt,"convbert"),Stt.forEach(t),cko=r(xAe," \u2014 "),bN=n(xAe,"A",{href:!0});var Rtt=s(bN);fko=r(Rtt,"ConvBertForTokenClassification"),Rtt.forEach(t),mko=r(xAe," (ConvBERT model)"),xAe.forEach(t),gko=i(D),U5=n(D,"LI",{});var kAe=s(U5);vde=n(kAe,"STRONG",{});var Btt=s(vde);hko=r(Btt,"data2vec-text"),Btt.forEach(t),pko=r(kAe," \u2014 "),FN=n(kAe,"A",{href:!0});var Ptt=s(FN);_ko=r(Ptt,"Data2VecTextForTokenClassification"),Ptt.forEach(t),uko=r(kAe," (Data2VecText model)"),kAe.forEach(t),bko=i(D),J5=n(D,"LI",{});var SAe=s(J5);Tde=n(SAe,"STRONG",{});var $tt=s(Tde);Fko=r($tt,"deberta"),$tt.forEach(t),vko=r(SAe," \u2014 "),vN=n(SAe,"A",{href:!0});var qtt=s(vN);Tko=r(qtt,"DebertaForTokenClassification"),qtt.forEach(t),Mko=r(SAe," (DeBERTa model)"),SAe.forEach(t),Eko=i(D),Y5=n(D,"LI",{});var RAe=s(Y5);Mde=n(RAe,"STRONG",{});var Itt=s(Mde);Cko=r(Itt,"deberta-v2"),Itt.forEach(t),wko=r(RAe," \u2014 "),TN=n(RAe,"A",{href:!0});var jtt=s(TN);Ako=r(jtt,"DebertaV2ForTokenClassification"),jtt.forEach(t),yko=r(RAe," (DeBERTa-v2 model)"),RAe.forEach(t),Lko=i(D),K5=n(D,"LI",{});var BAe=s(K5);Ede=n(BAe,"STRONG",{});var Ntt=s(Ede);xko=r(Ntt,"distilbert"),Ntt.forEach(t),kko=r(BAe," \u2014 "),MN=n(BAe,"A",{href:!0});var Dtt=s(MN);Sko=r(Dtt,"DistilBertForTokenClassification"),Dtt.forEach(t),Rko=r(BAe," (DistilBERT model)"),BAe.forEach(t),Bko=i(D),Z5=n(D,"LI",{});var PAe=s(Z5);Cde=n(PAe,"STRONG",{});var Gtt=s(Cde);Pko=r(Gtt,"electra"),Gtt.forEach(t),$ko=r(PAe," \u2014 "),EN=n(PAe,"A",{href:!0});var Ott=s(EN);qko=r(Ott,"ElectraForTokenClassification"),Ott.forEach(t),Iko=r(PAe," (ELECTRA model)"),PAe.forEach(t),jko=i(D),e2=n(D,"LI",{});var $Ae=s(e2);wde=n($Ae,"STRONG",{});var Vtt=s(wde);Nko=r(Vtt,"flaubert"),Vtt.forEach(t),Dko=r($Ae," \u2014 "),CN=n($Ae,"A",{href:!0});var Xtt=s(CN);Gko=r(Xtt,"FlaubertForTokenClassification"),Xtt.forEach(t),Oko=r($Ae," (FlauBERT model)"),$Ae.forEach(t),Vko=i(D),o2=n(D,"LI",{});var qAe=s(o2);Ade=n(qAe,"STRONG",{});var ztt=s(Ade);Xko=r(ztt,"fnet"),ztt.forEach(t),zko=r(qAe," \u2014 "),wN=n(qAe,"A",{href:!0});var Qtt=s(wN);Qko=r(Qtt,"FNetForTokenClassification"),Qtt.forEach(t),Wko=r(qAe," (FNet model)"),qAe.forEach(t),Hko=i(D),r2=n(D,"LI",{});var IAe=s(r2);yde=n(IAe,"STRONG",{});var Wtt=s(yde);Uko=r(Wtt,"funnel"),Wtt.forEach(t),Jko=r(IAe," \u2014 "),AN=n(IAe,"A",{href:!0});var Htt=s(AN);Yko=r(Htt,"FunnelForTokenClassification"),Htt.forEach(t),Kko=r(IAe," (Funnel Transformer model)"),IAe.forEach(t),Zko=i(D),t2=n(D,"LI",{});var jAe=s(t2);Lde=n(jAe,"STRONG",{});var Utt=s(Lde);eSo=r(Utt,"gpt2"),Utt.forEach(t),oSo=r(jAe," \u2014 "),yN=n(jAe,"A",{href:!0});var Jtt=s(yN);rSo=r(Jtt,"GPT2ForTokenClassification"),Jtt.forEach(t),tSo=r(jAe," (OpenAI GPT-2 model)"),jAe.forEach(t),aSo=i(D),a2=n(D,"LI",{});var NAe=s(a2);xde=n(NAe,"STRONG",{});var Ytt=s(xde);nSo=r(Ytt,"ibert"),Ytt.forEach(t),sSo=r(NAe," \u2014 "),LN=n(NAe,"A",{href:!0});var Ktt=s(LN);lSo=r(Ktt,"IBertForTokenClassification"),Ktt.forEach(t),iSo=r(NAe," (I-BERT model)"),NAe.forEach(t),dSo=i(D),n2=n(D,"LI",{});var DAe=s(n2);kde=n(DAe,"STRONG",{});var Ztt=s(kde);cSo=r(Ztt,"layoutlm"),Ztt.forEach(t),fSo=r(DAe," \u2014 "),xN=n(DAe,"A",{href:!0});var eat=s(xN);mSo=r(eat,"LayoutLMForTokenClassification"),eat.forEach(t),gSo=r(DAe," (LayoutLM model)"),DAe.forEach(t),hSo=i(D),s2=n(D,"LI",{});var GAe=s(s2);Sde=n(GAe,"STRONG",{});var oat=s(Sde);pSo=r(oat,"layoutlmv2"),oat.forEach(t),_So=r(GAe," \u2014 "),kN=n(GAe,"A",{href:!0});var rat=s(kN);uSo=r(rat,"LayoutLMv2ForTokenClassification"),rat.forEach(t),bSo=r(GAe," (LayoutLMv2 model)"),GAe.forEach(t),FSo=i(D),l2=n(D,"LI",{});var OAe=s(l2);Rde=n(OAe,"STRONG",{});var tat=s(Rde);vSo=r(tat,"longformer"),tat.forEach(t),TSo=r(OAe," \u2014 "),SN=n(OAe,"A",{href:!0});var aat=s(SN);MSo=r(aat,"LongformerForTokenClassification"),aat.forEach(t),ESo=r(OAe," (Longformer model)"),OAe.forEach(t),CSo=i(D),i2=n(D,"LI",{});var VAe=s(i2);Bde=n(VAe,"STRONG",{});var nat=s(Bde);wSo=r(nat,"megatron-bert"),nat.forEach(t),ASo=r(VAe," \u2014 "),RN=n(VAe,"A",{href:!0});var sat=s(RN);ySo=r(sat,"MegatronBertForTokenClassification"),sat.forEach(t),LSo=r(VAe," (MegatronBert model)"),VAe.forEach(t),xSo=i(D),d2=n(D,"LI",{});var XAe=s(d2);Pde=n(XAe,"STRONG",{});var lat=s(Pde);kSo=r(lat,"mobilebert"),lat.forEach(t),SSo=r(XAe," \u2014 "),BN=n(XAe,"A",{href:!0});var iat=s(BN);RSo=r(iat,"MobileBertForTokenClassification"),iat.forEach(t),BSo=r(XAe," (MobileBERT model)"),XAe.forEach(t),PSo=i(D),c2=n(D,"LI",{});var zAe=s(c2);$de=n(zAe,"STRONG",{});var dat=s($de);$So=r(dat,"mpnet"),dat.forEach(t),qSo=r(zAe," \u2014 "),PN=n(zAe,"A",{href:!0});var cat=s(PN);ISo=r(cat,"MPNetForTokenClassification"),cat.forEach(t),jSo=r(zAe," (MPNet model)"),zAe.forEach(t),NSo=i(D),f2=n(D,"LI",{});var QAe=s(f2);qde=n(QAe,"STRONG",{});var fat=s(qde);DSo=r(fat,"nystromformer"),fat.forEach(t),GSo=r(QAe," \u2014 "),$N=n(QAe,"A",{href:!0});var mat=s($N);OSo=r(mat,"NystromformerForTokenClassification"),mat.forEach(t),VSo=r(QAe," (Nystromformer model)"),QAe.forEach(t),XSo=i(D),m2=n(D,"LI",{});var WAe=s(m2);Ide=n(WAe,"STRONG",{});var gat=s(Ide);zSo=r(gat,"qdqbert"),gat.forEach(t),QSo=r(WAe," \u2014 "),qN=n(WAe,"A",{href:!0});var hat=s(qN);WSo=r(hat,"QDQBertForTokenClassification"),hat.forEach(t),HSo=r(WAe," (QDQBert model)"),WAe.forEach(t),USo=i(D),g2=n(D,"LI",{});var HAe=s(g2);jde=n(HAe,"STRONG",{});var pat=s(jde);JSo=r(pat,"rembert"),pat.forEach(t),YSo=r(HAe," \u2014 "),IN=n(HAe,"A",{href:!0});var _at=s(IN);KSo=r(_at,"RemBertForTokenClassification"),_at.forEach(t),ZSo=r(HAe," (RemBERT model)"),HAe.forEach(t),eRo=i(D),h2=n(D,"LI",{});var UAe=s(h2);Nde=n(UAe,"STRONG",{});var uat=s(Nde);oRo=r(uat,"roberta"),uat.forEach(t),rRo=r(UAe," \u2014 "),jN=n(UAe,"A",{href:!0});var bat=s(jN);tRo=r(bat,"RobertaForTokenClassification"),bat.forEach(t),aRo=r(UAe," (RoBERTa model)"),UAe.forEach(t),nRo=i(D),p2=n(D,"LI",{});var JAe=s(p2);Dde=n(JAe,"STRONG",{});var Fat=s(Dde);sRo=r(Fat,"roformer"),Fat.forEach(t),lRo=r(JAe," \u2014 "),NN=n(JAe,"A",{href:!0});var vat=s(NN);iRo=r(vat,"RoFormerForTokenClassification"),vat.forEach(t),dRo=r(JAe," (RoFormer model)"),JAe.forEach(t),cRo=i(D),_2=n(D,"LI",{});var YAe=s(_2);Gde=n(YAe,"STRONG",{});var Tat=s(Gde);fRo=r(Tat,"squeezebert"),Tat.forEach(t),mRo=r(YAe," \u2014 "),DN=n(YAe,"A",{href:!0});var Mat=s(DN);gRo=r(Mat,"SqueezeBertForTokenClassification"),Mat.forEach(t),hRo=r(YAe," (SqueezeBERT model)"),YAe.forEach(t),pRo=i(D),u2=n(D,"LI",{});var KAe=s(u2);Ode=n(KAe,"STRONG",{});var Eat=s(Ode);_Ro=r(Eat,"xlm"),Eat.forEach(t),uRo=r(KAe," \u2014 "),GN=n(KAe,"A",{href:!0});var Cat=s(GN);bRo=r(Cat,"XLMForTokenClassification"),Cat.forEach(t),FRo=r(KAe," (XLM model)"),KAe.forEach(t),vRo=i(D),b2=n(D,"LI",{});var ZAe=s(b2);Vde=n(ZAe,"STRONG",{});var wat=s(Vde);TRo=r(wat,"xlm-roberta"),wat.forEach(t),MRo=r(ZAe," \u2014 "),ON=n(ZAe,"A",{href:!0});var Aat=s(ON);ERo=r(Aat,"XLMRobertaForTokenClassification"),Aat.forEach(t),CRo=r(ZAe," (XLM-RoBERTa model)"),ZAe.forEach(t),wRo=i(D),F2=n(D,"LI",{});var eye=s(F2);Xde=n(eye,"STRONG",{});var yat=s(Xde);ARo=r(yat,"xlm-roberta-xl"),yat.forEach(t),yRo=r(eye," \u2014 "),VN=n(eye,"A",{href:!0});var Lat=s(VN);LRo=r(Lat,"XLMRobertaXLForTokenClassification"),Lat.forEach(t),xRo=r(eye," (XLM-RoBERTa-XL model)"),eye.forEach(t),kRo=i(D),v2=n(D,"LI",{});var oye=s(v2);zde=n(oye,"STRONG",{});var xat=s(zde);SRo=r(xat,"xlnet"),xat.forEach(t),RRo=r(oye," \u2014 "),XN=n(oye,"A",{href:!0});var kat=s(XN);BRo=r(kat,"XLNetForTokenClassification"),kat.forEach(t),PRo=r(oye," (XLNet model)"),oye.forEach(t),$Ro=i(D),T2=n(D,"LI",{});var rye=s(T2);Qde=n(rye,"STRONG",{});var Sat=s(Qde);qRo=r(Sat,"yoso"),Sat.forEach(t),IRo=r(rye," \u2014 "),zN=n(rye,"A",{href:!0});var Rat=s(zN);jRo=r(Rat,"YosoForTokenClassification"),Rat.forEach(t),NRo=r(rye," (YOSO model)"),rye.forEach(t),D.forEach(t),DRo=i(Yt),M2=n(Yt,"P",{});var tye=s(M2);GRo=r(tye,"The model is set in evaluation mode by default using "),Wde=n(tye,"CODE",{});var Bat=s(Wde);ORo=r(Bat,"model.eval()"),Bat.forEach(t),VRo=r(tye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hde=n(tye,"CODE",{});var Pat=s(Hde);XRo=r(Pat,"model.train()"),Pat.forEach(t),tye.forEach(t),zRo=i(Yt),Ude=n(Yt,"P",{});var $at=s(Ude);QRo=r($at,"Examples:"),$at.forEach(t),WRo=i(Yt),m(_3.$$.fragment,Yt),Yt.forEach(t),hl.forEach(t),eBe=i(c),kd=n(c,"H2",{class:!0});var f$e=s(kd);E2=n(f$e,"A",{id:!0,class:!0,href:!0});var qat=s(E2);Jde=n(qat,"SPAN",{});var Iat=s(Jde);m(u3.$$.fragment,Iat),Iat.forEach(t),qat.forEach(t),HRo=i(f$e),Yde=n(f$e,"SPAN",{});var jat=s(Yde);URo=r(jat,"AutoModelForQuestionAnswering"),jat.forEach(t),f$e.forEach(t),oBe=i(c),sr=n(c,"DIV",{class:!0});var _l=s(sr);m(b3.$$.fragment,_l),JRo=i(_l),Sd=n(_l,"P",{});var IU=s(Sd);YRo=r(IU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),QN=n(IU,"A",{href:!0});var Nat=s(QN);KRo=r(Nat,"from_pretrained()"),Nat.forEach(t),ZRo=r(IU," class method or the "),WN=n(IU,"A",{href:!0});var Dat=s(WN);eBo=r(Dat,"from_config()"),Dat.forEach(t),oBo=r(IU,` class
method.`),IU.forEach(t),rBo=i(_l),F3=n(_l,"P",{});var m$e=s(F3);tBo=r(m$e,"This class cannot be instantiated directly using "),Kde=n(m$e,"CODE",{});var Gat=s(Kde);aBo=r(Gat,"__init__()"),Gat.forEach(t),nBo=r(m$e," (throws an error)."),m$e.forEach(t),sBo=i(_l),ot=n(_l,"DIV",{class:!0});var ul=s(ot);m(v3.$$.fragment,ul),lBo=i(ul),Zde=n(ul,"P",{});var Oat=s(Zde);iBo=r(Oat,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Oat.forEach(t),dBo=i(ul),Rd=n(ul,"P",{});var jU=s(Rd);cBo=r(jU,`Note:
Loading a model from its configuration file does `),ece=n(jU,"STRONG",{});var Vat=s(ece);fBo=r(Vat,"not"),Vat.forEach(t),mBo=r(jU,` load the model weights. It only affects the
model\u2019s configuration. Use `),HN=n(jU,"A",{href:!0});var Xat=s(HN);gBo=r(Xat,"from_pretrained()"),Xat.forEach(t),hBo=r(jU," to load the model weights."),jU.forEach(t),pBo=i(ul),oce=n(ul,"P",{});var zat=s(oce);_Bo=r(zat,"Examples:"),zat.forEach(t),uBo=i(ul),m(T3.$$.fragment,ul),ul.forEach(t),bBo=i(_l),Qe=n(_l,"DIV",{class:!0});var Kt=s(Qe);m(M3.$$.fragment,Kt),FBo=i(Kt),rce=n(Kt,"P",{});var Qat=s(rce);vBo=r(Qat,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Qat.forEach(t),TBo=i(Kt),tn=n(Kt,"P",{});var D4=s(tn);MBo=r(D4,"The model class to instantiate is selected based on the "),tce=n(D4,"CODE",{});var Wat=s(tce);EBo=r(Wat,"model_type"),Wat.forEach(t),CBo=r(D4,` property of the config object (either
passed as an argument or loaded from `),ace=n(D4,"CODE",{});var Hat=s(ace);wBo=r(Hat,"pretrained_model_name_or_path"),Hat.forEach(t),ABo=r(D4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nce=n(D4,"CODE",{});var Uat=s(nce);yBo=r(Uat,"pretrained_model_name_or_path"),Uat.forEach(t),LBo=r(D4,":"),D4.forEach(t),xBo=i(Kt),R=n(Kt,"UL",{});var P=s(R);C2=n(P,"LI",{});var aye=s(C2);sce=n(aye,"STRONG",{});var Jat=s(sce);kBo=r(Jat,"albert"),Jat.forEach(t),SBo=r(aye," \u2014 "),UN=n(aye,"A",{href:!0});var Yat=s(UN);RBo=r(Yat,"AlbertForQuestionAnswering"),Yat.forEach(t),BBo=r(aye," (ALBERT model)"),aye.forEach(t),PBo=i(P),w2=n(P,"LI",{});var nye=s(w2);lce=n(nye,"STRONG",{});var Kat=s(lce);$Bo=r(Kat,"bart"),Kat.forEach(t),qBo=r(nye," \u2014 "),JN=n(nye,"A",{href:!0});var Zat=s(JN);IBo=r(Zat,"BartForQuestionAnswering"),Zat.forEach(t),jBo=r(nye," (BART model)"),nye.forEach(t),NBo=i(P),A2=n(P,"LI",{});var sye=s(A2);ice=n(sye,"STRONG",{});var ent=s(ice);DBo=r(ent,"bert"),ent.forEach(t),GBo=r(sye," \u2014 "),YN=n(sye,"A",{href:!0});var ont=s(YN);OBo=r(ont,"BertForQuestionAnswering"),ont.forEach(t),VBo=r(sye," (BERT model)"),sye.forEach(t),XBo=i(P),y2=n(P,"LI",{});var lye=s(y2);dce=n(lye,"STRONG",{});var rnt=s(dce);zBo=r(rnt,"big_bird"),rnt.forEach(t),QBo=r(lye," \u2014 "),KN=n(lye,"A",{href:!0});var tnt=s(KN);WBo=r(tnt,"BigBirdForQuestionAnswering"),tnt.forEach(t),HBo=r(lye," (BigBird model)"),lye.forEach(t),UBo=i(P),L2=n(P,"LI",{});var iye=s(L2);cce=n(iye,"STRONG",{});var ant=s(cce);JBo=r(ant,"bigbird_pegasus"),ant.forEach(t),YBo=r(iye," \u2014 "),ZN=n(iye,"A",{href:!0});var nnt=s(ZN);KBo=r(nnt,"BigBirdPegasusForQuestionAnswering"),nnt.forEach(t),ZBo=r(iye," (BigBirdPegasus model)"),iye.forEach(t),ePo=i(P),x2=n(P,"LI",{});var dye=s(x2);fce=n(dye,"STRONG",{});var snt=s(fce);oPo=r(snt,"camembert"),snt.forEach(t),rPo=r(dye," \u2014 "),eD=n(dye,"A",{href:!0});var lnt=s(eD);tPo=r(lnt,"CamembertForQuestionAnswering"),lnt.forEach(t),aPo=r(dye," (CamemBERT model)"),dye.forEach(t),nPo=i(P),k2=n(P,"LI",{});var cye=s(k2);mce=n(cye,"STRONG",{});var int=s(mce);sPo=r(int,"canine"),int.forEach(t),lPo=r(cye," \u2014 "),oD=n(cye,"A",{href:!0});var dnt=s(oD);iPo=r(dnt,"CanineForQuestionAnswering"),dnt.forEach(t),dPo=r(cye," (Canine model)"),cye.forEach(t),cPo=i(P),S2=n(P,"LI",{});var fye=s(S2);gce=n(fye,"STRONG",{});var cnt=s(gce);fPo=r(cnt,"convbert"),cnt.forEach(t),mPo=r(fye," \u2014 "),rD=n(fye,"A",{href:!0});var fnt=s(rD);gPo=r(fnt,"ConvBertForQuestionAnswering"),fnt.forEach(t),hPo=r(fye," (ConvBERT model)"),fye.forEach(t),pPo=i(P),R2=n(P,"LI",{});var mye=s(R2);hce=n(mye,"STRONG",{});var mnt=s(hce);_Po=r(mnt,"data2vec-text"),mnt.forEach(t),uPo=r(mye," \u2014 "),tD=n(mye,"A",{href:!0});var gnt=s(tD);bPo=r(gnt,"Data2VecTextForQuestionAnswering"),gnt.forEach(t),FPo=r(mye," (Data2VecText model)"),mye.forEach(t),vPo=i(P),B2=n(P,"LI",{});var gye=s(B2);pce=n(gye,"STRONG",{});var hnt=s(pce);TPo=r(hnt,"deberta"),hnt.forEach(t),MPo=r(gye," \u2014 "),aD=n(gye,"A",{href:!0});var pnt=s(aD);EPo=r(pnt,"DebertaForQuestionAnswering"),pnt.forEach(t),CPo=r(gye," (DeBERTa model)"),gye.forEach(t),wPo=i(P),P2=n(P,"LI",{});var hye=s(P2);_ce=n(hye,"STRONG",{});var _nt=s(_ce);APo=r(_nt,"deberta-v2"),_nt.forEach(t),yPo=r(hye," \u2014 "),nD=n(hye,"A",{href:!0});var unt=s(nD);LPo=r(unt,"DebertaV2ForQuestionAnswering"),unt.forEach(t),xPo=r(hye," (DeBERTa-v2 model)"),hye.forEach(t),kPo=i(P),$2=n(P,"LI",{});var pye=s($2);uce=n(pye,"STRONG",{});var bnt=s(uce);SPo=r(bnt,"distilbert"),bnt.forEach(t),RPo=r(pye," \u2014 "),sD=n(pye,"A",{href:!0});var Fnt=s(sD);BPo=r(Fnt,"DistilBertForQuestionAnswering"),Fnt.forEach(t),PPo=r(pye," (DistilBERT model)"),pye.forEach(t),$Po=i(P),q2=n(P,"LI",{});var _ye=s(q2);bce=n(_ye,"STRONG",{});var vnt=s(bce);qPo=r(vnt,"electra"),vnt.forEach(t),IPo=r(_ye," \u2014 "),lD=n(_ye,"A",{href:!0});var Tnt=s(lD);jPo=r(Tnt,"ElectraForQuestionAnswering"),Tnt.forEach(t),NPo=r(_ye," (ELECTRA model)"),_ye.forEach(t),DPo=i(P),I2=n(P,"LI",{});var uye=s(I2);Fce=n(uye,"STRONG",{});var Mnt=s(Fce);GPo=r(Mnt,"flaubert"),Mnt.forEach(t),OPo=r(uye," \u2014 "),iD=n(uye,"A",{href:!0});var Ent=s(iD);VPo=r(Ent,"FlaubertForQuestionAnsweringSimple"),Ent.forEach(t),XPo=r(uye," (FlauBERT model)"),uye.forEach(t),zPo=i(P),j2=n(P,"LI",{});var bye=s(j2);vce=n(bye,"STRONG",{});var Cnt=s(vce);QPo=r(Cnt,"fnet"),Cnt.forEach(t),WPo=r(bye," \u2014 "),dD=n(bye,"A",{href:!0});var wnt=s(dD);HPo=r(wnt,"FNetForQuestionAnswering"),wnt.forEach(t),UPo=r(bye," (FNet model)"),bye.forEach(t),JPo=i(P),N2=n(P,"LI",{});var Fye=s(N2);Tce=n(Fye,"STRONG",{});var Ant=s(Tce);YPo=r(Ant,"funnel"),Ant.forEach(t),KPo=r(Fye," \u2014 "),cD=n(Fye,"A",{href:!0});var ynt=s(cD);ZPo=r(ynt,"FunnelForQuestionAnswering"),ynt.forEach(t),e$o=r(Fye," (Funnel Transformer model)"),Fye.forEach(t),o$o=i(P),D2=n(P,"LI",{});var vye=s(D2);Mce=n(vye,"STRONG",{});var Lnt=s(Mce);r$o=r(Lnt,"gptj"),Lnt.forEach(t),t$o=r(vye," \u2014 "),fD=n(vye,"A",{href:!0});var xnt=s(fD);a$o=r(xnt,"GPTJForQuestionAnswering"),xnt.forEach(t),n$o=r(vye," (GPT-J model)"),vye.forEach(t),s$o=i(P),G2=n(P,"LI",{});var Tye=s(G2);Ece=n(Tye,"STRONG",{});var knt=s(Ece);l$o=r(knt,"ibert"),knt.forEach(t),i$o=r(Tye," \u2014 "),mD=n(Tye,"A",{href:!0});var Snt=s(mD);d$o=r(Snt,"IBertForQuestionAnswering"),Snt.forEach(t),c$o=r(Tye," (I-BERT model)"),Tye.forEach(t),f$o=i(P),O2=n(P,"LI",{});var Mye=s(O2);Cce=n(Mye,"STRONG",{});var Rnt=s(Cce);m$o=r(Rnt,"layoutlmv2"),Rnt.forEach(t),g$o=r(Mye," \u2014 "),gD=n(Mye,"A",{href:!0});var Bnt=s(gD);h$o=r(Bnt,"LayoutLMv2ForQuestionAnswering"),Bnt.forEach(t),p$o=r(Mye," (LayoutLMv2 model)"),Mye.forEach(t),_$o=i(P),V2=n(P,"LI",{});var Eye=s(V2);wce=n(Eye,"STRONG",{});var Pnt=s(wce);u$o=r(Pnt,"led"),Pnt.forEach(t),b$o=r(Eye," \u2014 "),hD=n(Eye,"A",{href:!0});var $nt=s(hD);F$o=r($nt,"LEDForQuestionAnswering"),$nt.forEach(t),v$o=r(Eye," (LED model)"),Eye.forEach(t),T$o=i(P),X2=n(P,"LI",{});var Cye=s(X2);Ace=n(Cye,"STRONG",{});var qnt=s(Ace);M$o=r(qnt,"longformer"),qnt.forEach(t),E$o=r(Cye," \u2014 "),pD=n(Cye,"A",{href:!0});var Int=s(pD);C$o=r(Int,"LongformerForQuestionAnswering"),Int.forEach(t),w$o=r(Cye," (Longformer model)"),Cye.forEach(t),A$o=i(P),z2=n(P,"LI",{});var wye=s(z2);yce=n(wye,"STRONG",{});var jnt=s(yce);y$o=r(jnt,"lxmert"),jnt.forEach(t),L$o=r(wye," \u2014 "),_D=n(wye,"A",{href:!0});var Nnt=s(_D);x$o=r(Nnt,"LxmertForQuestionAnswering"),Nnt.forEach(t),k$o=r(wye," (LXMERT model)"),wye.forEach(t),S$o=i(P),Q2=n(P,"LI",{});var Aye=s(Q2);Lce=n(Aye,"STRONG",{});var Dnt=s(Lce);R$o=r(Dnt,"mbart"),Dnt.forEach(t),B$o=r(Aye," \u2014 "),uD=n(Aye,"A",{href:!0});var Gnt=s(uD);P$o=r(Gnt,"MBartForQuestionAnswering"),Gnt.forEach(t),$$o=r(Aye," (mBART model)"),Aye.forEach(t),q$o=i(P),W2=n(P,"LI",{});var yye=s(W2);xce=n(yye,"STRONG",{});var Ont=s(xce);I$o=r(Ont,"megatron-bert"),Ont.forEach(t),j$o=r(yye," \u2014 "),bD=n(yye,"A",{href:!0});var Vnt=s(bD);N$o=r(Vnt,"MegatronBertForQuestionAnswering"),Vnt.forEach(t),D$o=r(yye," (MegatronBert model)"),yye.forEach(t),G$o=i(P),H2=n(P,"LI",{});var Lye=s(H2);kce=n(Lye,"STRONG",{});var Xnt=s(kce);O$o=r(Xnt,"mobilebert"),Xnt.forEach(t),V$o=r(Lye," \u2014 "),FD=n(Lye,"A",{href:!0});var znt=s(FD);X$o=r(znt,"MobileBertForQuestionAnswering"),znt.forEach(t),z$o=r(Lye," (MobileBERT model)"),Lye.forEach(t),Q$o=i(P),U2=n(P,"LI",{});var xye=s(U2);Sce=n(xye,"STRONG",{});var Qnt=s(Sce);W$o=r(Qnt,"mpnet"),Qnt.forEach(t),H$o=r(xye," \u2014 "),vD=n(xye,"A",{href:!0});var Wnt=s(vD);U$o=r(Wnt,"MPNetForQuestionAnswering"),Wnt.forEach(t),J$o=r(xye," (MPNet model)"),xye.forEach(t),Y$o=i(P),J2=n(P,"LI",{});var kye=s(J2);Rce=n(kye,"STRONG",{});var Hnt=s(Rce);K$o=r(Hnt,"nystromformer"),Hnt.forEach(t),Z$o=r(kye," \u2014 "),TD=n(kye,"A",{href:!0});var Unt=s(TD);eqo=r(Unt,"NystromformerForQuestionAnswering"),Unt.forEach(t),oqo=r(kye," (Nystromformer model)"),kye.forEach(t),rqo=i(P),Y2=n(P,"LI",{});var Sye=s(Y2);Bce=n(Sye,"STRONG",{});var Jnt=s(Bce);tqo=r(Jnt,"qdqbert"),Jnt.forEach(t),aqo=r(Sye," \u2014 "),MD=n(Sye,"A",{href:!0});var Ynt=s(MD);nqo=r(Ynt,"QDQBertForQuestionAnswering"),Ynt.forEach(t),sqo=r(Sye," (QDQBert model)"),Sye.forEach(t),lqo=i(P),K2=n(P,"LI",{});var Rye=s(K2);Pce=n(Rye,"STRONG",{});var Knt=s(Pce);iqo=r(Knt,"reformer"),Knt.forEach(t),dqo=r(Rye," \u2014 "),ED=n(Rye,"A",{href:!0});var Znt=s(ED);cqo=r(Znt,"ReformerForQuestionAnswering"),Znt.forEach(t),fqo=r(Rye," (Reformer model)"),Rye.forEach(t),mqo=i(P),Z2=n(P,"LI",{});var Bye=s(Z2);$ce=n(Bye,"STRONG",{});var est=s($ce);gqo=r(est,"rembert"),est.forEach(t),hqo=r(Bye," \u2014 "),CD=n(Bye,"A",{href:!0});var ost=s(CD);pqo=r(ost,"RemBertForQuestionAnswering"),ost.forEach(t),_qo=r(Bye," (RemBERT model)"),Bye.forEach(t),uqo=i(P),eF=n(P,"LI",{});var Pye=s(eF);qce=n(Pye,"STRONG",{});var rst=s(qce);bqo=r(rst,"roberta"),rst.forEach(t),Fqo=r(Pye," \u2014 "),wD=n(Pye,"A",{href:!0});var tst=s(wD);vqo=r(tst,"RobertaForQuestionAnswering"),tst.forEach(t),Tqo=r(Pye," (RoBERTa model)"),Pye.forEach(t),Mqo=i(P),oF=n(P,"LI",{});var $ye=s(oF);Ice=n($ye,"STRONG",{});var ast=s(Ice);Eqo=r(ast,"roformer"),ast.forEach(t),Cqo=r($ye," \u2014 "),AD=n($ye,"A",{href:!0});var nst=s(AD);wqo=r(nst,"RoFormerForQuestionAnswering"),nst.forEach(t),Aqo=r($ye," (RoFormer model)"),$ye.forEach(t),yqo=i(P),rF=n(P,"LI",{});var qye=s(rF);jce=n(qye,"STRONG",{});var sst=s(jce);Lqo=r(sst,"splinter"),sst.forEach(t),xqo=r(qye," \u2014 "),yD=n(qye,"A",{href:!0});var lst=s(yD);kqo=r(lst,"SplinterForQuestionAnswering"),lst.forEach(t),Sqo=r(qye," (Splinter model)"),qye.forEach(t),Rqo=i(P),tF=n(P,"LI",{});var Iye=s(tF);Nce=n(Iye,"STRONG",{});var ist=s(Nce);Bqo=r(ist,"squeezebert"),ist.forEach(t),Pqo=r(Iye," \u2014 "),LD=n(Iye,"A",{href:!0});var dst=s(LD);$qo=r(dst,"SqueezeBertForQuestionAnswering"),dst.forEach(t),qqo=r(Iye," (SqueezeBERT model)"),Iye.forEach(t),Iqo=i(P),aF=n(P,"LI",{});var jye=s(aF);Dce=n(jye,"STRONG",{});var cst=s(Dce);jqo=r(cst,"xlm"),cst.forEach(t),Nqo=r(jye," \u2014 "),xD=n(jye,"A",{href:!0});var fst=s(xD);Dqo=r(fst,"XLMForQuestionAnsweringSimple"),fst.forEach(t),Gqo=r(jye," (XLM model)"),jye.forEach(t),Oqo=i(P),nF=n(P,"LI",{});var Nye=s(nF);Gce=n(Nye,"STRONG",{});var mst=s(Gce);Vqo=r(mst,"xlm-roberta"),mst.forEach(t),Xqo=r(Nye," \u2014 "),kD=n(Nye,"A",{href:!0});var gst=s(kD);zqo=r(gst,"XLMRobertaForQuestionAnswering"),gst.forEach(t),Qqo=r(Nye," (XLM-RoBERTa model)"),Nye.forEach(t),Wqo=i(P),sF=n(P,"LI",{});var Dye=s(sF);Oce=n(Dye,"STRONG",{});var hst=s(Oce);Hqo=r(hst,"xlm-roberta-xl"),hst.forEach(t),Uqo=r(Dye," \u2014 "),SD=n(Dye,"A",{href:!0});var pst=s(SD);Jqo=r(pst,"XLMRobertaXLForQuestionAnswering"),pst.forEach(t),Yqo=r(Dye," (XLM-RoBERTa-XL model)"),Dye.forEach(t),Kqo=i(P),lF=n(P,"LI",{});var Gye=s(lF);Vce=n(Gye,"STRONG",{});var _st=s(Vce);Zqo=r(_st,"xlnet"),_st.forEach(t),eIo=r(Gye," \u2014 "),RD=n(Gye,"A",{href:!0});var ust=s(RD);oIo=r(ust,"XLNetForQuestionAnsweringSimple"),ust.forEach(t),rIo=r(Gye," (XLNet model)"),Gye.forEach(t),tIo=i(P),iF=n(P,"LI",{});var Oye=s(iF);Xce=n(Oye,"STRONG",{});var bst=s(Xce);aIo=r(bst,"yoso"),bst.forEach(t),nIo=r(Oye," \u2014 "),BD=n(Oye,"A",{href:!0});var Fst=s(BD);sIo=r(Fst,"YosoForQuestionAnswering"),Fst.forEach(t),lIo=r(Oye," (YOSO model)"),Oye.forEach(t),P.forEach(t),iIo=i(Kt),dF=n(Kt,"P",{});var Vye=s(dF);dIo=r(Vye,"The model is set in evaluation mode by default using "),zce=n(Vye,"CODE",{});var vst=s(zce);cIo=r(vst,"model.eval()"),vst.forEach(t),fIo=r(Vye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qce=n(Vye,"CODE",{});var Tst=s(Qce);mIo=r(Tst,"model.train()"),Tst.forEach(t),Vye.forEach(t),gIo=i(Kt),Wce=n(Kt,"P",{});var Mst=s(Wce);hIo=r(Mst,"Examples:"),Mst.forEach(t),pIo=i(Kt),m(E3.$$.fragment,Kt),Kt.forEach(t),_l.forEach(t),rBe=i(c),Bd=n(c,"H2",{class:!0});var g$e=s(Bd);cF=n(g$e,"A",{id:!0,class:!0,href:!0});var Est=s(cF);Hce=n(Est,"SPAN",{});var Cst=s(Hce);m(C3.$$.fragment,Cst),Cst.forEach(t),Est.forEach(t),_Io=i(g$e),Uce=n(g$e,"SPAN",{});var wst=s(Uce);uIo=r(wst,"AutoModelForTableQuestionAnswering"),wst.forEach(t),g$e.forEach(t),tBe=i(c),lr=n(c,"DIV",{class:!0});var bl=s(lr);m(w3.$$.fragment,bl),bIo=i(bl),Pd=n(bl,"P",{});var NU=s(Pd);FIo=r(NU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),PD=n(NU,"A",{href:!0});var Ast=s(PD);vIo=r(Ast,"from_pretrained()"),Ast.forEach(t),TIo=r(NU," class method or the "),$D=n(NU,"A",{href:!0});var yst=s($D);MIo=r(yst,"from_config()"),yst.forEach(t),EIo=r(NU,` class
method.`),NU.forEach(t),CIo=i(bl),A3=n(bl,"P",{});var h$e=s(A3);wIo=r(h$e,"This class cannot be instantiated directly using "),Jce=n(h$e,"CODE",{});var Lst=s(Jce);AIo=r(Lst,"__init__()"),Lst.forEach(t),yIo=r(h$e," (throws an error)."),h$e.forEach(t),LIo=i(bl),rt=n(bl,"DIV",{class:!0});var Fl=s(rt);m(y3.$$.fragment,Fl),xIo=i(Fl),Yce=n(Fl,"P",{});var xst=s(Yce);kIo=r(xst,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),xst.forEach(t),SIo=i(Fl),$d=n(Fl,"P",{});var DU=s($d);RIo=r(DU,`Note:
Loading a model from its configuration file does `),Kce=n(DU,"STRONG",{});var kst=s(Kce);BIo=r(kst,"not"),kst.forEach(t),PIo=r(DU,` load the model weights. It only affects the
model\u2019s configuration. Use `),qD=n(DU,"A",{href:!0});var Sst=s(qD);$Io=r(Sst,"from_pretrained()"),Sst.forEach(t),qIo=r(DU," to load the model weights."),DU.forEach(t),IIo=i(Fl),Zce=n(Fl,"P",{});var Rst=s(Zce);jIo=r(Rst,"Examples:"),Rst.forEach(t),NIo=i(Fl),m(L3.$$.fragment,Fl),Fl.forEach(t),DIo=i(bl),We=n(bl,"DIV",{class:!0});var Zt=s(We);m(x3.$$.fragment,Zt),GIo=i(Zt),efe=n(Zt,"P",{});var Bst=s(efe);OIo=r(Bst,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Bst.forEach(t),VIo=i(Zt),an=n(Zt,"P",{});var G4=s(an);XIo=r(G4,"The model class to instantiate is selected based on the "),ofe=n(G4,"CODE",{});var Pst=s(ofe);zIo=r(Pst,"model_type"),Pst.forEach(t),QIo=r(G4,` property of the config object (either
passed as an argument or loaded from `),rfe=n(G4,"CODE",{});var $st=s(rfe);WIo=r($st,"pretrained_model_name_or_path"),$st.forEach(t),HIo=r(G4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tfe=n(G4,"CODE",{});var qst=s(tfe);UIo=r(qst,"pretrained_model_name_or_path"),qst.forEach(t),JIo=r(G4,":"),G4.forEach(t),YIo=i(Zt),afe=n(Zt,"UL",{});var Ist=s(afe);fF=n(Ist,"LI",{});var Xye=s(fF);nfe=n(Xye,"STRONG",{});var jst=s(nfe);KIo=r(jst,"tapas"),jst.forEach(t),ZIo=r(Xye," \u2014 "),ID=n(Xye,"A",{href:!0});var Nst=s(ID);ejo=r(Nst,"TapasForQuestionAnswering"),Nst.forEach(t),ojo=r(Xye," (TAPAS model)"),Xye.forEach(t),Ist.forEach(t),rjo=i(Zt),mF=n(Zt,"P",{});var zye=s(mF);tjo=r(zye,"The model is set in evaluation mode by default using "),sfe=n(zye,"CODE",{});var Dst=s(sfe);ajo=r(Dst,"model.eval()"),Dst.forEach(t),njo=r(zye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lfe=n(zye,"CODE",{});var Gst=s(lfe);sjo=r(Gst,"model.train()"),Gst.forEach(t),zye.forEach(t),ljo=i(Zt),ife=n(Zt,"P",{});var Ost=s(ife);ijo=r(Ost,"Examples:"),Ost.forEach(t),djo=i(Zt),m(k3.$$.fragment,Zt),Zt.forEach(t),bl.forEach(t),aBe=i(c),qd=n(c,"H2",{class:!0});var p$e=s(qd);gF=n(p$e,"A",{id:!0,class:!0,href:!0});var Vst=s(gF);dfe=n(Vst,"SPAN",{});var Xst=s(dfe);m(S3.$$.fragment,Xst),Xst.forEach(t),Vst.forEach(t),cjo=i(p$e),cfe=n(p$e,"SPAN",{});var zst=s(cfe);fjo=r(zst,"AutoModelForImageClassification"),zst.forEach(t),p$e.forEach(t),nBe=i(c),ir=n(c,"DIV",{class:!0});var vl=s(ir);m(R3.$$.fragment,vl),mjo=i(vl),Id=n(vl,"P",{});var GU=s(Id);gjo=r(GU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),jD=n(GU,"A",{href:!0});var Qst=s(jD);hjo=r(Qst,"from_pretrained()"),Qst.forEach(t),pjo=r(GU," class method or the "),ND=n(GU,"A",{href:!0});var Wst=s(ND);_jo=r(Wst,"from_config()"),Wst.forEach(t),ujo=r(GU,` class
method.`),GU.forEach(t),bjo=i(vl),B3=n(vl,"P",{});var _$e=s(B3);Fjo=r(_$e,"This class cannot be instantiated directly using "),ffe=n(_$e,"CODE",{});var Hst=s(ffe);vjo=r(Hst,"__init__()"),Hst.forEach(t),Tjo=r(_$e," (throws an error)."),_$e.forEach(t),Mjo=i(vl),tt=n(vl,"DIV",{class:!0});var Tl=s(tt);m(P3.$$.fragment,Tl),Ejo=i(Tl),mfe=n(Tl,"P",{});var Ust=s(mfe);Cjo=r(Ust,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Ust.forEach(t),wjo=i(Tl),jd=n(Tl,"P",{});var OU=s(jd);Ajo=r(OU,`Note:
Loading a model from its configuration file does `),gfe=n(OU,"STRONG",{});var Jst=s(gfe);yjo=r(Jst,"not"),Jst.forEach(t),Ljo=r(OU,` load the model weights. It only affects the
model\u2019s configuration. Use `),DD=n(OU,"A",{href:!0});var Yst=s(DD);xjo=r(Yst,"from_pretrained()"),Yst.forEach(t),kjo=r(OU," to load the model weights."),OU.forEach(t),Sjo=i(Tl),hfe=n(Tl,"P",{});var Kst=s(hfe);Rjo=r(Kst,"Examples:"),Kst.forEach(t),Bjo=i(Tl),m($3.$$.fragment,Tl),Tl.forEach(t),Pjo=i(vl),He=n(vl,"DIV",{class:!0});var ea=s(He);m(q3.$$.fragment,ea),$jo=i(ea),pfe=n(ea,"P",{});var Zst=s(pfe);qjo=r(Zst,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Zst.forEach(t),Ijo=i(ea),nn=n(ea,"P",{});var O4=s(nn);jjo=r(O4,"The model class to instantiate is selected based on the "),_fe=n(O4,"CODE",{});var elt=s(_fe);Njo=r(elt,"model_type"),elt.forEach(t),Djo=r(O4,` property of the config object (either
passed as an argument or loaded from `),ufe=n(O4,"CODE",{});var olt=s(ufe);Gjo=r(olt,"pretrained_model_name_or_path"),olt.forEach(t),Ojo=r(O4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bfe=n(O4,"CODE",{});var rlt=s(bfe);Vjo=r(rlt,"pretrained_model_name_or_path"),rlt.forEach(t),Xjo=r(O4,":"),O4.forEach(t),zjo=i(ea),ge=n(ea,"UL",{});var Te=s(ge);hF=n(Te,"LI",{});var Qye=s(hF);Ffe=n(Qye,"STRONG",{});var tlt=s(Ffe);Qjo=r(tlt,"beit"),tlt.forEach(t),Wjo=r(Qye," \u2014 "),GD=n(Qye,"A",{href:!0});var alt=s(GD);Hjo=r(alt,"BeitForImageClassification"),alt.forEach(t),Ujo=r(Qye," (BEiT model)"),Qye.forEach(t),Jjo=i(Te),pF=n(Te,"LI",{});var Wye=s(pF);vfe=n(Wye,"STRONG",{});var nlt=s(vfe);Yjo=r(nlt,"convnext"),nlt.forEach(t),Kjo=r(Wye," \u2014 "),OD=n(Wye,"A",{href:!0});var slt=s(OD);Zjo=r(slt,"ConvNextForImageClassification"),slt.forEach(t),eNo=r(Wye," (ConvNext model)"),Wye.forEach(t),oNo=i(Te),zs=n(Te,"LI",{});var w9=s(zs);Tfe=n(w9,"STRONG",{});var llt=s(Tfe);rNo=r(llt,"deit"),llt.forEach(t),tNo=r(w9," \u2014 "),VD=n(w9,"A",{href:!0});var ilt=s(VD);aNo=r(ilt,"DeiTForImageClassification"),ilt.forEach(t),nNo=r(w9," or "),XD=n(w9,"A",{href:!0});var dlt=s(XD);sNo=r(dlt,"DeiTForImageClassificationWithTeacher"),dlt.forEach(t),lNo=r(w9," (DeiT model)"),w9.forEach(t),iNo=i(Te),_F=n(Te,"LI",{});var Hye=s(_F);Mfe=n(Hye,"STRONG",{});var clt=s(Mfe);dNo=r(clt,"imagegpt"),clt.forEach(t),cNo=r(Hye," \u2014 "),zD=n(Hye,"A",{href:!0});var flt=s(zD);fNo=r(flt,"ImageGPTForImageClassification"),flt.forEach(t),mNo=r(Hye," (ImageGPT model)"),Hye.forEach(t),gNo=i(Te),pa=n(Te,"LI",{});var zf=s(pa);Efe=n(zf,"STRONG",{});var mlt=s(Efe);hNo=r(mlt,"perceiver"),mlt.forEach(t),pNo=r(zf," \u2014 "),QD=n(zf,"A",{href:!0});var glt=s(QD);_No=r(glt,"PerceiverForImageClassificationLearned"),glt.forEach(t),uNo=r(zf," or "),WD=n(zf,"A",{href:!0});var hlt=s(WD);bNo=r(hlt,"PerceiverForImageClassificationFourier"),hlt.forEach(t),FNo=r(zf," or "),HD=n(zf,"A",{href:!0});var plt=s(HD);vNo=r(plt,"PerceiverForImageClassificationConvProcessing"),plt.forEach(t),TNo=r(zf," (Perceiver model)"),zf.forEach(t),MNo=i(Te),uF=n(Te,"LI",{});var Uye=s(uF);Cfe=n(Uye,"STRONG",{});var _lt=s(Cfe);ENo=r(_lt,"poolformer"),_lt.forEach(t),CNo=r(Uye," \u2014 "),UD=n(Uye,"A",{href:!0});var ult=s(UD);wNo=r(ult,"PoolFormerForImageClassification"),ult.forEach(t),ANo=r(Uye," (PoolFormer model)"),Uye.forEach(t),yNo=i(Te),bF=n(Te,"LI",{});var Jye=s(bF);wfe=n(Jye,"STRONG",{});var blt=s(wfe);LNo=r(blt,"resnet"),blt.forEach(t),xNo=r(Jye," \u2014 "),JD=n(Jye,"A",{href:!0});var Flt=s(JD);kNo=r(Flt,"ResNetForImageClassification"),Flt.forEach(t),SNo=r(Jye," (ResNet model)"),Jye.forEach(t),RNo=i(Te),FF=n(Te,"LI",{});var Yye=s(FF);Afe=n(Yye,"STRONG",{});var vlt=s(Afe);BNo=r(vlt,"segformer"),vlt.forEach(t),PNo=r(Yye," \u2014 "),YD=n(Yye,"A",{href:!0});var Tlt=s(YD);$No=r(Tlt,"SegformerForImageClassification"),Tlt.forEach(t),qNo=r(Yye," (SegFormer model)"),Yye.forEach(t),INo=i(Te),vF=n(Te,"LI",{});var Kye=s(vF);yfe=n(Kye,"STRONG",{});var Mlt=s(yfe);jNo=r(Mlt,"swin"),Mlt.forEach(t),NNo=r(Kye," \u2014 "),KD=n(Kye,"A",{href:!0});var Elt=s(KD);DNo=r(Elt,"SwinForImageClassification"),Elt.forEach(t),GNo=r(Kye," (Swin model)"),Kye.forEach(t),ONo=i(Te),TF=n(Te,"LI",{});var Zye=s(TF);Lfe=n(Zye,"STRONG",{});var Clt=s(Lfe);VNo=r(Clt,"van"),Clt.forEach(t),XNo=r(Zye," \u2014 "),ZD=n(Zye,"A",{href:!0});var wlt=s(ZD);zNo=r(wlt,"VanForImageClassification"),wlt.forEach(t),QNo=r(Zye," (VAN model)"),Zye.forEach(t),WNo=i(Te),MF=n(Te,"LI",{});var eLe=s(MF);xfe=n(eLe,"STRONG",{});var Alt=s(xfe);HNo=r(Alt,"vit"),Alt.forEach(t),UNo=r(eLe," \u2014 "),eG=n(eLe,"A",{href:!0});var ylt=s(eG);JNo=r(ylt,"ViTForImageClassification"),ylt.forEach(t),YNo=r(eLe," (ViT model)"),eLe.forEach(t),Te.forEach(t),KNo=i(ea),EF=n(ea,"P",{});var oLe=s(EF);ZNo=r(oLe,"The model is set in evaluation mode by default using "),kfe=n(oLe,"CODE",{});var Llt=s(kfe);eDo=r(Llt,"model.eval()"),Llt.forEach(t),oDo=r(oLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sfe=n(oLe,"CODE",{});var xlt=s(Sfe);rDo=r(xlt,"model.train()"),xlt.forEach(t),oLe.forEach(t),tDo=i(ea),Rfe=n(ea,"P",{});var klt=s(Rfe);aDo=r(klt,"Examples:"),klt.forEach(t),nDo=i(ea),m(I3.$$.fragment,ea),ea.forEach(t),vl.forEach(t),sBe=i(c),Nd=n(c,"H2",{class:!0});var u$e=s(Nd);CF=n(u$e,"A",{id:!0,class:!0,href:!0});var Slt=s(CF);Bfe=n(Slt,"SPAN",{});var Rlt=s(Bfe);m(j3.$$.fragment,Rlt),Rlt.forEach(t),Slt.forEach(t),sDo=i(u$e),Pfe=n(u$e,"SPAN",{});var Blt=s(Pfe);lDo=r(Blt,"AutoModelForVision2Seq"),Blt.forEach(t),u$e.forEach(t),lBe=i(c),dr=n(c,"DIV",{class:!0});var Ml=s(dr);m(N3.$$.fragment,Ml),iDo=i(Ml),Dd=n(Ml,"P",{});var VU=s(Dd);dDo=r(VU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),oG=n(VU,"A",{href:!0});var Plt=s(oG);cDo=r(Plt,"from_pretrained()"),Plt.forEach(t),fDo=r(VU," class method or the "),rG=n(VU,"A",{href:!0});var $lt=s(rG);mDo=r($lt,"from_config()"),$lt.forEach(t),gDo=r(VU,` class
method.`),VU.forEach(t),hDo=i(Ml),D3=n(Ml,"P",{});var b$e=s(D3);pDo=r(b$e,"This class cannot be instantiated directly using "),$fe=n(b$e,"CODE",{});var qlt=s($fe);_Do=r(qlt,"__init__()"),qlt.forEach(t),uDo=r(b$e," (throws an error)."),b$e.forEach(t),bDo=i(Ml),at=n(Ml,"DIV",{class:!0});var El=s(at);m(G3.$$.fragment,El),FDo=i(El),qfe=n(El,"P",{});var Ilt=s(qfe);vDo=r(Ilt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Ilt.forEach(t),TDo=i(El),Gd=n(El,"P",{});var XU=s(Gd);MDo=r(XU,`Note:
Loading a model from its configuration file does `),Ife=n(XU,"STRONG",{});var jlt=s(Ife);EDo=r(jlt,"not"),jlt.forEach(t),CDo=r(XU,` load the model weights. It only affects the
model\u2019s configuration. Use `),tG=n(XU,"A",{href:!0});var Nlt=s(tG);wDo=r(Nlt,"from_pretrained()"),Nlt.forEach(t),ADo=r(XU," to load the model weights."),XU.forEach(t),yDo=i(El),jfe=n(El,"P",{});var Dlt=s(jfe);LDo=r(Dlt,"Examples:"),Dlt.forEach(t),xDo=i(El),m(O3.$$.fragment,El),El.forEach(t),kDo=i(Ml),Ue=n(Ml,"DIV",{class:!0});var oa=s(Ue);m(V3.$$.fragment,oa),SDo=i(oa),Nfe=n(oa,"P",{});var Glt=s(Nfe);RDo=r(Glt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Glt.forEach(t),BDo=i(oa),sn=n(oa,"P",{});var V4=s(sn);PDo=r(V4,"The model class to instantiate is selected based on the "),Dfe=n(V4,"CODE",{});var Olt=s(Dfe);$Do=r(Olt,"model_type"),Olt.forEach(t),qDo=r(V4,` property of the config object (either
passed as an argument or loaded from `),Gfe=n(V4,"CODE",{});var Vlt=s(Gfe);IDo=r(Vlt,"pretrained_model_name_or_path"),Vlt.forEach(t),jDo=r(V4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ofe=n(V4,"CODE",{});var Xlt=s(Ofe);NDo=r(Xlt,"pretrained_model_name_or_path"),Xlt.forEach(t),DDo=r(V4,":"),V4.forEach(t),GDo=i(oa),Vfe=n(oa,"UL",{});var zlt=s(Vfe);wF=n(zlt,"LI",{});var rLe=s(wF);Xfe=n(rLe,"STRONG",{});var Qlt=s(Xfe);ODo=r(Qlt,"vision-encoder-decoder"),Qlt.forEach(t),VDo=r(rLe," \u2014 "),aG=n(rLe,"A",{href:!0});var Wlt=s(aG);XDo=r(Wlt,"VisionEncoderDecoderModel"),Wlt.forEach(t),zDo=r(rLe," (Vision Encoder decoder model)"),rLe.forEach(t),zlt.forEach(t),QDo=i(oa),AF=n(oa,"P",{});var tLe=s(AF);WDo=r(tLe,"The model is set in evaluation mode by default using "),zfe=n(tLe,"CODE",{});var Hlt=s(zfe);HDo=r(Hlt,"model.eval()"),Hlt.forEach(t),UDo=r(tLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qfe=n(tLe,"CODE",{});var Ult=s(Qfe);JDo=r(Ult,"model.train()"),Ult.forEach(t),tLe.forEach(t),YDo=i(oa),Wfe=n(oa,"P",{});var Jlt=s(Wfe);KDo=r(Jlt,"Examples:"),Jlt.forEach(t),ZDo=i(oa),m(X3.$$.fragment,oa),oa.forEach(t),Ml.forEach(t),iBe=i(c),Od=n(c,"H2",{class:!0});var F$e=s(Od);yF=n(F$e,"A",{id:!0,class:!0,href:!0});var Ylt=s(yF);Hfe=n(Ylt,"SPAN",{});var Klt=s(Hfe);m(z3.$$.fragment,Klt),Klt.forEach(t),Ylt.forEach(t),eGo=i(F$e),Ufe=n(F$e,"SPAN",{});var Zlt=s(Ufe);oGo=r(Zlt,"AutoModelForAudioClassification"),Zlt.forEach(t),F$e.forEach(t),dBe=i(c),cr=n(c,"DIV",{class:!0});var Cl=s(cr);m(Q3.$$.fragment,Cl),rGo=i(Cl),Vd=n(Cl,"P",{});var zU=s(Vd);tGo=r(zU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),nG=n(zU,"A",{href:!0});var eit=s(nG);aGo=r(eit,"from_pretrained()"),eit.forEach(t),nGo=r(zU," class method or the "),sG=n(zU,"A",{href:!0});var oit=s(sG);sGo=r(oit,"from_config()"),oit.forEach(t),lGo=r(zU,` class
method.`),zU.forEach(t),iGo=i(Cl),W3=n(Cl,"P",{});var v$e=s(W3);dGo=r(v$e,"This class cannot be instantiated directly using "),Jfe=n(v$e,"CODE",{});var rit=s(Jfe);cGo=r(rit,"__init__()"),rit.forEach(t),fGo=r(v$e," (throws an error)."),v$e.forEach(t),mGo=i(Cl),nt=n(Cl,"DIV",{class:!0});var wl=s(nt);m(H3.$$.fragment,wl),gGo=i(wl),Yfe=n(wl,"P",{});var tit=s(Yfe);hGo=r(tit,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),tit.forEach(t),pGo=i(wl),Xd=n(wl,"P",{});var QU=s(Xd);_Go=r(QU,`Note:
Loading a model from its configuration file does `),Kfe=n(QU,"STRONG",{});var ait=s(Kfe);uGo=r(ait,"not"),ait.forEach(t),bGo=r(QU,` load the model weights. It only affects the
model\u2019s configuration. Use `),lG=n(QU,"A",{href:!0});var nit=s(lG);FGo=r(nit,"from_pretrained()"),nit.forEach(t),vGo=r(QU," to load the model weights."),QU.forEach(t),TGo=i(wl),Zfe=n(wl,"P",{});var sit=s(Zfe);MGo=r(sit,"Examples:"),sit.forEach(t),EGo=i(wl),m(U3.$$.fragment,wl),wl.forEach(t),CGo=i(Cl),Je=n(Cl,"DIV",{class:!0});var ra=s(Je);m(J3.$$.fragment,ra),wGo=i(ra),eme=n(ra,"P",{});var lit=s(eme);AGo=r(lit,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),lit.forEach(t),yGo=i(ra),ln=n(ra,"P",{});var X4=s(ln);LGo=r(X4,"The model class to instantiate is selected based on the "),ome=n(X4,"CODE",{});var iit=s(ome);xGo=r(iit,"model_type"),iit.forEach(t),kGo=r(X4,` property of the config object (either
passed as an argument or loaded from `),rme=n(X4,"CODE",{});var dit=s(rme);SGo=r(dit,"pretrained_model_name_or_path"),dit.forEach(t),RGo=r(X4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tme=n(X4,"CODE",{});var cit=s(tme);BGo=r(cit,"pretrained_model_name_or_path"),cit.forEach(t),PGo=r(X4,":"),X4.forEach(t),$Go=i(ra),Se=n(ra,"UL",{});var Go=s(Se);LF=n(Go,"LI",{});var aLe=s(LF);ame=n(aLe,"STRONG",{});var fit=s(ame);qGo=r(fit,"data2vec-audio"),fit.forEach(t),IGo=r(aLe," \u2014 "),iG=n(aLe,"A",{href:!0});var mit=s(iG);jGo=r(mit,"Data2VecAudioForSequenceClassification"),mit.forEach(t),NGo=r(aLe," (Data2VecAudio model)"),aLe.forEach(t),DGo=i(Go),xF=n(Go,"LI",{});var nLe=s(xF);nme=n(nLe,"STRONG",{});var git=s(nme);GGo=r(git,"hubert"),git.forEach(t),OGo=r(nLe," \u2014 "),dG=n(nLe,"A",{href:!0});var hit=s(dG);VGo=r(hit,"HubertForSequenceClassification"),hit.forEach(t),XGo=r(nLe," (Hubert model)"),nLe.forEach(t),zGo=i(Go),kF=n(Go,"LI",{});var sLe=s(kF);sme=n(sLe,"STRONG",{});var pit=s(sme);QGo=r(pit,"sew"),pit.forEach(t),WGo=r(sLe," \u2014 "),cG=n(sLe,"A",{href:!0});var _it=s(cG);HGo=r(_it,"SEWForSequenceClassification"),_it.forEach(t),UGo=r(sLe," (SEW model)"),sLe.forEach(t),JGo=i(Go),SF=n(Go,"LI",{});var lLe=s(SF);lme=n(lLe,"STRONG",{});var uit=s(lme);YGo=r(uit,"sew-d"),uit.forEach(t),KGo=r(lLe," \u2014 "),fG=n(lLe,"A",{href:!0});var bit=s(fG);ZGo=r(bit,"SEWDForSequenceClassification"),bit.forEach(t),eOo=r(lLe," (SEW-D model)"),lLe.forEach(t),oOo=i(Go),RF=n(Go,"LI",{});var iLe=s(RF);ime=n(iLe,"STRONG",{});var Fit=s(ime);rOo=r(Fit,"unispeech"),Fit.forEach(t),tOo=r(iLe," \u2014 "),mG=n(iLe,"A",{href:!0});var vit=s(mG);aOo=r(vit,"UniSpeechForSequenceClassification"),vit.forEach(t),nOo=r(iLe," (UniSpeech model)"),iLe.forEach(t),sOo=i(Go),BF=n(Go,"LI",{});var dLe=s(BF);dme=n(dLe,"STRONG",{});var Tit=s(dme);lOo=r(Tit,"unispeech-sat"),Tit.forEach(t),iOo=r(dLe," \u2014 "),gG=n(dLe,"A",{href:!0});var Mit=s(gG);dOo=r(Mit,"UniSpeechSatForSequenceClassification"),Mit.forEach(t),cOo=r(dLe," (UniSpeechSat model)"),dLe.forEach(t),fOo=i(Go),PF=n(Go,"LI",{});var cLe=s(PF);cme=n(cLe,"STRONG",{});var Eit=s(cme);mOo=r(Eit,"wav2vec2"),Eit.forEach(t),gOo=r(cLe," \u2014 "),hG=n(cLe,"A",{href:!0});var Cit=s(hG);hOo=r(Cit,"Wav2Vec2ForSequenceClassification"),Cit.forEach(t),pOo=r(cLe," (Wav2Vec2 model)"),cLe.forEach(t),_Oo=i(Go),$F=n(Go,"LI",{});var fLe=s($F);fme=n(fLe,"STRONG",{});var wit=s(fme);uOo=r(wit,"wavlm"),wit.forEach(t),bOo=r(fLe," \u2014 "),pG=n(fLe,"A",{href:!0});var Ait=s(pG);FOo=r(Ait,"WavLMForSequenceClassification"),Ait.forEach(t),vOo=r(fLe," (WavLM model)"),fLe.forEach(t),Go.forEach(t),TOo=i(ra),qF=n(ra,"P",{});var mLe=s(qF);MOo=r(mLe,"The model is set in evaluation mode by default using "),mme=n(mLe,"CODE",{});var yit=s(mme);EOo=r(yit,"model.eval()"),yit.forEach(t),COo=r(mLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gme=n(mLe,"CODE",{});var Lit=s(gme);wOo=r(Lit,"model.train()"),Lit.forEach(t),mLe.forEach(t),AOo=i(ra),hme=n(ra,"P",{});var xit=s(hme);yOo=r(xit,"Examples:"),xit.forEach(t),LOo=i(ra),m(Y3.$$.fragment,ra),ra.forEach(t),Cl.forEach(t),cBe=i(c),zd=n(c,"H2",{class:!0});var T$e=s(zd);IF=n(T$e,"A",{id:!0,class:!0,href:!0});var kit=s(IF);pme=n(kit,"SPAN",{});var Sit=s(pme);m(K3.$$.fragment,Sit),Sit.forEach(t),kit.forEach(t),xOo=i(T$e),_me=n(T$e,"SPAN",{});var Rit=s(_me);kOo=r(Rit,"AutoModelForAudioFrameClassification"),Rit.forEach(t),T$e.forEach(t),fBe=i(c),fr=n(c,"DIV",{class:!0});var Al=s(fr);m(Z3.$$.fragment,Al),SOo=i(Al),Qd=n(Al,"P",{});var WU=s(Qd);ROo=r(WU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),_G=n(WU,"A",{href:!0});var Bit=s(_G);BOo=r(Bit,"from_pretrained()"),Bit.forEach(t),POo=r(WU," class method or the "),uG=n(WU,"A",{href:!0});var Pit=s(uG);$Oo=r(Pit,"from_config()"),Pit.forEach(t),qOo=r(WU,` class
method.`),WU.forEach(t),IOo=i(Al),ew=n(Al,"P",{});var M$e=s(ew);jOo=r(M$e,"This class cannot be instantiated directly using "),ume=n(M$e,"CODE",{});var $it=s(ume);NOo=r($it,"__init__()"),$it.forEach(t),DOo=r(M$e," (throws an error)."),M$e.forEach(t),GOo=i(Al),st=n(Al,"DIV",{class:!0});var yl=s(st);m(ow.$$.fragment,yl),OOo=i(yl),bme=n(yl,"P",{});var qit=s(bme);VOo=r(qit,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),qit.forEach(t),XOo=i(yl),Wd=n(yl,"P",{});var HU=s(Wd);zOo=r(HU,`Note:
Loading a model from its configuration file does `),Fme=n(HU,"STRONG",{});var Iit=s(Fme);QOo=r(Iit,"not"),Iit.forEach(t),WOo=r(HU,` load the model weights. It only affects the
model\u2019s configuration. Use `),bG=n(HU,"A",{href:!0});var jit=s(bG);HOo=r(jit,"from_pretrained()"),jit.forEach(t),UOo=r(HU," to load the model weights."),HU.forEach(t),JOo=i(yl),vme=n(yl,"P",{});var Nit=s(vme);YOo=r(Nit,"Examples:"),Nit.forEach(t),KOo=i(yl),m(rw.$$.fragment,yl),yl.forEach(t),ZOo=i(Al),Ye=n(Al,"DIV",{class:!0});var ta=s(Ye);m(tw.$$.fragment,ta),eVo=i(ta),Tme=n(ta,"P",{});var Dit=s(Tme);oVo=r(Dit,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Dit.forEach(t),rVo=i(ta),dn=n(ta,"P",{});var z4=s(dn);tVo=r(z4,"The model class to instantiate is selected based on the "),Mme=n(z4,"CODE",{});var Git=s(Mme);aVo=r(Git,"model_type"),Git.forEach(t),nVo=r(z4,` property of the config object (either
passed as an argument or loaded from `),Eme=n(z4,"CODE",{});var Oit=s(Eme);sVo=r(Oit,"pretrained_model_name_or_path"),Oit.forEach(t),lVo=r(z4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cme=n(z4,"CODE",{});var Vit=s(Cme);iVo=r(Vit,"pretrained_model_name_or_path"),Vit.forEach(t),dVo=r(z4,":"),z4.forEach(t),cVo=i(ta),cn=n(ta,"UL",{});var Q4=s(cn);jF=n(Q4,"LI",{});var gLe=s(jF);wme=n(gLe,"STRONG",{});var Xit=s(wme);fVo=r(Xit,"data2vec-audio"),Xit.forEach(t),mVo=r(gLe," \u2014 "),FG=n(gLe,"A",{href:!0});var zit=s(FG);gVo=r(zit,"Data2VecAudioForAudioFrameClassification"),zit.forEach(t),hVo=r(gLe," (Data2VecAudio model)"),gLe.forEach(t),pVo=i(Q4),NF=n(Q4,"LI",{});var hLe=s(NF);Ame=n(hLe,"STRONG",{});var Qit=s(Ame);_Vo=r(Qit,"unispeech-sat"),Qit.forEach(t),uVo=r(hLe," \u2014 "),vG=n(hLe,"A",{href:!0});var Wit=s(vG);bVo=r(Wit,"UniSpeechSatForAudioFrameClassification"),Wit.forEach(t),FVo=r(hLe," (UniSpeechSat model)"),hLe.forEach(t),vVo=i(Q4),DF=n(Q4,"LI",{});var pLe=s(DF);yme=n(pLe,"STRONG",{});var Hit=s(yme);TVo=r(Hit,"wav2vec2"),Hit.forEach(t),MVo=r(pLe," \u2014 "),TG=n(pLe,"A",{href:!0});var Uit=s(TG);EVo=r(Uit,"Wav2Vec2ForAudioFrameClassification"),Uit.forEach(t),CVo=r(pLe," (Wav2Vec2 model)"),pLe.forEach(t),wVo=i(Q4),GF=n(Q4,"LI",{});var _Le=s(GF);Lme=n(_Le,"STRONG",{});var Jit=s(Lme);AVo=r(Jit,"wavlm"),Jit.forEach(t),yVo=r(_Le," \u2014 "),MG=n(_Le,"A",{href:!0});var Yit=s(MG);LVo=r(Yit,"WavLMForAudioFrameClassification"),Yit.forEach(t),xVo=r(_Le," (WavLM model)"),_Le.forEach(t),Q4.forEach(t),kVo=i(ta),OF=n(ta,"P",{});var uLe=s(OF);SVo=r(uLe,"The model is set in evaluation mode by default using "),xme=n(uLe,"CODE",{});var Kit=s(xme);RVo=r(Kit,"model.eval()"),Kit.forEach(t),BVo=r(uLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kme=n(uLe,"CODE",{});var Zit=s(kme);PVo=r(Zit,"model.train()"),Zit.forEach(t),uLe.forEach(t),$Vo=i(ta),Sme=n(ta,"P",{});var edt=s(Sme);qVo=r(edt,"Examples:"),edt.forEach(t),IVo=i(ta),m(aw.$$.fragment,ta),ta.forEach(t),Al.forEach(t),mBe=i(c),Hd=n(c,"H2",{class:!0});var E$e=s(Hd);VF=n(E$e,"A",{id:!0,class:!0,href:!0});var odt=s(VF);Rme=n(odt,"SPAN",{});var rdt=s(Rme);m(nw.$$.fragment,rdt),rdt.forEach(t),odt.forEach(t),jVo=i(E$e),Bme=n(E$e,"SPAN",{});var tdt=s(Bme);NVo=r(tdt,"AutoModelForCTC"),tdt.forEach(t),E$e.forEach(t),gBe=i(c),mr=n(c,"DIV",{class:!0});var Ll=s(mr);m(sw.$$.fragment,Ll),DVo=i(Ll),Ud=n(Ll,"P",{});var UU=s(Ud);GVo=r(UU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),EG=n(UU,"A",{href:!0});var adt=s(EG);OVo=r(adt,"from_pretrained()"),adt.forEach(t),VVo=r(UU," class method or the "),CG=n(UU,"A",{href:!0});var ndt=s(CG);XVo=r(ndt,"from_config()"),ndt.forEach(t),zVo=r(UU,` class
method.`),UU.forEach(t),QVo=i(Ll),lw=n(Ll,"P",{});var C$e=s(lw);WVo=r(C$e,"This class cannot be instantiated directly using "),Pme=n(C$e,"CODE",{});var sdt=s(Pme);HVo=r(sdt,"__init__()"),sdt.forEach(t),UVo=r(C$e," (throws an error)."),C$e.forEach(t),JVo=i(Ll),lt=n(Ll,"DIV",{class:!0});var xl=s(lt);m(iw.$$.fragment,xl),YVo=i(xl),$me=n(xl,"P",{});var ldt=s($me);KVo=r(ldt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),ldt.forEach(t),ZVo=i(xl),Jd=n(xl,"P",{});var JU=s(Jd);eXo=r(JU,`Note:
Loading a model from its configuration file does `),qme=n(JU,"STRONG",{});var idt=s(qme);oXo=r(idt,"not"),idt.forEach(t),rXo=r(JU,` load the model weights. It only affects the
model\u2019s configuration. Use `),wG=n(JU,"A",{href:!0});var ddt=s(wG);tXo=r(ddt,"from_pretrained()"),ddt.forEach(t),aXo=r(JU," to load the model weights."),JU.forEach(t),nXo=i(xl),Ime=n(xl,"P",{});var cdt=s(Ime);sXo=r(cdt,"Examples:"),cdt.forEach(t),lXo=i(xl),m(dw.$$.fragment,xl),xl.forEach(t),iXo=i(Ll),Ke=n(Ll,"DIV",{class:!0});var aa=s(Ke);m(cw.$$.fragment,aa),dXo=i(aa),jme=n(aa,"P",{});var fdt=s(jme);cXo=r(fdt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),fdt.forEach(t),fXo=i(aa),fn=n(aa,"P",{});var W4=s(fn);mXo=r(W4,"The model class to instantiate is selected based on the "),Nme=n(W4,"CODE",{});var mdt=s(Nme);gXo=r(mdt,"model_type"),mdt.forEach(t),hXo=r(W4,` property of the config object (either
passed as an argument or loaded from `),Dme=n(W4,"CODE",{});var gdt=s(Dme);pXo=r(gdt,"pretrained_model_name_or_path"),gdt.forEach(t),_Xo=r(W4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gme=n(W4,"CODE",{});var hdt=s(Gme);uXo=r(hdt,"pretrained_model_name_or_path"),hdt.forEach(t),bXo=r(W4,":"),W4.forEach(t),FXo=i(aa),Re=n(aa,"UL",{});var Oo=s(Re);XF=n(Oo,"LI",{});var bLe=s(XF);Ome=n(bLe,"STRONG",{});var pdt=s(Ome);vXo=r(pdt,"data2vec-audio"),pdt.forEach(t),TXo=r(bLe," \u2014 "),AG=n(bLe,"A",{href:!0});var _dt=s(AG);MXo=r(_dt,"Data2VecAudioForCTC"),_dt.forEach(t),EXo=r(bLe," (Data2VecAudio model)"),bLe.forEach(t),CXo=i(Oo),zF=n(Oo,"LI",{});var FLe=s(zF);Vme=n(FLe,"STRONG",{});var udt=s(Vme);wXo=r(udt,"hubert"),udt.forEach(t),AXo=r(FLe," \u2014 "),yG=n(FLe,"A",{href:!0});var bdt=s(yG);yXo=r(bdt,"HubertForCTC"),bdt.forEach(t),LXo=r(FLe," (Hubert model)"),FLe.forEach(t),xXo=i(Oo),QF=n(Oo,"LI",{});var vLe=s(QF);Xme=n(vLe,"STRONG",{});var Fdt=s(Xme);kXo=r(Fdt,"sew"),Fdt.forEach(t),SXo=r(vLe," \u2014 "),LG=n(vLe,"A",{href:!0});var vdt=s(LG);RXo=r(vdt,"SEWForCTC"),vdt.forEach(t),BXo=r(vLe," (SEW model)"),vLe.forEach(t),PXo=i(Oo),WF=n(Oo,"LI",{});var TLe=s(WF);zme=n(TLe,"STRONG",{});var Tdt=s(zme);$Xo=r(Tdt,"sew-d"),Tdt.forEach(t),qXo=r(TLe," \u2014 "),xG=n(TLe,"A",{href:!0});var Mdt=s(xG);IXo=r(Mdt,"SEWDForCTC"),Mdt.forEach(t),jXo=r(TLe," (SEW-D model)"),TLe.forEach(t),NXo=i(Oo),HF=n(Oo,"LI",{});var MLe=s(HF);Qme=n(MLe,"STRONG",{});var Edt=s(Qme);DXo=r(Edt,"unispeech"),Edt.forEach(t),GXo=r(MLe," \u2014 "),kG=n(MLe,"A",{href:!0});var Cdt=s(kG);OXo=r(Cdt,"UniSpeechForCTC"),Cdt.forEach(t),VXo=r(MLe," (UniSpeech model)"),MLe.forEach(t),XXo=i(Oo),UF=n(Oo,"LI",{});var ELe=s(UF);Wme=n(ELe,"STRONG",{});var wdt=s(Wme);zXo=r(wdt,"unispeech-sat"),wdt.forEach(t),QXo=r(ELe," \u2014 "),SG=n(ELe,"A",{href:!0});var Adt=s(SG);WXo=r(Adt,"UniSpeechSatForCTC"),Adt.forEach(t),HXo=r(ELe," (UniSpeechSat model)"),ELe.forEach(t),UXo=i(Oo),JF=n(Oo,"LI",{});var CLe=s(JF);Hme=n(CLe,"STRONG",{});var ydt=s(Hme);JXo=r(ydt,"wav2vec2"),ydt.forEach(t),YXo=r(CLe," \u2014 "),RG=n(CLe,"A",{href:!0});var Ldt=s(RG);KXo=r(Ldt,"Wav2Vec2ForCTC"),Ldt.forEach(t),ZXo=r(CLe," (Wav2Vec2 model)"),CLe.forEach(t),ezo=i(Oo),YF=n(Oo,"LI",{});var wLe=s(YF);Ume=n(wLe,"STRONG",{});var xdt=s(Ume);ozo=r(xdt,"wavlm"),xdt.forEach(t),rzo=r(wLe," \u2014 "),BG=n(wLe,"A",{href:!0});var kdt=s(BG);tzo=r(kdt,"WavLMForCTC"),kdt.forEach(t),azo=r(wLe," (WavLM model)"),wLe.forEach(t),Oo.forEach(t),nzo=i(aa),KF=n(aa,"P",{});var ALe=s(KF);szo=r(ALe,"The model is set in evaluation mode by default using "),Jme=n(ALe,"CODE",{});var Sdt=s(Jme);lzo=r(Sdt,"model.eval()"),Sdt.forEach(t),izo=r(ALe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yme=n(ALe,"CODE",{});var Rdt=s(Yme);dzo=r(Rdt,"model.train()"),Rdt.forEach(t),ALe.forEach(t),czo=i(aa),Kme=n(aa,"P",{});var Bdt=s(Kme);fzo=r(Bdt,"Examples:"),Bdt.forEach(t),mzo=i(aa),m(fw.$$.fragment,aa),aa.forEach(t),Ll.forEach(t),hBe=i(c),Yd=n(c,"H2",{class:!0});var w$e=s(Yd);ZF=n(w$e,"A",{id:!0,class:!0,href:!0});var Pdt=s(ZF);Zme=n(Pdt,"SPAN",{});var $dt=s(Zme);m(mw.$$.fragment,$dt),$dt.forEach(t),Pdt.forEach(t),gzo=i(w$e),ege=n(w$e,"SPAN",{});var qdt=s(ege);hzo=r(qdt,"AutoModelForSpeechSeq2Seq"),qdt.forEach(t),w$e.forEach(t),pBe=i(c),gr=n(c,"DIV",{class:!0});var kl=s(gr);m(gw.$$.fragment,kl),pzo=i(kl),Kd=n(kl,"P",{});var YU=s(Kd);_zo=r(YU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),PG=n(YU,"A",{href:!0});var Idt=s(PG);uzo=r(Idt,"from_pretrained()"),Idt.forEach(t),bzo=r(YU," class method or the "),$G=n(YU,"A",{href:!0});var jdt=s($G);Fzo=r(jdt,"from_config()"),jdt.forEach(t),vzo=r(YU,` class
method.`),YU.forEach(t),Tzo=i(kl),hw=n(kl,"P",{});var A$e=s(hw);Mzo=r(A$e,"This class cannot be instantiated directly using "),oge=n(A$e,"CODE",{});var Ndt=s(oge);Ezo=r(Ndt,"__init__()"),Ndt.forEach(t),Czo=r(A$e," (throws an error)."),A$e.forEach(t),wzo=i(kl),it=n(kl,"DIV",{class:!0});var Sl=s(it);m(pw.$$.fragment,Sl),Azo=i(Sl),rge=n(Sl,"P",{});var Ddt=s(rge);yzo=r(Ddt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Ddt.forEach(t),Lzo=i(Sl),Zd=n(Sl,"P",{});var KU=s(Zd);xzo=r(KU,`Note:
Loading a model from its configuration file does `),tge=n(KU,"STRONG",{});var Gdt=s(tge);kzo=r(Gdt,"not"),Gdt.forEach(t),Szo=r(KU,` load the model weights. It only affects the
model\u2019s configuration. Use `),qG=n(KU,"A",{href:!0});var Odt=s(qG);Rzo=r(Odt,"from_pretrained()"),Odt.forEach(t),Bzo=r(KU," to load the model weights."),KU.forEach(t),Pzo=i(Sl),age=n(Sl,"P",{});var Vdt=s(age);$zo=r(Vdt,"Examples:"),Vdt.forEach(t),qzo=i(Sl),m(_w.$$.fragment,Sl),Sl.forEach(t),Izo=i(kl),Ze=n(kl,"DIV",{class:!0});var na=s(Ze);m(uw.$$.fragment,na),jzo=i(na),nge=n(na,"P",{});var Xdt=s(nge);Nzo=r(Xdt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Xdt.forEach(t),Dzo=i(na),mn=n(na,"P",{});var H4=s(mn);Gzo=r(H4,"The model class to instantiate is selected based on the "),sge=n(H4,"CODE",{});var zdt=s(sge);Ozo=r(zdt,"model_type"),zdt.forEach(t),Vzo=r(H4,` property of the config object (either
passed as an argument or loaded from `),lge=n(H4,"CODE",{});var Qdt=s(lge);Xzo=r(Qdt,"pretrained_model_name_or_path"),Qdt.forEach(t),zzo=r(H4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ige=n(H4,"CODE",{});var Wdt=s(ige);Qzo=r(Wdt,"pretrained_model_name_or_path"),Wdt.forEach(t),Wzo=r(H4,":"),H4.forEach(t),Hzo=i(na),bw=n(na,"UL",{});var y$e=s(bw);ev=n(y$e,"LI",{});var yLe=s(ev);dge=n(yLe,"STRONG",{});var Hdt=s(dge);Uzo=r(Hdt,"speech-encoder-decoder"),Hdt.forEach(t),Jzo=r(yLe," \u2014 "),IG=n(yLe,"A",{href:!0});var Udt=s(IG);Yzo=r(Udt,"SpeechEncoderDecoderModel"),Udt.forEach(t),Kzo=r(yLe," (Speech Encoder decoder model)"),yLe.forEach(t),Zzo=i(y$e),ov=n(y$e,"LI",{});var LLe=s(ov);cge=n(LLe,"STRONG",{});var Jdt=s(cge);eQo=r(Jdt,"speech_to_text"),Jdt.forEach(t),oQo=r(LLe," \u2014 "),jG=n(LLe,"A",{href:!0});var Ydt=s(jG);rQo=r(Ydt,"Speech2TextForConditionalGeneration"),Ydt.forEach(t),tQo=r(LLe," (Speech2Text model)"),LLe.forEach(t),y$e.forEach(t),aQo=i(na),rv=n(na,"P",{});var xLe=s(rv);nQo=r(xLe,"The model is set in evaluation mode by default using "),fge=n(xLe,"CODE",{});var Kdt=s(fge);sQo=r(Kdt,"model.eval()"),Kdt.forEach(t),lQo=r(xLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mge=n(xLe,"CODE",{});var Zdt=s(mge);iQo=r(Zdt,"model.train()"),Zdt.forEach(t),xLe.forEach(t),dQo=i(na),gge=n(na,"P",{});var ect=s(gge);cQo=r(ect,"Examples:"),ect.forEach(t),fQo=i(na),m(Fw.$$.fragment,na),na.forEach(t),kl.forEach(t),_Be=i(c),ec=n(c,"H2",{class:!0});var L$e=s(ec);tv=n(L$e,"A",{id:!0,class:!0,href:!0});var oct=s(tv);hge=n(oct,"SPAN",{});var rct=s(hge);m(vw.$$.fragment,rct),rct.forEach(t),oct.forEach(t),mQo=i(L$e),pge=n(L$e,"SPAN",{});var tct=s(pge);gQo=r(tct,"AutoModelForAudioXVector"),tct.forEach(t),L$e.forEach(t),uBe=i(c),hr=n(c,"DIV",{class:!0});var Rl=s(hr);m(Tw.$$.fragment,Rl),hQo=i(Rl),oc=n(Rl,"P",{});var ZU=s(oc);pQo=r(ZU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),NG=n(ZU,"A",{href:!0});var act=s(NG);_Qo=r(act,"from_pretrained()"),act.forEach(t),uQo=r(ZU," class method or the "),DG=n(ZU,"A",{href:!0});var nct=s(DG);bQo=r(nct,"from_config()"),nct.forEach(t),FQo=r(ZU,` class
method.`),ZU.forEach(t),vQo=i(Rl),Mw=n(Rl,"P",{});var x$e=s(Mw);TQo=r(x$e,"This class cannot be instantiated directly using "),_ge=n(x$e,"CODE",{});var sct=s(_ge);MQo=r(sct,"__init__()"),sct.forEach(t),EQo=r(x$e," (throws an error)."),x$e.forEach(t),CQo=i(Rl),dt=n(Rl,"DIV",{class:!0});var Bl=s(dt);m(Ew.$$.fragment,Bl),wQo=i(Bl),uge=n(Bl,"P",{});var lct=s(uge);AQo=r(lct,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),lct.forEach(t),yQo=i(Bl),rc=n(Bl,"P",{});var eJ=s(rc);LQo=r(eJ,`Note:
Loading a model from its configuration file does `),bge=n(eJ,"STRONG",{});var ict=s(bge);xQo=r(ict,"not"),ict.forEach(t),kQo=r(eJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),GG=n(eJ,"A",{href:!0});var dct=s(GG);SQo=r(dct,"from_pretrained()"),dct.forEach(t),RQo=r(eJ," to load the model weights."),eJ.forEach(t),BQo=i(Bl),Fge=n(Bl,"P",{});var cct=s(Fge);PQo=r(cct,"Examples:"),cct.forEach(t),$Qo=i(Bl),m(Cw.$$.fragment,Bl),Bl.forEach(t),qQo=i(Rl),eo=n(Rl,"DIV",{class:!0});var sa=s(eo);m(ww.$$.fragment,sa),IQo=i(sa),vge=n(sa,"P",{});var fct=s(vge);jQo=r(fct,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),fct.forEach(t),NQo=i(sa),gn=n(sa,"P",{});var U4=s(gn);DQo=r(U4,"The model class to instantiate is selected based on the "),Tge=n(U4,"CODE",{});var mct=s(Tge);GQo=r(mct,"model_type"),mct.forEach(t),OQo=r(U4,` property of the config object (either
passed as an argument or loaded from `),Mge=n(U4,"CODE",{});var gct=s(Mge);VQo=r(gct,"pretrained_model_name_or_path"),gct.forEach(t),XQo=r(U4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ege=n(U4,"CODE",{});var hct=s(Ege);zQo=r(hct,"pretrained_model_name_or_path"),hct.forEach(t),QQo=r(U4,":"),U4.forEach(t),WQo=i(sa),hn=n(sa,"UL",{});var J4=s(hn);av=n(J4,"LI",{});var kLe=s(av);Cge=n(kLe,"STRONG",{});var pct=s(Cge);HQo=r(pct,"data2vec-audio"),pct.forEach(t),UQo=r(kLe," \u2014 "),OG=n(kLe,"A",{href:!0});var _ct=s(OG);JQo=r(_ct,"Data2VecAudioForXVector"),_ct.forEach(t),YQo=r(kLe," (Data2VecAudio model)"),kLe.forEach(t),KQo=i(J4),nv=n(J4,"LI",{});var SLe=s(nv);wge=n(SLe,"STRONG",{});var uct=s(wge);ZQo=r(uct,"unispeech-sat"),uct.forEach(t),eWo=r(SLe," \u2014 "),VG=n(SLe,"A",{href:!0});var bct=s(VG);oWo=r(bct,"UniSpeechSatForXVector"),bct.forEach(t),rWo=r(SLe," (UniSpeechSat model)"),SLe.forEach(t),tWo=i(J4),sv=n(J4,"LI",{});var RLe=s(sv);Age=n(RLe,"STRONG",{});var Fct=s(Age);aWo=r(Fct,"wav2vec2"),Fct.forEach(t),nWo=r(RLe," \u2014 "),XG=n(RLe,"A",{href:!0});var vct=s(XG);sWo=r(vct,"Wav2Vec2ForXVector"),vct.forEach(t),lWo=r(RLe," (Wav2Vec2 model)"),RLe.forEach(t),iWo=i(J4),lv=n(J4,"LI",{});var BLe=s(lv);yge=n(BLe,"STRONG",{});var Tct=s(yge);dWo=r(Tct,"wavlm"),Tct.forEach(t),cWo=r(BLe," \u2014 "),zG=n(BLe,"A",{href:!0});var Mct=s(zG);fWo=r(Mct,"WavLMForXVector"),Mct.forEach(t),mWo=r(BLe," (WavLM model)"),BLe.forEach(t),J4.forEach(t),gWo=i(sa),iv=n(sa,"P",{});var PLe=s(iv);hWo=r(PLe,"The model is set in evaluation mode by default using "),Lge=n(PLe,"CODE",{});var Ect=s(Lge);pWo=r(Ect,"model.eval()"),Ect.forEach(t),_Wo=r(PLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xge=n(PLe,"CODE",{});var Cct=s(xge);uWo=r(Cct,"model.train()"),Cct.forEach(t),PLe.forEach(t),bWo=i(sa),kge=n(sa,"P",{});var wct=s(kge);FWo=r(wct,"Examples:"),wct.forEach(t),vWo=i(sa),m(Aw.$$.fragment,sa),sa.forEach(t),Rl.forEach(t),bBe=i(c),tc=n(c,"H2",{class:!0});var k$e=s(tc);dv=n(k$e,"A",{id:!0,class:!0,href:!0});var Act=s(dv);Sge=n(Act,"SPAN",{});var yct=s(Sge);m(yw.$$.fragment,yct),yct.forEach(t),Act.forEach(t),TWo=i(k$e),Rge=n(k$e,"SPAN",{});var Lct=s(Rge);MWo=r(Lct,"AutoModelForMaskedImageModeling"),Lct.forEach(t),k$e.forEach(t),FBe=i(c),pr=n(c,"DIV",{class:!0});var Pl=s(pr);m(Lw.$$.fragment,Pl),EWo=i(Pl),ac=n(Pl,"P",{});var oJ=s(ac);CWo=r(oJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),QG=n(oJ,"A",{href:!0});var xct=s(QG);wWo=r(xct,"from_pretrained()"),xct.forEach(t),AWo=r(oJ," class method or the "),WG=n(oJ,"A",{href:!0});var kct=s(WG);yWo=r(kct,"from_config()"),kct.forEach(t),LWo=r(oJ,` class
method.`),oJ.forEach(t),xWo=i(Pl),xw=n(Pl,"P",{});var S$e=s(xw);kWo=r(S$e,"This class cannot be instantiated directly using "),Bge=n(S$e,"CODE",{});var Sct=s(Bge);SWo=r(Sct,"__init__()"),Sct.forEach(t),RWo=r(S$e," (throws an error)."),S$e.forEach(t),BWo=i(Pl),ct=n(Pl,"DIV",{class:!0});var $l=s(ct);m(kw.$$.fragment,$l),PWo=i($l),Pge=n($l,"P",{});var Rct=s(Pge);$Wo=r(Rct,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Rct.forEach(t),qWo=i($l),nc=n($l,"P",{});var rJ=s(nc);IWo=r(rJ,`Note:
Loading a model from its configuration file does `),$ge=n(rJ,"STRONG",{});var Bct=s($ge);jWo=r(Bct,"not"),Bct.forEach(t),NWo=r(rJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),HG=n(rJ,"A",{href:!0});var Pct=s(HG);DWo=r(Pct,"from_pretrained()"),Pct.forEach(t),GWo=r(rJ," to load the model weights."),rJ.forEach(t),OWo=i($l),qge=n($l,"P",{});var $ct=s(qge);VWo=r($ct,"Examples:"),$ct.forEach(t),XWo=i($l),m(Sw.$$.fragment,$l),$l.forEach(t),zWo=i(Pl),oo=n(Pl,"DIV",{class:!0});var la=s(oo);m(Rw.$$.fragment,la),QWo=i(la),Ige=n(la,"P",{});var qct=s(Ige);WWo=r(qct,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),qct.forEach(t),HWo=i(la),pn=n(la,"P",{});var Y4=s(pn);UWo=r(Y4,"The model class to instantiate is selected based on the "),jge=n(Y4,"CODE",{});var Ict=s(jge);JWo=r(Ict,"model_type"),Ict.forEach(t),YWo=r(Y4,` property of the config object (either
passed as an argument or loaded from `),Nge=n(Y4,"CODE",{});var jct=s(Nge);KWo=r(jct,"pretrained_model_name_or_path"),jct.forEach(t),ZWo=r(Y4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dge=n(Y4,"CODE",{});var Nct=s(Dge);eHo=r(Nct,"pretrained_model_name_or_path"),Nct.forEach(t),oHo=r(Y4,":"),Y4.forEach(t),rHo=i(la),sc=n(la,"UL",{});var tJ=s(sc);cv=n(tJ,"LI",{});var $Le=s(cv);Gge=n($Le,"STRONG",{});var Dct=s(Gge);tHo=r(Dct,"deit"),Dct.forEach(t),aHo=r($Le," \u2014 "),UG=n($Le,"A",{href:!0});var Gct=s(UG);nHo=r(Gct,"DeiTForMaskedImageModeling"),Gct.forEach(t),sHo=r($Le," (DeiT model)"),$Le.forEach(t),lHo=i(tJ),fv=n(tJ,"LI",{});var qLe=s(fv);Oge=n(qLe,"STRONG",{});var Oct=s(Oge);iHo=r(Oct,"swin"),Oct.forEach(t),dHo=r(qLe," \u2014 "),JG=n(qLe,"A",{href:!0});var Vct=s(JG);cHo=r(Vct,"SwinForMaskedImageModeling"),Vct.forEach(t),fHo=r(qLe," (Swin model)"),qLe.forEach(t),mHo=i(tJ),mv=n(tJ,"LI",{});var ILe=s(mv);Vge=n(ILe,"STRONG",{});var Xct=s(Vge);gHo=r(Xct,"vit"),Xct.forEach(t),hHo=r(ILe," \u2014 "),YG=n(ILe,"A",{href:!0});var zct=s(YG);pHo=r(zct,"ViTForMaskedImageModeling"),zct.forEach(t),_Ho=r(ILe," (ViT model)"),ILe.forEach(t),tJ.forEach(t),uHo=i(la),gv=n(la,"P",{});var jLe=s(gv);bHo=r(jLe,"The model is set in evaluation mode by default using "),Xge=n(jLe,"CODE",{});var Qct=s(Xge);FHo=r(Qct,"model.eval()"),Qct.forEach(t),vHo=r(jLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zge=n(jLe,"CODE",{});var Wct=s(zge);THo=r(Wct,"model.train()"),Wct.forEach(t),jLe.forEach(t),MHo=i(la),Qge=n(la,"P",{});var Hct=s(Qge);EHo=r(Hct,"Examples:"),Hct.forEach(t),CHo=i(la),m(Bw.$$.fragment,la),la.forEach(t),Pl.forEach(t),vBe=i(c),lc=n(c,"H2",{class:!0});var R$e=s(lc);hv=n(R$e,"A",{id:!0,class:!0,href:!0});var Uct=s(hv);Wge=n(Uct,"SPAN",{});var Jct=s(Wge);m(Pw.$$.fragment,Jct),Jct.forEach(t),Uct.forEach(t),wHo=i(R$e),Hge=n(R$e,"SPAN",{});var Yct=s(Hge);AHo=r(Yct,"AutoModelForObjectDetection"),Yct.forEach(t),R$e.forEach(t),TBe=i(c),_r=n(c,"DIV",{class:!0});var ql=s(_r);m($w.$$.fragment,ql),yHo=i(ql),ic=n(ql,"P",{});var aJ=s(ic);LHo=r(aJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),KG=n(aJ,"A",{href:!0});var Kct=s(KG);xHo=r(Kct,"from_pretrained()"),Kct.forEach(t),kHo=r(aJ," class method or the "),ZG=n(aJ,"A",{href:!0});var Zct=s(ZG);SHo=r(Zct,"from_config()"),Zct.forEach(t),RHo=r(aJ,` class
method.`),aJ.forEach(t),BHo=i(ql),qw=n(ql,"P",{});var B$e=s(qw);PHo=r(B$e,"This class cannot be instantiated directly using "),Uge=n(B$e,"CODE",{});var eft=s(Uge);$Ho=r(eft,"__init__()"),eft.forEach(t),qHo=r(B$e," (throws an error)."),B$e.forEach(t),IHo=i(ql),ft=n(ql,"DIV",{class:!0});var Il=s(ft);m(Iw.$$.fragment,Il),jHo=i(Il),Jge=n(Il,"P",{});var oft=s(Jge);NHo=r(oft,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),oft.forEach(t),DHo=i(Il),dc=n(Il,"P",{});var nJ=s(dc);GHo=r(nJ,`Note:
Loading a model from its configuration file does `),Yge=n(nJ,"STRONG",{});var rft=s(Yge);OHo=r(rft,"not"),rft.forEach(t),VHo=r(nJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),eO=n(nJ,"A",{href:!0});var tft=s(eO);XHo=r(tft,"from_pretrained()"),tft.forEach(t),zHo=r(nJ," to load the model weights."),nJ.forEach(t),QHo=i(Il),Kge=n(Il,"P",{});var aft=s(Kge);WHo=r(aft,"Examples:"),aft.forEach(t),HHo=i(Il),m(jw.$$.fragment,Il),Il.forEach(t),UHo=i(ql),ro=n(ql,"DIV",{class:!0});var ia=s(ro);m(Nw.$$.fragment,ia),JHo=i(ia),Zge=n(ia,"P",{});var nft=s(Zge);YHo=r(nft,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),nft.forEach(t),KHo=i(ia),_n=n(ia,"P",{});var K4=s(_n);ZHo=r(K4,"The model class to instantiate is selected based on the "),ehe=n(K4,"CODE",{});var sft=s(ehe);eUo=r(sft,"model_type"),sft.forEach(t),oUo=r(K4,` property of the config object (either
passed as an argument or loaded from `),ohe=n(K4,"CODE",{});var lft=s(ohe);rUo=r(lft,"pretrained_model_name_or_path"),lft.forEach(t),tUo=r(K4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rhe=n(K4,"CODE",{});var ift=s(rhe);aUo=r(ift,"pretrained_model_name_or_path"),ift.forEach(t),nUo=r(K4,":"),K4.forEach(t),sUo=i(ia),the=n(ia,"UL",{});var dft=s(the);pv=n(dft,"LI",{});var NLe=s(pv);ahe=n(NLe,"STRONG",{});var cft=s(ahe);lUo=r(cft,"detr"),cft.forEach(t),iUo=r(NLe," \u2014 "),oO=n(NLe,"A",{href:!0});var fft=s(oO);dUo=r(fft,"DetrForObjectDetection"),fft.forEach(t),cUo=r(NLe," (DETR model)"),NLe.forEach(t),dft.forEach(t),fUo=i(ia),_v=n(ia,"P",{});var DLe=s(_v);mUo=r(DLe,"The model is set in evaluation mode by default using "),nhe=n(DLe,"CODE",{});var mft=s(nhe);gUo=r(mft,"model.eval()"),mft.forEach(t),hUo=r(DLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),she=n(DLe,"CODE",{});var gft=s(she);pUo=r(gft,"model.train()"),gft.forEach(t),DLe.forEach(t),_Uo=i(ia),lhe=n(ia,"P",{});var hft=s(lhe);uUo=r(hft,"Examples:"),hft.forEach(t),bUo=i(ia),m(Dw.$$.fragment,ia),ia.forEach(t),ql.forEach(t),MBe=i(c),cc=n(c,"H2",{class:!0});var P$e=s(cc);uv=n(P$e,"A",{id:!0,class:!0,href:!0});var pft=s(uv);ihe=n(pft,"SPAN",{});var _ft=s(ihe);m(Gw.$$.fragment,_ft),_ft.forEach(t),pft.forEach(t),FUo=i(P$e),dhe=n(P$e,"SPAN",{});var uft=s(dhe);vUo=r(uft,"AutoModelForImageSegmentation"),uft.forEach(t),P$e.forEach(t),EBe=i(c),ur=n(c,"DIV",{class:!0});var jl=s(ur);m(Ow.$$.fragment,jl),TUo=i(jl),fc=n(jl,"P",{});var sJ=s(fc);MUo=r(sJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),rO=n(sJ,"A",{href:!0});var bft=s(rO);EUo=r(bft,"from_pretrained()"),bft.forEach(t),CUo=r(sJ," class method or the "),tO=n(sJ,"A",{href:!0});var Fft=s(tO);wUo=r(Fft,"from_config()"),Fft.forEach(t),AUo=r(sJ,` class
method.`),sJ.forEach(t),yUo=i(jl),Vw=n(jl,"P",{});var $$e=s(Vw);LUo=r($$e,"This class cannot be instantiated directly using "),che=n($$e,"CODE",{});var vft=s(che);xUo=r(vft,"__init__()"),vft.forEach(t),kUo=r($$e," (throws an error)."),$$e.forEach(t),SUo=i(jl),mt=n(jl,"DIV",{class:!0});var Nl=s(mt);m(Xw.$$.fragment,Nl),RUo=i(Nl),fhe=n(Nl,"P",{});var Tft=s(fhe);BUo=r(Tft,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Tft.forEach(t),PUo=i(Nl),mc=n(Nl,"P",{});var lJ=s(mc);$Uo=r(lJ,`Note:
Loading a model from its configuration file does `),mhe=n(lJ,"STRONG",{});var Mft=s(mhe);qUo=r(Mft,"not"),Mft.forEach(t),IUo=r(lJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),aO=n(lJ,"A",{href:!0});var Eft=s(aO);jUo=r(Eft,"from_pretrained()"),Eft.forEach(t),NUo=r(lJ," to load the model weights."),lJ.forEach(t),DUo=i(Nl),ghe=n(Nl,"P",{});var Cft=s(ghe);GUo=r(Cft,"Examples:"),Cft.forEach(t),OUo=i(Nl),m(zw.$$.fragment,Nl),Nl.forEach(t),VUo=i(jl),to=n(jl,"DIV",{class:!0});var da=s(to);m(Qw.$$.fragment,da),XUo=i(da),hhe=n(da,"P",{});var wft=s(hhe);zUo=r(wft,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),wft.forEach(t),QUo=i(da),un=n(da,"P",{});var Z4=s(un);WUo=r(Z4,"The model class to instantiate is selected based on the "),phe=n(Z4,"CODE",{});var Aft=s(phe);HUo=r(Aft,"model_type"),Aft.forEach(t),UUo=r(Z4,` property of the config object (either
passed as an argument or loaded from `),_he=n(Z4,"CODE",{});var yft=s(_he);JUo=r(yft,"pretrained_model_name_or_path"),yft.forEach(t),YUo=r(Z4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uhe=n(Z4,"CODE",{});var Lft=s(uhe);KUo=r(Lft,"pretrained_model_name_or_path"),Lft.forEach(t),ZUo=r(Z4,":"),Z4.forEach(t),eJo=i(da),bhe=n(da,"UL",{});var xft=s(bhe);bv=n(xft,"LI",{});var GLe=s(bv);Fhe=n(GLe,"STRONG",{});var kft=s(Fhe);oJo=r(kft,"detr"),kft.forEach(t),rJo=r(GLe," \u2014 "),nO=n(GLe,"A",{href:!0});var Sft=s(nO);tJo=r(Sft,"DetrForSegmentation"),Sft.forEach(t),aJo=r(GLe," (DETR model)"),GLe.forEach(t),xft.forEach(t),nJo=i(da),Fv=n(da,"P",{});var OLe=s(Fv);sJo=r(OLe,"The model is set in evaluation mode by default using "),vhe=n(OLe,"CODE",{});var Rft=s(vhe);lJo=r(Rft,"model.eval()"),Rft.forEach(t),iJo=r(OLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),The=n(OLe,"CODE",{});var Bft=s(The);dJo=r(Bft,"model.train()"),Bft.forEach(t),OLe.forEach(t),cJo=i(da),Mhe=n(da,"P",{});var Pft=s(Mhe);fJo=r(Pft,"Examples:"),Pft.forEach(t),mJo=i(da),m(Ww.$$.fragment,da),da.forEach(t),jl.forEach(t),CBe=i(c),gc=n(c,"H2",{class:!0});var q$e=s(gc);vv=n(q$e,"A",{id:!0,class:!0,href:!0});var $ft=s(vv);Ehe=n($ft,"SPAN",{});var qft=s(Ehe);m(Hw.$$.fragment,qft),qft.forEach(t),$ft.forEach(t),gJo=i(q$e),Che=n(q$e,"SPAN",{});var Ift=s(Che);hJo=r(Ift,"AutoModelForSemanticSegmentation"),Ift.forEach(t),q$e.forEach(t),wBe=i(c),br=n(c,"DIV",{class:!0});var Dl=s(br);m(Uw.$$.fragment,Dl),pJo=i(Dl),hc=n(Dl,"P",{});var iJ=s(hc);_Jo=r(iJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),sO=n(iJ,"A",{href:!0});var jft=s(sO);uJo=r(jft,"from_pretrained()"),jft.forEach(t),bJo=r(iJ," class method or the "),lO=n(iJ,"A",{href:!0});var Nft=s(lO);FJo=r(Nft,"from_config()"),Nft.forEach(t),vJo=r(iJ,` class
method.`),iJ.forEach(t),TJo=i(Dl),Jw=n(Dl,"P",{});var I$e=s(Jw);MJo=r(I$e,"This class cannot be instantiated directly using "),whe=n(I$e,"CODE",{});var Dft=s(whe);EJo=r(Dft,"__init__()"),Dft.forEach(t),CJo=r(I$e," (throws an error)."),I$e.forEach(t),wJo=i(Dl),gt=n(Dl,"DIV",{class:!0});var Gl=s(gt);m(Yw.$$.fragment,Gl),AJo=i(Gl),Ahe=n(Gl,"P",{});var Gft=s(Ahe);yJo=r(Gft,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Gft.forEach(t),LJo=i(Gl),pc=n(Gl,"P",{});var dJ=s(pc);xJo=r(dJ,`Note:
Loading a model from its configuration file does `),yhe=n(dJ,"STRONG",{});var Oft=s(yhe);kJo=r(Oft,"not"),Oft.forEach(t),SJo=r(dJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),iO=n(dJ,"A",{href:!0});var Vft=s(iO);RJo=r(Vft,"from_pretrained()"),Vft.forEach(t),BJo=r(dJ," to load the model weights."),dJ.forEach(t),PJo=i(Gl),Lhe=n(Gl,"P",{});var Xft=s(Lhe);$Jo=r(Xft,"Examples:"),Xft.forEach(t),qJo=i(Gl),m(Kw.$$.fragment,Gl),Gl.forEach(t),IJo=i(Dl),ao=n(Dl,"DIV",{class:!0});var ca=s(ao);m(Zw.$$.fragment,ca),jJo=i(ca),xhe=n(ca,"P",{});var zft=s(xhe);NJo=r(zft,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),zft.forEach(t),DJo=i(ca),bn=n(ca,"P",{});var eE=s(bn);GJo=r(eE,"The model class to instantiate is selected based on the "),khe=n(eE,"CODE",{});var Qft=s(khe);OJo=r(Qft,"model_type"),Qft.forEach(t),VJo=r(eE,` property of the config object (either
passed as an argument or loaded from `),She=n(eE,"CODE",{});var Wft=s(She);XJo=r(Wft,"pretrained_model_name_or_path"),Wft.forEach(t),zJo=r(eE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rhe=n(eE,"CODE",{});var Hft=s(Rhe);QJo=r(Hft,"pretrained_model_name_or_path"),Hft.forEach(t),WJo=r(eE,":"),eE.forEach(t),HJo=i(ca),_c=n(ca,"UL",{});var cJ=s(_c);Tv=n(cJ,"LI",{});var VLe=s(Tv);Bhe=n(VLe,"STRONG",{});var Uft=s(Bhe);UJo=r(Uft,"beit"),Uft.forEach(t),JJo=r(VLe," \u2014 "),dO=n(VLe,"A",{href:!0});var Jft=s(dO);YJo=r(Jft,"BeitForSemanticSegmentation"),Jft.forEach(t),KJo=r(VLe," (BEiT model)"),VLe.forEach(t),ZJo=i(cJ),Mv=n(cJ,"LI",{});var XLe=s(Mv);Phe=n(XLe,"STRONG",{});var Yft=s(Phe);eYo=r(Yft,"dpt"),Yft.forEach(t),oYo=r(XLe," \u2014 "),cO=n(XLe,"A",{href:!0});var Kft=s(cO);rYo=r(Kft,"DPTForSemanticSegmentation"),Kft.forEach(t),tYo=r(XLe," (DPT model)"),XLe.forEach(t),aYo=i(cJ),Ev=n(cJ,"LI",{});var zLe=s(Ev);$he=n(zLe,"STRONG",{});var Zft=s($he);nYo=r(Zft,"segformer"),Zft.forEach(t),sYo=r(zLe," \u2014 "),fO=n(zLe,"A",{href:!0});var emt=s(fO);lYo=r(emt,"SegformerForSemanticSegmentation"),emt.forEach(t),iYo=r(zLe," (SegFormer model)"),zLe.forEach(t),cJ.forEach(t),dYo=i(ca),Cv=n(ca,"P",{});var QLe=s(Cv);cYo=r(QLe,"The model is set in evaluation mode by default using "),qhe=n(QLe,"CODE",{});var omt=s(qhe);fYo=r(omt,"model.eval()"),omt.forEach(t),mYo=r(QLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ihe=n(QLe,"CODE",{});var rmt=s(Ihe);gYo=r(rmt,"model.train()"),rmt.forEach(t),QLe.forEach(t),hYo=i(ca),jhe=n(ca,"P",{});var tmt=s(jhe);pYo=r(tmt,"Examples:"),tmt.forEach(t),_Yo=i(ca),m(eA.$$.fragment,ca),ca.forEach(t),Dl.forEach(t),ABe=i(c),uc=n(c,"H2",{class:!0});var j$e=s(uc);wv=n(j$e,"A",{id:!0,class:!0,href:!0});var amt=s(wv);Nhe=n(amt,"SPAN",{});var nmt=s(Nhe);m(oA.$$.fragment,nmt),nmt.forEach(t),amt.forEach(t),uYo=i(j$e),Dhe=n(j$e,"SPAN",{});var smt=s(Dhe);bYo=r(smt,"AutoModelForInstanceSegmentation"),smt.forEach(t),j$e.forEach(t),yBe=i(c),Fr=n(c,"DIV",{class:!0});var Ol=s(Fr);m(rA.$$.fragment,Ol),FYo=i(Ol),bc=n(Ol,"P",{});var fJ=s(bc);vYo=r(fJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),mO=n(fJ,"A",{href:!0});var lmt=s(mO);TYo=r(lmt,"from_pretrained()"),lmt.forEach(t),MYo=r(fJ," class method or the "),gO=n(fJ,"A",{href:!0});var imt=s(gO);EYo=r(imt,"from_config()"),imt.forEach(t),CYo=r(fJ,` class
method.`),fJ.forEach(t),wYo=i(Ol),tA=n(Ol,"P",{});var N$e=s(tA);AYo=r(N$e,"This class cannot be instantiated directly using "),Ghe=n(N$e,"CODE",{});var dmt=s(Ghe);yYo=r(dmt,"__init__()"),dmt.forEach(t),LYo=r(N$e," (throws an error)."),N$e.forEach(t),xYo=i(Ol),ht=n(Ol,"DIV",{class:!0});var Vl=s(ht);m(aA.$$.fragment,Vl),kYo=i(Vl),Ohe=n(Vl,"P",{});var cmt=s(Ohe);SYo=r(cmt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),cmt.forEach(t),RYo=i(Vl),Fc=n(Vl,"P",{});var mJ=s(Fc);BYo=r(mJ,`Note:
Loading a model from its configuration file does `),Vhe=n(mJ,"STRONG",{});var fmt=s(Vhe);PYo=r(fmt,"not"),fmt.forEach(t),$Yo=r(mJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),hO=n(mJ,"A",{href:!0});var mmt=s(hO);qYo=r(mmt,"from_pretrained()"),mmt.forEach(t),IYo=r(mJ," to load the model weights."),mJ.forEach(t),jYo=i(Vl),Xhe=n(Vl,"P",{});var gmt=s(Xhe);NYo=r(gmt,"Examples:"),gmt.forEach(t),DYo=i(Vl),m(nA.$$.fragment,Vl),Vl.forEach(t),GYo=i(Ol),no=n(Ol,"DIV",{class:!0});var fa=s(no);m(sA.$$.fragment,fa),OYo=i(fa),zhe=n(fa,"P",{});var hmt=s(zhe);VYo=r(hmt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),hmt.forEach(t),XYo=i(fa),Fn=n(fa,"P",{});var oE=s(Fn);zYo=r(oE,"The model class to instantiate is selected based on the "),Qhe=n(oE,"CODE",{});var pmt=s(Qhe);QYo=r(pmt,"model_type"),pmt.forEach(t),WYo=r(oE,` property of the config object (either
passed as an argument or loaded from `),Whe=n(oE,"CODE",{});var _mt=s(Whe);HYo=r(_mt,"pretrained_model_name_or_path"),_mt.forEach(t),UYo=r(oE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hhe=n(oE,"CODE",{});var umt=s(Hhe);JYo=r(umt,"pretrained_model_name_or_path"),umt.forEach(t),YYo=r(oE,":"),oE.forEach(t),KYo=i(fa),Uhe=n(fa,"UL",{});var bmt=s(Uhe);Av=n(bmt,"LI",{});var WLe=s(Av);Jhe=n(WLe,"STRONG",{});var Fmt=s(Jhe);ZYo=r(Fmt,"maskformer"),Fmt.forEach(t),eKo=r(WLe," \u2014 "),pO=n(WLe,"A",{href:!0});var vmt=s(pO);oKo=r(vmt,"MaskFormerForInstanceSegmentation"),vmt.forEach(t),rKo=r(WLe," (MaskFormer model)"),WLe.forEach(t),bmt.forEach(t),tKo=i(fa),yv=n(fa,"P",{});var HLe=s(yv);aKo=r(HLe,"The model is set in evaluation mode by default using "),Yhe=n(HLe,"CODE",{});var Tmt=s(Yhe);nKo=r(Tmt,"model.eval()"),Tmt.forEach(t),sKo=r(HLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Khe=n(HLe,"CODE",{});var Mmt=s(Khe);lKo=r(Mmt,"model.train()"),Mmt.forEach(t),HLe.forEach(t),iKo=i(fa),Zhe=n(fa,"P",{});var Emt=s(Zhe);dKo=r(Emt,"Examples:"),Emt.forEach(t),cKo=i(fa),m(lA.$$.fragment,fa),fa.forEach(t),Ol.forEach(t),LBe=i(c),vc=n(c,"H2",{class:!0});var D$e=s(vc);Lv=n(D$e,"A",{id:!0,class:!0,href:!0});var Cmt=s(Lv);epe=n(Cmt,"SPAN",{});var wmt=s(epe);m(iA.$$.fragment,wmt),wmt.forEach(t),Cmt.forEach(t),fKo=i(D$e),ope=n(D$e,"SPAN",{});var Amt=s(ope);mKo=r(Amt,"TFAutoModel"),Amt.forEach(t),D$e.forEach(t),xBe=i(c),vr=n(c,"DIV",{class:!0});var Xl=s(vr);m(dA.$$.fragment,Xl),gKo=i(Xl),Tc=n(Xl,"P",{});var gJ=s(Tc);hKo=r(gJ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),_O=n(gJ,"A",{href:!0});var ymt=s(_O);pKo=r(ymt,"from_pretrained()"),ymt.forEach(t),_Ko=r(gJ," class method or the "),uO=n(gJ,"A",{href:!0});var Lmt=s(uO);uKo=r(Lmt,"from_config()"),Lmt.forEach(t),bKo=r(gJ,` class
method.`),gJ.forEach(t),FKo=i(Xl),cA=n(Xl,"P",{});var G$e=s(cA);vKo=r(G$e,"This class cannot be instantiated directly using "),rpe=n(G$e,"CODE",{});var xmt=s(rpe);TKo=r(xmt,"__init__()"),xmt.forEach(t),MKo=r(G$e," (throws an error)."),G$e.forEach(t),EKo=i(Xl),pt=n(Xl,"DIV",{class:!0});var zl=s(pt);m(fA.$$.fragment,zl),CKo=i(zl),tpe=n(zl,"P",{});var kmt=s(tpe);wKo=r(kmt,"Instantiates one of the base model classes of the library from a configuration."),kmt.forEach(t),AKo=i(zl),Mc=n(zl,"P",{});var hJ=s(Mc);yKo=r(hJ,`Note:
Loading a model from its configuration file does `),ape=n(hJ,"STRONG",{});var Smt=s(ape);LKo=r(Smt,"not"),Smt.forEach(t),xKo=r(hJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),bO=n(hJ,"A",{href:!0});var Rmt=s(bO);kKo=r(Rmt,"from_pretrained()"),Rmt.forEach(t),SKo=r(hJ," to load the model weights."),hJ.forEach(t),RKo=i(zl),npe=n(zl,"P",{});var Bmt=s(npe);BKo=r(Bmt,"Examples:"),Bmt.forEach(t),PKo=i(zl),m(mA.$$.fragment,zl),zl.forEach(t),$Ko=i(Xl),ho=n(Xl,"DIV",{class:!0});var ba=s(ho);m(gA.$$.fragment,ba),qKo=i(ba),spe=n(ba,"P",{});var Pmt=s(spe);IKo=r(Pmt,"Instantiate one of the base model classes of the library from a pretrained model."),Pmt.forEach(t),jKo=i(ba),vn=n(ba,"P",{});var rE=s(vn);NKo=r(rE,"The model class to instantiate is selected based on the "),lpe=n(rE,"CODE",{});var $mt=s(lpe);DKo=r($mt,"model_type"),$mt.forEach(t),GKo=r(rE,` property of the config object (either
passed as an argument or loaded from `),ipe=n(rE,"CODE",{});var qmt=s(ipe);OKo=r(qmt,"pretrained_model_name_or_path"),qmt.forEach(t),VKo=r(rE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dpe=n(rE,"CODE",{});var Imt=s(dpe);XKo=r(Imt,"pretrained_model_name_or_path"),Imt.forEach(t),zKo=r(rE,":"),rE.forEach(t),QKo=i(ba),x=n(ba,"UL",{});var k=s(x);xv=n(k,"LI",{});var ULe=s(xv);cpe=n(ULe,"STRONG",{});var jmt=s(cpe);WKo=r(jmt,"albert"),jmt.forEach(t),HKo=r(ULe," \u2014 "),FO=n(ULe,"A",{href:!0});var Nmt=s(FO);UKo=r(Nmt,"TFAlbertModel"),Nmt.forEach(t),JKo=r(ULe," (ALBERT model)"),ULe.forEach(t),YKo=i(k),kv=n(k,"LI",{});var JLe=s(kv);fpe=n(JLe,"STRONG",{});var Dmt=s(fpe);KKo=r(Dmt,"bart"),Dmt.forEach(t),ZKo=r(JLe," \u2014 "),vO=n(JLe,"A",{href:!0});var Gmt=s(vO);eZo=r(Gmt,"TFBartModel"),Gmt.forEach(t),oZo=r(JLe," (BART model)"),JLe.forEach(t),rZo=i(k),Sv=n(k,"LI",{});var YLe=s(Sv);mpe=n(YLe,"STRONG",{});var Omt=s(mpe);tZo=r(Omt,"bert"),Omt.forEach(t),aZo=r(YLe," \u2014 "),TO=n(YLe,"A",{href:!0});var Vmt=s(TO);nZo=r(Vmt,"TFBertModel"),Vmt.forEach(t),sZo=r(YLe," (BERT model)"),YLe.forEach(t),lZo=i(k),Rv=n(k,"LI",{});var KLe=s(Rv);gpe=n(KLe,"STRONG",{});var Xmt=s(gpe);iZo=r(Xmt,"blenderbot"),Xmt.forEach(t),dZo=r(KLe," \u2014 "),MO=n(KLe,"A",{href:!0});var zmt=s(MO);cZo=r(zmt,"TFBlenderbotModel"),zmt.forEach(t),fZo=r(KLe," (Blenderbot model)"),KLe.forEach(t),mZo=i(k),Bv=n(k,"LI",{});var ZLe=s(Bv);hpe=n(ZLe,"STRONG",{});var Qmt=s(hpe);gZo=r(Qmt,"blenderbot-small"),Qmt.forEach(t),hZo=r(ZLe," \u2014 "),EO=n(ZLe,"A",{href:!0});var Wmt=s(EO);pZo=r(Wmt,"TFBlenderbotSmallModel"),Wmt.forEach(t),_Zo=r(ZLe," (BlenderbotSmall model)"),ZLe.forEach(t),uZo=i(k),Pv=n(k,"LI",{});var e7e=s(Pv);ppe=n(e7e,"STRONG",{});var Hmt=s(ppe);bZo=r(Hmt,"camembert"),Hmt.forEach(t),FZo=r(e7e," \u2014 "),CO=n(e7e,"A",{href:!0});var Umt=s(CO);vZo=r(Umt,"TFCamembertModel"),Umt.forEach(t),TZo=r(e7e," (CamemBERT model)"),e7e.forEach(t),MZo=i(k),$v=n(k,"LI",{});var o7e=s($v);_pe=n(o7e,"STRONG",{});var Jmt=s(_pe);EZo=r(Jmt,"clip"),Jmt.forEach(t),CZo=r(o7e," \u2014 "),wO=n(o7e,"A",{href:!0});var Ymt=s(wO);wZo=r(Ymt,"TFCLIPModel"),Ymt.forEach(t),AZo=r(o7e," (CLIP model)"),o7e.forEach(t),yZo=i(k),qv=n(k,"LI",{});var r7e=s(qv);upe=n(r7e,"STRONG",{});var Kmt=s(upe);LZo=r(Kmt,"convbert"),Kmt.forEach(t),xZo=r(r7e," \u2014 "),AO=n(r7e,"A",{href:!0});var Zmt=s(AO);kZo=r(Zmt,"TFConvBertModel"),Zmt.forEach(t),SZo=r(r7e," (ConvBERT model)"),r7e.forEach(t),RZo=i(k),Iv=n(k,"LI",{});var t7e=s(Iv);bpe=n(t7e,"STRONG",{});var egt=s(bpe);BZo=r(egt,"convnext"),egt.forEach(t),PZo=r(t7e," \u2014 "),yO=n(t7e,"A",{href:!0});var ogt=s(yO);$Zo=r(ogt,"TFConvNextModel"),ogt.forEach(t),qZo=r(t7e," (ConvNext model)"),t7e.forEach(t),IZo=i(k),jv=n(k,"LI",{});var a7e=s(jv);Fpe=n(a7e,"STRONG",{});var rgt=s(Fpe);jZo=r(rgt,"ctrl"),rgt.forEach(t),NZo=r(a7e," \u2014 "),LO=n(a7e,"A",{href:!0});var tgt=s(LO);DZo=r(tgt,"TFCTRLModel"),tgt.forEach(t),GZo=r(a7e," (CTRL model)"),a7e.forEach(t),OZo=i(k),Nv=n(k,"LI",{});var n7e=s(Nv);vpe=n(n7e,"STRONG",{});var agt=s(vpe);VZo=r(agt,"deberta"),agt.forEach(t),XZo=r(n7e," \u2014 "),xO=n(n7e,"A",{href:!0});var ngt=s(xO);zZo=r(ngt,"TFDebertaModel"),ngt.forEach(t),QZo=r(n7e," (DeBERTa model)"),n7e.forEach(t),WZo=i(k),Dv=n(k,"LI",{});var s7e=s(Dv);Tpe=n(s7e,"STRONG",{});var sgt=s(Tpe);HZo=r(sgt,"deberta-v2"),sgt.forEach(t),UZo=r(s7e," \u2014 "),kO=n(s7e,"A",{href:!0});var lgt=s(kO);JZo=r(lgt,"TFDebertaV2Model"),lgt.forEach(t),YZo=r(s7e," (DeBERTa-v2 model)"),s7e.forEach(t),KZo=i(k),Gv=n(k,"LI",{});var l7e=s(Gv);Mpe=n(l7e,"STRONG",{});var igt=s(Mpe);ZZo=r(igt,"distilbert"),igt.forEach(t),eer=r(l7e," \u2014 "),SO=n(l7e,"A",{href:!0});var dgt=s(SO);oer=r(dgt,"TFDistilBertModel"),dgt.forEach(t),rer=r(l7e," (DistilBERT model)"),l7e.forEach(t),ter=i(k),Ov=n(k,"LI",{});var i7e=s(Ov);Epe=n(i7e,"STRONG",{});var cgt=s(Epe);aer=r(cgt,"dpr"),cgt.forEach(t),ner=r(i7e," \u2014 "),RO=n(i7e,"A",{href:!0});var fgt=s(RO);ser=r(fgt,"TFDPRQuestionEncoder"),fgt.forEach(t),ler=r(i7e," (DPR model)"),i7e.forEach(t),ier=i(k),Vv=n(k,"LI",{});var d7e=s(Vv);Cpe=n(d7e,"STRONG",{});var mgt=s(Cpe);der=r(mgt,"electra"),mgt.forEach(t),cer=r(d7e," \u2014 "),BO=n(d7e,"A",{href:!0});var ggt=s(BO);fer=r(ggt,"TFElectraModel"),ggt.forEach(t),mer=r(d7e," (ELECTRA model)"),d7e.forEach(t),ger=i(k),Xv=n(k,"LI",{});var c7e=s(Xv);wpe=n(c7e,"STRONG",{});var hgt=s(wpe);her=r(hgt,"flaubert"),hgt.forEach(t),per=r(c7e," \u2014 "),PO=n(c7e,"A",{href:!0});var pgt=s(PO);_er=r(pgt,"TFFlaubertModel"),pgt.forEach(t),uer=r(c7e," (FlauBERT model)"),c7e.forEach(t),ber=i(k),Qs=n(k,"LI",{});var A9=s(Qs);Ape=n(A9,"STRONG",{});var _gt=s(Ape);Fer=r(_gt,"funnel"),_gt.forEach(t),ver=r(A9," \u2014 "),$O=n(A9,"A",{href:!0});var ugt=s($O);Ter=r(ugt,"TFFunnelModel"),ugt.forEach(t),Mer=r(A9," or "),qO=n(A9,"A",{href:!0});var bgt=s(qO);Eer=r(bgt,"TFFunnelBaseModel"),bgt.forEach(t),Cer=r(A9," (Funnel Transformer model)"),A9.forEach(t),wer=i(k),zv=n(k,"LI",{});var f7e=s(zv);ype=n(f7e,"STRONG",{});var Fgt=s(ype);Aer=r(Fgt,"gpt2"),Fgt.forEach(t),yer=r(f7e," \u2014 "),IO=n(f7e,"A",{href:!0});var vgt=s(IO);Ler=r(vgt,"TFGPT2Model"),vgt.forEach(t),xer=r(f7e," (OpenAI GPT-2 model)"),f7e.forEach(t),ker=i(k),Qv=n(k,"LI",{});var m7e=s(Qv);Lpe=n(m7e,"STRONG",{});var Tgt=s(Lpe);Ser=r(Tgt,"gptj"),Tgt.forEach(t),Rer=r(m7e," \u2014 "),jO=n(m7e,"A",{href:!0});var Mgt=s(jO);Ber=r(Mgt,"TFGPTJModel"),Mgt.forEach(t),Per=r(m7e," (GPT-J model)"),m7e.forEach(t),$er=i(k),Wv=n(k,"LI",{});var g7e=s(Wv);xpe=n(g7e,"STRONG",{});var Egt=s(xpe);qer=r(Egt,"hubert"),Egt.forEach(t),Ier=r(g7e," \u2014 "),NO=n(g7e,"A",{href:!0});var Cgt=s(NO);jer=r(Cgt,"TFHubertModel"),Cgt.forEach(t),Ner=r(g7e," (Hubert model)"),g7e.forEach(t),Der=i(k),Hv=n(k,"LI",{});var h7e=s(Hv);kpe=n(h7e,"STRONG",{});var wgt=s(kpe);Ger=r(wgt,"layoutlm"),wgt.forEach(t),Oer=r(h7e," \u2014 "),DO=n(h7e,"A",{href:!0});var Agt=s(DO);Ver=r(Agt,"TFLayoutLMModel"),Agt.forEach(t),Xer=r(h7e," (LayoutLM model)"),h7e.forEach(t),zer=i(k),Uv=n(k,"LI",{});var p7e=s(Uv);Spe=n(p7e,"STRONG",{});var ygt=s(Spe);Qer=r(ygt,"led"),ygt.forEach(t),Wer=r(p7e," \u2014 "),GO=n(p7e,"A",{href:!0});var Lgt=s(GO);Her=r(Lgt,"TFLEDModel"),Lgt.forEach(t),Uer=r(p7e," (LED model)"),p7e.forEach(t),Jer=i(k),Jv=n(k,"LI",{});var _7e=s(Jv);Rpe=n(_7e,"STRONG",{});var xgt=s(Rpe);Yer=r(xgt,"longformer"),xgt.forEach(t),Ker=r(_7e," \u2014 "),OO=n(_7e,"A",{href:!0});var kgt=s(OO);Zer=r(kgt,"TFLongformerModel"),kgt.forEach(t),eor=r(_7e," (Longformer model)"),_7e.forEach(t),oor=i(k),Yv=n(k,"LI",{});var u7e=s(Yv);Bpe=n(u7e,"STRONG",{});var Sgt=s(Bpe);ror=r(Sgt,"lxmert"),Sgt.forEach(t),tor=r(u7e," \u2014 "),VO=n(u7e,"A",{href:!0});var Rgt=s(VO);aor=r(Rgt,"TFLxmertModel"),Rgt.forEach(t),nor=r(u7e," (LXMERT model)"),u7e.forEach(t),sor=i(k),Kv=n(k,"LI",{});var b7e=s(Kv);Ppe=n(b7e,"STRONG",{});var Bgt=s(Ppe);lor=r(Bgt,"marian"),Bgt.forEach(t),ior=r(b7e," \u2014 "),XO=n(b7e,"A",{href:!0});var Pgt=s(XO);dor=r(Pgt,"TFMarianModel"),Pgt.forEach(t),cor=r(b7e," (Marian model)"),b7e.forEach(t),mor=i(k),Zv=n(k,"LI",{});var F7e=s(Zv);$pe=n(F7e,"STRONG",{});var $gt=s($pe);gor=r($gt,"mbart"),$gt.forEach(t),hor=r(F7e," \u2014 "),zO=n(F7e,"A",{href:!0});var qgt=s(zO);por=r(qgt,"TFMBartModel"),qgt.forEach(t),_or=r(F7e," (mBART model)"),F7e.forEach(t),uor=i(k),e6=n(k,"LI",{});var v7e=s(e6);qpe=n(v7e,"STRONG",{});var Igt=s(qpe);bor=r(Igt,"mobilebert"),Igt.forEach(t),For=r(v7e," \u2014 "),QO=n(v7e,"A",{href:!0});var jgt=s(QO);vor=r(jgt,"TFMobileBertModel"),jgt.forEach(t),Tor=r(v7e," (MobileBERT model)"),v7e.forEach(t),Mor=i(k),o6=n(k,"LI",{});var T7e=s(o6);Ipe=n(T7e,"STRONG",{});var Ngt=s(Ipe);Eor=r(Ngt,"mpnet"),Ngt.forEach(t),Cor=r(T7e," \u2014 "),WO=n(T7e,"A",{href:!0});var Dgt=s(WO);wor=r(Dgt,"TFMPNetModel"),Dgt.forEach(t),Aor=r(T7e," (MPNet model)"),T7e.forEach(t),yor=i(k),r6=n(k,"LI",{});var M7e=s(r6);jpe=n(M7e,"STRONG",{});var Ggt=s(jpe);Lor=r(Ggt,"mt5"),Ggt.forEach(t),xor=r(M7e," \u2014 "),HO=n(M7e,"A",{href:!0});var Ogt=s(HO);kor=r(Ogt,"TFMT5Model"),Ogt.forEach(t),Sor=r(M7e," (mT5 model)"),M7e.forEach(t),Ror=i(k),t6=n(k,"LI",{});var E7e=s(t6);Npe=n(E7e,"STRONG",{});var Vgt=s(Npe);Bor=r(Vgt,"openai-gpt"),Vgt.forEach(t),Por=r(E7e," \u2014 "),UO=n(E7e,"A",{href:!0});var Xgt=s(UO);$or=r(Xgt,"TFOpenAIGPTModel"),Xgt.forEach(t),qor=r(E7e," (OpenAI GPT model)"),E7e.forEach(t),Ior=i(k),a6=n(k,"LI",{});var C7e=s(a6);Dpe=n(C7e,"STRONG",{});var zgt=s(Dpe);jor=r(zgt,"pegasus"),zgt.forEach(t),Nor=r(C7e," \u2014 "),JO=n(C7e,"A",{href:!0});var Qgt=s(JO);Dor=r(Qgt,"TFPegasusModel"),Qgt.forEach(t),Gor=r(C7e," (Pegasus model)"),C7e.forEach(t),Oor=i(k),n6=n(k,"LI",{});var w7e=s(n6);Gpe=n(w7e,"STRONG",{});var Wgt=s(Gpe);Vor=r(Wgt,"rembert"),Wgt.forEach(t),Xor=r(w7e," \u2014 "),YO=n(w7e,"A",{href:!0});var Hgt=s(YO);zor=r(Hgt,"TFRemBertModel"),Hgt.forEach(t),Qor=r(w7e," (RemBERT model)"),w7e.forEach(t),Wor=i(k),s6=n(k,"LI",{});var A7e=s(s6);Ope=n(A7e,"STRONG",{});var Ugt=s(Ope);Hor=r(Ugt,"roberta"),Ugt.forEach(t),Uor=r(A7e," \u2014 "),KO=n(A7e,"A",{href:!0});var Jgt=s(KO);Jor=r(Jgt,"TFRobertaModel"),Jgt.forEach(t),Yor=r(A7e," (RoBERTa model)"),A7e.forEach(t),Kor=i(k),l6=n(k,"LI",{});var y7e=s(l6);Vpe=n(y7e,"STRONG",{});var Ygt=s(Vpe);Zor=r(Ygt,"roformer"),Ygt.forEach(t),err=r(y7e," \u2014 "),ZO=n(y7e,"A",{href:!0});var Kgt=s(ZO);orr=r(Kgt,"TFRoFormerModel"),Kgt.forEach(t),rrr=r(y7e," (RoFormer model)"),y7e.forEach(t),trr=i(k),i6=n(k,"LI",{});var L7e=s(i6);Xpe=n(L7e,"STRONG",{});var Zgt=s(Xpe);arr=r(Zgt,"speech_to_text"),Zgt.forEach(t),nrr=r(L7e," \u2014 "),eV=n(L7e,"A",{href:!0});var eht=s(eV);srr=r(eht,"TFSpeech2TextModel"),eht.forEach(t),lrr=r(L7e," (Speech2Text model)"),L7e.forEach(t),irr=i(k),d6=n(k,"LI",{});var x7e=s(d6);zpe=n(x7e,"STRONG",{});var oht=s(zpe);drr=r(oht,"t5"),oht.forEach(t),crr=r(x7e," \u2014 "),oV=n(x7e,"A",{href:!0});var rht=s(oV);frr=r(rht,"TFT5Model"),rht.forEach(t),mrr=r(x7e," (T5 model)"),x7e.forEach(t),grr=i(k),c6=n(k,"LI",{});var k7e=s(c6);Qpe=n(k7e,"STRONG",{});var tht=s(Qpe);hrr=r(tht,"tapas"),tht.forEach(t),prr=r(k7e," \u2014 "),rV=n(k7e,"A",{href:!0});var aht=s(rV);_rr=r(aht,"TFTapasModel"),aht.forEach(t),urr=r(k7e," (TAPAS model)"),k7e.forEach(t),brr=i(k),f6=n(k,"LI",{});var S7e=s(f6);Wpe=n(S7e,"STRONG",{});var nht=s(Wpe);Frr=r(nht,"transfo-xl"),nht.forEach(t),vrr=r(S7e," \u2014 "),tV=n(S7e,"A",{href:!0});var sht=s(tV);Trr=r(sht,"TFTransfoXLModel"),sht.forEach(t),Mrr=r(S7e," (Transformer-XL model)"),S7e.forEach(t),Err=i(k),m6=n(k,"LI",{});var R7e=s(m6);Hpe=n(R7e,"STRONG",{});var lht=s(Hpe);Crr=r(lht,"vit"),lht.forEach(t),wrr=r(R7e," \u2014 "),aV=n(R7e,"A",{href:!0});var iht=s(aV);Arr=r(iht,"TFViTModel"),iht.forEach(t),yrr=r(R7e," (ViT model)"),R7e.forEach(t),Lrr=i(k),g6=n(k,"LI",{});var B7e=s(g6);Upe=n(B7e,"STRONG",{});var dht=s(Upe);xrr=r(dht,"vit_mae"),dht.forEach(t),krr=r(B7e," \u2014 "),nV=n(B7e,"A",{href:!0});var cht=s(nV);Srr=r(cht,"TFViTMAEModel"),cht.forEach(t),Rrr=r(B7e," (ViTMAE model)"),B7e.forEach(t),Brr=i(k),h6=n(k,"LI",{});var P7e=s(h6);Jpe=n(P7e,"STRONG",{});var fht=s(Jpe);Prr=r(fht,"wav2vec2"),fht.forEach(t),$rr=r(P7e," \u2014 "),sV=n(P7e,"A",{href:!0});var mht=s(sV);qrr=r(mht,"TFWav2Vec2Model"),mht.forEach(t),Irr=r(P7e," (Wav2Vec2 model)"),P7e.forEach(t),jrr=i(k),p6=n(k,"LI",{});var $7e=s(p6);Ype=n($7e,"STRONG",{});var ght=s(Ype);Nrr=r(ght,"xlm"),ght.forEach(t),Drr=r($7e," \u2014 "),lV=n($7e,"A",{href:!0});var hht=s(lV);Grr=r(hht,"TFXLMModel"),hht.forEach(t),Orr=r($7e," (XLM model)"),$7e.forEach(t),Vrr=i(k),_6=n(k,"LI",{});var q7e=s(_6);Kpe=n(q7e,"STRONG",{});var pht=s(Kpe);Xrr=r(pht,"xlm-roberta"),pht.forEach(t),zrr=r(q7e," \u2014 "),iV=n(q7e,"A",{href:!0});var _ht=s(iV);Qrr=r(_ht,"TFXLMRobertaModel"),_ht.forEach(t),Wrr=r(q7e," (XLM-RoBERTa model)"),q7e.forEach(t),Hrr=i(k),u6=n(k,"LI",{});var I7e=s(u6);Zpe=n(I7e,"STRONG",{});var uht=s(Zpe);Urr=r(uht,"xlnet"),uht.forEach(t),Jrr=r(I7e," \u2014 "),dV=n(I7e,"A",{href:!0});var bht=s(dV);Yrr=r(bht,"TFXLNetModel"),bht.forEach(t),Krr=r(I7e," (XLNet model)"),I7e.forEach(t),k.forEach(t),Zrr=i(ba),e_e=n(ba,"P",{});var Fht=s(e_e);etr=r(Fht,"Examples:"),Fht.forEach(t),otr=i(ba),m(hA.$$.fragment,ba),ba.forEach(t),Xl.forEach(t),kBe=i(c),Ec=n(c,"H2",{class:!0});var O$e=s(Ec);b6=n(O$e,"A",{id:!0,class:!0,href:!0});var vht=s(b6);o_e=n(vht,"SPAN",{});var Tht=s(o_e);m(pA.$$.fragment,Tht),Tht.forEach(t),vht.forEach(t),rtr=i(O$e),r_e=n(O$e,"SPAN",{});var Mht=s(r_e);ttr=r(Mht,"TFAutoModelForPreTraining"),Mht.forEach(t),O$e.forEach(t),SBe=i(c),Tr=n(c,"DIV",{class:!0});var Ql=s(Tr);m(_A.$$.fragment,Ql),atr=i(Ql),Cc=n(Ql,"P",{});var pJ=s(Cc);ntr=r(pJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),cV=n(pJ,"A",{href:!0});var Eht=s(cV);str=r(Eht,"from_pretrained()"),Eht.forEach(t),ltr=r(pJ," class method or the "),fV=n(pJ,"A",{href:!0});var Cht=s(fV);itr=r(Cht,"from_config()"),Cht.forEach(t),dtr=r(pJ,` class
method.`),pJ.forEach(t),ctr=i(Ql),uA=n(Ql,"P",{});var V$e=s(uA);ftr=r(V$e,"This class cannot be instantiated directly using "),t_e=n(V$e,"CODE",{});var wht=s(t_e);mtr=r(wht,"__init__()"),wht.forEach(t),gtr=r(V$e," (throws an error)."),V$e.forEach(t),htr=i(Ql),_t=n(Ql,"DIV",{class:!0});var Wl=s(_t);m(bA.$$.fragment,Wl),ptr=i(Wl),a_e=n(Wl,"P",{});var Aht=s(a_e);_tr=r(Aht,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Aht.forEach(t),utr=i(Wl),wc=n(Wl,"P",{});var _J=s(wc);btr=r(_J,`Note:
Loading a model from its configuration file does `),n_e=n(_J,"STRONG",{});var yht=s(n_e);Ftr=r(yht,"not"),yht.forEach(t),vtr=r(_J,` load the model weights. It only affects the
model\u2019s configuration. Use `),mV=n(_J,"A",{href:!0});var Lht=s(mV);Ttr=r(Lht,"from_pretrained()"),Lht.forEach(t),Mtr=r(_J," to load the model weights."),_J.forEach(t),Etr=i(Wl),s_e=n(Wl,"P",{});var xht=s(s_e);Ctr=r(xht,"Examples:"),xht.forEach(t),wtr=i(Wl),m(FA.$$.fragment,Wl),Wl.forEach(t),Atr=i(Ql),po=n(Ql,"DIV",{class:!0});var Fa=s(po);m(vA.$$.fragment,Fa),ytr=i(Fa),l_e=n(Fa,"P",{});var kht=s(l_e);Ltr=r(kht,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),kht.forEach(t),xtr=i(Fa),Tn=n(Fa,"P",{});var tE=s(Tn);ktr=r(tE,"The model class to instantiate is selected based on the "),i_e=n(tE,"CODE",{});var Sht=s(i_e);Str=r(Sht,"model_type"),Sht.forEach(t),Rtr=r(tE,` property of the config object (either
passed as an argument or loaded from `),d_e=n(tE,"CODE",{});var Rht=s(d_e);Btr=r(Rht,"pretrained_model_name_or_path"),Rht.forEach(t),Ptr=r(tE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c_e=n(tE,"CODE",{});var Bht=s(c_e);$tr=r(Bht,"pretrained_model_name_or_path"),Bht.forEach(t),qtr=r(tE,":"),tE.forEach(t),Itr=i(Fa),H=n(Fa,"UL",{});var U=s(H);F6=n(U,"LI",{});var j7e=s(F6);f_e=n(j7e,"STRONG",{});var Pht=s(f_e);jtr=r(Pht,"albert"),Pht.forEach(t),Ntr=r(j7e," \u2014 "),gV=n(j7e,"A",{href:!0});var $ht=s(gV);Dtr=r($ht,"TFAlbertForPreTraining"),$ht.forEach(t),Gtr=r(j7e," (ALBERT model)"),j7e.forEach(t),Otr=i(U),v6=n(U,"LI",{});var N7e=s(v6);m_e=n(N7e,"STRONG",{});var qht=s(m_e);Vtr=r(qht,"bart"),qht.forEach(t),Xtr=r(N7e," \u2014 "),hV=n(N7e,"A",{href:!0});var Iht=s(hV);ztr=r(Iht,"TFBartForConditionalGeneration"),Iht.forEach(t),Qtr=r(N7e," (BART model)"),N7e.forEach(t),Wtr=i(U),T6=n(U,"LI",{});var D7e=s(T6);g_e=n(D7e,"STRONG",{});var jht=s(g_e);Htr=r(jht,"bert"),jht.forEach(t),Utr=r(D7e," \u2014 "),pV=n(D7e,"A",{href:!0});var Nht=s(pV);Jtr=r(Nht,"TFBertForPreTraining"),Nht.forEach(t),Ytr=r(D7e," (BERT model)"),D7e.forEach(t),Ktr=i(U),M6=n(U,"LI",{});var G7e=s(M6);h_e=n(G7e,"STRONG",{});var Dht=s(h_e);Ztr=r(Dht,"camembert"),Dht.forEach(t),ear=r(G7e," \u2014 "),_V=n(G7e,"A",{href:!0});var Ght=s(_V);oar=r(Ght,"TFCamembertForMaskedLM"),Ght.forEach(t),rar=r(G7e," (CamemBERT model)"),G7e.forEach(t),tar=i(U),E6=n(U,"LI",{});var O7e=s(E6);p_e=n(O7e,"STRONG",{});var Oht=s(p_e);aar=r(Oht,"ctrl"),Oht.forEach(t),nar=r(O7e," \u2014 "),uV=n(O7e,"A",{href:!0});var Vht=s(uV);sar=r(Vht,"TFCTRLLMHeadModel"),Vht.forEach(t),lar=r(O7e," (CTRL model)"),O7e.forEach(t),iar=i(U),C6=n(U,"LI",{});var V7e=s(C6);__e=n(V7e,"STRONG",{});var Xht=s(__e);dar=r(Xht,"distilbert"),Xht.forEach(t),car=r(V7e," \u2014 "),bV=n(V7e,"A",{href:!0});var zht=s(bV);far=r(zht,"TFDistilBertForMaskedLM"),zht.forEach(t),mar=r(V7e," (DistilBERT model)"),V7e.forEach(t),gar=i(U),w6=n(U,"LI",{});var X7e=s(w6);u_e=n(X7e,"STRONG",{});var Qht=s(u_e);har=r(Qht,"electra"),Qht.forEach(t),par=r(X7e," \u2014 "),FV=n(X7e,"A",{href:!0});var Wht=s(FV);_ar=r(Wht,"TFElectraForPreTraining"),Wht.forEach(t),uar=r(X7e," (ELECTRA model)"),X7e.forEach(t),bar=i(U),A6=n(U,"LI",{});var z7e=s(A6);b_e=n(z7e,"STRONG",{});var Hht=s(b_e);Far=r(Hht,"flaubert"),Hht.forEach(t),Tar=r(z7e," \u2014 "),vV=n(z7e,"A",{href:!0});var Uht=s(vV);Mar=r(Uht,"TFFlaubertWithLMHeadModel"),Uht.forEach(t),Ear=r(z7e," (FlauBERT model)"),z7e.forEach(t),Car=i(U),y6=n(U,"LI",{});var Q7e=s(y6);F_e=n(Q7e,"STRONG",{});var Jht=s(F_e);war=r(Jht,"funnel"),Jht.forEach(t),Aar=r(Q7e," \u2014 "),TV=n(Q7e,"A",{href:!0});var Yht=s(TV);yar=r(Yht,"TFFunnelForPreTraining"),Yht.forEach(t),Lar=r(Q7e," (Funnel Transformer model)"),Q7e.forEach(t),xar=i(U),L6=n(U,"LI",{});var W7e=s(L6);v_e=n(W7e,"STRONG",{});var Kht=s(v_e);kar=r(Kht,"gpt2"),Kht.forEach(t),Sar=r(W7e," \u2014 "),MV=n(W7e,"A",{href:!0});var Zht=s(MV);Rar=r(Zht,"TFGPT2LMHeadModel"),Zht.forEach(t),Bar=r(W7e," (OpenAI GPT-2 model)"),W7e.forEach(t),Par=i(U),x6=n(U,"LI",{});var H7e=s(x6);T_e=n(H7e,"STRONG",{});var ept=s(T_e);$ar=r(ept,"layoutlm"),ept.forEach(t),qar=r(H7e," \u2014 "),EV=n(H7e,"A",{href:!0});var opt=s(EV);Iar=r(opt,"TFLayoutLMForMaskedLM"),opt.forEach(t),jar=r(H7e," (LayoutLM model)"),H7e.forEach(t),Nar=i(U),k6=n(U,"LI",{});var U7e=s(k6);M_e=n(U7e,"STRONG",{});var rpt=s(M_e);Dar=r(rpt,"lxmert"),rpt.forEach(t),Gar=r(U7e," \u2014 "),CV=n(U7e,"A",{href:!0});var tpt=s(CV);Oar=r(tpt,"TFLxmertForPreTraining"),tpt.forEach(t),Var=r(U7e," (LXMERT model)"),U7e.forEach(t),Xar=i(U),S6=n(U,"LI",{});var J7e=s(S6);E_e=n(J7e,"STRONG",{});var apt=s(E_e);zar=r(apt,"mobilebert"),apt.forEach(t),Qar=r(J7e," \u2014 "),wV=n(J7e,"A",{href:!0});var npt=s(wV);War=r(npt,"TFMobileBertForPreTraining"),npt.forEach(t),Har=r(J7e," (MobileBERT model)"),J7e.forEach(t),Uar=i(U),R6=n(U,"LI",{});var Y7e=s(R6);C_e=n(Y7e,"STRONG",{});var spt=s(C_e);Jar=r(spt,"mpnet"),spt.forEach(t),Yar=r(Y7e," \u2014 "),AV=n(Y7e,"A",{href:!0});var lpt=s(AV);Kar=r(lpt,"TFMPNetForMaskedLM"),lpt.forEach(t),Zar=r(Y7e," (MPNet model)"),Y7e.forEach(t),enr=i(U),B6=n(U,"LI",{});var K7e=s(B6);w_e=n(K7e,"STRONG",{});var ipt=s(w_e);onr=r(ipt,"openai-gpt"),ipt.forEach(t),rnr=r(K7e," \u2014 "),yV=n(K7e,"A",{href:!0});var dpt=s(yV);tnr=r(dpt,"TFOpenAIGPTLMHeadModel"),dpt.forEach(t),anr=r(K7e," (OpenAI GPT model)"),K7e.forEach(t),nnr=i(U),P6=n(U,"LI",{});var Z7e=s(P6);A_e=n(Z7e,"STRONG",{});var cpt=s(A_e);snr=r(cpt,"roberta"),cpt.forEach(t),lnr=r(Z7e," \u2014 "),LV=n(Z7e,"A",{href:!0});var fpt=s(LV);inr=r(fpt,"TFRobertaForMaskedLM"),fpt.forEach(t),dnr=r(Z7e," (RoBERTa model)"),Z7e.forEach(t),cnr=i(U),$6=n(U,"LI",{});var e9e=s($6);y_e=n(e9e,"STRONG",{});var mpt=s(y_e);fnr=r(mpt,"t5"),mpt.forEach(t),mnr=r(e9e," \u2014 "),xV=n(e9e,"A",{href:!0});var gpt=s(xV);gnr=r(gpt,"TFT5ForConditionalGeneration"),gpt.forEach(t),hnr=r(e9e," (T5 model)"),e9e.forEach(t),pnr=i(U),q6=n(U,"LI",{});var o9e=s(q6);L_e=n(o9e,"STRONG",{});var hpt=s(L_e);_nr=r(hpt,"tapas"),hpt.forEach(t),unr=r(o9e," \u2014 "),kV=n(o9e,"A",{href:!0});var ppt=s(kV);bnr=r(ppt,"TFTapasForMaskedLM"),ppt.forEach(t),Fnr=r(o9e," (TAPAS model)"),o9e.forEach(t),vnr=i(U),I6=n(U,"LI",{});var r9e=s(I6);x_e=n(r9e,"STRONG",{});var _pt=s(x_e);Tnr=r(_pt,"transfo-xl"),_pt.forEach(t),Mnr=r(r9e," \u2014 "),SV=n(r9e,"A",{href:!0});var upt=s(SV);Enr=r(upt,"TFTransfoXLLMHeadModel"),upt.forEach(t),Cnr=r(r9e," (Transformer-XL model)"),r9e.forEach(t),wnr=i(U),j6=n(U,"LI",{});var t9e=s(j6);k_e=n(t9e,"STRONG",{});var bpt=s(k_e);Anr=r(bpt,"vit_mae"),bpt.forEach(t),ynr=r(t9e," \u2014 "),RV=n(t9e,"A",{href:!0});var Fpt=s(RV);Lnr=r(Fpt,"TFViTMAEForPreTraining"),Fpt.forEach(t),xnr=r(t9e," (ViTMAE model)"),t9e.forEach(t),knr=i(U),N6=n(U,"LI",{});var a9e=s(N6);S_e=n(a9e,"STRONG",{});var vpt=s(S_e);Snr=r(vpt,"xlm"),vpt.forEach(t),Rnr=r(a9e," \u2014 "),BV=n(a9e,"A",{href:!0});var Tpt=s(BV);Bnr=r(Tpt,"TFXLMWithLMHeadModel"),Tpt.forEach(t),Pnr=r(a9e," (XLM model)"),a9e.forEach(t),$nr=i(U),D6=n(U,"LI",{});var n9e=s(D6);R_e=n(n9e,"STRONG",{});var Mpt=s(R_e);qnr=r(Mpt,"xlm-roberta"),Mpt.forEach(t),Inr=r(n9e," \u2014 "),PV=n(n9e,"A",{href:!0});var Ept=s(PV);jnr=r(Ept,"TFXLMRobertaForMaskedLM"),Ept.forEach(t),Nnr=r(n9e," (XLM-RoBERTa model)"),n9e.forEach(t),Dnr=i(U),G6=n(U,"LI",{});var s9e=s(G6);B_e=n(s9e,"STRONG",{});var Cpt=s(B_e);Gnr=r(Cpt,"xlnet"),Cpt.forEach(t),Onr=r(s9e," \u2014 "),$V=n(s9e,"A",{href:!0});var wpt=s($V);Vnr=r(wpt,"TFXLNetLMHeadModel"),wpt.forEach(t),Xnr=r(s9e," (XLNet model)"),s9e.forEach(t),U.forEach(t),znr=i(Fa),P_e=n(Fa,"P",{});var Apt=s(P_e);Qnr=r(Apt,"Examples:"),Apt.forEach(t),Wnr=i(Fa),m(TA.$$.fragment,Fa),Fa.forEach(t),Ql.forEach(t),RBe=i(c),Ac=n(c,"H2",{class:!0});var X$e=s(Ac);O6=n(X$e,"A",{id:!0,class:!0,href:!0});var ypt=s(O6);$_e=n(ypt,"SPAN",{});var Lpt=s($_e);m(MA.$$.fragment,Lpt),Lpt.forEach(t),ypt.forEach(t),Hnr=i(X$e),q_e=n(X$e,"SPAN",{});var xpt=s(q_e);Unr=r(xpt,"TFAutoModelForCausalLM"),xpt.forEach(t),X$e.forEach(t),BBe=i(c),Mr=n(c,"DIV",{class:!0});var Hl=s(Mr);m(EA.$$.fragment,Hl),Jnr=i(Hl),yc=n(Hl,"P",{});var uJ=s(yc);Ynr=r(uJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),qV=n(uJ,"A",{href:!0});var kpt=s(qV);Knr=r(kpt,"from_pretrained()"),kpt.forEach(t),Znr=r(uJ," class method or the "),IV=n(uJ,"A",{href:!0});var Spt=s(IV);esr=r(Spt,"from_config()"),Spt.forEach(t),osr=r(uJ,` class
method.`),uJ.forEach(t),rsr=i(Hl),CA=n(Hl,"P",{});var z$e=s(CA);tsr=r(z$e,"This class cannot be instantiated directly using "),I_e=n(z$e,"CODE",{});var Rpt=s(I_e);asr=r(Rpt,"__init__()"),Rpt.forEach(t),nsr=r(z$e," (throws an error)."),z$e.forEach(t),ssr=i(Hl),ut=n(Hl,"DIV",{class:!0});var Ul=s(ut);m(wA.$$.fragment,Ul),lsr=i(Ul),j_e=n(Ul,"P",{});var Bpt=s(j_e);isr=r(Bpt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Bpt.forEach(t),dsr=i(Ul),Lc=n(Ul,"P",{});var bJ=s(Lc);csr=r(bJ,`Note:
Loading a model from its configuration file does `),N_e=n(bJ,"STRONG",{});var Ppt=s(N_e);fsr=r(Ppt,"not"),Ppt.forEach(t),msr=r(bJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),jV=n(bJ,"A",{href:!0});var $pt=s(jV);gsr=r($pt,"from_pretrained()"),$pt.forEach(t),hsr=r(bJ," to load the model weights."),bJ.forEach(t),psr=i(Ul),D_e=n(Ul,"P",{});var qpt=s(D_e);_sr=r(qpt,"Examples:"),qpt.forEach(t),usr=i(Ul),m(AA.$$.fragment,Ul),Ul.forEach(t),bsr=i(Hl),_o=n(Hl,"DIV",{class:!0});var va=s(_o);m(yA.$$.fragment,va),Fsr=i(va),G_e=n(va,"P",{});var Ipt=s(G_e);vsr=r(Ipt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Ipt.forEach(t),Tsr=i(va),Mn=n(va,"P",{});var aE=s(Mn);Msr=r(aE,"The model class to instantiate is selected based on the "),O_e=n(aE,"CODE",{});var jpt=s(O_e);Esr=r(jpt,"model_type"),jpt.forEach(t),Csr=r(aE,` property of the config object (either
passed as an argument or loaded from `),V_e=n(aE,"CODE",{});var Npt=s(V_e);wsr=r(Npt,"pretrained_model_name_or_path"),Npt.forEach(t),Asr=r(aE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X_e=n(aE,"CODE",{});var Dpt=s(X_e);ysr=r(Dpt,"pretrained_model_name_or_path"),Dpt.forEach(t),Lsr=r(aE,":"),aE.forEach(t),xsr=i(va),ce=n(va,"UL",{});var he=s(ce);V6=n(he,"LI",{});var l9e=s(V6);z_e=n(l9e,"STRONG",{});var Gpt=s(z_e);ksr=r(Gpt,"bert"),Gpt.forEach(t),Ssr=r(l9e," \u2014 "),NV=n(l9e,"A",{href:!0});var Opt=s(NV);Rsr=r(Opt,"TFBertLMHeadModel"),Opt.forEach(t),Bsr=r(l9e," (BERT model)"),l9e.forEach(t),Psr=i(he),X6=n(he,"LI",{});var i9e=s(X6);Q_e=n(i9e,"STRONG",{});var Vpt=s(Q_e);$sr=r(Vpt,"camembert"),Vpt.forEach(t),qsr=r(i9e," \u2014 "),DV=n(i9e,"A",{href:!0});var Xpt=s(DV);Isr=r(Xpt,"TFCamembertForCausalLM"),Xpt.forEach(t),jsr=r(i9e," (CamemBERT model)"),i9e.forEach(t),Nsr=i(he),z6=n(he,"LI",{});var d9e=s(z6);W_e=n(d9e,"STRONG",{});var zpt=s(W_e);Dsr=r(zpt,"ctrl"),zpt.forEach(t),Gsr=r(d9e," \u2014 "),GV=n(d9e,"A",{href:!0});var Qpt=s(GV);Osr=r(Qpt,"TFCTRLLMHeadModel"),Qpt.forEach(t),Vsr=r(d9e," (CTRL model)"),d9e.forEach(t),Xsr=i(he),Q6=n(he,"LI",{});var c9e=s(Q6);H_e=n(c9e,"STRONG",{});var Wpt=s(H_e);zsr=r(Wpt,"gpt2"),Wpt.forEach(t),Qsr=r(c9e," \u2014 "),OV=n(c9e,"A",{href:!0});var Hpt=s(OV);Wsr=r(Hpt,"TFGPT2LMHeadModel"),Hpt.forEach(t),Hsr=r(c9e," (OpenAI GPT-2 model)"),c9e.forEach(t),Usr=i(he),W6=n(he,"LI",{});var f9e=s(W6);U_e=n(f9e,"STRONG",{});var Upt=s(U_e);Jsr=r(Upt,"gptj"),Upt.forEach(t),Ysr=r(f9e," \u2014 "),VV=n(f9e,"A",{href:!0});var Jpt=s(VV);Ksr=r(Jpt,"TFGPTJForCausalLM"),Jpt.forEach(t),Zsr=r(f9e," (GPT-J model)"),f9e.forEach(t),elr=i(he),H6=n(he,"LI",{});var m9e=s(H6);J_e=n(m9e,"STRONG",{});var Ypt=s(J_e);olr=r(Ypt,"openai-gpt"),Ypt.forEach(t),rlr=r(m9e," \u2014 "),XV=n(m9e,"A",{href:!0});var Kpt=s(XV);tlr=r(Kpt,"TFOpenAIGPTLMHeadModel"),Kpt.forEach(t),alr=r(m9e," (OpenAI GPT model)"),m9e.forEach(t),nlr=i(he),U6=n(he,"LI",{});var g9e=s(U6);Y_e=n(g9e,"STRONG",{});var Zpt=s(Y_e);slr=r(Zpt,"rembert"),Zpt.forEach(t),llr=r(g9e," \u2014 "),zV=n(g9e,"A",{href:!0});var e_t=s(zV);ilr=r(e_t,"TFRemBertForCausalLM"),e_t.forEach(t),dlr=r(g9e," (RemBERT model)"),g9e.forEach(t),clr=i(he),J6=n(he,"LI",{});var h9e=s(J6);K_e=n(h9e,"STRONG",{});var o_t=s(K_e);flr=r(o_t,"roberta"),o_t.forEach(t),mlr=r(h9e," \u2014 "),QV=n(h9e,"A",{href:!0});var r_t=s(QV);glr=r(r_t,"TFRobertaForCausalLM"),r_t.forEach(t),hlr=r(h9e," (RoBERTa model)"),h9e.forEach(t),plr=i(he),Y6=n(he,"LI",{});var p9e=s(Y6);Z_e=n(p9e,"STRONG",{});var t_t=s(Z_e);_lr=r(t_t,"roformer"),t_t.forEach(t),ulr=r(p9e," \u2014 "),WV=n(p9e,"A",{href:!0});var a_t=s(WV);blr=r(a_t,"TFRoFormerForCausalLM"),a_t.forEach(t),Flr=r(p9e," (RoFormer model)"),p9e.forEach(t),vlr=i(he),K6=n(he,"LI",{});var _9e=s(K6);eue=n(_9e,"STRONG",{});var n_t=s(eue);Tlr=r(n_t,"transfo-xl"),n_t.forEach(t),Mlr=r(_9e," \u2014 "),HV=n(_9e,"A",{href:!0});var s_t=s(HV);Elr=r(s_t,"TFTransfoXLLMHeadModel"),s_t.forEach(t),Clr=r(_9e," (Transformer-XL model)"),_9e.forEach(t),wlr=i(he),Z6=n(he,"LI",{});var u9e=s(Z6);oue=n(u9e,"STRONG",{});var l_t=s(oue);Alr=r(l_t,"xlm"),l_t.forEach(t),ylr=r(u9e," \u2014 "),UV=n(u9e,"A",{href:!0});var i_t=s(UV);Llr=r(i_t,"TFXLMWithLMHeadModel"),i_t.forEach(t),xlr=r(u9e," (XLM model)"),u9e.forEach(t),klr=i(he),e0=n(he,"LI",{});var b9e=s(e0);rue=n(b9e,"STRONG",{});var d_t=s(rue);Slr=r(d_t,"xlnet"),d_t.forEach(t),Rlr=r(b9e," \u2014 "),JV=n(b9e,"A",{href:!0});var c_t=s(JV);Blr=r(c_t,"TFXLNetLMHeadModel"),c_t.forEach(t),Plr=r(b9e," (XLNet model)"),b9e.forEach(t),he.forEach(t),$lr=i(va),tue=n(va,"P",{});var f_t=s(tue);qlr=r(f_t,"Examples:"),f_t.forEach(t),Ilr=i(va),m(LA.$$.fragment,va),va.forEach(t),Hl.forEach(t),PBe=i(c),xc=n(c,"H2",{class:!0});var Q$e=s(xc);o0=n(Q$e,"A",{id:!0,class:!0,href:!0});var m_t=s(o0);aue=n(m_t,"SPAN",{});var g_t=s(aue);m(xA.$$.fragment,g_t),g_t.forEach(t),m_t.forEach(t),jlr=i(Q$e),nue=n(Q$e,"SPAN",{});var h_t=s(nue);Nlr=r(h_t,"TFAutoModelForImageClassification"),h_t.forEach(t),Q$e.forEach(t),$Be=i(c),Er=n(c,"DIV",{class:!0});var Jl=s(Er);m(kA.$$.fragment,Jl),Dlr=i(Jl),kc=n(Jl,"P",{});var FJ=s(kc);Glr=r(FJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),YV=n(FJ,"A",{href:!0});var p_t=s(YV);Olr=r(p_t,"from_pretrained()"),p_t.forEach(t),Vlr=r(FJ," class method or the "),KV=n(FJ,"A",{href:!0});var __t=s(KV);Xlr=r(__t,"from_config()"),__t.forEach(t),zlr=r(FJ,` class
method.`),FJ.forEach(t),Qlr=i(Jl),SA=n(Jl,"P",{});var W$e=s(SA);Wlr=r(W$e,"This class cannot be instantiated directly using "),sue=n(W$e,"CODE",{});var u_t=s(sue);Hlr=r(u_t,"__init__()"),u_t.forEach(t),Ulr=r(W$e," (throws an error)."),W$e.forEach(t),Jlr=i(Jl),bt=n(Jl,"DIV",{class:!0});var Yl=s(bt);m(RA.$$.fragment,Yl),Ylr=i(Yl),lue=n(Yl,"P",{});var b_t=s(lue);Klr=r(b_t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),b_t.forEach(t),Zlr=i(Yl),Sc=n(Yl,"P",{});var vJ=s(Sc);eir=r(vJ,`Note:
Loading a model from its configuration file does `),iue=n(vJ,"STRONG",{});var F_t=s(iue);oir=r(F_t,"not"),F_t.forEach(t),rir=r(vJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZV=n(vJ,"A",{href:!0});var v_t=s(ZV);tir=r(v_t,"from_pretrained()"),v_t.forEach(t),air=r(vJ," to load the model weights."),vJ.forEach(t),nir=i(Yl),due=n(Yl,"P",{});var T_t=s(due);sir=r(T_t,"Examples:"),T_t.forEach(t),lir=i(Yl),m(BA.$$.fragment,Yl),Yl.forEach(t),iir=i(Jl),uo=n(Jl,"DIV",{class:!0});var Ta=s(uo);m(PA.$$.fragment,Ta),dir=i(Ta),cue=n(Ta,"P",{});var M_t=s(cue);cir=r(M_t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),M_t.forEach(t),fir=i(Ta),En=n(Ta,"P",{});var nE=s(En);mir=r(nE,"The model class to instantiate is selected based on the "),fue=n(nE,"CODE",{});var E_t=s(fue);gir=r(E_t,"model_type"),E_t.forEach(t),hir=r(nE,` property of the config object (either
passed as an argument or loaded from `),mue=n(nE,"CODE",{});var C_t=s(mue);pir=r(C_t,"pretrained_model_name_or_path"),C_t.forEach(t),_ir=r(nE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gue=n(nE,"CODE",{});var w_t=s(gue);uir=r(w_t,"pretrained_model_name_or_path"),w_t.forEach(t),bir=r(nE,":"),nE.forEach(t),Fir=i(Ta),$A=n(Ta,"UL",{});var H$e=s($A);r0=n(H$e,"LI",{});var F9e=s(r0);hue=n(F9e,"STRONG",{});var A_t=s(hue);vir=r(A_t,"convnext"),A_t.forEach(t),Tir=r(F9e," \u2014 "),eX=n(F9e,"A",{href:!0});var y_t=s(eX);Mir=r(y_t,"TFConvNextForImageClassification"),y_t.forEach(t),Eir=r(F9e," (ConvNext model)"),F9e.forEach(t),Cir=i(H$e),t0=n(H$e,"LI",{});var v9e=s(t0);pue=n(v9e,"STRONG",{});var L_t=s(pue);wir=r(L_t,"vit"),L_t.forEach(t),Air=r(v9e," \u2014 "),oX=n(v9e,"A",{href:!0});var x_t=s(oX);yir=r(x_t,"TFViTForImageClassification"),x_t.forEach(t),Lir=r(v9e," (ViT model)"),v9e.forEach(t),H$e.forEach(t),xir=i(Ta),_ue=n(Ta,"P",{});var k_t=s(_ue);kir=r(k_t,"Examples:"),k_t.forEach(t),Sir=i(Ta),m(qA.$$.fragment,Ta),Ta.forEach(t),Jl.forEach(t),qBe=i(c),Rc=n(c,"H2",{class:!0});var U$e=s(Rc);a0=n(U$e,"A",{id:!0,class:!0,href:!0});var S_t=s(a0);uue=n(S_t,"SPAN",{});var R_t=s(uue);m(IA.$$.fragment,R_t),R_t.forEach(t),S_t.forEach(t),Rir=i(U$e),bue=n(U$e,"SPAN",{});var B_t=s(bue);Bir=r(B_t,"TFAutoModelForMaskedLM"),B_t.forEach(t),U$e.forEach(t),IBe=i(c),Cr=n(c,"DIV",{class:!0});var Kl=s(Cr);m(jA.$$.fragment,Kl),Pir=i(Kl),Bc=n(Kl,"P",{});var TJ=s(Bc);$ir=r(TJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),rX=n(TJ,"A",{href:!0});var P_t=s(rX);qir=r(P_t,"from_pretrained()"),P_t.forEach(t),Iir=r(TJ," class method or the "),tX=n(TJ,"A",{href:!0});var $_t=s(tX);jir=r($_t,"from_config()"),$_t.forEach(t),Nir=r(TJ,` class
method.`),TJ.forEach(t),Dir=i(Kl),NA=n(Kl,"P",{});var J$e=s(NA);Gir=r(J$e,"This class cannot be instantiated directly using "),Fue=n(J$e,"CODE",{});var q_t=s(Fue);Oir=r(q_t,"__init__()"),q_t.forEach(t),Vir=r(J$e," (throws an error)."),J$e.forEach(t),Xir=i(Kl),Ft=n(Kl,"DIV",{class:!0});var Zl=s(Ft);m(DA.$$.fragment,Zl),zir=i(Zl),vue=n(Zl,"P",{});var I_t=s(vue);Qir=r(I_t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),I_t.forEach(t),Wir=i(Zl),Pc=n(Zl,"P",{});var MJ=s(Pc);Hir=r(MJ,`Note:
Loading a model from its configuration file does `),Tue=n(MJ,"STRONG",{});var j_t=s(Tue);Uir=r(j_t,"not"),j_t.forEach(t),Jir=r(MJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),aX=n(MJ,"A",{href:!0});var N_t=s(aX);Yir=r(N_t,"from_pretrained()"),N_t.forEach(t),Kir=r(MJ," to load the model weights."),MJ.forEach(t),Zir=i(Zl),Mue=n(Zl,"P",{});var D_t=s(Mue);edr=r(D_t,"Examples:"),D_t.forEach(t),odr=i(Zl),m(GA.$$.fragment,Zl),Zl.forEach(t),rdr=i(Kl),bo=n(Kl,"DIV",{class:!0});var Ma=s(bo);m(OA.$$.fragment,Ma),tdr=i(Ma),Eue=n(Ma,"P",{});var G_t=s(Eue);adr=r(G_t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),G_t.forEach(t),ndr=i(Ma),Cn=n(Ma,"P",{});var sE=s(Cn);sdr=r(sE,"The model class to instantiate is selected based on the "),Cue=n(sE,"CODE",{});var O_t=s(Cue);ldr=r(O_t,"model_type"),O_t.forEach(t),idr=r(sE,` property of the config object (either
passed as an argument or loaded from `),wue=n(sE,"CODE",{});var V_t=s(wue);ddr=r(V_t,"pretrained_model_name_or_path"),V_t.forEach(t),cdr=r(sE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Aue=n(sE,"CODE",{});var X_t=s(Aue);fdr=r(X_t,"pretrained_model_name_or_path"),X_t.forEach(t),mdr=r(sE,":"),sE.forEach(t),gdr=i(Ma),J=n(Ma,"UL",{});var ee=s(J);n0=n(ee,"LI",{});var T9e=s(n0);yue=n(T9e,"STRONG",{});var z_t=s(yue);hdr=r(z_t,"albert"),z_t.forEach(t),pdr=r(T9e," \u2014 "),nX=n(T9e,"A",{href:!0});var Q_t=s(nX);_dr=r(Q_t,"TFAlbertForMaskedLM"),Q_t.forEach(t),udr=r(T9e," (ALBERT model)"),T9e.forEach(t),bdr=i(ee),s0=n(ee,"LI",{});var M9e=s(s0);Lue=n(M9e,"STRONG",{});var W_t=s(Lue);Fdr=r(W_t,"bert"),W_t.forEach(t),vdr=r(M9e," \u2014 "),sX=n(M9e,"A",{href:!0});var H_t=s(sX);Tdr=r(H_t,"TFBertForMaskedLM"),H_t.forEach(t),Mdr=r(M9e," (BERT model)"),M9e.forEach(t),Edr=i(ee),l0=n(ee,"LI",{});var E9e=s(l0);xue=n(E9e,"STRONG",{});var U_t=s(xue);Cdr=r(U_t,"camembert"),U_t.forEach(t),wdr=r(E9e," \u2014 "),lX=n(E9e,"A",{href:!0});var J_t=s(lX);Adr=r(J_t,"TFCamembertForMaskedLM"),J_t.forEach(t),ydr=r(E9e," (CamemBERT model)"),E9e.forEach(t),Ldr=i(ee),i0=n(ee,"LI",{});var C9e=s(i0);kue=n(C9e,"STRONG",{});var Y_t=s(kue);xdr=r(Y_t,"convbert"),Y_t.forEach(t),kdr=r(C9e," \u2014 "),iX=n(C9e,"A",{href:!0});var K_t=s(iX);Sdr=r(K_t,"TFConvBertForMaskedLM"),K_t.forEach(t),Rdr=r(C9e," (ConvBERT model)"),C9e.forEach(t),Bdr=i(ee),d0=n(ee,"LI",{});var w9e=s(d0);Sue=n(w9e,"STRONG",{});var Z_t=s(Sue);Pdr=r(Z_t,"deberta"),Z_t.forEach(t),$dr=r(w9e," \u2014 "),dX=n(w9e,"A",{href:!0});var eut=s(dX);qdr=r(eut,"TFDebertaForMaskedLM"),eut.forEach(t),Idr=r(w9e," (DeBERTa model)"),w9e.forEach(t),jdr=i(ee),c0=n(ee,"LI",{});var A9e=s(c0);Rue=n(A9e,"STRONG",{});var out=s(Rue);Ndr=r(out,"deberta-v2"),out.forEach(t),Ddr=r(A9e," \u2014 "),cX=n(A9e,"A",{href:!0});var rut=s(cX);Gdr=r(rut,"TFDebertaV2ForMaskedLM"),rut.forEach(t),Odr=r(A9e," (DeBERTa-v2 model)"),A9e.forEach(t),Vdr=i(ee),f0=n(ee,"LI",{});var y9e=s(f0);Bue=n(y9e,"STRONG",{});var tut=s(Bue);Xdr=r(tut,"distilbert"),tut.forEach(t),zdr=r(y9e," \u2014 "),fX=n(y9e,"A",{href:!0});var aut=s(fX);Qdr=r(aut,"TFDistilBertForMaskedLM"),aut.forEach(t),Wdr=r(y9e," (DistilBERT model)"),y9e.forEach(t),Hdr=i(ee),m0=n(ee,"LI",{});var L9e=s(m0);Pue=n(L9e,"STRONG",{});var nut=s(Pue);Udr=r(nut,"electra"),nut.forEach(t),Jdr=r(L9e," \u2014 "),mX=n(L9e,"A",{href:!0});var sut=s(mX);Ydr=r(sut,"TFElectraForMaskedLM"),sut.forEach(t),Kdr=r(L9e," (ELECTRA model)"),L9e.forEach(t),Zdr=i(ee),g0=n(ee,"LI",{});var x9e=s(g0);$ue=n(x9e,"STRONG",{});var lut=s($ue);ecr=r(lut,"flaubert"),lut.forEach(t),ocr=r(x9e," \u2014 "),gX=n(x9e,"A",{href:!0});var iut=s(gX);rcr=r(iut,"TFFlaubertWithLMHeadModel"),iut.forEach(t),tcr=r(x9e," (FlauBERT model)"),x9e.forEach(t),acr=i(ee),h0=n(ee,"LI",{});var k9e=s(h0);que=n(k9e,"STRONG",{});var dut=s(que);ncr=r(dut,"funnel"),dut.forEach(t),scr=r(k9e," \u2014 "),hX=n(k9e,"A",{href:!0});var cut=s(hX);lcr=r(cut,"TFFunnelForMaskedLM"),cut.forEach(t),icr=r(k9e," (Funnel Transformer model)"),k9e.forEach(t),dcr=i(ee),p0=n(ee,"LI",{});var S9e=s(p0);Iue=n(S9e,"STRONG",{});var fut=s(Iue);ccr=r(fut,"layoutlm"),fut.forEach(t),fcr=r(S9e," \u2014 "),pX=n(S9e,"A",{href:!0});var mut=s(pX);mcr=r(mut,"TFLayoutLMForMaskedLM"),mut.forEach(t),gcr=r(S9e," (LayoutLM model)"),S9e.forEach(t),hcr=i(ee),_0=n(ee,"LI",{});var R9e=s(_0);jue=n(R9e,"STRONG",{});var gut=s(jue);pcr=r(gut,"longformer"),gut.forEach(t),_cr=r(R9e," \u2014 "),_X=n(R9e,"A",{href:!0});var hut=s(_X);ucr=r(hut,"TFLongformerForMaskedLM"),hut.forEach(t),bcr=r(R9e," (Longformer model)"),R9e.forEach(t),Fcr=i(ee),u0=n(ee,"LI",{});var B9e=s(u0);Nue=n(B9e,"STRONG",{});var put=s(Nue);vcr=r(put,"mobilebert"),put.forEach(t),Tcr=r(B9e," \u2014 "),uX=n(B9e,"A",{href:!0});var _ut=s(uX);Mcr=r(_ut,"TFMobileBertForMaskedLM"),_ut.forEach(t),Ecr=r(B9e," (MobileBERT model)"),B9e.forEach(t),Ccr=i(ee),b0=n(ee,"LI",{});var P9e=s(b0);Due=n(P9e,"STRONG",{});var uut=s(Due);wcr=r(uut,"mpnet"),uut.forEach(t),Acr=r(P9e," \u2014 "),bX=n(P9e,"A",{href:!0});var but=s(bX);ycr=r(but,"TFMPNetForMaskedLM"),but.forEach(t),Lcr=r(P9e," (MPNet model)"),P9e.forEach(t),xcr=i(ee),F0=n(ee,"LI",{});var $9e=s(F0);Gue=n($9e,"STRONG",{});var Fut=s(Gue);kcr=r(Fut,"rembert"),Fut.forEach(t),Scr=r($9e," \u2014 "),FX=n($9e,"A",{href:!0});var vut=s(FX);Rcr=r(vut,"TFRemBertForMaskedLM"),vut.forEach(t),Bcr=r($9e," (RemBERT model)"),$9e.forEach(t),Pcr=i(ee),v0=n(ee,"LI",{});var q9e=s(v0);Oue=n(q9e,"STRONG",{});var Tut=s(Oue);$cr=r(Tut,"roberta"),Tut.forEach(t),qcr=r(q9e," \u2014 "),vX=n(q9e,"A",{href:!0});var Mut=s(vX);Icr=r(Mut,"TFRobertaForMaskedLM"),Mut.forEach(t),jcr=r(q9e," (RoBERTa model)"),q9e.forEach(t),Ncr=i(ee),T0=n(ee,"LI",{});var I9e=s(T0);Vue=n(I9e,"STRONG",{});var Eut=s(Vue);Dcr=r(Eut,"roformer"),Eut.forEach(t),Gcr=r(I9e," \u2014 "),TX=n(I9e,"A",{href:!0});var Cut=s(TX);Ocr=r(Cut,"TFRoFormerForMaskedLM"),Cut.forEach(t),Vcr=r(I9e," (RoFormer model)"),I9e.forEach(t),Xcr=i(ee),M0=n(ee,"LI",{});var j9e=s(M0);Xue=n(j9e,"STRONG",{});var wut=s(Xue);zcr=r(wut,"tapas"),wut.forEach(t),Qcr=r(j9e," \u2014 "),MX=n(j9e,"A",{href:!0});var Aut=s(MX);Wcr=r(Aut,"TFTapasForMaskedLM"),Aut.forEach(t),Hcr=r(j9e," (TAPAS model)"),j9e.forEach(t),Ucr=i(ee),E0=n(ee,"LI",{});var N9e=s(E0);zue=n(N9e,"STRONG",{});var yut=s(zue);Jcr=r(yut,"xlm"),yut.forEach(t),Ycr=r(N9e," \u2014 "),EX=n(N9e,"A",{href:!0});var Lut=s(EX);Kcr=r(Lut,"TFXLMWithLMHeadModel"),Lut.forEach(t),Zcr=r(N9e," (XLM model)"),N9e.forEach(t),efr=i(ee),C0=n(ee,"LI",{});var D9e=s(C0);Que=n(D9e,"STRONG",{});var xut=s(Que);ofr=r(xut,"xlm-roberta"),xut.forEach(t),rfr=r(D9e," \u2014 "),CX=n(D9e,"A",{href:!0});var kut=s(CX);tfr=r(kut,"TFXLMRobertaForMaskedLM"),kut.forEach(t),afr=r(D9e," (XLM-RoBERTa model)"),D9e.forEach(t),ee.forEach(t),nfr=i(Ma),Wue=n(Ma,"P",{});var Sut=s(Wue);sfr=r(Sut,"Examples:"),Sut.forEach(t),lfr=i(Ma),m(VA.$$.fragment,Ma),Ma.forEach(t),Kl.forEach(t),jBe=i(c),$c=n(c,"H2",{class:!0});var Y$e=s($c);w0=n(Y$e,"A",{id:!0,class:!0,href:!0});var Rut=s(w0);Hue=n(Rut,"SPAN",{});var But=s(Hue);m(XA.$$.fragment,But),But.forEach(t),Rut.forEach(t),ifr=i(Y$e),Uue=n(Y$e,"SPAN",{});var Put=s(Uue);dfr=r(Put,"TFAutoModelForSeq2SeqLM"),Put.forEach(t),Y$e.forEach(t),NBe=i(c),wr=n(c,"DIV",{class:!0});var ei=s(wr);m(zA.$$.fragment,ei),cfr=i(ei),qc=n(ei,"P",{});var EJ=s(qc);ffr=r(EJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),wX=n(EJ,"A",{href:!0});var $ut=s(wX);mfr=r($ut,"from_pretrained()"),$ut.forEach(t),gfr=r(EJ," class method or the "),AX=n(EJ,"A",{href:!0});var qut=s(AX);hfr=r(qut,"from_config()"),qut.forEach(t),pfr=r(EJ,` class
method.`),EJ.forEach(t),_fr=i(ei),QA=n(ei,"P",{});var K$e=s(QA);ufr=r(K$e,"This class cannot be instantiated directly using "),Jue=n(K$e,"CODE",{});var Iut=s(Jue);bfr=r(Iut,"__init__()"),Iut.forEach(t),Ffr=r(K$e," (throws an error)."),K$e.forEach(t),vfr=i(ei),vt=n(ei,"DIV",{class:!0});var oi=s(vt);m(WA.$$.fragment,oi),Tfr=i(oi),Yue=n(oi,"P",{});var jut=s(Yue);Mfr=r(jut,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),jut.forEach(t),Efr=i(oi),Ic=n(oi,"P",{});var CJ=s(Ic);Cfr=r(CJ,`Note:
Loading a model from its configuration file does `),Kue=n(CJ,"STRONG",{});var Nut=s(Kue);wfr=r(Nut,"not"),Nut.forEach(t),Afr=r(CJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),yX=n(CJ,"A",{href:!0});var Dut=s(yX);yfr=r(Dut,"from_pretrained()"),Dut.forEach(t),Lfr=r(CJ," to load the model weights."),CJ.forEach(t),xfr=i(oi),Zue=n(oi,"P",{});var Gut=s(Zue);kfr=r(Gut,"Examples:"),Gut.forEach(t),Sfr=i(oi),m(HA.$$.fragment,oi),oi.forEach(t),Rfr=i(ei),Fo=n(ei,"DIV",{class:!0});var Ea=s(Fo);m(UA.$$.fragment,Ea),Bfr=i(Ea),e1e=n(Ea,"P",{});var Out=s(e1e);Pfr=r(Out,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Out.forEach(t),$fr=i(Ea),wn=n(Ea,"P",{});var lE=s(wn);qfr=r(lE,"The model class to instantiate is selected based on the "),o1e=n(lE,"CODE",{});var Vut=s(o1e);Ifr=r(Vut,"model_type"),Vut.forEach(t),jfr=r(lE,` property of the config object (either
passed as an argument or loaded from `),r1e=n(lE,"CODE",{});var Xut=s(r1e);Nfr=r(Xut,"pretrained_model_name_or_path"),Xut.forEach(t),Dfr=r(lE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t1e=n(lE,"CODE",{});var zut=s(t1e);Gfr=r(zut,"pretrained_model_name_or_path"),zut.forEach(t),Ofr=r(lE,":"),lE.forEach(t),Vfr=i(Ea),ue=n(Ea,"UL",{});var we=s(ue);A0=n(we,"LI",{});var G9e=s(A0);a1e=n(G9e,"STRONG",{});var Qut=s(a1e);Xfr=r(Qut,"bart"),Qut.forEach(t),zfr=r(G9e," \u2014 "),LX=n(G9e,"A",{href:!0});var Wut=s(LX);Qfr=r(Wut,"TFBartForConditionalGeneration"),Wut.forEach(t),Wfr=r(G9e," (BART model)"),G9e.forEach(t),Hfr=i(we),y0=n(we,"LI",{});var O9e=s(y0);n1e=n(O9e,"STRONG",{});var Hut=s(n1e);Ufr=r(Hut,"blenderbot"),Hut.forEach(t),Jfr=r(O9e," \u2014 "),xX=n(O9e,"A",{href:!0});var Uut=s(xX);Yfr=r(Uut,"TFBlenderbotForConditionalGeneration"),Uut.forEach(t),Kfr=r(O9e," (Blenderbot model)"),O9e.forEach(t),Zfr=i(we),L0=n(we,"LI",{});var V9e=s(L0);s1e=n(V9e,"STRONG",{});var Jut=s(s1e);emr=r(Jut,"blenderbot-small"),Jut.forEach(t),omr=r(V9e," \u2014 "),kX=n(V9e,"A",{href:!0});var Yut=s(kX);rmr=r(Yut,"TFBlenderbotSmallForConditionalGeneration"),Yut.forEach(t),tmr=r(V9e," (BlenderbotSmall model)"),V9e.forEach(t),amr=i(we),x0=n(we,"LI",{});var X9e=s(x0);l1e=n(X9e,"STRONG",{});var Kut=s(l1e);nmr=r(Kut,"encoder-decoder"),Kut.forEach(t),smr=r(X9e," \u2014 "),SX=n(X9e,"A",{href:!0});var Zut=s(SX);lmr=r(Zut,"TFEncoderDecoderModel"),Zut.forEach(t),imr=r(X9e," (Encoder decoder model)"),X9e.forEach(t),dmr=i(we),k0=n(we,"LI",{});var z9e=s(k0);i1e=n(z9e,"STRONG",{});var e1t=s(i1e);cmr=r(e1t,"led"),e1t.forEach(t),fmr=r(z9e," \u2014 "),RX=n(z9e,"A",{href:!0});var o1t=s(RX);mmr=r(o1t,"TFLEDForConditionalGeneration"),o1t.forEach(t),gmr=r(z9e," (LED model)"),z9e.forEach(t),hmr=i(we),S0=n(we,"LI",{});var Q9e=s(S0);d1e=n(Q9e,"STRONG",{});var r1t=s(d1e);pmr=r(r1t,"marian"),r1t.forEach(t),_mr=r(Q9e," \u2014 "),BX=n(Q9e,"A",{href:!0});var t1t=s(BX);umr=r(t1t,"TFMarianMTModel"),t1t.forEach(t),bmr=r(Q9e," (Marian model)"),Q9e.forEach(t),Fmr=i(we),R0=n(we,"LI",{});var W9e=s(R0);c1e=n(W9e,"STRONG",{});var a1t=s(c1e);vmr=r(a1t,"mbart"),a1t.forEach(t),Tmr=r(W9e," \u2014 "),PX=n(W9e,"A",{href:!0});var n1t=s(PX);Mmr=r(n1t,"TFMBartForConditionalGeneration"),n1t.forEach(t),Emr=r(W9e," (mBART model)"),W9e.forEach(t),Cmr=i(we),B0=n(we,"LI",{});var H9e=s(B0);f1e=n(H9e,"STRONG",{});var s1t=s(f1e);wmr=r(s1t,"mt5"),s1t.forEach(t),Amr=r(H9e," \u2014 "),$X=n(H9e,"A",{href:!0});var l1t=s($X);ymr=r(l1t,"TFMT5ForConditionalGeneration"),l1t.forEach(t),Lmr=r(H9e," (mT5 model)"),H9e.forEach(t),xmr=i(we),P0=n(we,"LI",{});var U9e=s(P0);m1e=n(U9e,"STRONG",{});var i1t=s(m1e);kmr=r(i1t,"pegasus"),i1t.forEach(t),Smr=r(U9e," \u2014 "),qX=n(U9e,"A",{href:!0});var d1t=s(qX);Rmr=r(d1t,"TFPegasusForConditionalGeneration"),d1t.forEach(t),Bmr=r(U9e," (Pegasus model)"),U9e.forEach(t),Pmr=i(we),$0=n(we,"LI",{});var J9e=s($0);g1e=n(J9e,"STRONG",{});var c1t=s(g1e);$mr=r(c1t,"t5"),c1t.forEach(t),qmr=r(J9e," \u2014 "),IX=n(J9e,"A",{href:!0});var f1t=s(IX);Imr=r(f1t,"TFT5ForConditionalGeneration"),f1t.forEach(t),jmr=r(J9e," (T5 model)"),J9e.forEach(t),we.forEach(t),Nmr=i(Ea),h1e=n(Ea,"P",{});var m1t=s(h1e);Dmr=r(m1t,"Examples:"),m1t.forEach(t),Gmr=i(Ea),m(JA.$$.fragment,Ea),Ea.forEach(t),ei.forEach(t),DBe=i(c),jc=n(c,"H2",{class:!0});var Z$e=s(jc);q0=n(Z$e,"A",{id:!0,class:!0,href:!0});var g1t=s(q0);p1e=n(g1t,"SPAN",{});var h1t=s(p1e);m(YA.$$.fragment,h1t),h1t.forEach(t),g1t.forEach(t),Omr=i(Z$e),_1e=n(Z$e,"SPAN",{});var p1t=s(_1e);Vmr=r(p1t,"TFAutoModelForSequenceClassification"),p1t.forEach(t),Z$e.forEach(t),GBe=i(c),Ar=n(c,"DIV",{class:!0});var ri=s(Ar);m(KA.$$.fragment,ri),Xmr=i(ri),Nc=n(ri,"P",{});var wJ=s(Nc);zmr=r(wJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),jX=n(wJ,"A",{href:!0});var _1t=s(jX);Qmr=r(_1t,"from_pretrained()"),_1t.forEach(t),Wmr=r(wJ," class method or the "),NX=n(wJ,"A",{href:!0});var u1t=s(NX);Hmr=r(u1t,"from_config()"),u1t.forEach(t),Umr=r(wJ,` class
method.`),wJ.forEach(t),Jmr=i(ri),ZA=n(ri,"P",{});var eqe=s(ZA);Ymr=r(eqe,"This class cannot be instantiated directly using "),u1e=n(eqe,"CODE",{});var b1t=s(u1e);Kmr=r(b1t,"__init__()"),b1t.forEach(t),Zmr=r(eqe," (throws an error)."),eqe.forEach(t),egr=i(ri),Tt=n(ri,"DIV",{class:!0});var ti=s(Tt);m(ey.$$.fragment,ti),ogr=i(ti),b1e=n(ti,"P",{});var F1t=s(b1e);rgr=r(F1t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),F1t.forEach(t),tgr=i(ti),Dc=n(ti,"P",{});var AJ=s(Dc);agr=r(AJ,`Note:
Loading a model from its configuration file does `),F1e=n(AJ,"STRONG",{});var v1t=s(F1e);ngr=r(v1t,"not"),v1t.forEach(t),sgr=r(AJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),DX=n(AJ,"A",{href:!0});var T1t=s(DX);lgr=r(T1t,"from_pretrained()"),T1t.forEach(t),igr=r(AJ," to load the model weights."),AJ.forEach(t),dgr=i(ti),v1e=n(ti,"P",{});var M1t=s(v1e);cgr=r(M1t,"Examples:"),M1t.forEach(t),fgr=i(ti),m(oy.$$.fragment,ti),ti.forEach(t),mgr=i(ri),vo=n(ri,"DIV",{class:!0});var Ca=s(vo);m(ry.$$.fragment,Ca),ggr=i(Ca),T1e=n(Ca,"P",{});var E1t=s(T1e);hgr=r(E1t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),E1t.forEach(t),pgr=i(Ca),An=n(Ca,"P",{});var iE=s(An);_gr=r(iE,"The model class to instantiate is selected based on the "),M1e=n(iE,"CODE",{});var C1t=s(M1e);ugr=r(C1t,"model_type"),C1t.forEach(t),bgr=r(iE,` property of the config object (either
passed as an argument or loaded from `),E1e=n(iE,"CODE",{});var w1t=s(E1e);Fgr=r(w1t,"pretrained_model_name_or_path"),w1t.forEach(t),vgr=r(iE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C1e=n(iE,"CODE",{});var A1t=s(C1e);Tgr=r(A1t,"pretrained_model_name_or_path"),A1t.forEach(t),Mgr=r(iE,":"),iE.forEach(t),Egr=i(Ca),V=n(Ca,"UL",{});var Q=s(V);I0=n(Q,"LI",{});var Y9e=s(I0);w1e=n(Y9e,"STRONG",{});var y1t=s(w1e);Cgr=r(y1t,"albert"),y1t.forEach(t),wgr=r(Y9e," \u2014 "),GX=n(Y9e,"A",{href:!0});var L1t=s(GX);Agr=r(L1t,"TFAlbertForSequenceClassification"),L1t.forEach(t),ygr=r(Y9e," (ALBERT model)"),Y9e.forEach(t),Lgr=i(Q),j0=n(Q,"LI",{});var K9e=s(j0);A1e=n(K9e,"STRONG",{});var x1t=s(A1e);xgr=r(x1t,"bert"),x1t.forEach(t),kgr=r(K9e," \u2014 "),OX=n(K9e,"A",{href:!0});var k1t=s(OX);Sgr=r(k1t,"TFBertForSequenceClassification"),k1t.forEach(t),Rgr=r(K9e," (BERT model)"),K9e.forEach(t),Bgr=i(Q),N0=n(Q,"LI",{});var Z9e=s(N0);y1e=n(Z9e,"STRONG",{});var S1t=s(y1e);Pgr=r(S1t,"camembert"),S1t.forEach(t),$gr=r(Z9e," \u2014 "),VX=n(Z9e,"A",{href:!0});var R1t=s(VX);qgr=r(R1t,"TFCamembertForSequenceClassification"),R1t.forEach(t),Igr=r(Z9e," (CamemBERT model)"),Z9e.forEach(t),jgr=i(Q),D0=n(Q,"LI",{});var exe=s(D0);L1e=n(exe,"STRONG",{});var B1t=s(L1e);Ngr=r(B1t,"convbert"),B1t.forEach(t),Dgr=r(exe," \u2014 "),XX=n(exe,"A",{href:!0});var P1t=s(XX);Ggr=r(P1t,"TFConvBertForSequenceClassification"),P1t.forEach(t),Ogr=r(exe," (ConvBERT model)"),exe.forEach(t),Vgr=i(Q),G0=n(Q,"LI",{});var oxe=s(G0);x1e=n(oxe,"STRONG",{});var $1t=s(x1e);Xgr=r($1t,"ctrl"),$1t.forEach(t),zgr=r(oxe," \u2014 "),zX=n(oxe,"A",{href:!0});var q1t=s(zX);Qgr=r(q1t,"TFCTRLForSequenceClassification"),q1t.forEach(t),Wgr=r(oxe," (CTRL model)"),oxe.forEach(t),Hgr=i(Q),O0=n(Q,"LI",{});var rxe=s(O0);k1e=n(rxe,"STRONG",{});var I1t=s(k1e);Ugr=r(I1t,"deberta"),I1t.forEach(t),Jgr=r(rxe," \u2014 "),QX=n(rxe,"A",{href:!0});var j1t=s(QX);Ygr=r(j1t,"TFDebertaForSequenceClassification"),j1t.forEach(t),Kgr=r(rxe," (DeBERTa model)"),rxe.forEach(t),Zgr=i(Q),V0=n(Q,"LI",{});var txe=s(V0);S1e=n(txe,"STRONG",{});var N1t=s(S1e);ehr=r(N1t,"deberta-v2"),N1t.forEach(t),ohr=r(txe," \u2014 "),WX=n(txe,"A",{href:!0});var D1t=s(WX);rhr=r(D1t,"TFDebertaV2ForSequenceClassification"),D1t.forEach(t),thr=r(txe," (DeBERTa-v2 model)"),txe.forEach(t),ahr=i(Q),X0=n(Q,"LI",{});var axe=s(X0);R1e=n(axe,"STRONG",{});var G1t=s(R1e);nhr=r(G1t,"distilbert"),G1t.forEach(t),shr=r(axe," \u2014 "),HX=n(axe,"A",{href:!0});var O1t=s(HX);lhr=r(O1t,"TFDistilBertForSequenceClassification"),O1t.forEach(t),ihr=r(axe," (DistilBERT model)"),axe.forEach(t),dhr=i(Q),z0=n(Q,"LI",{});var nxe=s(z0);B1e=n(nxe,"STRONG",{});var V1t=s(B1e);chr=r(V1t,"electra"),V1t.forEach(t),fhr=r(nxe," \u2014 "),UX=n(nxe,"A",{href:!0});var X1t=s(UX);mhr=r(X1t,"TFElectraForSequenceClassification"),X1t.forEach(t),ghr=r(nxe," (ELECTRA model)"),nxe.forEach(t),hhr=i(Q),Q0=n(Q,"LI",{});var sxe=s(Q0);P1e=n(sxe,"STRONG",{});var z1t=s(P1e);phr=r(z1t,"flaubert"),z1t.forEach(t),_hr=r(sxe," \u2014 "),JX=n(sxe,"A",{href:!0});var Q1t=s(JX);uhr=r(Q1t,"TFFlaubertForSequenceClassification"),Q1t.forEach(t),bhr=r(sxe," (FlauBERT model)"),sxe.forEach(t),Fhr=i(Q),W0=n(Q,"LI",{});var lxe=s(W0);$1e=n(lxe,"STRONG",{});var W1t=s($1e);vhr=r(W1t,"funnel"),W1t.forEach(t),Thr=r(lxe," \u2014 "),YX=n(lxe,"A",{href:!0});var H1t=s(YX);Mhr=r(H1t,"TFFunnelForSequenceClassification"),H1t.forEach(t),Ehr=r(lxe," (Funnel Transformer model)"),lxe.forEach(t),Chr=i(Q),H0=n(Q,"LI",{});var ixe=s(H0);q1e=n(ixe,"STRONG",{});var U1t=s(q1e);whr=r(U1t,"gpt2"),U1t.forEach(t),Ahr=r(ixe," \u2014 "),KX=n(ixe,"A",{href:!0});var J1t=s(KX);yhr=r(J1t,"TFGPT2ForSequenceClassification"),J1t.forEach(t),Lhr=r(ixe," (OpenAI GPT-2 model)"),ixe.forEach(t),xhr=i(Q),U0=n(Q,"LI",{});var dxe=s(U0);I1e=n(dxe,"STRONG",{});var Y1t=s(I1e);khr=r(Y1t,"gptj"),Y1t.forEach(t),Shr=r(dxe," \u2014 "),ZX=n(dxe,"A",{href:!0});var K1t=s(ZX);Rhr=r(K1t,"TFGPTJForSequenceClassification"),K1t.forEach(t),Bhr=r(dxe," (GPT-J model)"),dxe.forEach(t),Phr=i(Q),J0=n(Q,"LI",{});var cxe=s(J0);j1e=n(cxe,"STRONG",{});var Z1t=s(j1e);$hr=r(Z1t,"layoutlm"),Z1t.forEach(t),qhr=r(cxe," \u2014 "),ez=n(cxe,"A",{href:!0});var ebt=s(ez);Ihr=r(ebt,"TFLayoutLMForSequenceClassification"),ebt.forEach(t),jhr=r(cxe," (LayoutLM model)"),cxe.forEach(t),Nhr=i(Q),Y0=n(Q,"LI",{});var fxe=s(Y0);N1e=n(fxe,"STRONG",{});var obt=s(N1e);Dhr=r(obt,"longformer"),obt.forEach(t),Ghr=r(fxe," \u2014 "),oz=n(fxe,"A",{href:!0});var rbt=s(oz);Ohr=r(rbt,"TFLongformerForSequenceClassification"),rbt.forEach(t),Vhr=r(fxe," (Longformer model)"),fxe.forEach(t),Xhr=i(Q),K0=n(Q,"LI",{});var mxe=s(K0);D1e=n(mxe,"STRONG",{});var tbt=s(D1e);zhr=r(tbt,"mobilebert"),tbt.forEach(t),Qhr=r(mxe," \u2014 "),rz=n(mxe,"A",{href:!0});var abt=s(rz);Whr=r(abt,"TFMobileBertForSequenceClassification"),abt.forEach(t),Hhr=r(mxe," (MobileBERT model)"),mxe.forEach(t),Uhr=i(Q),Z0=n(Q,"LI",{});var gxe=s(Z0);G1e=n(gxe,"STRONG",{});var nbt=s(G1e);Jhr=r(nbt,"mpnet"),nbt.forEach(t),Yhr=r(gxe," \u2014 "),tz=n(gxe,"A",{href:!0});var sbt=s(tz);Khr=r(sbt,"TFMPNetForSequenceClassification"),sbt.forEach(t),Zhr=r(gxe," (MPNet model)"),gxe.forEach(t),epr=i(Q),eT=n(Q,"LI",{});var hxe=s(eT);O1e=n(hxe,"STRONG",{});var lbt=s(O1e);opr=r(lbt,"openai-gpt"),lbt.forEach(t),rpr=r(hxe," \u2014 "),az=n(hxe,"A",{href:!0});var ibt=s(az);tpr=r(ibt,"TFOpenAIGPTForSequenceClassification"),ibt.forEach(t),apr=r(hxe," (OpenAI GPT model)"),hxe.forEach(t),npr=i(Q),oT=n(Q,"LI",{});var pxe=s(oT);V1e=n(pxe,"STRONG",{});var dbt=s(V1e);spr=r(dbt,"rembert"),dbt.forEach(t),lpr=r(pxe," \u2014 "),nz=n(pxe,"A",{href:!0});var cbt=s(nz);ipr=r(cbt,"TFRemBertForSequenceClassification"),cbt.forEach(t),dpr=r(pxe," (RemBERT model)"),pxe.forEach(t),cpr=i(Q),rT=n(Q,"LI",{});var _xe=s(rT);X1e=n(_xe,"STRONG",{});var fbt=s(X1e);fpr=r(fbt,"roberta"),fbt.forEach(t),mpr=r(_xe," \u2014 "),sz=n(_xe,"A",{href:!0});var mbt=s(sz);gpr=r(mbt,"TFRobertaForSequenceClassification"),mbt.forEach(t),hpr=r(_xe," (RoBERTa model)"),_xe.forEach(t),ppr=i(Q),tT=n(Q,"LI",{});var uxe=s(tT);z1e=n(uxe,"STRONG",{});var gbt=s(z1e);_pr=r(gbt,"roformer"),gbt.forEach(t),upr=r(uxe," \u2014 "),lz=n(uxe,"A",{href:!0});var hbt=s(lz);bpr=r(hbt,"TFRoFormerForSequenceClassification"),hbt.forEach(t),Fpr=r(uxe," (RoFormer model)"),uxe.forEach(t),vpr=i(Q),aT=n(Q,"LI",{});var bxe=s(aT);Q1e=n(bxe,"STRONG",{});var pbt=s(Q1e);Tpr=r(pbt,"tapas"),pbt.forEach(t),Mpr=r(bxe," \u2014 "),iz=n(bxe,"A",{href:!0});var _bt=s(iz);Epr=r(_bt,"TFTapasForSequenceClassification"),_bt.forEach(t),Cpr=r(bxe," (TAPAS model)"),bxe.forEach(t),wpr=i(Q),nT=n(Q,"LI",{});var Fxe=s(nT);W1e=n(Fxe,"STRONG",{});var ubt=s(W1e);Apr=r(ubt,"transfo-xl"),ubt.forEach(t),ypr=r(Fxe," \u2014 "),dz=n(Fxe,"A",{href:!0});var bbt=s(dz);Lpr=r(bbt,"TFTransfoXLForSequenceClassification"),bbt.forEach(t),xpr=r(Fxe," (Transformer-XL model)"),Fxe.forEach(t),kpr=i(Q),sT=n(Q,"LI",{});var vxe=s(sT);H1e=n(vxe,"STRONG",{});var Fbt=s(H1e);Spr=r(Fbt,"xlm"),Fbt.forEach(t),Rpr=r(vxe," \u2014 "),cz=n(vxe,"A",{href:!0});var vbt=s(cz);Bpr=r(vbt,"TFXLMForSequenceClassification"),vbt.forEach(t),Ppr=r(vxe," (XLM model)"),vxe.forEach(t),$pr=i(Q),lT=n(Q,"LI",{});var Txe=s(lT);U1e=n(Txe,"STRONG",{});var Tbt=s(U1e);qpr=r(Tbt,"xlm-roberta"),Tbt.forEach(t),Ipr=r(Txe," \u2014 "),fz=n(Txe,"A",{href:!0});var Mbt=s(fz);jpr=r(Mbt,"TFXLMRobertaForSequenceClassification"),Mbt.forEach(t),Npr=r(Txe," (XLM-RoBERTa model)"),Txe.forEach(t),Dpr=i(Q),iT=n(Q,"LI",{});var Mxe=s(iT);J1e=n(Mxe,"STRONG",{});var Ebt=s(J1e);Gpr=r(Ebt,"xlnet"),Ebt.forEach(t),Opr=r(Mxe," \u2014 "),mz=n(Mxe,"A",{href:!0});var Cbt=s(mz);Vpr=r(Cbt,"TFXLNetForSequenceClassification"),Cbt.forEach(t),Xpr=r(Mxe," (XLNet model)"),Mxe.forEach(t),Q.forEach(t),zpr=i(Ca),Y1e=n(Ca,"P",{});var wbt=s(Y1e);Qpr=r(wbt,"Examples:"),wbt.forEach(t),Wpr=i(Ca),m(ty.$$.fragment,Ca),Ca.forEach(t),ri.forEach(t),OBe=i(c),Gc=n(c,"H2",{class:!0});var oqe=s(Gc);dT=n(oqe,"A",{id:!0,class:!0,href:!0});var Abt=s(dT);K1e=n(Abt,"SPAN",{});var ybt=s(K1e);m(ay.$$.fragment,ybt),ybt.forEach(t),Abt.forEach(t),Hpr=i(oqe),Z1e=n(oqe,"SPAN",{});var Lbt=s(Z1e);Upr=r(Lbt,"TFAutoModelForMultipleChoice"),Lbt.forEach(t),oqe.forEach(t),VBe=i(c),yr=n(c,"DIV",{class:!0});var ai=s(yr);m(ny.$$.fragment,ai),Jpr=i(ai),Oc=n(ai,"P",{});var yJ=s(Oc);Ypr=r(yJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),gz=n(yJ,"A",{href:!0});var xbt=s(gz);Kpr=r(xbt,"from_pretrained()"),xbt.forEach(t),Zpr=r(yJ," class method or the "),hz=n(yJ,"A",{href:!0});var kbt=s(hz);e_r=r(kbt,"from_config()"),kbt.forEach(t),o_r=r(yJ,` class
method.`),yJ.forEach(t),r_r=i(ai),sy=n(ai,"P",{});var rqe=s(sy);t_r=r(rqe,"This class cannot be instantiated directly using "),ebe=n(rqe,"CODE",{});var Sbt=s(ebe);a_r=r(Sbt,"__init__()"),Sbt.forEach(t),n_r=r(rqe," (throws an error)."),rqe.forEach(t),s_r=i(ai),Mt=n(ai,"DIV",{class:!0});var ni=s(Mt);m(ly.$$.fragment,ni),l_r=i(ni),obe=n(ni,"P",{});var Rbt=s(obe);i_r=r(Rbt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Rbt.forEach(t),d_r=i(ni),Vc=n(ni,"P",{});var LJ=s(Vc);c_r=r(LJ,`Note:
Loading a model from its configuration file does `),rbe=n(LJ,"STRONG",{});var Bbt=s(rbe);f_r=r(Bbt,"not"),Bbt.forEach(t),m_r=r(LJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),pz=n(LJ,"A",{href:!0});var Pbt=s(pz);g_r=r(Pbt,"from_pretrained()"),Pbt.forEach(t),h_r=r(LJ," to load the model weights."),LJ.forEach(t),p_r=i(ni),tbe=n(ni,"P",{});var $bt=s(tbe);__r=r($bt,"Examples:"),$bt.forEach(t),u_r=i(ni),m(iy.$$.fragment,ni),ni.forEach(t),b_r=i(ai),To=n(ai,"DIV",{class:!0});var wa=s(To);m(dy.$$.fragment,wa),F_r=i(wa),abe=n(wa,"P",{});var qbt=s(abe);v_r=r(qbt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),qbt.forEach(t),T_r=i(wa),yn=n(wa,"P",{});var dE=s(yn);M_r=r(dE,"The model class to instantiate is selected based on the "),nbe=n(dE,"CODE",{});var Ibt=s(nbe);E_r=r(Ibt,"model_type"),Ibt.forEach(t),C_r=r(dE,` property of the config object (either
passed as an argument or loaded from `),sbe=n(dE,"CODE",{});var jbt=s(sbe);w_r=r(jbt,"pretrained_model_name_or_path"),jbt.forEach(t),A_r=r(dE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lbe=n(dE,"CODE",{});var Nbt=s(lbe);y_r=r(Nbt,"pretrained_model_name_or_path"),Nbt.forEach(t),L_r=r(dE,":"),dE.forEach(t),x_r=i(wa),ae=n(wa,"UL",{});var le=s(ae);cT=n(le,"LI",{});var Exe=s(cT);ibe=n(Exe,"STRONG",{});var Dbt=s(ibe);k_r=r(Dbt,"albert"),Dbt.forEach(t),S_r=r(Exe," \u2014 "),_z=n(Exe,"A",{href:!0});var Gbt=s(_z);R_r=r(Gbt,"TFAlbertForMultipleChoice"),Gbt.forEach(t),B_r=r(Exe," (ALBERT model)"),Exe.forEach(t),P_r=i(le),fT=n(le,"LI",{});var Cxe=s(fT);dbe=n(Cxe,"STRONG",{});var Obt=s(dbe);$_r=r(Obt,"bert"),Obt.forEach(t),q_r=r(Cxe," \u2014 "),uz=n(Cxe,"A",{href:!0});var Vbt=s(uz);I_r=r(Vbt,"TFBertForMultipleChoice"),Vbt.forEach(t),j_r=r(Cxe," (BERT model)"),Cxe.forEach(t),N_r=i(le),mT=n(le,"LI",{});var wxe=s(mT);cbe=n(wxe,"STRONG",{});var Xbt=s(cbe);D_r=r(Xbt,"camembert"),Xbt.forEach(t),G_r=r(wxe," \u2014 "),bz=n(wxe,"A",{href:!0});var zbt=s(bz);O_r=r(zbt,"TFCamembertForMultipleChoice"),zbt.forEach(t),V_r=r(wxe," (CamemBERT model)"),wxe.forEach(t),X_r=i(le),gT=n(le,"LI",{});var Axe=s(gT);fbe=n(Axe,"STRONG",{});var Qbt=s(fbe);z_r=r(Qbt,"convbert"),Qbt.forEach(t),Q_r=r(Axe," \u2014 "),Fz=n(Axe,"A",{href:!0});var Wbt=s(Fz);W_r=r(Wbt,"TFConvBertForMultipleChoice"),Wbt.forEach(t),H_r=r(Axe," (ConvBERT model)"),Axe.forEach(t),U_r=i(le),hT=n(le,"LI",{});var yxe=s(hT);mbe=n(yxe,"STRONG",{});var Hbt=s(mbe);J_r=r(Hbt,"distilbert"),Hbt.forEach(t),Y_r=r(yxe," \u2014 "),vz=n(yxe,"A",{href:!0});var Ubt=s(vz);K_r=r(Ubt,"TFDistilBertForMultipleChoice"),Ubt.forEach(t),Z_r=r(yxe," (DistilBERT model)"),yxe.forEach(t),eur=i(le),pT=n(le,"LI",{});var Lxe=s(pT);gbe=n(Lxe,"STRONG",{});var Jbt=s(gbe);our=r(Jbt,"electra"),Jbt.forEach(t),rur=r(Lxe," \u2014 "),Tz=n(Lxe,"A",{href:!0});var Ybt=s(Tz);tur=r(Ybt,"TFElectraForMultipleChoice"),Ybt.forEach(t),aur=r(Lxe," (ELECTRA model)"),Lxe.forEach(t),nur=i(le),_T=n(le,"LI",{});var xxe=s(_T);hbe=n(xxe,"STRONG",{});var Kbt=s(hbe);sur=r(Kbt,"flaubert"),Kbt.forEach(t),lur=r(xxe," \u2014 "),Mz=n(xxe,"A",{href:!0});var Zbt=s(Mz);iur=r(Zbt,"TFFlaubertForMultipleChoice"),Zbt.forEach(t),dur=r(xxe," (FlauBERT model)"),xxe.forEach(t),cur=i(le),uT=n(le,"LI",{});var kxe=s(uT);pbe=n(kxe,"STRONG",{});var e5t=s(pbe);fur=r(e5t,"funnel"),e5t.forEach(t),mur=r(kxe," \u2014 "),Ez=n(kxe,"A",{href:!0});var o5t=s(Ez);gur=r(o5t,"TFFunnelForMultipleChoice"),o5t.forEach(t),hur=r(kxe," (Funnel Transformer model)"),kxe.forEach(t),pur=i(le),bT=n(le,"LI",{});var Sxe=s(bT);_be=n(Sxe,"STRONG",{});var r5t=s(_be);_ur=r(r5t,"longformer"),r5t.forEach(t),uur=r(Sxe," \u2014 "),Cz=n(Sxe,"A",{href:!0});var t5t=s(Cz);bur=r(t5t,"TFLongformerForMultipleChoice"),t5t.forEach(t),Fur=r(Sxe," (Longformer model)"),Sxe.forEach(t),vur=i(le),FT=n(le,"LI",{});var Rxe=s(FT);ube=n(Rxe,"STRONG",{});var a5t=s(ube);Tur=r(a5t,"mobilebert"),a5t.forEach(t),Mur=r(Rxe," \u2014 "),wz=n(Rxe,"A",{href:!0});var n5t=s(wz);Eur=r(n5t,"TFMobileBertForMultipleChoice"),n5t.forEach(t),Cur=r(Rxe," (MobileBERT model)"),Rxe.forEach(t),wur=i(le),vT=n(le,"LI",{});var Bxe=s(vT);bbe=n(Bxe,"STRONG",{});var s5t=s(bbe);Aur=r(s5t,"mpnet"),s5t.forEach(t),yur=r(Bxe," \u2014 "),Az=n(Bxe,"A",{href:!0});var l5t=s(Az);Lur=r(l5t,"TFMPNetForMultipleChoice"),l5t.forEach(t),xur=r(Bxe," (MPNet model)"),Bxe.forEach(t),kur=i(le),TT=n(le,"LI",{});var Pxe=s(TT);Fbe=n(Pxe,"STRONG",{});var i5t=s(Fbe);Sur=r(i5t,"rembert"),i5t.forEach(t),Rur=r(Pxe," \u2014 "),yz=n(Pxe,"A",{href:!0});var d5t=s(yz);Bur=r(d5t,"TFRemBertForMultipleChoice"),d5t.forEach(t),Pur=r(Pxe," (RemBERT model)"),Pxe.forEach(t),$ur=i(le),MT=n(le,"LI",{});var $xe=s(MT);vbe=n($xe,"STRONG",{});var c5t=s(vbe);qur=r(c5t,"roberta"),c5t.forEach(t),Iur=r($xe," \u2014 "),Lz=n($xe,"A",{href:!0});var f5t=s(Lz);jur=r(f5t,"TFRobertaForMultipleChoice"),f5t.forEach(t),Nur=r($xe," (RoBERTa model)"),$xe.forEach(t),Dur=i(le),ET=n(le,"LI",{});var qxe=s(ET);Tbe=n(qxe,"STRONG",{});var m5t=s(Tbe);Gur=r(m5t,"roformer"),m5t.forEach(t),Our=r(qxe," \u2014 "),xz=n(qxe,"A",{href:!0});var g5t=s(xz);Vur=r(g5t,"TFRoFormerForMultipleChoice"),g5t.forEach(t),Xur=r(qxe," (RoFormer model)"),qxe.forEach(t),zur=i(le),CT=n(le,"LI",{});var Ixe=s(CT);Mbe=n(Ixe,"STRONG",{});var h5t=s(Mbe);Qur=r(h5t,"xlm"),h5t.forEach(t),Wur=r(Ixe," \u2014 "),kz=n(Ixe,"A",{href:!0});var p5t=s(kz);Hur=r(p5t,"TFXLMForMultipleChoice"),p5t.forEach(t),Uur=r(Ixe," (XLM model)"),Ixe.forEach(t),Jur=i(le),wT=n(le,"LI",{});var jxe=s(wT);Ebe=n(jxe,"STRONG",{});var _5t=s(Ebe);Yur=r(_5t,"xlm-roberta"),_5t.forEach(t),Kur=r(jxe," \u2014 "),Sz=n(jxe,"A",{href:!0});var u5t=s(Sz);Zur=r(u5t,"TFXLMRobertaForMultipleChoice"),u5t.forEach(t),e1r=r(jxe," (XLM-RoBERTa model)"),jxe.forEach(t),o1r=i(le),AT=n(le,"LI",{});var Nxe=s(AT);Cbe=n(Nxe,"STRONG",{});var b5t=s(Cbe);r1r=r(b5t,"xlnet"),b5t.forEach(t),t1r=r(Nxe," \u2014 "),Rz=n(Nxe,"A",{href:!0});var F5t=s(Rz);a1r=r(F5t,"TFXLNetForMultipleChoice"),F5t.forEach(t),n1r=r(Nxe," (XLNet model)"),Nxe.forEach(t),le.forEach(t),s1r=i(wa),wbe=n(wa,"P",{});var v5t=s(wbe);l1r=r(v5t,"Examples:"),v5t.forEach(t),i1r=i(wa),m(cy.$$.fragment,wa),wa.forEach(t),ai.forEach(t),XBe=i(c),Xc=n(c,"H2",{class:!0});var tqe=s(Xc);yT=n(tqe,"A",{id:!0,class:!0,href:!0});var T5t=s(yT);Abe=n(T5t,"SPAN",{});var M5t=s(Abe);m(fy.$$.fragment,M5t),M5t.forEach(t),T5t.forEach(t),d1r=i(tqe),ybe=n(tqe,"SPAN",{});var E5t=s(ybe);c1r=r(E5t,"TFAutoModelForTableQuestionAnswering"),E5t.forEach(t),tqe.forEach(t),zBe=i(c),Lr=n(c,"DIV",{class:!0});var si=s(Lr);m(my.$$.fragment,si),f1r=i(si),zc=n(si,"P",{});var xJ=s(zc);m1r=r(xJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Bz=n(xJ,"A",{href:!0});var C5t=s(Bz);g1r=r(C5t,"from_pretrained()"),C5t.forEach(t),h1r=r(xJ," class method or the "),Pz=n(xJ,"A",{href:!0});var w5t=s(Pz);p1r=r(w5t,"from_config()"),w5t.forEach(t),_1r=r(xJ,` class
method.`),xJ.forEach(t),u1r=i(si),gy=n(si,"P",{});var aqe=s(gy);b1r=r(aqe,"This class cannot be instantiated directly using "),Lbe=n(aqe,"CODE",{});var A5t=s(Lbe);F1r=r(A5t,"__init__()"),A5t.forEach(t),v1r=r(aqe," (throws an error)."),aqe.forEach(t),T1r=i(si),Et=n(si,"DIV",{class:!0});var li=s(Et);m(hy.$$.fragment,li),M1r=i(li),xbe=n(li,"P",{});var y5t=s(xbe);E1r=r(y5t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),y5t.forEach(t),C1r=i(li),Qc=n(li,"P",{});var kJ=s(Qc);w1r=r(kJ,`Note:
Loading a model from its configuration file does `),kbe=n(kJ,"STRONG",{});var L5t=s(kbe);A1r=r(L5t,"not"),L5t.forEach(t),y1r=r(kJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),$z=n(kJ,"A",{href:!0});var x5t=s($z);L1r=r(x5t,"from_pretrained()"),x5t.forEach(t),x1r=r(kJ," to load the model weights."),kJ.forEach(t),k1r=i(li),Sbe=n(li,"P",{});var k5t=s(Sbe);S1r=r(k5t,"Examples:"),k5t.forEach(t),R1r=i(li),m(py.$$.fragment,li),li.forEach(t),B1r=i(si),Mo=n(si,"DIV",{class:!0});var Aa=s(Mo);m(_y.$$.fragment,Aa),P1r=i(Aa),Rbe=n(Aa,"P",{});var S5t=s(Rbe);$1r=r(S5t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),S5t.forEach(t),q1r=i(Aa),Ln=n(Aa,"P",{});var cE=s(Ln);I1r=r(cE,"The model class to instantiate is selected based on the "),Bbe=n(cE,"CODE",{});var R5t=s(Bbe);j1r=r(R5t,"model_type"),R5t.forEach(t),N1r=r(cE,` property of the config object (either
passed as an argument or loaded from `),Pbe=n(cE,"CODE",{});var B5t=s(Pbe);D1r=r(B5t,"pretrained_model_name_or_path"),B5t.forEach(t),G1r=r(cE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$be=n(cE,"CODE",{});var P5t=s($be);O1r=r(P5t,"pretrained_model_name_or_path"),P5t.forEach(t),V1r=r(cE,":"),cE.forEach(t),X1r=i(Aa),qbe=n(Aa,"UL",{});var $5t=s(qbe);LT=n($5t,"LI",{});var Dxe=s(LT);Ibe=n(Dxe,"STRONG",{});var q5t=s(Ibe);z1r=r(q5t,"tapas"),q5t.forEach(t),Q1r=r(Dxe," \u2014 "),qz=n(Dxe,"A",{href:!0});var I5t=s(qz);W1r=r(I5t,"TFTapasForQuestionAnswering"),I5t.forEach(t),H1r=r(Dxe," (TAPAS model)"),Dxe.forEach(t),$5t.forEach(t),U1r=i(Aa),jbe=n(Aa,"P",{});var j5t=s(jbe);J1r=r(j5t,"Examples:"),j5t.forEach(t),Y1r=i(Aa),m(uy.$$.fragment,Aa),Aa.forEach(t),si.forEach(t),QBe=i(c),Wc=n(c,"H2",{class:!0});var nqe=s(Wc);xT=n(nqe,"A",{id:!0,class:!0,href:!0});var N5t=s(xT);Nbe=n(N5t,"SPAN",{});var D5t=s(Nbe);m(by.$$.fragment,D5t),D5t.forEach(t),N5t.forEach(t),K1r=i(nqe),Dbe=n(nqe,"SPAN",{});var G5t=s(Dbe);Z1r=r(G5t,"TFAutoModelForTokenClassification"),G5t.forEach(t),nqe.forEach(t),WBe=i(c),xr=n(c,"DIV",{class:!0});var ii=s(xr);m(Fy.$$.fragment,ii),ebr=i(ii),Hc=n(ii,"P",{});var SJ=s(Hc);obr=r(SJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Iz=n(SJ,"A",{href:!0});var O5t=s(Iz);rbr=r(O5t,"from_pretrained()"),O5t.forEach(t),tbr=r(SJ," class method or the "),jz=n(SJ,"A",{href:!0});var V5t=s(jz);abr=r(V5t,"from_config()"),V5t.forEach(t),nbr=r(SJ,` class
method.`),SJ.forEach(t),sbr=i(ii),vy=n(ii,"P",{});var sqe=s(vy);lbr=r(sqe,"This class cannot be instantiated directly using "),Gbe=n(sqe,"CODE",{});var X5t=s(Gbe);ibr=r(X5t,"__init__()"),X5t.forEach(t),dbr=r(sqe," (throws an error)."),sqe.forEach(t),cbr=i(ii),Ct=n(ii,"DIV",{class:!0});var di=s(Ct);m(Ty.$$.fragment,di),fbr=i(di),Obe=n(di,"P",{});var z5t=s(Obe);mbr=r(z5t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),z5t.forEach(t),gbr=i(di),Uc=n(di,"P",{});var RJ=s(Uc);hbr=r(RJ,`Note:
Loading a model from its configuration file does `),Vbe=n(RJ,"STRONG",{});var Q5t=s(Vbe);pbr=r(Q5t,"not"),Q5t.forEach(t),_br=r(RJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nz=n(RJ,"A",{href:!0});var W5t=s(Nz);ubr=r(W5t,"from_pretrained()"),W5t.forEach(t),bbr=r(RJ," to load the model weights."),RJ.forEach(t),Fbr=i(di),Xbe=n(di,"P",{});var H5t=s(Xbe);vbr=r(H5t,"Examples:"),H5t.forEach(t),Tbr=i(di),m(My.$$.fragment,di),di.forEach(t),Mbr=i(ii),Eo=n(ii,"DIV",{class:!0});var ya=s(Eo);m(Ey.$$.fragment,ya),Ebr=i(ya),zbe=n(ya,"P",{});var U5t=s(zbe);Cbr=r(U5t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),U5t.forEach(t),wbr=i(ya),xn=n(ya,"P",{});var fE=s(xn);Abr=r(fE,"The model class to instantiate is selected based on the "),Qbe=n(fE,"CODE",{});var J5t=s(Qbe);ybr=r(J5t,"model_type"),J5t.forEach(t),Lbr=r(fE,` property of the config object (either
passed as an argument or loaded from `),Wbe=n(fE,"CODE",{});var Y5t=s(Wbe);xbr=r(Y5t,"pretrained_model_name_or_path"),Y5t.forEach(t),kbr=r(fE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hbe=n(fE,"CODE",{});var K5t=s(Hbe);Sbr=r(K5t,"pretrained_model_name_or_path"),K5t.forEach(t),Rbr=r(fE,":"),fE.forEach(t),Bbr=i(ya),Y=n(ya,"UL",{});var oe=s(Y);kT=n(oe,"LI",{});var Gxe=s(kT);Ube=n(Gxe,"STRONG",{});var Z5t=s(Ube);Pbr=r(Z5t,"albert"),Z5t.forEach(t),$br=r(Gxe," \u2014 "),Dz=n(Gxe,"A",{href:!0});var e2t=s(Dz);qbr=r(e2t,"TFAlbertForTokenClassification"),e2t.forEach(t),Ibr=r(Gxe," (ALBERT model)"),Gxe.forEach(t),jbr=i(oe),ST=n(oe,"LI",{});var Oxe=s(ST);Jbe=n(Oxe,"STRONG",{});var o2t=s(Jbe);Nbr=r(o2t,"bert"),o2t.forEach(t),Dbr=r(Oxe," \u2014 "),Gz=n(Oxe,"A",{href:!0});var r2t=s(Gz);Gbr=r(r2t,"TFBertForTokenClassification"),r2t.forEach(t),Obr=r(Oxe," (BERT model)"),Oxe.forEach(t),Vbr=i(oe),RT=n(oe,"LI",{});var Vxe=s(RT);Ybe=n(Vxe,"STRONG",{});var t2t=s(Ybe);Xbr=r(t2t,"camembert"),t2t.forEach(t),zbr=r(Vxe," \u2014 "),Oz=n(Vxe,"A",{href:!0});var a2t=s(Oz);Qbr=r(a2t,"TFCamembertForTokenClassification"),a2t.forEach(t),Wbr=r(Vxe," (CamemBERT model)"),Vxe.forEach(t),Hbr=i(oe),BT=n(oe,"LI",{});var Xxe=s(BT);Kbe=n(Xxe,"STRONG",{});var n2t=s(Kbe);Ubr=r(n2t,"convbert"),n2t.forEach(t),Jbr=r(Xxe," \u2014 "),Vz=n(Xxe,"A",{href:!0});var s2t=s(Vz);Ybr=r(s2t,"TFConvBertForTokenClassification"),s2t.forEach(t),Kbr=r(Xxe," (ConvBERT model)"),Xxe.forEach(t),Zbr=i(oe),PT=n(oe,"LI",{});var zxe=s(PT);Zbe=n(zxe,"STRONG",{});var l2t=s(Zbe);e5r=r(l2t,"deberta"),l2t.forEach(t),o5r=r(zxe," \u2014 "),Xz=n(zxe,"A",{href:!0});var i2t=s(Xz);r5r=r(i2t,"TFDebertaForTokenClassification"),i2t.forEach(t),t5r=r(zxe," (DeBERTa model)"),zxe.forEach(t),a5r=i(oe),$T=n(oe,"LI",{});var Qxe=s($T);e5e=n(Qxe,"STRONG",{});var d2t=s(e5e);n5r=r(d2t,"deberta-v2"),d2t.forEach(t),s5r=r(Qxe," \u2014 "),zz=n(Qxe,"A",{href:!0});var c2t=s(zz);l5r=r(c2t,"TFDebertaV2ForTokenClassification"),c2t.forEach(t),i5r=r(Qxe," (DeBERTa-v2 model)"),Qxe.forEach(t),d5r=i(oe),qT=n(oe,"LI",{});var Wxe=s(qT);o5e=n(Wxe,"STRONG",{});var f2t=s(o5e);c5r=r(f2t,"distilbert"),f2t.forEach(t),f5r=r(Wxe," \u2014 "),Qz=n(Wxe,"A",{href:!0});var m2t=s(Qz);m5r=r(m2t,"TFDistilBertForTokenClassification"),m2t.forEach(t),g5r=r(Wxe," (DistilBERT model)"),Wxe.forEach(t),h5r=i(oe),IT=n(oe,"LI",{});var Hxe=s(IT);r5e=n(Hxe,"STRONG",{});var g2t=s(r5e);p5r=r(g2t,"electra"),g2t.forEach(t),_5r=r(Hxe," \u2014 "),Wz=n(Hxe,"A",{href:!0});var h2t=s(Wz);u5r=r(h2t,"TFElectraForTokenClassification"),h2t.forEach(t),b5r=r(Hxe," (ELECTRA model)"),Hxe.forEach(t),F5r=i(oe),jT=n(oe,"LI",{});var Uxe=s(jT);t5e=n(Uxe,"STRONG",{});var p2t=s(t5e);v5r=r(p2t,"flaubert"),p2t.forEach(t),T5r=r(Uxe," \u2014 "),Hz=n(Uxe,"A",{href:!0});var _2t=s(Hz);M5r=r(_2t,"TFFlaubertForTokenClassification"),_2t.forEach(t),E5r=r(Uxe," (FlauBERT model)"),Uxe.forEach(t),C5r=i(oe),NT=n(oe,"LI",{});var Jxe=s(NT);a5e=n(Jxe,"STRONG",{});var u2t=s(a5e);w5r=r(u2t,"funnel"),u2t.forEach(t),A5r=r(Jxe," \u2014 "),Uz=n(Jxe,"A",{href:!0});var b2t=s(Uz);y5r=r(b2t,"TFFunnelForTokenClassification"),b2t.forEach(t),L5r=r(Jxe," (Funnel Transformer model)"),Jxe.forEach(t),x5r=i(oe),DT=n(oe,"LI",{});var Yxe=s(DT);n5e=n(Yxe,"STRONG",{});var F2t=s(n5e);k5r=r(F2t,"layoutlm"),F2t.forEach(t),S5r=r(Yxe," \u2014 "),Jz=n(Yxe,"A",{href:!0});var v2t=s(Jz);R5r=r(v2t,"TFLayoutLMForTokenClassification"),v2t.forEach(t),B5r=r(Yxe," (LayoutLM model)"),Yxe.forEach(t),P5r=i(oe),GT=n(oe,"LI",{});var Kxe=s(GT);s5e=n(Kxe,"STRONG",{});var T2t=s(s5e);$5r=r(T2t,"longformer"),T2t.forEach(t),q5r=r(Kxe," \u2014 "),Yz=n(Kxe,"A",{href:!0});var M2t=s(Yz);I5r=r(M2t,"TFLongformerForTokenClassification"),M2t.forEach(t),j5r=r(Kxe," (Longformer model)"),Kxe.forEach(t),N5r=i(oe),OT=n(oe,"LI",{});var Zxe=s(OT);l5e=n(Zxe,"STRONG",{});var E2t=s(l5e);D5r=r(E2t,"mobilebert"),E2t.forEach(t),G5r=r(Zxe," \u2014 "),Kz=n(Zxe,"A",{href:!0});var C2t=s(Kz);O5r=r(C2t,"TFMobileBertForTokenClassification"),C2t.forEach(t),V5r=r(Zxe," (MobileBERT model)"),Zxe.forEach(t),X5r=i(oe),VT=n(oe,"LI",{});var eke=s(VT);i5e=n(eke,"STRONG",{});var w2t=s(i5e);z5r=r(w2t,"mpnet"),w2t.forEach(t),Q5r=r(eke," \u2014 "),Zz=n(eke,"A",{href:!0});var A2t=s(Zz);W5r=r(A2t,"TFMPNetForTokenClassification"),A2t.forEach(t),H5r=r(eke," (MPNet model)"),eke.forEach(t),U5r=i(oe),XT=n(oe,"LI",{});var oke=s(XT);d5e=n(oke,"STRONG",{});var y2t=s(d5e);J5r=r(y2t,"rembert"),y2t.forEach(t),Y5r=r(oke," \u2014 "),eQ=n(oke,"A",{href:!0});var L2t=s(eQ);K5r=r(L2t,"TFRemBertForTokenClassification"),L2t.forEach(t),Z5r=r(oke," (RemBERT model)"),oke.forEach(t),e2r=i(oe),zT=n(oe,"LI",{});var rke=s(zT);c5e=n(rke,"STRONG",{});var x2t=s(c5e);o2r=r(x2t,"roberta"),x2t.forEach(t),r2r=r(rke," \u2014 "),oQ=n(rke,"A",{href:!0});var k2t=s(oQ);t2r=r(k2t,"TFRobertaForTokenClassification"),k2t.forEach(t),a2r=r(rke," (RoBERTa model)"),rke.forEach(t),n2r=i(oe),QT=n(oe,"LI",{});var tke=s(QT);f5e=n(tke,"STRONG",{});var S2t=s(f5e);s2r=r(S2t,"roformer"),S2t.forEach(t),l2r=r(tke," \u2014 "),rQ=n(tke,"A",{href:!0});var R2t=s(rQ);i2r=r(R2t,"TFRoFormerForTokenClassification"),R2t.forEach(t),d2r=r(tke," (RoFormer model)"),tke.forEach(t),c2r=i(oe),WT=n(oe,"LI",{});var ake=s(WT);m5e=n(ake,"STRONG",{});var B2t=s(m5e);f2r=r(B2t,"xlm"),B2t.forEach(t),m2r=r(ake," \u2014 "),tQ=n(ake,"A",{href:!0});var P2t=s(tQ);g2r=r(P2t,"TFXLMForTokenClassification"),P2t.forEach(t),h2r=r(ake," (XLM model)"),ake.forEach(t),p2r=i(oe),HT=n(oe,"LI",{});var nke=s(HT);g5e=n(nke,"STRONG",{});var $2t=s(g5e);_2r=r($2t,"xlm-roberta"),$2t.forEach(t),u2r=r(nke," \u2014 "),aQ=n(nke,"A",{href:!0});var q2t=s(aQ);b2r=r(q2t,"TFXLMRobertaForTokenClassification"),q2t.forEach(t),F2r=r(nke," (XLM-RoBERTa model)"),nke.forEach(t),v2r=i(oe),UT=n(oe,"LI",{});var ske=s(UT);h5e=n(ske,"STRONG",{});var I2t=s(h5e);T2r=r(I2t,"xlnet"),I2t.forEach(t),M2r=r(ske," \u2014 "),nQ=n(ske,"A",{href:!0});var j2t=s(nQ);E2r=r(j2t,"TFXLNetForTokenClassification"),j2t.forEach(t),C2r=r(ske," (XLNet model)"),ske.forEach(t),oe.forEach(t),w2r=i(ya),p5e=n(ya,"P",{});var N2t=s(p5e);A2r=r(N2t,"Examples:"),N2t.forEach(t),y2r=i(ya),m(Cy.$$.fragment,ya),ya.forEach(t),ii.forEach(t),HBe=i(c),Jc=n(c,"H2",{class:!0});var lqe=s(Jc);JT=n(lqe,"A",{id:!0,class:!0,href:!0});var D2t=s(JT);_5e=n(D2t,"SPAN",{});var G2t=s(_5e);m(wy.$$.fragment,G2t),G2t.forEach(t),D2t.forEach(t),L2r=i(lqe),u5e=n(lqe,"SPAN",{});var O2t=s(u5e);x2r=r(O2t,"TFAutoModelForQuestionAnswering"),O2t.forEach(t),lqe.forEach(t),UBe=i(c),kr=n(c,"DIV",{class:!0});var ci=s(kr);m(Ay.$$.fragment,ci),k2r=i(ci),Yc=n(ci,"P",{});var BJ=s(Yc);S2r=r(BJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),sQ=n(BJ,"A",{href:!0});var V2t=s(sQ);R2r=r(V2t,"from_pretrained()"),V2t.forEach(t),B2r=r(BJ," class method or the "),lQ=n(BJ,"A",{href:!0});var X2t=s(lQ);P2r=r(X2t,"from_config()"),X2t.forEach(t),$2r=r(BJ,` class
method.`),BJ.forEach(t),q2r=i(ci),yy=n(ci,"P",{});var iqe=s(yy);I2r=r(iqe,"This class cannot be instantiated directly using "),b5e=n(iqe,"CODE",{});var z2t=s(b5e);j2r=r(z2t,"__init__()"),z2t.forEach(t),N2r=r(iqe," (throws an error)."),iqe.forEach(t),D2r=i(ci),wt=n(ci,"DIV",{class:!0});var fi=s(wt);m(Ly.$$.fragment,fi),G2r=i(fi),F5e=n(fi,"P",{});var Q2t=s(F5e);O2r=r(Q2t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Q2t.forEach(t),V2r=i(fi),Kc=n(fi,"P",{});var PJ=s(Kc);X2r=r(PJ,`Note:
Loading a model from its configuration file does `),v5e=n(PJ,"STRONG",{});var W2t=s(v5e);z2r=r(W2t,"not"),W2t.forEach(t),Q2r=r(PJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),iQ=n(PJ,"A",{href:!0});var H2t=s(iQ);W2r=r(H2t,"from_pretrained()"),H2t.forEach(t),H2r=r(PJ," to load the model weights."),PJ.forEach(t),U2r=i(fi),T5e=n(fi,"P",{});var U2t=s(T5e);J2r=r(U2t,"Examples:"),U2t.forEach(t),Y2r=i(fi),m(xy.$$.fragment,fi),fi.forEach(t),K2r=i(ci),Co=n(ci,"DIV",{class:!0});var La=s(Co);m(ky.$$.fragment,La),Z2r=i(La),M5e=n(La,"P",{});var J2t=s(M5e);eFr=r(J2t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),J2t.forEach(t),oFr=i(La),kn=n(La,"P",{});var mE=s(kn);rFr=r(mE,"The model class to instantiate is selected based on the "),E5e=n(mE,"CODE",{});var Y2t=s(E5e);tFr=r(Y2t,"model_type"),Y2t.forEach(t),aFr=r(mE,` property of the config object (either
passed as an argument or loaded from `),C5e=n(mE,"CODE",{});var K2t=s(C5e);nFr=r(K2t,"pretrained_model_name_or_path"),K2t.forEach(t),sFr=r(mE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w5e=n(mE,"CODE",{});var Z2t=s(w5e);lFr=r(Z2t,"pretrained_model_name_or_path"),Z2t.forEach(t),iFr=r(mE,":"),mE.forEach(t),dFr=i(La),K=n(La,"UL",{});var re=s(K);YT=n(re,"LI",{});var lke=s(YT);A5e=n(lke,"STRONG",{});var eFt=s(A5e);cFr=r(eFt,"albert"),eFt.forEach(t),fFr=r(lke," \u2014 "),dQ=n(lke,"A",{href:!0});var oFt=s(dQ);mFr=r(oFt,"TFAlbertForQuestionAnswering"),oFt.forEach(t),gFr=r(lke," (ALBERT model)"),lke.forEach(t),hFr=i(re),KT=n(re,"LI",{});var ike=s(KT);y5e=n(ike,"STRONG",{});var rFt=s(y5e);pFr=r(rFt,"bert"),rFt.forEach(t),_Fr=r(ike," \u2014 "),cQ=n(ike,"A",{href:!0});var tFt=s(cQ);uFr=r(tFt,"TFBertForQuestionAnswering"),tFt.forEach(t),bFr=r(ike," (BERT model)"),ike.forEach(t),FFr=i(re),ZT=n(re,"LI",{});var dke=s(ZT);L5e=n(dke,"STRONG",{});var aFt=s(L5e);vFr=r(aFt,"camembert"),aFt.forEach(t),TFr=r(dke," \u2014 "),fQ=n(dke,"A",{href:!0});var nFt=s(fQ);MFr=r(nFt,"TFCamembertForQuestionAnswering"),nFt.forEach(t),EFr=r(dke," (CamemBERT model)"),dke.forEach(t),CFr=i(re),e8=n(re,"LI",{});var cke=s(e8);x5e=n(cke,"STRONG",{});var sFt=s(x5e);wFr=r(sFt,"convbert"),sFt.forEach(t),AFr=r(cke," \u2014 "),mQ=n(cke,"A",{href:!0});var lFt=s(mQ);yFr=r(lFt,"TFConvBertForQuestionAnswering"),lFt.forEach(t),LFr=r(cke," (ConvBERT model)"),cke.forEach(t),xFr=i(re),o8=n(re,"LI",{});var fke=s(o8);k5e=n(fke,"STRONG",{});var iFt=s(k5e);kFr=r(iFt,"deberta"),iFt.forEach(t),SFr=r(fke," \u2014 "),gQ=n(fke,"A",{href:!0});var dFt=s(gQ);RFr=r(dFt,"TFDebertaForQuestionAnswering"),dFt.forEach(t),BFr=r(fke," (DeBERTa model)"),fke.forEach(t),PFr=i(re),r8=n(re,"LI",{});var mke=s(r8);S5e=n(mke,"STRONG",{});var cFt=s(S5e);$Fr=r(cFt,"deberta-v2"),cFt.forEach(t),qFr=r(mke," \u2014 "),hQ=n(mke,"A",{href:!0});var fFt=s(hQ);IFr=r(fFt,"TFDebertaV2ForQuestionAnswering"),fFt.forEach(t),jFr=r(mke," (DeBERTa-v2 model)"),mke.forEach(t),NFr=i(re),t8=n(re,"LI",{});var gke=s(t8);R5e=n(gke,"STRONG",{});var mFt=s(R5e);DFr=r(mFt,"distilbert"),mFt.forEach(t),GFr=r(gke," \u2014 "),pQ=n(gke,"A",{href:!0});var gFt=s(pQ);OFr=r(gFt,"TFDistilBertForQuestionAnswering"),gFt.forEach(t),VFr=r(gke," (DistilBERT model)"),gke.forEach(t),XFr=i(re),a8=n(re,"LI",{});var hke=s(a8);B5e=n(hke,"STRONG",{});var hFt=s(B5e);zFr=r(hFt,"electra"),hFt.forEach(t),QFr=r(hke," \u2014 "),_Q=n(hke,"A",{href:!0});var pFt=s(_Q);WFr=r(pFt,"TFElectraForQuestionAnswering"),pFt.forEach(t),HFr=r(hke," (ELECTRA model)"),hke.forEach(t),UFr=i(re),n8=n(re,"LI",{});var pke=s(n8);P5e=n(pke,"STRONG",{});var _Ft=s(P5e);JFr=r(_Ft,"flaubert"),_Ft.forEach(t),YFr=r(pke," \u2014 "),uQ=n(pke,"A",{href:!0});var uFt=s(uQ);KFr=r(uFt,"TFFlaubertForQuestionAnsweringSimple"),uFt.forEach(t),ZFr=r(pke," (FlauBERT model)"),pke.forEach(t),evr=i(re),s8=n(re,"LI",{});var _ke=s(s8);$5e=n(_ke,"STRONG",{});var bFt=s($5e);ovr=r(bFt,"funnel"),bFt.forEach(t),rvr=r(_ke," \u2014 "),bQ=n(_ke,"A",{href:!0});var FFt=s(bQ);tvr=r(FFt,"TFFunnelForQuestionAnswering"),FFt.forEach(t),avr=r(_ke," (Funnel Transformer model)"),_ke.forEach(t),nvr=i(re),l8=n(re,"LI",{});var uke=s(l8);q5e=n(uke,"STRONG",{});var vFt=s(q5e);svr=r(vFt,"gptj"),vFt.forEach(t),lvr=r(uke," \u2014 "),FQ=n(uke,"A",{href:!0});var TFt=s(FQ);ivr=r(TFt,"TFGPTJForQuestionAnswering"),TFt.forEach(t),dvr=r(uke," (GPT-J model)"),uke.forEach(t),cvr=i(re),i8=n(re,"LI",{});var bke=s(i8);I5e=n(bke,"STRONG",{});var MFt=s(I5e);fvr=r(MFt,"longformer"),MFt.forEach(t),mvr=r(bke," \u2014 "),vQ=n(bke,"A",{href:!0});var EFt=s(vQ);gvr=r(EFt,"TFLongformerForQuestionAnswering"),EFt.forEach(t),hvr=r(bke," (Longformer model)"),bke.forEach(t),pvr=i(re),d8=n(re,"LI",{});var Fke=s(d8);j5e=n(Fke,"STRONG",{});var CFt=s(j5e);_vr=r(CFt,"mobilebert"),CFt.forEach(t),uvr=r(Fke," \u2014 "),TQ=n(Fke,"A",{href:!0});var wFt=s(TQ);bvr=r(wFt,"TFMobileBertForQuestionAnswering"),wFt.forEach(t),Fvr=r(Fke," (MobileBERT model)"),Fke.forEach(t),vvr=i(re),c8=n(re,"LI",{});var vke=s(c8);N5e=n(vke,"STRONG",{});var AFt=s(N5e);Tvr=r(AFt,"mpnet"),AFt.forEach(t),Mvr=r(vke," \u2014 "),MQ=n(vke,"A",{href:!0});var yFt=s(MQ);Evr=r(yFt,"TFMPNetForQuestionAnswering"),yFt.forEach(t),Cvr=r(vke," (MPNet model)"),vke.forEach(t),wvr=i(re),f8=n(re,"LI",{});var Tke=s(f8);D5e=n(Tke,"STRONG",{});var LFt=s(D5e);Avr=r(LFt,"rembert"),LFt.forEach(t),yvr=r(Tke," \u2014 "),EQ=n(Tke,"A",{href:!0});var xFt=s(EQ);Lvr=r(xFt,"TFRemBertForQuestionAnswering"),xFt.forEach(t),xvr=r(Tke," (RemBERT model)"),Tke.forEach(t),kvr=i(re),m8=n(re,"LI",{});var Mke=s(m8);G5e=n(Mke,"STRONG",{});var kFt=s(G5e);Svr=r(kFt,"roberta"),kFt.forEach(t),Rvr=r(Mke," \u2014 "),CQ=n(Mke,"A",{href:!0});var SFt=s(CQ);Bvr=r(SFt,"TFRobertaForQuestionAnswering"),SFt.forEach(t),Pvr=r(Mke," (RoBERTa model)"),Mke.forEach(t),$vr=i(re),g8=n(re,"LI",{});var Eke=s(g8);O5e=n(Eke,"STRONG",{});var RFt=s(O5e);qvr=r(RFt,"roformer"),RFt.forEach(t),Ivr=r(Eke," \u2014 "),wQ=n(Eke,"A",{href:!0});var BFt=s(wQ);jvr=r(BFt,"TFRoFormerForQuestionAnswering"),BFt.forEach(t),Nvr=r(Eke," (RoFormer model)"),Eke.forEach(t),Dvr=i(re),h8=n(re,"LI",{});var Cke=s(h8);V5e=n(Cke,"STRONG",{});var PFt=s(V5e);Gvr=r(PFt,"xlm"),PFt.forEach(t),Ovr=r(Cke," \u2014 "),AQ=n(Cke,"A",{href:!0});var $Ft=s(AQ);Vvr=r($Ft,"TFXLMForQuestionAnsweringSimple"),$Ft.forEach(t),Xvr=r(Cke," (XLM model)"),Cke.forEach(t),zvr=i(re),p8=n(re,"LI",{});var wke=s(p8);X5e=n(wke,"STRONG",{});var qFt=s(X5e);Qvr=r(qFt,"xlm-roberta"),qFt.forEach(t),Wvr=r(wke," \u2014 "),yQ=n(wke,"A",{href:!0});var IFt=s(yQ);Hvr=r(IFt,"TFXLMRobertaForQuestionAnswering"),IFt.forEach(t),Uvr=r(wke," (XLM-RoBERTa model)"),wke.forEach(t),Jvr=i(re),_8=n(re,"LI",{});var Ake=s(_8);z5e=n(Ake,"STRONG",{});var jFt=s(z5e);Yvr=r(jFt,"xlnet"),jFt.forEach(t),Kvr=r(Ake," \u2014 "),LQ=n(Ake,"A",{href:!0});var NFt=s(LQ);Zvr=r(NFt,"TFXLNetForQuestionAnsweringSimple"),NFt.forEach(t),e6r=r(Ake," (XLNet model)"),Ake.forEach(t),re.forEach(t),o6r=i(La),Q5e=n(La,"P",{});var DFt=s(Q5e);r6r=r(DFt,"Examples:"),DFt.forEach(t),t6r=i(La),m(Sy.$$.fragment,La),La.forEach(t),ci.forEach(t),JBe=i(c),Zc=n(c,"H2",{class:!0});var dqe=s(Zc);u8=n(dqe,"A",{id:!0,class:!0,href:!0});var GFt=s(u8);W5e=n(GFt,"SPAN",{});var OFt=s(W5e);m(Ry.$$.fragment,OFt),OFt.forEach(t),GFt.forEach(t),a6r=i(dqe),H5e=n(dqe,"SPAN",{});var VFt=s(H5e);n6r=r(VFt,"TFAutoModelForVision2Seq"),VFt.forEach(t),dqe.forEach(t),YBe=i(c),Sr=n(c,"DIV",{class:!0});var mi=s(Sr);m(By.$$.fragment,mi),s6r=i(mi),ef=n(mi,"P",{});var $J=s(ef);l6r=r($J,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),xQ=n($J,"A",{href:!0});var XFt=s(xQ);i6r=r(XFt,"from_pretrained()"),XFt.forEach(t),d6r=r($J," class method or the "),kQ=n($J,"A",{href:!0});var zFt=s(kQ);c6r=r(zFt,"from_config()"),zFt.forEach(t),f6r=r($J,` class
method.`),$J.forEach(t),m6r=i(mi),Py=n(mi,"P",{});var cqe=s(Py);g6r=r(cqe,"This class cannot be instantiated directly using "),U5e=n(cqe,"CODE",{});var QFt=s(U5e);h6r=r(QFt,"__init__()"),QFt.forEach(t),p6r=r(cqe," (throws an error)."),cqe.forEach(t),_6r=i(mi),At=n(mi,"DIV",{class:!0});var gi=s(At);m($y.$$.fragment,gi),u6r=i(gi),J5e=n(gi,"P",{});var WFt=s(J5e);b6r=r(WFt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),WFt.forEach(t),F6r=i(gi),of=n(gi,"P",{});var qJ=s(of);v6r=r(qJ,`Note:
Loading a model from its configuration file does `),Y5e=n(qJ,"STRONG",{});var HFt=s(Y5e);T6r=r(HFt,"not"),HFt.forEach(t),M6r=r(qJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),SQ=n(qJ,"A",{href:!0});var UFt=s(SQ);E6r=r(UFt,"from_pretrained()"),UFt.forEach(t),C6r=r(qJ," to load the model weights."),qJ.forEach(t),w6r=i(gi),K5e=n(gi,"P",{});var JFt=s(K5e);A6r=r(JFt,"Examples:"),JFt.forEach(t),y6r=i(gi),m(qy.$$.fragment,gi),gi.forEach(t),L6r=i(mi),wo=n(mi,"DIV",{class:!0});var xa=s(wo);m(Iy.$$.fragment,xa),x6r=i(xa),Z5e=n(xa,"P",{});var YFt=s(Z5e);k6r=r(YFt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),YFt.forEach(t),S6r=i(xa),Sn=n(xa,"P",{});var gE=s(Sn);R6r=r(gE,"The model class to instantiate is selected based on the "),e2e=n(gE,"CODE",{});var KFt=s(e2e);B6r=r(KFt,"model_type"),KFt.forEach(t),P6r=r(gE,` property of the config object (either
passed as an argument or loaded from `),o2e=n(gE,"CODE",{});var ZFt=s(o2e);$6r=r(ZFt,"pretrained_model_name_or_path"),ZFt.forEach(t),q6r=r(gE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r2e=n(gE,"CODE",{});var evt=s(r2e);I6r=r(evt,"pretrained_model_name_or_path"),evt.forEach(t),j6r=r(gE,":"),gE.forEach(t),N6r=i(xa),t2e=n(xa,"UL",{});var ovt=s(t2e);b8=n(ovt,"LI",{});var yke=s(b8);a2e=n(yke,"STRONG",{});var rvt=s(a2e);D6r=r(rvt,"vision-encoder-decoder"),rvt.forEach(t),G6r=r(yke," \u2014 "),RQ=n(yke,"A",{href:!0});var tvt=s(RQ);O6r=r(tvt,"TFVisionEncoderDecoderModel"),tvt.forEach(t),V6r=r(yke," (Vision Encoder decoder model)"),yke.forEach(t),ovt.forEach(t),X6r=i(xa),n2e=n(xa,"P",{});var avt=s(n2e);z6r=r(avt,"Examples:"),avt.forEach(t),Q6r=i(xa),m(jy.$$.fragment,xa),xa.forEach(t),mi.forEach(t),KBe=i(c),rf=n(c,"H2",{class:!0});var fqe=s(rf);F8=n(fqe,"A",{id:!0,class:!0,href:!0});var nvt=s(F8);s2e=n(nvt,"SPAN",{});var svt=s(s2e);m(Ny.$$.fragment,svt),svt.forEach(t),nvt.forEach(t),W6r=i(fqe),l2e=n(fqe,"SPAN",{});var lvt=s(l2e);H6r=r(lvt,"TFAutoModelForSpeechSeq2Seq"),lvt.forEach(t),fqe.forEach(t),ZBe=i(c),Rr=n(c,"DIV",{class:!0});var hi=s(Rr);m(Dy.$$.fragment,hi),U6r=i(hi),tf=n(hi,"P",{});var IJ=s(tf);J6r=r(IJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),BQ=n(IJ,"A",{href:!0});var ivt=s(BQ);Y6r=r(ivt,"from_pretrained()"),ivt.forEach(t),K6r=r(IJ," class method or the "),PQ=n(IJ,"A",{href:!0});var dvt=s(PQ);Z6r=r(dvt,"from_config()"),dvt.forEach(t),e0r=r(IJ,` class
method.`),IJ.forEach(t),o0r=i(hi),Gy=n(hi,"P",{});var mqe=s(Gy);r0r=r(mqe,"This class cannot be instantiated directly using "),i2e=n(mqe,"CODE",{});var cvt=s(i2e);t0r=r(cvt,"__init__()"),cvt.forEach(t),a0r=r(mqe," (throws an error)."),mqe.forEach(t),n0r=i(hi),yt=n(hi,"DIV",{class:!0});var pi=s(yt);m(Oy.$$.fragment,pi),s0r=i(pi),d2e=n(pi,"P",{});var fvt=s(d2e);l0r=r(fvt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),fvt.forEach(t),i0r=i(pi),af=n(pi,"P",{});var jJ=s(af);d0r=r(jJ,`Note:
Loading a model from its configuration file does `),c2e=n(jJ,"STRONG",{});var mvt=s(c2e);c0r=r(mvt,"not"),mvt.forEach(t),f0r=r(jJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),$Q=n(jJ,"A",{href:!0});var gvt=s($Q);m0r=r(gvt,"from_pretrained()"),gvt.forEach(t),g0r=r(jJ," to load the model weights."),jJ.forEach(t),h0r=i(pi),f2e=n(pi,"P",{});var hvt=s(f2e);p0r=r(hvt,"Examples:"),hvt.forEach(t),_0r=i(pi),m(Vy.$$.fragment,pi),pi.forEach(t),u0r=i(hi),Ao=n(hi,"DIV",{class:!0});var ka=s(Ao);m(Xy.$$.fragment,ka),b0r=i(ka),m2e=n(ka,"P",{});var pvt=s(m2e);F0r=r(pvt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),pvt.forEach(t),v0r=i(ka),Rn=n(ka,"P",{});var hE=s(Rn);T0r=r(hE,"The model class to instantiate is selected based on the "),g2e=n(hE,"CODE",{});var _vt=s(g2e);M0r=r(_vt,"model_type"),_vt.forEach(t),E0r=r(hE,` property of the config object (either
passed as an argument or loaded from `),h2e=n(hE,"CODE",{});var uvt=s(h2e);C0r=r(uvt,"pretrained_model_name_or_path"),uvt.forEach(t),w0r=r(hE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p2e=n(hE,"CODE",{});var bvt=s(p2e);A0r=r(bvt,"pretrained_model_name_or_path"),bvt.forEach(t),y0r=r(hE,":"),hE.forEach(t),L0r=i(ka),_2e=n(ka,"UL",{});var Fvt=s(_2e);v8=n(Fvt,"LI",{});var Lke=s(v8);u2e=n(Lke,"STRONG",{});var vvt=s(u2e);x0r=r(vvt,"speech_to_text"),vvt.forEach(t),k0r=r(Lke," \u2014 "),qQ=n(Lke,"A",{href:!0});var Tvt=s(qQ);S0r=r(Tvt,"TFSpeech2TextForConditionalGeneration"),Tvt.forEach(t),R0r=r(Lke," (Speech2Text model)"),Lke.forEach(t),Fvt.forEach(t),B0r=i(ka),b2e=n(ka,"P",{});var Mvt=s(b2e);P0r=r(Mvt,"Examples:"),Mvt.forEach(t),$0r=i(ka),m(zy.$$.fragment,ka),ka.forEach(t),hi.forEach(t),ePe=i(c),nf=n(c,"H2",{class:!0});var gqe=s(nf);T8=n(gqe,"A",{id:!0,class:!0,href:!0});var Evt=s(T8);F2e=n(Evt,"SPAN",{});var Cvt=s(F2e);m(Qy.$$.fragment,Cvt),Cvt.forEach(t),Evt.forEach(t),q0r=i(gqe),v2e=n(gqe,"SPAN",{});var wvt=s(v2e);I0r=r(wvt,"FlaxAutoModel"),wvt.forEach(t),gqe.forEach(t),oPe=i(c),Br=n(c,"DIV",{class:!0});var _i=s(Br);m(Wy.$$.fragment,_i),j0r=i(_i),sf=n(_i,"P",{});var NJ=s(sf);N0r=r(NJ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),IQ=n(NJ,"A",{href:!0});var Avt=s(IQ);D0r=r(Avt,"from_pretrained()"),Avt.forEach(t),G0r=r(NJ," class method or the "),jQ=n(NJ,"A",{href:!0});var yvt=s(jQ);O0r=r(yvt,"from_config()"),yvt.forEach(t),V0r=r(NJ,` class
method.`),NJ.forEach(t),X0r=i(_i),Hy=n(_i,"P",{});var hqe=s(Hy);z0r=r(hqe,"This class cannot be instantiated directly using "),T2e=n(hqe,"CODE",{});var Lvt=s(T2e);Q0r=r(Lvt,"__init__()"),Lvt.forEach(t),W0r=r(hqe," (throws an error)."),hqe.forEach(t),H0r=i(_i),Lt=n(_i,"DIV",{class:!0});var ui=s(Lt);m(Uy.$$.fragment,ui),U0r=i(ui),M2e=n(ui,"P",{});var xvt=s(M2e);J0r=r(xvt,"Instantiates one of the base model classes of the library from a configuration."),xvt.forEach(t),Y0r=i(ui),lf=n(ui,"P",{});var DJ=s(lf);K0r=r(DJ,`Note:
Loading a model from its configuration file does `),E2e=n(DJ,"STRONG",{});var kvt=s(E2e);Z0r=r(kvt,"not"),kvt.forEach(t),eTr=r(DJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),NQ=n(DJ,"A",{href:!0});var Svt=s(NQ);oTr=r(Svt,"from_pretrained()"),Svt.forEach(t),rTr=r(DJ," to load the model weights."),DJ.forEach(t),tTr=i(ui),C2e=n(ui,"P",{});var Rvt=s(C2e);aTr=r(Rvt,"Examples:"),Rvt.forEach(t),nTr=i(ui),m(Jy.$$.fragment,ui),ui.forEach(t),sTr=i(_i),yo=n(_i,"DIV",{class:!0});var Sa=s(yo);m(Yy.$$.fragment,Sa),lTr=i(Sa),w2e=n(Sa,"P",{});var Bvt=s(w2e);iTr=r(Bvt,"Instantiate one of the base model classes of the library from a pretrained model."),Bvt.forEach(t),dTr=i(Sa),Bn=n(Sa,"P",{});var pE=s(Bn);cTr=r(pE,"The model class to instantiate is selected based on the "),A2e=n(pE,"CODE",{});var Pvt=s(A2e);fTr=r(Pvt,"model_type"),Pvt.forEach(t),mTr=r(pE,` property of the config object (either
passed as an argument or loaded from `),y2e=n(pE,"CODE",{});var $vt=s(y2e);gTr=r($vt,"pretrained_model_name_or_path"),$vt.forEach(t),hTr=r(pE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L2e=n(pE,"CODE",{});var qvt=s(L2e);pTr=r(qvt,"pretrained_model_name_or_path"),qvt.forEach(t),_Tr=r(pE,":"),pE.forEach(t),uTr=i(Sa),z=n(Sa,"UL",{});var W=s(z);M8=n(W,"LI",{});var xke=s(M8);x2e=n(xke,"STRONG",{});var Ivt=s(x2e);bTr=r(Ivt,"albert"),Ivt.forEach(t),FTr=r(xke," \u2014 "),DQ=n(xke,"A",{href:!0});var jvt=s(DQ);vTr=r(jvt,"FlaxAlbertModel"),jvt.forEach(t),TTr=r(xke," (ALBERT model)"),xke.forEach(t),MTr=i(W),E8=n(W,"LI",{});var kke=s(E8);k2e=n(kke,"STRONG",{});var Nvt=s(k2e);ETr=r(Nvt,"bart"),Nvt.forEach(t),CTr=r(kke," \u2014 "),GQ=n(kke,"A",{href:!0});var Dvt=s(GQ);wTr=r(Dvt,"FlaxBartModel"),Dvt.forEach(t),ATr=r(kke," (BART model)"),kke.forEach(t),yTr=i(W),C8=n(W,"LI",{});var Ske=s(C8);S2e=n(Ske,"STRONG",{});var Gvt=s(S2e);LTr=r(Gvt,"beit"),Gvt.forEach(t),xTr=r(Ske," \u2014 "),OQ=n(Ske,"A",{href:!0});var Ovt=s(OQ);kTr=r(Ovt,"FlaxBeitModel"),Ovt.forEach(t),STr=r(Ske," (BEiT model)"),Ske.forEach(t),RTr=i(W),w8=n(W,"LI",{});var Rke=s(w8);R2e=n(Rke,"STRONG",{});var Vvt=s(R2e);BTr=r(Vvt,"bert"),Vvt.forEach(t),PTr=r(Rke," \u2014 "),VQ=n(Rke,"A",{href:!0});var Xvt=s(VQ);$Tr=r(Xvt,"FlaxBertModel"),Xvt.forEach(t),qTr=r(Rke," (BERT model)"),Rke.forEach(t),ITr=i(W),A8=n(W,"LI",{});var Bke=s(A8);B2e=n(Bke,"STRONG",{});var zvt=s(B2e);jTr=r(zvt,"big_bird"),zvt.forEach(t),NTr=r(Bke," \u2014 "),XQ=n(Bke,"A",{href:!0});var Qvt=s(XQ);DTr=r(Qvt,"FlaxBigBirdModel"),Qvt.forEach(t),GTr=r(Bke," (BigBird model)"),Bke.forEach(t),OTr=i(W),y8=n(W,"LI",{});var Pke=s(y8);P2e=n(Pke,"STRONG",{});var Wvt=s(P2e);VTr=r(Wvt,"blenderbot"),Wvt.forEach(t),XTr=r(Pke," \u2014 "),zQ=n(Pke,"A",{href:!0});var Hvt=s(zQ);zTr=r(Hvt,"FlaxBlenderbotModel"),Hvt.forEach(t),QTr=r(Pke," (Blenderbot model)"),Pke.forEach(t),WTr=i(W),L8=n(W,"LI",{});var $ke=s(L8);$2e=n($ke,"STRONG",{});var Uvt=s($2e);HTr=r(Uvt,"blenderbot-small"),Uvt.forEach(t),UTr=r($ke," \u2014 "),QQ=n($ke,"A",{href:!0});var Jvt=s(QQ);JTr=r(Jvt,"FlaxBlenderbotSmallModel"),Jvt.forEach(t),YTr=r($ke," (BlenderbotSmall model)"),$ke.forEach(t),KTr=i(W),x8=n(W,"LI",{});var qke=s(x8);q2e=n(qke,"STRONG",{});var Yvt=s(q2e);ZTr=r(Yvt,"clip"),Yvt.forEach(t),e8r=r(qke," \u2014 "),WQ=n(qke,"A",{href:!0});var Kvt=s(WQ);o8r=r(Kvt,"FlaxCLIPModel"),Kvt.forEach(t),r8r=r(qke," (CLIP model)"),qke.forEach(t),t8r=i(W),k8=n(W,"LI",{});var Ike=s(k8);I2e=n(Ike,"STRONG",{});var Zvt=s(I2e);a8r=r(Zvt,"distilbert"),Zvt.forEach(t),n8r=r(Ike," \u2014 "),HQ=n(Ike,"A",{href:!0});var e6t=s(HQ);s8r=r(e6t,"FlaxDistilBertModel"),e6t.forEach(t),l8r=r(Ike," (DistilBERT model)"),Ike.forEach(t),i8r=i(W),S8=n(W,"LI",{});var jke=s(S8);j2e=n(jke,"STRONG",{});var o6t=s(j2e);d8r=r(o6t,"electra"),o6t.forEach(t),c8r=r(jke," \u2014 "),UQ=n(jke,"A",{href:!0});var r6t=s(UQ);f8r=r(r6t,"FlaxElectraModel"),r6t.forEach(t),m8r=r(jke," (ELECTRA model)"),jke.forEach(t),g8r=i(W),R8=n(W,"LI",{});var Nke=s(R8);N2e=n(Nke,"STRONG",{});var t6t=s(N2e);h8r=r(t6t,"gpt2"),t6t.forEach(t),p8r=r(Nke," \u2014 "),JQ=n(Nke,"A",{href:!0});var a6t=s(JQ);_8r=r(a6t,"FlaxGPT2Model"),a6t.forEach(t),u8r=r(Nke," (OpenAI GPT-2 model)"),Nke.forEach(t),b8r=i(W),B8=n(W,"LI",{});var Dke=s(B8);D2e=n(Dke,"STRONG",{});var n6t=s(D2e);F8r=r(n6t,"gpt_neo"),n6t.forEach(t),v8r=r(Dke," \u2014 "),YQ=n(Dke,"A",{href:!0});var s6t=s(YQ);T8r=r(s6t,"FlaxGPTNeoModel"),s6t.forEach(t),M8r=r(Dke," (GPT Neo model)"),Dke.forEach(t),E8r=i(W),P8=n(W,"LI",{});var Gke=s(P8);G2e=n(Gke,"STRONG",{});var l6t=s(G2e);C8r=r(l6t,"gptj"),l6t.forEach(t),w8r=r(Gke," \u2014 "),KQ=n(Gke,"A",{href:!0});var i6t=s(KQ);A8r=r(i6t,"FlaxGPTJModel"),i6t.forEach(t),y8r=r(Gke," (GPT-J model)"),Gke.forEach(t),L8r=i(W),$8=n(W,"LI",{});var Oke=s($8);O2e=n(Oke,"STRONG",{});var d6t=s(O2e);x8r=r(d6t,"marian"),d6t.forEach(t),k8r=r(Oke," \u2014 "),ZQ=n(Oke,"A",{href:!0});var c6t=s(ZQ);S8r=r(c6t,"FlaxMarianModel"),c6t.forEach(t),R8r=r(Oke," (Marian model)"),Oke.forEach(t),B8r=i(W),q8=n(W,"LI",{});var Vke=s(q8);V2e=n(Vke,"STRONG",{});var f6t=s(V2e);P8r=r(f6t,"mbart"),f6t.forEach(t),$8r=r(Vke," \u2014 "),eW=n(Vke,"A",{href:!0});var m6t=s(eW);q8r=r(m6t,"FlaxMBartModel"),m6t.forEach(t),I8r=r(Vke," (mBART model)"),Vke.forEach(t),j8r=i(W),I8=n(W,"LI",{});var Xke=s(I8);X2e=n(Xke,"STRONG",{});var g6t=s(X2e);N8r=r(g6t,"mt5"),g6t.forEach(t),D8r=r(Xke," \u2014 "),oW=n(Xke,"A",{href:!0});var h6t=s(oW);G8r=r(h6t,"FlaxMT5Model"),h6t.forEach(t),O8r=r(Xke," (mT5 model)"),Xke.forEach(t),V8r=i(W),j8=n(W,"LI",{});var zke=s(j8);z2e=n(zke,"STRONG",{});var p6t=s(z2e);X8r=r(p6t,"pegasus"),p6t.forEach(t),z8r=r(zke," \u2014 "),rW=n(zke,"A",{href:!0});var _6t=s(rW);Q8r=r(_6t,"FlaxPegasusModel"),_6t.forEach(t),W8r=r(zke," (Pegasus model)"),zke.forEach(t),H8r=i(W),N8=n(W,"LI",{});var Qke=s(N8);Q2e=n(Qke,"STRONG",{});var u6t=s(Q2e);U8r=r(u6t,"roberta"),u6t.forEach(t),J8r=r(Qke," \u2014 "),tW=n(Qke,"A",{href:!0});var b6t=s(tW);Y8r=r(b6t,"FlaxRobertaModel"),b6t.forEach(t),K8r=r(Qke," (RoBERTa model)"),Qke.forEach(t),Z8r=i(W),D8=n(W,"LI",{});var Wke=s(D8);W2e=n(Wke,"STRONG",{});var F6t=s(W2e);eMr=r(F6t,"roformer"),F6t.forEach(t),oMr=r(Wke," \u2014 "),aW=n(Wke,"A",{href:!0});var v6t=s(aW);rMr=r(v6t,"FlaxRoFormerModel"),v6t.forEach(t),tMr=r(Wke," (RoFormer model)"),Wke.forEach(t),aMr=i(W),G8=n(W,"LI",{});var Hke=s(G8);H2e=n(Hke,"STRONG",{});var T6t=s(H2e);nMr=r(T6t,"t5"),T6t.forEach(t),sMr=r(Hke," \u2014 "),nW=n(Hke,"A",{href:!0});var M6t=s(nW);lMr=r(M6t,"FlaxT5Model"),M6t.forEach(t),iMr=r(Hke," (T5 model)"),Hke.forEach(t),dMr=i(W),O8=n(W,"LI",{});var Uke=s(O8);U2e=n(Uke,"STRONG",{});var E6t=s(U2e);cMr=r(E6t,"vision-text-dual-encoder"),E6t.forEach(t),fMr=r(Uke," \u2014 "),sW=n(Uke,"A",{href:!0});var C6t=s(sW);mMr=r(C6t,"FlaxVisionTextDualEncoderModel"),C6t.forEach(t),gMr=r(Uke," (VisionTextDualEncoder model)"),Uke.forEach(t),hMr=i(W),V8=n(W,"LI",{});var Jke=s(V8);J2e=n(Jke,"STRONG",{});var w6t=s(J2e);pMr=r(w6t,"vit"),w6t.forEach(t),_Mr=r(Jke," \u2014 "),lW=n(Jke,"A",{href:!0});var A6t=s(lW);uMr=r(A6t,"FlaxViTModel"),A6t.forEach(t),bMr=r(Jke," (ViT model)"),Jke.forEach(t),FMr=i(W),X8=n(W,"LI",{});var Yke=s(X8);Y2e=n(Yke,"STRONG",{});var y6t=s(Y2e);vMr=r(y6t,"wav2vec2"),y6t.forEach(t),TMr=r(Yke," \u2014 "),iW=n(Yke,"A",{href:!0});var L6t=s(iW);MMr=r(L6t,"FlaxWav2Vec2Model"),L6t.forEach(t),EMr=r(Yke," (Wav2Vec2 model)"),Yke.forEach(t),CMr=i(W),z8=n(W,"LI",{});var Kke=s(z8);K2e=n(Kke,"STRONG",{});var x6t=s(K2e);wMr=r(x6t,"xglm"),x6t.forEach(t),AMr=r(Kke," \u2014 "),dW=n(Kke,"A",{href:!0});var k6t=s(dW);yMr=r(k6t,"FlaxXGLMModel"),k6t.forEach(t),LMr=r(Kke," (XGLM model)"),Kke.forEach(t),xMr=i(W),Q8=n(W,"LI",{});var Zke=s(Q8);Z2e=n(Zke,"STRONG",{});var S6t=s(Z2e);kMr=r(S6t,"xlm-roberta"),S6t.forEach(t),SMr=r(Zke," \u2014 "),cW=n(Zke,"A",{href:!0});var R6t=s(cW);RMr=r(R6t,"FlaxXLMRobertaModel"),R6t.forEach(t),BMr=r(Zke," (XLM-RoBERTa model)"),Zke.forEach(t),W.forEach(t),PMr=i(Sa),eFe=n(Sa,"P",{});var B6t=s(eFe);$Mr=r(B6t,"Examples:"),B6t.forEach(t),qMr=i(Sa),m(Ky.$$.fragment,Sa),Sa.forEach(t),_i.forEach(t),rPe=i(c),df=n(c,"H2",{class:!0});var pqe=s(df);W8=n(pqe,"A",{id:!0,class:!0,href:!0});var P6t=s(W8);oFe=n(P6t,"SPAN",{});var $6t=s(oFe);m(Zy.$$.fragment,$6t),$6t.forEach(t),P6t.forEach(t),IMr=i(pqe),rFe=n(pqe,"SPAN",{});var q6t=s(rFe);jMr=r(q6t,"FlaxAutoModelForCausalLM"),q6t.forEach(t),pqe.forEach(t),tPe=i(c),Pr=n(c,"DIV",{class:!0});var bi=s(Pr);m(eL.$$.fragment,bi),NMr=i(bi),cf=n(bi,"P",{});var GJ=s(cf);DMr=r(GJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),fW=n(GJ,"A",{href:!0});var I6t=s(fW);GMr=r(I6t,"from_pretrained()"),I6t.forEach(t),OMr=r(GJ," class method or the "),mW=n(GJ,"A",{href:!0});var j6t=s(mW);VMr=r(j6t,"from_config()"),j6t.forEach(t),XMr=r(GJ,` class
method.`),GJ.forEach(t),zMr=i(bi),oL=n(bi,"P",{});var _qe=s(oL);QMr=r(_qe,"This class cannot be instantiated directly using "),tFe=n(_qe,"CODE",{});var N6t=s(tFe);WMr=r(N6t,"__init__()"),N6t.forEach(t),HMr=r(_qe," (throws an error)."),_qe.forEach(t),UMr=i(bi),xt=n(bi,"DIV",{class:!0});var Fi=s(xt);m(rL.$$.fragment,Fi),JMr=i(Fi),aFe=n(Fi,"P",{});var D6t=s(aFe);YMr=r(D6t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),D6t.forEach(t),KMr=i(Fi),ff=n(Fi,"P",{});var OJ=s(ff);ZMr=r(OJ,`Note:
Loading a model from its configuration file does `),nFe=n(OJ,"STRONG",{});var G6t=s(nFe);e4r=r(G6t,"not"),G6t.forEach(t),o4r=r(OJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),gW=n(OJ,"A",{href:!0});var O6t=s(gW);r4r=r(O6t,"from_pretrained()"),O6t.forEach(t),t4r=r(OJ," to load the model weights."),OJ.forEach(t),a4r=i(Fi),sFe=n(Fi,"P",{});var V6t=s(sFe);n4r=r(V6t,"Examples:"),V6t.forEach(t),s4r=i(Fi),m(tL.$$.fragment,Fi),Fi.forEach(t),l4r=i(bi),Lo=n(bi,"DIV",{class:!0});var Ra=s(Lo);m(aL.$$.fragment,Ra),i4r=i(Ra),lFe=n(Ra,"P",{});var X6t=s(lFe);d4r=r(X6t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),X6t.forEach(t),c4r=i(Ra),Pn=n(Ra,"P",{});var _E=s(Pn);f4r=r(_E,"The model class to instantiate is selected based on the "),iFe=n(_E,"CODE",{});var z6t=s(iFe);m4r=r(z6t,"model_type"),z6t.forEach(t),g4r=r(_E,` property of the config object (either
passed as an argument or loaded from `),dFe=n(_E,"CODE",{});var Q6t=s(dFe);h4r=r(Q6t,"pretrained_model_name_or_path"),Q6t.forEach(t),p4r=r(_E,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cFe=n(_E,"CODE",{});var W6t=s(cFe);_4r=r(W6t,"pretrained_model_name_or_path"),W6t.forEach(t),u4r=r(_E,":"),_E.forEach(t),b4r=i(Ra),ga=n(Ra,"UL",{});var vi=s(ga);H8=n(vi,"LI",{});var eSe=s(H8);fFe=n(eSe,"STRONG",{});var H6t=s(fFe);F4r=r(H6t,"bart"),H6t.forEach(t),v4r=r(eSe," \u2014 "),hW=n(eSe,"A",{href:!0});var U6t=s(hW);T4r=r(U6t,"FlaxBartForCausalLM"),U6t.forEach(t),M4r=r(eSe," (BART model)"),eSe.forEach(t),E4r=i(vi),U8=n(vi,"LI",{});var oSe=s(U8);mFe=n(oSe,"STRONG",{});var J6t=s(mFe);C4r=r(J6t,"gpt2"),J6t.forEach(t),w4r=r(oSe," \u2014 "),pW=n(oSe,"A",{href:!0});var Y6t=s(pW);A4r=r(Y6t,"FlaxGPT2LMHeadModel"),Y6t.forEach(t),y4r=r(oSe," (OpenAI GPT-2 model)"),oSe.forEach(t),L4r=i(vi),J8=n(vi,"LI",{});var rSe=s(J8);gFe=n(rSe,"STRONG",{});var K6t=s(gFe);x4r=r(K6t,"gpt_neo"),K6t.forEach(t),k4r=r(rSe," \u2014 "),_W=n(rSe,"A",{href:!0});var Z6t=s(_W);S4r=r(Z6t,"FlaxGPTNeoForCausalLM"),Z6t.forEach(t),R4r=r(rSe," (GPT Neo model)"),rSe.forEach(t),B4r=i(vi),Y8=n(vi,"LI",{});var tSe=s(Y8);hFe=n(tSe,"STRONG",{});var e0t=s(hFe);P4r=r(e0t,"gptj"),e0t.forEach(t),$4r=r(tSe," \u2014 "),uW=n(tSe,"A",{href:!0});var o0t=s(uW);q4r=r(o0t,"FlaxGPTJForCausalLM"),o0t.forEach(t),I4r=r(tSe," (GPT-J model)"),tSe.forEach(t),j4r=i(vi),K8=n(vi,"LI",{});var aSe=s(K8);pFe=n(aSe,"STRONG",{});var r0t=s(pFe);N4r=r(r0t,"xglm"),r0t.forEach(t),D4r=r(aSe," \u2014 "),bW=n(aSe,"A",{href:!0});var t0t=s(bW);G4r=r(t0t,"FlaxXGLMForCausalLM"),t0t.forEach(t),O4r=r(aSe," (XGLM model)"),aSe.forEach(t),vi.forEach(t),V4r=i(Ra),_Fe=n(Ra,"P",{});var a0t=s(_Fe);X4r=r(a0t,"Examples:"),a0t.forEach(t),z4r=i(Ra),m(nL.$$.fragment,Ra),Ra.forEach(t),bi.forEach(t),aPe=i(c),mf=n(c,"H2",{class:!0});var uqe=s(mf);Z8=n(uqe,"A",{id:!0,class:!0,href:!0});var n0t=s(Z8);uFe=n(n0t,"SPAN",{});var s0t=s(uFe);m(sL.$$.fragment,s0t),s0t.forEach(t),n0t.forEach(t),Q4r=i(uqe),bFe=n(uqe,"SPAN",{});var l0t=s(bFe);W4r=r(l0t,"FlaxAutoModelForPreTraining"),l0t.forEach(t),uqe.forEach(t),nPe=i(c),$r=n(c,"DIV",{class:!0});var Ti=s($r);m(lL.$$.fragment,Ti),H4r=i(Ti),gf=n(Ti,"P",{});var VJ=s(gf);U4r=r(VJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),FW=n(VJ,"A",{href:!0});var i0t=s(FW);J4r=r(i0t,"from_pretrained()"),i0t.forEach(t),Y4r=r(VJ," class method or the "),vW=n(VJ,"A",{href:!0});var d0t=s(vW);K4r=r(d0t,"from_config()"),d0t.forEach(t),Z4r=r(VJ,` class
method.`),VJ.forEach(t),eEr=i(Ti),iL=n(Ti,"P",{});var bqe=s(iL);oEr=r(bqe,"This class cannot be instantiated directly using "),FFe=n(bqe,"CODE",{});var c0t=s(FFe);rEr=r(c0t,"__init__()"),c0t.forEach(t),tEr=r(bqe," (throws an error)."),bqe.forEach(t),aEr=i(Ti),kt=n(Ti,"DIV",{class:!0});var Mi=s(kt);m(dL.$$.fragment,Mi),nEr=i(Mi),vFe=n(Mi,"P",{});var f0t=s(vFe);sEr=r(f0t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),f0t.forEach(t),lEr=i(Mi),hf=n(Mi,"P",{});var XJ=s(hf);iEr=r(XJ,`Note:
Loading a model from its configuration file does `),TFe=n(XJ,"STRONG",{});var m0t=s(TFe);dEr=r(m0t,"not"),m0t.forEach(t),cEr=r(XJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),TW=n(XJ,"A",{href:!0});var g0t=s(TW);fEr=r(g0t,"from_pretrained()"),g0t.forEach(t),mEr=r(XJ," to load the model weights."),XJ.forEach(t),gEr=i(Mi),MFe=n(Mi,"P",{});var h0t=s(MFe);hEr=r(h0t,"Examples:"),h0t.forEach(t),pEr=i(Mi),m(cL.$$.fragment,Mi),Mi.forEach(t),_Er=i(Ti),xo=n(Ti,"DIV",{class:!0});var Ba=s(xo);m(fL.$$.fragment,Ba),uEr=i(Ba),EFe=n(Ba,"P",{});var p0t=s(EFe);bEr=r(p0t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),p0t.forEach(t),FEr=i(Ba),$n=n(Ba,"P",{});var uE=s($n);vEr=r(uE,"The model class to instantiate is selected based on the "),CFe=n(uE,"CODE",{});var _0t=s(CFe);TEr=r(_0t,"model_type"),_0t.forEach(t),MEr=r(uE,` property of the config object (either
passed as an argument or loaded from `),wFe=n(uE,"CODE",{});var u0t=s(wFe);EEr=r(u0t,"pretrained_model_name_or_path"),u0t.forEach(t),CEr=r(uE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AFe=n(uE,"CODE",{});var b0t=s(AFe);wEr=r(b0t,"pretrained_model_name_or_path"),b0t.forEach(t),AEr=r(uE,":"),uE.forEach(t),yEr=i(Ba),fe=n(Ba,"UL",{});var pe=s(fe);eM=n(pe,"LI",{});var nSe=s(eM);yFe=n(nSe,"STRONG",{});var F0t=s(yFe);LEr=r(F0t,"albert"),F0t.forEach(t),xEr=r(nSe," \u2014 "),MW=n(nSe,"A",{href:!0});var v0t=s(MW);kEr=r(v0t,"FlaxAlbertForPreTraining"),v0t.forEach(t),SEr=r(nSe," (ALBERT model)"),nSe.forEach(t),REr=i(pe),oM=n(pe,"LI",{});var sSe=s(oM);LFe=n(sSe,"STRONG",{});var T0t=s(LFe);BEr=r(T0t,"bart"),T0t.forEach(t),PEr=r(sSe," \u2014 "),EW=n(sSe,"A",{href:!0});var M0t=s(EW);$Er=r(M0t,"FlaxBartForConditionalGeneration"),M0t.forEach(t),qEr=r(sSe," (BART model)"),sSe.forEach(t),IEr=i(pe),rM=n(pe,"LI",{});var lSe=s(rM);xFe=n(lSe,"STRONG",{});var E0t=s(xFe);jEr=r(E0t,"bert"),E0t.forEach(t),NEr=r(lSe," \u2014 "),CW=n(lSe,"A",{href:!0});var C0t=s(CW);DEr=r(C0t,"FlaxBertForPreTraining"),C0t.forEach(t),GEr=r(lSe," (BERT model)"),lSe.forEach(t),OEr=i(pe),tM=n(pe,"LI",{});var iSe=s(tM);kFe=n(iSe,"STRONG",{});var w0t=s(kFe);VEr=r(w0t,"big_bird"),w0t.forEach(t),XEr=r(iSe," \u2014 "),wW=n(iSe,"A",{href:!0});var A0t=s(wW);zEr=r(A0t,"FlaxBigBirdForPreTraining"),A0t.forEach(t),QEr=r(iSe," (BigBird model)"),iSe.forEach(t),WEr=i(pe),aM=n(pe,"LI",{});var dSe=s(aM);SFe=n(dSe,"STRONG",{});var y0t=s(SFe);HEr=r(y0t,"electra"),y0t.forEach(t),UEr=r(dSe," \u2014 "),AW=n(dSe,"A",{href:!0});var L0t=s(AW);JEr=r(L0t,"FlaxElectraForPreTraining"),L0t.forEach(t),YEr=r(dSe," (ELECTRA model)"),dSe.forEach(t),KEr=i(pe),nM=n(pe,"LI",{});var cSe=s(nM);RFe=n(cSe,"STRONG",{});var x0t=s(RFe);ZEr=r(x0t,"mbart"),x0t.forEach(t),eCr=r(cSe," \u2014 "),yW=n(cSe,"A",{href:!0});var k0t=s(yW);oCr=r(k0t,"FlaxMBartForConditionalGeneration"),k0t.forEach(t),rCr=r(cSe," (mBART model)"),cSe.forEach(t),tCr=i(pe),sM=n(pe,"LI",{});var fSe=s(sM);BFe=n(fSe,"STRONG",{});var S0t=s(BFe);aCr=r(S0t,"mt5"),S0t.forEach(t),nCr=r(fSe," \u2014 "),LW=n(fSe,"A",{href:!0});var R0t=s(LW);sCr=r(R0t,"FlaxMT5ForConditionalGeneration"),R0t.forEach(t),lCr=r(fSe," (mT5 model)"),fSe.forEach(t),iCr=i(pe),lM=n(pe,"LI",{});var mSe=s(lM);PFe=n(mSe,"STRONG",{});var B0t=s(PFe);dCr=r(B0t,"roberta"),B0t.forEach(t),cCr=r(mSe," \u2014 "),xW=n(mSe,"A",{href:!0});var P0t=s(xW);fCr=r(P0t,"FlaxRobertaForMaskedLM"),P0t.forEach(t),mCr=r(mSe," (RoBERTa model)"),mSe.forEach(t),gCr=i(pe),iM=n(pe,"LI",{});var gSe=s(iM);$Fe=n(gSe,"STRONG",{});var $0t=s($Fe);hCr=r($0t,"roformer"),$0t.forEach(t),pCr=r(gSe," \u2014 "),kW=n(gSe,"A",{href:!0});var q0t=s(kW);_Cr=r(q0t,"FlaxRoFormerForMaskedLM"),q0t.forEach(t),uCr=r(gSe," (RoFormer model)"),gSe.forEach(t),bCr=i(pe),dM=n(pe,"LI",{});var hSe=s(dM);qFe=n(hSe,"STRONG",{});var I0t=s(qFe);FCr=r(I0t,"t5"),I0t.forEach(t),vCr=r(hSe," \u2014 "),SW=n(hSe,"A",{href:!0});var j0t=s(SW);TCr=r(j0t,"FlaxT5ForConditionalGeneration"),j0t.forEach(t),MCr=r(hSe," (T5 model)"),hSe.forEach(t),ECr=i(pe),cM=n(pe,"LI",{});var pSe=s(cM);IFe=n(pSe,"STRONG",{});var N0t=s(IFe);CCr=r(N0t,"wav2vec2"),N0t.forEach(t),wCr=r(pSe," \u2014 "),RW=n(pSe,"A",{href:!0});var D0t=s(RW);ACr=r(D0t,"FlaxWav2Vec2ForPreTraining"),D0t.forEach(t),yCr=r(pSe," (Wav2Vec2 model)"),pSe.forEach(t),LCr=i(pe),fM=n(pe,"LI",{});var _Se=s(fM);jFe=n(_Se,"STRONG",{});var G0t=s(jFe);xCr=r(G0t,"xlm-roberta"),G0t.forEach(t),kCr=r(_Se," \u2014 "),BW=n(_Se,"A",{href:!0});var O0t=s(BW);SCr=r(O0t,"FlaxXLMRobertaForMaskedLM"),O0t.forEach(t),RCr=r(_Se," (XLM-RoBERTa model)"),_Se.forEach(t),pe.forEach(t),BCr=i(Ba),NFe=n(Ba,"P",{});var V0t=s(NFe);PCr=r(V0t,"Examples:"),V0t.forEach(t),$Cr=i(Ba),m(mL.$$.fragment,Ba),Ba.forEach(t),Ti.forEach(t),sPe=i(c),pf=n(c,"H2",{class:!0});var Fqe=s(pf);mM=n(Fqe,"A",{id:!0,class:!0,href:!0});var X0t=s(mM);DFe=n(X0t,"SPAN",{});var z0t=s(DFe);m(gL.$$.fragment,z0t),z0t.forEach(t),X0t.forEach(t),qCr=i(Fqe),GFe=n(Fqe,"SPAN",{});var Q0t=s(GFe);ICr=r(Q0t,"FlaxAutoModelForMaskedLM"),Q0t.forEach(t),Fqe.forEach(t),lPe=i(c),qr=n(c,"DIV",{class:!0});var Ei=s(qr);m(hL.$$.fragment,Ei),jCr=i(Ei),_f=n(Ei,"P",{});var zJ=s(_f);NCr=r(zJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),PW=n(zJ,"A",{href:!0});var W0t=s(PW);DCr=r(W0t,"from_pretrained()"),W0t.forEach(t),GCr=r(zJ," class method or the "),$W=n(zJ,"A",{href:!0});var H0t=s($W);OCr=r(H0t,"from_config()"),H0t.forEach(t),VCr=r(zJ,` class
method.`),zJ.forEach(t),XCr=i(Ei),pL=n(Ei,"P",{});var vqe=s(pL);zCr=r(vqe,"This class cannot be instantiated directly using "),OFe=n(vqe,"CODE",{});var U0t=s(OFe);QCr=r(U0t,"__init__()"),U0t.forEach(t),WCr=r(vqe," (throws an error)."),vqe.forEach(t),HCr=i(Ei),St=n(Ei,"DIV",{class:!0});var Ci=s(St);m(_L.$$.fragment,Ci),UCr=i(Ci),VFe=n(Ci,"P",{});var J0t=s(VFe);JCr=r(J0t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),J0t.forEach(t),YCr=i(Ci),uf=n(Ci,"P",{});var QJ=s(uf);KCr=r(QJ,`Note:
Loading a model from its configuration file does `),XFe=n(QJ,"STRONG",{});var Y0t=s(XFe);ZCr=r(Y0t,"not"),Y0t.forEach(t),e3r=r(QJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),qW=n(QJ,"A",{href:!0});var K0t=s(qW);o3r=r(K0t,"from_pretrained()"),K0t.forEach(t),r3r=r(QJ," to load the model weights."),QJ.forEach(t),t3r=i(Ci),zFe=n(Ci,"P",{});var Z0t=s(zFe);a3r=r(Z0t,"Examples:"),Z0t.forEach(t),n3r=i(Ci),m(uL.$$.fragment,Ci),Ci.forEach(t),s3r=i(Ei),ko=n(Ei,"DIV",{class:!0});var Pa=s(ko);m(bL.$$.fragment,Pa),l3r=i(Pa),QFe=n(Pa,"P",{});var eTt=s(QFe);i3r=r(eTt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),eTt.forEach(t),d3r=i(Pa),qn=n(Pa,"P",{});var bE=s(qn);c3r=r(bE,"The model class to instantiate is selected based on the "),WFe=n(bE,"CODE",{});var oTt=s(WFe);f3r=r(oTt,"model_type"),oTt.forEach(t),m3r=r(bE,` property of the config object (either
passed as an argument or loaded from `),HFe=n(bE,"CODE",{});var rTt=s(HFe);g3r=r(rTt,"pretrained_model_name_or_path"),rTt.forEach(t),h3r=r(bE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UFe=n(bE,"CODE",{});var tTt=s(UFe);p3r=r(tTt,"pretrained_model_name_or_path"),tTt.forEach(t),_3r=r(bE,":"),bE.forEach(t),u3r=i(Pa),be=n(Pa,"UL",{});var Ae=s(be);gM=n(Ae,"LI",{});var uSe=s(gM);JFe=n(uSe,"STRONG",{});var aTt=s(JFe);b3r=r(aTt,"albert"),aTt.forEach(t),F3r=r(uSe," \u2014 "),IW=n(uSe,"A",{href:!0});var nTt=s(IW);v3r=r(nTt,"FlaxAlbertForMaskedLM"),nTt.forEach(t),T3r=r(uSe," (ALBERT model)"),uSe.forEach(t),M3r=i(Ae),hM=n(Ae,"LI",{});var bSe=s(hM);YFe=n(bSe,"STRONG",{});var sTt=s(YFe);E3r=r(sTt,"bart"),sTt.forEach(t),C3r=r(bSe," \u2014 "),jW=n(bSe,"A",{href:!0});var lTt=s(jW);w3r=r(lTt,"FlaxBartForConditionalGeneration"),lTt.forEach(t),A3r=r(bSe," (BART model)"),bSe.forEach(t),y3r=i(Ae),pM=n(Ae,"LI",{});var FSe=s(pM);KFe=n(FSe,"STRONG",{});var iTt=s(KFe);L3r=r(iTt,"bert"),iTt.forEach(t),x3r=r(FSe," \u2014 "),NW=n(FSe,"A",{href:!0});var dTt=s(NW);k3r=r(dTt,"FlaxBertForMaskedLM"),dTt.forEach(t),S3r=r(FSe," (BERT model)"),FSe.forEach(t),R3r=i(Ae),_M=n(Ae,"LI",{});var vSe=s(_M);ZFe=n(vSe,"STRONG",{});var cTt=s(ZFe);B3r=r(cTt,"big_bird"),cTt.forEach(t),P3r=r(vSe," \u2014 "),DW=n(vSe,"A",{href:!0});var fTt=s(DW);$3r=r(fTt,"FlaxBigBirdForMaskedLM"),fTt.forEach(t),q3r=r(vSe," (BigBird model)"),vSe.forEach(t),I3r=i(Ae),uM=n(Ae,"LI",{});var TSe=s(uM);eve=n(TSe,"STRONG",{});var mTt=s(eve);j3r=r(mTt,"distilbert"),mTt.forEach(t),N3r=r(TSe," \u2014 "),GW=n(TSe,"A",{href:!0});var gTt=s(GW);D3r=r(gTt,"FlaxDistilBertForMaskedLM"),gTt.forEach(t),G3r=r(TSe," (DistilBERT model)"),TSe.forEach(t),O3r=i(Ae),bM=n(Ae,"LI",{});var MSe=s(bM);ove=n(MSe,"STRONG",{});var hTt=s(ove);V3r=r(hTt,"electra"),hTt.forEach(t),X3r=r(MSe," \u2014 "),OW=n(MSe,"A",{href:!0});var pTt=s(OW);z3r=r(pTt,"FlaxElectraForMaskedLM"),pTt.forEach(t),Q3r=r(MSe," (ELECTRA model)"),MSe.forEach(t),W3r=i(Ae),FM=n(Ae,"LI",{});var ESe=s(FM);rve=n(ESe,"STRONG",{});var _Tt=s(rve);H3r=r(_Tt,"mbart"),_Tt.forEach(t),U3r=r(ESe," \u2014 "),VW=n(ESe,"A",{href:!0});var uTt=s(VW);J3r=r(uTt,"FlaxMBartForConditionalGeneration"),uTt.forEach(t),Y3r=r(ESe," (mBART model)"),ESe.forEach(t),K3r=i(Ae),vM=n(Ae,"LI",{});var CSe=s(vM);tve=n(CSe,"STRONG",{});var bTt=s(tve);Z3r=r(bTt,"roberta"),bTt.forEach(t),ewr=r(CSe," \u2014 "),XW=n(CSe,"A",{href:!0});var FTt=s(XW);owr=r(FTt,"FlaxRobertaForMaskedLM"),FTt.forEach(t),rwr=r(CSe," (RoBERTa model)"),CSe.forEach(t),twr=i(Ae),TM=n(Ae,"LI",{});var wSe=s(TM);ave=n(wSe,"STRONG",{});var vTt=s(ave);awr=r(vTt,"roformer"),vTt.forEach(t),nwr=r(wSe," \u2014 "),zW=n(wSe,"A",{href:!0});var TTt=s(zW);swr=r(TTt,"FlaxRoFormerForMaskedLM"),TTt.forEach(t),lwr=r(wSe," (RoFormer model)"),wSe.forEach(t),iwr=i(Ae),MM=n(Ae,"LI",{});var ASe=s(MM);nve=n(ASe,"STRONG",{});var MTt=s(nve);dwr=r(MTt,"xlm-roberta"),MTt.forEach(t),cwr=r(ASe," \u2014 "),QW=n(ASe,"A",{href:!0});var ETt=s(QW);fwr=r(ETt,"FlaxXLMRobertaForMaskedLM"),ETt.forEach(t),mwr=r(ASe," (XLM-RoBERTa model)"),ASe.forEach(t),Ae.forEach(t),gwr=i(Pa),sve=n(Pa,"P",{});var CTt=s(sve);hwr=r(CTt,"Examples:"),CTt.forEach(t),pwr=i(Pa),m(FL.$$.fragment,Pa),Pa.forEach(t),Ei.forEach(t),iPe=i(c),bf=n(c,"H2",{class:!0});var Tqe=s(bf);EM=n(Tqe,"A",{id:!0,class:!0,href:!0});var wTt=s(EM);lve=n(wTt,"SPAN",{});var ATt=s(lve);m(vL.$$.fragment,ATt),ATt.forEach(t),wTt.forEach(t),_wr=i(Tqe),ive=n(Tqe,"SPAN",{});var yTt=s(ive);uwr=r(yTt,"FlaxAutoModelForSeq2SeqLM"),yTt.forEach(t),Tqe.forEach(t),dPe=i(c),Ir=n(c,"DIV",{class:!0});var wi=s(Ir);m(TL.$$.fragment,wi),bwr=i(wi),Ff=n(wi,"P",{});var WJ=s(Ff);Fwr=r(WJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),WW=n(WJ,"A",{href:!0});var LTt=s(WW);vwr=r(LTt,"from_pretrained()"),LTt.forEach(t),Twr=r(WJ," class method or the "),HW=n(WJ,"A",{href:!0});var xTt=s(HW);Mwr=r(xTt,"from_config()"),xTt.forEach(t),Ewr=r(WJ,` class
method.`),WJ.forEach(t),Cwr=i(wi),ML=n(wi,"P",{});var Mqe=s(ML);wwr=r(Mqe,"This class cannot be instantiated directly using "),dve=n(Mqe,"CODE",{});var kTt=s(dve);Awr=r(kTt,"__init__()"),kTt.forEach(t),ywr=r(Mqe," (throws an error)."),Mqe.forEach(t),Lwr=i(wi),Rt=n(wi,"DIV",{class:!0});var Ai=s(Rt);m(EL.$$.fragment,Ai),xwr=i(Ai),cve=n(Ai,"P",{});var STt=s(cve);kwr=r(STt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),STt.forEach(t),Swr=i(Ai),vf=n(Ai,"P",{});var HJ=s(vf);Rwr=r(HJ,`Note:
Loading a model from its configuration file does `),fve=n(HJ,"STRONG",{});var RTt=s(fve);Bwr=r(RTt,"not"),RTt.forEach(t),Pwr=r(HJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),UW=n(HJ,"A",{href:!0});var BTt=s(UW);$wr=r(BTt,"from_pretrained()"),BTt.forEach(t),qwr=r(HJ," to load the model weights."),HJ.forEach(t),Iwr=i(Ai),mve=n(Ai,"P",{});var PTt=s(mve);jwr=r(PTt,"Examples:"),PTt.forEach(t),Nwr=i(Ai),m(CL.$$.fragment,Ai),Ai.forEach(t),Dwr=i(wi),So=n(wi,"DIV",{class:!0});var $a=s(So);m(wL.$$.fragment,$a),Gwr=i($a),gve=n($a,"P",{});var $Tt=s(gve);Owr=r($Tt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),$Tt.forEach(t),Vwr=i($a),In=n($a,"P",{});var FE=s(In);Xwr=r(FE,"The model class to instantiate is selected based on the "),hve=n(FE,"CODE",{});var qTt=s(hve);zwr=r(qTt,"model_type"),qTt.forEach(t),Qwr=r(FE,` property of the config object (either
passed as an argument or loaded from `),pve=n(FE,"CODE",{});var ITt=s(pve);Wwr=r(ITt,"pretrained_model_name_or_path"),ITt.forEach(t),Hwr=r(FE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ve=n(FE,"CODE",{});var jTt=s(_ve);Uwr=r(jTt,"pretrained_model_name_or_path"),jTt.forEach(t),Jwr=r(FE,":"),FE.forEach(t),Ywr=i($a),Ee=n($a,"UL",{});var so=s(Ee);CM=n(so,"LI",{});var ySe=s(CM);uve=n(ySe,"STRONG",{});var NTt=s(uve);Kwr=r(NTt,"bart"),NTt.forEach(t),Zwr=r(ySe," \u2014 "),JW=n(ySe,"A",{href:!0});var DTt=s(JW);eAr=r(DTt,"FlaxBartForConditionalGeneration"),DTt.forEach(t),oAr=r(ySe," (BART model)"),ySe.forEach(t),rAr=i(so),wM=n(so,"LI",{});var LSe=s(wM);bve=n(LSe,"STRONG",{});var GTt=s(bve);tAr=r(GTt,"blenderbot"),GTt.forEach(t),aAr=r(LSe," \u2014 "),YW=n(LSe,"A",{href:!0});var OTt=s(YW);nAr=r(OTt,"FlaxBlenderbotForConditionalGeneration"),OTt.forEach(t),sAr=r(LSe," (Blenderbot model)"),LSe.forEach(t),lAr=i(so),AM=n(so,"LI",{});var xSe=s(AM);Fve=n(xSe,"STRONG",{});var VTt=s(Fve);iAr=r(VTt,"blenderbot-small"),VTt.forEach(t),dAr=r(xSe," \u2014 "),KW=n(xSe,"A",{href:!0});var XTt=s(KW);cAr=r(XTt,"FlaxBlenderbotSmallForConditionalGeneration"),XTt.forEach(t),fAr=r(xSe," (BlenderbotSmall model)"),xSe.forEach(t),mAr=i(so),yM=n(so,"LI",{});var kSe=s(yM);vve=n(kSe,"STRONG",{});var zTt=s(vve);gAr=r(zTt,"encoder-decoder"),zTt.forEach(t),hAr=r(kSe," \u2014 "),ZW=n(kSe,"A",{href:!0});var QTt=s(ZW);pAr=r(QTt,"FlaxEncoderDecoderModel"),QTt.forEach(t),_Ar=r(kSe," (Encoder decoder model)"),kSe.forEach(t),uAr=i(so),LM=n(so,"LI",{});var SSe=s(LM);Tve=n(SSe,"STRONG",{});var WTt=s(Tve);bAr=r(WTt,"marian"),WTt.forEach(t),FAr=r(SSe," \u2014 "),eH=n(SSe,"A",{href:!0});var HTt=s(eH);vAr=r(HTt,"FlaxMarianMTModel"),HTt.forEach(t),TAr=r(SSe," (Marian model)"),SSe.forEach(t),MAr=i(so),xM=n(so,"LI",{});var RSe=s(xM);Mve=n(RSe,"STRONG",{});var UTt=s(Mve);EAr=r(UTt,"mbart"),UTt.forEach(t),CAr=r(RSe," \u2014 "),oH=n(RSe,"A",{href:!0});var JTt=s(oH);wAr=r(JTt,"FlaxMBartForConditionalGeneration"),JTt.forEach(t),AAr=r(RSe," (mBART model)"),RSe.forEach(t),yAr=i(so),kM=n(so,"LI",{});var BSe=s(kM);Eve=n(BSe,"STRONG",{});var YTt=s(Eve);LAr=r(YTt,"mt5"),YTt.forEach(t),xAr=r(BSe," \u2014 "),rH=n(BSe,"A",{href:!0});var KTt=s(rH);kAr=r(KTt,"FlaxMT5ForConditionalGeneration"),KTt.forEach(t),SAr=r(BSe," (mT5 model)"),BSe.forEach(t),RAr=i(so),SM=n(so,"LI",{});var PSe=s(SM);Cve=n(PSe,"STRONG",{});var ZTt=s(Cve);BAr=r(ZTt,"pegasus"),ZTt.forEach(t),PAr=r(PSe," \u2014 "),tH=n(PSe,"A",{href:!0});var e8t=s(tH);$Ar=r(e8t,"FlaxPegasusForConditionalGeneration"),e8t.forEach(t),qAr=r(PSe," (Pegasus model)"),PSe.forEach(t),IAr=i(so),RM=n(so,"LI",{});var $Se=s(RM);wve=n($Se,"STRONG",{});var o8t=s(wve);jAr=r(o8t,"t5"),o8t.forEach(t),NAr=r($Se," \u2014 "),aH=n($Se,"A",{href:!0});var r8t=s(aH);DAr=r(r8t,"FlaxT5ForConditionalGeneration"),r8t.forEach(t),GAr=r($Se," (T5 model)"),$Se.forEach(t),so.forEach(t),OAr=i($a),Ave=n($a,"P",{});var t8t=s(Ave);VAr=r(t8t,"Examples:"),t8t.forEach(t),XAr=i($a),m(AL.$$.fragment,$a),$a.forEach(t),wi.forEach(t),cPe=i(c),Tf=n(c,"H2",{class:!0});var Eqe=s(Tf);BM=n(Eqe,"A",{id:!0,class:!0,href:!0});var a8t=s(BM);yve=n(a8t,"SPAN",{});var n8t=s(yve);m(yL.$$.fragment,n8t),n8t.forEach(t),a8t.forEach(t),zAr=i(Eqe),Lve=n(Eqe,"SPAN",{});var s8t=s(Lve);QAr=r(s8t,"FlaxAutoModelForSequenceClassification"),s8t.forEach(t),Eqe.forEach(t),fPe=i(c),jr=n(c,"DIV",{class:!0});var yi=s(jr);m(LL.$$.fragment,yi),WAr=i(yi),Mf=n(yi,"P",{});var UJ=s(Mf);HAr=r(UJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),nH=n(UJ,"A",{href:!0});var l8t=s(nH);UAr=r(l8t,"from_pretrained()"),l8t.forEach(t),JAr=r(UJ," class method or the "),sH=n(UJ,"A",{href:!0});var i8t=s(sH);YAr=r(i8t,"from_config()"),i8t.forEach(t),KAr=r(UJ,` class
method.`),UJ.forEach(t),ZAr=i(yi),xL=n(yi,"P",{});var Cqe=s(xL);eyr=r(Cqe,"This class cannot be instantiated directly using "),xve=n(Cqe,"CODE",{});var d8t=s(xve);oyr=r(d8t,"__init__()"),d8t.forEach(t),ryr=r(Cqe," (throws an error)."),Cqe.forEach(t),tyr=i(yi),Bt=n(yi,"DIV",{class:!0});var Li=s(Bt);m(kL.$$.fragment,Li),ayr=i(Li),kve=n(Li,"P",{});var c8t=s(kve);nyr=r(c8t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),c8t.forEach(t),syr=i(Li),Ef=n(Li,"P",{});var JJ=s(Ef);lyr=r(JJ,`Note:
Loading a model from its configuration file does `),Sve=n(JJ,"STRONG",{});var f8t=s(Sve);iyr=r(f8t,"not"),f8t.forEach(t),dyr=r(JJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),lH=n(JJ,"A",{href:!0});var m8t=s(lH);cyr=r(m8t,"from_pretrained()"),m8t.forEach(t),fyr=r(JJ," to load the model weights."),JJ.forEach(t),myr=i(Li),Rve=n(Li,"P",{});var g8t=s(Rve);gyr=r(g8t,"Examples:"),g8t.forEach(t),hyr=i(Li),m(SL.$$.fragment,Li),Li.forEach(t),pyr=i(yi),Ro=n(yi,"DIV",{class:!0});var qa=s(Ro);m(RL.$$.fragment,qa),_yr=i(qa),Bve=n(qa,"P",{});var h8t=s(Bve);uyr=r(h8t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),h8t.forEach(t),byr=i(qa),jn=n(qa,"P",{});var vE=s(jn);Fyr=r(vE,"The model class to instantiate is selected based on the "),Pve=n(vE,"CODE",{});var p8t=s(Pve);vyr=r(p8t,"model_type"),p8t.forEach(t),Tyr=r(vE,` property of the config object (either
passed as an argument or loaded from `),$ve=n(vE,"CODE",{});var _8t=s($ve);Myr=r(_8t,"pretrained_model_name_or_path"),_8t.forEach(t),Eyr=r(vE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qve=n(vE,"CODE",{});var u8t=s(qve);Cyr=r(u8t,"pretrained_model_name_or_path"),u8t.forEach(t),wyr=r(vE,":"),vE.forEach(t),Ayr=i(qa),Fe=n(qa,"UL",{});var ye=s(Fe);PM=n(ye,"LI",{});var qSe=s(PM);Ive=n(qSe,"STRONG",{});var b8t=s(Ive);yyr=r(b8t,"albert"),b8t.forEach(t),Lyr=r(qSe," \u2014 "),iH=n(qSe,"A",{href:!0});var F8t=s(iH);xyr=r(F8t,"FlaxAlbertForSequenceClassification"),F8t.forEach(t),kyr=r(qSe," (ALBERT model)"),qSe.forEach(t),Syr=i(ye),$M=n(ye,"LI",{});var ISe=s($M);jve=n(ISe,"STRONG",{});var v8t=s(jve);Ryr=r(v8t,"bart"),v8t.forEach(t),Byr=r(ISe," \u2014 "),dH=n(ISe,"A",{href:!0});var T8t=s(dH);Pyr=r(T8t,"FlaxBartForSequenceClassification"),T8t.forEach(t),$yr=r(ISe," (BART model)"),ISe.forEach(t),qyr=i(ye),qM=n(ye,"LI",{});var jSe=s(qM);Nve=n(jSe,"STRONG",{});var M8t=s(Nve);Iyr=r(M8t,"bert"),M8t.forEach(t),jyr=r(jSe," \u2014 "),cH=n(jSe,"A",{href:!0});var E8t=s(cH);Nyr=r(E8t,"FlaxBertForSequenceClassification"),E8t.forEach(t),Dyr=r(jSe," (BERT model)"),jSe.forEach(t),Gyr=i(ye),IM=n(ye,"LI",{});var NSe=s(IM);Dve=n(NSe,"STRONG",{});var C8t=s(Dve);Oyr=r(C8t,"big_bird"),C8t.forEach(t),Vyr=r(NSe," \u2014 "),fH=n(NSe,"A",{href:!0});var w8t=s(fH);Xyr=r(w8t,"FlaxBigBirdForSequenceClassification"),w8t.forEach(t),zyr=r(NSe," (BigBird model)"),NSe.forEach(t),Qyr=i(ye),jM=n(ye,"LI",{});var DSe=s(jM);Gve=n(DSe,"STRONG",{});var A8t=s(Gve);Wyr=r(A8t,"distilbert"),A8t.forEach(t),Hyr=r(DSe," \u2014 "),mH=n(DSe,"A",{href:!0});var y8t=s(mH);Uyr=r(y8t,"FlaxDistilBertForSequenceClassification"),y8t.forEach(t),Jyr=r(DSe," (DistilBERT model)"),DSe.forEach(t),Yyr=i(ye),NM=n(ye,"LI",{});var GSe=s(NM);Ove=n(GSe,"STRONG",{});var L8t=s(Ove);Kyr=r(L8t,"electra"),L8t.forEach(t),Zyr=r(GSe," \u2014 "),gH=n(GSe,"A",{href:!0});var x8t=s(gH);eLr=r(x8t,"FlaxElectraForSequenceClassification"),x8t.forEach(t),oLr=r(GSe," (ELECTRA model)"),GSe.forEach(t),rLr=i(ye),DM=n(ye,"LI",{});var OSe=s(DM);Vve=n(OSe,"STRONG",{});var k8t=s(Vve);tLr=r(k8t,"mbart"),k8t.forEach(t),aLr=r(OSe," \u2014 "),hH=n(OSe,"A",{href:!0});var S8t=s(hH);nLr=r(S8t,"FlaxMBartForSequenceClassification"),S8t.forEach(t),sLr=r(OSe," (mBART model)"),OSe.forEach(t),lLr=i(ye),GM=n(ye,"LI",{});var VSe=s(GM);Xve=n(VSe,"STRONG",{});var R8t=s(Xve);iLr=r(R8t,"roberta"),R8t.forEach(t),dLr=r(VSe," \u2014 "),pH=n(VSe,"A",{href:!0});var B8t=s(pH);cLr=r(B8t,"FlaxRobertaForSequenceClassification"),B8t.forEach(t),fLr=r(VSe," (RoBERTa model)"),VSe.forEach(t),mLr=i(ye),OM=n(ye,"LI",{});var XSe=s(OM);zve=n(XSe,"STRONG",{});var P8t=s(zve);gLr=r(P8t,"roformer"),P8t.forEach(t),hLr=r(XSe," \u2014 "),_H=n(XSe,"A",{href:!0});var $8t=s(_H);pLr=r($8t,"FlaxRoFormerForSequenceClassification"),$8t.forEach(t),_Lr=r(XSe," (RoFormer model)"),XSe.forEach(t),uLr=i(ye),VM=n(ye,"LI",{});var zSe=s(VM);Qve=n(zSe,"STRONG",{});var q8t=s(Qve);bLr=r(q8t,"xlm-roberta"),q8t.forEach(t),FLr=r(zSe," \u2014 "),uH=n(zSe,"A",{href:!0});var I8t=s(uH);vLr=r(I8t,"FlaxXLMRobertaForSequenceClassification"),I8t.forEach(t),TLr=r(zSe," (XLM-RoBERTa model)"),zSe.forEach(t),ye.forEach(t),MLr=i(qa),Wve=n(qa,"P",{});var j8t=s(Wve);ELr=r(j8t,"Examples:"),j8t.forEach(t),CLr=i(qa),m(BL.$$.fragment,qa),qa.forEach(t),yi.forEach(t),mPe=i(c),Cf=n(c,"H2",{class:!0});var wqe=s(Cf);XM=n(wqe,"A",{id:!0,class:!0,href:!0});var N8t=s(XM);Hve=n(N8t,"SPAN",{});var D8t=s(Hve);m(PL.$$.fragment,D8t),D8t.forEach(t),N8t.forEach(t),wLr=i(wqe),Uve=n(wqe,"SPAN",{});var G8t=s(Uve);ALr=r(G8t,"FlaxAutoModelForSpeechSeq2Seq"),G8t.forEach(t),wqe.forEach(t),gPe=i(c),Nr=n(c,"DIV",{class:!0});var xi=s(Nr);m($L.$$.fragment,xi),yLr=i(xi),wf=n(xi,"P",{});var YJ=s(wf);LLr=r(YJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),bH=n(YJ,"A",{href:!0});var O8t=s(bH);xLr=r(O8t,"from_pretrained()"),O8t.forEach(t),kLr=r(YJ," class method or the "),FH=n(YJ,"A",{href:!0});var V8t=s(FH);SLr=r(V8t,"from_config()"),V8t.forEach(t),RLr=r(YJ,` class
method.`),YJ.forEach(t),BLr=i(xi),qL=n(xi,"P",{});var Aqe=s(qL);PLr=r(Aqe,"This class cannot be instantiated directly using "),Jve=n(Aqe,"CODE",{});var X8t=s(Jve);$Lr=r(X8t,"__init__()"),X8t.forEach(t),qLr=r(Aqe," (throws an error)."),Aqe.forEach(t),ILr=i(xi),Pt=n(xi,"DIV",{class:!0});var ki=s(Pt);m(IL.$$.fragment,ki),jLr=i(ki),Yve=n(ki,"P",{});var z8t=s(Yve);NLr=r(z8t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),z8t.forEach(t),DLr=i(ki),Af=n(ki,"P",{});var KJ=s(Af);GLr=r(KJ,`Note:
Loading a model from its configuration file does `),Kve=n(KJ,"STRONG",{});var Q8t=s(Kve);OLr=r(Q8t,"not"),Q8t.forEach(t),VLr=r(KJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),vH=n(KJ,"A",{href:!0});var W8t=s(vH);XLr=r(W8t,"from_pretrained()"),W8t.forEach(t),zLr=r(KJ," to load the model weights."),KJ.forEach(t),QLr=i(ki),Zve=n(ki,"P",{});var H8t=s(Zve);WLr=r(H8t,"Examples:"),H8t.forEach(t),HLr=i(ki),m(jL.$$.fragment,ki),ki.forEach(t),ULr=i(xi),Bo=n(xi,"DIV",{class:!0});var Ia=s(Bo);m(NL.$$.fragment,Ia),JLr=i(Ia),e6e=n(Ia,"P",{});var U8t=s(e6e);YLr=r(U8t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),U8t.forEach(t),KLr=i(Ia),Nn=n(Ia,"P",{});var TE=s(Nn);ZLr=r(TE,"The model class to instantiate is selected based on the "),o6e=n(TE,"CODE",{});var J8t=s(o6e);e7r=r(J8t,"model_type"),J8t.forEach(t),o7r=r(TE,` property of the config object (either
passed as an argument or loaded from `),r6e=n(TE,"CODE",{});var Y8t=s(r6e);r7r=r(Y8t,"pretrained_model_name_or_path"),Y8t.forEach(t),t7r=r(TE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t6e=n(TE,"CODE",{});var K8t=s(t6e);a7r=r(K8t,"pretrained_model_name_or_path"),K8t.forEach(t),n7r=r(TE,":"),TE.forEach(t),s7r=i(Ia),a6e=n(Ia,"UL",{});var Z8t=s(a6e);zM=n(Z8t,"LI",{});var QSe=s(zM);n6e=n(QSe,"STRONG",{});var eMt=s(n6e);l7r=r(eMt,"speech-encoder-decoder"),eMt.forEach(t),i7r=r(QSe," \u2014 "),TH=n(QSe,"A",{href:!0});var oMt=s(TH);d7r=r(oMt,"FlaxSpeechEncoderDecoderModel"),oMt.forEach(t),c7r=r(QSe," (Speech Encoder decoder model)"),QSe.forEach(t),Z8t.forEach(t),f7r=i(Ia),s6e=n(Ia,"P",{});var rMt=s(s6e);m7r=r(rMt,"Examples:"),rMt.forEach(t),g7r=i(Ia),m(DL.$$.fragment,Ia),Ia.forEach(t),xi.forEach(t),hPe=i(c),yf=n(c,"H2",{class:!0});var yqe=s(yf);QM=n(yqe,"A",{id:!0,class:!0,href:!0});var tMt=s(QM);l6e=n(tMt,"SPAN",{});var aMt=s(l6e);m(GL.$$.fragment,aMt),aMt.forEach(t),tMt.forEach(t),h7r=i(yqe),i6e=n(yqe,"SPAN",{});var nMt=s(i6e);p7r=r(nMt,"FlaxAutoModelForQuestionAnswering"),nMt.forEach(t),yqe.forEach(t),pPe=i(c),Dr=n(c,"DIV",{class:!0});var Si=s(Dr);m(OL.$$.fragment,Si),_7r=i(Si),Lf=n(Si,"P",{});var ZJ=s(Lf);u7r=r(ZJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),MH=n(ZJ,"A",{href:!0});var sMt=s(MH);b7r=r(sMt,"from_pretrained()"),sMt.forEach(t),F7r=r(ZJ," class method or the "),EH=n(ZJ,"A",{href:!0});var lMt=s(EH);v7r=r(lMt,"from_config()"),lMt.forEach(t),T7r=r(ZJ,` class
method.`),ZJ.forEach(t),M7r=i(Si),VL=n(Si,"P",{});var Lqe=s(VL);E7r=r(Lqe,"This class cannot be instantiated directly using "),d6e=n(Lqe,"CODE",{});var iMt=s(d6e);C7r=r(iMt,"__init__()"),iMt.forEach(t),w7r=r(Lqe," (throws an error)."),Lqe.forEach(t),A7r=i(Si),$t=n(Si,"DIV",{class:!0});var Ri=s($t);m(XL.$$.fragment,Ri),y7r=i(Ri),c6e=n(Ri,"P",{});var dMt=s(c6e);L7r=r(dMt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),dMt.forEach(t),x7r=i(Ri),xf=n(Ri,"P",{});var eY=s(xf);k7r=r(eY,`Note:
Loading a model from its configuration file does `),f6e=n(eY,"STRONG",{});var cMt=s(f6e);S7r=r(cMt,"not"),cMt.forEach(t),R7r=r(eY,` load the model weights. It only affects the
model\u2019s configuration. Use `),CH=n(eY,"A",{href:!0});var fMt=s(CH);B7r=r(fMt,"from_pretrained()"),fMt.forEach(t),P7r=r(eY," to load the model weights."),eY.forEach(t),$7r=i(Ri),m6e=n(Ri,"P",{});var mMt=s(m6e);q7r=r(mMt,"Examples:"),mMt.forEach(t),I7r=i(Ri),m(zL.$$.fragment,Ri),Ri.forEach(t),j7r=i(Si),Po=n(Si,"DIV",{class:!0});var ja=s(Po);m(QL.$$.fragment,ja),N7r=i(ja),g6e=n(ja,"P",{});var gMt=s(g6e);D7r=r(gMt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),gMt.forEach(t),G7r=i(ja),Dn=n(ja,"P",{});var ME=s(Dn);O7r=r(ME,"The model class to instantiate is selected based on the "),h6e=n(ME,"CODE",{});var hMt=s(h6e);V7r=r(hMt,"model_type"),hMt.forEach(t),X7r=r(ME,` property of the config object (either
passed as an argument or loaded from `),p6e=n(ME,"CODE",{});var pMt=s(p6e);z7r=r(pMt,"pretrained_model_name_or_path"),pMt.forEach(t),Q7r=r(ME,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_6e=n(ME,"CODE",{});var _Mt=s(_6e);W7r=r(_Mt,"pretrained_model_name_or_path"),_Mt.forEach(t),H7r=r(ME,":"),ME.forEach(t),U7r=i(ja),ve=n(ja,"UL",{});var Le=s(ve);WM=n(Le,"LI",{});var WSe=s(WM);u6e=n(WSe,"STRONG",{});var uMt=s(u6e);J7r=r(uMt,"albert"),uMt.forEach(t),Y7r=r(WSe," \u2014 "),wH=n(WSe,"A",{href:!0});var bMt=s(wH);K7r=r(bMt,"FlaxAlbertForQuestionAnswering"),bMt.forEach(t),Z7r=r(WSe," (ALBERT model)"),WSe.forEach(t),e9r=i(Le),HM=n(Le,"LI",{});var HSe=s(HM);b6e=n(HSe,"STRONG",{});var FMt=s(b6e);o9r=r(FMt,"bart"),FMt.forEach(t),r9r=r(HSe," \u2014 "),AH=n(HSe,"A",{href:!0});var vMt=s(AH);t9r=r(vMt,"FlaxBartForQuestionAnswering"),vMt.forEach(t),a9r=r(HSe," (BART model)"),HSe.forEach(t),n9r=i(Le),UM=n(Le,"LI",{});var USe=s(UM);F6e=n(USe,"STRONG",{});var TMt=s(F6e);s9r=r(TMt,"bert"),TMt.forEach(t),l9r=r(USe," \u2014 "),yH=n(USe,"A",{href:!0});var MMt=s(yH);i9r=r(MMt,"FlaxBertForQuestionAnswering"),MMt.forEach(t),d9r=r(USe," (BERT model)"),USe.forEach(t),c9r=i(Le),JM=n(Le,"LI",{});var JSe=s(JM);v6e=n(JSe,"STRONG",{});var EMt=s(v6e);f9r=r(EMt,"big_bird"),EMt.forEach(t),m9r=r(JSe," \u2014 "),LH=n(JSe,"A",{href:!0});var CMt=s(LH);g9r=r(CMt,"FlaxBigBirdForQuestionAnswering"),CMt.forEach(t),h9r=r(JSe," (BigBird model)"),JSe.forEach(t),p9r=i(Le),YM=n(Le,"LI",{});var YSe=s(YM);T6e=n(YSe,"STRONG",{});var wMt=s(T6e);_9r=r(wMt,"distilbert"),wMt.forEach(t),u9r=r(YSe," \u2014 "),xH=n(YSe,"A",{href:!0});var AMt=s(xH);b9r=r(AMt,"FlaxDistilBertForQuestionAnswering"),AMt.forEach(t),F9r=r(YSe," (DistilBERT model)"),YSe.forEach(t),v9r=i(Le),KM=n(Le,"LI",{});var KSe=s(KM);M6e=n(KSe,"STRONG",{});var yMt=s(M6e);T9r=r(yMt,"electra"),yMt.forEach(t),M9r=r(KSe," \u2014 "),kH=n(KSe,"A",{href:!0});var LMt=s(kH);E9r=r(LMt,"FlaxElectraForQuestionAnswering"),LMt.forEach(t),C9r=r(KSe," (ELECTRA model)"),KSe.forEach(t),w9r=i(Le),ZM=n(Le,"LI",{});var ZSe=s(ZM);E6e=n(ZSe,"STRONG",{});var xMt=s(E6e);A9r=r(xMt,"mbart"),xMt.forEach(t),y9r=r(ZSe," \u2014 "),SH=n(ZSe,"A",{href:!0});var kMt=s(SH);L9r=r(kMt,"FlaxMBartForQuestionAnswering"),kMt.forEach(t),x9r=r(ZSe," (mBART model)"),ZSe.forEach(t),k9r=i(Le),e4=n(Le,"LI",{});var eRe=s(e4);C6e=n(eRe,"STRONG",{});var SMt=s(C6e);S9r=r(SMt,"roberta"),SMt.forEach(t),R9r=r(eRe," \u2014 "),RH=n(eRe,"A",{href:!0});var RMt=s(RH);B9r=r(RMt,"FlaxRobertaForQuestionAnswering"),RMt.forEach(t),P9r=r(eRe," (RoBERTa model)"),eRe.forEach(t),$9r=i(Le),o4=n(Le,"LI",{});var oRe=s(o4);w6e=n(oRe,"STRONG",{});var BMt=s(w6e);q9r=r(BMt,"roformer"),BMt.forEach(t),I9r=r(oRe," \u2014 "),BH=n(oRe,"A",{href:!0});var PMt=s(BH);j9r=r(PMt,"FlaxRoFormerForQuestionAnswering"),PMt.forEach(t),N9r=r(oRe," (RoFormer model)"),oRe.forEach(t),D9r=i(Le),r4=n(Le,"LI",{});var rRe=s(r4);A6e=n(rRe,"STRONG",{});var $Mt=s(A6e);G9r=r($Mt,"xlm-roberta"),$Mt.forEach(t),O9r=r(rRe," \u2014 "),PH=n(rRe,"A",{href:!0});var qMt=s(PH);V9r=r(qMt,"FlaxXLMRobertaForQuestionAnswering"),qMt.forEach(t),X9r=r(rRe," (XLM-RoBERTa model)"),rRe.forEach(t),Le.forEach(t),z9r=i(ja),y6e=n(ja,"P",{});var IMt=s(y6e);Q9r=r(IMt,"Examples:"),IMt.forEach(t),W9r=i(ja),m(WL.$$.fragment,ja),ja.forEach(t),Si.forEach(t),_Pe=i(c),kf=n(c,"H2",{class:!0});var xqe=s(kf);t4=n(xqe,"A",{id:!0,class:!0,href:!0});var jMt=s(t4);L6e=n(jMt,"SPAN",{});var NMt=s(L6e);m(HL.$$.fragment,NMt),NMt.forEach(t),jMt.forEach(t),H9r=i(xqe),x6e=n(xqe,"SPAN",{});var DMt=s(x6e);U9r=r(DMt,"FlaxAutoModelForTokenClassification"),DMt.forEach(t),xqe.forEach(t),uPe=i(c),Gr=n(c,"DIV",{class:!0});var Bi=s(Gr);m(UL.$$.fragment,Bi),J9r=i(Bi),Sf=n(Bi,"P",{});var oY=s(Sf);Y9r=r(oY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),$H=n(oY,"A",{href:!0});var GMt=s($H);K9r=r(GMt,"from_pretrained()"),GMt.forEach(t),Z9r=r(oY," class method or the "),qH=n(oY,"A",{href:!0});var OMt=s(qH);exr=r(OMt,"from_config()"),OMt.forEach(t),oxr=r(oY,` class
method.`),oY.forEach(t),rxr=i(Bi),JL=n(Bi,"P",{});var kqe=s(JL);txr=r(kqe,"This class cannot be instantiated directly using "),k6e=n(kqe,"CODE",{});var VMt=s(k6e);axr=r(VMt,"__init__()"),VMt.forEach(t),nxr=r(kqe," (throws an error)."),kqe.forEach(t),sxr=i(Bi),qt=n(Bi,"DIV",{class:!0});var Pi=s(qt);m(YL.$$.fragment,Pi),lxr=i(Pi),S6e=n(Pi,"P",{});var XMt=s(S6e);ixr=r(XMt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),XMt.forEach(t),dxr=i(Pi),Rf=n(Pi,"P",{});var rY=s(Rf);cxr=r(rY,`Note:
Loading a model from its configuration file does `),R6e=n(rY,"STRONG",{});var zMt=s(R6e);fxr=r(zMt,"not"),zMt.forEach(t),mxr=r(rY,` load the model weights. It only affects the
model\u2019s configuration. Use `),IH=n(rY,"A",{href:!0});var QMt=s(IH);gxr=r(QMt,"from_pretrained()"),QMt.forEach(t),hxr=r(rY," to load the model weights."),rY.forEach(t),pxr=i(Pi),B6e=n(Pi,"P",{});var WMt=s(B6e);_xr=r(WMt,"Examples:"),WMt.forEach(t),uxr=i(Pi),m(KL.$$.fragment,Pi),Pi.forEach(t),bxr=i(Bi),$o=n(Bi,"DIV",{class:!0});var Na=s($o);m(ZL.$$.fragment,Na),Fxr=i(Na),P6e=n(Na,"P",{});var HMt=s(P6e);vxr=r(HMt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),HMt.forEach(t),Txr=i(Na),Gn=n(Na,"P",{});var EE=s(Gn);Mxr=r(EE,"The model class to instantiate is selected based on the "),$6e=n(EE,"CODE",{});var UMt=s($6e);Exr=r(UMt,"model_type"),UMt.forEach(t),Cxr=r(EE,` property of the config object (either
passed as an argument or loaded from `),q6e=n(EE,"CODE",{});var JMt=s(q6e);wxr=r(JMt,"pretrained_model_name_or_path"),JMt.forEach(t),Axr=r(EE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I6e=n(EE,"CODE",{});var YMt=s(I6e);yxr=r(YMt,"pretrained_model_name_or_path"),YMt.forEach(t),Lxr=r(EE,":"),EE.forEach(t),xxr=i(Na),Be=n(Na,"UL",{});var Vo=s(Be);a4=n(Vo,"LI",{});var tRe=s(a4);j6e=n(tRe,"STRONG",{});var KMt=s(j6e);kxr=r(KMt,"albert"),KMt.forEach(t),Sxr=r(tRe," \u2014 "),jH=n(tRe,"A",{href:!0});var ZMt=s(jH);Rxr=r(ZMt,"FlaxAlbertForTokenClassification"),ZMt.forEach(t),Bxr=r(tRe," (ALBERT model)"),tRe.forEach(t),Pxr=i(Vo),n4=n(Vo,"LI",{});var aRe=s(n4);N6e=n(aRe,"STRONG",{});var e4t=s(N6e);$xr=r(e4t,"bert"),e4t.forEach(t),qxr=r(aRe," \u2014 "),NH=n(aRe,"A",{href:!0});var o4t=s(NH);Ixr=r(o4t,"FlaxBertForTokenClassification"),o4t.forEach(t),jxr=r(aRe," (BERT model)"),aRe.forEach(t),Nxr=i(Vo),s4=n(Vo,"LI",{});var nRe=s(s4);D6e=n(nRe,"STRONG",{});var r4t=s(D6e);Dxr=r(r4t,"big_bird"),r4t.forEach(t),Gxr=r(nRe," \u2014 "),DH=n(nRe,"A",{href:!0});var t4t=s(DH);Oxr=r(t4t,"FlaxBigBirdForTokenClassification"),t4t.forEach(t),Vxr=r(nRe," (BigBird model)"),nRe.forEach(t),Xxr=i(Vo),l4=n(Vo,"LI",{});var sRe=s(l4);G6e=n(sRe,"STRONG",{});var a4t=s(G6e);zxr=r(a4t,"distilbert"),a4t.forEach(t),Qxr=r(sRe," \u2014 "),GH=n(sRe,"A",{href:!0});var n4t=s(GH);Wxr=r(n4t,"FlaxDistilBertForTokenClassification"),n4t.forEach(t),Hxr=r(sRe," (DistilBERT model)"),sRe.forEach(t),Uxr=i(Vo),i4=n(Vo,"LI",{});var lRe=s(i4);O6e=n(lRe,"STRONG",{});var s4t=s(O6e);Jxr=r(s4t,"electra"),s4t.forEach(t),Yxr=r(lRe," \u2014 "),OH=n(lRe,"A",{href:!0});var l4t=s(OH);Kxr=r(l4t,"FlaxElectraForTokenClassification"),l4t.forEach(t),Zxr=r(lRe," (ELECTRA model)"),lRe.forEach(t),ekr=i(Vo),d4=n(Vo,"LI",{});var iRe=s(d4);V6e=n(iRe,"STRONG",{});var i4t=s(V6e);okr=r(i4t,"roberta"),i4t.forEach(t),rkr=r(iRe," \u2014 "),VH=n(iRe,"A",{href:!0});var d4t=s(VH);tkr=r(d4t,"FlaxRobertaForTokenClassification"),d4t.forEach(t),akr=r(iRe," (RoBERTa model)"),iRe.forEach(t),nkr=i(Vo),c4=n(Vo,"LI",{});var dRe=s(c4);X6e=n(dRe,"STRONG",{});var c4t=s(X6e);skr=r(c4t,"roformer"),c4t.forEach(t),lkr=r(dRe," \u2014 "),XH=n(dRe,"A",{href:!0});var f4t=s(XH);ikr=r(f4t,"FlaxRoFormerForTokenClassification"),f4t.forEach(t),dkr=r(dRe," (RoFormer model)"),dRe.forEach(t),ckr=i(Vo),f4=n(Vo,"LI",{});var cRe=s(f4);z6e=n(cRe,"STRONG",{});var m4t=s(z6e);fkr=r(m4t,"xlm-roberta"),m4t.forEach(t),mkr=r(cRe," \u2014 "),zH=n(cRe,"A",{href:!0});var g4t=s(zH);gkr=r(g4t,"FlaxXLMRobertaForTokenClassification"),g4t.forEach(t),hkr=r(cRe," (XLM-RoBERTa model)"),cRe.forEach(t),Vo.forEach(t),pkr=i(Na),Q6e=n(Na,"P",{});var h4t=s(Q6e);_kr=r(h4t,"Examples:"),h4t.forEach(t),ukr=i(Na),m(e7.$$.fragment,Na),Na.forEach(t),Bi.forEach(t),bPe=i(c),Bf=n(c,"H2",{class:!0});var Sqe=s(Bf);m4=n(Sqe,"A",{id:!0,class:!0,href:!0});var p4t=s(m4);W6e=n(p4t,"SPAN",{});var _4t=s(W6e);m(o7.$$.fragment,_4t),_4t.forEach(t),p4t.forEach(t),bkr=i(Sqe),H6e=n(Sqe,"SPAN",{});var u4t=s(H6e);Fkr=r(u4t,"FlaxAutoModelForMultipleChoice"),u4t.forEach(t),Sqe.forEach(t),FPe=i(c),Or=n(c,"DIV",{class:!0});var $i=s(Or);m(r7.$$.fragment,$i),vkr=i($i),Pf=n($i,"P",{});var tY=s(Pf);Tkr=r(tY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),QH=n(tY,"A",{href:!0});var b4t=s(QH);Mkr=r(b4t,"from_pretrained()"),b4t.forEach(t),Ekr=r(tY," class method or the "),WH=n(tY,"A",{href:!0});var F4t=s(WH);Ckr=r(F4t,"from_config()"),F4t.forEach(t),wkr=r(tY,` class
method.`),tY.forEach(t),Akr=i($i),t7=n($i,"P",{});var Rqe=s(t7);ykr=r(Rqe,"This class cannot be instantiated directly using "),U6e=n(Rqe,"CODE",{});var v4t=s(U6e);Lkr=r(v4t,"__init__()"),v4t.forEach(t),xkr=r(Rqe," (throws an error)."),Rqe.forEach(t),kkr=i($i),It=n($i,"DIV",{class:!0});var qi=s(It);m(a7.$$.fragment,qi),Skr=i(qi),J6e=n(qi,"P",{});var T4t=s(J6e);Rkr=r(T4t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),T4t.forEach(t),Bkr=i(qi),$f=n(qi,"P",{});var aY=s($f);Pkr=r(aY,`Note:
Loading a model from its configuration file does `),Y6e=n(aY,"STRONG",{});var M4t=s(Y6e);$kr=r(M4t,"not"),M4t.forEach(t),qkr=r(aY,` load the model weights. It only affects the
model\u2019s configuration. Use `),HH=n(aY,"A",{href:!0});var E4t=s(HH);Ikr=r(E4t,"from_pretrained()"),E4t.forEach(t),jkr=r(aY," to load the model weights."),aY.forEach(t),Nkr=i(qi),K6e=n(qi,"P",{});var C4t=s(K6e);Dkr=r(C4t,"Examples:"),C4t.forEach(t),Gkr=i(qi),m(n7.$$.fragment,qi),qi.forEach(t),Okr=i($i),qo=n($i,"DIV",{class:!0});var Da=s(qo);m(s7.$$.fragment,Da),Vkr=i(Da),Z6e=n(Da,"P",{});var w4t=s(Z6e);Xkr=r(w4t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),w4t.forEach(t),zkr=i(Da),On=n(Da,"P",{});var CE=s(On);Qkr=r(CE,"The model class to instantiate is selected based on the "),e0e=n(CE,"CODE",{});var A4t=s(e0e);Wkr=r(A4t,"model_type"),A4t.forEach(t),Hkr=r(CE,` property of the config object (either
passed as an argument or loaded from `),o0e=n(CE,"CODE",{});var y4t=s(o0e);Ukr=r(y4t,"pretrained_model_name_or_path"),y4t.forEach(t),Jkr=r(CE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r0e=n(CE,"CODE",{});var L4t=s(r0e);Ykr=r(L4t,"pretrained_model_name_or_path"),L4t.forEach(t),Kkr=r(CE,":"),CE.forEach(t),Zkr=i(Da),Pe=n(Da,"UL",{});var Xo=s(Pe);g4=n(Xo,"LI",{});var fRe=s(g4);t0e=n(fRe,"STRONG",{});var x4t=s(t0e);eSr=r(x4t,"albert"),x4t.forEach(t),oSr=r(fRe," \u2014 "),UH=n(fRe,"A",{href:!0});var k4t=s(UH);rSr=r(k4t,"FlaxAlbertForMultipleChoice"),k4t.forEach(t),tSr=r(fRe," (ALBERT model)"),fRe.forEach(t),aSr=i(Xo),h4=n(Xo,"LI",{});var mRe=s(h4);a0e=n(mRe,"STRONG",{});var S4t=s(a0e);nSr=r(S4t,"bert"),S4t.forEach(t),sSr=r(mRe," \u2014 "),JH=n(mRe,"A",{href:!0});var R4t=s(JH);lSr=r(R4t,"FlaxBertForMultipleChoice"),R4t.forEach(t),iSr=r(mRe," (BERT model)"),mRe.forEach(t),dSr=i(Xo),p4=n(Xo,"LI",{});var gRe=s(p4);n0e=n(gRe,"STRONG",{});var B4t=s(n0e);cSr=r(B4t,"big_bird"),B4t.forEach(t),fSr=r(gRe," \u2014 "),YH=n(gRe,"A",{href:!0});var P4t=s(YH);mSr=r(P4t,"FlaxBigBirdForMultipleChoice"),P4t.forEach(t),gSr=r(gRe," (BigBird model)"),gRe.forEach(t),hSr=i(Xo),_4=n(Xo,"LI",{});var hRe=s(_4);s0e=n(hRe,"STRONG",{});var $4t=s(s0e);pSr=r($4t,"distilbert"),$4t.forEach(t),_Sr=r(hRe," \u2014 "),KH=n(hRe,"A",{href:!0});var q4t=s(KH);uSr=r(q4t,"FlaxDistilBertForMultipleChoice"),q4t.forEach(t),bSr=r(hRe," (DistilBERT model)"),hRe.forEach(t),FSr=i(Xo),u4=n(Xo,"LI",{});var pRe=s(u4);l0e=n(pRe,"STRONG",{});var I4t=s(l0e);vSr=r(I4t,"electra"),I4t.forEach(t),TSr=r(pRe," \u2014 "),ZH=n(pRe,"A",{href:!0});var j4t=s(ZH);MSr=r(j4t,"FlaxElectraForMultipleChoice"),j4t.forEach(t),ESr=r(pRe," (ELECTRA model)"),pRe.forEach(t),CSr=i(Xo),b4=n(Xo,"LI",{});var _Re=s(b4);i0e=n(_Re,"STRONG",{});var N4t=s(i0e);wSr=r(N4t,"roberta"),N4t.forEach(t),ASr=r(_Re," \u2014 "),eU=n(_Re,"A",{href:!0});var D4t=s(eU);ySr=r(D4t,"FlaxRobertaForMultipleChoice"),D4t.forEach(t),LSr=r(_Re," (RoBERTa model)"),_Re.forEach(t),xSr=i(Xo),F4=n(Xo,"LI",{});var uRe=s(F4);d0e=n(uRe,"STRONG",{});var G4t=s(d0e);kSr=r(G4t,"roformer"),G4t.forEach(t),SSr=r(uRe," \u2014 "),oU=n(uRe,"A",{href:!0});var O4t=s(oU);RSr=r(O4t,"FlaxRoFormerForMultipleChoice"),O4t.forEach(t),BSr=r(uRe," (RoFormer model)"),uRe.forEach(t),PSr=i(Xo),v4=n(Xo,"LI",{});var bRe=s(v4);c0e=n(bRe,"STRONG",{});var V4t=s(c0e);$Sr=r(V4t,"xlm-roberta"),V4t.forEach(t),qSr=r(bRe," \u2014 "),rU=n(bRe,"A",{href:!0});var X4t=s(rU);ISr=r(X4t,"FlaxXLMRobertaForMultipleChoice"),X4t.forEach(t),jSr=r(bRe," (XLM-RoBERTa model)"),bRe.forEach(t),Xo.forEach(t),NSr=i(Da),f0e=n(Da,"P",{});var z4t=s(f0e);DSr=r(z4t,"Examples:"),z4t.forEach(t),GSr=i(Da),m(l7.$$.fragment,Da),Da.forEach(t),$i.forEach(t),vPe=i(c),qf=n(c,"H2",{class:!0});var Bqe=s(qf);T4=n(Bqe,"A",{id:!0,class:!0,href:!0});var Q4t=s(T4);m0e=n(Q4t,"SPAN",{});var W4t=s(m0e);m(i7.$$.fragment,W4t),W4t.forEach(t),Q4t.forEach(t),OSr=i(Bqe),g0e=n(Bqe,"SPAN",{});var H4t=s(g0e);VSr=r(H4t,"FlaxAutoModelForNextSentencePrediction"),H4t.forEach(t),Bqe.forEach(t),TPe=i(c),Vr=n(c,"DIV",{class:!0});var Ii=s(Vr);m(d7.$$.fragment,Ii),XSr=i(Ii),If=n(Ii,"P",{});var nY=s(If);zSr=r(nY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),tU=n(nY,"A",{href:!0});var U4t=s(tU);QSr=r(U4t,"from_pretrained()"),U4t.forEach(t),WSr=r(nY," class method or the "),aU=n(nY,"A",{href:!0});var J4t=s(aU);HSr=r(J4t,"from_config()"),J4t.forEach(t),USr=r(nY,` class
method.`),nY.forEach(t),JSr=i(Ii),c7=n(Ii,"P",{});var Pqe=s(c7);YSr=r(Pqe,"This class cannot be instantiated directly using "),h0e=n(Pqe,"CODE",{});var Y4t=s(h0e);KSr=r(Y4t,"__init__()"),Y4t.forEach(t),ZSr=r(Pqe," (throws an error)."),Pqe.forEach(t),eRr=i(Ii),jt=n(Ii,"DIV",{class:!0});var ji=s(jt);m(f7.$$.fragment,ji),oRr=i(ji),p0e=n(ji,"P",{});var K4t=s(p0e);rRr=r(K4t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),K4t.forEach(t),tRr=i(ji),jf=n(ji,"P",{});var sY=s(jf);aRr=r(sY,`Note:
Loading a model from its configuration file does `),_0e=n(sY,"STRONG",{});var Z4t=s(_0e);nRr=r(Z4t,"not"),Z4t.forEach(t),sRr=r(sY,` load the model weights. It only affects the
model\u2019s configuration. Use `),nU=n(sY,"A",{href:!0});var eEt=s(nU);lRr=r(eEt,"from_pretrained()"),eEt.forEach(t),iRr=r(sY," to load the model weights."),sY.forEach(t),dRr=i(ji),u0e=n(ji,"P",{});var oEt=s(u0e);cRr=r(oEt,"Examples:"),oEt.forEach(t),fRr=i(ji),m(m7.$$.fragment,ji),ji.forEach(t),mRr=i(Ii),Io=n(Ii,"DIV",{class:!0});var Ga=s(Io);m(g7.$$.fragment,Ga),gRr=i(Ga),b0e=n(Ga,"P",{});var rEt=s(b0e);hRr=r(rEt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),rEt.forEach(t),pRr=i(Ga),Vn=n(Ga,"P",{});var wE=s(Vn);_Rr=r(wE,"The model class to instantiate is selected based on the "),F0e=n(wE,"CODE",{});var tEt=s(F0e);uRr=r(tEt,"model_type"),tEt.forEach(t),bRr=r(wE,` property of the config object (either
passed as an argument or loaded from `),v0e=n(wE,"CODE",{});var aEt=s(v0e);FRr=r(aEt,"pretrained_model_name_or_path"),aEt.forEach(t),vRr=r(wE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T0e=n(wE,"CODE",{});var nEt=s(T0e);TRr=r(nEt,"pretrained_model_name_or_path"),nEt.forEach(t),MRr=r(wE,":"),wE.forEach(t),ERr=i(Ga),M0e=n(Ga,"UL",{});var sEt=s(M0e);M4=n(sEt,"LI",{});var FRe=s(M4);E0e=n(FRe,"STRONG",{});var lEt=s(E0e);CRr=r(lEt,"bert"),lEt.forEach(t),wRr=r(FRe," \u2014 "),sU=n(FRe,"A",{href:!0});var iEt=s(sU);ARr=r(iEt,"FlaxBertForNextSentencePrediction"),iEt.forEach(t),yRr=r(FRe," (BERT model)"),FRe.forEach(t),sEt.forEach(t),LRr=i(Ga),C0e=n(Ga,"P",{});var dEt=s(C0e);xRr=r(dEt,"Examples:"),dEt.forEach(t),kRr=i(Ga),m(h7.$$.fragment,Ga),Ga.forEach(t),Ii.forEach(t),MPe=i(c),Nf=n(c,"H2",{class:!0});var $qe=s(Nf);E4=n($qe,"A",{id:!0,class:!0,href:!0});var cEt=s(E4);w0e=n(cEt,"SPAN",{});var fEt=s(w0e);m(p7.$$.fragment,fEt),fEt.forEach(t),cEt.forEach(t),SRr=i($qe),A0e=n($qe,"SPAN",{});var mEt=s(A0e);RRr=r(mEt,"FlaxAutoModelForImageClassification"),mEt.forEach(t),$qe.forEach(t),EPe=i(c),Xr=n(c,"DIV",{class:!0});var Ni=s(Xr);m(_7.$$.fragment,Ni),BRr=i(Ni),Df=n(Ni,"P",{});var lY=s(Df);PRr=r(lY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),lU=n(lY,"A",{href:!0});var gEt=s(lU);$Rr=r(gEt,"from_pretrained()"),gEt.forEach(t),qRr=r(lY," class method or the "),iU=n(lY,"A",{href:!0});var hEt=s(iU);IRr=r(hEt,"from_config()"),hEt.forEach(t),jRr=r(lY,` class
method.`),lY.forEach(t),NRr=i(Ni),u7=n(Ni,"P",{});var qqe=s(u7);DRr=r(qqe,"This class cannot be instantiated directly using "),y0e=n(qqe,"CODE",{});var pEt=s(y0e);GRr=r(pEt,"__init__()"),pEt.forEach(t),ORr=r(qqe," (throws an error)."),qqe.forEach(t),VRr=i(Ni),Nt=n(Ni,"DIV",{class:!0});var Di=s(Nt);m(b7.$$.fragment,Di),XRr=i(Di),L0e=n(Di,"P",{});var _Et=s(L0e);zRr=r(_Et,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),_Et.forEach(t),QRr=i(Di),Gf=n(Di,"P",{});var iY=s(Gf);WRr=r(iY,`Note:
Loading a model from its configuration file does `),x0e=n(iY,"STRONG",{});var uEt=s(x0e);HRr=r(uEt,"not"),uEt.forEach(t),URr=r(iY,` load the model weights. It only affects the
model\u2019s configuration. Use `),dU=n(iY,"A",{href:!0});var bEt=s(dU);JRr=r(bEt,"from_pretrained()"),bEt.forEach(t),YRr=r(iY," to load the model weights."),iY.forEach(t),KRr=i(Di),k0e=n(Di,"P",{});var FEt=s(k0e);ZRr=r(FEt,"Examples:"),FEt.forEach(t),eBr=i(Di),m(F7.$$.fragment,Di),Di.forEach(t),oBr=i(Ni),jo=n(Ni,"DIV",{class:!0});var Oa=s(jo);m(v7.$$.fragment,Oa),rBr=i(Oa),S0e=n(Oa,"P",{});var vEt=s(S0e);tBr=r(vEt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),vEt.forEach(t),aBr=i(Oa),Xn=n(Oa,"P",{});var AE=s(Xn);nBr=r(AE,"The model class to instantiate is selected based on the "),R0e=n(AE,"CODE",{});var TEt=s(R0e);sBr=r(TEt,"model_type"),TEt.forEach(t),lBr=r(AE,` property of the config object (either
passed as an argument or loaded from `),B0e=n(AE,"CODE",{});var MEt=s(B0e);iBr=r(MEt,"pretrained_model_name_or_path"),MEt.forEach(t),dBr=r(AE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P0e=n(AE,"CODE",{});var EEt=s(P0e);cBr=r(EEt,"pretrained_model_name_or_path"),EEt.forEach(t),fBr=r(AE,":"),AE.forEach(t),mBr=i(Oa),T7=n(Oa,"UL",{});var Iqe=s(T7);C4=n(Iqe,"LI",{});var vRe=s(C4);$0e=n(vRe,"STRONG",{});var CEt=s($0e);gBr=r(CEt,"beit"),CEt.forEach(t),hBr=r(vRe," \u2014 "),cU=n(vRe,"A",{href:!0});var wEt=s(cU);pBr=r(wEt,"FlaxBeitForImageClassification"),wEt.forEach(t),_Br=r(vRe," (BEiT model)"),vRe.forEach(t),uBr=i(Iqe),w4=n(Iqe,"LI",{});var TRe=s(w4);q0e=n(TRe,"STRONG",{});var AEt=s(q0e);bBr=r(AEt,"vit"),AEt.forEach(t),FBr=r(TRe," \u2014 "),fU=n(TRe,"A",{href:!0});var yEt=s(fU);vBr=r(yEt,"FlaxViTForImageClassification"),yEt.forEach(t),TBr=r(TRe," (ViT model)"),TRe.forEach(t),Iqe.forEach(t),MBr=i(Oa),I0e=n(Oa,"P",{});var LEt=s(I0e);EBr=r(LEt,"Examples:"),LEt.forEach(t),CBr=i(Oa),m(M7.$$.fragment,Oa),Oa.forEach(t),Ni.forEach(t),CPe=i(c),Of=n(c,"H2",{class:!0});var jqe=s(Of);A4=n(jqe,"A",{id:!0,class:!0,href:!0});var xEt=s(A4);j0e=n(xEt,"SPAN",{});var kEt=s(j0e);m(E7.$$.fragment,kEt),kEt.forEach(t),xEt.forEach(t),wBr=i(jqe),N0e=n(jqe,"SPAN",{});var SEt=s(N0e);ABr=r(SEt,"FlaxAutoModelForVision2Seq"),SEt.forEach(t),jqe.forEach(t),wPe=i(c),zr=n(c,"DIV",{class:!0});var Gi=s(zr);m(C7.$$.fragment,Gi),yBr=i(Gi),Vf=n(Gi,"P",{});var dY=s(Vf);LBr=r(dY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),mU=n(dY,"A",{href:!0});var REt=s(mU);xBr=r(REt,"from_pretrained()"),REt.forEach(t),kBr=r(dY," class method or the "),gU=n(dY,"A",{href:!0});var BEt=s(gU);SBr=r(BEt,"from_config()"),BEt.forEach(t),RBr=r(dY,` class
method.`),dY.forEach(t),BBr=i(Gi),w7=n(Gi,"P",{});var Nqe=s(w7);PBr=r(Nqe,"This class cannot be instantiated directly using "),D0e=n(Nqe,"CODE",{});var PEt=s(D0e);$Br=r(PEt,"__init__()"),PEt.forEach(t),qBr=r(Nqe," (throws an error)."),Nqe.forEach(t),IBr=i(Gi),Dt=n(Gi,"DIV",{class:!0});var Oi=s(Dt);m(A7.$$.fragment,Oi),jBr=i(Oi),G0e=n(Oi,"P",{});var $Et=s(G0e);NBr=r($Et,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),$Et.forEach(t),DBr=i(Oi),Xf=n(Oi,"P",{});var cY=s(Xf);GBr=r(cY,`Note:
Loading a model from its configuration file does `),O0e=n(cY,"STRONG",{});var qEt=s(O0e);OBr=r(qEt,"not"),qEt.forEach(t),VBr=r(cY,` load the model weights. It only affects the
model\u2019s configuration. Use `),hU=n(cY,"A",{href:!0});var IEt=s(hU);XBr=r(IEt,"from_pretrained()"),IEt.forEach(t),zBr=r(cY," to load the model weights."),cY.forEach(t),QBr=i(Oi),V0e=n(Oi,"P",{});var jEt=s(V0e);WBr=r(jEt,"Examples:"),jEt.forEach(t),HBr=i(Oi),m(y7.$$.fragment,Oi),Oi.forEach(t),UBr=i(Gi),No=n(Gi,"DIV",{class:!0});var Va=s(No);m(L7.$$.fragment,Va),JBr=i(Va),X0e=n(Va,"P",{});var NEt=s(X0e);YBr=r(NEt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),NEt.forEach(t),KBr=i(Va),zn=n(Va,"P",{});var yE=s(zn);ZBr=r(yE,"The model class to instantiate is selected based on the "),z0e=n(yE,"CODE",{});var DEt=s(z0e);ePr=r(DEt,"model_type"),DEt.forEach(t),oPr=r(yE,` property of the config object (either
passed as an argument or loaded from `),Q0e=n(yE,"CODE",{});var GEt=s(Q0e);rPr=r(GEt,"pretrained_model_name_or_path"),GEt.forEach(t),tPr=r(yE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W0e=n(yE,"CODE",{});var OEt=s(W0e);aPr=r(OEt,"pretrained_model_name_or_path"),OEt.forEach(t),nPr=r(yE,":"),yE.forEach(t),sPr=i(Va),H0e=n(Va,"UL",{});var VEt=s(H0e);y4=n(VEt,"LI",{});var MRe=s(y4);U0e=n(MRe,"STRONG",{});var XEt=s(U0e);lPr=r(XEt,"vision-encoder-decoder"),XEt.forEach(t),iPr=r(MRe," \u2014 "),pU=n(MRe,"A",{href:!0});var zEt=s(pU);dPr=r(zEt,"FlaxVisionEncoderDecoderModel"),zEt.forEach(t),cPr=r(MRe," (Vision Encoder decoder model)"),MRe.forEach(t),VEt.forEach(t),fPr=i(Va),J0e=n(Va,"P",{});var QEt=s(J0e);mPr=r(QEt,"Examples:"),QEt.forEach(t),gPr=i(Va),m(x7.$$.fragment,Va),Va.forEach(t),Gi.forEach(t),this.h()},h(){d(Z,"name","hf:doc:metadata"),d(Z,"content",JSON.stringify(rCt)),d(Ce,"id","auto-classes"),d(Ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ce,"href","#auto-classes"),d(de,"class","relative group"),d(Qn,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.AutoConfig"),d(Hn,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.AutoModel"),d(Un,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.AutoTokenizer"),d(Ui,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertModel"),d(Yf,"id","extending-the-auto-classes"),d(Yf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Yf,"href","#extending-the-auto-classes"),d(Ji,"class","relative group"),d(Zf,"id","transformers.AutoConfig"),d(Zf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Zf,"href","#transformers.AutoConfig"),d(Yi,"class","relative group"),d(B9,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d(P9,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig"),d($9,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig"),d(q9,"href","/docs/transformers/pr_16058/en/model_doc/beit#transformers.BeitConfig"),d(I9,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig"),d(j9,"href","/docs/transformers/pr_16058/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d(N9,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig"),d(D9,"href","/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d(G9,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d(O9,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d(V9,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig"),d(X9,"href","/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineConfig"),d(z9,"href","/docs/transformers/pr_16058/en/model_doc/clip#transformers.CLIPConfig"),d(Q9,"href","/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertConfig"),d(W9,"href","/docs/transformers/pr_16058/en/model_doc/convnext#transformers.ConvNextConfig"),d(H9,"href","/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLConfig"),d(U9,"href","/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(J9,"href","/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d(Y9,"href","/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaConfig"),d(K9,"href","/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d(Z9,"href","/docs/transformers/pr_16058/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),d(ex,"href","/docs/transformers/pr_16058/en/model_doc/deit#transformers.DeiTConfig"),d(ox,"href","/docs/transformers/pr_16058/en/model_doc/detr#transformers.DetrConfig"),d(rx,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig"),d(tx,"href","/docs/transformers/pr_16058/en/model_doc/dpr#transformers.DPRConfig"),d(ax,"href","/docs/transformers/pr_16058/en/model_doc/dpt#transformers.DPTConfig"),d(nx,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig"),d(sx,"href","/docs/transformers/pr_16058/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d(lx,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertConfig"),d(ix,"href","/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetConfig"),d(dx,"href","/docs/transformers/pr_16058/en/model_doc/fsmt#transformers.FSMTConfig"),d(cx,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelConfig"),d(fx,"href","/docs/transformers/pr_16058/en/model_doc/glpn#transformers.GLPNConfig"),d(mx,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Config"),d(gx,"href","/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d(hx,"href","/docs/transformers/pr_16058/en/model_doc/gptj#transformers.GPTJConfig"),d(px,"href","/docs/transformers/pr_16058/en/model_doc/hubert#transformers.HubertConfig"),d(_x,"href","/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertConfig"),d(ux,"href","/docs/transformers/pr_16058/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(bx,"href","/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(Fx,"href","/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(vx,"href","/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDConfig"),d(Tx,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerConfig"),d(Mx,"href","/docs/transformers/pr_16058/en/model_doc/luke#transformers.LukeConfig"),d(Ex,"href","/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.LxmertConfig"),d(Cx,"href","/docs/transformers/pr_16058/en/model_doc/m2m_100#transformers.M2M100Config"),d(wx,"href","/docs/transformers/pr_16058/en/model_doc/marian#transformers.MarianConfig"),d(Ax,"href","/docs/transformers/pr_16058/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(yx,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartConfig"),d(Lx,"href","/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(xx,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig"),d(kx,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetConfig"),d(Sx,"href","/docs/transformers/pr_16058/en/model_doc/mt5#transformers.MT5Config"),d(Rx,"href","/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(Bx,"href","/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(Px,"href","/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusConfig"),d($x,"href","/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverConfig"),d(qx,"href","/docs/transformers/pr_16058/en/model_doc/plbart#transformers.PLBartConfig"),d(Ix,"href","/docs/transformers/pr_16058/en/model_doc/poolformer#transformers.PoolFormerConfig"),d(jx,"href","/docs/transformers/pr_16058/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d(Nx,"href","/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertConfig"),d(Dx,"href","/docs/transformers/pr_16058/en/model_doc/rag#transformers.RagConfig"),d(Gx,"href","/docs/transformers/pr_16058/en/model_doc/realm#transformers.RealmConfig"),d(Ox,"href","/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerConfig"),d(Vx,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertConfig"),d(Xx,"href","/docs/transformers/pr_16058/en/model_doc/resnet#transformers.ResNetConfig"),d(zx,"href","/docs/transformers/pr_16058/en/model_doc/retribert#transformers.RetriBertConfig"),d(Qx,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig"),d(Wx,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig"),d(Hx,"href","/docs/transformers/pr_16058/en/model_doc/segformer#transformers.SegformerConfig"),d(Ux,"href","/docs/transformers/pr_16058/en/model_doc/sew#transformers.SEWConfig"),d(Jx,"href","/docs/transformers/pr_16058/en/model_doc/sew-d#transformers.SEWDConfig"),d(Yx,"href","/docs/transformers/pr_16058/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d(Kx,"href","/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d(Zx,"href","/docs/transformers/pr_16058/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d(ek,"href","/docs/transformers/pr_16058/en/model_doc/splinter#transformers.SplinterConfig"),d(ok,"href","/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d(rk,"href","/docs/transformers/pr_16058/en/model_doc/swin#transformers.SwinConfig"),d(tk,"href","/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5Config"),d(ak,"href","/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasConfig"),d(nk,"href","/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d(sk,"href","/docs/transformers/pr_16058/en/model_doc/trocr#transformers.TrOCRConfig"),d(lk,"href","/docs/transformers/pr_16058/en/model_doc/unispeech#transformers.UniSpeechConfig"),d(ik,"href","/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(dk,"href","/docs/transformers/pr_16058/en/model_doc/van#transformers.VanConfig"),d(ck,"href","/docs/transformers/pr_16058/en/model_doc/vilt#transformers.ViltConfig"),d(fk,"href","/docs/transformers/pr_16058/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d(mk,"href","/docs/transformers/pr_16058/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d(gk,"href","/docs/transformers/pr_16058/en/model_doc/visual_bert#transformers.VisualBertConfig"),d(hk,"href","/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTConfig"),d(pk,"href","/docs/transformers/pr_16058/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(_k,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d(uk,"href","/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMConfig"),d(bk,"href","/docs/transformers/pr_16058/en/model_doc/xglm#transformers.XGLMConfig"),d(Fk,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig"),d(vk,"href","/docs/transformers/pr_16058/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(Tk,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d(Mk,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d(Ek,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetConfig"),d(Ck,"href","/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoConfig"),d(mo,"class","docstring"),d(zg,"class","docstring"),d(Wo,"class","docstring"),d(Qg,"id","transformers.AutoTokenizer"),d(Qg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Qg,"href","#transformers.AutoTokenizer"),d(Zi,"class","relative group"),d(wk,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(Ak,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertTokenizer"),d(yk,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(Lk,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartTokenizer"),d(xk,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartTokenizerFast"),d(kk,"href","/docs/transformers/pr_16058/en/model_doc/barthez#transformers.BarthezTokenizer"),d(Sk,"href","/docs/transformers/pr_16058/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(Rk,"href","/docs/transformers/pr_16058/en/model_doc/bartpho#transformers.BartphoTokenizer"),d(Bk,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertTokenizer"),d(Pk,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertTokenizerFast"),d($k,"href","/docs/transformers/pr_16058/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d(qk,"href","/docs/transformers/pr_16058/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d(Ik,"href","/docs/transformers/pr_16058/en/model_doc/bertweet#transformers.BertweetTokenizer"),d(jk,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d(Nk,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d(Dk,"href","/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(Gk,"href","/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(Ok,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d(Vk,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d(Xk,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d(zk,"href","/docs/transformers/pr_16058/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(Qk,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertTokenizer"),d(Wk,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(Hk,"href","/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineTokenizer"),d(Uk,"href","/docs/transformers/pr_16058/en/model_doc/clip#transformers.CLIPTokenizer"),d(Jk,"href","/docs/transformers/pr_16058/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(Yk,"href","/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertTokenizer"),d(Kk,"href","/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d(Zk,"href","/docs/transformers/pr_16058/en/model_doc/cpm#transformers.CpmTokenizer"),d(eS,"href","/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLTokenizer"),d(oS,"href","/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaTokenizer"),d(rS,"href","/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d(tS,"href","/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d(aS,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d(nS,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d(sS,"href","/docs/transformers/pr_16058/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d(lS,"href","/docs/transformers/pr_16058/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(iS,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraTokenizer"),d(dS,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraTokenizerFast"),d(cS,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d(fS,"href","/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetTokenizer"),d(mS,"href","/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(gS,"href","/docs/transformers/pr_16058/en/model_doc/fsmt#transformers.FSMTTokenizer"),d(hS,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelTokenizer"),d(pS,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(_S,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(uS,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(bS,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(FS,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(vS,"href","/docs/transformers/pr_16058/en/model_doc/herbert#transformers.HerbertTokenizer"),d(TS,"href","/docs/transformers/pr_16058/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d(MS,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(ES,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaTokenizer"),d(CS,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(wS,"href","/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(AS,"href","/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d(yS,"href","/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(LS,"href","/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d(xS,"href","/docs/transformers/pr_16058/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(kS,"href","/docs/transformers/pr_16058/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d(SS,"href","/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDTokenizer"),d(RS,"href","/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDTokenizerFast"),d(BS,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerTokenizer"),d(PS,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d($S,"href","/docs/transformers/pr_16058/en/model_doc/luke#transformers.LukeTokenizer"),d(qS,"href","/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.LxmertTokenizer"),d(IS,"href","/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(jS,"href","/docs/transformers/pr_16058/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d(NS,"href","/docs/transformers/pr_16058/en/model_doc/marian#transformers.MarianTokenizer"),d(DS,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartTokenizer"),d(GS,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartTokenizerFast"),d(OS,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBart50Tokenizer"),d(VS,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(XS,"href","/docs/transformers/pr_16058/en/model_doc/mluke#transformers.MLukeTokenizer"),d(zS,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(QS,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(WS,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(HS,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d(US,"href","/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5Tokenizer"),d(JS,"href","/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5TokenizerFast"),d(YS,"href","/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d(KS,"href","/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d(ZS,"href","/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(eR,"href","/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(oR,"href","/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d(rR,"href","/docs/transformers/pr_16058/en/model_doc/phobert#transformers.PhobertTokenizer"),d(tR,"href","/docs/transformers/pr_16058/en/model_doc/plbart#transformers.PLBartTokenizer"),d(aR,"href","/docs/transformers/pr_16058/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d(nR,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertTokenizer"),d(sR,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertTokenizerFast"),d(lR,"href","/docs/transformers/pr_16058/en/model_doc/rag#transformers.RagTokenizer"),d(iR,"href","/docs/transformers/pr_16058/en/model_doc/realm#transformers.RealmTokenizer"),d(dR,"href","/docs/transformers/pr_16058/en/model_doc/realm#transformers.RealmTokenizerFast"),d(cR,"href","/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerTokenizer"),d(fR,"href","/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d(mR,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertTokenizer"),d(gR,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d(hR,"href","/docs/transformers/pr_16058/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(pR,"href","/docs/transformers/pr_16058/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d(_R,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaTokenizer"),d(uR,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(bR,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(FR,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(vR,"href","/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(TR,"href","/docs/transformers/pr_16058/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d(MR,"href","/docs/transformers/pr_16058/en/model_doc/splinter#transformers.SplinterTokenizer"),d(ER,"href","/docs/transformers/pr_16058/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d(CR,"href","/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d(wR,"href","/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(AR,"href","/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5Tokenizer"),d(yR,"href","/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5TokenizerFast"),d(LR,"href","/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasTokenizer"),d(xR,"href","/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(kR,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(SR,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d(RR,"href","/docs/transformers/pr_16058/en/model_doc/xglm#transformers.XGLMTokenizer"),d(BR,"href","/docs/transformers/pr_16058/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(PR,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMTokenizer"),d($R,"href","/docs/transformers/pr_16058/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d(qR,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(IR,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(jR,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetTokenizer"),d(NR,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(go,"class","docstring"),d(Mh,"class","docstring"),d(Ho,"class","docstring"),d(Eh,"id","transformers.AutoFeatureExtractor"),d(Eh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Eh,"href","#transformers.AutoFeatureExtractor"),d(ed,"class","relative group"),d(DR,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(GR,"href","/docs/transformers/pr_16058/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(OR,"href","/docs/transformers/pr_16058/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(VR,"href","/docs/transformers/pr_16058/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(XR,"href","/docs/transformers/pr_16058/en/model_doc/deit#transformers.DeiTFeatureExtractor"),d(zR,"href","/docs/transformers/pr_16058/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(QR,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(WR,"href","/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),d(HR,"href","/docs/transformers/pr_16058/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),d(UR,"href","/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),d(JR,"href","/docs/transformers/pr_16058/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),d(YR,"href","/docs/transformers/pr_16058/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(KR,"href","/docs/transformers/pr_16058/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),d(ZR,"href","/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d(eB,"href","/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(oB,"href","/docs/transformers/pr_16058/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(rB,"href","/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(tB,"href","/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(aB,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d($e,"class","docstring"),d(Vh,"class","docstring"),d(Uo,"class","docstring"),d(Xh,"id","transformers.AutoProcessor"),d(Xh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Xh,"href","#transformers.AutoProcessor"),d(od,"class","relative group"),d(nB,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(sB,"href","/docs/transformers/pr_16058/en/model_doc/clip#transformers.CLIPProcessor"),d(lB,"href","/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d(iB,"href","/docs/transformers/pr_16058/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(dB,"href","/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d(cB,"href","/docs/transformers/pr_16058/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d(fB,"href","/docs/transformers/pr_16058/en/model_doc/trocr#transformers.TrOCRProcessor"),d(mB,"href","/docs/transformers/pr_16058/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(gB,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(qe,"class","docstring"),d(ep,"class","docstring"),d(Jo,"class","docstring"),d(op,"id","transformers.AutoModel"),d(op,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(op,"href","#transformers.AutoModel"),d(td,"class","relative group"),d(hB,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pB,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(_B,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Qr,"class","docstring"),d(uB,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertModel"),d(bB,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartModel"),d(FB,"href","/docs/transformers/pr_16058/en/model_doc/beit#transformers.BeitModel"),d(vB,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertModel"),d(TB,"href","/docs/transformers/pr_16058/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d(MB,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdModel"),d(EB,"href","/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(CB,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotModel"),d(wB,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d(AB,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertModel"),d(yB,"href","/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineModel"),d(LB,"href","/docs/transformers/pr_16058/en/model_doc/clip#transformers.CLIPModel"),d(xB,"href","/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertModel"),d(kB,"href","/docs/transformers/pr_16058/en/model_doc/convnext#transformers.ConvNextModel"),d(SB,"href","/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLModel"),d(RB,"href","/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d(BB,"href","/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(PB,"href","/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaModel"),d($B,"href","/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d(qB,"href","/docs/transformers/pr_16058/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),d(IB,"href","/docs/transformers/pr_16058/en/model_doc/deit#transformers.DeiTModel"),d(jB,"href","/docs/transformers/pr_16058/en/model_doc/detr#transformers.DetrModel"),d(NB,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertModel"),d(DB,"href","/docs/transformers/pr_16058/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d(GB,"href","/docs/transformers/pr_16058/en/model_doc/dpt#transformers.DPTModel"),d(OB,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraModel"),d(VB,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertModel"),d(XB,"href","/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetModel"),d(zB,"href","/docs/transformers/pr_16058/en/model_doc/fsmt#transformers.FSMTModel"),d(QB,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelModel"),d(WB,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelBaseModel"),d(HB,"href","/docs/transformers/pr_16058/en/model_doc/glpn#transformers.GLPNModel"),d(UB,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Model"),d(JB,"href","/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d(YB,"href","/docs/transformers/pr_16058/en/model_doc/gptj#transformers.GPTJModel"),d(KB,"href","/docs/transformers/pr_16058/en/model_doc/hubert#transformers.HubertModel"),d(ZB,"href","/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertModel"),d(eP,"href","/docs/transformers/pr_16058/en/model_doc/imagegpt#transformers.ImageGPTModel"),d(oP,"href","/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(rP,"href","/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d(tP,"href","/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDModel"),d(aP,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerModel"),d(nP,"href","/docs/transformers/pr_16058/en/model_doc/luke#transformers.LukeModel"),d(sP,"href","/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.LxmertModel"),d(lP,"href","/docs/transformers/pr_16058/en/model_doc/m2m_100#transformers.M2M100Model"),d(iP,"href","/docs/transformers/pr_16058/en/model_doc/marian#transformers.MarianModel"),d(dP,"href","/docs/transformers/pr_16058/en/model_doc/maskformer#transformers.MaskFormerModel"),d(cP,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartModel"),d(fP,"href","/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(mP,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertModel"),d(gP,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetModel"),d(hP,"href","/docs/transformers/pr_16058/en/model_doc/mt5#transformers.MT5Model"),d(pP,"href","/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerModel"),d(_P,"href","/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d(uP,"href","/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusModel"),d(bP,"href","/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverModel"),d(FP,"href","/docs/transformers/pr_16058/en/model_doc/plbart#transformers.PLBartModel"),d(vP,"href","/docs/transformers/pr_16058/en/model_doc/poolformer#transformers.PoolFormerModel"),d(TP,"href","/docs/transformers/pr_16058/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(MP,"href","/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertModel"),d(EP,"href","/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerModel"),d(CP,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertModel"),d(wP,"href","/docs/transformers/pr_16058/en/model_doc/resnet#transformers.ResNetModel"),d(AP,"href","/docs/transformers/pr_16058/en/model_doc/retribert#transformers.RetriBertModel"),d(yP,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaModel"),d(LP,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerModel"),d(xP,"href","/docs/transformers/pr_16058/en/model_doc/segformer#transformers.SegformerModel"),d(kP,"href","/docs/transformers/pr_16058/en/model_doc/sew#transformers.SEWModel"),d(SP,"href","/docs/transformers/pr_16058/en/model_doc/sew-d#transformers.SEWDModel"),d(RP,"href","/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d(BP,"href","/docs/transformers/pr_16058/en/model_doc/splinter#transformers.SplinterModel"),d(PP,"href","/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d($P,"href","/docs/transformers/pr_16058/en/model_doc/swin#transformers.SwinModel"),d(qP,"href","/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5Model"),d(IP,"href","/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasModel"),d(jP,"href","/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d(NP,"href","/docs/transformers/pr_16058/en/model_doc/unispeech#transformers.UniSpeechModel"),d(DP,"href","/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(GP,"href","/docs/transformers/pr_16058/en/model_doc/van#transformers.VanModel"),d(OP,"href","/docs/transformers/pr_16058/en/model_doc/vilt#transformers.ViltModel"),d(VP,"href","/docs/transformers/pr_16058/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(XP,"href","/docs/transformers/pr_16058/en/model_doc/visual_bert#transformers.VisualBertModel"),d(zP,"href","/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTModel"),d(QP,"href","/docs/transformers/pr_16058/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(WP,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d(HP,"href","/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMModel"),d(UP,"href","/docs/transformers/pr_16058/en/model_doc/xglm#transformers.XGLMModel"),d(JP,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMModel"),d(YP,"href","/docs/transformers/pr_16058/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d(KP,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d(ZP,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d(e$,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetModel"),d(o$,"href","/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoModel"),d(Ie,"class","docstring"),d(Yo,"class","docstring"),d(D_,"id","transformers.AutoModelForPreTraining"),d(D_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(D_,"href","#transformers.AutoModelForPreTraining"),d(sd,"class","relative group"),d(r$,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(t$,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(a$,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Wr,"class","docstring"),d(n$,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertForPreTraining"),d(s$,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(l$,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertForPreTraining"),d(i$,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d(d$,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(c$,"href","/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(f$,"href","/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(m$,"href","/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(g$,"href","/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(h$,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(p$,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraForPreTraining"),d(_$,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(u$,"href","/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetForPreTraining"),d(b$,"href","/docs/transformers/pr_16058/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(F$,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelForPreTraining"),d(v$,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(T$,"href","/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(M$,"href","/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(E$,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(C$,"href","/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d(w$,"href","/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d(A$,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d(y$,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(L$,"href","/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(x$,"href","/docs/transformers/pr_16058/en/model_doc/retribert#transformers.RetriBertModel"),d(k$,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(S$,"href","/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(R$,"href","/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(B$,"href","/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(P$,"href","/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d($$,"href","/docs/transformers/pr_16058/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d(q$,"href","/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d(I$,"href","/docs/transformers/pr_16058/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d(j$,"href","/docs/transformers/pr_16058/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(N$,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d(D$,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(G$,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(O$,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(V$,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(je,"class","docstring"),d(Ko,"class","docstring"),d(yu,"id","transformers.AutoModelForCausalLM"),d(yu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(yu,"href","#transformers.AutoModelForCausalLM"),d(dd,"class","relative group"),d(X$,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(z$,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Q$,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Hr,"class","docstring"),d(W$,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartForCausalLM"),d(H$,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertLMHeadModel"),d(U$,"href","/docs/transformers/pr_16058/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(J$,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d(Y$,"href","/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d(K$,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d(Z$,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d(eq,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertForCausalLM"),d(oq,"href","/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(rq,"href","/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d(tq,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraForCausalLM"),d(aq,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(nq,"href","/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(sq,"href","/docs/transformers/pr_16058/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(lq,"href","/docs/transformers/pr_16058/en/model_doc/marian#transformers.MarianForCausalLM"),d(iq,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartForCausalLM"),d(dq,"href","/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d(cq,"href","/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(fq,"href","/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d(mq,"href","/docs/transformers/pr_16058/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(gq,"href","/docs/transformers/pr_16058/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d(hq,"href","/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d(pq,"href","/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d(_q,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertForCausalLM"),d(uq,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaForCausalLM"),d(bq,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d(Fq,"href","/docs/transformers/pr_16058/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d(vq,"href","/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(Tq,"href","/docs/transformers/pr_16058/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(Mq,"href","/docs/transformers/pr_16058/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(Eq,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(Cq,"href","/docs/transformers/pr_16058/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d(wq,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(Aq,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d(yq,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(Ne,"class","docstring"),d(Zo,"class","docstring"),d(c1,"id","transformers.AutoModelForMaskedLM"),d(c1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(c1,"href","#transformers.AutoModelForMaskedLM"),d(md,"class","relative group"),d(Lq,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xq,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(kq,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ur,"class","docstring"),d(Sq,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertForMaskedLM"),d(Rq,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(Bq,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertForMaskedLM"),d(Pq,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d($q,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(qq,"href","/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d(Iq,"href","/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(jq,"href","/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(Nq,"href","/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(Dq,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(Gq,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraForMaskedLM"),d(Oq,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(Vq,"href","/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(Xq,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(zq,"href","/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(Qq,"href","/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(Wq,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(Hq,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(Uq,"href","/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(Jq,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d(Yq,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(Kq,"href","/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d(Zq,"href","/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d(eI,"href","/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d(oI,"href","/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(rI,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d(tI,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(aI,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(nI,"href","/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(sI,"href","/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(lI,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(iI,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(dI,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(cI,"href","/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoForMaskedLM"),d(De,"class","docstring"),d(er,"class","docstring"),d(W1,"id","transformers.AutoModelForSeq2SeqLM"),d(W1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(W1,"href","#transformers.AutoModelForSeq2SeqLM"),d(pd,"class","relative group"),d(fI,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mI,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(gI,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Jr,"class","docstring"),d(hI,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(pI,"href","/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d(_I,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(uI,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d(bI,"href","/docs/transformers/pr_16058/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d(FI,"href","/docs/transformers/pr_16058/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(vI,"href","/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDForConditionalGeneration"),d(TI,"href","/docs/transformers/pr_16058/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(MI,"href","/docs/transformers/pr_16058/en/model_doc/marian#transformers.MarianMTModel"),d(EI,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(CI,"href","/docs/transformers/pr_16058/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d(wI,"href","/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d(AI,"href","/docs/transformers/pr_16058/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d(yI,"href","/docs/transformers/pr_16058/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d(LI,"href","/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(xI,"href","/docs/transformers/pr_16058/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(Ge,"class","docstring"),d(or,"class","docstring"),d(fb,"id","transformers.AutoModelForSequenceClassification"),d(fb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(fb,"href","#transformers.AutoModelForSequenceClassification"),d(bd,"class","relative group"),d(kI,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(SI,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(RI,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Yr,"class","docstring"),d(BI,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d(PI,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartForSequenceClassification"),d($I,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertForSequenceClassification"),d(qI,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d(II,"href","/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d(jI,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d(NI,"href","/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineForSequenceClassification"),d(DI,"href","/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d(GI,"href","/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(OI,"href","/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d(VI,"href","/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(XI,"href","/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d(zI,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d(QI,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d(WI,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d(HI,"href","/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d(UI,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d(JI,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(YI,"href","/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d(KI,"href","/docs/transformers/pr_16058/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d(ZI,"href","/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d(ej,"href","/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d(oj,"href","/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(rj,"href","/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDForSequenceClassification"),d(tj,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(aj,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(nj,"href","/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(sj,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(lj,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(ij,"href","/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(dj,"href","/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(cj,"href","/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(fj,"href","/docs/transformers/pr_16058/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(mj,"href","/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(gj,"href","/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(hj,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(pj,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(_j,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d(uj,"href","/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d(bj,"href","/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d(Fj,"href","/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d(vj,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d(Tj,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d(Mj,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d(Ej,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d(Cj,"href","/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(Oe,"class","docstring"),d(rr,"class","docstring"),d(n5,"id","transformers.AutoModelForMultipleChoice"),d(n5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(n5,"href","#transformers.AutoModelForMultipleChoice"),d(Td,"class","relative group"),d(wj,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Aj,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(yj,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Kr,"class","docstring"),d(Lj,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d(xj,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertForMultipleChoice"),d(kj,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d(Sj,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d(Rj,"href","/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineForMultipleChoice"),d(Bj,"href","/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d(Pj,"href","/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d($j,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d(qj,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d(Ij,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d(jj,"href","/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(Nj,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d(Dj,"href","/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d(Gj,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d(Oj,"href","/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(Vj,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(Xj,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(zj,"href","/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(Qj,"href","/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d(Wj,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d(Hj,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d(Uj,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(Jj,"href","/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(Yj,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d(Kj,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d(Zj,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d(eN,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d(oN,"href","/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(Ve,"class","docstring"),d(tr,"class","docstring"),d($5,"id","transformers.AutoModelForNextSentencePrediction"),d($5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($5,"href","#transformers.AutoModelForNextSentencePrediction"),d(Cd,"class","relative group"),d(rN,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tN,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(aN,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Zr,"class","docstring"),d(nN,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(sN,"href","/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(lN,"href","/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(iN,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(dN,"href","/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(Xe,"class","docstring"),d(ar,"class","docstring"),d(O5,"id","transformers.AutoModelForTokenClassification"),d(O5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(O5,"href","#transformers.AutoModelForTokenClassification"),d(yd,"class","relative group"),d(cN,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(fN,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(mN,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(et,"class","docstring"),d(gN,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(hN,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertForTokenClassification"),d(pN,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d(_N,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d(uN,"href","/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineForTokenClassification"),d(bN,"href","/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(FN,"href","/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d(vN,"href","/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(TN,"href","/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(MN,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d(EN,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(CN,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d(wN,"href","/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetForTokenClassification"),d(AN,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d(yN,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d(LN,"href","/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertForTokenClassification"),d(xN,"href","/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d(kN,"href","/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d(SN,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d(RN,"href","/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d(BN,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d(PN,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d($N,"href","/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d(qN,"href","/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d(IN,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d(jN,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d(NN,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d(DN,"href","/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d(GN,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(ON,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d(VN,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(XN,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(zN,"href","/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(ze,"class","docstring"),d(nr,"class","docstring"),d(E2,"id","transformers.AutoModelForQuestionAnswering"),d(E2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(E2,"href","#transformers.AutoModelForQuestionAnswering"),d(kd,"class","relative group"),d(QN,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(WN,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(HN,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ot,"class","docstring"),d(UN,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d(JN,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(YN,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertForQuestionAnswering"),d(KN,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d(ZN,"href","/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d(eD,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d(oD,"href","/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(rD,"href","/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d(tD,"href","/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d(aD,"href","/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d(nD,"href","/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(sD,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d(lD,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(iD,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(dD,"href","/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(cD,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(fD,"href","/docs/transformers/pr_16058/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(mD,"href","/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(gD,"href","/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(hD,"href","/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(pD,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d(_D,"href","/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d(uD,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d(bD,"href","/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(FD,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(vD,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(TD,"href","/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(MD,"href","/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d(ED,"href","/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(CD,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d(wD,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(AD,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d(yD,"href","/docs/transformers/pr_16058/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d(LD,"href","/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d(xD,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(kD,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d(SD,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d(RD,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d(BD,"href","/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(Qe,"class","docstring"),d(sr,"class","docstring"),d(cF,"id","transformers.AutoModelForTableQuestionAnswering"),d(cF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(cF,"href","#transformers.AutoModelForTableQuestionAnswering"),d(Bd,"class","relative group"),d(PD,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($D,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(qD,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(rt,"class","docstring"),d(ID,"href","/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(We,"class","docstring"),d(lr,"class","docstring"),d(gF,"id","transformers.AutoModelForImageClassification"),d(gF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(gF,"href","#transformers.AutoModelForImageClassification"),d(qd,"class","relative group"),d(jD,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ND,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(DD,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tt,"class","docstring"),d(GD,"href","/docs/transformers/pr_16058/en/model_doc/beit#transformers.BeitForImageClassification"),d(OD,"href","/docs/transformers/pr_16058/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(VD,"href","/docs/transformers/pr_16058/en/model_doc/deit#transformers.DeiTForImageClassification"),d(XD,"href","/docs/transformers/pr_16058/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d(zD,"href","/docs/transformers/pr_16058/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d(QD,"href","/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d(WD,"href","/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d(HD,"href","/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d(UD,"href","/docs/transformers/pr_16058/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(JD,"href","/docs/transformers/pr_16058/en/model_doc/resnet#transformers.ResNetForImageClassification"),d(YD,"href","/docs/transformers/pr_16058/en/model_doc/segformer#transformers.SegformerForImageClassification"),d(KD,"href","/docs/transformers/pr_16058/en/model_doc/swin#transformers.SwinForImageClassification"),d(ZD,"href","/docs/transformers/pr_16058/en/model_doc/van#transformers.VanForImageClassification"),d(eG,"href","/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTForImageClassification"),d(He,"class","docstring"),d(ir,"class","docstring"),d(CF,"id","transformers.AutoModelForVision2Seq"),d(CF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(CF,"href","#transformers.AutoModelForVision2Seq"),d(Nd,"class","relative group"),d(oG,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(rG,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(tG,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(at,"class","docstring"),d(aG,"href","/docs/transformers/pr_16058/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(Ue,"class","docstring"),d(dr,"class","docstring"),d(yF,"id","transformers.AutoModelForAudioClassification"),d(yF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(yF,"href","#transformers.AutoModelForAudioClassification"),d(Od,"class","relative group"),d(nG,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(sG,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(lG,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nt,"class","docstring"),d(iG,"href","/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(dG,"href","/docs/transformers/pr_16058/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d(cG,"href","/docs/transformers/pr_16058/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(fG,"href","/docs/transformers/pr_16058/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d(mG,"href","/docs/transformers/pr_16058/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(gG,"href","/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d(hG,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d(pG,"href","/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(Je,"class","docstring"),d(cr,"class","docstring"),d(IF,"id","transformers.AutoModelForAudioFrameClassification"),d(IF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(IF,"href","#transformers.AutoModelForAudioFrameClassification"),d(zd,"class","relative group"),d(_G,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(uG,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(bG,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(st,"class","docstring"),d(FG,"href","/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d(vG,"href","/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d(TG,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(MG,"href","/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(Ye,"class","docstring"),d(fr,"class","docstring"),d(VF,"id","transformers.AutoModelForCTC"),d(VF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(VF,"href","#transformers.AutoModelForCTC"),d(Hd,"class","relative group"),d(EG,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(CG,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(wG,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lt,"class","docstring"),d(AG,"href","/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d(yG,"href","/docs/transformers/pr_16058/en/model_doc/hubert#transformers.HubertForCTC"),d(LG,"href","/docs/transformers/pr_16058/en/model_doc/sew#transformers.SEWForCTC"),d(xG,"href","/docs/transformers/pr_16058/en/model_doc/sew-d#transformers.SEWDForCTC"),d(kG,"href","/docs/transformers/pr_16058/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d(SG,"href","/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(RG,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d(BG,"href","/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMForCTC"),d(Ke,"class","docstring"),d(mr,"class","docstring"),d(ZF,"id","transformers.AutoModelForSpeechSeq2Seq"),d(ZF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ZF,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(Yd,"class","relative group"),d(PG,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($G,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(qG,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(it,"class","docstring"),d(IG,"href","/docs/transformers/pr_16058/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(jG,"href","/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(Ze,"class","docstring"),d(gr,"class","docstring"),d(tv,"id","transformers.AutoModelForAudioXVector"),d(tv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(tv,"href","#transformers.AutoModelForAudioXVector"),d(ec,"class","relative group"),d(NG,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(DG,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(GG,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dt,"class","docstring"),d(OG,"href","/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(VG,"href","/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(XG,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(zG,"href","/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMForXVector"),d(eo,"class","docstring"),d(hr,"class","docstring"),d(dv,"id","transformers.AutoModelForMaskedImageModeling"),d(dv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(dv,"href","#transformers.AutoModelForMaskedImageModeling"),d(tc,"class","relative group"),d(QG,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(WG,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(HG,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ct,"class","docstring"),d(UG,"href","/docs/transformers/pr_16058/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(JG,"href","/docs/transformers/pr_16058/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d(YG,"href","/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(oo,"class","docstring"),d(pr,"class","docstring"),d(hv,"id","transformers.AutoModelForObjectDetection"),d(hv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(hv,"href","#transformers.AutoModelForObjectDetection"),d(lc,"class","relative group"),d(KG,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ZG,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(eO,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ft,"class","docstring"),d(oO,"href","/docs/transformers/pr_16058/en/model_doc/detr#transformers.DetrForObjectDetection"),d(ro,"class","docstring"),d(_r,"class","docstring"),d(uv,"id","transformers.AutoModelForImageSegmentation"),d(uv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(uv,"href","#transformers.AutoModelForImageSegmentation"),d(cc,"class","relative group"),d(rO,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tO,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(aO,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mt,"class","docstring"),d(nO,"href","/docs/transformers/pr_16058/en/model_doc/detr#transformers.DetrForSegmentation"),d(to,"class","docstring"),d(ur,"class","docstring"),d(vv,"id","transformers.AutoModelForSemanticSegmentation"),d(vv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(vv,"href","#transformers.AutoModelForSemanticSegmentation"),d(gc,"class","relative group"),d(sO,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lO,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(iO,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gt,"class","docstring"),d(dO,"href","/docs/transformers/pr_16058/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(cO,"href","/docs/transformers/pr_16058/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),d(fO,"href","/docs/transformers/pr_16058/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(ao,"class","docstring"),d(br,"class","docstring"),d(wv,"id","transformers.AutoModelForInstanceSegmentation"),d(wv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(wv,"href","#transformers.AutoModelForInstanceSegmentation"),d(uc,"class","relative group"),d(mO,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gO,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(hO,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ht,"class","docstring"),d(pO,"href","/docs/transformers/pr_16058/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),d(no,"class","docstring"),d(Fr,"class","docstring"),d(Lv,"id","transformers.TFAutoModel"),d(Lv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Lv,"href","#transformers.TFAutoModel"),d(vc,"class","relative group"),d(_O,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(uO,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(bO,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pt,"class","docstring"),d(FO,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.TFAlbertModel"),d(vO,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.TFBartModel"),d(TO,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertModel"),d(MO,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d(EO,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d(CO,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.TFCamembertModel"),d(wO,"href","/docs/transformers/pr_16058/en/model_doc/clip#transformers.TFCLIPModel"),d(AO,"href","/docs/transformers/pr_16058/en/model_doc/convbert#transformers.TFConvBertModel"),d(yO,"href","/docs/transformers/pr_16058/en/model_doc/convnext#transformers.TFConvNextModel"),d(LO,"href","/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.TFCTRLModel"),d(xO,"href","/docs/transformers/pr_16058/en/model_doc/deberta#transformers.TFDebertaModel"),d(kO,"href","/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d(SO,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.TFDistilBertModel"),d(RO,"href","/docs/transformers/pr_16058/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d(BO,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.TFElectraModel"),d(PO,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.TFFlaubertModel"),d($O,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelModel"),d(qO,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d(IO,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.TFGPT2Model"),d(jO,"href","/docs/transformers/pr_16058/en/model_doc/gptj#transformers.TFGPTJModel"),d(NO,"href","/docs/transformers/pr_16058/en/model_doc/hubert#transformers.TFHubertModel"),d(DO,"href","/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(GO,"href","/docs/transformers/pr_16058/en/model_doc/led#transformers.TFLEDModel"),d(OO,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.TFLongformerModel"),d(VO,"href","/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.TFLxmertModel"),d(XO,"href","/docs/transformers/pr_16058/en/model_doc/marian#transformers.TFMarianModel"),d(zO,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.TFMBartModel"),d(QO,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d(WO,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.TFMPNetModel"),d(HO,"href","/docs/transformers/pr_16058/en/model_doc/mt5#transformers.TFMT5Model"),d(UO,"href","/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(JO,"href","/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.TFPegasusModel"),d(YO,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.TFRemBertModel"),d(KO,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaModel"),d(ZO,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.TFRoFormerModel"),d(eV,"href","/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d(oV,"href","/docs/transformers/pr_16058/en/model_doc/t5#transformers.TFT5Model"),d(rV,"href","/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TFTapasModel"),d(tV,"href","/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(aV,"href","/docs/transformers/pr_16058/en/model_doc/vit#transformers.TFViTModel"),d(nV,"href","/docs/transformers/pr_16058/en/model_doc/vit_mae#transformers.TFViTMAEModel"),d(sV,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d(lV,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMModel"),d(iV,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(dV,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.TFXLNetModel"),d(ho,"class","docstring"),d(vr,"class","docstring"),d(b6,"id","transformers.TFAutoModelForPreTraining"),d(b6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(b6,"href","#transformers.TFAutoModelForPreTraining"),d(Ec,"class","relative group"),d(cV,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(fV,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(mV,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_t,"class","docstring"),d(gV,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d(hV,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(pV,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertForPreTraining"),d(_V,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(uV,"href","/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(bV,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(FV,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.TFElectraForPreTraining"),d(vV,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(TV,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d(MV,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(EV,"href","/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(CV,"href","/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d(wV,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d(AV,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(yV,"href","/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(LV,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(xV,"href","/docs/transformers/pr_16058/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(kV,"href","/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(SV,"href","/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(RV,"href","/docs/transformers/pr_16058/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),d(BV,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(PV,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d($V,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(po,"class","docstring"),d(Tr,"class","docstring"),d(O6,"id","transformers.TFAutoModelForCausalLM"),d(O6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(O6,"href","#transformers.TFAutoModelForCausalLM"),d(Ac,"class","relative group"),d(qV,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(IV,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(jV,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ut,"class","docstring"),d(NV,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertLMHeadModel"),d(DV,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),d(GV,"href","/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(OV,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(VV,"href","/docs/transformers/pr_16058/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),d(XV,"href","/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(zV,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d(QV,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d(WV,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d(HV,"href","/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(UV,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(JV,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(_o,"class","docstring"),d(Mr,"class","docstring"),d(o0,"id","transformers.TFAutoModelForImageClassification"),d(o0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(o0,"href","#transformers.TFAutoModelForImageClassification"),d(xc,"class","relative group"),d(YV,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(KV,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(ZV,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bt,"class","docstring"),d(eX,"href","/docs/transformers/pr_16058/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d(oX,"href","/docs/transformers/pr_16058/en/model_doc/vit#transformers.TFViTForImageClassification"),d(uo,"class","docstring"),d(Er,"class","docstring"),d(a0,"id","transformers.TFAutoModelForMaskedLM"),d(a0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(a0,"href","#transformers.TFAutoModelForMaskedLM"),d(Rc,"class","relative group"),d(rX,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tX,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(aX,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ft,"class","docstring"),d(nX,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(sX,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(lX,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(iX,"href","/docs/transformers/pr_16058/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d(dX,"href","/docs/transformers/pr_16058/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(cX,"href","/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d(fX,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(mX,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d(gX,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(hX,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d(pX,"href","/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(_X,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(uX,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(bX,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(FX,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d(vX,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(TX,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d(MX,"href","/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(EX,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(CX,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(bo,"class","docstring"),d(Cr,"class","docstring"),d(w0,"id","transformers.TFAutoModelForSeq2SeqLM"),d(w0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(w0,"href","#transformers.TFAutoModelForSeq2SeqLM"),d($c,"class","relative group"),d(wX,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(AX,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(yX,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vt,"class","docstring"),d(LX,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(xX,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d(kX,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d(SX,"href","/docs/transformers/pr_16058/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d(RX,"href","/docs/transformers/pr_16058/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d(BX,"href","/docs/transformers/pr_16058/en/model_doc/marian#transformers.TFMarianMTModel"),d(PX,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d($X,"href","/docs/transformers/pr_16058/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d(qX,"href","/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d(IX,"href","/docs/transformers/pr_16058/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(Fo,"class","docstring"),d(wr,"class","docstring"),d(q0,"id","transformers.TFAutoModelForSequenceClassification"),d(q0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(q0,"href","#transformers.TFAutoModelForSequenceClassification"),d(jc,"class","relative group"),d(jX,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(NX,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(DX,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Tt,"class","docstring"),d(GX,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d(OX,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d(VX,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(XX,"href","/docs/transformers/pr_16058/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d(zX,"href","/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(QX,"href","/docs/transformers/pr_16058/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d(WX,"href","/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(HX,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d(UX,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(JX,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d(YX,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d(KX,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d(ZX,"href","/docs/transformers/pr_16058/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),d(ez,"href","/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d(oz,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d(rz,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d(tz,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d(az,"href","/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d(nz,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(sz,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(lz,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d(iz,"href","/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(dz,"href","/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(cz,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(fz,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d(mz,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(vo,"class","docstring"),d(Ar,"class","docstring"),d(dT,"id","transformers.TFAutoModelForMultipleChoice"),d(dT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(dT,"href","#transformers.TFAutoModelForMultipleChoice"),d(Gc,"class","relative group"),d(gz,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(hz,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(pz,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Mt,"class","docstring"),d(_z,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(uz,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(bz,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d(Fz,"href","/docs/transformers/pr_16058/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d(vz,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d(Tz,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d(Mz,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(Ez,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d(Cz,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(wz,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d(Az,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d(yz,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d(Lz,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d(xz,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d(kz,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d(Sz,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d(Rz,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(To,"class","docstring"),d(yr,"class","docstring"),d(yT,"id","transformers.TFAutoModelForTableQuestionAnswering"),d(yT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(yT,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(Xc,"class","relative group"),d(Bz,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Pz,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d($z,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Et,"class","docstring"),d(qz,"href","/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(Mo,"class","docstring"),d(Lr,"class","docstring"),d(xT,"id","transformers.TFAutoModelForTokenClassification"),d(xT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(xT,"href","#transformers.TFAutoModelForTokenClassification"),d(Wc,"class","relative group"),d(Iz,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(jz,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Nz,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ct,"class","docstring"),d(Dz,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(Gz,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(Oz,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(Vz,"href","/docs/transformers/pr_16058/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d(Xz,"href","/docs/transformers/pr_16058/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(zz,"href","/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(Qz,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d(Wz,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d(Hz,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d(Uz,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d(Jz,"href","/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d(Yz,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d(Kz,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d(Zz,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d(eQ,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d(oQ,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d(rQ,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d(tQ,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(aQ,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d(nQ,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(Eo,"class","docstring"),d(xr,"class","docstring"),d(JT,"id","transformers.TFAutoModelForQuestionAnswering"),d(JT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(JT,"href","#transformers.TFAutoModelForQuestionAnswering"),d(Jc,"class","relative group"),d(sQ,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lQ,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(iQ,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wt,"class","docstring"),d(dQ,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d(cQ,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(fQ,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d(mQ,"href","/docs/transformers/pr_16058/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d(gQ,"href","/docs/transformers/pr_16058/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d(hQ,"href","/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d(pQ,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d(_Q,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(uQ,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d(bQ,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(FQ,"href","/docs/transformers/pr_16058/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),d(vQ,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d(TQ,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d(MQ,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(EQ,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d(CQ,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d(wQ,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d(AQ,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d(yQ,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d(LQ,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(Co,"class","docstring"),d(kr,"class","docstring"),d(u8,"id","transformers.TFAutoModelForVision2Seq"),d(u8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(u8,"href","#transformers.TFAutoModelForVision2Seq"),d(Zc,"class","relative group"),d(xQ,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kQ,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(SQ,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(At,"class","docstring"),d(RQ,"href","/docs/transformers/pr_16058/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(wo,"class","docstring"),d(Sr,"class","docstring"),d(F8,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(F8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(F8,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(rf,"class","relative group"),d(BQ,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(PQ,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d($Q,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yt,"class","docstring"),d(qQ,"href","/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(Ao,"class","docstring"),d(Rr,"class","docstring"),d(T8,"id","transformers.FlaxAutoModel"),d(T8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(T8,"href","#transformers.FlaxAutoModel"),d(nf,"class","relative group"),d(IQ,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(jQ,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(NQ,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Lt,"class","docstring"),d(DQ,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.FlaxAlbertModel"),d(GQ,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.FlaxBartModel"),d(OQ,"href","/docs/transformers/pr_16058/en/model_doc/beit#transformers.FlaxBeitModel"),d(VQ,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertModel"),d(XQ,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(zQ,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(QQ,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d(WQ,"href","/docs/transformers/pr_16058/en/model_doc/clip#transformers.FlaxCLIPModel"),d(HQ,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d(UQ,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.FlaxElectraModel"),d(JQ,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d(YQ,"href","/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d(KQ,"href","/docs/transformers/pr_16058/en/model_doc/gptj#transformers.FlaxGPTJModel"),d(ZQ,"href","/docs/transformers/pr_16058/en/model_doc/marian#transformers.FlaxMarianModel"),d(eW,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.FlaxMBartModel"),d(oW,"href","/docs/transformers/pr_16058/en/model_doc/mt5#transformers.FlaxMT5Model"),d(rW,"href","/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d(tW,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(aW,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d(nW,"href","/docs/transformers/pr_16058/en/model_doc/t5#transformers.FlaxT5Model"),d(sW,"href","/docs/transformers/pr_16058/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(lW,"href","/docs/transformers/pr_16058/en/model_doc/vit#transformers.FlaxViTModel"),d(iW,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(dW,"href","/docs/transformers/pr_16058/en/model_doc/xglm#transformers.FlaxXGLMModel"),d(cW,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),d(yo,"class","docstring"),d(Br,"class","docstring"),d(W8,"id","transformers.FlaxAutoModelForCausalLM"),d(W8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(W8,"href","#transformers.FlaxAutoModelForCausalLM"),d(df,"class","relative group"),d(fW,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mW,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(gW,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xt,"class","docstring"),d(hW,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.FlaxBartForCausalLM"),d(pW,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(_W,"href","/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d(uW,"href","/docs/transformers/pr_16058/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(bW,"href","/docs/transformers/pr_16058/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(Lo,"class","docstring"),d(Pr,"class","docstring"),d(Z8,"id","transformers.FlaxAutoModelForPreTraining"),d(Z8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Z8,"href","#transformers.FlaxAutoModelForPreTraining"),d(mf,"class","relative group"),d(FW,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vW,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(TW,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kt,"class","docstring"),d(MW,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d(EW,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(CW,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(wW,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d(AW,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(yW,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(LW,"href","/docs/transformers/pr_16058/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(xW,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(kW,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(SW,"href","/docs/transformers/pr_16058/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(RW,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d(BW,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(xo,"class","docstring"),d($r,"class","docstring"),d(mM,"id","transformers.FlaxAutoModelForMaskedLM"),d(mM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(mM,"href","#transformers.FlaxAutoModelForMaskedLM"),d(pf,"class","relative group"),d(PW,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($W,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(qW,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(St,"class","docstring"),d(IW,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d(jW,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(NW,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d(DW,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(GW,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d(OW,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(VW,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(XW,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(zW,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(QW,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(ko,"class","docstring"),d(qr,"class","docstring"),d(EM,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d(EM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(EM,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(bf,"class","relative group"),d(WW,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(HW,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(UW,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Rt,"class","docstring"),d(JW,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(YW,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d(KW,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d(ZW,"href","/docs/transformers/pr_16058/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d(eH,"href","/docs/transformers/pr_16058/en/model_doc/marian#transformers.FlaxMarianMTModel"),d(oH,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(rH,"href","/docs/transformers/pr_16058/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(tH,"href","/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(aH,"href","/docs/transformers/pr_16058/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(So,"class","docstring"),d(Ir,"class","docstring"),d(BM,"id","transformers.FlaxAutoModelForSequenceClassification"),d(BM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(BM,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(Tf,"class","relative group"),d(nH,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(sH,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(lH,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Bt,"class","docstring"),d(iH,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(dH,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d(cH,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(fH,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d(mH,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(gH,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d(hH,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(pH,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(_H,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(uH,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),d(Ro,"class","docstring"),d(jr,"class","docstring"),d(XM,"id","transformers.FlaxAutoModelForSpeechSeq2Seq"),d(XM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(XM,"href","#transformers.FlaxAutoModelForSpeechSeq2Seq"),d(Cf,"class","relative group"),d(bH,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(FH,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(vH,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Pt,"class","docstring"),d(TH,"href","/docs/transformers/pr_16058/en/model_doc/speech-encoder-decoder#transformers.FlaxSpeechEncoderDecoderModel"),d(Bo,"class","docstring"),d(Nr,"class","docstring"),d(QM,"id","transformers.FlaxAutoModelForQuestionAnswering"),d(QM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(QM,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(yf,"class","relative group"),d(MH,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(EH,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(CH,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($t,"class","docstring"),d(wH,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d(AH,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(yH,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d(LH,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(xH,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d(kH,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(SH,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d(RH,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(BH,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d(PH,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),d(Po,"class","docstring"),d(Dr,"class","docstring"),d(t4,"id","transformers.FlaxAutoModelForTokenClassification"),d(t4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(t4,"href","#transformers.FlaxAutoModelForTokenClassification"),d(kf,"class","relative group"),d($H,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qH,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(IH,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qt,"class","docstring"),d(jH,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d(NH,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(DH,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d(GH,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(OH,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d(VH,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(XH,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d(zH,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),d($o,"class","docstring"),d(Gr,"class","docstring"),d(m4,"id","transformers.FlaxAutoModelForMultipleChoice"),d(m4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(m4,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(Bf,"class","relative group"),d(QH,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(WH,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(HH,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(It,"class","docstring"),d(UH,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d(JH,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d(YH,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(KH,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d(ZH,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d(eU,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d(oU,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d(rU,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),d(qo,"class","docstring"),d(Or,"class","docstring"),d(T4,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(T4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(T4,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(qf,"class","relative group"),d(tU,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(aU,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(nU,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(jt,"class","docstring"),d(sU,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d(Io,"class","docstring"),d(Vr,"class","docstring"),d(E4,"id","transformers.FlaxAutoModelForImageClassification"),d(E4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(E4,"href","#transformers.FlaxAutoModelForImageClassification"),d(Nf,"class","relative group"),d(lU,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(iU,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(dU,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Nt,"class","docstring"),d(cU,"href","/docs/transformers/pr_16058/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d(fU,"href","/docs/transformers/pr_16058/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(jo,"class","docstring"),d(Xr,"class","docstring"),d(A4,"id","transformers.FlaxAutoModelForVision2Seq"),d(A4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(A4,"href","#transformers.FlaxAutoModelForVision2Seq"),d(Of,"class","relative group"),d(mU,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gU,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(hU,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Dt,"class","docstring"),d(pU,"href","/docs/transformers/pr_16058/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(No,"class","docstring"),d(zr,"class","docstring")},m(c,u){e(document.head,Z),b(c,io,u),b(c,de,u),e(de,Ce),e(Ce,lo),g(me,lo,null),e(de,Me),e(de,zo),e(zo,Vi),b(c,Wf,u),b(c,ha,u),e(ha,Xi),e(ha,zi),e(zi,LE),e(ha,Hf),b(c,xe,u),b(c,co,u),e(co,Qi),e(co,Qn),e(Qn,xE),e(co,Wn),e(co,Hn),e(Hn,kE),e(co,Wi),e(co,Un),e(Un,SE),e(co,Hi),b(c,Uf,u),g(Xa,c,u),b(c,fo,u),b(c,_e,u),e(_e,y9),e(_e,Ui),e(Ui,L9),e(_e,x9),b(c,Qo,u),b(c,za,u),e(za,k9),e(za,Jf),e(Jf,S9),e(za,Dqe),b(c,ERe,u),b(c,Ji,u),e(Ji,Yf),e(Yf,fY),g(RE,fY,null),e(Ji,Gqe),e(Ji,mY),e(mY,Oqe),b(c,CRe,u),b(c,Jn,u),e(Jn,Vqe),e(Jn,gY),e(gY,Xqe),e(Jn,zqe),e(Jn,hY),e(hY,Qqe),e(Jn,Wqe),b(c,wRe,u),g(BE,c,u),b(c,ARe,u),b(c,R9,u),e(R9,Hqe),b(c,yRe,u),g(Kf,c,u),b(c,LRe,u),b(c,Yi,u),e(Yi,Zf),e(Zf,pY),g(PE,pY,null),e(Yi,Uqe),e(Yi,_Y),e(_Y,Jqe),b(c,xRe,u),b(c,Wo,u),g($E,Wo,null),e(Wo,Yqe),e(Wo,qE),e(qE,Kqe),e(qE,B9),e(B9,Zqe),e(qE,eIe),e(Wo,oIe),e(Wo,IE),e(IE,rIe),e(IE,uY),e(uY,tIe),e(IE,aIe),e(Wo,nIe),e(Wo,mo),g(jE,mo,null),e(mo,sIe),e(mo,bY),e(bY,lIe),e(mo,iIe),e(mo,Ki),e(Ki,dIe),e(Ki,FY),e(FY,cIe),e(Ki,fIe),e(Ki,vY),e(vY,mIe),e(Ki,gIe),e(mo,hIe),e(mo,F),e(F,em),e(em,TY),e(TY,pIe),e(em,_Ie),e(em,P9),e(P9,uIe),e(em,bIe),e(F,FIe),e(F,om),e(om,MY),e(MY,vIe),e(om,TIe),e(om,$9),e($9,MIe),e(om,EIe),e(F,CIe),e(F,rm),e(rm,EY),e(EY,wIe),e(rm,AIe),e(rm,q9),e(q9,yIe),e(rm,LIe),e(F,xIe),e(F,tm),e(tm,CY),e(CY,kIe),e(tm,SIe),e(tm,I9),e(I9,RIe),e(tm,BIe),e(F,PIe),e(F,am),e(am,wY),e(wY,$Ie),e(am,qIe),e(am,j9),e(j9,IIe),e(am,jIe),e(F,NIe),e(F,nm),e(nm,AY),e(AY,DIe),e(nm,GIe),e(nm,N9),e(N9,OIe),e(nm,VIe),e(F,XIe),e(F,sm),e(sm,yY),e(yY,zIe),e(sm,QIe),e(sm,D9),e(D9,WIe),e(sm,HIe),e(F,UIe),e(F,lm),e(lm,LY),e(LY,JIe),e(lm,YIe),e(lm,G9),e(G9,KIe),e(lm,ZIe),e(F,eje),e(F,im),e(im,xY),e(xY,oje),e(im,rje),e(im,O9),e(O9,tje),e(im,aje),e(F,nje),e(F,dm),e(dm,kY),e(kY,sje),e(dm,lje),e(dm,V9),e(V9,ije),e(dm,dje),e(F,cje),e(F,cm),e(cm,SY),e(SY,fje),e(cm,mje),e(cm,X9),e(X9,gje),e(cm,hje),e(F,pje),e(F,fm),e(fm,RY),e(RY,_je),e(fm,uje),e(fm,z9),e(z9,bje),e(fm,Fje),e(F,vje),e(F,mm),e(mm,BY),e(BY,Tje),e(mm,Mje),e(mm,Q9),e(Q9,Eje),e(mm,Cje),e(F,wje),e(F,gm),e(gm,PY),e(PY,Aje),e(gm,yje),e(gm,W9),e(W9,Lje),e(gm,xje),e(F,kje),e(F,hm),e(hm,$Y),e($Y,Sje),e(hm,Rje),e(hm,H9),e(H9,Bje),e(hm,Pje),e(F,$je),e(F,pm),e(pm,qY),e(qY,qje),e(pm,Ije),e(pm,U9),e(U9,jje),e(pm,Nje),e(F,Dje),e(F,_m),e(_m,IY),e(IY,Gje),e(_m,Oje),e(_m,J9),e(J9,Vje),e(_m,Xje),e(F,zje),e(F,um),e(um,jY),e(jY,Qje),e(um,Wje),e(um,Y9),e(Y9,Hje),e(um,Uje),e(F,Jje),e(F,bm),e(bm,NY),e(NY,Yje),e(bm,Kje),e(bm,K9),e(K9,Zje),e(bm,eNe),e(F,oNe),e(F,Fm),e(Fm,DY),e(DY,rNe),e(Fm,tNe),e(Fm,Z9),e(Z9,aNe),e(Fm,nNe),e(F,sNe),e(F,vm),e(vm,GY),e(GY,lNe),e(vm,iNe),e(vm,ex),e(ex,dNe),e(vm,cNe),e(F,fNe),e(F,Tm),e(Tm,OY),e(OY,mNe),e(Tm,gNe),e(Tm,ox),e(ox,hNe),e(Tm,pNe),e(F,_Ne),e(F,Mm),e(Mm,VY),e(VY,uNe),e(Mm,bNe),e(Mm,rx),e(rx,FNe),e(Mm,vNe),e(F,TNe),e(F,Em),e(Em,XY),e(XY,MNe),e(Em,ENe),e(Em,tx),e(tx,CNe),e(Em,wNe),e(F,ANe),e(F,Cm),e(Cm,zY),e(zY,yNe),e(Cm,LNe),e(Cm,ax),e(ax,xNe),e(Cm,kNe),e(F,SNe),e(F,wm),e(wm,QY),e(QY,RNe),e(wm,BNe),e(wm,nx),e(nx,PNe),e(wm,$Ne),e(F,qNe),e(F,Am),e(Am,WY),e(WY,INe),e(Am,jNe),e(Am,sx),e(sx,NNe),e(Am,DNe),e(F,GNe),e(F,ym),e(ym,HY),e(HY,ONe),e(ym,VNe),e(ym,lx),e(lx,XNe),e(ym,zNe),e(F,QNe),e(F,Lm),e(Lm,UY),e(UY,WNe),e(Lm,HNe),e(Lm,ix),e(ix,UNe),e(Lm,JNe),e(F,YNe),e(F,xm),e(xm,JY),e(JY,KNe),e(xm,ZNe),e(xm,dx),e(dx,eDe),e(xm,oDe),e(F,rDe),e(F,km),e(km,YY),e(YY,tDe),e(km,aDe),e(km,cx),e(cx,nDe),e(km,sDe),e(F,lDe),e(F,Sm),e(Sm,KY),e(KY,iDe),e(Sm,dDe),e(Sm,fx),e(fx,cDe),e(Sm,fDe),e(F,mDe),e(F,Rm),e(Rm,ZY),e(ZY,gDe),e(Rm,hDe),e(Rm,mx),e(mx,pDe),e(Rm,_De),e(F,uDe),e(F,Bm),e(Bm,eK),e(eK,bDe),e(Bm,FDe),e(Bm,gx),e(gx,vDe),e(Bm,TDe),e(F,MDe),e(F,Pm),e(Pm,oK),e(oK,EDe),e(Pm,CDe),e(Pm,hx),e(hx,wDe),e(Pm,ADe),e(F,yDe),e(F,$m),e($m,rK),e(rK,LDe),e($m,xDe),e($m,px),e(px,kDe),e($m,SDe),e(F,RDe),e(F,qm),e(qm,tK),e(tK,BDe),e(qm,PDe),e(qm,_x),e(_x,$De),e(qm,qDe),e(F,IDe),e(F,Im),e(Im,aK),e(aK,jDe),e(Im,NDe),e(Im,ux),e(ux,DDe),e(Im,GDe),e(F,ODe),e(F,jm),e(jm,nK),e(nK,VDe),e(jm,XDe),e(jm,bx),e(bx,zDe),e(jm,QDe),e(F,WDe),e(F,Nm),e(Nm,sK),e(sK,HDe),e(Nm,UDe),e(Nm,Fx),e(Fx,JDe),e(Nm,YDe),e(F,KDe),e(F,Dm),e(Dm,lK),e(lK,ZDe),e(Dm,eGe),e(Dm,vx),e(vx,oGe),e(Dm,rGe),e(F,tGe),e(F,Gm),e(Gm,iK),e(iK,aGe),e(Gm,nGe),e(Gm,Tx),e(Tx,sGe),e(Gm,lGe),e(F,iGe),e(F,Om),e(Om,dK),e(dK,dGe),e(Om,cGe),e(Om,Mx),e(Mx,fGe),e(Om,mGe),e(F,gGe),e(F,Vm),e(Vm,cK),e(cK,hGe),e(Vm,pGe),e(Vm,Ex),e(Ex,_Ge),e(Vm,uGe),e(F,bGe),e(F,Xm),e(Xm,fK),e(fK,FGe),e(Xm,vGe),e(Xm,Cx),e(Cx,TGe),e(Xm,MGe),e(F,EGe),e(F,zm),e(zm,mK),e(mK,CGe),e(zm,wGe),e(zm,wx),e(wx,AGe),e(zm,yGe),e(F,LGe),e(F,Qm),e(Qm,gK),e(gK,xGe),e(Qm,kGe),e(Qm,Ax),e(Ax,SGe),e(Qm,RGe),e(F,BGe),e(F,Wm),e(Wm,hK),e(hK,PGe),e(Wm,$Ge),e(Wm,yx),e(yx,qGe),e(Wm,IGe),e(F,jGe),e(F,Hm),e(Hm,pK),e(pK,NGe),e(Hm,DGe),e(Hm,Lx),e(Lx,GGe),e(Hm,OGe),e(F,VGe),e(F,Um),e(Um,_K),e(_K,XGe),e(Um,zGe),e(Um,xx),e(xx,QGe),e(Um,WGe),e(F,HGe),e(F,Jm),e(Jm,uK),e(uK,UGe),e(Jm,JGe),e(Jm,kx),e(kx,YGe),e(Jm,KGe),e(F,ZGe),e(F,Ym),e(Ym,bK),e(bK,eOe),e(Ym,oOe),e(Ym,Sx),e(Sx,rOe),e(Ym,tOe),e(F,aOe),e(F,Km),e(Km,FK),e(FK,nOe),e(Km,sOe),e(Km,Rx),e(Rx,lOe),e(Km,iOe),e(F,dOe),e(F,Zm),e(Zm,vK),e(vK,cOe),e(Zm,fOe),e(Zm,Bx),e(Bx,mOe),e(Zm,gOe),e(F,hOe),e(F,eg),e(eg,TK),e(TK,pOe),e(eg,_Oe),e(eg,Px),e(Px,uOe),e(eg,bOe),e(F,FOe),e(F,og),e(og,MK),e(MK,vOe),e(og,TOe),e(og,$x),e($x,MOe),e(og,EOe),e(F,COe),e(F,rg),e(rg,EK),e(EK,wOe),e(rg,AOe),e(rg,qx),e(qx,yOe),e(rg,LOe),e(F,xOe),e(F,tg),e(tg,CK),e(CK,kOe),e(tg,SOe),e(tg,Ix),e(Ix,ROe),e(tg,BOe),e(F,POe),e(F,ag),e(ag,wK),e(wK,$Oe),e(ag,qOe),e(ag,jx),e(jx,IOe),e(ag,jOe),e(F,NOe),e(F,ng),e(ng,AK),e(AK,DOe),e(ng,GOe),e(ng,Nx),e(Nx,OOe),e(ng,VOe),e(F,XOe),e(F,sg),e(sg,yK),e(yK,zOe),e(sg,QOe),e(sg,Dx),e(Dx,WOe),e(sg,HOe),e(F,UOe),e(F,lg),e(lg,LK),e(LK,JOe),e(lg,YOe),e(lg,Gx),e(Gx,KOe),e(lg,ZOe),e(F,eVe),e(F,ig),e(ig,xK),e(xK,oVe),e(ig,rVe),e(ig,Ox),e(Ox,tVe),e(ig,aVe),e(F,nVe),e(F,dg),e(dg,kK),e(kK,sVe),e(dg,lVe),e(dg,Vx),e(Vx,iVe),e(dg,dVe),e(F,cVe),e(F,cg),e(cg,SK),e(SK,fVe),e(cg,mVe),e(cg,Xx),e(Xx,gVe),e(cg,hVe),e(F,pVe),e(F,fg),e(fg,RK),e(RK,_Ve),e(fg,uVe),e(fg,zx),e(zx,bVe),e(fg,FVe),e(F,vVe),e(F,mg),e(mg,BK),e(BK,TVe),e(mg,MVe),e(mg,Qx),e(Qx,EVe),e(mg,CVe),e(F,wVe),e(F,gg),e(gg,PK),e(PK,AVe),e(gg,yVe),e(gg,Wx),e(Wx,LVe),e(gg,xVe),e(F,kVe),e(F,hg),e(hg,$K),e($K,SVe),e(hg,RVe),e(hg,Hx),e(Hx,BVe),e(hg,PVe),e(F,$Ve),e(F,pg),e(pg,qK),e(qK,qVe),e(pg,IVe),e(pg,Ux),e(Ux,jVe),e(pg,NVe),e(F,DVe),e(F,_g),e(_g,IK),e(IK,GVe),e(_g,OVe),e(_g,Jx),e(Jx,VVe),e(_g,XVe),e(F,zVe),e(F,ug),e(ug,jK),e(jK,QVe),e(ug,WVe),e(ug,Yx),e(Yx,HVe),e(ug,UVe),e(F,JVe),e(F,bg),e(bg,NK),e(NK,YVe),e(bg,KVe),e(bg,Kx),e(Kx,ZVe),e(bg,eXe),e(F,oXe),e(F,Fg),e(Fg,DK),e(DK,rXe),e(Fg,tXe),e(Fg,Zx),e(Zx,aXe),e(Fg,nXe),e(F,sXe),e(F,vg),e(vg,GK),e(GK,lXe),e(vg,iXe),e(vg,ek),e(ek,dXe),e(vg,cXe),e(F,fXe),e(F,Tg),e(Tg,OK),e(OK,mXe),e(Tg,gXe),e(Tg,ok),e(ok,hXe),e(Tg,pXe),e(F,_Xe),e(F,Mg),e(Mg,VK),e(VK,uXe),e(Mg,bXe),e(Mg,rk),e(rk,FXe),e(Mg,vXe),e(F,TXe),e(F,Eg),e(Eg,XK),e(XK,MXe),e(Eg,EXe),e(Eg,tk),e(tk,CXe),e(Eg,wXe),e(F,AXe),e(F,Cg),e(Cg,zK),e(zK,yXe),e(Cg,LXe),e(Cg,ak),e(ak,xXe),e(Cg,kXe),e(F,SXe),e(F,wg),e(wg,QK),e(QK,RXe),e(wg,BXe),e(wg,nk),e(nk,PXe),e(wg,$Xe),e(F,qXe),e(F,Ag),e(Ag,WK),e(WK,IXe),e(Ag,jXe),e(Ag,sk),e(sk,NXe),e(Ag,DXe),e(F,GXe),e(F,yg),e(yg,HK),e(HK,OXe),e(yg,VXe),e(yg,lk),e(lk,XXe),e(yg,zXe),e(F,QXe),e(F,Lg),e(Lg,UK),e(UK,WXe),e(Lg,HXe),e(Lg,ik),e(ik,UXe),e(Lg,JXe),e(F,YXe),e(F,xg),e(xg,JK),e(JK,KXe),e(xg,ZXe),e(xg,dk),e(dk,eze),e(xg,oze),e(F,rze),e(F,kg),e(kg,YK),e(YK,tze),e(kg,aze),e(kg,ck),e(ck,nze),e(kg,sze),e(F,lze),e(F,Sg),e(Sg,KK),e(KK,ize),e(Sg,dze),e(Sg,fk),e(fk,cze),e(Sg,fze),e(F,mze),e(F,Rg),e(Rg,ZK),e(ZK,gze),e(Rg,hze),e(Rg,mk),e(mk,pze),e(Rg,_ze),e(F,uze),e(F,Bg),e(Bg,eZ),e(eZ,bze),e(Bg,Fze),e(Bg,gk),e(gk,vze),e(Bg,Tze),e(F,Mze),e(F,Pg),e(Pg,oZ),e(oZ,Eze),e(Pg,Cze),e(Pg,hk),e(hk,wze),e(Pg,Aze),e(F,yze),e(F,$g),e($g,rZ),e(rZ,Lze),e($g,xze),e($g,pk),e(pk,kze),e($g,Sze),e(F,Rze),e(F,qg),e(qg,tZ),e(tZ,Bze),e(qg,Pze),e(qg,_k),e(_k,$ze),e(qg,qze),e(F,Ize),e(F,Ig),e(Ig,aZ),e(aZ,jze),e(Ig,Nze),e(Ig,uk),e(uk,Dze),e(Ig,Gze),e(F,Oze),e(F,jg),e(jg,nZ),e(nZ,Vze),e(jg,Xze),e(jg,bk),e(bk,zze),e(jg,Qze),e(F,Wze),e(F,Ng),e(Ng,sZ),e(sZ,Hze),e(Ng,Uze),e(Ng,Fk),e(Fk,Jze),e(Ng,Yze),e(F,Kze),e(F,Dg),e(Dg,lZ),e(lZ,Zze),e(Dg,eQe),e(Dg,vk),e(vk,oQe),e(Dg,rQe),e(F,tQe),e(F,Gg),e(Gg,iZ),e(iZ,aQe),e(Gg,nQe),e(Gg,Tk),e(Tk,sQe),e(Gg,lQe),e(F,iQe),e(F,Og),e(Og,dZ),e(dZ,dQe),e(Og,cQe),e(Og,Mk),e(Mk,fQe),e(Og,mQe),e(F,gQe),e(F,Vg),e(Vg,cZ),e(cZ,hQe),e(Vg,pQe),e(Vg,Ek),e(Ek,_Qe),e(Vg,uQe),e(F,bQe),e(F,Xg),e(Xg,fZ),e(fZ,FQe),e(Xg,vQe),e(Xg,Ck),e(Ck,TQe),e(Xg,MQe),e(mo,EQe),e(mo,mZ),e(mZ,CQe),e(mo,wQe),g(NE,mo,null),e(Wo,AQe),e(Wo,zg),g(DE,zg,null),e(zg,yQe),e(zg,gZ),e(gZ,LQe),b(c,kRe,u),b(c,Zi,u),e(Zi,Qg),e(Qg,hZ),g(GE,hZ,null),e(Zi,xQe),e(Zi,pZ),e(pZ,kQe),b(c,SRe,u),b(c,Ho,u),g(OE,Ho,null),e(Ho,SQe),e(Ho,VE),e(VE,RQe),e(VE,wk),e(wk,BQe),e(VE,PQe),e(Ho,$Qe),e(Ho,XE),e(XE,qQe),e(XE,_Z),e(_Z,IQe),e(XE,jQe),e(Ho,NQe),e(Ho,go),g(zE,go,null),e(go,DQe),e(go,uZ),e(uZ,GQe),e(go,OQe),e(go,Qa),e(Qa,VQe),e(Qa,bZ),e(bZ,XQe),e(Qa,zQe),e(Qa,FZ),e(FZ,QQe),e(Qa,WQe),e(Qa,vZ),e(vZ,HQe),e(Qa,UQe),e(go,JQe),e(go,C),e(C,Yn),e(Yn,TZ),e(TZ,YQe),e(Yn,KQe),e(Yn,Ak),e(Ak,ZQe),e(Yn,eWe),e(Yn,yk),e(yk,oWe),e(Yn,rWe),e(C,tWe),e(C,Kn),e(Kn,MZ),e(MZ,aWe),e(Kn,nWe),e(Kn,Lk),e(Lk,sWe),e(Kn,lWe),e(Kn,xk),e(xk,iWe),e(Kn,dWe),e(C,cWe),e(C,Zn),e(Zn,EZ),e(EZ,fWe),e(Zn,mWe),e(Zn,kk),e(kk,gWe),e(Zn,hWe),e(Zn,Sk),e(Sk,pWe),e(Zn,_We),e(C,uWe),e(C,Wg),e(Wg,CZ),e(CZ,bWe),e(Wg,FWe),e(Wg,Rk),e(Rk,vWe),e(Wg,TWe),e(C,MWe),e(C,es),e(es,wZ),e(wZ,EWe),e(es,CWe),e(es,Bk),e(Bk,wWe),e(es,AWe),e(es,Pk),e(Pk,yWe),e(es,LWe),e(C,xWe),e(C,Hg),e(Hg,AZ),e(AZ,kWe),e(Hg,SWe),e(Hg,$k),e($k,RWe),e(Hg,BWe),e(C,PWe),e(C,Ug),e(Ug,yZ),e(yZ,$We),e(Ug,qWe),e(Ug,qk),e(qk,IWe),e(Ug,jWe),e(C,NWe),e(C,Jg),e(Jg,LZ),e(LZ,DWe),e(Jg,GWe),e(Jg,Ik),e(Ik,OWe),e(Jg,VWe),e(C,XWe),e(C,os),e(os,xZ),e(xZ,zWe),e(os,QWe),e(os,jk),e(jk,WWe),e(os,HWe),e(os,Nk),e(Nk,UWe),e(os,JWe),e(C,YWe),e(C,rs),e(rs,kZ),e(kZ,KWe),e(rs,ZWe),e(rs,Dk),e(Dk,eHe),e(rs,oHe),e(rs,Gk),e(Gk,rHe),e(rs,tHe),e(C,aHe),e(C,ts),e(ts,SZ),e(SZ,nHe),e(ts,sHe),e(ts,Ok),e(Ok,lHe),e(ts,iHe),e(ts,Vk),e(Vk,dHe),e(ts,cHe),e(C,fHe),e(C,Yg),e(Yg,RZ),e(RZ,mHe),e(Yg,gHe),e(Yg,Xk),e(Xk,hHe),e(Yg,pHe),e(C,_He),e(C,Kg),e(Kg,BZ),e(BZ,uHe),e(Kg,bHe),e(Kg,zk),e(zk,FHe),e(Kg,vHe),e(C,THe),e(C,as),e(as,PZ),e(PZ,MHe),e(as,EHe),e(as,Qk),e(Qk,CHe),e(as,wHe),e(as,Wk),e(Wk,AHe),e(as,yHe),e(C,LHe),e(C,Zg),e(Zg,$Z),e($Z,xHe),e(Zg,kHe),e(Zg,Hk),e(Hk,SHe),e(Zg,RHe),e(C,BHe),e(C,ns),e(ns,qZ),e(qZ,PHe),e(ns,$He),e(ns,Uk),e(Uk,qHe),e(ns,IHe),e(ns,Jk),e(Jk,jHe),e(ns,NHe),e(C,DHe),e(C,ss),e(ss,IZ),e(IZ,GHe),e(ss,OHe),e(ss,Yk),e(Yk,VHe),e(ss,XHe),e(ss,Kk),e(Kk,zHe),e(ss,QHe),e(C,WHe),e(C,ls),e(ls,jZ),e(jZ,HHe),e(ls,UHe),e(ls,Zk),e(Zk,JHe),e(ls,YHe),e(ls,NZ),e(NZ,KHe),e(ls,ZHe),e(C,eUe),e(C,eh),e(eh,DZ),e(DZ,oUe),e(eh,rUe),e(eh,eS),e(eS,tUe),e(eh,aUe),e(C,nUe),e(C,is),e(is,GZ),e(GZ,sUe),e(is,lUe),e(is,oS),e(oS,iUe),e(is,dUe),e(is,rS),e(rS,cUe),e(is,fUe),e(C,mUe),e(C,oh),e(oh,OZ),e(OZ,gUe),e(oh,hUe),e(oh,tS),e(tS,pUe),e(oh,_Ue),e(C,uUe),e(C,ds),e(ds,VZ),e(VZ,bUe),e(ds,FUe),e(ds,aS),e(aS,vUe),e(ds,TUe),e(ds,nS),e(nS,MUe),e(ds,EUe),e(C,CUe),e(C,cs),e(cs,XZ),e(XZ,wUe),e(cs,AUe),e(cs,sS),e(sS,yUe),e(cs,LUe),e(cs,lS),e(lS,xUe),e(cs,kUe),e(C,SUe),e(C,fs),e(fs,zZ),e(zZ,RUe),e(fs,BUe),e(fs,iS),e(iS,PUe),e(fs,$Ue),e(fs,dS),e(dS,qUe),e(fs,IUe),e(C,jUe),e(C,rh),e(rh,QZ),e(QZ,NUe),e(rh,DUe),e(rh,cS),e(cS,GUe),e(rh,OUe),e(C,VUe),e(C,ms),e(ms,WZ),e(WZ,XUe),e(ms,zUe),e(ms,fS),e(fS,QUe),e(ms,WUe),e(ms,mS),e(mS,HUe),e(ms,UUe),e(C,JUe),e(C,th),e(th,HZ),e(HZ,YUe),e(th,KUe),e(th,gS),e(gS,ZUe),e(th,eJe),e(C,oJe),e(C,gs),e(gs,UZ),e(UZ,rJe),e(gs,tJe),e(gs,hS),e(hS,aJe),e(gs,nJe),e(gs,pS),e(pS,sJe),e(gs,lJe),e(C,iJe),e(C,hs),e(hs,JZ),e(JZ,dJe),e(hs,cJe),e(hs,_S),e(_S,fJe),e(hs,mJe),e(hs,uS),e(uS,gJe),e(hs,hJe),e(C,pJe),e(C,ps),e(ps,YZ),e(YZ,_Je),e(ps,uJe),e(ps,bS),e(bS,bJe),e(ps,FJe),e(ps,FS),e(FS,vJe),e(ps,TJe),e(C,MJe),e(C,_s),e(_s,KZ),e(KZ,EJe),e(_s,CJe),e(_s,vS),e(vS,wJe),e(_s,AJe),e(_s,TS),e(TS,yJe),e(_s,LJe),e(C,xJe),e(C,ah),e(ah,ZZ),e(ZZ,kJe),e(ah,SJe),e(ah,MS),e(MS,RJe),e(ah,BJe),e(C,PJe),e(C,us),e(us,eee),e(eee,$Je),e(us,qJe),e(us,ES),e(ES,IJe),e(us,jJe),e(us,CS),e(CS,NJe),e(us,DJe),e(C,GJe),e(C,bs),e(bs,oee),e(oee,OJe),e(bs,VJe),e(bs,wS),e(wS,XJe),e(bs,zJe),e(bs,AS),e(AS,QJe),e(bs,WJe),e(C,HJe),e(C,Fs),e(Fs,ree),e(ree,UJe),e(Fs,JJe),e(Fs,yS),e(yS,YJe),e(Fs,KJe),e(Fs,LS),e(LS,ZJe),e(Fs,eYe),e(C,oYe),e(C,vs),e(vs,tee),e(tee,rYe),e(vs,tYe),e(vs,xS),e(xS,aYe),e(vs,nYe),e(vs,kS),e(kS,sYe),e(vs,lYe),e(C,iYe),e(C,Ts),e(Ts,aee),e(aee,dYe),e(Ts,cYe),e(Ts,SS),e(SS,fYe),e(Ts,mYe),e(Ts,RS),e(RS,gYe),e(Ts,hYe),e(C,pYe),e(C,Ms),e(Ms,nee),e(nee,_Ye),e(Ms,uYe),e(Ms,BS),e(BS,bYe),e(Ms,FYe),e(Ms,PS),e(PS,vYe),e(Ms,TYe),e(C,MYe),e(C,nh),e(nh,see),e(see,EYe),e(nh,CYe),e(nh,$S),e($S,wYe),e(nh,AYe),e(C,yYe),e(C,Es),e(Es,lee),e(lee,LYe),e(Es,xYe),e(Es,qS),e(qS,kYe),e(Es,SYe),e(Es,IS),e(IS,RYe),e(Es,BYe),e(C,PYe),e(C,sh),e(sh,iee),e(iee,$Ye),e(sh,qYe),e(sh,jS),e(jS,IYe),e(sh,jYe),e(C,NYe),e(C,lh),e(lh,dee),e(dee,DYe),e(lh,GYe),e(lh,NS),e(NS,OYe),e(lh,VYe),e(C,XYe),e(C,Cs),e(Cs,cee),e(cee,zYe),e(Cs,QYe),e(Cs,DS),e(DS,WYe),e(Cs,HYe),e(Cs,GS),e(GS,UYe),e(Cs,JYe),e(C,YYe),e(C,ws),e(ws,fee),e(fee,KYe),e(ws,ZYe),e(ws,OS),e(OS,eKe),e(ws,oKe),e(ws,VS),e(VS,rKe),e(ws,tKe),e(C,aKe),e(C,ih),e(ih,mee),e(mee,nKe),e(ih,sKe),e(ih,XS),e(XS,lKe),e(ih,iKe),e(C,dKe),e(C,As),e(As,gee),e(gee,cKe),e(As,fKe),e(As,zS),e(zS,mKe),e(As,gKe),e(As,QS),e(QS,hKe),e(As,pKe),e(C,_Ke),e(C,ys),e(ys,hee),e(hee,uKe),e(ys,bKe),e(ys,WS),e(WS,FKe),e(ys,vKe),e(ys,HS),e(HS,TKe),e(ys,MKe),e(C,EKe),e(C,Ls),e(Ls,pee),e(pee,CKe),e(Ls,wKe),e(Ls,US),e(US,AKe),e(Ls,yKe),e(Ls,JS),e(JS,LKe),e(Ls,xKe),e(C,kKe),e(C,xs),e(xs,_ee),e(_ee,SKe),e(xs,RKe),e(xs,YS),e(YS,BKe),e(xs,PKe),e(xs,KS),e(KS,$Ke),e(xs,qKe),e(C,IKe),e(C,ks),e(ks,uee),e(uee,jKe),e(ks,NKe),e(ks,ZS),e(ZS,DKe),e(ks,GKe),e(ks,eR),e(eR,OKe),e(ks,VKe),e(C,XKe),e(C,dh),e(dh,bee),e(bee,zKe),e(dh,QKe),e(dh,oR),e(oR,WKe),e(dh,HKe),e(C,UKe),e(C,ch),e(ch,Fee),e(Fee,JKe),e(ch,YKe),e(ch,rR),e(rR,KKe),e(ch,ZKe),e(C,eZe),e(C,fh),e(fh,vee),e(vee,oZe),e(fh,rZe),e(fh,tR),e(tR,tZe),e(fh,aZe),e(C,nZe),e(C,mh),e(mh,Tee),e(Tee,sZe),e(mh,lZe),e(mh,aR),e(aR,iZe),e(mh,dZe),e(C,cZe),e(C,Ss),e(Ss,Mee),e(Mee,fZe),e(Ss,mZe),e(Ss,nR),e(nR,gZe),e(Ss,hZe),e(Ss,sR),e(sR,pZe),e(Ss,_Ze),e(C,uZe),e(C,gh),e(gh,Eee),e(Eee,bZe),e(gh,FZe),e(gh,lR),e(lR,vZe),e(gh,TZe),e(C,MZe),e(C,Rs),e(Rs,Cee),e(Cee,EZe),e(Rs,CZe),e(Rs,iR),e(iR,wZe),e(Rs,AZe),e(Rs,dR),e(dR,yZe),e(Rs,LZe),e(C,xZe),e(C,Bs),e(Bs,wee),e(wee,kZe),e(Bs,SZe),e(Bs,cR),e(cR,RZe),e(Bs,BZe),e(Bs,fR),e(fR,PZe),e(Bs,$Ze),e(C,qZe),e(C,Ps),e(Ps,Aee),e(Aee,IZe),e(Ps,jZe),e(Ps,mR),e(mR,NZe),e(Ps,DZe),e(Ps,gR),e(gR,GZe),e(Ps,OZe),e(C,VZe),e(C,$s),e($s,yee),e(yee,XZe),e($s,zZe),e($s,hR),e(hR,QZe),e($s,WZe),e($s,pR),e(pR,HZe),e($s,UZe),e(C,JZe),e(C,qs),e(qs,Lee),e(Lee,YZe),e(qs,KZe),e(qs,_R),e(_R,ZZe),e(qs,eeo),e(qs,uR),e(uR,oeo),e(qs,reo),e(C,teo),e(C,Is),e(Is,xee),e(xee,aeo),e(Is,neo),e(Is,bR),e(bR,seo),e(Is,leo),e(Is,FR),e(FR,ieo),e(Is,deo),e(C,ceo),e(C,hh),e(hh,kee),e(kee,feo),e(hh,meo),e(hh,vR),e(vR,geo),e(hh,heo),e(C,peo),e(C,ph),e(ph,See),e(See,_eo),e(ph,ueo),e(ph,TR),e(TR,beo),e(ph,Feo),e(C,veo),e(C,js),e(js,Ree),e(Ree,Teo),e(js,Meo),e(js,MR),e(MR,Eeo),e(js,Ceo),e(js,ER),e(ER,weo),e(js,Aeo),e(C,yeo),e(C,Ns),e(Ns,Bee),e(Bee,Leo),e(Ns,xeo),e(Ns,CR),e(CR,keo),e(Ns,Seo),e(Ns,wR),e(wR,Reo),e(Ns,Beo),e(C,Peo),e(C,Ds),e(Ds,Pee),e(Pee,$eo),e(Ds,qeo),e(Ds,AR),e(AR,Ieo),e(Ds,jeo),e(Ds,yR),e(yR,Neo),e(Ds,Deo),e(C,Geo),e(C,_h),e(_h,$ee),e($ee,Oeo),e(_h,Veo),e(_h,LR),e(LR,Xeo),e(_h,zeo),e(C,Qeo),e(C,uh),e(uh,qee),e(qee,Weo),e(uh,Heo),e(uh,xR),e(xR,Ueo),e(uh,Jeo),e(C,Yeo),e(C,bh),e(bh,Iee),e(Iee,Keo),e(bh,Zeo),e(bh,kR),e(kR,eoo),e(bh,ooo),e(C,roo),e(C,Fh),e(Fh,jee),e(jee,too),e(Fh,aoo),e(Fh,SR),e(SR,noo),e(Fh,soo),e(C,loo),e(C,Gs),e(Gs,Nee),e(Nee,ioo),e(Gs,doo),e(Gs,RR),e(RR,coo),e(Gs,foo),e(Gs,BR),e(BR,moo),e(Gs,goo),e(C,hoo),e(C,vh),e(vh,Dee),e(Dee,poo),e(vh,_oo),e(vh,PR),e(PR,uoo),e(vh,boo),e(C,Foo),e(C,Th),e(Th,Gee),e(Gee,voo),e(Th,Too),e(Th,$R),e($R,Moo),e(Th,Eoo),e(C,Coo),e(C,Os),e(Os,Oee),e(Oee,woo),e(Os,Aoo),e(Os,qR),e(qR,yoo),e(Os,Loo),e(Os,IR),e(IR,xoo),e(Os,koo),e(C,Soo),e(C,Vs),e(Vs,Vee),e(Vee,Roo),e(Vs,Boo),e(Vs,jR),e(jR,Poo),e(Vs,$oo),e(Vs,NR),e(NR,qoo),e(Vs,Ioo),e(go,joo),e(go,Xee),e(Xee,Noo),e(go,Doo),g(QE,go,null),e(Ho,Goo),e(Ho,Mh),g(WE,Mh,null),e(Mh,Ooo),e(Mh,zee),e(zee,Voo),b(c,RRe,u),b(c,ed,u),e(ed,Eh),e(Eh,Qee),g(HE,Qee,null),e(ed,Xoo),e(ed,Wee),e(Wee,zoo),b(c,BRe,u),b(c,Uo,u),g(UE,Uo,null),e(Uo,Qoo),e(Uo,JE),e(JE,Woo),e(JE,DR),e(DR,Hoo),e(JE,Uoo),e(Uo,Joo),e(Uo,YE),e(YE,Yoo),e(YE,Hee),e(Hee,Koo),e(YE,Zoo),e(Uo,ero),e(Uo,$e),g(KE,$e,null),e($e,oro),e($e,Uee),e(Uee,rro),e($e,tro),e($e,Wa),e(Wa,aro),e(Wa,Jee),e(Jee,nro),e(Wa,sro),e(Wa,Yee),e(Yee,lro),e(Wa,iro),e(Wa,Kee),e(Kee,dro),e(Wa,cro),e($e,fro),e($e,te),e(te,Ch),e(Ch,Zee),e(Zee,mro),e(Ch,gro),e(Ch,GR),e(GR,hro),e(Ch,pro),e(te,_ro),e(te,wh),e(wh,eoe),e(eoe,uro),e(wh,bro),e(wh,OR),e(OR,Fro),e(wh,vro),e(te,Tro),e(te,Ah),e(Ah,ooe),e(ooe,Mro),e(Ah,Ero),e(Ah,VR),e(VR,Cro),e(Ah,wro),e(te,Aro),e(te,yh),e(yh,roe),e(roe,yro),e(yh,Lro),e(yh,XR),e(XR,xro),e(yh,kro),e(te,Sro),e(te,Lh),e(Lh,toe),e(toe,Rro),e(Lh,Bro),e(Lh,zR),e(zR,Pro),e(Lh,$ro),e(te,qro),e(te,xh),e(xh,aoe),e(aoe,Iro),e(xh,jro),e(xh,QR),e(QR,Nro),e(xh,Dro),e(te,Gro),e(te,kh),e(kh,noe),e(noe,Oro),e(kh,Vro),e(kh,WR),e(WR,Xro),e(kh,zro),e(te,Qro),e(te,Sh),e(Sh,soe),e(soe,Wro),e(Sh,Hro),e(Sh,HR),e(HR,Uro),e(Sh,Jro),e(te,Yro),e(te,Rh),e(Rh,loe),e(loe,Kro),e(Rh,Zro),e(Rh,UR),e(UR,eto),e(Rh,oto),e(te,rto),e(te,Bh),e(Bh,ioe),e(ioe,tto),e(Bh,ato),e(Bh,JR),e(JR,nto),e(Bh,sto),e(te,lto),e(te,Ph),e(Ph,doe),e(doe,ito),e(Ph,dto),e(Ph,YR),e(YR,cto),e(Ph,fto),e(te,mto),e(te,$h),e($h,coe),e(coe,gto),e($h,hto),e($h,KR),e(KR,pto),e($h,_to),e(te,uto),e(te,qh),e(qh,foe),e(foe,bto),e(qh,Fto),e(qh,ZR),e(ZR,vto),e(qh,Tto),e(te,Mto),e(te,Ih),e(Ih,moe),e(moe,Eto),e(Ih,Cto),e(Ih,eB),e(eB,wto),e(Ih,Ato),e(te,yto),e(te,jh),e(jh,goe),e(goe,Lto),e(jh,xto),e(jh,oB),e(oB,kto),e(jh,Sto),e(te,Rto),e(te,Nh),e(Nh,hoe),e(hoe,Bto),e(Nh,Pto),e(Nh,rB),e(rB,$to),e(Nh,qto),e(te,Ito),e(te,Dh),e(Dh,poe),e(poe,jto),e(Dh,Nto),e(Dh,tB),e(tB,Dto),e(Dh,Gto),e(te,Oto),e(te,Gh),e(Gh,_oe),e(_oe,Vto),e(Gh,Xto),e(Gh,aB),e(aB,zto),e(Gh,Qto),e($e,Wto),g(Oh,$e,null),e($e,Hto),e($e,uoe),e(uoe,Uto),e($e,Jto),g(ZE,$e,null),e(Uo,Yto),e(Uo,Vh),g(eC,Vh,null),e(Vh,Kto),e(Vh,boe),e(boe,Zto),b(c,PRe,u),b(c,od,u),e(od,Xh),e(Xh,Foe),g(oC,Foe,null),e(od,eao),e(od,voe),e(voe,oao),b(c,$Re,u),b(c,Jo,u),g(rC,Jo,null),e(Jo,rao),e(Jo,tC),e(tC,tao),e(tC,nB),e(nB,aao),e(tC,nao),e(Jo,sao),e(Jo,aC),e(aC,lao),e(aC,Toe),e(Toe,iao),e(aC,dao),e(Jo,cao),e(Jo,qe),g(nC,qe,null),e(qe,fao),e(qe,Moe),e(Moe,mao),e(qe,gao),e(qe,rd),e(rd,hao),e(rd,Eoe),e(Eoe,pao),e(rd,_ao),e(rd,Coe),e(Coe,uao),e(rd,bao),e(qe,Fao),e(qe,ke),e(ke,zh),e(zh,woe),e(woe,vao),e(zh,Tao),e(zh,sB),e(sB,Mao),e(zh,Eao),e(ke,Cao),e(ke,Qh),e(Qh,Aoe),e(Aoe,wao),e(Qh,Aao),e(Qh,lB),e(lB,yao),e(Qh,Lao),e(ke,xao),e(ke,Wh),e(Wh,yoe),e(yoe,kao),e(Wh,Sao),e(Wh,iB),e(iB,Rao),e(Wh,Bao),e(ke,Pao),e(ke,Hh),e(Hh,Loe),e(Loe,$ao),e(Hh,qao),e(Hh,dB),e(dB,Iao),e(Hh,jao),e(ke,Nao),e(ke,Uh),e(Uh,xoe),e(xoe,Dao),e(Uh,Gao),e(Uh,cB),e(cB,Oao),e(Uh,Vao),e(ke,Xao),e(ke,Jh),e(Jh,koe),e(koe,zao),e(Jh,Qao),e(Jh,fB),e(fB,Wao),e(Jh,Hao),e(ke,Uao),e(ke,Yh),e(Yh,Soe),e(Soe,Jao),e(Yh,Yao),e(Yh,mB),e(mB,Kao),e(Yh,Zao),e(ke,eno),e(ke,Kh),e(Kh,Roe),e(Roe,ono),e(Kh,rno),e(Kh,gB),e(gB,tno),e(Kh,ano),e(qe,nno),g(Zh,qe,null),e(qe,sno),e(qe,Boe),e(Boe,lno),e(qe,ino),g(sC,qe,null),e(Jo,dno),e(Jo,ep),g(lC,ep,null),e(ep,cno),e(ep,Poe),e(Poe,fno),b(c,qRe,u),b(c,td,u),e(td,op),e(op,$oe),g(iC,$oe,null),e(td,mno),e(td,qoe),e(qoe,gno),b(c,IRe,u),b(c,Yo,u),g(dC,Yo,null),e(Yo,hno),e(Yo,ad),e(ad,pno),e(ad,hB),e(hB,_no),e(ad,uno),e(ad,pB),e(pB,bno),e(ad,Fno),e(Yo,vno),e(Yo,cC),e(cC,Tno),e(cC,Ioe),e(Ioe,Mno),e(cC,Eno),e(Yo,Cno),e(Yo,Qr),g(fC,Qr,null),e(Qr,wno),e(Qr,joe),e(joe,Ano),e(Qr,yno),e(Qr,nd),e(nd,Lno),e(nd,Noe),e(Noe,xno),e(nd,kno),e(nd,_B),e(_B,Sno),e(nd,Rno),e(Qr,Bno),e(Qr,Doe),e(Doe,Pno),e(Qr,$no),g(mC,Qr,null),e(Yo,qno),e(Yo,Ie),g(gC,Ie,null),e(Ie,Ino),e(Ie,Goe),e(Goe,jno),e(Ie,Nno),e(Ie,Ha),e(Ha,Dno),e(Ha,Ooe),e(Ooe,Gno),e(Ha,Ono),e(Ha,Voe),e(Voe,Vno),e(Ha,Xno),e(Ha,Xoe),e(Xoe,zno),e(Ha,Qno),e(Ie,Wno),e(Ie,T),e(T,rp),e(rp,zoe),e(zoe,Hno),e(rp,Uno),e(rp,uB),e(uB,Jno),e(rp,Yno),e(T,Kno),e(T,tp),e(tp,Qoe),e(Qoe,Zno),e(tp,eso),e(tp,bB),e(bB,oso),e(tp,rso),e(T,tso),e(T,ap),e(ap,Woe),e(Woe,aso),e(ap,nso),e(ap,FB),e(FB,sso),e(ap,lso),e(T,iso),e(T,np),e(np,Hoe),e(Hoe,dso),e(np,cso),e(np,vB),e(vB,fso),e(np,mso),e(T,gso),e(T,sp),e(sp,Uoe),e(Uoe,hso),e(sp,pso),e(sp,TB),e(TB,_so),e(sp,uso),e(T,bso),e(T,lp),e(lp,Joe),e(Joe,Fso),e(lp,vso),e(lp,MB),e(MB,Tso),e(lp,Mso),e(T,Eso),e(T,ip),e(ip,Yoe),e(Yoe,Cso),e(ip,wso),e(ip,EB),e(EB,Aso),e(ip,yso),e(T,Lso),e(T,dp),e(dp,Koe),e(Koe,xso),e(dp,kso),e(dp,CB),e(CB,Sso),e(dp,Rso),e(T,Bso),e(T,cp),e(cp,Zoe),e(Zoe,Pso),e(cp,$so),e(cp,wB),e(wB,qso),e(cp,Iso),e(T,jso),e(T,fp),e(fp,ere),e(ere,Nso),e(fp,Dso),e(fp,AB),e(AB,Gso),e(fp,Oso),e(T,Vso),e(T,mp),e(mp,ore),e(ore,Xso),e(mp,zso),e(mp,yB),e(yB,Qso),e(mp,Wso),e(T,Hso),e(T,gp),e(gp,rre),e(rre,Uso),e(gp,Jso),e(gp,LB),e(LB,Yso),e(gp,Kso),e(T,Zso),e(T,hp),e(hp,tre),e(tre,elo),e(hp,olo),e(hp,xB),e(xB,rlo),e(hp,tlo),e(T,alo),e(T,pp),e(pp,are),e(are,nlo),e(pp,slo),e(pp,kB),e(kB,llo),e(pp,ilo),e(T,dlo),e(T,_p),e(_p,nre),e(nre,clo),e(_p,flo),e(_p,SB),e(SB,mlo),e(_p,glo),e(T,hlo),e(T,up),e(up,sre),e(sre,plo),e(up,_lo),e(up,RB),e(RB,ulo),e(up,blo),e(T,Flo),e(T,bp),e(bp,lre),e(lre,vlo),e(bp,Tlo),e(bp,BB),e(BB,Mlo),e(bp,Elo),e(T,Clo),e(T,Fp),e(Fp,ire),e(ire,wlo),e(Fp,Alo),e(Fp,PB),e(PB,ylo),e(Fp,Llo),e(T,xlo),e(T,vp),e(vp,dre),e(dre,klo),e(vp,Slo),e(vp,$B),e($B,Rlo),e(vp,Blo),e(T,Plo),e(T,Tp),e(Tp,cre),e(cre,$lo),e(Tp,qlo),e(Tp,qB),e(qB,Ilo),e(Tp,jlo),e(T,Nlo),e(T,Mp),e(Mp,fre),e(fre,Dlo),e(Mp,Glo),e(Mp,IB),e(IB,Olo),e(Mp,Vlo),e(T,Xlo),e(T,Ep),e(Ep,mre),e(mre,zlo),e(Ep,Qlo),e(Ep,jB),e(jB,Wlo),e(Ep,Hlo),e(T,Ulo),e(T,Cp),e(Cp,gre),e(gre,Jlo),e(Cp,Ylo),e(Cp,NB),e(NB,Klo),e(Cp,Zlo),e(T,eio),e(T,wp),e(wp,hre),e(hre,oio),e(wp,rio),e(wp,DB),e(DB,tio),e(wp,aio),e(T,nio),e(T,Ap),e(Ap,pre),e(pre,sio),e(Ap,lio),e(Ap,GB),e(GB,iio),e(Ap,dio),e(T,cio),e(T,yp),e(yp,_re),e(_re,fio),e(yp,mio),e(yp,OB),e(OB,gio),e(yp,hio),e(T,pio),e(T,Lp),e(Lp,ure),e(ure,_io),e(Lp,uio),e(Lp,VB),e(VB,bio),e(Lp,Fio),e(T,vio),e(T,xp),e(xp,bre),e(bre,Tio),e(xp,Mio),e(xp,XB),e(XB,Eio),e(xp,Cio),e(T,wio),e(T,kp),e(kp,Fre),e(Fre,Aio),e(kp,yio),e(kp,zB),e(zB,Lio),e(kp,xio),e(T,kio),e(T,Xs),e(Xs,vre),e(vre,Sio),e(Xs,Rio),e(Xs,QB),e(QB,Bio),e(Xs,Pio),e(Xs,WB),e(WB,$io),e(Xs,qio),e(T,Iio),e(T,Sp),e(Sp,Tre),e(Tre,jio),e(Sp,Nio),e(Sp,HB),e(HB,Dio),e(Sp,Gio),e(T,Oio),e(T,Rp),e(Rp,Mre),e(Mre,Vio),e(Rp,Xio),e(Rp,UB),e(UB,zio),e(Rp,Qio),e(T,Wio),e(T,Bp),e(Bp,Ere),e(Ere,Hio),e(Bp,Uio),e(Bp,JB),e(JB,Jio),e(Bp,Yio),e(T,Kio),e(T,Pp),e(Pp,Cre),e(Cre,Zio),e(Pp,edo),e(Pp,YB),e(YB,odo),e(Pp,rdo),e(T,tdo),e(T,$p),e($p,wre),e(wre,ado),e($p,ndo),e($p,KB),e(KB,sdo),e($p,ldo),e(T,ido),e(T,qp),e(qp,Are),e(Are,ddo),e(qp,cdo),e(qp,ZB),e(ZB,fdo),e(qp,mdo),e(T,gdo),e(T,Ip),e(Ip,yre),e(yre,hdo),e(Ip,pdo),e(Ip,eP),e(eP,_do),e(Ip,udo),e(T,bdo),e(T,jp),e(jp,Lre),e(Lre,Fdo),e(jp,vdo),e(jp,oP),e(oP,Tdo),e(jp,Mdo),e(T,Edo),e(T,Np),e(Np,xre),e(xre,Cdo),e(Np,wdo),e(Np,rP),e(rP,Ado),e(Np,ydo),e(T,Ldo),e(T,Dp),e(Dp,kre),e(kre,xdo),e(Dp,kdo),e(Dp,tP),e(tP,Sdo),e(Dp,Rdo),e(T,Bdo),e(T,Gp),e(Gp,Sre),e(Sre,Pdo),e(Gp,$do),e(Gp,aP),e(aP,qdo),e(Gp,Ido),e(T,jdo),e(T,Op),e(Op,Rre),e(Rre,Ndo),e(Op,Ddo),e(Op,nP),e(nP,Gdo),e(Op,Odo),e(T,Vdo),e(T,Vp),e(Vp,Bre),e(Bre,Xdo),e(Vp,zdo),e(Vp,sP),e(sP,Qdo),e(Vp,Wdo),e(T,Hdo),e(T,Xp),e(Xp,Pre),e(Pre,Udo),e(Xp,Jdo),e(Xp,lP),e(lP,Ydo),e(Xp,Kdo),e(T,Zdo),e(T,zp),e(zp,$re),e($re,eco),e(zp,oco),e(zp,iP),e(iP,rco),e(zp,tco),e(T,aco),e(T,Qp),e(Qp,qre),e(qre,nco),e(Qp,sco),e(Qp,dP),e(dP,lco),e(Qp,ico),e(T,dco),e(T,Wp),e(Wp,Ire),e(Ire,cco),e(Wp,fco),e(Wp,cP),e(cP,mco),e(Wp,gco),e(T,hco),e(T,Hp),e(Hp,jre),e(jre,pco),e(Hp,_co),e(Hp,fP),e(fP,uco),e(Hp,bco),e(T,Fco),e(T,Up),e(Up,Nre),e(Nre,vco),e(Up,Tco),e(Up,mP),e(mP,Mco),e(Up,Eco),e(T,Cco),e(T,Jp),e(Jp,Dre),e(Dre,wco),e(Jp,Aco),e(Jp,gP),e(gP,yco),e(Jp,Lco),e(T,xco),e(T,Yp),e(Yp,Gre),e(Gre,kco),e(Yp,Sco),e(Yp,hP),e(hP,Rco),e(Yp,Bco),e(T,Pco),e(T,Kp),e(Kp,Ore),e(Ore,$co),e(Kp,qco),e(Kp,pP),e(pP,Ico),e(Kp,jco),e(T,Nco),e(T,Zp),e(Zp,Vre),e(Vre,Dco),e(Zp,Gco),e(Zp,_P),e(_P,Oco),e(Zp,Vco),e(T,Xco),e(T,e_),e(e_,Xre),e(Xre,zco),e(e_,Qco),e(e_,uP),e(uP,Wco),e(e_,Hco),e(T,Uco),e(T,o_),e(o_,zre),e(zre,Jco),e(o_,Yco),e(o_,bP),e(bP,Kco),e(o_,Zco),e(T,efo),e(T,r_),e(r_,Qre),e(Qre,ofo),e(r_,rfo),e(r_,FP),e(FP,tfo),e(r_,afo),e(T,nfo),e(T,t_),e(t_,Wre),e(Wre,sfo),e(t_,lfo),e(t_,vP),e(vP,ifo),e(t_,dfo),e(T,cfo),e(T,a_),e(a_,Hre),e(Hre,ffo),e(a_,mfo),e(a_,TP),e(TP,gfo),e(a_,hfo),e(T,pfo),e(T,n_),e(n_,Ure),e(Ure,_fo),e(n_,ufo),e(n_,MP),e(MP,bfo),e(n_,Ffo),e(T,vfo),e(T,s_),e(s_,Jre),e(Jre,Tfo),e(s_,Mfo),e(s_,EP),e(EP,Efo),e(s_,Cfo),e(T,wfo),e(T,l_),e(l_,Yre),e(Yre,Afo),e(l_,yfo),e(l_,CP),e(CP,Lfo),e(l_,xfo),e(T,kfo),e(T,i_),e(i_,Kre),e(Kre,Sfo),e(i_,Rfo),e(i_,wP),e(wP,Bfo),e(i_,Pfo),e(T,$fo),e(T,d_),e(d_,Zre),e(Zre,qfo),e(d_,Ifo),e(d_,AP),e(AP,jfo),e(d_,Nfo),e(T,Dfo),e(T,c_),e(c_,ete),e(ete,Gfo),e(c_,Ofo),e(c_,yP),e(yP,Vfo),e(c_,Xfo),e(T,zfo),e(T,f_),e(f_,ote),e(ote,Qfo),e(f_,Wfo),e(f_,LP),e(LP,Hfo),e(f_,Ufo),e(T,Jfo),e(T,m_),e(m_,rte),e(rte,Yfo),e(m_,Kfo),e(m_,xP),e(xP,Zfo),e(m_,emo),e(T,omo),e(T,g_),e(g_,tte),e(tte,rmo),e(g_,tmo),e(g_,kP),e(kP,amo),e(g_,nmo),e(T,smo),e(T,h_),e(h_,ate),e(ate,lmo),e(h_,imo),e(h_,SP),e(SP,dmo),e(h_,cmo),e(T,fmo),e(T,p_),e(p_,nte),e(nte,mmo),e(p_,gmo),e(p_,RP),e(RP,hmo),e(p_,pmo),e(T,_mo),e(T,__),e(__,ste),e(ste,umo),e(__,bmo),e(__,BP),e(BP,Fmo),e(__,vmo),e(T,Tmo),e(T,u_),e(u_,lte),e(lte,Mmo),e(u_,Emo),e(u_,PP),e(PP,Cmo),e(u_,wmo),e(T,Amo),e(T,b_),e(b_,ite),e(ite,ymo),e(b_,Lmo),e(b_,$P),e($P,xmo),e(b_,kmo),e(T,Smo),e(T,F_),e(F_,dte),e(dte,Rmo),e(F_,Bmo),e(F_,qP),e(qP,Pmo),e(F_,$mo),e(T,qmo),e(T,v_),e(v_,cte),e(cte,Imo),e(v_,jmo),e(v_,IP),e(IP,Nmo),e(v_,Dmo),e(T,Gmo),e(T,T_),e(T_,fte),e(fte,Omo),e(T_,Vmo),e(T_,jP),e(jP,Xmo),e(T_,zmo),e(T,Qmo),e(T,M_),e(M_,mte),e(mte,Wmo),e(M_,Hmo),e(M_,NP),e(NP,Umo),e(M_,Jmo),e(T,Ymo),e(T,E_),e(E_,gte),e(gte,Kmo),e(E_,Zmo),e(E_,DP),e(DP,ego),e(E_,ogo),e(T,rgo),e(T,C_),e(C_,hte),e(hte,tgo),e(C_,ago),e(C_,GP),e(GP,ngo),e(C_,sgo),e(T,lgo),e(T,w_),e(w_,pte),e(pte,igo),e(w_,dgo),e(w_,OP),e(OP,cgo),e(w_,fgo),e(T,mgo),e(T,A_),e(A_,_te),e(_te,ggo),e(A_,hgo),e(A_,VP),e(VP,pgo),e(A_,_go),e(T,ugo),e(T,y_),e(y_,ute),e(ute,bgo),e(y_,Fgo),e(y_,XP),e(XP,vgo),e(y_,Tgo),e(T,Mgo),e(T,L_),e(L_,bte),e(bte,Ego),e(L_,Cgo),e(L_,zP),e(zP,wgo),e(L_,Ago),e(T,ygo),e(T,x_),e(x_,Fte),e(Fte,Lgo),e(x_,xgo),e(x_,QP),e(QP,kgo),e(x_,Sgo),e(T,Rgo),e(T,k_),e(k_,vte),e(vte,Bgo),e(k_,Pgo),e(k_,WP),e(WP,$go),e(k_,qgo),e(T,Igo),e(T,S_),e(S_,Tte),e(Tte,jgo),e(S_,Ngo),e(S_,HP),e(HP,Dgo),e(S_,Ggo),e(T,Ogo),e(T,R_),e(R_,Mte),e(Mte,Vgo),e(R_,Xgo),e(R_,UP),e(UP,zgo),e(R_,Qgo),e(T,Wgo),e(T,B_),e(B_,Ete),e(Ete,Hgo),e(B_,Ugo),e(B_,JP),e(JP,Jgo),e(B_,Ygo),e(T,Kgo),e(T,P_),e(P_,Cte),e(Cte,Zgo),e(P_,eho),e(P_,YP),e(YP,oho),e(P_,rho),e(T,tho),e(T,$_),e($_,wte),e(wte,aho),e($_,nho),e($_,KP),e(KP,sho),e($_,lho),e(T,iho),e(T,q_),e(q_,Ate),e(Ate,dho),e(q_,cho),e(q_,ZP),e(ZP,fho),e(q_,mho),e(T,gho),e(T,I_),e(I_,yte),e(yte,hho),e(I_,pho),e(I_,e$),e(e$,_ho),e(I_,uho),e(T,bho),e(T,j_),e(j_,Lte),e(Lte,Fho),e(j_,vho),e(j_,o$),e(o$,Tho),e(j_,Mho),e(Ie,Eho),e(Ie,N_),e(N_,Cho),e(N_,xte),e(xte,who),e(N_,Aho),e(N_,kte),e(kte,yho),e(Ie,Lho),e(Ie,Ste),e(Ste,xho),e(Ie,kho),g(hC,Ie,null),b(c,jRe,u),b(c,sd,u),e(sd,D_),e(D_,Rte),g(pC,Rte,null),e(sd,Sho),e(sd,Bte),e(Bte,Rho),b(c,NRe,u),b(c,Ko,u),g(_C,Ko,null),e(Ko,Bho),e(Ko,ld),e(ld,Pho),e(ld,r$),e(r$,$ho),e(ld,qho),e(ld,t$),e(t$,Iho),e(ld,jho),e(Ko,Nho),e(Ko,uC),e(uC,Dho),e(uC,Pte),e(Pte,Gho),e(uC,Oho),e(Ko,Vho),e(Ko,Wr),g(bC,Wr,null),e(Wr,Xho),e(Wr,$te),e($te,zho),e(Wr,Qho),e(Wr,id),e(id,Who),e(id,qte),e(qte,Hho),e(id,Uho),e(id,a$),e(a$,Jho),e(id,Yho),e(Wr,Kho),e(Wr,Ite),e(Ite,Zho),e(Wr,epo),g(FC,Wr,null),e(Ko,opo),e(Ko,je),g(vC,je,null),e(je,rpo),e(je,jte),e(jte,tpo),e(je,apo),e(je,Ua),e(Ua,npo),e(Ua,Nte),e(Nte,spo),e(Ua,lpo),e(Ua,Dte),e(Dte,ipo),e(Ua,dpo),e(Ua,Gte),e(Gte,cpo),e(Ua,fpo),e(je,mpo),e(je,S),e(S,G_),e(G_,Ote),e(Ote,gpo),e(G_,hpo),e(G_,n$),e(n$,ppo),e(G_,_po),e(S,upo),e(S,O_),e(O_,Vte),e(Vte,bpo),e(O_,Fpo),e(O_,s$),e(s$,vpo),e(O_,Tpo),e(S,Mpo),e(S,V_),e(V_,Xte),e(Xte,Epo),e(V_,Cpo),e(V_,l$),e(l$,wpo),e(V_,Apo),e(S,ypo),e(S,X_),e(X_,zte),e(zte,Lpo),e(X_,xpo),e(X_,i$),e(i$,kpo),e(X_,Spo),e(S,Rpo),e(S,z_),e(z_,Qte),e(Qte,Bpo),e(z_,Ppo),e(z_,d$),e(d$,$po),e(z_,qpo),e(S,Ipo),e(S,Q_),e(Q_,Wte),e(Wte,jpo),e(Q_,Npo),e(Q_,c$),e(c$,Dpo),e(Q_,Gpo),e(S,Opo),e(S,W_),e(W_,Hte),e(Hte,Vpo),e(W_,Xpo),e(W_,f$),e(f$,zpo),e(W_,Qpo),e(S,Wpo),e(S,H_),e(H_,Ute),e(Ute,Hpo),e(H_,Upo),e(H_,m$),e(m$,Jpo),e(H_,Ypo),e(S,Kpo),e(S,U_),e(U_,Jte),e(Jte,Zpo),e(U_,e_o),e(U_,g$),e(g$,o_o),e(U_,r_o),e(S,t_o),e(S,J_),e(J_,Yte),e(Yte,a_o),e(J_,n_o),e(J_,h$),e(h$,s_o),e(J_,l_o),e(S,i_o),e(S,Y_),e(Y_,Kte),e(Kte,d_o),e(Y_,c_o),e(Y_,p$),e(p$,f_o),e(Y_,m_o),e(S,g_o),e(S,K_),e(K_,Zte),e(Zte,h_o),e(K_,p_o),e(K_,_$),e(_$,__o),e(K_,u_o),e(S,b_o),e(S,Z_),e(Z_,eae),e(eae,F_o),e(Z_,v_o),e(Z_,u$),e(u$,T_o),e(Z_,M_o),e(S,E_o),e(S,eu),e(eu,oae),e(oae,C_o),e(eu,w_o),e(eu,b$),e(b$,A_o),e(eu,y_o),e(S,L_o),e(S,ou),e(ou,rae),e(rae,x_o),e(ou,k_o),e(ou,F$),e(F$,S_o),e(ou,R_o),e(S,B_o),e(S,ru),e(ru,tae),e(tae,P_o),e(ru,$_o),e(ru,v$),e(v$,q_o),e(ru,I_o),e(S,j_o),e(S,tu),e(tu,aae),e(aae,N_o),e(tu,D_o),e(tu,T$),e(T$,G_o),e(tu,O_o),e(S,V_o),e(S,au),e(au,nae),e(nae,X_o),e(au,z_o),e(au,M$),e(M$,Q_o),e(au,W_o),e(S,H_o),e(S,nu),e(nu,sae),e(sae,U_o),e(nu,J_o),e(nu,E$),e(E$,Y_o),e(nu,K_o),e(S,Z_o),e(S,su),e(su,lae),e(lae,euo),e(su,ouo),e(su,C$),e(C$,ruo),e(su,tuo),e(S,auo),e(S,lu),e(lu,iae),e(iae,nuo),e(lu,suo),e(lu,w$),e(w$,luo),e(lu,iuo),e(S,duo),e(S,iu),e(iu,dae),e(dae,cuo),e(iu,fuo),e(iu,A$),e(A$,muo),e(iu,guo),e(S,huo),e(S,du),e(du,cae),e(cae,puo),e(du,_uo),e(du,y$),e(y$,uuo),e(du,buo),e(S,Fuo),e(S,cu),e(cu,fae),e(fae,vuo),e(cu,Tuo),e(cu,L$),e(L$,Muo),e(cu,Euo),e(S,Cuo),e(S,fu),e(fu,mae),e(mae,wuo),e(fu,Auo),e(fu,x$),e(x$,yuo),e(fu,Luo),e(S,xuo),e(S,mu),e(mu,gae),e(gae,kuo),e(mu,Suo),e(mu,k$),e(k$,Ruo),e(mu,Buo),e(S,Puo),e(S,gu),e(gu,hae),e(hae,$uo),e(gu,quo),e(gu,S$),e(S$,Iuo),e(gu,juo),e(S,Nuo),e(S,hu),e(hu,pae),e(pae,Duo),e(hu,Guo),e(hu,R$),e(R$,Ouo),e(hu,Vuo),e(S,Xuo),e(S,pu),e(pu,_ae),e(_ae,zuo),e(pu,Quo),e(pu,B$),e(B$,Wuo),e(pu,Huo),e(S,Uuo),e(S,_u),e(_u,uae),e(uae,Juo),e(_u,Yuo),e(_u,P$),e(P$,Kuo),e(_u,Zuo),e(S,e1o),e(S,uu),e(uu,bae),e(bae,o1o),e(uu,r1o),e(uu,$$),e($$,t1o),e(uu,a1o),e(S,n1o),e(S,bu),e(bu,Fae),e(Fae,s1o),e(bu,l1o),e(bu,q$),e(q$,i1o),e(bu,d1o),e(S,c1o),e(S,Fu),e(Fu,vae),e(vae,f1o),e(Fu,m1o),e(Fu,I$),e(I$,g1o),e(Fu,h1o),e(S,p1o),e(S,vu),e(vu,Tae),e(Tae,_1o),e(vu,u1o),e(vu,j$),e(j$,b1o),e(vu,F1o),e(S,v1o),e(S,Tu),e(Tu,Mae),e(Mae,T1o),e(Tu,M1o),e(Tu,N$),e(N$,E1o),e(Tu,C1o),e(S,w1o),e(S,Mu),e(Mu,Eae),e(Eae,A1o),e(Mu,y1o),e(Mu,D$),e(D$,L1o),e(Mu,x1o),e(S,k1o),e(S,Eu),e(Eu,Cae),e(Cae,S1o),e(Eu,R1o),e(Eu,G$),e(G$,B1o),e(Eu,P1o),e(S,$1o),e(S,Cu),e(Cu,wae),e(wae,q1o),e(Cu,I1o),e(Cu,O$),e(O$,j1o),e(Cu,N1o),e(S,D1o),e(S,wu),e(wu,Aae),e(Aae,G1o),e(wu,O1o),e(wu,V$),e(V$,V1o),e(wu,X1o),e(je,z1o),e(je,Au),e(Au,Q1o),e(Au,yae),e(yae,W1o),e(Au,H1o),e(Au,Lae),e(Lae,U1o),e(je,J1o),e(je,xae),e(xae,Y1o),e(je,K1o),g(TC,je,null),b(c,DRe,u),b(c,dd,u),e(dd,yu),e(yu,kae),g(MC,kae,null),e(dd,Z1o),e(dd,Sae),e(Sae,ebo),b(c,GRe,u),b(c,Zo,u),g(EC,Zo,null),e(Zo,obo),e(Zo,cd),e(cd,rbo),e(cd,X$),e(X$,tbo),e(cd,abo),e(cd,z$),e(z$,nbo),e(cd,sbo),e(Zo,lbo),e(Zo,CC),e(CC,ibo),e(CC,Rae),e(Rae,dbo),e(CC,cbo),e(Zo,fbo),e(Zo,Hr),g(wC,Hr,null),e(Hr,mbo),e(Hr,Bae),e(Bae,gbo),e(Hr,hbo),e(Hr,fd),e(fd,pbo),e(fd,Pae),e(Pae,_bo),e(fd,ubo),e(fd,Q$),e(Q$,bbo),e(fd,Fbo),e(Hr,vbo),e(Hr,$ae),e($ae,Tbo),e(Hr,Mbo),g(AC,Hr,null),e(Zo,Ebo),e(Zo,Ne),g(yC,Ne,null),e(Ne,Cbo),e(Ne,qae),e(qae,wbo),e(Ne,Abo),e(Ne,Ja),e(Ja,ybo),e(Ja,Iae),e(Iae,Lbo),e(Ja,xbo),e(Ja,jae),e(jae,kbo),e(Ja,Sbo),e(Ja,Nae),e(Nae,Rbo),e(Ja,Bbo),e(Ne,Pbo),e(Ne,$),e($,Lu),e(Lu,Dae),e(Dae,$bo),e(Lu,qbo),e(Lu,W$),e(W$,Ibo),e(Lu,jbo),e($,Nbo),e($,xu),e(xu,Gae),e(Gae,Dbo),e(xu,Gbo),e(xu,H$),e(H$,Obo),e(xu,Vbo),e($,Xbo),e($,ku),e(ku,Oae),e(Oae,zbo),e(ku,Qbo),e(ku,U$),e(U$,Wbo),e(ku,Hbo),e($,Ubo),e($,Su),e(Su,Vae),e(Vae,Jbo),e(Su,Ybo),e(Su,J$),e(J$,Kbo),e(Su,Zbo),e($,e5o),e($,Ru),e(Ru,Xae),e(Xae,o5o),e(Ru,r5o),e(Ru,Y$),e(Y$,t5o),e(Ru,a5o),e($,n5o),e($,Bu),e(Bu,zae),e(zae,s5o),e(Bu,l5o),e(Bu,K$),e(K$,i5o),e(Bu,d5o),e($,c5o),e($,Pu),e(Pu,Qae),e(Qae,f5o),e(Pu,m5o),e(Pu,Z$),e(Z$,g5o),e(Pu,h5o),e($,p5o),e($,$u),e($u,Wae),e(Wae,_5o),e($u,u5o),e($u,eq),e(eq,b5o),e($u,F5o),e($,v5o),e($,qu),e(qu,Hae),e(Hae,T5o),e(qu,M5o),e(qu,oq),e(oq,E5o),e(qu,C5o),e($,w5o),e($,Iu),e(Iu,Uae),e(Uae,A5o),e(Iu,y5o),e(Iu,rq),e(rq,L5o),e(Iu,x5o),e($,k5o),e($,ju),e(ju,Jae),e(Jae,S5o),e(ju,R5o),e(ju,tq),e(tq,B5o),e(ju,P5o),e($,$5o),e($,Nu),e(Nu,Yae),e(Yae,q5o),e(Nu,I5o),e(Nu,aq),e(aq,j5o),e(Nu,N5o),e($,D5o),e($,Du),e(Du,Kae),e(Kae,G5o),e(Du,O5o),e(Du,nq),e(nq,V5o),e(Du,X5o),e($,z5o),e($,Gu),e(Gu,Zae),e(Zae,Q5o),e(Gu,W5o),e(Gu,sq),e(sq,H5o),e(Gu,U5o),e($,J5o),e($,Ou),e(Ou,ene),e(ene,Y5o),e(Ou,K5o),e(Ou,lq),e(lq,Z5o),e(Ou,e2o),e($,o2o),e($,Vu),e(Vu,one),e(one,r2o),e(Vu,t2o),e(Vu,iq),e(iq,a2o),e(Vu,n2o),e($,s2o),e($,Xu),e(Xu,rne),e(rne,l2o),e(Xu,i2o),e(Xu,dq),e(dq,d2o),e(Xu,c2o),e($,f2o),e($,zu),e(zu,tne),e(tne,m2o),e(zu,g2o),e(zu,cq),e(cq,h2o),e(zu,p2o),e($,_2o),e($,Qu),e(Qu,ane),e(ane,u2o),e(Qu,b2o),e(Qu,fq),e(fq,F2o),e(Qu,v2o),e($,T2o),e($,Wu),e(Wu,nne),e(nne,M2o),e(Wu,E2o),e(Wu,mq),e(mq,C2o),e(Wu,w2o),e($,A2o),e($,Hu),e(Hu,sne),e(sne,y2o),e(Hu,L2o),e(Hu,gq),e(gq,x2o),e(Hu,k2o),e($,S2o),e($,Uu),e(Uu,lne),e(lne,R2o),e(Uu,B2o),e(Uu,hq),e(hq,P2o),e(Uu,$2o),e($,q2o),e($,Ju),e(Ju,ine),e(ine,I2o),e(Ju,j2o),e(Ju,pq),e(pq,N2o),e(Ju,D2o),e($,G2o),e($,Yu),e(Yu,dne),e(dne,O2o),e(Yu,V2o),e(Yu,_q),e(_q,X2o),e(Yu,z2o),e($,Q2o),e($,Ku),e(Ku,cne),e(cne,W2o),e(Ku,H2o),e(Ku,uq),e(uq,U2o),e(Ku,J2o),e($,Y2o),e($,Zu),e(Zu,fne),e(fne,K2o),e(Zu,Z2o),e(Zu,bq),e(bq,eFo),e(Zu,oFo),e($,rFo),e($,e1),e(e1,mne),e(mne,tFo),e(e1,aFo),e(e1,Fq),e(Fq,nFo),e(e1,sFo),e($,lFo),e($,o1),e(o1,gne),e(gne,iFo),e(o1,dFo),e(o1,vq),e(vq,cFo),e(o1,fFo),e($,mFo),e($,r1),e(r1,hne),e(hne,gFo),e(r1,hFo),e(r1,Tq),e(Tq,pFo),e(r1,_Fo),e($,uFo),e($,t1),e(t1,pne),e(pne,bFo),e(t1,FFo),e(t1,Mq),e(Mq,vFo),e(t1,TFo),e($,MFo),e($,a1),e(a1,_ne),e(_ne,EFo),e(a1,CFo),e(a1,Eq),e(Eq,wFo),e(a1,AFo),e($,yFo),e($,n1),e(n1,une),e(une,LFo),e(n1,xFo),e(n1,Cq),e(Cq,kFo),e(n1,SFo),e($,RFo),e($,s1),e(s1,bne),e(bne,BFo),e(s1,PFo),e(s1,wq),e(wq,$Fo),e(s1,qFo),e($,IFo),e($,l1),e(l1,Fne),e(Fne,jFo),e(l1,NFo),e(l1,Aq),e(Aq,DFo),e(l1,GFo),e($,OFo),e($,i1),e(i1,vne),e(vne,VFo),e(i1,XFo),e(i1,yq),e(yq,zFo),e(i1,QFo),e(Ne,WFo),e(Ne,d1),e(d1,HFo),e(d1,Tne),e(Tne,UFo),e(d1,JFo),e(d1,Mne),e(Mne,YFo),e(Ne,KFo),e(Ne,Ene),e(Ene,ZFo),e(Ne,evo),g(LC,Ne,null),b(c,ORe,u),b(c,md,u),e(md,c1),e(c1,Cne),g(xC,Cne,null),e(md,ovo),e(md,wne),e(wne,rvo),b(c,VRe,u),b(c,er,u),g(kC,er,null),e(er,tvo),e(er,gd),e(gd,avo),e(gd,Lq),e(Lq,nvo),e(gd,svo),e(gd,xq),e(xq,lvo),e(gd,ivo),e(er,dvo),e(er,SC),e(SC,cvo),e(SC,Ane),e(Ane,fvo),e(SC,mvo),e(er,gvo),e(er,Ur),g(RC,Ur,null),e(Ur,hvo),e(Ur,yne),e(yne,pvo),e(Ur,_vo),e(Ur,hd),e(hd,uvo),e(hd,Lne),e(Lne,bvo),e(hd,Fvo),e(hd,kq),e(kq,vvo),e(hd,Tvo),e(Ur,Mvo),e(Ur,xne),e(xne,Evo),e(Ur,Cvo),g(BC,Ur,null),e(er,wvo),e(er,De),g(PC,De,null),e(De,Avo),e(De,kne),e(kne,yvo),e(De,Lvo),e(De,Ya),e(Ya,xvo),e(Ya,Sne),e(Sne,kvo),e(Ya,Svo),e(Ya,Rne),e(Rne,Rvo),e(Ya,Bvo),e(Ya,Bne),e(Bne,Pvo),e(Ya,$vo),e(De,qvo),e(De,q),e(q,f1),e(f1,Pne),e(Pne,Ivo),e(f1,jvo),e(f1,Sq),e(Sq,Nvo),e(f1,Dvo),e(q,Gvo),e(q,m1),e(m1,$ne),e($ne,Ovo),e(m1,Vvo),e(m1,Rq),e(Rq,Xvo),e(m1,zvo),e(q,Qvo),e(q,g1),e(g1,qne),e(qne,Wvo),e(g1,Hvo),e(g1,Bq),e(Bq,Uvo),e(g1,Jvo),e(q,Yvo),e(q,h1),e(h1,Ine),e(Ine,Kvo),e(h1,Zvo),e(h1,Pq),e(Pq,e6o),e(h1,o6o),e(q,r6o),e(q,p1),e(p1,jne),e(jne,t6o),e(p1,a6o),e(p1,$q),e($q,n6o),e(p1,s6o),e(q,l6o),e(q,_1),e(_1,Nne),e(Nne,i6o),e(_1,d6o),e(_1,qq),e(qq,c6o),e(_1,f6o),e(q,m6o),e(q,u1),e(u1,Dne),e(Dne,g6o),e(u1,h6o),e(u1,Iq),e(Iq,p6o),e(u1,_6o),e(q,u6o),e(q,b1),e(b1,Gne),e(Gne,b6o),e(b1,F6o),e(b1,jq),e(jq,v6o),e(b1,T6o),e(q,M6o),e(q,F1),e(F1,One),e(One,E6o),e(F1,C6o),e(F1,Nq),e(Nq,w6o),e(F1,A6o),e(q,y6o),e(q,v1),e(v1,Vne),e(Vne,L6o),e(v1,x6o),e(v1,Dq),e(Dq,k6o),e(v1,S6o),e(q,R6o),e(q,T1),e(T1,Xne),e(Xne,B6o),e(T1,P6o),e(T1,Gq),e(Gq,$6o),e(T1,q6o),e(q,I6o),e(q,M1),e(M1,zne),e(zne,j6o),e(M1,N6o),e(M1,Oq),e(Oq,D6o),e(M1,G6o),e(q,O6o),e(q,E1),e(E1,Qne),e(Qne,V6o),e(E1,X6o),e(E1,Vq),e(Vq,z6o),e(E1,Q6o),e(q,W6o),e(q,C1),e(C1,Wne),e(Wne,H6o),e(C1,U6o),e(C1,Xq),e(Xq,J6o),e(C1,Y6o),e(q,K6o),e(q,w1),e(w1,Hne),e(Hne,Z6o),e(w1,e0o),e(w1,zq),e(zq,o0o),e(w1,r0o),e(q,t0o),e(q,A1),e(A1,Une),e(Une,a0o),e(A1,n0o),e(A1,Qq),e(Qq,s0o),e(A1,l0o),e(q,i0o),e(q,y1),e(y1,Jne),e(Jne,d0o),e(y1,c0o),e(y1,Wq),e(Wq,f0o),e(y1,m0o),e(q,g0o),e(q,L1),e(L1,Yne),e(Yne,h0o),e(L1,p0o),e(L1,Hq),e(Hq,_0o),e(L1,u0o),e(q,b0o),e(q,x1),e(x1,Kne),e(Kne,F0o),e(x1,v0o),e(x1,Uq),e(Uq,T0o),e(x1,M0o),e(q,E0o),e(q,k1),e(k1,Zne),e(Zne,C0o),e(k1,w0o),e(k1,Jq),e(Jq,A0o),e(k1,y0o),e(q,L0o),e(q,S1),e(S1,ese),e(ese,x0o),e(S1,k0o),e(S1,Yq),e(Yq,S0o),e(S1,R0o),e(q,B0o),e(q,R1),e(R1,ose),e(ose,P0o),e(R1,$0o),e(R1,Kq),e(Kq,q0o),e(R1,I0o),e(q,j0o),e(q,B1),e(B1,rse),e(rse,N0o),e(B1,D0o),e(B1,Zq),e(Zq,G0o),e(B1,O0o),e(q,V0o),e(q,P1),e(P1,tse),e(tse,X0o),e(P1,z0o),e(P1,eI),e(eI,Q0o),e(P1,W0o),e(q,H0o),e(q,$1),e($1,ase),e(ase,U0o),e($1,J0o),e($1,oI),e(oI,Y0o),e($1,K0o),e(q,Z0o),e(q,q1),e(q1,nse),e(nse,eTo),e(q1,oTo),e(q1,rI),e(rI,rTo),e(q1,tTo),e(q,aTo),e(q,I1),e(I1,sse),e(sse,nTo),e(I1,sTo),e(I1,tI),e(tI,lTo),e(I1,iTo),e(q,dTo),e(q,j1),e(j1,lse),e(lse,cTo),e(j1,fTo),e(j1,aI),e(aI,mTo),e(j1,gTo),e(q,hTo),e(q,N1),e(N1,ise),e(ise,pTo),e(N1,_To),e(N1,nI),e(nI,uTo),e(N1,bTo),e(q,FTo),e(q,D1),e(D1,dse),e(dse,vTo),e(D1,TTo),e(D1,sI),e(sI,MTo),e(D1,ETo),e(q,CTo),e(q,G1),e(G1,cse),e(cse,wTo),e(G1,ATo),e(G1,fse),e(fse,yTo),e(G1,LTo),e(q,xTo),e(q,O1),e(O1,mse),e(mse,kTo),e(O1,STo),e(O1,lI),e(lI,RTo),e(O1,BTo),e(q,PTo),e(q,V1),e(V1,gse),e(gse,$To),e(V1,qTo),e(V1,iI),e(iI,ITo),e(V1,jTo),e(q,NTo),e(q,X1),e(X1,hse),e(hse,DTo),e(X1,GTo),e(X1,dI),e(dI,OTo),e(X1,VTo),e(q,XTo),e(q,z1),e(z1,pse),e(pse,zTo),e(z1,QTo),e(z1,cI),e(cI,WTo),e(z1,HTo),e(De,UTo),e(De,Q1),e(Q1,JTo),e(Q1,_se),e(_se,YTo),e(Q1,KTo),e(Q1,use),e(use,ZTo),e(De,e8o),e(De,bse),e(bse,o8o),e(De,r8o),g($C,De,null),b(c,XRe,u),b(c,pd,u),e(pd,W1),e(W1,Fse),g(qC,Fse,null),e(pd,t8o),e(pd,vse),e(vse,a8o),b(c,zRe,u),b(c,or,u),g(IC,or,null),e(or,n8o),e(or,_d),e(_d,s8o),e(_d,fI),e(fI,l8o),e(_d,i8o),e(_d,mI),e(mI,d8o),e(_d,c8o),e(or,f8o),e(or,jC),e(jC,m8o),e(jC,Tse),e(Tse,g8o),e(jC,h8o),e(or,p8o),e(or,Jr),g(NC,Jr,null),e(Jr,_8o),e(Jr,Mse),e(Mse,u8o),e(Jr,b8o),e(Jr,ud),e(ud,F8o),e(ud,Ese),e(Ese,v8o),e(ud,T8o),e(ud,gI),e(gI,M8o),e(ud,E8o),e(Jr,C8o),e(Jr,Cse),e(Cse,w8o),e(Jr,A8o),g(DC,Jr,null),e(or,y8o),e(or,Ge),g(GC,Ge,null),e(Ge,L8o),e(Ge,wse),e(wse,x8o),e(Ge,k8o),e(Ge,Ka),e(Ka,S8o),e(Ka,Ase),e(Ase,R8o),e(Ka,B8o),e(Ka,yse),e(yse,P8o),e(Ka,$8o),e(Ka,Lse),e(Lse,q8o),e(Ka,I8o),e(Ge,j8o),e(Ge,se),e(se,H1),e(H1,xse),e(xse,N8o),e(H1,D8o),e(H1,hI),e(hI,G8o),e(H1,O8o),e(se,V8o),e(se,U1),e(U1,kse),e(kse,X8o),e(U1,z8o),e(U1,pI),e(pI,Q8o),e(U1,W8o),e(se,H8o),e(se,J1),e(J1,Sse),e(Sse,U8o),e(J1,J8o),e(J1,_I),e(_I,Y8o),e(J1,K8o),e(se,Z8o),e(se,Y1),e(Y1,Rse),e(Rse,eMo),e(Y1,oMo),e(Y1,uI),e(uI,rMo),e(Y1,tMo),e(se,aMo),e(se,K1),e(K1,Bse),e(Bse,nMo),e(K1,sMo),e(K1,bI),e(bI,lMo),e(K1,iMo),e(se,dMo),e(se,Z1),e(Z1,Pse),e(Pse,cMo),e(Z1,fMo),e(Z1,FI),e(FI,mMo),e(Z1,gMo),e(se,hMo),e(se,eb),e(eb,$se),e($se,pMo),e(eb,_Mo),e(eb,vI),e(vI,uMo),e(eb,bMo),e(se,FMo),e(se,ob),e(ob,qse),e(qse,vMo),e(ob,TMo),e(ob,TI),e(TI,MMo),e(ob,EMo),e(se,CMo),e(se,rb),e(rb,Ise),e(Ise,wMo),e(rb,AMo),e(rb,MI),e(MI,yMo),e(rb,LMo),e(se,xMo),e(se,tb),e(tb,jse),e(jse,kMo),e(tb,SMo),e(tb,EI),e(EI,RMo),e(tb,BMo),e(se,PMo),e(se,ab),e(ab,Nse),e(Nse,$Mo),e(ab,qMo),e(ab,CI),e(CI,IMo),e(ab,jMo),e(se,NMo),e(se,nb),e(nb,Dse),e(Dse,DMo),e(nb,GMo),e(nb,wI),e(wI,OMo),e(nb,VMo),e(se,XMo),e(se,sb),e(sb,Gse),e(Gse,zMo),e(sb,QMo),e(sb,AI),e(AI,WMo),e(sb,HMo),e(se,UMo),e(se,lb),e(lb,Ose),e(Ose,JMo),e(lb,YMo),e(lb,yI),e(yI,KMo),e(lb,ZMo),e(se,e4o),e(se,ib),e(ib,Vse),e(Vse,o4o),e(ib,r4o),e(ib,LI),e(LI,t4o),e(ib,a4o),e(se,n4o),e(se,db),e(db,Xse),e(Xse,s4o),e(db,l4o),e(db,xI),e(xI,i4o),e(db,d4o),e(Ge,c4o),e(Ge,cb),e(cb,f4o),e(cb,zse),e(zse,m4o),e(cb,g4o),e(cb,Qse),e(Qse,h4o),e(Ge,p4o),e(Ge,Wse),e(Wse,_4o),e(Ge,u4o),g(OC,Ge,null),b(c,QRe,u),b(c,bd,u),e(bd,fb),e(fb,Hse),g(VC,Hse,null),e(bd,b4o),e(bd,Use),e(Use,F4o),b(c,WRe,u),b(c,rr,u),g(XC,rr,null),e(rr,v4o),e(rr,Fd),e(Fd,T4o),e(Fd,kI),e(kI,M4o),e(Fd,E4o),e(Fd,SI),e(SI,C4o),e(Fd,w4o),e(rr,A4o),e(rr,zC),e(zC,y4o),e(zC,Jse),e(Jse,L4o),e(zC,x4o),e(rr,k4o),e(rr,Yr),g(QC,Yr,null),e(Yr,S4o),e(Yr,Yse),e(Yse,R4o),e(Yr,B4o),e(Yr,vd),e(vd,P4o),e(vd,Kse),e(Kse,$4o),e(vd,q4o),e(vd,RI),e(RI,I4o),e(vd,j4o),e(Yr,N4o),e(Yr,Zse),e(Zse,D4o),e(Yr,G4o),g(WC,Yr,null),e(rr,O4o),e(rr,Oe),g(HC,Oe,null),e(Oe,V4o),e(Oe,ele),e(ele,X4o),e(Oe,z4o),e(Oe,Za),e(Za,Q4o),e(Za,ole),e(ole,W4o),e(Za,H4o),e(Za,rle),e(rle,U4o),e(Za,J4o),e(Za,tle),e(tle,Y4o),e(Za,K4o),e(Oe,Z4o),e(Oe,y),e(y,mb),e(mb,ale),e(ale,eEo),e(mb,oEo),e(mb,BI),e(BI,rEo),e(mb,tEo),e(y,aEo),e(y,gb),e(gb,nle),e(nle,nEo),e(gb,sEo),e(gb,PI),e(PI,lEo),e(gb,iEo),e(y,dEo),e(y,hb),e(hb,sle),e(sle,cEo),e(hb,fEo),e(hb,$I),e($I,mEo),e(hb,gEo),e(y,hEo),e(y,pb),e(pb,lle),e(lle,pEo),e(pb,_Eo),e(pb,qI),e(qI,uEo),e(pb,bEo),e(y,FEo),e(y,_b),e(_b,ile),e(ile,vEo),e(_b,TEo),e(_b,II),e(II,MEo),e(_b,EEo),e(y,CEo),e(y,ub),e(ub,dle),e(dle,wEo),e(ub,AEo),e(ub,jI),e(jI,yEo),e(ub,LEo),e(y,xEo),e(y,bb),e(bb,cle),e(cle,kEo),e(bb,SEo),e(bb,NI),e(NI,REo),e(bb,BEo),e(y,PEo),e(y,Fb),e(Fb,fle),e(fle,$Eo),e(Fb,qEo),e(Fb,DI),e(DI,IEo),e(Fb,jEo),e(y,NEo),e(y,vb),e(vb,mle),e(mle,DEo),e(vb,GEo),e(vb,GI),e(GI,OEo),e(vb,VEo),e(y,XEo),e(y,Tb),e(Tb,gle),e(gle,zEo),e(Tb,QEo),e(Tb,OI),e(OI,WEo),e(Tb,HEo),e(y,UEo),e(y,Mb),e(Mb,hle),e(hle,JEo),e(Mb,YEo),e(Mb,VI),e(VI,KEo),e(Mb,ZEo),e(y,eCo),e(y,Eb),e(Eb,ple),e(ple,oCo),e(Eb,rCo),e(Eb,XI),e(XI,tCo),e(Eb,aCo),e(y,nCo),e(y,Cb),e(Cb,_le),e(_le,sCo),e(Cb,lCo),e(Cb,zI),e(zI,iCo),e(Cb,dCo),e(y,cCo),e(y,wb),e(wb,ule),e(ule,fCo),e(wb,mCo),e(wb,QI),e(QI,gCo),e(wb,hCo),e(y,pCo),e(y,Ab),e(Ab,ble),e(ble,_Co),e(Ab,uCo),e(Ab,WI),e(WI,bCo),e(Ab,FCo),e(y,vCo),e(y,yb),e(yb,Fle),e(Fle,TCo),e(yb,MCo),e(yb,HI),e(HI,ECo),e(yb,CCo),e(y,wCo),e(y,Lb),e(Lb,vle),e(vle,ACo),e(Lb,yCo),e(Lb,UI),e(UI,LCo),e(Lb,xCo),e(y,kCo),e(y,xb),e(xb,Tle),e(Tle,SCo),e(xb,RCo),e(xb,JI),e(JI,BCo),e(xb,PCo),e(y,$Co),e(y,kb),e(kb,Mle),e(Mle,qCo),e(kb,ICo),e(kb,YI),e(YI,jCo),e(kb,NCo),e(y,DCo),e(y,Sb),e(Sb,Ele),e(Ele,GCo),e(Sb,OCo),e(Sb,KI),e(KI,VCo),e(Sb,XCo),e(y,zCo),e(y,Rb),e(Rb,Cle),e(Cle,QCo),e(Rb,WCo),e(Rb,ZI),e(ZI,HCo),e(Rb,UCo),e(y,JCo),e(y,Bb),e(Bb,wle),e(wle,YCo),e(Bb,KCo),e(Bb,ej),e(ej,ZCo),e(Bb,e3o),e(y,o3o),e(y,Pb),e(Pb,Ale),e(Ale,r3o),e(Pb,t3o),e(Pb,oj),e(oj,a3o),e(Pb,n3o),e(y,s3o),e(y,$b),e($b,yle),e(yle,l3o),e($b,i3o),e($b,rj),e(rj,d3o),e($b,c3o),e(y,f3o),e(y,qb),e(qb,Lle),e(Lle,m3o),e(qb,g3o),e(qb,tj),e(tj,h3o),e(qb,p3o),e(y,_3o),e(y,Ib),e(Ib,xle),e(xle,u3o),e(Ib,b3o),e(Ib,aj),e(aj,F3o),e(Ib,v3o),e(y,T3o),e(y,jb),e(jb,kle),e(kle,M3o),e(jb,E3o),e(jb,nj),e(nj,C3o),e(jb,w3o),e(y,A3o),e(y,Nb),e(Nb,Sle),e(Sle,y3o),e(Nb,L3o),e(Nb,sj),e(sj,x3o),e(Nb,k3o),e(y,S3o),e(y,Db),e(Db,Rle),e(Rle,R3o),e(Db,B3o),e(Db,lj),e(lj,P3o),e(Db,$3o),e(y,q3o),e(y,Gb),e(Gb,Ble),e(Ble,I3o),e(Gb,j3o),e(Gb,ij),e(ij,N3o),e(Gb,D3o),e(y,G3o),e(y,Ob),e(Ob,Ple),e(Ple,O3o),e(Ob,V3o),e(Ob,dj),e(dj,X3o),e(Ob,z3o),e(y,Q3o),e(y,Vb),e(Vb,$le),e($le,W3o),e(Vb,H3o),e(Vb,cj),e(cj,U3o),e(Vb,J3o),e(y,Y3o),e(y,Xb),e(Xb,qle),e(qle,K3o),e(Xb,Z3o),e(Xb,fj),e(fj,ewo),e(Xb,owo),e(y,rwo),e(y,zb),e(zb,Ile),e(Ile,two),e(zb,awo),e(zb,mj),e(mj,nwo),e(zb,swo),e(y,lwo),e(y,Qb),e(Qb,jle),e(jle,iwo),e(Qb,dwo),e(Qb,gj),e(gj,cwo),e(Qb,fwo),e(y,mwo),e(y,Wb),e(Wb,Nle),e(Nle,gwo),e(Wb,hwo),e(Wb,hj),e(hj,pwo),e(Wb,_wo),e(y,uwo),e(y,Hb),e(Hb,Dle),e(Dle,bwo),e(Hb,Fwo),e(Hb,pj),e(pj,vwo),e(Hb,Two),e(y,Mwo),e(y,Ub),e(Ub,Gle),e(Gle,Ewo),e(Ub,Cwo),e(Ub,_j),e(_j,wwo),e(Ub,Awo),e(y,ywo),e(y,Jb),e(Jb,Ole),e(Ole,Lwo),e(Jb,xwo),e(Jb,uj),e(uj,kwo),e(Jb,Swo),e(y,Rwo),e(y,Yb),e(Yb,Vle),e(Vle,Bwo),e(Yb,Pwo),e(Yb,bj),e(bj,$wo),e(Yb,qwo),e(y,Iwo),e(y,Kb),e(Kb,Xle),e(Xle,jwo),e(Kb,Nwo),e(Kb,Fj),e(Fj,Dwo),e(Kb,Gwo),e(y,Owo),e(y,Zb),e(Zb,zle),e(zle,Vwo),e(Zb,Xwo),e(Zb,vj),e(vj,zwo),e(Zb,Qwo),e(y,Wwo),e(y,e5),e(e5,Qle),e(Qle,Hwo),e(e5,Uwo),e(e5,Tj),e(Tj,Jwo),e(e5,Ywo),e(y,Kwo),e(y,o5),e(o5,Wle),e(Wle,Zwo),e(o5,eAo),e(o5,Mj),e(Mj,oAo),e(o5,rAo),e(y,tAo),e(y,r5),e(r5,Hle),e(Hle,aAo),e(r5,nAo),e(r5,Ej),e(Ej,sAo),e(r5,lAo),e(y,iAo),e(y,t5),e(t5,Ule),e(Ule,dAo),e(t5,cAo),e(t5,Cj),e(Cj,fAo),e(t5,mAo),e(Oe,gAo),e(Oe,a5),e(a5,hAo),e(a5,Jle),e(Jle,pAo),e(a5,_Ao),e(a5,Yle),e(Yle,uAo),e(Oe,bAo),e(Oe,Kle),e(Kle,FAo),e(Oe,vAo),g(UC,Oe,null),b(c,HRe,u),b(c,Td,u),e(Td,n5),e(n5,Zle),g(JC,Zle,null),e(Td,TAo),e(Td,eie),e(eie,MAo),b(c,URe,u),b(c,tr,u),g(YC,tr,null),e(tr,EAo),e(tr,Md),e(Md,CAo),e(Md,wj),e(wj,wAo),e(Md,AAo),e(Md,Aj),e(Aj,yAo),e(Md,LAo),e(tr,xAo),e(tr,KC),e(KC,kAo),e(KC,oie),e(oie,SAo),e(KC,RAo),e(tr,BAo),e(tr,Kr),g(ZC,Kr,null),e(Kr,PAo),e(Kr,rie),e(rie,$Ao),e(Kr,qAo),e(Kr,Ed),e(Ed,IAo),e(Ed,tie),e(tie,jAo),e(Ed,NAo),e(Ed,yj),e(yj,DAo),e(Ed,GAo),e(Kr,OAo),e(Kr,aie),e(aie,VAo),e(Kr,XAo),g(e3,Kr,null),e(tr,zAo),e(tr,Ve),g(o3,Ve,null),e(Ve,QAo),e(Ve,nie),e(nie,WAo),e(Ve,HAo),e(Ve,en),e(en,UAo),e(en,sie),e(sie,JAo),e(en,YAo),e(en,lie),e(lie,KAo),e(en,ZAo),e(en,iie),e(iie,eyo),e(en,oyo),e(Ve,ryo),e(Ve,G),e(G,s5),e(s5,die),e(die,tyo),e(s5,ayo),e(s5,Lj),e(Lj,nyo),e(s5,syo),e(G,lyo),e(G,l5),e(l5,cie),e(cie,iyo),e(l5,dyo),e(l5,xj),e(xj,cyo),e(l5,fyo),e(G,myo),e(G,i5),e(i5,fie),e(fie,gyo),e(i5,hyo),e(i5,kj),e(kj,pyo),e(i5,_yo),e(G,uyo),e(G,d5),e(d5,mie),e(mie,byo),e(d5,Fyo),e(d5,Sj),e(Sj,vyo),e(d5,Tyo),e(G,Myo),e(G,c5),e(c5,gie),e(gie,Eyo),e(c5,Cyo),e(c5,Rj),e(Rj,wyo),e(c5,Ayo),e(G,yyo),e(G,f5),e(f5,hie),e(hie,Lyo),e(f5,xyo),e(f5,Bj),e(Bj,kyo),e(f5,Syo),e(G,Ryo),e(G,m5),e(m5,pie),e(pie,Byo),e(m5,Pyo),e(m5,Pj),e(Pj,$yo),e(m5,qyo),e(G,Iyo),e(G,g5),e(g5,_ie),e(_ie,jyo),e(g5,Nyo),e(g5,$j),e($j,Dyo),e(g5,Gyo),e(G,Oyo),e(G,h5),e(h5,uie),e(uie,Vyo),e(h5,Xyo),e(h5,qj),e(qj,zyo),e(h5,Qyo),e(G,Wyo),e(G,p5),e(p5,bie),e(bie,Hyo),e(p5,Uyo),e(p5,Ij),e(Ij,Jyo),e(p5,Yyo),e(G,Kyo),e(G,_5),e(_5,Fie),e(Fie,Zyo),e(_5,eLo),e(_5,jj),e(jj,oLo),e(_5,rLo),e(G,tLo),e(G,u5),e(u5,vie),e(vie,aLo),e(u5,nLo),e(u5,Nj),e(Nj,sLo),e(u5,lLo),e(G,iLo),e(G,b5),e(b5,Tie),e(Tie,dLo),e(b5,cLo),e(b5,Dj),e(Dj,fLo),e(b5,mLo),e(G,gLo),e(G,F5),e(F5,Mie),e(Mie,hLo),e(F5,pLo),e(F5,Gj),e(Gj,_Lo),e(F5,uLo),e(G,bLo),e(G,v5),e(v5,Eie),e(Eie,FLo),e(v5,vLo),e(v5,Oj),e(Oj,TLo),e(v5,MLo),e(G,ELo),e(G,T5),e(T5,Cie),e(Cie,CLo),e(T5,wLo),e(T5,Vj),e(Vj,ALo),e(T5,yLo),e(G,LLo),e(G,M5),e(M5,wie),e(wie,xLo),e(M5,kLo),e(M5,Xj),e(Xj,SLo),e(M5,RLo),e(G,BLo),e(G,E5),e(E5,Aie),e(Aie,PLo),e(E5,$Lo),e(E5,zj),e(zj,qLo),e(E5,ILo),e(G,jLo),e(G,C5),e(C5,yie),e(yie,NLo),e(C5,DLo),e(C5,Qj),e(Qj,GLo),e(C5,OLo),e(G,VLo),e(G,w5),e(w5,Lie),e(Lie,XLo),e(w5,zLo),e(w5,Wj),e(Wj,QLo),e(w5,WLo),e(G,HLo),e(G,A5),e(A5,xie),e(xie,ULo),e(A5,JLo),e(A5,Hj),e(Hj,YLo),e(A5,KLo),e(G,ZLo),e(G,y5),e(y5,kie),e(kie,e7o),e(y5,o7o),e(y5,Uj),e(Uj,r7o),e(y5,t7o),e(G,a7o),e(G,L5),e(L5,Sie),e(Sie,n7o),e(L5,s7o),e(L5,Jj),e(Jj,l7o),e(L5,i7o),e(G,d7o),e(G,x5),e(x5,Rie),e(Rie,c7o),e(x5,f7o),e(x5,Yj),e(Yj,m7o),e(x5,g7o),e(G,h7o),e(G,k5),e(k5,Bie),e(Bie,p7o),e(k5,_7o),e(k5,Kj),e(Kj,u7o),e(k5,b7o),e(G,F7o),e(G,S5),e(S5,Pie),e(Pie,v7o),e(S5,T7o),e(S5,Zj),e(Zj,M7o),e(S5,E7o),e(G,C7o),e(G,R5),e(R5,$ie),e($ie,w7o),e(R5,A7o),e(R5,eN),e(eN,y7o),e(R5,L7o),e(G,x7o),e(G,B5),e(B5,qie),e(qie,k7o),e(B5,S7o),e(B5,oN),e(oN,R7o),e(B5,B7o),e(Ve,P7o),e(Ve,P5),e(P5,$7o),e(P5,Iie),e(Iie,q7o),e(P5,I7o),e(P5,jie),e(jie,j7o),e(Ve,N7o),e(Ve,Nie),e(Nie,D7o),e(Ve,G7o),g(r3,Ve,null),b(c,JRe,u),b(c,Cd,u),e(Cd,$5),e($5,Die),g(t3,Die,null),e(Cd,O7o),e(Cd,Gie),e(Gie,V7o),b(c,YRe,u),b(c,ar,u),g(a3,ar,null),e(ar,X7o),e(ar,wd),e(wd,z7o),e(wd,rN),e(rN,Q7o),e(wd,W7o),e(wd,tN),e(tN,H7o),e(wd,U7o),e(ar,J7o),e(ar,n3),e(n3,Y7o),e(n3,Oie),e(Oie,K7o),e(n3,Z7o),e(ar,e9o),e(ar,Zr),g(s3,Zr,null),e(Zr,o9o),e(Zr,Vie),e(Vie,r9o),e(Zr,t9o),e(Zr,Ad),e(Ad,a9o),e(Ad,Xie),e(Xie,n9o),e(Ad,s9o),e(Ad,aN),e(aN,l9o),e(Ad,i9o),e(Zr,d9o),e(Zr,zie),e(zie,c9o),e(Zr,f9o),g(l3,Zr,null),e(ar,m9o),e(ar,Xe),g(i3,Xe,null),e(Xe,g9o),e(Xe,Qie),e(Qie,h9o),e(Xe,p9o),e(Xe,on),e(on,_9o),e(on,Wie),e(Wie,u9o),e(on,b9o),e(on,Hie),e(Hie,F9o),e(on,v9o),e(on,Uie),e(Uie,T9o),e(on,M9o),e(Xe,E9o),e(Xe,ma),e(ma,q5),e(q5,Jie),e(Jie,C9o),e(q5,w9o),e(q5,nN),e(nN,A9o),e(q5,y9o),e(ma,L9o),e(ma,I5),e(I5,Yie),e(Yie,x9o),e(I5,k9o),e(I5,sN),e(sN,S9o),e(I5,R9o),e(ma,B9o),e(ma,j5),e(j5,Kie),e(Kie,P9o),e(j5,$9o),e(j5,lN),e(lN,q9o),e(j5,I9o),e(ma,j9o),e(ma,N5),e(N5,Zie),e(Zie,N9o),e(N5,D9o),e(N5,iN),e(iN,G9o),e(N5,O9o),e(ma,V9o),e(ma,D5),e(D5,ede),e(ede,X9o),e(D5,z9o),e(D5,dN),e(dN,Q9o),e(D5,W9o),e(Xe,H9o),e(Xe,G5),e(G5,U9o),e(G5,ode),e(ode,J9o),e(G5,Y9o),e(G5,rde),e(rde,K9o),e(Xe,Z9o),e(Xe,tde),e(tde,exo),e(Xe,oxo),g(d3,Xe,null),b(c,KRe,u),b(c,yd,u),e(yd,O5),e(O5,ade),g(c3,ade,null),e(yd,rxo),e(yd,nde),e(nde,txo),b(c,ZRe,u),b(c,nr,u),g(f3,nr,null),e(nr,axo),e(nr,Ld),e(Ld,nxo),e(Ld,cN),e(cN,sxo),e(Ld,lxo),e(Ld,fN),e(fN,ixo),e(Ld,dxo),e(nr,cxo),e(nr,m3),e(m3,fxo),e(m3,sde),e(sde,mxo),e(m3,gxo),e(nr,hxo),e(nr,et),g(g3,et,null),e(et,pxo),e(et,lde),e(lde,_xo),e(et,uxo),e(et,xd),e(xd,bxo),e(xd,ide),e(ide,Fxo),e(xd,vxo),e(xd,mN),e(mN,Txo),e(xd,Mxo),e(et,Exo),e(et,dde),e(dde,Cxo),e(et,wxo),g(h3,et,null),e(nr,Axo),e(nr,ze),g(p3,ze,null),e(ze,yxo),e(ze,cde),e(cde,Lxo),e(ze,xxo),e(ze,rn),e(rn,kxo),e(rn,fde),e(fde,Sxo),e(rn,Rxo),e(rn,mde),e(mde,Bxo),e(rn,Pxo),e(rn,gde),e(gde,$xo),e(rn,qxo),e(ze,Ixo),e(ze,N),e(N,V5),e(V5,hde),e(hde,jxo),e(V5,Nxo),e(V5,gN),e(gN,Dxo),e(V5,Gxo),e(N,Oxo),e(N,X5),e(X5,pde),e(pde,Vxo),e(X5,Xxo),e(X5,hN),e(hN,zxo),e(X5,Qxo),e(N,Wxo),e(N,z5),e(z5,_de),e(_de,Hxo),e(z5,Uxo),e(z5,pN),e(pN,Jxo),e(z5,Yxo),e(N,Kxo),e(N,Q5),e(Q5,ude),e(ude,Zxo),e(Q5,eko),e(Q5,_N),e(_N,oko),e(Q5,rko),e(N,tko),e(N,W5),e(W5,bde),e(bde,ako),e(W5,nko),e(W5,uN),e(uN,sko),e(W5,lko),e(N,iko),e(N,H5),e(H5,Fde),e(Fde,dko),e(H5,cko),e(H5,bN),e(bN,fko),e(H5,mko),e(N,gko),e(N,U5),e(U5,vde),e(vde,hko),e(U5,pko),e(U5,FN),e(FN,_ko),e(U5,uko),e(N,bko),e(N,J5),e(J5,Tde),e(Tde,Fko),e(J5,vko),e(J5,vN),e(vN,Tko),e(J5,Mko),e(N,Eko),e(N,Y5),e(Y5,Mde),e(Mde,Cko),e(Y5,wko),e(Y5,TN),e(TN,Ako),e(Y5,yko),e(N,Lko),e(N,K5),e(K5,Ede),e(Ede,xko),e(K5,kko),e(K5,MN),e(MN,Sko),e(K5,Rko),e(N,Bko),e(N,Z5),e(Z5,Cde),e(Cde,Pko),e(Z5,$ko),e(Z5,EN),e(EN,qko),e(Z5,Iko),e(N,jko),e(N,e2),e(e2,wde),e(wde,Nko),e(e2,Dko),e(e2,CN),e(CN,Gko),e(e2,Oko),e(N,Vko),e(N,o2),e(o2,Ade),e(Ade,Xko),e(o2,zko),e(o2,wN),e(wN,Qko),e(o2,Wko),e(N,Hko),e(N,r2),e(r2,yde),e(yde,Uko),e(r2,Jko),e(r2,AN),e(AN,Yko),e(r2,Kko),e(N,Zko),e(N,t2),e(t2,Lde),e(Lde,eSo),e(t2,oSo),e(t2,yN),e(yN,rSo),e(t2,tSo),e(N,aSo),e(N,a2),e(a2,xde),e(xde,nSo),e(a2,sSo),e(a2,LN),e(LN,lSo),e(a2,iSo),e(N,dSo),e(N,n2),e(n2,kde),e(kde,cSo),e(n2,fSo),e(n2,xN),e(xN,mSo),e(n2,gSo),e(N,hSo),e(N,s2),e(s2,Sde),e(Sde,pSo),e(s2,_So),e(s2,kN),e(kN,uSo),e(s2,bSo),e(N,FSo),e(N,l2),e(l2,Rde),e(Rde,vSo),e(l2,TSo),e(l2,SN),e(SN,MSo),e(l2,ESo),e(N,CSo),e(N,i2),e(i2,Bde),e(Bde,wSo),e(i2,ASo),e(i2,RN),e(RN,ySo),e(i2,LSo),e(N,xSo),e(N,d2),e(d2,Pde),e(Pde,kSo),e(d2,SSo),e(d2,BN),e(BN,RSo),e(d2,BSo),e(N,PSo),e(N,c2),e(c2,$de),e($de,$So),e(c2,qSo),e(c2,PN),e(PN,ISo),e(c2,jSo),e(N,NSo),e(N,f2),e(f2,qde),e(qde,DSo),e(f2,GSo),e(f2,$N),e($N,OSo),e(f2,VSo),e(N,XSo),e(N,m2),e(m2,Ide),e(Ide,zSo),e(m2,QSo),e(m2,qN),e(qN,WSo),e(m2,HSo),e(N,USo),e(N,g2),e(g2,jde),e(jde,JSo),e(g2,YSo),e(g2,IN),e(IN,KSo),e(g2,ZSo),e(N,eRo),e(N,h2),e(h2,Nde),e(Nde,oRo),e(h2,rRo),e(h2,jN),e(jN,tRo),e(h2,aRo),e(N,nRo),e(N,p2),e(p2,Dde),e(Dde,sRo),e(p2,lRo),e(p2,NN),e(NN,iRo),e(p2,dRo),e(N,cRo),e(N,_2),e(_2,Gde),e(Gde,fRo),e(_2,mRo),e(_2,DN),e(DN,gRo),e(_2,hRo),e(N,pRo),e(N,u2),e(u2,Ode),e(Ode,_Ro),e(u2,uRo),e(u2,GN),e(GN,bRo),e(u2,FRo),e(N,vRo),e(N,b2),e(b2,Vde),e(Vde,TRo),e(b2,MRo),e(b2,ON),e(ON,ERo),e(b2,CRo),e(N,wRo),e(N,F2),e(F2,Xde),e(Xde,ARo),e(F2,yRo),e(F2,VN),e(VN,LRo),e(F2,xRo),e(N,kRo),e(N,v2),e(v2,zde),e(zde,SRo),e(v2,RRo),e(v2,XN),e(XN,BRo),e(v2,PRo),e(N,$Ro),e(N,T2),e(T2,Qde),e(Qde,qRo),e(T2,IRo),e(T2,zN),e(zN,jRo),e(T2,NRo),e(ze,DRo),e(ze,M2),e(M2,GRo),e(M2,Wde),e(Wde,ORo),e(M2,VRo),e(M2,Hde),e(Hde,XRo),e(ze,zRo),e(ze,Ude),e(Ude,QRo),e(ze,WRo),g(_3,ze,null),b(c,eBe,u),b(c,kd,u),e(kd,E2),e(E2,Jde),g(u3,Jde,null),e(kd,HRo),e(kd,Yde),e(Yde,URo),b(c,oBe,u),b(c,sr,u),g(b3,sr,null),e(sr,JRo),e(sr,Sd),e(Sd,YRo),e(Sd,QN),e(QN,KRo),e(Sd,ZRo),e(Sd,WN),e(WN,eBo),e(Sd,oBo),e(sr,rBo),e(sr,F3),e(F3,tBo),e(F3,Kde),e(Kde,aBo),e(F3,nBo),e(sr,sBo),e(sr,ot),g(v3,ot,null),e(ot,lBo),e(ot,Zde),e(Zde,iBo),e(ot,dBo),e(ot,Rd),e(Rd,cBo),e(Rd,ece),e(ece,fBo),e(Rd,mBo),e(Rd,HN),e(HN,gBo),e(Rd,hBo),e(ot,pBo),e(ot,oce),e(oce,_Bo),e(ot,uBo),g(T3,ot,null),e(sr,bBo),e(sr,Qe),g(M3,Qe,null),e(Qe,FBo),e(Qe,rce),e(rce,vBo),e(Qe,TBo),e(Qe,tn),e(tn,MBo),e(tn,tce),e(tce,EBo),e(tn,CBo),e(tn,ace),e(ace,wBo),e(tn,ABo),e(tn,nce),e(nce,yBo),e(tn,LBo),e(Qe,xBo),e(Qe,R),e(R,C2),e(C2,sce),e(sce,kBo),e(C2,SBo),e(C2,UN),e(UN,RBo),e(C2,BBo),e(R,PBo),e(R,w2),e(w2,lce),e(lce,$Bo),e(w2,qBo),e(w2,JN),e(JN,IBo),e(w2,jBo),e(R,NBo),e(R,A2),e(A2,ice),e(ice,DBo),e(A2,GBo),e(A2,YN),e(YN,OBo),e(A2,VBo),e(R,XBo),e(R,y2),e(y2,dce),e(dce,zBo),e(y2,QBo),e(y2,KN),e(KN,WBo),e(y2,HBo),e(R,UBo),e(R,L2),e(L2,cce),e(cce,JBo),e(L2,YBo),e(L2,ZN),e(ZN,KBo),e(L2,ZBo),e(R,ePo),e(R,x2),e(x2,fce),e(fce,oPo),e(x2,rPo),e(x2,eD),e(eD,tPo),e(x2,aPo),e(R,nPo),e(R,k2),e(k2,mce),e(mce,sPo),e(k2,lPo),e(k2,oD),e(oD,iPo),e(k2,dPo),e(R,cPo),e(R,S2),e(S2,gce),e(gce,fPo),e(S2,mPo),e(S2,rD),e(rD,gPo),e(S2,hPo),e(R,pPo),e(R,R2),e(R2,hce),e(hce,_Po),e(R2,uPo),e(R2,tD),e(tD,bPo),e(R2,FPo),e(R,vPo),e(R,B2),e(B2,pce),e(pce,TPo),e(B2,MPo),e(B2,aD),e(aD,EPo),e(B2,CPo),e(R,wPo),e(R,P2),e(P2,_ce),e(_ce,APo),e(P2,yPo),e(P2,nD),e(nD,LPo),e(P2,xPo),e(R,kPo),e(R,$2),e($2,uce),e(uce,SPo),e($2,RPo),e($2,sD),e(sD,BPo),e($2,PPo),e(R,$Po),e(R,q2),e(q2,bce),e(bce,qPo),e(q2,IPo),e(q2,lD),e(lD,jPo),e(q2,NPo),e(R,DPo),e(R,I2),e(I2,Fce),e(Fce,GPo),e(I2,OPo),e(I2,iD),e(iD,VPo),e(I2,XPo),e(R,zPo),e(R,j2),e(j2,vce),e(vce,QPo),e(j2,WPo),e(j2,dD),e(dD,HPo),e(j2,UPo),e(R,JPo),e(R,N2),e(N2,Tce),e(Tce,YPo),e(N2,KPo),e(N2,cD),e(cD,ZPo),e(N2,e$o),e(R,o$o),e(R,D2),e(D2,Mce),e(Mce,r$o),e(D2,t$o),e(D2,fD),e(fD,a$o),e(D2,n$o),e(R,s$o),e(R,G2),e(G2,Ece),e(Ece,l$o),e(G2,i$o),e(G2,mD),e(mD,d$o),e(G2,c$o),e(R,f$o),e(R,O2),e(O2,Cce),e(Cce,m$o),e(O2,g$o),e(O2,gD),e(gD,h$o),e(O2,p$o),e(R,_$o),e(R,V2),e(V2,wce),e(wce,u$o),e(V2,b$o),e(V2,hD),e(hD,F$o),e(V2,v$o),e(R,T$o),e(R,X2),e(X2,Ace),e(Ace,M$o),e(X2,E$o),e(X2,pD),e(pD,C$o),e(X2,w$o),e(R,A$o),e(R,z2),e(z2,yce),e(yce,y$o),e(z2,L$o),e(z2,_D),e(_D,x$o),e(z2,k$o),e(R,S$o),e(R,Q2),e(Q2,Lce),e(Lce,R$o),e(Q2,B$o),e(Q2,uD),e(uD,P$o),e(Q2,$$o),e(R,q$o),e(R,W2),e(W2,xce),e(xce,I$o),e(W2,j$o),e(W2,bD),e(bD,N$o),e(W2,D$o),e(R,G$o),e(R,H2),e(H2,kce),e(kce,O$o),e(H2,V$o),e(H2,FD),e(FD,X$o),e(H2,z$o),e(R,Q$o),e(R,U2),e(U2,Sce),e(Sce,W$o),e(U2,H$o),e(U2,vD),e(vD,U$o),e(U2,J$o),e(R,Y$o),e(R,J2),e(J2,Rce),e(Rce,K$o),e(J2,Z$o),e(J2,TD),e(TD,eqo),e(J2,oqo),e(R,rqo),e(R,Y2),e(Y2,Bce),e(Bce,tqo),e(Y2,aqo),e(Y2,MD),e(MD,nqo),e(Y2,sqo),e(R,lqo),e(R,K2),e(K2,Pce),e(Pce,iqo),e(K2,dqo),e(K2,ED),e(ED,cqo),e(K2,fqo),e(R,mqo),e(R,Z2),e(Z2,$ce),e($ce,gqo),e(Z2,hqo),e(Z2,CD),e(CD,pqo),e(Z2,_qo),e(R,uqo),e(R,eF),e(eF,qce),e(qce,bqo),e(eF,Fqo),e(eF,wD),e(wD,vqo),e(eF,Tqo),e(R,Mqo),e(R,oF),e(oF,Ice),e(Ice,Eqo),e(oF,Cqo),e(oF,AD),e(AD,wqo),e(oF,Aqo),e(R,yqo),e(R,rF),e(rF,jce),e(jce,Lqo),e(rF,xqo),e(rF,yD),e(yD,kqo),e(rF,Sqo),e(R,Rqo),e(R,tF),e(tF,Nce),e(Nce,Bqo),e(tF,Pqo),e(tF,LD),e(LD,$qo),e(tF,qqo),e(R,Iqo),e(R,aF),e(aF,Dce),e(Dce,jqo),e(aF,Nqo),e(aF,xD),e(xD,Dqo),e(aF,Gqo),e(R,Oqo),e(R,nF),e(nF,Gce),e(Gce,Vqo),e(nF,Xqo),e(nF,kD),e(kD,zqo),e(nF,Qqo),e(R,Wqo),e(R,sF),e(sF,Oce),e(Oce,Hqo),e(sF,Uqo),e(sF,SD),e(SD,Jqo),e(sF,Yqo),e(R,Kqo),e(R,lF),e(lF,Vce),e(Vce,Zqo),e(lF,eIo),e(lF,RD),e(RD,oIo),e(lF,rIo),e(R,tIo),e(R,iF),e(iF,Xce),e(Xce,aIo),e(iF,nIo),e(iF,BD),e(BD,sIo),e(iF,lIo),e(Qe,iIo),e(Qe,dF),e(dF,dIo),e(dF,zce),e(zce,cIo),e(dF,fIo),e(dF,Qce),e(Qce,mIo),e(Qe,gIo),e(Qe,Wce),e(Wce,hIo),e(Qe,pIo),g(E3,Qe,null),b(c,rBe,u),b(c,Bd,u),e(Bd,cF),e(cF,Hce),g(C3,Hce,null),e(Bd,_Io),e(Bd,Uce),e(Uce,uIo),b(c,tBe,u),b(c,lr,u),g(w3,lr,null),e(lr,bIo),e(lr,Pd),e(Pd,FIo),e(Pd,PD),e(PD,vIo),e(Pd,TIo),e(Pd,$D),e($D,MIo),e(Pd,EIo),e(lr,CIo),e(lr,A3),e(A3,wIo),e(A3,Jce),e(Jce,AIo),e(A3,yIo),e(lr,LIo),e(lr,rt),g(y3,rt,null),e(rt,xIo),e(rt,Yce),e(Yce,kIo),e(rt,SIo),e(rt,$d),e($d,RIo),e($d,Kce),e(Kce,BIo),e($d,PIo),e($d,qD),e(qD,$Io),e($d,qIo),e(rt,IIo),e(rt,Zce),e(Zce,jIo),e(rt,NIo),g(L3,rt,null),e(lr,DIo),e(lr,We),g(x3,We,null),e(We,GIo),e(We,efe),e(efe,OIo),e(We,VIo),e(We,an),e(an,XIo),e(an,ofe),e(ofe,zIo),e(an,QIo),e(an,rfe),e(rfe,WIo),e(an,HIo),e(an,tfe),e(tfe,UIo),e(an,JIo),e(We,YIo),e(We,afe),e(afe,fF),e(fF,nfe),e(nfe,KIo),e(fF,ZIo),e(fF,ID),e(ID,ejo),e(fF,ojo),e(We,rjo),e(We,mF),e(mF,tjo),e(mF,sfe),e(sfe,ajo),e(mF,njo),e(mF,lfe),e(lfe,sjo),e(We,ljo),e(We,ife),e(ife,ijo),e(We,djo),g(k3,We,null),b(c,aBe,u),b(c,qd,u),e(qd,gF),e(gF,dfe),g(S3,dfe,null),e(qd,cjo),e(qd,cfe),e(cfe,fjo),b(c,nBe,u),b(c,ir,u),g(R3,ir,null),e(ir,mjo),e(ir,Id),e(Id,gjo),e(Id,jD),e(jD,hjo),e(Id,pjo),e(Id,ND),e(ND,_jo),e(Id,ujo),e(ir,bjo),e(ir,B3),e(B3,Fjo),e(B3,ffe),e(ffe,vjo),e(B3,Tjo),e(ir,Mjo),e(ir,tt),g(P3,tt,null),e(tt,Ejo),e(tt,mfe),e(mfe,Cjo),e(tt,wjo),e(tt,jd),e(jd,Ajo),e(jd,gfe),e(gfe,yjo),e(jd,Ljo),e(jd,DD),e(DD,xjo),e(jd,kjo),e(tt,Sjo),e(tt,hfe),e(hfe,Rjo),e(tt,Bjo),g($3,tt,null),e(ir,Pjo),e(ir,He),g(q3,He,null),e(He,$jo),e(He,pfe),e(pfe,qjo),e(He,Ijo),e(He,nn),e(nn,jjo),e(nn,_fe),e(_fe,Njo),e(nn,Djo),e(nn,ufe),e(ufe,Gjo),e(nn,Ojo),e(nn,bfe),e(bfe,Vjo),e(nn,Xjo),e(He,zjo),e(He,ge),e(ge,hF),e(hF,Ffe),e(Ffe,Qjo),e(hF,Wjo),e(hF,GD),e(GD,Hjo),e(hF,Ujo),e(ge,Jjo),e(ge,pF),e(pF,vfe),e(vfe,Yjo),e(pF,Kjo),e(pF,OD),e(OD,Zjo),e(pF,eNo),e(ge,oNo),e(ge,zs),e(zs,Tfe),e(Tfe,rNo),e(zs,tNo),e(zs,VD),e(VD,aNo),e(zs,nNo),e(zs,XD),e(XD,sNo),e(zs,lNo),e(ge,iNo),e(ge,_F),e(_F,Mfe),e(Mfe,dNo),e(_F,cNo),e(_F,zD),e(zD,fNo),e(_F,mNo),e(ge,gNo),e(ge,pa),e(pa,Efe),e(Efe,hNo),e(pa,pNo),e(pa,QD),e(QD,_No),e(pa,uNo),e(pa,WD),e(WD,bNo),e(pa,FNo),e(pa,HD),e(HD,vNo),e(pa,TNo),e(ge,MNo),e(ge,uF),e(uF,Cfe),e(Cfe,ENo),e(uF,CNo),e(uF,UD),e(UD,wNo),e(uF,ANo),e(ge,yNo),e(ge,bF),e(bF,wfe),e(wfe,LNo),e(bF,xNo),e(bF,JD),e(JD,kNo),e(bF,SNo),e(ge,RNo),e(ge,FF),e(FF,Afe),e(Afe,BNo),e(FF,PNo),e(FF,YD),e(YD,$No),e(FF,qNo),e(ge,INo),e(ge,vF),e(vF,yfe),e(yfe,jNo),e(vF,NNo),e(vF,KD),e(KD,DNo),e(vF,GNo),e(ge,ONo),e(ge,TF),e(TF,Lfe),e(Lfe,VNo),e(TF,XNo),e(TF,ZD),e(ZD,zNo),e(TF,QNo),e(ge,WNo),e(ge,MF),e(MF,xfe),e(xfe,HNo),e(MF,UNo),e(MF,eG),e(eG,JNo),e(MF,YNo),e(He,KNo),e(He,EF),e(EF,ZNo),e(EF,kfe),e(kfe,eDo),e(EF,oDo),e(EF,Sfe),e(Sfe,rDo),e(He,tDo),e(He,Rfe),e(Rfe,aDo),e(He,nDo),g(I3,He,null),b(c,sBe,u),b(c,Nd,u),e(Nd,CF),e(CF,Bfe),g(j3,Bfe,null),e(Nd,sDo),e(Nd,Pfe),e(Pfe,lDo),b(c,lBe,u),b(c,dr,u),g(N3,dr,null),e(dr,iDo),e(dr,Dd),e(Dd,dDo),e(Dd,oG),e(oG,cDo),e(Dd,fDo),e(Dd,rG),e(rG,mDo),e(Dd,gDo),e(dr,hDo),e(dr,D3),e(D3,pDo),e(D3,$fe),e($fe,_Do),e(D3,uDo),e(dr,bDo),e(dr,at),g(G3,at,null),e(at,FDo),e(at,qfe),e(qfe,vDo),e(at,TDo),e(at,Gd),e(Gd,MDo),e(Gd,Ife),e(Ife,EDo),e(Gd,CDo),e(Gd,tG),e(tG,wDo),e(Gd,ADo),e(at,yDo),e(at,jfe),e(jfe,LDo),e(at,xDo),g(O3,at,null),e(dr,kDo),e(dr,Ue),g(V3,Ue,null),e(Ue,SDo),e(Ue,Nfe),e(Nfe,RDo),e(Ue,BDo),e(Ue,sn),e(sn,PDo),e(sn,Dfe),e(Dfe,$Do),e(sn,qDo),e(sn,Gfe),e(Gfe,IDo),e(sn,jDo),e(sn,Ofe),e(Ofe,NDo),e(sn,DDo),e(Ue,GDo),e(Ue,Vfe),e(Vfe,wF),e(wF,Xfe),e(Xfe,ODo),e(wF,VDo),e(wF,aG),e(aG,XDo),e(wF,zDo),e(Ue,QDo),e(Ue,AF),e(AF,WDo),e(AF,zfe),e(zfe,HDo),e(AF,UDo),e(AF,Qfe),e(Qfe,JDo),e(Ue,YDo),e(Ue,Wfe),e(Wfe,KDo),e(Ue,ZDo),g(X3,Ue,null),b(c,iBe,u),b(c,Od,u),e(Od,yF),e(yF,Hfe),g(z3,Hfe,null),e(Od,eGo),e(Od,Ufe),e(Ufe,oGo),b(c,dBe,u),b(c,cr,u),g(Q3,cr,null),e(cr,rGo),e(cr,Vd),e(Vd,tGo),e(Vd,nG),e(nG,aGo),e(Vd,nGo),e(Vd,sG),e(sG,sGo),e(Vd,lGo),e(cr,iGo),e(cr,W3),e(W3,dGo),e(W3,Jfe),e(Jfe,cGo),e(W3,fGo),e(cr,mGo),e(cr,nt),g(H3,nt,null),e(nt,gGo),e(nt,Yfe),e(Yfe,hGo),e(nt,pGo),e(nt,Xd),e(Xd,_Go),e(Xd,Kfe),e(Kfe,uGo),e(Xd,bGo),e(Xd,lG),e(lG,FGo),e(Xd,vGo),e(nt,TGo),e(nt,Zfe),e(Zfe,MGo),e(nt,EGo),g(U3,nt,null),e(cr,CGo),e(cr,Je),g(J3,Je,null),e(Je,wGo),e(Je,eme),e(eme,AGo),e(Je,yGo),e(Je,ln),e(ln,LGo),e(ln,ome),e(ome,xGo),e(ln,kGo),e(ln,rme),e(rme,SGo),e(ln,RGo),e(ln,tme),e(tme,BGo),e(ln,PGo),e(Je,$Go),e(Je,Se),e(Se,LF),e(LF,ame),e(ame,qGo),e(LF,IGo),e(LF,iG),e(iG,jGo),e(LF,NGo),e(Se,DGo),e(Se,xF),e(xF,nme),e(nme,GGo),e(xF,OGo),e(xF,dG),e(dG,VGo),e(xF,XGo),e(Se,zGo),e(Se,kF),e(kF,sme),e(sme,QGo),e(kF,WGo),e(kF,cG),e(cG,HGo),e(kF,UGo),e(Se,JGo),e(Se,SF),e(SF,lme),e(lme,YGo),e(SF,KGo),e(SF,fG),e(fG,ZGo),e(SF,eOo),e(Se,oOo),e(Se,RF),e(RF,ime),e(ime,rOo),e(RF,tOo),e(RF,mG),e(mG,aOo),e(RF,nOo),e(Se,sOo),e(Se,BF),e(BF,dme),e(dme,lOo),e(BF,iOo),e(BF,gG),e(gG,dOo),e(BF,cOo),e(Se,fOo),e(Se,PF),e(PF,cme),e(cme,mOo),e(PF,gOo),e(PF,hG),e(hG,hOo),e(PF,pOo),e(Se,_Oo),e(Se,$F),e($F,fme),e(fme,uOo),e($F,bOo),e($F,pG),e(pG,FOo),e($F,vOo),e(Je,TOo),e(Je,qF),e(qF,MOo),e(qF,mme),e(mme,EOo),e(qF,COo),e(qF,gme),e(gme,wOo),e(Je,AOo),e(Je,hme),e(hme,yOo),e(Je,LOo),g(Y3,Je,null),b(c,cBe,u),b(c,zd,u),e(zd,IF),e(IF,pme),g(K3,pme,null),e(zd,xOo),e(zd,_me),e(_me,kOo),b(c,fBe,u),b(c,fr,u),g(Z3,fr,null),e(fr,SOo),e(fr,Qd),e(Qd,ROo),e(Qd,_G),e(_G,BOo),e(Qd,POo),e(Qd,uG),e(uG,$Oo),e(Qd,qOo),e(fr,IOo),e(fr,ew),e(ew,jOo),e(ew,ume),e(ume,NOo),e(ew,DOo),e(fr,GOo),e(fr,st),g(ow,st,null),e(st,OOo),e(st,bme),e(bme,VOo),e(st,XOo),e(st,Wd),e(Wd,zOo),e(Wd,Fme),e(Fme,QOo),e(Wd,WOo),e(Wd,bG),e(bG,HOo),e(Wd,UOo),e(st,JOo),e(st,vme),e(vme,YOo),e(st,KOo),g(rw,st,null),e(fr,ZOo),e(fr,Ye),g(tw,Ye,null),e(Ye,eVo),e(Ye,Tme),e(Tme,oVo),e(Ye,rVo),e(Ye,dn),e(dn,tVo),e(dn,Mme),e(Mme,aVo),e(dn,nVo),e(dn,Eme),e(Eme,sVo),e(dn,lVo),e(dn,Cme),e(Cme,iVo),e(dn,dVo),e(Ye,cVo),e(Ye,cn),e(cn,jF),e(jF,wme),e(wme,fVo),e(jF,mVo),e(jF,FG),e(FG,gVo),e(jF,hVo),e(cn,pVo),e(cn,NF),e(NF,Ame),e(Ame,_Vo),e(NF,uVo),e(NF,vG),e(vG,bVo),e(NF,FVo),e(cn,vVo),e(cn,DF),e(DF,yme),e(yme,TVo),e(DF,MVo),e(DF,TG),e(TG,EVo),e(DF,CVo),e(cn,wVo),e(cn,GF),e(GF,Lme),e(Lme,AVo),e(GF,yVo),e(GF,MG),e(MG,LVo),e(GF,xVo),e(Ye,kVo),e(Ye,OF),e(OF,SVo),e(OF,xme),e(xme,RVo),e(OF,BVo),e(OF,kme),e(kme,PVo),e(Ye,$Vo),e(Ye,Sme),e(Sme,qVo),e(Ye,IVo),g(aw,Ye,null),b(c,mBe,u),b(c,Hd,u),e(Hd,VF),e(VF,Rme),g(nw,Rme,null),e(Hd,jVo),e(Hd,Bme),e(Bme,NVo),b(c,gBe,u),b(c,mr,u),g(sw,mr,null),e(mr,DVo),e(mr,Ud),e(Ud,GVo),e(Ud,EG),e(EG,OVo),e(Ud,VVo),e(Ud,CG),e(CG,XVo),e(Ud,zVo),e(mr,QVo),e(mr,lw),e(lw,WVo),e(lw,Pme),e(Pme,HVo),e(lw,UVo),e(mr,JVo),e(mr,lt),g(iw,lt,null),e(lt,YVo),e(lt,$me),e($me,KVo),e(lt,ZVo),e(lt,Jd),e(Jd,eXo),e(Jd,qme),e(qme,oXo),e(Jd,rXo),e(Jd,wG),e(wG,tXo),e(Jd,aXo),e(lt,nXo),e(lt,Ime),e(Ime,sXo),e(lt,lXo),g(dw,lt,null),e(mr,iXo),e(mr,Ke),g(cw,Ke,null),e(Ke,dXo),e(Ke,jme),e(jme,cXo),e(Ke,fXo),e(Ke,fn),e(fn,mXo),e(fn,Nme),e(Nme,gXo),e(fn,hXo),e(fn,Dme),e(Dme,pXo),e(fn,_Xo),e(fn,Gme),e(Gme,uXo),e(fn,bXo),e(Ke,FXo),e(Ke,Re),e(Re,XF),e(XF,Ome),e(Ome,vXo),e(XF,TXo),e(XF,AG),e(AG,MXo),e(XF,EXo),e(Re,CXo),e(Re,zF),e(zF,Vme),e(Vme,wXo),e(zF,AXo),e(zF,yG),e(yG,yXo),e(zF,LXo),e(Re,xXo),e(Re,QF),e(QF,Xme),e(Xme,kXo),e(QF,SXo),e(QF,LG),e(LG,RXo),e(QF,BXo),e(Re,PXo),e(Re,WF),e(WF,zme),e(zme,$Xo),e(WF,qXo),e(WF,xG),e(xG,IXo),e(WF,jXo),e(Re,NXo),e(Re,HF),e(HF,Qme),e(Qme,DXo),e(HF,GXo),e(HF,kG),e(kG,OXo),e(HF,VXo),e(Re,XXo),e(Re,UF),e(UF,Wme),e(Wme,zXo),e(UF,QXo),e(UF,SG),e(SG,WXo),e(UF,HXo),e(Re,UXo),e(Re,JF),e(JF,Hme),e(Hme,JXo),e(JF,YXo),e(JF,RG),e(RG,KXo),e(JF,ZXo),e(Re,ezo),e(Re,YF),e(YF,Ume),e(Ume,ozo),e(YF,rzo),e(YF,BG),e(BG,tzo),e(YF,azo),e(Ke,nzo),e(Ke,KF),e(KF,szo),e(KF,Jme),e(Jme,lzo),e(KF,izo),e(KF,Yme),e(Yme,dzo),e(Ke,czo),e(Ke,Kme),e(Kme,fzo),e(Ke,mzo),g(fw,Ke,null),b(c,hBe,u),b(c,Yd,u),e(Yd,ZF),e(ZF,Zme),g(mw,Zme,null),e(Yd,gzo),e(Yd,ege),e(ege,hzo),b(c,pBe,u),b(c,gr,u),g(gw,gr,null),e(gr,pzo),e(gr,Kd),e(Kd,_zo),e(Kd,PG),e(PG,uzo),e(Kd,bzo),e(Kd,$G),e($G,Fzo),e(Kd,vzo),e(gr,Tzo),e(gr,hw),e(hw,Mzo),e(hw,oge),e(oge,Ezo),e(hw,Czo),e(gr,wzo),e(gr,it),g(pw,it,null),e(it,Azo),e(it,rge),e(rge,yzo),e(it,Lzo),e(it,Zd),e(Zd,xzo),e(Zd,tge),e(tge,kzo),e(Zd,Szo),e(Zd,qG),e(qG,Rzo),e(Zd,Bzo),e(it,Pzo),e(it,age),e(age,$zo),e(it,qzo),g(_w,it,null),e(gr,Izo),e(gr,Ze),g(uw,Ze,null),e(Ze,jzo),e(Ze,nge),e(nge,Nzo),e(Ze,Dzo),e(Ze,mn),e(mn,Gzo),e(mn,sge),e(sge,Ozo),e(mn,Vzo),e(mn,lge),e(lge,Xzo),e(mn,zzo),e(mn,ige),e(ige,Qzo),e(mn,Wzo),e(Ze,Hzo),e(Ze,bw),e(bw,ev),e(ev,dge),e(dge,Uzo),e(ev,Jzo),e(ev,IG),e(IG,Yzo),e(ev,Kzo),e(bw,Zzo),e(bw,ov),e(ov,cge),e(cge,eQo),e(ov,oQo),e(ov,jG),e(jG,rQo),e(ov,tQo),e(Ze,aQo),e(Ze,rv),e(rv,nQo),e(rv,fge),e(fge,sQo),e(rv,lQo),e(rv,mge),e(mge,iQo),e(Ze,dQo),e(Ze,gge),e(gge,cQo),e(Ze,fQo),g(Fw,Ze,null),b(c,_Be,u),b(c,ec,u),e(ec,tv),e(tv,hge),g(vw,hge,null),e(ec,mQo),e(ec,pge),e(pge,gQo),b(c,uBe,u),b(c,hr,u),g(Tw,hr,null),e(hr,hQo),e(hr,oc),e(oc,pQo),e(oc,NG),e(NG,_Qo),e(oc,uQo),e(oc,DG),e(DG,bQo),e(oc,FQo),e(hr,vQo),e(hr,Mw),e(Mw,TQo),e(Mw,_ge),e(_ge,MQo),e(Mw,EQo),e(hr,CQo),e(hr,dt),g(Ew,dt,null),e(dt,wQo),e(dt,uge),e(uge,AQo),e(dt,yQo),e(dt,rc),e(rc,LQo),e(rc,bge),e(bge,xQo),e(rc,kQo),e(rc,GG),e(GG,SQo),e(rc,RQo),e(dt,BQo),e(dt,Fge),e(Fge,PQo),e(dt,$Qo),g(Cw,dt,null),e(hr,qQo),e(hr,eo),g(ww,eo,null),e(eo,IQo),e(eo,vge),e(vge,jQo),e(eo,NQo),e(eo,gn),e(gn,DQo),e(gn,Tge),e(Tge,GQo),e(gn,OQo),e(gn,Mge),e(Mge,VQo),e(gn,XQo),e(gn,Ege),e(Ege,zQo),e(gn,QQo),e(eo,WQo),e(eo,hn),e(hn,av),e(av,Cge),e(Cge,HQo),e(av,UQo),e(av,OG),e(OG,JQo),e(av,YQo),e(hn,KQo),e(hn,nv),e(nv,wge),e(wge,ZQo),e(nv,eWo),e(nv,VG),e(VG,oWo),e(nv,rWo),e(hn,tWo),e(hn,sv),e(sv,Age),e(Age,aWo),e(sv,nWo),e(sv,XG),e(XG,sWo),e(sv,lWo),e(hn,iWo),e(hn,lv),e(lv,yge),e(yge,dWo),e(lv,cWo),e(lv,zG),e(zG,fWo),e(lv,mWo),e(eo,gWo),e(eo,iv),e(iv,hWo),e(iv,Lge),e(Lge,pWo),e(iv,_Wo),e(iv,xge),e(xge,uWo),e(eo,bWo),e(eo,kge),e(kge,FWo),e(eo,vWo),g(Aw,eo,null),b(c,bBe,u),b(c,tc,u),e(tc,dv),e(dv,Sge),g(yw,Sge,null),e(tc,TWo),e(tc,Rge),e(Rge,MWo),b(c,FBe,u),b(c,pr,u),g(Lw,pr,null),e(pr,EWo),e(pr,ac),e(ac,CWo),e(ac,QG),e(QG,wWo),e(ac,AWo),e(ac,WG),e(WG,yWo),e(ac,LWo),e(pr,xWo),e(pr,xw),e(xw,kWo),e(xw,Bge),e(Bge,SWo),e(xw,RWo),e(pr,BWo),e(pr,ct),g(kw,ct,null),e(ct,PWo),e(ct,Pge),e(Pge,$Wo),e(ct,qWo),e(ct,nc),e(nc,IWo),e(nc,$ge),e($ge,jWo),e(nc,NWo),e(nc,HG),e(HG,DWo),e(nc,GWo),e(ct,OWo),e(ct,qge),e(qge,VWo),e(ct,XWo),g(Sw,ct,null),e(pr,zWo),e(pr,oo),g(Rw,oo,null),e(oo,QWo),e(oo,Ige),e(Ige,WWo),e(oo,HWo),e(oo,pn),e(pn,UWo),e(pn,jge),e(jge,JWo),e(pn,YWo),e(pn,Nge),e(Nge,KWo),e(pn,ZWo),e(pn,Dge),e(Dge,eHo),e(pn,oHo),e(oo,rHo),e(oo,sc),e(sc,cv),e(cv,Gge),e(Gge,tHo),e(cv,aHo),e(cv,UG),e(UG,nHo),e(cv,sHo),e(sc,lHo),e(sc,fv),e(fv,Oge),e(Oge,iHo),e(fv,dHo),e(fv,JG),e(JG,cHo),e(fv,fHo),e(sc,mHo),e(sc,mv),e(mv,Vge),e(Vge,gHo),e(mv,hHo),e(mv,YG),e(YG,pHo),e(mv,_Ho),e(oo,uHo),e(oo,gv),e(gv,bHo),e(gv,Xge),e(Xge,FHo),e(gv,vHo),e(gv,zge),e(zge,THo),e(oo,MHo),e(oo,Qge),e(Qge,EHo),e(oo,CHo),g(Bw,oo,null),b(c,vBe,u),b(c,lc,u),e(lc,hv),e(hv,Wge),g(Pw,Wge,null),e(lc,wHo),e(lc,Hge),e(Hge,AHo),b(c,TBe,u),b(c,_r,u),g($w,_r,null),e(_r,yHo),e(_r,ic),e(ic,LHo),e(ic,KG),e(KG,xHo),e(ic,kHo),e(ic,ZG),e(ZG,SHo),e(ic,RHo),e(_r,BHo),e(_r,qw),e(qw,PHo),e(qw,Uge),e(Uge,$Ho),e(qw,qHo),e(_r,IHo),e(_r,ft),g(Iw,ft,null),e(ft,jHo),e(ft,Jge),e(Jge,NHo),e(ft,DHo),e(ft,dc),e(dc,GHo),e(dc,Yge),e(Yge,OHo),e(dc,VHo),e(dc,eO),e(eO,XHo),e(dc,zHo),e(ft,QHo),e(ft,Kge),e(Kge,WHo),e(ft,HHo),g(jw,ft,null),e(_r,UHo),e(_r,ro),g(Nw,ro,null),e(ro,JHo),e(ro,Zge),e(Zge,YHo),e(ro,KHo),e(ro,_n),e(_n,ZHo),e(_n,ehe),e(ehe,eUo),e(_n,oUo),e(_n,ohe),e(ohe,rUo),e(_n,tUo),e(_n,rhe),e(rhe,aUo),e(_n,nUo),e(ro,sUo),e(ro,the),e(the,pv),e(pv,ahe),e(ahe,lUo),e(pv,iUo),e(pv,oO),e(oO,dUo),e(pv,cUo),e(ro,fUo),e(ro,_v),e(_v,mUo),e(_v,nhe),e(nhe,gUo),e(_v,hUo),e(_v,she),e(she,pUo),e(ro,_Uo),e(ro,lhe),e(lhe,uUo),e(ro,bUo),g(Dw,ro,null),b(c,MBe,u),b(c,cc,u),e(cc,uv),e(uv,ihe),g(Gw,ihe,null),e(cc,FUo),e(cc,dhe),e(dhe,vUo),b(c,EBe,u),b(c,ur,u),g(Ow,ur,null),e(ur,TUo),e(ur,fc),e(fc,MUo),e(fc,rO),e(rO,EUo),e(fc,CUo),e(fc,tO),e(tO,wUo),e(fc,AUo),e(ur,yUo),e(ur,Vw),e(Vw,LUo),e(Vw,che),e(che,xUo),e(Vw,kUo),e(ur,SUo),e(ur,mt),g(Xw,mt,null),e(mt,RUo),e(mt,fhe),e(fhe,BUo),e(mt,PUo),e(mt,mc),e(mc,$Uo),e(mc,mhe),e(mhe,qUo),e(mc,IUo),e(mc,aO),e(aO,jUo),e(mc,NUo),e(mt,DUo),e(mt,ghe),e(ghe,GUo),e(mt,OUo),g(zw,mt,null),e(ur,VUo),e(ur,to),g(Qw,to,null),e(to,XUo),e(to,hhe),e(hhe,zUo),e(to,QUo),e(to,un),e(un,WUo),e(un,phe),e(phe,HUo),e(un,UUo),e(un,_he),e(_he,JUo),e(un,YUo),e(un,uhe),e(uhe,KUo),e(un,ZUo),e(to,eJo),e(to,bhe),e(bhe,bv),e(bv,Fhe),e(Fhe,oJo),e(bv,rJo),e(bv,nO),e(nO,tJo),e(bv,aJo),e(to,nJo),e(to,Fv),e(Fv,sJo),e(Fv,vhe),e(vhe,lJo),e(Fv,iJo),e(Fv,The),e(The,dJo),e(to,cJo),e(to,Mhe),e(Mhe,fJo),e(to,mJo),g(Ww,to,null),b(c,CBe,u),b(c,gc,u),e(gc,vv),e(vv,Ehe),g(Hw,Ehe,null),e(gc,gJo),e(gc,Che),e(Che,hJo),b(c,wBe,u),b(c,br,u),g(Uw,br,null),e(br,pJo),e(br,hc),e(hc,_Jo),e(hc,sO),e(sO,uJo),e(hc,bJo),e(hc,lO),e(lO,FJo),e(hc,vJo),e(br,TJo),e(br,Jw),e(Jw,MJo),e(Jw,whe),e(whe,EJo),e(Jw,CJo),e(br,wJo),e(br,gt),g(Yw,gt,null),e(gt,AJo),e(gt,Ahe),e(Ahe,yJo),e(gt,LJo),e(gt,pc),e(pc,xJo),e(pc,yhe),e(yhe,kJo),e(pc,SJo),e(pc,iO),e(iO,RJo),e(pc,BJo),e(gt,PJo),e(gt,Lhe),e(Lhe,$Jo),e(gt,qJo),g(Kw,gt,null),e(br,IJo),e(br,ao),g(Zw,ao,null),e(ao,jJo),e(ao,xhe),e(xhe,NJo),e(ao,DJo),e(ao,bn),e(bn,GJo),e(bn,khe),e(khe,OJo),e(bn,VJo),e(bn,She),e(She,XJo),e(bn,zJo),e(bn,Rhe),e(Rhe,QJo),e(bn,WJo),e(ao,HJo),e(ao,_c),e(_c,Tv),e(Tv,Bhe),e(Bhe,UJo),e(Tv,JJo),e(Tv,dO),e(dO,YJo),e(Tv,KJo),e(_c,ZJo),e(_c,Mv),e(Mv,Phe),e(Phe,eYo),e(Mv,oYo),e(Mv,cO),e(cO,rYo),e(Mv,tYo),e(_c,aYo),e(_c,Ev),e(Ev,$he),e($he,nYo),e(Ev,sYo),e(Ev,fO),e(fO,lYo),e(Ev,iYo),e(ao,dYo),e(ao,Cv),e(Cv,cYo),e(Cv,qhe),e(qhe,fYo),e(Cv,mYo),e(Cv,Ihe),e(Ihe,gYo),e(ao,hYo),e(ao,jhe),e(jhe,pYo),e(ao,_Yo),g(eA,ao,null),b(c,ABe,u),b(c,uc,u),e(uc,wv),e(wv,Nhe),g(oA,Nhe,null),e(uc,uYo),e(uc,Dhe),e(Dhe,bYo),b(c,yBe,u),b(c,Fr,u),g(rA,Fr,null),e(Fr,FYo),e(Fr,bc),e(bc,vYo),e(bc,mO),e(mO,TYo),e(bc,MYo),e(bc,gO),e(gO,EYo),e(bc,CYo),e(Fr,wYo),e(Fr,tA),e(tA,AYo),e(tA,Ghe),e(Ghe,yYo),e(tA,LYo),e(Fr,xYo),e(Fr,ht),g(aA,ht,null),e(ht,kYo),e(ht,Ohe),e(Ohe,SYo),e(ht,RYo),e(ht,Fc),e(Fc,BYo),e(Fc,Vhe),e(Vhe,PYo),e(Fc,$Yo),e(Fc,hO),e(hO,qYo),e(Fc,IYo),e(ht,jYo),e(ht,Xhe),e(Xhe,NYo),e(ht,DYo),g(nA,ht,null),e(Fr,GYo),e(Fr,no),g(sA,no,null),e(no,OYo),e(no,zhe),e(zhe,VYo),e(no,XYo),e(no,Fn),e(Fn,zYo),e(Fn,Qhe),e(Qhe,QYo),e(Fn,WYo),e(Fn,Whe),e(Whe,HYo),e(Fn,UYo),e(Fn,Hhe),e(Hhe,JYo),e(Fn,YYo),e(no,KYo),e(no,Uhe),e(Uhe,Av),e(Av,Jhe),e(Jhe,ZYo),e(Av,eKo),e(Av,pO),e(pO,oKo),e(Av,rKo),e(no,tKo),e(no,yv),e(yv,aKo),e(yv,Yhe),e(Yhe,nKo),e(yv,sKo),e(yv,Khe),e(Khe,lKo),e(no,iKo),e(no,Zhe),e(Zhe,dKo),e(no,cKo),g(lA,no,null),b(c,LBe,u),b(c,vc,u),e(vc,Lv),e(Lv,epe),g(iA,epe,null),e(vc,fKo),e(vc,ope),e(ope,mKo),b(c,xBe,u),b(c,vr,u),g(dA,vr,null),e(vr,gKo),e(vr,Tc),e(Tc,hKo),e(Tc,_O),e(_O,pKo),e(Tc,_Ko),e(Tc,uO),e(uO,uKo),e(Tc,bKo),e(vr,FKo),e(vr,cA),e(cA,vKo),e(cA,rpe),e(rpe,TKo),e(cA,MKo),e(vr,EKo),e(vr,pt),g(fA,pt,null),e(pt,CKo),e(pt,tpe),e(tpe,wKo),e(pt,AKo),e(pt,Mc),e(Mc,yKo),e(Mc,ape),e(ape,LKo),e(Mc,xKo),e(Mc,bO),e(bO,kKo),e(Mc,SKo),e(pt,RKo),e(pt,npe),e(npe,BKo),e(pt,PKo),g(mA,pt,null),e(vr,$Ko),e(vr,ho),g(gA,ho,null),e(ho,qKo),e(ho,spe),e(spe,IKo),e(ho,jKo),e(ho,vn),e(vn,NKo),e(vn,lpe),e(lpe,DKo),e(vn,GKo),e(vn,ipe),e(ipe,OKo),e(vn,VKo),e(vn,dpe),e(dpe,XKo),e(vn,zKo),e(ho,QKo),e(ho,x),e(x,xv),e(xv,cpe),e(cpe,WKo),e(xv,HKo),e(xv,FO),e(FO,UKo),e(xv,JKo),e(x,YKo),e(x,kv),e(kv,fpe),e(fpe,KKo),e(kv,ZKo),e(kv,vO),e(vO,eZo),e(kv,oZo),e(x,rZo),e(x,Sv),e(Sv,mpe),e(mpe,tZo),e(Sv,aZo),e(Sv,TO),e(TO,nZo),e(Sv,sZo),e(x,lZo),e(x,Rv),e(Rv,gpe),e(gpe,iZo),e(Rv,dZo),e(Rv,MO),e(MO,cZo),e(Rv,fZo),e(x,mZo),e(x,Bv),e(Bv,hpe),e(hpe,gZo),e(Bv,hZo),e(Bv,EO),e(EO,pZo),e(Bv,_Zo),e(x,uZo),e(x,Pv),e(Pv,ppe),e(ppe,bZo),e(Pv,FZo),e(Pv,CO),e(CO,vZo),e(Pv,TZo),e(x,MZo),e(x,$v),e($v,_pe),e(_pe,EZo),e($v,CZo),e($v,wO),e(wO,wZo),e($v,AZo),e(x,yZo),e(x,qv),e(qv,upe),e(upe,LZo),e(qv,xZo),e(qv,AO),e(AO,kZo),e(qv,SZo),e(x,RZo),e(x,Iv),e(Iv,bpe),e(bpe,BZo),e(Iv,PZo),e(Iv,yO),e(yO,$Zo),e(Iv,qZo),e(x,IZo),e(x,jv),e(jv,Fpe),e(Fpe,jZo),e(jv,NZo),e(jv,LO),e(LO,DZo),e(jv,GZo),e(x,OZo),e(x,Nv),e(Nv,vpe),e(vpe,VZo),e(Nv,XZo),e(Nv,xO),e(xO,zZo),e(Nv,QZo),e(x,WZo),e(x,Dv),e(Dv,Tpe),e(Tpe,HZo),e(Dv,UZo),e(Dv,kO),e(kO,JZo),e(Dv,YZo),e(x,KZo),e(x,Gv),e(Gv,Mpe),e(Mpe,ZZo),e(Gv,eer),e(Gv,SO),e(SO,oer),e(Gv,rer),e(x,ter),e(x,Ov),e(Ov,Epe),e(Epe,aer),e(Ov,ner),e(Ov,RO),e(RO,ser),e(Ov,ler),e(x,ier),e(x,Vv),e(Vv,Cpe),e(Cpe,der),e(Vv,cer),e(Vv,BO),e(BO,fer),e(Vv,mer),e(x,ger),e(x,Xv),e(Xv,wpe),e(wpe,her),e(Xv,per),e(Xv,PO),e(PO,_er),e(Xv,uer),e(x,ber),e(x,Qs),e(Qs,Ape),e(Ape,Fer),e(Qs,ver),e(Qs,$O),e($O,Ter),e(Qs,Mer),e(Qs,qO),e(qO,Eer),e(Qs,Cer),e(x,wer),e(x,zv),e(zv,ype),e(ype,Aer),e(zv,yer),e(zv,IO),e(IO,Ler),e(zv,xer),e(x,ker),e(x,Qv),e(Qv,Lpe),e(Lpe,Ser),e(Qv,Rer),e(Qv,jO),e(jO,Ber),e(Qv,Per),e(x,$er),e(x,Wv),e(Wv,xpe),e(xpe,qer),e(Wv,Ier),e(Wv,NO),e(NO,jer),e(Wv,Ner),e(x,Der),e(x,Hv),e(Hv,kpe),e(kpe,Ger),e(Hv,Oer),e(Hv,DO),e(DO,Ver),e(Hv,Xer),e(x,zer),e(x,Uv),e(Uv,Spe),e(Spe,Qer),e(Uv,Wer),e(Uv,GO),e(GO,Her),e(Uv,Uer),e(x,Jer),e(x,Jv),e(Jv,Rpe),e(Rpe,Yer),e(Jv,Ker),e(Jv,OO),e(OO,Zer),e(Jv,eor),e(x,oor),e(x,Yv),e(Yv,Bpe),e(Bpe,ror),e(Yv,tor),e(Yv,VO),e(VO,aor),e(Yv,nor),e(x,sor),e(x,Kv),e(Kv,Ppe),e(Ppe,lor),e(Kv,ior),e(Kv,XO),e(XO,dor),e(Kv,cor),e(x,mor),e(x,Zv),e(Zv,$pe),e($pe,gor),e(Zv,hor),e(Zv,zO),e(zO,por),e(Zv,_or),e(x,uor),e(x,e6),e(e6,qpe),e(qpe,bor),e(e6,For),e(e6,QO),e(QO,vor),e(e6,Tor),e(x,Mor),e(x,o6),e(o6,Ipe),e(Ipe,Eor),e(o6,Cor),e(o6,WO),e(WO,wor),e(o6,Aor),e(x,yor),e(x,r6),e(r6,jpe),e(jpe,Lor),e(r6,xor),e(r6,HO),e(HO,kor),e(r6,Sor),e(x,Ror),e(x,t6),e(t6,Npe),e(Npe,Bor),e(t6,Por),e(t6,UO),e(UO,$or),e(t6,qor),e(x,Ior),e(x,a6),e(a6,Dpe),e(Dpe,jor),e(a6,Nor),e(a6,JO),e(JO,Dor),e(a6,Gor),e(x,Oor),e(x,n6),e(n6,Gpe),e(Gpe,Vor),e(n6,Xor),e(n6,YO),e(YO,zor),e(n6,Qor),e(x,Wor),e(x,s6),e(s6,Ope),e(Ope,Hor),e(s6,Uor),e(s6,KO),e(KO,Jor),e(s6,Yor),e(x,Kor),e(x,l6),e(l6,Vpe),e(Vpe,Zor),e(l6,err),e(l6,ZO),e(ZO,orr),e(l6,rrr),e(x,trr),e(x,i6),e(i6,Xpe),e(Xpe,arr),e(i6,nrr),e(i6,eV),e(eV,srr),e(i6,lrr),e(x,irr),e(x,d6),e(d6,zpe),e(zpe,drr),e(d6,crr),e(d6,oV),e(oV,frr),e(d6,mrr),e(x,grr),e(x,c6),e(c6,Qpe),e(Qpe,hrr),e(c6,prr),e(c6,rV),e(rV,_rr),e(c6,urr),e(x,brr),e(x,f6),e(f6,Wpe),e(Wpe,Frr),e(f6,vrr),e(f6,tV),e(tV,Trr),e(f6,Mrr),e(x,Err),e(x,m6),e(m6,Hpe),e(Hpe,Crr),e(m6,wrr),e(m6,aV),e(aV,Arr),e(m6,yrr),e(x,Lrr),e(x,g6),e(g6,Upe),e(Upe,xrr),e(g6,krr),e(g6,nV),e(nV,Srr),e(g6,Rrr),e(x,Brr),e(x,h6),e(h6,Jpe),e(Jpe,Prr),e(h6,$rr),e(h6,sV),e(sV,qrr),e(h6,Irr),e(x,jrr),e(x,p6),e(p6,Ype),e(Ype,Nrr),e(p6,Drr),e(p6,lV),e(lV,Grr),e(p6,Orr),e(x,Vrr),e(x,_6),e(_6,Kpe),e(Kpe,Xrr),e(_6,zrr),e(_6,iV),e(iV,Qrr),e(_6,Wrr),e(x,Hrr),e(x,u6),e(u6,Zpe),e(Zpe,Urr),e(u6,Jrr),e(u6,dV),e(dV,Yrr),e(u6,Krr),e(ho,Zrr),e(ho,e_e),e(e_e,etr),e(ho,otr),g(hA,ho,null),b(c,kBe,u),b(c,Ec,u),e(Ec,b6),e(b6,o_e),g(pA,o_e,null),e(Ec,rtr),e(Ec,r_e),e(r_e,ttr),b(c,SBe,u),b(c,Tr,u),g(_A,Tr,null),e(Tr,atr),e(Tr,Cc),e(Cc,ntr),e(Cc,cV),e(cV,str),e(Cc,ltr),e(Cc,fV),e(fV,itr),e(Cc,dtr),e(Tr,ctr),e(Tr,uA),e(uA,ftr),e(uA,t_e),e(t_e,mtr),e(uA,gtr),e(Tr,htr),e(Tr,_t),g(bA,_t,null),e(_t,ptr),e(_t,a_e),e(a_e,_tr),e(_t,utr),e(_t,wc),e(wc,btr),e(wc,n_e),e(n_e,Ftr),e(wc,vtr),e(wc,mV),e(mV,Ttr),e(wc,Mtr),e(_t,Etr),e(_t,s_e),e(s_e,Ctr),e(_t,wtr),g(FA,_t,null),e(Tr,Atr),e(Tr,po),g(vA,po,null),e(po,ytr),e(po,l_e),e(l_e,Ltr),e(po,xtr),e(po,Tn),e(Tn,ktr),e(Tn,i_e),e(i_e,Str),e(Tn,Rtr),e(Tn,d_e),e(d_e,Btr),e(Tn,Ptr),e(Tn,c_e),e(c_e,$tr),e(Tn,qtr),e(po,Itr),e(po,H),e(H,F6),e(F6,f_e),e(f_e,jtr),e(F6,Ntr),e(F6,gV),e(gV,Dtr),e(F6,Gtr),e(H,Otr),e(H,v6),e(v6,m_e),e(m_e,Vtr),e(v6,Xtr),e(v6,hV),e(hV,ztr),e(v6,Qtr),e(H,Wtr),e(H,T6),e(T6,g_e),e(g_e,Htr),e(T6,Utr),e(T6,pV),e(pV,Jtr),e(T6,Ytr),e(H,Ktr),e(H,M6),e(M6,h_e),e(h_e,Ztr),e(M6,ear),e(M6,_V),e(_V,oar),e(M6,rar),e(H,tar),e(H,E6),e(E6,p_e),e(p_e,aar),e(E6,nar),e(E6,uV),e(uV,sar),e(E6,lar),e(H,iar),e(H,C6),e(C6,__e),e(__e,dar),e(C6,car),e(C6,bV),e(bV,far),e(C6,mar),e(H,gar),e(H,w6),e(w6,u_e),e(u_e,har),e(w6,par),e(w6,FV),e(FV,_ar),e(w6,uar),e(H,bar),e(H,A6),e(A6,b_e),e(b_e,Far),e(A6,Tar),e(A6,vV),e(vV,Mar),e(A6,Ear),e(H,Car),e(H,y6),e(y6,F_e),e(F_e,war),e(y6,Aar),e(y6,TV),e(TV,yar),e(y6,Lar),e(H,xar),e(H,L6),e(L6,v_e),e(v_e,kar),e(L6,Sar),e(L6,MV),e(MV,Rar),e(L6,Bar),e(H,Par),e(H,x6),e(x6,T_e),e(T_e,$ar),e(x6,qar),e(x6,EV),e(EV,Iar),e(x6,jar),e(H,Nar),e(H,k6),e(k6,M_e),e(M_e,Dar),e(k6,Gar),e(k6,CV),e(CV,Oar),e(k6,Var),e(H,Xar),e(H,S6),e(S6,E_e),e(E_e,zar),e(S6,Qar),e(S6,wV),e(wV,War),e(S6,Har),e(H,Uar),e(H,R6),e(R6,C_e),e(C_e,Jar),e(R6,Yar),e(R6,AV),e(AV,Kar),e(R6,Zar),e(H,enr),e(H,B6),e(B6,w_e),e(w_e,onr),e(B6,rnr),e(B6,yV),e(yV,tnr),e(B6,anr),e(H,nnr),e(H,P6),e(P6,A_e),e(A_e,snr),e(P6,lnr),e(P6,LV),e(LV,inr),e(P6,dnr),e(H,cnr),e(H,$6),e($6,y_e),e(y_e,fnr),e($6,mnr),e($6,xV),e(xV,gnr),e($6,hnr),e(H,pnr),e(H,q6),e(q6,L_e),e(L_e,_nr),e(q6,unr),e(q6,kV),e(kV,bnr),e(q6,Fnr),e(H,vnr),e(H,I6),e(I6,x_e),e(x_e,Tnr),e(I6,Mnr),e(I6,SV),e(SV,Enr),e(I6,Cnr),e(H,wnr),e(H,j6),e(j6,k_e),e(k_e,Anr),e(j6,ynr),e(j6,RV),e(RV,Lnr),e(j6,xnr),e(H,knr),e(H,N6),e(N6,S_e),e(S_e,Snr),e(N6,Rnr),e(N6,BV),e(BV,Bnr),e(N6,Pnr),e(H,$nr),e(H,D6),e(D6,R_e),e(R_e,qnr),e(D6,Inr),e(D6,PV),e(PV,jnr),e(D6,Nnr),e(H,Dnr),e(H,G6),e(G6,B_e),e(B_e,Gnr),e(G6,Onr),e(G6,$V),e($V,Vnr),e(G6,Xnr),e(po,znr),e(po,P_e),e(P_e,Qnr),e(po,Wnr),g(TA,po,null),b(c,RBe,u),b(c,Ac,u),e(Ac,O6),e(O6,$_e),g(MA,$_e,null),e(Ac,Hnr),e(Ac,q_e),e(q_e,Unr),b(c,BBe,u),b(c,Mr,u),g(EA,Mr,null),e(Mr,Jnr),e(Mr,yc),e(yc,Ynr),e(yc,qV),e(qV,Knr),e(yc,Znr),e(yc,IV),e(IV,esr),e(yc,osr),e(Mr,rsr),e(Mr,CA),e(CA,tsr),e(CA,I_e),e(I_e,asr),e(CA,nsr),e(Mr,ssr),e(Mr,ut),g(wA,ut,null),e(ut,lsr),e(ut,j_e),e(j_e,isr),e(ut,dsr),e(ut,Lc),e(Lc,csr),e(Lc,N_e),e(N_e,fsr),e(Lc,msr),e(Lc,jV),e(jV,gsr),e(Lc,hsr),e(ut,psr),e(ut,D_e),e(D_e,_sr),e(ut,usr),g(AA,ut,null),e(Mr,bsr),e(Mr,_o),g(yA,_o,null),e(_o,Fsr),e(_o,G_e),e(G_e,vsr),e(_o,Tsr),e(_o,Mn),e(Mn,Msr),e(Mn,O_e),e(O_e,Esr),e(Mn,Csr),e(Mn,V_e),e(V_e,wsr),e(Mn,Asr),e(Mn,X_e),e(X_e,ysr),e(Mn,Lsr),e(_o,xsr),e(_o,ce),e(ce,V6),e(V6,z_e),e(z_e,ksr),e(V6,Ssr),e(V6,NV),e(NV,Rsr),e(V6,Bsr),e(ce,Psr),e(ce,X6),e(X6,Q_e),e(Q_e,$sr),e(X6,qsr),e(X6,DV),e(DV,Isr),e(X6,jsr),e(ce,Nsr),e(ce,z6),e(z6,W_e),e(W_e,Dsr),e(z6,Gsr),e(z6,GV),e(GV,Osr),e(z6,Vsr),e(ce,Xsr),e(ce,Q6),e(Q6,H_e),e(H_e,zsr),e(Q6,Qsr),e(Q6,OV),e(OV,Wsr),e(Q6,Hsr),e(ce,Usr),e(ce,W6),e(W6,U_e),e(U_e,Jsr),e(W6,Ysr),e(W6,VV),e(VV,Ksr),e(W6,Zsr),e(ce,elr),e(ce,H6),e(H6,J_e),e(J_e,olr),e(H6,rlr),e(H6,XV),e(XV,tlr),e(H6,alr),e(ce,nlr),e(ce,U6),e(U6,Y_e),e(Y_e,slr),e(U6,llr),e(U6,zV),e(zV,ilr),e(U6,dlr),e(ce,clr),e(ce,J6),e(J6,K_e),e(K_e,flr),e(J6,mlr),e(J6,QV),e(QV,glr),e(J6,hlr),e(ce,plr),e(ce,Y6),e(Y6,Z_e),e(Z_e,_lr),e(Y6,ulr),e(Y6,WV),e(WV,blr),e(Y6,Flr),e(ce,vlr),e(ce,K6),e(K6,eue),e(eue,Tlr),e(K6,Mlr),e(K6,HV),e(HV,Elr),e(K6,Clr),e(ce,wlr),e(ce,Z6),e(Z6,oue),e(oue,Alr),e(Z6,ylr),e(Z6,UV),e(UV,Llr),e(Z6,xlr),e(ce,klr),e(ce,e0),e(e0,rue),e(rue,Slr),e(e0,Rlr),e(e0,JV),e(JV,Blr),e(e0,Plr),e(_o,$lr),e(_o,tue),e(tue,qlr),e(_o,Ilr),g(LA,_o,null),b(c,PBe,u),b(c,xc,u),e(xc,o0),e(o0,aue),g(xA,aue,null),e(xc,jlr),e(xc,nue),e(nue,Nlr),b(c,$Be,u),b(c,Er,u),g(kA,Er,null),e(Er,Dlr),e(Er,kc),e(kc,Glr),e(kc,YV),e(YV,Olr),e(kc,Vlr),e(kc,KV),e(KV,Xlr),e(kc,zlr),e(Er,Qlr),e(Er,SA),e(SA,Wlr),e(SA,sue),e(sue,Hlr),e(SA,Ulr),e(Er,Jlr),e(Er,bt),g(RA,bt,null),e(bt,Ylr),e(bt,lue),e(lue,Klr),e(bt,Zlr),e(bt,Sc),e(Sc,eir),e(Sc,iue),e(iue,oir),e(Sc,rir),e(Sc,ZV),e(ZV,tir),e(Sc,air),e(bt,nir),e(bt,due),e(due,sir),e(bt,lir),g(BA,bt,null),e(Er,iir),e(Er,uo),g(PA,uo,null),e(uo,dir),e(uo,cue),e(cue,cir),e(uo,fir),e(uo,En),e(En,mir),e(En,fue),e(fue,gir),e(En,hir),e(En,mue),e(mue,pir),e(En,_ir),e(En,gue),e(gue,uir),e(En,bir),e(uo,Fir),e(uo,$A),e($A,r0),e(r0,hue),e(hue,vir),e(r0,Tir),e(r0,eX),e(eX,Mir),e(r0,Eir),e($A,Cir),e($A,t0),e(t0,pue),e(pue,wir),e(t0,Air),e(t0,oX),e(oX,yir),e(t0,Lir),e(uo,xir),e(uo,_ue),e(_ue,kir),e(uo,Sir),g(qA,uo,null),b(c,qBe,u),b(c,Rc,u),e(Rc,a0),e(a0,uue),g(IA,uue,null),e(Rc,Rir),e(Rc,bue),e(bue,Bir),b(c,IBe,u),b(c,Cr,u),g(jA,Cr,null),e(Cr,Pir),e(Cr,Bc),e(Bc,$ir),e(Bc,rX),e(rX,qir),e(Bc,Iir),e(Bc,tX),e(tX,jir),e(Bc,Nir),e(Cr,Dir),e(Cr,NA),e(NA,Gir),e(NA,Fue),e(Fue,Oir),e(NA,Vir),e(Cr,Xir),e(Cr,Ft),g(DA,Ft,null),e(Ft,zir),e(Ft,vue),e(vue,Qir),e(Ft,Wir),e(Ft,Pc),e(Pc,Hir),e(Pc,Tue),e(Tue,Uir),e(Pc,Jir),e(Pc,aX),e(aX,Yir),e(Pc,Kir),e(Ft,Zir),e(Ft,Mue),e(Mue,edr),e(Ft,odr),g(GA,Ft,null),e(Cr,rdr),e(Cr,bo),g(OA,bo,null),e(bo,tdr),e(bo,Eue),e(Eue,adr),e(bo,ndr),e(bo,Cn),e(Cn,sdr),e(Cn,Cue),e(Cue,ldr),e(Cn,idr),e(Cn,wue),e(wue,ddr),e(Cn,cdr),e(Cn,Aue),e(Aue,fdr),e(Cn,mdr),e(bo,gdr),e(bo,J),e(J,n0),e(n0,yue),e(yue,hdr),e(n0,pdr),e(n0,nX),e(nX,_dr),e(n0,udr),e(J,bdr),e(J,s0),e(s0,Lue),e(Lue,Fdr),e(s0,vdr),e(s0,sX),e(sX,Tdr),e(s0,Mdr),e(J,Edr),e(J,l0),e(l0,xue),e(xue,Cdr),e(l0,wdr),e(l0,lX),e(lX,Adr),e(l0,ydr),e(J,Ldr),e(J,i0),e(i0,kue),e(kue,xdr),e(i0,kdr),e(i0,iX),e(iX,Sdr),e(i0,Rdr),e(J,Bdr),e(J,d0),e(d0,Sue),e(Sue,Pdr),e(d0,$dr),e(d0,dX),e(dX,qdr),e(d0,Idr),e(J,jdr),e(J,c0),e(c0,Rue),e(Rue,Ndr),e(c0,Ddr),e(c0,cX),e(cX,Gdr),e(c0,Odr),e(J,Vdr),e(J,f0),e(f0,Bue),e(Bue,Xdr),e(f0,zdr),e(f0,fX),e(fX,Qdr),e(f0,Wdr),e(J,Hdr),e(J,m0),e(m0,Pue),e(Pue,Udr),e(m0,Jdr),e(m0,mX),e(mX,Ydr),e(m0,Kdr),e(J,Zdr),e(J,g0),e(g0,$ue),e($ue,ecr),e(g0,ocr),e(g0,gX),e(gX,rcr),e(g0,tcr),e(J,acr),e(J,h0),e(h0,que),e(que,ncr),e(h0,scr),e(h0,hX),e(hX,lcr),e(h0,icr),e(J,dcr),e(J,p0),e(p0,Iue),e(Iue,ccr),e(p0,fcr),e(p0,pX),e(pX,mcr),e(p0,gcr),e(J,hcr),e(J,_0),e(_0,jue),e(jue,pcr),e(_0,_cr),e(_0,_X),e(_X,ucr),e(_0,bcr),e(J,Fcr),e(J,u0),e(u0,Nue),e(Nue,vcr),e(u0,Tcr),e(u0,uX),e(uX,Mcr),e(u0,Ecr),e(J,Ccr),e(J,b0),e(b0,Due),e(Due,wcr),e(b0,Acr),e(b0,bX),e(bX,ycr),e(b0,Lcr),e(J,xcr),e(J,F0),e(F0,Gue),e(Gue,kcr),e(F0,Scr),e(F0,FX),e(FX,Rcr),e(F0,Bcr),e(J,Pcr),e(J,v0),e(v0,Oue),e(Oue,$cr),e(v0,qcr),e(v0,vX),e(vX,Icr),e(v0,jcr),e(J,Ncr),e(J,T0),e(T0,Vue),e(Vue,Dcr),e(T0,Gcr),e(T0,TX),e(TX,Ocr),e(T0,Vcr),e(J,Xcr),e(J,M0),e(M0,Xue),e(Xue,zcr),e(M0,Qcr),e(M0,MX),e(MX,Wcr),e(M0,Hcr),e(J,Ucr),e(J,E0),e(E0,zue),e(zue,Jcr),e(E0,Ycr),e(E0,EX),e(EX,Kcr),e(E0,Zcr),e(J,efr),e(J,C0),e(C0,Que),e(Que,ofr),e(C0,rfr),e(C0,CX),e(CX,tfr),e(C0,afr),e(bo,nfr),e(bo,Wue),e(Wue,sfr),e(bo,lfr),g(VA,bo,null),b(c,jBe,u),b(c,$c,u),e($c,w0),e(w0,Hue),g(XA,Hue,null),e($c,ifr),e($c,Uue),e(Uue,dfr),b(c,NBe,u),b(c,wr,u),g(zA,wr,null),e(wr,cfr),e(wr,qc),e(qc,ffr),e(qc,wX),e(wX,mfr),e(qc,gfr),e(qc,AX),e(AX,hfr),e(qc,pfr),e(wr,_fr),e(wr,QA),e(QA,ufr),e(QA,Jue),e(Jue,bfr),e(QA,Ffr),e(wr,vfr),e(wr,vt),g(WA,vt,null),e(vt,Tfr),e(vt,Yue),e(Yue,Mfr),e(vt,Efr),e(vt,Ic),e(Ic,Cfr),e(Ic,Kue),e(Kue,wfr),e(Ic,Afr),e(Ic,yX),e(yX,yfr),e(Ic,Lfr),e(vt,xfr),e(vt,Zue),e(Zue,kfr),e(vt,Sfr),g(HA,vt,null),e(wr,Rfr),e(wr,Fo),g(UA,Fo,null),e(Fo,Bfr),e(Fo,e1e),e(e1e,Pfr),e(Fo,$fr),e(Fo,wn),e(wn,qfr),e(wn,o1e),e(o1e,Ifr),e(wn,jfr),e(wn,r1e),e(r1e,Nfr),e(wn,Dfr),e(wn,t1e),e(t1e,Gfr),e(wn,Ofr),e(Fo,Vfr),e(Fo,ue),e(ue,A0),e(A0,a1e),e(a1e,Xfr),e(A0,zfr),e(A0,LX),e(LX,Qfr),e(A0,Wfr),e(ue,Hfr),e(ue,y0),e(y0,n1e),e(n1e,Ufr),e(y0,Jfr),e(y0,xX),e(xX,Yfr),e(y0,Kfr),e(ue,Zfr),e(ue,L0),e(L0,s1e),e(s1e,emr),e(L0,omr),e(L0,kX),e(kX,rmr),e(L0,tmr),e(ue,amr),e(ue,x0),e(x0,l1e),e(l1e,nmr),e(x0,smr),e(x0,SX),e(SX,lmr),e(x0,imr),e(ue,dmr),e(ue,k0),e(k0,i1e),e(i1e,cmr),e(k0,fmr),e(k0,RX),e(RX,mmr),e(k0,gmr),e(ue,hmr),e(ue,S0),e(S0,d1e),e(d1e,pmr),e(S0,_mr),e(S0,BX),e(BX,umr),e(S0,bmr),e(ue,Fmr),e(ue,R0),e(R0,c1e),e(c1e,vmr),e(R0,Tmr),e(R0,PX),e(PX,Mmr),e(R0,Emr),e(ue,Cmr),e(ue,B0),e(B0,f1e),e(f1e,wmr),e(B0,Amr),e(B0,$X),e($X,ymr),e(B0,Lmr),e(ue,xmr),e(ue,P0),e(P0,m1e),e(m1e,kmr),e(P0,Smr),e(P0,qX),e(qX,Rmr),e(P0,Bmr),e(ue,Pmr),e(ue,$0),e($0,g1e),e(g1e,$mr),e($0,qmr),e($0,IX),e(IX,Imr),e($0,jmr),e(Fo,Nmr),e(Fo,h1e),e(h1e,Dmr),e(Fo,Gmr),g(JA,Fo,null),b(c,DBe,u),b(c,jc,u),e(jc,q0),e(q0,p1e),g(YA,p1e,null),e(jc,Omr),e(jc,_1e),e(_1e,Vmr),b(c,GBe,u),b(c,Ar,u),g(KA,Ar,null),e(Ar,Xmr),e(Ar,Nc),e(Nc,zmr),e(Nc,jX),e(jX,Qmr),e(Nc,Wmr),e(Nc,NX),e(NX,Hmr),e(Nc,Umr),e(Ar,Jmr),e(Ar,ZA),e(ZA,Ymr),e(ZA,u1e),e(u1e,Kmr),e(ZA,Zmr),e(Ar,egr),e(Ar,Tt),g(ey,Tt,null),e(Tt,ogr),e(Tt,b1e),e(b1e,rgr),e(Tt,tgr),e(Tt,Dc),e(Dc,agr),e(Dc,F1e),e(F1e,ngr),e(Dc,sgr),e(Dc,DX),e(DX,lgr),e(Dc,igr),e(Tt,dgr),e(Tt,v1e),e(v1e,cgr),e(Tt,fgr),g(oy,Tt,null),e(Ar,mgr),e(Ar,vo),g(ry,vo,null),e(vo,ggr),e(vo,T1e),e(T1e,hgr),e(vo,pgr),e(vo,An),e(An,_gr),e(An,M1e),e(M1e,ugr),e(An,bgr),e(An,E1e),e(E1e,Fgr),e(An,vgr),e(An,C1e),e(C1e,Tgr),e(An,Mgr),e(vo,Egr),e(vo,V),e(V,I0),e(I0,w1e),e(w1e,Cgr),e(I0,wgr),e(I0,GX),e(GX,Agr),e(I0,ygr),e(V,Lgr),e(V,j0),e(j0,A1e),e(A1e,xgr),e(j0,kgr),e(j0,OX),e(OX,Sgr),e(j0,Rgr),e(V,Bgr),e(V,N0),e(N0,y1e),e(y1e,Pgr),e(N0,$gr),e(N0,VX),e(VX,qgr),e(N0,Igr),e(V,jgr),e(V,D0),e(D0,L1e),e(L1e,Ngr),e(D0,Dgr),e(D0,XX),e(XX,Ggr),e(D0,Ogr),e(V,Vgr),e(V,G0),e(G0,x1e),e(x1e,Xgr),e(G0,zgr),e(G0,zX),e(zX,Qgr),e(G0,Wgr),e(V,Hgr),e(V,O0),e(O0,k1e),e(k1e,Ugr),e(O0,Jgr),e(O0,QX),e(QX,Ygr),e(O0,Kgr),e(V,Zgr),e(V,V0),e(V0,S1e),e(S1e,ehr),e(V0,ohr),e(V0,WX),e(WX,rhr),e(V0,thr),e(V,ahr),e(V,X0),e(X0,R1e),e(R1e,nhr),e(X0,shr),e(X0,HX),e(HX,lhr),e(X0,ihr),e(V,dhr),e(V,z0),e(z0,B1e),e(B1e,chr),e(z0,fhr),e(z0,UX),e(UX,mhr),e(z0,ghr),e(V,hhr),e(V,Q0),e(Q0,P1e),e(P1e,phr),e(Q0,_hr),e(Q0,JX),e(JX,uhr),e(Q0,bhr),e(V,Fhr),e(V,W0),e(W0,$1e),e($1e,vhr),e(W0,Thr),e(W0,YX),e(YX,Mhr),e(W0,Ehr),e(V,Chr),e(V,H0),e(H0,q1e),e(q1e,whr),e(H0,Ahr),e(H0,KX),e(KX,yhr),e(H0,Lhr),e(V,xhr),e(V,U0),e(U0,I1e),e(I1e,khr),e(U0,Shr),e(U0,ZX),e(ZX,Rhr),e(U0,Bhr),e(V,Phr),e(V,J0),e(J0,j1e),e(j1e,$hr),e(J0,qhr),e(J0,ez),e(ez,Ihr),e(J0,jhr),e(V,Nhr),e(V,Y0),e(Y0,N1e),e(N1e,Dhr),e(Y0,Ghr),e(Y0,oz),e(oz,Ohr),e(Y0,Vhr),e(V,Xhr),e(V,K0),e(K0,D1e),e(D1e,zhr),e(K0,Qhr),e(K0,rz),e(rz,Whr),e(K0,Hhr),e(V,Uhr),e(V,Z0),e(Z0,G1e),e(G1e,Jhr),e(Z0,Yhr),e(Z0,tz),e(tz,Khr),e(Z0,Zhr),e(V,epr),e(V,eT),e(eT,O1e),e(O1e,opr),e(eT,rpr),e(eT,az),e(az,tpr),e(eT,apr),e(V,npr),e(V,oT),e(oT,V1e),e(V1e,spr),e(oT,lpr),e(oT,nz),e(nz,ipr),e(oT,dpr),e(V,cpr),e(V,rT),e(rT,X1e),e(X1e,fpr),e(rT,mpr),e(rT,sz),e(sz,gpr),e(rT,hpr),e(V,ppr),e(V,tT),e(tT,z1e),e(z1e,_pr),e(tT,upr),e(tT,lz),e(lz,bpr),e(tT,Fpr),e(V,vpr),e(V,aT),e(aT,Q1e),e(Q1e,Tpr),e(aT,Mpr),e(aT,iz),e(iz,Epr),e(aT,Cpr),e(V,wpr),e(V,nT),e(nT,W1e),e(W1e,Apr),e(nT,ypr),e(nT,dz),e(dz,Lpr),e(nT,xpr),e(V,kpr),e(V,sT),e(sT,H1e),e(H1e,Spr),e(sT,Rpr),e(sT,cz),e(cz,Bpr),e(sT,Ppr),e(V,$pr),e(V,lT),e(lT,U1e),e(U1e,qpr),e(lT,Ipr),e(lT,fz),e(fz,jpr),e(lT,Npr),e(V,Dpr),e(V,iT),e(iT,J1e),e(J1e,Gpr),e(iT,Opr),e(iT,mz),e(mz,Vpr),e(iT,Xpr),e(vo,zpr),e(vo,Y1e),e(Y1e,Qpr),e(vo,Wpr),g(ty,vo,null),b(c,OBe,u),b(c,Gc,u),e(Gc,dT),e(dT,K1e),g(ay,K1e,null),e(Gc,Hpr),e(Gc,Z1e),e(Z1e,Upr),b(c,VBe,u),b(c,yr,u),g(ny,yr,null),e(yr,Jpr),e(yr,Oc),e(Oc,Ypr),e(Oc,gz),e(gz,Kpr),e(Oc,Zpr),e(Oc,hz),e(hz,e_r),e(Oc,o_r),e(yr,r_r),e(yr,sy),e(sy,t_r),e(sy,ebe),e(ebe,a_r),e(sy,n_r),e(yr,s_r),e(yr,Mt),g(ly,Mt,null),e(Mt,l_r),e(Mt,obe),e(obe,i_r),e(Mt,d_r),e(Mt,Vc),e(Vc,c_r),e(Vc,rbe),e(rbe,f_r),e(Vc,m_r),e(Vc,pz),e(pz,g_r),e(Vc,h_r),e(Mt,p_r),e(Mt,tbe),e(tbe,__r),e(Mt,u_r),g(iy,Mt,null),e(yr,b_r),e(yr,To),g(dy,To,null),e(To,F_r),e(To,abe),e(abe,v_r),e(To,T_r),e(To,yn),e(yn,M_r),e(yn,nbe),e(nbe,E_r),e(yn,C_r),e(yn,sbe),e(sbe,w_r),e(yn,A_r),e(yn,lbe),e(lbe,y_r),e(yn,L_r),e(To,x_r),e(To,ae),e(ae,cT),e(cT,ibe),e(ibe,k_r),e(cT,S_r),e(cT,_z),e(_z,R_r),e(cT,B_r),e(ae,P_r),e(ae,fT),e(fT,dbe),e(dbe,$_r),e(fT,q_r),e(fT,uz),e(uz,I_r),e(fT,j_r),e(ae,N_r),e(ae,mT),e(mT,cbe),e(cbe,D_r),e(mT,G_r),e(mT,bz),e(bz,O_r),e(mT,V_r),e(ae,X_r),e(ae,gT),e(gT,fbe),e(fbe,z_r),e(gT,Q_r),e(gT,Fz),e(Fz,W_r),e(gT,H_r),e(ae,U_r),e(ae,hT),e(hT,mbe),e(mbe,J_r),e(hT,Y_r),e(hT,vz),e(vz,K_r),e(hT,Z_r),e(ae,eur),e(ae,pT),e(pT,gbe),e(gbe,our),e(pT,rur),e(pT,Tz),e(Tz,tur),e(pT,aur),e(ae,nur),e(ae,_T),e(_T,hbe),e(hbe,sur),e(_T,lur),e(_T,Mz),e(Mz,iur),e(_T,dur),e(ae,cur),e(ae,uT),e(uT,pbe),e(pbe,fur),e(uT,mur),e(uT,Ez),e(Ez,gur),e(uT,hur),e(ae,pur),e(ae,bT),e(bT,_be),e(_be,_ur),e(bT,uur),e(bT,Cz),e(Cz,bur),e(bT,Fur),e(ae,vur),e(ae,FT),e(FT,ube),e(ube,Tur),e(FT,Mur),e(FT,wz),e(wz,Eur),e(FT,Cur),e(ae,wur),e(ae,vT),e(vT,bbe),e(bbe,Aur),e(vT,yur),e(vT,Az),e(Az,Lur),e(vT,xur),e(ae,kur),e(ae,TT),e(TT,Fbe),e(Fbe,Sur),e(TT,Rur),e(TT,yz),e(yz,Bur),e(TT,Pur),e(ae,$ur),e(ae,MT),e(MT,vbe),e(vbe,qur),e(MT,Iur),e(MT,Lz),e(Lz,jur),e(MT,Nur),e(ae,Dur),e(ae,ET),e(ET,Tbe),e(Tbe,Gur),e(ET,Our),e(ET,xz),e(xz,Vur),e(ET,Xur),e(ae,zur),e(ae,CT),e(CT,Mbe),e(Mbe,Qur),e(CT,Wur),e(CT,kz),e(kz,Hur),e(CT,Uur),e(ae,Jur),e(ae,wT),e(wT,Ebe),e(Ebe,Yur),e(wT,Kur),e(wT,Sz),e(Sz,Zur),e(wT,e1r),e(ae,o1r),e(ae,AT),e(AT,Cbe),e(Cbe,r1r),e(AT,t1r),e(AT,Rz),e(Rz,a1r),e(AT,n1r),e(To,s1r),e(To,wbe),e(wbe,l1r),e(To,i1r),g(cy,To,null),b(c,XBe,u),b(c,Xc,u),e(Xc,yT),e(yT,Abe),g(fy,Abe,null),e(Xc,d1r),e(Xc,ybe),e(ybe,c1r),b(c,zBe,u),b(c,Lr,u),g(my,Lr,null),e(Lr,f1r),e(Lr,zc),e(zc,m1r),e(zc,Bz),e(Bz,g1r),e(zc,h1r),e(zc,Pz),e(Pz,p1r),e(zc,_1r),e(Lr,u1r),e(Lr,gy),e(gy,b1r),e(gy,Lbe),e(Lbe,F1r),e(gy,v1r),e(Lr,T1r),e(Lr,Et),g(hy,Et,null),e(Et,M1r),e(Et,xbe),e(xbe,E1r),e(Et,C1r),e(Et,Qc),e(Qc,w1r),e(Qc,kbe),e(kbe,A1r),e(Qc,y1r),e(Qc,$z),e($z,L1r),e(Qc,x1r),e(Et,k1r),e(Et,Sbe),e(Sbe,S1r),e(Et,R1r),g(py,Et,null),e(Lr,B1r),e(Lr,Mo),g(_y,Mo,null),e(Mo,P1r),e(Mo,Rbe),e(Rbe,$1r),e(Mo,q1r),e(Mo,Ln),e(Ln,I1r),e(Ln,Bbe),e(Bbe,j1r),e(Ln,N1r),e(Ln,Pbe),e(Pbe,D1r),e(Ln,G1r),e(Ln,$be),e($be,O1r),e(Ln,V1r),e(Mo,X1r),e(Mo,qbe),e(qbe,LT),e(LT,Ibe),e(Ibe,z1r),e(LT,Q1r),e(LT,qz),e(qz,W1r),e(LT,H1r),e(Mo,U1r),e(Mo,jbe),e(jbe,J1r),e(Mo,Y1r),g(uy,Mo,null),b(c,QBe,u),b(c,Wc,u),e(Wc,xT),e(xT,Nbe),g(by,Nbe,null),e(Wc,K1r),e(Wc,Dbe),e(Dbe,Z1r),b(c,WBe,u),b(c,xr,u),g(Fy,xr,null),e(xr,ebr),e(xr,Hc),e(Hc,obr),e(Hc,Iz),e(Iz,rbr),e(Hc,tbr),e(Hc,jz),e(jz,abr),e(Hc,nbr),e(xr,sbr),e(xr,vy),e(vy,lbr),e(vy,Gbe),e(Gbe,ibr),e(vy,dbr),e(xr,cbr),e(xr,Ct),g(Ty,Ct,null),e(Ct,fbr),e(Ct,Obe),e(Obe,mbr),e(Ct,gbr),e(Ct,Uc),e(Uc,hbr),e(Uc,Vbe),e(Vbe,pbr),e(Uc,_br),e(Uc,Nz),e(Nz,ubr),e(Uc,bbr),e(Ct,Fbr),e(Ct,Xbe),e(Xbe,vbr),e(Ct,Tbr),g(My,Ct,null),e(xr,Mbr),e(xr,Eo),g(Ey,Eo,null),e(Eo,Ebr),e(Eo,zbe),e(zbe,Cbr),e(Eo,wbr),e(Eo,xn),e(xn,Abr),e(xn,Qbe),e(Qbe,ybr),e(xn,Lbr),e(xn,Wbe),e(Wbe,xbr),e(xn,kbr),e(xn,Hbe),e(Hbe,Sbr),e(xn,Rbr),e(Eo,Bbr),e(Eo,Y),e(Y,kT),e(kT,Ube),e(Ube,Pbr),e(kT,$br),e(kT,Dz),e(Dz,qbr),e(kT,Ibr),e(Y,jbr),e(Y,ST),e(ST,Jbe),e(Jbe,Nbr),e(ST,Dbr),e(ST,Gz),e(Gz,Gbr),e(ST,Obr),e(Y,Vbr),e(Y,RT),e(RT,Ybe),e(Ybe,Xbr),e(RT,zbr),e(RT,Oz),e(Oz,Qbr),e(RT,Wbr),e(Y,Hbr),e(Y,BT),e(BT,Kbe),e(Kbe,Ubr),e(BT,Jbr),e(BT,Vz),e(Vz,Ybr),e(BT,Kbr),e(Y,Zbr),e(Y,PT),e(PT,Zbe),e(Zbe,e5r),e(PT,o5r),e(PT,Xz),e(Xz,r5r),e(PT,t5r),e(Y,a5r),e(Y,$T),e($T,e5e),e(e5e,n5r),e($T,s5r),e($T,zz),e(zz,l5r),e($T,i5r),e(Y,d5r),e(Y,qT),e(qT,o5e),e(o5e,c5r),e(qT,f5r),e(qT,Qz),e(Qz,m5r),e(qT,g5r),e(Y,h5r),e(Y,IT),e(IT,r5e),e(r5e,p5r),e(IT,_5r),e(IT,Wz),e(Wz,u5r),e(IT,b5r),e(Y,F5r),e(Y,jT),e(jT,t5e),e(t5e,v5r),e(jT,T5r),e(jT,Hz),e(Hz,M5r),e(jT,E5r),e(Y,C5r),e(Y,NT),e(NT,a5e),e(a5e,w5r),e(NT,A5r),e(NT,Uz),e(Uz,y5r),e(NT,L5r),e(Y,x5r),e(Y,DT),e(DT,n5e),e(n5e,k5r),e(DT,S5r),e(DT,Jz),e(Jz,R5r),e(DT,B5r),e(Y,P5r),e(Y,GT),e(GT,s5e),e(s5e,$5r),e(GT,q5r),e(GT,Yz),e(Yz,I5r),e(GT,j5r),e(Y,N5r),e(Y,OT),e(OT,l5e),e(l5e,D5r),e(OT,G5r),e(OT,Kz),e(Kz,O5r),e(OT,V5r),e(Y,X5r),e(Y,VT),e(VT,i5e),e(i5e,z5r),e(VT,Q5r),e(VT,Zz),e(Zz,W5r),e(VT,H5r),e(Y,U5r),e(Y,XT),e(XT,d5e),e(d5e,J5r),e(XT,Y5r),e(XT,eQ),e(eQ,K5r),e(XT,Z5r),e(Y,e2r),e(Y,zT),e(zT,c5e),e(c5e,o2r),e(zT,r2r),e(zT,oQ),e(oQ,t2r),e(zT,a2r),e(Y,n2r),e(Y,QT),e(QT,f5e),e(f5e,s2r),e(QT,l2r),e(QT,rQ),e(rQ,i2r),e(QT,d2r),e(Y,c2r),e(Y,WT),e(WT,m5e),e(m5e,f2r),e(WT,m2r),e(WT,tQ),e(tQ,g2r),e(WT,h2r),e(Y,p2r),e(Y,HT),e(HT,g5e),e(g5e,_2r),e(HT,u2r),e(HT,aQ),e(aQ,b2r),e(HT,F2r),e(Y,v2r),e(Y,UT),e(UT,h5e),e(h5e,T2r),e(UT,M2r),e(UT,nQ),e(nQ,E2r),e(UT,C2r),e(Eo,w2r),e(Eo,p5e),e(p5e,A2r),e(Eo,y2r),g(Cy,Eo,null),b(c,HBe,u),b(c,Jc,u),e(Jc,JT),e(JT,_5e),g(wy,_5e,null),e(Jc,L2r),e(Jc,u5e),e(u5e,x2r),b(c,UBe,u),b(c,kr,u),g(Ay,kr,null),e(kr,k2r),e(kr,Yc),e(Yc,S2r),e(Yc,sQ),e(sQ,R2r),e(Yc,B2r),e(Yc,lQ),e(lQ,P2r),e(Yc,$2r),e(kr,q2r),e(kr,yy),e(yy,I2r),e(yy,b5e),e(b5e,j2r),e(yy,N2r),e(kr,D2r),e(kr,wt),g(Ly,wt,null),e(wt,G2r),e(wt,F5e),e(F5e,O2r),e(wt,V2r),e(wt,Kc),e(Kc,X2r),e(Kc,v5e),e(v5e,z2r),e(Kc,Q2r),e(Kc,iQ),e(iQ,W2r),e(Kc,H2r),e(wt,U2r),e(wt,T5e),e(T5e,J2r),e(wt,Y2r),g(xy,wt,null),e(kr,K2r),e(kr,Co),g(ky,Co,null),e(Co,Z2r),e(Co,M5e),e(M5e,eFr),e(Co,oFr),e(Co,kn),e(kn,rFr),e(kn,E5e),e(E5e,tFr),e(kn,aFr),e(kn,C5e),e(C5e,nFr),e(kn,sFr),e(kn,w5e),e(w5e,lFr),e(kn,iFr),e(Co,dFr),e(Co,K),e(K,YT),e(YT,A5e),e(A5e,cFr),e(YT,fFr),e(YT,dQ),e(dQ,mFr),e(YT,gFr),e(K,hFr),e(K,KT),e(KT,y5e),e(y5e,pFr),e(KT,_Fr),e(KT,cQ),e(cQ,uFr),e(KT,bFr),e(K,FFr),e(K,ZT),e(ZT,L5e),e(L5e,vFr),e(ZT,TFr),e(ZT,fQ),e(fQ,MFr),e(ZT,EFr),e(K,CFr),e(K,e8),e(e8,x5e),e(x5e,wFr),e(e8,AFr),e(e8,mQ),e(mQ,yFr),e(e8,LFr),e(K,xFr),e(K,o8),e(o8,k5e),e(k5e,kFr),e(o8,SFr),e(o8,gQ),e(gQ,RFr),e(o8,BFr),e(K,PFr),e(K,r8),e(r8,S5e),e(S5e,$Fr),e(r8,qFr),e(r8,hQ),e(hQ,IFr),e(r8,jFr),e(K,NFr),e(K,t8),e(t8,R5e),e(R5e,DFr),e(t8,GFr),e(t8,pQ),e(pQ,OFr),e(t8,VFr),e(K,XFr),e(K,a8),e(a8,B5e),e(B5e,zFr),e(a8,QFr),e(a8,_Q),e(_Q,WFr),e(a8,HFr),e(K,UFr),e(K,n8),e(n8,P5e),e(P5e,JFr),e(n8,YFr),e(n8,uQ),e(uQ,KFr),e(n8,ZFr),e(K,evr),e(K,s8),e(s8,$5e),e($5e,ovr),e(s8,rvr),e(s8,bQ),e(bQ,tvr),e(s8,avr),e(K,nvr),e(K,l8),e(l8,q5e),e(q5e,svr),e(l8,lvr),e(l8,FQ),e(FQ,ivr),e(l8,dvr),e(K,cvr),e(K,i8),e(i8,I5e),e(I5e,fvr),e(i8,mvr),e(i8,vQ),e(vQ,gvr),e(i8,hvr),e(K,pvr),e(K,d8),e(d8,j5e),e(j5e,_vr),e(d8,uvr),e(d8,TQ),e(TQ,bvr),e(d8,Fvr),e(K,vvr),e(K,c8),e(c8,N5e),e(N5e,Tvr),e(c8,Mvr),e(c8,MQ),e(MQ,Evr),e(c8,Cvr),e(K,wvr),e(K,f8),e(f8,D5e),e(D5e,Avr),e(f8,yvr),e(f8,EQ),e(EQ,Lvr),e(f8,xvr),e(K,kvr),e(K,m8),e(m8,G5e),e(G5e,Svr),e(m8,Rvr),e(m8,CQ),e(CQ,Bvr),e(m8,Pvr),e(K,$vr),e(K,g8),e(g8,O5e),e(O5e,qvr),e(g8,Ivr),e(g8,wQ),e(wQ,jvr),e(g8,Nvr),e(K,Dvr),e(K,h8),e(h8,V5e),e(V5e,Gvr),e(h8,Ovr),e(h8,AQ),e(AQ,Vvr),e(h8,Xvr),e(K,zvr),e(K,p8),e(p8,X5e),e(X5e,Qvr),e(p8,Wvr),e(p8,yQ),e(yQ,Hvr),e(p8,Uvr),e(K,Jvr),e(K,_8),e(_8,z5e),e(z5e,Yvr),e(_8,Kvr),e(_8,LQ),e(LQ,Zvr),e(_8,e6r),e(Co,o6r),e(Co,Q5e),e(Q5e,r6r),e(Co,t6r),g(Sy,Co,null),b(c,JBe,u),b(c,Zc,u),e(Zc,u8),e(u8,W5e),g(Ry,W5e,null),e(Zc,a6r),e(Zc,H5e),e(H5e,n6r),b(c,YBe,u),b(c,Sr,u),g(By,Sr,null),e(Sr,s6r),e(Sr,ef),e(ef,l6r),e(ef,xQ),e(xQ,i6r),e(ef,d6r),e(ef,kQ),e(kQ,c6r),e(ef,f6r),e(Sr,m6r),e(Sr,Py),e(Py,g6r),e(Py,U5e),e(U5e,h6r),e(Py,p6r),e(Sr,_6r),e(Sr,At),g($y,At,null),e(At,u6r),e(At,J5e),e(J5e,b6r),e(At,F6r),e(At,of),e(of,v6r),e(of,Y5e),e(Y5e,T6r),e(of,M6r),e(of,SQ),e(SQ,E6r),e(of,C6r),e(At,w6r),e(At,K5e),e(K5e,A6r),e(At,y6r),g(qy,At,null),e(Sr,L6r),e(Sr,wo),g(Iy,wo,null),e(wo,x6r),e(wo,Z5e),e(Z5e,k6r),e(wo,S6r),e(wo,Sn),e(Sn,R6r),e(Sn,e2e),e(e2e,B6r),e(Sn,P6r),e(Sn,o2e),e(o2e,$6r),e(Sn,q6r),e(Sn,r2e),e(r2e,I6r),e(Sn,j6r),e(wo,N6r),e(wo,t2e),e(t2e,b8),e(b8,a2e),e(a2e,D6r),e(b8,G6r),e(b8,RQ),e(RQ,O6r),e(b8,V6r),e(wo,X6r),e(wo,n2e),e(n2e,z6r),e(wo,Q6r),g(jy,wo,null),b(c,KBe,u),b(c,rf,u),e(rf,F8),e(F8,s2e),g(Ny,s2e,null),e(rf,W6r),e(rf,l2e),e(l2e,H6r),b(c,ZBe,u),b(c,Rr,u),g(Dy,Rr,null),e(Rr,U6r),e(Rr,tf),e(tf,J6r),e(tf,BQ),e(BQ,Y6r),e(tf,K6r),e(tf,PQ),e(PQ,Z6r),e(tf,e0r),e(Rr,o0r),e(Rr,Gy),e(Gy,r0r),e(Gy,i2e),e(i2e,t0r),e(Gy,a0r),e(Rr,n0r),e(Rr,yt),g(Oy,yt,null),e(yt,s0r),e(yt,d2e),e(d2e,l0r),e(yt,i0r),e(yt,af),e(af,d0r),e(af,c2e),e(c2e,c0r),e(af,f0r),e(af,$Q),e($Q,m0r),e(af,g0r),e(yt,h0r),e(yt,f2e),e(f2e,p0r),e(yt,_0r),g(Vy,yt,null),e(Rr,u0r),e(Rr,Ao),g(Xy,Ao,null),e(Ao,b0r),e(Ao,m2e),e(m2e,F0r),e(Ao,v0r),e(Ao,Rn),e(Rn,T0r),e(Rn,g2e),e(g2e,M0r),e(Rn,E0r),e(Rn,h2e),e(h2e,C0r),e(Rn,w0r),e(Rn,p2e),e(p2e,A0r),e(Rn,y0r),e(Ao,L0r),e(Ao,_2e),e(_2e,v8),e(v8,u2e),e(u2e,x0r),e(v8,k0r),e(v8,qQ),e(qQ,S0r),e(v8,R0r),e(Ao,B0r),e(Ao,b2e),e(b2e,P0r),e(Ao,$0r),g(zy,Ao,null),b(c,ePe,u),b(c,nf,u),e(nf,T8),e(T8,F2e),g(Qy,F2e,null),e(nf,q0r),e(nf,v2e),e(v2e,I0r),b(c,oPe,u),b(c,Br,u),g(Wy,Br,null),e(Br,j0r),e(Br,sf),e(sf,N0r),e(sf,IQ),e(IQ,D0r),e(sf,G0r),e(sf,jQ),e(jQ,O0r),e(sf,V0r),e(Br,X0r),e(Br,Hy),e(Hy,z0r),e(Hy,T2e),e(T2e,Q0r),e(Hy,W0r),e(Br,H0r),e(Br,Lt),g(Uy,Lt,null),e(Lt,U0r),e(Lt,M2e),e(M2e,J0r),e(Lt,Y0r),e(Lt,lf),e(lf,K0r),e(lf,E2e),e(E2e,Z0r),e(lf,eTr),e(lf,NQ),e(NQ,oTr),e(lf,rTr),e(Lt,tTr),e(Lt,C2e),e(C2e,aTr),e(Lt,nTr),g(Jy,Lt,null),e(Br,sTr),e(Br,yo),g(Yy,yo,null),e(yo,lTr),e(yo,w2e),e(w2e,iTr),e(yo,dTr),e(yo,Bn),e(Bn,cTr),e(Bn,A2e),e(A2e,fTr),e(Bn,mTr),e(Bn,y2e),e(y2e,gTr),e(Bn,hTr),e(Bn,L2e),e(L2e,pTr),e(Bn,_Tr),e(yo,uTr),e(yo,z),e(z,M8),e(M8,x2e),e(x2e,bTr),e(M8,FTr),e(M8,DQ),e(DQ,vTr),e(M8,TTr),e(z,MTr),e(z,E8),e(E8,k2e),e(k2e,ETr),e(E8,CTr),e(E8,GQ),e(GQ,wTr),e(E8,ATr),e(z,yTr),e(z,C8),e(C8,S2e),e(S2e,LTr),e(C8,xTr),e(C8,OQ),e(OQ,kTr),e(C8,STr),e(z,RTr),e(z,w8),e(w8,R2e),e(R2e,BTr),e(w8,PTr),e(w8,VQ),e(VQ,$Tr),e(w8,qTr),e(z,ITr),e(z,A8),e(A8,B2e),e(B2e,jTr),e(A8,NTr),e(A8,XQ),e(XQ,DTr),e(A8,GTr),e(z,OTr),e(z,y8),e(y8,P2e),e(P2e,VTr),e(y8,XTr),e(y8,zQ),e(zQ,zTr),e(y8,QTr),e(z,WTr),e(z,L8),e(L8,$2e),e($2e,HTr),e(L8,UTr),e(L8,QQ),e(QQ,JTr),e(L8,YTr),e(z,KTr),e(z,x8),e(x8,q2e),e(q2e,ZTr),e(x8,e8r),e(x8,WQ),e(WQ,o8r),e(x8,r8r),e(z,t8r),e(z,k8),e(k8,I2e),e(I2e,a8r),e(k8,n8r),e(k8,HQ),e(HQ,s8r),e(k8,l8r),e(z,i8r),e(z,S8),e(S8,j2e),e(j2e,d8r),e(S8,c8r),e(S8,UQ),e(UQ,f8r),e(S8,m8r),e(z,g8r),e(z,R8),e(R8,N2e),e(N2e,h8r),e(R8,p8r),e(R8,JQ),e(JQ,_8r),e(R8,u8r),e(z,b8r),e(z,B8),e(B8,D2e),e(D2e,F8r),e(B8,v8r),e(B8,YQ),e(YQ,T8r),e(B8,M8r),e(z,E8r),e(z,P8),e(P8,G2e),e(G2e,C8r),e(P8,w8r),e(P8,KQ),e(KQ,A8r),e(P8,y8r),e(z,L8r),e(z,$8),e($8,O2e),e(O2e,x8r),e($8,k8r),e($8,ZQ),e(ZQ,S8r),e($8,R8r),e(z,B8r),e(z,q8),e(q8,V2e),e(V2e,P8r),e(q8,$8r),e(q8,eW),e(eW,q8r),e(q8,I8r),e(z,j8r),e(z,I8),e(I8,X2e),e(X2e,N8r),e(I8,D8r),e(I8,oW),e(oW,G8r),e(I8,O8r),e(z,V8r),e(z,j8),e(j8,z2e),e(z2e,X8r),e(j8,z8r),e(j8,rW),e(rW,Q8r),e(j8,W8r),e(z,H8r),e(z,N8),e(N8,Q2e),e(Q2e,U8r),e(N8,J8r),e(N8,tW),e(tW,Y8r),e(N8,K8r),e(z,Z8r),e(z,D8),e(D8,W2e),e(W2e,eMr),e(D8,oMr),e(D8,aW),e(aW,rMr),e(D8,tMr),e(z,aMr),e(z,G8),e(G8,H2e),e(H2e,nMr),e(G8,sMr),e(G8,nW),e(nW,lMr),e(G8,iMr),e(z,dMr),e(z,O8),e(O8,U2e),e(U2e,cMr),e(O8,fMr),e(O8,sW),e(sW,mMr),e(O8,gMr),e(z,hMr),e(z,V8),e(V8,J2e),e(J2e,pMr),e(V8,_Mr),e(V8,lW),e(lW,uMr),e(V8,bMr),e(z,FMr),e(z,X8),e(X8,Y2e),e(Y2e,vMr),e(X8,TMr),e(X8,iW),e(iW,MMr),e(X8,EMr),e(z,CMr),e(z,z8),e(z8,K2e),e(K2e,wMr),e(z8,AMr),e(z8,dW),e(dW,yMr),e(z8,LMr),e(z,xMr),e(z,Q8),e(Q8,Z2e),e(Z2e,kMr),e(Q8,SMr),e(Q8,cW),e(cW,RMr),e(Q8,BMr),e(yo,PMr),e(yo,eFe),e(eFe,$Mr),e(yo,qMr),g(Ky,yo,null),b(c,rPe,u),b(c,df,u),e(df,W8),e(W8,oFe),g(Zy,oFe,null),e(df,IMr),e(df,rFe),e(rFe,jMr),b(c,tPe,u),b(c,Pr,u),g(eL,Pr,null),e(Pr,NMr),e(Pr,cf),e(cf,DMr),e(cf,fW),e(fW,GMr),e(cf,OMr),e(cf,mW),e(mW,VMr),e(cf,XMr),e(Pr,zMr),e(Pr,oL),e(oL,QMr),e(oL,tFe),e(tFe,WMr),e(oL,HMr),e(Pr,UMr),e(Pr,xt),g(rL,xt,null),e(xt,JMr),e(xt,aFe),e(aFe,YMr),e(xt,KMr),e(xt,ff),e(ff,ZMr),e(ff,nFe),e(nFe,e4r),e(ff,o4r),e(ff,gW),e(gW,r4r),e(ff,t4r),e(xt,a4r),e(xt,sFe),e(sFe,n4r),e(xt,s4r),g(tL,xt,null),e(Pr,l4r),e(Pr,Lo),g(aL,Lo,null),e(Lo,i4r),e(Lo,lFe),e(lFe,d4r),e(Lo,c4r),e(Lo,Pn),e(Pn,f4r),e(Pn,iFe),e(iFe,m4r),e(Pn,g4r),e(Pn,dFe),e(dFe,h4r),e(Pn,p4r),e(Pn,cFe),e(cFe,_4r),e(Pn,u4r),e(Lo,b4r),e(Lo,ga),e(ga,H8),e(H8,fFe),e(fFe,F4r),e(H8,v4r),e(H8,hW),e(hW,T4r),e(H8,M4r),e(ga,E4r),e(ga,U8),e(U8,mFe),e(mFe,C4r),e(U8,w4r),e(U8,pW),e(pW,A4r),e(U8,y4r),e(ga,L4r),e(ga,J8),e(J8,gFe),e(gFe,x4r),e(J8,k4r),e(J8,_W),e(_W,S4r),e(J8,R4r),e(ga,B4r),e(ga,Y8),e(Y8,hFe),e(hFe,P4r),e(Y8,$4r),e(Y8,uW),e(uW,q4r),e(Y8,I4r),e(ga,j4r),e(ga,K8),e(K8,pFe),e(pFe,N4r),e(K8,D4r),e(K8,bW),e(bW,G4r),e(K8,O4r),e(Lo,V4r),e(Lo,_Fe),e(_Fe,X4r),e(Lo,z4r),g(nL,Lo,null),b(c,aPe,u),b(c,mf,u),e(mf,Z8),e(Z8,uFe),g(sL,uFe,null),e(mf,Q4r),e(mf,bFe),e(bFe,W4r),b(c,nPe,u),b(c,$r,u),g(lL,$r,null),e($r,H4r),e($r,gf),e(gf,U4r),e(gf,FW),e(FW,J4r),e(gf,Y4r),e(gf,vW),e(vW,K4r),e(gf,Z4r),e($r,eEr),e($r,iL),e(iL,oEr),e(iL,FFe),e(FFe,rEr),e(iL,tEr),e($r,aEr),e($r,kt),g(dL,kt,null),e(kt,nEr),e(kt,vFe),e(vFe,sEr),e(kt,lEr),e(kt,hf),e(hf,iEr),e(hf,TFe),e(TFe,dEr),e(hf,cEr),e(hf,TW),e(TW,fEr),e(hf,mEr),e(kt,gEr),e(kt,MFe),e(MFe,hEr),e(kt,pEr),g(cL,kt,null),e($r,_Er),e($r,xo),g(fL,xo,null),e(xo,uEr),e(xo,EFe),e(EFe,bEr),e(xo,FEr),e(xo,$n),e($n,vEr),e($n,CFe),e(CFe,TEr),e($n,MEr),e($n,wFe),e(wFe,EEr),e($n,CEr),e($n,AFe),e(AFe,wEr),e($n,AEr),e(xo,yEr),e(xo,fe),e(fe,eM),e(eM,yFe),e(yFe,LEr),e(eM,xEr),e(eM,MW),e(MW,kEr),e(eM,SEr),e(fe,REr),e(fe,oM),e(oM,LFe),e(LFe,BEr),e(oM,PEr),e(oM,EW),e(EW,$Er),e(oM,qEr),e(fe,IEr),e(fe,rM),e(rM,xFe),e(xFe,jEr),e(rM,NEr),e(rM,CW),e(CW,DEr),e(rM,GEr),e(fe,OEr),e(fe,tM),e(tM,kFe),e(kFe,VEr),e(tM,XEr),e(tM,wW),e(wW,zEr),e(tM,QEr),e(fe,WEr),e(fe,aM),e(aM,SFe),e(SFe,HEr),e(aM,UEr),e(aM,AW),e(AW,JEr),e(aM,YEr),e(fe,KEr),e(fe,nM),e(nM,RFe),e(RFe,ZEr),e(nM,eCr),e(nM,yW),e(yW,oCr),e(nM,rCr),e(fe,tCr),e(fe,sM),e(sM,BFe),e(BFe,aCr),e(sM,nCr),e(sM,LW),e(LW,sCr),e(sM,lCr),e(fe,iCr),e(fe,lM),e(lM,PFe),e(PFe,dCr),e(lM,cCr),e(lM,xW),e(xW,fCr),e(lM,mCr),e(fe,gCr),e(fe,iM),e(iM,$Fe),e($Fe,hCr),e(iM,pCr),e(iM,kW),e(kW,_Cr),e(iM,uCr),e(fe,bCr),e(fe,dM),e(dM,qFe),e(qFe,FCr),e(dM,vCr),e(dM,SW),e(SW,TCr),e(dM,MCr),e(fe,ECr),e(fe,cM),e(cM,IFe),e(IFe,CCr),e(cM,wCr),e(cM,RW),e(RW,ACr),e(cM,yCr),e(fe,LCr),e(fe,fM),e(fM,jFe),e(jFe,xCr),e(fM,kCr),e(fM,BW),e(BW,SCr),e(fM,RCr),e(xo,BCr),e(xo,NFe),e(NFe,PCr),e(xo,$Cr),g(mL,xo,null),b(c,sPe,u),b(c,pf,u),e(pf,mM),e(mM,DFe),g(gL,DFe,null),e(pf,qCr),e(pf,GFe),e(GFe,ICr),b(c,lPe,u),b(c,qr,u),g(hL,qr,null),e(qr,jCr),e(qr,_f),e(_f,NCr),e(_f,PW),e(PW,DCr),e(_f,GCr),e(_f,$W),e($W,OCr),e(_f,VCr),e(qr,XCr),e(qr,pL),e(pL,zCr),e(pL,OFe),e(OFe,QCr),e(pL,WCr),e(qr,HCr),e(qr,St),g(_L,St,null),e(St,UCr),e(St,VFe),e(VFe,JCr),e(St,YCr),e(St,uf),e(uf,KCr),e(uf,XFe),e(XFe,ZCr),e(uf,e3r),e(uf,qW),e(qW,o3r),e(uf,r3r),e(St,t3r),e(St,zFe),e(zFe,a3r),e(St,n3r),g(uL,St,null),e(qr,s3r),e(qr,ko),g(bL,ko,null),e(ko,l3r),e(ko,QFe),e(QFe,i3r),e(ko,d3r),e(ko,qn),e(qn,c3r),e(qn,WFe),e(WFe,f3r),e(qn,m3r),e(qn,HFe),e(HFe,g3r),e(qn,h3r),e(qn,UFe),e(UFe,p3r),e(qn,_3r),e(ko,u3r),e(ko,be),e(be,gM),e(gM,JFe),e(JFe,b3r),e(gM,F3r),e(gM,IW),e(IW,v3r),e(gM,T3r),e(be,M3r),e(be,hM),e(hM,YFe),e(YFe,E3r),e(hM,C3r),e(hM,jW),e(jW,w3r),e(hM,A3r),e(be,y3r),e(be,pM),e(pM,KFe),e(KFe,L3r),e(pM,x3r),e(pM,NW),e(NW,k3r),e(pM,S3r),e(be,R3r),e(be,_M),e(_M,ZFe),e(ZFe,B3r),e(_M,P3r),e(_M,DW),e(DW,$3r),e(_M,q3r),e(be,I3r),e(be,uM),e(uM,eve),e(eve,j3r),e(uM,N3r),e(uM,GW),e(GW,D3r),e(uM,G3r),e(be,O3r),e(be,bM),e(bM,ove),e(ove,V3r),e(bM,X3r),e(bM,OW),e(OW,z3r),e(bM,Q3r),e(be,W3r),e(be,FM),e(FM,rve),e(rve,H3r),e(FM,U3r),e(FM,VW),e(VW,J3r),e(FM,Y3r),e(be,K3r),e(be,vM),e(vM,tve),e(tve,Z3r),e(vM,ewr),e(vM,XW),e(XW,owr),e(vM,rwr),e(be,twr),e(be,TM),e(TM,ave),e(ave,awr),e(TM,nwr),e(TM,zW),e(zW,swr),e(TM,lwr),e(be,iwr),e(be,MM),e(MM,nve),e(nve,dwr),e(MM,cwr),e(MM,QW),e(QW,fwr),e(MM,mwr),e(ko,gwr),e(ko,sve),e(sve,hwr),e(ko,pwr),g(FL,ko,null),b(c,iPe,u),b(c,bf,u),e(bf,EM),e(EM,lve),g(vL,lve,null),e(bf,_wr),e(bf,ive),e(ive,uwr),b(c,dPe,u),b(c,Ir,u),g(TL,Ir,null),e(Ir,bwr),e(Ir,Ff),e(Ff,Fwr),e(Ff,WW),e(WW,vwr),e(Ff,Twr),e(Ff,HW),e(HW,Mwr),e(Ff,Ewr),e(Ir,Cwr),e(Ir,ML),e(ML,wwr),e(ML,dve),e(dve,Awr),e(ML,ywr),e(Ir,Lwr),e(Ir,Rt),g(EL,Rt,null),e(Rt,xwr),e(Rt,cve),e(cve,kwr),e(Rt,Swr),e(Rt,vf),e(vf,Rwr),e(vf,fve),e(fve,Bwr),e(vf,Pwr),e(vf,UW),e(UW,$wr),e(vf,qwr),e(Rt,Iwr),e(Rt,mve),e(mve,jwr),e(Rt,Nwr),g(CL,Rt,null),e(Ir,Dwr),e(Ir,So),g(wL,So,null),e(So,Gwr),e(So,gve),e(gve,Owr),e(So,Vwr),e(So,In),e(In,Xwr),e(In,hve),e(hve,zwr),e(In,Qwr),e(In,pve),e(pve,Wwr),e(In,Hwr),e(In,_ve),e(_ve,Uwr),e(In,Jwr),e(So,Ywr),e(So,Ee),e(Ee,CM),e(CM,uve),e(uve,Kwr),e(CM,Zwr),e(CM,JW),e(JW,eAr),e(CM,oAr),e(Ee,rAr),e(Ee,wM),e(wM,bve),e(bve,tAr),e(wM,aAr),e(wM,YW),e(YW,nAr),e(wM,sAr),e(Ee,lAr),e(Ee,AM),e(AM,Fve),e(Fve,iAr),e(AM,dAr),e(AM,KW),e(KW,cAr),e(AM,fAr),e(Ee,mAr),e(Ee,yM),e(yM,vve),e(vve,gAr),e(yM,hAr),e(yM,ZW),e(ZW,pAr),e(yM,_Ar),e(Ee,uAr),e(Ee,LM),e(LM,Tve),e(Tve,bAr),e(LM,FAr),e(LM,eH),e(eH,vAr),e(LM,TAr),e(Ee,MAr),e(Ee,xM),e(xM,Mve),e(Mve,EAr),e(xM,CAr),e(xM,oH),e(oH,wAr),e(xM,AAr),e(Ee,yAr),e(Ee,kM),e(kM,Eve),e(Eve,LAr),e(kM,xAr),e(kM,rH),e(rH,kAr),e(kM,SAr),e(Ee,RAr),e(Ee,SM),e(SM,Cve),e(Cve,BAr),e(SM,PAr),e(SM,tH),e(tH,$Ar),e(SM,qAr),e(Ee,IAr),e(Ee,RM),e(RM,wve),e(wve,jAr),e(RM,NAr),e(RM,aH),e(aH,DAr),e(RM,GAr),e(So,OAr),e(So,Ave),e(Ave,VAr),e(So,XAr),g(AL,So,null),b(c,cPe,u),b(c,Tf,u),e(Tf,BM),e(BM,yve),g(yL,yve,null),e(Tf,zAr),e(Tf,Lve),e(Lve,QAr),b(c,fPe,u),b(c,jr,u),g(LL,jr,null),e(jr,WAr),e(jr,Mf),e(Mf,HAr),e(Mf,nH),e(nH,UAr),e(Mf,JAr),e(Mf,sH),e(sH,YAr),e(Mf,KAr),e(jr,ZAr),e(jr,xL),e(xL,eyr),e(xL,xve),e(xve,oyr),e(xL,ryr),e(jr,tyr),e(jr,Bt),g(kL,Bt,null),e(Bt,ayr),e(Bt,kve),e(kve,nyr),e(Bt,syr),e(Bt,Ef),e(Ef,lyr),e(Ef,Sve),e(Sve,iyr),e(Ef,dyr),e(Ef,lH),e(lH,cyr),e(Ef,fyr),e(Bt,myr),e(Bt,Rve),e(Rve,gyr),e(Bt,hyr),g(SL,Bt,null),e(jr,pyr),e(jr,Ro),g(RL,Ro,null),e(Ro,_yr),e(Ro,Bve),e(Bve,uyr),e(Ro,byr),e(Ro,jn),e(jn,Fyr),e(jn,Pve),e(Pve,vyr),e(jn,Tyr),e(jn,$ve),e($ve,Myr),e(jn,Eyr),e(jn,qve),e(qve,Cyr),e(jn,wyr),e(Ro,Ayr),e(Ro,Fe),e(Fe,PM),e(PM,Ive),e(Ive,yyr),e(PM,Lyr),e(PM,iH),e(iH,xyr),e(PM,kyr),e(Fe,Syr),e(Fe,$M),e($M,jve),e(jve,Ryr),e($M,Byr),e($M,dH),e(dH,Pyr),e($M,$yr),e(Fe,qyr),e(Fe,qM),e(qM,Nve),e(Nve,Iyr),e(qM,jyr),e(qM,cH),e(cH,Nyr),e(qM,Dyr),e(Fe,Gyr),e(Fe,IM),e(IM,Dve),e(Dve,Oyr),e(IM,Vyr),e(IM,fH),e(fH,Xyr),e(IM,zyr),e(Fe,Qyr),e(Fe,jM),e(jM,Gve),e(Gve,Wyr),e(jM,Hyr),e(jM,mH),e(mH,Uyr),e(jM,Jyr),e(Fe,Yyr),e(Fe,NM),e(NM,Ove),e(Ove,Kyr),e(NM,Zyr),e(NM,gH),e(gH,eLr),e(NM,oLr),e(Fe,rLr),e(Fe,DM),e(DM,Vve),e(Vve,tLr),e(DM,aLr),e(DM,hH),e(hH,nLr),e(DM,sLr),e(Fe,lLr),e(Fe,GM),e(GM,Xve),e(Xve,iLr),e(GM,dLr),e(GM,pH),e(pH,cLr),e(GM,fLr),e(Fe,mLr),e(Fe,OM),e(OM,zve),e(zve,gLr),e(OM,hLr),e(OM,_H),e(_H,pLr),e(OM,_Lr),e(Fe,uLr),e(Fe,VM),e(VM,Qve),e(Qve,bLr),e(VM,FLr),e(VM,uH),e(uH,vLr),e(VM,TLr),e(Ro,MLr),e(Ro,Wve),e(Wve,ELr),e(Ro,CLr),g(BL,Ro,null),b(c,mPe,u),b(c,Cf,u),e(Cf,XM),e(XM,Hve),g(PL,Hve,null),e(Cf,wLr),e(Cf,Uve),e(Uve,ALr),b(c,gPe,u),b(c,Nr,u),g($L,Nr,null),e(Nr,yLr),e(Nr,wf),e(wf,LLr),e(wf,bH),e(bH,xLr),e(wf,kLr),e(wf,FH),e(FH,SLr),e(wf,RLr),e(Nr,BLr),e(Nr,qL),e(qL,PLr),e(qL,Jve),e(Jve,$Lr),e(qL,qLr),e(Nr,ILr),e(Nr,Pt),g(IL,Pt,null),e(Pt,jLr),e(Pt,Yve),e(Yve,NLr),e(Pt,DLr),e(Pt,Af),e(Af,GLr),e(Af,Kve),e(Kve,OLr),e(Af,VLr),e(Af,vH),e(vH,XLr),e(Af,zLr),e(Pt,QLr),e(Pt,Zve),e(Zve,WLr),e(Pt,HLr),g(jL,Pt,null),e(Nr,ULr),e(Nr,Bo),g(NL,Bo,null),e(Bo,JLr),e(Bo,e6e),e(e6e,YLr),e(Bo,KLr),e(Bo,Nn),e(Nn,ZLr),e(Nn,o6e),e(o6e,e7r),e(Nn,o7r),e(Nn,r6e),e(r6e,r7r),e(Nn,t7r),e(Nn,t6e),e(t6e,a7r),e(Nn,n7r),e(Bo,s7r),e(Bo,a6e),e(a6e,zM),e(zM,n6e),e(n6e,l7r),e(zM,i7r),e(zM,TH),e(TH,d7r),e(zM,c7r),e(Bo,f7r),e(Bo,s6e),e(s6e,m7r),e(Bo,g7r),g(DL,Bo,null),b(c,hPe,u),b(c,yf,u),e(yf,QM),e(QM,l6e),g(GL,l6e,null),e(yf,h7r),e(yf,i6e),e(i6e,p7r),b(c,pPe,u),b(c,Dr,u),g(OL,Dr,null),e(Dr,_7r),e(Dr,Lf),e(Lf,u7r),e(Lf,MH),e(MH,b7r),e(Lf,F7r),e(Lf,EH),e(EH,v7r),e(Lf,T7r),e(Dr,M7r),e(Dr,VL),e(VL,E7r),e(VL,d6e),e(d6e,C7r),e(VL,w7r),e(Dr,A7r),e(Dr,$t),g(XL,$t,null),e($t,y7r),e($t,c6e),e(c6e,L7r),e($t,x7r),e($t,xf),e(xf,k7r),e(xf,f6e),e(f6e,S7r),e(xf,R7r),e(xf,CH),e(CH,B7r),e(xf,P7r),e($t,$7r),e($t,m6e),e(m6e,q7r),e($t,I7r),g(zL,$t,null),e(Dr,j7r),e(Dr,Po),g(QL,Po,null),e(Po,N7r),e(Po,g6e),e(g6e,D7r),e(Po,G7r),e(Po,Dn),e(Dn,O7r),e(Dn,h6e),e(h6e,V7r),e(Dn,X7r),e(Dn,p6e),e(p6e,z7r),e(Dn,Q7r),e(Dn,_6e),e(_6e,W7r),e(Dn,H7r),e(Po,U7r),e(Po,ve),e(ve,WM),e(WM,u6e),e(u6e,J7r),e(WM,Y7r),e(WM,wH),e(wH,K7r),e(WM,Z7r),e(ve,e9r),e(ve,HM),e(HM,b6e),e(b6e,o9r),e(HM,r9r),e(HM,AH),e(AH,t9r),e(HM,a9r),e(ve,n9r),e(ve,UM),e(UM,F6e),e(F6e,s9r),e(UM,l9r),e(UM,yH),e(yH,i9r),e(UM,d9r),e(ve,c9r),e(ve,JM),e(JM,v6e),e(v6e,f9r),e(JM,m9r),e(JM,LH),e(LH,g9r),e(JM,h9r),e(ve,p9r),e(ve,YM),e(YM,T6e),e(T6e,_9r),e(YM,u9r),e(YM,xH),e(xH,b9r),e(YM,F9r),e(ve,v9r),e(ve,KM),e(KM,M6e),e(M6e,T9r),e(KM,M9r),e(KM,kH),e(kH,E9r),e(KM,C9r),e(ve,w9r),e(ve,ZM),e(ZM,E6e),e(E6e,A9r),e(ZM,y9r),e(ZM,SH),e(SH,L9r),e(ZM,x9r),e(ve,k9r),e(ve,e4),e(e4,C6e),e(C6e,S9r),e(e4,R9r),e(e4,RH),e(RH,B9r),e(e4,P9r),e(ve,$9r),e(ve,o4),e(o4,w6e),e(w6e,q9r),e(o4,I9r),e(o4,BH),e(BH,j9r),e(o4,N9r),e(ve,D9r),e(ve,r4),e(r4,A6e),e(A6e,G9r),e(r4,O9r),e(r4,PH),e(PH,V9r),e(r4,X9r),e(Po,z9r),e(Po,y6e),e(y6e,Q9r),e(Po,W9r),g(WL,Po,null),b(c,_Pe,u),b(c,kf,u),e(kf,t4),e(t4,L6e),g(HL,L6e,null),e(kf,H9r),e(kf,x6e),e(x6e,U9r),b(c,uPe,u),b(c,Gr,u),g(UL,Gr,null),e(Gr,J9r),e(Gr,Sf),e(Sf,Y9r),e(Sf,$H),e($H,K9r),e(Sf,Z9r),e(Sf,qH),e(qH,exr),e(Sf,oxr),e(Gr,rxr),e(Gr,JL),e(JL,txr),e(JL,k6e),e(k6e,axr),e(JL,nxr),e(Gr,sxr),e(Gr,qt),g(YL,qt,null),e(qt,lxr),e(qt,S6e),e(S6e,ixr),e(qt,dxr),e(qt,Rf),e(Rf,cxr),e(Rf,R6e),e(R6e,fxr),e(Rf,mxr),e(Rf,IH),e(IH,gxr),e(Rf,hxr),e(qt,pxr),e(qt,B6e),e(B6e,_xr),e(qt,uxr),g(KL,qt,null),e(Gr,bxr),e(Gr,$o),g(ZL,$o,null),e($o,Fxr),e($o,P6e),e(P6e,vxr),e($o,Txr),e($o,Gn),e(Gn,Mxr),e(Gn,$6e),e($6e,Exr),e(Gn,Cxr),e(Gn,q6e),e(q6e,wxr),e(Gn,Axr),e(Gn,I6e),e(I6e,yxr),e(Gn,Lxr),e($o,xxr),e($o,Be),e(Be,a4),e(a4,j6e),e(j6e,kxr),e(a4,Sxr),e(a4,jH),e(jH,Rxr),e(a4,Bxr),e(Be,Pxr),e(Be,n4),e(n4,N6e),e(N6e,$xr),e(n4,qxr),e(n4,NH),e(NH,Ixr),e(n4,jxr),e(Be,Nxr),e(Be,s4),e(s4,D6e),e(D6e,Dxr),e(s4,Gxr),e(s4,DH),e(DH,Oxr),e(s4,Vxr),e(Be,Xxr),e(Be,l4),e(l4,G6e),e(G6e,zxr),e(l4,Qxr),e(l4,GH),e(GH,Wxr),e(l4,Hxr),e(Be,Uxr),e(Be,i4),e(i4,O6e),e(O6e,Jxr),e(i4,Yxr),e(i4,OH),e(OH,Kxr),e(i4,Zxr),e(Be,ekr),e(Be,d4),e(d4,V6e),e(V6e,okr),e(d4,rkr),e(d4,VH),e(VH,tkr),e(d4,akr),e(Be,nkr),e(Be,c4),e(c4,X6e),e(X6e,skr),e(c4,lkr),e(c4,XH),e(XH,ikr),e(c4,dkr),e(Be,ckr),e(Be,f4),e(f4,z6e),e(z6e,fkr),e(f4,mkr),e(f4,zH),e(zH,gkr),e(f4,hkr),e($o,pkr),e($o,Q6e),e(Q6e,_kr),e($o,ukr),g(e7,$o,null),b(c,bPe,u),b(c,Bf,u),e(Bf,m4),e(m4,W6e),g(o7,W6e,null),e(Bf,bkr),e(Bf,H6e),e(H6e,Fkr),b(c,FPe,u),b(c,Or,u),g(r7,Or,null),e(Or,vkr),e(Or,Pf),e(Pf,Tkr),e(Pf,QH),e(QH,Mkr),e(Pf,Ekr),e(Pf,WH),e(WH,Ckr),e(Pf,wkr),e(Or,Akr),e(Or,t7),e(t7,ykr),e(t7,U6e),e(U6e,Lkr),e(t7,xkr),e(Or,kkr),e(Or,It),g(a7,It,null),e(It,Skr),e(It,J6e),e(J6e,Rkr),e(It,Bkr),e(It,$f),e($f,Pkr),e($f,Y6e),e(Y6e,$kr),e($f,qkr),e($f,HH),e(HH,Ikr),e($f,jkr),e(It,Nkr),e(It,K6e),e(K6e,Dkr),e(It,Gkr),g(n7,It,null),e(Or,Okr),e(Or,qo),g(s7,qo,null),e(qo,Vkr),e(qo,Z6e),e(Z6e,Xkr),e(qo,zkr),e(qo,On),e(On,Qkr),e(On,e0e),e(e0e,Wkr),e(On,Hkr),e(On,o0e),e(o0e,Ukr),e(On,Jkr),e(On,r0e),e(r0e,Ykr),e(On,Kkr),e(qo,Zkr),e(qo,Pe),e(Pe,g4),e(g4,t0e),e(t0e,eSr),e(g4,oSr),e(g4,UH),e(UH,rSr),e(g4,tSr),e(Pe,aSr),e(Pe,h4),e(h4,a0e),e(a0e,nSr),e(h4,sSr),e(h4,JH),e(JH,lSr),e(h4,iSr),e(Pe,dSr),e(Pe,p4),e(p4,n0e),e(n0e,cSr),e(p4,fSr),e(p4,YH),e(YH,mSr),e(p4,gSr),e(Pe,hSr),e(Pe,_4),e(_4,s0e),e(s0e,pSr),e(_4,_Sr),e(_4,KH),e(KH,uSr),e(_4,bSr),e(Pe,FSr),e(Pe,u4),e(u4,l0e),e(l0e,vSr),e(u4,TSr),e(u4,ZH),e(ZH,MSr),e(u4,ESr),e(Pe,CSr),e(Pe,b4),e(b4,i0e),e(i0e,wSr),e(b4,ASr),e(b4,eU),e(eU,ySr),e(b4,LSr),e(Pe,xSr),e(Pe,F4),e(F4,d0e),e(d0e,kSr),e(F4,SSr),e(F4,oU),e(oU,RSr),e(F4,BSr),e(Pe,PSr),e(Pe,v4),e(v4,c0e),e(c0e,$Sr),e(v4,qSr),e(v4,rU),e(rU,ISr),e(v4,jSr),e(qo,NSr),e(qo,f0e),e(f0e,DSr),e(qo,GSr),g(l7,qo,null),b(c,vPe,u),b(c,qf,u),e(qf,T4),e(T4,m0e),g(i7,m0e,null),e(qf,OSr),e(qf,g0e),e(g0e,VSr),b(c,TPe,u),b(c,Vr,u),g(d7,Vr,null),e(Vr,XSr),e(Vr,If),e(If,zSr),e(If,tU),e(tU,QSr),e(If,WSr),e(If,aU),e(aU,HSr),e(If,USr),e(Vr,JSr),e(Vr,c7),e(c7,YSr),e(c7,h0e),e(h0e,KSr),e(c7,ZSr),e(Vr,eRr),e(Vr,jt),g(f7,jt,null),e(jt,oRr),e(jt,p0e),e(p0e,rRr),e(jt,tRr),e(jt,jf),e(jf,aRr),e(jf,_0e),e(_0e,nRr),e(jf,sRr),e(jf,nU),e(nU,lRr),e(jf,iRr),e(jt,dRr),e(jt,u0e),e(u0e,cRr),e(jt,fRr),g(m7,jt,null),e(Vr,mRr),e(Vr,Io),g(g7,Io,null),e(Io,gRr),e(Io,b0e),e(b0e,hRr),e(Io,pRr),e(Io,Vn),e(Vn,_Rr),e(Vn,F0e),e(F0e,uRr),e(Vn,bRr),e(Vn,v0e),e(v0e,FRr),e(Vn,vRr),e(Vn,T0e),e(T0e,TRr),e(Vn,MRr),e(Io,ERr),e(Io,M0e),e(M0e,M4),e(M4,E0e),e(E0e,CRr),e(M4,wRr),e(M4,sU),e(sU,ARr),e(M4,yRr),e(Io,LRr),e(Io,C0e),e(C0e,xRr),e(Io,kRr),g(h7,Io,null),b(c,MPe,u),b(c,Nf,u),e(Nf,E4),e(E4,w0e),g(p7,w0e,null),e(Nf,SRr),e(Nf,A0e),e(A0e,RRr),b(c,EPe,u),b(c,Xr,u),g(_7,Xr,null),e(Xr,BRr),e(Xr,Df),e(Df,PRr),e(Df,lU),e(lU,$Rr),e(Df,qRr),e(Df,iU),e(iU,IRr),e(Df,jRr),e(Xr,NRr),e(Xr,u7),e(u7,DRr),e(u7,y0e),e(y0e,GRr),e(u7,ORr),e(Xr,VRr),e(Xr,Nt),g(b7,Nt,null),e(Nt,XRr),e(Nt,L0e),e(L0e,zRr),e(Nt,QRr),e(Nt,Gf),e(Gf,WRr),e(Gf,x0e),e(x0e,HRr),e(Gf,URr),e(Gf,dU),e(dU,JRr),e(Gf,YRr),e(Nt,KRr),e(Nt,k0e),e(k0e,ZRr),e(Nt,eBr),g(F7,Nt,null),e(Xr,oBr),e(Xr,jo),g(v7,jo,null),e(jo,rBr),e(jo,S0e),e(S0e,tBr),e(jo,aBr),e(jo,Xn),e(Xn,nBr),e(Xn,R0e),e(R0e,sBr),e(Xn,lBr),e(Xn,B0e),e(B0e,iBr),e(Xn,dBr),e(Xn,P0e),e(P0e,cBr),e(Xn,fBr),e(jo,mBr),e(jo,T7),e(T7,C4),e(C4,$0e),e($0e,gBr),e(C4,hBr),e(C4,cU),e(cU,pBr),e(C4,_Br),e(T7,uBr),e(T7,w4),e(w4,q0e),e(q0e,bBr),e(w4,FBr),e(w4,fU),e(fU,vBr),e(w4,TBr),e(jo,MBr),e(jo,I0e),e(I0e,EBr),e(jo,CBr),g(M7,jo,null),b(c,CPe,u),b(c,Of,u),e(Of,A4),e(A4,j0e),g(E7,j0e,null),e(Of,wBr),e(Of,N0e),e(N0e,ABr),b(c,wPe,u),b(c,zr,u),g(C7,zr,null),e(zr,yBr),e(zr,Vf),e(Vf,LBr),e(Vf,mU),e(mU,xBr),e(Vf,kBr),e(Vf,gU),e(gU,SBr),e(Vf,RBr),e(zr,BBr),e(zr,w7),e(w7,PBr),e(w7,D0e),e(D0e,$Br),e(w7,qBr),e(zr,IBr),e(zr,Dt),g(A7,Dt,null),e(Dt,jBr),e(Dt,G0e),e(G0e,NBr),e(Dt,DBr),e(Dt,Xf),e(Xf,GBr),e(Xf,O0e),e(O0e,OBr),e(Xf,VBr),e(Xf,hU),e(hU,XBr),e(Xf,zBr),e(Dt,QBr),e(Dt,V0e),e(V0e,WBr),e(Dt,HBr),g(y7,Dt,null),e(zr,UBr),e(zr,No),g(L7,No,null),e(No,JBr),e(No,X0e),e(X0e,YBr),e(No,KBr),e(No,zn),e(zn,ZBr),e(zn,z0e),e(z0e,ePr),e(zn,oPr),e(zn,Q0e),e(Q0e,rPr),e(zn,tPr),e(zn,W0e),e(W0e,aPr),e(zn,nPr),e(No,sPr),e(No,H0e),e(H0e,y4),e(y4,U0e),e(U0e,lPr),e(y4,iPr),e(y4,pU),e(pU,dPr),e(y4,cPr),e(No,fPr),e(No,J0e),e(J0e,mPr),e(No,gPr),g(x7,No,null),APe=!0},p(c,[u]){const k7={};u&2&&(k7.$$scope={dirty:u,ctx:c}),Kf.$set(k7);const Y0e={};u&2&&(Y0e.$$scope={dirty:u,ctx:c}),Oh.$set(Y0e);const K0e={};u&2&&(K0e.$$scope={dirty:u,ctx:c}),Zh.$set(K0e)},i(c){APe||(h(me.$$.fragment,c),h(Xa.$$.fragment,c),h(RE.$$.fragment,c),h(BE.$$.fragment,c),h(Kf.$$.fragment,c),h(PE.$$.fragment,c),h($E.$$.fragment,c),h(jE.$$.fragment,c),h(NE.$$.fragment,c),h(DE.$$.fragment,c),h(GE.$$.fragment,c),h(OE.$$.fragment,c),h(zE.$$.fragment,c),h(QE.$$.fragment,c),h(WE.$$.fragment,c),h(HE.$$.fragment,c),h(UE.$$.fragment,c),h(KE.$$.fragment,c),h(Oh.$$.fragment,c),h(ZE.$$.fragment,c),h(eC.$$.fragment,c),h(oC.$$.fragment,c),h(rC.$$.fragment,c),h(nC.$$.fragment,c),h(Zh.$$.fragment,c),h(sC.$$.fragment,c),h(lC.$$.fragment,c),h(iC.$$.fragment,c),h(dC.$$.fragment,c),h(fC.$$.fragment,c),h(mC.$$.fragment,c),h(gC.$$.fragment,c),h(hC.$$.fragment,c),h(pC.$$.fragment,c),h(_C.$$.fragment,c),h(bC.$$.fragment,c),h(FC.$$.fragment,c),h(vC.$$.fragment,c),h(TC.$$.fragment,c),h(MC.$$.fragment,c),h(EC.$$.fragment,c),h(wC.$$.fragment,c),h(AC.$$.fragment,c),h(yC.$$.fragment,c),h(LC.$$.fragment,c),h(xC.$$.fragment,c),h(kC.$$.fragment,c),h(RC.$$.fragment,c),h(BC.$$.fragment,c),h(PC.$$.fragment,c),h($C.$$.fragment,c),h(qC.$$.fragment,c),h(IC.$$.fragment,c),h(NC.$$.fragment,c),h(DC.$$.fragment,c),h(GC.$$.fragment,c),h(OC.$$.fragment,c),h(VC.$$.fragment,c),h(XC.$$.fragment,c),h(QC.$$.fragment,c),h(WC.$$.fragment,c),h(HC.$$.fragment,c),h(UC.$$.fragment,c),h(JC.$$.fragment,c),h(YC.$$.fragment,c),h(ZC.$$.fragment,c),h(e3.$$.fragment,c),h(o3.$$.fragment,c),h(r3.$$.fragment,c),h(t3.$$.fragment,c),h(a3.$$.fragment,c),h(s3.$$.fragment,c),h(l3.$$.fragment,c),h(i3.$$.fragment,c),h(d3.$$.fragment,c),h(c3.$$.fragment,c),h(f3.$$.fragment,c),h(g3.$$.fragment,c),h(h3.$$.fragment,c),h(p3.$$.fragment,c),h(_3.$$.fragment,c),h(u3.$$.fragment,c),h(b3.$$.fragment,c),h(v3.$$.fragment,c),h(T3.$$.fragment,c),h(M3.$$.fragment,c),h(E3.$$.fragment,c),h(C3.$$.fragment,c),h(w3.$$.fragment,c),h(y3.$$.fragment,c),h(L3.$$.fragment,c),h(x3.$$.fragment,c),h(k3.$$.fragment,c),h(S3.$$.fragment,c),h(R3.$$.fragment,c),h(P3.$$.fragment,c),h($3.$$.fragment,c),h(q3.$$.fragment,c),h(I3.$$.fragment,c),h(j3.$$.fragment,c),h(N3.$$.fragment,c),h(G3.$$.fragment,c),h(O3.$$.fragment,c),h(V3.$$.fragment,c),h(X3.$$.fragment,c),h(z3.$$.fragment,c),h(Q3.$$.fragment,c),h(H3.$$.fragment,c),h(U3.$$.fragment,c),h(J3.$$.fragment,c),h(Y3.$$.fragment,c),h(K3.$$.fragment,c),h(Z3.$$.fragment,c),h(ow.$$.fragment,c),h(rw.$$.fragment,c),h(tw.$$.fragment,c),h(aw.$$.fragment,c),h(nw.$$.fragment,c),h(sw.$$.fragment,c),h(iw.$$.fragment,c),h(dw.$$.fragment,c),h(cw.$$.fragment,c),h(fw.$$.fragment,c),h(mw.$$.fragment,c),h(gw.$$.fragment,c),h(pw.$$.fragment,c),h(_w.$$.fragment,c),h(uw.$$.fragment,c),h(Fw.$$.fragment,c),h(vw.$$.fragment,c),h(Tw.$$.fragment,c),h(Ew.$$.fragment,c),h(Cw.$$.fragment,c),h(ww.$$.fragment,c),h(Aw.$$.fragment,c),h(yw.$$.fragment,c),h(Lw.$$.fragment,c),h(kw.$$.fragment,c),h(Sw.$$.fragment,c),h(Rw.$$.fragment,c),h(Bw.$$.fragment,c),h(Pw.$$.fragment,c),h($w.$$.fragment,c),h(Iw.$$.fragment,c),h(jw.$$.fragment,c),h(Nw.$$.fragment,c),h(Dw.$$.fragment,c),h(Gw.$$.fragment,c),h(Ow.$$.fragment,c),h(Xw.$$.fragment,c),h(zw.$$.fragment,c),h(Qw.$$.fragment,c),h(Ww.$$.fragment,c),h(Hw.$$.fragment,c),h(Uw.$$.fragment,c),h(Yw.$$.fragment,c),h(Kw.$$.fragment,c),h(Zw.$$.fragment,c),h(eA.$$.fragment,c),h(oA.$$.fragment,c),h(rA.$$.fragment,c),h(aA.$$.fragment,c),h(nA.$$.fragment,c),h(sA.$$.fragment,c),h(lA.$$.fragment,c),h(iA.$$.fragment,c),h(dA.$$.fragment,c),h(fA.$$.fragment,c),h(mA.$$.fragment,c),h(gA.$$.fragment,c),h(hA.$$.fragment,c),h(pA.$$.fragment,c),h(_A.$$.fragment,c),h(bA.$$.fragment,c),h(FA.$$.fragment,c),h(vA.$$.fragment,c),h(TA.$$.fragment,c),h(MA.$$.fragment,c),h(EA.$$.fragment,c),h(wA.$$.fragment,c),h(AA.$$.fragment,c),h(yA.$$.fragment,c),h(LA.$$.fragment,c),h(xA.$$.fragment,c),h(kA.$$.fragment,c),h(RA.$$.fragment,c),h(BA.$$.fragment,c),h(PA.$$.fragment,c),h(qA.$$.fragment,c),h(IA.$$.fragment,c),h(jA.$$.fragment,c),h(DA.$$.fragment,c),h(GA.$$.fragment,c),h(OA.$$.fragment,c),h(VA.$$.fragment,c),h(XA.$$.fragment,c),h(zA.$$.fragment,c),h(WA.$$.fragment,c),h(HA.$$.fragment,c),h(UA.$$.fragment,c),h(JA.$$.fragment,c),h(YA.$$.fragment,c),h(KA.$$.fragment,c),h(ey.$$.fragment,c),h(oy.$$.fragment,c),h(ry.$$.fragment,c),h(ty.$$.fragment,c),h(ay.$$.fragment,c),h(ny.$$.fragment,c),h(ly.$$.fragment,c),h(iy.$$.fragment,c),h(dy.$$.fragment,c),h(cy.$$.fragment,c),h(fy.$$.fragment,c),h(my.$$.fragment,c),h(hy.$$.fragment,c),h(py.$$.fragment,c),h(_y.$$.fragment,c),h(uy.$$.fragment,c),h(by.$$.fragment,c),h(Fy.$$.fragment,c),h(Ty.$$.fragment,c),h(My.$$.fragment,c),h(Ey.$$.fragment,c),h(Cy.$$.fragment,c),h(wy.$$.fragment,c),h(Ay.$$.fragment,c),h(Ly.$$.fragment,c),h(xy.$$.fragment,c),h(ky.$$.fragment,c),h(Sy.$$.fragment,c),h(Ry.$$.fragment,c),h(By.$$.fragment,c),h($y.$$.fragment,c),h(qy.$$.fragment,c),h(Iy.$$.fragment,c),h(jy.$$.fragment,c),h(Ny.$$.fragment,c),h(Dy.$$.fragment,c),h(Oy.$$.fragment,c),h(Vy.$$.fragment,c),h(Xy.$$.fragment,c),h(zy.$$.fragment,c),h(Qy.$$.fragment,c),h(Wy.$$.fragment,c),h(Uy.$$.fragment,c),h(Jy.$$.fragment,c),h(Yy.$$.fragment,c),h(Ky.$$.fragment,c),h(Zy.$$.fragment,c),h(eL.$$.fragment,c),h(rL.$$.fragment,c),h(tL.$$.fragment,c),h(aL.$$.fragment,c),h(nL.$$.fragment,c),h(sL.$$.fragment,c),h(lL.$$.fragment,c),h(dL.$$.fragment,c),h(cL.$$.fragment,c),h(fL.$$.fragment,c),h(mL.$$.fragment,c),h(gL.$$.fragment,c),h(hL.$$.fragment,c),h(_L.$$.fragment,c),h(uL.$$.fragment,c),h(bL.$$.fragment,c),h(FL.$$.fragment,c),h(vL.$$.fragment,c),h(TL.$$.fragment,c),h(EL.$$.fragment,c),h(CL.$$.fragment,c),h(wL.$$.fragment,c),h(AL.$$.fragment,c),h(yL.$$.fragment,c),h(LL.$$.fragment,c),h(kL.$$.fragment,c),h(SL.$$.fragment,c),h(RL.$$.fragment,c),h(BL.$$.fragment,c),h(PL.$$.fragment,c),h($L.$$.fragment,c),h(IL.$$.fragment,c),h(jL.$$.fragment,c),h(NL.$$.fragment,c),h(DL.$$.fragment,c),h(GL.$$.fragment,c),h(OL.$$.fragment,c),h(XL.$$.fragment,c),h(zL.$$.fragment,c),h(QL.$$.fragment,c),h(WL.$$.fragment,c),h(HL.$$.fragment,c),h(UL.$$.fragment,c),h(YL.$$.fragment,c),h(KL.$$.fragment,c),h(ZL.$$.fragment,c),h(e7.$$.fragment,c),h(o7.$$.fragment,c),h(r7.$$.fragment,c),h(a7.$$.fragment,c),h(n7.$$.fragment,c),h(s7.$$.fragment,c),h(l7.$$.fragment,c),h(i7.$$.fragment,c),h(d7.$$.fragment,c),h(f7.$$.fragment,c),h(m7.$$.fragment,c),h(g7.$$.fragment,c),h(h7.$$.fragment,c),h(p7.$$.fragment,c),h(_7.$$.fragment,c),h(b7.$$.fragment,c),h(F7.$$.fragment,c),h(v7.$$.fragment,c),h(M7.$$.fragment,c),h(E7.$$.fragment,c),h(C7.$$.fragment,c),h(A7.$$.fragment,c),h(y7.$$.fragment,c),h(L7.$$.fragment,c),h(x7.$$.fragment,c),APe=!0)},o(c){p(me.$$.fragment,c),p(Xa.$$.fragment,c),p(RE.$$.fragment,c),p(BE.$$.fragment,c),p(Kf.$$.fragment,c),p(PE.$$.fragment,c),p($E.$$.fragment,c),p(jE.$$.fragment,c),p(NE.$$.fragment,c),p(DE.$$.fragment,c),p(GE.$$.fragment,c),p(OE.$$.fragment,c),p(zE.$$.fragment,c),p(QE.$$.fragment,c),p(WE.$$.fragment,c),p(HE.$$.fragment,c),p(UE.$$.fragment,c),p(KE.$$.fragment,c),p(Oh.$$.fragment,c),p(ZE.$$.fragment,c),p(eC.$$.fragment,c),p(oC.$$.fragment,c),p(rC.$$.fragment,c),p(nC.$$.fragment,c),p(Zh.$$.fragment,c),p(sC.$$.fragment,c),p(lC.$$.fragment,c),p(iC.$$.fragment,c),p(dC.$$.fragment,c),p(fC.$$.fragment,c),p(mC.$$.fragment,c),p(gC.$$.fragment,c),p(hC.$$.fragment,c),p(pC.$$.fragment,c),p(_C.$$.fragment,c),p(bC.$$.fragment,c),p(FC.$$.fragment,c),p(vC.$$.fragment,c),p(TC.$$.fragment,c),p(MC.$$.fragment,c),p(EC.$$.fragment,c),p(wC.$$.fragment,c),p(AC.$$.fragment,c),p(yC.$$.fragment,c),p(LC.$$.fragment,c),p(xC.$$.fragment,c),p(kC.$$.fragment,c),p(RC.$$.fragment,c),p(BC.$$.fragment,c),p(PC.$$.fragment,c),p($C.$$.fragment,c),p(qC.$$.fragment,c),p(IC.$$.fragment,c),p(NC.$$.fragment,c),p(DC.$$.fragment,c),p(GC.$$.fragment,c),p(OC.$$.fragment,c),p(VC.$$.fragment,c),p(XC.$$.fragment,c),p(QC.$$.fragment,c),p(WC.$$.fragment,c),p(HC.$$.fragment,c),p(UC.$$.fragment,c),p(JC.$$.fragment,c),p(YC.$$.fragment,c),p(ZC.$$.fragment,c),p(e3.$$.fragment,c),p(o3.$$.fragment,c),p(r3.$$.fragment,c),p(t3.$$.fragment,c),p(a3.$$.fragment,c),p(s3.$$.fragment,c),p(l3.$$.fragment,c),p(i3.$$.fragment,c),p(d3.$$.fragment,c),p(c3.$$.fragment,c),p(f3.$$.fragment,c),p(g3.$$.fragment,c),p(h3.$$.fragment,c),p(p3.$$.fragment,c),p(_3.$$.fragment,c),p(u3.$$.fragment,c),p(b3.$$.fragment,c),p(v3.$$.fragment,c),p(T3.$$.fragment,c),p(M3.$$.fragment,c),p(E3.$$.fragment,c),p(C3.$$.fragment,c),p(w3.$$.fragment,c),p(y3.$$.fragment,c),p(L3.$$.fragment,c),p(x3.$$.fragment,c),p(k3.$$.fragment,c),p(S3.$$.fragment,c),p(R3.$$.fragment,c),p(P3.$$.fragment,c),p($3.$$.fragment,c),p(q3.$$.fragment,c),p(I3.$$.fragment,c),p(j3.$$.fragment,c),p(N3.$$.fragment,c),p(G3.$$.fragment,c),p(O3.$$.fragment,c),p(V3.$$.fragment,c),p(X3.$$.fragment,c),p(z3.$$.fragment,c),p(Q3.$$.fragment,c),p(H3.$$.fragment,c),p(U3.$$.fragment,c),p(J3.$$.fragment,c),p(Y3.$$.fragment,c),p(K3.$$.fragment,c),p(Z3.$$.fragment,c),p(ow.$$.fragment,c),p(rw.$$.fragment,c),p(tw.$$.fragment,c),p(aw.$$.fragment,c),p(nw.$$.fragment,c),p(sw.$$.fragment,c),p(iw.$$.fragment,c),p(dw.$$.fragment,c),p(cw.$$.fragment,c),p(fw.$$.fragment,c),p(mw.$$.fragment,c),p(gw.$$.fragment,c),p(pw.$$.fragment,c),p(_w.$$.fragment,c),p(uw.$$.fragment,c),p(Fw.$$.fragment,c),p(vw.$$.fragment,c),p(Tw.$$.fragment,c),p(Ew.$$.fragment,c),p(Cw.$$.fragment,c),p(ww.$$.fragment,c),p(Aw.$$.fragment,c),p(yw.$$.fragment,c),p(Lw.$$.fragment,c),p(kw.$$.fragment,c),p(Sw.$$.fragment,c),p(Rw.$$.fragment,c),p(Bw.$$.fragment,c),p(Pw.$$.fragment,c),p($w.$$.fragment,c),p(Iw.$$.fragment,c),p(jw.$$.fragment,c),p(Nw.$$.fragment,c),p(Dw.$$.fragment,c),p(Gw.$$.fragment,c),p(Ow.$$.fragment,c),p(Xw.$$.fragment,c),p(zw.$$.fragment,c),p(Qw.$$.fragment,c),p(Ww.$$.fragment,c),p(Hw.$$.fragment,c),p(Uw.$$.fragment,c),p(Yw.$$.fragment,c),p(Kw.$$.fragment,c),p(Zw.$$.fragment,c),p(eA.$$.fragment,c),p(oA.$$.fragment,c),p(rA.$$.fragment,c),p(aA.$$.fragment,c),p(nA.$$.fragment,c),p(sA.$$.fragment,c),p(lA.$$.fragment,c),p(iA.$$.fragment,c),p(dA.$$.fragment,c),p(fA.$$.fragment,c),p(mA.$$.fragment,c),p(gA.$$.fragment,c),p(hA.$$.fragment,c),p(pA.$$.fragment,c),p(_A.$$.fragment,c),p(bA.$$.fragment,c),p(FA.$$.fragment,c),p(vA.$$.fragment,c),p(TA.$$.fragment,c),p(MA.$$.fragment,c),p(EA.$$.fragment,c),p(wA.$$.fragment,c),p(AA.$$.fragment,c),p(yA.$$.fragment,c),p(LA.$$.fragment,c),p(xA.$$.fragment,c),p(kA.$$.fragment,c),p(RA.$$.fragment,c),p(BA.$$.fragment,c),p(PA.$$.fragment,c),p(qA.$$.fragment,c),p(IA.$$.fragment,c),p(jA.$$.fragment,c),p(DA.$$.fragment,c),p(GA.$$.fragment,c),p(OA.$$.fragment,c),p(VA.$$.fragment,c),p(XA.$$.fragment,c),p(zA.$$.fragment,c),p(WA.$$.fragment,c),p(HA.$$.fragment,c),p(UA.$$.fragment,c),p(JA.$$.fragment,c),p(YA.$$.fragment,c),p(KA.$$.fragment,c),p(ey.$$.fragment,c),p(oy.$$.fragment,c),p(ry.$$.fragment,c),p(ty.$$.fragment,c),p(ay.$$.fragment,c),p(ny.$$.fragment,c),p(ly.$$.fragment,c),p(iy.$$.fragment,c),p(dy.$$.fragment,c),p(cy.$$.fragment,c),p(fy.$$.fragment,c),p(my.$$.fragment,c),p(hy.$$.fragment,c),p(py.$$.fragment,c),p(_y.$$.fragment,c),p(uy.$$.fragment,c),p(by.$$.fragment,c),p(Fy.$$.fragment,c),p(Ty.$$.fragment,c),p(My.$$.fragment,c),p(Ey.$$.fragment,c),p(Cy.$$.fragment,c),p(wy.$$.fragment,c),p(Ay.$$.fragment,c),p(Ly.$$.fragment,c),p(xy.$$.fragment,c),p(ky.$$.fragment,c),p(Sy.$$.fragment,c),p(Ry.$$.fragment,c),p(By.$$.fragment,c),p($y.$$.fragment,c),p(qy.$$.fragment,c),p(Iy.$$.fragment,c),p(jy.$$.fragment,c),p(Ny.$$.fragment,c),p(Dy.$$.fragment,c),p(Oy.$$.fragment,c),p(Vy.$$.fragment,c),p(Xy.$$.fragment,c),p(zy.$$.fragment,c),p(Qy.$$.fragment,c),p(Wy.$$.fragment,c),p(Uy.$$.fragment,c),p(Jy.$$.fragment,c),p(Yy.$$.fragment,c),p(Ky.$$.fragment,c),p(Zy.$$.fragment,c),p(eL.$$.fragment,c),p(rL.$$.fragment,c),p(tL.$$.fragment,c),p(aL.$$.fragment,c),p(nL.$$.fragment,c),p(sL.$$.fragment,c),p(lL.$$.fragment,c),p(dL.$$.fragment,c),p(cL.$$.fragment,c),p(fL.$$.fragment,c),p(mL.$$.fragment,c),p(gL.$$.fragment,c),p(hL.$$.fragment,c),p(_L.$$.fragment,c),p(uL.$$.fragment,c),p(bL.$$.fragment,c),p(FL.$$.fragment,c),p(vL.$$.fragment,c),p(TL.$$.fragment,c),p(EL.$$.fragment,c),p(CL.$$.fragment,c),p(wL.$$.fragment,c),p(AL.$$.fragment,c),p(yL.$$.fragment,c),p(LL.$$.fragment,c),p(kL.$$.fragment,c),p(SL.$$.fragment,c),p(RL.$$.fragment,c),p(BL.$$.fragment,c),p(PL.$$.fragment,c),p($L.$$.fragment,c),p(IL.$$.fragment,c),p(jL.$$.fragment,c),p(NL.$$.fragment,c),p(DL.$$.fragment,c),p(GL.$$.fragment,c),p(OL.$$.fragment,c),p(XL.$$.fragment,c),p(zL.$$.fragment,c),p(QL.$$.fragment,c),p(WL.$$.fragment,c),p(HL.$$.fragment,c),p(UL.$$.fragment,c),p(YL.$$.fragment,c),p(KL.$$.fragment,c),p(ZL.$$.fragment,c),p(e7.$$.fragment,c),p(o7.$$.fragment,c),p(r7.$$.fragment,c),p(a7.$$.fragment,c),p(n7.$$.fragment,c),p(s7.$$.fragment,c),p(l7.$$.fragment,c),p(i7.$$.fragment,c),p(d7.$$.fragment,c),p(f7.$$.fragment,c),p(m7.$$.fragment,c),p(g7.$$.fragment,c),p(h7.$$.fragment,c),p(p7.$$.fragment,c),p(_7.$$.fragment,c),p(b7.$$.fragment,c),p(F7.$$.fragment,c),p(v7.$$.fragment,c),p(M7.$$.fragment,c),p(E7.$$.fragment,c),p(C7.$$.fragment,c),p(A7.$$.fragment,c),p(y7.$$.fragment,c),p(L7.$$.fragment,c),p(x7.$$.fragment,c),APe=!1},d(c){t(Z),c&&t(io),c&&t(de),_(me),c&&t(Wf),c&&t(ha),c&&t(xe),c&&t(co),c&&t(Uf),_(Xa,c),c&&t(fo),c&&t(_e),c&&t(Qo),c&&t(za),c&&t(ERe),c&&t(Ji),_(RE),c&&t(CRe),c&&t(Jn),c&&t(wRe),_(BE,c),c&&t(ARe),c&&t(R9),c&&t(yRe),_(Kf,c),c&&t(LRe),c&&t(Yi),_(PE),c&&t(xRe),c&&t(Wo),_($E),_(jE),_(NE),_(DE),c&&t(kRe),c&&t(Zi),_(GE),c&&t(SRe),c&&t(Ho),_(OE),_(zE),_(QE),_(WE),c&&t(RRe),c&&t(ed),_(HE),c&&t(BRe),c&&t(Uo),_(UE),_(KE),_(Oh),_(ZE),_(eC),c&&t(PRe),c&&t(od),_(oC),c&&t($Re),c&&t(Jo),_(rC),_(nC),_(Zh),_(sC),_(lC),c&&t(qRe),c&&t(td),_(iC),c&&t(IRe),c&&t(Yo),_(dC),_(fC),_(mC),_(gC),_(hC),c&&t(jRe),c&&t(sd),_(pC),c&&t(NRe),c&&t(Ko),_(_C),_(bC),_(FC),_(vC),_(TC),c&&t(DRe),c&&t(dd),_(MC),c&&t(GRe),c&&t(Zo),_(EC),_(wC),_(AC),_(yC),_(LC),c&&t(ORe),c&&t(md),_(xC),c&&t(VRe),c&&t(er),_(kC),_(RC),_(BC),_(PC),_($C),c&&t(XRe),c&&t(pd),_(qC),c&&t(zRe),c&&t(or),_(IC),_(NC),_(DC),_(GC),_(OC),c&&t(QRe),c&&t(bd),_(VC),c&&t(WRe),c&&t(rr),_(XC),_(QC),_(WC),_(HC),_(UC),c&&t(HRe),c&&t(Td),_(JC),c&&t(URe),c&&t(tr),_(YC),_(ZC),_(e3),_(o3),_(r3),c&&t(JRe),c&&t(Cd),_(t3),c&&t(YRe),c&&t(ar),_(a3),_(s3),_(l3),_(i3),_(d3),c&&t(KRe),c&&t(yd),_(c3),c&&t(ZRe),c&&t(nr),_(f3),_(g3),_(h3),_(p3),_(_3),c&&t(eBe),c&&t(kd),_(u3),c&&t(oBe),c&&t(sr),_(b3),_(v3),_(T3),_(M3),_(E3),c&&t(rBe),c&&t(Bd),_(C3),c&&t(tBe),c&&t(lr),_(w3),_(y3),_(L3),_(x3),_(k3),c&&t(aBe),c&&t(qd),_(S3),c&&t(nBe),c&&t(ir),_(R3),_(P3),_($3),_(q3),_(I3),c&&t(sBe),c&&t(Nd),_(j3),c&&t(lBe),c&&t(dr),_(N3),_(G3),_(O3),_(V3),_(X3),c&&t(iBe),c&&t(Od),_(z3),c&&t(dBe),c&&t(cr),_(Q3),_(H3),_(U3),_(J3),_(Y3),c&&t(cBe),c&&t(zd),_(K3),c&&t(fBe),c&&t(fr),_(Z3),_(ow),_(rw),_(tw),_(aw),c&&t(mBe),c&&t(Hd),_(nw),c&&t(gBe),c&&t(mr),_(sw),_(iw),_(dw),_(cw),_(fw),c&&t(hBe),c&&t(Yd),_(mw),c&&t(pBe),c&&t(gr),_(gw),_(pw),_(_w),_(uw),_(Fw),c&&t(_Be),c&&t(ec),_(vw),c&&t(uBe),c&&t(hr),_(Tw),_(Ew),_(Cw),_(ww),_(Aw),c&&t(bBe),c&&t(tc),_(yw),c&&t(FBe),c&&t(pr),_(Lw),_(kw),_(Sw),_(Rw),_(Bw),c&&t(vBe),c&&t(lc),_(Pw),c&&t(TBe),c&&t(_r),_($w),_(Iw),_(jw),_(Nw),_(Dw),c&&t(MBe),c&&t(cc),_(Gw),c&&t(EBe),c&&t(ur),_(Ow),_(Xw),_(zw),_(Qw),_(Ww),c&&t(CBe),c&&t(gc),_(Hw),c&&t(wBe),c&&t(br),_(Uw),_(Yw),_(Kw),_(Zw),_(eA),c&&t(ABe),c&&t(uc),_(oA),c&&t(yBe),c&&t(Fr),_(rA),_(aA),_(nA),_(sA),_(lA),c&&t(LBe),c&&t(vc),_(iA),c&&t(xBe),c&&t(vr),_(dA),_(fA),_(mA),_(gA),_(hA),c&&t(kBe),c&&t(Ec),_(pA),c&&t(SBe),c&&t(Tr),_(_A),_(bA),_(FA),_(vA),_(TA),c&&t(RBe),c&&t(Ac),_(MA),c&&t(BBe),c&&t(Mr),_(EA),_(wA),_(AA),_(yA),_(LA),c&&t(PBe),c&&t(xc),_(xA),c&&t($Be),c&&t(Er),_(kA),_(RA),_(BA),_(PA),_(qA),c&&t(qBe),c&&t(Rc),_(IA),c&&t(IBe),c&&t(Cr),_(jA),_(DA),_(GA),_(OA),_(VA),c&&t(jBe),c&&t($c),_(XA),c&&t(NBe),c&&t(wr),_(zA),_(WA),_(HA),_(UA),_(JA),c&&t(DBe),c&&t(jc),_(YA),c&&t(GBe),c&&t(Ar),_(KA),_(ey),_(oy),_(ry),_(ty),c&&t(OBe),c&&t(Gc),_(ay),c&&t(VBe),c&&t(yr),_(ny),_(ly),_(iy),_(dy),_(cy),c&&t(XBe),c&&t(Xc),_(fy),c&&t(zBe),c&&t(Lr),_(my),_(hy),_(py),_(_y),_(uy),c&&t(QBe),c&&t(Wc),_(by),c&&t(WBe),c&&t(xr),_(Fy),_(Ty),_(My),_(Ey),_(Cy),c&&t(HBe),c&&t(Jc),_(wy),c&&t(UBe),c&&t(kr),_(Ay),_(Ly),_(xy),_(ky),_(Sy),c&&t(JBe),c&&t(Zc),_(Ry),c&&t(YBe),c&&t(Sr),_(By),_($y),_(qy),_(Iy),_(jy),c&&t(KBe),c&&t(rf),_(Ny),c&&t(ZBe),c&&t(Rr),_(Dy),_(Oy),_(Vy),_(Xy),_(zy),c&&t(ePe),c&&t(nf),_(Qy),c&&t(oPe),c&&t(Br),_(Wy),_(Uy),_(Jy),_(Yy),_(Ky),c&&t(rPe),c&&t(df),_(Zy),c&&t(tPe),c&&t(Pr),_(eL),_(rL),_(tL),_(aL),_(nL),c&&t(aPe),c&&t(mf),_(sL),c&&t(nPe),c&&t($r),_(lL),_(dL),_(cL),_(fL),_(mL),c&&t(sPe),c&&t(pf),_(gL),c&&t(lPe),c&&t(qr),_(hL),_(_L),_(uL),_(bL),_(FL),c&&t(iPe),c&&t(bf),_(vL),c&&t(dPe),c&&t(Ir),_(TL),_(EL),_(CL),_(wL),_(AL),c&&t(cPe),c&&t(Tf),_(yL),c&&t(fPe),c&&t(jr),_(LL),_(kL),_(SL),_(RL),_(BL),c&&t(mPe),c&&t(Cf),_(PL),c&&t(gPe),c&&t(Nr),_($L),_(IL),_(jL),_(NL),_(DL),c&&t(hPe),c&&t(yf),_(GL),c&&t(pPe),c&&t(Dr),_(OL),_(XL),_(zL),_(QL),_(WL),c&&t(_Pe),c&&t(kf),_(HL),c&&t(uPe),c&&t(Gr),_(UL),_(YL),_(KL),_(ZL),_(e7),c&&t(bPe),c&&t(Bf),_(o7),c&&t(FPe),c&&t(Or),_(r7),_(a7),_(n7),_(s7),_(l7),c&&t(vPe),c&&t(qf),_(i7),c&&t(TPe),c&&t(Vr),_(d7),_(f7),_(m7),_(g7),_(h7),c&&t(MPe),c&&t(Nf),_(p7),c&&t(EPe),c&&t(Xr),_(_7),_(b7),_(F7),_(v7),_(M7),c&&t(CPe),c&&t(Of),_(E7),c&&t(wPe),c&&t(zr),_(C7),_(A7),_(y7),_(L7),_(x7)}}}const rCt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForSpeechSeq2Seq",title:"FlaxAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function tCt(Qf){return YEt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class dCt extends WEt{constructor(Z){super();HEt(this,Z,tCt,oCt,UEt,{})}}export{dCt as default,rCt as metadata};
