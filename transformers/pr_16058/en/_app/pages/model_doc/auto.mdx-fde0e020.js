import{S as mCt,i as gCt,s as hCt,e as a,k as l,w as f,t as o,M as pCt,c as n,d as t,m as i,a as s,x as m,h as r,b as c,F as e,g as b,y as g,q as h,o as p,B as _}from"../../chunks/vendor-6b77c823.js";import{T as nRr}from"../../chunks/Tip-39098574.js";import{D as M}from"../../chunks/Docstring-abef54e3.js";import{C as w}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as X}from"../../chunks/IconCopyLink-7a11ce68.js";function _Ct(Xi){let J,$e,de,pe,io,fe,Me,zo,Vi,Wf,ha,zi,Wi,h4,Qf,Be,co,Qi,Wn,p4,Qn,Hn,_4,Hi,Un,u4,Ui,Hf,Va;return{c(){J=a("p"),$e=o("If your "),de=a("code"),pe=o("NewModelConfig"),io=o(" is a subclass of "),fe=a("code"),Me=o("PretrainedConfig"),zo=o(`, make sure its
`),Vi=a("code"),Wf=o("model_type"),ha=o(" attribute is set to the same key you use when registering the config (here "),zi=a("code"),Wi=o('"new-model"'),h4=o(")."),Qf=l(),Be=a("p"),co=o("Likewise, if your "),Qi=a("code"),Wn=o("NewModel"),p4=o(" is a subclass of "),Qn=a("a"),Hn=o("PreTrainedModel"),_4=o(`, make sure its
`),Hi=a("code"),Un=o("config_class"),u4=o(` attribute is set to the same class you use when registering the model (here
`),Ui=a("code"),Hf=o("NewModelConfig"),Va=o(")."),this.h()},l(fo){J=n(fo,"P",{});var _e=s(J);$e=r(_e,"If your "),de=n(_e,"CODE",{});var h9=s(de);pe=r(h9,"NewModelConfig"),h9.forEach(t),io=r(_e," is a subclass of "),fe=n(_e,"CODE",{});var Ji=s(fe);Me=r(Ji,"PretrainedConfig"),Ji.forEach(t),zo=r(_e,`, make sure its
`),Vi=n(_e,"CODE",{});var p9=s(Vi);Wf=r(p9,"model_type"),p9.forEach(t),ha=r(_e," attribute is set to the same key you use when registering the config (here "),zi=n(_e,"CODE",{});var _9=s(zi);Wi=r(_9,'"new-model"'),_9.forEach(t),h4=r(_e,")."),_e.forEach(t),Qf=i(fo),Be=n(fo,"P",{});var Wo=s(Be);co=r(Wo,"Likewise, if your "),Qi=n(Wo,"CODE",{});var za=s(Qi);Wn=r(za,"NewModel"),za.forEach(t),p4=r(Wo," is a subclass of "),Qn=n(Wo,"A",{href:!0});var u9=s(Qn);Hn=r(u9,"PreTrainedModel"),u9.forEach(t),_4=r(Wo,`, make sure its
`),Hi=n(Wo,"CODE",{});var Uf=s(Hi);Un=r(Uf,"config_class"),Uf.forEach(t),u4=r(Wo,` attribute is set to the same class you use when registering the model (here
`),Ui=n(Wo,"CODE",{});var b9=s(Ui);Hf=r(b9,"NewModelConfig"),b9.forEach(t),Va=r(Wo,")."),Wo.forEach(t),this.h()},h(){c(Qn,"href","/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel")},m(fo,_e){b(fo,J,_e),e(J,$e),e(J,de),e(de,pe),e(J,io),e(J,fe),e(fe,Me),e(J,zo),e(J,Vi),e(Vi,Wf),e(J,ha),e(J,zi),e(zi,Wi),e(J,h4),b(fo,Qf,_e),b(fo,Be,_e),e(Be,co),e(Be,Qi),e(Qi,Wn),e(Be,p4),e(Be,Qn),e(Qn,Hn),e(Be,_4),e(Be,Hi),e(Hi,Un),e(Be,u4),e(Be,Ui),e(Ui,Hf),e(Be,Va)},d(fo){fo&&t(J),fo&&t(Qf),fo&&t(Be)}}}function uCt(Xi){let J,$e,de,pe,io;return{c(){J=a("p"),$e=o("Passing "),de=a("code"),pe=o("use_auth_token=True"),io=o(" is required when you want to use a private model.")},l(fe){J=n(fe,"P",{});var Me=s(J);$e=r(Me,"Passing "),de=n(Me,"CODE",{});var zo=s(de);pe=r(zo,"use_auth_token=True"),zo.forEach(t),io=r(Me," is required when you want to use a private model."),Me.forEach(t)},m(fe,Me){b(fe,J,Me),e(J,$e),e(J,de),e(de,pe),e(J,io)},d(fe){fe&&t(J)}}}function bCt(Xi){let J,$e,de,pe,io;return{c(){J=a("p"),$e=o("Passing "),de=a("code"),pe=o("use_auth_token=True"),io=o(" is required when you want to use a private model.")},l(fe){J=n(fe,"P",{});var Me=s(J);$e=r(Me,"Passing "),de=n(Me,"CODE",{});var zo=s(de);pe=r(zo,"use_auth_token=True"),zo.forEach(t),io=r(Me," is required when you want to use a private model."),Me.forEach(t)},m(fe,Me){b(fe,J,Me),e(J,$e),e(J,de),e(de,pe),e(J,io)},d(fe){fe&&t(J)}}}function vCt(Xi){let J,$e,de,pe,io,fe,Me,zo,Vi,Wf,ha,zi,Wi,h4,Qf,Be,co,Qi,Wn,p4,Qn,Hn,_4,Hi,Un,u4,Ui,Hf,Va,fo,_e,h9,Ji,p9,_9,Wo,za,u9,Uf,b9,G$e,Eke,Yi,Jf,ZQ,b4,X$e,eH,V$e,yke,Jn,z$e,oH,W$e,Q$e,rH,H$e,U$e,wke,v4,Ake,v9,J$e,Lke,Yf,Bke,Ki,Kf,tH,T4,Y$e,aH,K$e,xke,Qo,F4,Z$e,C4,eIe,T9,oIe,rIe,tIe,M4,aIe,nH,nIe,sIe,lIe,mo,E4,iIe,sH,dIe,cIe,Zi,fIe,lH,mIe,gIe,iH,hIe,pIe,_Ie,v,Zf,dH,uIe,bIe,F9,vIe,TIe,FIe,em,cH,CIe,MIe,C9,EIe,yIe,wIe,om,fH,AIe,LIe,M9,BIe,xIe,kIe,rm,mH,RIe,SIe,E9,PIe,$Ie,IIe,tm,gH,jIe,DIe,y9,NIe,qIe,OIe,am,hH,GIe,XIe,w9,VIe,zIe,WIe,nm,pH,QIe,HIe,A9,UIe,JIe,YIe,sm,_H,KIe,ZIe,L9,eje,oje,rje,lm,uH,tje,aje,B9,nje,sje,lje,im,bH,ije,dje,x9,cje,fje,mje,dm,vH,gje,hje,k9,pje,_je,uje,cm,TH,bje,vje,R9,Tje,Fje,Cje,fm,FH,Mje,Eje,S9,yje,wje,Aje,mm,CH,Lje,Bje,P9,xje,kje,Rje,gm,MH,Sje,Pje,$9,$je,Ije,jje,hm,EH,Dje,Nje,I9,qje,Oje,Gje,pm,yH,Xje,Vje,j9,zje,Wje,Qje,_m,wH,Hje,Uje,D9,Jje,Yje,Kje,um,AH,Zje,eDe,N9,oDe,rDe,tDe,bm,LH,aDe,nDe,q9,sDe,lDe,iDe,vm,BH,dDe,cDe,O9,fDe,mDe,gDe,Tm,xH,hDe,pDe,G9,_De,uDe,bDe,Fm,kH,vDe,TDe,X9,FDe,CDe,MDe,Cm,RH,EDe,yDe,V9,wDe,ADe,LDe,Mm,SH,BDe,xDe,z9,kDe,RDe,SDe,Em,PH,PDe,$De,W9,IDe,jDe,DDe,ym,$H,NDe,qDe,Q9,ODe,GDe,XDe,wm,IH,VDe,zDe,H9,WDe,QDe,HDe,Am,jH,UDe,JDe,U9,YDe,KDe,ZDe,Lm,DH,eNe,oNe,J9,rNe,tNe,aNe,Bm,NH,nNe,sNe,Y9,lNe,iNe,dNe,xm,qH,cNe,fNe,K9,mNe,gNe,hNe,km,OH,pNe,_Ne,Z9,uNe,bNe,vNe,Rm,GH,TNe,FNe,eB,CNe,MNe,ENe,Sm,XH,yNe,wNe,oB,ANe,LNe,BNe,Pm,VH,xNe,kNe,rB,RNe,SNe,PNe,$m,zH,$Ne,INe,tB,jNe,DNe,NNe,Im,WH,qNe,ONe,aB,GNe,XNe,VNe,jm,QH,zNe,WNe,nB,QNe,HNe,UNe,Dm,HH,JNe,YNe,sB,KNe,ZNe,eqe,Nm,UH,oqe,rqe,lB,tqe,aqe,nqe,qm,JH,sqe,lqe,iB,iqe,dqe,cqe,Om,YH,fqe,mqe,dB,gqe,hqe,pqe,Gm,KH,_qe,uqe,cB,bqe,vqe,Tqe,Xm,ZH,Fqe,Cqe,fB,Mqe,Eqe,yqe,Vm,eU,wqe,Aqe,mB,Lqe,Bqe,xqe,zm,oU,kqe,Rqe,gB,Sqe,Pqe,$qe,Wm,rU,Iqe,jqe,hB,Dqe,Nqe,qqe,Qm,tU,Oqe,Gqe,pB,Xqe,Vqe,zqe,Hm,aU,Wqe,Qqe,_B,Hqe,Uqe,Jqe,Um,nU,Yqe,Kqe,uB,Zqe,eOe,oOe,Jm,sU,rOe,tOe,bB,aOe,nOe,sOe,Ym,lU,lOe,iOe,vB,dOe,cOe,fOe,Km,iU,mOe,gOe,TB,hOe,pOe,_Oe,Zm,dU,uOe,bOe,FB,vOe,TOe,FOe,eg,cU,COe,MOe,CB,EOe,yOe,wOe,og,fU,AOe,LOe,MB,BOe,xOe,kOe,rg,mU,ROe,SOe,EB,POe,$Oe,IOe,tg,gU,jOe,DOe,yB,NOe,qOe,OOe,ag,hU,GOe,XOe,wB,VOe,zOe,WOe,ng,pU,QOe,HOe,AB,UOe,JOe,YOe,sg,_U,KOe,ZOe,LB,eGe,oGe,rGe,lg,uU,tGe,aGe,BB,nGe,sGe,lGe,ig,bU,iGe,dGe,xB,cGe,fGe,mGe,dg,vU,gGe,hGe,kB,pGe,_Ge,uGe,cg,TU,bGe,vGe,RB,TGe,FGe,CGe,fg,FU,MGe,EGe,SB,yGe,wGe,AGe,mg,CU,LGe,BGe,PB,xGe,kGe,RGe,gg,MU,SGe,PGe,$B,$Ge,IGe,jGe,hg,EU,DGe,NGe,IB,qGe,OGe,GGe,pg,yU,XGe,VGe,jB,zGe,WGe,QGe,_g,wU,HGe,UGe,DB,JGe,YGe,KGe,ug,AU,ZGe,eXe,NB,oXe,rXe,tXe,bg,LU,aXe,nXe,qB,sXe,lXe,iXe,vg,BU,dXe,cXe,OB,fXe,mXe,gXe,Tg,xU,hXe,pXe,GB,_Xe,uXe,bXe,Fg,kU,vXe,TXe,XB,FXe,CXe,MXe,Cg,RU,EXe,yXe,VB,wXe,AXe,LXe,Mg,SU,BXe,xXe,zB,kXe,RXe,SXe,Eg,PU,PXe,$Xe,WB,IXe,jXe,DXe,yg,$U,NXe,qXe,QB,OXe,GXe,XXe,wg,IU,VXe,zXe,HB,WXe,QXe,HXe,Ag,jU,UXe,JXe,UB,YXe,KXe,ZXe,Lg,DU,eVe,oVe,JB,rVe,tVe,aVe,Bg,NU,nVe,sVe,YB,lVe,iVe,dVe,xg,qU,cVe,fVe,KB,mVe,gVe,hVe,kg,OU,pVe,_Ve,ZB,uVe,bVe,vVe,Rg,GU,TVe,FVe,ex,CVe,MVe,EVe,Sg,XU,yVe,wVe,ox,AVe,LVe,BVe,Pg,VU,xVe,kVe,rx,RVe,SVe,PVe,$g,zU,$Ve,IVe,tx,jVe,DVe,NVe,Ig,WU,qVe,OVe,ax,GVe,XVe,VVe,jg,QU,zVe,WVe,nx,QVe,HVe,UVe,Dg,HU,JVe,YVe,sx,KVe,ZVe,eze,Ng,UU,oze,rze,lx,tze,aze,nze,qg,JU,sze,lze,ix,ize,dze,cze,YU,fze,mze,y4,gze,Og,w4,hze,KU,pze,kke,ed,Gg,ZU,A4,_ze,eJ,uze,Rke,Ho,L4,bze,B4,vze,dx,Tze,Fze,Cze,x4,Mze,oJ,Eze,yze,wze,go,k4,Aze,rJ,Lze,Bze,Wa,xze,tJ,kze,Rze,aJ,Sze,Pze,nJ,$ze,Ize,jze,E,Yn,sJ,Dze,Nze,cx,qze,Oze,fx,Gze,Xze,Vze,Kn,lJ,zze,Wze,mx,Qze,Hze,gx,Uze,Jze,Yze,Zn,iJ,Kze,Zze,hx,eWe,oWe,px,rWe,tWe,aWe,Xg,dJ,nWe,sWe,_x,lWe,iWe,dWe,es,cJ,cWe,fWe,ux,mWe,gWe,bx,hWe,pWe,_We,Vg,fJ,uWe,bWe,vx,vWe,TWe,FWe,zg,mJ,CWe,MWe,Tx,EWe,yWe,wWe,Wg,gJ,AWe,LWe,Fx,BWe,xWe,kWe,os,hJ,RWe,SWe,Cx,PWe,$We,Mx,IWe,jWe,DWe,rs,pJ,NWe,qWe,Ex,OWe,GWe,yx,XWe,VWe,zWe,ts,_J,WWe,QWe,wx,HWe,UWe,Ax,JWe,YWe,KWe,Qg,uJ,ZWe,eQe,Lx,oQe,rQe,tQe,Hg,bJ,aQe,nQe,Bx,sQe,lQe,iQe,as,vJ,dQe,cQe,xx,fQe,mQe,kx,gQe,hQe,pQe,Ug,TJ,_Qe,uQe,Rx,bQe,vQe,TQe,ns,FJ,FQe,CQe,Sx,MQe,EQe,Px,yQe,wQe,AQe,ss,CJ,LQe,BQe,$x,xQe,kQe,Ix,RQe,SQe,PQe,ls,MJ,$Qe,IQe,jx,jQe,DQe,EJ,NQe,qQe,OQe,Jg,yJ,GQe,XQe,Dx,VQe,zQe,WQe,is,wJ,QQe,HQe,Nx,UQe,JQe,qx,YQe,KQe,ZQe,Yg,AJ,eHe,oHe,Ox,rHe,tHe,aHe,ds,LJ,nHe,sHe,Gx,lHe,iHe,Xx,dHe,cHe,fHe,cs,BJ,mHe,gHe,Vx,hHe,pHe,zx,_He,uHe,bHe,fs,xJ,vHe,THe,Wx,FHe,CHe,Qx,MHe,EHe,yHe,Kg,kJ,wHe,AHe,Hx,LHe,BHe,xHe,ms,RJ,kHe,RHe,Ux,SHe,PHe,Jx,$He,IHe,jHe,Zg,SJ,DHe,NHe,Yx,qHe,OHe,GHe,gs,PJ,XHe,VHe,Kx,zHe,WHe,Zx,QHe,HHe,UHe,hs,$J,JHe,YHe,ek,KHe,ZHe,ok,eUe,oUe,rUe,ps,IJ,tUe,aUe,rk,nUe,sUe,tk,lUe,iUe,dUe,_s,jJ,cUe,fUe,ak,mUe,gUe,nk,hUe,pUe,_Ue,eh,DJ,uUe,bUe,sk,vUe,TUe,FUe,us,NJ,CUe,MUe,lk,EUe,yUe,ik,wUe,AUe,LUe,bs,qJ,BUe,xUe,dk,kUe,RUe,ck,SUe,PUe,$Ue,vs,OJ,IUe,jUe,fk,DUe,NUe,mk,qUe,OUe,GUe,Ts,GJ,XUe,VUe,gk,zUe,WUe,hk,QUe,HUe,UUe,Fs,XJ,JUe,YUe,pk,KUe,ZUe,_k,eJe,oJe,rJe,Cs,VJ,tJe,aJe,uk,nJe,sJe,bk,lJe,iJe,dJe,oh,zJ,cJe,fJe,vk,mJe,gJe,hJe,Ms,WJ,pJe,_Je,Tk,uJe,bJe,Fk,vJe,TJe,FJe,rh,QJ,CJe,MJe,Ck,EJe,yJe,wJe,th,HJ,AJe,LJe,Mk,BJe,xJe,kJe,Es,UJ,RJe,SJe,Ek,PJe,$Je,yk,IJe,jJe,DJe,ys,JJ,NJe,qJe,wk,OJe,GJe,Ak,XJe,VJe,zJe,ah,YJ,WJe,QJe,Lk,HJe,UJe,JJe,ws,KJ,YJe,KJe,Bk,ZJe,eYe,xk,oYe,rYe,tYe,As,ZJ,aYe,nYe,kk,sYe,lYe,Rk,iYe,dYe,cYe,Ls,eY,fYe,mYe,Sk,gYe,hYe,Pk,pYe,_Ye,uYe,Bs,oY,bYe,vYe,$k,TYe,FYe,Ik,CYe,MYe,EYe,xs,rY,yYe,wYe,jk,AYe,LYe,Dk,BYe,xYe,kYe,nh,tY,RYe,SYe,Nk,PYe,$Ye,IYe,sh,aY,jYe,DYe,qk,NYe,qYe,OYe,lh,nY,GYe,XYe,Ok,VYe,zYe,WYe,ih,sY,QYe,HYe,Gk,UYe,JYe,YYe,ks,lY,KYe,ZYe,Xk,eKe,oKe,Vk,rKe,tKe,aKe,dh,iY,nKe,sKe,zk,lKe,iKe,dKe,Rs,dY,cKe,fKe,Wk,mKe,gKe,Qk,hKe,pKe,_Ke,Ss,cY,uKe,bKe,Hk,vKe,TKe,Uk,FKe,CKe,MKe,Ps,fY,EKe,yKe,Jk,wKe,AKe,Yk,LKe,BKe,xKe,$s,mY,kKe,RKe,Kk,SKe,PKe,Zk,$Ke,IKe,jKe,Is,gY,DKe,NKe,eR,qKe,OKe,oR,GKe,XKe,VKe,js,hY,zKe,WKe,rR,QKe,HKe,tR,UKe,JKe,YKe,ch,pY,KKe,ZKe,aR,eZe,oZe,rZe,fh,_Y,tZe,aZe,nR,nZe,sZe,lZe,Ds,uY,iZe,dZe,sR,cZe,fZe,lR,mZe,gZe,hZe,Ns,bY,pZe,_Ze,iR,uZe,bZe,dR,vZe,TZe,FZe,qs,vY,CZe,MZe,cR,EZe,yZe,fR,wZe,AZe,LZe,mh,TY,BZe,xZe,mR,kZe,RZe,SZe,gh,FY,PZe,$Ze,gR,IZe,jZe,DZe,hh,CY,NZe,qZe,hR,OZe,GZe,XZe,ph,MY,VZe,zZe,pR,WZe,QZe,HZe,Os,EY,UZe,JZe,_R,YZe,KZe,uR,ZZe,eeo,oeo,_h,yY,reo,teo,bR,aeo,neo,seo,uh,wY,leo,ieo,vR,deo,ceo,feo,Gs,AY,meo,geo,TR,heo,peo,FR,_eo,ueo,beo,Xs,LY,veo,Teo,CR,Feo,Ceo,MR,Meo,Eeo,yeo,BY,weo,Aeo,R4,Leo,bh,S4,Beo,xY,xeo,Ske,od,vh,kY,P4,keo,RY,Reo,Pke,Uo,$4,Seo,I4,Peo,ER,$eo,Ieo,jeo,j4,Deo,SY,Neo,qeo,Oeo,Ie,D4,Geo,PY,Xeo,Veo,Qa,zeo,$Y,Weo,Qeo,IY,Heo,Ueo,jY,Jeo,Yeo,Keo,re,Th,DY,Zeo,eoo,yR,ooo,roo,too,Fh,NY,aoo,noo,wR,soo,loo,ioo,Ch,qY,doo,coo,AR,foo,moo,goo,Mh,OY,hoo,poo,LR,_oo,uoo,boo,Eh,GY,voo,Too,BR,Foo,Coo,Moo,yh,XY,Eoo,yoo,xR,woo,Aoo,Loo,wh,VY,Boo,xoo,kR,koo,Roo,Soo,Ah,zY,Poo,$oo,RR,Ioo,joo,Doo,Lh,WY,Noo,qoo,SR,Ooo,Goo,Xoo,Bh,QY,Voo,zoo,PR,Woo,Qoo,Hoo,xh,HY,Uoo,Joo,$R,Yoo,Koo,Zoo,kh,UY,ero,oro,IR,rro,tro,aro,Rh,JY,nro,sro,jR,lro,iro,dro,Sh,YY,cro,fro,DR,mro,gro,hro,Ph,KY,pro,_ro,NR,uro,bro,vro,$h,ZY,Tro,Fro,qR,Cro,Mro,Ero,Ih,eK,yro,wro,OR,Aro,Lro,Bro,jh,oK,xro,kro,GR,Rro,Sro,Pro,Dh,$ro,rK,Iro,jro,N4,Dro,Nh,q4,Nro,tK,qro,$ke,rd,qh,aK,O4,Oro,nK,Gro,Ike,Jo,G4,Xro,X4,Vro,XR,zro,Wro,Qro,V4,Hro,sK,Uro,Jro,Yro,je,z4,Kro,lK,Zro,eto,td,oto,iK,rto,tto,dK,ato,nto,sto,xe,Oh,cK,lto,ito,VR,dto,cto,fto,Gh,fK,mto,gto,zR,hto,pto,_to,Xh,mK,uto,bto,WR,vto,Tto,Fto,Vh,gK,Cto,Mto,QR,Eto,yto,wto,zh,hK,Ato,Lto,HR,Bto,xto,kto,Wh,pK,Rto,Sto,UR,Pto,$to,Ito,Qh,_K,jto,Dto,JR,Nto,qto,Oto,Hh,uK,Gto,Xto,YR,Vto,zto,Wto,Uh,Qto,bK,Hto,Uto,W4,Jto,Jh,Q4,Yto,vK,Kto,jke,ad,Yh,TK,H4,Zto,FK,eao,Dke,Yo,U4,oao,nd,rao,CK,tao,aao,MK,nao,sao,lao,J4,iao,EK,dao,cao,fao,Wr,Y4,mao,yK,gao,hao,sd,pao,wK,_ao,uao,AK,bao,vao,Tao,LK,Fao,Cao,K4,Mao,De,Z4,Eao,BK,yao,wao,Ha,Aao,xK,Lao,Bao,kK,xao,kao,RK,Rao,Sao,Pao,F,Kh,SK,$ao,Iao,KR,jao,Dao,Nao,Zh,PK,qao,Oao,ZR,Gao,Xao,Vao,ep,$K,zao,Wao,eS,Qao,Hao,Uao,op,IK,Jao,Yao,oS,Kao,Zao,eno,rp,jK,ono,rno,rS,tno,ano,nno,tp,DK,sno,lno,tS,ino,dno,cno,ap,NK,fno,mno,aS,gno,hno,pno,np,qK,_no,uno,nS,bno,vno,Tno,sp,OK,Fno,Cno,sS,Mno,Eno,yno,lp,GK,wno,Ano,lS,Lno,Bno,xno,ip,XK,kno,Rno,iS,Sno,Pno,$no,dp,VK,Ino,jno,dS,Dno,Nno,qno,cp,zK,Ono,Gno,cS,Xno,Vno,zno,fp,WK,Wno,Qno,fS,Hno,Uno,Jno,mp,QK,Yno,Kno,mS,Zno,eso,oso,gp,HK,rso,tso,gS,aso,nso,sso,hp,UK,lso,iso,hS,dso,cso,fso,pp,JK,mso,gso,pS,hso,pso,_so,_p,YK,uso,bso,_S,vso,Tso,Fso,up,KK,Cso,Mso,uS,Eso,yso,wso,bp,ZK,Aso,Lso,bS,Bso,xso,kso,vp,eZ,Rso,Sso,vS,Pso,$so,Iso,Tp,oZ,jso,Dso,TS,Nso,qso,Oso,Fp,rZ,Gso,Xso,FS,Vso,zso,Wso,Cp,tZ,Qso,Hso,CS,Uso,Jso,Yso,Mp,aZ,Kso,Zso,MS,elo,olo,rlo,Ep,nZ,tlo,alo,ES,nlo,slo,llo,Vs,sZ,ilo,dlo,yS,clo,flo,wS,mlo,glo,hlo,yp,lZ,plo,_lo,AS,ulo,blo,vlo,wp,iZ,Tlo,Flo,LS,Clo,Mlo,Elo,Ap,dZ,ylo,wlo,BS,Alo,Llo,Blo,Lp,cZ,xlo,klo,xS,Rlo,Slo,Plo,Bp,fZ,$lo,Ilo,kS,jlo,Dlo,Nlo,xp,mZ,qlo,Olo,RS,Glo,Xlo,Vlo,kp,gZ,zlo,Wlo,SS,Qlo,Hlo,Ulo,Rp,hZ,Jlo,Ylo,PS,Klo,Zlo,eio,Sp,pZ,oio,rio,$S,tio,aio,nio,Pp,_Z,sio,lio,IS,iio,dio,cio,$p,uZ,fio,mio,jS,gio,hio,pio,Ip,bZ,_io,uio,DS,bio,vio,Tio,jp,vZ,Fio,Cio,NS,Mio,Eio,yio,Dp,TZ,wio,Aio,qS,Lio,Bio,xio,Np,FZ,kio,Rio,OS,Sio,Pio,$io,qp,CZ,Iio,jio,GS,Dio,Nio,qio,Op,MZ,Oio,Gio,XS,Xio,Vio,zio,Gp,EZ,Wio,Qio,VS,Hio,Uio,Jio,Xp,yZ,Yio,Kio,zS,Zio,edo,odo,Vp,wZ,rdo,tdo,WS,ado,ndo,sdo,zp,AZ,ldo,ido,QS,ddo,cdo,fdo,Wp,LZ,mdo,gdo,HS,hdo,pdo,_do,Qp,BZ,udo,bdo,US,vdo,Tdo,Fdo,Hp,xZ,Cdo,Mdo,JS,Edo,ydo,wdo,Up,kZ,Ado,Ldo,YS,Bdo,xdo,kdo,Jp,RZ,Rdo,Sdo,KS,Pdo,$do,Ido,Yp,SZ,jdo,Ddo,ZS,Ndo,qdo,Odo,Kp,PZ,Gdo,Xdo,eP,Vdo,zdo,Wdo,Zp,$Z,Qdo,Hdo,oP,Udo,Jdo,Ydo,e_,IZ,Kdo,Zdo,rP,eco,oco,rco,o_,jZ,tco,aco,tP,nco,sco,lco,r_,DZ,ico,dco,aP,cco,fco,mco,t_,NZ,gco,hco,nP,pco,_co,uco,a_,qZ,bco,vco,sP,Tco,Fco,Cco,n_,OZ,Mco,Eco,lP,yco,wco,Aco,s_,GZ,Lco,Bco,iP,xco,kco,Rco,l_,XZ,Sco,Pco,dP,$co,Ico,jco,i_,VZ,Dco,Nco,cP,qco,Oco,Gco,d_,zZ,Xco,Vco,fP,zco,Wco,Qco,c_,WZ,Hco,Uco,mP,Jco,Yco,Kco,f_,QZ,Zco,efo,gP,ofo,rfo,tfo,m_,HZ,afo,nfo,hP,sfo,lfo,ifo,g_,UZ,dfo,cfo,pP,ffo,mfo,gfo,h_,JZ,hfo,pfo,_P,_fo,ufo,bfo,p_,YZ,vfo,Tfo,uP,Ffo,Cfo,Mfo,__,KZ,Efo,yfo,bP,wfo,Afo,Lfo,u_,ZZ,Bfo,xfo,vP,kfo,Rfo,Sfo,b_,eee,Pfo,$fo,TP,Ifo,jfo,Dfo,v_,oee,Nfo,qfo,FP,Ofo,Gfo,Xfo,T_,ree,Vfo,zfo,CP,Wfo,Qfo,Hfo,F_,tee,Ufo,Jfo,MP,Yfo,Kfo,Zfo,C_,aee,emo,omo,EP,rmo,tmo,amo,M_,nee,nmo,smo,yP,lmo,imo,dmo,E_,see,cmo,fmo,wP,mmo,gmo,hmo,y_,lee,pmo,_mo,AP,umo,bmo,vmo,w_,iee,Tmo,Fmo,LP,Cmo,Mmo,Emo,A_,dee,ymo,wmo,BP,Amo,Lmo,Bmo,L_,cee,xmo,kmo,xP,Rmo,Smo,Pmo,B_,fee,$mo,Imo,kP,jmo,Dmo,Nmo,x_,mee,qmo,Omo,RP,Gmo,Xmo,Vmo,k_,gee,zmo,Wmo,SP,Qmo,Hmo,Umo,R_,Jmo,hee,Ymo,Kmo,pee,Zmo,ego,_ee,ogo,rgo,eE,Nke,ld,S_,uee,oE,tgo,bee,ago,qke,Ko,rE,ngo,id,sgo,vee,lgo,igo,Tee,dgo,cgo,fgo,tE,mgo,Fee,ggo,hgo,pgo,Qr,aE,_go,Cee,ugo,bgo,dd,vgo,Mee,Tgo,Fgo,Eee,Cgo,Mgo,Ego,yee,ygo,wgo,nE,Ago,Ne,sE,Lgo,wee,Bgo,xgo,Ua,kgo,Aee,Rgo,Sgo,Lee,Pgo,$go,Bee,Igo,jgo,Dgo,k,P_,xee,Ngo,qgo,PP,Ogo,Ggo,Xgo,$_,kee,Vgo,zgo,$P,Wgo,Qgo,Hgo,I_,Ree,Ugo,Jgo,IP,Ygo,Kgo,Zgo,j_,See,eho,oho,jP,rho,tho,aho,D_,Pee,nho,sho,DP,lho,iho,dho,N_,$ee,cho,fho,NP,mho,gho,hho,q_,Iee,pho,_ho,qP,uho,bho,vho,O_,jee,Tho,Fho,OP,Cho,Mho,Eho,G_,Dee,yho,who,GP,Aho,Lho,Bho,X_,Nee,xho,kho,XP,Rho,Sho,Pho,V_,qee,$ho,Iho,VP,jho,Dho,Nho,z_,Oee,qho,Oho,zP,Gho,Xho,Vho,W_,Gee,zho,Who,WP,Qho,Hho,Uho,Q_,Xee,Jho,Yho,QP,Kho,Zho,epo,H_,Vee,opo,rpo,HP,tpo,apo,npo,U_,zee,spo,lpo,UP,ipo,dpo,cpo,J_,Wee,fpo,mpo,JP,gpo,hpo,ppo,Y_,Qee,_po,upo,YP,bpo,vpo,Tpo,K_,Hee,Fpo,Cpo,KP,Mpo,Epo,ypo,Z_,Uee,wpo,Apo,ZP,Lpo,Bpo,xpo,eu,Jee,kpo,Rpo,e$,Spo,Ppo,$po,ou,Yee,Ipo,jpo,o$,Dpo,Npo,qpo,ru,Kee,Opo,Gpo,r$,Xpo,Vpo,zpo,tu,Zee,Wpo,Qpo,t$,Hpo,Upo,Jpo,au,eoe,Ypo,Kpo,a$,Zpo,e_o,o_o,nu,ooe,r_o,t_o,n$,a_o,n_o,s_o,su,roe,l_o,i_o,s$,d_o,c_o,f_o,lu,toe,m_o,g_o,l$,h_o,p_o,__o,iu,aoe,u_o,b_o,i$,v_o,T_o,F_o,du,noe,C_o,M_o,d$,E_o,y_o,w_o,cu,soe,A_o,L_o,c$,B_o,x_o,k_o,fu,loe,R_o,S_o,f$,P_o,$_o,I_o,mu,ioe,j_o,D_o,m$,N_o,q_o,O_o,gu,doe,G_o,X_o,g$,V_o,z_o,W_o,hu,coe,Q_o,H_o,h$,U_o,J_o,Y_o,pu,foe,K_o,Z_o,p$,euo,ouo,ruo,_u,moe,tuo,auo,_$,nuo,suo,luo,uu,goe,iuo,duo,u$,cuo,fuo,muo,bu,hoe,guo,huo,b$,puo,_uo,uuo,vu,buo,poe,vuo,Tuo,_oe,Fuo,Cuo,uoe,Muo,Euo,lE,Oke,cd,Tu,boe,iE,yuo,voe,wuo,Gke,Zo,dE,Auo,fd,Luo,Toe,Buo,xuo,Foe,kuo,Ruo,Suo,cE,Puo,Coe,$uo,Iuo,juo,Hr,fE,Duo,Moe,Nuo,quo,md,Ouo,Eoe,Guo,Xuo,yoe,Vuo,zuo,Wuo,woe,Quo,Huo,mE,Uuo,qe,gE,Juo,Aoe,Yuo,Kuo,Ja,Zuo,Loe,e1o,o1o,Boe,r1o,t1o,xoe,a1o,n1o,s1o,$,Fu,koe,l1o,i1o,v$,d1o,c1o,f1o,Cu,Roe,m1o,g1o,T$,h1o,p1o,_1o,Mu,Soe,u1o,b1o,F$,v1o,T1o,F1o,Eu,Poe,C1o,M1o,C$,E1o,y1o,w1o,yu,$oe,A1o,L1o,M$,B1o,x1o,k1o,wu,Ioe,R1o,S1o,E$,P1o,$1o,I1o,Au,joe,j1o,D1o,y$,N1o,q1o,O1o,Lu,Doe,G1o,X1o,w$,V1o,z1o,W1o,Bu,Noe,Q1o,H1o,A$,U1o,J1o,Y1o,xu,qoe,K1o,Z1o,L$,ebo,obo,rbo,ku,Ooe,tbo,abo,B$,nbo,sbo,lbo,Ru,Goe,ibo,dbo,x$,cbo,fbo,mbo,Su,Xoe,gbo,hbo,k$,pbo,_bo,ubo,Pu,Voe,bbo,vbo,R$,Tbo,Fbo,Cbo,$u,zoe,Mbo,Ebo,S$,ybo,wbo,Abo,Iu,Woe,Lbo,Bbo,P$,xbo,kbo,Rbo,ju,Qoe,Sbo,Pbo,$$,$bo,Ibo,jbo,Du,Hoe,Dbo,Nbo,I$,qbo,Obo,Gbo,Nu,Uoe,Xbo,Vbo,j$,zbo,Wbo,Qbo,qu,Joe,Hbo,Ubo,D$,Jbo,Ybo,Kbo,Ou,Yoe,Zbo,e5o,N$,o5o,r5o,t5o,Gu,Koe,a5o,n5o,q$,s5o,l5o,i5o,Xu,Zoe,d5o,c5o,O$,f5o,m5o,g5o,Vu,ere,h5o,p5o,G$,_5o,u5o,b5o,zu,ore,v5o,T5o,X$,F5o,C5o,M5o,Wu,rre,E5o,y5o,V$,w5o,A5o,L5o,Qu,tre,B5o,x5o,z$,k5o,R5o,S5o,Hu,are,P5o,$5o,W$,I5o,j5o,D5o,Uu,nre,N5o,q5o,Q$,O5o,G5o,X5o,Ju,sre,V5o,z5o,H$,W5o,Q5o,H5o,Yu,lre,U5o,J5o,U$,Y5o,K5o,Z5o,Ku,ire,e2o,o2o,J$,r2o,t2o,a2o,Zu,dre,n2o,s2o,Y$,l2o,i2o,d2o,e1,cre,c2o,f2o,K$,m2o,g2o,h2o,o1,fre,p2o,_2o,Z$,u2o,b2o,v2o,r1,T2o,mre,F2o,C2o,gre,M2o,E2o,hre,y2o,w2o,hE,Xke,gd,t1,pre,pE,A2o,_re,L2o,Vke,er,_E,B2o,hd,x2o,ure,k2o,R2o,bre,S2o,P2o,$2o,uE,I2o,vre,j2o,D2o,N2o,Ur,bE,q2o,Tre,O2o,G2o,pd,X2o,Fre,V2o,z2o,Cre,W2o,Q2o,H2o,Mre,U2o,J2o,vE,Y2o,Oe,TE,K2o,Ere,Z2o,evo,Ya,ovo,yre,rvo,tvo,wre,avo,nvo,Are,svo,lvo,ivo,I,a1,Lre,dvo,cvo,eI,fvo,mvo,gvo,n1,Bre,hvo,pvo,oI,_vo,uvo,bvo,s1,xre,vvo,Tvo,rI,Fvo,Cvo,Mvo,l1,kre,Evo,yvo,tI,wvo,Avo,Lvo,i1,Rre,Bvo,xvo,aI,kvo,Rvo,Svo,d1,Sre,Pvo,$vo,nI,Ivo,jvo,Dvo,c1,Pre,Nvo,qvo,sI,Ovo,Gvo,Xvo,f1,$re,Vvo,zvo,lI,Wvo,Qvo,Hvo,m1,Ire,Uvo,Jvo,iI,Yvo,Kvo,Zvo,g1,jre,e6o,o6o,dI,r6o,t6o,a6o,h1,Dre,n6o,s6o,cI,l6o,i6o,d6o,p1,Nre,c6o,f6o,fI,m6o,g6o,h6o,_1,qre,p6o,_6o,mI,u6o,b6o,v6o,u1,Ore,T6o,F6o,gI,C6o,M6o,E6o,b1,Gre,y6o,w6o,hI,A6o,L6o,B6o,v1,Xre,x6o,k6o,pI,R6o,S6o,P6o,T1,Vre,$6o,I6o,_I,j6o,D6o,N6o,F1,zre,q6o,O6o,uI,G6o,X6o,V6o,C1,Wre,z6o,W6o,bI,Q6o,H6o,U6o,M1,Qre,J6o,Y6o,vI,K6o,Z6o,e0o,E1,Hre,o0o,r0o,TI,t0o,a0o,n0o,y1,Ure,s0o,l0o,FI,i0o,d0o,c0o,w1,Jre,f0o,m0o,CI,g0o,h0o,p0o,A1,Yre,_0o,u0o,MI,b0o,v0o,T0o,L1,Kre,F0o,C0o,EI,M0o,E0o,y0o,B1,Zre,w0o,A0o,yI,L0o,B0o,x0o,x1,ete,k0o,R0o,wI,S0o,P0o,$0o,k1,ote,I0o,j0o,AI,D0o,N0o,q0o,R1,rte,O0o,G0o,LI,X0o,V0o,z0o,S1,tte,W0o,Q0o,BI,H0o,U0o,J0o,P1,ate,Y0o,K0o,nte,Z0o,eTo,oTo,$1,ste,rTo,tTo,xI,aTo,nTo,sTo,I1,lte,lTo,iTo,kI,dTo,cTo,fTo,j1,ite,mTo,gTo,RI,hTo,pTo,_To,D1,dte,uTo,bTo,SI,vTo,TTo,FTo,N1,CTo,cte,MTo,ETo,fte,yTo,wTo,mte,ATo,LTo,FE,zke,_d,q1,gte,CE,BTo,hte,xTo,Wke,or,ME,kTo,ud,RTo,pte,STo,PTo,_te,$To,ITo,jTo,EE,DTo,ute,NTo,qTo,OTo,Jr,yE,GTo,bte,XTo,VTo,bd,zTo,vte,WTo,QTo,Tte,HTo,UTo,JTo,Fte,YTo,KTo,wE,ZTo,Ge,AE,e8o,Cte,o8o,r8o,Ka,t8o,Mte,a8o,n8o,Ete,s8o,l8o,yte,i8o,d8o,c8o,se,O1,wte,f8o,m8o,PI,g8o,h8o,p8o,G1,Ate,_8o,u8o,$I,b8o,v8o,T8o,X1,Lte,F8o,C8o,II,M8o,E8o,y8o,V1,Bte,w8o,A8o,jI,L8o,B8o,x8o,z1,xte,k8o,R8o,DI,S8o,P8o,$8o,W1,kte,I8o,j8o,NI,D8o,N8o,q8o,Q1,Rte,O8o,G8o,qI,X8o,V8o,z8o,H1,Ste,W8o,Q8o,OI,H8o,U8o,J8o,U1,Pte,Y8o,K8o,GI,Z8o,eFo,oFo,J1,$te,rFo,tFo,XI,aFo,nFo,sFo,Y1,Ite,lFo,iFo,VI,dFo,cFo,fFo,K1,jte,mFo,gFo,zI,hFo,pFo,_Fo,Z1,Dte,uFo,bFo,WI,vFo,TFo,FFo,eb,Nte,CFo,MFo,QI,EFo,yFo,wFo,ob,qte,AFo,LFo,HI,BFo,xFo,kFo,rb,Ote,RFo,SFo,UI,PFo,$Fo,IFo,tb,jFo,Gte,DFo,NFo,Xte,qFo,OFo,Vte,GFo,XFo,LE,Qke,vd,ab,zte,BE,VFo,Wte,zFo,Hke,rr,xE,WFo,Td,QFo,Qte,HFo,UFo,Hte,JFo,YFo,KFo,kE,ZFo,Ute,eCo,oCo,rCo,Yr,RE,tCo,Jte,aCo,nCo,Fd,sCo,Yte,lCo,iCo,Kte,dCo,cCo,fCo,Zte,mCo,gCo,SE,hCo,Xe,PE,pCo,eae,_Co,uCo,Za,bCo,oae,vCo,TCo,rae,FCo,CCo,tae,MCo,ECo,yCo,A,nb,aae,wCo,ACo,JI,LCo,BCo,xCo,sb,nae,kCo,RCo,YI,SCo,PCo,$Co,lb,sae,ICo,jCo,KI,DCo,NCo,qCo,ib,lae,OCo,GCo,ZI,XCo,VCo,zCo,db,iae,WCo,QCo,ej,HCo,UCo,JCo,cb,dae,YCo,KCo,oj,ZCo,eMo,oMo,fb,cae,rMo,tMo,rj,aMo,nMo,sMo,mb,fae,lMo,iMo,tj,dMo,cMo,fMo,gb,mae,mMo,gMo,aj,hMo,pMo,_Mo,hb,gae,uMo,bMo,nj,vMo,TMo,FMo,pb,hae,CMo,MMo,sj,EMo,yMo,wMo,_b,pae,AMo,LMo,lj,BMo,xMo,kMo,ub,_ae,RMo,SMo,ij,PMo,$Mo,IMo,bb,uae,jMo,DMo,dj,NMo,qMo,OMo,vb,bae,GMo,XMo,cj,VMo,zMo,WMo,Tb,vae,QMo,HMo,fj,UMo,JMo,YMo,Fb,Tae,KMo,ZMo,mj,e4o,o4o,r4o,Cb,Fae,t4o,a4o,gj,n4o,s4o,l4o,Mb,Cae,i4o,d4o,hj,c4o,f4o,m4o,Eb,Mae,g4o,h4o,pj,p4o,_4o,u4o,yb,Eae,b4o,v4o,_j,T4o,F4o,C4o,wb,yae,M4o,E4o,uj,y4o,w4o,A4o,Ab,wae,L4o,B4o,bj,x4o,k4o,R4o,Lb,Aae,S4o,P4o,vj,$4o,I4o,j4o,Bb,Lae,D4o,N4o,Tj,q4o,O4o,G4o,xb,Bae,X4o,V4o,Fj,z4o,W4o,Q4o,kb,xae,H4o,U4o,Cj,J4o,Y4o,K4o,Rb,kae,Z4o,eEo,Mj,oEo,rEo,tEo,Sb,Rae,aEo,nEo,Ej,sEo,lEo,iEo,Pb,Sae,dEo,cEo,yj,fEo,mEo,gEo,$b,Pae,hEo,pEo,wj,_Eo,uEo,bEo,Ib,$ae,vEo,TEo,Aj,FEo,CEo,MEo,jb,Iae,EEo,yEo,Lj,wEo,AEo,LEo,Db,jae,BEo,xEo,Bj,kEo,REo,SEo,Nb,Dae,PEo,$Eo,xj,IEo,jEo,DEo,qb,Nae,NEo,qEo,kj,OEo,GEo,XEo,Ob,qae,VEo,zEo,Rj,WEo,QEo,HEo,Gb,Oae,UEo,JEo,Sj,YEo,KEo,ZEo,Xb,Gae,e3o,o3o,Pj,r3o,t3o,a3o,Vb,Xae,n3o,s3o,$j,l3o,i3o,d3o,zb,Vae,c3o,f3o,Ij,m3o,g3o,h3o,Wb,zae,p3o,_3o,jj,u3o,b3o,v3o,Qb,Wae,T3o,F3o,Dj,C3o,M3o,E3o,Hb,Qae,y3o,w3o,Nj,A3o,L3o,B3o,Ub,Hae,x3o,k3o,qj,R3o,S3o,P3o,Jb,Uae,$3o,I3o,Oj,j3o,D3o,N3o,Yb,q3o,Jae,O3o,G3o,Yae,X3o,V3o,Kae,z3o,W3o,$E,Uke,Cd,Kb,Zae,IE,Q3o,ene,H3o,Jke,tr,jE,U3o,Md,J3o,one,Y3o,K3o,rne,Z3o,eyo,oyo,DE,ryo,tne,tyo,ayo,nyo,Kr,NE,syo,ane,lyo,iyo,Ed,dyo,nne,cyo,fyo,sne,myo,gyo,hyo,lne,pyo,_yo,qE,uyo,Ve,OE,byo,ine,vyo,Tyo,en,Fyo,dne,Cyo,Myo,cne,Eyo,yyo,fne,wyo,Ayo,Lyo,O,Zb,mne,Byo,xyo,Gj,kyo,Ryo,Syo,e5,gne,Pyo,$yo,Xj,Iyo,jyo,Dyo,o5,hne,Nyo,qyo,Vj,Oyo,Gyo,Xyo,r5,pne,Vyo,zyo,zj,Wyo,Qyo,Hyo,t5,_ne,Uyo,Jyo,Wj,Yyo,Kyo,Zyo,a5,une,ewo,owo,Qj,rwo,two,awo,n5,bne,nwo,swo,Hj,lwo,iwo,dwo,s5,vne,cwo,fwo,Uj,mwo,gwo,hwo,l5,Tne,pwo,_wo,Jj,uwo,bwo,vwo,i5,Fne,Two,Fwo,Yj,Cwo,Mwo,Ewo,d5,Cne,ywo,wwo,Kj,Awo,Lwo,Bwo,c5,Mne,xwo,kwo,Zj,Rwo,Swo,Pwo,f5,Ene,$wo,Iwo,eD,jwo,Dwo,Nwo,m5,yne,qwo,Owo,oD,Gwo,Xwo,Vwo,g5,wne,zwo,Wwo,rD,Qwo,Hwo,Uwo,h5,Ane,Jwo,Ywo,tD,Kwo,Zwo,eAo,p5,Lne,oAo,rAo,aD,tAo,aAo,nAo,_5,Bne,sAo,lAo,nD,iAo,dAo,cAo,u5,xne,fAo,mAo,sD,gAo,hAo,pAo,b5,kne,_Ao,uAo,lD,bAo,vAo,TAo,v5,Rne,FAo,CAo,iD,MAo,EAo,yAo,T5,Sne,wAo,AAo,dD,LAo,BAo,xAo,F5,Pne,kAo,RAo,cD,SAo,PAo,$Ao,C5,$ne,IAo,jAo,fD,DAo,NAo,qAo,M5,Ine,OAo,GAo,mD,XAo,VAo,zAo,E5,jne,WAo,QAo,gD,HAo,UAo,JAo,y5,Dne,YAo,KAo,hD,ZAo,eLo,oLo,w5,Nne,rLo,tLo,pD,aLo,nLo,sLo,A5,lLo,qne,iLo,dLo,One,cLo,fLo,Gne,mLo,gLo,GE,Yke,yd,L5,Xne,XE,hLo,Vne,pLo,Kke,ar,VE,_Lo,wd,uLo,zne,bLo,vLo,Wne,TLo,FLo,CLo,zE,MLo,Qne,ELo,yLo,wLo,Zr,WE,ALo,Hne,LLo,BLo,Ad,xLo,Une,kLo,RLo,Jne,SLo,PLo,$Lo,Yne,ILo,jLo,QE,DLo,ze,HE,NLo,Kne,qLo,OLo,on,GLo,Zne,XLo,VLo,ese,zLo,WLo,ose,QLo,HLo,ULo,ma,B5,rse,JLo,YLo,_D,KLo,ZLo,e7o,x5,tse,o7o,r7o,uD,t7o,a7o,n7o,k5,ase,s7o,l7o,bD,i7o,d7o,c7o,R5,nse,f7o,m7o,vD,g7o,h7o,p7o,S5,sse,_7o,u7o,TD,b7o,v7o,T7o,P5,F7o,lse,C7o,M7o,ise,E7o,y7o,dse,w7o,A7o,UE,Zke,Ld,$5,cse,JE,L7o,fse,B7o,eRe,nr,YE,x7o,Bd,k7o,mse,R7o,S7o,gse,P7o,$7o,I7o,KE,j7o,hse,D7o,N7o,q7o,et,ZE,O7o,pse,G7o,X7o,xd,V7o,_se,z7o,W7o,use,Q7o,H7o,U7o,bse,J7o,Y7o,e3,K7o,We,o3,Z7o,vse,e9o,o9o,rn,r9o,Tse,t9o,a9o,Fse,n9o,s9o,Cse,l9o,i9o,d9o,N,I5,Mse,c9o,f9o,FD,m9o,g9o,h9o,j5,Ese,p9o,_9o,CD,u9o,b9o,v9o,D5,yse,T9o,F9o,MD,C9o,M9o,E9o,N5,wse,y9o,w9o,ED,A9o,L9o,B9o,q5,Ase,x9o,k9o,yD,R9o,S9o,P9o,O5,Lse,$9o,I9o,wD,j9o,D9o,N9o,G5,Bse,q9o,O9o,AD,G9o,X9o,V9o,X5,xse,z9o,W9o,LD,Q9o,H9o,U9o,V5,kse,J9o,Y9o,BD,K9o,Z9o,eBo,z5,Rse,oBo,rBo,xD,tBo,aBo,nBo,W5,Sse,sBo,lBo,kD,iBo,dBo,cBo,Q5,Pse,fBo,mBo,RD,gBo,hBo,pBo,H5,$se,_Bo,uBo,SD,bBo,vBo,TBo,U5,Ise,FBo,CBo,PD,MBo,EBo,yBo,J5,jse,wBo,ABo,$D,LBo,BBo,xBo,Y5,Dse,kBo,RBo,ID,SBo,PBo,$Bo,K5,Nse,IBo,jBo,jD,DBo,NBo,qBo,Z5,qse,OBo,GBo,DD,XBo,VBo,zBo,e2,Ose,WBo,QBo,ND,HBo,UBo,JBo,o2,Gse,YBo,KBo,qD,ZBo,exo,oxo,r2,Xse,rxo,txo,OD,axo,nxo,sxo,t2,Vse,lxo,ixo,GD,dxo,cxo,fxo,a2,zse,mxo,gxo,XD,hxo,pxo,_xo,n2,Wse,uxo,bxo,VD,vxo,Txo,Fxo,s2,Qse,Cxo,Mxo,zD,Exo,yxo,wxo,l2,Hse,Axo,Lxo,WD,Bxo,xxo,kxo,i2,Use,Rxo,Sxo,QD,Pxo,$xo,Ixo,d2,Jse,jxo,Dxo,HD,Nxo,qxo,Oxo,c2,Yse,Gxo,Xxo,UD,Vxo,zxo,Wxo,f2,Kse,Qxo,Hxo,JD,Uxo,Jxo,Yxo,m2,Zse,Kxo,Zxo,YD,eko,oko,rko,g2,ele,tko,ako,KD,nko,sko,lko,h2,ole,iko,dko,ZD,cko,fko,mko,p2,gko,rle,hko,pko,tle,_ko,uko,ale,bko,vko,r3,oRe,kd,_2,nle,t3,Tko,sle,Fko,rRe,sr,a3,Cko,Rd,Mko,lle,Eko,yko,ile,wko,Ako,Lko,n3,Bko,dle,xko,kko,Rko,ot,s3,Sko,cle,Pko,$ko,Sd,Iko,fle,jko,Dko,mle,Nko,qko,Oko,gle,Gko,Xko,l3,Vko,Qe,i3,zko,hle,Wko,Qko,tn,Hko,ple,Uko,Jko,_le,Yko,Kko,ule,Zko,eRo,oRo,R,u2,ble,rRo,tRo,eN,aRo,nRo,sRo,b2,vle,lRo,iRo,oN,dRo,cRo,fRo,v2,Tle,mRo,gRo,rN,hRo,pRo,_Ro,T2,Fle,uRo,bRo,tN,vRo,TRo,FRo,F2,Cle,CRo,MRo,aN,ERo,yRo,wRo,C2,Mle,ARo,LRo,nN,BRo,xRo,kRo,M2,Ele,RRo,SRo,sN,PRo,$Ro,IRo,E2,yle,jRo,DRo,lN,NRo,qRo,ORo,y2,wle,GRo,XRo,iN,VRo,zRo,WRo,w2,Ale,QRo,HRo,dN,URo,JRo,YRo,A2,Lle,KRo,ZRo,cN,eSo,oSo,rSo,L2,Ble,tSo,aSo,fN,nSo,sSo,lSo,B2,xle,iSo,dSo,mN,cSo,fSo,mSo,x2,kle,gSo,hSo,gN,pSo,_So,uSo,k2,Rle,bSo,vSo,hN,TSo,FSo,CSo,R2,Sle,MSo,ESo,pN,ySo,wSo,ASo,S2,Ple,LSo,BSo,_N,xSo,kSo,RSo,P2,$le,SSo,PSo,uN,$So,ISo,jSo,$2,Ile,DSo,NSo,bN,qSo,OSo,GSo,I2,jle,XSo,VSo,vN,zSo,WSo,QSo,j2,Dle,HSo,USo,TN,JSo,YSo,KSo,D2,Nle,ZSo,ePo,FN,oPo,rPo,tPo,N2,qle,aPo,nPo,CN,sPo,lPo,iPo,q2,Ole,dPo,cPo,MN,fPo,mPo,gPo,O2,Gle,hPo,pPo,EN,_Po,uPo,bPo,G2,Xle,vPo,TPo,yN,FPo,CPo,MPo,X2,Vle,EPo,yPo,wN,wPo,APo,LPo,V2,zle,BPo,xPo,AN,kPo,RPo,SPo,z2,Wle,PPo,$Po,LN,IPo,jPo,DPo,W2,Qle,NPo,qPo,BN,OPo,GPo,XPo,Q2,Hle,VPo,zPo,xN,WPo,QPo,HPo,H2,Ule,UPo,JPo,kN,YPo,KPo,ZPo,U2,Jle,e$o,o$o,RN,r$o,t$o,a$o,J2,Yle,n$o,s$o,SN,l$o,i$o,d$o,Y2,Kle,c$o,f$o,PN,m$o,g$o,h$o,K2,Zle,p$o,_$o,$N,u$o,b$o,v$o,Z2,eie,T$o,F$o,IN,C$o,M$o,E$o,ev,oie,y$o,w$o,jN,A$o,L$o,B$o,ov,rie,x$o,k$o,DN,R$o,S$o,P$o,rv,$$o,tie,I$o,j$o,aie,D$o,N$o,nie,q$o,O$o,d3,tRe,Pd,tv,sie,c3,G$o,lie,X$o,aRe,lr,f3,V$o,$d,z$o,iie,W$o,Q$o,die,H$o,U$o,J$o,m3,Y$o,cie,K$o,Z$o,eIo,rt,g3,oIo,fie,rIo,tIo,Id,aIo,mie,nIo,sIo,gie,lIo,iIo,dIo,hie,cIo,fIo,h3,mIo,He,p3,gIo,pie,hIo,pIo,an,_Io,_ie,uIo,bIo,uie,vIo,TIo,bie,FIo,CIo,MIo,vie,av,Tie,EIo,yIo,NN,wIo,AIo,LIo,nv,BIo,Fie,xIo,kIo,Cie,RIo,SIo,Mie,PIo,$Io,_3,nRe,jd,sv,Eie,u3,IIo,yie,jIo,sRe,ir,b3,DIo,Dd,NIo,wie,qIo,OIo,Aie,GIo,XIo,VIo,v3,zIo,Lie,WIo,QIo,HIo,tt,T3,UIo,Bie,JIo,YIo,Nd,KIo,xie,ZIo,ejo,kie,ojo,rjo,tjo,Rie,ajo,njo,F3,sjo,Ue,C3,ljo,Sie,ijo,djo,nn,cjo,Pie,fjo,mjo,$ie,gjo,hjo,Iie,pjo,_jo,ujo,me,lv,jie,bjo,vjo,qN,Tjo,Fjo,Cjo,iv,Die,Mjo,Ejo,ON,yjo,wjo,Ajo,zs,Nie,Ljo,Bjo,GN,xjo,kjo,XN,Rjo,Sjo,Pjo,dv,qie,$jo,Ijo,VN,jjo,Djo,Njo,pa,Oie,qjo,Ojo,zN,Gjo,Xjo,WN,Vjo,zjo,QN,Wjo,Qjo,Hjo,cv,Gie,Ujo,Jjo,HN,Yjo,Kjo,Zjo,fv,Xie,eDo,oDo,UN,rDo,tDo,aDo,mv,Vie,nDo,sDo,JN,lDo,iDo,dDo,gv,zie,cDo,fDo,YN,mDo,gDo,hDo,hv,Wie,pDo,_Do,KN,uDo,bDo,vDo,pv,Qie,TDo,FDo,ZN,CDo,MDo,EDo,_v,yDo,Hie,wDo,ADo,Uie,LDo,BDo,Jie,xDo,kDo,M3,lRe,qd,uv,Yie,E3,RDo,Kie,SDo,iRe,dr,y3,PDo,Od,$Do,Zie,IDo,jDo,ede,DDo,NDo,qDo,w3,ODo,ode,GDo,XDo,VDo,at,A3,zDo,rde,WDo,QDo,Gd,HDo,tde,UDo,JDo,ade,YDo,KDo,ZDo,nde,eNo,oNo,L3,rNo,Je,B3,tNo,sde,aNo,nNo,sn,sNo,lde,lNo,iNo,ide,dNo,cNo,dde,fNo,mNo,gNo,cde,bv,fde,hNo,pNo,eq,_No,uNo,bNo,vv,vNo,mde,TNo,FNo,gde,CNo,MNo,hde,ENo,yNo,x3,dRe,Xd,Tv,pde,k3,wNo,_de,ANo,cRe,cr,R3,LNo,Vd,BNo,ude,xNo,kNo,bde,RNo,SNo,PNo,S3,$No,vde,INo,jNo,DNo,nt,P3,NNo,Tde,qNo,ONo,zd,GNo,Fde,XNo,VNo,Cde,zNo,WNo,QNo,Mde,HNo,UNo,$3,JNo,Ye,I3,YNo,Ede,KNo,ZNo,ln,eqo,yde,oqo,rqo,wde,tqo,aqo,Ade,nqo,sqo,lqo,ke,Fv,Lde,iqo,dqo,oq,cqo,fqo,mqo,Cv,Bde,gqo,hqo,rq,pqo,_qo,uqo,Mv,xde,bqo,vqo,tq,Tqo,Fqo,Cqo,Ev,kde,Mqo,Eqo,aq,yqo,wqo,Aqo,yv,Rde,Lqo,Bqo,nq,xqo,kqo,Rqo,wv,Sde,Sqo,Pqo,sq,$qo,Iqo,jqo,Av,Pde,Dqo,Nqo,lq,qqo,Oqo,Gqo,Lv,$de,Xqo,Vqo,iq,zqo,Wqo,Qqo,Bv,Hqo,Ide,Uqo,Jqo,jde,Yqo,Kqo,Dde,Zqo,eOo,j3,fRe,Wd,xv,Nde,D3,oOo,qde,rOo,mRe,fr,N3,tOo,Qd,aOo,Ode,nOo,sOo,Gde,lOo,iOo,dOo,q3,cOo,Xde,fOo,mOo,gOo,st,O3,hOo,Vde,pOo,_Oo,Hd,uOo,zde,bOo,vOo,Wde,TOo,FOo,COo,Qde,MOo,EOo,G3,yOo,Ke,X3,wOo,Hde,AOo,LOo,dn,BOo,Ude,xOo,kOo,Jde,ROo,SOo,Yde,POo,$Oo,IOo,cn,kv,Kde,jOo,DOo,dq,NOo,qOo,OOo,Rv,Zde,GOo,XOo,cq,VOo,zOo,WOo,Sv,ece,QOo,HOo,fq,UOo,JOo,YOo,Pv,oce,KOo,ZOo,mq,eGo,oGo,rGo,$v,tGo,rce,aGo,nGo,tce,sGo,lGo,ace,iGo,dGo,V3,gRe,Ud,Iv,nce,z3,cGo,sce,fGo,hRe,mr,W3,mGo,Jd,gGo,lce,hGo,pGo,ice,_Go,uGo,bGo,Q3,vGo,dce,TGo,FGo,CGo,lt,H3,MGo,cce,EGo,yGo,Yd,wGo,fce,AGo,LGo,mce,BGo,xGo,kGo,gce,RGo,SGo,U3,PGo,Ze,J3,$Go,hce,IGo,jGo,fn,DGo,pce,NGo,qGo,_ce,OGo,GGo,uce,XGo,VGo,zGo,Re,jv,bce,WGo,QGo,gq,HGo,UGo,JGo,Dv,vce,YGo,KGo,hq,ZGo,eXo,oXo,Nv,Tce,rXo,tXo,pq,aXo,nXo,sXo,qv,Fce,lXo,iXo,_q,dXo,cXo,fXo,Ov,Cce,mXo,gXo,uq,hXo,pXo,_Xo,Gv,Mce,uXo,bXo,bq,vXo,TXo,FXo,Xv,Ece,CXo,MXo,vq,EXo,yXo,wXo,Vv,yce,AXo,LXo,Tq,BXo,xXo,kXo,zv,RXo,wce,SXo,PXo,Ace,$Xo,IXo,Lce,jXo,DXo,Y3,pRe,Kd,Wv,Bce,K3,NXo,xce,qXo,_Re,gr,Z3,OXo,Zd,GXo,kce,XXo,VXo,Rce,zXo,WXo,QXo,ey,HXo,Sce,UXo,JXo,YXo,it,oy,KXo,Pce,ZXo,eVo,ec,oVo,$ce,rVo,tVo,Ice,aVo,nVo,sVo,jce,lVo,iVo,ry,dVo,eo,ty,cVo,Dce,fVo,mVo,mn,gVo,Nce,hVo,pVo,qce,_Vo,uVo,Oce,bVo,vVo,TVo,ay,Qv,Gce,FVo,CVo,Fq,MVo,EVo,yVo,Hv,Xce,wVo,AVo,Cq,LVo,BVo,xVo,Uv,kVo,Vce,RVo,SVo,zce,PVo,$Vo,Wce,IVo,jVo,ny,uRe,oc,Jv,Qce,sy,DVo,Hce,NVo,bRe,hr,ly,qVo,rc,OVo,Uce,GVo,XVo,Jce,VVo,zVo,WVo,iy,QVo,Yce,HVo,UVo,JVo,dt,dy,YVo,Kce,KVo,ZVo,tc,ezo,Zce,ozo,rzo,efe,tzo,azo,nzo,ofe,szo,lzo,cy,izo,oo,fy,dzo,rfe,czo,fzo,gn,mzo,tfe,gzo,hzo,afe,pzo,_zo,nfe,uzo,bzo,vzo,hn,Yv,sfe,Tzo,Fzo,Mq,Czo,Mzo,Ezo,Kv,lfe,yzo,wzo,Eq,Azo,Lzo,Bzo,Zv,ife,xzo,kzo,yq,Rzo,Szo,Pzo,e6,dfe,$zo,Izo,wq,jzo,Dzo,Nzo,o6,qzo,cfe,Ozo,Gzo,ffe,Xzo,Vzo,mfe,zzo,Wzo,my,vRe,ac,r6,gfe,gy,Qzo,hfe,Hzo,TRe,pr,hy,Uzo,nc,Jzo,pfe,Yzo,Kzo,_fe,Zzo,eWo,oWo,py,rWo,ufe,tWo,aWo,nWo,ct,_y,sWo,bfe,lWo,iWo,sc,dWo,vfe,cWo,fWo,Tfe,mWo,gWo,hWo,Ffe,pWo,_Wo,uy,uWo,ro,by,bWo,Cfe,vWo,TWo,pn,FWo,Mfe,CWo,MWo,Efe,EWo,yWo,yfe,wWo,AWo,LWo,lc,t6,wfe,BWo,xWo,Aq,kWo,RWo,SWo,a6,Afe,PWo,$Wo,Lq,IWo,jWo,DWo,n6,Lfe,NWo,qWo,Bq,OWo,GWo,XWo,s6,VWo,Bfe,zWo,WWo,xfe,QWo,HWo,kfe,UWo,JWo,vy,FRe,ic,l6,Rfe,Ty,YWo,Sfe,KWo,CRe,_r,Fy,ZWo,dc,eQo,Pfe,oQo,rQo,$fe,tQo,aQo,nQo,Cy,sQo,Ife,lQo,iQo,dQo,ft,My,cQo,jfe,fQo,mQo,cc,gQo,Dfe,hQo,pQo,Nfe,_Qo,uQo,bQo,qfe,vQo,TQo,Ey,FQo,to,yy,CQo,Ofe,MQo,EQo,_n,yQo,Gfe,wQo,AQo,Xfe,LQo,BQo,Vfe,xQo,kQo,RQo,zfe,i6,Wfe,SQo,PQo,xq,$Qo,IQo,jQo,d6,DQo,Qfe,NQo,qQo,Hfe,OQo,GQo,Ufe,XQo,VQo,wy,MRe,fc,c6,Jfe,Ay,zQo,Yfe,WQo,ERe,ur,Ly,QQo,mc,HQo,Kfe,UQo,JQo,Zfe,YQo,KQo,ZQo,By,eHo,eme,oHo,rHo,tHo,mt,xy,aHo,ome,nHo,sHo,gc,lHo,rme,iHo,dHo,tme,cHo,fHo,mHo,ame,gHo,hHo,ky,pHo,ao,Ry,_Ho,nme,uHo,bHo,un,vHo,sme,THo,FHo,lme,CHo,MHo,ime,EHo,yHo,wHo,dme,f6,cme,AHo,LHo,kq,BHo,xHo,kHo,m6,RHo,fme,SHo,PHo,mme,$Ho,IHo,gme,jHo,DHo,Sy,yRe,hc,g6,hme,Py,NHo,pme,qHo,wRe,br,$y,OHo,pc,GHo,_me,XHo,VHo,ume,zHo,WHo,QHo,Iy,HHo,bme,UHo,JHo,YHo,gt,jy,KHo,vme,ZHo,eUo,_c,oUo,Tme,rUo,tUo,Fme,aUo,nUo,sUo,Cme,lUo,iUo,Dy,dUo,no,Ny,cUo,Mme,fUo,mUo,bn,gUo,Eme,hUo,pUo,yme,_Uo,uUo,wme,bUo,vUo,TUo,qy,h6,Ame,FUo,CUo,Rq,MUo,EUo,yUo,p6,Lme,wUo,AUo,Sq,LUo,BUo,xUo,_6,kUo,Bme,RUo,SUo,xme,PUo,$Uo,kme,IUo,jUo,Oy,ARe,uc,u6,Rme,Gy,DUo,Sme,NUo,LRe,vr,Xy,qUo,bc,OUo,Pme,GUo,XUo,$me,VUo,zUo,WUo,Vy,QUo,Ime,HUo,UUo,JUo,ht,zy,YUo,jme,KUo,ZUo,vc,eJo,Dme,oJo,rJo,Nme,tJo,aJo,nJo,qme,sJo,lJo,Wy,iJo,so,Qy,dJo,Ome,cJo,fJo,vn,mJo,Gme,gJo,hJo,Xme,pJo,_Jo,Vme,uJo,bJo,vJo,zme,b6,Wme,TJo,FJo,Pq,CJo,MJo,EJo,v6,yJo,Qme,wJo,AJo,Hme,LJo,BJo,Ume,xJo,kJo,Hy,BRe,Tc,T6,Jme,Uy,RJo,Yme,SJo,xRe,Tr,Jy,PJo,Fc,$Jo,Kme,IJo,jJo,Zme,DJo,NJo,qJo,Yy,OJo,ege,GJo,XJo,VJo,pt,Ky,zJo,oge,WJo,QJo,Cc,HJo,rge,UJo,JJo,tge,YJo,KJo,ZJo,age,eYo,oYo,Zy,rYo,ho,ew,tYo,nge,aYo,nYo,Tn,sYo,sge,lYo,iYo,lge,dYo,cYo,ige,fYo,mYo,gYo,B,F6,dge,hYo,pYo,$q,_Yo,uYo,bYo,C6,cge,vYo,TYo,Iq,FYo,CYo,MYo,M6,fge,EYo,yYo,jq,wYo,AYo,LYo,E6,mge,BYo,xYo,Dq,kYo,RYo,SYo,y6,gge,PYo,$Yo,Nq,IYo,jYo,DYo,w6,hge,NYo,qYo,qq,OYo,GYo,XYo,A6,pge,VYo,zYo,Oq,WYo,QYo,HYo,L6,_ge,UYo,JYo,Gq,YYo,KYo,ZYo,B6,uge,eKo,oKo,Xq,rKo,tKo,aKo,x6,bge,nKo,sKo,Vq,lKo,iKo,dKo,k6,vge,cKo,fKo,zq,mKo,gKo,hKo,R6,Tge,pKo,_Ko,Wq,uKo,bKo,vKo,S6,Fge,TKo,FKo,Qq,CKo,MKo,EKo,P6,Cge,yKo,wKo,Hq,AKo,LKo,BKo,$6,Mge,xKo,kKo,Uq,RKo,SKo,PKo,I6,Ege,$Ko,IKo,Jq,jKo,DKo,NKo,Ws,yge,qKo,OKo,Yq,GKo,XKo,Kq,VKo,zKo,WKo,j6,wge,QKo,HKo,Zq,UKo,JKo,YKo,D6,Age,KKo,ZKo,eO,eZo,oZo,rZo,N6,Lge,tZo,aZo,oO,nZo,sZo,lZo,q6,Bge,iZo,dZo,rO,cZo,fZo,mZo,O6,xge,gZo,hZo,tO,pZo,_Zo,uZo,G6,kge,bZo,vZo,aO,TZo,FZo,CZo,X6,Rge,MZo,EZo,nO,yZo,wZo,AZo,V6,Sge,LZo,BZo,sO,xZo,kZo,RZo,z6,Pge,SZo,PZo,lO,$Zo,IZo,jZo,W6,$ge,DZo,NZo,iO,qZo,OZo,GZo,Q6,Ige,XZo,VZo,dO,zZo,WZo,QZo,H6,jge,HZo,UZo,cO,JZo,YZo,KZo,U6,Dge,ZZo,eer,fO,oer,rer,ter,J6,Nge,aer,ner,mO,ser,ler,ier,Y6,qge,der,cer,gO,fer,mer,ger,K6,Oge,her,per,hO,_er,uer,ber,Z6,Gge,ver,Ter,pO,Fer,Cer,Mer,e0,Xge,Eer,yer,_O,wer,Aer,Ler,o0,Vge,Ber,xer,uO,ker,Rer,Ser,r0,zge,Per,$er,bO,Ier,jer,Der,t0,Wge,Ner,qer,vO,Oer,Ger,Xer,a0,Qge,Ver,zer,TO,Wer,Qer,Her,n0,Hge,Uer,Jer,FO,Yer,Ker,Zer,s0,Uge,eor,oor,CO,ror,tor,aor,l0,Jge,nor,sor,MO,lor,ior,dor,Yge,cor,mor,ow,kRe,Mc,i0,Kge,rw,gor,Zge,hor,RRe,Fr,tw,por,Ec,_or,ehe,uor,bor,ohe,vor,Tor,For,aw,Cor,rhe,Mor,Eor,yor,_t,nw,wor,the,Aor,Lor,yc,Bor,ahe,xor,kor,nhe,Ror,Sor,Por,she,$or,Ior,sw,jor,po,lw,Dor,lhe,Nor,qor,Fn,Oor,ihe,Gor,Xor,dhe,Vor,zor,che,Wor,Qor,Hor,H,d0,fhe,Uor,Jor,EO,Yor,Kor,Zor,c0,mhe,err,orr,yO,rrr,trr,arr,f0,ghe,nrr,srr,wO,lrr,irr,drr,m0,hhe,crr,frr,AO,mrr,grr,hrr,g0,phe,prr,_rr,LO,urr,brr,vrr,h0,_he,Trr,Frr,BO,Crr,Mrr,Err,p0,uhe,yrr,wrr,xO,Arr,Lrr,Brr,_0,bhe,xrr,krr,kO,Rrr,Srr,Prr,u0,vhe,$rr,Irr,RO,jrr,Drr,Nrr,b0,The,qrr,Orr,SO,Grr,Xrr,Vrr,v0,Fhe,zrr,Wrr,PO,Qrr,Hrr,Urr,T0,Che,Jrr,Yrr,$O,Krr,Zrr,etr,F0,Mhe,otr,rtr,IO,ttr,atr,ntr,C0,Ehe,str,ltr,jO,itr,dtr,ctr,M0,yhe,ftr,mtr,DO,gtr,htr,ptr,E0,whe,_tr,utr,NO,btr,vtr,Ttr,y0,Ahe,Ftr,Ctr,qO,Mtr,Etr,ytr,w0,Lhe,wtr,Atr,OO,Ltr,Btr,xtr,A0,Bhe,ktr,Rtr,GO,Str,Ptr,$tr,L0,xhe,Itr,jtr,XO,Dtr,Ntr,qtr,B0,khe,Otr,Gtr,VO,Xtr,Vtr,ztr,x0,Rhe,Wtr,Qtr,zO,Htr,Utr,Jtr,She,Ytr,Ktr,iw,SRe,wc,k0,Phe,dw,Ztr,$he,ear,PRe,Cr,cw,oar,Ac,rar,Ihe,tar,aar,jhe,nar,sar,lar,fw,iar,Dhe,dar,car,far,ut,mw,mar,Nhe,gar,har,Lc,par,qhe,_ar,uar,Ohe,bar,Tar,Far,Ghe,Car,Mar,gw,Ear,_o,hw,yar,Xhe,war,Aar,Cn,Lar,Vhe,Bar,xar,zhe,kar,Rar,Whe,Sar,Par,$ar,ge,R0,Qhe,Iar,jar,WO,Dar,Nar,qar,S0,Hhe,Oar,Gar,QO,Xar,Var,zar,P0,Uhe,War,Qar,HO,Har,Uar,Jar,$0,Jhe,Yar,Kar,UO,Zar,enr,onr,I0,Yhe,rnr,tnr,JO,anr,nnr,snr,j0,Khe,lnr,inr,YO,dnr,cnr,fnr,D0,Zhe,mnr,gnr,KO,hnr,pnr,_nr,N0,epe,unr,bnr,ZO,vnr,Tnr,Fnr,q0,ope,Cnr,Mnr,eG,Enr,ynr,wnr,O0,rpe,Anr,Lnr,oG,Bnr,xnr,knr,G0,tpe,Rnr,Snr,rG,Pnr,$nr,Inr,ape,jnr,Dnr,pw,$Re,Bc,X0,npe,_w,Nnr,spe,qnr,IRe,Mr,uw,Onr,xc,Gnr,lpe,Xnr,Vnr,ipe,znr,Wnr,Qnr,bw,Hnr,dpe,Unr,Jnr,Ynr,bt,vw,Knr,cpe,Znr,esr,kc,osr,fpe,rsr,tsr,mpe,asr,nsr,ssr,gpe,lsr,isr,Tw,dsr,uo,Fw,csr,hpe,fsr,msr,Mn,gsr,ppe,hsr,psr,_pe,_sr,usr,upe,bsr,vsr,Tsr,Cw,V0,bpe,Fsr,Csr,tG,Msr,Esr,ysr,z0,vpe,wsr,Asr,aG,Lsr,Bsr,xsr,Tpe,ksr,Rsr,Mw,jRe,Rc,W0,Fpe,Ew,Ssr,Cpe,Psr,DRe,Er,yw,$sr,Sc,Isr,Mpe,jsr,Dsr,Epe,Nsr,qsr,Osr,ww,Gsr,ype,Xsr,Vsr,zsr,vt,Aw,Wsr,wpe,Qsr,Hsr,Pc,Usr,Ape,Jsr,Ysr,Lpe,Ksr,Zsr,elr,Bpe,olr,rlr,Lw,tlr,bo,Bw,alr,xpe,nlr,slr,En,llr,kpe,ilr,dlr,Rpe,clr,flr,Spe,mlr,glr,hlr,Y,Q0,Ppe,plr,_lr,nG,ulr,blr,vlr,H0,$pe,Tlr,Flr,sG,Clr,Mlr,Elr,U0,Ipe,ylr,wlr,lG,Alr,Llr,Blr,J0,jpe,xlr,klr,iG,Rlr,Slr,Plr,Y0,Dpe,$lr,Ilr,dG,jlr,Dlr,Nlr,K0,Npe,qlr,Olr,cG,Glr,Xlr,Vlr,Z0,qpe,zlr,Wlr,fG,Qlr,Hlr,Ulr,eT,Ope,Jlr,Ylr,mG,Klr,Zlr,eir,oT,Gpe,oir,rir,gG,tir,air,nir,rT,Xpe,sir,lir,hG,iir,dir,cir,tT,Vpe,fir,mir,pG,gir,hir,pir,aT,zpe,_ir,uir,_G,bir,vir,Tir,nT,Wpe,Fir,Cir,uG,Mir,Eir,yir,sT,Qpe,wir,Air,bG,Lir,Bir,xir,lT,Hpe,kir,Rir,vG,Sir,Pir,$ir,iT,Upe,Iir,jir,TG,Dir,Nir,qir,dT,Jpe,Oir,Gir,FG,Xir,Vir,zir,cT,Ype,Wir,Qir,CG,Hir,Uir,Jir,fT,Kpe,Yir,Kir,MG,Zir,edr,odr,mT,Zpe,rdr,tdr,EG,adr,ndr,sdr,e_e,ldr,idr,xw,NRe,$c,gT,o_e,kw,ddr,r_e,cdr,qRe,yr,Rw,fdr,Ic,mdr,t_e,gdr,hdr,a_e,pdr,_dr,udr,Sw,bdr,n_e,vdr,Tdr,Fdr,Tt,Pw,Cdr,s_e,Mdr,Edr,jc,ydr,l_e,wdr,Adr,i_e,Ldr,Bdr,xdr,d_e,kdr,Rdr,$w,Sdr,vo,Iw,Pdr,c_e,$dr,Idr,yn,jdr,f_e,Ddr,Ndr,m_e,qdr,Odr,g_e,Gdr,Xdr,Vdr,ue,hT,h_e,zdr,Wdr,yG,Qdr,Hdr,Udr,pT,p_e,Jdr,Ydr,wG,Kdr,Zdr,ecr,_T,__e,ocr,rcr,AG,tcr,acr,ncr,uT,u_e,scr,lcr,LG,icr,dcr,ccr,bT,b_e,fcr,mcr,BG,gcr,hcr,pcr,vT,v_e,_cr,ucr,xG,bcr,vcr,Tcr,TT,T_e,Fcr,Ccr,kG,Mcr,Ecr,ycr,FT,F_e,wcr,Acr,RG,Lcr,Bcr,xcr,CT,C_e,kcr,Rcr,SG,Scr,Pcr,$cr,MT,M_e,Icr,jcr,PG,Dcr,Ncr,qcr,E_e,Ocr,Gcr,jw,ORe,Dc,ET,y_e,Dw,Xcr,w_e,Vcr,GRe,wr,Nw,zcr,Nc,Wcr,A_e,Qcr,Hcr,L_e,Ucr,Jcr,Ycr,qw,Kcr,B_e,Zcr,efr,ofr,Ft,Ow,rfr,x_e,tfr,afr,qc,nfr,k_e,sfr,lfr,R_e,ifr,dfr,cfr,S_e,ffr,mfr,Gw,gfr,To,Xw,hfr,P_e,pfr,_fr,wn,ufr,$_e,bfr,vfr,I_e,Tfr,Ffr,j_e,Cfr,Mfr,Efr,V,yT,D_e,yfr,wfr,$G,Afr,Lfr,Bfr,wT,N_e,xfr,kfr,IG,Rfr,Sfr,Pfr,AT,q_e,$fr,Ifr,jG,jfr,Dfr,Nfr,LT,O_e,qfr,Ofr,DG,Gfr,Xfr,Vfr,BT,G_e,zfr,Wfr,NG,Qfr,Hfr,Ufr,xT,X_e,Jfr,Yfr,qG,Kfr,Zfr,emr,kT,V_e,omr,rmr,OG,tmr,amr,nmr,RT,z_e,smr,lmr,GG,imr,dmr,cmr,ST,W_e,fmr,mmr,XG,gmr,hmr,pmr,PT,Q_e,_mr,umr,VG,bmr,vmr,Tmr,$T,H_e,Fmr,Cmr,zG,Mmr,Emr,ymr,IT,U_e,wmr,Amr,WG,Lmr,Bmr,xmr,jT,J_e,kmr,Rmr,QG,Smr,Pmr,$mr,DT,Y_e,Imr,jmr,HG,Dmr,Nmr,qmr,NT,K_e,Omr,Gmr,UG,Xmr,Vmr,zmr,qT,Z_e,Wmr,Qmr,JG,Hmr,Umr,Jmr,OT,eue,Ymr,Kmr,YG,Zmr,egr,ogr,GT,oue,rgr,tgr,KG,agr,ngr,sgr,XT,rue,lgr,igr,ZG,dgr,cgr,fgr,VT,tue,mgr,ggr,eX,hgr,pgr,_gr,zT,aue,ugr,bgr,oX,vgr,Tgr,Fgr,WT,nue,Cgr,Mgr,rX,Egr,ygr,wgr,QT,sue,Agr,Lgr,tX,Bgr,xgr,kgr,HT,lue,Rgr,Sgr,aX,Pgr,$gr,Igr,UT,iue,jgr,Dgr,nX,Ngr,qgr,Ogr,due,Ggr,Xgr,Vw,XRe,Oc,JT,cue,zw,Vgr,fue,zgr,VRe,Ar,Ww,Wgr,Gc,Qgr,mue,Hgr,Ugr,gue,Jgr,Ygr,Kgr,Qw,Zgr,hue,ehr,ohr,rhr,Ct,Hw,thr,pue,ahr,nhr,Xc,shr,_ue,lhr,ihr,uue,dhr,chr,fhr,bue,mhr,ghr,Uw,hhr,Fo,Jw,phr,vue,_hr,uhr,An,bhr,Tue,vhr,Thr,Fue,Fhr,Chr,Cue,Mhr,Ehr,yhr,ae,YT,Mue,whr,Ahr,sX,Lhr,Bhr,xhr,KT,Eue,khr,Rhr,lX,Shr,Phr,$hr,ZT,yue,Ihr,jhr,iX,Dhr,Nhr,qhr,e8,wue,Ohr,Ghr,dX,Xhr,Vhr,zhr,o8,Aue,Whr,Qhr,cX,Hhr,Uhr,Jhr,r8,Lue,Yhr,Khr,fX,Zhr,epr,opr,t8,Bue,rpr,tpr,mX,apr,npr,spr,a8,xue,lpr,ipr,gX,dpr,cpr,fpr,n8,kue,mpr,gpr,hX,hpr,ppr,_pr,s8,Rue,upr,bpr,pX,vpr,Tpr,Fpr,l8,Sue,Cpr,Mpr,_X,Epr,ypr,wpr,i8,Pue,Apr,Lpr,uX,Bpr,xpr,kpr,d8,$ue,Rpr,Spr,bX,Ppr,$pr,Ipr,c8,Iue,jpr,Dpr,vX,Npr,qpr,Opr,f8,jue,Gpr,Xpr,TX,Vpr,zpr,Wpr,m8,Due,Qpr,Hpr,FX,Upr,Jpr,Ypr,g8,Nue,Kpr,Zpr,CX,e_r,o_r,r_r,que,t_r,a_r,Yw,zRe,Vc,h8,Oue,Kw,n_r,Gue,s_r,WRe,Lr,Zw,l_r,zc,i_r,Xue,d_r,c_r,Vue,f_r,m_r,g_r,eA,h_r,zue,p_r,__r,u_r,Mt,oA,b_r,Wue,v_r,T_r,Wc,F_r,Que,C_r,M_r,Hue,E_r,y_r,w_r,Uue,A_r,L_r,rA,B_r,Co,tA,x_r,Jue,k_r,R_r,Ln,S_r,Yue,P_r,$_r,Kue,I_r,j_r,Zue,D_r,N_r,q_r,e1e,p8,o1e,O_r,G_r,MX,X_r,V_r,z_r,r1e,W_r,Q_r,aA,QRe,Qc,_8,t1e,nA,H_r,a1e,U_r,HRe,Br,sA,J_r,Hc,Y_r,n1e,K_r,Z_r,s1e,eur,our,rur,lA,tur,l1e,aur,nur,sur,Et,iA,lur,i1e,iur,dur,Uc,cur,d1e,fur,mur,c1e,gur,hur,pur,f1e,_ur,uur,dA,bur,Mo,cA,vur,m1e,Tur,Fur,Bn,Cur,g1e,Mur,Eur,h1e,yur,wur,p1e,Aur,Lur,Bur,K,u8,_1e,xur,kur,EX,Rur,Sur,Pur,b8,u1e,$ur,Iur,yX,jur,Dur,Nur,v8,b1e,qur,Our,wX,Gur,Xur,Vur,T8,v1e,zur,Wur,AX,Qur,Hur,Uur,F8,T1e,Jur,Yur,LX,Kur,Zur,e1r,C8,F1e,o1r,r1r,BX,t1r,a1r,n1r,M8,C1e,s1r,l1r,xX,i1r,d1r,c1r,E8,M1e,f1r,m1r,kX,g1r,h1r,p1r,y8,E1e,_1r,u1r,RX,b1r,v1r,T1r,w8,y1e,F1r,C1r,SX,M1r,E1r,y1r,A8,w1e,w1r,A1r,PX,L1r,B1r,x1r,L8,A1e,k1r,R1r,$X,S1r,P1r,$1r,B8,L1e,I1r,j1r,IX,D1r,N1r,q1r,x8,B1e,O1r,G1r,jX,X1r,V1r,z1r,k8,x1e,W1r,Q1r,DX,H1r,U1r,J1r,R8,k1e,Y1r,K1r,NX,Z1r,ebr,obr,S8,R1e,rbr,tbr,qX,abr,nbr,sbr,P8,S1e,lbr,ibr,OX,dbr,cbr,fbr,$8,P1e,mbr,gbr,GX,hbr,pbr,_br,I8,$1e,ubr,bbr,XX,vbr,Tbr,Fbr,I1e,Cbr,Mbr,fA,URe,Jc,j8,j1e,mA,Ebr,D1e,ybr,JRe,xr,gA,wbr,Yc,Abr,N1e,Lbr,Bbr,q1e,xbr,kbr,Rbr,hA,Sbr,O1e,Pbr,$br,Ibr,yt,pA,jbr,G1e,Dbr,Nbr,Kc,qbr,X1e,Obr,Gbr,V1e,Xbr,Vbr,zbr,z1e,Wbr,Qbr,_A,Hbr,Eo,uA,Ubr,W1e,Jbr,Ybr,xn,Kbr,Q1e,Zbr,e5r,H1e,o5r,r5r,U1e,t5r,a5r,n5r,Z,D8,J1e,s5r,l5r,VX,i5r,d5r,c5r,N8,Y1e,f5r,m5r,zX,g5r,h5r,p5r,q8,K1e,_5r,u5r,WX,b5r,v5r,T5r,O8,Z1e,F5r,C5r,QX,M5r,E5r,y5r,G8,ebe,w5r,A5r,HX,L5r,B5r,x5r,X8,obe,k5r,R5r,UX,S5r,P5r,$5r,V8,rbe,I5r,j5r,JX,D5r,N5r,q5r,z8,tbe,O5r,G5r,YX,X5r,V5r,z5r,W8,abe,W5r,Q5r,KX,H5r,U5r,J5r,Q8,nbe,Y5r,K5r,ZX,Z5r,e2r,o2r,H8,sbe,r2r,t2r,eV,a2r,n2r,s2r,U8,lbe,l2r,i2r,oV,d2r,c2r,f2r,J8,ibe,m2r,g2r,rV,h2r,p2r,_2r,Y8,dbe,u2r,b2r,tV,v2r,T2r,F2r,K8,cbe,C2r,M2r,aV,E2r,y2r,w2r,Z8,fbe,A2r,L2r,nV,B2r,x2r,k2r,eF,mbe,R2r,S2r,sV,P2r,$2r,I2r,oF,gbe,j2r,D2r,lV,N2r,q2r,O2r,rF,hbe,G2r,X2r,iV,V2r,z2r,W2r,pbe,Q2r,H2r,bA,YRe,Zc,tF,_be,vA,U2r,ube,J2r,KRe,kr,TA,Y2r,ef,K2r,bbe,Z2r,evr,vbe,ovr,rvr,tvr,FA,avr,Tbe,nvr,svr,lvr,wt,CA,ivr,Fbe,dvr,cvr,of,fvr,Cbe,mvr,gvr,Mbe,hvr,pvr,_vr,Ebe,uvr,bvr,MA,vvr,yo,EA,Tvr,ybe,Fvr,Cvr,kn,Mvr,wbe,Evr,yvr,Abe,wvr,Avr,Lbe,Lvr,Bvr,xvr,Bbe,aF,xbe,kvr,Rvr,dV,Svr,Pvr,$vr,kbe,Ivr,jvr,yA,ZRe,rf,nF,Rbe,wA,Dvr,Sbe,Nvr,eSe,Rr,AA,qvr,tf,Ovr,Pbe,Gvr,Xvr,$be,Vvr,zvr,Wvr,LA,Qvr,Ibe,Hvr,Uvr,Jvr,At,BA,Yvr,jbe,Kvr,Zvr,af,e6r,Dbe,o6r,r6r,Nbe,t6r,a6r,n6r,qbe,s6r,l6r,xA,i6r,wo,kA,d6r,Obe,c6r,f6r,Rn,m6r,Gbe,g6r,h6r,Xbe,p6r,_6r,Vbe,u6r,b6r,v6r,zbe,sF,Wbe,T6r,F6r,cV,C6r,M6r,E6r,Qbe,y6r,w6r,RA,oSe,nf,lF,Hbe,SA,A6r,Ube,L6r,rSe,Sr,PA,B6r,sf,x6r,Jbe,k6r,R6r,Ybe,S6r,P6r,$6r,$A,I6r,Kbe,j6r,D6r,N6r,Lt,IA,q6r,Zbe,O6r,G6r,lf,X6r,e5e,V6r,z6r,o5e,W6r,Q6r,H6r,r5e,U6r,J6r,jA,Y6r,Ao,DA,K6r,t5e,Z6r,e0r,Sn,o0r,a5e,r0r,t0r,n5e,a0r,n0r,s5e,s0r,l0r,i0r,z,iF,l5e,d0r,c0r,fV,f0r,m0r,g0r,dF,i5e,h0r,p0r,mV,_0r,u0r,b0r,cF,d5e,v0r,T0r,gV,F0r,C0r,M0r,fF,c5e,E0r,y0r,hV,w0r,A0r,L0r,mF,f5e,B0r,x0r,pV,k0r,R0r,S0r,gF,m5e,P0r,$0r,_V,I0r,j0r,D0r,hF,g5e,N0r,q0r,uV,O0r,G0r,X0r,pF,h5e,V0r,z0r,bV,W0r,Q0r,H0r,_F,p5e,U0r,J0r,vV,Y0r,K0r,Z0r,uF,_5e,eTr,oTr,TV,rTr,tTr,aTr,bF,u5e,nTr,sTr,FV,lTr,iTr,dTr,vF,b5e,cTr,fTr,CV,mTr,gTr,hTr,TF,v5e,pTr,_Tr,MV,uTr,bTr,vTr,FF,T5e,TTr,FTr,EV,CTr,MTr,ETr,CF,F5e,yTr,wTr,yV,ATr,LTr,BTr,MF,C5e,xTr,kTr,wV,RTr,STr,PTr,EF,M5e,$Tr,ITr,AV,jTr,DTr,NTr,yF,E5e,qTr,OTr,LV,GTr,XTr,VTr,wF,y5e,zTr,WTr,BV,QTr,HTr,UTr,AF,w5e,JTr,YTr,xV,KTr,ZTr,e8r,LF,A5e,o8r,r8r,kV,t8r,a8r,n8r,BF,L5e,s8r,l8r,RV,i8r,d8r,c8r,xF,B5e,f8r,m8r,SV,g8r,h8r,p8r,kF,x5e,_8r,u8r,PV,b8r,v8r,T8r,RF,k5e,F8r,C8r,$V,M8r,E8r,y8r,R5e,w8r,A8r,NA,tSe,df,SF,S5e,qA,L8r,P5e,B8r,aSe,Pr,OA,x8r,cf,k8r,$5e,R8r,S8r,I5e,P8r,$8r,I8r,GA,j8r,j5e,D8r,N8r,q8r,Bt,XA,O8r,D5e,G8r,X8r,ff,V8r,N5e,z8r,W8r,q5e,Q8r,H8r,U8r,O5e,J8r,Y8r,VA,K8r,Lo,zA,Z8r,G5e,eFr,oFr,Pn,rFr,X5e,tFr,aFr,V5e,nFr,sFr,z5e,lFr,iFr,dFr,ga,PF,W5e,cFr,fFr,IV,mFr,gFr,hFr,$F,Q5e,pFr,_Fr,jV,uFr,bFr,vFr,IF,H5e,TFr,FFr,DV,CFr,MFr,EFr,jF,U5e,yFr,wFr,NV,AFr,LFr,BFr,DF,J5e,xFr,kFr,qV,RFr,SFr,PFr,Y5e,$Fr,IFr,WA,nSe,mf,NF,K5e,QA,jFr,Z5e,DFr,sSe,$r,HA,NFr,gf,qFr,e2e,OFr,GFr,o2e,XFr,VFr,zFr,UA,WFr,r2e,QFr,HFr,UFr,xt,JA,JFr,t2e,YFr,KFr,hf,ZFr,a2e,eCr,oCr,n2e,rCr,tCr,aCr,s2e,nCr,sCr,YA,lCr,Bo,KA,iCr,l2e,dCr,cCr,$n,fCr,i2e,mCr,gCr,d2e,hCr,pCr,c2e,_Cr,uCr,bCr,ce,qF,f2e,vCr,TCr,OV,FCr,CCr,MCr,OF,m2e,ECr,yCr,GV,wCr,ACr,LCr,GF,g2e,BCr,xCr,XV,kCr,RCr,SCr,XF,h2e,PCr,$Cr,VV,ICr,jCr,DCr,VF,p2e,NCr,qCr,zV,OCr,GCr,XCr,zF,_2e,VCr,zCr,WV,WCr,QCr,HCr,WF,u2e,UCr,JCr,QV,YCr,KCr,ZCr,QF,b2e,eMr,oMr,HV,rMr,tMr,aMr,HF,v2e,nMr,sMr,UV,lMr,iMr,dMr,UF,T2e,cMr,fMr,JV,mMr,gMr,hMr,JF,F2e,pMr,_Mr,YV,uMr,bMr,vMr,YF,C2e,TMr,FMr,KV,CMr,MMr,EMr,M2e,yMr,wMr,ZA,lSe,pf,KF,E2e,eL,AMr,y2e,LMr,iSe,Ir,oL,BMr,_f,xMr,w2e,kMr,RMr,A2e,SMr,PMr,$Mr,rL,IMr,L2e,jMr,DMr,NMr,kt,tL,qMr,B2e,OMr,GMr,uf,XMr,x2e,VMr,zMr,k2e,WMr,QMr,HMr,R2e,UMr,JMr,aL,YMr,xo,nL,KMr,S2e,ZMr,e4r,In,o4r,P2e,r4r,t4r,$2e,a4r,n4r,I2e,s4r,l4r,i4r,be,ZF,j2e,d4r,c4r,ZV,f4r,m4r,g4r,eC,D2e,h4r,p4r,ez,_4r,u4r,b4r,oC,N2e,v4r,T4r,oz,F4r,C4r,M4r,rC,q2e,E4r,y4r,rz,w4r,A4r,L4r,tC,O2e,B4r,x4r,tz,k4r,R4r,S4r,aC,G2e,P4r,$4r,az,I4r,j4r,D4r,nC,X2e,N4r,q4r,nz,O4r,G4r,X4r,sC,V2e,V4r,z4r,sz,W4r,Q4r,H4r,lC,z2e,U4r,J4r,lz,Y4r,K4r,Z4r,iC,W2e,eEr,oEr,iz,rEr,tEr,aEr,Q2e,nEr,sEr,sL,dSe,bf,dC,H2e,lL,lEr,U2e,iEr,cSe,jr,iL,dEr,vf,cEr,J2e,fEr,mEr,Y2e,gEr,hEr,pEr,dL,_Er,K2e,uEr,bEr,vEr,Rt,cL,TEr,Z2e,FEr,CEr,Tf,MEr,eve,EEr,yEr,ove,wEr,AEr,LEr,rve,BEr,xEr,fL,kEr,ko,mL,REr,tve,SEr,PEr,jn,$Er,ave,IEr,jEr,nve,DEr,NEr,sve,qEr,OEr,GEr,Ee,cC,lve,XEr,VEr,dz,zEr,WEr,QEr,fC,ive,HEr,UEr,cz,JEr,YEr,KEr,mC,dve,ZEr,e3r,fz,o3r,r3r,t3r,gC,cve,a3r,n3r,mz,s3r,l3r,i3r,hC,fve,d3r,c3r,gz,f3r,m3r,g3r,pC,mve,h3r,p3r,hz,_3r,u3r,b3r,_C,gve,v3r,T3r,pz,F3r,C3r,M3r,uC,hve,E3r,y3r,_z,w3r,A3r,L3r,bC,pve,B3r,x3r,uz,k3r,R3r,S3r,_ve,P3r,$3r,gL,fSe,Ff,vC,uve,hL,I3r,bve,j3r,mSe,Dr,pL,D3r,Cf,N3r,vve,q3r,O3r,Tve,G3r,X3r,V3r,_L,z3r,Fve,W3r,Q3r,H3r,St,uL,U3r,Cve,J3r,Y3r,Mf,K3r,Mve,Z3r,eyr,Eve,oyr,ryr,tyr,yve,ayr,nyr,bL,syr,Ro,vL,lyr,wve,iyr,dyr,Dn,cyr,Ave,fyr,myr,Lve,gyr,hyr,Bve,pyr,_yr,uyr,ve,TC,xve,byr,vyr,bz,Tyr,Fyr,Cyr,FC,kve,Myr,Eyr,vz,yyr,wyr,Ayr,CC,Rve,Lyr,Byr,Tz,xyr,kyr,Ryr,MC,Sve,Syr,Pyr,Fz,$yr,Iyr,jyr,EC,Pve,Dyr,Nyr,Cz,qyr,Oyr,Gyr,yC,$ve,Xyr,Vyr,Mz,zyr,Wyr,Qyr,wC,Ive,Hyr,Uyr,Ez,Jyr,Yyr,Kyr,AC,jve,Zyr,ewr,yz,owr,rwr,twr,LC,Dve,awr,nwr,wz,swr,lwr,iwr,BC,Nve,dwr,cwr,Az,fwr,mwr,gwr,qve,hwr,pwr,TL,gSe,Ef,xC,Ove,FL,_wr,Gve,uwr,hSe,Nr,CL,bwr,yf,vwr,Xve,Twr,Fwr,Vve,Cwr,Mwr,Ewr,ML,ywr,zve,wwr,Awr,Lwr,Pt,EL,Bwr,Wve,xwr,kwr,wf,Rwr,Qve,Swr,Pwr,Hve,$wr,Iwr,jwr,Uve,Dwr,Nwr,yL,qwr,So,wL,Owr,Jve,Gwr,Xwr,Nn,Vwr,Yve,zwr,Wwr,Kve,Qwr,Hwr,Zve,Uwr,Jwr,Ywr,e6e,kC,o6e,Kwr,Zwr,Lz,eAr,oAr,rAr,r6e,tAr,aAr,AL,pSe,Af,RC,t6e,LL,nAr,a6e,sAr,_Se,qr,BL,lAr,Lf,iAr,n6e,dAr,cAr,s6e,fAr,mAr,gAr,xL,hAr,l6e,pAr,_Ar,uAr,$t,kL,bAr,i6e,vAr,TAr,Bf,FAr,d6e,CAr,MAr,c6e,EAr,yAr,wAr,f6e,AAr,LAr,RL,BAr,Po,SL,xAr,m6e,kAr,RAr,qn,SAr,g6e,PAr,$Ar,h6e,IAr,jAr,p6e,DAr,NAr,qAr,Te,SC,_6e,OAr,GAr,Bz,XAr,VAr,zAr,PC,u6e,WAr,QAr,xz,HAr,UAr,JAr,$C,b6e,YAr,KAr,kz,ZAr,eLr,oLr,IC,v6e,rLr,tLr,Rz,aLr,nLr,sLr,jC,T6e,lLr,iLr,Sz,dLr,cLr,fLr,DC,F6e,mLr,gLr,Pz,hLr,pLr,_Lr,NC,C6e,uLr,bLr,$z,vLr,TLr,FLr,qC,M6e,CLr,MLr,Iz,ELr,yLr,wLr,OC,E6e,ALr,LLr,jz,BLr,xLr,kLr,GC,y6e,RLr,SLr,Dz,PLr,$Lr,ILr,w6e,jLr,DLr,PL,uSe,xf,XC,A6e,$L,NLr,L6e,qLr,bSe,Or,IL,OLr,kf,GLr,B6e,XLr,VLr,x6e,zLr,WLr,QLr,jL,HLr,k6e,ULr,JLr,YLr,It,DL,KLr,R6e,ZLr,e7r,Rf,o7r,S6e,r7r,t7r,P6e,a7r,n7r,s7r,$6e,l7r,i7r,NL,d7r,$o,qL,c7r,I6e,f7r,m7r,On,g7r,j6e,h7r,p7r,D6e,_7r,u7r,N6e,b7r,v7r,T7r,Se,VC,q6e,F7r,C7r,Nz,M7r,E7r,y7r,zC,O6e,w7r,A7r,qz,L7r,B7r,x7r,WC,G6e,k7r,R7r,Oz,S7r,P7r,$7r,QC,X6e,I7r,j7r,Gz,D7r,N7r,q7r,HC,V6e,O7r,G7r,Xz,X7r,V7r,z7r,UC,z6e,W7r,Q7r,Vz,H7r,U7r,J7r,JC,W6e,Y7r,K7r,zz,Z7r,e9r,o9r,YC,Q6e,r9r,t9r,Wz,a9r,n9r,s9r,H6e,l9r,i9r,OL,vSe,Sf,KC,U6e,GL,d9r,J6e,c9r,TSe,Gr,XL,f9r,Pf,m9r,Y6e,g9r,h9r,K6e,p9r,_9r,u9r,VL,b9r,Z6e,v9r,T9r,F9r,jt,zL,C9r,e0e,M9r,E9r,$f,y9r,o0e,w9r,A9r,r0e,L9r,B9r,x9r,t0e,k9r,R9r,WL,S9r,Io,QL,P9r,a0e,$9r,I9r,Gn,j9r,n0e,D9r,N9r,s0e,q9r,O9r,l0e,G9r,X9r,V9r,Pe,ZC,i0e,z9r,W9r,Qz,Q9r,H9r,U9r,eM,d0e,J9r,Y9r,Hz,K9r,Z9r,eBr,oM,c0e,oBr,rBr,Uz,tBr,aBr,nBr,rM,f0e,sBr,lBr,Jz,iBr,dBr,cBr,tM,m0e,fBr,mBr,Yz,gBr,hBr,pBr,aM,g0e,_Br,uBr,Kz,bBr,vBr,TBr,nM,h0e,FBr,CBr,Zz,MBr,EBr,yBr,sM,p0e,wBr,ABr,eW,LBr,BBr,xBr,_0e,kBr,RBr,HL,FSe,If,lM,u0e,UL,SBr,b0e,PBr,CSe,Xr,JL,$Br,jf,IBr,v0e,jBr,DBr,T0e,NBr,qBr,OBr,YL,GBr,F0e,XBr,VBr,zBr,Dt,KL,WBr,C0e,QBr,HBr,Df,UBr,M0e,JBr,YBr,E0e,KBr,ZBr,exr,y0e,oxr,rxr,ZL,txr,jo,e7,axr,w0e,nxr,sxr,Xn,lxr,A0e,ixr,dxr,L0e,cxr,fxr,B0e,mxr,gxr,hxr,x0e,iM,k0e,pxr,_xr,oW,uxr,bxr,vxr,R0e,Txr,Fxr,o7,MSe,Nf,dM,S0e,r7,Cxr,P0e,Mxr,ESe,Vr,t7,Exr,qf,yxr,$0e,wxr,Axr,I0e,Lxr,Bxr,xxr,a7,kxr,j0e,Rxr,Sxr,Pxr,Nt,n7,$xr,D0e,Ixr,jxr,Of,Dxr,N0e,Nxr,qxr,q0e,Oxr,Gxr,Xxr,O0e,Vxr,zxr,s7,Wxr,Do,l7,Qxr,G0e,Hxr,Uxr,Vn,Jxr,X0e,Yxr,Kxr,V0e,Zxr,ekr,z0e,okr,rkr,tkr,i7,cM,W0e,akr,nkr,rW,skr,lkr,ikr,fM,Q0e,dkr,ckr,tW,fkr,mkr,gkr,H0e,hkr,pkr,d7,ySe,Gf,mM,U0e,c7,_kr,J0e,ukr,wSe,zr,f7,bkr,Xf,vkr,Y0e,Tkr,Fkr,K0e,Ckr,Mkr,Ekr,m7,ykr,Z0e,wkr,Akr,Lkr,qt,g7,Bkr,eTe,xkr,kkr,Vf,Rkr,oTe,Skr,Pkr,rTe,$kr,Ikr,jkr,tTe,Dkr,Nkr,h7,qkr,No,p7,Okr,aTe,Gkr,Xkr,zn,Vkr,nTe,zkr,Wkr,sTe,Qkr,Hkr,lTe,Ukr,Jkr,Ykr,iTe,gM,dTe,Kkr,Zkr,aW,eRr,oRr,rRr,cTe,tRr,aRr,_7,ASe;return fe=new X({}),Va=new w({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),b4=new X({}),v4=new w({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Yf=new nRr({props:{warning:"&lcub;true}",$$slots:{default:[_Ct]},$$scope:{ctx:Xi}}}),T4=new X({}),F4=new M({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/configuration_auto.py#L533"}}),E4=new M({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/configuration_auto.py#L556",parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}]}}),y4=new w({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),w4=new M({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/configuration_auto.py#L678",parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}]}}),A4=new X({}),L4=new M({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/tokenization_auto.py#L352"}}),k4=new M({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/tokenization_auto.py#L366",parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16058/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}]}}),R4=new w({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),S4=new M({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/tokenization_auto.py#L562",parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}]}}),P4=new X({}),$4=new M({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/feature_extraction_auto.py#L172"}}),D4=new M({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/feature_extraction_auto.py#L186",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16058/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Dh=new nRr({props:{$$slots:{default:[uCt]},$$scope:{ctx:Xi}}}),N4=new w({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),q4=new M({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/feature_extraction_auto.py#L313",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}]}}),O4=new X({}),G4=new M({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/processing_auto.py#L71"}}),z4=new M({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/processing_auto.py#L85",parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Uh=new nRr({props:{$$slots:{default:[bCt]},$$scope:{ctx:Xi}}}),W4=new w({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),Q4=new M({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/processing_auto.py#L238",parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}]}}),H4=new X({}),U4=new M({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L701"}}),Y4=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),K4=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),Z4=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),eE=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),oE=new X({}),rE=new M({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L708"}}),aE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),nE=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),sE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),lE=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),iE=new X({}),dE=new M({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L723"}}),fE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),mE=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),gE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),hE=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),pE=new X({}),_E=new M({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L730"}}),bE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code>(Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),vE=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),TE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),FE=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),CE=new X({}),ME=new M({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L737"}}),yE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}]}}),wE=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),AE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),LE=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),BE=new X({}),xE=new M({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L746"}}),RE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),SE=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),PE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),$E=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),IE=new X({}),jE=new M({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L780"}}),NE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),qE=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),OE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),GE=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),XE=new X({}),VE=new M({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L787"}}),WE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}]}}),QE=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),HE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),UE=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),JE=new X({}),YE=new M({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L773"}}),ZE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),e3=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),o3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),r3=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),t3=new X({}),a3=new M({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L755"}}),s3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),l3=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),i3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),d3=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),c3=new X({}),f3=new M({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L762"}}),g3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),h3=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),p3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),_3=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),u3=new X({}),b3=new M({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L796"}}),T3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16058/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),F3=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),C3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),M3=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),E3=new X({}),y3=new M({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L835"}}),A3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),L3=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),B3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),x3=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),k3=new X({}),R3=new M({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L842"}}),P3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),$3=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),I3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),j3=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),D3=new X({}),N3=new M({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L865"}}),O3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),G3=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),X3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),V3=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),z3=new X({}),W3=new M({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L849"}}),H3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),U3=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),J3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Y3=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),K3=new X({}),Z3=new M({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L856"}}),oy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}]}}),ry=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),ty=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ny=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),sy=new X({}),ly=new M({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L874"}}),dy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),cy=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),fy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),my=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),gy=new X({}),hy=new M({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L881"}}),_y=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}]}}),uy=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),by=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),vy=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ty=new X({}),Fy=new M({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L828"}}),My=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}]}}),Ey=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),yy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),wy=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ay=new X({}),Ly=new M({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L803"}}),xy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}]}}),ky=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),Ry=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Sy=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Py=new X({}),$y=new M({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L810"}}),jy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}]}}),Dy=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),Ny=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Oy=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Gy=new X({}),Xy=new M({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L819"}}),zy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}]}}),Wy=new w({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),Qy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Hy=new w({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Uy=new X({}),Jy=new M({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_tf_auto.py#L374"}}),Ky=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Zy=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),ew=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ow=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),rw=new X({}),tw=new M({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_tf_auto.py#L381"}}),nw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),sw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),lw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),iw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),dw=new X({}),cw=new M({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_tf_auto.py#L396"}}),mw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),gw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),hw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),pw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),_w=new X({}),uw=new M({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),vw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),Tw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),Fw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Mw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ew=new X({}),yw=new M({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_tf_auto.py#L417"}}),Aw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),Lw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),Bw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),xw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),kw=new X({}),Rw=new M({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_tf_auto.py#L424"}}),Pw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),$w=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),Iw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),jw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Dw=new X({}),Nw=new M({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_tf_auto.py#L433"}}),Ow=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Gw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),Xw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Vw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),zw=new X({}),Ww=new M({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),Hw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Uw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),Jw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Yw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Kw=new X({}),Zw=new M({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_tf_auto.py#L449"}}),oA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),rA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),tA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),aA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),nA=new X({}),sA=new M({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_tf_auto.py#L460"}}),iA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),dA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),cA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),fA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),mA=new X({}),gA=new M({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_tf_auto.py#L442"}}),pA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),_A=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),uA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),bA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),vA=new X({}),TA=new M({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_tf_auto.py#L410"}}),CA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),MA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),EA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),yA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),wA=new X({}),AA=new M({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_tf_auto.py#L485"}}),BA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}]}}),xA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),kA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),RA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),SA=new X({}),PA=new M({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_flax_auto.py#L237"}}),IA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),jA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),DA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),NA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),qA=new X({}),OA=new M({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),XA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),VA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),zA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),WA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),QA=new X({}),HA=new M({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),JA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),YA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),KA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ZA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),eL=new X({}),oL=new M({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),tL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),aL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),nL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),sL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),lL=new X({}),iL=new M({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),cL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),fL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),mL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),gL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),hL=new X({}),pL=new M({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),uL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),bL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),vL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),TL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),FL=new X({}),CL=new M({props:{name:"class transformers.FlaxAutoModelForSpeechSeq2Seq",anchor:"transformers.FlaxAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_flax_auto.py#L331"}}),EL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/speech-encoder-decoder#transformers.FlaxSpeechEncoderDecoderModel">FlaxSpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}]}}),yL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSpeechSeq2Seq.from_config(config)`}}),wL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),AL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),LL=new X({}),BL=new M({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),kL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),RL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),SL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),PL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),$L=new X({}),IL=new M({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),DL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),NL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),qL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),OL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),GL=new X({}),XL=new M({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),zL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),WL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),QL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),HL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),UL=new X({}),JL=new M({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),KL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}]}}),ZL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),e7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),o7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),r7=new X({}),t7=new M({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),n7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),s7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),l7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),d7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),c7=new X({}),f7=new M({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),g7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),h7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),p7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),_7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){J=a("meta"),$e=l(),de=a("h1"),pe=a("a"),io=a("span"),f(fe.$$.fragment),Me=l(),zo=a("span"),Vi=o("Auto Classes"),Wf=l(),ha=a("p"),zi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Wi=a("code"),h4=o("from_pretrained()"),Qf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Be=l(),co=a("p"),Qi=o("Instantiating one of "),Wn=a("a"),p4=o("AutoConfig"),Qn=o(", "),Hn=a("a"),_4=o("AutoModel"),Hi=o(`, and
`),Un=a("a"),u4=o("AutoTokenizer"),Ui=o(" will directly create a class of the relevant architecture. For instance"),Hf=l(),f(Va.$$.fragment),fo=l(),_e=a("p"),h9=o("will create a model that is an instance of "),Ji=a("a"),p9=o("BertModel"),_9=o("."),Wo=l(),za=a("p"),u9=o("There is one class of "),Uf=a("code"),b9=o("AutoModel"),G$e=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Eke=l(),Yi=a("h2"),Jf=a("a"),ZQ=a("span"),f(b4.$$.fragment),X$e=l(),eH=a("span"),V$e=o("Extending the Auto Classes"),yke=l(),Jn=a("p"),z$e=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),oH=a("code"),W$e=o("NewModel"),Q$e=o(", make sure you have a "),rH=a("code"),H$e=o("NewModelConfig"),U$e=o(` then you can add those to the auto
classes like this:`),wke=l(),f(v4.$$.fragment),Ake=l(),v9=a("p"),J$e=o("You will then be able to use the auto classes like you would usually do!"),Lke=l(),f(Yf.$$.fragment),Bke=l(),Ki=a("h2"),Kf=a("a"),tH=a("span"),f(T4.$$.fragment),Y$e=l(),aH=a("span"),K$e=o("AutoConfig"),xke=l(),Qo=a("div"),f(F4.$$.fragment),Z$e=l(),C4=a("p"),eIe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),T9=a("a"),oIe=o("from_pretrained()"),rIe=o(" class method."),tIe=l(),M4=a("p"),aIe=o("This class cannot be instantiated directly using "),nH=a("code"),nIe=o("__init__()"),sIe=o(" (throws an error)."),lIe=l(),mo=a("div"),f(E4.$$.fragment),iIe=l(),sH=a("p"),dIe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),cIe=l(),Zi=a("p"),fIe=o("The configuration class to instantiate is selected based on the "),lH=a("code"),mIe=o("model_type"),gIe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),iH=a("code"),hIe=o("pretrained_model_name_or_path"),pIe=o(":"),_Ie=l(),v=a("ul"),Zf=a("li"),dH=a("strong"),uIe=o("albert"),bIe=o(" \u2014 "),F9=a("a"),vIe=o("AlbertConfig"),TIe=o(" (ALBERT model)"),FIe=l(),em=a("li"),cH=a("strong"),CIe=o("bart"),MIe=o(" \u2014 "),C9=a("a"),EIe=o("BartConfig"),yIe=o(" (BART model)"),wIe=l(),om=a("li"),fH=a("strong"),AIe=o("beit"),LIe=o(" \u2014 "),M9=a("a"),BIe=o("BeitConfig"),xIe=o(" (BEiT model)"),kIe=l(),rm=a("li"),mH=a("strong"),RIe=o("bert"),SIe=o(" \u2014 "),E9=a("a"),PIe=o("BertConfig"),$Ie=o(" (BERT model)"),IIe=l(),tm=a("li"),gH=a("strong"),jIe=o("bert-generation"),DIe=o(" \u2014 "),y9=a("a"),NIe=o("BertGenerationConfig"),qIe=o(" (Bert Generation model)"),OIe=l(),am=a("li"),hH=a("strong"),GIe=o("big_bird"),XIe=o(" \u2014 "),w9=a("a"),VIe=o("BigBirdConfig"),zIe=o(" (BigBird model)"),WIe=l(),nm=a("li"),pH=a("strong"),QIe=o("bigbird_pegasus"),HIe=o(" \u2014 "),A9=a("a"),UIe=o("BigBirdPegasusConfig"),JIe=o(" (BigBirdPegasus model)"),YIe=l(),sm=a("li"),_H=a("strong"),KIe=o("blenderbot"),ZIe=o(" \u2014 "),L9=a("a"),eje=o("BlenderbotConfig"),oje=o(" (Blenderbot model)"),rje=l(),lm=a("li"),uH=a("strong"),tje=o("blenderbot-small"),aje=o(" \u2014 "),B9=a("a"),nje=o("BlenderbotSmallConfig"),sje=o(" (BlenderbotSmall model)"),lje=l(),im=a("li"),bH=a("strong"),ije=o("camembert"),dje=o(" \u2014 "),x9=a("a"),cje=o("CamembertConfig"),fje=o(" (CamemBERT model)"),mje=l(),dm=a("li"),vH=a("strong"),gje=o("canine"),hje=o(" \u2014 "),k9=a("a"),pje=o("CanineConfig"),_je=o(" (Canine model)"),uje=l(),cm=a("li"),TH=a("strong"),bje=o("clip"),vje=o(" \u2014 "),R9=a("a"),Tje=o("CLIPConfig"),Fje=o(" (CLIP model)"),Cje=l(),fm=a("li"),FH=a("strong"),Mje=o("convbert"),Eje=o(" \u2014 "),S9=a("a"),yje=o("ConvBertConfig"),wje=o(" (ConvBERT model)"),Aje=l(),mm=a("li"),CH=a("strong"),Lje=o("convnext"),Bje=o(" \u2014 "),P9=a("a"),xje=o("ConvNextConfig"),kje=o(" (ConvNext model)"),Rje=l(),gm=a("li"),MH=a("strong"),Sje=o("ctrl"),Pje=o(" \u2014 "),$9=a("a"),$je=o("CTRLConfig"),Ije=o(" (CTRL model)"),jje=l(),hm=a("li"),EH=a("strong"),Dje=o("data2vec-audio"),Nje=o(" \u2014 "),I9=a("a"),qje=o("Data2VecAudioConfig"),Oje=o(" (Data2VecAudio model)"),Gje=l(),pm=a("li"),yH=a("strong"),Xje=o("data2vec-text"),Vje=o(" \u2014 "),j9=a("a"),zje=o("Data2VecTextConfig"),Wje=o(" (Data2VecText model)"),Qje=l(),_m=a("li"),wH=a("strong"),Hje=o("deberta"),Uje=o(" \u2014 "),D9=a("a"),Jje=o("DebertaConfig"),Yje=o(" (DeBERTa model)"),Kje=l(),um=a("li"),AH=a("strong"),Zje=o("deberta-v2"),eDe=o(" \u2014 "),N9=a("a"),oDe=o("DebertaV2Config"),rDe=o(" (DeBERTa-v2 model)"),tDe=l(),bm=a("li"),LH=a("strong"),aDe=o("deit"),nDe=o(" \u2014 "),q9=a("a"),sDe=o("DeiTConfig"),lDe=o(" (DeiT model)"),iDe=l(),vm=a("li"),BH=a("strong"),dDe=o("detr"),cDe=o(" \u2014 "),O9=a("a"),fDe=o("DetrConfig"),mDe=o(" (DETR model)"),gDe=l(),Tm=a("li"),xH=a("strong"),hDe=o("distilbert"),pDe=o(" \u2014 "),G9=a("a"),_De=o("DistilBertConfig"),uDe=o(" (DistilBERT model)"),bDe=l(),Fm=a("li"),kH=a("strong"),vDe=o("dpr"),TDe=o(" \u2014 "),X9=a("a"),FDe=o("DPRConfig"),CDe=o(" (DPR model)"),MDe=l(),Cm=a("li"),RH=a("strong"),EDe=o("electra"),yDe=o(" \u2014 "),V9=a("a"),wDe=o("ElectraConfig"),ADe=o(" (ELECTRA model)"),LDe=l(),Mm=a("li"),SH=a("strong"),BDe=o("encoder-decoder"),xDe=o(" \u2014 "),z9=a("a"),kDe=o("EncoderDecoderConfig"),RDe=o(" (Encoder decoder model)"),SDe=l(),Em=a("li"),PH=a("strong"),PDe=o("flaubert"),$De=o(" \u2014 "),W9=a("a"),IDe=o("FlaubertConfig"),jDe=o(" (FlauBERT model)"),DDe=l(),ym=a("li"),$H=a("strong"),NDe=o("fnet"),qDe=o(" \u2014 "),Q9=a("a"),ODe=o("FNetConfig"),GDe=o(" (FNet model)"),XDe=l(),wm=a("li"),IH=a("strong"),VDe=o("fsmt"),zDe=o(" \u2014 "),H9=a("a"),WDe=o("FSMTConfig"),QDe=o(" (FairSeq Machine-Translation model)"),HDe=l(),Am=a("li"),jH=a("strong"),UDe=o("funnel"),JDe=o(" \u2014 "),U9=a("a"),YDe=o("FunnelConfig"),KDe=o(" (Funnel Transformer model)"),ZDe=l(),Lm=a("li"),DH=a("strong"),eNe=o("gpt2"),oNe=o(" \u2014 "),J9=a("a"),rNe=o("GPT2Config"),tNe=o(" (OpenAI GPT-2 model)"),aNe=l(),Bm=a("li"),NH=a("strong"),nNe=o("gpt_neo"),sNe=o(" \u2014 "),Y9=a("a"),lNe=o("GPTNeoConfig"),iNe=o(" (GPT Neo model)"),dNe=l(),xm=a("li"),qH=a("strong"),cNe=o("gptj"),fNe=o(" \u2014 "),K9=a("a"),mNe=o("GPTJConfig"),gNe=o(" (GPT-J model)"),hNe=l(),km=a("li"),OH=a("strong"),pNe=o("hubert"),_Ne=o(" \u2014 "),Z9=a("a"),uNe=o("HubertConfig"),bNe=o(" (Hubert model)"),vNe=l(),Rm=a("li"),GH=a("strong"),TNe=o("ibert"),FNe=o(" \u2014 "),eB=a("a"),CNe=o("IBertConfig"),MNe=o(" (I-BERT model)"),ENe=l(),Sm=a("li"),XH=a("strong"),yNe=o("imagegpt"),wNe=o(" \u2014 "),oB=a("a"),ANe=o("ImageGPTConfig"),LNe=o(" (ImageGPT model)"),BNe=l(),Pm=a("li"),VH=a("strong"),xNe=o("layoutlm"),kNe=o(" \u2014 "),rB=a("a"),RNe=o("LayoutLMConfig"),SNe=o(" (LayoutLM model)"),PNe=l(),$m=a("li"),zH=a("strong"),$Ne=o("layoutlmv2"),INe=o(" \u2014 "),tB=a("a"),jNe=o("LayoutLMv2Config"),DNe=o(" (LayoutLMv2 model)"),NNe=l(),Im=a("li"),WH=a("strong"),qNe=o("led"),ONe=o(" \u2014 "),aB=a("a"),GNe=o("LEDConfig"),XNe=o(" (LED model)"),VNe=l(),jm=a("li"),QH=a("strong"),zNe=o("longformer"),WNe=o(" \u2014 "),nB=a("a"),QNe=o("LongformerConfig"),HNe=o(" (Longformer model)"),UNe=l(),Dm=a("li"),HH=a("strong"),JNe=o("luke"),YNe=o(" \u2014 "),sB=a("a"),KNe=o("LukeConfig"),ZNe=o(" (LUKE model)"),eqe=l(),Nm=a("li"),UH=a("strong"),oqe=o("lxmert"),rqe=o(" \u2014 "),lB=a("a"),tqe=o("LxmertConfig"),aqe=o(" (LXMERT model)"),nqe=l(),qm=a("li"),JH=a("strong"),sqe=o("m2m_100"),lqe=o(" \u2014 "),iB=a("a"),iqe=o("M2M100Config"),dqe=o(" (M2M100 model)"),cqe=l(),Om=a("li"),YH=a("strong"),fqe=o("marian"),mqe=o(" \u2014 "),dB=a("a"),gqe=o("MarianConfig"),hqe=o(" (Marian model)"),pqe=l(),Gm=a("li"),KH=a("strong"),_qe=o("maskformer"),uqe=o(" \u2014 "),cB=a("a"),bqe=o("MaskFormerConfig"),vqe=o(" (MaskFormer model)"),Tqe=l(),Xm=a("li"),ZH=a("strong"),Fqe=o("mbart"),Cqe=o(" \u2014 "),fB=a("a"),Mqe=o("MBartConfig"),Eqe=o(" (mBART model)"),yqe=l(),Vm=a("li"),eU=a("strong"),wqe=o("megatron-bert"),Aqe=o(" \u2014 "),mB=a("a"),Lqe=o("MegatronBertConfig"),Bqe=o(" (MegatronBert model)"),xqe=l(),zm=a("li"),oU=a("strong"),kqe=o("mobilebert"),Rqe=o(" \u2014 "),gB=a("a"),Sqe=o("MobileBertConfig"),Pqe=o(" (MobileBERT model)"),$qe=l(),Wm=a("li"),rU=a("strong"),Iqe=o("mpnet"),jqe=o(" \u2014 "),hB=a("a"),Dqe=o("MPNetConfig"),Nqe=o(" (MPNet model)"),qqe=l(),Qm=a("li"),tU=a("strong"),Oqe=o("mt5"),Gqe=o(" \u2014 "),pB=a("a"),Xqe=o("MT5Config"),Vqe=o(" (mT5 model)"),zqe=l(),Hm=a("li"),aU=a("strong"),Wqe=o("nystromformer"),Qqe=o(" \u2014 "),_B=a("a"),Hqe=o("NystromformerConfig"),Uqe=o(" (Nystromformer model)"),Jqe=l(),Um=a("li"),nU=a("strong"),Yqe=o("openai-gpt"),Kqe=o(" \u2014 "),uB=a("a"),Zqe=o("OpenAIGPTConfig"),eOe=o(" (OpenAI GPT model)"),oOe=l(),Jm=a("li"),sU=a("strong"),rOe=o("pegasus"),tOe=o(" \u2014 "),bB=a("a"),aOe=o("PegasusConfig"),nOe=o(" (Pegasus model)"),sOe=l(),Ym=a("li"),lU=a("strong"),lOe=o("perceiver"),iOe=o(" \u2014 "),vB=a("a"),dOe=o("PerceiverConfig"),cOe=o(" (Perceiver model)"),fOe=l(),Km=a("li"),iU=a("strong"),mOe=o("plbart"),gOe=o(" \u2014 "),TB=a("a"),hOe=o("PLBartConfig"),pOe=o(" (PLBart model)"),_Oe=l(),Zm=a("li"),dU=a("strong"),uOe=o("poolformer"),bOe=o(" \u2014 "),FB=a("a"),vOe=o("PoolFormerConfig"),TOe=o(" (PoolFormer model)"),FOe=l(),eg=a("li"),cU=a("strong"),COe=o("prophetnet"),MOe=o(" \u2014 "),CB=a("a"),EOe=o("ProphetNetConfig"),yOe=o(" (ProphetNet model)"),wOe=l(),og=a("li"),fU=a("strong"),AOe=o("qdqbert"),LOe=o(" \u2014 "),MB=a("a"),BOe=o("QDQBertConfig"),xOe=o(" (QDQBert model)"),kOe=l(),rg=a("li"),mU=a("strong"),ROe=o("rag"),SOe=o(" \u2014 "),EB=a("a"),POe=o("RagConfig"),$Oe=o(" (RAG model)"),IOe=l(),tg=a("li"),gU=a("strong"),jOe=o("realm"),DOe=o(" \u2014 "),yB=a("a"),NOe=o("RealmConfig"),qOe=o(" (Realm model)"),OOe=l(),ag=a("li"),hU=a("strong"),GOe=o("reformer"),XOe=o(" \u2014 "),wB=a("a"),VOe=o("ReformerConfig"),zOe=o(" (Reformer model)"),WOe=l(),ng=a("li"),pU=a("strong"),QOe=o("rembert"),HOe=o(" \u2014 "),AB=a("a"),UOe=o("RemBertConfig"),JOe=o(" (RemBERT model)"),YOe=l(),sg=a("li"),_U=a("strong"),KOe=o("resnet"),ZOe=o(" \u2014 "),LB=a("a"),eGe=o("ResNetConfig"),oGe=o(" (ResNet model)"),rGe=l(),lg=a("li"),uU=a("strong"),tGe=o("retribert"),aGe=o(" \u2014 "),BB=a("a"),nGe=o("RetriBertConfig"),sGe=o(" (RetriBERT model)"),lGe=l(),ig=a("li"),bU=a("strong"),iGe=o("roberta"),dGe=o(" \u2014 "),xB=a("a"),cGe=o("RobertaConfig"),fGe=o(" (RoBERTa model)"),mGe=l(),dg=a("li"),vU=a("strong"),gGe=o("roformer"),hGe=o(" \u2014 "),kB=a("a"),pGe=o("RoFormerConfig"),_Ge=o(" (RoFormer model)"),uGe=l(),cg=a("li"),TU=a("strong"),bGe=o("segformer"),vGe=o(" \u2014 "),RB=a("a"),TGe=o("SegformerConfig"),FGe=o(" (SegFormer model)"),CGe=l(),fg=a("li"),FU=a("strong"),MGe=o("sew"),EGe=o(" \u2014 "),SB=a("a"),yGe=o("SEWConfig"),wGe=o(" (SEW model)"),AGe=l(),mg=a("li"),CU=a("strong"),LGe=o("sew-d"),BGe=o(" \u2014 "),PB=a("a"),xGe=o("SEWDConfig"),kGe=o(" (SEW-D model)"),RGe=l(),gg=a("li"),MU=a("strong"),SGe=o("speech-encoder-decoder"),PGe=o(" \u2014 "),$B=a("a"),$Ge=o("SpeechEncoderDecoderConfig"),IGe=o(" (Speech Encoder decoder model)"),jGe=l(),hg=a("li"),EU=a("strong"),DGe=o("speech_to_text"),NGe=o(" \u2014 "),IB=a("a"),qGe=o("Speech2TextConfig"),OGe=o(" (Speech2Text model)"),GGe=l(),pg=a("li"),yU=a("strong"),XGe=o("speech_to_text_2"),VGe=o(" \u2014 "),jB=a("a"),zGe=o("Speech2Text2Config"),WGe=o(" (Speech2Text2 model)"),QGe=l(),_g=a("li"),wU=a("strong"),HGe=o("splinter"),UGe=o(" \u2014 "),DB=a("a"),JGe=o("SplinterConfig"),YGe=o(" (Splinter model)"),KGe=l(),ug=a("li"),AU=a("strong"),ZGe=o("squeezebert"),eXe=o(" \u2014 "),NB=a("a"),oXe=o("SqueezeBertConfig"),rXe=o(" (SqueezeBERT model)"),tXe=l(),bg=a("li"),LU=a("strong"),aXe=o("swin"),nXe=o(" \u2014 "),qB=a("a"),sXe=o("SwinConfig"),lXe=o(" (Swin model)"),iXe=l(),vg=a("li"),BU=a("strong"),dXe=o("t5"),cXe=o(" \u2014 "),OB=a("a"),fXe=o("T5Config"),mXe=o(" (T5 model)"),gXe=l(),Tg=a("li"),xU=a("strong"),hXe=o("tapas"),pXe=o(" \u2014 "),GB=a("a"),_Xe=o("TapasConfig"),uXe=o(" (TAPAS model)"),bXe=l(),Fg=a("li"),kU=a("strong"),vXe=o("transfo-xl"),TXe=o(" \u2014 "),XB=a("a"),FXe=o("TransfoXLConfig"),CXe=o(" (Transformer-XL model)"),MXe=l(),Cg=a("li"),RU=a("strong"),EXe=o("trocr"),yXe=o(" \u2014 "),VB=a("a"),wXe=o("TrOCRConfig"),AXe=o(" (TrOCR model)"),LXe=l(),Mg=a("li"),SU=a("strong"),BXe=o("unispeech"),xXe=o(" \u2014 "),zB=a("a"),kXe=o("UniSpeechConfig"),RXe=o(" (UniSpeech model)"),SXe=l(),Eg=a("li"),PU=a("strong"),PXe=o("unispeech-sat"),$Xe=o(" \u2014 "),WB=a("a"),IXe=o("UniSpeechSatConfig"),jXe=o(" (UniSpeechSat model)"),DXe=l(),yg=a("li"),$U=a("strong"),NXe=o("van"),qXe=o(" \u2014 "),QB=a("a"),OXe=o("VanConfig"),GXe=o(" (VAN model)"),XXe=l(),wg=a("li"),IU=a("strong"),VXe=o("vilt"),zXe=o(" \u2014 "),HB=a("a"),WXe=o("ViltConfig"),QXe=o(" (ViLT model)"),HXe=l(),Ag=a("li"),jU=a("strong"),UXe=o("vision-encoder-decoder"),JXe=o(" \u2014 "),UB=a("a"),YXe=o("VisionEncoderDecoderConfig"),KXe=o(" (Vision Encoder decoder model)"),ZXe=l(),Lg=a("li"),DU=a("strong"),eVe=o("vision-text-dual-encoder"),oVe=o(" \u2014 "),JB=a("a"),rVe=o("VisionTextDualEncoderConfig"),tVe=o(" (VisionTextDualEncoder model)"),aVe=l(),Bg=a("li"),NU=a("strong"),nVe=o("visual_bert"),sVe=o(" \u2014 "),YB=a("a"),lVe=o("VisualBertConfig"),iVe=o(" (VisualBert model)"),dVe=l(),xg=a("li"),qU=a("strong"),cVe=o("vit"),fVe=o(" \u2014 "),KB=a("a"),mVe=o("ViTConfig"),gVe=o(" (ViT model)"),hVe=l(),kg=a("li"),OU=a("strong"),pVe=o("vit_mae"),_Ve=o(" \u2014 "),ZB=a("a"),uVe=o("ViTMAEConfig"),bVe=o(" (ViTMAE model)"),vVe=l(),Rg=a("li"),GU=a("strong"),TVe=o("wav2vec2"),FVe=o(" \u2014 "),ex=a("a"),CVe=o("Wav2Vec2Config"),MVe=o(" (Wav2Vec2 model)"),EVe=l(),Sg=a("li"),XU=a("strong"),yVe=o("wavlm"),wVe=o(" \u2014 "),ox=a("a"),AVe=o("WavLMConfig"),LVe=o(" (WavLM model)"),BVe=l(),Pg=a("li"),VU=a("strong"),xVe=o("xglm"),kVe=o(" \u2014 "),rx=a("a"),RVe=o("XGLMConfig"),SVe=o(" (XGLM model)"),PVe=l(),$g=a("li"),zU=a("strong"),$Ve=o("xlm"),IVe=o(" \u2014 "),tx=a("a"),jVe=o("XLMConfig"),DVe=o(" (XLM model)"),NVe=l(),Ig=a("li"),WU=a("strong"),qVe=o("xlm-prophetnet"),OVe=o(" \u2014 "),ax=a("a"),GVe=o("XLMProphetNetConfig"),XVe=o(" (XLMProphetNet model)"),VVe=l(),jg=a("li"),QU=a("strong"),zVe=o("xlm-roberta"),WVe=o(" \u2014 "),nx=a("a"),QVe=o("XLMRobertaConfig"),HVe=o(" (XLM-RoBERTa model)"),UVe=l(),Dg=a("li"),HU=a("strong"),JVe=o("xlm-roberta-xl"),YVe=o(" \u2014 "),sx=a("a"),KVe=o("XLMRobertaXLConfig"),ZVe=o(" (XLM-RoBERTa-XL model)"),eze=l(),Ng=a("li"),UU=a("strong"),oze=o("xlnet"),rze=o(" \u2014 "),lx=a("a"),tze=o("XLNetConfig"),aze=o(" (XLNet model)"),nze=l(),qg=a("li"),JU=a("strong"),sze=o("yoso"),lze=o(" \u2014 "),ix=a("a"),ize=o("YosoConfig"),dze=o(" (YOSO model)"),cze=l(),YU=a("p"),fze=o("Examples:"),mze=l(),f(y4.$$.fragment),gze=l(),Og=a("div"),f(w4.$$.fragment),hze=l(),KU=a("p"),pze=o("Register a new configuration for this class."),kke=l(),ed=a("h2"),Gg=a("a"),ZU=a("span"),f(A4.$$.fragment),_ze=l(),eJ=a("span"),uze=o("AutoTokenizer"),Rke=l(),Ho=a("div"),f(L4.$$.fragment),bze=l(),B4=a("p"),vze=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),dx=a("a"),Tze=o("AutoTokenizer.from_pretrained()"),Fze=o(" class method."),Cze=l(),x4=a("p"),Mze=o("This class cannot be instantiated directly using "),oJ=a("code"),Eze=o("__init__()"),yze=o(" (throws an error)."),wze=l(),go=a("div"),f(k4.$$.fragment),Aze=l(),rJ=a("p"),Lze=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Bze=l(),Wa=a("p"),xze=o("The tokenizer class to instantiate is selected based on the "),tJ=a("code"),kze=o("model_type"),Rze=o(` property of the config object (either
passed as an argument or loaded from `),aJ=a("code"),Sze=o("pretrained_model_name_or_path"),Pze=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nJ=a("code"),$ze=o("pretrained_model_name_or_path"),Ize=o(":"),jze=l(),E=a("ul"),Yn=a("li"),sJ=a("strong"),Dze=o("albert"),Nze=o(" \u2014 "),cx=a("a"),qze=o("AlbertTokenizer"),Oze=o(" or "),fx=a("a"),Gze=o("AlbertTokenizerFast"),Xze=o(" (ALBERT model)"),Vze=l(),Kn=a("li"),lJ=a("strong"),zze=o("bart"),Wze=o(" \u2014 "),mx=a("a"),Qze=o("BartTokenizer"),Hze=o(" or "),gx=a("a"),Uze=o("BartTokenizerFast"),Jze=o(" (BART model)"),Yze=l(),Zn=a("li"),iJ=a("strong"),Kze=o("barthez"),Zze=o(" \u2014 "),hx=a("a"),eWe=o("BarthezTokenizer"),oWe=o(" or "),px=a("a"),rWe=o("BarthezTokenizerFast"),tWe=o(" (BARThez model)"),aWe=l(),Xg=a("li"),dJ=a("strong"),nWe=o("bartpho"),sWe=o(" \u2014 "),_x=a("a"),lWe=o("BartphoTokenizer"),iWe=o(" (BARTpho model)"),dWe=l(),es=a("li"),cJ=a("strong"),cWe=o("bert"),fWe=o(" \u2014 "),ux=a("a"),mWe=o("BertTokenizer"),gWe=o(" or "),bx=a("a"),hWe=o("BertTokenizerFast"),pWe=o(" (BERT model)"),_We=l(),Vg=a("li"),fJ=a("strong"),uWe=o("bert-generation"),bWe=o(" \u2014 "),vx=a("a"),vWe=o("BertGenerationTokenizer"),TWe=o(" (Bert Generation model)"),FWe=l(),zg=a("li"),mJ=a("strong"),CWe=o("bert-japanese"),MWe=o(" \u2014 "),Tx=a("a"),EWe=o("BertJapaneseTokenizer"),yWe=o(" (BertJapanese model)"),wWe=l(),Wg=a("li"),gJ=a("strong"),AWe=o("bertweet"),LWe=o(" \u2014 "),Fx=a("a"),BWe=o("BertweetTokenizer"),xWe=o(" (Bertweet model)"),kWe=l(),os=a("li"),hJ=a("strong"),RWe=o("big_bird"),SWe=o(" \u2014 "),Cx=a("a"),PWe=o("BigBirdTokenizer"),$We=o(" or "),Mx=a("a"),IWe=o("BigBirdTokenizerFast"),jWe=o(" (BigBird model)"),DWe=l(),rs=a("li"),pJ=a("strong"),NWe=o("bigbird_pegasus"),qWe=o(" \u2014 "),Ex=a("a"),OWe=o("PegasusTokenizer"),GWe=o(" or "),yx=a("a"),XWe=o("PegasusTokenizerFast"),VWe=o(" (BigBirdPegasus model)"),zWe=l(),ts=a("li"),_J=a("strong"),WWe=o("blenderbot"),QWe=o(" \u2014 "),wx=a("a"),HWe=o("BlenderbotTokenizer"),UWe=o(" or "),Ax=a("a"),JWe=o("BlenderbotTokenizerFast"),YWe=o(" (Blenderbot model)"),KWe=l(),Qg=a("li"),uJ=a("strong"),ZWe=o("blenderbot-small"),eQe=o(" \u2014 "),Lx=a("a"),oQe=o("BlenderbotSmallTokenizer"),rQe=o(" (BlenderbotSmall model)"),tQe=l(),Hg=a("li"),bJ=a("strong"),aQe=o("byt5"),nQe=o(" \u2014 "),Bx=a("a"),sQe=o("ByT5Tokenizer"),lQe=o(" (ByT5 model)"),iQe=l(),as=a("li"),vJ=a("strong"),dQe=o("camembert"),cQe=o(" \u2014 "),xx=a("a"),fQe=o("CamembertTokenizer"),mQe=o(" or "),kx=a("a"),gQe=o("CamembertTokenizerFast"),hQe=o(" (CamemBERT model)"),pQe=l(),Ug=a("li"),TJ=a("strong"),_Qe=o("canine"),uQe=o(" \u2014 "),Rx=a("a"),bQe=o("CanineTokenizer"),vQe=o(" (Canine model)"),TQe=l(),ns=a("li"),FJ=a("strong"),FQe=o("clip"),CQe=o(" \u2014 "),Sx=a("a"),MQe=o("CLIPTokenizer"),EQe=o(" or "),Px=a("a"),yQe=o("CLIPTokenizerFast"),wQe=o(" (CLIP model)"),AQe=l(),ss=a("li"),CJ=a("strong"),LQe=o("convbert"),BQe=o(" \u2014 "),$x=a("a"),xQe=o("ConvBertTokenizer"),kQe=o(" or "),Ix=a("a"),RQe=o("ConvBertTokenizerFast"),SQe=o(" (ConvBERT model)"),PQe=l(),ls=a("li"),MJ=a("strong"),$Qe=o("cpm"),IQe=o(" \u2014 "),jx=a("a"),jQe=o("CpmTokenizer"),DQe=o(" or "),EJ=a("code"),NQe=o("CpmTokenizerFast"),qQe=o(" (CPM model)"),OQe=l(),Jg=a("li"),yJ=a("strong"),GQe=o("ctrl"),XQe=o(" \u2014 "),Dx=a("a"),VQe=o("CTRLTokenizer"),zQe=o(" (CTRL model)"),WQe=l(),is=a("li"),wJ=a("strong"),QQe=o("deberta"),HQe=o(" \u2014 "),Nx=a("a"),UQe=o("DebertaTokenizer"),JQe=o(" or "),qx=a("a"),YQe=o("DebertaTokenizerFast"),KQe=o(" (DeBERTa model)"),ZQe=l(),Yg=a("li"),AJ=a("strong"),eHe=o("deberta-v2"),oHe=o(" \u2014 "),Ox=a("a"),rHe=o("DebertaV2Tokenizer"),tHe=o(" (DeBERTa-v2 model)"),aHe=l(),ds=a("li"),LJ=a("strong"),nHe=o("distilbert"),sHe=o(" \u2014 "),Gx=a("a"),lHe=o("DistilBertTokenizer"),iHe=o(" or "),Xx=a("a"),dHe=o("DistilBertTokenizerFast"),cHe=o(" (DistilBERT model)"),fHe=l(),cs=a("li"),BJ=a("strong"),mHe=o("dpr"),gHe=o(" \u2014 "),Vx=a("a"),hHe=o("DPRQuestionEncoderTokenizer"),pHe=o(" or "),zx=a("a"),_He=o("DPRQuestionEncoderTokenizerFast"),uHe=o(" (DPR model)"),bHe=l(),fs=a("li"),xJ=a("strong"),vHe=o("electra"),THe=o(" \u2014 "),Wx=a("a"),FHe=o("ElectraTokenizer"),CHe=o(" or "),Qx=a("a"),MHe=o("ElectraTokenizerFast"),EHe=o(" (ELECTRA model)"),yHe=l(),Kg=a("li"),kJ=a("strong"),wHe=o("flaubert"),AHe=o(" \u2014 "),Hx=a("a"),LHe=o("FlaubertTokenizer"),BHe=o(" (FlauBERT model)"),xHe=l(),ms=a("li"),RJ=a("strong"),kHe=o("fnet"),RHe=o(" \u2014 "),Ux=a("a"),SHe=o("FNetTokenizer"),PHe=o(" or "),Jx=a("a"),$He=o("FNetTokenizerFast"),IHe=o(" (FNet model)"),jHe=l(),Zg=a("li"),SJ=a("strong"),DHe=o("fsmt"),NHe=o(" \u2014 "),Yx=a("a"),qHe=o("FSMTTokenizer"),OHe=o(" (FairSeq Machine-Translation model)"),GHe=l(),gs=a("li"),PJ=a("strong"),XHe=o("funnel"),VHe=o(" \u2014 "),Kx=a("a"),zHe=o("FunnelTokenizer"),WHe=o(" or "),Zx=a("a"),QHe=o("FunnelTokenizerFast"),HHe=o(" (Funnel Transformer model)"),UHe=l(),hs=a("li"),$J=a("strong"),JHe=o("gpt2"),YHe=o(" \u2014 "),ek=a("a"),KHe=o("GPT2Tokenizer"),ZHe=o(" or "),ok=a("a"),eUe=o("GPT2TokenizerFast"),oUe=o(" (OpenAI GPT-2 model)"),rUe=l(),ps=a("li"),IJ=a("strong"),tUe=o("gpt_neo"),aUe=o(" \u2014 "),rk=a("a"),nUe=o("GPT2Tokenizer"),sUe=o(" or "),tk=a("a"),lUe=o("GPT2TokenizerFast"),iUe=o(" (GPT Neo model)"),dUe=l(),_s=a("li"),jJ=a("strong"),cUe=o("herbert"),fUe=o(" \u2014 "),ak=a("a"),mUe=o("HerbertTokenizer"),gUe=o(" or "),nk=a("a"),hUe=o("HerbertTokenizerFast"),pUe=o(" (HerBERT model)"),_Ue=l(),eh=a("li"),DJ=a("strong"),uUe=o("hubert"),bUe=o(" \u2014 "),sk=a("a"),vUe=o("Wav2Vec2CTCTokenizer"),TUe=o(" (Hubert model)"),FUe=l(),us=a("li"),NJ=a("strong"),CUe=o("ibert"),MUe=o(" \u2014 "),lk=a("a"),EUe=o("RobertaTokenizer"),yUe=o(" or "),ik=a("a"),wUe=o("RobertaTokenizerFast"),AUe=o(" (I-BERT model)"),LUe=l(),bs=a("li"),qJ=a("strong"),BUe=o("layoutlm"),xUe=o(" \u2014 "),dk=a("a"),kUe=o("LayoutLMTokenizer"),RUe=o(" or "),ck=a("a"),SUe=o("LayoutLMTokenizerFast"),PUe=o(" (LayoutLM model)"),$Ue=l(),vs=a("li"),OJ=a("strong"),IUe=o("layoutlmv2"),jUe=o(" \u2014 "),fk=a("a"),DUe=o("LayoutLMv2Tokenizer"),NUe=o(" or "),mk=a("a"),qUe=o("LayoutLMv2TokenizerFast"),OUe=o(" (LayoutLMv2 model)"),GUe=l(),Ts=a("li"),GJ=a("strong"),XUe=o("layoutxlm"),VUe=o(" \u2014 "),gk=a("a"),zUe=o("LayoutXLMTokenizer"),WUe=o(" or "),hk=a("a"),QUe=o("LayoutXLMTokenizerFast"),HUe=o(" (LayoutXLM model)"),UUe=l(),Fs=a("li"),XJ=a("strong"),JUe=o("led"),YUe=o(" \u2014 "),pk=a("a"),KUe=o("LEDTokenizer"),ZUe=o(" or "),_k=a("a"),eJe=o("LEDTokenizerFast"),oJe=o(" (LED model)"),rJe=l(),Cs=a("li"),VJ=a("strong"),tJe=o("longformer"),aJe=o(" \u2014 "),uk=a("a"),nJe=o("LongformerTokenizer"),sJe=o(" or "),bk=a("a"),lJe=o("LongformerTokenizerFast"),iJe=o(" (Longformer model)"),dJe=l(),oh=a("li"),zJ=a("strong"),cJe=o("luke"),fJe=o(" \u2014 "),vk=a("a"),mJe=o("LukeTokenizer"),gJe=o(" (LUKE model)"),hJe=l(),Ms=a("li"),WJ=a("strong"),pJe=o("lxmert"),_Je=o(" \u2014 "),Tk=a("a"),uJe=o("LxmertTokenizer"),bJe=o(" or "),Fk=a("a"),vJe=o("LxmertTokenizerFast"),TJe=o(" (LXMERT model)"),FJe=l(),rh=a("li"),QJ=a("strong"),CJe=o("m2m_100"),MJe=o(" \u2014 "),Ck=a("a"),EJe=o("M2M100Tokenizer"),yJe=o(" (M2M100 model)"),wJe=l(),th=a("li"),HJ=a("strong"),AJe=o("marian"),LJe=o(" \u2014 "),Mk=a("a"),BJe=o("MarianTokenizer"),xJe=o(" (Marian model)"),kJe=l(),Es=a("li"),UJ=a("strong"),RJe=o("mbart"),SJe=o(" \u2014 "),Ek=a("a"),PJe=o("MBartTokenizer"),$Je=o(" or "),yk=a("a"),IJe=o("MBartTokenizerFast"),jJe=o(" (mBART model)"),DJe=l(),ys=a("li"),JJ=a("strong"),NJe=o("mbart50"),qJe=o(" \u2014 "),wk=a("a"),OJe=o("MBart50Tokenizer"),GJe=o(" or "),Ak=a("a"),XJe=o("MBart50TokenizerFast"),VJe=o(" (mBART-50 model)"),zJe=l(),ah=a("li"),YJ=a("strong"),WJe=o("mluke"),QJe=o(" \u2014 "),Lk=a("a"),HJe=o("MLukeTokenizer"),UJe=o(" (mLUKE model)"),JJe=l(),ws=a("li"),KJ=a("strong"),YJe=o("mobilebert"),KJe=o(" \u2014 "),Bk=a("a"),ZJe=o("MobileBertTokenizer"),eYe=o(" or "),xk=a("a"),oYe=o("MobileBertTokenizerFast"),rYe=o(" (MobileBERT model)"),tYe=l(),As=a("li"),ZJ=a("strong"),aYe=o("mpnet"),nYe=o(" \u2014 "),kk=a("a"),sYe=o("MPNetTokenizer"),lYe=o(" or "),Rk=a("a"),iYe=o("MPNetTokenizerFast"),dYe=o(" (MPNet model)"),cYe=l(),Ls=a("li"),eY=a("strong"),fYe=o("mt5"),mYe=o(" \u2014 "),Sk=a("a"),gYe=o("MT5Tokenizer"),hYe=o(" or "),Pk=a("a"),pYe=o("MT5TokenizerFast"),_Ye=o(" (mT5 model)"),uYe=l(),Bs=a("li"),oY=a("strong"),bYe=o("openai-gpt"),vYe=o(" \u2014 "),$k=a("a"),TYe=o("OpenAIGPTTokenizer"),FYe=o(" or "),Ik=a("a"),CYe=o("OpenAIGPTTokenizerFast"),MYe=o(" (OpenAI GPT model)"),EYe=l(),xs=a("li"),rY=a("strong"),yYe=o("pegasus"),wYe=o(" \u2014 "),jk=a("a"),AYe=o("PegasusTokenizer"),LYe=o(" or "),Dk=a("a"),BYe=o("PegasusTokenizerFast"),xYe=o(" (Pegasus model)"),kYe=l(),nh=a("li"),tY=a("strong"),RYe=o("perceiver"),SYe=o(" \u2014 "),Nk=a("a"),PYe=o("PerceiverTokenizer"),$Ye=o(" (Perceiver model)"),IYe=l(),sh=a("li"),aY=a("strong"),jYe=o("phobert"),DYe=o(" \u2014 "),qk=a("a"),NYe=o("PhobertTokenizer"),qYe=o(" (PhoBERT model)"),OYe=l(),lh=a("li"),nY=a("strong"),GYe=o("plbart"),XYe=o(" \u2014 "),Ok=a("a"),VYe=o("PLBartTokenizer"),zYe=o(" (PLBart model)"),WYe=l(),ih=a("li"),sY=a("strong"),QYe=o("prophetnet"),HYe=o(" \u2014 "),Gk=a("a"),UYe=o("ProphetNetTokenizer"),JYe=o(" (ProphetNet model)"),YYe=l(),ks=a("li"),lY=a("strong"),KYe=o("qdqbert"),ZYe=o(" \u2014 "),Xk=a("a"),eKe=o("BertTokenizer"),oKe=o(" or "),Vk=a("a"),rKe=o("BertTokenizerFast"),tKe=o(" (QDQBert model)"),aKe=l(),dh=a("li"),iY=a("strong"),nKe=o("rag"),sKe=o(" \u2014 "),zk=a("a"),lKe=o("RagTokenizer"),iKe=o(" (RAG model)"),dKe=l(),Rs=a("li"),dY=a("strong"),cKe=o("realm"),fKe=o(" \u2014 "),Wk=a("a"),mKe=o("RealmTokenizer"),gKe=o(" or "),Qk=a("a"),hKe=o("RealmTokenizerFast"),pKe=o(" (Realm model)"),_Ke=l(),Ss=a("li"),cY=a("strong"),uKe=o("reformer"),bKe=o(" \u2014 "),Hk=a("a"),vKe=o("ReformerTokenizer"),TKe=o(" or "),Uk=a("a"),FKe=o("ReformerTokenizerFast"),CKe=o(" (Reformer model)"),MKe=l(),Ps=a("li"),fY=a("strong"),EKe=o("rembert"),yKe=o(" \u2014 "),Jk=a("a"),wKe=o("RemBertTokenizer"),AKe=o(" or "),Yk=a("a"),LKe=o("RemBertTokenizerFast"),BKe=o(" (RemBERT model)"),xKe=l(),$s=a("li"),mY=a("strong"),kKe=o("retribert"),RKe=o(" \u2014 "),Kk=a("a"),SKe=o("RetriBertTokenizer"),PKe=o(" or "),Zk=a("a"),$Ke=o("RetriBertTokenizerFast"),IKe=o(" (RetriBERT model)"),jKe=l(),Is=a("li"),gY=a("strong"),DKe=o("roberta"),NKe=o(" \u2014 "),eR=a("a"),qKe=o("RobertaTokenizer"),OKe=o(" or "),oR=a("a"),GKe=o("RobertaTokenizerFast"),XKe=o(" (RoBERTa model)"),VKe=l(),js=a("li"),hY=a("strong"),zKe=o("roformer"),WKe=o(" \u2014 "),rR=a("a"),QKe=o("RoFormerTokenizer"),HKe=o(" or "),tR=a("a"),UKe=o("RoFormerTokenizerFast"),JKe=o(" (RoFormer model)"),YKe=l(),ch=a("li"),pY=a("strong"),KKe=o("speech_to_text"),ZKe=o(" \u2014 "),aR=a("a"),eZe=o("Speech2TextTokenizer"),oZe=o(" (Speech2Text model)"),rZe=l(),fh=a("li"),_Y=a("strong"),tZe=o("speech_to_text_2"),aZe=o(" \u2014 "),nR=a("a"),nZe=o("Speech2Text2Tokenizer"),sZe=o(" (Speech2Text2 model)"),lZe=l(),Ds=a("li"),uY=a("strong"),iZe=o("splinter"),dZe=o(" \u2014 "),sR=a("a"),cZe=o("SplinterTokenizer"),fZe=o(" or "),lR=a("a"),mZe=o("SplinterTokenizerFast"),gZe=o(" (Splinter model)"),hZe=l(),Ns=a("li"),bY=a("strong"),pZe=o("squeezebert"),_Ze=o(" \u2014 "),iR=a("a"),uZe=o("SqueezeBertTokenizer"),bZe=o(" or "),dR=a("a"),vZe=o("SqueezeBertTokenizerFast"),TZe=o(" (SqueezeBERT model)"),FZe=l(),qs=a("li"),vY=a("strong"),CZe=o("t5"),MZe=o(" \u2014 "),cR=a("a"),EZe=o("T5Tokenizer"),yZe=o(" or "),fR=a("a"),wZe=o("T5TokenizerFast"),AZe=o(" (T5 model)"),LZe=l(),mh=a("li"),TY=a("strong"),BZe=o("tapas"),xZe=o(" \u2014 "),mR=a("a"),kZe=o("TapasTokenizer"),RZe=o(" (TAPAS model)"),SZe=l(),gh=a("li"),FY=a("strong"),PZe=o("transfo-xl"),$Ze=o(" \u2014 "),gR=a("a"),IZe=o("TransfoXLTokenizer"),jZe=o(" (Transformer-XL model)"),DZe=l(),hh=a("li"),CY=a("strong"),NZe=o("wav2vec2"),qZe=o(" \u2014 "),hR=a("a"),OZe=o("Wav2Vec2CTCTokenizer"),GZe=o(" (Wav2Vec2 model)"),XZe=l(),ph=a("li"),MY=a("strong"),VZe=o("wav2vec2_phoneme"),zZe=o(" \u2014 "),pR=a("a"),WZe=o("Wav2Vec2PhonemeCTCTokenizer"),QZe=o(" (Wav2Vec2Phoneme model)"),HZe=l(),Os=a("li"),EY=a("strong"),UZe=o("xglm"),JZe=o(" \u2014 "),_R=a("a"),YZe=o("XGLMTokenizer"),KZe=o(" or "),uR=a("a"),ZZe=o("XGLMTokenizerFast"),eeo=o(" (XGLM model)"),oeo=l(),_h=a("li"),yY=a("strong"),reo=o("xlm"),teo=o(" \u2014 "),bR=a("a"),aeo=o("XLMTokenizer"),neo=o(" (XLM model)"),seo=l(),uh=a("li"),wY=a("strong"),leo=o("xlm-prophetnet"),ieo=o(" \u2014 "),vR=a("a"),deo=o("XLMProphetNetTokenizer"),ceo=o(" (XLMProphetNet model)"),feo=l(),Gs=a("li"),AY=a("strong"),meo=o("xlm-roberta"),geo=o(" \u2014 "),TR=a("a"),heo=o("XLMRobertaTokenizer"),peo=o(" or "),FR=a("a"),_eo=o("XLMRobertaTokenizerFast"),ueo=o(" (XLM-RoBERTa model)"),beo=l(),Xs=a("li"),LY=a("strong"),veo=o("xlnet"),Teo=o(" \u2014 "),CR=a("a"),Feo=o("XLNetTokenizer"),Ceo=o(" or "),MR=a("a"),Meo=o("XLNetTokenizerFast"),Eeo=o(" (XLNet model)"),yeo=l(),BY=a("p"),weo=o("Examples:"),Aeo=l(),f(R4.$$.fragment),Leo=l(),bh=a("div"),f(S4.$$.fragment),Beo=l(),xY=a("p"),xeo=o("Register a new tokenizer in this mapping."),Ske=l(),od=a("h2"),vh=a("a"),kY=a("span"),f(P4.$$.fragment),keo=l(),RY=a("span"),Reo=o("AutoFeatureExtractor"),Pke=l(),Uo=a("div"),f($4.$$.fragment),Seo=l(),I4=a("p"),Peo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),ER=a("a"),$eo=o("AutoFeatureExtractor.from_pretrained()"),Ieo=o(" class method."),jeo=l(),j4=a("p"),Deo=o("This class cannot be instantiated directly using "),SY=a("code"),Neo=o("__init__()"),qeo=o(" (throws an error)."),Oeo=l(),Ie=a("div"),f(D4.$$.fragment),Geo=l(),PY=a("p"),Xeo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Veo=l(),Qa=a("p"),zeo=o("The feature extractor class to instantiate is selected based on the "),$Y=a("code"),Weo=o("model_type"),Qeo=o(` property of the config object
(either passed as an argument or loaded from `),IY=a("code"),Heo=o("pretrained_model_name_or_path"),Ueo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),jY=a("code"),Jeo=o("pretrained_model_name_or_path"),Yeo=o(":"),Keo=l(),re=a("ul"),Th=a("li"),DY=a("strong"),Zeo=o("beit"),eoo=o(" \u2014 "),yR=a("a"),ooo=o("BeitFeatureExtractor"),roo=o(" (BEiT model)"),too=l(),Fh=a("li"),NY=a("strong"),aoo=o("clip"),noo=o(" \u2014 "),wR=a("a"),soo=o("CLIPFeatureExtractor"),loo=o(" (CLIP model)"),ioo=l(),Ch=a("li"),qY=a("strong"),doo=o("convnext"),coo=o(" \u2014 "),AR=a("a"),foo=o("ConvNextFeatureExtractor"),moo=o(" (ConvNext model)"),goo=l(),Mh=a("li"),OY=a("strong"),hoo=o("deit"),poo=o(" \u2014 "),LR=a("a"),_oo=o("DeiTFeatureExtractor"),uoo=o(" (DeiT model)"),boo=l(),Eh=a("li"),GY=a("strong"),voo=o("detr"),Too=o(" \u2014 "),BR=a("a"),Foo=o("DetrFeatureExtractor"),Coo=o(" (DETR model)"),Moo=l(),yh=a("li"),XY=a("strong"),Eoo=o("hubert"),yoo=o(" \u2014 "),xR=a("a"),woo=o("Wav2Vec2FeatureExtractor"),Aoo=o(" (Hubert model)"),Loo=l(),wh=a("li"),VY=a("strong"),Boo=o("layoutlmv2"),xoo=o(" \u2014 "),kR=a("a"),koo=o("LayoutLMv2FeatureExtractor"),Roo=o(" (LayoutLMv2 model)"),Soo=l(),Ah=a("li"),zY=a("strong"),Poo=o("maskformer"),$oo=o(" \u2014 "),RR=a("a"),Ioo=o("MaskFormerFeatureExtractor"),joo=o(" (MaskFormer model)"),Doo=l(),Lh=a("li"),WY=a("strong"),Noo=o("perceiver"),qoo=o(" \u2014 "),SR=a("a"),Ooo=o("PerceiverFeatureExtractor"),Goo=o(" (Perceiver model)"),Xoo=l(),Bh=a("li"),QY=a("strong"),Voo=o("poolformer"),zoo=o(" \u2014 "),PR=a("a"),Woo=o("PoolFormerFeatureExtractor"),Qoo=o(" (PoolFormer model)"),Hoo=l(),xh=a("li"),HY=a("strong"),Uoo=o("resnet"),Joo=o(" \u2014 "),$R=a("a"),Yoo=o("ConvNextFeatureExtractor"),Koo=o(" (ResNet model)"),Zoo=l(),kh=a("li"),UY=a("strong"),ero=o("segformer"),oro=o(" \u2014 "),IR=a("a"),rro=o("SegformerFeatureExtractor"),tro=o(" (SegFormer model)"),aro=l(),Rh=a("li"),JY=a("strong"),nro=o("speech_to_text"),sro=o(" \u2014 "),jR=a("a"),lro=o("Speech2TextFeatureExtractor"),iro=o(" (Speech2Text model)"),dro=l(),Sh=a("li"),YY=a("strong"),cro=o("swin"),fro=o(" \u2014 "),DR=a("a"),mro=o("ViTFeatureExtractor"),gro=o(" (Swin model)"),hro=l(),Ph=a("li"),KY=a("strong"),pro=o("van"),_ro=o(" \u2014 "),NR=a("a"),uro=o("ConvNextFeatureExtractor"),bro=o(" (VAN model)"),vro=l(),$h=a("li"),ZY=a("strong"),Tro=o("vit"),Fro=o(" \u2014 "),qR=a("a"),Cro=o("ViTFeatureExtractor"),Mro=o(" (ViT model)"),Ero=l(),Ih=a("li"),eK=a("strong"),yro=o("vit_mae"),wro=o(" \u2014 "),OR=a("a"),Aro=o("ViTFeatureExtractor"),Lro=o(" (ViTMAE model)"),Bro=l(),jh=a("li"),oK=a("strong"),xro=o("wav2vec2"),kro=o(" \u2014 "),GR=a("a"),Rro=o("Wav2Vec2FeatureExtractor"),Sro=o(" (Wav2Vec2 model)"),Pro=l(),f(Dh.$$.fragment),$ro=l(),rK=a("p"),Iro=o("Examples:"),jro=l(),f(N4.$$.fragment),Dro=l(),Nh=a("div"),f(q4.$$.fragment),Nro=l(),tK=a("p"),qro=o("Register a new feature extractor for this class."),$ke=l(),rd=a("h2"),qh=a("a"),aK=a("span"),f(O4.$$.fragment),Oro=l(),nK=a("span"),Gro=o("AutoProcessor"),Ike=l(),Jo=a("div"),f(G4.$$.fragment),Xro=l(),X4=a("p"),Vro=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),XR=a("a"),zro=o("AutoProcessor.from_pretrained()"),Wro=o(" class method."),Qro=l(),V4=a("p"),Hro=o("This class cannot be instantiated directly using "),sK=a("code"),Uro=o("__init__()"),Jro=o(" (throws an error)."),Yro=l(),je=a("div"),f(z4.$$.fragment),Kro=l(),lK=a("p"),Zro=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),eto=l(),td=a("p"),oto=o("The processor class to instantiate is selected based on the "),iK=a("code"),rto=o("model_type"),tto=o(` property of the config object (either
passed as an argument or loaded from `),dK=a("code"),ato=o("pretrained_model_name_or_path"),nto=o(" if possible):"),sto=l(),xe=a("ul"),Oh=a("li"),cK=a("strong"),lto=o("clip"),ito=o(" \u2014 "),VR=a("a"),dto=o("CLIPProcessor"),cto=o(" (CLIP model)"),fto=l(),Gh=a("li"),fK=a("strong"),mto=o("layoutlmv2"),gto=o(" \u2014 "),zR=a("a"),hto=o("LayoutLMv2Processor"),pto=o(" (LayoutLMv2 model)"),_to=l(),Xh=a("li"),mK=a("strong"),uto=o("layoutxlm"),bto=o(" \u2014 "),WR=a("a"),vto=o("LayoutXLMProcessor"),Tto=o(" (LayoutXLM model)"),Fto=l(),Vh=a("li"),gK=a("strong"),Cto=o("speech_to_text"),Mto=o(" \u2014 "),QR=a("a"),Eto=o("Speech2TextProcessor"),yto=o(" (Speech2Text model)"),wto=l(),zh=a("li"),hK=a("strong"),Ato=o("speech_to_text_2"),Lto=o(" \u2014 "),HR=a("a"),Bto=o("Speech2Text2Processor"),xto=o(" (Speech2Text2 model)"),kto=l(),Wh=a("li"),pK=a("strong"),Rto=o("trocr"),Sto=o(" \u2014 "),UR=a("a"),Pto=o("TrOCRProcessor"),$to=o(" (TrOCR model)"),Ito=l(),Qh=a("li"),_K=a("strong"),jto=o("vision-text-dual-encoder"),Dto=o(" \u2014 "),JR=a("a"),Nto=o("VisionTextDualEncoderProcessor"),qto=o(" (VisionTextDualEncoder model)"),Oto=l(),Hh=a("li"),uK=a("strong"),Gto=o("wav2vec2"),Xto=o(" \u2014 "),YR=a("a"),Vto=o("Wav2Vec2Processor"),zto=o(" (Wav2Vec2 model)"),Wto=l(),f(Uh.$$.fragment),Qto=l(),bK=a("p"),Hto=o("Examples:"),Uto=l(),f(W4.$$.fragment),Jto=l(),Jh=a("div"),f(Q4.$$.fragment),Yto=l(),vK=a("p"),Kto=o("Register a new processor for this class."),jke=l(),ad=a("h2"),Yh=a("a"),TK=a("span"),f(H4.$$.fragment),Zto=l(),FK=a("span"),eao=o("AutoModel"),Dke=l(),Yo=a("div"),f(U4.$$.fragment),oao=l(),nd=a("p"),rao=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),CK=a("code"),tao=o("from_pretrained()"),aao=o("class method or the "),MK=a("code"),nao=o("from_config()"),sao=o(`class
method.`),lao=l(),J4=a("p"),iao=o("This class cannot be instantiated directly using "),EK=a("code"),dao=o("__init__()"),cao=o(" (throws an error)."),fao=l(),Wr=a("div"),f(Y4.$$.fragment),mao=l(),yK=a("p"),gao=o("Instantiates one of the base model classes of the library from a configuration."),hao=l(),sd=a("p"),pao=o(`Note:
Loading a model from its configuration file does `),wK=a("strong"),_ao=o("not"),uao=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AK=a("code"),bao=o("from_pretrained()"),vao=o("to load the model weights."),Tao=l(),LK=a("p"),Fao=o("Examples:"),Cao=l(),f(K4.$$.fragment),Mao=l(),De=a("div"),f(Z4.$$.fragment),Eao=l(),BK=a("p"),yao=o("Instantiate one of the base model classes of the library from a pretrained model."),wao=l(),Ha=a("p"),Aao=o("The model class to instantiate is selected based on the "),xK=a("code"),Lao=o("model_type"),Bao=o(` property of the config object (either
passed as an argument or loaded from `),kK=a("code"),xao=o("pretrained_model_name_or_path"),kao=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RK=a("code"),Rao=o("pretrained_model_name_or_path"),Sao=o(":"),Pao=l(),F=a("ul"),Kh=a("li"),SK=a("strong"),$ao=o("albert"),Iao=o(" \u2014 "),KR=a("a"),jao=o("AlbertModel"),Dao=o(" (ALBERT model)"),Nao=l(),Zh=a("li"),PK=a("strong"),qao=o("bart"),Oao=o(" \u2014 "),ZR=a("a"),Gao=o("BartModel"),Xao=o(" (BART model)"),Vao=l(),ep=a("li"),$K=a("strong"),zao=o("beit"),Wao=o(" \u2014 "),eS=a("a"),Qao=o("BeitModel"),Hao=o(" (BEiT model)"),Uao=l(),op=a("li"),IK=a("strong"),Jao=o("bert"),Yao=o(" \u2014 "),oS=a("a"),Kao=o("BertModel"),Zao=o(" (BERT model)"),eno=l(),rp=a("li"),jK=a("strong"),ono=o("bert-generation"),rno=o(" \u2014 "),rS=a("a"),tno=o("BertGenerationEncoder"),ano=o(" (Bert Generation model)"),nno=l(),tp=a("li"),DK=a("strong"),sno=o("big_bird"),lno=o(" \u2014 "),tS=a("a"),ino=o("BigBirdModel"),dno=o(" (BigBird model)"),cno=l(),ap=a("li"),NK=a("strong"),fno=o("bigbird_pegasus"),mno=o(" \u2014 "),aS=a("a"),gno=o("BigBirdPegasusModel"),hno=o(" (BigBirdPegasus model)"),pno=l(),np=a("li"),qK=a("strong"),_no=o("blenderbot"),uno=o(" \u2014 "),nS=a("a"),bno=o("BlenderbotModel"),vno=o(" (Blenderbot model)"),Tno=l(),sp=a("li"),OK=a("strong"),Fno=o("blenderbot-small"),Cno=o(" \u2014 "),sS=a("a"),Mno=o("BlenderbotSmallModel"),Eno=o(" (BlenderbotSmall model)"),yno=l(),lp=a("li"),GK=a("strong"),wno=o("camembert"),Ano=o(" \u2014 "),lS=a("a"),Lno=o("CamembertModel"),Bno=o(" (CamemBERT model)"),xno=l(),ip=a("li"),XK=a("strong"),kno=o("canine"),Rno=o(" \u2014 "),iS=a("a"),Sno=o("CanineModel"),Pno=o(" (Canine model)"),$no=l(),dp=a("li"),VK=a("strong"),Ino=o("clip"),jno=o(" \u2014 "),dS=a("a"),Dno=o("CLIPModel"),Nno=o(" (CLIP model)"),qno=l(),cp=a("li"),zK=a("strong"),Ono=o("convbert"),Gno=o(" \u2014 "),cS=a("a"),Xno=o("ConvBertModel"),Vno=o(" (ConvBERT model)"),zno=l(),fp=a("li"),WK=a("strong"),Wno=o("convnext"),Qno=o(" \u2014 "),fS=a("a"),Hno=o("ConvNextModel"),Uno=o(" (ConvNext model)"),Jno=l(),mp=a("li"),QK=a("strong"),Yno=o("ctrl"),Kno=o(" \u2014 "),mS=a("a"),Zno=o("CTRLModel"),eso=o(" (CTRL model)"),oso=l(),gp=a("li"),HK=a("strong"),rso=o("data2vec-audio"),tso=o(" \u2014 "),gS=a("a"),aso=o("Data2VecAudioModel"),nso=o(" (Data2VecAudio model)"),sso=l(),hp=a("li"),UK=a("strong"),lso=o("data2vec-text"),iso=o(" \u2014 "),hS=a("a"),dso=o("Data2VecTextModel"),cso=o(" (Data2VecText model)"),fso=l(),pp=a("li"),JK=a("strong"),mso=o("deberta"),gso=o(" \u2014 "),pS=a("a"),hso=o("DebertaModel"),pso=o(" (DeBERTa model)"),_so=l(),_p=a("li"),YK=a("strong"),uso=o("deberta-v2"),bso=o(" \u2014 "),_S=a("a"),vso=o("DebertaV2Model"),Tso=o(" (DeBERTa-v2 model)"),Fso=l(),up=a("li"),KK=a("strong"),Cso=o("deit"),Mso=o(" \u2014 "),uS=a("a"),Eso=o("DeiTModel"),yso=o(" (DeiT model)"),wso=l(),bp=a("li"),ZK=a("strong"),Aso=o("detr"),Lso=o(" \u2014 "),bS=a("a"),Bso=o("DetrModel"),xso=o(" (DETR model)"),kso=l(),vp=a("li"),eZ=a("strong"),Rso=o("distilbert"),Sso=o(" \u2014 "),vS=a("a"),Pso=o("DistilBertModel"),$so=o(" (DistilBERT model)"),Iso=l(),Tp=a("li"),oZ=a("strong"),jso=o("dpr"),Dso=o(" \u2014 "),TS=a("a"),Nso=o("DPRQuestionEncoder"),qso=o(" (DPR model)"),Oso=l(),Fp=a("li"),rZ=a("strong"),Gso=o("electra"),Xso=o(" \u2014 "),FS=a("a"),Vso=o("ElectraModel"),zso=o(" (ELECTRA model)"),Wso=l(),Cp=a("li"),tZ=a("strong"),Qso=o("flaubert"),Hso=o(" \u2014 "),CS=a("a"),Uso=o("FlaubertModel"),Jso=o(" (FlauBERT model)"),Yso=l(),Mp=a("li"),aZ=a("strong"),Kso=o("fnet"),Zso=o(" \u2014 "),MS=a("a"),elo=o("FNetModel"),olo=o(" (FNet model)"),rlo=l(),Ep=a("li"),nZ=a("strong"),tlo=o("fsmt"),alo=o(" \u2014 "),ES=a("a"),nlo=o("FSMTModel"),slo=o(" (FairSeq Machine-Translation model)"),llo=l(),Vs=a("li"),sZ=a("strong"),ilo=o("funnel"),dlo=o(" \u2014 "),yS=a("a"),clo=o("FunnelModel"),flo=o(" or "),wS=a("a"),mlo=o("FunnelBaseModel"),glo=o(" (Funnel Transformer model)"),hlo=l(),yp=a("li"),lZ=a("strong"),plo=o("gpt2"),_lo=o(" \u2014 "),AS=a("a"),ulo=o("GPT2Model"),blo=o(" (OpenAI GPT-2 model)"),vlo=l(),wp=a("li"),iZ=a("strong"),Tlo=o("gpt_neo"),Flo=o(" \u2014 "),LS=a("a"),Clo=o("GPTNeoModel"),Mlo=o(" (GPT Neo model)"),Elo=l(),Ap=a("li"),dZ=a("strong"),ylo=o("gptj"),wlo=o(" \u2014 "),BS=a("a"),Alo=o("GPTJModel"),Llo=o(" (GPT-J model)"),Blo=l(),Lp=a("li"),cZ=a("strong"),xlo=o("hubert"),klo=o(" \u2014 "),xS=a("a"),Rlo=o("HubertModel"),Slo=o(" (Hubert model)"),Plo=l(),Bp=a("li"),fZ=a("strong"),$lo=o("ibert"),Ilo=o(" \u2014 "),kS=a("a"),jlo=o("IBertModel"),Dlo=o(" (I-BERT model)"),Nlo=l(),xp=a("li"),mZ=a("strong"),qlo=o("imagegpt"),Olo=o(" \u2014 "),RS=a("a"),Glo=o("ImageGPTModel"),Xlo=o(" (ImageGPT model)"),Vlo=l(),kp=a("li"),gZ=a("strong"),zlo=o("layoutlm"),Wlo=o(" \u2014 "),SS=a("a"),Qlo=o("LayoutLMModel"),Hlo=o(" (LayoutLM model)"),Ulo=l(),Rp=a("li"),hZ=a("strong"),Jlo=o("layoutlmv2"),Ylo=o(" \u2014 "),PS=a("a"),Klo=o("LayoutLMv2Model"),Zlo=o(" (LayoutLMv2 model)"),eio=l(),Sp=a("li"),pZ=a("strong"),oio=o("led"),rio=o(" \u2014 "),$S=a("a"),tio=o("LEDModel"),aio=o(" (LED model)"),nio=l(),Pp=a("li"),_Z=a("strong"),sio=o("longformer"),lio=o(" \u2014 "),IS=a("a"),iio=o("LongformerModel"),dio=o(" (Longformer model)"),cio=l(),$p=a("li"),uZ=a("strong"),fio=o("luke"),mio=o(" \u2014 "),jS=a("a"),gio=o("LukeModel"),hio=o(" (LUKE model)"),pio=l(),Ip=a("li"),bZ=a("strong"),_io=o("lxmert"),uio=o(" \u2014 "),DS=a("a"),bio=o("LxmertModel"),vio=o(" (LXMERT model)"),Tio=l(),jp=a("li"),vZ=a("strong"),Fio=o("m2m_100"),Cio=o(" \u2014 "),NS=a("a"),Mio=o("M2M100Model"),Eio=o(" (M2M100 model)"),yio=l(),Dp=a("li"),TZ=a("strong"),wio=o("marian"),Aio=o(" \u2014 "),qS=a("a"),Lio=o("MarianModel"),Bio=o(" (Marian model)"),xio=l(),Np=a("li"),FZ=a("strong"),kio=o("maskformer"),Rio=o(" \u2014 "),OS=a("a"),Sio=o("MaskFormerModel"),Pio=o(" (MaskFormer model)"),$io=l(),qp=a("li"),CZ=a("strong"),Iio=o("mbart"),jio=o(" \u2014 "),GS=a("a"),Dio=o("MBartModel"),Nio=o(" (mBART model)"),qio=l(),Op=a("li"),MZ=a("strong"),Oio=o("megatron-bert"),Gio=o(" \u2014 "),XS=a("a"),Xio=o("MegatronBertModel"),Vio=o(" (MegatronBert model)"),zio=l(),Gp=a("li"),EZ=a("strong"),Wio=o("mobilebert"),Qio=o(" \u2014 "),VS=a("a"),Hio=o("MobileBertModel"),Uio=o(" (MobileBERT model)"),Jio=l(),Xp=a("li"),yZ=a("strong"),Yio=o("mpnet"),Kio=o(" \u2014 "),zS=a("a"),Zio=o("MPNetModel"),edo=o(" (MPNet model)"),odo=l(),Vp=a("li"),wZ=a("strong"),rdo=o("mt5"),tdo=o(" \u2014 "),WS=a("a"),ado=o("MT5Model"),ndo=o(" (mT5 model)"),sdo=l(),zp=a("li"),AZ=a("strong"),ldo=o("nystromformer"),ido=o(" \u2014 "),QS=a("a"),ddo=o("NystromformerModel"),cdo=o(" (Nystromformer model)"),fdo=l(),Wp=a("li"),LZ=a("strong"),mdo=o("openai-gpt"),gdo=o(" \u2014 "),HS=a("a"),hdo=o("OpenAIGPTModel"),pdo=o(" (OpenAI GPT model)"),_do=l(),Qp=a("li"),BZ=a("strong"),udo=o("pegasus"),bdo=o(" \u2014 "),US=a("a"),vdo=o("PegasusModel"),Tdo=o(" (Pegasus model)"),Fdo=l(),Hp=a("li"),xZ=a("strong"),Cdo=o("perceiver"),Mdo=o(" \u2014 "),JS=a("a"),Edo=o("PerceiverModel"),ydo=o(" (Perceiver model)"),wdo=l(),Up=a("li"),kZ=a("strong"),Ado=o("plbart"),Ldo=o(" \u2014 "),YS=a("a"),Bdo=o("PLBartModel"),xdo=o(" (PLBart model)"),kdo=l(),Jp=a("li"),RZ=a("strong"),Rdo=o("poolformer"),Sdo=o(" \u2014 "),KS=a("a"),Pdo=o("PoolFormerModel"),$do=o(" (PoolFormer model)"),Ido=l(),Yp=a("li"),SZ=a("strong"),jdo=o("prophetnet"),Ddo=o(" \u2014 "),ZS=a("a"),Ndo=o("ProphetNetModel"),qdo=o(" (ProphetNet model)"),Odo=l(),Kp=a("li"),PZ=a("strong"),Gdo=o("qdqbert"),Xdo=o(" \u2014 "),eP=a("a"),Vdo=o("QDQBertModel"),zdo=o(" (QDQBert model)"),Wdo=l(),Zp=a("li"),$Z=a("strong"),Qdo=o("reformer"),Hdo=o(" \u2014 "),oP=a("a"),Udo=o("ReformerModel"),Jdo=o(" (Reformer model)"),Ydo=l(),e_=a("li"),IZ=a("strong"),Kdo=o("rembert"),Zdo=o(" \u2014 "),rP=a("a"),eco=o("RemBertModel"),oco=o(" (RemBERT model)"),rco=l(),o_=a("li"),jZ=a("strong"),tco=o("resnet"),aco=o(" \u2014 "),tP=a("a"),nco=o("ResNetModel"),sco=o(" (ResNet model)"),lco=l(),r_=a("li"),DZ=a("strong"),ico=o("retribert"),dco=o(" \u2014 "),aP=a("a"),cco=o("RetriBertModel"),fco=o(" (RetriBERT model)"),mco=l(),t_=a("li"),NZ=a("strong"),gco=o("roberta"),hco=o(" \u2014 "),nP=a("a"),pco=o("RobertaModel"),_co=o(" (RoBERTa model)"),uco=l(),a_=a("li"),qZ=a("strong"),bco=o("roformer"),vco=o(" \u2014 "),sP=a("a"),Tco=o("RoFormerModel"),Fco=o(" (RoFormer model)"),Cco=l(),n_=a("li"),OZ=a("strong"),Mco=o("segformer"),Eco=o(" \u2014 "),lP=a("a"),yco=o("SegformerModel"),wco=o(" (SegFormer model)"),Aco=l(),s_=a("li"),GZ=a("strong"),Lco=o("sew"),Bco=o(" \u2014 "),iP=a("a"),xco=o("SEWModel"),kco=o(" (SEW model)"),Rco=l(),l_=a("li"),XZ=a("strong"),Sco=o("sew-d"),Pco=o(" \u2014 "),dP=a("a"),$co=o("SEWDModel"),Ico=o(" (SEW-D model)"),jco=l(),i_=a("li"),VZ=a("strong"),Dco=o("speech_to_text"),Nco=o(" \u2014 "),cP=a("a"),qco=o("Speech2TextModel"),Oco=o(" (Speech2Text model)"),Gco=l(),d_=a("li"),zZ=a("strong"),Xco=o("splinter"),Vco=o(" \u2014 "),fP=a("a"),zco=o("SplinterModel"),Wco=o(" (Splinter model)"),Qco=l(),c_=a("li"),WZ=a("strong"),Hco=o("squeezebert"),Uco=o(" \u2014 "),mP=a("a"),Jco=o("SqueezeBertModel"),Yco=o(" (SqueezeBERT model)"),Kco=l(),f_=a("li"),QZ=a("strong"),Zco=o("swin"),efo=o(" \u2014 "),gP=a("a"),ofo=o("SwinModel"),rfo=o(" (Swin model)"),tfo=l(),m_=a("li"),HZ=a("strong"),afo=o("t5"),nfo=o(" \u2014 "),hP=a("a"),sfo=o("T5Model"),lfo=o(" (T5 model)"),ifo=l(),g_=a("li"),UZ=a("strong"),dfo=o("tapas"),cfo=o(" \u2014 "),pP=a("a"),ffo=o("TapasModel"),mfo=o(" (TAPAS model)"),gfo=l(),h_=a("li"),JZ=a("strong"),hfo=o("transfo-xl"),pfo=o(" \u2014 "),_P=a("a"),_fo=o("TransfoXLModel"),ufo=o(" (Transformer-XL model)"),bfo=l(),p_=a("li"),YZ=a("strong"),vfo=o("unispeech"),Tfo=o(" \u2014 "),uP=a("a"),Ffo=o("UniSpeechModel"),Cfo=o(" (UniSpeech model)"),Mfo=l(),__=a("li"),KZ=a("strong"),Efo=o("unispeech-sat"),yfo=o(" \u2014 "),bP=a("a"),wfo=o("UniSpeechSatModel"),Afo=o(" (UniSpeechSat model)"),Lfo=l(),u_=a("li"),ZZ=a("strong"),Bfo=o("van"),xfo=o(" \u2014 "),vP=a("a"),kfo=o("VanModel"),Rfo=o(" (VAN model)"),Sfo=l(),b_=a("li"),eee=a("strong"),Pfo=o("vilt"),$fo=o(" \u2014 "),TP=a("a"),Ifo=o("ViltModel"),jfo=o(" (ViLT model)"),Dfo=l(),v_=a("li"),oee=a("strong"),Nfo=o("vision-text-dual-encoder"),qfo=o(" \u2014 "),FP=a("a"),Ofo=o("VisionTextDualEncoderModel"),Gfo=o(" (VisionTextDualEncoder model)"),Xfo=l(),T_=a("li"),ree=a("strong"),Vfo=o("visual_bert"),zfo=o(" \u2014 "),CP=a("a"),Wfo=o("VisualBertModel"),Qfo=o(" (VisualBert model)"),Hfo=l(),F_=a("li"),tee=a("strong"),Ufo=o("vit"),Jfo=o(" \u2014 "),MP=a("a"),Yfo=o("ViTModel"),Kfo=o(" (ViT model)"),Zfo=l(),C_=a("li"),aee=a("strong"),emo=o("vit_mae"),omo=o(" \u2014 "),EP=a("a"),rmo=o("ViTMAEModel"),tmo=o(" (ViTMAE model)"),amo=l(),M_=a("li"),nee=a("strong"),nmo=o("wav2vec2"),smo=o(" \u2014 "),yP=a("a"),lmo=o("Wav2Vec2Model"),imo=o(" (Wav2Vec2 model)"),dmo=l(),E_=a("li"),see=a("strong"),cmo=o("wavlm"),fmo=o(" \u2014 "),wP=a("a"),mmo=o("WavLMModel"),gmo=o(" (WavLM model)"),hmo=l(),y_=a("li"),lee=a("strong"),pmo=o("xglm"),_mo=o(" \u2014 "),AP=a("a"),umo=o("XGLMModel"),bmo=o(" (XGLM model)"),vmo=l(),w_=a("li"),iee=a("strong"),Tmo=o("xlm"),Fmo=o(" \u2014 "),LP=a("a"),Cmo=o("XLMModel"),Mmo=o(" (XLM model)"),Emo=l(),A_=a("li"),dee=a("strong"),ymo=o("xlm-prophetnet"),wmo=o(" \u2014 "),BP=a("a"),Amo=o("XLMProphetNetModel"),Lmo=o(" (XLMProphetNet model)"),Bmo=l(),L_=a("li"),cee=a("strong"),xmo=o("xlm-roberta"),kmo=o(" \u2014 "),xP=a("a"),Rmo=o("XLMRobertaModel"),Smo=o(" (XLM-RoBERTa model)"),Pmo=l(),B_=a("li"),fee=a("strong"),$mo=o("xlm-roberta-xl"),Imo=o(" \u2014 "),kP=a("a"),jmo=o("XLMRobertaXLModel"),Dmo=o(" (XLM-RoBERTa-XL model)"),Nmo=l(),x_=a("li"),mee=a("strong"),qmo=o("xlnet"),Omo=o(" \u2014 "),RP=a("a"),Gmo=o("XLNetModel"),Xmo=o(" (XLNet model)"),Vmo=l(),k_=a("li"),gee=a("strong"),zmo=o("yoso"),Wmo=o(" \u2014 "),SP=a("a"),Qmo=o("YosoModel"),Hmo=o(" (YOSO model)"),Umo=l(),R_=a("p"),Jmo=o("The model is set in evaluation mode by default using "),hee=a("code"),Ymo=o("model.eval()"),Kmo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pee=a("code"),Zmo=o("model.train()"),ego=l(),_ee=a("p"),ogo=o("Examples:"),rgo=l(),f(eE.$$.fragment),Nke=l(),ld=a("h2"),S_=a("a"),uee=a("span"),f(oE.$$.fragment),tgo=l(),bee=a("span"),ago=o("AutoModelForPreTraining"),qke=l(),Ko=a("div"),f(rE.$$.fragment),ngo=l(),id=a("p"),sgo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),vee=a("code"),lgo=o("from_pretrained()"),igo=o("class method or the "),Tee=a("code"),dgo=o("from_config()"),cgo=o(`class
method.`),fgo=l(),tE=a("p"),mgo=o("This class cannot be instantiated directly using "),Fee=a("code"),ggo=o("__init__()"),hgo=o(" (throws an error)."),pgo=l(),Qr=a("div"),f(aE.$$.fragment),_go=l(),Cee=a("p"),ugo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),bgo=l(),dd=a("p"),vgo=o(`Note:
Loading a model from its configuration file does `),Mee=a("strong"),Tgo=o("not"),Fgo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Eee=a("code"),Cgo=o("from_pretrained()"),Mgo=o("to load the model weights."),Ego=l(),yee=a("p"),ygo=o("Examples:"),wgo=l(),f(nE.$$.fragment),Ago=l(),Ne=a("div"),f(sE.$$.fragment),Lgo=l(),wee=a("p"),Bgo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),xgo=l(),Ua=a("p"),kgo=o("The model class to instantiate is selected based on the "),Aee=a("code"),Rgo=o("model_type"),Sgo=o(` property of the config object (either
passed as an argument or loaded from `),Lee=a("code"),Pgo=o("pretrained_model_name_or_path"),$go=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bee=a("code"),Igo=o("pretrained_model_name_or_path"),jgo=o(":"),Dgo=l(),k=a("ul"),P_=a("li"),xee=a("strong"),Ngo=o("albert"),qgo=o(" \u2014 "),PP=a("a"),Ogo=o("AlbertForPreTraining"),Ggo=o(" (ALBERT model)"),Xgo=l(),$_=a("li"),kee=a("strong"),Vgo=o("bart"),zgo=o(" \u2014 "),$P=a("a"),Wgo=o("BartForConditionalGeneration"),Qgo=o(" (BART model)"),Hgo=l(),I_=a("li"),Ree=a("strong"),Ugo=o("bert"),Jgo=o(" \u2014 "),IP=a("a"),Ygo=o("BertForPreTraining"),Kgo=o(" (BERT model)"),Zgo=l(),j_=a("li"),See=a("strong"),eho=o("big_bird"),oho=o(" \u2014 "),jP=a("a"),rho=o("BigBirdForPreTraining"),tho=o(" (BigBird model)"),aho=l(),D_=a("li"),Pee=a("strong"),nho=o("camembert"),sho=o(" \u2014 "),DP=a("a"),lho=o("CamembertForMaskedLM"),iho=o(" (CamemBERT model)"),dho=l(),N_=a("li"),$ee=a("strong"),cho=o("ctrl"),fho=o(" \u2014 "),NP=a("a"),mho=o("CTRLLMHeadModel"),gho=o(" (CTRL model)"),hho=l(),q_=a("li"),Iee=a("strong"),pho=o("data2vec-text"),_ho=o(" \u2014 "),qP=a("a"),uho=o("Data2VecTextForMaskedLM"),bho=o(" (Data2VecText model)"),vho=l(),O_=a("li"),jee=a("strong"),Tho=o("deberta"),Fho=o(" \u2014 "),OP=a("a"),Cho=o("DebertaForMaskedLM"),Mho=o(" (DeBERTa model)"),Eho=l(),G_=a("li"),Dee=a("strong"),yho=o("deberta-v2"),who=o(" \u2014 "),GP=a("a"),Aho=o("DebertaV2ForMaskedLM"),Lho=o(" (DeBERTa-v2 model)"),Bho=l(),X_=a("li"),Nee=a("strong"),xho=o("distilbert"),kho=o(" \u2014 "),XP=a("a"),Rho=o("DistilBertForMaskedLM"),Sho=o(" (DistilBERT model)"),Pho=l(),V_=a("li"),qee=a("strong"),$ho=o("electra"),Iho=o(" \u2014 "),VP=a("a"),jho=o("ElectraForPreTraining"),Dho=o(" (ELECTRA model)"),Nho=l(),z_=a("li"),Oee=a("strong"),qho=o("flaubert"),Oho=o(" \u2014 "),zP=a("a"),Gho=o("FlaubertWithLMHeadModel"),Xho=o(" (FlauBERT model)"),Vho=l(),W_=a("li"),Gee=a("strong"),zho=o("fnet"),Who=o(" \u2014 "),WP=a("a"),Qho=o("FNetForPreTraining"),Hho=o(" (FNet model)"),Uho=l(),Q_=a("li"),Xee=a("strong"),Jho=o("fsmt"),Yho=o(" \u2014 "),QP=a("a"),Kho=o("FSMTForConditionalGeneration"),Zho=o(" (FairSeq Machine-Translation model)"),epo=l(),H_=a("li"),Vee=a("strong"),opo=o("funnel"),rpo=o(" \u2014 "),HP=a("a"),tpo=o("FunnelForPreTraining"),apo=o(" (Funnel Transformer model)"),npo=l(),U_=a("li"),zee=a("strong"),spo=o("gpt2"),lpo=o(" \u2014 "),UP=a("a"),ipo=o("GPT2LMHeadModel"),dpo=o(" (OpenAI GPT-2 model)"),cpo=l(),J_=a("li"),Wee=a("strong"),fpo=o("ibert"),mpo=o(" \u2014 "),JP=a("a"),gpo=o("IBertForMaskedLM"),hpo=o(" (I-BERT model)"),ppo=l(),Y_=a("li"),Qee=a("strong"),_po=o("layoutlm"),upo=o(" \u2014 "),YP=a("a"),bpo=o("LayoutLMForMaskedLM"),vpo=o(" (LayoutLM model)"),Tpo=l(),K_=a("li"),Hee=a("strong"),Fpo=o("longformer"),Cpo=o(" \u2014 "),KP=a("a"),Mpo=o("LongformerForMaskedLM"),Epo=o(" (Longformer model)"),ypo=l(),Z_=a("li"),Uee=a("strong"),wpo=o("lxmert"),Apo=o(" \u2014 "),ZP=a("a"),Lpo=o("LxmertForPreTraining"),Bpo=o(" (LXMERT model)"),xpo=l(),eu=a("li"),Jee=a("strong"),kpo=o("megatron-bert"),Rpo=o(" \u2014 "),e$=a("a"),Spo=o("MegatronBertForPreTraining"),Ppo=o(" (MegatronBert model)"),$po=l(),ou=a("li"),Yee=a("strong"),Ipo=o("mobilebert"),jpo=o(" \u2014 "),o$=a("a"),Dpo=o("MobileBertForPreTraining"),Npo=o(" (MobileBERT model)"),qpo=l(),ru=a("li"),Kee=a("strong"),Opo=o("mpnet"),Gpo=o(" \u2014 "),r$=a("a"),Xpo=o("MPNetForMaskedLM"),Vpo=o(" (MPNet model)"),zpo=l(),tu=a("li"),Zee=a("strong"),Wpo=o("openai-gpt"),Qpo=o(" \u2014 "),t$=a("a"),Hpo=o("OpenAIGPTLMHeadModel"),Upo=o(" (OpenAI GPT model)"),Jpo=l(),au=a("li"),eoe=a("strong"),Ypo=o("retribert"),Kpo=o(" \u2014 "),a$=a("a"),Zpo=o("RetriBertModel"),e_o=o(" (RetriBERT model)"),o_o=l(),nu=a("li"),ooe=a("strong"),r_o=o("roberta"),t_o=o(" \u2014 "),n$=a("a"),a_o=o("RobertaForMaskedLM"),n_o=o(" (RoBERTa model)"),s_o=l(),su=a("li"),roe=a("strong"),l_o=o("squeezebert"),i_o=o(" \u2014 "),s$=a("a"),d_o=o("SqueezeBertForMaskedLM"),c_o=o(" (SqueezeBERT model)"),f_o=l(),lu=a("li"),toe=a("strong"),m_o=o("t5"),g_o=o(" \u2014 "),l$=a("a"),h_o=o("T5ForConditionalGeneration"),p_o=o(" (T5 model)"),__o=l(),iu=a("li"),aoe=a("strong"),u_o=o("tapas"),b_o=o(" \u2014 "),i$=a("a"),v_o=o("TapasForMaskedLM"),T_o=o(" (TAPAS model)"),F_o=l(),du=a("li"),noe=a("strong"),C_o=o("transfo-xl"),M_o=o(" \u2014 "),d$=a("a"),E_o=o("TransfoXLLMHeadModel"),y_o=o(" (Transformer-XL model)"),w_o=l(),cu=a("li"),soe=a("strong"),A_o=o("unispeech"),L_o=o(" \u2014 "),c$=a("a"),B_o=o("UniSpeechForPreTraining"),x_o=o(" (UniSpeech model)"),k_o=l(),fu=a("li"),loe=a("strong"),R_o=o("unispeech-sat"),S_o=o(" \u2014 "),f$=a("a"),P_o=o("UniSpeechSatForPreTraining"),$_o=o(" (UniSpeechSat model)"),I_o=l(),mu=a("li"),ioe=a("strong"),j_o=o("visual_bert"),D_o=o(" \u2014 "),m$=a("a"),N_o=o("VisualBertForPreTraining"),q_o=o(" (VisualBert model)"),O_o=l(),gu=a("li"),doe=a("strong"),G_o=o("vit_mae"),X_o=o(" \u2014 "),g$=a("a"),V_o=o("ViTMAEForPreTraining"),z_o=o(" (ViTMAE model)"),W_o=l(),hu=a("li"),coe=a("strong"),Q_o=o("wav2vec2"),H_o=o(" \u2014 "),h$=a("a"),U_o=o("Wav2Vec2ForPreTraining"),J_o=o(" (Wav2Vec2 model)"),Y_o=l(),pu=a("li"),foe=a("strong"),K_o=o("xlm"),Z_o=o(" \u2014 "),p$=a("a"),euo=o("XLMWithLMHeadModel"),ouo=o(" (XLM model)"),ruo=l(),_u=a("li"),moe=a("strong"),tuo=o("xlm-roberta"),auo=o(" \u2014 "),_$=a("a"),nuo=o("XLMRobertaForMaskedLM"),suo=o(" (XLM-RoBERTa model)"),luo=l(),uu=a("li"),goe=a("strong"),iuo=o("xlm-roberta-xl"),duo=o(" \u2014 "),u$=a("a"),cuo=o("XLMRobertaXLForMaskedLM"),fuo=o(" (XLM-RoBERTa-XL model)"),muo=l(),bu=a("li"),hoe=a("strong"),guo=o("xlnet"),huo=o(" \u2014 "),b$=a("a"),puo=o("XLNetLMHeadModel"),_uo=o(" (XLNet model)"),uuo=l(),vu=a("p"),buo=o("The model is set in evaluation mode by default using "),poe=a("code"),vuo=o("model.eval()"),Tuo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_oe=a("code"),Fuo=o("model.train()"),Cuo=l(),uoe=a("p"),Muo=o("Examples:"),Euo=l(),f(lE.$$.fragment),Oke=l(),cd=a("h2"),Tu=a("a"),boe=a("span"),f(iE.$$.fragment),yuo=l(),voe=a("span"),wuo=o("AutoModelForCausalLM"),Gke=l(),Zo=a("div"),f(dE.$$.fragment),Auo=l(),fd=a("p"),Luo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Toe=a("code"),Buo=o("from_pretrained()"),xuo=o("class method or the "),Foe=a("code"),kuo=o("from_config()"),Ruo=o(`class
method.`),Suo=l(),cE=a("p"),Puo=o("This class cannot be instantiated directly using "),Coe=a("code"),$uo=o("__init__()"),Iuo=o(" (throws an error)."),juo=l(),Hr=a("div"),f(fE.$$.fragment),Duo=l(),Moe=a("p"),Nuo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),quo=l(),md=a("p"),Ouo=o(`Note:
Loading a model from its configuration file does `),Eoe=a("strong"),Guo=o("not"),Xuo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yoe=a("code"),Vuo=o("from_pretrained()"),zuo=o("to load the model weights."),Wuo=l(),woe=a("p"),Quo=o("Examples:"),Huo=l(),f(mE.$$.fragment),Uuo=l(),qe=a("div"),f(gE.$$.fragment),Juo=l(),Aoe=a("p"),Yuo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Kuo=l(),Ja=a("p"),Zuo=o("The model class to instantiate is selected based on the "),Loe=a("code"),e1o=o("model_type"),o1o=o(` property of the config object (either
passed as an argument or loaded from `),Boe=a("code"),r1o=o("pretrained_model_name_or_path"),t1o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xoe=a("code"),a1o=o("pretrained_model_name_or_path"),n1o=o(":"),s1o=l(),$=a("ul"),Fu=a("li"),koe=a("strong"),l1o=o("bart"),i1o=o(" \u2014 "),v$=a("a"),d1o=o("BartForCausalLM"),c1o=o(" (BART model)"),f1o=l(),Cu=a("li"),Roe=a("strong"),m1o=o("bert"),g1o=o(" \u2014 "),T$=a("a"),h1o=o("BertLMHeadModel"),p1o=o(" (BERT model)"),_1o=l(),Mu=a("li"),Soe=a("strong"),u1o=o("bert-generation"),b1o=o(" \u2014 "),F$=a("a"),v1o=o("BertGenerationDecoder"),T1o=o(" (Bert Generation model)"),F1o=l(),Eu=a("li"),Poe=a("strong"),C1o=o("big_bird"),M1o=o(" \u2014 "),C$=a("a"),E1o=o("BigBirdForCausalLM"),y1o=o(" (BigBird model)"),w1o=l(),yu=a("li"),$oe=a("strong"),A1o=o("bigbird_pegasus"),L1o=o(" \u2014 "),M$=a("a"),B1o=o("BigBirdPegasusForCausalLM"),x1o=o(" (BigBirdPegasus model)"),k1o=l(),wu=a("li"),Ioe=a("strong"),R1o=o("blenderbot"),S1o=o(" \u2014 "),E$=a("a"),P1o=o("BlenderbotForCausalLM"),$1o=o(" (Blenderbot model)"),I1o=l(),Au=a("li"),joe=a("strong"),j1o=o("blenderbot-small"),D1o=o(" \u2014 "),y$=a("a"),N1o=o("BlenderbotSmallForCausalLM"),q1o=o(" (BlenderbotSmall model)"),O1o=l(),Lu=a("li"),Doe=a("strong"),G1o=o("camembert"),X1o=o(" \u2014 "),w$=a("a"),V1o=o("CamembertForCausalLM"),z1o=o(" (CamemBERT model)"),W1o=l(),Bu=a("li"),Noe=a("strong"),Q1o=o("ctrl"),H1o=o(" \u2014 "),A$=a("a"),U1o=o("CTRLLMHeadModel"),J1o=o(" (CTRL model)"),Y1o=l(),xu=a("li"),qoe=a("strong"),K1o=o("data2vec-text"),Z1o=o(" \u2014 "),L$=a("a"),ebo=o("Data2VecTextForCausalLM"),obo=o(" (Data2VecText model)"),rbo=l(),ku=a("li"),Ooe=a("strong"),tbo=o("electra"),abo=o(" \u2014 "),B$=a("a"),nbo=o("ElectraForCausalLM"),sbo=o(" (ELECTRA model)"),lbo=l(),Ru=a("li"),Goe=a("strong"),ibo=o("gpt2"),dbo=o(" \u2014 "),x$=a("a"),cbo=o("GPT2LMHeadModel"),fbo=o(" (OpenAI GPT-2 model)"),mbo=l(),Su=a("li"),Xoe=a("strong"),gbo=o("gpt_neo"),hbo=o(" \u2014 "),k$=a("a"),pbo=o("GPTNeoForCausalLM"),_bo=o(" (GPT Neo model)"),ubo=l(),Pu=a("li"),Voe=a("strong"),bbo=o("gptj"),vbo=o(" \u2014 "),R$=a("a"),Tbo=o("GPTJForCausalLM"),Fbo=o(" (GPT-J model)"),Cbo=l(),$u=a("li"),zoe=a("strong"),Mbo=o("marian"),Ebo=o(" \u2014 "),S$=a("a"),ybo=o("MarianForCausalLM"),wbo=o(" (Marian model)"),Abo=l(),Iu=a("li"),Woe=a("strong"),Lbo=o("mbart"),Bbo=o(" \u2014 "),P$=a("a"),xbo=o("MBartForCausalLM"),kbo=o(" (mBART model)"),Rbo=l(),ju=a("li"),Qoe=a("strong"),Sbo=o("megatron-bert"),Pbo=o(" \u2014 "),$$=a("a"),$bo=o("MegatronBertForCausalLM"),Ibo=o(" (MegatronBert model)"),jbo=l(),Du=a("li"),Hoe=a("strong"),Dbo=o("openai-gpt"),Nbo=o(" \u2014 "),I$=a("a"),qbo=o("OpenAIGPTLMHeadModel"),Obo=o(" (OpenAI GPT model)"),Gbo=l(),Nu=a("li"),Uoe=a("strong"),Xbo=o("pegasus"),Vbo=o(" \u2014 "),j$=a("a"),zbo=o("PegasusForCausalLM"),Wbo=o(" (Pegasus model)"),Qbo=l(),qu=a("li"),Joe=a("strong"),Hbo=o("plbart"),Ubo=o(" \u2014 "),D$=a("a"),Jbo=o("PLBartForCausalLM"),Ybo=o(" (PLBart model)"),Kbo=l(),Ou=a("li"),Yoe=a("strong"),Zbo=o("prophetnet"),e5o=o(" \u2014 "),N$=a("a"),o5o=o("ProphetNetForCausalLM"),r5o=o(" (ProphetNet model)"),t5o=l(),Gu=a("li"),Koe=a("strong"),a5o=o("qdqbert"),n5o=o(" \u2014 "),q$=a("a"),s5o=o("QDQBertLMHeadModel"),l5o=o(" (QDQBert model)"),i5o=l(),Xu=a("li"),Zoe=a("strong"),d5o=o("reformer"),c5o=o(" \u2014 "),O$=a("a"),f5o=o("ReformerModelWithLMHead"),m5o=o(" (Reformer model)"),g5o=l(),Vu=a("li"),ere=a("strong"),h5o=o("rembert"),p5o=o(" \u2014 "),G$=a("a"),_5o=o("RemBertForCausalLM"),u5o=o(" (RemBERT model)"),b5o=l(),zu=a("li"),ore=a("strong"),v5o=o("roberta"),T5o=o(" \u2014 "),X$=a("a"),F5o=o("RobertaForCausalLM"),C5o=o(" (RoBERTa model)"),M5o=l(),Wu=a("li"),rre=a("strong"),E5o=o("roformer"),y5o=o(" \u2014 "),V$=a("a"),w5o=o("RoFormerForCausalLM"),A5o=o(" (RoFormer model)"),L5o=l(),Qu=a("li"),tre=a("strong"),B5o=o("speech_to_text_2"),x5o=o(" \u2014 "),z$=a("a"),k5o=o("Speech2Text2ForCausalLM"),R5o=o(" (Speech2Text2 model)"),S5o=l(),Hu=a("li"),are=a("strong"),P5o=o("transfo-xl"),$5o=o(" \u2014 "),W$=a("a"),I5o=o("TransfoXLLMHeadModel"),j5o=o(" (Transformer-XL model)"),D5o=l(),Uu=a("li"),nre=a("strong"),N5o=o("trocr"),q5o=o(" \u2014 "),Q$=a("a"),O5o=o("TrOCRForCausalLM"),G5o=o(" (TrOCR model)"),X5o=l(),Ju=a("li"),sre=a("strong"),V5o=o("xglm"),z5o=o(" \u2014 "),H$=a("a"),W5o=o("XGLMForCausalLM"),Q5o=o(" (XGLM model)"),H5o=l(),Yu=a("li"),lre=a("strong"),U5o=o("xlm"),J5o=o(" \u2014 "),U$=a("a"),Y5o=o("XLMWithLMHeadModel"),K5o=o(" (XLM model)"),Z5o=l(),Ku=a("li"),ire=a("strong"),e2o=o("xlm-prophetnet"),o2o=o(" \u2014 "),J$=a("a"),r2o=o("XLMProphetNetForCausalLM"),t2o=o(" (XLMProphetNet model)"),a2o=l(),Zu=a("li"),dre=a("strong"),n2o=o("xlm-roberta"),s2o=o(" \u2014 "),Y$=a("a"),l2o=o("XLMRobertaForCausalLM"),i2o=o(" (XLM-RoBERTa model)"),d2o=l(),e1=a("li"),cre=a("strong"),c2o=o("xlm-roberta-xl"),f2o=o(" \u2014 "),K$=a("a"),m2o=o("XLMRobertaXLForCausalLM"),g2o=o(" (XLM-RoBERTa-XL model)"),h2o=l(),o1=a("li"),fre=a("strong"),p2o=o("xlnet"),_2o=o(" \u2014 "),Z$=a("a"),u2o=o("XLNetLMHeadModel"),b2o=o(" (XLNet model)"),v2o=l(),r1=a("p"),T2o=o("The model is set in evaluation mode by default using "),mre=a("code"),F2o=o("model.eval()"),C2o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gre=a("code"),M2o=o("model.train()"),E2o=l(),hre=a("p"),y2o=o("Examples:"),w2o=l(),f(hE.$$.fragment),Xke=l(),gd=a("h2"),t1=a("a"),pre=a("span"),f(pE.$$.fragment),A2o=l(),_re=a("span"),L2o=o("AutoModelForMaskedLM"),Vke=l(),er=a("div"),f(_E.$$.fragment),B2o=l(),hd=a("p"),x2o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),ure=a("code"),k2o=o("from_pretrained()"),R2o=o("class method or the "),bre=a("code"),S2o=o("from_config()"),P2o=o(`class
method.`),$2o=l(),uE=a("p"),I2o=o("This class cannot be instantiated directly using "),vre=a("code"),j2o=o("__init__()"),D2o=o(" (throws an error)."),N2o=l(),Ur=a("div"),f(bE.$$.fragment),q2o=l(),Tre=a("p"),O2o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),G2o=l(),pd=a("p"),X2o=o(`Note:
Loading a model from its configuration file does `),Fre=a("strong"),V2o=o("not"),z2o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cre=a("code"),W2o=o("from_pretrained()"),Q2o=o("to load the model weights."),H2o=l(),Mre=a("p"),U2o=o("Examples:"),J2o=l(),f(vE.$$.fragment),Y2o=l(),Oe=a("div"),f(TE.$$.fragment),K2o=l(),Ere=a("p"),Z2o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),evo=l(),Ya=a("p"),ovo=o("The model class to instantiate is selected based on the "),yre=a("code"),rvo=o("model_type"),tvo=o(` property of the config object (either
passed as an argument or loaded from `),wre=a("code"),avo=o("pretrained_model_name_or_path"),nvo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Are=a("code"),svo=o("pretrained_model_name_or_path"),lvo=o(":"),ivo=l(),I=a("ul"),a1=a("li"),Lre=a("strong"),dvo=o("albert"),cvo=o(" \u2014 "),eI=a("a"),fvo=o("AlbertForMaskedLM"),mvo=o(" (ALBERT model)"),gvo=l(),n1=a("li"),Bre=a("strong"),hvo=o("bart"),pvo=o(" \u2014 "),oI=a("a"),_vo=o("BartForConditionalGeneration"),uvo=o(" (BART model)"),bvo=l(),s1=a("li"),xre=a("strong"),vvo=o("bert"),Tvo=o(" \u2014 "),rI=a("a"),Fvo=o("BertForMaskedLM"),Cvo=o(" (BERT model)"),Mvo=l(),l1=a("li"),kre=a("strong"),Evo=o("big_bird"),yvo=o(" \u2014 "),tI=a("a"),wvo=o("BigBirdForMaskedLM"),Avo=o(" (BigBird model)"),Lvo=l(),i1=a("li"),Rre=a("strong"),Bvo=o("camembert"),xvo=o(" \u2014 "),aI=a("a"),kvo=o("CamembertForMaskedLM"),Rvo=o(" (CamemBERT model)"),Svo=l(),d1=a("li"),Sre=a("strong"),Pvo=o("convbert"),$vo=o(" \u2014 "),nI=a("a"),Ivo=o("ConvBertForMaskedLM"),jvo=o(" (ConvBERT model)"),Dvo=l(),c1=a("li"),Pre=a("strong"),Nvo=o("data2vec-text"),qvo=o(" \u2014 "),sI=a("a"),Ovo=o("Data2VecTextForMaskedLM"),Gvo=o(" (Data2VecText model)"),Xvo=l(),f1=a("li"),$re=a("strong"),Vvo=o("deberta"),zvo=o(" \u2014 "),lI=a("a"),Wvo=o("DebertaForMaskedLM"),Qvo=o(" (DeBERTa model)"),Hvo=l(),m1=a("li"),Ire=a("strong"),Uvo=o("deberta-v2"),Jvo=o(" \u2014 "),iI=a("a"),Yvo=o("DebertaV2ForMaskedLM"),Kvo=o(" (DeBERTa-v2 model)"),Zvo=l(),g1=a("li"),jre=a("strong"),e6o=o("distilbert"),o6o=o(" \u2014 "),dI=a("a"),r6o=o("DistilBertForMaskedLM"),t6o=o(" (DistilBERT model)"),a6o=l(),h1=a("li"),Dre=a("strong"),n6o=o("electra"),s6o=o(" \u2014 "),cI=a("a"),l6o=o("ElectraForMaskedLM"),i6o=o(" (ELECTRA model)"),d6o=l(),p1=a("li"),Nre=a("strong"),c6o=o("flaubert"),f6o=o(" \u2014 "),fI=a("a"),m6o=o("FlaubertWithLMHeadModel"),g6o=o(" (FlauBERT model)"),h6o=l(),_1=a("li"),qre=a("strong"),p6o=o("fnet"),_6o=o(" \u2014 "),mI=a("a"),u6o=o("FNetForMaskedLM"),b6o=o(" (FNet model)"),v6o=l(),u1=a("li"),Ore=a("strong"),T6o=o("funnel"),F6o=o(" \u2014 "),gI=a("a"),C6o=o("FunnelForMaskedLM"),M6o=o(" (Funnel Transformer model)"),E6o=l(),b1=a("li"),Gre=a("strong"),y6o=o("ibert"),w6o=o(" \u2014 "),hI=a("a"),A6o=o("IBertForMaskedLM"),L6o=o(" (I-BERT model)"),B6o=l(),v1=a("li"),Xre=a("strong"),x6o=o("layoutlm"),k6o=o(" \u2014 "),pI=a("a"),R6o=o("LayoutLMForMaskedLM"),S6o=o(" (LayoutLM model)"),P6o=l(),T1=a("li"),Vre=a("strong"),$6o=o("longformer"),I6o=o(" \u2014 "),_I=a("a"),j6o=o("LongformerForMaskedLM"),D6o=o(" (Longformer model)"),N6o=l(),F1=a("li"),zre=a("strong"),q6o=o("mbart"),O6o=o(" \u2014 "),uI=a("a"),G6o=o("MBartForConditionalGeneration"),X6o=o(" (mBART model)"),V6o=l(),C1=a("li"),Wre=a("strong"),z6o=o("megatron-bert"),W6o=o(" \u2014 "),bI=a("a"),Q6o=o("MegatronBertForMaskedLM"),H6o=o(" (MegatronBert model)"),U6o=l(),M1=a("li"),Qre=a("strong"),J6o=o("mobilebert"),Y6o=o(" \u2014 "),vI=a("a"),K6o=o("MobileBertForMaskedLM"),Z6o=o(" (MobileBERT model)"),e0o=l(),E1=a("li"),Hre=a("strong"),o0o=o("mpnet"),r0o=o(" \u2014 "),TI=a("a"),t0o=o("MPNetForMaskedLM"),a0o=o(" (MPNet model)"),n0o=l(),y1=a("li"),Ure=a("strong"),s0o=o("nystromformer"),l0o=o(" \u2014 "),FI=a("a"),i0o=o("NystromformerForMaskedLM"),d0o=o(" (Nystromformer model)"),c0o=l(),w1=a("li"),Jre=a("strong"),f0o=o("perceiver"),m0o=o(" \u2014 "),CI=a("a"),g0o=o("PerceiverForMaskedLM"),h0o=o(" (Perceiver model)"),p0o=l(),A1=a("li"),Yre=a("strong"),_0o=o("qdqbert"),u0o=o(" \u2014 "),MI=a("a"),b0o=o("QDQBertForMaskedLM"),v0o=o(" (QDQBert model)"),T0o=l(),L1=a("li"),Kre=a("strong"),F0o=o("reformer"),C0o=o(" \u2014 "),EI=a("a"),M0o=o("ReformerForMaskedLM"),E0o=o(" (Reformer model)"),y0o=l(),B1=a("li"),Zre=a("strong"),w0o=o("rembert"),A0o=o(" \u2014 "),yI=a("a"),L0o=o("RemBertForMaskedLM"),B0o=o(" (RemBERT model)"),x0o=l(),x1=a("li"),ete=a("strong"),k0o=o("roberta"),R0o=o(" \u2014 "),wI=a("a"),S0o=o("RobertaForMaskedLM"),P0o=o(" (RoBERTa model)"),$0o=l(),k1=a("li"),ote=a("strong"),I0o=o("roformer"),j0o=o(" \u2014 "),AI=a("a"),D0o=o("RoFormerForMaskedLM"),N0o=o(" (RoFormer model)"),q0o=l(),R1=a("li"),rte=a("strong"),O0o=o("squeezebert"),G0o=o(" \u2014 "),LI=a("a"),X0o=o("SqueezeBertForMaskedLM"),V0o=o(" (SqueezeBERT model)"),z0o=l(),S1=a("li"),tte=a("strong"),W0o=o("tapas"),Q0o=o(" \u2014 "),BI=a("a"),H0o=o("TapasForMaskedLM"),U0o=o(" (TAPAS model)"),J0o=l(),P1=a("li"),ate=a("strong"),Y0o=o("wav2vec2"),K0o=o(" \u2014 "),nte=a("code"),Z0o=o("Wav2Vec2ForMaskedLM"),eTo=o("(Wav2Vec2 model)"),oTo=l(),$1=a("li"),ste=a("strong"),rTo=o("xlm"),tTo=o(" \u2014 "),xI=a("a"),aTo=o("XLMWithLMHeadModel"),nTo=o(" (XLM model)"),sTo=l(),I1=a("li"),lte=a("strong"),lTo=o("xlm-roberta"),iTo=o(" \u2014 "),kI=a("a"),dTo=o("XLMRobertaForMaskedLM"),cTo=o(" (XLM-RoBERTa model)"),fTo=l(),j1=a("li"),ite=a("strong"),mTo=o("xlm-roberta-xl"),gTo=o(" \u2014 "),RI=a("a"),hTo=o("XLMRobertaXLForMaskedLM"),pTo=o(" (XLM-RoBERTa-XL model)"),_To=l(),D1=a("li"),dte=a("strong"),uTo=o("yoso"),bTo=o(" \u2014 "),SI=a("a"),vTo=o("YosoForMaskedLM"),TTo=o(" (YOSO model)"),FTo=l(),N1=a("p"),CTo=o("The model is set in evaluation mode by default using "),cte=a("code"),MTo=o("model.eval()"),ETo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fte=a("code"),yTo=o("model.train()"),wTo=l(),mte=a("p"),ATo=o("Examples:"),LTo=l(),f(FE.$$.fragment),zke=l(),_d=a("h2"),q1=a("a"),gte=a("span"),f(CE.$$.fragment),BTo=l(),hte=a("span"),xTo=o("AutoModelForSeq2SeqLM"),Wke=l(),or=a("div"),f(ME.$$.fragment),kTo=l(),ud=a("p"),RTo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),pte=a("code"),STo=o("from_pretrained()"),PTo=o("class method or the "),_te=a("code"),$To=o("from_config()"),ITo=o(`class
method.`),jTo=l(),EE=a("p"),DTo=o("This class cannot be instantiated directly using "),ute=a("code"),NTo=o("__init__()"),qTo=o(" (throws an error)."),OTo=l(),Jr=a("div"),f(yE.$$.fragment),GTo=l(),bte=a("p"),XTo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),VTo=l(),bd=a("p"),zTo=o(`Note:
Loading a model from its configuration file does `),vte=a("strong"),WTo=o("not"),QTo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tte=a("code"),HTo=o("from_pretrained()"),UTo=o("to load the model weights."),JTo=l(),Fte=a("p"),YTo=o("Examples:"),KTo=l(),f(wE.$$.fragment),ZTo=l(),Ge=a("div"),f(AE.$$.fragment),e8o=l(),Cte=a("p"),o8o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),r8o=l(),Ka=a("p"),t8o=o("The model class to instantiate is selected based on the "),Mte=a("code"),a8o=o("model_type"),n8o=o(` property of the config object (either
passed as an argument or loaded from `),Ete=a("code"),s8o=o("pretrained_model_name_or_path"),l8o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yte=a("code"),i8o=o("pretrained_model_name_or_path"),d8o=o(":"),c8o=l(),se=a("ul"),O1=a("li"),wte=a("strong"),f8o=o("bart"),m8o=o(" \u2014 "),PI=a("a"),g8o=o("BartForConditionalGeneration"),h8o=o(" (BART model)"),p8o=l(),G1=a("li"),Ate=a("strong"),_8o=o("bigbird_pegasus"),u8o=o(" \u2014 "),$I=a("a"),b8o=o("BigBirdPegasusForConditionalGeneration"),v8o=o(" (BigBirdPegasus model)"),T8o=l(),X1=a("li"),Lte=a("strong"),F8o=o("blenderbot"),C8o=o(" \u2014 "),II=a("a"),M8o=o("BlenderbotForConditionalGeneration"),E8o=o(" (Blenderbot model)"),y8o=l(),V1=a("li"),Bte=a("strong"),w8o=o("blenderbot-small"),A8o=o(" \u2014 "),jI=a("a"),L8o=o("BlenderbotSmallForConditionalGeneration"),B8o=o(" (BlenderbotSmall model)"),x8o=l(),z1=a("li"),xte=a("strong"),k8o=o("encoder-decoder"),R8o=o(" \u2014 "),DI=a("a"),S8o=o("EncoderDecoderModel"),P8o=o(" (Encoder decoder model)"),$8o=l(),W1=a("li"),kte=a("strong"),I8o=o("fsmt"),j8o=o(" \u2014 "),NI=a("a"),D8o=o("FSMTForConditionalGeneration"),N8o=o(" (FairSeq Machine-Translation model)"),q8o=l(),Q1=a("li"),Rte=a("strong"),O8o=o("led"),G8o=o(" \u2014 "),qI=a("a"),X8o=o("LEDForConditionalGeneration"),V8o=o(" (LED model)"),z8o=l(),H1=a("li"),Ste=a("strong"),W8o=o("m2m_100"),Q8o=o(" \u2014 "),OI=a("a"),H8o=o("M2M100ForConditionalGeneration"),U8o=o(" (M2M100 model)"),J8o=l(),U1=a("li"),Pte=a("strong"),Y8o=o("marian"),K8o=o(" \u2014 "),GI=a("a"),Z8o=o("MarianMTModel"),eFo=o(" (Marian model)"),oFo=l(),J1=a("li"),$te=a("strong"),rFo=o("mbart"),tFo=o(" \u2014 "),XI=a("a"),aFo=o("MBartForConditionalGeneration"),nFo=o(" (mBART model)"),sFo=l(),Y1=a("li"),Ite=a("strong"),lFo=o("mt5"),iFo=o(" \u2014 "),VI=a("a"),dFo=o("MT5ForConditionalGeneration"),cFo=o(" (mT5 model)"),fFo=l(),K1=a("li"),jte=a("strong"),mFo=o("pegasus"),gFo=o(" \u2014 "),zI=a("a"),hFo=o("PegasusForConditionalGeneration"),pFo=o(" (Pegasus model)"),_Fo=l(),Z1=a("li"),Dte=a("strong"),uFo=o("plbart"),bFo=o(" \u2014 "),WI=a("a"),vFo=o("PLBartForConditionalGeneration"),TFo=o(" (PLBart model)"),FFo=l(),eb=a("li"),Nte=a("strong"),CFo=o("prophetnet"),MFo=o(" \u2014 "),QI=a("a"),EFo=o("ProphetNetForConditionalGeneration"),yFo=o(" (ProphetNet model)"),wFo=l(),ob=a("li"),qte=a("strong"),AFo=o("t5"),LFo=o(" \u2014 "),HI=a("a"),BFo=o("T5ForConditionalGeneration"),xFo=o(" (T5 model)"),kFo=l(),rb=a("li"),Ote=a("strong"),RFo=o("xlm-prophetnet"),SFo=o(" \u2014 "),UI=a("a"),PFo=o("XLMProphetNetForConditionalGeneration"),$Fo=o(" (XLMProphetNet model)"),IFo=l(),tb=a("p"),jFo=o("The model is set in evaluation mode by default using "),Gte=a("code"),DFo=o("model.eval()"),NFo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xte=a("code"),qFo=o("model.train()"),OFo=l(),Vte=a("p"),GFo=o("Examples:"),XFo=l(),f(LE.$$.fragment),Qke=l(),vd=a("h2"),ab=a("a"),zte=a("span"),f(BE.$$.fragment),VFo=l(),Wte=a("span"),zFo=o("AutoModelForSequenceClassification"),Hke=l(),rr=a("div"),f(xE.$$.fragment),WFo=l(),Td=a("p"),QFo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Qte=a("code"),HFo=o("from_pretrained()"),UFo=o("class method or the "),Hte=a("code"),JFo=o("from_config()"),YFo=o(`class
method.`),KFo=l(),kE=a("p"),ZFo=o("This class cannot be instantiated directly using "),Ute=a("code"),eCo=o("__init__()"),oCo=o(" (throws an error)."),rCo=l(),Yr=a("div"),f(RE.$$.fragment),tCo=l(),Jte=a("p"),aCo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),nCo=l(),Fd=a("p"),sCo=o(`Note:
Loading a model from its configuration file does `),Yte=a("strong"),lCo=o("not"),iCo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Kte=a("code"),dCo=o("from_pretrained()"),cCo=o("to load the model weights."),fCo=l(),Zte=a("p"),mCo=o("Examples:"),gCo=l(),f(SE.$$.fragment),hCo=l(),Xe=a("div"),f(PE.$$.fragment),pCo=l(),eae=a("p"),_Co=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),uCo=l(),Za=a("p"),bCo=o("The model class to instantiate is selected based on the "),oae=a("code"),vCo=o("model_type"),TCo=o(` property of the config object (either
passed as an argument or loaded from `),rae=a("code"),FCo=o("pretrained_model_name_or_path"),CCo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tae=a("code"),MCo=o("pretrained_model_name_or_path"),ECo=o(":"),yCo=l(),A=a("ul"),nb=a("li"),aae=a("strong"),wCo=o("albert"),ACo=o(" \u2014 "),JI=a("a"),LCo=o("AlbertForSequenceClassification"),BCo=o(" (ALBERT model)"),xCo=l(),sb=a("li"),nae=a("strong"),kCo=o("bart"),RCo=o(" \u2014 "),YI=a("a"),SCo=o("BartForSequenceClassification"),PCo=o(" (BART model)"),$Co=l(),lb=a("li"),sae=a("strong"),ICo=o("bert"),jCo=o(" \u2014 "),KI=a("a"),DCo=o("BertForSequenceClassification"),NCo=o(" (BERT model)"),qCo=l(),ib=a("li"),lae=a("strong"),OCo=o("big_bird"),GCo=o(" \u2014 "),ZI=a("a"),XCo=o("BigBirdForSequenceClassification"),VCo=o(" (BigBird model)"),zCo=l(),db=a("li"),iae=a("strong"),WCo=o("bigbird_pegasus"),QCo=o(" \u2014 "),ej=a("a"),HCo=o("BigBirdPegasusForSequenceClassification"),UCo=o(" (BigBirdPegasus model)"),JCo=l(),cb=a("li"),dae=a("strong"),YCo=o("camembert"),KCo=o(" \u2014 "),oj=a("a"),ZCo=o("CamembertForSequenceClassification"),eMo=o(" (CamemBERT model)"),oMo=l(),fb=a("li"),cae=a("strong"),rMo=o("canine"),tMo=o(" \u2014 "),rj=a("a"),aMo=o("CanineForSequenceClassification"),nMo=o(" (Canine model)"),sMo=l(),mb=a("li"),fae=a("strong"),lMo=o("convbert"),iMo=o(" \u2014 "),tj=a("a"),dMo=o("ConvBertForSequenceClassification"),cMo=o(" (ConvBERT model)"),fMo=l(),gb=a("li"),mae=a("strong"),mMo=o("ctrl"),gMo=o(" \u2014 "),aj=a("a"),hMo=o("CTRLForSequenceClassification"),pMo=o(" (CTRL model)"),_Mo=l(),hb=a("li"),gae=a("strong"),uMo=o("data2vec-text"),bMo=o(" \u2014 "),nj=a("a"),vMo=o("Data2VecTextForSequenceClassification"),TMo=o(" (Data2VecText model)"),FMo=l(),pb=a("li"),hae=a("strong"),CMo=o("deberta"),MMo=o(" \u2014 "),sj=a("a"),EMo=o("DebertaForSequenceClassification"),yMo=o(" (DeBERTa model)"),wMo=l(),_b=a("li"),pae=a("strong"),AMo=o("deberta-v2"),LMo=o(" \u2014 "),lj=a("a"),BMo=o("DebertaV2ForSequenceClassification"),xMo=o(" (DeBERTa-v2 model)"),kMo=l(),ub=a("li"),_ae=a("strong"),RMo=o("distilbert"),SMo=o(" \u2014 "),ij=a("a"),PMo=o("DistilBertForSequenceClassification"),$Mo=o(" (DistilBERT model)"),IMo=l(),bb=a("li"),uae=a("strong"),jMo=o("electra"),DMo=o(" \u2014 "),dj=a("a"),NMo=o("ElectraForSequenceClassification"),qMo=o(" (ELECTRA model)"),OMo=l(),vb=a("li"),bae=a("strong"),GMo=o("flaubert"),XMo=o(" \u2014 "),cj=a("a"),VMo=o("FlaubertForSequenceClassification"),zMo=o(" (FlauBERT model)"),WMo=l(),Tb=a("li"),vae=a("strong"),QMo=o("fnet"),HMo=o(" \u2014 "),fj=a("a"),UMo=o("FNetForSequenceClassification"),JMo=o(" (FNet model)"),YMo=l(),Fb=a("li"),Tae=a("strong"),KMo=o("funnel"),ZMo=o(" \u2014 "),mj=a("a"),e4o=o("FunnelForSequenceClassification"),o4o=o(" (Funnel Transformer model)"),r4o=l(),Cb=a("li"),Fae=a("strong"),t4o=o("gpt2"),a4o=o(" \u2014 "),gj=a("a"),n4o=o("GPT2ForSequenceClassification"),s4o=o(" (OpenAI GPT-2 model)"),l4o=l(),Mb=a("li"),Cae=a("strong"),i4o=o("gpt_neo"),d4o=o(" \u2014 "),hj=a("a"),c4o=o("GPTNeoForSequenceClassification"),f4o=o(" (GPT Neo model)"),m4o=l(),Eb=a("li"),Mae=a("strong"),g4o=o("gptj"),h4o=o(" \u2014 "),pj=a("a"),p4o=o("GPTJForSequenceClassification"),_4o=o(" (GPT-J model)"),u4o=l(),yb=a("li"),Eae=a("strong"),b4o=o("ibert"),v4o=o(" \u2014 "),_j=a("a"),T4o=o("IBertForSequenceClassification"),F4o=o(" (I-BERT model)"),C4o=l(),wb=a("li"),yae=a("strong"),M4o=o("layoutlm"),E4o=o(" \u2014 "),uj=a("a"),y4o=o("LayoutLMForSequenceClassification"),w4o=o(" (LayoutLM model)"),A4o=l(),Ab=a("li"),wae=a("strong"),L4o=o("layoutlmv2"),B4o=o(" \u2014 "),bj=a("a"),x4o=o("LayoutLMv2ForSequenceClassification"),k4o=o(" (LayoutLMv2 model)"),R4o=l(),Lb=a("li"),Aae=a("strong"),S4o=o("led"),P4o=o(" \u2014 "),vj=a("a"),$4o=o("LEDForSequenceClassification"),I4o=o(" (LED model)"),j4o=l(),Bb=a("li"),Lae=a("strong"),D4o=o("longformer"),N4o=o(" \u2014 "),Tj=a("a"),q4o=o("LongformerForSequenceClassification"),O4o=o(" (Longformer model)"),G4o=l(),xb=a("li"),Bae=a("strong"),X4o=o("mbart"),V4o=o(" \u2014 "),Fj=a("a"),z4o=o("MBartForSequenceClassification"),W4o=o(" (mBART model)"),Q4o=l(),kb=a("li"),xae=a("strong"),H4o=o("megatron-bert"),U4o=o(" \u2014 "),Cj=a("a"),J4o=o("MegatronBertForSequenceClassification"),Y4o=o(" (MegatronBert model)"),K4o=l(),Rb=a("li"),kae=a("strong"),Z4o=o("mobilebert"),eEo=o(" \u2014 "),Mj=a("a"),oEo=o("MobileBertForSequenceClassification"),rEo=o(" (MobileBERT model)"),tEo=l(),Sb=a("li"),Rae=a("strong"),aEo=o("mpnet"),nEo=o(" \u2014 "),Ej=a("a"),sEo=o("MPNetForSequenceClassification"),lEo=o(" (MPNet model)"),iEo=l(),Pb=a("li"),Sae=a("strong"),dEo=o("nystromformer"),cEo=o(" \u2014 "),yj=a("a"),fEo=o("NystromformerForSequenceClassification"),mEo=o(" (Nystromformer model)"),gEo=l(),$b=a("li"),Pae=a("strong"),hEo=o("openai-gpt"),pEo=o(" \u2014 "),wj=a("a"),_Eo=o("OpenAIGPTForSequenceClassification"),uEo=o(" (OpenAI GPT model)"),bEo=l(),Ib=a("li"),$ae=a("strong"),vEo=o("perceiver"),TEo=o(" \u2014 "),Aj=a("a"),FEo=o("PerceiverForSequenceClassification"),CEo=o(" (Perceiver model)"),MEo=l(),jb=a("li"),Iae=a("strong"),EEo=o("plbart"),yEo=o(" \u2014 "),Lj=a("a"),wEo=o("PLBartForSequenceClassification"),AEo=o(" (PLBart model)"),LEo=l(),Db=a("li"),jae=a("strong"),BEo=o("qdqbert"),xEo=o(" \u2014 "),Bj=a("a"),kEo=o("QDQBertForSequenceClassification"),REo=o(" (QDQBert model)"),SEo=l(),Nb=a("li"),Dae=a("strong"),PEo=o("reformer"),$Eo=o(" \u2014 "),xj=a("a"),IEo=o("ReformerForSequenceClassification"),jEo=o(" (Reformer model)"),DEo=l(),qb=a("li"),Nae=a("strong"),NEo=o("rembert"),qEo=o(" \u2014 "),kj=a("a"),OEo=o("RemBertForSequenceClassification"),GEo=o(" (RemBERT model)"),XEo=l(),Ob=a("li"),qae=a("strong"),VEo=o("roberta"),zEo=o(" \u2014 "),Rj=a("a"),WEo=o("RobertaForSequenceClassification"),QEo=o(" (RoBERTa model)"),HEo=l(),Gb=a("li"),Oae=a("strong"),UEo=o("roformer"),JEo=o(" \u2014 "),Sj=a("a"),YEo=o("RoFormerForSequenceClassification"),KEo=o(" (RoFormer model)"),ZEo=l(),Xb=a("li"),Gae=a("strong"),e3o=o("squeezebert"),o3o=o(" \u2014 "),Pj=a("a"),r3o=o("SqueezeBertForSequenceClassification"),t3o=o(" (SqueezeBERT model)"),a3o=l(),Vb=a("li"),Xae=a("strong"),n3o=o("tapas"),s3o=o(" \u2014 "),$j=a("a"),l3o=o("TapasForSequenceClassification"),i3o=o(" (TAPAS model)"),d3o=l(),zb=a("li"),Vae=a("strong"),c3o=o("transfo-xl"),f3o=o(" \u2014 "),Ij=a("a"),m3o=o("TransfoXLForSequenceClassification"),g3o=o(" (Transformer-XL model)"),h3o=l(),Wb=a("li"),zae=a("strong"),p3o=o("xlm"),_3o=o(" \u2014 "),jj=a("a"),u3o=o("XLMForSequenceClassification"),b3o=o(" (XLM model)"),v3o=l(),Qb=a("li"),Wae=a("strong"),T3o=o("xlm-roberta"),F3o=o(" \u2014 "),Dj=a("a"),C3o=o("XLMRobertaForSequenceClassification"),M3o=o(" (XLM-RoBERTa model)"),E3o=l(),Hb=a("li"),Qae=a("strong"),y3o=o("xlm-roberta-xl"),w3o=o(" \u2014 "),Nj=a("a"),A3o=o("XLMRobertaXLForSequenceClassification"),L3o=o(" (XLM-RoBERTa-XL model)"),B3o=l(),Ub=a("li"),Hae=a("strong"),x3o=o("xlnet"),k3o=o(" \u2014 "),qj=a("a"),R3o=o("XLNetForSequenceClassification"),S3o=o(" (XLNet model)"),P3o=l(),Jb=a("li"),Uae=a("strong"),$3o=o("yoso"),I3o=o(" \u2014 "),Oj=a("a"),j3o=o("YosoForSequenceClassification"),D3o=o(" (YOSO model)"),N3o=l(),Yb=a("p"),q3o=o("The model is set in evaluation mode by default using "),Jae=a("code"),O3o=o("model.eval()"),G3o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yae=a("code"),X3o=o("model.train()"),V3o=l(),Kae=a("p"),z3o=o("Examples:"),W3o=l(),f($E.$$.fragment),Uke=l(),Cd=a("h2"),Kb=a("a"),Zae=a("span"),f(IE.$$.fragment),Q3o=l(),ene=a("span"),H3o=o("AutoModelForMultipleChoice"),Jke=l(),tr=a("div"),f(jE.$$.fragment),U3o=l(),Md=a("p"),J3o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),one=a("code"),Y3o=o("from_pretrained()"),K3o=o("class method or the "),rne=a("code"),Z3o=o("from_config()"),eyo=o(`class
method.`),oyo=l(),DE=a("p"),ryo=o("This class cannot be instantiated directly using "),tne=a("code"),tyo=o("__init__()"),ayo=o(" (throws an error)."),nyo=l(),Kr=a("div"),f(NE.$$.fragment),syo=l(),ane=a("p"),lyo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),iyo=l(),Ed=a("p"),dyo=o(`Note:
Loading a model from its configuration file does `),nne=a("strong"),cyo=o("not"),fyo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sne=a("code"),myo=o("from_pretrained()"),gyo=o("to load the model weights."),hyo=l(),lne=a("p"),pyo=o("Examples:"),_yo=l(),f(qE.$$.fragment),uyo=l(),Ve=a("div"),f(OE.$$.fragment),byo=l(),ine=a("p"),vyo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Tyo=l(),en=a("p"),Fyo=o("The model class to instantiate is selected based on the "),dne=a("code"),Cyo=o("model_type"),Myo=o(` property of the config object (either
passed as an argument or loaded from `),cne=a("code"),Eyo=o("pretrained_model_name_or_path"),yyo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fne=a("code"),wyo=o("pretrained_model_name_or_path"),Ayo=o(":"),Lyo=l(),O=a("ul"),Zb=a("li"),mne=a("strong"),Byo=o("albert"),xyo=o(" \u2014 "),Gj=a("a"),kyo=o("AlbertForMultipleChoice"),Ryo=o(" (ALBERT model)"),Syo=l(),e5=a("li"),gne=a("strong"),Pyo=o("bert"),$yo=o(" \u2014 "),Xj=a("a"),Iyo=o("BertForMultipleChoice"),jyo=o(" (BERT model)"),Dyo=l(),o5=a("li"),hne=a("strong"),Nyo=o("big_bird"),qyo=o(" \u2014 "),Vj=a("a"),Oyo=o("BigBirdForMultipleChoice"),Gyo=o(" (BigBird model)"),Xyo=l(),r5=a("li"),pne=a("strong"),Vyo=o("camembert"),zyo=o(" \u2014 "),zj=a("a"),Wyo=o("CamembertForMultipleChoice"),Qyo=o(" (CamemBERT model)"),Hyo=l(),t5=a("li"),_ne=a("strong"),Uyo=o("canine"),Jyo=o(" \u2014 "),Wj=a("a"),Yyo=o("CanineForMultipleChoice"),Kyo=o(" (Canine model)"),Zyo=l(),a5=a("li"),une=a("strong"),ewo=o("convbert"),owo=o(" \u2014 "),Qj=a("a"),rwo=o("ConvBertForMultipleChoice"),two=o(" (ConvBERT model)"),awo=l(),n5=a("li"),bne=a("strong"),nwo=o("data2vec-text"),swo=o(" \u2014 "),Hj=a("a"),lwo=o("Data2VecTextForMultipleChoice"),iwo=o(" (Data2VecText model)"),dwo=l(),s5=a("li"),vne=a("strong"),cwo=o("distilbert"),fwo=o(" \u2014 "),Uj=a("a"),mwo=o("DistilBertForMultipleChoice"),gwo=o(" (DistilBERT model)"),hwo=l(),l5=a("li"),Tne=a("strong"),pwo=o("electra"),_wo=o(" \u2014 "),Jj=a("a"),uwo=o("ElectraForMultipleChoice"),bwo=o(" (ELECTRA model)"),vwo=l(),i5=a("li"),Fne=a("strong"),Two=o("flaubert"),Fwo=o(" \u2014 "),Yj=a("a"),Cwo=o("FlaubertForMultipleChoice"),Mwo=o(" (FlauBERT model)"),Ewo=l(),d5=a("li"),Cne=a("strong"),ywo=o("fnet"),wwo=o(" \u2014 "),Kj=a("a"),Awo=o("FNetForMultipleChoice"),Lwo=o(" (FNet model)"),Bwo=l(),c5=a("li"),Mne=a("strong"),xwo=o("funnel"),kwo=o(" \u2014 "),Zj=a("a"),Rwo=o("FunnelForMultipleChoice"),Swo=o(" (Funnel Transformer model)"),Pwo=l(),f5=a("li"),Ene=a("strong"),$wo=o("ibert"),Iwo=o(" \u2014 "),eD=a("a"),jwo=o("IBertForMultipleChoice"),Dwo=o(" (I-BERT model)"),Nwo=l(),m5=a("li"),yne=a("strong"),qwo=o("longformer"),Owo=o(" \u2014 "),oD=a("a"),Gwo=o("LongformerForMultipleChoice"),Xwo=o(" (Longformer model)"),Vwo=l(),g5=a("li"),wne=a("strong"),zwo=o("megatron-bert"),Wwo=o(" \u2014 "),rD=a("a"),Qwo=o("MegatronBertForMultipleChoice"),Hwo=o(" (MegatronBert model)"),Uwo=l(),h5=a("li"),Ane=a("strong"),Jwo=o("mobilebert"),Ywo=o(" \u2014 "),tD=a("a"),Kwo=o("MobileBertForMultipleChoice"),Zwo=o(" (MobileBERT model)"),eAo=l(),p5=a("li"),Lne=a("strong"),oAo=o("mpnet"),rAo=o(" \u2014 "),aD=a("a"),tAo=o("MPNetForMultipleChoice"),aAo=o(" (MPNet model)"),nAo=l(),_5=a("li"),Bne=a("strong"),sAo=o("nystromformer"),lAo=o(" \u2014 "),nD=a("a"),iAo=o("NystromformerForMultipleChoice"),dAo=o(" (Nystromformer model)"),cAo=l(),u5=a("li"),xne=a("strong"),fAo=o("qdqbert"),mAo=o(" \u2014 "),sD=a("a"),gAo=o("QDQBertForMultipleChoice"),hAo=o(" (QDQBert model)"),pAo=l(),b5=a("li"),kne=a("strong"),_Ao=o("rembert"),uAo=o(" \u2014 "),lD=a("a"),bAo=o("RemBertForMultipleChoice"),vAo=o(" (RemBERT model)"),TAo=l(),v5=a("li"),Rne=a("strong"),FAo=o("roberta"),CAo=o(" \u2014 "),iD=a("a"),MAo=o("RobertaForMultipleChoice"),EAo=o(" (RoBERTa model)"),yAo=l(),T5=a("li"),Sne=a("strong"),wAo=o("roformer"),AAo=o(" \u2014 "),dD=a("a"),LAo=o("RoFormerForMultipleChoice"),BAo=o(" (RoFormer model)"),xAo=l(),F5=a("li"),Pne=a("strong"),kAo=o("squeezebert"),RAo=o(" \u2014 "),cD=a("a"),SAo=o("SqueezeBertForMultipleChoice"),PAo=o(" (SqueezeBERT model)"),$Ao=l(),C5=a("li"),$ne=a("strong"),IAo=o("xlm"),jAo=o(" \u2014 "),fD=a("a"),DAo=o("XLMForMultipleChoice"),NAo=o(" (XLM model)"),qAo=l(),M5=a("li"),Ine=a("strong"),OAo=o("xlm-roberta"),GAo=o(" \u2014 "),mD=a("a"),XAo=o("XLMRobertaForMultipleChoice"),VAo=o(" (XLM-RoBERTa model)"),zAo=l(),E5=a("li"),jne=a("strong"),WAo=o("xlm-roberta-xl"),QAo=o(" \u2014 "),gD=a("a"),HAo=o("XLMRobertaXLForMultipleChoice"),UAo=o(" (XLM-RoBERTa-XL model)"),JAo=l(),y5=a("li"),Dne=a("strong"),YAo=o("xlnet"),KAo=o(" \u2014 "),hD=a("a"),ZAo=o("XLNetForMultipleChoice"),eLo=o(" (XLNet model)"),oLo=l(),w5=a("li"),Nne=a("strong"),rLo=o("yoso"),tLo=o(" \u2014 "),pD=a("a"),aLo=o("YosoForMultipleChoice"),nLo=o(" (YOSO model)"),sLo=l(),A5=a("p"),lLo=o("The model is set in evaluation mode by default using "),qne=a("code"),iLo=o("model.eval()"),dLo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),One=a("code"),cLo=o("model.train()"),fLo=l(),Gne=a("p"),mLo=o("Examples:"),gLo=l(),f(GE.$$.fragment),Yke=l(),yd=a("h2"),L5=a("a"),Xne=a("span"),f(XE.$$.fragment),hLo=l(),Vne=a("span"),pLo=o("AutoModelForNextSentencePrediction"),Kke=l(),ar=a("div"),f(VE.$$.fragment),_Lo=l(),wd=a("p"),uLo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),zne=a("code"),bLo=o("from_pretrained()"),vLo=o("class method or the "),Wne=a("code"),TLo=o("from_config()"),FLo=o(`class
method.`),CLo=l(),zE=a("p"),MLo=o("This class cannot be instantiated directly using "),Qne=a("code"),ELo=o("__init__()"),yLo=o(" (throws an error)."),wLo=l(),Zr=a("div"),f(WE.$$.fragment),ALo=l(),Hne=a("p"),LLo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),BLo=l(),Ad=a("p"),xLo=o(`Note:
Loading a model from its configuration file does `),Une=a("strong"),kLo=o("not"),RLo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jne=a("code"),SLo=o("from_pretrained()"),PLo=o("to load the model weights."),$Lo=l(),Yne=a("p"),ILo=o("Examples:"),jLo=l(),f(QE.$$.fragment),DLo=l(),ze=a("div"),f(HE.$$.fragment),NLo=l(),Kne=a("p"),qLo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),OLo=l(),on=a("p"),GLo=o("The model class to instantiate is selected based on the "),Zne=a("code"),XLo=o("model_type"),VLo=o(` property of the config object (either
passed as an argument or loaded from `),ese=a("code"),zLo=o("pretrained_model_name_or_path"),WLo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ose=a("code"),QLo=o("pretrained_model_name_or_path"),HLo=o(":"),ULo=l(),ma=a("ul"),B5=a("li"),rse=a("strong"),JLo=o("bert"),YLo=o(" \u2014 "),_D=a("a"),KLo=o("BertForNextSentencePrediction"),ZLo=o(" (BERT model)"),e7o=l(),x5=a("li"),tse=a("strong"),o7o=o("fnet"),r7o=o(" \u2014 "),uD=a("a"),t7o=o("FNetForNextSentencePrediction"),a7o=o(" (FNet model)"),n7o=l(),k5=a("li"),ase=a("strong"),s7o=o("megatron-bert"),l7o=o(" \u2014 "),bD=a("a"),i7o=o("MegatronBertForNextSentencePrediction"),d7o=o(" (MegatronBert model)"),c7o=l(),R5=a("li"),nse=a("strong"),f7o=o("mobilebert"),m7o=o(" \u2014 "),vD=a("a"),g7o=o("MobileBertForNextSentencePrediction"),h7o=o(" (MobileBERT model)"),p7o=l(),S5=a("li"),sse=a("strong"),_7o=o("qdqbert"),u7o=o(" \u2014 "),TD=a("a"),b7o=o("QDQBertForNextSentencePrediction"),v7o=o(" (QDQBert model)"),T7o=l(),P5=a("p"),F7o=o("The model is set in evaluation mode by default using "),lse=a("code"),C7o=o("model.eval()"),M7o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ise=a("code"),E7o=o("model.train()"),y7o=l(),dse=a("p"),w7o=o("Examples:"),A7o=l(),f(UE.$$.fragment),Zke=l(),Ld=a("h2"),$5=a("a"),cse=a("span"),f(JE.$$.fragment),L7o=l(),fse=a("span"),B7o=o("AutoModelForTokenClassification"),eRe=l(),nr=a("div"),f(YE.$$.fragment),x7o=l(),Bd=a("p"),k7o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),mse=a("code"),R7o=o("from_pretrained()"),S7o=o("class method or the "),gse=a("code"),P7o=o("from_config()"),$7o=o(`class
method.`),I7o=l(),KE=a("p"),j7o=o("This class cannot be instantiated directly using "),hse=a("code"),D7o=o("__init__()"),N7o=o(" (throws an error)."),q7o=l(),et=a("div"),f(ZE.$$.fragment),O7o=l(),pse=a("p"),G7o=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),X7o=l(),xd=a("p"),V7o=o(`Note:
Loading a model from its configuration file does `),_se=a("strong"),z7o=o("not"),W7o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),use=a("code"),Q7o=o("from_pretrained()"),H7o=o("to load the model weights."),U7o=l(),bse=a("p"),J7o=o("Examples:"),Y7o=l(),f(e3.$$.fragment),K7o=l(),We=a("div"),f(o3.$$.fragment),Z7o=l(),vse=a("p"),e9o=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),o9o=l(),rn=a("p"),r9o=o("The model class to instantiate is selected based on the "),Tse=a("code"),t9o=o("model_type"),a9o=o(` property of the config object (either
passed as an argument or loaded from `),Fse=a("code"),n9o=o("pretrained_model_name_or_path"),s9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cse=a("code"),l9o=o("pretrained_model_name_or_path"),i9o=o(":"),d9o=l(),N=a("ul"),I5=a("li"),Mse=a("strong"),c9o=o("albert"),f9o=o(" \u2014 "),FD=a("a"),m9o=o("AlbertForTokenClassification"),g9o=o(" (ALBERT model)"),h9o=l(),j5=a("li"),Ese=a("strong"),p9o=o("bert"),_9o=o(" \u2014 "),CD=a("a"),u9o=o("BertForTokenClassification"),b9o=o(" (BERT model)"),v9o=l(),D5=a("li"),yse=a("strong"),T9o=o("big_bird"),F9o=o(" \u2014 "),MD=a("a"),C9o=o("BigBirdForTokenClassification"),M9o=o(" (BigBird model)"),E9o=l(),N5=a("li"),wse=a("strong"),y9o=o("camembert"),w9o=o(" \u2014 "),ED=a("a"),A9o=o("CamembertForTokenClassification"),L9o=o(" (CamemBERT model)"),B9o=l(),q5=a("li"),Ase=a("strong"),x9o=o("canine"),k9o=o(" \u2014 "),yD=a("a"),R9o=o("CanineForTokenClassification"),S9o=o(" (Canine model)"),P9o=l(),O5=a("li"),Lse=a("strong"),$9o=o("convbert"),I9o=o(" \u2014 "),wD=a("a"),j9o=o("ConvBertForTokenClassification"),D9o=o(" (ConvBERT model)"),N9o=l(),G5=a("li"),Bse=a("strong"),q9o=o("data2vec-text"),O9o=o(" \u2014 "),AD=a("a"),G9o=o("Data2VecTextForTokenClassification"),X9o=o(" (Data2VecText model)"),V9o=l(),X5=a("li"),xse=a("strong"),z9o=o("deberta"),W9o=o(" \u2014 "),LD=a("a"),Q9o=o("DebertaForTokenClassification"),H9o=o(" (DeBERTa model)"),U9o=l(),V5=a("li"),kse=a("strong"),J9o=o("deberta-v2"),Y9o=o(" \u2014 "),BD=a("a"),K9o=o("DebertaV2ForTokenClassification"),Z9o=o(" (DeBERTa-v2 model)"),eBo=l(),z5=a("li"),Rse=a("strong"),oBo=o("distilbert"),rBo=o(" \u2014 "),xD=a("a"),tBo=o("DistilBertForTokenClassification"),aBo=o(" (DistilBERT model)"),nBo=l(),W5=a("li"),Sse=a("strong"),sBo=o("electra"),lBo=o(" \u2014 "),kD=a("a"),iBo=o("ElectraForTokenClassification"),dBo=o(" (ELECTRA model)"),cBo=l(),Q5=a("li"),Pse=a("strong"),fBo=o("flaubert"),mBo=o(" \u2014 "),RD=a("a"),gBo=o("FlaubertForTokenClassification"),hBo=o(" (FlauBERT model)"),pBo=l(),H5=a("li"),$se=a("strong"),_Bo=o("fnet"),uBo=o(" \u2014 "),SD=a("a"),bBo=o("FNetForTokenClassification"),vBo=o(" (FNet model)"),TBo=l(),U5=a("li"),Ise=a("strong"),FBo=o("funnel"),CBo=o(" \u2014 "),PD=a("a"),MBo=o("FunnelForTokenClassification"),EBo=o(" (Funnel Transformer model)"),yBo=l(),J5=a("li"),jse=a("strong"),wBo=o("gpt2"),ABo=o(" \u2014 "),$D=a("a"),LBo=o("GPT2ForTokenClassification"),BBo=o(" (OpenAI GPT-2 model)"),xBo=l(),Y5=a("li"),Dse=a("strong"),kBo=o("ibert"),RBo=o(" \u2014 "),ID=a("a"),SBo=o("IBertForTokenClassification"),PBo=o(" (I-BERT model)"),$Bo=l(),K5=a("li"),Nse=a("strong"),IBo=o("layoutlm"),jBo=o(" \u2014 "),jD=a("a"),DBo=o("LayoutLMForTokenClassification"),NBo=o(" (LayoutLM model)"),qBo=l(),Z5=a("li"),qse=a("strong"),OBo=o("layoutlmv2"),GBo=o(" \u2014 "),DD=a("a"),XBo=o("LayoutLMv2ForTokenClassification"),VBo=o(" (LayoutLMv2 model)"),zBo=l(),e2=a("li"),Ose=a("strong"),WBo=o("longformer"),QBo=o(" \u2014 "),ND=a("a"),HBo=o("LongformerForTokenClassification"),UBo=o(" (Longformer model)"),JBo=l(),o2=a("li"),Gse=a("strong"),YBo=o("megatron-bert"),KBo=o(" \u2014 "),qD=a("a"),ZBo=o("MegatronBertForTokenClassification"),exo=o(" (MegatronBert model)"),oxo=l(),r2=a("li"),Xse=a("strong"),rxo=o("mobilebert"),txo=o(" \u2014 "),OD=a("a"),axo=o("MobileBertForTokenClassification"),nxo=o(" (MobileBERT model)"),sxo=l(),t2=a("li"),Vse=a("strong"),lxo=o("mpnet"),ixo=o(" \u2014 "),GD=a("a"),dxo=o("MPNetForTokenClassification"),cxo=o(" (MPNet model)"),fxo=l(),a2=a("li"),zse=a("strong"),mxo=o("nystromformer"),gxo=o(" \u2014 "),XD=a("a"),hxo=o("NystromformerForTokenClassification"),pxo=o(" (Nystromformer model)"),_xo=l(),n2=a("li"),Wse=a("strong"),uxo=o("qdqbert"),bxo=o(" \u2014 "),VD=a("a"),vxo=o("QDQBertForTokenClassification"),Txo=o(" (QDQBert model)"),Fxo=l(),s2=a("li"),Qse=a("strong"),Cxo=o("rembert"),Mxo=o(" \u2014 "),zD=a("a"),Exo=o("RemBertForTokenClassification"),yxo=o(" (RemBERT model)"),wxo=l(),l2=a("li"),Hse=a("strong"),Axo=o("roberta"),Lxo=o(" \u2014 "),WD=a("a"),Bxo=o("RobertaForTokenClassification"),xxo=o(" (RoBERTa model)"),kxo=l(),i2=a("li"),Use=a("strong"),Rxo=o("roformer"),Sxo=o(" \u2014 "),QD=a("a"),Pxo=o("RoFormerForTokenClassification"),$xo=o(" (RoFormer model)"),Ixo=l(),d2=a("li"),Jse=a("strong"),jxo=o("squeezebert"),Dxo=o(" \u2014 "),HD=a("a"),Nxo=o("SqueezeBertForTokenClassification"),qxo=o(" (SqueezeBERT model)"),Oxo=l(),c2=a("li"),Yse=a("strong"),Gxo=o("xlm"),Xxo=o(" \u2014 "),UD=a("a"),Vxo=o("XLMForTokenClassification"),zxo=o(" (XLM model)"),Wxo=l(),f2=a("li"),Kse=a("strong"),Qxo=o("xlm-roberta"),Hxo=o(" \u2014 "),JD=a("a"),Uxo=o("XLMRobertaForTokenClassification"),Jxo=o(" (XLM-RoBERTa model)"),Yxo=l(),m2=a("li"),Zse=a("strong"),Kxo=o("xlm-roberta-xl"),Zxo=o(" \u2014 "),YD=a("a"),eko=o("XLMRobertaXLForTokenClassification"),oko=o(" (XLM-RoBERTa-XL model)"),rko=l(),g2=a("li"),ele=a("strong"),tko=o("xlnet"),ako=o(" \u2014 "),KD=a("a"),nko=o("XLNetForTokenClassification"),sko=o(" (XLNet model)"),lko=l(),h2=a("li"),ole=a("strong"),iko=o("yoso"),dko=o(" \u2014 "),ZD=a("a"),cko=o("YosoForTokenClassification"),fko=o(" (YOSO model)"),mko=l(),p2=a("p"),gko=o("The model is set in evaluation mode by default using "),rle=a("code"),hko=o("model.eval()"),pko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tle=a("code"),_ko=o("model.train()"),uko=l(),ale=a("p"),bko=o("Examples:"),vko=l(),f(r3.$$.fragment),oRe=l(),kd=a("h2"),_2=a("a"),nle=a("span"),f(t3.$$.fragment),Tko=l(),sle=a("span"),Fko=o("AutoModelForQuestionAnswering"),rRe=l(),sr=a("div"),f(a3.$$.fragment),Cko=l(),Rd=a("p"),Mko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),lle=a("code"),Eko=o("from_pretrained()"),yko=o("class method or the "),ile=a("code"),wko=o("from_config()"),Ako=o(`class
method.`),Lko=l(),n3=a("p"),Bko=o("This class cannot be instantiated directly using "),dle=a("code"),xko=o("__init__()"),kko=o(" (throws an error)."),Rko=l(),ot=a("div"),f(s3.$$.fragment),Sko=l(),cle=a("p"),Pko=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),$ko=l(),Sd=a("p"),Iko=o(`Note:
Loading a model from its configuration file does `),fle=a("strong"),jko=o("not"),Dko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mle=a("code"),Nko=o("from_pretrained()"),qko=o("to load the model weights."),Oko=l(),gle=a("p"),Gko=o("Examples:"),Xko=l(),f(l3.$$.fragment),Vko=l(),Qe=a("div"),f(i3.$$.fragment),zko=l(),hle=a("p"),Wko=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Qko=l(),tn=a("p"),Hko=o("The model class to instantiate is selected based on the "),ple=a("code"),Uko=o("model_type"),Jko=o(` property of the config object (either
passed as an argument or loaded from `),_le=a("code"),Yko=o("pretrained_model_name_or_path"),Kko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ule=a("code"),Zko=o("pretrained_model_name_or_path"),eRo=o(":"),oRo=l(),R=a("ul"),u2=a("li"),ble=a("strong"),rRo=o("albert"),tRo=o(" \u2014 "),eN=a("a"),aRo=o("AlbertForQuestionAnswering"),nRo=o(" (ALBERT model)"),sRo=l(),b2=a("li"),vle=a("strong"),lRo=o("bart"),iRo=o(" \u2014 "),oN=a("a"),dRo=o("BartForQuestionAnswering"),cRo=o(" (BART model)"),fRo=l(),v2=a("li"),Tle=a("strong"),mRo=o("bert"),gRo=o(" \u2014 "),rN=a("a"),hRo=o("BertForQuestionAnswering"),pRo=o(" (BERT model)"),_Ro=l(),T2=a("li"),Fle=a("strong"),uRo=o("big_bird"),bRo=o(" \u2014 "),tN=a("a"),vRo=o("BigBirdForQuestionAnswering"),TRo=o(" (BigBird model)"),FRo=l(),F2=a("li"),Cle=a("strong"),CRo=o("bigbird_pegasus"),MRo=o(" \u2014 "),aN=a("a"),ERo=o("BigBirdPegasusForQuestionAnswering"),yRo=o(" (BigBirdPegasus model)"),wRo=l(),C2=a("li"),Mle=a("strong"),ARo=o("camembert"),LRo=o(" \u2014 "),nN=a("a"),BRo=o("CamembertForQuestionAnswering"),xRo=o(" (CamemBERT model)"),kRo=l(),M2=a("li"),Ele=a("strong"),RRo=o("canine"),SRo=o(" \u2014 "),sN=a("a"),PRo=o("CanineForQuestionAnswering"),$Ro=o(" (Canine model)"),IRo=l(),E2=a("li"),yle=a("strong"),jRo=o("convbert"),DRo=o(" \u2014 "),lN=a("a"),NRo=o("ConvBertForQuestionAnswering"),qRo=o(" (ConvBERT model)"),ORo=l(),y2=a("li"),wle=a("strong"),GRo=o("data2vec-text"),XRo=o(" \u2014 "),iN=a("a"),VRo=o("Data2VecTextForQuestionAnswering"),zRo=o(" (Data2VecText model)"),WRo=l(),w2=a("li"),Ale=a("strong"),QRo=o("deberta"),HRo=o(" \u2014 "),dN=a("a"),URo=o("DebertaForQuestionAnswering"),JRo=o(" (DeBERTa model)"),YRo=l(),A2=a("li"),Lle=a("strong"),KRo=o("deberta-v2"),ZRo=o(" \u2014 "),cN=a("a"),eSo=o("DebertaV2ForQuestionAnswering"),oSo=o(" (DeBERTa-v2 model)"),rSo=l(),L2=a("li"),Ble=a("strong"),tSo=o("distilbert"),aSo=o(" \u2014 "),fN=a("a"),nSo=o("DistilBertForQuestionAnswering"),sSo=o(" (DistilBERT model)"),lSo=l(),B2=a("li"),xle=a("strong"),iSo=o("electra"),dSo=o(" \u2014 "),mN=a("a"),cSo=o("ElectraForQuestionAnswering"),fSo=o(" (ELECTRA model)"),mSo=l(),x2=a("li"),kle=a("strong"),gSo=o("flaubert"),hSo=o(" \u2014 "),gN=a("a"),pSo=o("FlaubertForQuestionAnsweringSimple"),_So=o(" (FlauBERT model)"),uSo=l(),k2=a("li"),Rle=a("strong"),bSo=o("fnet"),vSo=o(" \u2014 "),hN=a("a"),TSo=o("FNetForQuestionAnswering"),FSo=o(" (FNet model)"),CSo=l(),R2=a("li"),Sle=a("strong"),MSo=o("funnel"),ESo=o(" \u2014 "),pN=a("a"),ySo=o("FunnelForQuestionAnswering"),wSo=o(" (Funnel Transformer model)"),ASo=l(),S2=a("li"),Ple=a("strong"),LSo=o("gptj"),BSo=o(" \u2014 "),_N=a("a"),xSo=o("GPTJForQuestionAnswering"),kSo=o(" (GPT-J model)"),RSo=l(),P2=a("li"),$le=a("strong"),SSo=o("ibert"),PSo=o(" \u2014 "),uN=a("a"),$So=o("IBertForQuestionAnswering"),ISo=o(" (I-BERT model)"),jSo=l(),$2=a("li"),Ile=a("strong"),DSo=o("layoutlmv2"),NSo=o(" \u2014 "),bN=a("a"),qSo=o("LayoutLMv2ForQuestionAnswering"),OSo=o(" (LayoutLMv2 model)"),GSo=l(),I2=a("li"),jle=a("strong"),XSo=o("led"),VSo=o(" \u2014 "),vN=a("a"),zSo=o("LEDForQuestionAnswering"),WSo=o(" (LED model)"),QSo=l(),j2=a("li"),Dle=a("strong"),HSo=o("longformer"),USo=o(" \u2014 "),TN=a("a"),JSo=o("LongformerForQuestionAnswering"),YSo=o(" (Longformer model)"),KSo=l(),D2=a("li"),Nle=a("strong"),ZSo=o("lxmert"),ePo=o(" \u2014 "),FN=a("a"),oPo=o("LxmertForQuestionAnswering"),rPo=o(" (LXMERT model)"),tPo=l(),N2=a("li"),qle=a("strong"),aPo=o("mbart"),nPo=o(" \u2014 "),CN=a("a"),sPo=o("MBartForQuestionAnswering"),lPo=o(" (mBART model)"),iPo=l(),q2=a("li"),Ole=a("strong"),dPo=o("megatron-bert"),cPo=o(" \u2014 "),MN=a("a"),fPo=o("MegatronBertForQuestionAnswering"),mPo=o(" (MegatronBert model)"),gPo=l(),O2=a("li"),Gle=a("strong"),hPo=o("mobilebert"),pPo=o(" \u2014 "),EN=a("a"),_Po=o("MobileBertForQuestionAnswering"),uPo=o(" (MobileBERT model)"),bPo=l(),G2=a("li"),Xle=a("strong"),vPo=o("mpnet"),TPo=o(" \u2014 "),yN=a("a"),FPo=o("MPNetForQuestionAnswering"),CPo=o(" (MPNet model)"),MPo=l(),X2=a("li"),Vle=a("strong"),EPo=o("nystromformer"),yPo=o(" \u2014 "),wN=a("a"),wPo=o("NystromformerForQuestionAnswering"),APo=o(" (Nystromformer model)"),LPo=l(),V2=a("li"),zle=a("strong"),BPo=o("qdqbert"),xPo=o(" \u2014 "),AN=a("a"),kPo=o("QDQBertForQuestionAnswering"),RPo=o(" (QDQBert model)"),SPo=l(),z2=a("li"),Wle=a("strong"),PPo=o("reformer"),$Po=o(" \u2014 "),LN=a("a"),IPo=o("ReformerForQuestionAnswering"),jPo=o(" (Reformer model)"),DPo=l(),W2=a("li"),Qle=a("strong"),NPo=o("rembert"),qPo=o(" \u2014 "),BN=a("a"),OPo=o("RemBertForQuestionAnswering"),GPo=o(" (RemBERT model)"),XPo=l(),Q2=a("li"),Hle=a("strong"),VPo=o("roberta"),zPo=o(" \u2014 "),xN=a("a"),WPo=o("RobertaForQuestionAnswering"),QPo=o(" (RoBERTa model)"),HPo=l(),H2=a("li"),Ule=a("strong"),UPo=o("roformer"),JPo=o(" \u2014 "),kN=a("a"),YPo=o("RoFormerForQuestionAnswering"),KPo=o(" (RoFormer model)"),ZPo=l(),U2=a("li"),Jle=a("strong"),e$o=o("splinter"),o$o=o(" \u2014 "),RN=a("a"),r$o=o("SplinterForQuestionAnswering"),t$o=o(" (Splinter model)"),a$o=l(),J2=a("li"),Yle=a("strong"),n$o=o("squeezebert"),s$o=o(" \u2014 "),SN=a("a"),l$o=o("SqueezeBertForQuestionAnswering"),i$o=o(" (SqueezeBERT model)"),d$o=l(),Y2=a("li"),Kle=a("strong"),c$o=o("xlm"),f$o=o(" \u2014 "),PN=a("a"),m$o=o("XLMForQuestionAnsweringSimple"),g$o=o(" (XLM model)"),h$o=l(),K2=a("li"),Zle=a("strong"),p$o=o("xlm-roberta"),_$o=o(" \u2014 "),$N=a("a"),u$o=o("XLMRobertaForQuestionAnswering"),b$o=o(" (XLM-RoBERTa model)"),v$o=l(),Z2=a("li"),eie=a("strong"),T$o=o("xlm-roberta-xl"),F$o=o(" \u2014 "),IN=a("a"),C$o=o("XLMRobertaXLForQuestionAnswering"),M$o=o(" (XLM-RoBERTa-XL model)"),E$o=l(),ev=a("li"),oie=a("strong"),y$o=o("xlnet"),w$o=o(" \u2014 "),jN=a("a"),A$o=o("XLNetForQuestionAnsweringSimple"),L$o=o(" (XLNet model)"),B$o=l(),ov=a("li"),rie=a("strong"),x$o=o("yoso"),k$o=o(" \u2014 "),DN=a("a"),R$o=o("YosoForQuestionAnswering"),S$o=o(" (YOSO model)"),P$o=l(),rv=a("p"),$$o=o("The model is set in evaluation mode by default using "),tie=a("code"),I$o=o("model.eval()"),j$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aie=a("code"),D$o=o("model.train()"),N$o=l(),nie=a("p"),q$o=o("Examples:"),O$o=l(),f(d3.$$.fragment),tRe=l(),Pd=a("h2"),tv=a("a"),sie=a("span"),f(c3.$$.fragment),G$o=l(),lie=a("span"),X$o=o("AutoModelForTableQuestionAnswering"),aRe=l(),lr=a("div"),f(f3.$$.fragment),V$o=l(),$d=a("p"),z$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),iie=a("code"),W$o=o("from_pretrained()"),Q$o=o("class method or the "),die=a("code"),H$o=o("from_config()"),U$o=o(`class
method.`),J$o=l(),m3=a("p"),Y$o=o("This class cannot be instantiated directly using "),cie=a("code"),K$o=o("__init__()"),Z$o=o(" (throws an error)."),eIo=l(),rt=a("div"),f(g3.$$.fragment),oIo=l(),fie=a("p"),rIo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),tIo=l(),Id=a("p"),aIo=o(`Note:
Loading a model from its configuration file does `),mie=a("strong"),nIo=o("not"),sIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gie=a("code"),lIo=o("from_pretrained()"),iIo=o("to load the model weights."),dIo=l(),hie=a("p"),cIo=o("Examples:"),fIo=l(),f(h3.$$.fragment),mIo=l(),He=a("div"),f(p3.$$.fragment),gIo=l(),pie=a("p"),hIo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),pIo=l(),an=a("p"),_Io=o("The model class to instantiate is selected based on the "),_ie=a("code"),uIo=o("model_type"),bIo=o(` property of the config object (either
passed as an argument or loaded from `),uie=a("code"),vIo=o("pretrained_model_name_or_path"),TIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bie=a("code"),FIo=o("pretrained_model_name_or_path"),CIo=o(":"),MIo=l(),vie=a("ul"),av=a("li"),Tie=a("strong"),EIo=o("tapas"),yIo=o(" \u2014 "),NN=a("a"),wIo=o("TapasForQuestionAnswering"),AIo=o(" (TAPAS model)"),LIo=l(),nv=a("p"),BIo=o("The model is set in evaluation mode by default using "),Fie=a("code"),xIo=o("model.eval()"),kIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cie=a("code"),RIo=o("model.train()"),SIo=l(),Mie=a("p"),PIo=o("Examples:"),$Io=l(),f(_3.$$.fragment),nRe=l(),jd=a("h2"),sv=a("a"),Eie=a("span"),f(u3.$$.fragment),IIo=l(),yie=a("span"),jIo=o("AutoModelForImageClassification"),sRe=l(),ir=a("div"),f(b3.$$.fragment),DIo=l(),Dd=a("p"),NIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),wie=a("code"),qIo=o("from_pretrained()"),OIo=o("class method or the "),Aie=a("code"),GIo=o("from_config()"),XIo=o(`class
method.`),VIo=l(),v3=a("p"),zIo=o("This class cannot be instantiated directly using "),Lie=a("code"),WIo=o("__init__()"),QIo=o(" (throws an error)."),HIo=l(),tt=a("div"),f(T3.$$.fragment),UIo=l(),Bie=a("p"),JIo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),YIo=l(),Nd=a("p"),KIo=o(`Note:
Loading a model from its configuration file does `),xie=a("strong"),ZIo=o("not"),ejo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kie=a("code"),ojo=o("from_pretrained()"),rjo=o("to load the model weights."),tjo=l(),Rie=a("p"),ajo=o("Examples:"),njo=l(),f(F3.$$.fragment),sjo=l(),Ue=a("div"),f(C3.$$.fragment),ljo=l(),Sie=a("p"),ijo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),djo=l(),nn=a("p"),cjo=o("The model class to instantiate is selected based on the "),Pie=a("code"),fjo=o("model_type"),mjo=o(` property of the config object (either
passed as an argument or loaded from `),$ie=a("code"),gjo=o("pretrained_model_name_or_path"),hjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Iie=a("code"),pjo=o("pretrained_model_name_or_path"),_jo=o(":"),ujo=l(),me=a("ul"),lv=a("li"),jie=a("strong"),bjo=o("beit"),vjo=o(" \u2014 "),qN=a("a"),Tjo=o("BeitForImageClassification"),Fjo=o(" (BEiT model)"),Cjo=l(),iv=a("li"),Die=a("strong"),Mjo=o("convnext"),Ejo=o(" \u2014 "),ON=a("a"),yjo=o("ConvNextForImageClassification"),wjo=o(" (ConvNext model)"),Ajo=l(),zs=a("li"),Nie=a("strong"),Ljo=o("deit"),Bjo=o(" \u2014 "),GN=a("a"),xjo=o("DeiTForImageClassification"),kjo=o(" or "),XN=a("a"),Rjo=o("DeiTForImageClassificationWithTeacher"),Sjo=o(" (DeiT model)"),Pjo=l(),dv=a("li"),qie=a("strong"),$jo=o("imagegpt"),Ijo=o(" \u2014 "),VN=a("a"),jjo=o("ImageGPTForImageClassification"),Djo=o(" (ImageGPT model)"),Njo=l(),pa=a("li"),Oie=a("strong"),qjo=o("perceiver"),Ojo=o(" \u2014 "),zN=a("a"),Gjo=o("PerceiverForImageClassificationLearned"),Xjo=o(" or "),WN=a("a"),Vjo=o("PerceiverForImageClassificationFourier"),zjo=o(" or "),QN=a("a"),Wjo=o("PerceiverForImageClassificationConvProcessing"),Qjo=o(" (Perceiver model)"),Hjo=l(),cv=a("li"),Gie=a("strong"),Ujo=o("poolformer"),Jjo=o(" \u2014 "),HN=a("a"),Yjo=o("PoolFormerForImageClassification"),Kjo=o(" (PoolFormer model)"),Zjo=l(),fv=a("li"),Xie=a("strong"),eDo=o("resnet"),oDo=o(" \u2014 "),UN=a("a"),rDo=o("ResNetForImageClassification"),tDo=o(" (ResNet model)"),aDo=l(),mv=a("li"),Vie=a("strong"),nDo=o("segformer"),sDo=o(" \u2014 "),JN=a("a"),lDo=o("SegformerForImageClassification"),iDo=o(" (SegFormer model)"),dDo=l(),gv=a("li"),zie=a("strong"),cDo=o("swin"),fDo=o(" \u2014 "),YN=a("a"),mDo=o("SwinForImageClassification"),gDo=o(" (Swin model)"),hDo=l(),hv=a("li"),Wie=a("strong"),pDo=o("van"),_Do=o(" \u2014 "),KN=a("a"),uDo=o("VanForImageClassification"),bDo=o(" (VAN model)"),vDo=l(),pv=a("li"),Qie=a("strong"),TDo=o("vit"),FDo=o(" \u2014 "),ZN=a("a"),CDo=o("ViTForImageClassification"),MDo=o(" (ViT model)"),EDo=l(),_v=a("p"),yDo=o("The model is set in evaluation mode by default using "),Hie=a("code"),wDo=o("model.eval()"),ADo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uie=a("code"),LDo=o("model.train()"),BDo=l(),Jie=a("p"),xDo=o("Examples:"),kDo=l(),f(M3.$$.fragment),lRe=l(),qd=a("h2"),uv=a("a"),Yie=a("span"),f(E3.$$.fragment),RDo=l(),Kie=a("span"),SDo=o("AutoModelForVision2Seq"),iRe=l(),dr=a("div"),f(y3.$$.fragment),PDo=l(),Od=a("p"),$Do=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Zie=a("code"),IDo=o("from_pretrained()"),jDo=o("class method or the "),ede=a("code"),DDo=o("from_config()"),NDo=o(`class
method.`),qDo=l(),w3=a("p"),ODo=o("This class cannot be instantiated directly using "),ode=a("code"),GDo=o("__init__()"),XDo=o(" (throws an error)."),VDo=l(),at=a("div"),f(A3.$$.fragment),zDo=l(),rde=a("p"),WDo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),QDo=l(),Gd=a("p"),HDo=o(`Note:
Loading a model from its configuration file does `),tde=a("strong"),UDo=o("not"),JDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ade=a("code"),YDo=o("from_pretrained()"),KDo=o("to load the model weights."),ZDo=l(),nde=a("p"),eNo=o("Examples:"),oNo=l(),f(L3.$$.fragment),rNo=l(),Je=a("div"),f(B3.$$.fragment),tNo=l(),sde=a("p"),aNo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),nNo=l(),sn=a("p"),sNo=o("The model class to instantiate is selected based on the "),lde=a("code"),lNo=o("model_type"),iNo=o(` property of the config object (either
passed as an argument or loaded from `),ide=a("code"),dNo=o("pretrained_model_name_or_path"),cNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dde=a("code"),fNo=o("pretrained_model_name_or_path"),mNo=o(":"),gNo=l(),cde=a("ul"),bv=a("li"),fde=a("strong"),hNo=o("vision-encoder-decoder"),pNo=o(" \u2014 "),eq=a("a"),_No=o("VisionEncoderDecoderModel"),uNo=o(" (Vision Encoder decoder model)"),bNo=l(),vv=a("p"),vNo=o("The model is set in evaluation mode by default using "),mde=a("code"),TNo=o("model.eval()"),FNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gde=a("code"),CNo=o("model.train()"),MNo=l(),hde=a("p"),ENo=o("Examples:"),yNo=l(),f(x3.$$.fragment),dRe=l(),Xd=a("h2"),Tv=a("a"),pde=a("span"),f(k3.$$.fragment),wNo=l(),_de=a("span"),ANo=o("AutoModelForAudioClassification"),cRe=l(),cr=a("div"),f(R3.$$.fragment),LNo=l(),Vd=a("p"),BNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),ude=a("code"),xNo=o("from_pretrained()"),kNo=o("class method or the "),bde=a("code"),RNo=o("from_config()"),SNo=o(`class
method.`),PNo=l(),S3=a("p"),$No=o("This class cannot be instantiated directly using "),vde=a("code"),INo=o("__init__()"),jNo=o(" (throws an error)."),DNo=l(),nt=a("div"),f(P3.$$.fragment),NNo=l(),Tde=a("p"),qNo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),ONo=l(),zd=a("p"),GNo=o(`Note:
Loading a model from its configuration file does `),Fde=a("strong"),XNo=o("not"),VNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cde=a("code"),zNo=o("from_pretrained()"),WNo=o("to load the model weights."),QNo=l(),Mde=a("p"),HNo=o("Examples:"),UNo=l(),f($3.$$.fragment),JNo=l(),Ye=a("div"),f(I3.$$.fragment),YNo=l(),Ede=a("p"),KNo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),ZNo=l(),ln=a("p"),eqo=o("The model class to instantiate is selected based on the "),yde=a("code"),oqo=o("model_type"),rqo=o(` property of the config object (either
passed as an argument or loaded from `),wde=a("code"),tqo=o("pretrained_model_name_or_path"),aqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ade=a("code"),nqo=o("pretrained_model_name_or_path"),sqo=o(":"),lqo=l(),ke=a("ul"),Fv=a("li"),Lde=a("strong"),iqo=o("data2vec-audio"),dqo=o(" \u2014 "),oq=a("a"),cqo=o("Data2VecAudioForSequenceClassification"),fqo=o(" (Data2VecAudio model)"),mqo=l(),Cv=a("li"),Bde=a("strong"),gqo=o("hubert"),hqo=o(" \u2014 "),rq=a("a"),pqo=o("HubertForSequenceClassification"),_qo=o(" (Hubert model)"),uqo=l(),Mv=a("li"),xde=a("strong"),bqo=o("sew"),vqo=o(" \u2014 "),tq=a("a"),Tqo=o("SEWForSequenceClassification"),Fqo=o(" (SEW model)"),Cqo=l(),Ev=a("li"),kde=a("strong"),Mqo=o("sew-d"),Eqo=o(" \u2014 "),aq=a("a"),yqo=o("SEWDForSequenceClassification"),wqo=o(" (SEW-D model)"),Aqo=l(),yv=a("li"),Rde=a("strong"),Lqo=o("unispeech"),Bqo=o(" \u2014 "),nq=a("a"),xqo=o("UniSpeechForSequenceClassification"),kqo=o(" (UniSpeech model)"),Rqo=l(),wv=a("li"),Sde=a("strong"),Sqo=o("unispeech-sat"),Pqo=o(" \u2014 "),sq=a("a"),$qo=o("UniSpeechSatForSequenceClassification"),Iqo=o(" (UniSpeechSat model)"),jqo=l(),Av=a("li"),Pde=a("strong"),Dqo=o("wav2vec2"),Nqo=o(" \u2014 "),lq=a("a"),qqo=o("Wav2Vec2ForSequenceClassification"),Oqo=o(" (Wav2Vec2 model)"),Gqo=l(),Lv=a("li"),$de=a("strong"),Xqo=o("wavlm"),Vqo=o(" \u2014 "),iq=a("a"),zqo=o("WavLMForSequenceClassification"),Wqo=o(" (WavLM model)"),Qqo=l(),Bv=a("p"),Hqo=o("The model is set in evaluation mode by default using "),Ide=a("code"),Uqo=o("model.eval()"),Jqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jde=a("code"),Yqo=o("model.train()"),Kqo=l(),Dde=a("p"),Zqo=o("Examples:"),eOo=l(),f(j3.$$.fragment),fRe=l(),Wd=a("h2"),xv=a("a"),Nde=a("span"),f(D3.$$.fragment),oOo=l(),qde=a("span"),rOo=o("AutoModelForAudioFrameClassification"),mRe=l(),fr=a("div"),f(N3.$$.fragment),tOo=l(),Qd=a("p"),aOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Ode=a("code"),nOo=o("from_pretrained()"),sOo=o("class method or the "),Gde=a("code"),lOo=o("from_config()"),iOo=o(`class
method.`),dOo=l(),q3=a("p"),cOo=o("This class cannot be instantiated directly using "),Xde=a("code"),fOo=o("__init__()"),mOo=o(" (throws an error)."),gOo=l(),st=a("div"),f(O3.$$.fragment),hOo=l(),Vde=a("p"),pOo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),_Oo=l(),Hd=a("p"),uOo=o(`Note:
Loading a model from its configuration file does `),zde=a("strong"),bOo=o("not"),vOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wde=a("code"),TOo=o("from_pretrained()"),FOo=o("to load the model weights."),COo=l(),Qde=a("p"),MOo=o("Examples:"),EOo=l(),f(G3.$$.fragment),yOo=l(),Ke=a("div"),f(X3.$$.fragment),wOo=l(),Hde=a("p"),AOo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),LOo=l(),dn=a("p"),BOo=o("The model class to instantiate is selected based on the "),Ude=a("code"),xOo=o("model_type"),kOo=o(` property of the config object (either
passed as an argument or loaded from `),Jde=a("code"),ROo=o("pretrained_model_name_or_path"),SOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yde=a("code"),POo=o("pretrained_model_name_or_path"),$Oo=o(":"),IOo=l(),cn=a("ul"),kv=a("li"),Kde=a("strong"),jOo=o("data2vec-audio"),DOo=o(" \u2014 "),dq=a("a"),NOo=o("Data2VecAudioForAudioFrameClassification"),qOo=o(" (Data2VecAudio model)"),OOo=l(),Rv=a("li"),Zde=a("strong"),GOo=o("unispeech-sat"),XOo=o(" \u2014 "),cq=a("a"),VOo=o("UniSpeechSatForAudioFrameClassification"),zOo=o(" (UniSpeechSat model)"),WOo=l(),Sv=a("li"),ece=a("strong"),QOo=o("wav2vec2"),HOo=o(" \u2014 "),fq=a("a"),UOo=o("Wav2Vec2ForAudioFrameClassification"),JOo=o(" (Wav2Vec2 model)"),YOo=l(),Pv=a("li"),oce=a("strong"),KOo=o("wavlm"),ZOo=o(" \u2014 "),mq=a("a"),eGo=o("WavLMForAudioFrameClassification"),oGo=o(" (WavLM model)"),rGo=l(),$v=a("p"),tGo=o("The model is set in evaluation mode by default using "),rce=a("code"),aGo=o("model.eval()"),nGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tce=a("code"),sGo=o("model.train()"),lGo=l(),ace=a("p"),iGo=o("Examples:"),dGo=l(),f(V3.$$.fragment),gRe=l(),Ud=a("h2"),Iv=a("a"),nce=a("span"),f(z3.$$.fragment),cGo=l(),sce=a("span"),fGo=o("AutoModelForCTC"),hRe=l(),mr=a("div"),f(W3.$$.fragment),mGo=l(),Jd=a("p"),gGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),lce=a("code"),hGo=o("from_pretrained()"),pGo=o("class method or the "),ice=a("code"),_Go=o("from_config()"),uGo=o(`class
method.`),bGo=l(),Q3=a("p"),vGo=o("This class cannot be instantiated directly using "),dce=a("code"),TGo=o("__init__()"),FGo=o(" (throws an error)."),CGo=l(),lt=a("div"),f(H3.$$.fragment),MGo=l(),cce=a("p"),EGo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),yGo=l(),Yd=a("p"),wGo=o(`Note:
Loading a model from its configuration file does `),fce=a("strong"),AGo=o("not"),LGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mce=a("code"),BGo=o("from_pretrained()"),xGo=o("to load the model weights."),kGo=l(),gce=a("p"),RGo=o("Examples:"),SGo=l(),f(U3.$$.fragment),PGo=l(),Ze=a("div"),f(J3.$$.fragment),$Go=l(),hce=a("p"),IGo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),jGo=l(),fn=a("p"),DGo=o("The model class to instantiate is selected based on the "),pce=a("code"),NGo=o("model_type"),qGo=o(` property of the config object (either
passed as an argument or loaded from `),_ce=a("code"),OGo=o("pretrained_model_name_or_path"),GGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uce=a("code"),XGo=o("pretrained_model_name_or_path"),VGo=o(":"),zGo=l(),Re=a("ul"),jv=a("li"),bce=a("strong"),WGo=o("data2vec-audio"),QGo=o(" \u2014 "),gq=a("a"),HGo=o("Data2VecAudioForCTC"),UGo=o(" (Data2VecAudio model)"),JGo=l(),Dv=a("li"),vce=a("strong"),YGo=o("hubert"),KGo=o(" \u2014 "),hq=a("a"),ZGo=o("HubertForCTC"),eXo=o(" (Hubert model)"),oXo=l(),Nv=a("li"),Tce=a("strong"),rXo=o("sew"),tXo=o(" \u2014 "),pq=a("a"),aXo=o("SEWForCTC"),nXo=o(" (SEW model)"),sXo=l(),qv=a("li"),Fce=a("strong"),lXo=o("sew-d"),iXo=o(" \u2014 "),_q=a("a"),dXo=o("SEWDForCTC"),cXo=o(" (SEW-D model)"),fXo=l(),Ov=a("li"),Cce=a("strong"),mXo=o("unispeech"),gXo=o(" \u2014 "),uq=a("a"),hXo=o("UniSpeechForCTC"),pXo=o(" (UniSpeech model)"),_Xo=l(),Gv=a("li"),Mce=a("strong"),uXo=o("unispeech-sat"),bXo=o(" \u2014 "),bq=a("a"),vXo=o("UniSpeechSatForCTC"),TXo=o(" (UniSpeechSat model)"),FXo=l(),Xv=a("li"),Ece=a("strong"),CXo=o("wav2vec2"),MXo=o(" \u2014 "),vq=a("a"),EXo=o("Wav2Vec2ForCTC"),yXo=o(" (Wav2Vec2 model)"),wXo=l(),Vv=a("li"),yce=a("strong"),AXo=o("wavlm"),LXo=o(" \u2014 "),Tq=a("a"),BXo=o("WavLMForCTC"),xXo=o(" (WavLM model)"),kXo=l(),zv=a("p"),RXo=o("The model is set in evaluation mode by default using "),wce=a("code"),SXo=o("model.eval()"),PXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ace=a("code"),$Xo=o("model.train()"),IXo=l(),Lce=a("p"),jXo=o("Examples:"),DXo=l(),f(Y3.$$.fragment),pRe=l(),Kd=a("h2"),Wv=a("a"),Bce=a("span"),f(K3.$$.fragment),NXo=l(),xce=a("span"),qXo=o("AutoModelForSpeechSeq2Seq"),_Re=l(),gr=a("div"),f(Z3.$$.fragment),OXo=l(),Zd=a("p"),GXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),kce=a("code"),XXo=o("from_pretrained()"),VXo=o("class method or the "),Rce=a("code"),zXo=o("from_config()"),WXo=o(`class
method.`),QXo=l(),ey=a("p"),HXo=o("This class cannot be instantiated directly using "),Sce=a("code"),UXo=o("__init__()"),JXo=o(" (throws an error)."),YXo=l(),it=a("div"),f(oy.$$.fragment),KXo=l(),Pce=a("p"),ZXo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),eVo=l(),ec=a("p"),oVo=o(`Note:
Loading a model from its configuration file does `),$ce=a("strong"),rVo=o("not"),tVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ice=a("code"),aVo=o("from_pretrained()"),nVo=o("to load the model weights."),sVo=l(),jce=a("p"),lVo=o("Examples:"),iVo=l(),f(ry.$$.fragment),dVo=l(),eo=a("div"),f(ty.$$.fragment),cVo=l(),Dce=a("p"),fVo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),mVo=l(),mn=a("p"),gVo=o("The model class to instantiate is selected based on the "),Nce=a("code"),hVo=o("model_type"),pVo=o(` property of the config object (either
passed as an argument or loaded from `),qce=a("code"),_Vo=o("pretrained_model_name_or_path"),uVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oce=a("code"),bVo=o("pretrained_model_name_or_path"),vVo=o(":"),TVo=l(),ay=a("ul"),Qv=a("li"),Gce=a("strong"),FVo=o("speech-encoder-decoder"),CVo=o(" \u2014 "),Fq=a("a"),MVo=o("SpeechEncoderDecoderModel"),EVo=o(" (Speech Encoder decoder model)"),yVo=l(),Hv=a("li"),Xce=a("strong"),wVo=o("speech_to_text"),AVo=o(" \u2014 "),Cq=a("a"),LVo=o("Speech2TextForConditionalGeneration"),BVo=o(" (Speech2Text model)"),xVo=l(),Uv=a("p"),kVo=o("The model is set in evaluation mode by default using "),Vce=a("code"),RVo=o("model.eval()"),SVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zce=a("code"),PVo=o("model.train()"),$Vo=l(),Wce=a("p"),IVo=o("Examples:"),jVo=l(),f(ny.$$.fragment),uRe=l(),oc=a("h2"),Jv=a("a"),Qce=a("span"),f(sy.$$.fragment),DVo=l(),Hce=a("span"),NVo=o("AutoModelForAudioXVector"),bRe=l(),hr=a("div"),f(ly.$$.fragment),qVo=l(),rc=a("p"),OVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),Uce=a("code"),GVo=o("from_pretrained()"),XVo=o("class method or the "),Jce=a("code"),VVo=o("from_config()"),zVo=o(`class
method.`),WVo=l(),iy=a("p"),QVo=o("This class cannot be instantiated directly using "),Yce=a("code"),HVo=o("__init__()"),UVo=o(" (throws an error)."),JVo=l(),dt=a("div"),f(dy.$$.fragment),YVo=l(),Kce=a("p"),KVo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),ZVo=l(),tc=a("p"),ezo=o(`Note:
Loading a model from its configuration file does `),Zce=a("strong"),ozo=o("not"),rzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),efe=a("code"),tzo=o("from_pretrained()"),azo=o("to load the model weights."),nzo=l(),ofe=a("p"),szo=o("Examples:"),lzo=l(),f(cy.$$.fragment),izo=l(),oo=a("div"),f(fy.$$.fragment),dzo=l(),rfe=a("p"),czo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),fzo=l(),gn=a("p"),mzo=o("The model class to instantiate is selected based on the "),tfe=a("code"),gzo=o("model_type"),hzo=o(` property of the config object (either
passed as an argument or loaded from `),afe=a("code"),pzo=o("pretrained_model_name_or_path"),_zo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nfe=a("code"),uzo=o("pretrained_model_name_or_path"),bzo=o(":"),vzo=l(),hn=a("ul"),Yv=a("li"),sfe=a("strong"),Tzo=o("data2vec-audio"),Fzo=o(" \u2014 "),Mq=a("a"),Czo=o("Data2VecAudioForXVector"),Mzo=o(" (Data2VecAudio model)"),Ezo=l(),Kv=a("li"),lfe=a("strong"),yzo=o("unispeech-sat"),wzo=o(" \u2014 "),Eq=a("a"),Azo=o("UniSpeechSatForXVector"),Lzo=o(" (UniSpeechSat model)"),Bzo=l(),Zv=a("li"),ife=a("strong"),xzo=o("wav2vec2"),kzo=o(" \u2014 "),yq=a("a"),Rzo=o("Wav2Vec2ForXVector"),Szo=o(" (Wav2Vec2 model)"),Pzo=l(),e6=a("li"),dfe=a("strong"),$zo=o("wavlm"),Izo=o(" \u2014 "),wq=a("a"),jzo=o("WavLMForXVector"),Dzo=o(" (WavLM model)"),Nzo=l(),o6=a("p"),qzo=o("The model is set in evaluation mode by default using "),cfe=a("code"),Ozo=o("model.eval()"),Gzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ffe=a("code"),Xzo=o("model.train()"),Vzo=l(),mfe=a("p"),zzo=o("Examples:"),Wzo=l(),f(my.$$.fragment),vRe=l(),ac=a("h2"),r6=a("a"),gfe=a("span"),f(gy.$$.fragment),Qzo=l(),hfe=a("span"),Hzo=o("AutoModelForMaskedImageModeling"),TRe=l(),pr=a("div"),f(hy.$$.fragment),Uzo=l(),nc=a("p"),Jzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),pfe=a("code"),Yzo=o("from_pretrained()"),Kzo=o("class method or the "),_fe=a("code"),Zzo=o("from_config()"),eWo=o(`class
method.`),oWo=l(),py=a("p"),rWo=o("This class cannot be instantiated directly using "),ufe=a("code"),tWo=o("__init__()"),aWo=o(" (throws an error)."),nWo=l(),ct=a("div"),f(_y.$$.fragment),sWo=l(),bfe=a("p"),lWo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),iWo=l(),sc=a("p"),dWo=o(`Note:
Loading a model from its configuration file does `),vfe=a("strong"),cWo=o("not"),fWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tfe=a("code"),mWo=o("from_pretrained()"),gWo=o("to load the model weights."),hWo=l(),Ffe=a("p"),pWo=o("Examples:"),_Wo=l(),f(uy.$$.fragment),uWo=l(),ro=a("div"),f(by.$$.fragment),bWo=l(),Cfe=a("p"),vWo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),TWo=l(),pn=a("p"),FWo=o("The model class to instantiate is selected based on the "),Mfe=a("code"),CWo=o("model_type"),MWo=o(` property of the config object (either
passed as an argument or loaded from `),Efe=a("code"),EWo=o("pretrained_model_name_or_path"),yWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yfe=a("code"),wWo=o("pretrained_model_name_or_path"),AWo=o(":"),LWo=l(),lc=a("ul"),t6=a("li"),wfe=a("strong"),BWo=o("deit"),xWo=o(" \u2014 "),Aq=a("a"),kWo=o("DeiTForMaskedImageModeling"),RWo=o(" (DeiT model)"),SWo=l(),a6=a("li"),Afe=a("strong"),PWo=o("swin"),$Wo=o(" \u2014 "),Lq=a("a"),IWo=o("SwinForMaskedImageModeling"),jWo=o(" (Swin model)"),DWo=l(),n6=a("li"),Lfe=a("strong"),NWo=o("vit"),qWo=o(" \u2014 "),Bq=a("a"),OWo=o("ViTForMaskedImageModeling"),GWo=o(" (ViT model)"),XWo=l(),s6=a("p"),VWo=o("The model is set in evaluation mode by default using "),Bfe=a("code"),zWo=o("model.eval()"),WWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xfe=a("code"),QWo=o("model.train()"),HWo=l(),kfe=a("p"),UWo=o("Examples:"),JWo=l(),f(vy.$$.fragment),FRe=l(),ic=a("h2"),l6=a("a"),Rfe=a("span"),f(Ty.$$.fragment),YWo=l(),Sfe=a("span"),KWo=o("AutoModelForObjectDetection"),CRe=l(),_r=a("div"),f(Fy.$$.fragment),ZWo=l(),dc=a("p"),eQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Pfe=a("code"),oQo=o("from_pretrained()"),rQo=o("class method or the "),$fe=a("code"),tQo=o("from_config()"),aQo=o(`class
method.`),nQo=l(),Cy=a("p"),sQo=o("This class cannot be instantiated directly using "),Ife=a("code"),lQo=o("__init__()"),iQo=o(" (throws an error)."),dQo=l(),ft=a("div"),f(My.$$.fragment),cQo=l(),jfe=a("p"),fQo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),mQo=l(),cc=a("p"),gQo=o(`Note:
Loading a model from its configuration file does `),Dfe=a("strong"),hQo=o("not"),pQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nfe=a("code"),_Qo=o("from_pretrained()"),uQo=o("to load the model weights."),bQo=l(),qfe=a("p"),vQo=o("Examples:"),TQo=l(),f(Ey.$$.fragment),FQo=l(),to=a("div"),f(yy.$$.fragment),CQo=l(),Ofe=a("p"),MQo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),EQo=l(),_n=a("p"),yQo=o("The model class to instantiate is selected based on the "),Gfe=a("code"),wQo=o("model_type"),AQo=o(` property of the config object (either
passed as an argument or loaded from `),Xfe=a("code"),LQo=o("pretrained_model_name_or_path"),BQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vfe=a("code"),xQo=o("pretrained_model_name_or_path"),kQo=o(":"),RQo=l(),zfe=a("ul"),i6=a("li"),Wfe=a("strong"),SQo=o("detr"),PQo=o(" \u2014 "),xq=a("a"),$Qo=o("DetrForObjectDetection"),IQo=o(" (DETR model)"),jQo=l(),d6=a("p"),DQo=o("The model is set in evaluation mode by default using "),Qfe=a("code"),NQo=o("model.eval()"),qQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hfe=a("code"),OQo=o("model.train()"),GQo=l(),Ufe=a("p"),XQo=o("Examples:"),VQo=l(),f(wy.$$.fragment),MRe=l(),fc=a("h2"),c6=a("a"),Jfe=a("span"),f(Ay.$$.fragment),zQo=l(),Yfe=a("span"),WQo=o("AutoModelForImageSegmentation"),ERe=l(),ur=a("div"),f(Ly.$$.fragment),QQo=l(),mc=a("p"),HQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Kfe=a("code"),UQo=o("from_pretrained()"),JQo=o("class method or the "),Zfe=a("code"),YQo=o("from_config()"),KQo=o(`class
method.`),ZQo=l(),By=a("p"),eHo=o("This class cannot be instantiated directly using "),eme=a("code"),oHo=o("__init__()"),rHo=o(" (throws an error)."),tHo=l(),mt=a("div"),f(xy.$$.fragment),aHo=l(),ome=a("p"),nHo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),sHo=l(),gc=a("p"),lHo=o(`Note:
Loading a model from its configuration file does `),rme=a("strong"),iHo=o("not"),dHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tme=a("code"),cHo=o("from_pretrained()"),fHo=o("to load the model weights."),mHo=l(),ame=a("p"),gHo=o("Examples:"),hHo=l(),f(ky.$$.fragment),pHo=l(),ao=a("div"),f(Ry.$$.fragment),_Ho=l(),nme=a("p"),uHo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),bHo=l(),un=a("p"),vHo=o("The model class to instantiate is selected based on the "),sme=a("code"),THo=o("model_type"),FHo=o(` property of the config object (either
passed as an argument or loaded from `),lme=a("code"),CHo=o("pretrained_model_name_or_path"),MHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ime=a("code"),EHo=o("pretrained_model_name_or_path"),yHo=o(":"),wHo=l(),dme=a("ul"),f6=a("li"),cme=a("strong"),AHo=o("detr"),LHo=o(" \u2014 "),kq=a("a"),BHo=o("DetrForSegmentation"),xHo=o(" (DETR model)"),kHo=l(),m6=a("p"),RHo=o("The model is set in evaluation mode by default using "),fme=a("code"),SHo=o("model.eval()"),PHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mme=a("code"),$Ho=o("model.train()"),IHo=l(),gme=a("p"),jHo=o("Examples:"),DHo=l(),f(Sy.$$.fragment),yRe=l(),hc=a("h2"),g6=a("a"),hme=a("span"),f(Py.$$.fragment),NHo=l(),pme=a("span"),qHo=o("AutoModelForSemanticSegmentation"),wRe=l(),br=a("div"),f($y.$$.fragment),OHo=l(),pc=a("p"),GHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),_me=a("code"),XHo=o("from_pretrained()"),VHo=o("class method or the "),ume=a("code"),zHo=o("from_config()"),WHo=o(`class
method.`),QHo=l(),Iy=a("p"),HHo=o("This class cannot be instantiated directly using "),bme=a("code"),UHo=o("__init__()"),JHo=o(" (throws an error)."),YHo=l(),gt=a("div"),f(jy.$$.fragment),KHo=l(),vme=a("p"),ZHo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),eUo=l(),_c=a("p"),oUo=o(`Note:
Loading a model from its configuration file does `),Tme=a("strong"),rUo=o("not"),tUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fme=a("code"),aUo=o("from_pretrained()"),nUo=o("to load the model weights."),sUo=l(),Cme=a("p"),lUo=o("Examples:"),iUo=l(),f(Dy.$$.fragment),dUo=l(),no=a("div"),f(Ny.$$.fragment),cUo=l(),Mme=a("p"),fUo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),mUo=l(),bn=a("p"),gUo=o("The model class to instantiate is selected based on the "),Eme=a("code"),hUo=o("model_type"),pUo=o(` property of the config object (either
passed as an argument or loaded from `),yme=a("code"),_Uo=o("pretrained_model_name_or_path"),uUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wme=a("code"),bUo=o("pretrained_model_name_or_path"),vUo=o(":"),TUo=l(),qy=a("ul"),h6=a("li"),Ame=a("strong"),FUo=o("beit"),CUo=o(" \u2014 "),Rq=a("a"),MUo=o("BeitForSemanticSegmentation"),EUo=o(" (BEiT model)"),yUo=l(),p6=a("li"),Lme=a("strong"),wUo=o("segformer"),AUo=o(" \u2014 "),Sq=a("a"),LUo=o("SegformerForSemanticSegmentation"),BUo=o(" (SegFormer model)"),xUo=l(),_6=a("p"),kUo=o("The model is set in evaluation mode by default using "),Bme=a("code"),RUo=o("model.eval()"),SUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xme=a("code"),PUo=o("model.train()"),$Uo=l(),kme=a("p"),IUo=o("Examples:"),jUo=l(),f(Oy.$$.fragment),ARe=l(),uc=a("h2"),u6=a("a"),Rme=a("span"),f(Gy.$$.fragment),DUo=l(),Sme=a("span"),NUo=o("AutoModelForInstanceSegmentation"),LRe=l(),vr=a("div"),f(Xy.$$.fragment),qUo=l(),bc=a("p"),OUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),Pme=a("code"),GUo=o("from_pretrained()"),XUo=o("class method or the "),$me=a("code"),VUo=o("from_config()"),zUo=o(`class
method.`),WUo=l(),Vy=a("p"),QUo=o("This class cannot be instantiated directly using "),Ime=a("code"),HUo=o("__init__()"),UUo=o(" (throws an error)."),JUo=l(),ht=a("div"),f(zy.$$.fragment),YUo=l(),jme=a("p"),KUo=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),ZUo=l(),vc=a("p"),eJo=o(`Note:
Loading a model from its configuration file does `),Dme=a("strong"),oJo=o("not"),rJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nme=a("code"),tJo=o("from_pretrained()"),aJo=o("to load the model weights."),nJo=l(),qme=a("p"),sJo=o("Examples:"),lJo=l(),f(Wy.$$.fragment),iJo=l(),so=a("div"),f(Qy.$$.fragment),dJo=l(),Ome=a("p"),cJo=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),fJo=l(),vn=a("p"),mJo=o("The model class to instantiate is selected based on the "),Gme=a("code"),gJo=o("model_type"),hJo=o(` property of the config object (either
passed as an argument or loaded from `),Xme=a("code"),pJo=o("pretrained_model_name_or_path"),_Jo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vme=a("code"),uJo=o("pretrained_model_name_or_path"),bJo=o(":"),vJo=l(),zme=a("ul"),b6=a("li"),Wme=a("strong"),TJo=o("maskformer"),FJo=o(" \u2014 "),Pq=a("a"),CJo=o("MaskFormerForInstanceSegmentation"),MJo=o(" (MaskFormer model)"),EJo=l(),v6=a("p"),yJo=o("The model is set in evaluation mode by default using "),Qme=a("code"),wJo=o("model.eval()"),AJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hme=a("code"),LJo=o("model.train()"),BJo=l(),Ume=a("p"),xJo=o("Examples:"),kJo=l(),f(Hy.$$.fragment),BRe=l(),Tc=a("h2"),T6=a("a"),Jme=a("span"),f(Uy.$$.fragment),RJo=l(),Yme=a("span"),SJo=o("TFAutoModel"),xRe=l(),Tr=a("div"),f(Jy.$$.fragment),PJo=l(),Fc=a("p"),$Jo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Kme=a("code"),IJo=o("from_pretrained()"),jJo=o("class method or the "),Zme=a("code"),DJo=o("from_config()"),NJo=o(`class
method.`),qJo=l(),Yy=a("p"),OJo=o("This class cannot be instantiated directly using "),ege=a("code"),GJo=o("__init__()"),XJo=o(" (throws an error)."),VJo=l(),pt=a("div"),f(Ky.$$.fragment),zJo=l(),oge=a("p"),WJo=o("Instantiates one of the base model classes of the library from a configuration."),QJo=l(),Cc=a("p"),HJo=o(`Note:
Loading a model from its configuration file does `),rge=a("strong"),UJo=o("not"),JJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tge=a("code"),YJo=o("from_pretrained()"),KJo=o("to load the model weights."),ZJo=l(),age=a("p"),eYo=o("Examples:"),oYo=l(),f(Zy.$$.fragment),rYo=l(),ho=a("div"),f(ew.$$.fragment),tYo=l(),nge=a("p"),aYo=o("Instantiate one of the base model classes of the library from a pretrained model."),nYo=l(),Tn=a("p"),sYo=o("The model class to instantiate is selected based on the "),sge=a("code"),lYo=o("model_type"),iYo=o(` property of the config object (either
passed as an argument or loaded from `),lge=a("code"),dYo=o("pretrained_model_name_or_path"),cYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ige=a("code"),fYo=o("pretrained_model_name_or_path"),mYo=o(":"),gYo=l(),B=a("ul"),F6=a("li"),dge=a("strong"),hYo=o("albert"),pYo=o(" \u2014 "),$q=a("a"),_Yo=o("TFAlbertModel"),uYo=o(" (ALBERT model)"),bYo=l(),C6=a("li"),cge=a("strong"),vYo=o("bart"),TYo=o(" \u2014 "),Iq=a("a"),FYo=o("TFBartModel"),CYo=o(" (BART model)"),MYo=l(),M6=a("li"),fge=a("strong"),EYo=o("bert"),yYo=o(" \u2014 "),jq=a("a"),wYo=o("TFBertModel"),AYo=o(" (BERT model)"),LYo=l(),E6=a("li"),mge=a("strong"),BYo=o("blenderbot"),xYo=o(" \u2014 "),Dq=a("a"),kYo=o("TFBlenderbotModel"),RYo=o(" (Blenderbot model)"),SYo=l(),y6=a("li"),gge=a("strong"),PYo=o("blenderbot-small"),$Yo=o(" \u2014 "),Nq=a("a"),IYo=o("TFBlenderbotSmallModel"),jYo=o(" (BlenderbotSmall model)"),DYo=l(),w6=a("li"),hge=a("strong"),NYo=o("camembert"),qYo=o(" \u2014 "),qq=a("a"),OYo=o("TFCamembertModel"),GYo=o(" (CamemBERT model)"),XYo=l(),A6=a("li"),pge=a("strong"),VYo=o("clip"),zYo=o(" \u2014 "),Oq=a("a"),WYo=o("TFCLIPModel"),QYo=o(" (CLIP model)"),HYo=l(),L6=a("li"),_ge=a("strong"),UYo=o("convbert"),JYo=o(" \u2014 "),Gq=a("a"),YYo=o("TFConvBertModel"),KYo=o(" (ConvBERT model)"),ZYo=l(),B6=a("li"),uge=a("strong"),eKo=o("convnext"),oKo=o(" \u2014 "),Xq=a("a"),rKo=o("TFConvNextModel"),tKo=o(" (ConvNext model)"),aKo=l(),x6=a("li"),bge=a("strong"),nKo=o("ctrl"),sKo=o(" \u2014 "),Vq=a("a"),lKo=o("TFCTRLModel"),iKo=o(" (CTRL model)"),dKo=l(),k6=a("li"),vge=a("strong"),cKo=o("deberta"),fKo=o(" \u2014 "),zq=a("a"),mKo=o("TFDebertaModel"),gKo=o(" (DeBERTa model)"),hKo=l(),R6=a("li"),Tge=a("strong"),pKo=o("deberta-v2"),_Ko=o(" \u2014 "),Wq=a("a"),uKo=o("TFDebertaV2Model"),bKo=o(" (DeBERTa-v2 model)"),vKo=l(),S6=a("li"),Fge=a("strong"),TKo=o("distilbert"),FKo=o(" \u2014 "),Qq=a("a"),CKo=o("TFDistilBertModel"),MKo=o(" (DistilBERT model)"),EKo=l(),P6=a("li"),Cge=a("strong"),yKo=o("dpr"),wKo=o(" \u2014 "),Hq=a("a"),AKo=o("TFDPRQuestionEncoder"),LKo=o(" (DPR model)"),BKo=l(),$6=a("li"),Mge=a("strong"),xKo=o("electra"),kKo=o(" \u2014 "),Uq=a("a"),RKo=o("TFElectraModel"),SKo=o(" (ELECTRA model)"),PKo=l(),I6=a("li"),Ege=a("strong"),$Ko=o("flaubert"),IKo=o(" \u2014 "),Jq=a("a"),jKo=o("TFFlaubertModel"),DKo=o(" (FlauBERT model)"),NKo=l(),Ws=a("li"),yge=a("strong"),qKo=o("funnel"),OKo=o(" \u2014 "),Yq=a("a"),GKo=o("TFFunnelModel"),XKo=o(" or "),Kq=a("a"),VKo=o("TFFunnelBaseModel"),zKo=o(" (Funnel Transformer model)"),WKo=l(),j6=a("li"),wge=a("strong"),QKo=o("gpt2"),HKo=o(" \u2014 "),Zq=a("a"),UKo=o("TFGPT2Model"),JKo=o(" (OpenAI GPT-2 model)"),YKo=l(),D6=a("li"),Age=a("strong"),KKo=o("hubert"),ZKo=o(" \u2014 "),eO=a("a"),eZo=o("TFHubertModel"),oZo=o(" (Hubert model)"),rZo=l(),N6=a("li"),Lge=a("strong"),tZo=o("layoutlm"),aZo=o(" \u2014 "),oO=a("a"),nZo=o("TFLayoutLMModel"),sZo=o(" (LayoutLM model)"),lZo=l(),q6=a("li"),Bge=a("strong"),iZo=o("led"),dZo=o(" \u2014 "),rO=a("a"),cZo=o("TFLEDModel"),fZo=o(" (LED model)"),mZo=l(),O6=a("li"),xge=a("strong"),gZo=o("longformer"),hZo=o(" \u2014 "),tO=a("a"),pZo=o("TFLongformerModel"),_Zo=o(" (Longformer model)"),uZo=l(),G6=a("li"),kge=a("strong"),bZo=o("lxmert"),vZo=o(" \u2014 "),aO=a("a"),TZo=o("TFLxmertModel"),FZo=o(" (LXMERT model)"),CZo=l(),X6=a("li"),Rge=a("strong"),MZo=o("marian"),EZo=o(" \u2014 "),nO=a("a"),yZo=o("TFMarianModel"),wZo=o(" (Marian model)"),AZo=l(),V6=a("li"),Sge=a("strong"),LZo=o("mbart"),BZo=o(" \u2014 "),sO=a("a"),xZo=o("TFMBartModel"),kZo=o(" (mBART model)"),RZo=l(),z6=a("li"),Pge=a("strong"),SZo=o("mobilebert"),PZo=o(" \u2014 "),lO=a("a"),$Zo=o("TFMobileBertModel"),IZo=o(" (MobileBERT model)"),jZo=l(),W6=a("li"),$ge=a("strong"),DZo=o("mpnet"),NZo=o(" \u2014 "),iO=a("a"),qZo=o("TFMPNetModel"),OZo=o(" (MPNet model)"),GZo=l(),Q6=a("li"),Ige=a("strong"),XZo=o("mt5"),VZo=o(" \u2014 "),dO=a("a"),zZo=o("TFMT5Model"),WZo=o(" (mT5 model)"),QZo=l(),H6=a("li"),jge=a("strong"),HZo=o("openai-gpt"),UZo=o(" \u2014 "),cO=a("a"),JZo=o("TFOpenAIGPTModel"),YZo=o(" (OpenAI GPT model)"),KZo=l(),U6=a("li"),Dge=a("strong"),ZZo=o("pegasus"),eer=o(" \u2014 "),fO=a("a"),oer=o("TFPegasusModel"),rer=o(" (Pegasus model)"),ter=l(),J6=a("li"),Nge=a("strong"),aer=o("rembert"),ner=o(" \u2014 "),mO=a("a"),ser=o("TFRemBertModel"),ler=o(" (RemBERT model)"),ier=l(),Y6=a("li"),qge=a("strong"),der=o("roberta"),cer=o(" \u2014 "),gO=a("a"),fer=o("TFRobertaModel"),mer=o(" (RoBERTa model)"),ger=l(),K6=a("li"),Oge=a("strong"),her=o("roformer"),per=o(" \u2014 "),hO=a("a"),_er=o("TFRoFormerModel"),uer=o(" (RoFormer model)"),ber=l(),Z6=a("li"),Gge=a("strong"),ver=o("speech_to_text"),Ter=o(" \u2014 "),pO=a("a"),Fer=o("TFSpeech2TextModel"),Cer=o(" (Speech2Text model)"),Mer=l(),e0=a("li"),Xge=a("strong"),Eer=o("t5"),yer=o(" \u2014 "),_O=a("a"),wer=o("TFT5Model"),Aer=o(" (T5 model)"),Ler=l(),o0=a("li"),Vge=a("strong"),Ber=o("tapas"),xer=o(" \u2014 "),uO=a("a"),ker=o("TFTapasModel"),Rer=o(" (TAPAS model)"),Ser=l(),r0=a("li"),zge=a("strong"),Per=o("transfo-xl"),$er=o(" \u2014 "),bO=a("a"),Ier=o("TFTransfoXLModel"),jer=o(" (Transformer-XL model)"),Der=l(),t0=a("li"),Wge=a("strong"),Ner=o("vit"),qer=o(" \u2014 "),vO=a("a"),Oer=o("TFViTModel"),Ger=o(" (ViT model)"),Xer=l(),a0=a("li"),Qge=a("strong"),Ver=o("wav2vec2"),zer=o(" \u2014 "),TO=a("a"),Wer=o("TFWav2Vec2Model"),Qer=o(" (Wav2Vec2 model)"),Her=l(),n0=a("li"),Hge=a("strong"),Uer=o("xlm"),Jer=o(" \u2014 "),FO=a("a"),Yer=o("TFXLMModel"),Ker=o(" (XLM model)"),Zer=l(),s0=a("li"),Uge=a("strong"),eor=o("xlm-roberta"),oor=o(" \u2014 "),CO=a("a"),ror=o("TFXLMRobertaModel"),tor=o(" (XLM-RoBERTa model)"),aor=l(),l0=a("li"),Jge=a("strong"),nor=o("xlnet"),sor=o(" \u2014 "),MO=a("a"),lor=o("TFXLNetModel"),ior=o(" (XLNet model)"),dor=l(),Yge=a("p"),cor=o("Examples:"),mor=l(),f(ow.$$.fragment),kRe=l(),Mc=a("h2"),i0=a("a"),Kge=a("span"),f(rw.$$.fragment),gor=l(),Zge=a("span"),hor=o("TFAutoModelForPreTraining"),RRe=l(),Fr=a("div"),f(tw.$$.fragment),por=l(),Ec=a("p"),_or=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),ehe=a("code"),uor=o("from_pretrained()"),bor=o("class method or the "),ohe=a("code"),vor=o("from_config()"),Tor=o(`class
method.`),For=l(),aw=a("p"),Cor=o("This class cannot be instantiated directly using "),rhe=a("code"),Mor=o("__init__()"),Eor=o(" (throws an error)."),yor=l(),_t=a("div"),f(nw.$$.fragment),wor=l(),the=a("p"),Aor=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Lor=l(),yc=a("p"),Bor=o(`Note:
Loading a model from its configuration file does `),ahe=a("strong"),xor=o("not"),kor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nhe=a("code"),Ror=o("from_pretrained()"),Sor=o("to load the model weights."),Por=l(),she=a("p"),$or=o("Examples:"),Ior=l(),f(sw.$$.fragment),jor=l(),po=a("div"),f(lw.$$.fragment),Dor=l(),lhe=a("p"),Nor=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),qor=l(),Fn=a("p"),Oor=o("The model class to instantiate is selected based on the "),ihe=a("code"),Gor=o("model_type"),Xor=o(` property of the config object (either
passed as an argument or loaded from `),dhe=a("code"),Vor=o("pretrained_model_name_or_path"),zor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),che=a("code"),Wor=o("pretrained_model_name_or_path"),Qor=o(":"),Hor=l(),H=a("ul"),d0=a("li"),fhe=a("strong"),Uor=o("albert"),Jor=o(" \u2014 "),EO=a("a"),Yor=o("TFAlbertForPreTraining"),Kor=o(" (ALBERT model)"),Zor=l(),c0=a("li"),mhe=a("strong"),err=o("bart"),orr=o(" \u2014 "),yO=a("a"),rrr=o("TFBartForConditionalGeneration"),trr=o(" (BART model)"),arr=l(),f0=a("li"),ghe=a("strong"),nrr=o("bert"),srr=o(" \u2014 "),wO=a("a"),lrr=o("TFBertForPreTraining"),irr=o(" (BERT model)"),drr=l(),m0=a("li"),hhe=a("strong"),crr=o("camembert"),frr=o(" \u2014 "),AO=a("a"),mrr=o("TFCamembertForMaskedLM"),grr=o(" (CamemBERT model)"),hrr=l(),g0=a("li"),phe=a("strong"),prr=o("ctrl"),_rr=o(" \u2014 "),LO=a("a"),urr=o("TFCTRLLMHeadModel"),brr=o(" (CTRL model)"),vrr=l(),h0=a("li"),_he=a("strong"),Trr=o("distilbert"),Frr=o(" \u2014 "),BO=a("a"),Crr=o("TFDistilBertForMaskedLM"),Mrr=o(" (DistilBERT model)"),Err=l(),p0=a("li"),uhe=a("strong"),yrr=o("electra"),wrr=o(" \u2014 "),xO=a("a"),Arr=o("TFElectraForPreTraining"),Lrr=o(" (ELECTRA model)"),Brr=l(),_0=a("li"),bhe=a("strong"),xrr=o("flaubert"),krr=o(" \u2014 "),kO=a("a"),Rrr=o("TFFlaubertWithLMHeadModel"),Srr=o(" (FlauBERT model)"),Prr=l(),u0=a("li"),vhe=a("strong"),$rr=o("funnel"),Irr=o(" \u2014 "),RO=a("a"),jrr=o("TFFunnelForPreTraining"),Drr=o(" (Funnel Transformer model)"),Nrr=l(),b0=a("li"),The=a("strong"),qrr=o("gpt2"),Orr=o(" \u2014 "),SO=a("a"),Grr=o("TFGPT2LMHeadModel"),Xrr=o(" (OpenAI GPT-2 model)"),Vrr=l(),v0=a("li"),Fhe=a("strong"),zrr=o("layoutlm"),Wrr=o(" \u2014 "),PO=a("a"),Qrr=o("TFLayoutLMForMaskedLM"),Hrr=o(" (LayoutLM model)"),Urr=l(),T0=a("li"),Che=a("strong"),Jrr=o("lxmert"),Yrr=o(" \u2014 "),$O=a("a"),Krr=o("TFLxmertForPreTraining"),Zrr=o(" (LXMERT model)"),etr=l(),F0=a("li"),Mhe=a("strong"),otr=o("mobilebert"),rtr=o(" \u2014 "),IO=a("a"),ttr=o("TFMobileBertForPreTraining"),atr=o(" (MobileBERT model)"),ntr=l(),C0=a("li"),Ehe=a("strong"),str=o("mpnet"),ltr=o(" \u2014 "),jO=a("a"),itr=o("TFMPNetForMaskedLM"),dtr=o(" (MPNet model)"),ctr=l(),M0=a("li"),yhe=a("strong"),ftr=o("openai-gpt"),mtr=o(" \u2014 "),DO=a("a"),gtr=o("TFOpenAIGPTLMHeadModel"),htr=o(" (OpenAI GPT model)"),ptr=l(),E0=a("li"),whe=a("strong"),_tr=o("roberta"),utr=o(" \u2014 "),NO=a("a"),btr=o("TFRobertaForMaskedLM"),vtr=o(" (RoBERTa model)"),Ttr=l(),y0=a("li"),Ahe=a("strong"),Ftr=o("t5"),Ctr=o(" \u2014 "),qO=a("a"),Mtr=o("TFT5ForConditionalGeneration"),Etr=o(" (T5 model)"),ytr=l(),w0=a("li"),Lhe=a("strong"),wtr=o("tapas"),Atr=o(" \u2014 "),OO=a("a"),Ltr=o("TFTapasForMaskedLM"),Btr=o(" (TAPAS model)"),xtr=l(),A0=a("li"),Bhe=a("strong"),ktr=o("transfo-xl"),Rtr=o(" \u2014 "),GO=a("a"),Str=o("TFTransfoXLLMHeadModel"),Ptr=o(" (Transformer-XL model)"),$tr=l(),L0=a("li"),xhe=a("strong"),Itr=o("xlm"),jtr=o(" \u2014 "),XO=a("a"),Dtr=o("TFXLMWithLMHeadModel"),Ntr=o(" (XLM model)"),qtr=l(),B0=a("li"),khe=a("strong"),Otr=o("xlm-roberta"),Gtr=o(" \u2014 "),VO=a("a"),Xtr=o("TFXLMRobertaForMaskedLM"),Vtr=o(" (XLM-RoBERTa model)"),ztr=l(),x0=a("li"),Rhe=a("strong"),Wtr=o("xlnet"),Qtr=o(" \u2014 "),zO=a("a"),Htr=o("TFXLNetLMHeadModel"),Utr=o(" (XLNet model)"),Jtr=l(),She=a("p"),Ytr=o("Examples:"),Ktr=l(),f(iw.$$.fragment),SRe=l(),wc=a("h2"),k0=a("a"),Phe=a("span"),f(dw.$$.fragment),Ztr=l(),$he=a("span"),ear=o("TFAutoModelForCausalLM"),PRe=l(),Cr=a("div"),f(cw.$$.fragment),oar=l(),Ac=a("p"),rar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Ihe=a("code"),tar=o("from_pretrained()"),aar=o("class method or the "),jhe=a("code"),nar=o("from_config()"),sar=o(`class
method.`),lar=l(),fw=a("p"),iar=o("This class cannot be instantiated directly using "),Dhe=a("code"),dar=o("__init__()"),car=o(" (throws an error)."),far=l(),ut=a("div"),f(mw.$$.fragment),mar=l(),Nhe=a("p"),gar=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),har=l(),Lc=a("p"),par=o(`Note:
Loading a model from its configuration file does `),qhe=a("strong"),_ar=o("not"),uar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ohe=a("code"),bar=o("from_pretrained()"),Tar=o("to load the model weights."),Far=l(),Ghe=a("p"),Car=o("Examples:"),Mar=l(),f(gw.$$.fragment),Ear=l(),_o=a("div"),f(hw.$$.fragment),yar=l(),Xhe=a("p"),war=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Aar=l(),Cn=a("p"),Lar=o("The model class to instantiate is selected based on the "),Vhe=a("code"),Bar=o("model_type"),xar=o(` property of the config object (either
passed as an argument or loaded from `),zhe=a("code"),kar=o("pretrained_model_name_or_path"),Rar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Whe=a("code"),Sar=o("pretrained_model_name_or_path"),Par=o(":"),$ar=l(),ge=a("ul"),R0=a("li"),Qhe=a("strong"),Iar=o("bert"),jar=o(" \u2014 "),WO=a("a"),Dar=o("TFBertLMHeadModel"),Nar=o(" (BERT model)"),qar=l(),S0=a("li"),Hhe=a("strong"),Oar=o("camembert"),Gar=o(" \u2014 "),QO=a("a"),Xar=o("TFCamembertForCausalLM"),Var=o(" (CamemBERT model)"),zar=l(),P0=a("li"),Uhe=a("strong"),War=o("ctrl"),Qar=o(" \u2014 "),HO=a("a"),Har=o("TFCTRLLMHeadModel"),Uar=o(" (CTRL model)"),Jar=l(),$0=a("li"),Jhe=a("strong"),Yar=o("gpt2"),Kar=o(" \u2014 "),UO=a("a"),Zar=o("TFGPT2LMHeadModel"),enr=o(" (OpenAI GPT-2 model)"),onr=l(),I0=a("li"),Yhe=a("strong"),rnr=o("openai-gpt"),tnr=o(" \u2014 "),JO=a("a"),anr=o("TFOpenAIGPTLMHeadModel"),nnr=o(" (OpenAI GPT model)"),snr=l(),j0=a("li"),Khe=a("strong"),lnr=o("rembert"),inr=o(" \u2014 "),YO=a("a"),dnr=o("TFRemBertForCausalLM"),cnr=o(" (RemBERT model)"),fnr=l(),D0=a("li"),Zhe=a("strong"),mnr=o("roberta"),gnr=o(" \u2014 "),KO=a("a"),hnr=o("TFRobertaForCausalLM"),pnr=o(" (RoBERTa model)"),_nr=l(),N0=a("li"),epe=a("strong"),unr=o("roformer"),bnr=o(" \u2014 "),ZO=a("a"),vnr=o("TFRoFormerForCausalLM"),Tnr=o(" (RoFormer model)"),Fnr=l(),q0=a("li"),ope=a("strong"),Cnr=o("transfo-xl"),Mnr=o(" \u2014 "),eG=a("a"),Enr=o("TFTransfoXLLMHeadModel"),ynr=o(" (Transformer-XL model)"),wnr=l(),O0=a("li"),rpe=a("strong"),Anr=o("xlm"),Lnr=o(" \u2014 "),oG=a("a"),Bnr=o("TFXLMWithLMHeadModel"),xnr=o(" (XLM model)"),knr=l(),G0=a("li"),tpe=a("strong"),Rnr=o("xlnet"),Snr=o(" \u2014 "),rG=a("a"),Pnr=o("TFXLNetLMHeadModel"),$nr=o(" (XLNet model)"),Inr=l(),ape=a("p"),jnr=o("Examples:"),Dnr=l(),f(pw.$$.fragment),$Re=l(),Bc=a("h2"),X0=a("a"),npe=a("span"),f(_w.$$.fragment),Nnr=l(),spe=a("span"),qnr=o("TFAutoModelForImageClassification"),IRe=l(),Mr=a("div"),f(uw.$$.fragment),Onr=l(),xc=a("p"),Gnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),lpe=a("code"),Xnr=o("from_pretrained()"),Vnr=o("class method or the "),ipe=a("code"),znr=o("from_config()"),Wnr=o(`class
method.`),Qnr=l(),bw=a("p"),Hnr=o("This class cannot be instantiated directly using "),dpe=a("code"),Unr=o("__init__()"),Jnr=o(" (throws an error)."),Ynr=l(),bt=a("div"),f(vw.$$.fragment),Knr=l(),cpe=a("p"),Znr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),esr=l(),kc=a("p"),osr=o(`Note:
Loading a model from its configuration file does `),fpe=a("strong"),rsr=o("not"),tsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mpe=a("code"),asr=o("from_pretrained()"),nsr=o("to load the model weights."),ssr=l(),gpe=a("p"),lsr=o("Examples:"),isr=l(),f(Tw.$$.fragment),dsr=l(),uo=a("div"),f(Fw.$$.fragment),csr=l(),hpe=a("p"),fsr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),msr=l(),Mn=a("p"),gsr=o("The model class to instantiate is selected based on the "),ppe=a("code"),hsr=o("model_type"),psr=o(` property of the config object (either
passed as an argument or loaded from `),_pe=a("code"),_sr=o("pretrained_model_name_or_path"),usr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),upe=a("code"),bsr=o("pretrained_model_name_or_path"),vsr=o(":"),Tsr=l(),Cw=a("ul"),V0=a("li"),bpe=a("strong"),Fsr=o("convnext"),Csr=o(" \u2014 "),tG=a("a"),Msr=o("TFConvNextForImageClassification"),Esr=o(" (ConvNext model)"),ysr=l(),z0=a("li"),vpe=a("strong"),wsr=o("vit"),Asr=o(" \u2014 "),aG=a("a"),Lsr=o("TFViTForImageClassification"),Bsr=o(" (ViT model)"),xsr=l(),Tpe=a("p"),ksr=o("Examples:"),Rsr=l(),f(Mw.$$.fragment),jRe=l(),Rc=a("h2"),W0=a("a"),Fpe=a("span"),f(Ew.$$.fragment),Ssr=l(),Cpe=a("span"),Psr=o("TFAutoModelForMaskedLM"),DRe=l(),Er=a("div"),f(yw.$$.fragment),$sr=l(),Sc=a("p"),Isr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Mpe=a("code"),jsr=o("from_pretrained()"),Dsr=o("class method or the "),Epe=a("code"),Nsr=o("from_config()"),qsr=o(`class
method.`),Osr=l(),ww=a("p"),Gsr=o("This class cannot be instantiated directly using "),ype=a("code"),Xsr=o("__init__()"),Vsr=o(" (throws an error)."),zsr=l(),vt=a("div"),f(Aw.$$.fragment),Wsr=l(),wpe=a("p"),Qsr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Hsr=l(),Pc=a("p"),Usr=o(`Note:
Loading a model from its configuration file does `),Ape=a("strong"),Jsr=o("not"),Ysr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lpe=a("code"),Ksr=o("from_pretrained()"),Zsr=o("to load the model weights."),elr=l(),Bpe=a("p"),olr=o("Examples:"),rlr=l(),f(Lw.$$.fragment),tlr=l(),bo=a("div"),f(Bw.$$.fragment),alr=l(),xpe=a("p"),nlr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),slr=l(),En=a("p"),llr=o("The model class to instantiate is selected based on the "),kpe=a("code"),ilr=o("model_type"),dlr=o(` property of the config object (either
passed as an argument or loaded from `),Rpe=a("code"),clr=o("pretrained_model_name_or_path"),flr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Spe=a("code"),mlr=o("pretrained_model_name_or_path"),glr=o(":"),hlr=l(),Y=a("ul"),Q0=a("li"),Ppe=a("strong"),plr=o("albert"),_lr=o(" \u2014 "),nG=a("a"),ulr=o("TFAlbertForMaskedLM"),blr=o(" (ALBERT model)"),vlr=l(),H0=a("li"),$pe=a("strong"),Tlr=o("bert"),Flr=o(" \u2014 "),sG=a("a"),Clr=o("TFBertForMaskedLM"),Mlr=o(" (BERT model)"),Elr=l(),U0=a("li"),Ipe=a("strong"),ylr=o("camembert"),wlr=o(" \u2014 "),lG=a("a"),Alr=o("TFCamembertForMaskedLM"),Llr=o(" (CamemBERT model)"),Blr=l(),J0=a("li"),jpe=a("strong"),xlr=o("convbert"),klr=o(" \u2014 "),iG=a("a"),Rlr=o("TFConvBertForMaskedLM"),Slr=o(" (ConvBERT model)"),Plr=l(),Y0=a("li"),Dpe=a("strong"),$lr=o("deberta"),Ilr=o(" \u2014 "),dG=a("a"),jlr=o("TFDebertaForMaskedLM"),Dlr=o(" (DeBERTa model)"),Nlr=l(),K0=a("li"),Npe=a("strong"),qlr=o("deberta-v2"),Olr=o(" \u2014 "),cG=a("a"),Glr=o("TFDebertaV2ForMaskedLM"),Xlr=o(" (DeBERTa-v2 model)"),Vlr=l(),Z0=a("li"),qpe=a("strong"),zlr=o("distilbert"),Wlr=o(" \u2014 "),fG=a("a"),Qlr=o("TFDistilBertForMaskedLM"),Hlr=o(" (DistilBERT model)"),Ulr=l(),eT=a("li"),Ope=a("strong"),Jlr=o("electra"),Ylr=o(" \u2014 "),mG=a("a"),Klr=o("TFElectraForMaskedLM"),Zlr=o(" (ELECTRA model)"),eir=l(),oT=a("li"),Gpe=a("strong"),oir=o("flaubert"),rir=o(" \u2014 "),gG=a("a"),tir=o("TFFlaubertWithLMHeadModel"),air=o(" (FlauBERT model)"),nir=l(),rT=a("li"),Xpe=a("strong"),sir=o("funnel"),lir=o(" \u2014 "),hG=a("a"),iir=o("TFFunnelForMaskedLM"),dir=o(" (Funnel Transformer model)"),cir=l(),tT=a("li"),Vpe=a("strong"),fir=o("layoutlm"),mir=o(" \u2014 "),pG=a("a"),gir=o("TFLayoutLMForMaskedLM"),hir=o(" (LayoutLM model)"),pir=l(),aT=a("li"),zpe=a("strong"),_ir=o("longformer"),uir=o(" \u2014 "),_G=a("a"),bir=o("TFLongformerForMaskedLM"),vir=o(" (Longformer model)"),Tir=l(),nT=a("li"),Wpe=a("strong"),Fir=o("mobilebert"),Cir=o(" \u2014 "),uG=a("a"),Mir=o("TFMobileBertForMaskedLM"),Eir=o(" (MobileBERT model)"),yir=l(),sT=a("li"),Qpe=a("strong"),wir=o("mpnet"),Air=o(" \u2014 "),bG=a("a"),Lir=o("TFMPNetForMaskedLM"),Bir=o(" (MPNet model)"),xir=l(),lT=a("li"),Hpe=a("strong"),kir=o("rembert"),Rir=o(" \u2014 "),vG=a("a"),Sir=o("TFRemBertForMaskedLM"),Pir=o(" (RemBERT model)"),$ir=l(),iT=a("li"),Upe=a("strong"),Iir=o("roberta"),jir=o(" \u2014 "),TG=a("a"),Dir=o("TFRobertaForMaskedLM"),Nir=o(" (RoBERTa model)"),qir=l(),dT=a("li"),Jpe=a("strong"),Oir=o("roformer"),Gir=o(" \u2014 "),FG=a("a"),Xir=o("TFRoFormerForMaskedLM"),Vir=o(" (RoFormer model)"),zir=l(),cT=a("li"),Ype=a("strong"),Wir=o("tapas"),Qir=o(" \u2014 "),CG=a("a"),Hir=o("TFTapasForMaskedLM"),Uir=o(" (TAPAS model)"),Jir=l(),fT=a("li"),Kpe=a("strong"),Yir=o("xlm"),Kir=o(" \u2014 "),MG=a("a"),Zir=o("TFXLMWithLMHeadModel"),edr=o(" (XLM model)"),odr=l(),mT=a("li"),Zpe=a("strong"),rdr=o("xlm-roberta"),tdr=o(" \u2014 "),EG=a("a"),adr=o("TFXLMRobertaForMaskedLM"),ndr=o(" (XLM-RoBERTa model)"),sdr=l(),e_e=a("p"),ldr=o("Examples:"),idr=l(),f(xw.$$.fragment),NRe=l(),$c=a("h2"),gT=a("a"),o_e=a("span"),f(kw.$$.fragment),ddr=l(),r_e=a("span"),cdr=o("TFAutoModelForSeq2SeqLM"),qRe=l(),yr=a("div"),f(Rw.$$.fragment),fdr=l(),Ic=a("p"),mdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),t_e=a("code"),gdr=o("from_pretrained()"),hdr=o("class method or the "),a_e=a("code"),pdr=o("from_config()"),_dr=o(`class
method.`),udr=l(),Sw=a("p"),bdr=o("This class cannot be instantiated directly using "),n_e=a("code"),vdr=o("__init__()"),Tdr=o(" (throws an error)."),Fdr=l(),Tt=a("div"),f(Pw.$$.fragment),Cdr=l(),s_e=a("p"),Mdr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Edr=l(),jc=a("p"),ydr=o(`Note:
Loading a model from its configuration file does `),l_e=a("strong"),wdr=o("not"),Adr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),i_e=a("code"),Ldr=o("from_pretrained()"),Bdr=o("to load the model weights."),xdr=l(),d_e=a("p"),kdr=o("Examples:"),Rdr=l(),f($w.$$.fragment),Sdr=l(),vo=a("div"),f(Iw.$$.fragment),Pdr=l(),c_e=a("p"),$dr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Idr=l(),yn=a("p"),jdr=o("The model class to instantiate is selected based on the "),f_e=a("code"),Ddr=o("model_type"),Ndr=o(` property of the config object (either
passed as an argument or loaded from `),m_e=a("code"),qdr=o("pretrained_model_name_or_path"),Odr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g_e=a("code"),Gdr=o("pretrained_model_name_or_path"),Xdr=o(":"),Vdr=l(),ue=a("ul"),hT=a("li"),h_e=a("strong"),zdr=o("bart"),Wdr=o(" \u2014 "),yG=a("a"),Qdr=o("TFBartForConditionalGeneration"),Hdr=o(" (BART model)"),Udr=l(),pT=a("li"),p_e=a("strong"),Jdr=o("blenderbot"),Ydr=o(" \u2014 "),wG=a("a"),Kdr=o("TFBlenderbotForConditionalGeneration"),Zdr=o(" (Blenderbot model)"),ecr=l(),_T=a("li"),__e=a("strong"),ocr=o("blenderbot-small"),rcr=o(" \u2014 "),AG=a("a"),tcr=o("TFBlenderbotSmallForConditionalGeneration"),acr=o(" (BlenderbotSmall model)"),ncr=l(),uT=a("li"),u_e=a("strong"),scr=o("encoder-decoder"),lcr=o(" \u2014 "),LG=a("a"),icr=o("TFEncoderDecoderModel"),dcr=o(" (Encoder decoder model)"),ccr=l(),bT=a("li"),b_e=a("strong"),fcr=o("led"),mcr=o(" \u2014 "),BG=a("a"),gcr=o("TFLEDForConditionalGeneration"),hcr=o(" (LED model)"),pcr=l(),vT=a("li"),v_e=a("strong"),_cr=o("marian"),ucr=o(" \u2014 "),xG=a("a"),bcr=o("TFMarianMTModel"),vcr=o(" (Marian model)"),Tcr=l(),TT=a("li"),T_e=a("strong"),Fcr=o("mbart"),Ccr=o(" \u2014 "),kG=a("a"),Mcr=o("TFMBartForConditionalGeneration"),Ecr=o(" (mBART model)"),ycr=l(),FT=a("li"),F_e=a("strong"),wcr=o("mt5"),Acr=o(" \u2014 "),RG=a("a"),Lcr=o("TFMT5ForConditionalGeneration"),Bcr=o(" (mT5 model)"),xcr=l(),CT=a("li"),C_e=a("strong"),kcr=o("pegasus"),Rcr=o(" \u2014 "),SG=a("a"),Scr=o("TFPegasusForConditionalGeneration"),Pcr=o(" (Pegasus model)"),$cr=l(),MT=a("li"),M_e=a("strong"),Icr=o("t5"),jcr=o(" \u2014 "),PG=a("a"),Dcr=o("TFT5ForConditionalGeneration"),Ncr=o(" (T5 model)"),qcr=l(),E_e=a("p"),Ocr=o("Examples:"),Gcr=l(),f(jw.$$.fragment),ORe=l(),Dc=a("h2"),ET=a("a"),y_e=a("span"),f(Dw.$$.fragment),Xcr=l(),w_e=a("span"),Vcr=o("TFAutoModelForSequenceClassification"),GRe=l(),wr=a("div"),f(Nw.$$.fragment),zcr=l(),Nc=a("p"),Wcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),A_e=a("code"),Qcr=o("from_pretrained()"),Hcr=o("class method or the "),L_e=a("code"),Ucr=o("from_config()"),Jcr=o(`class
method.`),Ycr=l(),qw=a("p"),Kcr=o("This class cannot be instantiated directly using "),B_e=a("code"),Zcr=o("__init__()"),efr=o(" (throws an error)."),ofr=l(),Ft=a("div"),f(Ow.$$.fragment),rfr=l(),x_e=a("p"),tfr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),afr=l(),qc=a("p"),nfr=o(`Note:
Loading a model from its configuration file does `),k_e=a("strong"),sfr=o("not"),lfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),R_e=a("code"),ifr=o("from_pretrained()"),dfr=o("to load the model weights."),cfr=l(),S_e=a("p"),ffr=o("Examples:"),mfr=l(),f(Gw.$$.fragment),gfr=l(),To=a("div"),f(Xw.$$.fragment),hfr=l(),P_e=a("p"),pfr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),_fr=l(),wn=a("p"),ufr=o("The model class to instantiate is selected based on the "),$_e=a("code"),bfr=o("model_type"),vfr=o(` property of the config object (either
passed as an argument or loaded from `),I_e=a("code"),Tfr=o("pretrained_model_name_or_path"),Ffr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j_e=a("code"),Cfr=o("pretrained_model_name_or_path"),Mfr=o(":"),Efr=l(),V=a("ul"),yT=a("li"),D_e=a("strong"),yfr=o("albert"),wfr=o(" \u2014 "),$G=a("a"),Afr=o("TFAlbertForSequenceClassification"),Lfr=o(" (ALBERT model)"),Bfr=l(),wT=a("li"),N_e=a("strong"),xfr=o("bert"),kfr=o(" \u2014 "),IG=a("a"),Rfr=o("TFBertForSequenceClassification"),Sfr=o(" (BERT model)"),Pfr=l(),AT=a("li"),q_e=a("strong"),$fr=o("camembert"),Ifr=o(" \u2014 "),jG=a("a"),jfr=o("TFCamembertForSequenceClassification"),Dfr=o(" (CamemBERT model)"),Nfr=l(),LT=a("li"),O_e=a("strong"),qfr=o("convbert"),Ofr=o(" \u2014 "),DG=a("a"),Gfr=o("TFConvBertForSequenceClassification"),Xfr=o(" (ConvBERT model)"),Vfr=l(),BT=a("li"),G_e=a("strong"),zfr=o("ctrl"),Wfr=o(" \u2014 "),NG=a("a"),Qfr=o("TFCTRLForSequenceClassification"),Hfr=o(" (CTRL model)"),Ufr=l(),xT=a("li"),X_e=a("strong"),Jfr=o("deberta"),Yfr=o(" \u2014 "),qG=a("a"),Kfr=o("TFDebertaForSequenceClassification"),Zfr=o(" (DeBERTa model)"),emr=l(),kT=a("li"),V_e=a("strong"),omr=o("deberta-v2"),rmr=o(" \u2014 "),OG=a("a"),tmr=o("TFDebertaV2ForSequenceClassification"),amr=o(" (DeBERTa-v2 model)"),nmr=l(),RT=a("li"),z_e=a("strong"),smr=o("distilbert"),lmr=o(" \u2014 "),GG=a("a"),imr=o("TFDistilBertForSequenceClassification"),dmr=o(" (DistilBERT model)"),cmr=l(),ST=a("li"),W_e=a("strong"),fmr=o("electra"),mmr=o(" \u2014 "),XG=a("a"),gmr=o("TFElectraForSequenceClassification"),hmr=o(" (ELECTRA model)"),pmr=l(),PT=a("li"),Q_e=a("strong"),_mr=o("flaubert"),umr=o(" \u2014 "),VG=a("a"),bmr=o("TFFlaubertForSequenceClassification"),vmr=o(" (FlauBERT model)"),Tmr=l(),$T=a("li"),H_e=a("strong"),Fmr=o("funnel"),Cmr=o(" \u2014 "),zG=a("a"),Mmr=o("TFFunnelForSequenceClassification"),Emr=o(" (Funnel Transformer model)"),ymr=l(),IT=a("li"),U_e=a("strong"),wmr=o("gpt2"),Amr=o(" \u2014 "),WG=a("a"),Lmr=o("TFGPT2ForSequenceClassification"),Bmr=o(" (OpenAI GPT-2 model)"),xmr=l(),jT=a("li"),J_e=a("strong"),kmr=o("layoutlm"),Rmr=o(" \u2014 "),QG=a("a"),Smr=o("TFLayoutLMForSequenceClassification"),Pmr=o(" (LayoutLM model)"),$mr=l(),DT=a("li"),Y_e=a("strong"),Imr=o("longformer"),jmr=o(" \u2014 "),HG=a("a"),Dmr=o("TFLongformerForSequenceClassification"),Nmr=o(" (Longformer model)"),qmr=l(),NT=a("li"),K_e=a("strong"),Omr=o("mobilebert"),Gmr=o(" \u2014 "),UG=a("a"),Xmr=o("TFMobileBertForSequenceClassification"),Vmr=o(" (MobileBERT model)"),zmr=l(),qT=a("li"),Z_e=a("strong"),Wmr=o("mpnet"),Qmr=o(" \u2014 "),JG=a("a"),Hmr=o("TFMPNetForSequenceClassification"),Umr=o(" (MPNet model)"),Jmr=l(),OT=a("li"),eue=a("strong"),Ymr=o("openai-gpt"),Kmr=o(" \u2014 "),YG=a("a"),Zmr=o("TFOpenAIGPTForSequenceClassification"),egr=o(" (OpenAI GPT model)"),ogr=l(),GT=a("li"),oue=a("strong"),rgr=o("rembert"),tgr=o(" \u2014 "),KG=a("a"),agr=o("TFRemBertForSequenceClassification"),ngr=o(" (RemBERT model)"),sgr=l(),XT=a("li"),rue=a("strong"),lgr=o("roberta"),igr=o(" \u2014 "),ZG=a("a"),dgr=o("TFRobertaForSequenceClassification"),cgr=o(" (RoBERTa model)"),fgr=l(),VT=a("li"),tue=a("strong"),mgr=o("roformer"),ggr=o(" \u2014 "),eX=a("a"),hgr=o("TFRoFormerForSequenceClassification"),pgr=o(" (RoFormer model)"),_gr=l(),zT=a("li"),aue=a("strong"),ugr=o("tapas"),bgr=o(" \u2014 "),oX=a("a"),vgr=o("TFTapasForSequenceClassification"),Tgr=o(" (TAPAS model)"),Fgr=l(),WT=a("li"),nue=a("strong"),Cgr=o("transfo-xl"),Mgr=o(" \u2014 "),rX=a("a"),Egr=o("TFTransfoXLForSequenceClassification"),ygr=o(" (Transformer-XL model)"),wgr=l(),QT=a("li"),sue=a("strong"),Agr=o("xlm"),Lgr=o(" \u2014 "),tX=a("a"),Bgr=o("TFXLMForSequenceClassification"),xgr=o(" (XLM model)"),kgr=l(),HT=a("li"),lue=a("strong"),Rgr=o("xlm-roberta"),Sgr=o(" \u2014 "),aX=a("a"),Pgr=o("TFXLMRobertaForSequenceClassification"),$gr=o(" (XLM-RoBERTa model)"),Igr=l(),UT=a("li"),iue=a("strong"),jgr=o("xlnet"),Dgr=o(" \u2014 "),nX=a("a"),Ngr=o("TFXLNetForSequenceClassification"),qgr=o(" (XLNet model)"),Ogr=l(),due=a("p"),Ggr=o("Examples:"),Xgr=l(),f(Vw.$$.fragment),XRe=l(),Oc=a("h2"),JT=a("a"),cue=a("span"),f(zw.$$.fragment),Vgr=l(),fue=a("span"),zgr=o("TFAutoModelForMultipleChoice"),VRe=l(),Ar=a("div"),f(Ww.$$.fragment),Wgr=l(),Gc=a("p"),Qgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),mue=a("code"),Hgr=o("from_pretrained()"),Ugr=o("class method or the "),gue=a("code"),Jgr=o("from_config()"),Ygr=o(`class
method.`),Kgr=l(),Qw=a("p"),Zgr=o("This class cannot be instantiated directly using "),hue=a("code"),ehr=o("__init__()"),ohr=o(" (throws an error)."),rhr=l(),Ct=a("div"),f(Hw.$$.fragment),thr=l(),pue=a("p"),ahr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),nhr=l(),Xc=a("p"),shr=o(`Note:
Loading a model from its configuration file does `),_ue=a("strong"),lhr=o("not"),ihr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uue=a("code"),dhr=o("from_pretrained()"),chr=o("to load the model weights."),fhr=l(),bue=a("p"),mhr=o("Examples:"),ghr=l(),f(Uw.$$.fragment),hhr=l(),Fo=a("div"),f(Jw.$$.fragment),phr=l(),vue=a("p"),_hr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),uhr=l(),An=a("p"),bhr=o("The model class to instantiate is selected based on the "),Tue=a("code"),vhr=o("model_type"),Thr=o(` property of the config object (either
passed as an argument or loaded from `),Fue=a("code"),Fhr=o("pretrained_model_name_or_path"),Chr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cue=a("code"),Mhr=o("pretrained_model_name_or_path"),Ehr=o(":"),yhr=l(),ae=a("ul"),YT=a("li"),Mue=a("strong"),whr=o("albert"),Ahr=o(" \u2014 "),sX=a("a"),Lhr=o("TFAlbertForMultipleChoice"),Bhr=o(" (ALBERT model)"),xhr=l(),KT=a("li"),Eue=a("strong"),khr=o("bert"),Rhr=o(" \u2014 "),lX=a("a"),Shr=o("TFBertForMultipleChoice"),Phr=o(" (BERT model)"),$hr=l(),ZT=a("li"),yue=a("strong"),Ihr=o("camembert"),jhr=o(" \u2014 "),iX=a("a"),Dhr=o("TFCamembertForMultipleChoice"),Nhr=o(" (CamemBERT model)"),qhr=l(),e8=a("li"),wue=a("strong"),Ohr=o("convbert"),Ghr=o(" \u2014 "),dX=a("a"),Xhr=o("TFConvBertForMultipleChoice"),Vhr=o(" (ConvBERT model)"),zhr=l(),o8=a("li"),Aue=a("strong"),Whr=o("distilbert"),Qhr=o(" \u2014 "),cX=a("a"),Hhr=o("TFDistilBertForMultipleChoice"),Uhr=o(" (DistilBERT model)"),Jhr=l(),r8=a("li"),Lue=a("strong"),Yhr=o("electra"),Khr=o(" \u2014 "),fX=a("a"),Zhr=o("TFElectraForMultipleChoice"),epr=o(" (ELECTRA model)"),opr=l(),t8=a("li"),Bue=a("strong"),rpr=o("flaubert"),tpr=o(" \u2014 "),mX=a("a"),apr=o("TFFlaubertForMultipleChoice"),npr=o(" (FlauBERT model)"),spr=l(),a8=a("li"),xue=a("strong"),lpr=o("funnel"),ipr=o(" \u2014 "),gX=a("a"),dpr=o("TFFunnelForMultipleChoice"),cpr=o(" (Funnel Transformer model)"),fpr=l(),n8=a("li"),kue=a("strong"),mpr=o("longformer"),gpr=o(" \u2014 "),hX=a("a"),hpr=o("TFLongformerForMultipleChoice"),ppr=o(" (Longformer model)"),_pr=l(),s8=a("li"),Rue=a("strong"),upr=o("mobilebert"),bpr=o(" \u2014 "),pX=a("a"),vpr=o("TFMobileBertForMultipleChoice"),Tpr=o(" (MobileBERT model)"),Fpr=l(),l8=a("li"),Sue=a("strong"),Cpr=o("mpnet"),Mpr=o(" \u2014 "),_X=a("a"),Epr=o("TFMPNetForMultipleChoice"),ypr=o(" (MPNet model)"),wpr=l(),i8=a("li"),Pue=a("strong"),Apr=o("rembert"),Lpr=o(" \u2014 "),uX=a("a"),Bpr=o("TFRemBertForMultipleChoice"),xpr=o(" (RemBERT model)"),kpr=l(),d8=a("li"),$ue=a("strong"),Rpr=o("roberta"),Spr=o(" \u2014 "),bX=a("a"),Ppr=o("TFRobertaForMultipleChoice"),$pr=o(" (RoBERTa model)"),Ipr=l(),c8=a("li"),Iue=a("strong"),jpr=o("roformer"),Dpr=o(" \u2014 "),vX=a("a"),Npr=o("TFRoFormerForMultipleChoice"),qpr=o(" (RoFormer model)"),Opr=l(),f8=a("li"),jue=a("strong"),Gpr=o("xlm"),Xpr=o(" \u2014 "),TX=a("a"),Vpr=o("TFXLMForMultipleChoice"),zpr=o(" (XLM model)"),Wpr=l(),m8=a("li"),Due=a("strong"),Qpr=o("xlm-roberta"),Hpr=o(" \u2014 "),FX=a("a"),Upr=o("TFXLMRobertaForMultipleChoice"),Jpr=o(" (XLM-RoBERTa model)"),Ypr=l(),g8=a("li"),Nue=a("strong"),Kpr=o("xlnet"),Zpr=o(" \u2014 "),CX=a("a"),e_r=o("TFXLNetForMultipleChoice"),o_r=o(" (XLNet model)"),r_r=l(),que=a("p"),t_r=o("Examples:"),a_r=l(),f(Yw.$$.fragment),zRe=l(),Vc=a("h2"),h8=a("a"),Oue=a("span"),f(Kw.$$.fragment),n_r=l(),Gue=a("span"),s_r=o("TFAutoModelForTableQuestionAnswering"),WRe=l(),Lr=a("div"),f(Zw.$$.fragment),l_r=l(),zc=a("p"),i_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Xue=a("code"),d_r=o("from_pretrained()"),c_r=o("class method or the "),Vue=a("code"),f_r=o("from_config()"),m_r=o(`class
method.`),g_r=l(),eA=a("p"),h_r=o("This class cannot be instantiated directly using "),zue=a("code"),p_r=o("__init__()"),__r=o(" (throws an error)."),u_r=l(),Mt=a("div"),f(oA.$$.fragment),b_r=l(),Wue=a("p"),v_r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),T_r=l(),Wc=a("p"),F_r=o(`Note:
Loading a model from its configuration file does `),Que=a("strong"),C_r=o("not"),M_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hue=a("code"),E_r=o("from_pretrained()"),y_r=o("to load the model weights."),w_r=l(),Uue=a("p"),A_r=o("Examples:"),L_r=l(),f(rA.$$.fragment),B_r=l(),Co=a("div"),f(tA.$$.fragment),x_r=l(),Jue=a("p"),k_r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),R_r=l(),Ln=a("p"),S_r=o("The model class to instantiate is selected based on the "),Yue=a("code"),P_r=o("model_type"),$_r=o(` property of the config object (either
passed as an argument or loaded from `),Kue=a("code"),I_r=o("pretrained_model_name_or_path"),j_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zue=a("code"),D_r=o("pretrained_model_name_or_path"),N_r=o(":"),q_r=l(),e1e=a("ul"),p8=a("li"),o1e=a("strong"),O_r=o("tapas"),G_r=o(" \u2014 "),MX=a("a"),X_r=o("TFTapasForQuestionAnswering"),V_r=o(" (TAPAS model)"),z_r=l(),r1e=a("p"),W_r=o("Examples:"),Q_r=l(),f(aA.$$.fragment),QRe=l(),Qc=a("h2"),_8=a("a"),t1e=a("span"),f(nA.$$.fragment),H_r=l(),a1e=a("span"),U_r=o("TFAutoModelForTokenClassification"),HRe=l(),Br=a("div"),f(sA.$$.fragment),J_r=l(),Hc=a("p"),Y_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),n1e=a("code"),K_r=o("from_pretrained()"),Z_r=o("class method or the "),s1e=a("code"),eur=o("from_config()"),our=o(`class
method.`),rur=l(),lA=a("p"),tur=o("This class cannot be instantiated directly using "),l1e=a("code"),aur=o("__init__()"),nur=o(" (throws an error)."),sur=l(),Et=a("div"),f(iA.$$.fragment),lur=l(),i1e=a("p"),iur=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),dur=l(),Uc=a("p"),cur=o(`Note:
Loading a model from its configuration file does `),d1e=a("strong"),fur=o("not"),mur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),c1e=a("code"),gur=o("from_pretrained()"),hur=o("to load the model weights."),pur=l(),f1e=a("p"),_ur=o("Examples:"),uur=l(),f(dA.$$.fragment),bur=l(),Mo=a("div"),f(cA.$$.fragment),vur=l(),m1e=a("p"),Tur=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Fur=l(),Bn=a("p"),Cur=o("The model class to instantiate is selected based on the "),g1e=a("code"),Mur=o("model_type"),Eur=o(` property of the config object (either
passed as an argument or loaded from `),h1e=a("code"),yur=o("pretrained_model_name_or_path"),wur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p1e=a("code"),Aur=o("pretrained_model_name_or_path"),Lur=o(":"),Bur=l(),K=a("ul"),u8=a("li"),_1e=a("strong"),xur=o("albert"),kur=o(" \u2014 "),EX=a("a"),Rur=o("TFAlbertForTokenClassification"),Sur=o(" (ALBERT model)"),Pur=l(),b8=a("li"),u1e=a("strong"),$ur=o("bert"),Iur=o(" \u2014 "),yX=a("a"),jur=o("TFBertForTokenClassification"),Dur=o(" (BERT model)"),Nur=l(),v8=a("li"),b1e=a("strong"),qur=o("camembert"),Our=o(" \u2014 "),wX=a("a"),Gur=o("TFCamembertForTokenClassification"),Xur=o(" (CamemBERT model)"),Vur=l(),T8=a("li"),v1e=a("strong"),zur=o("convbert"),Wur=o(" \u2014 "),AX=a("a"),Qur=o("TFConvBertForTokenClassification"),Hur=o(" (ConvBERT model)"),Uur=l(),F8=a("li"),T1e=a("strong"),Jur=o("deberta"),Yur=o(" \u2014 "),LX=a("a"),Kur=o("TFDebertaForTokenClassification"),Zur=o(" (DeBERTa model)"),e1r=l(),C8=a("li"),F1e=a("strong"),o1r=o("deberta-v2"),r1r=o(" \u2014 "),BX=a("a"),t1r=o("TFDebertaV2ForTokenClassification"),a1r=o(" (DeBERTa-v2 model)"),n1r=l(),M8=a("li"),C1e=a("strong"),s1r=o("distilbert"),l1r=o(" \u2014 "),xX=a("a"),i1r=o("TFDistilBertForTokenClassification"),d1r=o(" (DistilBERT model)"),c1r=l(),E8=a("li"),M1e=a("strong"),f1r=o("electra"),m1r=o(" \u2014 "),kX=a("a"),g1r=o("TFElectraForTokenClassification"),h1r=o(" (ELECTRA model)"),p1r=l(),y8=a("li"),E1e=a("strong"),_1r=o("flaubert"),u1r=o(" \u2014 "),RX=a("a"),b1r=o("TFFlaubertForTokenClassification"),v1r=o(" (FlauBERT model)"),T1r=l(),w8=a("li"),y1e=a("strong"),F1r=o("funnel"),C1r=o(" \u2014 "),SX=a("a"),M1r=o("TFFunnelForTokenClassification"),E1r=o(" (Funnel Transformer model)"),y1r=l(),A8=a("li"),w1e=a("strong"),w1r=o("layoutlm"),A1r=o(" \u2014 "),PX=a("a"),L1r=o("TFLayoutLMForTokenClassification"),B1r=o(" (LayoutLM model)"),x1r=l(),L8=a("li"),A1e=a("strong"),k1r=o("longformer"),R1r=o(" \u2014 "),$X=a("a"),S1r=o("TFLongformerForTokenClassification"),P1r=o(" (Longformer model)"),$1r=l(),B8=a("li"),L1e=a("strong"),I1r=o("mobilebert"),j1r=o(" \u2014 "),IX=a("a"),D1r=o("TFMobileBertForTokenClassification"),N1r=o(" (MobileBERT model)"),q1r=l(),x8=a("li"),B1e=a("strong"),O1r=o("mpnet"),G1r=o(" \u2014 "),jX=a("a"),X1r=o("TFMPNetForTokenClassification"),V1r=o(" (MPNet model)"),z1r=l(),k8=a("li"),x1e=a("strong"),W1r=o("rembert"),Q1r=o(" \u2014 "),DX=a("a"),H1r=o("TFRemBertForTokenClassification"),U1r=o(" (RemBERT model)"),J1r=l(),R8=a("li"),k1e=a("strong"),Y1r=o("roberta"),K1r=o(" \u2014 "),NX=a("a"),Z1r=o("TFRobertaForTokenClassification"),ebr=o(" (RoBERTa model)"),obr=l(),S8=a("li"),R1e=a("strong"),rbr=o("roformer"),tbr=o(" \u2014 "),qX=a("a"),abr=o("TFRoFormerForTokenClassification"),nbr=o(" (RoFormer model)"),sbr=l(),P8=a("li"),S1e=a("strong"),lbr=o("xlm"),ibr=o(" \u2014 "),OX=a("a"),dbr=o("TFXLMForTokenClassification"),cbr=o(" (XLM model)"),fbr=l(),$8=a("li"),P1e=a("strong"),mbr=o("xlm-roberta"),gbr=o(" \u2014 "),GX=a("a"),hbr=o("TFXLMRobertaForTokenClassification"),pbr=o(" (XLM-RoBERTa model)"),_br=l(),I8=a("li"),$1e=a("strong"),ubr=o("xlnet"),bbr=o(" \u2014 "),XX=a("a"),vbr=o("TFXLNetForTokenClassification"),Tbr=o(" (XLNet model)"),Fbr=l(),I1e=a("p"),Cbr=o("Examples:"),Mbr=l(),f(fA.$$.fragment),URe=l(),Jc=a("h2"),j8=a("a"),j1e=a("span"),f(mA.$$.fragment),Ebr=l(),D1e=a("span"),ybr=o("TFAutoModelForQuestionAnswering"),JRe=l(),xr=a("div"),f(gA.$$.fragment),wbr=l(),Yc=a("p"),Abr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),N1e=a("code"),Lbr=o("from_pretrained()"),Bbr=o("class method or the "),q1e=a("code"),xbr=o("from_config()"),kbr=o(`class
method.`),Rbr=l(),hA=a("p"),Sbr=o("This class cannot be instantiated directly using "),O1e=a("code"),Pbr=o("__init__()"),$br=o(" (throws an error)."),Ibr=l(),yt=a("div"),f(pA.$$.fragment),jbr=l(),G1e=a("p"),Dbr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Nbr=l(),Kc=a("p"),qbr=o(`Note:
Loading a model from its configuration file does `),X1e=a("strong"),Obr=o("not"),Gbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),V1e=a("code"),Xbr=o("from_pretrained()"),Vbr=o("to load the model weights."),zbr=l(),z1e=a("p"),Wbr=o("Examples:"),Qbr=l(),f(_A.$$.fragment),Hbr=l(),Eo=a("div"),f(uA.$$.fragment),Ubr=l(),W1e=a("p"),Jbr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Ybr=l(),xn=a("p"),Kbr=o("The model class to instantiate is selected based on the "),Q1e=a("code"),Zbr=o("model_type"),e5r=o(` property of the config object (either
passed as an argument or loaded from `),H1e=a("code"),o5r=o("pretrained_model_name_or_path"),r5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U1e=a("code"),t5r=o("pretrained_model_name_or_path"),a5r=o(":"),n5r=l(),Z=a("ul"),D8=a("li"),J1e=a("strong"),s5r=o("albert"),l5r=o(" \u2014 "),VX=a("a"),i5r=o("TFAlbertForQuestionAnswering"),d5r=o(" (ALBERT model)"),c5r=l(),N8=a("li"),Y1e=a("strong"),f5r=o("bert"),m5r=o(" \u2014 "),zX=a("a"),g5r=o("TFBertForQuestionAnswering"),h5r=o(" (BERT model)"),p5r=l(),q8=a("li"),K1e=a("strong"),_5r=o("camembert"),u5r=o(" \u2014 "),WX=a("a"),b5r=o("TFCamembertForQuestionAnswering"),v5r=o(" (CamemBERT model)"),T5r=l(),O8=a("li"),Z1e=a("strong"),F5r=o("convbert"),C5r=o(" \u2014 "),QX=a("a"),M5r=o("TFConvBertForQuestionAnswering"),E5r=o(" (ConvBERT model)"),y5r=l(),G8=a("li"),ebe=a("strong"),w5r=o("deberta"),A5r=o(" \u2014 "),HX=a("a"),L5r=o("TFDebertaForQuestionAnswering"),B5r=o(" (DeBERTa model)"),x5r=l(),X8=a("li"),obe=a("strong"),k5r=o("deberta-v2"),R5r=o(" \u2014 "),UX=a("a"),S5r=o("TFDebertaV2ForQuestionAnswering"),P5r=o(" (DeBERTa-v2 model)"),$5r=l(),V8=a("li"),rbe=a("strong"),I5r=o("distilbert"),j5r=o(" \u2014 "),JX=a("a"),D5r=o("TFDistilBertForQuestionAnswering"),N5r=o(" (DistilBERT model)"),q5r=l(),z8=a("li"),tbe=a("strong"),O5r=o("electra"),G5r=o(" \u2014 "),YX=a("a"),X5r=o("TFElectraForQuestionAnswering"),V5r=o(" (ELECTRA model)"),z5r=l(),W8=a("li"),abe=a("strong"),W5r=o("flaubert"),Q5r=o(" \u2014 "),KX=a("a"),H5r=o("TFFlaubertForQuestionAnsweringSimple"),U5r=o(" (FlauBERT model)"),J5r=l(),Q8=a("li"),nbe=a("strong"),Y5r=o("funnel"),K5r=o(" \u2014 "),ZX=a("a"),Z5r=o("TFFunnelForQuestionAnswering"),e2r=o(" (Funnel Transformer model)"),o2r=l(),H8=a("li"),sbe=a("strong"),r2r=o("longformer"),t2r=o(" \u2014 "),eV=a("a"),a2r=o("TFLongformerForQuestionAnswering"),n2r=o(" (Longformer model)"),s2r=l(),U8=a("li"),lbe=a("strong"),l2r=o("mobilebert"),i2r=o(" \u2014 "),oV=a("a"),d2r=o("TFMobileBertForQuestionAnswering"),c2r=o(" (MobileBERT model)"),f2r=l(),J8=a("li"),ibe=a("strong"),m2r=o("mpnet"),g2r=o(" \u2014 "),rV=a("a"),h2r=o("TFMPNetForQuestionAnswering"),p2r=o(" (MPNet model)"),_2r=l(),Y8=a("li"),dbe=a("strong"),u2r=o("rembert"),b2r=o(" \u2014 "),tV=a("a"),v2r=o("TFRemBertForQuestionAnswering"),T2r=o(" (RemBERT model)"),F2r=l(),K8=a("li"),cbe=a("strong"),C2r=o("roberta"),M2r=o(" \u2014 "),aV=a("a"),E2r=o("TFRobertaForQuestionAnswering"),y2r=o(" (RoBERTa model)"),w2r=l(),Z8=a("li"),fbe=a("strong"),A2r=o("roformer"),L2r=o(" \u2014 "),nV=a("a"),B2r=o("TFRoFormerForQuestionAnswering"),x2r=o(" (RoFormer model)"),k2r=l(),eF=a("li"),mbe=a("strong"),R2r=o("xlm"),S2r=o(" \u2014 "),sV=a("a"),P2r=o("TFXLMForQuestionAnsweringSimple"),$2r=o(" (XLM model)"),I2r=l(),oF=a("li"),gbe=a("strong"),j2r=o("xlm-roberta"),D2r=o(" \u2014 "),lV=a("a"),N2r=o("TFXLMRobertaForQuestionAnswering"),q2r=o(" (XLM-RoBERTa model)"),O2r=l(),rF=a("li"),hbe=a("strong"),G2r=o("xlnet"),X2r=o(" \u2014 "),iV=a("a"),V2r=o("TFXLNetForQuestionAnsweringSimple"),z2r=o(" (XLNet model)"),W2r=l(),pbe=a("p"),Q2r=o("Examples:"),H2r=l(),f(bA.$$.fragment),YRe=l(),Zc=a("h2"),tF=a("a"),_be=a("span"),f(vA.$$.fragment),U2r=l(),ube=a("span"),J2r=o("TFAutoModelForVision2Seq"),KRe=l(),kr=a("div"),f(TA.$$.fragment),Y2r=l(),ef=a("p"),K2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),bbe=a("code"),Z2r=o("from_pretrained()"),evr=o("class method or the "),vbe=a("code"),ovr=o("from_config()"),rvr=o(`class
method.`),tvr=l(),FA=a("p"),avr=o("This class cannot be instantiated directly using "),Tbe=a("code"),nvr=o("__init__()"),svr=o(" (throws an error)."),lvr=l(),wt=a("div"),f(CA.$$.fragment),ivr=l(),Fbe=a("p"),dvr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),cvr=l(),of=a("p"),fvr=o(`Note:
Loading a model from its configuration file does `),Cbe=a("strong"),mvr=o("not"),gvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mbe=a("code"),hvr=o("from_pretrained()"),pvr=o("to load the model weights."),_vr=l(),Ebe=a("p"),uvr=o("Examples:"),bvr=l(),f(MA.$$.fragment),vvr=l(),yo=a("div"),f(EA.$$.fragment),Tvr=l(),ybe=a("p"),Fvr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Cvr=l(),kn=a("p"),Mvr=o("The model class to instantiate is selected based on the "),wbe=a("code"),Evr=o("model_type"),yvr=o(` property of the config object (either
passed as an argument or loaded from `),Abe=a("code"),wvr=o("pretrained_model_name_or_path"),Avr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lbe=a("code"),Lvr=o("pretrained_model_name_or_path"),Bvr=o(":"),xvr=l(),Bbe=a("ul"),aF=a("li"),xbe=a("strong"),kvr=o("vision-encoder-decoder"),Rvr=o(" \u2014 "),dV=a("a"),Svr=o("TFVisionEncoderDecoderModel"),Pvr=o(" (Vision Encoder decoder model)"),$vr=l(),kbe=a("p"),Ivr=o("Examples:"),jvr=l(),f(yA.$$.fragment),ZRe=l(),rf=a("h2"),nF=a("a"),Rbe=a("span"),f(wA.$$.fragment),Dvr=l(),Sbe=a("span"),Nvr=o("TFAutoModelForSpeechSeq2Seq"),eSe=l(),Rr=a("div"),f(AA.$$.fragment),qvr=l(),tf=a("p"),Ovr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Pbe=a("code"),Gvr=o("from_pretrained()"),Xvr=o("class method or the "),$be=a("code"),Vvr=o("from_config()"),zvr=o(`class
method.`),Wvr=l(),LA=a("p"),Qvr=o("This class cannot be instantiated directly using "),Ibe=a("code"),Hvr=o("__init__()"),Uvr=o(" (throws an error)."),Jvr=l(),At=a("div"),f(BA.$$.fragment),Yvr=l(),jbe=a("p"),Kvr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Zvr=l(),af=a("p"),e6r=o(`Note:
Loading a model from its configuration file does `),Dbe=a("strong"),o6r=o("not"),r6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nbe=a("code"),t6r=o("from_pretrained()"),a6r=o("to load the model weights."),n6r=l(),qbe=a("p"),s6r=o("Examples:"),l6r=l(),f(xA.$$.fragment),i6r=l(),wo=a("div"),f(kA.$$.fragment),d6r=l(),Obe=a("p"),c6r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),f6r=l(),Rn=a("p"),m6r=o("The model class to instantiate is selected based on the "),Gbe=a("code"),g6r=o("model_type"),h6r=o(` property of the config object (either
passed as an argument or loaded from `),Xbe=a("code"),p6r=o("pretrained_model_name_or_path"),_6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vbe=a("code"),u6r=o("pretrained_model_name_or_path"),b6r=o(":"),v6r=l(),zbe=a("ul"),sF=a("li"),Wbe=a("strong"),T6r=o("speech_to_text"),F6r=o(" \u2014 "),cV=a("a"),C6r=o("TFSpeech2TextForConditionalGeneration"),M6r=o(" (Speech2Text model)"),E6r=l(),Qbe=a("p"),y6r=o("Examples:"),w6r=l(),f(RA.$$.fragment),oSe=l(),nf=a("h2"),lF=a("a"),Hbe=a("span"),f(SA.$$.fragment),A6r=l(),Ube=a("span"),L6r=o("FlaxAutoModel"),rSe=l(),Sr=a("div"),f(PA.$$.fragment),B6r=l(),sf=a("p"),x6r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Jbe=a("code"),k6r=o("from_pretrained()"),R6r=o("class method or the "),Ybe=a("code"),S6r=o("from_config()"),P6r=o(`class
method.`),$6r=l(),$A=a("p"),I6r=o("This class cannot be instantiated directly using "),Kbe=a("code"),j6r=o("__init__()"),D6r=o(" (throws an error)."),N6r=l(),Lt=a("div"),f(IA.$$.fragment),q6r=l(),Zbe=a("p"),O6r=o("Instantiates one of the base model classes of the library from a configuration."),G6r=l(),lf=a("p"),X6r=o(`Note:
Loading a model from its configuration file does `),e5e=a("strong"),V6r=o("not"),z6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),o5e=a("code"),W6r=o("from_pretrained()"),Q6r=o("to load the model weights."),H6r=l(),r5e=a("p"),U6r=o("Examples:"),J6r=l(),f(jA.$$.fragment),Y6r=l(),Ao=a("div"),f(DA.$$.fragment),K6r=l(),t5e=a("p"),Z6r=o("Instantiate one of the base model classes of the library from a pretrained model."),e0r=l(),Sn=a("p"),o0r=o("The model class to instantiate is selected based on the "),a5e=a("code"),r0r=o("model_type"),t0r=o(` property of the config object (either
passed as an argument or loaded from `),n5e=a("code"),a0r=o("pretrained_model_name_or_path"),n0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s5e=a("code"),s0r=o("pretrained_model_name_or_path"),l0r=o(":"),i0r=l(),z=a("ul"),iF=a("li"),l5e=a("strong"),d0r=o("albert"),c0r=o(" \u2014 "),fV=a("a"),f0r=o("FlaxAlbertModel"),m0r=o(" (ALBERT model)"),g0r=l(),dF=a("li"),i5e=a("strong"),h0r=o("bart"),p0r=o(" \u2014 "),mV=a("a"),_0r=o("FlaxBartModel"),u0r=o(" (BART model)"),b0r=l(),cF=a("li"),d5e=a("strong"),v0r=o("beit"),T0r=o(" \u2014 "),gV=a("a"),F0r=o("FlaxBeitModel"),C0r=o(" (BEiT model)"),M0r=l(),fF=a("li"),c5e=a("strong"),E0r=o("bert"),y0r=o(" \u2014 "),hV=a("a"),w0r=o("FlaxBertModel"),A0r=o(" (BERT model)"),L0r=l(),mF=a("li"),f5e=a("strong"),B0r=o("big_bird"),x0r=o(" \u2014 "),pV=a("a"),k0r=o("FlaxBigBirdModel"),R0r=o(" (BigBird model)"),S0r=l(),gF=a("li"),m5e=a("strong"),P0r=o("blenderbot"),$0r=o(" \u2014 "),_V=a("a"),I0r=o("FlaxBlenderbotModel"),j0r=o(" (Blenderbot model)"),D0r=l(),hF=a("li"),g5e=a("strong"),N0r=o("blenderbot-small"),q0r=o(" \u2014 "),uV=a("a"),O0r=o("FlaxBlenderbotSmallModel"),G0r=o(" (BlenderbotSmall model)"),X0r=l(),pF=a("li"),h5e=a("strong"),V0r=o("clip"),z0r=o(" \u2014 "),bV=a("a"),W0r=o("FlaxCLIPModel"),Q0r=o(" (CLIP model)"),H0r=l(),_F=a("li"),p5e=a("strong"),U0r=o("distilbert"),J0r=o(" \u2014 "),vV=a("a"),Y0r=o("FlaxDistilBertModel"),K0r=o(" (DistilBERT model)"),Z0r=l(),uF=a("li"),_5e=a("strong"),eTr=o("electra"),oTr=o(" \u2014 "),TV=a("a"),rTr=o("FlaxElectraModel"),tTr=o(" (ELECTRA model)"),aTr=l(),bF=a("li"),u5e=a("strong"),nTr=o("gpt2"),sTr=o(" \u2014 "),FV=a("a"),lTr=o("FlaxGPT2Model"),iTr=o(" (OpenAI GPT-2 model)"),dTr=l(),vF=a("li"),b5e=a("strong"),cTr=o("gpt_neo"),fTr=o(" \u2014 "),CV=a("a"),mTr=o("FlaxGPTNeoModel"),gTr=o(" (GPT Neo model)"),hTr=l(),TF=a("li"),v5e=a("strong"),pTr=o("gptj"),_Tr=o(" \u2014 "),MV=a("a"),uTr=o("FlaxGPTJModel"),bTr=o(" (GPT-J model)"),vTr=l(),FF=a("li"),T5e=a("strong"),TTr=o("marian"),FTr=o(" \u2014 "),EV=a("a"),CTr=o("FlaxMarianModel"),MTr=o(" (Marian model)"),ETr=l(),CF=a("li"),F5e=a("strong"),yTr=o("mbart"),wTr=o(" \u2014 "),yV=a("a"),ATr=o("FlaxMBartModel"),LTr=o(" (mBART model)"),BTr=l(),MF=a("li"),C5e=a("strong"),xTr=o("mt5"),kTr=o(" \u2014 "),wV=a("a"),RTr=o("FlaxMT5Model"),STr=o(" (mT5 model)"),PTr=l(),EF=a("li"),M5e=a("strong"),$Tr=o("pegasus"),ITr=o(" \u2014 "),AV=a("a"),jTr=o("FlaxPegasusModel"),DTr=o(" (Pegasus model)"),NTr=l(),yF=a("li"),E5e=a("strong"),qTr=o("roberta"),OTr=o(" \u2014 "),LV=a("a"),GTr=o("FlaxRobertaModel"),XTr=o(" (RoBERTa model)"),VTr=l(),wF=a("li"),y5e=a("strong"),zTr=o("roformer"),WTr=o(" \u2014 "),BV=a("a"),QTr=o("FlaxRoFormerModel"),HTr=o(" (RoFormer model)"),UTr=l(),AF=a("li"),w5e=a("strong"),JTr=o("t5"),YTr=o(" \u2014 "),xV=a("a"),KTr=o("FlaxT5Model"),ZTr=o(" (T5 model)"),e8r=l(),LF=a("li"),A5e=a("strong"),o8r=o("vision-text-dual-encoder"),r8r=o(" \u2014 "),kV=a("a"),t8r=o("FlaxVisionTextDualEncoderModel"),a8r=o(" (VisionTextDualEncoder model)"),n8r=l(),BF=a("li"),L5e=a("strong"),s8r=o("vit"),l8r=o(" \u2014 "),RV=a("a"),i8r=o("FlaxViTModel"),d8r=o(" (ViT model)"),c8r=l(),xF=a("li"),B5e=a("strong"),f8r=o("wav2vec2"),m8r=o(" \u2014 "),SV=a("a"),g8r=o("FlaxWav2Vec2Model"),h8r=o(" (Wav2Vec2 model)"),p8r=l(),kF=a("li"),x5e=a("strong"),_8r=o("xglm"),u8r=o(" \u2014 "),PV=a("a"),b8r=o("FlaxXGLMModel"),v8r=o(" (XGLM model)"),T8r=l(),RF=a("li"),k5e=a("strong"),F8r=o("xlm-roberta"),C8r=o(" \u2014 "),$V=a("a"),M8r=o("FlaxXLMRobertaModel"),E8r=o(" (XLM-RoBERTa model)"),y8r=l(),R5e=a("p"),w8r=o("Examples:"),A8r=l(),f(NA.$$.fragment),tSe=l(),df=a("h2"),SF=a("a"),S5e=a("span"),f(qA.$$.fragment),L8r=l(),P5e=a("span"),B8r=o("FlaxAutoModelForCausalLM"),aSe=l(),Pr=a("div"),f(OA.$$.fragment),x8r=l(),cf=a("p"),k8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),$5e=a("code"),R8r=o("from_pretrained()"),S8r=o("class method or the "),I5e=a("code"),P8r=o("from_config()"),$8r=o(`class
method.`),I8r=l(),GA=a("p"),j8r=o("This class cannot be instantiated directly using "),j5e=a("code"),D8r=o("__init__()"),N8r=o(" (throws an error)."),q8r=l(),Bt=a("div"),f(XA.$$.fragment),O8r=l(),D5e=a("p"),G8r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),X8r=l(),ff=a("p"),V8r=o(`Note:
Loading a model from its configuration file does `),N5e=a("strong"),z8r=o("not"),W8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),q5e=a("code"),Q8r=o("from_pretrained()"),H8r=o("to load the model weights."),U8r=l(),O5e=a("p"),J8r=o("Examples:"),Y8r=l(),f(VA.$$.fragment),K8r=l(),Lo=a("div"),f(zA.$$.fragment),Z8r=l(),G5e=a("p"),eFr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),oFr=l(),Pn=a("p"),rFr=o("The model class to instantiate is selected based on the "),X5e=a("code"),tFr=o("model_type"),aFr=o(` property of the config object (either
passed as an argument or loaded from `),V5e=a("code"),nFr=o("pretrained_model_name_or_path"),sFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z5e=a("code"),lFr=o("pretrained_model_name_or_path"),iFr=o(":"),dFr=l(),ga=a("ul"),PF=a("li"),W5e=a("strong"),cFr=o("bart"),fFr=o(" \u2014 "),IV=a("a"),mFr=o("FlaxBartForCausalLM"),gFr=o(" (BART model)"),hFr=l(),$F=a("li"),Q5e=a("strong"),pFr=o("gpt2"),_Fr=o(" \u2014 "),jV=a("a"),uFr=o("FlaxGPT2LMHeadModel"),bFr=o(" (OpenAI GPT-2 model)"),vFr=l(),IF=a("li"),H5e=a("strong"),TFr=o("gpt_neo"),FFr=o(" \u2014 "),DV=a("a"),CFr=o("FlaxGPTNeoForCausalLM"),MFr=o(" (GPT Neo model)"),EFr=l(),jF=a("li"),U5e=a("strong"),yFr=o("gptj"),wFr=o(" \u2014 "),NV=a("a"),AFr=o("FlaxGPTJForCausalLM"),LFr=o(" (GPT-J model)"),BFr=l(),DF=a("li"),J5e=a("strong"),xFr=o("xglm"),kFr=o(" \u2014 "),qV=a("a"),RFr=o("FlaxXGLMForCausalLM"),SFr=o(" (XGLM model)"),PFr=l(),Y5e=a("p"),$Fr=o("Examples:"),IFr=l(),f(WA.$$.fragment),nSe=l(),mf=a("h2"),NF=a("a"),K5e=a("span"),f(QA.$$.fragment),jFr=l(),Z5e=a("span"),DFr=o("FlaxAutoModelForPreTraining"),sSe=l(),$r=a("div"),f(HA.$$.fragment),NFr=l(),gf=a("p"),qFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),e2e=a("code"),OFr=o("from_pretrained()"),GFr=o("class method or the "),o2e=a("code"),XFr=o("from_config()"),VFr=o(`class
method.`),zFr=l(),UA=a("p"),WFr=o("This class cannot be instantiated directly using "),r2e=a("code"),QFr=o("__init__()"),HFr=o(" (throws an error)."),UFr=l(),xt=a("div"),f(JA.$$.fragment),JFr=l(),t2e=a("p"),YFr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),KFr=l(),hf=a("p"),ZFr=o(`Note:
Loading a model from its configuration file does `),a2e=a("strong"),eCr=o("not"),oCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),n2e=a("code"),rCr=o("from_pretrained()"),tCr=o("to load the model weights."),aCr=l(),s2e=a("p"),nCr=o("Examples:"),sCr=l(),f(YA.$$.fragment),lCr=l(),Bo=a("div"),f(KA.$$.fragment),iCr=l(),l2e=a("p"),dCr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),cCr=l(),$n=a("p"),fCr=o("The model class to instantiate is selected based on the "),i2e=a("code"),mCr=o("model_type"),gCr=o(` property of the config object (either
passed as an argument or loaded from `),d2e=a("code"),hCr=o("pretrained_model_name_or_path"),pCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c2e=a("code"),_Cr=o("pretrained_model_name_or_path"),uCr=o(":"),bCr=l(),ce=a("ul"),qF=a("li"),f2e=a("strong"),vCr=o("albert"),TCr=o(" \u2014 "),OV=a("a"),FCr=o("FlaxAlbertForPreTraining"),CCr=o(" (ALBERT model)"),MCr=l(),OF=a("li"),m2e=a("strong"),ECr=o("bart"),yCr=o(" \u2014 "),GV=a("a"),wCr=o("FlaxBartForConditionalGeneration"),ACr=o(" (BART model)"),LCr=l(),GF=a("li"),g2e=a("strong"),BCr=o("bert"),xCr=o(" \u2014 "),XV=a("a"),kCr=o("FlaxBertForPreTraining"),RCr=o(" (BERT model)"),SCr=l(),XF=a("li"),h2e=a("strong"),PCr=o("big_bird"),$Cr=o(" \u2014 "),VV=a("a"),ICr=o("FlaxBigBirdForPreTraining"),jCr=o(" (BigBird model)"),DCr=l(),VF=a("li"),p2e=a("strong"),NCr=o("electra"),qCr=o(" \u2014 "),zV=a("a"),OCr=o("FlaxElectraForPreTraining"),GCr=o(" (ELECTRA model)"),XCr=l(),zF=a("li"),_2e=a("strong"),VCr=o("mbart"),zCr=o(" \u2014 "),WV=a("a"),WCr=o("FlaxMBartForConditionalGeneration"),QCr=o(" (mBART model)"),HCr=l(),WF=a("li"),u2e=a("strong"),UCr=o("mt5"),JCr=o(" \u2014 "),QV=a("a"),YCr=o("FlaxMT5ForConditionalGeneration"),KCr=o(" (mT5 model)"),ZCr=l(),QF=a("li"),b2e=a("strong"),eMr=o("roberta"),oMr=o(" \u2014 "),HV=a("a"),rMr=o("FlaxRobertaForMaskedLM"),tMr=o(" (RoBERTa model)"),aMr=l(),HF=a("li"),v2e=a("strong"),nMr=o("roformer"),sMr=o(" \u2014 "),UV=a("a"),lMr=o("FlaxRoFormerForMaskedLM"),iMr=o(" (RoFormer model)"),dMr=l(),UF=a("li"),T2e=a("strong"),cMr=o("t5"),fMr=o(" \u2014 "),JV=a("a"),mMr=o("FlaxT5ForConditionalGeneration"),gMr=o(" (T5 model)"),hMr=l(),JF=a("li"),F2e=a("strong"),pMr=o("wav2vec2"),_Mr=o(" \u2014 "),YV=a("a"),uMr=o("FlaxWav2Vec2ForPreTraining"),bMr=o(" (Wav2Vec2 model)"),vMr=l(),YF=a("li"),C2e=a("strong"),TMr=o("xlm-roberta"),FMr=o(" \u2014 "),KV=a("a"),CMr=o("FlaxXLMRobertaForMaskedLM"),MMr=o(" (XLM-RoBERTa model)"),EMr=l(),M2e=a("p"),yMr=o("Examples:"),wMr=l(),f(ZA.$$.fragment),lSe=l(),pf=a("h2"),KF=a("a"),E2e=a("span"),f(eL.$$.fragment),AMr=l(),y2e=a("span"),LMr=o("FlaxAutoModelForMaskedLM"),iSe=l(),Ir=a("div"),f(oL.$$.fragment),BMr=l(),_f=a("p"),xMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),w2e=a("code"),kMr=o("from_pretrained()"),RMr=o("class method or the "),A2e=a("code"),SMr=o("from_config()"),PMr=o(`class
method.`),$Mr=l(),rL=a("p"),IMr=o("This class cannot be instantiated directly using "),L2e=a("code"),jMr=o("__init__()"),DMr=o(" (throws an error)."),NMr=l(),kt=a("div"),f(tL.$$.fragment),qMr=l(),B2e=a("p"),OMr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),GMr=l(),uf=a("p"),XMr=o(`Note:
Loading a model from its configuration file does `),x2e=a("strong"),VMr=o("not"),zMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),k2e=a("code"),WMr=o("from_pretrained()"),QMr=o("to load the model weights."),HMr=l(),R2e=a("p"),UMr=o("Examples:"),JMr=l(),f(aL.$$.fragment),YMr=l(),xo=a("div"),f(nL.$$.fragment),KMr=l(),S2e=a("p"),ZMr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),e4r=l(),In=a("p"),o4r=o("The model class to instantiate is selected based on the "),P2e=a("code"),r4r=o("model_type"),t4r=o(` property of the config object (either
passed as an argument or loaded from `),$2e=a("code"),a4r=o("pretrained_model_name_or_path"),n4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I2e=a("code"),s4r=o("pretrained_model_name_or_path"),l4r=o(":"),i4r=l(),be=a("ul"),ZF=a("li"),j2e=a("strong"),d4r=o("albert"),c4r=o(" \u2014 "),ZV=a("a"),f4r=o("FlaxAlbertForMaskedLM"),m4r=o(" (ALBERT model)"),g4r=l(),eC=a("li"),D2e=a("strong"),h4r=o("bart"),p4r=o(" \u2014 "),ez=a("a"),_4r=o("FlaxBartForConditionalGeneration"),u4r=o(" (BART model)"),b4r=l(),oC=a("li"),N2e=a("strong"),v4r=o("bert"),T4r=o(" \u2014 "),oz=a("a"),F4r=o("FlaxBertForMaskedLM"),C4r=o(" (BERT model)"),M4r=l(),rC=a("li"),q2e=a("strong"),E4r=o("big_bird"),y4r=o(" \u2014 "),rz=a("a"),w4r=o("FlaxBigBirdForMaskedLM"),A4r=o(" (BigBird model)"),L4r=l(),tC=a("li"),O2e=a("strong"),B4r=o("distilbert"),x4r=o(" \u2014 "),tz=a("a"),k4r=o("FlaxDistilBertForMaskedLM"),R4r=o(" (DistilBERT model)"),S4r=l(),aC=a("li"),G2e=a("strong"),P4r=o("electra"),$4r=o(" \u2014 "),az=a("a"),I4r=o("FlaxElectraForMaskedLM"),j4r=o(" (ELECTRA model)"),D4r=l(),nC=a("li"),X2e=a("strong"),N4r=o("mbart"),q4r=o(" \u2014 "),nz=a("a"),O4r=o("FlaxMBartForConditionalGeneration"),G4r=o(" (mBART model)"),X4r=l(),sC=a("li"),V2e=a("strong"),V4r=o("roberta"),z4r=o(" \u2014 "),sz=a("a"),W4r=o("FlaxRobertaForMaskedLM"),Q4r=o(" (RoBERTa model)"),H4r=l(),lC=a("li"),z2e=a("strong"),U4r=o("roformer"),J4r=o(" \u2014 "),lz=a("a"),Y4r=o("FlaxRoFormerForMaskedLM"),K4r=o(" (RoFormer model)"),Z4r=l(),iC=a("li"),W2e=a("strong"),eEr=o("xlm-roberta"),oEr=o(" \u2014 "),iz=a("a"),rEr=o("FlaxXLMRobertaForMaskedLM"),tEr=o(" (XLM-RoBERTa model)"),aEr=l(),Q2e=a("p"),nEr=o("Examples:"),sEr=l(),f(sL.$$.fragment),dSe=l(),bf=a("h2"),dC=a("a"),H2e=a("span"),f(lL.$$.fragment),lEr=l(),U2e=a("span"),iEr=o("FlaxAutoModelForSeq2SeqLM"),cSe=l(),jr=a("div"),f(iL.$$.fragment),dEr=l(),vf=a("p"),cEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),J2e=a("code"),fEr=o("from_pretrained()"),mEr=o("class method or the "),Y2e=a("code"),gEr=o("from_config()"),hEr=o(`class
method.`),pEr=l(),dL=a("p"),_Er=o("This class cannot be instantiated directly using "),K2e=a("code"),uEr=o("__init__()"),bEr=o(" (throws an error)."),vEr=l(),Rt=a("div"),f(cL.$$.fragment),TEr=l(),Z2e=a("p"),FEr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),CEr=l(),Tf=a("p"),MEr=o(`Note:
Loading a model from its configuration file does `),eve=a("strong"),EEr=o("not"),yEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ove=a("code"),wEr=o("from_pretrained()"),AEr=o("to load the model weights."),LEr=l(),rve=a("p"),BEr=o("Examples:"),xEr=l(),f(fL.$$.fragment),kEr=l(),ko=a("div"),f(mL.$$.fragment),REr=l(),tve=a("p"),SEr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),PEr=l(),jn=a("p"),$Er=o("The model class to instantiate is selected based on the "),ave=a("code"),IEr=o("model_type"),jEr=o(` property of the config object (either
passed as an argument or loaded from `),nve=a("code"),DEr=o("pretrained_model_name_or_path"),NEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sve=a("code"),qEr=o("pretrained_model_name_or_path"),OEr=o(":"),GEr=l(),Ee=a("ul"),cC=a("li"),lve=a("strong"),XEr=o("bart"),VEr=o(" \u2014 "),dz=a("a"),zEr=o("FlaxBartForConditionalGeneration"),WEr=o(" (BART model)"),QEr=l(),fC=a("li"),ive=a("strong"),HEr=o("blenderbot"),UEr=o(" \u2014 "),cz=a("a"),JEr=o("FlaxBlenderbotForConditionalGeneration"),YEr=o(" (Blenderbot model)"),KEr=l(),mC=a("li"),dve=a("strong"),ZEr=o("blenderbot-small"),e3r=o(" \u2014 "),fz=a("a"),o3r=o("FlaxBlenderbotSmallForConditionalGeneration"),r3r=o(" (BlenderbotSmall model)"),t3r=l(),gC=a("li"),cve=a("strong"),a3r=o("encoder-decoder"),n3r=o(" \u2014 "),mz=a("a"),s3r=o("FlaxEncoderDecoderModel"),l3r=o(" (Encoder decoder model)"),i3r=l(),hC=a("li"),fve=a("strong"),d3r=o("marian"),c3r=o(" \u2014 "),gz=a("a"),f3r=o("FlaxMarianMTModel"),m3r=o(" (Marian model)"),g3r=l(),pC=a("li"),mve=a("strong"),h3r=o("mbart"),p3r=o(" \u2014 "),hz=a("a"),_3r=o("FlaxMBartForConditionalGeneration"),u3r=o(" (mBART model)"),b3r=l(),_C=a("li"),gve=a("strong"),v3r=o("mt5"),T3r=o(" \u2014 "),pz=a("a"),F3r=o("FlaxMT5ForConditionalGeneration"),C3r=o(" (mT5 model)"),M3r=l(),uC=a("li"),hve=a("strong"),E3r=o("pegasus"),y3r=o(" \u2014 "),_z=a("a"),w3r=o("FlaxPegasusForConditionalGeneration"),A3r=o(" (Pegasus model)"),L3r=l(),bC=a("li"),pve=a("strong"),B3r=o("t5"),x3r=o(" \u2014 "),uz=a("a"),k3r=o("FlaxT5ForConditionalGeneration"),R3r=o(" (T5 model)"),S3r=l(),_ve=a("p"),P3r=o("Examples:"),$3r=l(),f(gL.$$.fragment),fSe=l(),Ff=a("h2"),vC=a("a"),uve=a("span"),f(hL.$$.fragment),I3r=l(),bve=a("span"),j3r=o("FlaxAutoModelForSequenceClassification"),mSe=l(),Dr=a("div"),f(pL.$$.fragment),D3r=l(),Cf=a("p"),N3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),vve=a("code"),q3r=o("from_pretrained()"),O3r=o("class method or the "),Tve=a("code"),G3r=o("from_config()"),X3r=o(`class
method.`),V3r=l(),_L=a("p"),z3r=o("This class cannot be instantiated directly using "),Fve=a("code"),W3r=o("__init__()"),Q3r=o(" (throws an error)."),H3r=l(),St=a("div"),f(uL.$$.fragment),U3r=l(),Cve=a("p"),J3r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Y3r=l(),Mf=a("p"),K3r=o(`Note:
Loading a model from its configuration file does `),Mve=a("strong"),Z3r=o("not"),eyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Eve=a("code"),oyr=o("from_pretrained()"),ryr=o("to load the model weights."),tyr=l(),yve=a("p"),ayr=o("Examples:"),nyr=l(),f(bL.$$.fragment),syr=l(),Ro=a("div"),f(vL.$$.fragment),lyr=l(),wve=a("p"),iyr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),dyr=l(),Dn=a("p"),cyr=o("The model class to instantiate is selected based on the "),Ave=a("code"),fyr=o("model_type"),myr=o(` property of the config object (either
passed as an argument or loaded from `),Lve=a("code"),gyr=o("pretrained_model_name_or_path"),hyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bve=a("code"),pyr=o("pretrained_model_name_or_path"),_yr=o(":"),uyr=l(),ve=a("ul"),TC=a("li"),xve=a("strong"),byr=o("albert"),vyr=o(" \u2014 "),bz=a("a"),Tyr=o("FlaxAlbertForSequenceClassification"),Fyr=o(" (ALBERT model)"),Cyr=l(),FC=a("li"),kve=a("strong"),Myr=o("bart"),Eyr=o(" \u2014 "),vz=a("a"),yyr=o("FlaxBartForSequenceClassification"),wyr=o(" (BART model)"),Ayr=l(),CC=a("li"),Rve=a("strong"),Lyr=o("bert"),Byr=o(" \u2014 "),Tz=a("a"),xyr=o("FlaxBertForSequenceClassification"),kyr=o(" (BERT model)"),Ryr=l(),MC=a("li"),Sve=a("strong"),Syr=o("big_bird"),Pyr=o(" \u2014 "),Fz=a("a"),$yr=o("FlaxBigBirdForSequenceClassification"),Iyr=o(" (BigBird model)"),jyr=l(),EC=a("li"),Pve=a("strong"),Dyr=o("distilbert"),Nyr=o(" \u2014 "),Cz=a("a"),qyr=o("FlaxDistilBertForSequenceClassification"),Oyr=o(" (DistilBERT model)"),Gyr=l(),yC=a("li"),$ve=a("strong"),Xyr=o("electra"),Vyr=o(" \u2014 "),Mz=a("a"),zyr=o("FlaxElectraForSequenceClassification"),Wyr=o(" (ELECTRA model)"),Qyr=l(),wC=a("li"),Ive=a("strong"),Hyr=o("mbart"),Uyr=o(" \u2014 "),Ez=a("a"),Jyr=o("FlaxMBartForSequenceClassification"),Yyr=o(" (mBART model)"),Kyr=l(),AC=a("li"),jve=a("strong"),Zyr=o("roberta"),ewr=o(" \u2014 "),yz=a("a"),owr=o("FlaxRobertaForSequenceClassification"),rwr=o(" (RoBERTa model)"),twr=l(),LC=a("li"),Dve=a("strong"),awr=o("roformer"),nwr=o(" \u2014 "),wz=a("a"),swr=o("FlaxRoFormerForSequenceClassification"),lwr=o(" (RoFormer model)"),iwr=l(),BC=a("li"),Nve=a("strong"),dwr=o("xlm-roberta"),cwr=o(" \u2014 "),Az=a("a"),fwr=o("FlaxXLMRobertaForSequenceClassification"),mwr=o(" (XLM-RoBERTa model)"),gwr=l(),qve=a("p"),hwr=o("Examples:"),pwr=l(),f(TL.$$.fragment),gSe=l(),Ef=a("h2"),xC=a("a"),Ove=a("span"),f(FL.$$.fragment),_wr=l(),Gve=a("span"),uwr=o("FlaxAutoModelForSpeechSeq2Seq"),hSe=l(),Nr=a("div"),f(CL.$$.fragment),bwr=l(),yf=a("p"),vwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Xve=a("code"),Twr=o("from_pretrained()"),Fwr=o("class method or the "),Vve=a("code"),Cwr=o("from_config()"),Mwr=o(`class
method.`),Ewr=l(),ML=a("p"),ywr=o("This class cannot be instantiated directly using "),zve=a("code"),wwr=o("__init__()"),Awr=o(" (throws an error)."),Lwr=l(),Pt=a("div"),f(EL.$$.fragment),Bwr=l(),Wve=a("p"),xwr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),kwr=l(),wf=a("p"),Rwr=o(`Note:
Loading a model from its configuration file does `),Qve=a("strong"),Swr=o("not"),Pwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hve=a("code"),$wr=o("from_pretrained()"),Iwr=o("to load the model weights."),jwr=l(),Uve=a("p"),Dwr=o("Examples:"),Nwr=l(),f(yL.$$.fragment),qwr=l(),So=a("div"),f(wL.$$.fragment),Owr=l(),Jve=a("p"),Gwr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Xwr=l(),Nn=a("p"),Vwr=o("The model class to instantiate is selected based on the "),Yve=a("code"),zwr=o("model_type"),Wwr=o(` property of the config object (either
passed as an argument or loaded from `),Kve=a("code"),Qwr=o("pretrained_model_name_or_path"),Hwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zve=a("code"),Uwr=o("pretrained_model_name_or_path"),Jwr=o(":"),Ywr=l(),e6e=a("ul"),kC=a("li"),o6e=a("strong"),Kwr=o("speech-encoder-decoder"),Zwr=o(" \u2014 "),Lz=a("a"),eAr=o("FlaxSpeechEncoderDecoderModel"),oAr=o(" (Speech Encoder decoder model)"),rAr=l(),r6e=a("p"),tAr=o("Examples:"),aAr=l(),f(AL.$$.fragment),pSe=l(),Af=a("h2"),RC=a("a"),t6e=a("span"),f(LL.$$.fragment),nAr=l(),a6e=a("span"),sAr=o("FlaxAutoModelForQuestionAnswering"),_Se=l(),qr=a("div"),f(BL.$$.fragment),lAr=l(),Lf=a("p"),iAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),n6e=a("code"),dAr=o("from_pretrained()"),cAr=o("class method or the "),s6e=a("code"),fAr=o("from_config()"),mAr=o(`class
method.`),gAr=l(),xL=a("p"),hAr=o("This class cannot be instantiated directly using "),l6e=a("code"),pAr=o("__init__()"),_Ar=o(" (throws an error)."),uAr=l(),$t=a("div"),f(kL.$$.fragment),bAr=l(),i6e=a("p"),vAr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),TAr=l(),Bf=a("p"),FAr=o(`Note:
Loading a model from its configuration file does `),d6e=a("strong"),CAr=o("not"),MAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),c6e=a("code"),EAr=o("from_pretrained()"),yAr=o("to load the model weights."),wAr=l(),f6e=a("p"),AAr=o("Examples:"),LAr=l(),f(RL.$$.fragment),BAr=l(),Po=a("div"),f(SL.$$.fragment),xAr=l(),m6e=a("p"),kAr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),RAr=l(),qn=a("p"),SAr=o("The model class to instantiate is selected based on the "),g6e=a("code"),PAr=o("model_type"),$Ar=o(` property of the config object (either
passed as an argument or loaded from `),h6e=a("code"),IAr=o("pretrained_model_name_or_path"),jAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p6e=a("code"),DAr=o("pretrained_model_name_or_path"),NAr=o(":"),qAr=l(),Te=a("ul"),SC=a("li"),_6e=a("strong"),OAr=o("albert"),GAr=o(" \u2014 "),Bz=a("a"),XAr=o("FlaxAlbertForQuestionAnswering"),VAr=o(" (ALBERT model)"),zAr=l(),PC=a("li"),u6e=a("strong"),WAr=o("bart"),QAr=o(" \u2014 "),xz=a("a"),HAr=o("FlaxBartForQuestionAnswering"),UAr=o(" (BART model)"),JAr=l(),$C=a("li"),b6e=a("strong"),YAr=o("bert"),KAr=o(" \u2014 "),kz=a("a"),ZAr=o("FlaxBertForQuestionAnswering"),eLr=o(" (BERT model)"),oLr=l(),IC=a("li"),v6e=a("strong"),rLr=o("big_bird"),tLr=o(" \u2014 "),Rz=a("a"),aLr=o("FlaxBigBirdForQuestionAnswering"),nLr=o(" (BigBird model)"),sLr=l(),jC=a("li"),T6e=a("strong"),lLr=o("distilbert"),iLr=o(" \u2014 "),Sz=a("a"),dLr=o("FlaxDistilBertForQuestionAnswering"),cLr=o(" (DistilBERT model)"),fLr=l(),DC=a("li"),F6e=a("strong"),mLr=o("electra"),gLr=o(" \u2014 "),Pz=a("a"),hLr=o("FlaxElectraForQuestionAnswering"),pLr=o(" (ELECTRA model)"),_Lr=l(),NC=a("li"),C6e=a("strong"),uLr=o("mbart"),bLr=o(" \u2014 "),$z=a("a"),vLr=o("FlaxMBartForQuestionAnswering"),TLr=o(" (mBART model)"),FLr=l(),qC=a("li"),M6e=a("strong"),CLr=o("roberta"),MLr=o(" \u2014 "),Iz=a("a"),ELr=o("FlaxRobertaForQuestionAnswering"),yLr=o(" (RoBERTa model)"),wLr=l(),OC=a("li"),E6e=a("strong"),ALr=o("roformer"),LLr=o(" \u2014 "),jz=a("a"),BLr=o("FlaxRoFormerForQuestionAnswering"),xLr=o(" (RoFormer model)"),kLr=l(),GC=a("li"),y6e=a("strong"),RLr=o("xlm-roberta"),SLr=o(" \u2014 "),Dz=a("a"),PLr=o("FlaxXLMRobertaForQuestionAnswering"),$Lr=o(" (XLM-RoBERTa model)"),ILr=l(),w6e=a("p"),jLr=o("Examples:"),DLr=l(),f(PL.$$.fragment),uSe=l(),xf=a("h2"),XC=a("a"),A6e=a("span"),f($L.$$.fragment),NLr=l(),L6e=a("span"),qLr=o("FlaxAutoModelForTokenClassification"),bSe=l(),Or=a("div"),f(IL.$$.fragment),OLr=l(),kf=a("p"),GLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),B6e=a("code"),XLr=o("from_pretrained()"),VLr=o("class method or the "),x6e=a("code"),zLr=o("from_config()"),WLr=o(`class
method.`),QLr=l(),jL=a("p"),HLr=o("This class cannot be instantiated directly using "),k6e=a("code"),ULr=o("__init__()"),JLr=o(" (throws an error)."),YLr=l(),It=a("div"),f(DL.$$.fragment),KLr=l(),R6e=a("p"),ZLr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),e7r=l(),Rf=a("p"),o7r=o(`Note:
Loading a model from its configuration file does `),S6e=a("strong"),r7r=o("not"),t7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),P6e=a("code"),a7r=o("from_pretrained()"),n7r=o("to load the model weights."),s7r=l(),$6e=a("p"),l7r=o("Examples:"),i7r=l(),f(NL.$$.fragment),d7r=l(),$o=a("div"),f(qL.$$.fragment),c7r=l(),I6e=a("p"),f7r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),m7r=l(),On=a("p"),g7r=o("The model class to instantiate is selected based on the "),j6e=a("code"),h7r=o("model_type"),p7r=o(` property of the config object (either
passed as an argument or loaded from `),D6e=a("code"),_7r=o("pretrained_model_name_or_path"),u7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N6e=a("code"),b7r=o("pretrained_model_name_or_path"),v7r=o(":"),T7r=l(),Se=a("ul"),VC=a("li"),q6e=a("strong"),F7r=o("albert"),C7r=o(" \u2014 "),Nz=a("a"),M7r=o("FlaxAlbertForTokenClassification"),E7r=o(" (ALBERT model)"),y7r=l(),zC=a("li"),O6e=a("strong"),w7r=o("bert"),A7r=o(" \u2014 "),qz=a("a"),L7r=o("FlaxBertForTokenClassification"),B7r=o(" (BERT model)"),x7r=l(),WC=a("li"),G6e=a("strong"),k7r=o("big_bird"),R7r=o(" \u2014 "),Oz=a("a"),S7r=o("FlaxBigBirdForTokenClassification"),P7r=o(" (BigBird model)"),$7r=l(),QC=a("li"),X6e=a("strong"),I7r=o("distilbert"),j7r=o(" \u2014 "),Gz=a("a"),D7r=o("FlaxDistilBertForTokenClassification"),N7r=o(" (DistilBERT model)"),q7r=l(),HC=a("li"),V6e=a("strong"),O7r=o("electra"),G7r=o(" \u2014 "),Xz=a("a"),X7r=o("FlaxElectraForTokenClassification"),V7r=o(" (ELECTRA model)"),z7r=l(),UC=a("li"),z6e=a("strong"),W7r=o("roberta"),Q7r=o(" \u2014 "),Vz=a("a"),H7r=o("FlaxRobertaForTokenClassification"),U7r=o(" (RoBERTa model)"),J7r=l(),JC=a("li"),W6e=a("strong"),Y7r=o("roformer"),K7r=o(" \u2014 "),zz=a("a"),Z7r=o("FlaxRoFormerForTokenClassification"),e9r=o(" (RoFormer model)"),o9r=l(),YC=a("li"),Q6e=a("strong"),r9r=o("xlm-roberta"),t9r=o(" \u2014 "),Wz=a("a"),a9r=o("FlaxXLMRobertaForTokenClassification"),n9r=o(" (XLM-RoBERTa model)"),s9r=l(),H6e=a("p"),l9r=o("Examples:"),i9r=l(),f(OL.$$.fragment),vSe=l(),Sf=a("h2"),KC=a("a"),U6e=a("span"),f(GL.$$.fragment),d9r=l(),J6e=a("span"),c9r=o("FlaxAutoModelForMultipleChoice"),TSe=l(),Gr=a("div"),f(XL.$$.fragment),f9r=l(),Pf=a("p"),m9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Y6e=a("code"),g9r=o("from_pretrained()"),h9r=o("class method or the "),K6e=a("code"),p9r=o("from_config()"),_9r=o(`class
method.`),u9r=l(),VL=a("p"),b9r=o("This class cannot be instantiated directly using "),Z6e=a("code"),v9r=o("__init__()"),T9r=o(" (throws an error)."),F9r=l(),jt=a("div"),f(zL.$$.fragment),C9r=l(),e0e=a("p"),M9r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),E9r=l(),$f=a("p"),y9r=o(`Note:
Loading a model from its configuration file does `),o0e=a("strong"),w9r=o("not"),A9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),r0e=a("code"),L9r=o("from_pretrained()"),B9r=o("to load the model weights."),x9r=l(),t0e=a("p"),k9r=o("Examples:"),R9r=l(),f(WL.$$.fragment),S9r=l(),Io=a("div"),f(QL.$$.fragment),P9r=l(),a0e=a("p"),$9r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),I9r=l(),Gn=a("p"),j9r=o("The model class to instantiate is selected based on the "),n0e=a("code"),D9r=o("model_type"),N9r=o(` property of the config object (either
passed as an argument or loaded from `),s0e=a("code"),q9r=o("pretrained_model_name_or_path"),O9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l0e=a("code"),G9r=o("pretrained_model_name_or_path"),X9r=o(":"),V9r=l(),Pe=a("ul"),ZC=a("li"),i0e=a("strong"),z9r=o("albert"),W9r=o(" \u2014 "),Qz=a("a"),Q9r=o("FlaxAlbertForMultipleChoice"),H9r=o(" (ALBERT model)"),U9r=l(),eM=a("li"),d0e=a("strong"),J9r=o("bert"),Y9r=o(" \u2014 "),Hz=a("a"),K9r=o("FlaxBertForMultipleChoice"),Z9r=o(" (BERT model)"),eBr=l(),oM=a("li"),c0e=a("strong"),oBr=o("big_bird"),rBr=o(" \u2014 "),Uz=a("a"),tBr=o("FlaxBigBirdForMultipleChoice"),aBr=o(" (BigBird model)"),nBr=l(),rM=a("li"),f0e=a("strong"),sBr=o("distilbert"),lBr=o(" \u2014 "),Jz=a("a"),iBr=o("FlaxDistilBertForMultipleChoice"),dBr=o(" (DistilBERT model)"),cBr=l(),tM=a("li"),m0e=a("strong"),fBr=o("electra"),mBr=o(" \u2014 "),Yz=a("a"),gBr=o("FlaxElectraForMultipleChoice"),hBr=o(" (ELECTRA model)"),pBr=l(),aM=a("li"),g0e=a("strong"),_Br=o("roberta"),uBr=o(" \u2014 "),Kz=a("a"),bBr=o("FlaxRobertaForMultipleChoice"),vBr=o(" (RoBERTa model)"),TBr=l(),nM=a("li"),h0e=a("strong"),FBr=o("roformer"),CBr=o(" \u2014 "),Zz=a("a"),MBr=o("FlaxRoFormerForMultipleChoice"),EBr=o(" (RoFormer model)"),yBr=l(),sM=a("li"),p0e=a("strong"),wBr=o("xlm-roberta"),ABr=o(" \u2014 "),eW=a("a"),LBr=o("FlaxXLMRobertaForMultipleChoice"),BBr=o(" (XLM-RoBERTa model)"),xBr=l(),_0e=a("p"),kBr=o("Examples:"),RBr=l(),f(HL.$$.fragment),FSe=l(),If=a("h2"),lM=a("a"),u0e=a("span"),f(UL.$$.fragment),SBr=l(),b0e=a("span"),PBr=o("FlaxAutoModelForNextSentencePrediction"),CSe=l(),Xr=a("div"),f(JL.$$.fragment),$Br=l(),jf=a("p"),IBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),v0e=a("code"),jBr=o("from_pretrained()"),DBr=o("class method or the "),T0e=a("code"),NBr=o("from_config()"),qBr=o(`class
method.`),OBr=l(),YL=a("p"),GBr=o("This class cannot be instantiated directly using "),F0e=a("code"),XBr=o("__init__()"),VBr=o(" (throws an error)."),zBr=l(),Dt=a("div"),f(KL.$$.fragment),WBr=l(),C0e=a("p"),QBr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),HBr=l(),Df=a("p"),UBr=o(`Note:
Loading a model from its configuration file does `),M0e=a("strong"),JBr=o("not"),YBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),E0e=a("code"),KBr=o("from_pretrained()"),ZBr=o("to load the model weights."),exr=l(),y0e=a("p"),oxr=o("Examples:"),rxr=l(),f(ZL.$$.fragment),txr=l(),jo=a("div"),f(e7.$$.fragment),axr=l(),w0e=a("p"),nxr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),sxr=l(),Xn=a("p"),lxr=o("The model class to instantiate is selected based on the "),A0e=a("code"),ixr=o("model_type"),dxr=o(` property of the config object (either
passed as an argument or loaded from `),L0e=a("code"),cxr=o("pretrained_model_name_or_path"),fxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B0e=a("code"),mxr=o("pretrained_model_name_or_path"),gxr=o(":"),hxr=l(),x0e=a("ul"),iM=a("li"),k0e=a("strong"),pxr=o("bert"),_xr=o(" \u2014 "),oW=a("a"),uxr=o("FlaxBertForNextSentencePrediction"),bxr=o(" (BERT model)"),vxr=l(),R0e=a("p"),Txr=o("Examples:"),Fxr=l(),f(o7.$$.fragment),MSe=l(),Nf=a("h2"),dM=a("a"),S0e=a("span"),f(r7.$$.fragment),Cxr=l(),P0e=a("span"),Mxr=o("FlaxAutoModelForImageClassification"),ESe=l(),Vr=a("div"),f(t7.$$.fragment),Exr=l(),qf=a("p"),yxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),$0e=a("code"),wxr=o("from_pretrained()"),Axr=o("class method or the "),I0e=a("code"),Lxr=o("from_config()"),Bxr=o(`class
method.`),xxr=l(),a7=a("p"),kxr=o("This class cannot be instantiated directly using "),j0e=a("code"),Rxr=o("__init__()"),Sxr=o(" (throws an error)."),Pxr=l(),Nt=a("div"),f(n7.$$.fragment),$xr=l(),D0e=a("p"),Ixr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),jxr=l(),Of=a("p"),Dxr=o(`Note:
Loading a model from its configuration file does `),N0e=a("strong"),Nxr=o("not"),qxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),q0e=a("code"),Oxr=o("from_pretrained()"),Gxr=o("to load the model weights."),Xxr=l(),O0e=a("p"),Vxr=o("Examples:"),zxr=l(),f(s7.$$.fragment),Wxr=l(),Do=a("div"),f(l7.$$.fragment),Qxr=l(),G0e=a("p"),Hxr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Uxr=l(),Vn=a("p"),Jxr=o("The model class to instantiate is selected based on the "),X0e=a("code"),Yxr=o("model_type"),Kxr=o(` property of the config object (either
passed as an argument or loaded from `),V0e=a("code"),Zxr=o("pretrained_model_name_or_path"),ekr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z0e=a("code"),okr=o("pretrained_model_name_or_path"),rkr=o(":"),tkr=l(),i7=a("ul"),cM=a("li"),W0e=a("strong"),akr=o("beit"),nkr=o(" \u2014 "),rW=a("a"),skr=o("FlaxBeitForImageClassification"),lkr=o(" (BEiT model)"),ikr=l(),fM=a("li"),Q0e=a("strong"),dkr=o("vit"),ckr=o(" \u2014 "),tW=a("a"),fkr=o("FlaxViTForImageClassification"),mkr=o(" (ViT model)"),gkr=l(),H0e=a("p"),hkr=o("Examples:"),pkr=l(),f(d7.$$.fragment),ySe=l(),Gf=a("h2"),mM=a("a"),U0e=a("span"),f(c7.$$.fragment),_kr=l(),J0e=a("span"),ukr=o("FlaxAutoModelForVision2Seq"),wSe=l(),zr=a("div"),f(f7.$$.fragment),bkr=l(),Xf=a("p"),vkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Y0e=a("code"),Tkr=o("from_pretrained()"),Fkr=o("class method or the "),K0e=a("code"),Ckr=o("from_config()"),Mkr=o(`class
method.`),Ekr=l(),m7=a("p"),ykr=o("This class cannot be instantiated directly using "),Z0e=a("code"),wkr=o("__init__()"),Akr=o(" (throws an error)."),Lkr=l(),qt=a("div"),f(g7.$$.fragment),Bkr=l(),eTe=a("p"),xkr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),kkr=l(),Vf=a("p"),Rkr=o(`Note:
Loading a model from its configuration file does `),oTe=a("strong"),Skr=o("not"),Pkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rTe=a("code"),$kr=o("from_pretrained()"),Ikr=o("to load the model weights."),jkr=l(),tTe=a("p"),Dkr=o("Examples:"),Nkr=l(),f(h7.$$.fragment),qkr=l(),No=a("div"),f(p7.$$.fragment),Okr=l(),aTe=a("p"),Gkr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Xkr=l(),zn=a("p"),Vkr=o("The model class to instantiate is selected based on the "),nTe=a("code"),zkr=o("model_type"),Wkr=o(` property of the config object (either
passed as an argument or loaded from `),sTe=a("code"),Qkr=o("pretrained_model_name_or_path"),Hkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lTe=a("code"),Ukr=o("pretrained_model_name_or_path"),Jkr=o(":"),Ykr=l(),iTe=a("ul"),gM=a("li"),dTe=a("strong"),Kkr=o("vision-encoder-decoder"),Zkr=o(" \u2014 "),aW=a("a"),eRr=o("FlaxVisionEncoderDecoderModel"),oRr=o(" (Vision Encoder decoder model)"),rRr=l(),cTe=a("p"),tRr=o("Examples:"),aRr=l(),f(_7.$$.fragment),this.h()},l(d){const u=pCt('[data-svelte="svelte-1phssyn"]',document.head);J=n(u,"META",{name:!0,content:!0}),u.forEach(t),$e=i(d),de=n(d,"H1",{class:!0});var u7=s(de);pe=n(u7,"A",{id:!0,class:!0,href:!0});var fTe=s(pe);io=n(fTe,"SPAN",{});var mTe=s(io);m(fe.$$.fragment,mTe),mTe.forEach(t),fTe.forEach(t),Me=i(u7),zo=n(u7,"SPAN",{});var sRr=s(zo);Vi=r(sRr,"Auto Classes"),sRr.forEach(t),u7.forEach(t),Wf=i(d),ha=n(d,"P",{});var LSe=s(ha);zi=r(LSe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Wi=n(LSe,"CODE",{});var lRr=s(Wi);h4=r(lRr,"from_pretrained()"),lRr.forEach(t),Qf=r(LSe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),LSe.forEach(t),Be=i(d),co=n(d,"P",{});var hM=s(co);Qi=r(hM,"Instantiating one of "),Wn=n(hM,"A",{href:!0});var iRr=s(Wn);p4=r(iRr,"AutoConfig"),iRr.forEach(t),Qn=r(hM,", "),Hn=n(hM,"A",{href:!0});var dRr=s(Hn);_4=r(dRr,"AutoModel"),dRr.forEach(t),Hi=r(hM,`, and
`),Un=n(hM,"A",{href:!0});var cRr=s(Un);u4=r(cRr,"AutoTokenizer"),cRr.forEach(t),Ui=r(hM," will directly create a class of the relevant architecture. For instance"),hM.forEach(t),Hf=i(d),m(Va.$$.fragment,d),fo=i(d),_e=n(d,"P",{});var BSe=s(_e);h9=r(BSe,"will create a model that is an instance of "),Ji=n(BSe,"A",{href:!0});var fRr=s(Ji);p9=r(fRr,"BertModel"),fRr.forEach(t),_9=r(BSe,"."),BSe.forEach(t),Wo=i(d),za=n(d,"P",{});var xSe=s(za);u9=r(xSe,"There is one class of "),Uf=n(xSe,"CODE",{});var mRr=s(Uf);b9=r(mRr,"AutoModel"),mRr.forEach(t),G$e=r(xSe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),xSe.forEach(t),Eke=i(d),Yi=n(d,"H2",{class:!0});var kSe=s(Yi);Jf=n(kSe,"A",{id:!0,class:!0,href:!0});var gRr=s(Jf);ZQ=n(gRr,"SPAN",{});var hRr=s(ZQ);m(b4.$$.fragment,hRr),hRr.forEach(t),gRr.forEach(t),X$e=i(kSe),eH=n(kSe,"SPAN",{});var pRr=s(eH);V$e=r(pRr,"Extending the Auto Classes"),pRr.forEach(t),kSe.forEach(t),yke=i(d),Jn=n(d,"P",{});var nW=s(Jn);z$e=r(nW,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),oH=n(nW,"CODE",{});var _Rr=s(oH);W$e=r(_Rr,"NewModel"),_Rr.forEach(t),Q$e=r(nW,", make sure you have a "),rH=n(nW,"CODE",{});var uRr=s(rH);H$e=r(uRr,"NewModelConfig"),uRr.forEach(t),U$e=r(nW,` then you can add those to the auto
classes like this:`),nW.forEach(t),wke=i(d),m(v4.$$.fragment,d),Ake=i(d),v9=n(d,"P",{});var bRr=s(v9);J$e=r(bRr,"You will then be able to use the auto classes like you would usually do!"),bRr.forEach(t),Lke=i(d),m(Yf.$$.fragment,d),Bke=i(d),Ki=n(d,"H2",{class:!0});var RSe=s(Ki);Kf=n(RSe,"A",{id:!0,class:!0,href:!0});var vRr=s(Kf);tH=n(vRr,"SPAN",{});var TRr=s(tH);m(T4.$$.fragment,TRr),TRr.forEach(t),vRr.forEach(t),Y$e=i(RSe),aH=n(RSe,"SPAN",{});var FRr=s(aH);K$e=r(FRr,"AutoConfig"),FRr.forEach(t),RSe.forEach(t),xke=i(d),Qo=n(d,"DIV",{class:!0});var Qs=s(Qo);m(F4.$$.fragment,Qs),Z$e=i(Qs),C4=n(Qs,"P",{});var SSe=s(C4);eIe=r(SSe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),T9=n(SSe,"A",{href:!0});var CRr=s(T9);oIe=r(CRr,"from_pretrained()"),CRr.forEach(t),rIe=r(SSe," class method."),SSe.forEach(t),tIe=i(Qs),M4=n(Qs,"P",{});var PSe=s(M4);aIe=r(PSe,"This class cannot be instantiated directly using "),nH=n(PSe,"CODE",{});var MRr=s(nH);nIe=r(MRr,"__init__()"),MRr.forEach(t),sIe=r(PSe," (throws an error)."),PSe.forEach(t),lIe=i(Qs),mo=n(Qs,"DIV",{class:!0});var _a=s(mo);m(E4.$$.fragment,_a),iIe=i(_a),sH=n(_a,"P",{});var ERr=s(sH);dIe=r(ERr,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),ERr.forEach(t),cIe=i(_a),Zi=n(_a,"P",{});var sW=s(Zi);fIe=r(sW,"The configuration class to instantiate is selected based on the "),lH=n(sW,"CODE",{});var yRr=s(lH);mIe=r(yRr,"model_type"),yRr.forEach(t),gIe=r(sW,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),iH=n(sW,"CODE",{});var wRr=s(iH);hIe=r(wRr,"pretrained_model_name_or_path"),wRr.forEach(t),pIe=r(sW,":"),sW.forEach(t),_Ie=i(_a),v=n(_a,"UL",{});var T=s(v);Zf=n(T,"LI",{});var gTe=s(Zf);dH=n(gTe,"STRONG",{});var ARr=s(dH);uIe=r(ARr,"albert"),ARr.forEach(t),bIe=r(gTe," \u2014 "),F9=n(gTe,"A",{href:!0});var LRr=s(F9);vIe=r(LRr,"AlbertConfig"),LRr.forEach(t),TIe=r(gTe," (ALBERT model)"),gTe.forEach(t),FIe=i(T),em=n(T,"LI",{});var hTe=s(em);cH=n(hTe,"STRONG",{});var BRr=s(cH);CIe=r(BRr,"bart"),BRr.forEach(t),MIe=r(hTe," \u2014 "),C9=n(hTe,"A",{href:!0});var xRr=s(C9);EIe=r(xRr,"BartConfig"),xRr.forEach(t),yIe=r(hTe," (BART model)"),hTe.forEach(t),wIe=i(T),om=n(T,"LI",{});var pTe=s(om);fH=n(pTe,"STRONG",{});var kRr=s(fH);AIe=r(kRr,"beit"),kRr.forEach(t),LIe=r(pTe," \u2014 "),M9=n(pTe,"A",{href:!0});var RRr=s(M9);BIe=r(RRr,"BeitConfig"),RRr.forEach(t),xIe=r(pTe," (BEiT model)"),pTe.forEach(t),kIe=i(T),rm=n(T,"LI",{});var _Te=s(rm);mH=n(_Te,"STRONG",{});var SRr=s(mH);RIe=r(SRr,"bert"),SRr.forEach(t),SIe=r(_Te," \u2014 "),E9=n(_Te,"A",{href:!0});var PRr=s(E9);PIe=r(PRr,"BertConfig"),PRr.forEach(t),$Ie=r(_Te," (BERT model)"),_Te.forEach(t),IIe=i(T),tm=n(T,"LI",{});var uTe=s(tm);gH=n(uTe,"STRONG",{});var $Rr=s(gH);jIe=r($Rr,"bert-generation"),$Rr.forEach(t),DIe=r(uTe," \u2014 "),y9=n(uTe,"A",{href:!0});var IRr=s(y9);NIe=r(IRr,"BertGenerationConfig"),IRr.forEach(t),qIe=r(uTe," (Bert Generation model)"),uTe.forEach(t),OIe=i(T),am=n(T,"LI",{});var bTe=s(am);hH=n(bTe,"STRONG",{});var jRr=s(hH);GIe=r(jRr,"big_bird"),jRr.forEach(t),XIe=r(bTe," \u2014 "),w9=n(bTe,"A",{href:!0});var DRr=s(w9);VIe=r(DRr,"BigBirdConfig"),DRr.forEach(t),zIe=r(bTe," (BigBird model)"),bTe.forEach(t),WIe=i(T),nm=n(T,"LI",{});var vTe=s(nm);pH=n(vTe,"STRONG",{});var NRr=s(pH);QIe=r(NRr,"bigbird_pegasus"),NRr.forEach(t),HIe=r(vTe," \u2014 "),A9=n(vTe,"A",{href:!0});var qRr=s(A9);UIe=r(qRr,"BigBirdPegasusConfig"),qRr.forEach(t),JIe=r(vTe," (BigBirdPegasus model)"),vTe.forEach(t),YIe=i(T),sm=n(T,"LI",{});var TTe=s(sm);_H=n(TTe,"STRONG",{});var ORr=s(_H);KIe=r(ORr,"blenderbot"),ORr.forEach(t),ZIe=r(TTe," \u2014 "),L9=n(TTe,"A",{href:!0});var GRr=s(L9);eje=r(GRr,"BlenderbotConfig"),GRr.forEach(t),oje=r(TTe," (Blenderbot model)"),TTe.forEach(t),rje=i(T),lm=n(T,"LI",{});var FTe=s(lm);uH=n(FTe,"STRONG",{});var XRr=s(uH);tje=r(XRr,"blenderbot-small"),XRr.forEach(t),aje=r(FTe," \u2014 "),B9=n(FTe,"A",{href:!0});var VRr=s(B9);nje=r(VRr,"BlenderbotSmallConfig"),VRr.forEach(t),sje=r(FTe," (BlenderbotSmall model)"),FTe.forEach(t),lje=i(T),im=n(T,"LI",{});var CTe=s(im);bH=n(CTe,"STRONG",{});var zRr=s(bH);ije=r(zRr,"camembert"),zRr.forEach(t),dje=r(CTe," \u2014 "),x9=n(CTe,"A",{href:!0});var WRr=s(x9);cje=r(WRr,"CamembertConfig"),WRr.forEach(t),fje=r(CTe," (CamemBERT model)"),CTe.forEach(t),mje=i(T),dm=n(T,"LI",{});var MTe=s(dm);vH=n(MTe,"STRONG",{});var QRr=s(vH);gje=r(QRr,"canine"),QRr.forEach(t),hje=r(MTe," \u2014 "),k9=n(MTe,"A",{href:!0});var HRr=s(k9);pje=r(HRr,"CanineConfig"),HRr.forEach(t),_je=r(MTe," (Canine model)"),MTe.forEach(t),uje=i(T),cm=n(T,"LI",{});var ETe=s(cm);TH=n(ETe,"STRONG",{});var URr=s(TH);bje=r(URr,"clip"),URr.forEach(t),vje=r(ETe," \u2014 "),R9=n(ETe,"A",{href:!0});var JRr=s(R9);Tje=r(JRr,"CLIPConfig"),JRr.forEach(t),Fje=r(ETe," (CLIP model)"),ETe.forEach(t),Cje=i(T),fm=n(T,"LI",{});var yTe=s(fm);FH=n(yTe,"STRONG",{});var YRr=s(FH);Mje=r(YRr,"convbert"),YRr.forEach(t),Eje=r(yTe," \u2014 "),S9=n(yTe,"A",{href:!0});var KRr=s(S9);yje=r(KRr,"ConvBertConfig"),KRr.forEach(t),wje=r(yTe," (ConvBERT model)"),yTe.forEach(t),Aje=i(T),mm=n(T,"LI",{});var wTe=s(mm);CH=n(wTe,"STRONG",{});var ZRr=s(CH);Lje=r(ZRr,"convnext"),ZRr.forEach(t),Bje=r(wTe," \u2014 "),P9=n(wTe,"A",{href:!0});var eSr=s(P9);xje=r(eSr,"ConvNextConfig"),eSr.forEach(t),kje=r(wTe," (ConvNext model)"),wTe.forEach(t),Rje=i(T),gm=n(T,"LI",{});var ATe=s(gm);MH=n(ATe,"STRONG",{});var oSr=s(MH);Sje=r(oSr,"ctrl"),oSr.forEach(t),Pje=r(ATe," \u2014 "),$9=n(ATe,"A",{href:!0});var rSr=s($9);$je=r(rSr,"CTRLConfig"),rSr.forEach(t),Ije=r(ATe," (CTRL model)"),ATe.forEach(t),jje=i(T),hm=n(T,"LI",{});var LTe=s(hm);EH=n(LTe,"STRONG",{});var tSr=s(EH);Dje=r(tSr,"data2vec-audio"),tSr.forEach(t),Nje=r(LTe," \u2014 "),I9=n(LTe,"A",{href:!0});var aSr=s(I9);qje=r(aSr,"Data2VecAudioConfig"),aSr.forEach(t),Oje=r(LTe," (Data2VecAudio model)"),LTe.forEach(t),Gje=i(T),pm=n(T,"LI",{});var BTe=s(pm);yH=n(BTe,"STRONG",{});var nSr=s(yH);Xje=r(nSr,"data2vec-text"),nSr.forEach(t),Vje=r(BTe," \u2014 "),j9=n(BTe,"A",{href:!0});var sSr=s(j9);zje=r(sSr,"Data2VecTextConfig"),sSr.forEach(t),Wje=r(BTe," (Data2VecText model)"),BTe.forEach(t),Qje=i(T),_m=n(T,"LI",{});var xTe=s(_m);wH=n(xTe,"STRONG",{});var lSr=s(wH);Hje=r(lSr,"deberta"),lSr.forEach(t),Uje=r(xTe," \u2014 "),D9=n(xTe,"A",{href:!0});var iSr=s(D9);Jje=r(iSr,"DebertaConfig"),iSr.forEach(t),Yje=r(xTe," (DeBERTa model)"),xTe.forEach(t),Kje=i(T),um=n(T,"LI",{});var kTe=s(um);AH=n(kTe,"STRONG",{});var dSr=s(AH);Zje=r(dSr,"deberta-v2"),dSr.forEach(t),eDe=r(kTe," \u2014 "),N9=n(kTe,"A",{href:!0});var cSr=s(N9);oDe=r(cSr,"DebertaV2Config"),cSr.forEach(t),rDe=r(kTe," (DeBERTa-v2 model)"),kTe.forEach(t),tDe=i(T),bm=n(T,"LI",{});var RTe=s(bm);LH=n(RTe,"STRONG",{});var fSr=s(LH);aDe=r(fSr,"deit"),fSr.forEach(t),nDe=r(RTe," \u2014 "),q9=n(RTe,"A",{href:!0});var mSr=s(q9);sDe=r(mSr,"DeiTConfig"),mSr.forEach(t),lDe=r(RTe," (DeiT model)"),RTe.forEach(t),iDe=i(T),vm=n(T,"LI",{});var STe=s(vm);BH=n(STe,"STRONG",{});var gSr=s(BH);dDe=r(gSr,"detr"),gSr.forEach(t),cDe=r(STe," \u2014 "),O9=n(STe,"A",{href:!0});var hSr=s(O9);fDe=r(hSr,"DetrConfig"),hSr.forEach(t),mDe=r(STe," (DETR model)"),STe.forEach(t),gDe=i(T),Tm=n(T,"LI",{});var PTe=s(Tm);xH=n(PTe,"STRONG",{});var pSr=s(xH);hDe=r(pSr,"distilbert"),pSr.forEach(t),pDe=r(PTe," \u2014 "),G9=n(PTe,"A",{href:!0});var _Sr=s(G9);_De=r(_Sr,"DistilBertConfig"),_Sr.forEach(t),uDe=r(PTe," (DistilBERT model)"),PTe.forEach(t),bDe=i(T),Fm=n(T,"LI",{});var $Te=s(Fm);kH=n($Te,"STRONG",{});var uSr=s(kH);vDe=r(uSr,"dpr"),uSr.forEach(t),TDe=r($Te," \u2014 "),X9=n($Te,"A",{href:!0});var bSr=s(X9);FDe=r(bSr,"DPRConfig"),bSr.forEach(t),CDe=r($Te," (DPR model)"),$Te.forEach(t),MDe=i(T),Cm=n(T,"LI",{});var ITe=s(Cm);RH=n(ITe,"STRONG",{});var vSr=s(RH);EDe=r(vSr,"electra"),vSr.forEach(t),yDe=r(ITe," \u2014 "),V9=n(ITe,"A",{href:!0});var TSr=s(V9);wDe=r(TSr,"ElectraConfig"),TSr.forEach(t),ADe=r(ITe," (ELECTRA model)"),ITe.forEach(t),LDe=i(T),Mm=n(T,"LI",{});var jTe=s(Mm);SH=n(jTe,"STRONG",{});var FSr=s(SH);BDe=r(FSr,"encoder-decoder"),FSr.forEach(t),xDe=r(jTe," \u2014 "),z9=n(jTe,"A",{href:!0});var CSr=s(z9);kDe=r(CSr,"EncoderDecoderConfig"),CSr.forEach(t),RDe=r(jTe," (Encoder decoder model)"),jTe.forEach(t),SDe=i(T),Em=n(T,"LI",{});var DTe=s(Em);PH=n(DTe,"STRONG",{});var MSr=s(PH);PDe=r(MSr,"flaubert"),MSr.forEach(t),$De=r(DTe," \u2014 "),W9=n(DTe,"A",{href:!0});var ESr=s(W9);IDe=r(ESr,"FlaubertConfig"),ESr.forEach(t),jDe=r(DTe," (FlauBERT model)"),DTe.forEach(t),DDe=i(T),ym=n(T,"LI",{});var NTe=s(ym);$H=n(NTe,"STRONG",{});var ySr=s($H);NDe=r(ySr,"fnet"),ySr.forEach(t),qDe=r(NTe," \u2014 "),Q9=n(NTe,"A",{href:!0});var wSr=s(Q9);ODe=r(wSr,"FNetConfig"),wSr.forEach(t),GDe=r(NTe," (FNet model)"),NTe.forEach(t),XDe=i(T),wm=n(T,"LI",{});var qTe=s(wm);IH=n(qTe,"STRONG",{});var ASr=s(IH);VDe=r(ASr,"fsmt"),ASr.forEach(t),zDe=r(qTe," \u2014 "),H9=n(qTe,"A",{href:!0});var LSr=s(H9);WDe=r(LSr,"FSMTConfig"),LSr.forEach(t),QDe=r(qTe," (FairSeq Machine-Translation model)"),qTe.forEach(t),HDe=i(T),Am=n(T,"LI",{});var OTe=s(Am);jH=n(OTe,"STRONG",{});var BSr=s(jH);UDe=r(BSr,"funnel"),BSr.forEach(t),JDe=r(OTe," \u2014 "),U9=n(OTe,"A",{href:!0});var xSr=s(U9);YDe=r(xSr,"FunnelConfig"),xSr.forEach(t),KDe=r(OTe," (Funnel Transformer model)"),OTe.forEach(t),ZDe=i(T),Lm=n(T,"LI",{});var GTe=s(Lm);DH=n(GTe,"STRONG",{});var kSr=s(DH);eNe=r(kSr,"gpt2"),kSr.forEach(t),oNe=r(GTe," \u2014 "),J9=n(GTe,"A",{href:!0});var RSr=s(J9);rNe=r(RSr,"GPT2Config"),RSr.forEach(t),tNe=r(GTe," (OpenAI GPT-2 model)"),GTe.forEach(t),aNe=i(T),Bm=n(T,"LI",{});var XTe=s(Bm);NH=n(XTe,"STRONG",{});var SSr=s(NH);nNe=r(SSr,"gpt_neo"),SSr.forEach(t),sNe=r(XTe," \u2014 "),Y9=n(XTe,"A",{href:!0});var PSr=s(Y9);lNe=r(PSr,"GPTNeoConfig"),PSr.forEach(t),iNe=r(XTe," (GPT Neo model)"),XTe.forEach(t),dNe=i(T),xm=n(T,"LI",{});var VTe=s(xm);qH=n(VTe,"STRONG",{});var $Sr=s(qH);cNe=r($Sr,"gptj"),$Sr.forEach(t),fNe=r(VTe," \u2014 "),K9=n(VTe,"A",{href:!0});var ISr=s(K9);mNe=r(ISr,"GPTJConfig"),ISr.forEach(t),gNe=r(VTe," (GPT-J model)"),VTe.forEach(t),hNe=i(T),km=n(T,"LI",{});var zTe=s(km);OH=n(zTe,"STRONG",{});var jSr=s(OH);pNe=r(jSr,"hubert"),jSr.forEach(t),_Ne=r(zTe," \u2014 "),Z9=n(zTe,"A",{href:!0});var DSr=s(Z9);uNe=r(DSr,"HubertConfig"),DSr.forEach(t),bNe=r(zTe," (Hubert model)"),zTe.forEach(t),vNe=i(T),Rm=n(T,"LI",{});var WTe=s(Rm);GH=n(WTe,"STRONG",{});var NSr=s(GH);TNe=r(NSr,"ibert"),NSr.forEach(t),FNe=r(WTe," \u2014 "),eB=n(WTe,"A",{href:!0});var qSr=s(eB);CNe=r(qSr,"IBertConfig"),qSr.forEach(t),MNe=r(WTe," (I-BERT model)"),WTe.forEach(t),ENe=i(T),Sm=n(T,"LI",{});var QTe=s(Sm);XH=n(QTe,"STRONG",{});var OSr=s(XH);yNe=r(OSr,"imagegpt"),OSr.forEach(t),wNe=r(QTe," \u2014 "),oB=n(QTe,"A",{href:!0});var GSr=s(oB);ANe=r(GSr,"ImageGPTConfig"),GSr.forEach(t),LNe=r(QTe," (ImageGPT model)"),QTe.forEach(t),BNe=i(T),Pm=n(T,"LI",{});var HTe=s(Pm);VH=n(HTe,"STRONG",{});var XSr=s(VH);xNe=r(XSr,"layoutlm"),XSr.forEach(t),kNe=r(HTe," \u2014 "),rB=n(HTe,"A",{href:!0});var VSr=s(rB);RNe=r(VSr,"LayoutLMConfig"),VSr.forEach(t),SNe=r(HTe," (LayoutLM model)"),HTe.forEach(t),PNe=i(T),$m=n(T,"LI",{});var UTe=s($m);zH=n(UTe,"STRONG",{});var zSr=s(zH);$Ne=r(zSr,"layoutlmv2"),zSr.forEach(t),INe=r(UTe," \u2014 "),tB=n(UTe,"A",{href:!0});var WSr=s(tB);jNe=r(WSr,"LayoutLMv2Config"),WSr.forEach(t),DNe=r(UTe," (LayoutLMv2 model)"),UTe.forEach(t),NNe=i(T),Im=n(T,"LI",{});var JTe=s(Im);WH=n(JTe,"STRONG",{});var QSr=s(WH);qNe=r(QSr,"led"),QSr.forEach(t),ONe=r(JTe," \u2014 "),aB=n(JTe,"A",{href:!0});var HSr=s(aB);GNe=r(HSr,"LEDConfig"),HSr.forEach(t),XNe=r(JTe," (LED model)"),JTe.forEach(t),VNe=i(T),jm=n(T,"LI",{});var YTe=s(jm);QH=n(YTe,"STRONG",{});var USr=s(QH);zNe=r(USr,"longformer"),USr.forEach(t),WNe=r(YTe," \u2014 "),nB=n(YTe,"A",{href:!0});var JSr=s(nB);QNe=r(JSr,"LongformerConfig"),JSr.forEach(t),HNe=r(YTe," (Longformer model)"),YTe.forEach(t),UNe=i(T),Dm=n(T,"LI",{});var KTe=s(Dm);HH=n(KTe,"STRONG",{});var YSr=s(HH);JNe=r(YSr,"luke"),YSr.forEach(t),YNe=r(KTe," \u2014 "),sB=n(KTe,"A",{href:!0});var KSr=s(sB);KNe=r(KSr,"LukeConfig"),KSr.forEach(t),ZNe=r(KTe," (LUKE model)"),KTe.forEach(t),eqe=i(T),Nm=n(T,"LI",{});var ZTe=s(Nm);UH=n(ZTe,"STRONG",{});var ZSr=s(UH);oqe=r(ZSr,"lxmert"),ZSr.forEach(t),rqe=r(ZTe," \u2014 "),lB=n(ZTe,"A",{href:!0});var ePr=s(lB);tqe=r(ePr,"LxmertConfig"),ePr.forEach(t),aqe=r(ZTe," (LXMERT model)"),ZTe.forEach(t),nqe=i(T),qm=n(T,"LI",{});var e8e=s(qm);JH=n(e8e,"STRONG",{});var oPr=s(JH);sqe=r(oPr,"m2m_100"),oPr.forEach(t),lqe=r(e8e," \u2014 "),iB=n(e8e,"A",{href:!0});var rPr=s(iB);iqe=r(rPr,"M2M100Config"),rPr.forEach(t),dqe=r(e8e," (M2M100 model)"),e8e.forEach(t),cqe=i(T),Om=n(T,"LI",{});var o8e=s(Om);YH=n(o8e,"STRONG",{});var tPr=s(YH);fqe=r(tPr,"marian"),tPr.forEach(t),mqe=r(o8e," \u2014 "),dB=n(o8e,"A",{href:!0});var aPr=s(dB);gqe=r(aPr,"MarianConfig"),aPr.forEach(t),hqe=r(o8e," (Marian model)"),o8e.forEach(t),pqe=i(T),Gm=n(T,"LI",{});var r8e=s(Gm);KH=n(r8e,"STRONG",{});var nPr=s(KH);_qe=r(nPr,"maskformer"),nPr.forEach(t),uqe=r(r8e," \u2014 "),cB=n(r8e,"A",{href:!0});var sPr=s(cB);bqe=r(sPr,"MaskFormerConfig"),sPr.forEach(t),vqe=r(r8e," (MaskFormer model)"),r8e.forEach(t),Tqe=i(T),Xm=n(T,"LI",{});var t8e=s(Xm);ZH=n(t8e,"STRONG",{});var lPr=s(ZH);Fqe=r(lPr,"mbart"),lPr.forEach(t),Cqe=r(t8e," \u2014 "),fB=n(t8e,"A",{href:!0});var iPr=s(fB);Mqe=r(iPr,"MBartConfig"),iPr.forEach(t),Eqe=r(t8e," (mBART model)"),t8e.forEach(t),yqe=i(T),Vm=n(T,"LI",{});var a8e=s(Vm);eU=n(a8e,"STRONG",{});var dPr=s(eU);wqe=r(dPr,"megatron-bert"),dPr.forEach(t),Aqe=r(a8e," \u2014 "),mB=n(a8e,"A",{href:!0});var cPr=s(mB);Lqe=r(cPr,"MegatronBertConfig"),cPr.forEach(t),Bqe=r(a8e," (MegatronBert model)"),a8e.forEach(t),xqe=i(T),zm=n(T,"LI",{});var n8e=s(zm);oU=n(n8e,"STRONG",{});var fPr=s(oU);kqe=r(fPr,"mobilebert"),fPr.forEach(t),Rqe=r(n8e," \u2014 "),gB=n(n8e,"A",{href:!0});var mPr=s(gB);Sqe=r(mPr,"MobileBertConfig"),mPr.forEach(t),Pqe=r(n8e," (MobileBERT model)"),n8e.forEach(t),$qe=i(T),Wm=n(T,"LI",{});var s8e=s(Wm);rU=n(s8e,"STRONG",{});var gPr=s(rU);Iqe=r(gPr,"mpnet"),gPr.forEach(t),jqe=r(s8e," \u2014 "),hB=n(s8e,"A",{href:!0});var hPr=s(hB);Dqe=r(hPr,"MPNetConfig"),hPr.forEach(t),Nqe=r(s8e," (MPNet model)"),s8e.forEach(t),qqe=i(T),Qm=n(T,"LI",{});var l8e=s(Qm);tU=n(l8e,"STRONG",{});var pPr=s(tU);Oqe=r(pPr,"mt5"),pPr.forEach(t),Gqe=r(l8e," \u2014 "),pB=n(l8e,"A",{href:!0});var _Pr=s(pB);Xqe=r(_Pr,"MT5Config"),_Pr.forEach(t),Vqe=r(l8e," (mT5 model)"),l8e.forEach(t),zqe=i(T),Hm=n(T,"LI",{});var i8e=s(Hm);aU=n(i8e,"STRONG",{});var uPr=s(aU);Wqe=r(uPr,"nystromformer"),uPr.forEach(t),Qqe=r(i8e," \u2014 "),_B=n(i8e,"A",{href:!0});var bPr=s(_B);Hqe=r(bPr,"NystromformerConfig"),bPr.forEach(t),Uqe=r(i8e," (Nystromformer model)"),i8e.forEach(t),Jqe=i(T),Um=n(T,"LI",{});var d8e=s(Um);nU=n(d8e,"STRONG",{});var vPr=s(nU);Yqe=r(vPr,"openai-gpt"),vPr.forEach(t),Kqe=r(d8e," \u2014 "),uB=n(d8e,"A",{href:!0});var TPr=s(uB);Zqe=r(TPr,"OpenAIGPTConfig"),TPr.forEach(t),eOe=r(d8e," (OpenAI GPT model)"),d8e.forEach(t),oOe=i(T),Jm=n(T,"LI",{});var c8e=s(Jm);sU=n(c8e,"STRONG",{});var FPr=s(sU);rOe=r(FPr,"pegasus"),FPr.forEach(t),tOe=r(c8e," \u2014 "),bB=n(c8e,"A",{href:!0});var CPr=s(bB);aOe=r(CPr,"PegasusConfig"),CPr.forEach(t),nOe=r(c8e," (Pegasus model)"),c8e.forEach(t),sOe=i(T),Ym=n(T,"LI",{});var f8e=s(Ym);lU=n(f8e,"STRONG",{});var MPr=s(lU);lOe=r(MPr,"perceiver"),MPr.forEach(t),iOe=r(f8e," \u2014 "),vB=n(f8e,"A",{href:!0});var EPr=s(vB);dOe=r(EPr,"PerceiverConfig"),EPr.forEach(t),cOe=r(f8e," (Perceiver model)"),f8e.forEach(t),fOe=i(T),Km=n(T,"LI",{});var m8e=s(Km);iU=n(m8e,"STRONG",{});var yPr=s(iU);mOe=r(yPr,"plbart"),yPr.forEach(t),gOe=r(m8e," \u2014 "),TB=n(m8e,"A",{href:!0});var wPr=s(TB);hOe=r(wPr,"PLBartConfig"),wPr.forEach(t),pOe=r(m8e," (PLBart model)"),m8e.forEach(t),_Oe=i(T),Zm=n(T,"LI",{});var g8e=s(Zm);dU=n(g8e,"STRONG",{});var APr=s(dU);uOe=r(APr,"poolformer"),APr.forEach(t),bOe=r(g8e," \u2014 "),FB=n(g8e,"A",{href:!0});var LPr=s(FB);vOe=r(LPr,"PoolFormerConfig"),LPr.forEach(t),TOe=r(g8e," (PoolFormer model)"),g8e.forEach(t),FOe=i(T),eg=n(T,"LI",{});var h8e=s(eg);cU=n(h8e,"STRONG",{});var BPr=s(cU);COe=r(BPr,"prophetnet"),BPr.forEach(t),MOe=r(h8e," \u2014 "),CB=n(h8e,"A",{href:!0});var xPr=s(CB);EOe=r(xPr,"ProphetNetConfig"),xPr.forEach(t),yOe=r(h8e," (ProphetNet model)"),h8e.forEach(t),wOe=i(T),og=n(T,"LI",{});var p8e=s(og);fU=n(p8e,"STRONG",{});var kPr=s(fU);AOe=r(kPr,"qdqbert"),kPr.forEach(t),LOe=r(p8e," \u2014 "),MB=n(p8e,"A",{href:!0});var RPr=s(MB);BOe=r(RPr,"QDQBertConfig"),RPr.forEach(t),xOe=r(p8e," (QDQBert model)"),p8e.forEach(t),kOe=i(T),rg=n(T,"LI",{});var _8e=s(rg);mU=n(_8e,"STRONG",{});var SPr=s(mU);ROe=r(SPr,"rag"),SPr.forEach(t),SOe=r(_8e," \u2014 "),EB=n(_8e,"A",{href:!0});var PPr=s(EB);POe=r(PPr,"RagConfig"),PPr.forEach(t),$Oe=r(_8e," (RAG model)"),_8e.forEach(t),IOe=i(T),tg=n(T,"LI",{});var u8e=s(tg);gU=n(u8e,"STRONG",{});var $Pr=s(gU);jOe=r($Pr,"realm"),$Pr.forEach(t),DOe=r(u8e," \u2014 "),yB=n(u8e,"A",{href:!0});var IPr=s(yB);NOe=r(IPr,"RealmConfig"),IPr.forEach(t),qOe=r(u8e," (Realm model)"),u8e.forEach(t),OOe=i(T),ag=n(T,"LI",{});var b8e=s(ag);hU=n(b8e,"STRONG",{});var jPr=s(hU);GOe=r(jPr,"reformer"),jPr.forEach(t),XOe=r(b8e," \u2014 "),wB=n(b8e,"A",{href:!0});var DPr=s(wB);VOe=r(DPr,"ReformerConfig"),DPr.forEach(t),zOe=r(b8e," (Reformer model)"),b8e.forEach(t),WOe=i(T),ng=n(T,"LI",{});var v8e=s(ng);pU=n(v8e,"STRONG",{});var NPr=s(pU);QOe=r(NPr,"rembert"),NPr.forEach(t),HOe=r(v8e," \u2014 "),AB=n(v8e,"A",{href:!0});var qPr=s(AB);UOe=r(qPr,"RemBertConfig"),qPr.forEach(t),JOe=r(v8e," (RemBERT model)"),v8e.forEach(t),YOe=i(T),sg=n(T,"LI",{});var T8e=s(sg);_U=n(T8e,"STRONG",{});var OPr=s(_U);KOe=r(OPr,"resnet"),OPr.forEach(t),ZOe=r(T8e," \u2014 "),LB=n(T8e,"A",{href:!0});var GPr=s(LB);eGe=r(GPr,"ResNetConfig"),GPr.forEach(t),oGe=r(T8e," (ResNet model)"),T8e.forEach(t),rGe=i(T),lg=n(T,"LI",{});var F8e=s(lg);uU=n(F8e,"STRONG",{});var XPr=s(uU);tGe=r(XPr,"retribert"),XPr.forEach(t),aGe=r(F8e," \u2014 "),BB=n(F8e,"A",{href:!0});var VPr=s(BB);nGe=r(VPr,"RetriBertConfig"),VPr.forEach(t),sGe=r(F8e," (RetriBERT model)"),F8e.forEach(t),lGe=i(T),ig=n(T,"LI",{});var C8e=s(ig);bU=n(C8e,"STRONG",{});var zPr=s(bU);iGe=r(zPr,"roberta"),zPr.forEach(t),dGe=r(C8e," \u2014 "),xB=n(C8e,"A",{href:!0});var WPr=s(xB);cGe=r(WPr,"RobertaConfig"),WPr.forEach(t),fGe=r(C8e," (RoBERTa model)"),C8e.forEach(t),mGe=i(T),dg=n(T,"LI",{});var M8e=s(dg);vU=n(M8e,"STRONG",{});var QPr=s(vU);gGe=r(QPr,"roformer"),QPr.forEach(t),hGe=r(M8e," \u2014 "),kB=n(M8e,"A",{href:!0});var HPr=s(kB);pGe=r(HPr,"RoFormerConfig"),HPr.forEach(t),_Ge=r(M8e," (RoFormer model)"),M8e.forEach(t),uGe=i(T),cg=n(T,"LI",{});var E8e=s(cg);TU=n(E8e,"STRONG",{});var UPr=s(TU);bGe=r(UPr,"segformer"),UPr.forEach(t),vGe=r(E8e," \u2014 "),RB=n(E8e,"A",{href:!0});var JPr=s(RB);TGe=r(JPr,"SegformerConfig"),JPr.forEach(t),FGe=r(E8e," (SegFormer model)"),E8e.forEach(t),CGe=i(T),fg=n(T,"LI",{});var y8e=s(fg);FU=n(y8e,"STRONG",{});var YPr=s(FU);MGe=r(YPr,"sew"),YPr.forEach(t),EGe=r(y8e," \u2014 "),SB=n(y8e,"A",{href:!0});var KPr=s(SB);yGe=r(KPr,"SEWConfig"),KPr.forEach(t),wGe=r(y8e," (SEW model)"),y8e.forEach(t),AGe=i(T),mg=n(T,"LI",{});var w8e=s(mg);CU=n(w8e,"STRONG",{});var ZPr=s(CU);LGe=r(ZPr,"sew-d"),ZPr.forEach(t),BGe=r(w8e," \u2014 "),PB=n(w8e,"A",{href:!0});var e$r=s(PB);xGe=r(e$r,"SEWDConfig"),e$r.forEach(t),kGe=r(w8e," (SEW-D model)"),w8e.forEach(t),RGe=i(T),gg=n(T,"LI",{});var A8e=s(gg);MU=n(A8e,"STRONG",{});var o$r=s(MU);SGe=r(o$r,"speech-encoder-decoder"),o$r.forEach(t),PGe=r(A8e," \u2014 "),$B=n(A8e,"A",{href:!0});var r$r=s($B);$Ge=r(r$r,"SpeechEncoderDecoderConfig"),r$r.forEach(t),IGe=r(A8e," (Speech Encoder decoder model)"),A8e.forEach(t),jGe=i(T),hg=n(T,"LI",{});var L8e=s(hg);EU=n(L8e,"STRONG",{});var t$r=s(EU);DGe=r(t$r,"speech_to_text"),t$r.forEach(t),NGe=r(L8e," \u2014 "),IB=n(L8e,"A",{href:!0});var a$r=s(IB);qGe=r(a$r,"Speech2TextConfig"),a$r.forEach(t),OGe=r(L8e," (Speech2Text model)"),L8e.forEach(t),GGe=i(T),pg=n(T,"LI",{});var B8e=s(pg);yU=n(B8e,"STRONG",{});var n$r=s(yU);XGe=r(n$r,"speech_to_text_2"),n$r.forEach(t),VGe=r(B8e," \u2014 "),jB=n(B8e,"A",{href:!0});var s$r=s(jB);zGe=r(s$r,"Speech2Text2Config"),s$r.forEach(t),WGe=r(B8e," (Speech2Text2 model)"),B8e.forEach(t),QGe=i(T),_g=n(T,"LI",{});var x8e=s(_g);wU=n(x8e,"STRONG",{});var l$r=s(wU);HGe=r(l$r,"splinter"),l$r.forEach(t),UGe=r(x8e," \u2014 "),DB=n(x8e,"A",{href:!0});var i$r=s(DB);JGe=r(i$r,"SplinterConfig"),i$r.forEach(t),YGe=r(x8e," (Splinter model)"),x8e.forEach(t),KGe=i(T),ug=n(T,"LI",{});var k8e=s(ug);AU=n(k8e,"STRONG",{});var d$r=s(AU);ZGe=r(d$r,"squeezebert"),d$r.forEach(t),eXe=r(k8e," \u2014 "),NB=n(k8e,"A",{href:!0});var c$r=s(NB);oXe=r(c$r,"SqueezeBertConfig"),c$r.forEach(t),rXe=r(k8e," (SqueezeBERT model)"),k8e.forEach(t),tXe=i(T),bg=n(T,"LI",{});var R8e=s(bg);LU=n(R8e,"STRONG",{});var f$r=s(LU);aXe=r(f$r,"swin"),f$r.forEach(t),nXe=r(R8e," \u2014 "),qB=n(R8e,"A",{href:!0});var m$r=s(qB);sXe=r(m$r,"SwinConfig"),m$r.forEach(t),lXe=r(R8e," (Swin model)"),R8e.forEach(t),iXe=i(T),vg=n(T,"LI",{});var S8e=s(vg);BU=n(S8e,"STRONG",{});var g$r=s(BU);dXe=r(g$r,"t5"),g$r.forEach(t),cXe=r(S8e," \u2014 "),OB=n(S8e,"A",{href:!0});var h$r=s(OB);fXe=r(h$r,"T5Config"),h$r.forEach(t),mXe=r(S8e," (T5 model)"),S8e.forEach(t),gXe=i(T),Tg=n(T,"LI",{});var P8e=s(Tg);xU=n(P8e,"STRONG",{});var p$r=s(xU);hXe=r(p$r,"tapas"),p$r.forEach(t),pXe=r(P8e," \u2014 "),GB=n(P8e,"A",{href:!0});var _$r=s(GB);_Xe=r(_$r,"TapasConfig"),_$r.forEach(t),uXe=r(P8e," (TAPAS model)"),P8e.forEach(t),bXe=i(T),Fg=n(T,"LI",{});var $8e=s(Fg);kU=n($8e,"STRONG",{});var u$r=s(kU);vXe=r(u$r,"transfo-xl"),u$r.forEach(t),TXe=r($8e," \u2014 "),XB=n($8e,"A",{href:!0});var b$r=s(XB);FXe=r(b$r,"TransfoXLConfig"),b$r.forEach(t),CXe=r($8e," (Transformer-XL model)"),$8e.forEach(t),MXe=i(T),Cg=n(T,"LI",{});var I8e=s(Cg);RU=n(I8e,"STRONG",{});var v$r=s(RU);EXe=r(v$r,"trocr"),v$r.forEach(t),yXe=r(I8e," \u2014 "),VB=n(I8e,"A",{href:!0});var T$r=s(VB);wXe=r(T$r,"TrOCRConfig"),T$r.forEach(t),AXe=r(I8e," (TrOCR model)"),I8e.forEach(t),LXe=i(T),Mg=n(T,"LI",{});var j8e=s(Mg);SU=n(j8e,"STRONG",{});var F$r=s(SU);BXe=r(F$r,"unispeech"),F$r.forEach(t),xXe=r(j8e," \u2014 "),zB=n(j8e,"A",{href:!0});var C$r=s(zB);kXe=r(C$r,"UniSpeechConfig"),C$r.forEach(t),RXe=r(j8e," (UniSpeech model)"),j8e.forEach(t),SXe=i(T),Eg=n(T,"LI",{});var D8e=s(Eg);PU=n(D8e,"STRONG",{});var M$r=s(PU);PXe=r(M$r,"unispeech-sat"),M$r.forEach(t),$Xe=r(D8e," \u2014 "),WB=n(D8e,"A",{href:!0});var E$r=s(WB);IXe=r(E$r,"UniSpeechSatConfig"),E$r.forEach(t),jXe=r(D8e," (UniSpeechSat model)"),D8e.forEach(t),DXe=i(T),yg=n(T,"LI",{});var N8e=s(yg);$U=n(N8e,"STRONG",{});var y$r=s($U);NXe=r(y$r,"van"),y$r.forEach(t),qXe=r(N8e," \u2014 "),QB=n(N8e,"A",{href:!0});var w$r=s(QB);OXe=r(w$r,"VanConfig"),w$r.forEach(t),GXe=r(N8e," (VAN model)"),N8e.forEach(t),XXe=i(T),wg=n(T,"LI",{});var q8e=s(wg);IU=n(q8e,"STRONG",{});var A$r=s(IU);VXe=r(A$r,"vilt"),A$r.forEach(t),zXe=r(q8e," \u2014 "),HB=n(q8e,"A",{href:!0});var L$r=s(HB);WXe=r(L$r,"ViltConfig"),L$r.forEach(t),QXe=r(q8e," (ViLT model)"),q8e.forEach(t),HXe=i(T),Ag=n(T,"LI",{});var O8e=s(Ag);jU=n(O8e,"STRONG",{});var B$r=s(jU);UXe=r(B$r,"vision-encoder-decoder"),B$r.forEach(t),JXe=r(O8e," \u2014 "),UB=n(O8e,"A",{href:!0});var x$r=s(UB);YXe=r(x$r,"VisionEncoderDecoderConfig"),x$r.forEach(t),KXe=r(O8e," (Vision Encoder decoder model)"),O8e.forEach(t),ZXe=i(T),Lg=n(T,"LI",{});var G8e=s(Lg);DU=n(G8e,"STRONG",{});var k$r=s(DU);eVe=r(k$r,"vision-text-dual-encoder"),k$r.forEach(t),oVe=r(G8e," \u2014 "),JB=n(G8e,"A",{href:!0});var R$r=s(JB);rVe=r(R$r,"VisionTextDualEncoderConfig"),R$r.forEach(t),tVe=r(G8e," (VisionTextDualEncoder model)"),G8e.forEach(t),aVe=i(T),Bg=n(T,"LI",{});var X8e=s(Bg);NU=n(X8e,"STRONG",{});var S$r=s(NU);nVe=r(S$r,"visual_bert"),S$r.forEach(t),sVe=r(X8e," \u2014 "),YB=n(X8e,"A",{href:!0});var P$r=s(YB);lVe=r(P$r,"VisualBertConfig"),P$r.forEach(t),iVe=r(X8e," (VisualBert model)"),X8e.forEach(t),dVe=i(T),xg=n(T,"LI",{});var V8e=s(xg);qU=n(V8e,"STRONG",{});var $$r=s(qU);cVe=r($$r,"vit"),$$r.forEach(t),fVe=r(V8e," \u2014 "),KB=n(V8e,"A",{href:!0});var I$r=s(KB);mVe=r(I$r,"ViTConfig"),I$r.forEach(t),gVe=r(V8e," (ViT model)"),V8e.forEach(t),hVe=i(T),kg=n(T,"LI",{});var z8e=s(kg);OU=n(z8e,"STRONG",{});var j$r=s(OU);pVe=r(j$r,"vit_mae"),j$r.forEach(t),_Ve=r(z8e," \u2014 "),ZB=n(z8e,"A",{href:!0});var D$r=s(ZB);uVe=r(D$r,"ViTMAEConfig"),D$r.forEach(t),bVe=r(z8e," (ViTMAE model)"),z8e.forEach(t),vVe=i(T),Rg=n(T,"LI",{});var W8e=s(Rg);GU=n(W8e,"STRONG",{});var N$r=s(GU);TVe=r(N$r,"wav2vec2"),N$r.forEach(t),FVe=r(W8e," \u2014 "),ex=n(W8e,"A",{href:!0});var q$r=s(ex);CVe=r(q$r,"Wav2Vec2Config"),q$r.forEach(t),MVe=r(W8e," (Wav2Vec2 model)"),W8e.forEach(t),EVe=i(T),Sg=n(T,"LI",{});var Q8e=s(Sg);XU=n(Q8e,"STRONG",{});var O$r=s(XU);yVe=r(O$r,"wavlm"),O$r.forEach(t),wVe=r(Q8e," \u2014 "),ox=n(Q8e,"A",{href:!0});var G$r=s(ox);AVe=r(G$r,"WavLMConfig"),G$r.forEach(t),LVe=r(Q8e," (WavLM model)"),Q8e.forEach(t),BVe=i(T),Pg=n(T,"LI",{});var H8e=s(Pg);VU=n(H8e,"STRONG",{});var X$r=s(VU);xVe=r(X$r,"xglm"),X$r.forEach(t),kVe=r(H8e," \u2014 "),rx=n(H8e,"A",{href:!0});var V$r=s(rx);RVe=r(V$r,"XGLMConfig"),V$r.forEach(t),SVe=r(H8e," (XGLM model)"),H8e.forEach(t),PVe=i(T),$g=n(T,"LI",{});var U8e=s($g);zU=n(U8e,"STRONG",{});var z$r=s(zU);$Ve=r(z$r,"xlm"),z$r.forEach(t),IVe=r(U8e," \u2014 "),tx=n(U8e,"A",{href:!0});var W$r=s(tx);jVe=r(W$r,"XLMConfig"),W$r.forEach(t),DVe=r(U8e," (XLM model)"),U8e.forEach(t),NVe=i(T),Ig=n(T,"LI",{});var J8e=s(Ig);WU=n(J8e,"STRONG",{});var Q$r=s(WU);qVe=r(Q$r,"xlm-prophetnet"),Q$r.forEach(t),OVe=r(J8e," \u2014 "),ax=n(J8e,"A",{href:!0});var H$r=s(ax);GVe=r(H$r,"XLMProphetNetConfig"),H$r.forEach(t),XVe=r(J8e," (XLMProphetNet model)"),J8e.forEach(t),VVe=i(T),jg=n(T,"LI",{});var Y8e=s(jg);QU=n(Y8e,"STRONG",{});var U$r=s(QU);zVe=r(U$r,"xlm-roberta"),U$r.forEach(t),WVe=r(Y8e," \u2014 "),nx=n(Y8e,"A",{href:!0});var J$r=s(nx);QVe=r(J$r,"XLMRobertaConfig"),J$r.forEach(t),HVe=r(Y8e," (XLM-RoBERTa model)"),Y8e.forEach(t),UVe=i(T),Dg=n(T,"LI",{});var K8e=s(Dg);HU=n(K8e,"STRONG",{});var Y$r=s(HU);JVe=r(Y$r,"xlm-roberta-xl"),Y$r.forEach(t),YVe=r(K8e," \u2014 "),sx=n(K8e,"A",{href:!0});var K$r=s(sx);KVe=r(K$r,"XLMRobertaXLConfig"),K$r.forEach(t),ZVe=r(K8e," (XLM-RoBERTa-XL model)"),K8e.forEach(t),eze=i(T),Ng=n(T,"LI",{});var Z8e=s(Ng);UU=n(Z8e,"STRONG",{});var Z$r=s(UU);oze=r(Z$r,"xlnet"),Z$r.forEach(t),rze=r(Z8e," \u2014 "),lx=n(Z8e,"A",{href:!0});var eIr=s(lx);tze=r(eIr,"XLNetConfig"),eIr.forEach(t),aze=r(Z8e," (XLNet model)"),Z8e.forEach(t),nze=i(T),qg=n(T,"LI",{});var eFe=s(qg);JU=n(eFe,"STRONG",{});var oIr=s(JU);sze=r(oIr,"yoso"),oIr.forEach(t),lze=r(eFe," \u2014 "),ix=n(eFe,"A",{href:!0});var rIr=s(ix);ize=r(rIr,"YosoConfig"),rIr.forEach(t),dze=r(eFe," (YOSO model)"),eFe.forEach(t),T.forEach(t),cze=i(_a),YU=n(_a,"P",{});var tIr=s(YU);fze=r(tIr,"Examples:"),tIr.forEach(t),mze=i(_a),m(y4.$$.fragment,_a),_a.forEach(t),gze=i(Qs),Og=n(Qs,"DIV",{class:!0});var $Se=s(Og);m(w4.$$.fragment,$Se),hze=i($Se),KU=n($Se,"P",{});var aIr=s(KU);pze=r(aIr,"Register a new configuration for this class."),aIr.forEach(t),$Se.forEach(t),Qs.forEach(t),kke=i(d),ed=n(d,"H2",{class:!0});var ISe=s(ed);Gg=n(ISe,"A",{id:!0,class:!0,href:!0});var nIr=s(Gg);ZU=n(nIr,"SPAN",{});var sIr=s(ZU);m(A4.$$.fragment,sIr),sIr.forEach(t),nIr.forEach(t),_ze=i(ISe),eJ=n(ISe,"SPAN",{});var lIr=s(eJ);uze=r(lIr,"AutoTokenizer"),lIr.forEach(t),ISe.forEach(t),Rke=i(d),Ho=n(d,"DIV",{class:!0});var Hs=s(Ho);m(L4.$$.fragment,Hs),bze=i(Hs),B4=n(Hs,"P",{});var jSe=s(B4);vze=r(jSe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),dx=n(jSe,"A",{href:!0});var iIr=s(dx);Tze=r(iIr,"AutoTokenizer.from_pretrained()"),iIr.forEach(t),Fze=r(jSe," class method."),jSe.forEach(t),Cze=i(Hs),x4=n(Hs,"P",{});var DSe=s(x4);Mze=r(DSe,"This class cannot be instantiated directly using "),oJ=n(DSe,"CODE",{});var dIr=s(oJ);Eze=r(dIr,"__init__()"),dIr.forEach(t),yze=r(DSe," (throws an error)."),DSe.forEach(t),wze=i(Hs),go=n(Hs,"DIV",{class:!0});var ua=s(go);m(k4.$$.fragment,ua),Aze=i(ua),rJ=n(ua,"P",{});var cIr=s(rJ);Lze=r(cIr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),cIr.forEach(t),Bze=i(ua),Wa=n(ua,"P",{});var pM=s(Wa);xze=r(pM,"The tokenizer class to instantiate is selected based on the "),tJ=n(pM,"CODE",{});var fIr=s(tJ);kze=r(fIr,"model_type"),fIr.forEach(t),Rze=r(pM,` property of the config object (either
passed as an argument or loaded from `),aJ=n(pM,"CODE",{});var mIr=s(aJ);Sze=r(mIr,"pretrained_model_name_or_path"),mIr.forEach(t),Pze=r(pM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nJ=n(pM,"CODE",{});var gIr=s(nJ);$ze=r(gIr,"pretrained_model_name_or_path"),gIr.forEach(t),Ize=r(pM,":"),pM.forEach(t),jze=i(ua),E=n(ua,"UL",{});var y=s(E);Yn=n(y,"LI",{});var b7=s(Yn);sJ=n(b7,"STRONG",{});var hIr=s(sJ);Dze=r(hIr,"albert"),hIr.forEach(t),Nze=r(b7," \u2014 "),cx=n(b7,"A",{href:!0});var pIr=s(cx);qze=r(pIr,"AlbertTokenizer"),pIr.forEach(t),Oze=r(b7," or "),fx=n(b7,"A",{href:!0});var _Ir=s(fx);Gze=r(_Ir,"AlbertTokenizerFast"),_Ir.forEach(t),Xze=r(b7," (ALBERT model)"),b7.forEach(t),Vze=i(y),Kn=n(y,"LI",{});var v7=s(Kn);lJ=n(v7,"STRONG",{});var uIr=s(lJ);zze=r(uIr,"bart"),uIr.forEach(t),Wze=r(v7," \u2014 "),mx=n(v7,"A",{href:!0});var bIr=s(mx);Qze=r(bIr,"BartTokenizer"),bIr.forEach(t),Hze=r(v7," or "),gx=n(v7,"A",{href:!0});var vIr=s(gx);Uze=r(vIr,"BartTokenizerFast"),vIr.forEach(t),Jze=r(v7," (BART model)"),v7.forEach(t),Yze=i(y),Zn=n(y,"LI",{});var T7=s(Zn);iJ=n(T7,"STRONG",{});var TIr=s(iJ);Kze=r(TIr,"barthez"),TIr.forEach(t),Zze=r(T7," \u2014 "),hx=n(T7,"A",{href:!0});var FIr=s(hx);eWe=r(FIr,"BarthezTokenizer"),FIr.forEach(t),oWe=r(T7," or "),px=n(T7,"A",{href:!0});var CIr=s(px);rWe=r(CIr,"BarthezTokenizerFast"),CIr.forEach(t),tWe=r(T7," (BARThez model)"),T7.forEach(t),aWe=i(y),Xg=n(y,"LI",{});var oFe=s(Xg);dJ=n(oFe,"STRONG",{});var MIr=s(dJ);nWe=r(MIr,"bartpho"),MIr.forEach(t),sWe=r(oFe," \u2014 "),_x=n(oFe,"A",{href:!0});var EIr=s(_x);lWe=r(EIr,"BartphoTokenizer"),EIr.forEach(t),iWe=r(oFe," (BARTpho model)"),oFe.forEach(t),dWe=i(y),es=n(y,"LI",{});var F7=s(es);cJ=n(F7,"STRONG",{});var yIr=s(cJ);cWe=r(yIr,"bert"),yIr.forEach(t),fWe=r(F7," \u2014 "),ux=n(F7,"A",{href:!0});var wIr=s(ux);mWe=r(wIr,"BertTokenizer"),wIr.forEach(t),gWe=r(F7," or "),bx=n(F7,"A",{href:!0});var AIr=s(bx);hWe=r(AIr,"BertTokenizerFast"),AIr.forEach(t),pWe=r(F7," (BERT model)"),F7.forEach(t),_We=i(y),Vg=n(y,"LI",{});var rFe=s(Vg);fJ=n(rFe,"STRONG",{});var LIr=s(fJ);uWe=r(LIr,"bert-generation"),LIr.forEach(t),bWe=r(rFe," \u2014 "),vx=n(rFe,"A",{href:!0});var BIr=s(vx);vWe=r(BIr,"BertGenerationTokenizer"),BIr.forEach(t),TWe=r(rFe," (Bert Generation model)"),rFe.forEach(t),FWe=i(y),zg=n(y,"LI",{});var tFe=s(zg);mJ=n(tFe,"STRONG",{});var xIr=s(mJ);CWe=r(xIr,"bert-japanese"),xIr.forEach(t),MWe=r(tFe," \u2014 "),Tx=n(tFe,"A",{href:!0});var kIr=s(Tx);EWe=r(kIr,"BertJapaneseTokenizer"),kIr.forEach(t),yWe=r(tFe," (BertJapanese model)"),tFe.forEach(t),wWe=i(y),Wg=n(y,"LI",{});var aFe=s(Wg);gJ=n(aFe,"STRONG",{});var RIr=s(gJ);AWe=r(RIr,"bertweet"),RIr.forEach(t),LWe=r(aFe," \u2014 "),Fx=n(aFe,"A",{href:!0});var SIr=s(Fx);BWe=r(SIr,"BertweetTokenizer"),SIr.forEach(t),xWe=r(aFe," (Bertweet model)"),aFe.forEach(t),kWe=i(y),os=n(y,"LI",{});var C7=s(os);hJ=n(C7,"STRONG",{});var PIr=s(hJ);RWe=r(PIr,"big_bird"),PIr.forEach(t),SWe=r(C7," \u2014 "),Cx=n(C7,"A",{href:!0});var $Ir=s(Cx);PWe=r($Ir,"BigBirdTokenizer"),$Ir.forEach(t),$We=r(C7," or "),Mx=n(C7,"A",{href:!0});var IIr=s(Mx);IWe=r(IIr,"BigBirdTokenizerFast"),IIr.forEach(t),jWe=r(C7," (BigBird model)"),C7.forEach(t),DWe=i(y),rs=n(y,"LI",{});var M7=s(rs);pJ=n(M7,"STRONG",{});var jIr=s(pJ);NWe=r(jIr,"bigbird_pegasus"),jIr.forEach(t),qWe=r(M7," \u2014 "),Ex=n(M7,"A",{href:!0});var DIr=s(Ex);OWe=r(DIr,"PegasusTokenizer"),DIr.forEach(t),GWe=r(M7," or "),yx=n(M7,"A",{href:!0});var NIr=s(yx);XWe=r(NIr,"PegasusTokenizerFast"),NIr.forEach(t),VWe=r(M7," (BigBirdPegasus model)"),M7.forEach(t),zWe=i(y),ts=n(y,"LI",{});var E7=s(ts);_J=n(E7,"STRONG",{});var qIr=s(_J);WWe=r(qIr,"blenderbot"),qIr.forEach(t),QWe=r(E7," \u2014 "),wx=n(E7,"A",{href:!0});var OIr=s(wx);HWe=r(OIr,"BlenderbotTokenizer"),OIr.forEach(t),UWe=r(E7," or "),Ax=n(E7,"A",{href:!0});var GIr=s(Ax);JWe=r(GIr,"BlenderbotTokenizerFast"),GIr.forEach(t),YWe=r(E7," (Blenderbot model)"),E7.forEach(t),KWe=i(y),Qg=n(y,"LI",{});var nFe=s(Qg);uJ=n(nFe,"STRONG",{});var XIr=s(uJ);ZWe=r(XIr,"blenderbot-small"),XIr.forEach(t),eQe=r(nFe," \u2014 "),Lx=n(nFe,"A",{href:!0});var VIr=s(Lx);oQe=r(VIr,"BlenderbotSmallTokenizer"),VIr.forEach(t),rQe=r(nFe," (BlenderbotSmall model)"),nFe.forEach(t),tQe=i(y),Hg=n(y,"LI",{});var sFe=s(Hg);bJ=n(sFe,"STRONG",{});var zIr=s(bJ);aQe=r(zIr,"byt5"),zIr.forEach(t),nQe=r(sFe," \u2014 "),Bx=n(sFe,"A",{href:!0});var WIr=s(Bx);sQe=r(WIr,"ByT5Tokenizer"),WIr.forEach(t),lQe=r(sFe," (ByT5 model)"),sFe.forEach(t),iQe=i(y),as=n(y,"LI",{});var y7=s(as);vJ=n(y7,"STRONG",{});var QIr=s(vJ);dQe=r(QIr,"camembert"),QIr.forEach(t),cQe=r(y7," \u2014 "),xx=n(y7,"A",{href:!0});var HIr=s(xx);fQe=r(HIr,"CamembertTokenizer"),HIr.forEach(t),mQe=r(y7," or "),kx=n(y7,"A",{href:!0});var UIr=s(kx);gQe=r(UIr,"CamembertTokenizerFast"),UIr.forEach(t),hQe=r(y7," (CamemBERT model)"),y7.forEach(t),pQe=i(y),Ug=n(y,"LI",{});var lFe=s(Ug);TJ=n(lFe,"STRONG",{});var JIr=s(TJ);_Qe=r(JIr,"canine"),JIr.forEach(t),uQe=r(lFe," \u2014 "),Rx=n(lFe,"A",{href:!0});var YIr=s(Rx);bQe=r(YIr,"CanineTokenizer"),YIr.forEach(t),vQe=r(lFe," (Canine model)"),lFe.forEach(t),TQe=i(y),ns=n(y,"LI",{});var w7=s(ns);FJ=n(w7,"STRONG",{});var KIr=s(FJ);FQe=r(KIr,"clip"),KIr.forEach(t),CQe=r(w7," \u2014 "),Sx=n(w7,"A",{href:!0});var ZIr=s(Sx);MQe=r(ZIr,"CLIPTokenizer"),ZIr.forEach(t),EQe=r(w7," or "),Px=n(w7,"A",{href:!0});var ejr=s(Px);yQe=r(ejr,"CLIPTokenizerFast"),ejr.forEach(t),wQe=r(w7," (CLIP model)"),w7.forEach(t),AQe=i(y),ss=n(y,"LI",{});var A7=s(ss);CJ=n(A7,"STRONG",{});var ojr=s(CJ);LQe=r(ojr,"convbert"),ojr.forEach(t),BQe=r(A7," \u2014 "),$x=n(A7,"A",{href:!0});var rjr=s($x);xQe=r(rjr,"ConvBertTokenizer"),rjr.forEach(t),kQe=r(A7," or "),Ix=n(A7,"A",{href:!0});var tjr=s(Ix);RQe=r(tjr,"ConvBertTokenizerFast"),tjr.forEach(t),SQe=r(A7," (ConvBERT model)"),A7.forEach(t),PQe=i(y),ls=n(y,"LI",{});var L7=s(ls);MJ=n(L7,"STRONG",{});var ajr=s(MJ);$Qe=r(ajr,"cpm"),ajr.forEach(t),IQe=r(L7," \u2014 "),jx=n(L7,"A",{href:!0});var njr=s(jx);jQe=r(njr,"CpmTokenizer"),njr.forEach(t),DQe=r(L7," or "),EJ=n(L7,"CODE",{});var sjr=s(EJ);NQe=r(sjr,"CpmTokenizerFast"),sjr.forEach(t),qQe=r(L7," (CPM model)"),L7.forEach(t),OQe=i(y),Jg=n(y,"LI",{});var iFe=s(Jg);yJ=n(iFe,"STRONG",{});var ljr=s(yJ);GQe=r(ljr,"ctrl"),ljr.forEach(t),XQe=r(iFe," \u2014 "),Dx=n(iFe,"A",{href:!0});var ijr=s(Dx);VQe=r(ijr,"CTRLTokenizer"),ijr.forEach(t),zQe=r(iFe," (CTRL model)"),iFe.forEach(t),WQe=i(y),is=n(y,"LI",{});var B7=s(is);wJ=n(B7,"STRONG",{});var djr=s(wJ);QQe=r(djr,"deberta"),djr.forEach(t),HQe=r(B7," \u2014 "),Nx=n(B7,"A",{href:!0});var cjr=s(Nx);UQe=r(cjr,"DebertaTokenizer"),cjr.forEach(t),JQe=r(B7," or "),qx=n(B7,"A",{href:!0});var fjr=s(qx);YQe=r(fjr,"DebertaTokenizerFast"),fjr.forEach(t),KQe=r(B7," (DeBERTa model)"),B7.forEach(t),ZQe=i(y),Yg=n(y,"LI",{});var dFe=s(Yg);AJ=n(dFe,"STRONG",{});var mjr=s(AJ);eHe=r(mjr,"deberta-v2"),mjr.forEach(t),oHe=r(dFe," \u2014 "),Ox=n(dFe,"A",{href:!0});var gjr=s(Ox);rHe=r(gjr,"DebertaV2Tokenizer"),gjr.forEach(t),tHe=r(dFe," (DeBERTa-v2 model)"),dFe.forEach(t),aHe=i(y),ds=n(y,"LI",{});var x7=s(ds);LJ=n(x7,"STRONG",{});var hjr=s(LJ);nHe=r(hjr,"distilbert"),hjr.forEach(t),sHe=r(x7," \u2014 "),Gx=n(x7,"A",{href:!0});var pjr=s(Gx);lHe=r(pjr,"DistilBertTokenizer"),pjr.forEach(t),iHe=r(x7," or "),Xx=n(x7,"A",{href:!0});var _jr=s(Xx);dHe=r(_jr,"DistilBertTokenizerFast"),_jr.forEach(t),cHe=r(x7," (DistilBERT model)"),x7.forEach(t),fHe=i(y),cs=n(y,"LI",{});var k7=s(cs);BJ=n(k7,"STRONG",{});var ujr=s(BJ);mHe=r(ujr,"dpr"),ujr.forEach(t),gHe=r(k7," \u2014 "),Vx=n(k7,"A",{href:!0});var bjr=s(Vx);hHe=r(bjr,"DPRQuestionEncoderTokenizer"),bjr.forEach(t),pHe=r(k7," or "),zx=n(k7,"A",{href:!0});var vjr=s(zx);_He=r(vjr,"DPRQuestionEncoderTokenizerFast"),vjr.forEach(t),uHe=r(k7," (DPR model)"),k7.forEach(t),bHe=i(y),fs=n(y,"LI",{});var R7=s(fs);xJ=n(R7,"STRONG",{});var Tjr=s(xJ);vHe=r(Tjr,"electra"),Tjr.forEach(t),THe=r(R7," \u2014 "),Wx=n(R7,"A",{href:!0});var Fjr=s(Wx);FHe=r(Fjr,"ElectraTokenizer"),Fjr.forEach(t),CHe=r(R7," or "),Qx=n(R7,"A",{href:!0});var Cjr=s(Qx);MHe=r(Cjr,"ElectraTokenizerFast"),Cjr.forEach(t),EHe=r(R7," (ELECTRA model)"),R7.forEach(t),yHe=i(y),Kg=n(y,"LI",{});var cFe=s(Kg);kJ=n(cFe,"STRONG",{});var Mjr=s(kJ);wHe=r(Mjr,"flaubert"),Mjr.forEach(t),AHe=r(cFe," \u2014 "),Hx=n(cFe,"A",{href:!0});var Ejr=s(Hx);LHe=r(Ejr,"FlaubertTokenizer"),Ejr.forEach(t),BHe=r(cFe," (FlauBERT model)"),cFe.forEach(t),xHe=i(y),ms=n(y,"LI",{});var S7=s(ms);RJ=n(S7,"STRONG",{});var yjr=s(RJ);kHe=r(yjr,"fnet"),yjr.forEach(t),RHe=r(S7," \u2014 "),Ux=n(S7,"A",{href:!0});var wjr=s(Ux);SHe=r(wjr,"FNetTokenizer"),wjr.forEach(t),PHe=r(S7," or "),Jx=n(S7,"A",{href:!0});var Ajr=s(Jx);$He=r(Ajr,"FNetTokenizerFast"),Ajr.forEach(t),IHe=r(S7," (FNet model)"),S7.forEach(t),jHe=i(y),Zg=n(y,"LI",{});var fFe=s(Zg);SJ=n(fFe,"STRONG",{});var Ljr=s(SJ);DHe=r(Ljr,"fsmt"),Ljr.forEach(t),NHe=r(fFe," \u2014 "),Yx=n(fFe,"A",{href:!0});var Bjr=s(Yx);qHe=r(Bjr,"FSMTTokenizer"),Bjr.forEach(t),OHe=r(fFe," (FairSeq Machine-Translation model)"),fFe.forEach(t),GHe=i(y),gs=n(y,"LI",{});var P7=s(gs);PJ=n(P7,"STRONG",{});var xjr=s(PJ);XHe=r(xjr,"funnel"),xjr.forEach(t),VHe=r(P7," \u2014 "),Kx=n(P7,"A",{href:!0});var kjr=s(Kx);zHe=r(kjr,"FunnelTokenizer"),kjr.forEach(t),WHe=r(P7," or "),Zx=n(P7,"A",{href:!0});var Rjr=s(Zx);QHe=r(Rjr,"FunnelTokenizerFast"),Rjr.forEach(t),HHe=r(P7," (Funnel Transformer model)"),P7.forEach(t),UHe=i(y),hs=n(y,"LI",{});var $7=s(hs);$J=n($7,"STRONG",{});var Sjr=s($J);JHe=r(Sjr,"gpt2"),Sjr.forEach(t),YHe=r($7," \u2014 "),ek=n($7,"A",{href:!0});var Pjr=s(ek);KHe=r(Pjr,"GPT2Tokenizer"),Pjr.forEach(t),ZHe=r($7," or "),ok=n($7,"A",{href:!0});var $jr=s(ok);eUe=r($jr,"GPT2TokenizerFast"),$jr.forEach(t),oUe=r($7," (OpenAI GPT-2 model)"),$7.forEach(t),rUe=i(y),ps=n(y,"LI",{});var I7=s(ps);IJ=n(I7,"STRONG",{});var Ijr=s(IJ);tUe=r(Ijr,"gpt_neo"),Ijr.forEach(t),aUe=r(I7," \u2014 "),rk=n(I7,"A",{href:!0});var jjr=s(rk);nUe=r(jjr,"GPT2Tokenizer"),jjr.forEach(t),sUe=r(I7," or "),tk=n(I7,"A",{href:!0});var Djr=s(tk);lUe=r(Djr,"GPT2TokenizerFast"),Djr.forEach(t),iUe=r(I7," (GPT Neo model)"),I7.forEach(t),dUe=i(y),_s=n(y,"LI",{});var j7=s(_s);jJ=n(j7,"STRONG",{});var Njr=s(jJ);cUe=r(Njr,"herbert"),Njr.forEach(t),fUe=r(j7," \u2014 "),ak=n(j7,"A",{href:!0});var qjr=s(ak);mUe=r(qjr,"HerbertTokenizer"),qjr.forEach(t),gUe=r(j7," or "),nk=n(j7,"A",{href:!0});var Ojr=s(nk);hUe=r(Ojr,"HerbertTokenizerFast"),Ojr.forEach(t),pUe=r(j7," (HerBERT model)"),j7.forEach(t),_Ue=i(y),eh=n(y,"LI",{});var mFe=s(eh);DJ=n(mFe,"STRONG",{});var Gjr=s(DJ);uUe=r(Gjr,"hubert"),Gjr.forEach(t),bUe=r(mFe," \u2014 "),sk=n(mFe,"A",{href:!0});var Xjr=s(sk);vUe=r(Xjr,"Wav2Vec2CTCTokenizer"),Xjr.forEach(t),TUe=r(mFe," (Hubert model)"),mFe.forEach(t),FUe=i(y),us=n(y,"LI",{});var D7=s(us);NJ=n(D7,"STRONG",{});var Vjr=s(NJ);CUe=r(Vjr,"ibert"),Vjr.forEach(t),MUe=r(D7," \u2014 "),lk=n(D7,"A",{href:!0});var zjr=s(lk);EUe=r(zjr,"RobertaTokenizer"),zjr.forEach(t),yUe=r(D7," or "),ik=n(D7,"A",{href:!0});var Wjr=s(ik);wUe=r(Wjr,"RobertaTokenizerFast"),Wjr.forEach(t),AUe=r(D7," (I-BERT model)"),D7.forEach(t),LUe=i(y),bs=n(y,"LI",{});var N7=s(bs);qJ=n(N7,"STRONG",{});var Qjr=s(qJ);BUe=r(Qjr,"layoutlm"),Qjr.forEach(t),xUe=r(N7," \u2014 "),dk=n(N7,"A",{href:!0});var Hjr=s(dk);kUe=r(Hjr,"LayoutLMTokenizer"),Hjr.forEach(t),RUe=r(N7," or "),ck=n(N7,"A",{href:!0});var Ujr=s(ck);SUe=r(Ujr,"LayoutLMTokenizerFast"),Ujr.forEach(t),PUe=r(N7," (LayoutLM model)"),N7.forEach(t),$Ue=i(y),vs=n(y,"LI",{});var q7=s(vs);OJ=n(q7,"STRONG",{});var Jjr=s(OJ);IUe=r(Jjr,"layoutlmv2"),Jjr.forEach(t),jUe=r(q7," \u2014 "),fk=n(q7,"A",{href:!0});var Yjr=s(fk);DUe=r(Yjr,"LayoutLMv2Tokenizer"),Yjr.forEach(t),NUe=r(q7," or "),mk=n(q7,"A",{href:!0});var Kjr=s(mk);qUe=r(Kjr,"LayoutLMv2TokenizerFast"),Kjr.forEach(t),OUe=r(q7," (LayoutLMv2 model)"),q7.forEach(t),GUe=i(y),Ts=n(y,"LI",{});var O7=s(Ts);GJ=n(O7,"STRONG",{});var Zjr=s(GJ);XUe=r(Zjr,"layoutxlm"),Zjr.forEach(t),VUe=r(O7," \u2014 "),gk=n(O7,"A",{href:!0});var eDr=s(gk);zUe=r(eDr,"LayoutXLMTokenizer"),eDr.forEach(t),WUe=r(O7," or "),hk=n(O7,"A",{href:!0});var oDr=s(hk);QUe=r(oDr,"LayoutXLMTokenizerFast"),oDr.forEach(t),HUe=r(O7," (LayoutXLM model)"),O7.forEach(t),UUe=i(y),Fs=n(y,"LI",{});var G7=s(Fs);XJ=n(G7,"STRONG",{});var rDr=s(XJ);JUe=r(rDr,"led"),rDr.forEach(t),YUe=r(G7," \u2014 "),pk=n(G7,"A",{href:!0});var tDr=s(pk);KUe=r(tDr,"LEDTokenizer"),tDr.forEach(t),ZUe=r(G7," or "),_k=n(G7,"A",{href:!0});var aDr=s(_k);eJe=r(aDr,"LEDTokenizerFast"),aDr.forEach(t),oJe=r(G7," (LED model)"),G7.forEach(t),rJe=i(y),Cs=n(y,"LI",{});var X7=s(Cs);VJ=n(X7,"STRONG",{});var nDr=s(VJ);tJe=r(nDr,"longformer"),nDr.forEach(t),aJe=r(X7," \u2014 "),uk=n(X7,"A",{href:!0});var sDr=s(uk);nJe=r(sDr,"LongformerTokenizer"),sDr.forEach(t),sJe=r(X7," or "),bk=n(X7,"A",{href:!0});var lDr=s(bk);lJe=r(lDr,"LongformerTokenizerFast"),lDr.forEach(t),iJe=r(X7," (Longformer model)"),X7.forEach(t),dJe=i(y),oh=n(y,"LI",{});var gFe=s(oh);zJ=n(gFe,"STRONG",{});var iDr=s(zJ);cJe=r(iDr,"luke"),iDr.forEach(t),fJe=r(gFe," \u2014 "),vk=n(gFe,"A",{href:!0});var dDr=s(vk);mJe=r(dDr,"LukeTokenizer"),dDr.forEach(t),gJe=r(gFe," (LUKE model)"),gFe.forEach(t),hJe=i(y),Ms=n(y,"LI",{});var V7=s(Ms);WJ=n(V7,"STRONG",{});var cDr=s(WJ);pJe=r(cDr,"lxmert"),cDr.forEach(t),_Je=r(V7," \u2014 "),Tk=n(V7,"A",{href:!0});var fDr=s(Tk);uJe=r(fDr,"LxmertTokenizer"),fDr.forEach(t),bJe=r(V7," or "),Fk=n(V7,"A",{href:!0});var mDr=s(Fk);vJe=r(mDr,"LxmertTokenizerFast"),mDr.forEach(t),TJe=r(V7," (LXMERT model)"),V7.forEach(t),FJe=i(y),rh=n(y,"LI",{});var hFe=s(rh);QJ=n(hFe,"STRONG",{});var gDr=s(QJ);CJe=r(gDr,"m2m_100"),gDr.forEach(t),MJe=r(hFe," \u2014 "),Ck=n(hFe,"A",{href:!0});var hDr=s(Ck);EJe=r(hDr,"M2M100Tokenizer"),hDr.forEach(t),yJe=r(hFe," (M2M100 model)"),hFe.forEach(t),wJe=i(y),th=n(y,"LI",{});var pFe=s(th);HJ=n(pFe,"STRONG",{});var pDr=s(HJ);AJe=r(pDr,"marian"),pDr.forEach(t),LJe=r(pFe," \u2014 "),Mk=n(pFe,"A",{href:!0});var _Dr=s(Mk);BJe=r(_Dr,"MarianTokenizer"),_Dr.forEach(t),xJe=r(pFe," (Marian model)"),pFe.forEach(t),kJe=i(y),Es=n(y,"LI",{});var z7=s(Es);UJ=n(z7,"STRONG",{});var uDr=s(UJ);RJe=r(uDr,"mbart"),uDr.forEach(t),SJe=r(z7," \u2014 "),Ek=n(z7,"A",{href:!0});var bDr=s(Ek);PJe=r(bDr,"MBartTokenizer"),bDr.forEach(t),$Je=r(z7," or "),yk=n(z7,"A",{href:!0});var vDr=s(yk);IJe=r(vDr,"MBartTokenizerFast"),vDr.forEach(t),jJe=r(z7," (mBART model)"),z7.forEach(t),DJe=i(y),ys=n(y,"LI",{});var W7=s(ys);JJ=n(W7,"STRONG",{});var TDr=s(JJ);NJe=r(TDr,"mbart50"),TDr.forEach(t),qJe=r(W7," \u2014 "),wk=n(W7,"A",{href:!0});var FDr=s(wk);OJe=r(FDr,"MBart50Tokenizer"),FDr.forEach(t),GJe=r(W7," or "),Ak=n(W7,"A",{href:!0});var CDr=s(Ak);XJe=r(CDr,"MBart50TokenizerFast"),CDr.forEach(t),VJe=r(W7," (mBART-50 model)"),W7.forEach(t),zJe=i(y),ah=n(y,"LI",{});var _Fe=s(ah);YJ=n(_Fe,"STRONG",{});var MDr=s(YJ);WJe=r(MDr,"mluke"),MDr.forEach(t),QJe=r(_Fe," \u2014 "),Lk=n(_Fe,"A",{href:!0});var EDr=s(Lk);HJe=r(EDr,"MLukeTokenizer"),EDr.forEach(t),UJe=r(_Fe," (mLUKE model)"),_Fe.forEach(t),JJe=i(y),ws=n(y,"LI",{});var Q7=s(ws);KJ=n(Q7,"STRONG",{});var yDr=s(KJ);YJe=r(yDr,"mobilebert"),yDr.forEach(t),KJe=r(Q7," \u2014 "),Bk=n(Q7,"A",{href:!0});var wDr=s(Bk);ZJe=r(wDr,"MobileBertTokenizer"),wDr.forEach(t),eYe=r(Q7," or "),xk=n(Q7,"A",{href:!0});var ADr=s(xk);oYe=r(ADr,"MobileBertTokenizerFast"),ADr.forEach(t),rYe=r(Q7," (MobileBERT model)"),Q7.forEach(t),tYe=i(y),As=n(y,"LI",{});var H7=s(As);ZJ=n(H7,"STRONG",{});var LDr=s(ZJ);aYe=r(LDr,"mpnet"),LDr.forEach(t),nYe=r(H7," \u2014 "),kk=n(H7,"A",{href:!0});var BDr=s(kk);sYe=r(BDr,"MPNetTokenizer"),BDr.forEach(t),lYe=r(H7," or "),Rk=n(H7,"A",{href:!0});var xDr=s(Rk);iYe=r(xDr,"MPNetTokenizerFast"),xDr.forEach(t),dYe=r(H7," (MPNet model)"),H7.forEach(t),cYe=i(y),Ls=n(y,"LI",{});var U7=s(Ls);eY=n(U7,"STRONG",{});var kDr=s(eY);fYe=r(kDr,"mt5"),kDr.forEach(t),mYe=r(U7," \u2014 "),Sk=n(U7,"A",{href:!0});var RDr=s(Sk);gYe=r(RDr,"MT5Tokenizer"),RDr.forEach(t),hYe=r(U7," or "),Pk=n(U7,"A",{href:!0});var SDr=s(Pk);pYe=r(SDr,"MT5TokenizerFast"),SDr.forEach(t),_Ye=r(U7," (mT5 model)"),U7.forEach(t),uYe=i(y),Bs=n(y,"LI",{});var J7=s(Bs);oY=n(J7,"STRONG",{});var PDr=s(oY);bYe=r(PDr,"openai-gpt"),PDr.forEach(t),vYe=r(J7," \u2014 "),$k=n(J7,"A",{href:!0});var $Dr=s($k);TYe=r($Dr,"OpenAIGPTTokenizer"),$Dr.forEach(t),FYe=r(J7," or "),Ik=n(J7,"A",{href:!0});var IDr=s(Ik);CYe=r(IDr,"OpenAIGPTTokenizerFast"),IDr.forEach(t),MYe=r(J7," (OpenAI GPT model)"),J7.forEach(t),EYe=i(y),xs=n(y,"LI",{});var Y7=s(xs);rY=n(Y7,"STRONG",{});var jDr=s(rY);yYe=r(jDr,"pegasus"),jDr.forEach(t),wYe=r(Y7," \u2014 "),jk=n(Y7,"A",{href:!0});var DDr=s(jk);AYe=r(DDr,"PegasusTokenizer"),DDr.forEach(t),LYe=r(Y7," or "),Dk=n(Y7,"A",{href:!0});var NDr=s(Dk);BYe=r(NDr,"PegasusTokenizerFast"),NDr.forEach(t),xYe=r(Y7," (Pegasus model)"),Y7.forEach(t),kYe=i(y),nh=n(y,"LI",{});var uFe=s(nh);tY=n(uFe,"STRONG",{});var qDr=s(tY);RYe=r(qDr,"perceiver"),qDr.forEach(t),SYe=r(uFe," \u2014 "),Nk=n(uFe,"A",{href:!0});var ODr=s(Nk);PYe=r(ODr,"PerceiverTokenizer"),ODr.forEach(t),$Ye=r(uFe," (Perceiver model)"),uFe.forEach(t),IYe=i(y),sh=n(y,"LI",{});var bFe=s(sh);aY=n(bFe,"STRONG",{});var GDr=s(aY);jYe=r(GDr,"phobert"),GDr.forEach(t),DYe=r(bFe," \u2014 "),qk=n(bFe,"A",{href:!0});var XDr=s(qk);NYe=r(XDr,"PhobertTokenizer"),XDr.forEach(t),qYe=r(bFe," (PhoBERT model)"),bFe.forEach(t),OYe=i(y),lh=n(y,"LI",{});var vFe=s(lh);nY=n(vFe,"STRONG",{});var VDr=s(nY);GYe=r(VDr,"plbart"),VDr.forEach(t),XYe=r(vFe," \u2014 "),Ok=n(vFe,"A",{href:!0});var zDr=s(Ok);VYe=r(zDr,"PLBartTokenizer"),zDr.forEach(t),zYe=r(vFe," (PLBart model)"),vFe.forEach(t),WYe=i(y),ih=n(y,"LI",{});var TFe=s(ih);sY=n(TFe,"STRONG",{});var WDr=s(sY);QYe=r(WDr,"prophetnet"),WDr.forEach(t),HYe=r(TFe," \u2014 "),Gk=n(TFe,"A",{href:!0});var QDr=s(Gk);UYe=r(QDr,"ProphetNetTokenizer"),QDr.forEach(t),JYe=r(TFe," (ProphetNet model)"),TFe.forEach(t),YYe=i(y),ks=n(y,"LI",{});var K7=s(ks);lY=n(K7,"STRONG",{});var HDr=s(lY);KYe=r(HDr,"qdqbert"),HDr.forEach(t),ZYe=r(K7," \u2014 "),Xk=n(K7,"A",{href:!0});var UDr=s(Xk);eKe=r(UDr,"BertTokenizer"),UDr.forEach(t),oKe=r(K7," or "),Vk=n(K7,"A",{href:!0});var JDr=s(Vk);rKe=r(JDr,"BertTokenizerFast"),JDr.forEach(t),tKe=r(K7," (QDQBert model)"),K7.forEach(t),aKe=i(y),dh=n(y,"LI",{});var FFe=s(dh);iY=n(FFe,"STRONG",{});var YDr=s(iY);nKe=r(YDr,"rag"),YDr.forEach(t),sKe=r(FFe," \u2014 "),zk=n(FFe,"A",{href:!0});var KDr=s(zk);lKe=r(KDr,"RagTokenizer"),KDr.forEach(t),iKe=r(FFe," (RAG model)"),FFe.forEach(t),dKe=i(y),Rs=n(y,"LI",{});var Z7=s(Rs);dY=n(Z7,"STRONG",{});var ZDr=s(dY);cKe=r(ZDr,"realm"),ZDr.forEach(t),fKe=r(Z7," \u2014 "),Wk=n(Z7,"A",{href:!0});var eNr=s(Wk);mKe=r(eNr,"RealmTokenizer"),eNr.forEach(t),gKe=r(Z7," or "),Qk=n(Z7,"A",{href:!0});var oNr=s(Qk);hKe=r(oNr,"RealmTokenizerFast"),oNr.forEach(t),pKe=r(Z7," (Realm model)"),Z7.forEach(t),_Ke=i(y),Ss=n(y,"LI",{});var e9=s(Ss);cY=n(e9,"STRONG",{});var rNr=s(cY);uKe=r(rNr,"reformer"),rNr.forEach(t),bKe=r(e9," \u2014 "),Hk=n(e9,"A",{href:!0});var tNr=s(Hk);vKe=r(tNr,"ReformerTokenizer"),tNr.forEach(t),TKe=r(e9," or "),Uk=n(e9,"A",{href:!0});var aNr=s(Uk);FKe=r(aNr,"ReformerTokenizerFast"),aNr.forEach(t),CKe=r(e9," (Reformer model)"),e9.forEach(t),MKe=i(y),Ps=n(y,"LI",{});var o9=s(Ps);fY=n(o9,"STRONG",{});var nNr=s(fY);EKe=r(nNr,"rembert"),nNr.forEach(t),yKe=r(o9," \u2014 "),Jk=n(o9,"A",{href:!0});var sNr=s(Jk);wKe=r(sNr,"RemBertTokenizer"),sNr.forEach(t),AKe=r(o9," or "),Yk=n(o9,"A",{href:!0});var lNr=s(Yk);LKe=r(lNr,"RemBertTokenizerFast"),lNr.forEach(t),BKe=r(o9," (RemBERT model)"),o9.forEach(t),xKe=i(y),$s=n(y,"LI",{});var r9=s($s);mY=n(r9,"STRONG",{});var iNr=s(mY);kKe=r(iNr,"retribert"),iNr.forEach(t),RKe=r(r9," \u2014 "),Kk=n(r9,"A",{href:!0});var dNr=s(Kk);SKe=r(dNr,"RetriBertTokenizer"),dNr.forEach(t),PKe=r(r9," or "),Zk=n(r9,"A",{href:!0});var cNr=s(Zk);$Ke=r(cNr,"RetriBertTokenizerFast"),cNr.forEach(t),IKe=r(r9," (RetriBERT model)"),r9.forEach(t),jKe=i(y),Is=n(y,"LI",{});var t9=s(Is);gY=n(t9,"STRONG",{});var fNr=s(gY);DKe=r(fNr,"roberta"),fNr.forEach(t),NKe=r(t9," \u2014 "),eR=n(t9,"A",{href:!0});var mNr=s(eR);qKe=r(mNr,"RobertaTokenizer"),mNr.forEach(t),OKe=r(t9," or "),oR=n(t9,"A",{href:!0});var gNr=s(oR);GKe=r(gNr,"RobertaTokenizerFast"),gNr.forEach(t),XKe=r(t9," (RoBERTa model)"),t9.forEach(t),VKe=i(y),js=n(y,"LI",{});var a9=s(js);hY=n(a9,"STRONG",{});var hNr=s(hY);zKe=r(hNr,"roformer"),hNr.forEach(t),WKe=r(a9," \u2014 "),rR=n(a9,"A",{href:!0});var pNr=s(rR);QKe=r(pNr,"RoFormerTokenizer"),pNr.forEach(t),HKe=r(a9," or "),tR=n(a9,"A",{href:!0});var _Nr=s(tR);UKe=r(_Nr,"RoFormerTokenizerFast"),_Nr.forEach(t),JKe=r(a9," (RoFormer model)"),a9.forEach(t),YKe=i(y),ch=n(y,"LI",{});var CFe=s(ch);pY=n(CFe,"STRONG",{});var uNr=s(pY);KKe=r(uNr,"speech_to_text"),uNr.forEach(t),ZKe=r(CFe," \u2014 "),aR=n(CFe,"A",{href:!0});var bNr=s(aR);eZe=r(bNr,"Speech2TextTokenizer"),bNr.forEach(t),oZe=r(CFe," (Speech2Text model)"),CFe.forEach(t),rZe=i(y),fh=n(y,"LI",{});var MFe=s(fh);_Y=n(MFe,"STRONG",{});var vNr=s(_Y);tZe=r(vNr,"speech_to_text_2"),vNr.forEach(t),aZe=r(MFe," \u2014 "),nR=n(MFe,"A",{href:!0});var TNr=s(nR);nZe=r(TNr,"Speech2Text2Tokenizer"),TNr.forEach(t),sZe=r(MFe," (Speech2Text2 model)"),MFe.forEach(t),lZe=i(y),Ds=n(y,"LI",{});var n9=s(Ds);uY=n(n9,"STRONG",{});var FNr=s(uY);iZe=r(FNr,"splinter"),FNr.forEach(t),dZe=r(n9," \u2014 "),sR=n(n9,"A",{href:!0});var CNr=s(sR);cZe=r(CNr,"SplinterTokenizer"),CNr.forEach(t),fZe=r(n9," or "),lR=n(n9,"A",{href:!0});var MNr=s(lR);mZe=r(MNr,"SplinterTokenizerFast"),MNr.forEach(t),gZe=r(n9," (Splinter model)"),n9.forEach(t),hZe=i(y),Ns=n(y,"LI",{});var s9=s(Ns);bY=n(s9,"STRONG",{});var ENr=s(bY);pZe=r(ENr,"squeezebert"),ENr.forEach(t),_Ze=r(s9," \u2014 "),iR=n(s9,"A",{href:!0});var yNr=s(iR);uZe=r(yNr,"SqueezeBertTokenizer"),yNr.forEach(t),bZe=r(s9," or "),dR=n(s9,"A",{href:!0});var wNr=s(dR);vZe=r(wNr,"SqueezeBertTokenizerFast"),wNr.forEach(t),TZe=r(s9," (SqueezeBERT model)"),s9.forEach(t),FZe=i(y),qs=n(y,"LI",{});var l9=s(qs);vY=n(l9,"STRONG",{});var ANr=s(vY);CZe=r(ANr,"t5"),ANr.forEach(t),MZe=r(l9," \u2014 "),cR=n(l9,"A",{href:!0});var LNr=s(cR);EZe=r(LNr,"T5Tokenizer"),LNr.forEach(t),yZe=r(l9," or "),fR=n(l9,"A",{href:!0});var BNr=s(fR);wZe=r(BNr,"T5TokenizerFast"),BNr.forEach(t),AZe=r(l9," (T5 model)"),l9.forEach(t),LZe=i(y),mh=n(y,"LI",{});var EFe=s(mh);TY=n(EFe,"STRONG",{});var xNr=s(TY);BZe=r(xNr,"tapas"),xNr.forEach(t),xZe=r(EFe," \u2014 "),mR=n(EFe,"A",{href:!0});var kNr=s(mR);kZe=r(kNr,"TapasTokenizer"),kNr.forEach(t),RZe=r(EFe," (TAPAS model)"),EFe.forEach(t),SZe=i(y),gh=n(y,"LI",{});var yFe=s(gh);FY=n(yFe,"STRONG",{});var RNr=s(FY);PZe=r(RNr,"transfo-xl"),RNr.forEach(t),$Ze=r(yFe," \u2014 "),gR=n(yFe,"A",{href:!0});var SNr=s(gR);IZe=r(SNr,"TransfoXLTokenizer"),SNr.forEach(t),jZe=r(yFe," (Transformer-XL model)"),yFe.forEach(t),DZe=i(y),hh=n(y,"LI",{});var wFe=s(hh);CY=n(wFe,"STRONG",{});var PNr=s(CY);NZe=r(PNr,"wav2vec2"),PNr.forEach(t),qZe=r(wFe," \u2014 "),hR=n(wFe,"A",{href:!0});var $Nr=s(hR);OZe=r($Nr,"Wav2Vec2CTCTokenizer"),$Nr.forEach(t),GZe=r(wFe," (Wav2Vec2 model)"),wFe.forEach(t),XZe=i(y),ph=n(y,"LI",{});var AFe=s(ph);MY=n(AFe,"STRONG",{});var INr=s(MY);VZe=r(INr,"wav2vec2_phoneme"),INr.forEach(t),zZe=r(AFe," \u2014 "),pR=n(AFe,"A",{href:!0});var jNr=s(pR);WZe=r(jNr,"Wav2Vec2PhonemeCTCTokenizer"),jNr.forEach(t),QZe=r(AFe," (Wav2Vec2Phoneme model)"),AFe.forEach(t),HZe=i(y),Os=n(y,"LI",{});var i9=s(Os);EY=n(i9,"STRONG",{});var DNr=s(EY);UZe=r(DNr,"xglm"),DNr.forEach(t),JZe=r(i9," \u2014 "),_R=n(i9,"A",{href:!0});var NNr=s(_R);YZe=r(NNr,"XGLMTokenizer"),NNr.forEach(t),KZe=r(i9," or "),uR=n(i9,"A",{href:!0});var qNr=s(uR);ZZe=r(qNr,"XGLMTokenizerFast"),qNr.forEach(t),eeo=r(i9," (XGLM model)"),i9.forEach(t),oeo=i(y),_h=n(y,"LI",{});var LFe=s(_h);yY=n(LFe,"STRONG",{});var ONr=s(yY);reo=r(ONr,"xlm"),ONr.forEach(t),teo=r(LFe," \u2014 "),bR=n(LFe,"A",{href:!0});var GNr=s(bR);aeo=r(GNr,"XLMTokenizer"),GNr.forEach(t),neo=r(LFe," (XLM model)"),LFe.forEach(t),seo=i(y),uh=n(y,"LI",{});var BFe=s(uh);wY=n(BFe,"STRONG",{});var XNr=s(wY);leo=r(XNr,"xlm-prophetnet"),XNr.forEach(t),ieo=r(BFe," \u2014 "),vR=n(BFe,"A",{href:!0});var VNr=s(vR);deo=r(VNr,"XLMProphetNetTokenizer"),VNr.forEach(t),ceo=r(BFe," (XLMProphetNet model)"),BFe.forEach(t),feo=i(y),Gs=n(y,"LI",{});var d9=s(Gs);AY=n(d9,"STRONG",{});var zNr=s(AY);meo=r(zNr,"xlm-roberta"),zNr.forEach(t),geo=r(d9," \u2014 "),TR=n(d9,"A",{href:!0});var WNr=s(TR);heo=r(WNr,"XLMRobertaTokenizer"),WNr.forEach(t),peo=r(d9," or "),FR=n(d9,"A",{href:!0});var QNr=s(FR);_eo=r(QNr,"XLMRobertaTokenizerFast"),QNr.forEach(t),ueo=r(d9," (XLM-RoBERTa model)"),d9.forEach(t),beo=i(y),Xs=n(y,"LI",{});var c9=s(Xs);LY=n(c9,"STRONG",{});var HNr=s(LY);veo=r(HNr,"xlnet"),HNr.forEach(t),Teo=r(c9," \u2014 "),CR=n(c9,"A",{href:!0});var UNr=s(CR);Feo=r(UNr,"XLNetTokenizer"),UNr.forEach(t),Ceo=r(c9," or "),MR=n(c9,"A",{href:!0});var JNr=s(MR);Meo=r(JNr,"XLNetTokenizerFast"),JNr.forEach(t),Eeo=r(c9," (XLNet model)"),c9.forEach(t),y.forEach(t),yeo=i(ua),BY=n(ua,"P",{});var YNr=s(BY);weo=r(YNr,"Examples:"),YNr.forEach(t),Aeo=i(ua),m(R4.$$.fragment,ua),ua.forEach(t),Leo=i(Hs),bh=n(Hs,"DIV",{class:!0});var NSe=s(bh);m(S4.$$.fragment,NSe),Beo=i(NSe),xY=n(NSe,"P",{});var KNr=s(xY);xeo=r(KNr,"Register a new tokenizer in this mapping."),KNr.forEach(t),NSe.forEach(t),Hs.forEach(t),Ske=i(d),od=n(d,"H2",{class:!0});var qSe=s(od);vh=n(qSe,"A",{id:!0,class:!0,href:!0});var ZNr=s(vh);kY=n(ZNr,"SPAN",{});var eqr=s(kY);m(P4.$$.fragment,eqr),eqr.forEach(t),ZNr.forEach(t),keo=i(qSe),RY=n(qSe,"SPAN",{});var oqr=s(RY);Reo=r(oqr,"AutoFeatureExtractor"),oqr.forEach(t),qSe.forEach(t),Pke=i(d),Uo=n(d,"DIV",{class:!0});var Us=s(Uo);m($4.$$.fragment,Us),Seo=i(Us),I4=n(Us,"P",{});var OSe=s(I4);Peo=r(OSe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),ER=n(OSe,"A",{href:!0});var rqr=s(ER);$eo=r(rqr,"AutoFeatureExtractor.from_pretrained()"),rqr.forEach(t),Ieo=r(OSe," class method."),OSe.forEach(t),jeo=i(Us),j4=n(Us,"P",{});var GSe=s(j4);Deo=r(GSe,"This class cannot be instantiated directly using "),SY=n(GSe,"CODE",{});var tqr=s(SY);Neo=r(tqr,"__init__()"),tqr.forEach(t),qeo=r(GSe," (throws an error)."),GSe.forEach(t),Oeo=i(Us),Ie=n(Us,"DIV",{class:!0});var Ot=s(Ie);m(D4.$$.fragment,Ot),Geo=i(Ot),PY=n(Ot,"P",{});var aqr=s(PY);Xeo=r(aqr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),aqr.forEach(t),Veo=i(Ot),Qa=n(Ot,"P",{});var _M=s(Qa);zeo=r(_M,"The feature extractor class to instantiate is selected based on the "),$Y=n(_M,"CODE",{});var nqr=s($Y);Weo=r(nqr,"model_type"),nqr.forEach(t),Qeo=r(_M,` property of the config object
(either passed as an argument or loaded from `),IY=n(_M,"CODE",{});var sqr=s(IY);Heo=r(sqr,"pretrained_model_name_or_path"),sqr.forEach(t),Ueo=r(_M,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),jY=n(_M,"CODE",{});var lqr=s(jY);Jeo=r(lqr,"pretrained_model_name_or_path"),lqr.forEach(t),Yeo=r(_M,":"),_M.forEach(t),Keo=i(Ot),re=n(Ot,"UL",{});var ne=s(re);Th=n(ne,"LI",{});var xFe=s(Th);DY=n(xFe,"STRONG",{});var iqr=s(DY);Zeo=r(iqr,"beit"),iqr.forEach(t),eoo=r(xFe," \u2014 "),yR=n(xFe,"A",{href:!0});var dqr=s(yR);ooo=r(dqr,"BeitFeatureExtractor"),dqr.forEach(t),roo=r(xFe," (BEiT model)"),xFe.forEach(t),too=i(ne),Fh=n(ne,"LI",{});var kFe=s(Fh);NY=n(kFe,"STRONG",{});var cqr=s(NY);aoo=r(cqr,"clip"),cqr.forEach(t),noo=r(kFe," \u2014 "),wR=n(kFe,"A",{href:!0});var fqr=s(wR);soo=r(fqr,"CLIPFeatureExtractor"),fqr.forEach(t),loo=r(kFe," (CLIP model)"),kFe.forEach(t),ioo=i(ne),Ch=n(ne,"LI",{});var RFe=s(Ch);qY=n(RFe,"STRONG",{});var mqr=s(qY);doo=r(mqr,"convnext"),mqr.forEach(t),coo=r(RFe," \u2014 "),AR=n(RFe,"A",{href:!0});var gqr=s(AR);foo=r(gqr,"ConvNextFeatureExtractor"),gqr.forEach(t),moo=r(RFe," (ConvNext model)"),RFe.forEach(t),goo=i(ne),Mh=n(ne,"LI",{});var SFe=s(Mh);OY=n(SFe,"STRONG",{});var hqr=s(OY);hoo=r(hqr,"deit"),hqr.forEach(t),poo=r(SFe," \u2014 "),LR=n(SFe,"A",{href:!0});var pqr=s(LR);_oo=r(pqr,"DeiTFeatureExtractor"),pqr.forEach(t),uoo=r(SFe," (DeiT model)"),SFe.forEach(t),boo=i(ne),Eh=n(ne,"LI",{});var PFe=s(Eh);GY=n(PFe,"STRONG",{});var _qr=s(GY);voo=r(_qr,"detr"),_qr.forEach(t),Too=r(PFe," \u2014 "),BR=n(PFe,"A",{href:!0});var uqr=s(BR);Foo=r(uqr,"DetrFeatureExtractor"),uqr.forEach(t),Coo=r(PFe," (DETR model)"),PFe.forEach(t),Moo=i(ne),yh=n(ne,"LI",{});var $Fe=s(yh);XY=n($Fe,"STRONG",{});var bqr=s(XY);Eoo=r(bqr,"hubert"),bqr.forEach(t),yoo=r($Fe," \u2014 "),xR=n($Fe,"A",{href:!0});var vqr=s(xR);woo=r(vqr,"Wav2Vec2FeatureExtractor"),vqr.forEach(t),Aoo=r($Fe," (Hubert model)"),$Fe.forEach(t),Loo=i(ne),wh=n(ne,"LI",{});var IFe=s(wh);VY=n(IFe,"STRONG",{});var Tqr=s(VY);Boo=r(Tqr,"layoutlmv2"),Tqr.forEach(t),xoo=r(IFe," \u2014 "),kR=n(IFe,"A",{href:!0});var Fqr=s(kR);koo=r(Fqr,"LayoutLMv2FeatureExtractor"),Fqr.forEach(t),Roo=r(IFe," (LayoutLMv2 model)"),IFe.forEach(t),Soo=i(ne),Ah=n(ne,"LI",{});var jFe=s(Ah);zY=n(jFe,"STRONG",{});var Cqr=s(zY);Poo=r(Cqr,"maskformer"),Cqr.forEach(t),$oo=r(jFe," \u2014 "),RR=n(jFe,"A",{href:!0});var Mqr=s(RR);Ioo=r(Mqr,"MaskFormerFeatureExtractor"),Mqr.forEach(t),joo=r(jFe," (MaskFormer model)"),jFe.forEach(t),Doo=i(ne),Lh=n(ne,"LI",{});var DFe=s(Lh);WY=n(DFe,"STRONG",{});var Eqr=s(WY);Noo=r(Eqr,"perceiver"),Eqr.forEach(t),qoo=r(DFe," \u2014 "),SR=n(DFe,"A",{href:!0});var yqr=s(SR);Ooo=r(yqr,"PerceiverFeatureExtractor"),yqr.forEach(t),Goo=r(DFe," (Perceiver model)"),DFe.forEach(t),Xoo=i(ne),Bh=n(ne,"LI",{});var NFe=s(Bh);QY=n(NFe,"STRONG",{});var wqr=s(QY);Voo=r(wqr,"poolformer"),wqr.forEach(t),zoo=r(NFe," \u2014 "),PR=n(NFe,"A",{href:!0});var Aqr=s(PR);Woo=r(Aqr,"PoolFormerFeatureExtractor"),Aqr.forEach(t),Qoo=r(NFe," (PoolFormer model)"),NFe.forEach(t),Hoo=i(ne),xh=n(ne,"LI",{});var qFe=s(xh);HY=n(qFe,"STRONG",{});var Lqr=s(HY);Uoo=r(Lqr,"resnet"),Lqr.forEach(t),Joo=r(qFe," \u2014 "),$R=n(qFe,"A",{href:!0});var Bqr=s($R);Yoo=r(Bqr,"ConvNextFeatureExtractor"),Bqr.forEach(t),Koo=r(qFe," (ResNet model)"),qFe.forEach(t),Zoo=i(ne),kh=n(ne,"LI",{});var OFe=s(kh);UY=n(OFe,"STRONG",{});var xqr=s(UY);ero=r(xqr,"segformer"),xqr.forEach(t),oro=r(OFe," \u2014 "),IR=n(OFe,"A",{href:!0});var kqr=s(IR);rro=r(kqr,"SegformerFeatureExtractor"),kqr.forEach(t),tro=r(OFe," (SegFormer model)"),OFe.forEach(t),aro=i(ne),Rh=n(ne,"LI",{});var GFe=s(Rh);JY=n(GFe,"STRONG",{});var Rqr=s(JY);nro=r(Rqr,"speech_to_text"),Rqr.forEach(t),sro=r(GFe," \u2014 "),jR=n(GFe,"A",{href:!0});var Sqr=s(jR);lro=r(Sqr,"Speech2TextFeatureExtractor"),Sqr.forEach(t),iro=r(GFe," (Speech2Text model)"),GFe.forEach(t),dro=i(ne),Sh=n(ne,"LI",{});var XFe=s(Sh);YY=n(XFe,"STRONG",{});var Pqr=s(YY);cro=r(Pqr,"swin"),Pqr.forEach(t),fro=r(XFe," \u2014 "),DR=n(XFe,"A",{href:!0});var $qr=s(DR);mro=r($qr,"ViTFeatureExtractor"),$qr.forEach(t),gro=r(XFe," (Swin model)"),XFe.forEach(t),hro=i(ne),Ph=n(ne,"LI",{});var VFe=s(Ph);KY=n(VFe,"STRONG",{});var Iqr=s(KY);pro=r(Iqr,"van"),Iqr.forEach(t),_ro=r(VFe," \u2014 "),NR=n(VFe,"A",{href:!0});var jqr=s(NR);uro=r(jqr,"ConvNextFeatureExtractor"),jqr.forEach(t),bro=r(VFe," (VAN model)"),VFe.forEach(t),vro=i(ne),$h=n(ne,"LI",{});var zFe=s($h);ZY=n(zFe,"STRONG",{});var Dqr=s(ZY);Tro=r(Dqr,"vit"),Dqr.forEach(t),Fro=r(zFe," \u2014 "),qR=n(zFe,"A",{href:!0});var Nqr=s(qR);Cro=r(Nqr,"ViTFeatureExtractor"),Nqr.forEach(t),Mro=r(zFe," (ViT model)"),zFe.forEach(t),Ero=i(ne),Ih=n(ne,"LI",{});var WFe=s(Ih);eK=n(WFe,"STRONG",{});var qqr=s(eK);yro=r(qqr,"vit_mae"),qqr.forEach(t),wro=r(WFe," \u2014 "),OR=n(WFe,"A",{href:!0});var Oqr=s(OR);Aro=r(Oqr,"ViTFeatureExtractor"),Oqr.forEach(t),Lro=r(WFe," (ViTMAE model)"),WFe.forEach(t),Bro=i(ne),jh=n(ne,"LI",{});var QFe=s(jh);oK=n(QFe,"STRONG",{});var Gqr=s(oK);xro=r(Gqr,"wav2vec2"),Gqr.forEach(t),kro=r(QFe," \u2014 "),GR=n(QFe,"A",{href:!0});var Xqr=s(GR);Rro=r(Xqr,"Wav2Vec2FeatureExtractor"),Xqr.forEach(t),Sro=r(QFe," (Wav2Vec2 model)"),QFe.forEach(t),ne.forEach(t),Pro=i(Ot),m(Dh.$$.fragment,Ot),$ro=i(Ot),rK=n(Ot,"P",{});var Vqr=s(rK);Iro=r(Vqr,"Examples:"),Vqr.forEach(t),jro=i(Ot),m(N4.$$.fragment,Ot),Ot.forEach(t),Dro=i(Us),Nh=n(Us,"DIV",{class:!0});var XSe=s(Nh);m(q4.$$.fragment,XSe),Nro=i(XSe),tK=n(XSe,"P",{});var zqr=s(tK);qro=r(zqr,"Register a new feature extractor for this class."),zqr.forEach(t),XSe.forEach(t),Us.forEach(t),$ke=i(d),rd=n(d,"H2",{class:!0});var VSe=s(rd);qh=n(VSe,"A",{id:!0,class:!0,href:!0});var Wqr=s(qh);aK=n(Wqr,"SPAN",{});var Qqr=s(aK);m(O4.$$.fragment,Qqr),Qqr.forEach(t),Wqr.forEach(t),Oro=i(VSe),nK=n(VSe,"SPAN",{});var Hqr=s(nK);Gro=r(Hqr,"AutoProcessor"),Hqr.forEach(t),VSe.forEach(t),Ike=i(d),Jo=n(d,"DIV",{class:!0});var Js=s(Jo);m(G4.$$.fragment,Js),Xro=i(Js),X4=n(Js,"P",{});var zSe=s(X4);Vro=r(zSe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),XR=n(zSe,"A",{href:!0});var Uqr=s(XR);zro=r(Uqr,"AutoProcessor.from_pretrained()"),Uqr.forEach(t),Wro=r(zSe," class method."),zSe.forEach(t),Qro=i(Js),V4=n(Js,"P",{});var WSe=s(V4);Hro=r(WSe,"This class cannot be instantiated directly using "),sK=n(WSe,"CODE",{});var Jqr=s(sK);Uro=r(Jqr,"__init__()"),Jqr.forEach(t),Jro=r(WSe," (throws an error)."),WSe.forEach(t),Yro=i(Js),je=n(Js,"DIV",{class:!0});var Gt=s(je);m(z4.$$.fragment,Gt),Kro=i(Gt),lK=n(Gt,"P",{});var Yqr=s(lK);Zro=r(Yqr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Yqr.forEach(t),eto=i(Gt),td=n(Gt,"P",{});var lW=s(td);oto=r(lW,"The processor class to instantiate is selected based on the "),iK=n(lW,"CODE",{});var Kqr=s(iK);rto=r(Kqr,"model_type"),Kqr.forEach(t),tto=r(lW,` property of the config object (either
passed as an argument or loaded from `),dK=n(lW,"CODE",{});var Zqr=s(dK);ato=r(Zqr,"pretrained_model_name_or_path"),Zqr.forEach(t),nto=r(lW," if possible):"),lW.forEach(t),sto=i(Gt),xe=n(Gt,"UL",{});var qo=s(xe);Oh=n(qo,"LI",{});var HFe=s(Oh);cK=n(HFe,"STRONG",{});var eOr=s(cK);lto=r(eOr,"clip"),eOr.forEach(t),ito=r(HFe," \u2014 "),VR=n(HFe,"A",{href:!0});var oOr=s(VR);dto=r(oOr,"CLIPProcessor"),oOr.forEach(t),cto=r(HFe," (CLIP model)"),HFe.forEach(t),fto=i(qo),Gh=n(qo,"LI",{});var UFe=s(Gh);fK=n(UFe,"STRONG",{});var rOr=s(fK);mto=r(rOr,"layoutlmv2"),rOr.forEach(t),gto=r(UFe," \u2014 "),zR=n(UFe,"A",{href:!0});var tOr=s(zR);hto=r(tOr,"LayoutLMv2Processor"),tOr.forEach(t),pto=r(UFe," (LayoutLMv2 model)"),UFe.forEach(t),_to=i(qo),Xh=n(qo,"LI",{});var JFe=s(Xh);mK=n(JFe,"STRONG",{});var aOr=s(mK);uto=r(aOr,"layoutxlm"),aOr.forEach(t),bto=r(JFe," \u2014 "),WR=n(JFe,"A",{href:!0});var nOr=s(WR);vto=r(nOr,"LayoutXLMProcessor"),nOr.forEach(t),Tto=r(JFe," (LayoutXLM model)"),JFe.forEach(t),Fto=i(qo),Vh=n(qo,"LI",{});var YFe=s(Vh);gK=n(YFe,"STRONG",{});var sOr=s(gK);Cto=r(sOr,"speech_to_text"),sOr.forEach(t),Mto=r(YFe," \u2014 "),QR=n(YFe,"A",{href:!0});var lOr=s(QR);Eto=r(lOr,"Speech2TextProcessor"),lOr.forEach(t),yto=r(YFe," (Speech2Text model)"),YFe.forEach(t),wto=i(qo),zh=n(qo,"LI",{});var KFe=s(zh);hK=n(KFe,"STRONG",{});var iOr=s(hK);Ato=r(iOr,"speech_to_text_2"),iOr.forEach(t),Lto=r(KFe," \u2014 "),HR=n(KFe,"A",{href:!0});var dOr=s(HR);Bto=r(dOr,"Speech2Text2Processor"),dOr.forEach(t),xto=r(KFe," (Speech2Text2 model)"),KFe.forEach(t),kto=i(qo),Wh=n(qo,"LI",{});var ZFe=s(Wh);pK=n(ZFe,"STRONG",{});var cOr=s(pK);Rto=r(cOr,"trocr"),cOr.forEach(t),Sto=r(ZFe," \u2014 "),UR=n(ZFe,"A",{href:!0});var fOr=s(UR);Pto=r(fOr,"TrOCRProcessor"),fOr.forEach(t),$to=r(ZFe," (TrOCR model)"),ZFe.forEach(t),Ito=i(qo),Qh=n(qo,"LI",{});var eCe=s(Qh);_K=n(eCe,"STRONG",{});var mOr=s(_K);jto=r(mOr,"vision-text-dual-encoder"),mOr.forEach(t),Dto=r(eCe," \u2014 "),JR=n(eCe,"A",{href:!0});var gOr=s(JR);Nto=r(gOr,"VisionTextDualEncoderProcessor"),gOr.forEach(t),qto=r(eCe," (VisionTextDualEncoder model)"),eCe.forEach(t),Oto=i(qo),Hh=n(qo,"LI",{});var oCe=s(Hh);uK=n(oCe,"STRONG",{});var hOr=s(uK);Gto=r(hOr,"wav2vec2"),hOr.forEach(t),Xto=r(oCe," \u2014 "),YR=n(oCe,"A",{href:!0});var pOr=s(YR);Vto=r(pOr,"Wav2Vec2Processor"),pOr.forEach(t),zto=r(oCe," (Wav2Vec2 model)"),oCe.forEach(t),qo.forEach(t),Wto=i(Gt),m(Uh.$$.fragment,Gt),Qto=i(Gt),bK=n(Gt,"P",{});var _Or=s(bK);Hto=r(_Or,"Examples:"),_Or.forEach(t),Uto=i(Gt),m(W4.$$.fragment,Gt),Gt.forEach(t),Jto=i(Js),Jh=n(Js,"DIV",{class:!0});var QSe=s(Jh);m(Q4.$$.fragment,QSe),Yto=i(QSe),vK=n(QSe,"P",{});var uOr=s(vK);Kto=r(uOr,"Register a new processor for this class."),uOr.forEach(t),QSe.forEach(t),Js.forEach(t),jke=i(d),ad=n(d,"H2",{class:!0});var HSe=s(ad);Yh=n(HSe,"A",{id:!0,class:!0,href:!0});var bOr=s(Yh);TK=n(bOr,"SPAN",{});var vOr=s(TK);m(H4.$$.fragment,vOr),vOr.forEach(t),bOr.forEach(t),Zto=i(HSe),FK=n(HSe,"SPAN",{});var TOr=s(FK);eao=r(TOr,"AutoModel"),TOr.forEach(t),HSe.forEach(t),Dke=i(d),Yo=n(d,"DIV",{class:!0});var Ys=s(Yo);m(U4.$$.fragment,Ys),oao=i(Ys),nd=n(Ys,"P",{});var iW=s(nd);rao=r(iW,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),CK=n(iW,"CODE",{});var FOr=s(CK);tao=r(FOr,"from_pretrained()"),FOr.forEach(t),aao=r(iW,"class method or the "),MK=n(iW,"CODE",{});var COr=s(MK);nao=r(COr,"from_config()"),COr.forEach(t),sao=r(iW,`class
method.`),iW.forEach(t),lao=i(Ys),J4=n(Ys,"P",{});var USe=s(J4);iao=r(USe,"This class cannot be instantiated directly using "),EK=n(USe,"CODE",{});var MOr=s(EK);dao=r(MOr,"__init__()"),MOr.forEach(t),cao=r(USe," (throws an error)."),USe.forEach(t),fao=i(Ys),Wr=n(Ys,"DIV",{class:!0});var Ks=s(Wr);m(Y4.$$.fragment,Ks),mao=i(Ks),yK=n(Ks,"P",{});var EOr=s(yK);gao=r(EOr,"Instantiates one of the base model classes of the library from a configuration."),EOr.forEach(t),hao=i(Ks),sd=n(Ks,"P",{});var dW=s(sd);pao=r(dW,`Note:
Loading a model from its configuration file does `),wK=n(dW,"STRONG",{});var yOr=s(wK);_ao=r(yOr,"not"),yOr.forEach(t),uao=r(dW,` load the model weights. It only affects the
model\u2019s configuration. Use `),AK=n(dW,"CODE",{});var wOr=s(AK);bao=r(wOr,"from_pretrained()"),wOr.forEach(t),vao=r(dW,"to load the model weights."),dW.forEach(t),Tao=i(Ks),LK=n(Ks,"P",{});var AOr=s(LK);Fao=r(AOr,"Examples:"),AOr.forEach(t),Cao=i(Ks),m(K4.$$.fragment,Ks),Ks.forEach(t),Mao=i(Ys),De=n(Ys,"DIV",{class:!0});var Xt=s(De);m(Z4.$$.fragment,Xt),Eao=i(Xt),BK=n(Xt,"P",{});var LOr=s(BK);yao=r(LOr,"Instantiate one of the base model classes of the library from a pretrained model."),LOr.forEach(t),wao=i(Xt),Ha=n(Xt,"P",{});var uM=s(Ha);Aao=r(uM,"The model class to instantiate is selected based on the "),xK=n(uM,"CODE",{});var BOr=s(xK);Lao=r(BOr,"model_type"),BOr.forEach(t),Bao=r(uM,` property of the config object (either
passed as an argument or loaded from `),kK=n(uM,"CODE",{});var xOr=s(kK);xao=r(xOr,"pretrained_model_name_or_path"),xOr.forEach(t),kao=r(uM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RK=n(uM,"CODE",{});var kOr=s(RK);Rao=r(kOr,"pretrained_model_name_or_path"),kOr.forEach(t),Sao=r(uM,":"),uM.forEach(t),Pao=i(Xt),F=n(Xt,"UL",{});var C=s(F);Kh=n(C,"LI",{});var rCe=s(Kh);SK=n(rCe,"STRONG",{});var ROr=s(SK);$ao=r(ROr,"albert"),ROr.forEach(t),Iao=r(rCe," \u2014 "),KR=n(rCe,"A",{href:!0});var SOr=s(KR);jao=r(SOr,"AlbertModel"),SOr.forEach(t),Dao=r(rCe," (ALBERT model)"),rCe.forEach(t),Nao=i(C),Zh=n(C,"LI",{});var tCe=s(Zh);PK=n(tCe,"STRONG",{});var POr=s(PK);qao=r(POr,"bart"),POr.forEach(t),Oao=r(tCe," \u2014 "),ZR=n(tCe,"A",{href:!0});var $Or=s(ZR);Gao=r($Or,"BartModel"),$Or.forEach(t),Xao=r(tCe," (BART model)"),tCe.forEach(t),Vao=i(C),ep=n(C,"LI",{});var aCe=s(ep);$K=n(aCe,"STRONG",{});var IOr=s($K);zao=r(IOr,"beit"),IOr.forEach(t),Wao=r(aCe," \u2014 "),eS=n(aCe,"A",{href:!0});var jOr=s(eS);Qao=r(jOr,"BeitModel"),jOr.forEach(t),Hao=r(aCe," (BEiT model)"),aCe.forEach(t),Uao=i(C),op=n(C,"LI",{});var nCe=s(op);IK=n(nCe,"STRONG",{});var DOr=s(IK);Jao=r(DOr,"bert"),DOr.forEach(t),Yao=r(nCe," \u2014 "),oS=n(nCe,"A",{href:!0});var NOr=s(oS);Kao=r(NOr,"BertModel"),NOr.forEach(t),Zao=r(nCe," (BERT model)"),nCe.forEach(t),eno=i(C),rp=n(C,"LI",{});var sCe=s(rp);jK=n(sCe,"STRONG",{});var qOr=s(jK);ono=r(qOr,"bert-generation"),qOr.forEach(t),rno=r(sCe," \u2014 "),rS=n(sCe,"A",{href:!0});var OOr=s(rS);tno=r(OOr,"BertGenerationEncoder"),OOr.forEach(t),ano=r(sCe," (Bert Generation model)"),sCe.forEach(t),nno=i(C),tp=n(C,"LI",{});var lCe=s(tp);DK=n(lCe,"STRONG",{});var GOr=s(DK);sno=r(GOr,"big_bird"),GOr.forEach(t),lno=r(lCe," \u2014 "),tS=n(lCe,"A",{href:!0});var XOr=s(tS);ino=r(XOr,"BigBirdModel"),XOr.forEach(t),dno=r(lCe," (BigBird model)"),lCe.forEach(t),cno=i(C),ap=n(C,"LI",{});var iCe=s(ap);NK=n(iCe,"STRONG",{});var VOr=s(NK);fno=r(VOr,"bigbird_pegasus"),VOr.forEach(t),mno=r(iCe," \u2014 "),aS=n(iCe,"A",{href:!0});var zOr=s(aS);gno=r(zOr,"BigBirdPegasusModel"),zOr.forEach(t),hno=r(iCe," (BigBirdPegasus model)"),iCe.forEach(t),pno=i(C),np=n(C,"LI",{});var dCe=s(np);qK=n(dCe,"STRONG",{});var WOr=s(qK);_no=r(WOr,"blenderbot"),WOr.forEach(t),uno=r(dCe," \u2014 "),nS=n(dCe,"A",{href:!0});var QOr=s(nS);bno=r(QOr,"BlenderbotModel"),QOr.forEach(t),vno=r(dCe," (Blenderbot model)"),dCe.forEach(t),Tno=i(C),sp=n(C,"LI",{});var cCe=s(sp);OK=n(cCe,"STRONG",{});var HOr=s(OK);Fno=r(HOr,"blenderbot-small"),HOr.forEach(t),Cno=r(cCe," \u2014 "),sS=n(cCe,"A",{href:!0});var UOr=s(sS);Mno=r(UOr,"BlenderbotSmallModel"),UOr.forEach(t),Eno=r(cCe," (BlenderbotSmall model)"),cCe.forEach(t),yno=i(C),lp=n(C,"LI",{});var fCe=s(lp);GK=n(fCe,"STRONG",{});var JOr=s(GK);wno=r(JOr,"camembert"),JOr.forEach(t),Ano=r(fCe," \u2014 "),lS=n(fCe,"A",{href:!0});var YOr=s(lS);Lno=r(YOr,"CamembertModel"),YOr.forEach(t),Bno=r(fCe," (CamemBERT model)"),fCe.forEach(t),xno=i(C),ip=n(C,"LI",{});var mCe=s(ip);XK=n(mCe,"STRONG",{});var KOr=s(XK);kno=r(KOr,"canine"),KOr.forEach(t),Rno=r(mCe," \u2014 "),iS=n(mCe,"A",{href:!0});var ZOr=s(iS);Sno=r(ZOr,"CanineModel"),ZOr.forEach(t),Pno=r(mCe," (Canine model)"),mCe.forEach(t),$no=i(C),dp=n(C,"LI",{});var gCe=s(dp);VK=n(gCe,"STRONG",{});var eGr=s(VK);Ino=r(eGr,"clip"),eGr.forEach(t),jno=r(gCe," \u2014 "),dS=n(gCe,"A",{href:!0});var oGr=s(dS);Dno=r(oGr,"CLIPModel"),oGr.forEach(t),Nno=r(gCe," (CLIP model)"),gCe.forEach(t),qno=i(C),cp=n(C,"LI",{});var hCe=s(cp);zK=n(hCe,"STRONG",{});var rGr=s(zK);Ono=r(rGr,"convbert"),rGr.forEach(t),Gno=r(hCe," \u2014 "),cS=n(hCe,"A",{href:!0});var tGr=s(cS);Xno=r(tGr,"ConvBertModel"),tGr.forEach(t),Vno=r(hCe," (ConvBERT model)"),hCe.forEach(t),zno=i(C),fp=n(C,"LI",{});var pCe=s(fp);WK=n(pCe,"STRONG",{});var aGr=s(WK);Wno=r(aGr,"convnext"),aGr.forEach(t),Qno=r(pCe," \u2014 "),fS=n(pCe,"A",{href:!0});var nGr=s(fS);Hno=r(nGr,"ConvNextModel"),nGr.forEach(t),Uno=r(pCe," (ConvNext model)"),pCe.forEach(t),Jno=i(C),mp=n(C,"LI",{});var _Ce=s(mp);QK=n(_Ce,"STRONG",{});var sGr=s(QK);Yno=r(sGr,"ctrl"),sGr.forEach(t),Kno=r(_Ce," \u2014 "),mS=n(_Ce,"A",{href:!0});var lGr=s(mS);Zno=r(lGr,"CTRLModel"),lGr.forEach(t),eso=r(_Ce," (CTRL model)"),_Ce.forEach(t),oso=i(C),gp=n(C,"LI",{});var uCe=s(gp);HK=n(uCe,"STRONG",{});var iGr=s(HK);rso=r(iGr,"data2vec-audio"),iGr.forEach(t),tso=r(uCe," \u2014 "),gS=n(uCe,"A",{href:!0});var dGr=s(gS);aso=r(dGr,"Data2VecAudioModel"),dGr.forEach(t),nso=r(uCe," (Data2VecAudio model)"),uCe.forEach(t),sso=i(C),hp=n(C,"LI",{});var bCe=s(hp);UK=n(bCe,"STRONG",{});var cGr=s(UK);lso=r(cGr,"data2vec-text"),cGr.forEach(t),iso=r(bCe," \u2014 "),hS=n(bCe,"A",{href:!0});var fGr=s(hS);dso=r(fGr,"Data2VecTextModel"),fGr.forEach(t),cso=r(bCe," (Data2VecText model)"),bCe.forEach(t),fso=i(C),pp=n(C,"LI",{});var vCe=s(pp);JK=n(vCe,"STRONG",{});var mGr=s(JK);mso=r(mGr,"deberta"),mGr.forEach(t),gso=r(vCe," \u2014 "),pS=n(vCe,"A",{href:!0});var gGr=s(pS);hso=r(gGr,"DebertaModel"),gGr.forEach(t),pso=r(vCe," (DeBERTa model)"),vCe.forEach(t),_so=i(C),_p=n(C,"LI",{});var TCe=s(_p);YK=n(TCe,"STRONG",{});var hGr=s(YK);uso=r(hGr,"deberta-v2"),hGr.forEach(t),bso=r(TCe," \u2014 "),_S=n(TCe,"A",{href:!0});var pGr=s(_S);vso=r(pGr,"DebertaV2Model"),pGr.forEach(t),Tso=r(TCe," (DeBERTa-v2 model)"),TCe.forEach(t),Fso=i(C),up=n(C,"LI",{});var FCe=s(up);KK=n(FCe,"STRONG",{});var _Gr=s(KK);Cso=r(_Gr,"deit"),_Gr.forEach(t),Mso=r(FCe," \u2014 "),uS=n(FCe,"A",{href:!0});var uGr=s(uS);Eso=r(uGr,"DeiTModel"),uGr.forEach(t),yso=r(FCe," (DeiT model)"),FCe.forEach(t),wso=i(C),bp=n(C,"LI",{});var CCe=s(bp);ZK=n(CCe,"STRONG",{});var bGr=s(ZK);Aso=r(bGr,"detr"),bGr.forEach(t),Lso=r(CCe," \u2014 "),bS=n(CCe,"A",{href:!0});var vGr=s(bS);Bso=r(vGr,"DetrModel"),vGr.forEach(t),xso=r(CCe," (DETR model)"),CCe.forEach(t),kso=i(C),vp=n(C,"LI",{});var MCe=s(vp);eZ=n(MCe,"STRONG",{});var TGr=s(eZ);Rso=r(TGr,"distilbert"),TGr.forEach(t),Sso=r(MCe," \u2014 "),vS=n(MCe,"A",{href:!0});var FGr=s(vS);Pso=r(FGr,"DistilBertModel"),FGr.forEach(t),$so=r(MCe," (DistilBERT model)"),MCe.forEach(t),Iso=i(C),Tp=n(C,"LI",{});var ECe=s(Tp);oZ=n(ECe,"STRONG",{});var CGr=s(oZ);jso=r(CGr,"dpr"),CGr.forEach(t),Dso=r(ECe," \u2014 "),TS=n(ECe,"A",{href:!0});var MGr=s(TS);Nso=r(MGr,"DPRQuestionEncoder"),MGr.forEach(t),qso=r(ECe," (DPR model)"),ECe.forEach(t),Oso=i(C),Fp=n(C,"LI",{});var yCe=s(Fp);rZ=n(yCe,"STRONG",{});var EGr=s(rZ);Gso=r(EGr,"electra"),EGr.forEach(t),Xso=r(yCe," \u2014 "),FS=n(yCe,"A",{href:!0});var yGr=s(FS);Vso=r(yGr,"ElectraModel"),yGr.forEach(t),zso=r(yCe," (ELECTRA model)"),yCe.forEach(t),Wso=i(C),Cp=n(C,"LI",{});var wCe=s(Cp);tZ=n(wCe,"STRONG",{});var wGr=s(tZ);Qso=r(wGr,"flaubert"),wGr.forEach(t),Hso=r(wCe," \u2014 "),CS=n(wCe,"A",{href:!0});var AGr=s(CS);Uso=r(AGr,"FlaubertModel"),AGr.forEach(t),Jso=r(wCe," (FlauBERT model)"),wCe.forEach(t),Yso=i(C),Mp=n(C,"LI",{});var ACe=s(Mp);aZ=n(ACe,"STRONG",{});var LGr=s(aZ);Kso=r(LGr,"fnet"),LGr.forEach(t),Zso=r(ACe," \u2014 "),MS=n(ACe,"A",{href:!0});var BGr=s(MS);elo=r(BGr,"FNetModel"),BGr.forEach(t),olo=r(ACe," (FNet model)"),ACe.forEach(t),rlo=i(C),Ep=n(C,"LI",{});var LCe=s(Ep);nZ=n(LCe,"STRONG",{});var xGr=s(nZ);tlo=r(xGr,"fsmt"),xGr.forEach(t),alo=r(LCe," \u2014 "),ES=n(LCe,"A",{href:!0});var kGr=s(ES);nlo=r(kGr,"FSMTModel"),kGr.forEach(t),slo=r(LCe," (FairSeq Machine-Translation model)"),LCe.forEach(t),llo=i(C),Vs=n(C,"LI",{});var f9=s(Vs);sZ=n(f9,"STRONG",{});var RGr=s(sZ);ilo=r(RGr,"funnel"),RGr.forEach(t),dlo=r(f9," \u2014 "),yS=n(f9,"A",{href:!0});var SGr=s(yS);clo=r(SGr,"FunnelModel"),SGr.forEach(t),flo=r(f9," or "),wS=n(f9,"A",{href:!0});var PGr=s(wS);mlo=r(PGr,"FunnelBaseModel"),PGr.forEach(t),glo=r(f9," (Funnel Transformer model)"),f9.forEach(t),hlo=i(C),yp=n(C,"LI",{});var BCe=s(yp);lZ=n(BCe,"STRONG",{});var $Gr=s(lZ);plo=r($Gr,"gpt2"),$Gr.forEach(t),_lo=r(BCe," \u2014 "),AS=n(BCe,"A",{href:!0});var IGr=s(AS);ulo=r(IGr,"GPT2Model"),IGr.forEach(t),blo=r(BCe," (OpenAI GPT-2 model)"),BCe.forEach(t),vlo=i(C),wp=n(C,"LI",{});var xCe=s(wp);iZ=n(xCe,"STRONG",{});var jGr=s(iZ);Tlo=r(jGr,"gpt_neo"),jGr.forEach(t),Flo=r(xCe," \u2014 "),LS=n(xCe,"A",{href:!0});var DGr=s(LS);Clo=r(DGr,"GPTNeoModel"),DGr.forEach(t),Mlo=r(xCe," (GPT Neo model)"),xCe.forEach(t),Elo=i(C),Ap=n(C,"LI",{});var kCe=s(Ap);dZ=n(kCe,"STRONG",{});var NGr=s(dZ);ylo=r(NGr,"gptj"),NGr.forEach(t),wlo=r(kCe," \u2014 "),BS=n(kCe,"A",{href:!0});var qGr=s(BS);Alo=r(qGr,"GPTJModel"),qGr.forEach(t),Llo=r(kCe," (GPT-J model)"),kCe.forEach(t),Blo=i(C),Lp=n(C,"LI",{});var RCe=s(Lp);cZ=n(RCe,"STRONG",{});var OGr=s(cZ);xlo=r(OGr,"hubert"),OGr.forEach(t),klo=r(RCe," \u2014 "),xS=n(RCe,"A",{href:!0});var GGr=s(xS);Rlo=r(GGr,"HubertModel"),GGr.forEach(t),Slo=r(RCe," (Hubert model)"),RCe.forEach(t),Plo=i(C),Bp=n(C,"LI",{});var SCe=s(Bp);fZ=n(SCe,"STRONG",{});var XGr=s(fZ);$lo=r(XGr,"ibert"),XGr.forEach(t),Ilo=r(SCe," \u2014 "),kS=n(SCe,"A",{href:!0});var VGr=s(kS);jlo=r(VGr,"IBertModel"),VGr.forEach(t),Dlo=r(SCe," (I-BERT model)"),SCe.forEach(t),Nlo=i(C),xp=n(C,"LI",{});var PCe=s(xp);mZ=n(PCe,"STRONG",{});var zGr=s(mZ);qlo=r(zGr,"imagegpt"),zGr.forEach(t),Olo=r(PCe," \u2014 "),RS=n(PCe,"A",{href:!0});var WGr=s(RS);Glo=r(WGr,"ImageGPTModel"),WGr.forEach(t),Xlo=r(PCe," (ImageGPT model)"),PCe.forEach(t),Vlo=i(C),kp=n(C,"LI",{});var $Ce=s(kp);gZ=n($Ce,"STRONG",{});var QGr=s(gZ);zlo=r(QGr,"layoutlm"),QGr.forEach(t),Wlo=r($Ce," \u2014 "),SS=n($Ce,"A",{href:!0});var HGr=s(SS);Qlo=r(HGr,"LayoutLMModel"),HGr.forEach(t),Hlo=r($Ce," (LayoutLM model)"),$Ce.forEach(t),Ulo=i(C),Rp=n(C,"LI",{});var ICe=s(Rp);hZ=n(ICe,"STRONG",{});var UGr=s(hZ);Jlo=r(UGr,"layoutlmv2"),UGr.forEach(t),Ylo=r(ICe," \u2014 "),PS=n(ICe,"A",{href:!0});var JGr=s(PS);Klo=r(JGr,"LayoutLMv2Model"),JGr.forEach(t),Zlo=r(ICe," (LayoutLMv2 model)"),ICe.forEach(t),eio=i(C),Sp=n(C,"LI",{});var jCe=s(Sp);pZ=n(jCe,"STRONG",{});var YGr=s(pZ);oio=r(YGr,"led"),YGr.forEach(t),rio=r(jCe," \u2014 "),$S=n(jCe,"A",{href:!0});var KGr=s($S);tio=r(KGr,"LEDModel"),KGr.forEach(t),aio=r(jCe," (LED model)"),jCe.forEach(t),nio=i(C),Pp=n(C,"LI",{});var DCe=s(Pp);_Z=n(DCe,"STRONG",{});var ZGr=s(_Z);sio=r(ZGr,"longformer"),ZGr.forEach(t),lio=r(DCe," \u2014 "),IS=n(DCe,"A",{href:!0});var eXr=s(IS);iio=r(eXr,"LongformerModel"),eXr.forEach(t),dio=r(DCe," (Longformer model)"),DCe.forEach(t),cio=i(C),$p=n(C,"LI",{});var NCe=s($p);uZ=n(NCe,"STRONG",{});var oXr=s(uZ);fio=r(oXr,"luke"),oXr.forEach(t),mio=r(NCe," \u2014 "),jS=n(NCe,"A",{href:!0});var rXr=s(jS);gio=r(rXr,"LukeModel"),rXr.forEach(t),hio=r(NCe," (LUKE model)"),NCe.forEach(t),pio=i(C),Ip=n(C,"LI",{});var qCe=s(Ip);bZ=n(qCe,"STRONG",{});var tXr=s(bZ);_io=r(tXr,"lxmert"),tXr.forEach(t),uio=r(qCe," \u2014 "),DS=n(qCe,"A",{href:!0});var aXr=s(DS);bio=r(aXr,"LxmertModel"),aXr.forEach(t),vio=r(qCe," (LXMERT model)"),qCe.forEach(t),Tio=i(C),jp=n(C,"LI",{});var OCe=s(jp);vZ=n(OCe,"STRONG",{});var nXr=s(vZ);Fio=r(nXr,"m2m_100"),nXr.forEach(t),Cio=r(OCe," \u2014 "),NS=n(OCe,"A",{href:!0});var sXr=s(NS);Mio=r(sXr,"M2M100Model"),sXr.forEach(t),Eio=r(OCe," (M2M100 model)"),OCe.forEach(t),yio=i(C),Dp=n(C,"LI",{});var GCe=s(Dp);TZ=n(GCe,"STRONG",{});var lXr=s(TZ);wio=r(lXr,"marian"),lXr.forEach(t),Aio=r(GCe," \u2014 "),qS=n(GCe,"A",{href:!0});var iXr=s(qS);Lio=r(iXr,"MarianModel"),iXr.forEach(t),Bio=r(GCe," (Marian model)"),GCe.forEach(t),xio=i(C),Np=n(C,"LI",{});var XCe=s(Np);FZ=n(XCe,"STRONG",{});var dXr=s(FZ);kio=r(dXr,"maskformer"),dXr.forEach(t),Rio=r(XCe," \u2014 "),OS=n(XCe,"A",{href:!0});var cXr=s(OS);Sio=r(cXr,"MaskFormerModel"),cXr.forEach(t),Pio=r(XCe," (MaskFormer model)"),XCe.forEach(t),$io=i(C),qp=n(C,"LI",{});var VCe=s(qp);CZ=n(VCe,"STRONG",{});var fXr=s(CZ);Iio=r(fXr,"mbart"),fXr.forEach(t),jio=r(VCe," \u2014 "),GS=n(VCe,"A",{href:!0});var mXr=s(GS);Dio=r(mXr,"MBartModel"),mXr.forEach(t),Nio=r(VCe," (mBART model)"),VCe.forEach(t),qio=i(C),Op=n(C,"LI",{});var zCe=s(Op);MZ=n(zCe,"STRONG",{});var gXr=s(MZ);Oio=r(gXr,"megatron-bert"),gXr.forEach(t),Gio=r(zCe," \u2014 "),XS=n(zCe,"A",{href:!0});var hXr=s(XS);Xio=r(hXr,"MegatronBertModel"),hXr.forEach(t),Vio=r(zCe," (MegatronBert model)"),zCe.forEach(t),zio=i(C),Gp=n(C,"LI",{});var WCe=s(Gp);EZ=n(WCe,"STRONG",{});var pXr=s(EZ);Wio=r(pXr,"mobilebert"),pXr.forEach(t),Qio=r(WCe," \u2014 "),VS=n(WCe,"A",{href:!0});var _Xr=s(VS);Hio=r(_Xr,"MobileBertModel"),_Xr.forEach(t),Uio=r(WCe," (MobileBERT model)"),WCe.forEach(t),Jio=i(C),Xp=n(C,"LI",{});var QCe=s(Xp);yZ=n(QCe,"STRONG",{});var uXr=s(yZ);Yio=r(uXr,"mpnet"),uXr.forEach(t),Kio=r(QCe," \u2014 "),zS=n(QCe,"A",{href:!0});var bXr=s(zS);Zio=r(bXr,"MPNetModel"),bXr.forEach(t),edo=r(QCe," (MPNet model)"),QCe.forEach(t),odo=i(C),Vp=n(C,"LI",{});var HCe=s(Vp);wZ=n(HCe,"STRONG",{});var vXr=s(wZ);rdo=r(vXr,"mt5"),vXr.forEach(t),tdo=r(HCe," \u2014 "),WS=n(HCe,"A",{href:!0});var TXr=s(WS);ado=r(TXr,"MT5Model"),TXr.forEach(t),ndo=r(HCe," (mT5 model)"),HCe.forEach(t),sdo=i(C),zp=n(C,"LI",{});var UCe=s(zp);AZ=n(UCe,"STRONG",{});var FXr=s(AZ);ldo=r(FXr,"nystromformer"),FXr.forEach(t),ido=r(UCe," \u2014 "),QS=n(UCe,"A",{href:!0});var CXr=s(QS);ddo=r(CXr,"NystromformerModel"),CXr.forEach(t),cdo=r(UCe," (Nystromformer model)"),UCe.forEach(t),fdo=i(C),Wp=n(C,"LI",{});var JCe=s(Wp);LZ=n(JCe,"STRONG",{});var MXr=s(LZ);mdo=r(MXr,"openai-gpt"),MXr.forEach(t),gdo=r(JCe," \u2014 "),HS=n(JCe,"A",{href:!0});var EXr=s(HS);hdo=r(EXr,"OpenAIGPTModel"),EXr.forEach(t),pdo=r(JCe," (OpenAI GPT model)"),JCe.forEach(t),_do=i(C),Qp=n(C,"LI",{});var YCe=s(Qp);BZ=n(YCe,"STRONG",{});var yXr=s(BZ);udo=r(yXr,"pegasus"),yXr.forEach(t),bdo=r(YCe," \u2014 "),US=n(YCe,"A",{href:!0});var wXr=s(US);vdo=r(wXr,"PegasusModel"),wXr.forEach(t),Tdo=r(YCe," (Pegasus model)"),YCe.forEach(t),Fdo=i(C),Hp=n(C,"LI",{});var KCe=s(Hp);xZ=n(KCe,"STRONG",{});var AXr=s(xZ);Cdo=r(AXr,"perceiver"),AXr.forEach(t),Mdo=r(KCe," \u2014 "),JS=n(KCe,"A",{href:!0});var LXr=s(JS);Edo=r(LXr,"PerceiverModel"),LXr.forEach(t),ydo=r(KCe," (Perceiver model)"),KCe.forEach(t),wdo=i(C),Up=n(C,"LI",{});var ZCe=s(Up);kZ=n(ZCe,"STRONG",{});var BXr=s(kZ);Ado=r(BXr,"plbart"),BXr.forEach(t),Ldo=r(ZCe," \u2014 "),YS=n(ZCe,"A",{href:!0});var xXr=s(YS);Bdo=r(xXr,"PLBartModel"),xXr.forEach(t),xdo=r(ZCe," (PLBart model)"),ZCe.forEach(t),kdo=i(C),Jp=n(C,"LI",{});var eMe=s(Jp);RZ=n(eMe,"STRONG",{});var kXr=s(RZ);Rdo=r(kXr,"poolformer"),kXr.forEach(t),Sdo=r(eMe," \u2014 "),KS=n(eMe,"A",{href:!0});var RXr=s(KS);Pdo=r(RXr,"PoolFormerModel"),RXr.forEach(t),$do=r(eMe," (PoolFormer model)"),eMe.forEach(t),Ido=i(C),Yp=n(C,"LI",{});var oMe=s(Yp);SZ=n(oMe,"STRONG",{});var SXr=s(SZ);jdo=r(SXr,"prophetnet"),SXr.forEach(t),Ddo=r(oMe," \u2014 "),ZS=n(oMe,"A",{href:!0});var PXr=s(ZS);Ndo=r(PXr,"ProphetNetModel"),PXr.forEach(t),qdo=r(oMe," (ProphetNet model)"),oMe.forEach(t),Odo=i(C),Kp=n(C,"LI",{});var rMe=s(Kp);PZ=n(rMe,"STRONG",{});var $Xr=s(PZ);Gdo=r($Xr,"qdqbert"),$Xr.forEach(t),Xdo=r(rMe," \u2014 "),eP=n(rMe,"A",{href:!0});var IXr=s(eP);Vdo=r(IXr,"QDQBertModel"),IXr.forEach(t),zdo=r(rMe," (QDQBert model)"),rMe.forEach(t),Wdo=i(C),Zp=n(C,"LI",{});var tMe=s(Zp);$Z=n(tMe,"STRONG",{});var jXr=s($Z);Qdo=r(jXr,"reformer"),jXr.forEach(t),Hdo=r(tMe," \u2014 "),oP=n(tMe,"A",{href:!0});var DXr=s(oP);Udo=r(DXr,"ReformerModel"),DXr.forEach(t),Jdo=r(tMe," (Reformer model)"),tMe.forEach(t),Ydo=i(C),e_=n(C,"LI",{});var aMe=s(e_);IZ=n(aMe,"STRONG",{});var NXr=s(IZ);Kdo=r(NXr,"rembert"),NXr.forEach(t),Zdo=r(aMe," \u2014 "),rP=n(aMe,"A",{href:!0});var qXr=s(rP);eco=r(qXr,"RemBertModel"),qXr.forEach(t),oco=r(aMe," (RemBERT model)"),aMe.forEach(t),rco=i(C),o_=n(C,"LI",{});var nMe=s(o_);jZ=n(nMe,"STRONG",{});var OXr=s(jZ);tco=r(OXr,"resnet"),OXr.forEach(t),aco=r(nMe," \u2014 "),tP=n(nMe,"A",{href:!0});var GXr=s(tP);nco=r(GXr,"ResNetModel"),GXr.forEach(t),sco=r(nMe," (ResNet model)"),nMe.forEach(t),lco=i(C),r_=n(C,"LI",{});var sMe=s(r_);DZ=n(sMe,"STRONG",{});var XXr=s(DZ);ico=r(XXr,"retribert"),XXr.forEach(t),dco=r(sMe," \u2014 "),aP=n(sMe,"A",{href:!0});var VXr=s(aP);cco=r(VXr,"RetriBertModel"),VXr.forEach(t),fco=r(sMe," (RetriBERT model)"),sMe.forEach(t),mco=i(C),t_=n(C,"LI",{});var lMe=s(t_);NZ=n(lMe,"STRONG",{});var zXr=s(NZ);gco=r(zXr,"roberta"),zXr.forEach(t),hco=r(lMe," \u2014 "),nP=n(lMe,"A",{href:!0});var WXr=s(nP);pco=r(WXr,"RobertaModel"),WXr.forEach(t),_co=r(lMe," (RoBERTa model)"),lMe.forEach(t),uco=i(C),a_=n(C,"LI",{});var iMe=s(a_);qZ=n(iMe,"STRONG",{});var QXr=s(qZ);bco=r(QXr,"roformer"),QXr.forEach(t),vco=r(iMe," \u2014 "),sP=n(iMe,"A",{href:!0});var HXr=s(sP);Tco=r(HXr,"RoFormerModel"),HXr.forEach(t),Fco=r(iMe," (RoFormer model)"),iMe.forEach(t),Cco=i(C),n_=n(C,"LI",{});var dMe=s(n_);OZ=n(dMe,"STRONG",{});var UXr=s(OZ);Mco=r(UXr,"segformer"),UXr.forEach(t),Eco=r(dMe," \u2014 "),lP=n(dMe,"A",{href:!0});var JXr=s(lP);yco=r(JXr,"SegformerModel"),JXr.forEach(t),wco=r(dMe," (SegFormer model)"),dMe.forEach(t),Aco=i(C),s_=n(C,"LI",{});var cMe=s(s_);GZ=n(cMe,"STRONG",{});var YXr=s(GZ);Lco=r(YXr,"sew"),YXr.forEach(t),Bco=r(cMe," \u2014 "),iP=n(cMe,"A",{href:!0});var KXr=s(iP);xco=r(KXr,"SEWModel"),KXr.forEach(t),kco=r(cMe," (SEW model)"),cMe.forEach(t),Rco=i(C),l_=n(C,"LI",{});var fMe=s(l_);XZ=n(fMe,"STRONG",{});var ZXr=s(XZ);Sco=r(ZXr,"sew-d"),ZXr.forEach(t),Pco=r(fMe," \u2014 "),dP=n(fMe,"A",{href:!0});var eVr=s(dP);$co=r(eVr,"SEWDModel"),eVr.forEach(t),Ico=r(fMe," (SEW-D model)"),fMe.forEach(t),jco=i(C),i_=n(C,"LI",{});var mMe=s(i_);VZ=n(mMe,"STRONG",{});var oVr=s(VZ);Dco=r(oVr,"speech_to_text"),oVr.forEach(t),Nco=r(mMe," \u2014 "),cP=n(mMe,"A",{href:!0});var rVr=s(cP);qco=r(rVr,"Speech2TextModel"),rVr.forEach(t),Oco=r(mMe," (Speech2Text model)"),mMe.forEach(t),Gco=i(C),d_=n(C,"LI",{});var gMe=s(d_);zZ=n(gMe,"STRONG",{});var tVr=s(zZ);Xco=r(tVr,"splinter"),tVr.forEach(t),Vco=r(gMe," \u2014 "),fP=n(gMe,"A",{href:!0});var aVr=s(fP);zco=r(aVr,"SplinterModel"),aVr.forEach(t),Wco=r(gMe," (Splinter model)"),gMe.forEach(t),Qco=i(C),c_=n(C,"LI",{});var hMe=s(c_);WZ=n(hMe,"STRONG",{});var nVr=s(WZ);Hco=r(nVr,"squeezebert"),nVr.forEach(t),Uco=r(hMe," \u2014 "),mP=n(hMe,"A",{href:!0});var sVr=s(mP);Jco=r(sVr,"SqueezeBertModel"),sVr.forEach(t),Yco=r(hMe," (SqueezeBERT model)"),hMe.forEach(t),Kco=i(C),f_=n(C,"LI",{});var pMe=s(f_);QZ=n(pMe,"STRONG",{});var lVr=s(QZ);Zco=r(lVr,"swin"),lVr.forEach(t),efo=r(pMe," \u2014 "),gP=n(pMe,"A",{href:!0});var iVr=s(gP);ofo=r(iVr,"SwinModel"),iVr.forEach(t),rfo=r(pMe," (Swin model)"),pMe.forEach(t),tfo=i(C),m_=n(C,"LI",{});var _Me=s(m_);HZ=n(_Me,"STRONG",{});var dVr=s(HZ);afo=r(dVr,"t5"),dVr.forEach(t),nfo=r(_Me," \u2014 "),hP=n(_Me,"A",{href:!0});var cVr=s(hP);sfo=r(cVr,"T5Model"),cVr.forEach(t),lfo=r(_Me," (T5 model)"),_Me.forEach(t),ifo=i(C),g_=n(C,"LI",{});var uMe=s(g_);UZ=n(uMe,"STRONG",{});var fVr=s(UZ);dfo=r(fVr,"tapas"),fVr.forEach(t),cfo=r(uMe," \u2014 "),pP=n(uMe,"A",{href:!0});var mVr=s(pP);ffo=r(mVr,"TapasModel"),mVr.forEach(t),mfo=r(uMe," (TAPAS model)"),uMe.forEach(t),gfo=i(C),h_=n(C,"LI",{});var bMe=s(h_);JZ=n(bMe,"STRONG",{});var gVr=s(JZ);hfo=r(gVr,"transfo-xl"),gVr.forEach(t),pfo=r(bMe," \u2014 "),_P=n(bMe,"A",{href:!0});var hVr=s(_P);_fo=r(hVr,"TransfoXLModel"),hVr.forEach(t),ufo=r(bMe," (Transformer-XL model)"),bMe.forEach(t),bfo=i(C),p_=n(C,"LI",{});var vMe=s(p_);YZ=n(vMe,"STRONG",{});var pVr=s(YZ);vfo=r(pVr,"unispeech"),pVr.forEach(t),Tfo=r(vMe," \u2014 "),uP=n(vMe,"A",{href:!0});var _Vr=s(uP);Ffo=r(_Vr,"UniSpeechModel"),_Vr.forEach(t),Cfo=r(vMe," (UniSpeech model)"),vMe.forEach(t),Mfo=i(C),__=n(C,"LI",{});var TMe=s(__);KZ=n(TMe,"STRONG",{});var uVr=s(KZ);Efo=r(uVr,"unispeech-sat"),uVr.forEach(t),yfo=r(TMe," \u2014 "),bP=n(TMe,"A",{href:!0});var bVr=s(bP);wfo=r(bVr,"UniSpeechSatModel"),bVr.forEach(t),Afo=r(TMe," (UniSpeechSat model)"),TMe.forEach(t),Lfo=i(C),u_=n(C,"LI",{});var FMe=s(u_);ZZ=n(FMe,"STRONG",{});var vVr=s(ZZ);Bfo=r(vVr,"van"),vVr.forEach(t),xfo=r(FMe," \u2014 "),vP=n(FMe,"A",{href:!0});var TVr=s(vP);kfo=r(TVr,"VanModel"),TVr.forEach(t),Rfo=r(FMe," (VAN model)"),FMe.forEach(t),Sfo=i(C),b_=n(C,"LI",{});var CMe=s(b_);eee=n(CMe,"STRONG",{});var FVr=s(eee);Pfo=r(FVr,"vilt"),FVr.forEach(t),$fo=r(CMe," \u2014 "),TP=n(CMe,"A",{href:!0});var CVr=s(TP);Ifo=r(CVr,"ViltModel"),CVr.forEach(t),jfo=r(CMe," (ViLT model)"),CMe.forEach(t),Dfo=i(C),v_=n(C,"LI",{});var MMe=s(v_);oee=n(MMe,"STRONG",{});var MVr=s(oee);Nfo=r(MVr,"vision-text-dual-encoder"),MVr.forEach(t),qfo=r(MMe," \u2014 "),FP=n(MMe,"A",{href:!0});var EVr=s(FP);Ofo=r(EVr,"VisionTextDualEncoderModel"),EVr.forEach(t),Gfo=r(MMe," (VisionTextDualEncoder model)"),MMe.forEach(t),Xfo=i(C),T_=n(C,"LI",{});var EMe=s(T_);ree=n(EMe,"STRONG",{});var yVr=s(ree);Vfo=r(yVr,"visual_bert"),yVr.forEach(t),zfo=r(EMe," \u2014 "),CP=n(EMe,"A",{href:!0});var wVr=s(CP);Wfo=r(wVr,"VisualBertModel"),wVr.forEach(t),Qfo=r(EMe," (VisualBert model)"),EMe.forEach(t),Hfo=i(C),F_=n(C,"LI",{});var yMe=s(F_);tee=n(yMe,"STRONG",{});var AVr=s(tee);Ufo=r(AVr,"vit"),AVr.forEach(t),Jfo=r(yMe," \u2014 "),MP=n(yMe,"A",{href:!0});var LVr=s(MP);Yfo=r(LVr,"ViTModel"),LVr.forEach(t),Kfo=r(yMe," (ViT model)"),yMe.forEach(t),Zfo=i(C),C_=n(C,"LI",{});var wMe=s(C_);aee=n(wMe,"STRONG",{});var BVr=s(aee);emo=r(BVr,"vit_mae"),BVr.forEach(t),omo=r(wMe," \u2014 "),EP=n(wMe,"A",{href:!0});var xVr=s(EP);rmo=r(xVr,"ViTMAEModel"),xVr.forEach(t),tmo=r(wMe," (ViTMAE model)"),wMe.forEach(t),amo=i(C),M_=n(C,"LI",{});var AMe=s(M_);nee=n(AMe,"STRONG",{});var kVr=s(nee);nmo=r(kVr,"wav2vec2"),kVr.forEach(t),smo=r(AMe," \u2014 "),yP=n(AMe,"A",{href:!0});var RVr=s(yP);lmo=r(RVr,"Wav2Vec2Model"),RVr.forEach(t),imo=r(AMe," (Wav2Vec2 model)"),AMe.forEach(t),dmo=i(C),E_=n(C,"LI",{});var LMe=s(E_);see=n(LMe,"STRONG",{});var SVr=s(see);cmo=r(SVr,"wavlm"),SVr.forEach(t),fmo=r(LMe," \u2014 "),wP=n(LMe,"A",{href:!0});var PVr=s(wP);mmo=r(PVr,"WavLMModel"),PVr.forEach(t),gmo=r(LMe," (WavLM model)"),LMe.forEach(t),hmo=i(C),y_=n(C,"LI",{});var BMe=s(y_);lee=n(BMe,"STRONG",{});var $Vr=s(lee);pmo=r($Vr,"xglm"),$Vr.forEach(t),_mo=r(BMe," \u2014 "),AP=n(BMe,"A",{href:!0});var IVr=s(AP);umo=r(IVr,"XGLMModel"),IVr.forEach(t),bmo=r(BMe," (XGLM model)"),BMe.forEach(t),vmo=i(C),w_=n(C,"LI",{});var xMe=s(w_);iee=n(xMe,"STRONG",{});var jVr=s(iee);Tmo=r(jVr,"xlm"),jVr.forEach(t),Fmo=r(xMe," \u2014 "),LP=n(xMe,"A",{href:!0});var DVr=s(LP);Cmo=r(DVr,"XLMModel"),DVr.forEach(t),Mmo=r(xMe," (XLM model)"),xMe.forEach(t),Emo=i(C),A_=n(C,"LI",{});var kMe=s(A_);dee=n(kMe,"STRONG",{});var NVr=s(dee);ymo=r(NVr,"xlm-prophetnet"),NVr.forEach(t),wmo=r(kMe," \u2014 "),BP=n(kMe,"A",{href:!0});var qVr=s(BP);Amo=r(qVr,"XLMProphetNetModel"),qVr.forEach(t),Lmo=r(kMe," (XLMProphetNet model)"),kMe.forEach(t),Bmo=i(C),L_=n(C,"LI",{});var RMe=s(L_);cee=n(RMe,"STRONG",{});var OVr=s(cee);xmo=r(OVr,"xlm-roberta"),OVr.forEach(t),kmo=r(RMe," \u2014 "),xP=n(RMe,"A",{href:!0});var GVr=s(xP);Rmo=r(GVr,"XLMRobertaModel"),GVr.forEach(t),Smo=r(RMe," (XLM-RoBERTa model)"),RMe.forEach(t),Pmo=i(C),B_=n(C,"LI",{});var SMe=s(B_);fee=n(SMe,"STRONG",{});var XVr=s(fee);$mo=r(XVr,"xlm-roberta-xl"),XVr.forEach(t),Imo=r(SMe," \u2014 "),kP=n(SMe,"A",{href:!0});var VVr=s(kP);jmo=r(VVr,"XLMRobertaXLModel"),VVr.forEach(t),Dmo=r(SMe," (XLM-RoBERTa-XL model)"),SMe.forEach(t),Nmo=i(C),x_=n(C,"LI",{});var PMe=s(x_);mee=n(PMe,"STRONG",{});var zVr=s(mee);qmo=r(zVr,"xlnet"),zVr.forEach(t),Omo=r(PMe," \u2014 "),RP=n(PMe,"A",{href:!0});var WVr=s(RP);Gmo=r(WVr,"XLNetModel"),WVr.forEach(t),Xmo=r(PMe," (XLNet model)"),PMe.forEach(t),Vmo=i(C),k_=n(C,"LI",{});var $Me=s(k_);gee=n($Me,"STRONG",{});var QVr=s(gee);zmo=r(QVr,"yoso"),QVr.forEach(t),Wmo=r($Me," \u2014 "),SP=n($Me,"A",{href:!0});var HVr=s(SP);Qmo=r(HVr,"YosoModel"),HVr.forEach(t),Hmo=r($Me," (YOSO model)"),$Me.forEach(t),C.forEach(t),Umo=i(Xt),R_=n(Xt,"P",{});var IMe=s(R_);Jmo=r(IMe,"The model is set in evaluation mode by default using "),hee=n(IMe,"CODE",{});var UVr=s(hee);Ymo=r(UVr,"model.eval()"),UVr.forEach(t),Kmo=r(IMe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pee=n(IMe,"CODE",{});var JVr=s(pee);Zmo=r(JVr,"model.train()"),JVr.forEach(t),IMe.forEach(t),ego=i(Xt),_ee=n(Xt,"P",{});var YVr=s(_ee);ogo=r(YVr,"Examples:"),YVr.forEach(t),rgo=i(Xt),m(eE.$$.fragment,Xt),Xt.forEach(t),Ys.forEach(t),Nke=i(d),ld=n(d,"H2",{class:!0});var JSe=s(ld);S_=n(JSe,"A",{id:!0,class:!0,href:!0});var KVr=s(S_);uee=n(KVr,"SPAN",{});var ZVr=s(uee);m(oE.$$.fragment,ZVr),ZVr.forEach(t),KVr.forEach(t),tgo=i(JSe),bee=n(JSe,"SPAN",{});var ezr=s(bee);ago=r(ezr,"AutoModelForPreTraining"),ezr.forEach(t),JSe.forEach(t),qke=i(d),Ko=n(d,"DIV",{class:!0});var Zs=s(Ko);m(rE.$$.fragment,Zs),ngo=i(Zs),id=n(Zs,"P",{});var cW=s(id);sgo=r(cW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),vee=n(cW,"CODE",{});var ozr=s(vee);lgo=r(ozr,"from_pretrained()"),ozr.forEach(t),igo=r(cW,"class method or the "),Tee=n(cW,"CODE",{});var rzr=s(Tee);dgo=r(rzr,"from_config()"),rzr.forEach(t),cgo=r(cW,`class
method.`),cW.forEach(t),fgo=i(Zs),tE=n(Zs,"P",{});var YSe=s(tE);mgo=r(YSe,"This class cannot be instantiated directly using "),Fee=n(YSe,"CODE",{});var tzr=s(Fee);ggo=r(tzr,"__init__()"),tzr.forEach(t),hgo=r(YSe," (throws an error)."),YSe.forEach(t),pgo=i(Zs),Qr=n(Zs,"DIV",{class:!0});var el=s(Qr);m(aE.$$.fragment,el),_go=i(el),Cee=n(el,"P",{});var azr=s(Cee);ugo=r(azr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),azr.forEach(t),bgo=i(el),dd=n(el,"P",{});var fW=s(dd);vgo=r(fW,`Note:
Loading a model from its configuration file does `),Mee=n(fW,"STRONG",{});var nzr=s(Mee);Tgo=r(nzr,"not"),nzr.forEach(t),Fgo=r(fW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Eee=n(fW,"CODE",{});var szr=s(Eee);Cgo=r(szr,"from_pretrained()"),szr.forEach(t),Mgo=r(fW,"to load the model weights."),fW.forEach(t),Ego=i(el),yee=n(el,"P",{});var lzr=s(yee);ygo=r(lzr,"Examples:"),lzr.forEach(t),wgo=i(el),m(nE.$$.fragment,el),el.forEach(t),Ago=i(Zs),Ne=n(Zs,"DIV",{class:!0});var Vt=s(Ne);m(sE.$$.fragment,Vt),Lgo=i(Vt),wee=n(Vt,"P",{});var izr=s(wee);Bgo=r(izr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),izr.forEach(t),xgo=i(Vt),Ua=n(Vt,"P",{});var bM=s(Ua);kgo=r(bM,"The model class to instantiate is selected based on the "),Aee=n(bM,"CODE",{});var dzr=s(Aee);Rgo=r(dzr,"model_type"),dzr.forEach(t),Sgo=r(bM,` property of the config object (either
passed as an argument or loaded from `),Lee=n(bM,"CODE",{});var czr=s(Lee);Pgo=r(czr,"pretrained_model_name_or_path"),czr.forEach(t),$go=r(bM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bee=n(bM,"CODE",{});var fzr=s(Bee);Igo=r(fzr,"pretrained_model_name_or_path"),fzr.forEach(t),jgo=r(bM,":"),bM.forEach(t),Dgo=i(Vt),k=n(Vt,"UL",{});var S=s(k);P_=n(S,"LI",{});var jMe=s(P_);xee=n(jMe,"STRONG",{});var mzr=s(xee);Ngo=r(mzr,"albert"),mzr.forEach(t),qgo=r(jMe," \u2014 "),PP=n(jMe,"A",{href:!0});var gzr=s(PP);Ogo=r(gzr,"AlbertForPreTraining"),gzr.forEach(t),Ggo=r(jMe," (ALBERT model)"),jMe.forEach(t),Xgo=i(S),$_=n(S,"LI",{});var DMe=s($_);kee=n(DMe,"STRONG",{});var hzr=s(kee);Vgo=r(hzr,"bart"),hzr.forEach(t),zgo=r(DMe," \u2014 "),$P=n(DMe,"A",{href:!0});var pzr=s($P);Wgo=r(pzr,"BartForConditionalGeneration"),pzr.forEach(t),Qgo=r(DMe," (BART model)"),DMe.forEach(t),Hgo=i(S),I_=n(S,"LI",{});var NMe=s(I_);Ree=n(NMe,"STRONG",{});var _zr=s(Ree);Ugo=r(_zr,"bert"),_zr.forEach(t),Jgo=r(NMe," \u2014 "),IP=n(NMe,"A",{href:!0});var uzr=s(IP);Ygo=r(uzr,"BertForPreTraining"),uzr.forEach(t),Kgo=r(NMe," (BERT model)"),NMe.forEach(t),Zgo=i(S),j_=n(S,"LI",{});var qMe=s(j_);See=n(qMe,"STRONG",{});var bzr=s(See);eho=r(bzr,"big_bird"),bzr.forEach(t),oho=r(qMe," \u2014 "),jP=n(qMe,"A",{href:!0});var vzr=s(jP);rho=r(vzr,"BigBirdForPreTraining"),vzr.forEach(t),tho=r(qMe," (BigBird model)"),qMe.forEach(t),aho=i(S),D_=n(S,"LI",{});var OMe=s(D_);Pee=n(OMe,"STRONG",{});var Tzr=s(Pee);nho=r(Tzr,"camembert"),Tzr.forEach(t),sho=r(OMe," \u2014 "),DP=n(OMe,"A",{href:!0});var Fzr=s(DP);lho=r(Fzr,"CamembertForMaskedLM"),Fzr.forEach(t),iho=r(OMe," (CamemBERT model)"),OMe.forEach(t),dho=i(S),N_=n(S,"LI",{});var GMe=s(N_);$ee=n(GMe,"STRONG",{});var Czr=s($ee);cho=r(Czr,"ctrl"),Czr.forEach(t),fho=r(GMe," \u2014 "),NP=n(GMe,"A",{href:!0});var Mzr=s(NP);mho=r(Mzr,"CTRLLMHeadModel"),Mzr.forEach(t),gho=r(GMe," (CTRL model)"),GMe.forEach(t),hho=i(S),q_=n(S,"LI",{});var XMe=s(q_);Iee=n(XMe,"STRONG",{});var Ezr=s(Iee);pho=r(Ezr,"data2vec-text"),Ezr.forEach(t),_ho=r(XMe," \u2014 "),qP=n(XMe,"A",{href:!0});var yzr=s(qP);uho=r(yzr,"Data2VecTextForMaskedLM"),yzr.forEach(t),bho=r(XMe," (Data2VecText model)"),XMe.forEach(t),vho=i(S),O_=n(S,"LI",{});var VMe=s(O_);jee=n(VMe,"STRONG",{});var wzr=s(jee);Tho=r(wzr,"deberta"),wzr.forEach(t),Fho=r(VMe," \u2014 "),OP=n(VMe,"A",{href:!0});var Azr=s(OP);Cho=r(Azr,"DebertaForMaskedLM"),Azr.forEach(t),Mho=r(VMe," (DeBERTa model)"),VMe.forEach(t),Eho=i(S),G_=n(S,"LI",{});var zMe=s(G_);Dee=n(zMe,"STRONG",{});var Lzr=s(Dee);yho=r(Lzr,"deberta-v2"),Lzr.forEach(t),who=r(zMe," \u2014 "),GP=n(zMe,"A",{href:!0});var Bzr=s(GP);Aho=r(Bzr,"DebertaV2ForMaskedLM"),Bzr.forEach(t),Lho=r(zMe," (DeBERTa-v2 model)"),zMe.forEach(t),Bho=i(S),X_=n(S,"LI",{});var WMe=s(X_);Nee=n(WMe,"STRONG",{});var xzr=s(Nee);xho=r(xzr,"distilbert"),xzr.forEach(t),kho=r(WMe," \u2014 "),XP=n(WMe,"A",{href:!0});var kzr=s(XP);Rho=r(kzr,"DistilBertForMaskedLM"),kzr.forEach(t),Sho=r(WMe," (DistilBERT model)"),WMe.forEach(t),Pho=i(S),V_=n(S,"LI",{});var QMe=s(V_);qee=n(QMe,"STRONG",{});var Rzr=s(qee);$ho=r(Rzr,"electra"),Rzr.forEach(t),Iho=r(QMe," \u2014 "),VP=n(QMe,"A",{href:!0});var Szr=s(VP);jho=r(Szr,"ElectraForPreTraining"),Szr.forEach(t),Dho=r(QMe," (ELECTRA model)"),QMe.forEach(t),Nho=i(S),z_=n(S,"LI",{});var HMe=s(z_);Oee=n(HMe,"STRONG",{});var Pzr=s(Oee);qho=r(Pzr,"flaubert"),Pzr.forEach(t),Oho=r(HMe," \u2014 "),zP=n(HMe,"A",{href:!0});var $zr=s(zP);Gho=r($zr,"FlaubertWithLMHeadModel"),$zr.forEach(t),Xho=r(HMe," (FlauBERT model)"),HMe.forEach(t),Vho=i(S),W_=n(S,"LI",{});var UMe=s(W_);Gee=n(UMe,"STRONG",{});var Izr=s(Gee);zho=r(Izr,"fnet"),Izr.forEach(t),Who=r(UMe," \u2014 "),WP=n(UMe,"A",{href:!0});var jzr=s(WP);Qho=r(jzr,"FNetForPreTraining"),jzr.forEach(t),Hho=r(UMe," (FNet model)"),UMe.forEach(t),Uho=i(S),Q_=n(S,"LI",{});var JMe=s(Q_);Xee=n(JMe,"STRONG",{});var Dzr=s(Xee);Jho=r(Dzr,"fsmt"),Dzr.forEach(t),Yho=r(JMe," \u2014 "),QP=n(JMe,"A",{href:!0});var Nzr=s(QP);Kho=r(Nzr,"FSMTForConditionalGeneration"),Nzr.forEach(t),Zho=r(JMe," (FairSeq Machine-Translation model)"),JMe.forEach(t),epo=i(S),H_=n(S,"LI",{});var YMe=s(H_);Vee=n(YMe,"STRONG",{});var qzr=s(Vee);opo=r(qzr,"funnel"),qzr.forEach(t),rpo=r(YMe," \u2014 "),HP=n(YMe,"A",{href:!0});var Ozr=s(HP);tpo=r(Ozr,"FunnelForPreTraining"),Ozr.forEach(t),apo=r(YMe," (Funnel Transformer model)"),YMe.forEach(t),npo=i(S),U_=n(S,"LI",{});var KMe=s(U_);zee=n(KMe,"STRONG",{});var Gzr=s(zee);spo=r(Gzr,"gpt2"),Gzr.forEach(t),lpo=r(KMe," \u2014 "),UP=n(KMe,"A",{href:!0});var Xzr=s(UP);ipo=r(Xzr,"GPT2LMHeadModel"),Xzr.forEach(t),dpo=r(KMe," (OpenAI GPT-2 model)"),KMe.forEach(t),cpo=i(S),J_=n(S,"LI",{});var ZMe=s(J_);Wee=n(ZMe,"STRONG",{});var Vzr=s(Wee);fpo=r(Vzr,"ibert"),Vzr.forEach(t),mpo=r(ZMe," \u2014 "),JP=n(ZMe,"A",{href:!0});var zzr=s(JP);gpo=r(zzr,"IBertForMaskedLM"),zzr.forEach(t),hpo=r(ZMe," (I-BERT model)"),ZMe.forEach(t),ppo=i(S),Y_=n(S,"LI",{});var e4e=s(Y_);Qee=n(e4e,"STRONG",{});var Wzr=s(Qee);_po=r(Wzr,"layoutlm"),Wzr.forEach(t),upo=r(e4e," \u2014 "),YP=n(e4e,"A",{href:!0});var Qzr=s(YP);bpo=r(Qzr,"LayoutLMForMaskedLM"),Qzr.forEach(t),vpo=r(e4e," (LayoutLM model)"),e4e.forEach(t),Tpo=i(S),K_=n(S,"LI",{});var o4e=s(K_);Hee=n(o4e,"STRONG",{});var Hzr=s(Hee);Fpo=r(Hzr,"longformer"),Hzr.forEach(t),Cpo=r(o4e," \u2014 "),KP=n(o4e,"A",{href:!0});var Uzr=s(KP);Mpo=r(Uzr,"LongformerForMaskedLM"),Uzr.forEach(t),Epo=r(o4e," (Longformer model)"),o4e.forEach(t),ypo=i(S),Z_=n(S,"LI",{});var r4e=s(Z_);Uee=n(r4e,"STRONG",{});var Jzr=s(Uee);wpo=r(Jzr,"lxmert"),Jzr.forEach(t),Apo=r(r4e," \u2014 "),ZP=n(r4e,"A",{href:!0});var Yzr=s(ZP);Lpo=r(Yzr,"LxmertForPreTraining"),Yzr.forEach(t),Bpo=r(r4e," (LXMERT model)"),r4e.forEach(t),xpo=i(S),eu=n(S,"LI",{});var t4e=s(eu);Jee=n(t4e,"STRONG",{});var Kzr=s(Jee);kpo=r(Kzr,"megatron-bert"),Kzr.forEach(t),Rpo=r(t4e," \u2014 "),e$=n(t4e,"A",{href:!0});var Zzr=s(e$);Spo=r(Zzr,"MegatronBertForPreTraining"),Zzr.forEach(t),Ppo=r(t4e," (MegatronBert model)"),t4e.forEach(t),$po=i(S),ou=n(S,"LI",{});var a4e=s(ou);Yee=n(a4e,"STRONG",{});var eWr=s(Yee);Ipo=r(eWr,"mobilebert"),eWr.forEach(t),jpo=r(a4e," \u2014 "),o$=n(a4e,"A",{href:!0});var oWr=s(o$);Dpo=r(oWr,"MobileBertForPreTraining"),oWr.forEach(t),Npo=r(a4e," (MobileBERT model)"),a4e.forEach(t),qpo=i(S),ru=n(S,"LI",{});var n4e=s(ru);Kee=n(n4e,"STRONG",{});var rWr=s(Kee);Opo=r(rWr,"mpnet"),rWr.forEach(t),Gpo=r(n4e," \u2014 "),r$=n(n4e,"A",{href:!0});var tWr=s(r$);Xpo=r(tWr,"MPNetForMaskedLM"),tWr.forEach(t),Vpo=r(n4e," (MPNet model)"),n4e.forEach(t),zpo=i(S),tu=n(S,"LI",{});var s4e=s(tu);Zee=n(s4e,"STRONG",{});var aWr=s(Zee);Wpo=r(aWr,"openai-gpt"),aWr.forEach(t),Qpo=r(s4e," \u2014 "),t$=n(s4e,"A",{href:!0});var nWr=s(t$);Hpo=r(nWr,"OpenAIGPTLMHeadModel"),nWr.forEach(t),Upo=r(s4e," (OpenAI GPT model)"),s4e.forEach(t),Jpo=i(S),au=n(S,"LI",{});var l4e=s(au);eoe=n(l4e,"STRONG",{});var sWr=s(eoe);Ypo=r(sWr,"retribert"),sWr.forEach(t),Kpo=r(l4e," \u2014 "),a$=n(l4e,"A",{href:!0});var lWr=s(a$);Zpo=r(lWr,"RetriBertModel"),lWr.forEach(t),e_o=r(l4e," (RetriBERT model)"),l4e.forEach(t),o_o=i(S),nu=n(S,"LI",{});var i4e=s(nu);ooe=n(i4e,"STRONG",{});var iWr=s(ooe);r_o=r(iWr,"roberta"),iWr.forEach(t),t_o=r(i4e," \u2014 "),n$=n(i4e,"A",{href:!0});var dWr=s(n$);a_o=r(dWr,"RobertaForMaskedLM"),dWr.forEach(t),n_o=r(i4e," (RoBERTa model)"),i4e.forEach(t),s_o=i(S),su=n(S,"LI",{});var d4e=s(su);roe=n(d4e,"STRONG",{});var cWr=s(roe);l_o=r(cWr,"squeezebert"),cWr.forEach(t),i_o=r(d4e," \u2014 "),s$=n(d4e,"A",{href:!0});var fWr=s(s$);d_o=r(fWr,"SqueezeBertForMaskedLM"),fWr.forEach(t),c_o=r(d4e," (SqueezeBERT model)"),d4e.forEach(t),f_o=i(S),lu=n(S,"LI",{});var c4e=s(lu);toe=n(c4e,"STRONG",{});var mWr=s(toe);m_o=r(mWr,"t5"),mWr.forEach(t),g_o=r(c4e," \u2014 "),l$=n(c4e,"A",{href:!0});var gWr=s(l$);h_o=r(gWr,"T5ForConditionalGeneration"),gWr.forEach(t),p_o=r(c4e," (T5 model)"),c4e.forEach(t),__o=i(S),iu=n(S,"LI",{});var f4e=s(iu);aoe=n(f4e,"STRONG",{});var hWr=s(aoe);u_o=r(hWr,"tapas"),hWr.forEach(t),b_o=r(f4e," \u2014 "),i$=n(f4e,"A",{href:!0});var pWr=s(i$);v_o=r(pWr,"TapasForMaskedLM"),pWr.forEach(t),T_o=r(f4e," (TAPAS model)"),f4e.forEach(t),F_o=i(S),du=n(S,"LI",{});var m4e=s(du);noe=n(m4e,"STRONG",{});var _Wr=s(noe);C_o=r(_Wr,"transfo-xl"),_Wr.forEach(t),M_o=r(m4e," \u2014 "),d$=n(m4e,"A",{href:!0});var uWr=s(d$);E_o=r(uWr,"TransfoXLLMHeadModel"),uWr.forEach(t),y_o=r(m4e," (Transformer-XL model)"),m4e.forEach(t),w_o=i(S),cu=n(S,"LI",{});var g4e=s(cu);soe=n(g4e,"STRONG",{});var bWr=s(soe);A_o=r(bWr,"unispeech"),bWr.forEach(t),L_o=r(g4e," \u2014 "),c$=n(g4e,"A",{href:!0});var vWr=s(c$);B_o=r(vWr,"UniSpeechForPreTraining"),vWr.forEach(t),x_o=r(g4e," (UniSpeech model)"),g4e.forEach(t),k_o=i(S),fu=n(S,"LI",{});var h4e=s(fu);loe=n(h4e,"STRONG",{});var TWr=s(loe);R_o=r(TWr,"unispeech-sat"),TWr.forEach(t),S_o=r(h4e," \u2014 "),f$=n(h4e,"A",{href:!0});var FWr=s(f$);P_o=r(FWr,"UniSpeechSatForPreTraining"),FWr.forEach(t),$_o=r(h4e," (UniSpeechSat model)"),h4e.forEach(t),I_o=i(S),mu=n(S,"LI",{});var p4e=s(mu);ioe=n(p4e,"STRONG",{});var CWr=s(ioe);j_o=r(CWr,"visual_bert"),CWr.forEach(t),D_o=r(p4e," \u2014 "),m$=n(p4e,"A",{href:!0});var MWr=s(m$);N_o=r(MWr,"VisualBertForPreTraining"),MWr.forEach(t),q_o=r(p4e," (VisualBert model)"),p4e.forEach(t),O_o=i(S),gu=n(S,"LI",{});var _4e=s(gu);doe=n(_4e,"STRONG",{});var EWr=s(doe);G_o=r(EWr,"vit_mae"),EWr.forEach(t),X_o=r(_4e," \u2014 "),g$=n(_4e,"A",{href:!0});var yWr=s(g$);V_o=r(yWr,"ViTMAEForPreTraining"),yWr.forEach(t),z_o=r(_4e," (ViTMAE model)"),_4e.forEach(t),W_o=i(S),hu=n(S,"LI",{});var u4e=s(hu);coe=n(u4e,"STRONG",{});var wWr=s(coe);Q_o=r(wWr,"wav2vec2"),wWr.forEach(t),H_o=r(u4e," \u2014 "),h$=n(u4e,"A",{href:!0});var AWr=s(h$);U_o=r(AWr,"Wav2Vec2ForPreTraining"),AWr.forEach(t),J_o=r(u4e," (Wav2Vec2 model)"),u4e.forEach(t),Y_o=i(S),pu=n(S,"LI",{});var b4e=s(pu);foe=n(b4e,"STRONG",{});var LWr=s(foe);K_o=r(LWr,"xlm"),LWr.forEach(t),Z_o=r(b4e," \u2014 "),p$=n(b4e,"A",{href:!0});var BWr=s(p$);euo=r(BWr,"XLMWithLMHeadModel"),BWr.forEach(t),ouo=r(b4e," (XLM model)"),b4e.forEach(t),ruo=i(S),_u=n(S,"LI",{});var v4e=s(_u);moe=n(v4e,"STRONG",{});var xWr=s(moe);tuo=r(xWr,"xlm-roberta"),xWr.forEach(t),auo=r(v4e," \u2014 "),_$=n(v4e,"A",{href:!0});var kWr=s(_$);nuo=r(kWr,"XLMRobertaForMaskedLM"),kWr.forEach(t),suo=r(v4e," (XLM-RoBERTa model)"),v4e.forEach(t),luo=i(S),uu=n(S,"LI",{});var T4e=s(uu);goe=n(T4e,"STRONG",{});var RWr=s(goe);iuo=r(RWr,"xlm-roberta-xl"),RWr.forEach(t),duo=r(T4e," \u2014 "),u$=n(T4e,"A",{href:!0});var SWr=s(u$);cuo=r(SWr,"XLMRobertaXLForMaskedLM"),SWr.forEach(t),fuo=r(T4e," (XLM-RoBERTa-XL model)"),T4e.forEach(t),muo=i(S),bu=n(S,"LI",{});var F4e=s(bu);hoe=n(F4e,"STRONG",{});var PWr=s(hoe);guo=r(PWr,"xlnet"),PWr.forEach(t),huo=r(F4e," \u2014 "),b$=n(F4e,"A",{href:!0});var $Wr=s(b$);puo=r($Wr,"XLNetLMHeadModel"),$Wr.forEach(t),_uo=r(F4e," (XLNet model)"),F4e.forEach(t),S.forEach(t),uuo=i(Vt),vu=n(Vt,"P",{});var C4e=s(vu);buo=r(C4e,"The model is set in evaluation mode by default using "),poe=n(C4e,"CODE",{});var IWr=s(poe);vuo=r(IWr,"model.eval()"),IWr.forEach(t),Tuo=r(C4e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_oe=n(C4e,"CODE",{});var jWr=s(_oe);Fuo=r(jWr,"model.train()"),jWr.forEach(t),C4e.forEach(t),Cuo=i(Vt),uoe=n(Vt,"P",{});var DWr=s(uoe);Muo=r(DWr,"Examples:"),DWr.forEach(t),Euo=i(Vt),m(lE.$$.fragment,Vt),Vt.forEach(t),Zs.forEach(t),Oke=i(d),cd=n(d,"H2",{class:!0});var KSe=s(cd);Tu=n(KSe,"A",{id:!0,class:!0,href:!0});var NWr=s(Tu);boe=n(NWr,"SPAN",{});var qWr=s(boe);m(iE.$$.fragment,qWr),qWr.forEach(t),NWr.forEach(t),yuo=i(KSe),voe=n(KSe,"SPAN",{});var OWr=s(voe);wuo=r(OWr,"AutoModelForCausalLM"),OWr.forEach(t),KSe.forEach(t),Gke=i(d),Zo=n(d,"DIV",{class:!0});var ol=s(Zo);m(dE.$$.fragment,ol),Auo=i(ol),fd=n(ol,"P",{});var mW=s(fd);Luo=r(mW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Toe=n(mW,"CODE",{});var GWr=s(Toe);Buo=r(GWr,"from_pretrained()"),GWr.forEach(t),xuo=r(mW,"class method or the "),Foe=n(mW,"CODE",{});var XWr=s(Foe);kuo=r(XWr,"from_config()"),XWr.forEach(t),Ruo=r(mW,`class
method.`),mW.forEach(t),Suo=i(ol),cE=n(ol,"P",{});var ZSe=s(cE);Puo=r(ZSe,"This class cannot be instantiated directly using "),Coe=n(ZSe,"CODE",{});var VWr=s(Coe);$uo=r(VWr,"__init__()"),VWr.forEach(t),Iuo=r(ZSe," (throws an error)."),ZSe.forEach(t),juo=i(ol),Hr=n(ol,"DIV",{class:!0});var rl=s(Hr);m(fE.$$.fragment,rl),Duo=i(rl),Moe=n(rl,"P",{});var zWr=s(Moe);Nuo=r(zWr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),zWr.forEach(t),quo=i(rl),md=n(rl,"P",{});var gW=s(md);Ouo=r(gW,`Note:
Loading a model from its configuration file does `),Eoe=n(gW,"STRONG",{});var WWr=s(Eoe);Guo=r(WWr,"not"),WWr.forEach(t),Xuo=r(gW,` load the model weights. It only affects the
model\u2019s configuration. Use `),yoe=n(gW,"CODE",{});var QWr=s(yoe);Vuo=r(QWr,"from_pretrained()"),QWr.forEach(t),zuo=r(gW,"to load the model weights."),gW.forEach(t),Wuo=i(rl),woe=n(rl,"P",{});var HWr=s(woe);Quo=r(HWr,"Examples:"),HWr.forEach(t),Huo=i(rl),m(mE.$$.fragment,rl),rl.forEach(t),Uuo=i(ol),qe=n(ol,"DIV",{class:!0});var zt=s(qe);m(gE.$$.fragment,zt),Juo=i(zt),Aoe=n(zt,"P",{});var UWr=s(Aoe);Yuo=r(UWr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),UWr.forEach(t),Kuo=i(zt),Ja=n(zt,"P",{});var vM=s(Ja);Zuo=r(vM,"The model class to instantiate is selected based on the "),Loe=n(vM,"CODE",{});var JWr=s(Loe);e1o=r(JWr,"model_type"),JWr.forEach(t),o1o=r(vM,` property of the config object (either
passed as an argument or loaded from `),Boe=n(vM,"CODE",{});var YWr=s(Boe);r1o=r(YWr,"pretrained_model_name_or_path"),YWr.forEach(t),t1o=r(vM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xoe=n(vM,"CODE",{});var KWr=s(xoe);a1o=r(KWr,"pretrained_model_name_or_path"),KWr.forEach(t),n1o=r(vM,":"),vM.forEach(t),s1o=i(zt),$=n(zt,"UL",{});var j=s($);Fu=n(j,"LI",{});var M4e=s(Fu);koe=n(M4e,"STRONG",{});var ZWr=s(koe);l1o=r(ZWr,"bart"),ZWr.forEach(t),i1o=r(M4e," \u2014 "),v$=n(M4e,"A",{href:!0});var eQr=s(v$);d1o=r(eQr,"BartForCausalLM"),eQr.forEach(t),c1o=r(M4e," (BART model)"),M4e.forEach(t),f1o=i(j),Cu=n(j,"LI",{});var E4e=s(Cu);Roe=n(E4e,"STRONG",{});var oQr=s(Roe);m1o=r(oQr,"bert"),oQr.forEach(t),g1o=r(E4e," \u2014 "),T$=n(E4e,"A",{href:!0});var rQr=s(T$);h1o=r(rQr,"BertLMHeadModel"),rQr.forEach(t),p1o=r(E4e," (BERT model)"),E4e.forEach(t),_1o=i(j),Mu=n(j,"LI",{});var y4e=s(Mu);Soe=n(y4e,"STRONG",{});var tQr=s(Soe);u1o=r(tQr,"bert-generation"),tQr.forEach(t),b1o=r(y4e," \u2014 "),F$=n(y4e,"A",{href:!0});var aQr=s(F$);v1o=r(aQr,"BertGenerationDecoder"),aQr.forEach(t),T1o=r(y4e," (Bert Generation model)"),y4e.forEach(t),F1o=i(j),Eu=n(j,"LI",{});var w4e=s(Eu);Poe=n(w4e,"STRONG",{});var nQr=s(Poe);C1o=r(nQr,"big_bird"),nQr.forEach(t),M1o=r(w4e," \u2014 "),C$=n(w4e,"A",{href:!0});var sQr=s(C$);E1o=r(sQr,"BigBirdForCausalLM"),sQr.forEach(t),y1o=r(w4e," (BigBird model)"),w4e.forEach(t),w1o=i(j),yu=n(j,"LI",{});var A4e=s(yu);$oe=n(A4e,"STRONG",{});var lQr=s($oe);A1o=r(lQr,"bigbird_pegasus"),lQr.forEach(t),L1o=r(A4e," \u2014 "),M$=n(A4e,"A",{href:!0});var iQr=s(M$);B1o=r(iQr,"BigBirdPegasusForCausalLM"),iQr.forEach(t),x1o=r(A4e," (BigBirdPegasus model)"),A4e.forEach(t),k1o=i(j),wu=n(j,"LI",{});var L4e=s(wu);Ioe=n(L4e,"STRONG",{});var dQr=s(Ioe);R1o=r(dQr,"blenderbot"),dQr.forEach(t),S1o=r(L4e," \u2014 "),E$=n(L4e,"A",{href:!0});var cQr=s(E$);P1o=r(cQr,"BlenderbotForCausalLM"),cQr.forEach(t),$1o=r(L4e," (Blenderbot model)"),L4e.forEach(t),I1o=i(j),Au=n(j,"LI",{});var B4e=s(Au);joe=n(B4e,"STRONG",{});var fQr=s(joe);j1o=r(fQr,"blenderbot-small"),fQr.forEach(t),D1o=r(B4e," \u2014 "),y$=n(B4e,"A",{href:!0});var mQr=s(y$);N1o=r(mQr,"BlenderbotSmallForCausalLM"),mQr.forEach(t),q1o=r(B4e," (BlenderbotSmall model)"),B4e.forEach(t),O1o=i(j),Lu=n(j,"LI",{});var x4e=s(Lu);Doe=n(x4e,"STRONG",{});var gQr=s(Doe);G1o=r(gQr,"camembert"),gQr.forEach(t),X1o=r(x4e," \u2014 "),w$=n(x4e,"A",{href:!0});var hQr=s(w$);V1o=r(hQr,"CamembertForCausalLM"),hQr.forEach(t),z1o=r(x4e," (CamemBERT model)"),x4e.forEach(t),W1o=i(j),Bu=n(j,"LI",{});var k4e=s(Bu);Noe=n(k4e,"STRONG",{});var pQr=s(Noe);Q1o=r(pQr,"ctrl"),pQr.forEach(t),H1o=r(k4e," \u2014 "),A$=n(k4e,"A",{href:!0});var _Qr=s(A$);U1o=r(_Qr,"CTRLLMHeadModel"),_Qr.forEach(t),J1o=r(k4e," (CTRL model)"),k4e.forEach(t),Y1o=i(j),xu=n(j,"LI",{});var R4e=s(xu);qoe=n(R4e,"STRONG",{});var uQr=s(qoe);K1o=r(uQr,"data2vec-text"),uQr.forEach(t),Z1o=r(R4e," \u2014 "),L$=n(R4e,"A",{href:!0});var bQr=s(L$);ebo=r(bQr,"Data2VecTextForCausalLM"),bQr.forEach(t),obo=r(R4e," (Data2VecText model)"),R4e.forEach(t),rbo=i(j),ku=n(j,"LI",{});var S4e=s(ku);Ooe=n(S4e,"STRONG",{});var vQr=s(Ooe);tbo=r(vQr,"electra"),vQr.forEach(t),abo=r(S4e," \u2014 "),B$=n(S4e,"A",{href:!0});var TQr=s(B$);nbo=r(TQr,"ElectraForCausalLM"),TQr.forEach(t),sbo=r(S4e," (ELECTRA model)"),S4e.forEach(t),lbo=i(j),Ru=n(j,"LI",{});var P4e=s(Ru);Goe=n(P4e,"STRONG",{});var FQr=s(Goe);ibo=r(FQr,"gpt2"),FQr.forEach(t),dbo=r(P4e," \u2014 "),x$=n(P4e,"A",{href:!0});var CQr=s(x$);cbo=r(CQr,"GPT2LMHeadModel"),CQr.forEach(t),fbo=r(P4e," (OpenAI GPT-2 model)"),P4e.forEach(t),mbo=i(j),Su=n(j,"LI",{});var $4e=s(Su);Xoe=n($4e,"STRONG",{});var MQr=s(Xoe);gbo=r(MQr,"gpt_neo"),MQr.forEach(t),hbo=r($4e," \u2014 "),k$=n($4e,"A",{href:!0});var EQr=s(k$);pbo=r(EQr,"GPTNeoForCausalLM"),EQr.forEach(t),_bo=r($4e," (GPT Neo model)"),$4e.forEach(t),ubo=i(j),Pu=n(j,"LI",{});var I4e=s(Pu);Voe=n(I4e,"STRONG",{});var yQr=s(Voe);bbo=r(yQr,"gptj"),yQr.forEach(t),vbo=r(I4e," \u2014 "),R$=n(I4e,"A",{href:!0});var wQr=s(R$);Tbo=r(wQr,"GPTJForCausalLM"),wQr.forEach(t),Fbo=r(I4e," (GPT-J model)"),I4e.forEach(t),Cbo=i(j),$u=n(j,"LI",{});var j4e=s($u);zoe=n(j4e,"STRONG",{});var AQr=s(zoe);Mbo=r(AQr,"marian"),AQr.forEach(t),Ebo=r(j4e," \u2014 "),S$=n(j4e,"A",{href:!0});var LQr=s(S$);ybo=r(LQr,"MarianForCausalLM"),LQr.forEach(t),wbo=r(j4e," (Marian model)"),j4e.forEach(t),Abo=i(j),Iu=n(j,"LI",{});var D4e=s(Iu);Woe=n(D4e,"STRONG",{});var BQr=s(Woe);Lbo=r(BQr,"mbart"),BQr.forEach(t),Bbo=r(D4e," \u2014 "),P$=n(D4e,"A",{href:!0});var xQr=s(P$);xbo=r(xQr,"MBartForCausalLM"),xQr.forEach(t),kbo=r(D4e," (mBART model)"),D4e.forEach(t),Rbo=i(j),ju=n(j,"LI",{});var N4e=s(ju);Qoe=n(N4e,"STRONG",{});var kQr=s(Qoe);Sbo=r(kQr,"megatron-bert"),kQr.forEach(t),Pbo=r(N4e," \u2014 "),$$=n(N4e,"A",{href:!0});var RQr=s($$);$bo=r(RQr,"MegatronBertForCausalLM"),RQr.forEach(t),Ibo=r(N4e," (MegatronBert model)"),N4e.forEach(t),jbo=i(j),Du=n(j,"LI",{});var q4e=s(Du);Hoe=n(q4e,"STRONG",{});var SQr=s(Hoe);Dbo=r(SQr,"openai-gpt"),SQr.forEach(t),Nbo=r(q4e," \u2014 "),I$=n(q4e,"A",{href:!0});var PQr=s(I$);qbo=r(PQr,"OpenAIGPTLMHeadModel"),PQr.forEach(t),Obo=r(q4e," (OpenAI GPT model)"),q4e.forEach(t),Gbo=i(j),Nu=n(j,"LI",{});var O4e=s(Nu);Uoe=n(O4e,"STRONG",{});var $Qr=s(Uoe);Xbo=r($Qr,"pegasus"),$Qr.forEach(t),Vbo=r(O4e," \u2014 "),j$=n(O4e,"A",{href:!0});var IQr=s(j$);zbo=r(IQr,"PegasusForCausalLM"),IQr.forEach(t),Wbo=r(O4e," (Pegasus model)"),O4e.forEach(t),Qbo=i(j),qu=n(j,"LI",{});var G4e=s(qu);Joe=n(G4e,"STRONG",{});var jQr=s(Joe);Hbo=r(jQr,"plbart"),jQr.forEach(t),Ubo=r(G4e," \u2014 "),D$=n(G4e,"A",{href:!0});var DQr=s(D$);Jbo=r(DQr,"PLBartForCausalLM"),DQr.forEach(t),Ybo=r(G4e," (PLBart model)"),G4e.forEach(t),Kbo=i(j),Ou=n(j,"LI",{});var X4e=s(Ou);Yoe=n(X4e,"STRONG",{});var NQr=s(Yoe);Zbo=r(NQr,"prophetnet"),NQr.forEach(t),e5o=r(X4e," \u2014 "),N$=n(X4e,"A",{href:!0});var qQr=s(N$);o5o=r(qQr,"ProphetNetForCausalLM"),qQr.forEach(t),r5o=r(X4e," (ProphetNet model)"),X4e.forEach(t),t5o=i(j),Gu=n(j,"LI",{});var V4e=s(Gu);Koe=n(V4e,"STRONG",{});var OQr=s(Koe);a5o=r(OQr,"qdqbert"),OQr.forEach(t),n5o=r(V4e," \u2014 "),q$=n(V4e,"A",{href:!0});var GQr=s(q$);s5o=r(GQr,"QDQBertLMHeadModel"),GQr.forEach(t),l5o=r(V4e," (QDQBert model)"),V4e.forEach(t),i5o=i(j),Xu=n(j,"LI",{});var z4e=s(Xu);Zoe=n(z4e,"STRONG",{});var XQr=s(Zoe);d5o=r(XQr,"reformer"),XQr.forEach(t),c5o=r(z4e," \u2014 "),O$=n(z4e,"A",{href:!0});var VQr=s(O$);f5o=r(VQr,"ReformerModelWithLMHead"),VQr.forEach(t),m5o=r(z4e," (Reformer model)"),z4e.forEach(t),g5o=i(j),Vu=n(j,"LI",{});var W4e=s(Vu);ere=n(W4e,"STRONG",{});var zQr=s(ere);h5o=r(zQr,"rembert"),zQr.forEach(t),p5o=r(W4e," \u2014 "),G$=n(W4e,"A",{href:!0});var WQr=s(G$);_5o=r(WQr,"RemBertForCausalLM"),WQr.forEach(t),u5o=r(W4e," (RemBERT model)"),W4e.forEach(t),b5o=i(j),zu=n(j,"LI",{});var Q4e=s(zu);ore=n(Q4e,"STRONG",{});var QQr=s(ore);v5o=r(QQr,"roberta"),QQr.forEach(t),T5o=r(Q4e," \u2014 "),X$=n(Q4e,"A",{href:!0});var HQr=s(X$);F5o=r(HQr,"RobertaForCausalLM"),HQr.forEach(t),C5o=r(Q4e," (RoBERTa model)"),Q4e.forEach(t),M5o=i(j),Wu=n(j,"LI",{});var H4e=s(Wu);rre=n(H4e,"STRONG",{});var UQr=s(rre);E5o=r(UQr,"roformer"),UQr.forEach(t),y5o=r(H4e," \u2014 "),V$=n(H4e,"A",{href:!0});var JQr=s(V$);w5o=r(JQr,"RoFormerForCausalLM"),JQr.forEach(t),A5o=r(H4e," (RoFormer model)"),H4e.forEach(t),L5o=i(j),Qu=n(j,"LI",{});var U4e=s(Qu);tre=n(U4e,"STRONG",{});var YQr=s(tre);B5o=r(YQr,"speech_to_text_2"),YQr.forEach(t),x5o=r(U4e," \u2014 "),z$=n(U4e,"A",{href:!0});var KQr=s(z$);k5o=r(KQr,"Speech2Text2ForCausalLM"),KQr.forEach(t),R5o=r(U4e," (Speech2Text2 model)"),U4e.forEach(t),S5o=i(j),Hu=n(j,"LI",{});var J4e=s(Hu);are=n(J4e,"STRONG",{});var ZQr=s(are);P5o=r(ZQr,"transfo-xl"),ZQr.forEach(t),$5o=r(J4e," \u2014 "),W$=n(J4e,"A",{href:!0});var eHr=s(W$);I5o=r(eHr,"TransfoXLLMHeadModel"),eHr.forEach(t),j5o=r(J4e," (Transformer-XL model)"),J4e.forEach(t),D5o=i(j),Uu=n(j,"LI",{});var Y4e=s(Uu);nre=n(Y4e,"STRONG",{});var oHr=s(nre);N5o=r(oHr,"trocr"),oHr.forEach(t),q5o=r(Y4e," \u2014 "),Q$=n(Y4e,"A",{href:!0});var rHr=s(Q$);O5o=r(rHr,"TrOCRForCausalLM"),rHr.forEach(t),G5o=r(Y4e," (TrOCR model)"),Y4e.forEach(t),X5o=i(j),Ju=n(j,"LI",{});var K4e=s(Ju);sre=n(K4e,"STRONG",{});var tHr=s(sre);V5o=r(tHr,"xglm"),tHr.forEach(t),z5o=r(K4e," \u2014 "),H$=n(K4e,"A",{href:!0});var aHr=s(H$);W5o=r(aHr,"XGLMForCausalLM"),aHr.forEach(t),Q5o=r(K4e," (XGLM model)"),K4e.forEach(t),H5o=i(j),Yu=n(j,"LI",{});var Z4e=s(Yu);lre=n(Z4e,"STRONG",{});var nHr=s(lre);U5o=r(nHr,"xlm"),nHr.forEach(t),J5o=r(Z4e," \u2014 "),U$=n(Z4e,"A",{href:!0});var sHr=s(U$);Y5o=r(sHr,"XLMWithLMHeadModel"),sHr.forEach(t),K5o=r(Z4e," (XLM model)"),Z4e.forEach(t),Z5o=i(j),Ku=n(j,"LI",{});var eEe=s(Ku);ire=n(eEe,"STRONG",{});var lHr=s(ire);e2o=r(lHr,"xlm-prophetnet"),lHr.forEach(t),o2o=r(eEe," \u2014 "),J$=n(eEe,"A",{href:!0});var iHr=s(J$);r2o=r(iHr,"XLMProphetNetForCausalLM"),iHr.forEach(t),t2o=r(eEe," (XLMProphetNet model)"),eEe.forEach(t),a2o=i(j),Zu=n(j,"LI",{});var oEe=s(Zu);dre=n(oEe,"STRONG",{});var dHr=s(dre);n2o=r(dHr,"xlm-roberta"),dHr.forEach(t),s2o=r(oEe," \u2014 "),Y$=n(oEe,"A",{href:!0});var cHr=s(Y$);l2o=r(cHr,"XLMRobertaForCausalLM"),cHr.forEach(t),i2o=r(oEe," (XLM-RoBERTa model)"),oEe.forEach(t),d2o=i(j),e1=n(j,"LI",{});var rEe=s(e1);cre=n(rEe,"STRONG",{});var fHr=s(cre);c2o=r(fHr,"xlm-roberta-xl"),fHr.forEach(t),f2o=r(rEe," \u2014 "),K$=n(rEe,"A",{href:!0});var mHr=s(K$);m2o=r(mHr,"XLMRobertaXLForCausalLM"),mHr.forEach(t),g2o=r(rEe," (XLM-RoBERTa-XL model)"),rEe.forEach(t),h2o=i(j),o1=n(j,"LI",{});var tEe=s(o1);fre=n(tEe,"STRONG",{});var gHr=s(fre);p2o=r(gHr,"xlnet"),gHr.forEach(t),_2o=r(tEe," \u2014 "),Z$=n(tEe,"A",{href:!0});var hHr=s(Z$);u2o=r(hHr,"XLNetLMHeadModel"),hHr.forEach(t),b2o=r(tEe," (XLNet model)"),tEe.forEach(t),j.forEach(t),v2o=i(zt),r1=n(zt,"P",{});var aEe=s(r1);T2o=r(aEe,"The model is set in evaluation mode by default using "),mre=n(aEe,"CODE",{});var pHr=s(mre);F2o=r(pHr,"model.eval()"),pHr.forEach(t),C2o=r(aEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gre=n(aEe,"CODE",{});var _Hr=s(gre);M2o=r(_Hr,"model.train()"),_Hr.forEach(t),aEe.forEach(t),E2o=i(zt),hre=n(zt,"P",{});var uHr=s(hre);y2o=r(uHr,"Examples:"),uHr.forEach(t),w2o=i(zt),m(hE.$$.fragment,zt),zt.forEach(t),ol.forEach(t),Xke=i(d),gd=n(d,"H2",{class:!0});var ePe=s(gd);t1=n(ePe,"A",{id:!0,class:!0,href:!0});var bHr=s(t1);pre=n(bHr,"SPAN",{});var vHr=s(pre);m(pE.$$.fragment,vHr),vHr.forEach(t),bHr.forEach(t),A2o=i(ePe),_re=n(ePe,"SPAN",{});var THr=s(_re);L2o=r(THr,"AutoModelForMaskedLM"),THr.forEach(t),ePe.forEach(t),Vke=i(d),er=n(d,"DIV",{class:!0});var tl=s(er);m(_E.$$.fragment,tl),B2o=i(tl),hd=n(tl,"P",{});var hW=s(hd);x2o=r(hW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),ure=n(hW,"CODE",{});var FHr=s(ure);k2o=r(FHr,"from_pretrained()"),FHr.forEach(t),R2o=r(hW,"class method or the "),bre=n(hW,"CODE",{});var CHr=s(bre);S2o=r(CHr,"from_config()"),CHr.forEach(t),P2o=r(hW,`class
method.`),hW.forEach(t),$2o=i(tl),uE=n(tl,"P",{});var oPe=s(uE);I2o=r(oPe,"This class cannot be instantiated directly using "),vre=n(oPe,"CODE",{});var MHr=s(vre);j2o=r(MHr,"__init__()"),MHr.forEach(t),D2o=r(oPe," (throws an error)."),oPe.forEach(t),N2o=i(tl),Ur=n(tl,"DIV",{class:!0});var al=s(Ur);m(bE.$$.fragment,al),q2o=i(al),Tre=n(al,"P",{});var EHr=s(Tre);O2o=r(EHr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),EHr.forEach(t),G2o=i(al),pd=n(al,"P",{});var pW=s(pd);X2o=r(pW,`Note:
Loading a model from its configuration file does `),Fre=n(pW,"STRONG",{});var yHr=s(Fre);V2o=r(yHr,"not"),yHr.forEach(t),z2o=r(pW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cre=n(pW,"CODE",{});var wHr=s(Cre);W2o=r(wHr,"from_pretrained()"),wHr.forEach(t),Q2o=r(pW,"to load the model weights."),pW.forEach(t),H2o=i(al),Mre=n(al,"P",{});var AHr=s(Mre);U2o=r(AHr,"Examples:"),AHr.forEach(t),J2o=i(al),m(vE.$$.fragment,al),al.forEach(t),Y2o=i(tl),Oe=n(tl,"DIV",{class:!0});var Wt=s(Oe);m(TE.$$.fragment,Wt),K2o=i(Wt),Ere=n(Wt,"P",{});var LHr=s(Ere);Z2o=r(LHr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),LHr.forEach(t),evo=i(Wt),Ya=n(Wt,"P",{});var TM=s(Ya);ovo=r(TM,"The model class to instantiate is selected based on the "),yre=n(TM,"CODE",{});var BHr=s(yre);rvo=r(BHr,"model_type"),BHr.forEach(t),tvo=r(TM,` property of the config object (either
passed as an argument or loaded from `),wre=n(TM,"CODE",{});var xHr=s(wre);avo=r(xHr,"pretrained_model_name_or_path"),xHr.forEach(t),nvo=r(TM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Are=n(TM,"CODE",{});var kHr=s(Are);svo=r(kHr,"pretrained_model_name_or_path"),kHr.forEach(t),lvo=r(TM,":"),TM.forEach(t),ivo=i(Wt),I=n(Wt,"UL",{});var D=s(I);a1=n(D,"LI",{});var nEe=s(a1);Lre=n(nEe,"STRONG",{});var RHr=s(Lre);dvo=r(RHr,"albert"),RHr.forEach(t),cvo=r(nEe," \u2014 "),eI=n(nEe,"A",{href:!0});var SHr=s(eI);fvo=r(SHr,"AlbertForMaskedLM"),SHr.forEach(t),mvo=r(nEe," (ALBERT model)"),nEe.forEach(t),gvo=i(D),n1=n(D,"LI",{});var sEe=s(n1);Bre=n(sEe,"STRONG",{});var PHr=s(Bre);hvo=r(PHr,"bart"),PHr.forEach(t),pvo=r(sEe," \u2014 "),oI=n(sEe,"A",{href:!0});var $Hr=s(oI);_vo=r($Hr,"BartForConditionalGeneration"),$Hr.forEach(t),uvo=r(sEe," (BART model)"),sEe.forEach(t),bvo=i(D),s1=n(D,"LI",{});var lEe=s(s1);xre=n(lEe,"STRONG",{});var IHr=s(xre);vvo=r(IHr,"bert"),IHr.forEach(t),Tvo=r(lEe," \u2014 "),rI=n(lEe,"A",{href:!0});var jHr=s(rI);Fvo=r(jHr,"BertForMaskedLM"),jHr.forEach(t),Cvo=r(lEe," (BERT model)"),lEe.forEach(t),Mvo=i(D),l1=n(D,"LI",{});var iEe=s(l1);kre=n(iEe,"STRONG",{});var DHr=s(kre);Evo=r(DHr,"big_bird"),DHr.forEach(t),yvo=r(iEe," \u2014 "),tI=n(iEe,"A",{href:!0});var NHr=s(tI);wvo=r(NHr,"BigBirdForMaskedLM"),NHr.forEach(t),Avo=r(iEe," (BigBird model)"),iEe.forEach(t),Lvo=i(D),i1=n(D,"LI",{});var dEe=s(i1);Rre=n(dEe,"STRONG",{});var qHr=s(Rre);Bvo=r(qHr,"camembert"),qHr.forEach(t),xvo=r(dEe," \u2014 "),aI=n(dEe,"A",{href:!0});var OHr=s(aI);kvo=r(OHr,"CamembertForMaskedLM"),OHr.forEach(t),Rvo=r(dEe," (CamemBERT model)"),dEe.forEach(t),Svo=i(D),d1=n(D,"LI",{});var cEe=s(d1);Sre=n(cEe,"STRONG",{});var GHr=s(Sre);Pvo=r(GHr,"convbert"),GHr.forEach(t),$vo=r(cEe," \u2014 "),nI=n(cEe,"A",{href:!0});var XHr=s(nI);Ivo=r(XHr,"ConvBertForMaskedLM"),XHr.forEach(t),jvo=r(cEe," (ConvBERT model)"),cEe.forEach(t),Dvo=i(D),c1=n(D,"LI",{});var fEe=s(c1);Pre=n(fEe,"STRONG",{});var VHr=s(Pre);Nvo=r(VHr,"data2vec-text"),VHr.forEach(t),qvo=r(fEe," \u2014 "),sI=n(fEe,"A",{href:!0});var zHr=s(sI);Ovo=r(zHr,"Data2VecTextForMaskedLM"),zHr.forEach(t),Gvo=r(fEe," (Data2VecText model)"),fEe.forEach(t),Xvo=i(D),f1=n(D,"LI",{});var mEe=s(f1);$re=n(mEe,"STRONG",{});var WHr=s($re);Vvo=r(WHr,"deberta"),WHr.forEach(t),zvo=r(mEe," \u2014 "),lI=n(mEe,"A",{href:!0});var QHr=s(lI);Wvo=r(QHr,"DebertaForMaskedLM"),QHr.forEach(t),Qvo=r(mEe," (DeBERTa model)"),mEe.forEach(t),Hvo=i(D),m1=n(D,"LI",{});var gEe=s(m1);Ire=n(gEe,"STRONG",{});var HHr=s(Ire);Uvo=r(HHr,"deberta-v2"),HHr.forEach(t),Jvo=r(gEe," \u2014 "),iI=n(gEe,"A",{href:!0});var UHr=s(iI);Yvo=r(UHr,"DebertaV2ForMaskedLM"),UHr.forEach(t),Kvo=r(gEe," (DeBERTa-v2 model)"),gEe.forEach(t),Zvo=i(D),g1=n(D,"LI",{});var hEe=s(g1);jre=n(hEe,"STRONG",{});var JHr=s(jre);e6o=r(JHr,"distilbert"),JHr.forEach(t),o6o=r(hEe," \u2014 "),dI=n(hEe,"A",{href:!0});var YHr=s(dI);r6o=r(YHr,"DistilBertForMaskedLM"),YHr.forEach(t),t6o=r(hEe," (DistilBERT model)"),hEe.forEach(t),a6o=i(D),h1=n(D,"LI",{});var pEe=s(h1);Dre=n(pEe,"STRONG",{});var KHr=s(Dre);n6o=r(KHr,"electra"),KHr.forEach(t),s6o=r(pEe," \u2014 "),cI=n(pEe,"A",{href:!0});var ZHr=s(cI);l6o=r(ZHr,"ElectraForMaskedLM"),ZHr.forEach(t),i6o=r(pEe," (ELECTRA model)"),pEe.forEach(t),d6o=i(D),p1=n(D,"LI",{});var _Ee=s(p1);Nre=n(_Ee,"STRONG",{});var eUr=s(Nre);c6o=r(eUr,"flaubert"),eUr.forEach(t),f6o=r(_Ee," \u2014 "),fI=n(_Ee,"A",{href:!0});var oUr=s(fI);m6o=r(oUr,"FlaubertWithLMHeadModel"),oUr.forEach(t),g6o=r(_Ee," (FlauBERT model)"),_Ee.forEach(t),h6o=i(D),_1=n(D,"LI",{});var uEe=s(_1);qre=n(uEe,"STRONG",{});var rUr=s(qre);p6o=r(rUr,"fnet"),rUr.forEach(t),_6o=r(uEe," \u2014 "),mI=n(uEe,"A",{href:!0});var tUr=s(mI);u6o=r(tUr,"FNetForMaskedLM"),tUr.forEach(t),b6o=r(uEe," (FNet model)"),uEe.forEach(t),v6o=i(D),u1=n(D,"LI",{});var bEe=s(u1);Ore=n(bEe,"STRONG",{});var aUr=s(Ore);T6o=r(aUr,"funnel"),aUr.forEach(t),F6o=r(bEe," \u2014 "),gI=n(bEe,"A",{href:!0});var nUr=s(gI);C6o=r(nUr,"FunnelForMaskedLM"),nUr.forEach(t),M6o=r(bEe," (Funnel Transformer model)"),bEe.forEach(t),E6o=i(D),b1=n(D,"LI",{});var vEe=s(b1);Gre=n(vEe,"STRONG",{});var sUr=s(Gre);y6o=r(sUr,"ibert"),sUr.forEach(t),w6o=r(vEe," \u2014 "),hI=n(vEe,"A",{href:!0});var lUr=s(hI);A6o=r(lUr,"IBertForMaskedLM"),lUr.forEach(t),L6o=r(vEe," (I-BERT model)"),vEe.forEach(t),B6o=i(D),v1=n(D,"LI",{});var TEe=s(v1);Xre=n(TEe,"STRONG",{});var iUr=s(Xre);x6o=r(iUr,"layoutlm"),iUr.forEach(t),k6o=r(TEe," \u2014 "),pI=n(TEe,"A",{href:!0});var dUr=s(pI);R6o=r(dUr,"LayoutLMForMaskedLM"),dUr.forEach(t),S6o=r(TEe," (LayoutLM model)"),TEe.forEach(t),P6o=i(D),T1=n(D,"LI",{});var FEe=s(T1);Vre=n(FEe,"STRONG",{});var cUr=s(Vre);$6o=r(cUr,"longformer"),cUr.forEach(t),I6o=r(FEe," \u2014 "),_I=n(FEe,"A",{href:!0});var fUr=s(_I);j6o=r(fUr,"LongformerForMaskedLM"),fUr.forEach(t),D6o=r(FEe," (Longformer model)"),FEe.forEach(t),N6o=i(D),F1=n(D,"LI",{});var CEe=s(F1);zre=n(CEe,"STRONG",{});var mUr=s(zre);q6o=r(mUr,"mbart"),mUr.forEach(t),O6o=r(CEe," \u2014 "),uI=n(CEe,"A",{href:!0});var gUr=s(uI);G6o=r(gUr,"MBartForConditionalGeneration"),gUr.forEach(t),X6o=r(CEe," (mBART model)"),CEe.forEach(t),V6o=i(D),C1=n(D,"LI",{});var MEe=s(C1);Wre=n(MEe,"STRONG",{});var hUr=s(Wre);z6o=r(hUr,"megatron-bert"),hUr.forEach(t),W6o=r(MEe," \u2014 "),bI=n(MEe,"A",{href:!0});var pUr=s(bI);Q6o=r(pUr,"MegatronBertForMaskedLM"),pUr.forEach(t),H6o=r(MEe," (MegatronBert model)"),MEe.forEach(t),U6o=i(D),M1=n(D,"LI",{});var EEe=s(M1);Qre=n(EEe,"STRONG",{});var _Ur=s(Qre);J6o=r(_Ur,"mobilebert"),_Ur.forEach(t),Y6o=r(EEe," \u2014 "),vI=n(EEe,"A",{href:!0});var uUr=s(vI);K6o=r(uUr,"MobileBertForMaskedLM"),uUr.forEach(t),Z6o=r(EEe," (MobileBERT model)"),EEe.forEach(t),e0o=i(D),E1=n(D,"LI",{});var yEe=s(E1);Hre=n(yEe,"STRONG",{});var bUr=s(Hre);o0o=r(bUr,"mpnet"),bUr.forEach(t),r0o=r(yEe," \u2014 "),TI=n(yEe,"A",{href:!0});var vUr=s(TI);t0o=r(vUr,"MPNetForMaskedLM"),vUr.forEach(t),a0o=r(yEe," (MPNet model)"),yEe.forEach(t),n0o=i(D),y1=n(D,"LI",{});var wEe=s(y1);Ure=n(wEe,"STRONG",{});var TUr=s(Ure);s0o=r(TUr,"nystromformer"),TUr.forEach(t),l0o=r(wEe," \u2014 "),FI=n(wEe,"A",{href:!0});var FUr=s(FI);i0o=r(FUr,"NystromformerForMaskedLM"),FUr.forEach(t),d0o=r(wEe," (Nystromformer model)"),wEe.forEach(t),c0o=i(D),w1=n(D,"LI",{});var AEe=s(w1);Jre=n(AEe,"STRONG",{});var CUr=s(Jre);f0o=r(CUr,"perceiver"),CUr.forEach(t),m0o=r(AEe," \u2014 "),CI=n(AEe,"A",{href:!0});var MUr=s(CI);g0o=r(MUr,"PerceiverForMaskedLM"),MUr.forEach(t),h0o=r(AEe," (Perceiver model)"),AEe.forEach(t),p0o=i(D),A1=n(D,"LI",{});var LEe=s(A1);Yre=n(LEe,"STRONG",{});var EUr=s(Yre);_0o=r(EUr,"qdqbert"),EUr.forEach(t),u0o=r(LEe," \u2014 "),MI=n(LEe,"A",{href:!0});var yUr=s(MI);b0o=r(yUr,"QDQBertForMaskedLM"),yUr.forEach(t),v0o=r(LEe," (QDQBert model)"),LEe.forEach(t),T0o=i(D),L1=n(D,"LI",{});var BEe=s(L1);Kre=n(BEe,"STRONG",{});var wUr=s(Kre);F0o=r(wUr,"reformer"),wUr.forEach(t),C0o=r(BEe," \u2014 "),EI=n(BEe,"A",{href:!0});var AUr=s(EI);M0o=r(AUr,"ReformerForMaskedLM"),AUr.forEach(t),E0o=r(BEe," (Reformer model)"),BEe.forEach(t),y0o=i(D),B1=n(D,"LI",{});var xEe=s(B1);Zre=n(xEe,"STRONG",{});var LUr=s(Zre);w0o=r(LUr,"rembert"),LUr.forEach(t),A0o=r(xEe," \u2014 "),yI=n(xEe,"A",{href:!0});var BUr=s(yI);L0o=r(BUr,"RemBertForMaskedLM"),BUr.forEach(t),B0o=r(xEe," (RemBERT model)"),xEe.forEach(t),x0o=i(D),x1=n(D,"LI",{});var kEe=s(x1);ete=n(kEe,"STRONG",{});var xUr=s(ete);k0o=r(xUr,"roberta"),xUr.forEach(t),R0o=r(kEe," \u2014 "),wI=n(kEe,"A",{href:!0});var kUr=s(wI);S0o=r(kUr,"RobertaForMaskedLM"),kUr.forEach(t),P0o=r(kEe," (RoBERTa model)"),kEe.forEach(t),$0o=i(D),k1=n(D,"LI",{});var REe=s(k1);ote=n(REe,"STRONG",{});var RUr=s(ote);I0o=r(RUr,"roformer"),RUr.forEach(t),j0o=r(REe," \u2014 "),AI=n(REe,"A",{href:!0});var SUr=s(AI);D0o=r(SUr,"RoFormerForMaskedLM"),SUr.forEach(t),N0o=r(REe," (RoFormer model)"),REe.forEach(t),q0o=i(D),R1=n(D,"LI",{});var SEe=s(R1);rte=n(SEe,"STRONG",{});var PUr=s(rte);O0o=r(PUr,"squeezebert"),PUr.forEach(t),G0o=r(SEe," \u2014 "),LI=n(SEe,"A",{href:!0});var $Ur=s(LI);X0o=r($Ur,"SqueezeBertForMaskedLM"),$Ur.forEach(t),V0o=r(SEe," (SqueezeBERT model)"),SEe.forEach(t),z0o=i(D),S1=n(D,"LI",{});var PEe=s(S1);tte=n(PEe,"STRONG",{});var IUr=s(tte);W0o=r(IUr,"tapas"),IUr.forEach(t),Q0o=r(PEe," \u2014 "),BI=n(PEe,"A",{href:!0});var jUr=s(BI);H0o=r(jUr,"TapasForMaskedLM"),jUr.forEach(t),U0o=r(PEe," (TAPAS model)"),PEe.forEach(t),J0o=i(D),P1=n(D,"LI",{});var $Ee=s(P1);ate=n($Ee,"STRONG",{});var DUr=s(ate);Y0o=r(DUr,"wav2vec2"),DUr.forEach(t),K0o=r($Ee," \u2014 "),nte=n($Ee,"CODE",{});var NUr=s(nte);Z0o=r(NUr,"Wav2Vec2ForMaskedLM"),NUr.forEach(t),eTo=r($Ee,"(Wav2Vec2 model)"),$Ee.forEach(t),oTo=i(D),$1=n(D,"LI",{});var IEe=s($1);ste=n(IEe,"STRONG",{});var qUr=s(ste);rTo=r(qUr,"xlm"),qUr.forEach(t),tTo=r(IEe," \u2014 "),xI=n(IEe,"A",{href:!0});var OUr=s(xI);aTo=r(OUr,"XLMWithLMHeadModel"),OUr.forEach(t),nTo=r(IEe," (XLM model)"),IEe.forEach(t),sTo=i(D),I1=n(D,"LI",{});var jEe=s(I1);lte=n(jEe,"STRONG",{});var GUr=s(lte);lTo=r(GUr,"xlm-roberta"),GUr.forEach(t),iTo=r(jEe," \u2014 "),kI=n(jEe,"A",{href:!0});var XUr=s(kI);dTo=r(XUr,"XLMRobertaForMaskedLM"),XUr.forEach(t),cTo=r(jEe," (XLM-RoBERTa model)"),jEe.forEach(t),fTo=i(D),j1=n(D,"LI",{});var DEe=s(j1);ite=n(DEe,"STRONG",{});var VUr=s(ite);mTo=r(VUr,"xlm-roberta-xl"),VUr.forEach(t),gTo=r(DEe," \u2014 "),RI=n(DEe,"A",{href:!0});var zUr=s(RI);hTo=r(zUr,"XLMRobertaXLForMaskedLM"),zUr.forEach(t),pTo=r(DEe," (XLM-RoBERTa-XL model)"),DEe.forEach(t),_To=i(D),D1=n(D,"LI",{});var NEe=s(D1);dte=n(NEe,"STRONG",{});var WUr=s(dte);uTo=r(WUr,"yoso"),WUr.forEach(t),bTo=r(NEe," \u2014 "),SI=n(NEe,"A",{href:!0});var QUr=s(SI);vTo=r(QUr,"YosoForMaskedLM"),QUr.forEach(t),TTo=r(NEe," (YOSO model)"),NEe.forEach(t),D.forEach(t),FTo=i(Wt),N1=n(Wt,"P",{});var qEe=s(N1);CTo=r(qEe,"The model is set in evaluation mode by default using "),cte=n(qEe,"CODE",{});var HUr=s(cte);MTo=r(HUr,"model.eval()"),HUr.forEach(t),ETo=r(qEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fte=n(qEe,"CODE",{});var UUr=s(fte);yTo=r(UUr,"model.train()"),UUr.forEach(t),qEe.forEach(t),wTo=i(Wt),mte=n(Wt,"P",{});var JUr=s(mte);ATo=r(JUr,"Examples:"),JUr.forEach(t),LTo=i(Wt),m(FE.$$.fragment,Wt),Wt.forEach(t),tl.forEach(t),zke=i(d),_d=n(d,"H2",{class:!0});var rPe=s(_d);q1=n(rPe,"A",{id:!0,class:!0,href:!0});var YUr=s(q1);gte=n(YUr,"SPAN",{});var KUr=s(gte);m(CE.$$.fragment,KUr),KUr.forEach(t),YUr.forEach(t),BTo=i(rPe),hte=n(rPe,"SPAN",{});var ZUr=s(hte);xTo=r(ZUr,"AutoModelForSeq2SeqLM"),ZUr.forEach(t),rPe.forEach(t),Wke=i(d),or=n(d,"DIV",{class:!0});var nl=s(or);m(ME.$$.fragment,nl),kTo=i(nl),ud=n(nl,"P",{});var _W=s(ud);RTo=r(_W,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),pte=n(_W,"CODE",{});var eJr=s(pte);STo=r(eJr,"from_pretrained()"),eJr.forEach(t),PTo=r(_W,"class method or the "),_te=n(_W,"CODE",{});var oJr=s(_te);$To=r(oJr,"from_config()"),oJr.forEach(t),ITo=r(_W,`class
method.`),_W.forEach(t),jTo=i(nl),EE=n(nl,"P",{});var tPe=s(EE);DTo=r(tPe,"This class cannot be instantiated directly using "),ute=n(tPe,"CODE",{});var rJr=s(ute);NTo=r(rJr,"__init__()"),rJr.forEach(t),qTo=r(tPe," (throws an error)."),tPe.forEach(t),OTo=i(nl),Jr=n(nl,"DIV",{class:!0});var sl=s(Jr);m(yE.$$.fragment,sl),GTo=i(sl),bte=n(sl,"P",{});var tJr=s(bte);XTo=r(tJr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),tJr.forEach(t),VTo=i(sl),bd=n(sl,"P",{});var uW=s(bd);zTo=r(uW,`Note:
Loading a model from its configuration file does `),vte=n(uW,"STRONG",{});var aJr=s(vte);WTo=r(aJr,"not"),aJr.forEach(t),QTo=r(uW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tte=n(uW,"CODE",{});var nJr=s(Tte);HTo=r(nJr,"from_pretrained()"),nJr.forEach(t),UTo=r(uW,"to load the model weights."),uW.forEach(t),JTo=i(sl),Fte=n(sl,"P",{});var sJr=s(Fte);YTo=r(sJr,"Examples:"),sJr.forEach(t),KTo=i(sl),m(wE.$$.fragment,sl),sl.forEach(t),ZTo=i(nl),Ge=n(nl,"DIV",{class:!0});var Qt=s(Ge);m(AE.$$.fragment,Qt),e8o=i(Qt),Cte=n(Qt,"P",{});var lJr=s(Cte);o8o=r(lJr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),lJr.forEach(t),r8o=i(Qt),Ka=n(Qt,"P",{});var FM=s(Ka);t8o=r(FM,"The model class to instantiate is selected based on the "),Mte=n(FM,"CODE",{});var iJr=s(Mte);a8o=r(iJr,"model_type"),iJr.forEach(t),n8o=r(FM,` property of the config object (either
passed as an argument or loaded from `),Ete=n(FM,"CODE",{});var dJr=s(Ete);s8o=r(dJr,"pretrained_model_name_or_path"),dJr.forEach(t),l8o=r(FM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yte=n(FM,"CODE",{});var cJr=s(yte);i8o=r(cJr,"pretrained_model_name_or_path"),cJr.forEach(t),d8o=r(FM,":"),FM.forEach(t),c8o=i(Qt),se=n(Qt,"UL",{});var ie=s(se);O1=n(ie,"LI",{});var OEe=s(O1);wte=n(OEe,"STRONG",{});var fJr=s(wte);f8o=r(fJr,"bart"),fJr.forEach(t),m8o=r(OEe," \u2014 "),PI=n(OEe,"A",{href:!0});var mJr=s(PI);g8o=r(mJr,"BartForConditionalGeneration"),mJr.forEach(t),h8o=r(OEe," (BART model)"),OEe.forEach(t),p8o=i(ie),G1=n(ie,"LI",{});var GEe=s(G1);Ate=n(GEe,"STRONG",{});var gJr=s(Ate);_8o=r(gJr,"bigbird_pegasus"),gJr.forEach(t),u8o=r(GEe," \u2014 "),$I=n(GEe,"A",{href:!0});var hJr=s($I);b8o=r(hJr,"BigBirdPegasusForConditionalGeneration"),hJr.forEach(t),v8o=r(GEe," (BigBirdPegasus model)"),GEe.forEach(t),T8o=i(ie),X1=n(ie,"LI",{});var XEe=s(X1);Lte=n(XEe,"STRONG",{});var pJr=s(Lte);F8o=r(pJr,"blenderbot"),pJr.forEach(t),C8o=r(XEe," \u2014 "),II=n(XEe,"A",{href:!0});var _Jr=s(II);M8o=r(_Jr,"BlenderbotForConditionalGeneration"),_Jr.forEach(t),E8o=r(XEe," (Blenderbot model)"),XEe.forEach(t),y8o=i(ie),V1=n(ie,"LI",{});var VEe=s(V1);Bte=n(VEe,"STRONG",{});var uJr=s(Bte);w8o=r(uJr,"blenderbot-small"),uJr.forEach(t),A8o=r(VEe," \u2014 "),jI=n(VEe,"A",{href:!0});var bJr=s(jI);L8o=r(bJr,"BlenderbotSmallForConditionalGeneration"),bJr.forEach(t),B8o=r(VEe," (BlenderbotSmall model)"),VEe.forEach(t),x8o=i(ie),z1=n(ie,"LI",{});var zEe=s(z1);xte=n(zEe,"STRONG",{});var vJr=s(xte);k8o=r(vJr,"encoder-decoder"),vJr.forEach(t),R8o=r(zEe," \u2014 "),DI=n(zEe,"A",{href:!0});var TJr=s(DI);S8o=r(TJr,"EncoderDecoderModel"),TJr.forEach(t),P8o=r(zEe," (Encoder decoder model)"),zEe.forEach(t),$8o=i(ie),W1=n(ie,"LI",{});var WEe=s(W1);kte=n(WEe,"STRONG",{});var FJr=s(kte);I8o=r(FJr,"fsmt"),FJr.forEach(t),j8o=r(WEe," \u2014 "),NI=n(WEe,"A",{href:!0});var CJr=s(NI);D8o=r(CJr,"FSMTForConditionalGeneration"),CJr.forEach(t),N8o=r(WEe," (FairSeq Machine-Translation model)"),WEe.forEach(t),q8o=i(ie),Q1=n(ie,"LI",{});var QEe=s(Q1);Rte=n(QEe,"STRONG",{});var MJr=s(Rte);O8o=r(MJr,"led"),MJr.forEach(t),G8o=r(QEe," \u2014 "),qI=n(QEe,"A",{href:!0});var EJr=s(qI);X8o=r(EJr,"LEDForConditionalGeneration"),EJr.forEach(t),V8o=r(QEe," (LED model)"),QEe.forEach(t),z8o=i(ie),H1=n(ie,"LI",{});var HEe=s(H1);Ste=n(HEe,"STRONG",{});var yJr=s(Ste);W8o=r(yJr,"m2m_100"),yJr.forEach(t),Q8o=r(HEe," \u2014 "),OI=n(HEe,"A",{href:!0});var wJr=s(OI);H8o=r(wJr,"M2M100ForConditionalGeneration"),wJr.forEach(t),U8o=r(HEe," (M2M100 model)"),HEe.forEach(t),J8o=i(ie),U1=n(ie,"LI",{});var UEe=s(U1);Pte=n(UEe,"STRONG",{});var AJr=s(Pte);Y8o=r(AJr,"marian"),AJr.forEach(t),K8o=r(UEe," \u2014 "),GI=n(UEe,"A",{href:!0});var LJr=s(GI);Z8o=r(LJr,"MarianMTModel"),LJr.forEach(t),eFo=r(UEe," (Marian model)"),UEe.forEach(t),oFo=i(ie),J1=n(ie,"LI",{});var JEe=s(J1);$te=n(JEe,"STRONG",{});var BJr=s($te);rFo=r(BJr,"mbart"),BJr.forEach(t),tFo=r(JEe," \u2014 "),XI=n(JEe,"A",{href:!0});var xJr=s(XI);aFo=r(xJr,"MBartForConditionalGeneration"),xJr.forEach(t),nFo=r(JEe," (mBART model)"),JEe.forEach(t),sFo=i(ie),Y1=n(ie,"LI",{});var YEe=s(Y1);Ite=n(YEe,"STRONG",{});var kJr=s(Ite);lFo=r(kJr,"mt5"),kJr.forEach(t),iFo=r(YEe," \u2014 "),VI=n(YEe,"A",{href:!0});var RJr=s(VI);dFo=r(RJr,"MT5ForConditionalGeneration"),RJr.forEach(t),cFo=r(YEe," (mT5 model)"),YEe.forEach(t),fFo=i(ie),K1=n(ie,"LI",{});var KEe=s(K1);jte=n(KEe,"STRONG",{});var SJr=s(jte);mFo=r(SJr,"pegasus"),SJr.forEach(t),gFo=r(KEe," \u2014 "),zI=n(KEe,"A",{href:!0});var PJr=s(zI);hFo=r(PJr,"PegasusForConditionalGeneration"),PJr.forEach(t),pFo=r(KEe," (Pegasus model)"),KEe.forEach(t),_Fo=i(ie),Z1=n(ie,"LI",{});var ZEe=s(Z1);Dte=n(ZEe,"STRONG",{});var $Jr=s(Dte);uFo=r($Jr,"plbart"),$Jr.forEach(t),bFo=r(ZEe," \u2014 "),WI=n(ZEe,"A",{href:!0});var IJr=s(WI);vFo=r(IJr,"PLBartForConditionalGeneration"),IJr.forEach(t),TFo=r(ZEe," (PLBart model)"),ZEe.forEach(t),FFo=i(ie),eb=n(ie,"LI",{});var e3e=s(eb);Nte=n(e3e,"STRONG",{});var jJr=s(Nte);CFo=r(jJr,"prophetnet"),jJr.forEach(t),MFo=r(e3e," \u2014 "),QI=n(e3e,"A",{href:!0});var DJr=s(QI);EFo=r(DJr,"ProphetNetForConditionalGeneration"),DJr.forEach(t),yFo=r(e3e," (ProphetNet model)"),e3e.forEach(t),wFo=i(ie),ob=n(ie,"LI",{});var o3e=s(ob);qte=n(o3e,"STRONG",{});var NJr=s(qte);AFo=r(NJr,"t5"),NJr.forEach(t),LFo=r(o3e," \u2014 "),HI=n(o3e,"A",{href:!0});var qJr=s(HI);BFo=r(qJr,"T5ForConditionalGeneration"),qJr.forEach(t),xFo=r(o3e," (T5 model)"),o3e.forEach(t),kFo=i(ie),rb=n(ie,"LI",{});var r3e=s(rb);Ote=n(r3e,"STRONG",{});var OJr=s(Ote);RFo=r(OJr,"xlm-prophetnet"),OJr.forEach(t),SFo=r(r3e," \u2014 "),UI=n(r3e,"A",{href:!0});var GJr=s(UI);PFo=r(GJr,"XLMProphetNetForConditionalGeneration"),GJr.forEach(t),$Fo=r(r3e," (XLMProphetNet model)"),r3e.forEach(t),ie.forEach(t),IFo=i(Qt),tb=n(Qt,"P",{});var t3e=s(tb);jFo=r(t3e,"The model is set in evaluation mode by default using "),Gte=n(t3e,"CODE",{});var XJr=s(Gte);DFo=r(XJr,"model.eval()"),XJr.forEach(t),NFo=r(t3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xte=n(t3e,"CODE",{});var VJr=s(Xte);qFo=r(VJr,"model.train()"),VJr.forEach(t),t3e.forEach(t),OFo=i(Qt),Vte=n(Qt,"P",{});var zJr=s(Vte);GFo=r(zJr,"Examples:"),zJr.forEach(t),XFo=i(Qt),m(LE.$$.fragment,Qt),Qt.forEach(t),nl.forEach(t),Qke=i(d),vd=n(d,"H2",{class:!0});var aPe=s(vd);ab=n(aPe,"A",{id:!0,class:!0,href:!0});var WJr=s(ab);zte=n(WJr,"SPAN",{});var QJr=s(zte);m(BE.$$.fragment,QJr),QJr.forEach(t),WJr.forEach(t),VFo=i(aPe),Wte=n(aPe,"SPAN",{});var HJr=s(Wte);zFo=r(HJr,"AutoModelForSequenceClassification"),HJr.forEach(t),aPe.forEach(t),Hke=i(d),rr=n(d,"DIV",{class:!0});var ll=s(rr);m(xE.$$.fragment,ll),WFo=i(ll),Td=n(ll,"P",{});var bW=s(Td);QFo=r(bW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Qte=n(bW,"CODE",{});var UJr=s(Qte);HFo=r(UJr,"from_pretrained()"),UJr.forEach(t),UFo=r(bW,"class method or the "),Hte=n(bW,"CODE",{});var JJr=s(Hte);JFo=r(JJr,"from_config()"),JJr.forEach(t),YFo=r(bW,`class
method.`),bW.forEach(t),KFo=i(ll),kE=n(ll,"P",{});var nPe=s(kE);ZFo=r(nPe,"This class cannot be instantiated directly using "),Ute=n(nPe,"CODE",{});var YJr=s(Ute);eCo=r(YJr,"__init__()"),YJr.forEach(t),oCo=r(nPe," (throws an error)."),nPe.forEach(t),rCo=i(ll),Yr=n(ll,"DIV",{class:!0});var il=s(Yr);m(RE.$$.fragment,il),tCo=i(il),Jte=n(il,"P",{});var KJr=s(Jte);aCo=r(KJr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),KJr.forEach(t),nCo=i(il),Fd=n(il,"P",{});var vW=s(Fd);sCo=r(vW,`Note:
Loading a model from its configuration file does `),Yte=n(vW,"STRONG",{});var ZJr=s(Yte);lCo=r(ZJr,"not"),ZJr.forEach(t),iCo=r(vW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Kte=n(vW,"CODE",{});var eYr=s(Kte);dCo=r(eYr,"from_pretrained()"),eYr.forEach(t),cCo=r(vW,"to load the model weights."),vW.forEach(t),fCo=i(il),Zte=n(il,"P",{});var oYr=s(Zte);mCo=r(oYr,"Examples:"),oYr.forEach(t),gCo=i(il),m(SE.$$.fragment,il),il.forEach(t),hCo=i(ll),Xe=n(ll,"DIV",{class:!0});var Ht=s(Xe);m(PE.$$.fragment,Ht),pCo=i(Ht),eae=n(Ht,"P",{});var rYr=s(eae);_Co=r(rYr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),rYr.forEach(t),uCo=i(Ht),Za=n(Ht,"P",{});var CM=s(Za);bCo=r(CM,"The model class to instantiate is selected based on the "),oae=n(CM,"CODE",{});var tYr=s(oae);vCo=r(tYr,"model_type"),tYr.forEach(t),TCo=r(CM,` property of the config object (either
passed as an argument or loaded from `),rae=n(CM,"CODE",{});var aYr=s(rae);FCo=r(aYr,"pretrained_model_name_or_path"),aYr.forEach(t),CCo=r(CM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tae=n(CM,"CODE",{});var nYr=s(tae);MCo=r(nYr,"pretrained_model_name_or_path"),nYr.forEach(t),ECo=r(CM,":"),CM.forEach(t),yCo=i(Ht),A=n(Ht,"UL",{});var L=s(A);nb=n(L,"LI",{});var a3e=s(nb);aae=n(a3e,"STRONG",{});var sYr=s(aae);wCo=r(sYr,"albert"),sYr.forEach(t),ACo=r(a3e," \u2014 "),JI=n(a3e,"A",{href:!0});var lYr=s(JI);LCo=r(lYr,"AlbertForSequenceClassification"),lYr.forEach(t),BCo=r(a3e," (ALBERT model)"),a3e.forEach(t),xCo=i(L),sb=n(L,"LI",{});var n3e=s(sb);nae=n(n3e,"STRONG",{});var iYr=s(nae);kCo=r(iYr,"bart"),iYr.forEach(t),RCo=r(n3e," \u2014 "),YI=n(n3e,"A",{href:!0});var dYr=s(YI);SCo=r(dYr,"BartForSequenceClassification"),dYr.forEach(t),PCo=r(n3e," (BART model)"),n3e.forEach(t),$Co=i(L),lb=n(L,"LI",{});var s3e=s(lb);sae=n(s3e,"STRONG",{});var cYr=s(sae);ICo=r(cYr,"bert"),cYr.forEach(t),jCo=r(s3e," \u2014 "),KI=n(s3e,"A",{href:!0});var fYr=s(KI);DCo=r(fYr,"BertForSequenceClassification"),fYr.forEach(t),NCo=r(s3e," (BERT model)"),s3e.forEach(t),qCo=i(L),ib=n(L,"LI",{});var l3e=s(ib);lae=n(l3e,"STRONG",{});var mYr=s(lae);OCo=r(mYr,"big_bird"),mYr.forEach(t),GCo=r(l3e," \u2014 "),ZI=n(l3e,"A",{href:!0});var gYr=s(ZI);XCo=r(gYr,"BigBirdForSequenceClassification"),gYr.forEach(t),VCo=r(l3e," (BigBird model)"),l3e.forEach(t),zCo=i(L),db=n(L,"LI",{});var i3e=s(db);iae=n(i3e,"STRONG",{});var hYr=s(iae);WCo=r(hYr,"bigbird_pegasus"),hYr.forEach(t),QCo=r(i3e," \u2014 "),ej=n(i3e,"A",{href:!0});var pYr=s(ej);HCo=r(pYr,"BigBirdPegasusForSequenceClassification"),pYr.forEach(t),UCo=r(i3e," (BigBirdPegasus model)"),i3e.forEach(t),JCo=i(L),cb=n(L,"LI",{});var d3e=s(cb);dae=n(d3e,"STRONG",{});var _Yr=s(dae);YCo=r(_Yr,"camembert"),_Yr.forEach(t),KCo=r(d3e," \u2014 "),oj=n(d3e,"A",{href:!0});var uYr=s(oj);ZCo=r(uYr,"CamembertForSequenceClassification"),uYr.forEach(t),eMo=r(d3e," (CamemBERT model)"),d3e.forEach(t),oMo=i(L),fb=n(L,"LI",{});var c3e=s(fb);cae=n(c3e,"STRONG",{});var bYr=s(cae);rMo=r(bYr,"canine"),bYr.forEach(t),tMo=r(c3e," \u2014 "),rj=n(c3e,"A",{href:!0});var vYr=s(rj);aMo=r(vYr,"CanineForSequenceClassification"),vYr.forEach(t),nMo=r(c3e," (Canine model)"),c3e.forEach(t),sMo=i(L),mb=n(L,"LI",{});var f3e=s(mb);fae=n(f3e,"STRONG",{});var TYr=s(fae);lMo=r(TYr,"convbert"),TYr.forEach(t),iMo=r(f3e," \u2014 "),tj=n(f3e,"A",{href:!0});var FYr=s(tj);dMo=r(FYr,"ConvBertForSequenceClassification"),FYr.forEach(t),cMo=r(f3e," (ConvBERT model)"),f3e.forEach(t),fMo=i(L),gb=n(L,"LI",{});var m3e=s(gb);mae=n(m3e,"STRONG",{});var CYr=s(mae);mMo=r(CYr,"ctrl"),CYr.forEach(t),gMo=r(m3e," \u2014 "),aj=n(m3e,"A",{href:!0});var MYr=s(aj);hMo=r(MYr,"CTRLForSequenceClassification"),MYr.forEach(t),pMo=r(m3e," (CTRL model)"),m3e.forEach(t),_Mo=i(L),hb=n(L,"LI",{});var g3e=s(hb);gae=n(g3e,"STRONG",{});var EYr=s(gae);uMo=r(EYr,"data2vec-text"),EYr.forEach(t),bMo=r(g3e," \u2014 "),nj=n(g3e,"A",{href:!0});var yYr=s(nj);vMo=r(yYr,"Data2VecTextForSequenceClassification"),yYr.forEach(t),TMo=r(g3e," (Data2VecText model)"),g3e.forEach(t),FMo=i(L),pb=n(L,"LI",{});var h3e=s(pb);hae=n(h3e,"STRONG",{});var wYr=s(hae);CMo=r(wYr,"deberta"),wYr.forEach(t),MMo=r(h3e," \u2014 "),sj=n(h3e,"A",{href:!0});var AYr=s(sj);EMo=r(AYr,"DebertaForSequenceClassification"),AYr.forEach(t),yMo=r(h3e," (DeBERTa model)"),h3e.forEach(t),wMo=i(L),_b=n(L,"LI",{});var p3e=s(_b);pae=n(p3e,"STRONG",{});var LYr=s(pae);AMo=r(LYr,"deberta-v2"),LYr.forEach(t),LMo=r(p3e," \u2014 "),lj=n(p3e,"A",{href:!0});var BYr=s(lj);BMo=r(BYr,"DebertaV2ForSequenceClassification"),BYr.forEach(t),xMo=r(p3e," (DeBERTa-v2 model)"),p3e.forEach(t),kMo=i(L),ub=n(L,"LI",{});var _3e=s(ub);_ae=n(_3e,"STRONG",{});var xYr=s(_ae);RMo=r(xYr,"distilbert"),xYr.forEach(t),SMo=r(_3e," \u2014 "),ij=n(_3e,"A",{href:!0});var kYr=s(ij);PMo=r(kYr,"DistilBertForSequenceClassification"),kYr.forEach(t),$Mo=r(_3e," (DistilBERT model)"),_3e.forEach(t),IMo=i(L),bb=n(L,"LI",{});var u3e=s(bb);uae=n(u3e,"STRONG",{});var RYr=s(uae);jMo=r(RYr,"electra"),RYr.forEach(t),DMo=r(u3e," \u2014 "),dj=n(u3e,"A",{href:!0});var SYr=s(dj);NMo=r(SYr,"ElectraForSequenceClassification"),SYr.forEach(t),qMo=r(u3e," (ELECTRA model)"),u3e.forEach(t),OMo=i(L),vb=n(L,"LI",{});var b3e=s(vb);bae=n(b3e,"STRONG",{});var PYr=s(bae);GMo=r(PYr,"flaubert"),PYr.forEach(t),XMo=r(b3e," \u2014 "),cj=n(b3e,"A",{href:!0});var $Yr=s(cj);VMo=r($Yr,"FlaubertForSequenceClassification"),$Yr.forEach(t),zMo=r(b3e," (FlauBERT model)"),b3e.forEach(t),WMo=i(L),Tb=n(L,"LI",{});var v3e=s(Tb);vae=n(v3e,"STRONG",{});var IYr=s(vae);QMo=r(IYr,"fnet"),IYr.forEach(t),HMo=r(v3e," \u2014 "),fj=n(v3e,"A",{href:!0});var jYr=s(fj);UMo=r(jYr,"FNetForSequenceClassification"),jYr.forEach(t),JMo=r(v3e," (FNet model)"),v3e.forEach(t),YMo=i(L),Fb=n(L,"LI",{});var T3e=s(Fb);Tae=n(T3e,"STRONG",{});var DYr=s(Tae);KMo=r(DYr,"funnel"),DYr.forEach(t),ZMo=r(T3e," \u2014 "),mj=n(T3e,"A",{href:!0});var NYr=s(mj);e4o=r(NYr,"FunnelForSequenceClassification"),NYr.forEach(t),o4o=r(T3e," (Funnel Transformer model)"),T3e.forEach(t),r4o=i(L),Cb=n(L,"LI",{});var F3e=s(Cb);Fae=n(F3e,"STRONG",{});var qYr=s(Fae);t4o=r(qYr,"gpt2"),qYr.forEach(t),a4o=r(F3e," \u2014 "),gj=n(F3e,"A",{href:!0});var OYr=s(gj);n4o=r(OYr,"GPT2ForSequenceClassification"),OYr.forEach(t),s4o=r(F3e," (OpenAI GPT-2 model)"),F3e.forEach(t),l4o=i(L),Mb=n(L,"LI",{});var C3e=s(Mb);Cae=n(C3e,"STRONG",{});var GYr=s(Cae);i4o=r(GYr,"gpt_neo"),GYr.forEach(t),d4o=r(C3e," \u2014 "),hj=n(C3e,"A",{href:!0});var XYr=s(hj);c4o=r(XYr,"GPTNeoForSequenceClassification"),XYr.forEach(t),f4o=r(C3e," (GPT Neo model)"),C3e.forEach(t),m4o=i(L),Eb=n(L,"LI",{});var M3e=s(Eb);Mae=n(M3e,"STRONG",{});var VYr=s(Mae);g4o=r(VYr,"gptj"),VYr.forEach(t),h4o=r(M3e," \u2014 "),pj=n(M3e,"A",{href:!0});var zYr=s(pj);p4o=r(zYr,"GPTJForSequenceClassification"),zYr.forEach(t),_4o=r(M3e," (GPT-J model)"),M3e.forEach(t),u4o=i(L),yb=n(L,"LI",{});var E3e=s(yb);Eae=n(E3e,"STRONG",{});var WYr=s(Eae);b4o=r(WYr,"ibert"),WYr.forEach(t),v4o=r(E3e," \u2014 "),_j=n(E3e,"A",{href:!0});var QYr=s(_j);T4o=r(QYr,"IBertForSequenceClassification"),QYr.forEach(t),F4o=r(E3e," (I-BERT model)"),E3e.forEach(t),C4o=i(L),wb=n(L,"LI",{});var y3e=s(wb);yae=n(y3e,"STRONG",{});var HYr=s(yae);M4o=r(HYr,"layoutlm"),HYr.forEach(t),E4o=r(y3e," \u2014 "),uj=n(y3e,"A",{href:!0});var UYr=s(uj);y4o=r(UYr,"LayoutLMForSequenceClassification"),UYr.forEach(t),w4o=r(y3e," (LayoutLM model)"),y3e.forEach(t),A4o=i(L),Ab=n(L,"LI",{});var w3e=s(Ab);wae=n(w3e,"STRONG",{});var JYr=s(wae);L4o=r(JYr,"layoutlmv2"),JYr.forEach(t),B4o=r(w3e," \u2014 "),bj=n(w3e,"A",{href:!0});var YYr=s(bj);x4o=r(YYr,"LayoutLMv2ForSequenceClassification"),YYr.forEach(t),k4o=r(w3e," (LayoutLMv2 model)"),w3e.forEach(t),R4o=i(L),Lb=n(L,"LI",{});var A3e=s(Lb);Aae=n(A3e,"STRONG",{});var KYr=s(Aae);S4o=r(KYr,"led"),KYr.forEach(t),P4o=r(A3e," \u2014 "),vj=n(A3e,"A",{href:!0});var ZYr=s(vj);$4o=r(ZYr,"LEDForSequenceClassification"),ZYr.forEach(t),I4o=r(A3e," (LED model)"),A3e.forEach(t),j4o=i(L),Bb=n(L,"LI",{});var L3e=s(Bb);Lae=n(L3e,"STRONG",{});var eKr=s(Lae);D4o=r(eKr,"longformer"),eKr.forEach(t),N4o=r(L3e," \u2014 "),Tj=n(L3e,"A",{href:!0});var oKr=s(Tj);q4o=r(oKr,"LongformerForSequenceClassification"),oKr.forEach(t),O4o=r(L3e," (Longformer model)"),L3e.forEach(t),G4o=i(L),xb=n(L,"LI",{});var B3e=s(xb);Bae=n(B3e,"STRONG",{});var rKr=s(Bae);X4o=r(rKr,"mbart"),rKr.forEach(t),V4o=r(B3e," \u2014 "),Fj=n(B3e,"A",{href:!0});var tKr=s(Fj);z4o=r(tKr,"MBartForSequenceClassification"),tKr.forEach(t),W4o=r(B3e," (mBART model)"),B3e.forEach(t),Q4o=i(L),kb=n(L,"LI",{});var x3e=s(kb);xae=n(x3e,"STRONG",{});var aKr=s(xae);H4o=r(aKr,"megatron-bert"),aKr.forEach(t),U4o=r(x3e," \u2014 "),Cj=n(x3e,"A",{href:!0});var nKr=s(Cj);J4o=r(nKr,"MegatronBertForSequenceClassification"),nKr.forEach(t),Y4o=r(x3e," (MegatronBert model)"),x3e.forEach(t),K4o=i(L),Rb=n(L,"LI",{});var k3e=s(Rb);kae=n(k3e,"STRONG",{});var sKr=s(kae);Z4o=r(sKr,"mobilebert"),sKr.forEach(t),eEo=r(k3e," \u2014 "),Mj=n(k3e,"A",{href:!0});var lKr=s(Mj);oEo=r(lKr,"MobileBertForSequenceClassification"),lKr.forEach(t),rEo=r(k3e," (MobileBERT model)"),k3e.forEach(t),tEo=i(L),Sb=n(L,"LI",{});var R3e=s(Sb);Rae=n(R3e,"STRONG",{});var iKr=s(Rae);aEo=r(iKr,"mpnet"),iKr.forEach(t),nEo=r(R3e," \u2014 "),Ej=n(R3e,"A",{href:!0});var dKr=s(Ej);sEo=r(dKr,"MPNetForSequenceClassification"),dKr.forEach(t),lEo=r(R3e," (MPNet model)"),R3e.forEach(t),iEo=i(L),Pb=n(L,"LI",{});var S3e=s(Pb);Sae=n(S3e,"STRONG",{});var cKr=s(Sae);dEo=r(cKr,"nystromformer"),cKr.forEach(t),cEo=r(S3e," \u2014 "),yj=n(S3e,"A",{href:!0});var fKr=s(yj);fEo=r(fKr,"NystromformerForSequenceClassification"),fKr.forEach(t),mEo=r(S3e," (Nystromformer model)"),S3e.forEach(t),gEo=i(L),$b=n(L,"LI",{});var P3e=s($b);Pae=n(P3e,"STRONG",{});var mKr=s(Pae);hEo=r(mKr,"openai-gpt"),mKr.forEach(t),pEo=r(P3e," \u2014 "),wj=n(P3e,"A",{href:!0});var gKr=s(wj);_Eo=r(gKr,"OpenAIGPTForSequenceClassification"),gKr.forEach(t),uEo=r(P3e," (OpenAI GPT model)"),P3e.forEach(t),bEo=i(L),Ib=n(L,"LI",{});var $3e=s(Ib);$ae=n($3e,"STRONG",{});var hKr=s($ae);vEo=r(hKr,"perceiver"),hKr.forEach(t),TEo=r($3e," \u2014 "),Aj=n($3e,"A",{href:!0});var pKr=s(Aj);FEo=r(pKr,"PerceiverForSequenceClassification"),pKr.forEach(t),CEo=r($3e," (Perceiver model)"),$3e.forEach(t),MEo=i(L),jb=n(L,"LI",{});var I3e=s(jb);Iae=n(I3e,"STRONG",{});var _Kr=s(Iae);EEo=r(_Kr,"plbart"),_Kr.forEach(t),yEo=r(I3e," \u2014 "),Lj=n(I3e,"A",{href:!0});var uKr=s(Lj);wEo=r(uKr,"PLBartForSequenceClassification"),uKr.forEach(t),AEo=r(I3e," (PLBart model)"),I3e.forEach(t),LEo=i(L),Db=n(L,"LI",{});var j3e=s(Db);jae=n(j3e,"STRONG",{});var bKr=s(jae);BEo=r(bKr,"qdqbert"),bKr.forEach(t),xEo=r(j3e," \u2014 "),Bj=n(j3e,"A",{href:!0});var vKr=s(Bj);kEo=r(vKr,"QDQBertForSequenceClassification"),vKr.forEach(t),REo=r(j3e," (QDQBert model)"),j3e.forEach(t),SEo=i(L),Nb=n(L,"LI",{});var D3e=s(Nb);Dae=n(D3e,"STRONG",{});var TKr=s(Dae);PEo=r(TKr,"reformer"),TKr.forEach(t),$Eo=r(D3e," \u2014 "),xj=n(D3e,"A",{href:!0});var FKr=s(xj);IEo=r(FKr,"ReformerForSequenceClassification"),FKr.forEach(t),jEo=r(D3e," (Reformer model)"),D3e.forEach(t),DEo=i(L),qb=n(L,"LI",{});var N3e=s(qb);Nae=n(N3e,"STRONG",{});var CKr=s(Nae);NEo=r(CKr,"rembert"),CKr.forEach(t),qEo=r(N3e," \u2014 "),kj=n(N3e,"A",{href:!0});var MKr=s(kj);OEo=r(MKr,"RemBertForSequenceClassification"),MKr.forEach(t),GEo=r(N3e," (RemBERT model)"),N3e.forEach(t),XEo=i(L),Ob=n(L,"LI",{});var q3e=s(Ob);qae=n(q3e,"STRONG",{});var EKr=s(qae);VEo=r(EKr,"roberta"),EKr.forEach(t),zEo=r(q3e," \u2014 "),Rj=n(q3e,"A",{href:!0});var yKr=s(Rj);WEo=r(yKr,"RobertaForSequenceClassification"),yKr.forEach(t),QEo=r(q3e," (RoBERTa model)"),q3e.forEach(t),HEo=i(L),Gb=n(L,"LI",{});var O3e=s(Gb);Oae=n(O3e,"STRONG",{});var wKr=s(Oae);UEo=r(wKr,"roformer"),wKr.forEach(t),JEo=r(O3e," \u2014 "),Sj=n(O3e,"A",{href:!0});var AKr=s(Sj);YEo=r(AKr,"RoFormerForSequenceClassification"),AKr.forEach(t),KEo=r(O3e," (RoFormer model)"),O3e.forEach(t),ZEo=i(L),Xb=n(L,"LI",{});var G3e=s(Xb);Gae=n(G3e,"STRONG",{});var LKr=s(Gae);e3o=r(LKr,"squeezebert"),LKr.forEach(t),o3o=r(G3e," \u2014 "),Pj=n(G3e,"A",{href:!0});var BKr=s(Pj);r3o=r(BKr,"SqueezeBertForSequenceClassification"),BKr.forEach(t),t3o=r(G3e," (SqueezeBERT model)"),G3e.forEach(t),a3o=i(L),Vb=n(L,"LI",{});var X3e=s(Vb);Xae=n(X3e,"STRONG",{});var xKr=s(Xae);n3o=r(xKr,"tapas"),xKr.forEach(t),s3o=r(X3e," \u2014 "),$j=n(X3e,"A",{href:!0});var kKr=s($j);l3o=r(kKr,"TapasForSequenceClassification"),kKr.forEach(t),i3o=r(X3e," (TAPAS model)"),X3e.forEach(t),d3o=i(L),zb=n(L,"LI",{});var V3e=s(zb);Vae=n(V3e,"STRONG",{});var RKr=s(Vae);c3o=r(RKr,"transfo-xl"),RKr.forEach(t),f3o=r(V3e," \u2014 "),Ij=n(V3e,"A",{href:!0});var SKr=s(Ij);m3o=r(SKr,"TransfoXLForSequenceClassification"),SKr.forEach(t),g3o=r(V3e," (Transformer-XL model)"),V3e.forEach(t),h3o=i(L),Wb=n(L,"LI",{});var z3e=s(Wb);zae=n(z3e,"STRONG",{});var PKr=s(zae);p3o=r(PKr,"xlm"),PKr.forEach(t),_3o=r(z3e," \u2014 "),jj=n(z3e,"A",{href:!0});var $Kr=s(jj);u3o=r($Kr,"XLMForSequenceClassification"),$Kr.forEach(t),b3o=r(z3e," (XLM model)"),z3e.forEach(t),v3o=i(L),Qb=n(L,"LI",{});var W3e=s(Qb);Wae=n(W3e,"STRONG",{});var IKr=s(Wae);T3o=r(IKr,"xlm-roberta"),IKr.forEach(t),F3o=r(W3e," \u2014 "),Dj=n(W3e,"A",{href:!0});var jKr=s(Dj);C3o=r(jKr,"XLMRobertaForSequenceClassification"),jKr.forEach(t),M3o=r(W3e," (XLM-RoBERTa model)"),W3e.forEach(t),E3o=i(L),Hb=n(L,"LI",{});var Q3e=s(Hb);Qae=n(Q3e,"STRONG",{});var DKr=s(Qae);y3o=r(DKr,"xlm-roberta-xl"),DKr.forEach(t),w3o=r(Q3e," \u2014 "),Nj=n(Q3e,"A",{href:!0});var NKr=s(Nj);A3o=r(NKr,"XLMRobertaXLForSequenceClassification"),NKr.forEach(t),L3o=r(Q3e," (XLM-RoBERTa-XL model)"),Q3e.forEach(t),B3o=i(L),Ub=n(L,"LI",{});var H3e=s(Ub);Hae=n(H3e,"STRONG",{});var qKr=s(Hae);x3o=r(qKr,"xlnet"),qKr.forEach(t),k3o=r(H3e," \u2014 "),qj=n(H3e,"A",{href:!0});var OKr=s(qj);R3o=r(OKr,"XLNetForSequenceClassification"),OKr.forEach(t),S3o=r(H3e," (XLNet model)"),H3e.forEach(t),P3o=i(L),Jb=n(L,"LI",{});var U3e=s(Jb);Uae=n(U3e,"STRONG",{});var GKr=s(Uae);$3o=r(GKr,"yoso"),GKr.forEach(t),I3o=r(U3e," \u2014 "),Oj=n(U3e,"A",{href:!0});var XKr=s(Oj);j3o=r(XKr,"YosoForSequenceClassification"),XKr.forEach(t),D3o=r(U3e," (YOSO model)"),U3e.forEach(t),L.forEach(t),N3o=i(Ht),Yb=n(Ht,"P",{});var J3e=s(Yb);q3o=r(J3e,"The model is set in evaluation mode by default using "),Jae=n(J3e,"CODE",{});var VKr=s(Jae);O3o=r(VKr,"model.eval()"),VKr.forEach(t),G3o=r(J3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yae=n(J3e,"CODE",{});var zKr=s(Yae);X3o=r(zKr,"model.train()"),zKr.forEach(t),J3e.forEach(t),V3o=i(Ht),Kae=n(Ht,"P",{});var WKr=s(Kae);z3o=r(WKr,"Examples:"),WKr.forEach(t),W3o=i(Ht),m($E.$$.fragment,Ht),Ht.forEach(t),ll.forEach(t),Uke=i(d),Cd=n(d,"H2",{class:!0});var sPe=s(Cd);Kb=n(sPe,"A",{id:!0,class:!0,href:!0});var QKr=s(Kb);Zae=n(QKr,"SPAN",{});var HKr=s(Zae);m(IE.$$.fragment,HKr),HKr.forEach(t),QKr.forEach(t),Q3o=i(sPe),ene=n(sPe,"SPAN",{});var UKr=s(ene);H3o=r(UKr,"AutoModelForMultipleChoice"),UKr.forEach(t),sPe.forEach(t),Jke=i(d),tr=n(d,"DIV",{class:!0});var dl=s(tr);m(jE.$$.fragment,dl),U3o=i(dl),Md=n(dl,"P",{});var TW=s(Md);J3o=r(TW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),one=n(TW,"CODE",{});var JKr=s(one);Y3o=r(JKr,"from_pretrained()"),JKr.forEach(t),K3o=r(TW,"class method or the "),rne=n(TW,"CODE",{});var YKr=s(rne);Z3o=r(YKr,"from_config()"),YKr.forEach(t),eyo=r(TW,`class
method.`),TW.forEach(t),oyo=i(dl),DE=n(dl,"P",{});var lPe=s(DE);ryo=r(lPe,"This class cannot be instantiated directly using "),tne=n(lPe,"CODE",{});var KKr=s(tne);tyo=r(KKr,"__init__()"),KKr.forEach(t),ayo=r(lPe," (throws an error)."),lPe.forEach(t),nyo=i(dl),Kr=n(dl,"DIV",{class:!0});var cl=s(Kr);m(NE.$$.fragment,cl),syo=i(cl),ane=n(cl,"P",{});var ZKr=s(ane);lyo=r(ZKr,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),ZKr.forEach(t),iyo=i(cl),Ed=n(cl,"P",{});var FW=s(Ed);dyo=r(FW,`Note:
Loading a model from its configuration file does `),nne=n(FW,"STRONG",{});var eZr=s(nne);cyo=r(eZr,"not"),eZr.forEach(t),fyo=r(FW,` load the model weights. It only affects the
model\u2019s configuration. Use `),sne=n(FW,"CODE",{});var oZr=s(sne);myo=r(oZr,"from_pretrained()"),oZr.forEach(t),gyo=r(FW,"to load the model weights."),FW.forEach(t),hyo=i(cl),lne=n(cl,"P",{});var rZr=s(lne);pyo=r(rZr,"Examples:"),rZr.forEach(t),_yo=i(cl),m(qE.$$.fragment,cl),cl.forEach(t),uyo=i(dl),Ve=n(dl,"DIV",{class:!0});var Ut=s(Ve);m(OE.$$.fragment,Ut),byo=i(Ut),ine=n(Ut,"P",{});var tZr=s(ine);vyo=r(tZr,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),tZr.forEach(t),Tyo=i(Ut),en=n(Ut,"P",{});var MM=s(en);Fyo=r(MM,"The model class to instantiate is selected based on the "),dne=n(MM,"CODE",{});var aZr=s(dne);Cyo=r(aZr,"model_type"),aZr.forEach(t),Myo=r(MM,` property of the config object (either
passed as an argument or loaded from `),cne=n(MM,"CODE",{});var nZr=s(cne);Eyo=r(nZr,"pretrained_model_name_or_path"),nZr.forEach(t),yyo=r(MM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fne=n(MM,"CODE",{});var sZr=s(fne);wyo=r(sZr,"pretrained_model_name_or_path"),sZr.forEach(t),Ayo=r(MM,":"),MM.forEach(t),Lyo=i(Ut),O=n(Ut,"UL",{});var G=s(O);Zb=n(G,"LI",{});var Y3e=s(Zb);mne=n(Y3e,"STRONG",{});var lZr=s(mne);Byo=r(lZr,"albert"),lZr.forEach(t),xyo=r(Y3e," \u2014 "),Gj=n(Y3e,"A",{href:!0});var iZr=s(Gj);kyo=r(iZr,"AlbertForMultipleChoice"),iZr.forEach(t),Ryo=r(Y3e," (ALBERT model)"),Y3e.forEach(t),Syo=i(G),e5=n(G,"LI",{});var K3e=s(e5);gne=n(K3e,"STRONG",{});var dZr=s(gne);Pyo=r(dZr,"bert"),dZr.forEach(t),$yo=r(K3e," \u2014 "),Xj=n(K3e,"A",{href:!0});var cZr=s(Xj);Iyo=r(cZr,"BertForMultipleChoice"),cZr.forEach(t),jyo=r(K3e," (BERT model)"),K3e.forEach(t),Dyo=i(G),o5=n(G,"LI",{});var Z3e=s(o5);hne=n(Z3e,"STRONG",{});var fZr=s(hne);Nyo=r(fZr,"big_bird"),fZr.forEach(t),qyo=r(Z3e," \u2014 "),Vj=n(Z3e,"A",{href:!0});var mZr=s(Vj);Oyo=r(mZr,"BigBirdForMultipleChoice"),mZr.forEach(t),Gyo=r(Z3e," (BigBird model)"),Z3e.forEach(t),Xyo=i(G),r5=n(G,"LI",{});var eye=s(r5);pne=n(eye,"STRONG",{});var gZr=s(pne);Vyo=r(gZr,"camembert"),gZr.forEach(t),zyo=r(eye," \u2014 "),zj=n(eye,"A",{href:!0});var hZr=s(zj);Wyo=r(hZr,"CamembertForMultipleChoice"),hZr.forEach(t),Qyo=r(eye," (CamemBERT model)"),eye.forEach(t),Hyo=i(G),t5=n(G,"LI",{});var oye=s(t5);_ne=n(oye,"STRONG",{});var pZr=s(_ne);Uyo=r(pZr,"canine"),pZr.forEach(t),Jyo=r(oye," \u2014 "),Wj=n(oye,"A",{href:!0});var _Zr=s(Wj);Yyo=r(_Zr,"CanineForMultipleChoice"),_Zr.forEach(t),Kyo=r(oye," (Canine model)"),oye.forEach(t),Zyo=i(G),a5=n(G,"LI",{});var rye=s(a5);une=n(rye,"STRONG",{});var uZr=s(une);ewo=r(uZr,"convbert"),uZr.forEach(t),owo=r(rye," \u2014 "),Qj=n(rye,"A",{href:!0});var bZr=s(Qj);rwo=r(bZr,"ConvBertForMultipleChoice"),bZr.forEach(t),two=r(rye," (ConvBERT model)"),rye.forEach(t),awo=i(G),n5=n(G,"LI",{});var tye=s(n5);bne=n(tye,"STRONG",{});var vZr=s(bne);nwo=r(vZr,"data2vec-text"),vZr.forEach(t),swo=r(tye," \u2014 "),Hj=n(tye,"A",{href:!0});var TZr=s(Hj);lwo=r(TZr,"Data2VecTextForMultipleChoice"),TZr.forEach(t),iwo=r(tye," (Data2VecText model)"),tye.forEach(t),dwo=i(G),s5=n(G,"LI",{});var aye=s(s5);vne=n(aye,"STRONG",{});var FZr=s(vne);cwo=r(FZr,"distilbert"),FZr.forEach(t),fwo=r(aye," \u2014 "),Uj=n(aye,"A",{href:!0});var CZr=s(Uj);mwo=r(CZr,"DistilBertForMultipleChoice"),CZr.forEach(t),gwo=r(aye," (DistilBERT model)"),aye.forEach(t),hwo=i(G),l5=n(G,"LI",{});var nye=s(l5);Tne=n(nye,"STRONG",{});var MZr=s(Tne);pwo=r(MZr,"electra"),MZr.forEach(t),_wo=r(nye," \u2014 "),Jj=n(nye,"A",{href:!0});var EZr=s(Jj);uwo=r(EZr,"ElectraForMultipleChoice"),EZr.forEach(t),bwo=r(nye," (ELECTRA model)"),nye.forEach(t),vwo=i(G),i5=n(G,"LI",{});var sye=s(i5);Fne=n(sye,"STRONG",{});var yZr=s(Fne);Two=r(yZr,"flaubert"),yZr.forEach(t),Fwo=r(sye," \u2014 "),Yj=n(sye,"A",{href:!0});var wZr=s(Yj);Cwo=r(wZr,"FlaubertForMultipleChoice"),wZr.forEach(t),Mwo=r(sye," (FlauBERT model)"),sye.forEach(t),Ewo=i(G),d5=n(G,"LI",{});var lye=s(d5);Cne=n(lye,"STRONG",{});var AZr=s(Cne);ywo=r(AZr,"fnet"),AZr.forEach(t),wwo=r(lye," \u2014 "),Kj=n(lye,"A",{href:!0});var LZr=s(Kj);Awo=r(LZr,"FNetForMultipleChoice"),LZr.forEach(t),Lwo=r(lye," (FNet model)"),lye.forEach(t),Bwo=i(G),c5=n(G,"LI",{});var iye=s(c5);Mne=n(iye,"STRONG",{});var BZr=s(Mne);xwo=r(BZr,"funnel"),BZr.forEach(t),kwo=r(iye," \u2014 "),Zj=n(iye,"A",{href:!0});var xZr=s(Zj);Rwo=r(xZr,"FunnelForMultipleChoice"),xZr.forEach(t),Swo=r(iye," (Funnel Transformer model)"),iye.forEach(t),Pwo=i(G),f5=n(G,"LI",{});var dye=s(f5);Ene=n(dye,"STRONG",{});var kZr=s(Ene);$wo=r(kZr,"ibert"),kZr.forEach(t),Iwo=r(dye," \u2014 "),eD=n(dye,"A",{href:!0});var RZr=s(eD);jwo=r(RZr,"IBertForMultipleChoice"),RZr.forEach(t),Dwo=r(dye," (I-BERT model)"),dye.forEach(t),Nwo=i(G),m5=n(G,"LI",{});var cye=s(m5);yne=n(cye,"STRONG",{});var SZr=s(yne);qwo=r(SZr,"longformer"),SZr.forEach(t),Owo=r(cye," \u2014 "),oD=n(cye,"A",{href:!0});var PZr=s(oD);Gwo=r(PZr,"LongformerForMultipleChoice"),PZr.forEach(t),Xwo=r(cye," (Longformer model)"),cye.forEach(t),Vwo=i(G),g5=n(G,"LI",{});var fye=s(g5);wne=n(fye,"STRONG",{});var $Zr=s(wne);zwo=r($Zr,"megatron-bert"),$Zr.forEach(t),Wwo=r(fye," \u2014 "),rD=n(fye,"A",{href:!0});var IZr=s(rD);Qwo=r(IZr,"MegatronBertForMultipleChoice"),IZr.forEach(t),Hwo=r(fye," (MegatronBert model)"),fye.forEach(t),Uwo=i(G),h5=n(G,"LI",{});var mye=s(h5);Ane=n(mye,"STRONG",{});var jZr=s(Ane);Jwo=r(jZr,"mobilebert"),jZr.forEach(t),Ywo=r(mye," \u2014 "),tD=n(mye,"A",{href:!0});var DZr=s(tD);Kwo=r(DZr,"MobileBertForMultipleChoice"),DZr.forEach(t),Zwo=r(mye," (MobileBERT model)"),mye.forEach(t),eAo=i(G),p5=n(G,"LI",{});var gye=s(p5);Lne=n(gye,"STRONG",{});var NZr=s(Lne);oAo=r(NZr,"mpnet"),NZr.forEach(t),rAo=r(gye," \u2014 "),aD=n(gye,"A",{href:!0});var qZr=s(aD);tAo=r(qZr,"MPNetForMultipleChoice"),qZr.forEach(t),aAo=r(gye," (MPNet model)"),gye.forEach(t),nAo=i(G),_5=n(G,"LI",{});var hye=s(_5);Bne=n(hye,"STRONG",{});var OZr=s(Bne);sAo=r(OZr,"nystromformer"),OZr.forEach(t),lAo=r(hye," \u2014 "),nD=n(hye,"A",{href:!0});var GZr=s(nD);iAo=r(GZr,"NystromformerForMultipleChoice"),GZr.forEach(t),dAo=r(hye," (Nystromformer model)"),hye.forEach(t),cAo=i(G),u5=n(G,"LI",{});var pye=s(u5);xne=n(pye,"STRONG",{});var XZr=s(xne);fAo=r(XZr,"qdqbert"),XZr.forEach(t),mAo=r(pye," \u2014 "),sD=n(pye,"A",{href:!0});var VZr=s(sD);gAo=r(VZr,"QDQBertForMultipleChoice"),VZr.forEach(t),hAo=r(pye," (QDQBert model)"),pye.forEach(t),pAo=i(G),b5=n(G,"LI",{});var _ye=s(b5);kne=n(_ye,"STRONG",{});var zZr=s(kne);_Ao=r(zZr,"rembert"),zZr.forEach(t),uAo=r(_ye," \u2014 "),lD=n(_ye,"A",{href:!0});var WZr=s(lD);bAo=r(WZr,"RemBertForMultipleChoice"),WZr.forEach(t),vAo=r(_ye," (RemBERT model)"),_ye.forEach(t),TAo=i(G),v5=n(G,"LI",{});var uye=s(v5);Rne=n(uye,"STRONG",{});var QZr=s(Rne);FAo=r(QZr,"roberta"),QZr.forEach(t),CAo=r(uye," \u2014 "),iD=n(uye,"A",{href:!0});var HZr=s(iD);MAo=r(HZr,"RobertaForMultipleChoice"),HZr.forEach(t),EAo=r(uye," (RoBERTa model)"),uye.forEach(t),yAo=i(G),T5=n(G,"LI",{});var bye=s(T5);Sne=n(bye,"STRONG",{});var UZr=s(Sne);wAo=r(UZr,"roformer"),UZr.forEach(t),AAo=r(bye," \u2014 "),dD=n(bye,"A",{href:!0});var JZr=s(dD);LAo=r(JZr,"RoFormerForMultipleChoice"),JZr.forEach(t),BAo=r(bye," (RoFormer model)"),bye.forEach(t),xAo=i(G),F5=n(G,"LI",{});var vye=s(F5);Pne=n(vye,"STRONG",{});var YZr=s(Pne);kAo=r(YZr,"squeezebert"),YZr.forEach(t),RAo=r(vye," \u2014 "),cD=n(vye,"A",{href:!0});var KZr=s(cD);SAo=r(KZr,"SqueezeBertForMultipleChoice"),KZr.forEach(t),PAo=r(vye," (SqueezeBERT model)"),vye.forEach(t),$Ao=i(G),C5=n(G,"LI",{});var Tye=s(C5);$ne=n(Tye,"STRONG",{});var ZZr=s($ne);IAo=r(ZZr,"xlm"),ZZr.forEach(t),jAo=r(Tye," \u2014 "),fD=n(Tye,"A",{href:!0});var eet=s(fD);DAo=r(eet,"XLMForMultipleChoice"),eet.forEach(t),NAo=r(Tye," (XLM model)"),Tye.forEach(t),qAo=i(G),M5=n(G,"LI",{});var Fye=s(M5);Ine=n(Fye,"STRONG",{});var oet=s(Ine);OAo=r(oet,"xlm-roberta"),oet.forEach(t),GAo=r(Fye," \u2014 "),mD=n(Fye,"A",{href:!0});var ret=s(mD);XAo=r(ret,"XLMRobertaForMultipleChoice"),ret.forEach(t),VAo=r(Fye," (XLM-RoBERTa model)"),Fye.forEach(t),zAo=i(G),E5=n(G,"LI",{});var Cye=s(E5);jne=n(Cye,"STRONG",{});var tet=s(jne);WAo=r(tet,"xlm-roberta-xl"),tet.forEach(t),QAo=r(Cye," \u2014 "),gD=n(Cye,"A",{href:!0});var aet=s(gD);HAo=r(aet,"XLMRobertaXLForMultipleChoice"),aet.forEach(t),UAo=r(Cye," (XLM-RoBERTa-XL model)"),Cye.forEach(t),JAo=i(G),y5=n(G,"LI",{});var Mye=s(y5);Dne=n(Mye,"STRONG",{});var net=s(Dne);YAo=r(net,"xlnet"),net.forEach(t),KAo=r(Mye," \u2014 "),hD=n(Mye,"A",{href:!0});var set=s(hD);ZAo=r(set,"XLNetForMultipleChoice"),set.forEach(t),eLo=r(Mye," (XLNet model)"),Mye.forEach(t),oLo=i(G),w5=n(G,"LI",{});var Eye=s(w5);Nne=n(Eye,"STRONG",{});var iet=s(Nne);rLo=r(iet,"yoso"),iet.forEach(t),tLo=r(Eye," \u2014 "),pD=n(Eye,"A",{href:!0});var det=s(pD);aLo=r(det,"YosoForMultipleChoice"),det.forEach(t),nLo=r(Eye," (YOSO model)"),Eye.forEach(t),G.forEach(t),sLo=i(Ut),A5=n(Ut,"P",{});var yye=s(A5);lLo=r(yye,"The model is set in evaluation mode by default using "),qne=n(yye,"CODE",{});var cet=s(qne);iLo=r(cet,"model.eval()"),cet.forEach(t),dLo=r(yye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),One=n(yye,"CODE",{});var fet=s(One);cLo=r(fet,"model.train()"),fet.forEach(t),yye.forEach(t),fLo=i(Ut),Gne=n(Ut,"P",{});var met=s(Gne);mLo=r(met,"Examples:"),met.forEach(t),gLo=i(Ut),m(GE.$$.fragment,Ut),Ut.forEach(t),dl.forEach(t),Yke=i(d),yd=n(d,"H2",{class:!0});var iPe=s(yd);L5=n(iPe,"A",{id:!0,class:!0,href:!0});var get=s(L5);Xne=n(get,"SPAN",{});var het=s(Xne);m(XE.$$.fragment,het),het.forEach(t),get.forEach(t),hLo=i(iPe),Vne=n(iPe,"SPAN",{});var pet=s(Vne);pLo=r(pet,"AutoModelForNextSentencePrediction"),pet.forEach(t),iPe.forEach(t),Kke=i(d),ar=n(d,"DIV",{class:!0});var fl=s(ar);m(VE.$$.fragment,fl),_Lo=i(fl),wd=n(fl,"P",{});var CW=s(wd);uLo=r(CW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),zne=n(CW,"CODE",{});var _et=s(zne);bLo=r(_et,"from_pretrained()"),_et.forEach(t),vLo=r(CW,"class method or the "),Wne=n(CW,"CODE",{});var uet=s(Wne);TLo=r(uet,"from_config()"),uet.forEach(t),FLo=r(CW,`class
method.`),CW.forEach(t),CLo=i(fl),zE=n(fl,"P",{});var dPe=s(zE);MLo=r(dPe,"This class cannot be instantiated directly using "),Qne=n(dPe,"CODE",{});var bet=s(Qne);ELo=r(bet,"__init__()"),bet.forEach(t),yLo=r(dPe," (throws an error)."),dPe.forEach(t),wLo=i(fl),Zr=n(fl,"DIV",{class:!0});var ml=s(Zr);m(WE.$$.fragment,ml),ALo=i(ml),Hne=n(ml,"P",{});var vet=s(Hne);LLo=r(vet,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),vet.forEach(t),BLo=i(ml),Ad=n(ml,"P",{});var MW=s(Ad);xLo=r(MW,`Note:
Loading a model from its configuration file does `),Une=n(MW,"STRONG",{});var Tet=s(Une);kLo=r(Tet,"not"),Tet.forEach(t),RLo=r(MW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jne=n(MW,"CODE",{});var Fet=s(Jne);SLo=r(Fet,"from_pretrained()"),Fet.forEach(t),PLo=r(MW,"to load the model weights."),MW.forEach(t),$Lo=i(ml),Yne=n(ml,"P",{});var Cet=s(Yne);ILo=r(Cet,"Examples:"),Cet.forEach(t),jLo=i(ml),m(QE.$$.fragment,ml),ml.forEach(t),DLo=i(fl),ze=n(fl,"DIV",{class:!0});var Jt=s(ze);m(HE.$$.fragment,Jt),NLo=i(Jt),Kne=n(Jt,"P",{});var Met=s(Kne);qLo=r(Met,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Met.forEach(t),OLo=i(Jt),on=n(Jt,"P",{});var EM=s(on);GLo=r(EM,"The model class to instantiate is selected based on the "),Zne=n(EM,"CODE",{});var Eet=s(Zne);XLo=r(Eet,"model_type"),Eet.forEach(t),VLo=r(EM,` property of the config object (either
passed as an argument or loaded from `),ese=n(EM,"CODE",{});var yet=s(ese);zLo=r(yet,"pretrained_model_name_or_path"),yet.forEach(t),WLo=r(EM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ose=n(EM,"CODE",{});var wet=s(ose);QLo=r(wet,"pretrained_model_name_or_path"),wet.forEach(t),HLo=r(EM,":"),EM.forEach(t),ULo=i(Jt),ma=n(Jt,"UL",{});var gl=s(ma);B5=n(gl,"LI",{});var wye=s(B5);rse=n(wye,"STRONG",{});var Aet=s(rse);JLo=r(Aet,"bert"),Aet.forEach(t),YLo=r(wye," \u2014 "),_D=n(wye,"A",{href:!0});var Let=s(_D);KLo=r(Let,"BertForNextSentencePrediction"),Let.forEach(t),ZLo=r(wye," (BERT model)"),wye.forEach(t),e7o=i(gl),x5=n(gl,"LI",{});var Aye=s(x5);tse=n(Aye,"STRONG",{});var Bet=s(tse);o7o=r(Bet,"fnet"),Bet.forEach(t),r7o=r(Aye," \u2014 "),uD=n(Aye,"A",{href:!0});var xet=s(uD);t7o=r(xet,"FNetForNextSentencePrediction"),xet.forEach(t),a7o=r(Aye," (FNet model)"),Aye.forEach(t),n7o=i(gl),k5=n(gl,"LI",{});var Lye=s(k5);ase=n(Lye,"STRONG",{});var ket=s(ase);s7o=r(ket,"megatron-bert"),ket.forEach(t),l7o=r(Lye," \u2014 "),bD=n(Lye,"A",{href:!0});var Ret=s(bD);i7o=r(Ret,"MegatronBertForNextSentencePrediction"),Ret.forEach(t),d7o=r(Lye," (MegatronBert model)"),Lye.forEach(t),c7o=i(gl),R5=n(gl,"LI",{});var Bye=s(R5);nse=n(Bye,"STRONG",{});var Set=s(nse);f7o=r(Set,"mobilebert"),Set.forEach(t),m7o=r(Bye," \u2014 "),vD=n(Bye,"A",{href:!0});var Pet=s(vD);g7o=r(Pet,"MobileBertForNextSentencePrediction"),Pet.forEach(t),h7o=r(Bye," (MobileBERT model)"),Bye.forEach(t),p7o=i(gl),S5=n(gl,"LI",{});var xye=s(S5);sse=n(xye,"STRONG",{});var $et=s(sse);_7o=r($et,"qdqbert"),$et.forEach(t),u7o=r(xye," \u2014 "),TD=n(xye,"A",{href:!0});var Iet=s(TD);b7o=r(Iet,"QDQBertForNextSentencePrediction"),Iet.forEach(t),v7o=r(xye," (QDQBert model)"),xye.forEach(t),gl.forEach(t),T7o=i(Jt),P5=n(Jt,"P",{});var kye=s(P5);F7o=r(kye,"The model is set in evaluation mode by default using "),lse=n(kye,"CODE",{});var jet=s(lse);C7o=r(jet,"model.eval()"),jet.forEach(t),M7o=r(kye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ise=n(kye,"CODE",{});var Det=s(ise);E7o=r(Det,"model.train()"),Det.forEach(t),kye.forEach(t),y7o=i(Jt),dse=n(Jt,"P",{});var Net=s(dse);w7o=r(Net,"Examples:"),Net.forEach(t),A7o=i(Jt),m(UE.$$.fragment,Jt),Jt.forEach(t),fl.forEach(t),Zke=i(d),Ld=n(d,"H2",{class:!0});var cPe=s(Ld);$5=n(cPe,"A",{id:!0,class:!0,href:!0});var qet=s($5);cse=n(qet,"SPAN",{});var Oet=s(cse);m(JE.$$.fragment,Oet),Oet.forEach(t),qet.forEach(t),L7o=i(cPe),fse=n(cPe,"SPAN",{});var Get=s(fse);B7o=r(Get,"AutoModelForTokenClassification"),Get.forEach(t),cPe.forEach(t),eRe=i(d),nr=n(d,"DIV",{class:!0});var hl=s(nr);m(YE.$$.fragment,hl),x7o=i(hl),Bd=n(hl,"P",{});var EW=s(Bd);k7o=r(EW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),mse=n(EW,"CODE",{});var Xet=s(mse);R7o=r(Xet,"from_pretrained()"),Xet.forEach(t),S7o=r(EW,"class method or the "),gse=n(EW,"CODE",{});var Vet=s(gse);P7o=r(Vet,"from_config()"),Vet.forEach(t),$7o=r(EW,`class
method.`),EW.forEach(t),I7o=i(hl),KE=n(hl,"P",{});var fPe=s(KE);j7o=r(fPe,"This class cannot be instantiated directly using "),hse=n(fPe,"CODE",{});var zet=s(hse);D7o=r(zet,"__init__()"),zet.forEach(t),N7o=r(fPe," (throws an error)."),fPe.forEach(t),q7o=i(hl),et=n(hl,"DIV",{class:!0});var pl=s(et);m(ZE.$$.fragment,pl),O7o=i(pl),pse=n(pl,"P",{});var Wet=s(pse);G7o=r(Wet,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Wet.forEach(t),X7o=i(pl),xd=n(pl,"P",{});var yW=s(xd);V7o=r(yW,`Note:
Loading a model from its configuration file does `),_se=n(yW,"STRONG",{});var Qet=s(_se);z7o=r(Qet,"not"),Qet.forEach(t),W7o=r(yW,` load the model weights. It only affects the
model\u2019s configuration. Use `),use=n(yW,"CODE",{});var Het=s(use);Q7o=r(Het,"from_pretrained()"),Het.forEach(t),H7o=r(yW,"to load the model weights."),yW.forEach(t),U7o=i(pl),bse=n(pl,"P",{});var Uet=s(bse);J7o=r(Uet,"Examples:"),Uet.forEach(t),Y7o=i(pl),m(e3.$$.fragment,pl),pl.forEach(t),K7o=i(hl),We=n(hl,"DIV",{class:!0});var Yt=s(We);m(o3.$$.fragment,Yt),Z7o=i(Yt),vse=n(Yt,"P",{});var Jet=s(vse);e9o=r(Jet,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Jet.forEach(t),o9o=i(Yt),rn=n(Yt,"P",{});var yM=s(rn);r9o=r(yM,"The model class to instantiate is selected based on the "),Tse=n(yM,"CODE",{});var Yet=s(Tse);t9o=r(Yet,"model_type"),Yet.forEach(t),a9o=r(yM,` property of the config object (either
passed as an argument or loaded from `),Fse=n(yM,"CODE",{});var Ket=s(Fse);n9o=r(Ket,"pretrained_model_name_or_path"),Ket.forEach(t),s9o=r(yM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cse=n(yM,"CODE",{});var Zet=s(Cse);l9o=r(Zet,"pretrained_model_name_or_path"),Zet.forEach(t),i9o=r(yM,":"),yM.forEach(t),d9o=i(Yt),N=n(Yt,"UL",{});var q=s(N);I5=n(q,"LI",{});var Rye=s(I5);Mse=n(Rye,"STRONG",{});var eot=s(Mse);c9o=r(eot,"albert"),eot.forEach(t),f9o=r(Rye," \u2014 "),FD=n(Rye,"A",{href:!0});var oot=s(FD);m9o=r(oot,"AlbertForTokenClassification"),oot.forEach(t),g9o=r(Rye," (ALBERT model)"),Rye.forEach(t),h9o=i(q),j5=n(q,"LI",{});var Sye=s(j5);Ese=n(Sye,"STRONG",{});var rot=s(Ese);p9o=r(rot,"bert"),rot.forEach(t),_9o=r(Sye," \u2014 "),CD=n(Sye,"A",{href:!0});var tot=s(CD);u9o=r(tot,"BertForTokenClassification"),tot.forEach(t),b9o=r(Sye," (BERT model)"),Sye.forEach(t),v9o=i(q),D5=n(q,"LI",{});var Pye=s(D5);yse=n(Pye,"STRONG",{});var aot=s(yse);T9o=r(aot,"big_bird"),aot.forEach(t),F9o=r(Pye," \u2014 "),MD=n(Pye,"A",{href:!0});var not=s(MD);C9o=r(not,"BigBirdForTokenClassification"),not.forEach(t),M9o=r(Pye," (BigBird model)"),Pye.forEach(t),E9o=i(q),N5=n(q,"LI",{});var $ye=s(N5);wse=n($ye,"STRONG",{});var sot=s(wse);y9o=r(sot,"camembert"),sot.forEach(t),w9o=r($ye," \u2014 "),ED=n($ye,"A",{href:!0});var lot=s(ED);A9o=r(lot,"CamembertForTokenClassification"),lot.forEach(t),L9o=r($ye," (CamemBERT model)"),$ye.forEach(t),B9o=i(q),q5=n(q,"LI",{});var Iye=s(q5);Ase=n(Iye,"STRONG",{});var iot=s(Ase);x9o=r(iot,"canine"),iot.forEach(t),k9o=r(Iye," \u2014 "),yD=n(Iye,"A",{href:!0});var dot=s(yD);R9o=r(dot,"CanineForTokenClassification"),dot.forEach(t),S9o=r(Iye," (Canine model)"),Iye.forEach(t),P9o=i(q),O5=n(q,"LI",{});var jye=s(O5);Lse=n(jye,"STRONG",{});var cot=s(Lse);$9o=r(cot,"convbert"),cot.forEach(t),I9o=r(jye," \u2014 "),wD=n(jye,"A",{href:!0});var fot=s(wD);j9o=r(fot,"ConvBertForTokenClassification"),fot.forEach(t),D9o=r(jye," (ConvBERT model)"),jye.forEach(t),N9o=i(q),G5=n(q,"LI",{});var Dye=s(G5);Bse=n(Dye,"STRONG",{});var mot=s(Bse);q9o=r(mot,"data2vec-text"),mot.forEach(t),O9o=r(Dye," \u2014 "),AD=n(Dye,"A",{href:!0});var got=s(AD);G9o=r(got,"Data2VecTextForTokenClassification"),got.forEach(t),X9o=r(Dye," (Data2VecText model)"),Dye.forEach(t),V9o=i(q),X5=n(q,"LI",{});var Nye=s(X5);xse=n(Nye,"STRONG",{});var hot=s(xse);z9o=r(hot,"deberta"),hot.forEach(t),W9o=r(Nye," \u2014 "),LD=n(Nye,"A",{href:!0});var pot=s(LD);Q9o=r(pot,"DebertaForTokenClassification"),pot.forEach(t),H9o=r(Nye," (DeBERTa model)"),Nye.forEach(t),U9o=i(q),V5=n(q,"LI",{});var qye=s(V5);kse=n(qye,"STRONG",{});var _ot=s(kse);J9o=r(_ot,"deberta-v2"),_ot.forEach(t),Y9o=r(qye," \u2014 "),BD=n(qye,"A",{href:!0});var uot=s(BD);K9o=r(uot,"DebertaV2ForTokenClassification"),uot.forEach(t),Z9o=r(qye," (DeBERTa-v2 model)"),qye.forEach(t),eBo=i(q),z5=n(q,"LI",{});var Oye=s(z5);Rse=n(Oye,"STRONG",{});var bot=s(Rse);oBo=r(bot,"distilbert"),bot.forEach(t),rBo=r(Oye," \u2014 "),xD=n(Oye,"A",{href:!0});var vot=s(xD);tBo=r(vot,"DistilBertForTokenClassification"),vot.forEach(t),aBo=r(Oye," (DistilBERT model)"),Oye.forEach(t),nBo=i(q),W5=n(q,"LI",{});var Gye=s(W5);Sse=n(Gye,"STRONG",{});var Tot=s(Sse);sBo=r(Tot,"electra"),Tot.forEach(t),lBo=r(Gye," \u2014 "),kD=n(Gye,"A",{href:!0});var Fot=s(kD);iBo=r(Fot,"ElectraForTokenClassification"),Fot.forEach(t),dBo=r(Gye," (ELECTRA model)"),Gye.forEach(t),cBo=i(q),Q5=n(q,"LI",{});var Xye=s(Q5);Pse=n(Xye,"STRONG",{});var Cot=s(Pse);fBo=r(Cot,"flaubert"),Cot.forEach(t),mBo=r(Xye," \u2014 "),RD=n(Xye,"A",{href:!0});var Mot=s(RD);gBo=r(Mot,"FlaubertForTokenClassification"),Mot.forEach(t),hBo=r(Xye," (FlauBERT model)"),Xye.forEach(t),pBo=i(q),H5=n(q,"LI",{});var Vye=s(H5);$se=n(Vye,"STRONG",{});var Eot=s($se);_Bo=r(Eot,"fnet"),Eot.forEach(t),uBo=r(Vye," \u2014 "),SD=n(Vye,"A",{href:!0});var yot=s(SD);bBo=r(yot,"FNetForTokenClassification"),yot.forEach(t),vBo=r(Vye," (FNet model)"),Vye.forEach(t),TBo=i(q),U5=n(q,"LI",{});var zye=s(U5);Ise=n(zye,"STRONG",{});var wot=s(Ise);FBo=r(wot,"funnel"),wot.forEach(t),CBo=r(zye," \u2014 "),PD=n(zye,"A",{href:!0});var Aot=s(PD);MBo=r(Aot,"FunnelForTokenClassification"),Aot.forEach(t),EBo=r(zye," (Funnel Transformer model)"),zye.forEach(t),yBo=i(q),J5=n(q,"LI",{});var Wye=s(J5);jse=n(Wye,"STRONG",{});var Lot=s(jse);wBo=r(Lot,"gpt2"),Lot.forEach(t),ABo=r(Wye," \u2014 "),$D=n(Wye,"A",{href:!0});var Bot=s($D);LBo=r(Bot,"GPT2ForTokenClassification"),Bot.forEach(t),BBo=r(Wye," (OpenAI GPT-2 model)"),Wye.forEach(t),xBo=i(q),Y5=n(q,"LI",{});var Qye=s(Y5);Dse=n(Qye,"STRONG",{});var xot=s(Dse);kBo=r(xot,"ibert"),xot.forEach(t),RBo=r(Qye," \u2014 "),ID=n(Qye,"A",{href:!0});var kot=s(ID);SBo=r(kot,"IBertForTokenClassification"),kot.forEach(t),PBo=r(Qye," (I-BERT model)"),Qye.forEach(t),$Bo=i(q),K5=n(q,"LI",{});var Hye=s(K5);Nse=n(Hye,"STRONG",{});var Rot=s(Nse);IBo=r(Rot,"layoutlm"),Rot.forEach(t),jBo=r(Hye," \u2014 "),jD=n(Hye,"A",{href:!0});var Sot=s(jD);DBo=r(Sot,"LayoutLMForTokenClassification"),Sot.forEach(t),NBo=r(Hye," (LayoutLM model)"),Hye.forEach(t),qBo=i(q),Z5=n(q,"LI",{});var Uye=s(Z5);qse=n(Uye,"STRONG",{});var Pot=s(qse);OBo=r(Pot,"layoutlmv2"),Pot.forEach(t),GBo=r(Uye," \u2014 "),DD=n(Uye,"A",{href:!0});var $ot=s(DD);XBo=r($ot,"LayoutLMv2ForTokenClassification"),$ot.forEach(t),VBo=r(Uye," (LayoutLMv2 model)"),Uye.forEach(t),zBo=i(q),e2=n(q,"LI",{});var Jye=s(e2);Ose=n(Jye,"STRONG",{});var Iot=s(Ose);WBo=r(Iot,"longformer"),Iot.forEach(t),QBo=r(Jye," \u2014 "),ND=n(Jye,"A",{href:!0});var jot=s(ND);HBo=r(jot,"LongformerForTokenClassification"),jot.forEach(t),UBo=r(Jye," (Longformer model)"),Jye.forEach(t),JBo=i(q),o2=n(q,"LI",{});var Yye=s(o2);Gse=n(Yye,"STRONG",{});var Dot=s(Gse);YBo=r(Dot,"megatron-bert"),Dot.forEach(t),KBo=r(Yye," \u2014 "),qD=n(Yye,"A",{href:!0});var Not=s(qD);ZBo=r(Not,"MegatronBertForTokenClassification"),Not.forEach(t),exo=r(Yye," (MegatronBert model)"),Yye.forEach(t),oxo=i(q),r2=n(q,"LI",{});var Kye=s(r2);Xse=n(Kye,"STRONG",{});var qot=s(Xse);rxo=r(qot,"mobilebert"),qot.forEach(t),txo=r(Kye," \u2014 "),OD=n(Kye,"A",{href:!0});var Oot=s(OD);axo=r(Oot,"MobileBertForTokenClassification"),Oot.forEach(t),nxo=r(Kye," (MobileBERT model)"),Kye.forEach(t),sxo=i(q),t2=n(q,"LI",{});var Zye=s(t2);Vse=n(Zye,"STRONG",{});var Got=s(Vse);lxo=r(Got,"mpnet"),Got.forEach(t),ixo=r(Zye," \u2014 "),GD=n(Zye,"A",{href:!0});var Xot=s(GD);dxo=r(Xot,"MPNetForTokenClassification"),Xot.forEach(t),cxo=r(Zye," (MPNet model)"),Zye.forEach(t),fxo=i(q),a2=n(q,"LI",{});var ewe=s(a2);zse=n(ewe,"STRONG",{});var Vot=s(zse);mxo=r(Vot,"nystromformer"),Vot.forEach(t),gxo=r(ewe," \u2014 "),XD=n(ewe,"A",{href:!0});var zot=s(XD);hxo=r(zot,"NystromformerForTokenClassification"),zot.forEach(t),pxo=r(ewe," (Nystromformer model)"),ewe.forEach(t),_xo=i(q),n2=n(q,"LI",{});var owe=s(n2);Wse=n(owe,"STRONG",{});var Wot=s(Wse);uxo=r(Wot,"qdqbert"),Wot.forEach(t),bxo=r(owe," \u2014 "),VD=n(owe,"A",{href:!0});var Qot=s(VD);vxo=r(Qot,"QDQBertForTokenClassification"),Qot.forEach(t),Txo=r(owe," (QDQBert model)"),owe.forEach(t),Fxo=i(q),s2=n(q,"LI",{});var rwe=s(s2);Qse=n(rwe,"STRONG",{});var Hot=s(Qse);Cxo=r(Hot,"rembert"),Hot.forEach(t),Mxo=r(rwe," \u2014 "),zD=n(rwe,"A",{href:!0});var Uot=s(zD);Exo=r(Uot,"RemBertForTokenClassification"),Uot.forEach(t),yxo=r(rwe," (RemBERT model)"),rwe.forEach(t),wxo=i(q),l2=n(q,"LI",{});var twe=s(l2);Hse=n(twe,"STRONG",{});var Jot=s(Hse);Axo=r(Jot,"roberta"),Jot.forEach(t),Lxo=r(twe," \u2014 "),WD=n(twe,"A",{href:!0});var Yot=s(WD);Bxo=r(Yot,"RobertaForTokenClassification"),Yot.forEach(t),xxo=r(twe," (RoBERTa model)"),twe.forEach(t),kxo=i(q),i2=n(q,"LI",{});var awe=s(i2);Use=n(awe,"STRONG",{});var Kot=s(Use);Rxo=r(Kot,"roformer"),Kot.forEach(t),Sxo=r(awe," \u2014 "),QD=n(awe,"A",{href:!0});var Zot=s(QD);Pxo=r(Zot,"RoFormerForTokenClassification"),Zot.forEach(t),$xo=r(awe," (RoFormer model)"),awe.forEach(t),Ixo=i(q),d2=n(q,"LI",{});var nwe=s(d2);Jse=n(nwe,"STRONG",{});var ert=s(Jse);jxo=r(ert,"squeezebert"),ert.forEach(t),Dxo=r(nwe," \u2014 "),HD=n(nwe,"A",{href:!0});var ort=s(HD);Nxo=r(ort,"SqueezeBertForTokenClassification"),ort.forEach(t),qxo=r(nwe," (SqueezeBERT model)"),nwe.forEach(t),Oxo=i(q),c2=n(q,"LI",{});var swe=s(c2);Yse=n(swe,"STRONG",{});var rrt=s(Yse);Gxo=r(rrt,"xlm"),rrt.forEach(t),Xxo=r(swe," \u2014 "),UD=n(swe,"A",{href:!0});var trt=s(UD);Vxo=r(trt,"XLMForTokenClassification"),trt.forEach(t),zxo=r(swe," (XLM model)"),swe.forEach(t),Wxo=i(q),f2=n(q,"LI",{});var lwe=s(f2);Kse=n(lwe,"STRONG",{});var art=s(Kse);Qxo=r(art,"xlm-roberta"),art.forEach(t),Hxo=r(lwe," \u2014 "),JD=n(lwe,"A",{href:!0});var nrt=s(JD);Uxo=r(nrt,"XLMRobertaForTokenClassification"),nrt.forEach(t),Jxo=r(lwe," (XLM-RoBERTa model)"),lwe.forEach(t),Yxo=i(q),m2=n(q,"LI",{});var iwe=s(m2);Zse=n(iwe,"STRONG",{});var srt=s(Zse);Kxo=r(srt,"xlm-roberta-xl"),srt.forEach(t),Zxo=r(iwe," \u2014 "),YD=n(iwe,"A",{href:!0});var lrt=s(YD);eko=r(lrt,"XLMRobertaXLForTokenClassification"),lrt.forEach(t),oko=r(iwe," (XLM-RoBERTa-XL model)"),iwe.forEach(t),rko=i(q),g2=n(q,"LI",{});var dwe=s(g2);ele=n(dwe,"STRONG",{});var irt=s(ele);tko=r(irt,"xlnet"),irt.forEach(t),ako=r(dwe," \u2014 "),KD=n(dwe,"A",{href:!0});var drt=s(KD);nko=r(drt,"XLNetForTokenClassification"),drt.forEach(t),sko=r(dwe," (XLNet model)"),dwe.forEach(t),lko=i(q),h2=n(q,"LI",{});var cwe=s(h2);ole=n(cwe,"STRONG",{});var crt=s(ole);iko=r(crt,"yoso"),crt.forEach(t),dko=r(cwe," \u2014 "),ZD=n(cwe,"A",{href:!0});var frt=s(ZD);cko=r(frt,"YosoForTokenClassification"),frt.forEach(t),fko=r(cwe," (YOSO model)"),cwe.forEach(t),q.forEach(t),mko=i(Yt),p2=n(Yt,"P",{});var fwe=s(p2);gko=r(fwe,"The model is set in evaluation mode by default using "),rle=n(fwe,"CODE",{});var mrt=s(rle);hko=r(mrt,"model.eval()"),mrt.forEach(t),pko=r(fwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tle=n(fwe,"CODE",{});var grt=s(tle);_ko=r(grt,"model.train()"),grt.forEach(t),fwe.forEach(t),uko=i(Yt),ale=n(Yt,"P",{});var hrt=s(ale);bko=r(hrt,"Examples:"),hrt.forEach(t),vko=i(Yt),m(r3.$$.fragment,Yt),Yt.forEach(t),hl.forEach(t),oRe=i(d),kd=n(d,"H2",{class:!0});var mPe=s(kd);_2=n(mPe,"A",{id:!0,class:!0,href:!0});var prt=s(_2);nle=n(prt,"SPAN",{});var _rt=s(nle);m(t3.$$.fragment,_rt),_rt.forEach(t),prt.forEach(t),Tko=i(mPe),sle=n(mPe,"SPAN",{});var urt=s(sle);Fko=r(urt,"AutoModelForQuestionAnswering"),urt.forEach(t),mPe.forEach(t),rRe=i(d),sr=n(d,"DIV",{class:!0});var _l=s(sr);m(a3.$$.fragment,_l),Cko=i(_l),Rd=n(_l,"P",{});var wW=s(Rd);Mko=r(wW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),lle=n(wW,"CODE",{});var brt=s(lle);Eko=r(brt,"from_pretrained()"),brt.forEach(t),yko=r(wW,"class method or the "),ile=n(wW,"CODE",{});var vrt=s(ile);wko=r(vrt,"from_config()"),vrt.forEach(t),Ako=r(wW,`class
method.`),wW.forEach(t),Lko=i(_l),n3=n(_l,"P",{});var gPe=s(n3);Bko=r(gPe,"This class cannot be instantiated directly using "),dle=n(gPe,"CODE",{});var Trt=s(dle);xko=r(Trt,"__init__()"),Trt.forEach(t),kko=r(gPe," (throws an error)."),gPe.forEach(t),Rko=i(_l),ot=n(_l,"DIV",{class:!0});var ul=s(ot);m(s3.$$.fragment,ul),Sko=i(ul),cle=n(ul,"P",{});var Frt=s(cle);Pko=r(Frt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Frt.forEach(t),$ko=i(ul),Sd=n(ul,"P",{});var AW=s(Sd);Iko=r(AW,`Note:
Loading a model from its configuration file does `),fle=n(AW,"STRONG",{});var Crt=s(fle);jko=r(Crt,"not"),Crt.forEach(t),Dko=r(AW,` load the model weights. It only affects the
model\u2019s configuration. Use `),mle=n(AW,"CODE",{});var Mrt=s(mle);Nko=r(Mrt,"from_pretrained()"),Mrt.forEach(t),qko=r(AW,"to load the model weights."),AW.forEach(t),Oko=i(ul),gle=n(ul,"P",{});var Ert=s(gle);Gko=r(Ert,"Examples:"),Ert.forEach(t),Xko=i(ul),m(l3.$$.fragment,ul),ul.forEach(t),Vko=i(_l),Qe=n(_l,"DIV",{class:!0});var Kt=s(Qe);m(i3.$$.fragment,Kt),zko=i(Kt),hle=n(Kt,"P",{});var yrt=s(hle);Wko=r(yrt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),yrt.forEach(t),Qko=i(Kt),tn=n(Kt,"P",{});var wM=s(tn);Hko=r(wM,"The model class to instantiate is selected based on the "),ple=n(wM,"CODE",{});var wrt=s(ple);Uko=r(wrt,"model_type"),wrt.forEach(t),Jko=r(wM,` property of the config object (either
passed as an argument or loaded from `),_le=n(wM,"CODE",{});var Art=s(_le);Yko=r(Art,"pretrained_model_name_or_path"),Art.forEach(t),Kko=r(wM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ule=n(wM,"CODE",{});var Lrt=s(ule);Zko=r(Lrt,"pretrained_model_name_or_path"),Lrt.forEach(t),eRo=r(wM,":"),wM.forEach(t),oRo=i(Kt),R=n(Kt,"UL",{});var P=s(R);u2=n(P,"LI",{});var mwe=s(u2);ble=n(mwe,"STRONG",{});var Brt=s(ble);rRo=r(Brt,"albert"),Brt.forEach(t),tRo=r(mwe," \u2014 "),eN=n(mwe,"A",{href:!0});var xrt=s(eN);aRo=r(xrt,"AlbertForQuestionAnswering"),xrt.forEach(t),nRo=r(mwe," (ALBERT model)"),mwe.forEach(t),sRo=i(P),b2=n(P,"LI",{});var gwe=s(b2);vle=n(gwe,"STRONG",{});var krt=s(vle);lRo=r(krt,"bart"),krt.forEach(t),iRo=r(gwe," \u2014 "),oN=n(gwe,"A",{href:!0});var Rrt=s(oN);dRo=r(Rrt,"BartForQuestionAnswering"),Rrt.forEach(t),cRo=r(gwe," (BART model)"),gwe.forEach(t),fRo=i(P),v2=n(P,"LI",{});var hwe=s(v2);Tle=n(hwe,"STRONG",{});var Srt=s(Tle);mRo=r(Srt,"bert"),Srt.forEach(t),gRo=r(hwe," \u2014 "),rN=n(hwe,"A",{href:!0});var Prt=s(rN);hRo=r(Prt,"BertForQuestionAnswering"),Prt.forEach(t),pRo=r(hwe," (BERT model)"),hwe.forEach(t),_Ro=i(P),T2=n(P,"LI",{});var pwe=s(T2);Fle=n(pwe,"STRONG",{});var $rt=s(Fle);uRo=r($rt,"big_bird"),$rt.forEach(t),bRo=r(pwe," \u2014 "),tN=n(pwe,"A",{href:!0});var Irt=s(tN);vRo=r(Irt,"BigBirdForQuestionAnswering"),Irt.forEach(t),TRo=r(pwe," (BigBird model)"),pwe.forEach(t),FRo=i(P),F2=n(P,"LI",{});var _we=s(F2);Cle=n(_we,"STRONG",{});var jrt=s(Cle);CRo=r(jrt,"bigbird_pegasus"),jrt.forEach(t),MRo=r(_we," \u2014 "),aN=n(_we,"A",{href:!0});var Drt=s(aN);ERo=r(Drt,"BigBirdPegasusForQuestionAnswering"),Drt.forEach(t),yRo=r(_we," (BigBirdPegasus model)"),_we.forEach(t),wRo=i(P),C2=n(P,"LI",{});var uwe=s(C2);Mle=n(uwe,"STRONG",{});var Nrt=s(Mle);ARo=r(Nrt,"camembert"),Nrt.forEach(t),LRo=r(uwe," \u2014 "),nN=n(uwe,"A",{href:!0});var qrt=s(nN);BRo=r(qrt,"CamembertForQuestionAnswering"),qrt.forEach(t),xRo=r(uwe," (CamemBERT model)"),uwe.forEach(t),kRo=i(P),M2=n(P,"LI",{});var bwe=s(M2);Ele=n(bwe,"STRONG",{});var Ort=s(Ele);RRo=r(Ort,"canine"),Ort.forEach(t),SRo=r(bwe," \u2014 "),sN=n(bwe,"A",{href:!0});var Grt=s(sN);PRo=r(Grt,"CanineForQuestionAnswering"),Grt.forEach(t),$Ro=r(bwe," (Canine model)"),bwe.forEach(t),IRo=i(P),E2=n(P,"LI",{});var vwe=s(E2);yle=n(vwe,"STRONG",{});var Xrt=s(yle);jRo=r(Xrt,"convbert"),Xrt.forEach(t),DRo=r(vwe," \u2014 "),lN=n(vwe,"A",{href:!0});var Vrt=s(lN);NRo=r(Vrt,"ConvBertForQuestionAnswering"),Vrt.forEach(t),qRo=r(vwe," (ConvBERT model)"),vwe.forEach(t),ORo=i(P),y2=n(P,"LI",{});var Twe=s(y2);wle=n(Twe,"STRONG",{});var zrt=s(wle);GRo=r(zrt,"data2vec-text"),zrt.forEach(t),XRo=r(Twe," \u2014 "),iN=n(Twe,"A",{href:!0});var Wrt=s(iN);VRo=r(Wrt,"Data2VecTextForQuestionAnswering"),Wrt.forEach(t),zRo=r(Twe," (Data2VecText model)"),Twe.forEach(t),WRo=i(P),w2=n(P,"LI",{});var Fwe=s(w2);Ale=n(Fwe,"STRONG",{});var Qrt=s(Ale);QRo=r(Qrt,"deberta"),Qrt.forEach(t),HRo=r(Fwe," \u2014 "),dN=n(Fwe,"A",{href:!0});var Hrt=s(dN);URo=r(Hrt,"DebertaForQuestionAnswering"),Hrt.forEach(t),JRo=r(Fwe," (DeBERTa model)"),Fwe.forEach(t),YRo=i(P),A2=n(P,"LI",{});var Cwe=s(A2);Lle=n(Cwe,"STRONG",{});var Urt=s(Lle);KRo=r(Urt,"deberta-v2"),Urt.forEach(t),ZRo=r(Cwe," \u2014 "),cN=n(Cwe,"A",{href:!0});var Jrt=s(cN);eSo=r(Jrt,"DebertaV2ForQuestionAnswering"),Jrt.forEach(t),oSo=r(Cwe," (DeBERTa-v2 model)"),Cwe.forEach(t),rSo=i(P),L2=n(P,"LI",{});var Mwe=s(L2);Ble=n(Mwe,"STRONG",{});var Yrt=s(Ble);tSo=r(Yrt,"distilbert"),Yrt.forEach(t),aSo=r(Mwe," \u2014 "),fN=n(Mwe,"A",{href:!0});var Krt=s(fN);nSo=r(Krt,"DistilBertForQuestionAnswering"),Krt.forEach(t),sSo=r(Mwe," (DistilBERT model)"),Mwe.forEach(t),lSo=i(P),B2=n(P,"LI",{});var Ewe=s(B2);xle=n(Ewe,"STRONG",{});var Zrt=s(xle);iSo=r(Zrt,"electra"),Zrt.forEach(t),dSo=r(Ewe," \u2014 "),mN=n(Ewe,"A",{href:!0});var ett=s(mN);cSo=r(ett,"ElectraForQuestionAnswering"),ett.forEach(t),fSo=r(Ewe," (ELECTRA model)"),Ewe.forEach(t),mSo=i(P),x2=n(P,"LI",{});var ywe=s(x2);kle=n(ywe,"STRONG",{});var ott=s(kle);gSo=r(ott,"flaubert"),ott.forEach(t),hSo=r(ywe," \u2014 "),gN=n(ywe,"A",{href:!0});var rtt=s(gN);pSo=r(rtt,"FlaubertForQuestionAnsweringSimple"),rtt.forEach(t),_So=r(ywe," (FlauBERT model)"),ywe.forEach(t),uSo=i(P),k2=n(P,"LI",{});var wwe=s(k2);Rle=n(wwe,"STRONG",{});var ttt=s(Rle);bSo=r(ttt,"fnet"),ttt.forEach(t),vSo=r(wwe," \u2014 "),hN=n(wwe,"A",{href:!0});var att=s(hN);TSo=r(att,"FNetForQuestionAnswering"),att.forEach(t),FSo=r(wwe," (FNet model)"),wwe.forEach(t),CSo=i(P),R2=n(P,"LI",{});var Awe=s(R2);Sle=n(Awe,"STRONG",{});var ntt=s(Sle);MSo=r(ntt,"funnel"),ntt.forEach(t),ESo=r(Awe," \u2014 "),pN=n(Awe,"A",{href:!0});var stt=s(pN);ySo=r(stt,"FunnelForQuestionAnswering"),stt.forEach(t),wSo=r(Awe," (Funnel Transformer model)"),Awe.forEach(t),ASo=i(P),S2=n(P,"LI",{});var Lwe=s(S2);Ple=n(Lwe,"STRONG",{});var ltt=s(Ple);LSo=r(ltt,"gptj"),ltt.forEach(t),BSo=r(Lwe," \u2014 "),_N=n(Lwe,"A",{href:!0});var itt=s(_N);xSo=r(itt,"GPTJForQuestionAnswering"),itt.forEach(t),kSo=r(Lwe," (GPT-J model)"),Lwe.forEach(t),RSo=i(P),P2=n(P,"LI",{});var Bwe=s(P2);$le=n(Bwe,"STRONG",{});var dtt=s($le);SSo=r(dtt,"ibert"),dtt.forEach(t),PSo=r(Bwe," \u2014 "),uN=n(Bwe,"A",{href:!0});var ctt=s(uN);$So=r(ctt,"IBertForQuestionAnswering"),ctt.forEach(t),ISo=r(Bwe," (I-BERT model)"),Bwe.forEach(t),jSo=i(P),$2=n(P,"LI",{});var xwe=s($2);Ile=n(xwe,"STRONG",{});var ftt=s(Ile);DSo=r(ftt,"layoutlmv2"),ftt.forEach(t),NSo=r(xwe," \u2014 "),bN=n(xwe,"A",{href:!0});var mtt=s(bN);qSo=r(mtt,"LayoutLMv2ForQuestionAnswering"),mtt.forEach(t),OSo=r(xwe," (LayoutLMv2 model)"),xwe.forEach(t),GSo=i(P),I2=n(P,"LI",{});var kwe=s(I2);jle=n(kwe,"STRONG",{});var gtt=s(jle);XSo=r(gtt,"led"),gtt.forEach(t),VSo=r(kwe," \u2014 "),vN=n(kwe,"A",{href:!0});var htt=s(vN);zSo=r(htt,"LEDForQuestionAnswering"),htt.forEach(t),WSo=r(kwe," (LED model)"),kwe.forEach(t),QSo=i(P),j2=n(P,"LI",{});var Rwe=s(j2);Dle=n(Rwe,"STRONG",{});var ptt=s(Dle);HSo=r(ptt,"longformer"),ptt.forEach(t),USo=r(Rwe," \u2014 "),TN=n(Rwe,"A",{href:!0});var _tt=s(TN);JSo=r(_tt,"LongformerForQuestionAnswering"),_tt.forEach(t),YSo=r(Rwe," (Longformer model)"),Rwe.forEach(t),KSo=i(P),D2=n(P,"LI",{});var Swe=s(D2);Nle=n(Swe,"STRONG",{});var utt=s(Nle);ZSo=r(utt,"lxmert"),utt.forEach(t),ePo=r(Swe," \u2014 "),FN=n(Swe,"A",{href:!0});var btt=s(FN);oPo=r(btt,"LxmertForQuestionAnswering"),btt.forEach(t),rPo=r(Swe," (LXMERT model)"),Swe.forEach(t),tPo=i(P),N2=n(P,"LI",{});var Pwe=s(N2);qle=n(Pwe,"STRONG",{});var vtt=s(qle);aPo=r(vtt,"mbart"),vtt.forEach(t),nPo=r(Pwe," \u2014 "),CN=n(Pwe,"A",{href:!0});var Ttt=s(CN);sPo=r(Ttt,"MBartForQuestionAnswering"),Ttt.forEach(t),lPo=r(Pwe," (mBART model)"),Pwe.forEach(t),iPo=i(P),q2=n(P,"LI",{});var $we=s(q2);Ole=n($we,"STRONG",{});var Ftt=s(Ole);dPo=r(Ftt,"megatron-bert"),Ftt.forEach(t),cPo=r($we," \u2014 "),MN=n($we,"A",{href:!0});var Ctt=s(MN);fPo=r(Ctt,"MegatronBertForQuestionAnswering"),Ctt.forEach(t),mPo=r($we," (MegatronBert model)"),$we.forEach(t),gPo=i(P),O2=n(P,"LI",{});var Iwe=s(O2);Gle=n(Iwe,"STRONG",{});var Mtt=s(Gle);hPo=r(Mtt,"mobilebert"),Mtt.forEach(t),pPo=r(Iwe," \u2014 "),EN=n(Iwe,"A",{href:!0});var Ett=s(EN);_Po=r(Ett,"MobileBertForQuestionAnswering"),Ett.forEach(t),uPo=r(Iwe," (MobileBERT model)"),Iwe.forEach(t),bPo=i(P),G2=n(P,"LI",{});var jwe=s(G2);Xle=n(jwe,"STRONG",{});var ytt=s(Xle);vPo=r(ytt,"mpnet"),ytt.forEach(t),TPo=r(jwe," \u2014 "),yN=n(jwe,"A",{href:!0});var wtt=s(yN);FPo=r(wtt,"MPNetForQuestionAnswering"),wtt.forEach(t),CPo=r(jwe," (MPNet model)"),jwe.forEach(t),MPo=i(P),X2=n(P,"LI",{});var Dwe=s(X2);Vle=n(Dwe,"STRONG",{});var Att=s(Vle);EPo=r(Att,"nystromformer"),Att.forEach(t),yPo=r(Dwe," \u2014 "),wN=n(Dwe,"A",{href:!0});var Ltt=s(wN);wPo=r(Ltt,"NystromformerForQuestionAnswering"),Ltt.forEach(t),APo=r(Dwe," (Nystromformer model)"),Dwe.forEach(t),LPo=i(P),V2=n(P,"LI",{});var Nwe=s(V2);zle=n(Nwe,"STRONG",{});var Btt=s(zle);BPo=r(Btt,"qdqbert"),Btt.forEach(t),xPo=r(Nwe," \u2014 "),AN=n(Nwe,"A",{href:!0});var xtt=s(AN);kPo=r(xtt,"QDQBertForQuestionAnswering"),xtt.forEach(t),RPo=r(Nwe," (QDQBert model)"),Nwe.forEach(t),SPo=i(P),z2=n(P,"LI",{});var qwe=s(z2);Wle=n(qwe,"STRONG",{});var ktt=s(Wle);PPo=r(ktt,"reformer"),ktt.forEach(t),$Po=r(qwe," \u2014 "),LN=n(qwe,"A",{href:!0});var Rtt=s(LN);IPo=r(Rtt,"ReformerForQuestionAnswering"),Rtt.forEach(t),jPo=r(qwe," (Reformer model)"),qwe.forEach(t),DPo=i(P),W2=n(P,"LI",{});var Owe=s(W2);Qle=n(Owe,"STRONG",{});var Stt=s(Qle);NPo=r(Stt,"rembert"),Stt.forEach(t),qPo=r(Owe," \u2014 "),BN=n(Owe,"A",{href:!0});var Ptt=s(BN);OPo=r(Ptt,"RemBertForQuestionAnswering"),Ptt.forEach(t),GPo=r(Owe," (RemBERT model)"),Owe.forEach(t),XPo=i(P),Q2=n(P,"LI",{});var Gwe=s(Q2);Hle=n(Gwe,"STRONG",{});var $tt=s(Hle);VPo=r($tt,"roberta"),$tt.forEach(t),zPo=r(Gwe," \u2014 "),xN=n(Gwe,"A",{href:!0});var Itt=s(xN);WPo=r(Itt,"RobertaForQuestionAnswering"),Itt.forEach(t),QPo=r(Gwe," (RoBERTa model)"),Gwe.forEach(t),HPo=i(P),H2=n(P,"LI",{});var Xwe=s(H2);Ule=n(Xwe,"STRONG",{});var jtt=s(Ule);UPo=r(jtt,"roformer"),jtt.forEach(t),JPo=r(Xwe," \u2014 "),kN=n(Xwe,"A",{href:!0});var Dtt=s(kN);YPo=r(Dtt,"RoFormerForQuestionAnswering"),Dtt.forEach(t),KPo=r(Xwe," (RoFormer model)"),Xwe.forEach(t),ZPo=i(P),U2=n(P,"LI",{});var Vwe=s(U2);Jle=n(Vwe,"STRONG",{});var Ntt=s(Jle);e$o=r(Ntt,"splinter"),Ntt.forEach(t),o$o=r(Vwe," \u2014 "),RN=n(Vwe,"A",{href:!0});var qtt=s(RN);r$o=r(qtt,"SplinterForQuestionAnswering"),qtt.forEach(t),t$o=r(Vwe," (Splinter model)"),Vwe.forEach(t),a$o=i(P),J2=n(P,"LI",{});var zwe=s(J2);Yle=n(zwe,"STRONG",{});var Ott=s(Yle);n$o=r(Ott,"squeezebert"),Ott.forEach(t),s$o=r(zwe," \u2014 "),SN=n(zwe,"A",{href:!0});var Gtt=s(SN);l$o=r(Gtt,"SqueezeBertForQuestionAnswering"),Gtt.forEach(t),i$o=r(zwe," (SqueezeBERT model)"),zwe.forEach(t),d$o=i(P),Y2=n(P,"LI",{});var Wwe=s(Y2);Kle=n(Wwe,"STRONG",{});var Xtt=s(Kle);c$o=r(Xtt,"xlm"),Xtt.forEach(t),f$o=r(Wwe," \u2014 "),PN=n(Wwe,"A",{href:!0});var Vtt=s(PN);m$o=r(Vtt,"XLMForQuestionAnsweringSimple"),Vtt.forEach(t),g$o=r(Wwe," (XLM model)"),Wwe.forEach(t),h$o=i(P),K2=n(P,"LI",{});var Qwe=s(K2);Zle=n(Qwe,"STRONG",{});var ztt=s(Zle);p$o=r(ztt,"xlm-roberta"),ztt.forEach(t),_$o=r(Qwe," \u2014 "),$N=n(Qwe,"A",{href:!0});var Wtt=s($N);u$o=r(Wtt,"XLMRobertaForQuestionAnswering"),Wtt.forEach(t),b$o=r(Qwe," (XLM-RoBERTa model)"),Qwe.forEach(t),v$o=i(P),Z2=n(P,"LI",{});var Hwe=s(Z2);eie=n(Hwe,"STRONG",{});var Qtt=s(eie);T$o=r(Qtt,"xlm-roberta-xl"),Qtt.forEach(t),F$o=r(Hwe," \u2014 "),IN=n(Hwe,"A",{href:!0});var Htt=s(IN);C$o=r(Htt,"XLMRobertaXLForQuestionAnswering"),Htt.forEach(t),M$o=r(Hwe," (XLM-RoBERTa-XL model)"),Hwe.forEach(t),E$o=i(P),ev=n(P,"LI",{});var Uwe=s(ev);oie=n(Uwe,"STRONG",{});var Utt=s(oie);y$o=r(Utt,"xlnet"),Utt.forEach(t),w$o=r(Uwe," \u2014 "),jN=n(Uwe,"A",{href:!0});var Jtt=s(jN);A$o=r(Jtt,"XLNetForQuestionAnsweringSimple"),Jtt.forEach(t),L$o=r(Uwe," (XLNet model)"),Uwe.forEach(t),B$o=i(P),ov=n(P,"LI",{});var Jwe=s(ov);rie=n(Jwe,"STRONG",{});var Ytt=s(rie);x$o=r(Ytt,"yoso"),Ytt.forEach(t),k$o=r(Jwe," \u2014 "),DN=n(Jwe,"A",{href:!0});var Ktt=s(DN);R$o=r(Ktt,"YosoForQuestionAnswering"),Ktt.forEach(t),S$o=r(Jwe," (YOSO model)"),Jwe.forEach(t),P.forEach(t),P$o=i(Kt),rv=n(Kt,"P",{});var Ywe=s(rv);$$o=r(Ywe,"The model is set in evaluation mode by default using "),tie=n(Ywe,"CODE",{});var Ztt=s(tie);I$o=r(Ztt,"model.eval()"),Ztt.forEach(t),j$o=r(Ywe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aie=n(Ywe,"CODE",{});var eat=s(aie);D$o=r(eat,"model.train()"),eat.forEach(t),Ywe.forEach(t),N$o=i(Kt),nie=n(Kt,"P",{});var oat=s(nie);q$o=r(oat,"Examples:"),oat.forEach(t),O$o=i(Kt),m(d3.$$.fragment,Kt),Kt.forEach(t),_l.forEach(t),tRe=i(d),Pd=n(d,"H2",{class:!0});var hPe=s(Pd);tv=n(hPe,"A",{id:!0,class:!0,href:!0});var rat=s(tv);sie=n(rat,"SPAN",{});var tat=s(sie);m(c3.$$.fragment,tat),tat.forEach(t),rat.forEach(t),G$o=i(hPe),lie=n(hPe,"SPAN",{});var aat=s(lie);X$o=r(aat,"AutoModelForTableQuestionAnswering"),aat.forEach(t),hPe.forEach(t),aRe=i(d),lr=n(d,"DIV",{class:!0});var bl=s(lr);m(f3.$$.fragment,bl),V$o=i(bl),$d=n(bl,"P",{});var LW=s($d);z$o=r(LW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),iie=n(LW,"CODE",{});var nat=s(iie);W$o=r(nat,"from_pretrained()"),nat.forEach(t),Q$o=r(LW,"class method or the "),die=n(LW,"CODE",{});var sat=s(die);H$o=r(sat,"from_config()"),sat.forEach(t),U$o=r(LW,`class
method.`),LW.forEach(t),J$o=i(bl),m3=n(bl,"P",{});var pPe=s(m3);Y$o=r(pPe,"This class cannot be instantiated directly using "),cie=n(pPe,"CODE",{});var lat=s(cie);K$o=r(lat,"__init__()"),lat.forEach(t),Z$o=r(pPe," (throws an error)."),pPe.forEach(t),eIo=i(bl),rt=n(bl,"DIV",{class:!0});var vl=s(rt);m(g3.$$.fragment,vl),oIo=i(vl),fie=n(vl,"P",{});var iat=s(fie);rIo=r(iat,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),iat.forEach(t),tIo=i(vl),Id=n(vl,"P",{});var BW=s(Id);aIo=r(BW,`Note:
Loading a model from its configuration file does `),mie=n(BW,"STRONG",{});var dat=s(mie);nIo=r(dat,"not"),dat.forEach(t),sIo=r(BW,` load the model weights. It only affects the
model\u2019s configuration. Use `),gie=n(BW,"CODE",{});var cat=s(gie);lIo=r(cat,"from_pretrained()"),cat.forEach(t),iIo=r(BW,"to load the model weights."),BW.forEach(t),dIo=i(vl),hie=n(vl,"P",{});var fat=s(hie);cIo=r(fat,"Examples:"),fat.forEach(t),fIo=i(vl),m(h3.$$.fragment,vl),vl.forEach(t),mIo=i(bl),He=n(bl,"DIV",{class:!0});var Zt=s(He);m(p3.$$.fragment,Zt),gIo=i(Zt),pie=n(Zt,"P",{});var mat=s(pie);hIo=r(mat,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),mat.forEach(t),pIo=i(Zt),an=n(Zt,"P",{});var AM=s(an);_Io=r(AM,"The model class to instantiate is selected based on the "),_ie=n(AM,"CODE",{});var gat=s(_ie);uIo=r(gat,"model_type"),gat.forEach(t),bIo=r(AM,` property of the config object (either
passed as an argument or loaded from `),uie=n(AM,"CODE",{});var hat=s(uie);vIo=r(hat,"pretrained_model_name_or_path"),hat.forEach(t),TIo=r(AM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bie=n(AM,"CODE",{});var pat=s(bie);FIo=r(pat,"pretrained_model_name_or_path"),pat.forEach(t),CIo=r(AM,":"),AM.forEach(t),MIo=i(Zt),vie=n(Zt,"UL",{});var _at=s(vie);av=n(_at,"LI",{});var Kwe=s(av);Tie=n(Kwe,"STRONG",{});var uat=s(Tie);EIo=r(uat,"tapas"),uat.forEach(t),yIo=r(Kwe," \u2014 "),NN=n(Kwe,"A",{href:!0});var bat=s(NN);wIo=r(bat,"TapasForQuestionAnswering"),bat.forEach(t),AIo=r(Kwe," (TAPAS model)"),Kwe.forEach(t),_at.forEach(t),LIo=i(Zt),nv=n(Zt,"P",{});var Zwe=s(nv);BIo=r(Zwe,"The model is set in evaluation mode by default using "),Fie=n(Zwe,"CODE",{});var vat=s(Fie);xIo=r(vat,"model.eval()"),vat.forEach(t),kIo=r(Zwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cie=n(Zwe,"CODE",{});var Tat=s(Cie);RIo=r(Tat,"model.train()"),Tat.forEach(t),Zwe.forEach(t),SIo=i(Zt),Mie=n(Zt,"P",{});var Fat=s(Mie);PIo=r(Fat,"Examples:"),Fat.forEach(t),$Io=i(Zt),m(_3.$$.fragment,Zt),Zt.forEach(t),bl.forEach(t),nRe=i(d),jd=n(d,"H2",{class:!0});var _Pe=s(jd);sv=n(_Pe,"A",{id:!0,class:!0,href:!0});var Cat=s(sv);Eie=n(Cat,"SPAN",{});var Mat=s(Eie);m(u3.$$.fragment,Mat),Mat.forEach(t),Cat.forEach(t),IIo=i(_Pe),yie=n(_Pe,"SPAN",{});var Eat=s(yie);jIo=r(Eat,"AutoModelForImageClassification"),Eat.forEach(t),_Pe.forEach(t),sRe=i(d),ir=n(d,"DIV",{class:!0});var Tl=s(ir);m(b3.$$.fragment,Tl),DIo=i(Tl),Dd=n(Tl,"P",{});var xW=s(Dd);NIo=r(xW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),wie=n(xW,"CODE",{});var yat=s(wie);qIo=r(yat,"from_pretrained()"),yat.forEach(t),OIo=r(xW,"class method or the "),Aie=n(xW,"CODE",{});var wat=s(Aie);GIo=r(wat,"from_config()"),wat.forEach(t),XIo=r(xW,`class
method.`),xW.forEach(t),VIo=i(Tl),v3=n(Tl,"P",{});var uPe=s(v3);zIo=r(uPe,"This class cannot be instantiated directly using "),Lie=n(uPe,"CODE",{});var Aat=s(Lie);WIo=r(Aat,"__init__()"),Aat.forEach(t),QIo=r(uPe," (throws an error)."),uPe.forEach(t),HIo=i(Tl),tt=n(Tl,"DIV",{class:!0});var Fl=s(tt);m(T3.$$.fragment,Fl),UIo=i(Fl),Bie=n(Fl,"P",{});var Lat=s(Bie);JIo=r(Lat,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Lat.forEach(t),YIo=i(Fl),Nd=n(Fl,"P",{});var kW=s(Nd);KIo=r(kW,`Note:
Loading a model from its configuration file does `),xie=n(kW,"STRONG",{});var Bat=s(xie);ZIo=r(Bat,"not"),Bat.forEach(t),ejo=r(kW,` load the model weights. It only affects the
model\u2019s configuration. Use `),kie=n(kW,"CODE",{});var xat=s(kie);ojo=r(xat,"from_pretrained()"),xat.forEach(t),rjo=r(kW,"to load the model weights."),kW.forEach(t),tjo=i(Fl),Rie=n(Fl,"P",{});var kat=s(Rie);ajo=r(kat,"Examples:"),kat.forEach(t),njo=i(Fl),m(F3.$$.fragment,Fl),Fl.forEach(t),sjo=i(Tl),Ue=n(Tl,"DIV",{class:!0});var ea=s(Ue);m(C3.$$.fragment,ea),ljo=i(ea),Sie=n(ea,"P",{});var Rat=s(Sie);ijo=r(Rat,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Rat.forEach(t),djo=i(ea),nn=n(ea,"P",{});var LM=s(nn);cjo=r(LM,"The model class to instantiate is selected based on the "),Pie=n(LM,"CODE",{});var Sat=s(Pie);fjo=r(Sat,"model_type"),Sat.forEach(t),mjo=r(LM,` property of the config object (either
passed as an argument or loaded from `),$ie=n(LM,"CODE",{});var Pat=s($ie);gjo=r(Pat,"pretrained_model_name_or_path"),Pat.forEach(t),hjo=r(LM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Iie=n(LM,"CODE",{});var $at=s(Iie);pjo=r($at,"pretrained_model_name_or_path"),$at.forEach(t),_jo=r(LM,":"),LM.forEach(t),ujo=i(ea),me=n(ea,"UL",{});var Fe=s(me);lv=n(Fe,"LI",{});var eAe=s(lv);jie=n(eAe,"STRONG",{});var Iat=s(jie);bjo=r(Iat,"beit"),Iat.forEach(t),vjo=r(eAe," \u2014 "),qN=n(eAe,"A",{href:!0});var jat=s(qN);Tjo=r(jat,"BeitForImageClassification"),jat.forEach(t),Fjo=r(eAe," (BEiT model)"),eAe.forEach(t),Cjo=i(Fe),iv=n(Fe,"LI",{});var oAe=s(iv);Die=n(oAe,"STRONG",{});var Dat=s(Die);Mjo=r(Dat,"convnext"),Dat.forEach(t),Ejo=r(oAe," \u2014 "),ON=n(oAe,"A",{href:!0});var Nat=s(ON);yjo=r(Nat,"ConvNextForImageClassification"),Nat.forEach(t),wjo=r(oAe," (ConvNext model)"),oAe.forEach(t),Ajo=i(Fe),zs=n(Fe,"LI",{});var m9=s(zs);Nie=n(m9,"STRONG",{});var qat=s(Nie);Ljo=r(qat,"deit"),qat.forEach(t),Bjo=r(m9," \u2014 "),GN=n(m9,"A",{href:!0});var Oat=s(GN);xjo=r(Oat,"DeiTForImageClassification"),Oat.forEach(t),kjo=r(m9," or "),XN=n(m9,"A",{href:!0});var Gat=s(XN);Rjo=r(Gat,"DeiTForImageClassificationWithTeacher"),Gat.forEach(t),Sjo=r(m9," (DeiT model)"),m9.forEach(t),Pjo=i(Fe),dv=n(Fe,"LI",{});var rAe=s(dv);qie=n(rAe,"STRONG",{});var Xat=s(qie);$jo=r(Xat,"imagegpt"),Xat.forEach(t),Ijo=r(rAe," \u2014 "),VN=n(rAe,"A",{href:!0});var Vat=s(VN);jjo=r(Vat,"ImageGPTForImageClassification"),Vat.forEach(t),Djo=r(rAe," (ImageGPT model)"),rAe.forEach(t),Njo=i(Fe),pa=n(Fe,"LI",{});var zf=s(pa);Oie=n(zf,"STRONG",{});var zat=s(Oie);qjo=r(zat,"perceiver"),zat.forEach(t),Ojo=r(zf," \u2014 "),zN=n(zf,"A",{href:!0});var Wat=s(zN);Gjo=r(Wat,"PerceiverForImageClassificationLearned"),Wat.forEach(t),Xjo=r(zf," or "),WN=n(zf,"A",{href:!0});var Qat=s(WN);Vjo=r(Qat,"PerceiverForImageClassificationFourier"),Qat.forEach(t),zjo=r(zf," or "),QN=n(zf,"A",{href:!0});var Hat=s(QN);Wjo=r(Hat,"PerceiverForImageClassificationConvProcessing"),Hat.forEach(t),Qjo=r(zf," (Perceiver model)"),zf.forEach(t),Hjo=i(Fe),cv=n(Fe,"LI",{});var tAe=s(cv);Gie=n(tAe,"STRONG",{});var Uat=s(Gie);Ujo=r(Uat,"poolformer"),Uat.forEach(t),Jjo=r(tAe," \u2014 "),HN=n(tAe,"A",{href:!0});var Jat=s(HN);Yjo=r(Jat,"PoolFormerForImageClassification"),Jat.forEach(t),Kjo=r(tAe," (PoolFormer model)"),tAe.forEach(t),Zjo=i(Fe),fv=n(Fe,"LI",{});var aAe=s(fv);Xie=n(aAe,"STRONG",{});var Yat=s(Xie);eDo=r(Yat,"resnet"),Yat.forEach(t),oDo=r(aAe," \u2014 "),UN=n(aAe,"A",{href:!0});var Kat=s(UN);rDo=r(Kat,"ResNetForImageClassification"),Kat.forEach(t),tDo=r(aAe," (ResNet model)"),aAe.forEach(t),aDo=i(Fe),mv=n(Fe,"LI",{});var nAe=s(mv);Vie=n(nAe,"STRONG",{});var Zat=s(Vie);nDo=r(Zat,"segformer"),Zat.forEach(t),sDo=r(nAe," \u2014 "),JN=n(nAe,"A",{href:!0});var ent=s(JN);lDo=r(ent,"SegformerForImageClassification"),ent.forEach(t),iDo=r(nAe," (SegFormer model)"),nAe.forEach(t),dDo=i(Fe),gv=n(Fe,"LI",{});var sAe=s(gv);zie=n(sAe,"STRONG",{});var ont=s(zie);cDo=r(ont,"swin"),ont.forEach(t),fDo=r(sAe," \u2014 "),YN=n(sAe,"A",{href:!0});var rnt=s(YN);mDo=r(rnt,"SwinForImageClassification"),rnt.forEach(t),gDo=r(sAe," (Swin model)"),sAe.forEach(t),hDo=i(Fe),hv=n(Fe,"LI",{});var lAe=s(hv);Wie=n(lAe,"STRONG",{});var tnt=s(Wie);pDo=r(tnt,"van"),tnt.forEach(t),_Do=r(lAe," \u2014 "),KN=n(lAe,"A",{href:!0});var ant=s(KN);uDo=r(ant,"VanForImageClassification"),ant.forEach(t),bDo=r(lAe," (VAN model)"),lAe.forEach(t),vDo=i(Fe),pv=n(Fe,"LI",{});var iAe=s(pv);Qie=n(iAe,"STRONG",{});var nnt=s(Qie);TDo=r(nnt,"vit"),nnt.forEach(t),FDo=r(iAe," \u2014 "),ZN=n(iAe,"A",{href:!0});var snt=s(ZN);CDo=r(snt,"ViTForImageClassification"),snt.forEach(t),MDo=r(iAe," (ViT model)"),iAe.forEach(t),Fe.forEach(t),EDo=i(ea),_v=n(ea,"P",{});var dAe=s(_v);yDo=r(dAe,"The model is set in evaluation mode by default using "),Hie=n(dAe,"CODE",{});var lnt=s(Hie);wDo=r(lnt,"model.eval()"),lnt.forEach(t),ADo=r(dAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uie=n(dAe,"CODE",{});var int=s(Uie);LDo=r(int,"model.train()"),int.forEach(t),dAe.forEach(t),BDo=i(ea),Jie=n(ea,"P",{});var dnt=s(Jie);xDo=r(dnt,"Examples:"),dnt.forEach(t),kDo=i(ea),m(M3.$$.fragment,ea),ea.forEach(t),Tl.forEach(t),lRe=i(d),qd=n(d,"H2",{class:!0});var bPe=s(qd);uv=n(bPe,"A",{id:!0,class:!0,href:!0});var cnt=s(uv);Yie=n(cnt,"SPAN",{});var fnt=s(Yie);m(E3.$$.fragment,fnt),fnt.forEach(t),cnt.forEach(t),RDo=i(bPe),Kie=n(bPe,"SPAN",{});var mnt=s(Kie);SDo=r(mnt,"AutoModelForVision2Seq"),mnt.forEach(t),bPe.forEach(t),iRe=i(d),dr=n(d,"DIV",{class:!0});var Cl=s(dr);m(y3.$$.fragment,Cl),PDo=i(Cl),Od=n(Cl,"P",{});var RW=s(Od);$Do=r(RW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Zie=n(RW,"CODE",{});var gnt=s(Zie);IDo=r(gnt,"from_pretrained()"),gnt.forEach(t),jDo=r(RW,"class method or the "),ede=n(RW,"CODE",{});var hnt=s(ede);DDo=r(hnt,"from_config()"),hnt.forEach(t),NDo=r(RW,`class
method.`),RW.forEach(t),qDo=i(Cl),w3=n(Cl,"P",{});var vPe=s(w3);ODo=r(vPe,"This class cannot be instantiated directly using "),ode=n(vPe,"CODE",{});var pnt=s(ode);GDo=r(pnt,"__init__()"),pnt.forEach(t),XDo=r(vPe," (throws an error)."),vPe.forEach(t),VDo=i(Cl),at=n(Cl,"DIV",{class:!0});var Ml=s(at);m(A3.$$.fragment,Ml),zDo=i(Ml),rde=n(Ml,"P",{});var _nt=s(rde);WDo=r(_nt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),_nt.forEach(t),QDo=i(Ml),Gd=n(Ml,"P",{});var SW=s(Gd);HDo=r(SW,`Note:
Loading a model from its configuration file does `),tde=n(SW,"STRONG",{});var unt=s(tde);UDo=r(unt,"not"),unt.forEach(t),JDo=r(SW,` load the model weights. It only affects the
model\u2019s configuration. Use `),ade=n(SW,"CODE",{});var bnt=s(ade);YDo=r(bnt,"from_pretrained()"),bnt.forEach(t),KDo=r(SW,"to load the model weights."),SW.forEach(t),ZDo=i(Ml),nde=n(Ml,"P",{});var vnt=s(nde);eNo=r(vnt,"Examples:"),vnt.forEach(t),oNo=i(Ml),m(L3.$$.fragment,Ml),Ml.forEach(t),rNo=i(Cl),Je=n(Cl,"DIV",{class:!0});var oa=s(Je);m(B3.$$.fragment,oa),tNo=i(oa),sde=n(oa,"P",{});var Tnt=s(sde);aNo=r(Tnt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Tnt.forEach(t),nNo=i(oa),sn=n(oa,"P",{});var BM=s(sn);sNo=r(BM,"The model class to instantiate is selected based on the "),lde=n(BM,"CODE",{});var Fnt=s(lde);lNo=r(Fnt,"model_type"),Fnt.forEach(t),iNo=r(BM,` property of the config object (either
passed as an argument or loaded from `),ide=n(BM,"CODE",{});var Cnt=s(ide);dNo=r(Cnt,"pretrained_model_name_or_path"),Cnt.forEach(t),cNo=r(BM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dde=n(BM,"CODE",{});var Mnt=s(dde);fNo=r(Mnt,"pretrained_model_name_or_path"),Mnt.forEach(t),mNo=r(BM,":"),BM.forEach(t),gNo=i(oa),cde=n(oa,"UL",{});var Ent=s(cde);bv=n(Ent,"LI",{});var cAe=s(bv);fde=n(cAe,"STRONG",{});var ynt=s(fde);hNo=r(ynt,"vision-encoder-decoder"),ynt.forEach(t),pNo=r(cAe," \u2014 "),eq=n(cAe,"A",{href:!0});var wnt=s(eq);_No=r(wnt,"VisionEncoderDecoderModel"),wnt.forEach(t),uNo=r(cAe," (Vision Encoder decoder model)"),cAe.forEach(t),Ent.forEach(t),bNo=i(oa),vv=n(oa,"P",{});var fAe=s(vv);vNo=r(fAe,"The model is set in evaluation mode by default using "),mde=n(fAe,"CODE",{});var Ant=s(mde);TNo=r(Ant,"model.eval()"),Ant.forEach(t),FNo=r(fAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gde=n(fAe,"CODE",{});var Lnt=s(gde);CNo=r(Lnt,"model.train()"),Lnt.forEach(t),fAe.forEach(t),MNo=i(oa),hde=n(oa,"P",{});var Bnt=s(hde);ENo=r(Bnt,"Examples:"),Bnt.forEach(t),yNo=i(oa),m(x3.$$.fragment,oa),oa.forEach(t),Cl.forEach(t),dRe=i(d),Xd=n(d,"H2",{class:!0});var TPe=s(Xd);Tv=n(TPe,"A",{id:!0,class:!0,href:!0});var xnt=s(Tv);pde=n(xnt,"SPAN",{});var knt=s(pde);m(k3.$$.fragment,knt),knt.forEach(t),xnt.forEach(t),wNo=i(TPe),_de=n(TPe,"SPAN",{});var Rnt=s(_de);ANo=r(Rnt,"AutoModelForAudioClassification"),Rnt.forEach(t),TPe.forEach(t),cRe=i(d),cr=n(d,"DIV",{class:!0});var El=s(cr);m(R3.$$.fragment,El),LNo=i(El),Vd=n(El,"P",{});var PW=s(Vd);BNo=r(PW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),ude=n(PW,"CODE",{});var Snt=s(ude);xNo=r(Snt,"from_pretrained()"),Snt.forEach(t),kNo=r(PW,"class method or the "),bde=n(PW,"CODE",{});var Pnt=s(bde);RNo=r(Pnt,"from_config()"),Pnt.forEach(t),SNo=r(PW,`class
method.`),PW.forEach(t),PNo=i(El),S3=n(El,"P",{});var FPe=s(S3);$No=r(FPe,"This class cannot be instantiated directly using "),vde=n(FPe,"CODE",{});var $nt=s(vde);INo=r($nt,"__init__()"),$nt.forEach(t),jNo=r(FPe," (throws an error)."),FPe.forEach(t),DNo=i(El),nt=n(El,"DIV",{class:!0});var yl=s(nt);m(P3.$$.fragment,yl),NNo=i(yl),Tde=n(yl,"P",{});var Int=s(Tde);qNo=r(Int,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Int.forEach(t),ONo=i(yl),zd=n(yl,"P",{});var $W=s(zd);GNo=r($W,`Note:
Loading a model from its configuration file does `),Fde=n($W,"STRONG",{});var jnt=s(Fde);XNo=r(jnt,"not"),jnt.forEach(t),VNo=r($W,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cde=n($W,"CODE",{});var Dnt=s(Cde);zNo=r(Dnt,"from_pretrained()"),Dnt.forEach(t),WNo=r($W,"to load the model weights."),$W.forEach(t),QNo=i(yl),Mde=n(yl,"P",{});var Nnt=s(Mde);HNo=r(Nnt,"Examples:"),Nnt.forEach(t),UNo=i(yl),m($3.$$.fragment,yl),yl.forEach(t),JNo=i(El),Ye=n(El,"DIV",{class:!0});var ra=s(Ye);m(I3.$$.fragment,ra),YNo=i(ra),Ede=n(ra,"P",{});var qnt=s(Ede);KNo=r(qnt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),qnt.forEach(t),ZNo=i(ra),ln=n(ra,"P",{});var xM=s(ln);eqo=r(xM,"The model class to instantiate is selected based on the "),yde=n(xM,"CODE",{});var Ont=s(yde);oqo=r(Ont,"model_type"),Ont.forEach(t),rqo=r(xM,` property of the config object (either
passed as an argument or loaded from `),wde=n(xM,"CODE",{});var Gnt=s(wde);tqo=r(Gnt,"pretrained_model_name_or_path"),Gnt.forEach(t),aqo=r(xM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ade=n(xM,"CODE",{});var Xnt=s(Ade);nqo=r(Xnt,"pretrained_model_name_or_path"),Xnt.forEach(t),sqo=r(xM,":"),xM.forEach(t),lqo=i(ra),ke=n(ra,"UL",{});var Oo=s(ke);Fv=n(Oo,"LI",{});var mAe=s(Fv);Lde=n(mAe,"STRONG",{});var Vnt=s(Lde);iqo=r(Vnt,"data2vec-audio"),Vnt.forEach(t),dqo=r(mAe," \u2014 "),oq=n(mAe,"A",{href:!0});var znt=s(oq);cqo=r(znt,"Data2VecAudioForSequenceClassification"),znt.forEach(t),fqo=r(mAe," (Data2VecAudio model)"),mAe.forEach(t),mqo=i(Oo),Cv=n(Oo,"LI",{});var gAe=s(Cv);Bde=n(gAe,"STRONG",{});var Wnt=s(Bde);gqo=r(Wnt,"hubert"),Wnt.forEach(t),hqo=r(gAe," \u2014 "),rq=n(gAe,"A",{href:!0});var Qnt=s(rq);pqo=r(Qnt,"HubertForSequenceClassification"),Qnt.forEach(t),_qo=r(gAe," (Hubert model)"),gAe.forEach(t),uqo=i(Oo),Mv=n(Oo,"LI",{});var hAe=s(Mv);xde=n(hAe,"STRONG",{});var Hnt=s(xde);bqo=r(Hnt,"sew"),Hnt.forEach(t),vqo=r(hAe," \u2014 "),tq=n(hAe,"A",{href:!0});var Unt=s(tq);Tqo=r(Unt,"SEWForSequenceClassification"),Unt.forEach(t),Fqo=r(hAe," (SEW model)"),hAe.forEach(t),Cqo=i(Oo),Ev=n(Oo,"LI",{});var pAe=s(Ev);kde=n(pAe,"STRONG",{});var Jnt=s(kde);Mqo=r(Jnt,"sew-d"),Jnt.forEach(t),Eqo=r(pAe," \u2014 "),aq=n(pAe,"A",{href:!0});var Ynt=s(aq);yqo=r(Ynt,"SEWDForSequenceClassification"),Ynt.forEach(t),wqo=r(pAe," (SEW-D model)"),pAe.forEach(t),Aqo=i(Oo),yv=n(Oo,"LI",{});var _Ae=s(yv);Rde=n(_Ae,"STRONG",{});var Knt=s(Rde);Lqo=r(Knt,"unispeech"),Knt.forEach(t),Bqo=r(_Ae," \u2014 "),nq=n(_Ae,"A",{href:!0});var Znt=s(nq);xqo=r(Znt,"UniSpeechForSequenceClassification"),Znt.forEach(t),kqo=r(_Ae," (UniSpeech model)"),_Ae.forEach(t),Rqo=i(Oo),wv=n(Oo,"LI",{});var uAe=s(wv);Sde=n(uAe,"STRONG",{});var est=s(Sde);Sqo=r(est,"unispeech-sat"),est.forEach(t),Pqo=r(uAe," \u2014 "),sq=n(uAe,"A",{href:!0});var ost=s(sq);$qo=r(ost,"UniSpeechSatForSequenceClassification"),ost.forEach(t),Iqo=r(uAe," (UniSpeechSat model)"),uAe.forEach(t),jqo=i(Oo),Av=n(Oo,"LI",{});var bAe=s(Av);Pde=n(bAe,"STRONG",{});var rst=s(Pde);Dqo=r(rst,"wav2vec2"),rst.forEach(t),Nqo=r(bAe," \u2014 "),lq=n(bAe,"A",{href:!0});var tst=s(lq);qqo=r(tst,"Wav2Vec2ForSequenceClassification"),tst.forEach(t),Oqo=r(bAe," (Wav2Vec2 model)"),bAe.forEach(t),Gqo=i(Oo),Lv=n(Oo,"LI",{});var vAe=s(Lv);$de=n(vAe,"STRONG",{});var ast=s($de);Xqo=r(ast,"wavlm"),ast.forEach(t),Vqo=r(vAe," \u2014 "),iq=n(vAe,"A",{href:!0});var nst=s(iq);zqo=r(nst,"WavLMForSequenceClassification"),nst.forEach(t),Wqo=r(vAe," (WavLM model)"),vAe.forEach(t),Oo.forEach(t),Qqo=i(ra),Bv=n(ra,"P",{});var TAe=s(Bv);Hqo=r(TAe,"The model is set in evaluation mode by default using "),Ide=n(TAe,"CODE",{});var sst=s(Ide);Uqo=r(sst,"model.eval()"),sst.forEach(t),Jqo=r(TAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jde=n(TAe,"CODE",{});var lst=s(jde);Yqo=r(lst,"model.train()"),lst.forEach(t),TAe.forEach(t),Kqo=i(ra),Dde=n(ra,"P",{});var ist=s(Dde);Zqo=r(ist,"Examples:"),ist.forEach(t),eOo=i(ra),m(j3.$$.fragment,ra),ra.forEach(t),El.forEach(t),fRe=i(d),Wd=n(d,"H2",{class:!0});var CPe=s(Wd);xv=n(CPe,"A",{id:!0,class:!0,href:!0});var dst=s(xv);Nde=n(dst,"SPAN",{});var cst=s(Nde);m(D3.$$.fragment,cst),cst.forEach(t),dst.forEach(t),oOo=i(CPe),qde=n(CPe,"SPAN",{});var fst=s(qde);rOo=r(fst,"AutoModelForAudioFrameClassification"),fst.forEach(t),CPe.forEach(t),mRe=i(d),fr=n(d,"DIV",{class:!0});var wl=s(fr);m(N3.$$.fragment,wl),tOo=i(wl),Qd=n(wl,"P",{});var IW=s(Qd);aOo=r(IW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Ode=n(IW,"CODE",{});var mst=s(Ode);nOo=r(mst,"from_pretrained()"),mst.forEach(t),sOo=r(IW,"class method or the "),Gde=n(IW,"CODE",{});var gst=s(Gde);lOo=r(gst,"from_config()"),gst.forEach(t),iOo=r(IW,`class
method.`),IW.forEach(t),dOo=i(wl),q3=n(wl,"P",{});var MPe=s(q3);cOo=r(MPe,"This class cannot be instantiated directly using "),Xde=n(MPe,"CODE",{});var hst=s(Xde);fOo=r(hst,"__init__()"),hst.forEach(t),mOo=r(MPe," (throws an error)."),MPe.forEach(t),gOo=i(wl),st=n(wl,"DIV",{class:!0});var Al=s(st);m(O3.$$.fragment,Al),hOo=i(Al),Vde=n(Al,"P",{});var pst=s(Vde);pOo=r(pst,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),pst.forEach(t),_Oo=i(Al),Hd=n(Al,"P",{});var jW=s(Hd);uOo=r(jW,`Note:
Loading a model from its configuration file does `),zde=n(jW,"STRONG",{});var _st=s(zde);bOo=r(_st,"not"),_st.forEach(t),vOo=r(jW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wde=n(jW,"CODE",{});var ust=s(Wde);TOo=r(ust,"from_pretrained()"),ust.forEach(t),FOo=r(jW,"to load the model weights."),jW.forEach(t),COo=i(Al),Qde=n(Al,"P",{});var bst=s(Qde);MOo=r(bst,"Examples:"),bst.forEach(t),EOo=i(Al),m(G3.$$.fragment,Al),Al.forEach(t),yOo=i(wl),Ke=n(wl,"DIV",{class:!0});var ta=s(Ke);m(X3.$$.fragment,ta),wOo=i(ta),Hde=n(ta,"P",{});var vst=s(Hde);AOo=r(vst,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),vst.forEach(t),LOo=i(ta),dn=n(ta,"P",{});var kM=s(dn);BOo=r(kM,"The model class to instantiate is selected based on the "),Ude=n(kM,"CODE",{});var Tst=s(Ude);xOo=r(Tst,"model_type"),Tst.forEach(t),kOo=r(kM,` property of the config object (either
passed as an argument or loaded from `),Jde=n(kM,"CODE",{});var Fst=s(Jde);ROo=r(Fst,"pretrained_model_name_or_path"),Fst.forEach(t),SOo=r(kM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yde=n(kM,"CODE",{});var Cst=s(Yde);POo=r(Cst,"pretrained_model_name_or_path"),Cst.forEach(t),$Oo=r(kM,":"),kM.forEach(t),IOo=i(ta),cn=n(ta,"UL",{});var RM=s(cn);kv=n(RM,"LI",{});var FAe=s(kv);Kde=n(FAe,"STRONG",{});var Mst=s(Kde);jOo=r(Mst,"data2vec-audio"),Mst.forEach(t),DOo=r(FAe," \u2014 "),dq=n(FAe,"A",{href:!0});var Est=s(dq);NOo=r(Est,"Data2VecAudioForAudioFrameClassification"),Est.forEach(t),qOo=r(FAe," (Data2VecAudio model)"),FAe.forEach(t),OOo=i(RM),Rv=n(RM,"LI",{});var CAe=s(Rv);Zde=n(CAe,"STRONG",{});var yst=s(Zde);GOo=r(yst,"unispeech-sat"),yst.forEach(t),XOo=r(CAe," \u2014 "),cq=n(CAe,"A",{href:!0});var wst=s(cq);VOo=r(wst,"UniSpeechSatForAudioFrameClassification"),wst.forEach(t),zOo=r(CAe," (UniSpeechSat model)"),CAe.forEach(t),WOo=i(RM),Sv=n(RM,"LI",{});var MAe=s(Sv);ece=n(MAe,"STRONG",{});var Ast=s(ece);QOo=r(Ast,"wav2vec2"),Ast.forEach(t),HOo=r(MAe," \u2014 "),fq=n(MAe,"A",{href:!0});var Lst=s(fq);UOo=r(Lst,"Wav2Vec2ForAudioFrameClassification"),Lst.forEach(t),JOo=r(MAe," (Wav2Vec2 model)"),MAe.forEach(t),YOo=i(RM),Pv=n(RM,"LI",{});var EAe=s(Pv);oce=n(EAe,"STRONG",{});var Bst=s(oce);KOo=r(Bst,"wavlm"),Bst.forEach(t),ZOo=r(EAe," \u2014 "),mq=n(EAe,"A",{href:!0});var xst=s(mq);eGo=r(xst,"WavLMForAudioFrameClassification"),xst.forEach(t),oGo=r(EAe," (WavLM model)"),EAe.forEach(t),RM.forEach(t),rGo=i(ta),$v=n(ta,"P",{});var yAe=s($v);tGo=r(yAe,"The model is set in evaluation mode by default using "),rce=n(yAe,"CODE",{});var kst=s(rce);aGo=r(kst,"model.eval()"),kst.forEach(t),nGo=r(yAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tce=n(yAe,"CODE",{});var Rst=s(tce);sGo=r(Rst,"model.train()"),Rst.forEach(t),yAe.forEach(t),lGo=i(ta),ace=n(ta,"P",{});var Sst=s(ace);iGo=r(Sst,"Examples:"),Sst.forEach(t),dGo=i(ta),m(V3.$$.fragment,ta),ta.forEach(t),wl.forEach(t),gRe=i(d),Ud=n(d,"H2",{class:!0});var EPe=s(Ud);Iv=n(EPe,"A",{id:!0,class:!0,href:!0});var Pst=s(Iv);nce=n(Pst,"SPAN",{});var $st=s(nce);m(z3.$$.fragment,$st),$st.forEach(t),Pst.forEach(t),cGo=i(EPe),sce=n(EPe,"SPAN",{});var Ist=s(sce);fGo=r(Ist,"AutoModelForCTC"),Ist.forEach(t),EPe.forEach(t),hRe=i(d),mr=n(d,"DIV",{class:!0});var Ll=s(mr);m(W3.$$.fragment,Ll),mGo=i(Ll),Jd=n(Ll,"P",{});var DW=s(Jd);gGo=r(DW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),lce=n(DW,"CODE",{});var jst=s(lce);hGo=r(jst,"from_pretrained()"),jst.forEach(t),pGo=r(DW,"class method or the "),ice=n(DW,"CODE",{});var Dst=s(ice);_Go=r(Dst,"from_config()"),Dst.forEach(t),uGo=r(DW,`class
method.`),DW.forEach(t),bGo=i(Ll),Q3=n(Ll,"P",{});var yPe=s(Q3);vGo=r(yPe,"This class cannot be instantiated directly using "),dce=n(yPe,"CODE",{});var Nst=s(dce);TGo=r(Nst,"__init__()"),Nst.forEach(t),FGo=r(yPe," (throws an error)."),yPe.forEach(t),CGo=i(Ll),lt=n(Ll,"DIV",{class:!0});var Bl=s(lt);m(H3.$$.fragment,Bl),MGo=i(Bl),cce=n(Bl,"P",{});var qst=s(cce);EGo=r(qst,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),qst.forEach(t),yGo=i(Bl),Yd=n(Bl,"P",{});var NW=s(Yd);wGo=r(NW,`Note:
Loading a model from its configuration file does `),fce=n(NW,"STRONG",{});var Ost=s(fce);AGo=r(Ost,"not"),Ost.forEach(t),LGo=r(NW,` load the model weights. It only affects the
model\u2019s configuration. Use `),mce=n(NW,"CODE",{});var Gst=s(mce);BGo=r(Gst,"from_pretrained()"),Gst.forEach(t),xGo=r(NW,"to load the model weights."),NW.forEach(t),kGo=i(Bl),gce=n(Bl,"P",{});var Xst=s(gce);RGo=r(Xst,"Examples:"),Xst.forEach(t),SGo=i(Bl),m(U3.$$.fragment,Bl),Bl.forEach(t),PGo=i(Ll),Ze=n(Ll,"DIV",{class:!0});var aa=s(Ze);m(J3.$$.fragment,aa),$Go=i(aa),hce=n(aa,"P",{});var Vst=s(hce);IGo=r(Vst,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Vst.forEach(t),jGo=i(aa),fn=n(aa,"P",{});var SM=s(fn);DGo=r(SM,"The model class to instantiate is selected based on the "),pce=n(SM,"CODE",{});var zst=s(pce);NGo=r(zst,"model_type"),zst.forEach(t),qGo=r(SM,` property of the config object (either
passed as an argument or loaded from `),_ce=n(SM,"CODE",{});var Wst=s(_ce);OGo=r(Wst,"pretrained_model_name_or_path"),Wst.forEach(t),GGo=r(SM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uce=n(SM,"CODE",{});var Qst=s(uce);XGo=r(Qst,"pretrained_model_name_or_path"),Qst.forEach(t),VGo=r(SM,":"),SM.forEach(t),zGo=i(aa),Re=n(aa,"UL",{});var Go=s(Re);jv=n(Go,"LI",{});var wAe=s(jv);bce=n(wAe,"STRONG",{});var Hst=s(bce);WGo=r(Hst,"data2vec-audio"),Hst.forEach(t),QGo=r(wAe," \u2014 "),gq=n(wAe,"A",{href:!0});var Ust=s(gq);HGo=r(Ust,"Data2VecAudioForCTC"),Ust.forEach(t),UGo=r(wAe," (Data2VecAudio model)"),wAe.forEach(t),JGo=i(Go),Dv=n(Go,"LI",{});var AAe=s(Dv);vce=n(AAe,"STRONG",{});var Jst=s(vce);YGo=r(Jst,"hubert"),Jst.forEach(t),KGo=r(AAe," \u2014 "),hq=n(AAe,"A",{href:!0});var Yst=s(hq);ZGo=r(Yst,"HubertForCTC"),Yst.forEach(t),eXo=r(AAe," (Hubert model)"),AAe.forEach(t),oXo=i(Go),Nv=n(Go,"LI",{});var LAe=s(Nv);Tce=n(LAe,"STRONG",{});var Kst=s(Tce);rXo=r(Kst,"sew"),Kst.forEach(t),tXo=r(LAe," \u2014 "),pq=n(LAe,"A",{href:!0});var Zst=s(pq);aXo=r(Zst,"SEWForCTC"),Zst.forEach(t),nXo=r(LAe," (SEW model)"),LAe.forEach(t),sXo=i(Go),qv=n(Go,"LI",{});var BAe=s(qv);Fce=n(BAe,"STRONG",{});var elt=s(Fce);lXo=r(elt,"sew-d"),elt.forEach(t),iXo=r(BAe," \u2014 "),_q=n(BAe,"A",{href:!0});var olt=s(_q);dXo=r(olt,"SEWDForCTC"),olt.forEach(t),cXo=r(BAe," (SEW-D model)"),BAe.forEach(t),fXo=i(Go),Ov=n(Go,"LI",{});var xAe=s(Ov);Cce=n(xAe,"STRONG",{});var rlt=s(Cce);mXo=r(rlt,"unispeech"),rlt.forEach(t),gXo=r(xAe," \u2014 "),uq=n(xAe,"A",{href:!0});var tlt=s(uq);hXo=r(tlt,"UniSpeechForCTC"),tlt.forEach(t),pXo=r(xAe," (UniSpeech model)"),xAe.forEach(t),_Xo=i(Go),Gv=n(Go,"LI",{});var kAe=s(Gv);Mce=n(kAe,"STRONG",{});var alt=s(Mce);uXo=r(alt,"unispeech-sat"),alt.forEach(t),bXo=r(kAe," \u2014 "),bq=n(kAe,"A",{href:!0});var nlt=s(bq);vXo=r(nlt,"UniSpeechSatForCTC"),nlt.forEach(t),TXo=r(kAe," (UniSpeechSat model)"),kAe.forEach(t),FXo=i(Go),Xv=n(Go,"LI",{});var RAe=s(Xv);Ece=n(RAe,"STRONG",{});var slt=s(Ece);CXo=r(slt,"wav2vec2"),slt.forEach(t),MXo=r(RAe," \u2014 "),vq=n(RAe,"A",{href:!0});var llt=s(vq);EXo=r(llt,"Wav2Vec2ForCTC"),llt.forEach(t),yXo=r(RAe," (Wav2Vec2 model)"),RAe.forEach(t),wXo=i(Go),Vv=n(Go,"LI",{});var SAe=s(Vv);yce=n(SAe,"STRONG",{});var ilt=s(yce);AXo=r(ilt,"wavlm"),ilt.forEach(t),LXo=r(SAe," \u2014 "),Tq=n(SAe,"A",{href:!0});var dlt=s(Tq);BXo=r(dlt,"WavLMForCTC"),dlt.forEach(t),xXo=r(SAe," (WavLM model)"),SAe.forEach(t),Go.forEach(t),kXo=i(aa),zv=n(aa,"P",{});var PAe=s(zv);RXo=r(PAe,"The model is set in evaluation mode by default using "),wce=n(PAe,"CODE",{});var clt=s(wce);SXo=r(clt,"model.eval()"),clt.forEach(t),PXo=r(PAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ace=n(PAe,"CODE",{});var flt=s(Ace);$Xo=r(flt,"model.train()"),flt.forEach(t),PAe.forEach(t),IXo=i(aa),Lce=n(aa,"P",{});var mlt=s(Lce);jXo=r(mlt,"Examples:"),mlt.forEach(t),DXo=i(aa),m(Y3.$$.fragment,aa),aa.forEach(t),Ll.forEach(t),pRe=i(d),Kd=n(d,"H2",{class:!0});var wPe=s(Kd);Wv=n(wPe,"A",{id:!0,class:!0,href:!0});var glt=s(Wv);Bce=n(glt,"SPAN",{});var hlt=s(Bce);m(K3.$$.fragment,hlt),hlt.forEach(t),glt.forEach(t),NXo=i(wPe),xce=n(wPe,"SPAN",{});var plt=s(xce);qXo=r(plt,"AutoModelForSpeechSeq2Seq"),plt.forEach(t),wPe.forEach(t),_Re=i(d),gr=n(d,"DIV",{class:!0});var xl=s(gr);m(Z3.$$.fragment,xl),OXo=i(xl),Zd=n(xl,"P",{});var qW=s(Zd);GXo=r(qW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),kce=n(qW,"CODE",{});var _lt=s(kce);XXo=r(_lt,"from_pretrained()"),_lt.forEach(t),VXo=r(qW,"class method or the "),Rce=n(qW,"CODE",{});var ult=s(Rce);zXo=r(ult,"from_config()"),ult.forEach(t),WXo=r(qW,`class
method.`),qW.forEach(t),QXo=i(xl),ey=n(xl,"P",{});var APe=s(ey);HXo=r(APe,"This class cannot be instantiated directly using "),Sce=n(APe,"CODE",{});var blt=s(Sce);UXo=r(blt,"__init__()"),blt.forEach(t),JXo=r(APe," (throws an error)."),APe.forEach(t),YXo=i(xl),it=n(xl,"DIV",{class:!0});var kl=s(it);m(oy.$$.fragment,kl),KXo=i(kl),Pce=n(kl,"P",{});var vlt=s(Pce);ZXo=r(vlt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),vlt.forEach(t),eVo=i(kl),ec=n(kl,"P",{});var OW=s(ec);oVo=r(OW,`Note:
Loading a model from its configuration file does `),$ce=n(OW,"STRONG",{});var Tlt=s($ce);rVo=r(Tlt,"not"),Tlt.forEach(t),tVo=r(OW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ice=n(OW,"CODE",{});var Flt=s(Ice);aVo=r(Flt,"from_pretrained()"),Flt.forEach(t),nVo=r(OW,"to load the model weights."),OW.forEach(t),sVo=i(kl),jce=n(kl,"P",{});var Clt=s(jce);lVo=r(Clt,"Examples:"),Clt.forEach(t),iVo=i(kl),m(ry.$$.fragment,kl),kl.forEach(t),dVo=i(xl),eo=n(xl,"DIV",{class:!0});var na=s(eo);m(ty.$$.fragment,na),cVo=i(na),Dce=n(na,"P",{});var Mlt=s(Dce);fVo=r(Mlt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Mlt.forEach(t),mVo=i(na),mn=n(na,"P",{});var PM=s(mn);gVo=r(PM,"The model class to instantiate is selected based on the "),Nce=n(PM,"CODE",{});var Elt=s(Nce);hVo=r(Elt,"model_type"),Elt.forEach(t),pVo=r(PM,` property of the config object (either
passed as an argument or loaded from `),qce=n(PM,"CODE",{});var ylt=s(qce);_Vo=r(ylt,"pretrained_model_name_or_path"),ylt.forEach(t),uVo=r(PM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oce=n(PM,"CODE",{});var wlt=s(Oce);bVo=r(wlt,"pretrained_model_name_or_path"),wlt.forEach(t),vVo=r(PM,":"),PM.forEach(t),TVo=i(na),ay=n(na,"UL",{});var LPe=s(ay);Qv=n(LPe,"LI",{});var $Ae=s(Qv);Gce=n($Ae,"STRONG",{});var Alt=s(Gce);FVo=r(Alt,"speech-encoder-decoder"),Alt.forEach(t),CVo=r($Ae," \u2014 "),Fq=n($Ae,"A",{href:!0});var Llt=s(Fq);MVo=r(Llt,"SpeechEncoderDecoderModel"),Llt.forEach(t),EVo=r($Ae," (Speech Encoder decoder model)"),$Ae.forEach(t),yVo=i(LPe),Hv=n(LPe,"LI",{});var IAe=s(Hv);Xce=n(IAe,"STRONG",{});var Blt=s(Xce);wVo=r(Blt,"speech_to_text"),Blt.forEach(t),AVo=r(IAe," \u2014 "),Cq=n(IAe,"A",{href:!0});var xlt=s(Cq);LVo=r(xlt,"Speech2TextForConditionalGeneration"),xlt.forEach(t),BVo=r(IAe," (Speech2Text model)"),IAe.forEach(t),LPe.forEach(t),xVo=i(na),Uv=n(na,"P",{});var jAe=s(Uv);kVo=r(jAe,"The model is set in evaluation mode by default using "),Vce=n(jAe,"CODE",{});var klt=s(Vce);RVo=r(klt,"model.eval()"),klt.forEach(t),SVo=r(jAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zce=n(jAe,"CODE",{});var Rlt=s(zce);PVo=r(Rlt,"model.train()"),Rlt.forEach(t),jAe.forEach(t),$Vo=i(na),Wce=n(na,"P",{});var Slt=s(Wce);IVo=r(Slt,"Examples:"),Slt.forEach(t),jVo=i(na),m(ny.$$.fragment,na),na.forEach(t),xl.forEach(t),uRe=i(d),oc=n(d,"H2",{class:!0});var BPe=s(oc);Jv=n(BPe,"A",{id:!0,class:!0,href:!0});var Plt=s(Jv);Qce=n(Plt,"SPAN",{});var $lt=s(Qce);m(sy.$$.fragment,$lt),$lt.forEach(t),Plt.forEach(t),DVo=i(BPe),Hce=n(BPe,"SPAN",{});var Ilt=s(Hce);NVo=r(Ilt,"AutoModelForAudioXVector"),Ilt.forEach(t),BPe.forEach(t),bRe=i(d),hr=n(d,"DIV",{class:!0});var Rl=s(hr);m(ly.$$.fragment,Rl),qVo=i(Rl),rc=n(Rl,"P",{});var GW=s(rc);OVo=r(GW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),Uce=n(GW,"CODE",{});var jlt=s(Uce);GVo=r(jlt,"from_pretrained()"),jlt.forEach(t),XVo=r(GW,"class method or the "),Jce=n(GW,"CODE",{});var Dlt=s(Jce);VVo=r(Dlt,"from_config()"),Dlt.forEach(t),zVo=r(GW,`class
method.`),GW.forEach(t),WVo=i(Rl),iy=n(Rl,"P",{});var xPe=s(iy);QVo=r(xPe,"This class cannot be instantiated directly using "),Yce=n(xPe,"CODE",{});var Nlt=s(Yce);HVo=r(Nlt,"__init__()"),Nlt.forEach(t),UVo=r(xPe," (throws an error)."),xPe.forEach(t),JVo=i(Rl),dt=n(Rl,"DIV",{class:!0});var Sl=s(dt);m(dy.$$.fragment,Sl),YVo=i(Sl),Kce=n(Sl,"P",{});var qlt=s(Kce);KVo=r(qlt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),qlt.forEach(t),ZVo=i(Sl),tc=n(Sl,"P",{});var XW=s(tc);ezo=r(XW,`Note:
Loading a model from its configuration file does `),Zce=n(XW,"STRONG",{});var Olt=s(Zce);ozo=r(Olt,"not"),Olt.forEach(t),rzo=r(XW,` load the model weights. It only affects the
model\u2019s configuration. Use `),efe=n(XW,"CODE",{});var Glt=s(efe);tzo=r(Glt,"from_pretrained()"),Glt.forEach(t),azo=r(XW,"to load the model weights."),XW.forEach(t),nzo=i(Sl),ofe=n(Sl,"P",{});var Xlt=s(ofe);szo=r(Xlt,"Examples:"),Xlt.forEach(t),lzo=i(Sl),m(cy.$$.fragment,Sl),Sl.forEach(t),izo=i(Rl),oo=n(Rl,"DIV",{class:!0});var sa=s(oo);m(fy.$$.fragment,sa),dzo=i(sa),rfe=n(sa,"P",{});var Vlt=s(rfe);czo=r(Vlt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Vlt.forEach(t),fzo=i(sa),gn=n(sa,"P",{});var $M=s(gn);mzo=r($M,"The model class to instantiate is selected based on the "),tfe=n($M,"CODE",{});var zlt=s(tfe);gzo=r(zlt,"model_type"),zlt.forEach(t),hzo=r($M,` property of the config object (either
passed as an argument or loaded from `),afe=n($M,"CODE",{});var Wlt=s(afe);pzo=r(Wlt,"pretrained_model_name_or_path"),Wlt.forEach(t),_zo=r($M,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nfe=n($M,"CODE",{});var Qlt=s(nfe);uzo=r(Qlt,"pretrained_model_name_or_path"),Qlt.forEach(t),bzo=r($M,":"),$M.forEach(t),vzo=i(sa),hn=n(sa,"UL",{});var IM=s(hn);Yv=n(IM,"LI",{});var DAe=s(Yv);sfe=n(DAe,"STRONG",{});var Hlt=s(sfe);Tzo=r(Hlt,"data2vec-audio"),Hlt.forEach(t),Fzo=r(DAe," \u2014 "),Mq=n(DAe,"A",{href:!0});var Ult=s(Mq);Czo=r(Ult,"Data2VecAudioForXVector"),Ult.forEach(t),Mzo=r(DAe," (Data2VecAudio model)"),DAe.forEach(t),Ezo=i(IM),Kv=n(IM,"LI",{});var NAe=s(Kv);lfe=n(NAe,"STRONG",{});var Jlt=s(lfe);yzo=r(Jlt,"unispeech-sat"),Jlt.forEach(t),wzo=r(NAe," \u2014 "),Eq=n(NAe,"A",{href:!0});var Ylt=s(Eq);Azo=r(Ylt,"UniSpeechSatForXVector"),Ylt.forEach(t),Lzo=r(NAe," (UniSpeechSat model)"),NAe.forEach(t),Bzo=i(IM),Zv=n(IM,"LI",{});var qAe=s(Zv);ife=n(qAe,"STRONG",{});var Klt=s(ife);xzo=r(Klt,"wav2vec2"),Klt.forEach(t),kzo=r(qAe," \u2014 "),yq=n(qAe,"A",{href:!0});var Zlt=s(yq);Rzo=r(Zlt,"Wav2Vec2ForXVector"),Zlt.forEach(t),Szo=r(qAe," (Wav2Vec2 model)"),qAe.forEach(t),Pzo=i(IM),e6=n(IM,"LI",{});var OAe=s(e6);dfe=n(OAe,"STRONG",{});var eit=s(dfe);$zo=r(eit,"wavlm"),eit.forEach(t),Izo=r(OAe," \u2014 "),wq=n(OAe,"A",{href:!0});var oit=s(wq);jzo=r(oit,"WavLMForXVector"),oit.forEach(t),Dzo=r(OAe," (WavLM model)"),OAe.forEach(t),IM.forEach(t),Nzo=i(sa),o6=n(sa,"P",{});var GAe=s(o6);qzo=r(GAe,"The model is set in evaluation mode by default using "),cfe=n(GAe,"CODE",{});var rit=s(cfe);Ozo=r(rit,"model.eval()"),rit.forEach(t),Gzo=r(GAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ffe=n(GAe,"CODE",{});var tit=s(ffe);Xzo=r(tit,"model.train()"),tit.forEach(t),GAe.forEach(t),Vzo=i(sa),mfe=n(sa,"P",{});var ait=s(mfe);zzo=r(ait,"Examples:"),ait.forEach(t),Wzo=i(sa),m(my.$$.fragment,sa),sa.forEach(t),Rl.forEach(t),vRe=i(d),ac=n(d,"H2",{class:!0});var kPe=s(ac);r6=n(kPe,"A",{id:!0,class:!0,href:!0});var nit=s(r6);gfe=n(nit,"SPAN",{});var sit=s(gfe);m(gy.$$.fragment,sit),sit.forEach(t),nit.forEach(t),Qzo=i(kPe),hfe=n(kPe,"SPAN",{});var lit=s(hfe);Hzo=r(lit,"AutoModelForMaskedImageModeling"),lit.forEach(t),kPe.forEach(t),TRe=i(d),pr=n(d,"DIV",{class:!0});var Pl=s(pr);m(hy.$$.fragment,Pl),Uzo=i(Pl),nc=n(Pl,"P",{});var VW=s(nc);Jzo=r(VW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),pfe=n(VW,"CODE",{});var iit=s(pfe);Yzo=r(iit,"from_pretrained()"),iit.forEach(t),Kzo=r(VW,"class method or the "),_fe=n(VW,"CODE",{});var dit=s(_fe);Zzo=r(dit,"from_config()"),dit.forEach(t),eWo=r(VW,`class
method.`),VW.forEach(t),oWo=i(Pl),py=n(Pl,"P",{});var RPe=s(py);rWo=r(RPe,"This class cannot be instantiated directly using "),ufe=n(RPe,"CODE",{});var cit=s(ufe);tWo=r(cit,"__init__()"),cit.forEach(t),aWo=r(RPe," (throws an error)."),RPe.forEach(t),nWo=i(Pl),ct=n(Pl,"DIV",{class:!0});var $l=s(ct);m(_y.$$.fragment,$l),sWo=i($l),bfe=n($l,"P",{});var fit=s(bfe);lWo=r(fit,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),fit.forEach(t),iWo=i($l),sc=n($l,"P",{});var zW=s(sc);dWo=r(zW,`Note:
Loading a model from its configuration file does `),vfe=n(zW,"STRONG",{});var mit=s(vfe);cWo=r(mit,"not"),mit.forEach(t),fWo=r(zW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tfe=n(zW,"CODE",{});var git=s(Tfe);mWo=r(git,"from_pretrained()"),git.forEach(t),gWo=r(zW,"to load the model weights."),zW.forEach(t),hWo=i($l),Ffe=n($l,"P",{});var hit=s(Ffe);pWo=r(hit,"Examples:"),hit.forEach(t),_Wo=i($l),m(uy.$$.fragment,$l),$l.forEach(t),uWo=i(Pl),ro=n(Pl,"DIV",{class:!0});var la=s(ro);m(by.$$.fragment,la),bWo=i(la),Cfe=n(la,"P",{});var pit=s(Cfe);vWo=r(pit,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),pit.forEach(t),TWo=i(la),pn=n(la,"P",{});var jM=s(pn);FWo=r(jM,"The model class to instantiate is selected based on the "),Mfe=n(jM,"CODE",{});var _it=s(Mfe);CWo=r(_it,"model_type"),_it.forEach(t),MWo=r(jM,` property of the config object (either
passed as an argument or loaded from `),Efe=n(jM,"CODE",{});var uit=s(Efe);EWo=r(uit,"pretrained_model_name_or_path"),uit.forEach(t),yWo=r(jM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yfe=n(jM,"CODE",{});var bit=s(yfe);wWo=r(bit,"pretrained_model_name_or_path"),bit.forEach(t),AWo=r(jM,":"),jM.forEach(t),LWo=i(la),lc=n(la,"UL",{});var WW=s(lc);t6=n(WW,"LI",{});var XAe=s(t6);wfe=n(XAe,"STRONG",{});var vit=s(wfe);BWo=r(vit,"deit"),vit.forEach(t),xWo=r(XAe," \u2014 "),Aq=n(XAe,"A",{href:!0});var Tit=s(Aq);kWo=r(Tit,"DeiTForMaskedImageModeling"),Tit.forEach(t),RWo=r(XAe," (DeiT model)"),XAe.forEach(t),SWo=i(WW),a6=n(WW,"LI",{});var VAe=s(a6);Afe=n(VAe,"STRONG",{});var Fit=s(Afe);PWo=r(Fit,"swin"),Fit.forEach(t),$Wo=r(VAe," \u2014 "),Lq=n(VAe,"A",{href:!0});var Cit=s(Lq);IWo=r(Cit,"SwinForMaskedImageModeling"),Cit.forEach(t),jWo=r(VAe," (Swin model)"),VAe.forEach(t),DWo=i(WW),n6=n(WW,"LI",{});var zAe=s(n6);Lfe=n(zAe,"STRONG",{});var Mit=s(Lfe);NWo=r(Mit,"vit"),Mit.forEach(t),qWo=r(zAe," \u2014 "),Bq=n(zAe,"A",{href:!0});var Eit=s(Bq);OWo=r(Eit,"ViTForMaskedImageModeling"),Eit.forEach(t),GWo=r(zAe," (ViT model)"),zAe.forEach(t),WW.forEach(t),XWo=i(la),s6=n(la,"P",{});var WAe=s(s6);VWo=r(WAe,"The model is set in evaluation mode by default using "),Bfe=n(WAe,"CODE",{});var yit=s(Bfe);zWo=r(yit,"model.eval()"),yit.forEach(t),WWo=r(WAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xfe=n(WAe,"CODE",{});var wit=s(xfe);QWo=r(wit,"model.train()"),wit.forEach(t),WAe.forEach(t),HWo=i(la),kfe=n(la,"P",{});var Ait=s(kfe);UWo=r(Ait,"Examples:"),Ait.forEach(t),JWo=i(la),m(vy.$$.fragment,la),la.forEach(t),Pl.forEach(t),FRe=i(d),ic=n(d,"H2",{class:!0});var SPe=s(ic);l6=n(SPe,"A",{id:!0,class:!0,href:!0});var Lit=s(l6);Rfe=n(Lit,"SPAN",{});var Bit=s(Rfe);m(Ty.$$.fragment,Bit),Bit.forEach(t),Lit.forEach(t),YWo=i(SPe),Sfe=n(SPe,"SPAN",{});var xit=s(Sfe);KWo=r(xit,"AutoModelForObjectDetection"),xit.forEach(t),SPe.forEach(t),CRe=i(d),_r=n(d,"DIV",{class:!0});var Il=s(_r);m(Fy.$$.fragment,Il),ZWo=i(Il),dc=n(Il,"P",{});var QW=s(dc);eQo=r(QW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Pfe=n(QW,"CODE",{});var kit=s(Pfe);oQo=r(kit,"from_pretrained()"),kit.forEach(t),rQo=r(QW,"class method or the "),$fe=n(QW,"CODE",{});var Rit=s($fe);tQo=r(Rit,"from_config()"),Rit.forEach(t),aQo=r(QW,`class
method.`),QW.forEach(t),nQo=i(Il),Cy=n(Il,"P",{});var PPe=s(Cy);sQo=r(PPe,"This class cannot be instantiated directly using "),Ife=n(PPe,"CODE",{});var Sit=s(Ife);lQo=r(Sit,"__init__()"),Sit.forEach(t),iQo=r(PPe," (throws an error)."),PPe.forEach(t),dQo=i(Il),ft=n(Il,"DIV",{class:!0});var jl=s(ft);m(My.$$.fragment,jl),cQo=i(jl),jfe=n(jl,"P",{});var Pit=s(jfe);fQo=r(Pit,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Pit.forEach(t),mQo=i(jl),cc=n(jl,"P",{});var HW=s(cc);gQo=r(HW,`Note:
Loading a model from its configuration file does `),Dfe=n(HW,"STRONG",{});var $it=s(Dfe);hQo=r($it,"not"),$it.forEach(t),pQo=r(HW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nfe=n(HW,"CODE",{});var Iit=s(Nfe);_Qo=r(Iit,"from_pretrained()"),Iit.forEach(t),uQo=r(HW,"to load the model weights."),HW.forEach(t),bQo=i(jl),qfe=n(jl,"P",{});var jit=s(qfe);vQo=r(jit,"Examples:"),jit.forEach(t),TQo=i(jl),m(Ey.$$.fragment,jl),jl.forEach(t),FQo=i(Il),to=n(Il,"DIV",{class:!0});var ia=s(to);m(yy.$$.fragment,ia),CQo=i(ia),Ofe=n(ia,"P",{});var Dit=s(Ofe);MQo=r(Dit,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Dit.forEach(t),EQo=i(ia),_n=n(ia,"P",{});var DM=s(_n);yQo=r(DM,"The model class to instantiate is selected based on the "),Gfe=n(DM,"CODE",{});var Nit=s(Gfe);wQo=r(Nit,"model_type"),Nit.forEach(t),AQo=r(DM,` property of the config object (either
passed as an argument or loaded from `),Xfe=n(DM,"CODE",{});var qit=s(Xfe);LQo=r(qit,"pretrained_model_name_or_path"),qit.forEach(t),BQo=r(DM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vfe=n(DM,"CODE",{});var Oit=s(Vfe);xQo=r(Oit,"pretrained_model_name_or_path"),Oit.forEach(t),kQo=r(DM,":"),DM.forEach(t),RQo=i(ia),zfe=n(ia,"UL",{});var Git=s(zfe);i6=n(Git,"LI",{});var QAe=s(i6);Wfe=n(QAe,"STRONG",{});var Xit=s(Wfe);SQo=r(Xit,"detr"),Xit.forEach(t),PQo=r(QAe," \u2014 "),xq=n(QAe,"A",{href:!0});var Vit=s(xq);$Qo=r(Vit,"DetrForObjectDetection"),Vit.forEach(t),IQo=r(QAe," (DETR model)"),QAe.forEach(t),Git.forEach(t),jQo=i(ia),d6=n(ia,"P",{});var HAe=s(d6);DQo=r(HAe,"The model is set in evaluation mode by default using "),Qfe=n(HAe,"CODE",{});var zit=s(Qfe);NQo=r(zit,"model.eval()"),zit.forEach(t),qQo=r(HAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hfe=n(HAe,"CODE",{});var Wit=s(Hfe);OQo=r(Wit,"model.train()"),Wit.forEach(t),HAe.forEach(t),GQo=i(ia),Ufe=n(ia,"P",{});var Qit=s(Ufe);XQo=r(Qit,"Examples:"),Qit.forEach(t),VQo=i(ia),m(wy.$$.fragment,ia),ia.forEach(t),Il.forEach(t),MRe=i(d),fc=n(d,"H2",{class:!0});var $Pe=s(fc);c6=n($Pe,"A",{id:!0,class:!0,href:!0});var Hit=s(c6);Jfe=n(Hit,"SPAN",{});var Uit=s(Jfe);m(Ay.$$.fragment,Uit),Uit.forEach(t),Hit.forEach(t),zQo=i($Pe),Yfe=n($Pe,"SPAN",{});var Jit=s(Yfe);WQo=r(Jit,"AutoModelForImageSegmentation"),Jit.forEach(t),$Pe.forEach(t),ERe=i(d),ur=n(d,"DIV",{class:!0});var Dl=s(ur);m(Ly.$$.fragment,Dl),QQo=i(Dl),mc=n(Dl,"P",{});var UW=s(mc);HQo=r(UW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Kfe=n(UW,"CODE",{});var Yit=s(Kfe);UQo=r(Yit,"from_pretrained()"),Yit.forEach(t),JQo=r(UW,"class method or the "),Zfe=n(UW,"CODE",{});var Kit=s(Zfe);YQo=r(Kit,"from_config()"),Kit.forEach(t),KQo=r(UW,`class
method.`),UW.forEach(t),ZQo=i(Dl),By=n(Dl,"P",{});var IPe=s(By);eHo=r(IPe,"This class cannot be instantiated directly using "),eme=n(IPe,"CODE",{});var Zit=s(eme);oHo=r(Zit,"__init__()"),Zit.forEach(t),rHo=r(IPe," (throws an error)."),IPe.forEach(t),tHo=i(Dl),mt=n(Dl,"DIV",{class:!0});var Nl=s(mt);m(xy.$$.fragment,Nl),aHo=i(Nl),ome=n(Nl,"P",{});var edt=s(ome);nHo=r(edt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),edt.forEach(t),sHo=i(Nl),gc=n(Nl,"P",{});var JW=s(gc);lHo=r(JW,`Note:
Loading a model from its configuration file does `),rme=n(JW,"STRONG",{});var odt=s(rme);iHo=r(odt,"not"),odt.forEach(t),dHo=r(JW,` load the model weights. It only affects the
model\u2019s configuration. Use `),tme=n(JW,"CODE",{});var rdt=s(tme);cHo=r(rdt,"from_pretrained()"),rdt.forEach(t),fHo=r(JW,"to load the model weights."),JW.forEach(t),mHo=i(Nl),ame=n(Nl,"P",{});var tdt=s(ame);gHo=r(tdt,"Examples:"),tdt.forEach(t),hHo=i(Nl),m(ky.$$.fragment,Nl),Nl.forEach(t),pHo=i(Dl),ao=n(Dl,"DIV",{class:!0});var da=s(ao);m(Ry.$$.fragment,da),_Ho=i(da),nme=n(da,"P",{});var adt=s(nme);uHo=r(adt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),adt.forEach(t),bHo=i(da),un=n(da,"P",{});var NM=s(un);vHo=r(NM,"The model class to instantiate is selected based on the "),sme=n(NM,"CODE",{});var ndt=s(sme);THo=r(ndt,"model_type"),ndt.forEach(t),FHo=r(NM,` property of the config object (either
passed as an argument or loaded from `),lme=n(NM,"CODE",{});var sdt=s(lme);CHo=r(sdt,"pretrained_model_name_or_path"),sdt.forEach(t),MHo=r(NM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ime=n(NM,"CODE",{});var ldt=s(ime);EHo=r(ldt,"pretrained_model_name_or_path"),ldt.forEach(t),yHo=r(NM,":"),NM.forEach(t),wHo=i(da),dme=n(da,"UL",{});var idt=s(dme);f6=n(idt,"LI",{});var UAe=s(f6);cme=n(UAe,"STRONG",{});var ddt=s(cme);AHo=r(ddt,"detr"),ddt.forEach(t),LHo=r(UAe," \u2014 "),kq=n(UAe,"A",{href:!0});var cdt=s(kq);BHo=r(cdt,"DetrForSegmentation"),cdt.forEach(t),xHo=r(UAe," (DETR model)"),UAe.forEach(t),idt.forEach(t),kHo=i(da),m6=n(da,"P",{});var JAe=s(m6);RHo=r(JAe,"The model is set in evaluation mode by default using "),fme=n(JAe,"CODE",{});var fdt=s(fme);SHo=r(fdt,"model.eval()"),fdt.forEach(t),PHo=r(JAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mme=n(JAe,"CODE",{});var mdt=s(mme);$Ho=r(mdt,"model.train()"),mdt.forEach(t),JAe.forEach(t),IHo=i(da),gme=n(da,"P",{});var gdt=s(gme);jHo=r(gdt,"Examples:"),gdt.forEach(t),DHo=i(da),m(Sy.$$.fragment,da),da.forEach(t),Dl.forEach(t),yRe=i(d),hc=n(d,"H2",{class:!0});var jPe=s(hc);g6=n(jPe,"A",{id:!0,class:!0,href:!0});var hdt=s(g6);hme=n(hdt,"SPAN",{});var pdt=s(hme);m(Py.$$.fragment,pdt),pdt.forEach(t),hdt.forEach(t),NHo=i(jPe),pme=n(jPe,"SPAN",{});var _dt=s(pme);qHo=r(_dt,"AutoModelForSemanticSegmentation"),_dt.forEach(t),jPe.forEach(t),wRe=i(d),br=n(d,"DIV",{class:!0});var ql=s(br);m($y.$$.fragment,ql),OHo=i(ql),pc=n(ql,"P",{});var YW=s(pc);GHo=r(YW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),_me=n(YW,"CODE",{});var udt=s(_me);XHo=r(udt,"from_pretrained()"),udt.forEach(t),VHo=r(YW,"class method or the "),ume=n(YW,"CODE",{});var bdt=s(ume);zHo=r(bdt,"from_config()"),bdt.forEach(t),WHo=r(YW,`class
method.`),YW.forEach(t),QHo=i(ql),Iy=n(ql,"P",{});var DPe=s(Iy);HHo=r(DPe,"This class cannot be instantiated directly using "),bme=n(DPe,"CODE",{});var vdt=s(bme);UHo=r(vdt,"__init__()"),vdt.forEach(t),JHo=r(DPe," (throws an error)."),DPe.forEach(t),YHo=i(ql),gt=n(ql,"DIV",{class:!0});var Ol=s(gt);m(jy.$$.fragment,Ol),KHo=i(Ol),vme=n(Ol,"P",{});var Tdt=s(vme);ZHo=r(Tdt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Tdt.forEach(t),eUo=i(Ol),_c=n(Ol,"P",{});var KW=s(_c);oUo=r(KW,`Note:
Loading a model from its configuration file does `),Tme=n(KW,"STRONG",{});var Fdt=s(Tme);rUo=r(Fdt,"not"),Fdt.forEach(t),tUo=r(KW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fme=n(KW,"CODE",{});var Cdt=s(Fme);aUo=r(Cdt,"from_pretrained()"),Cdt.forEach(t),nUo=r(KW,"to load the model weights."),KW.forEach(t),sUo=i(Ol),Cme=n(Ol,"P",{});var Mdt=s(Cme);lUo=r(Mdt,"Examples:"),Mdt.forEach(t),iUo=i(Ol),m(Dy.$$.fragment,Ol),Ol.forEach(t),dUo=i(ql),no=n(ql,"DIV",{class:!0});var ca=s(no);m(Ny.$$.fragment,ca),cUo=i(ca),Mme=n(ca,"P",{});var Edt=s(Mme);fUo=r(Edt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Edt.forEach(t),mUo=i(ca),bn=n(ca,"P",{});var qM=s(bn);gUo=r(qM,"The model class to instantiate is selected based on the "),Eme=n(qM,"CODE",{});var ydt=s(Eme);hUo=r(ydt,"model_type"),ydt.forEach(t),pUo=r(qM,` property of the config object (either
passed as an argument or loaded from `),yme=n(qM,"CODE",{});var wdt=s(yme);_Uo=r(wdt,"pretrained_model_name_or_path"),wdt.forEach(t),uUo=r(qM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wme=n(qM,"CODE",{});var Adt=s(wme);bUo=r(Adt,"pretrained_model_name_or_path"),Adt.forEach(t),vUo=r(qM,":"),qM.forEach(t),TUo=i(ca),qy=n(ca,"UL",{});var NPe=s(qy);h6=n(NPe,"LI",{});var YAe=s(h6);Ame=n(YAe,"STRONG",{});var Ldt=s(Ame);FUo=r(Ldt,"beit"),Ldt.forEach(t),CUo=r(YAe," \u2014 "),Rq=n(YAe,"A",{href:!0});var Bdt=s(Rq);MUo=r(Bdt,"BeitForSemanticSegmentation"),Bdt.forEach(t),EUo=r(YAe," (BEiT model)"),YAe.forEach(t),yUo=i(NPe),p6=n(NPe,"LI",{});var KAe=s(p6);Lme=n(KAe,"STRONG",{});var xdt=s(Lme);wUo=r(xdt,"segformer"),xdt.forEach(t),AUo=r(KAe," \u2014 "),Sq=n(KAe,"A",{href:!0});var kdt=s(Sq);LUo=r(kdt,"SegformerForSemanticSegmentation"),kdt.forEach(t),BUo=r(KAe," (SegFormer model)"),KAe.forEach(t),NPe.forEach(t),xUo=i(ca),_6=n(ca,"P",{});var ZAe=s(_6);kUo=r(ZAe,"The model is set in evaluation mode by default using "),Bme=n(ZAe,"CODE",{});var Rdt=s(Bme);RUo=r(Rdt,"model.eval()"),Rdt.forEach(t),SUo=r(ZAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xme=n(ZAe,"CODE",{});var Sdt=s(xme);PUo=r(Sdt,"model.train()"),Sdt.forEach(t),ZAe.forEach(t),$Uo=i(ca),kme=n(ca,"P",{});var Pdt=s(kme);IUo=r(Pdt,"Examples:"),Pdt.forEach(t),jUo=i(ca),m(Oy.$$.fragment,ca),ca.forEach(t),ql.forEach(t),ARe=i(d),uc=n(d,"H2",{class:!0});var qPe=s(uc);u6=n(qPe,"A",{id:!0,class:!0,href:!0});var $dt=s(u6);Rme=n($dt,"SPAN",{});var Idt=s(Rme);m(Gy.$$.fragment,Idt),Idt.forEach(t),$dt.forEach(t),DUo=i(qPe),Sme=n(qPe,"SPAN",{});var jdt=s(Sme);NUo=r(jdt,"AutoModelForInstanceSegmentation"),jdt.forEach(t),qPe.forEach(t),LRe=i(d),vr=n(d,"DIV",{class:!0});var Gl=s(vr);m(Xy.$$.fragment,Gl),qUo=i(Gl),bc=n(Gl,"P",{});var ZW=s(bc);OUo=r(ZW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),Pme=n(ZW,"CODE",{});var Ddt=s(Pme);GUo=r(Ddt,"from_pretrained()"),Ddt.forEach(t),XUo=r(ZW,"class method or the "),$me=n(ZW,"CODE",{});var Ndt=s($me);VUo=r(Ndt,"from_config()"),Ndt.forEach(t),zUo=r(ZW,`class
method.`),ZW.forEach(t),WUo=i(Gl),Vy=n(Gl,"P",{});var OPe=s(Vy);QUo=r(OPe,"This class cannot be instantiated directly using "),Ime=n(OPe,"CODE",{});var qdt=s(Ime);HUo=r(qdt,"__init__()"),qdt.forEach(t),UUo=r(OPe," (throws an error)."),OPe.forEach(t),JUo=i(Gl),ht=n(Gl,"DIV",{class:!0});var Xl=s(ht);m(zy.$$.fragment,Xl),YUo=i(Xl),jme=n(Xl,"P",{});var Odt=s(jme);KUo=r(Odt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Odt.forEach(t),ZUo=i(Xl),vc=n(Xl,"P",{});var eQ=s(vc);eJo=r(eQ,`Note:
Loading a model from its configuration file does `),Dme=n(eQ,"STRONG",{});var Gdt=s(Dme);oJo=r(Gdt,"not"),Gdt.forEach(t),rJo=r(eQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nme=n(eQ,"CODE",{});var Xdt=s(Nme);tJo=r(Xdt,"from_pretrained()"),Xdt.forEach(t),aJo=r(eQ,"to load the model weights."),eQ.forEach(t),nJo=i(Xl),qme=n(Xl,"P",{});var Vdt=s(qme);sJo=r(Vdt,"Examples:"),Vdt.forEach(t),lJo=i(Xl),m(Wy.$$.fragment,Xl),Xl.forEach(t),iJo=i(Gl),so=n(Gl,"DIV",{class:!0});var fa=s(so);m(Qy.$$.fragment,fa),dJo=i(fa),Ome=n(fa,"P",{});var zdt=s(Ome);cJo=r(zdt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),zdt.forEach(t),fJo=i(fa),vn=n(fa,"P",{});var OM=s(vn);mJo=r(OM,"The model class to instantiate is selected based on the "),Gme=n(OM,"CODE",{});var Wdt=s(Gme);gJo=r(Wdt,"model_type"),Wdt.forEach(t),hJo=r(OM,` property of the config object (either
passed as an argument or loaded from `),Xme=n(OM,"CODE",{});var Qdt=s(Xme);pJo=r(Qdt,"pretrained_model_name_or_path"),Qdt.forEach(t),_Jo=r(OM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vme=n(OM,"CODE",{});var Hdt=s(Vme);uJo=r(Hdt,"pretrained_model_name_or_path"),Hdt.forEach(t),bJo=r(OM,":"),OM.forEach(t),vJo=i(fa),zme=n(fa,"UL",{});var Udt=s(zme);b6=n(Udt,"LI",{});var eLe=s(b6);Wme=n(eLe,"STRONG",{});var Jdt=s(Wme);TJo=r(Jdt,"maskformer"),Jdt.forEach(t),FJo=r(eLe," \u2014 "),Pq=n(eLe,"A",{href:!0});var Ydt=s(Pq);CJo=r(Ydt,"MaskFormerForInstanceSegmentation"),Ydt.forEach(t),MJo=r(eLe," (MaskFormer model)"),eLe.forEach(t),Udt.forEach(t),EJo=i(fa),v6=n(fa,"P",{});var oLe=s(v6);yJo=r(oLe,"The model is set in evaluation mode by default using "),Qme=n(oLe,"CODE",{});var Kdt=s(Qme);wJo=r(Kdt,"model.eval()"),Kdt.forEach(t),AJo=r(oLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hme=n(oLe,"CODE",{});var Zdt=s(Hme);LJo=r(Zdt,"model.train()"),Zdt.forEach(t),oLe.forEach(t),BJo=i(fa),Ume=n(fa,"P",{});var ect=s(Ume);xJo=r(ect,"Examples:"),ect.forEach(t),kJo=i(fa),m(Hy.$$.fragment,fa),fa.forEach(t),Gl.forEach(t),BRe=i(d),Tc=n(d,"H2",{class:!0});var GPe=s(Tc);T6=n(GPe,"A",{id:!0,class:!0,href:!0});var oct=s(T6);Jme=n(oct,"SPAN",{});var rct=s(Jme);m(Uy.$$.fragment,rct),rct.forEach(t),oct.forEach(t),RJo=i(GPe),Yme=n(GPe,"SPAN",{});var tct=s(Yme);SJo=r(tct,"TFAutoModel"),tct.forEach(t),GPe.forEach(t),xRe=i(d),Tr=n(d,"DIV",{class:!0});var Vl=s(Tr);m(Jy.$$.fragment,Vl),PJo=i(Vl),Fc=n(Vl,"P",{});var oQ=s(Fc);$Jo=r(oQ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Kme=n(oQ,"CODE",{});var act=s(Kme);IJo=r(act,"from_pretrained()"),act.forEach(t),jJo=r(oQ,"class method or the "),Zme=n(oQ,"CODE",{});var nct=s(Zme);DJo=r(nct,"from_config()"),nct.forEach(t),NJo=r(oQ,`class
method.`),oQ.forEach(t),qJo=i(Vl),Yy=n(Vl,"P",{});var XPe=s(Yy);OJo=r(XPe,"This class cannot be instantiated directly using "),ege=n(XPe,"CODE",{});var sct=s(ege);GJo=r(sct,"__init__()"),sct.forEach(t),XJo=r(XPe," (throws an error)."),XPe.forEach(t),VJo=i(Vl),pt=n(Vl,"DIV",{class:!0});var zl=s(pt);m(Ky.$$.fragment,zl),zJo=i(zl),oge=n(zl,"P",{});var lct=s(oge);WJo=r(lct,"Instantiates one of the base model classes of the library from a configuration."),lct.forEach(t),QJo=i(zl),Cc=n(zl,"P",{});var rQ=s(Cc);HJo=r(rQ,`Note:
Loading a model from its configuration file does `),rge=n(rQ,"STRONG",{});var ict=s(rge);UJo=r(ict,"not"),ict.forEach(t),JJo=r(rQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),tge=n(rQ,"CODE",{});var dct=s(tge);YJo=r(dct,"from_pretrained()"),dct.forEach(t),KJo=r(rQ,"to load the model weights."),rQ.forEach(t),ZJo=i(zl),age=n(zl,"P",{});var cct=s(age);eYo=r(cct,"Examples:"),cct.forEach(t),oYo=i(zl),m(Zy.$$.fragment,zl),zl.forEach(t),rYo=i(Vl),ho=n(Vl,"DIV",{class:!0});var ba=s(ho);m(ew.$$.fragment,ba),tYo=i(ba),nge=n(ba,"P",{});var fct=s(nge);aYo=r(fct,"Instantiate one of the base model classes of the library from a pretrained model."),fct.forEach(t),nYo=i(ba),Tn=n(ba,"P",{});var GM=s(Tn);sYo=r(GM,"The model class to instantiate is selected based on the "),sge=n(GM,"CODE",{});var mct=s(sge);lYo=r(mct,"model_type"),mct.forEach(t),iYo=r(GM,` property of the config object (either
passed as an argument or loaded from `),lge=n(GM,"CODE",{});var gct=s(lge);dYo=r(gct,"pretrained_model_name_or_path"),gct.forEach(t),cYo=r(GM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ige=n(GM,"CODE",{});var hct=s(ige);fYo=r(hct,"pretrained_model_name_or_path"),hct.forEach(t),mYo=r(GM,":"),GM.forEach(t),gYo=i(ba),B=n(ba,"UL",{});var x=s(B);F6=n(x,"LI",{});var rLe=s(F6);dge=n(rLe,"STRONG",{});var pct=s(dge);hYo=r(pct,"albert"),pct.forEach(t),pYo=r(rLe," \u2014 "),$q=n(rLe,"A",{href:!0});var _ct=s($q);_Yo=r(_ct,"TFAlbertModel"),_ct.forEach(t),uYo=r(rLe," (ALBERT model)"),rLe.forEach(t),bYo=i(x),C6=n(x,"LI",{});var tLe=s(C6);cge=n(tLe,"STRONG",{});var uct=s(cge);vYo=r(uct,"bart"),uct.forEach(t),TYo=r(tLe," \u2014 "),Iq=n(tLe,"A",{href:!0});var bct=s(Iq);FYo=r(bct,"TFBartModel"),bct.forEach(t),CYo=r(tLe," (BART model)"),tLe.forEach(t),MYo=i(x),M6=n(x,"LI",{});var aLe=s(M6);fge=n(aLe,"STRONG",{});var vct=s(fge);EYo=r(vct,"bert"),vct.forEach(t),yYo=r(aLe," \u2014 "),jq=n(aLe,"A",{href:!0});var Tct=s(jq);wYo=r(Tct,"TFBertModel"),Tct.forEach(t),AYo=r(aLe," (BERT model)"),aLe.forEach(t),LYo=i(x),E6=n(x,"LI",{});var nLe=s(E6);mge=n(nLe,"STRONG",{});var Fct=s(mge);BYo=r(Fct,"blenderbot"),Fct.forEach(t),xYo=r(nLe," \u2014 "),Dq=n(nLe,"A",{href:!0});var Cct=s(Dq);kYo=r(Cct,"TFBlenderbotModel"),Cct.forEach(t),RYo=r(nLe," (Blenderbot model)"),nLe.forEach(t),SYo=i(x),y6=n(x,"LI",{});var sLe=s(y6);gge=n(sLe,"STRONG",{});var Mct=s(gge);PYo=r(Mct,"blenderbot-small"),Mct.forEach(t),$Yo=r(sLe," \u2014 "),Nq=n(sLe,"A",{href:!0});var Ect=s(Nq);IYo=r(Ect,"TFBlenderbotSmallModel"),Ect.forEach(t),jYo=r(sLe," (BlenderbotSmall model)"),sLe.forEach(t),DYo=i(x),w6=n(x,"LI",{});var lLe=s(w6);hge=n(lLe,"STRONG",{});var yct=s(hge);NYo=r(yct,"camembert"),yct.forEach(t),qYo=r(lLe," \u2014 "),qq=n(lLe,"A",{href:!0});var wct=s(qq);OYo=r(wct,"TFCamembertModel"),wct.forEach(t),GYo=r(lLe," (CamemBERT model)"),lLe.forEach(t),XYo=i(x),A6=n(x,"LI",{});var iLe=s(A6);pge=n(iLe,"STRONG",{});var Act=s(pge);VYo=r(Act,"clip"),Act.forEach(t),zYo=r(iLe," \u2014 "),Oq=n(iLe,"A",{href:!0});var Lct=s(Oq);WYo=r(Lct,"TFCLIPModel"),Lct.forEach(t),QYo=r(iLe," (CLIP model)"),iLe.forEach(t),HYo=i(x),L6=n(x,"LI",{});var dLe=s(L6);_ge=n(dLe,"STRONG",{});var Bct=s(_ge);UYo=r(Bct,"convbert"),Bct.forEach(t),JYo=r(dLe," \u2014 "),Gq=n(dLe,"A",{href:!0});var xct=s(Gq);YYo=r(xct,"TFConvBertModel"),xct.forEach(t),KYo=r(dLe," (ConvBERT model)"),dLe.forEach(t),ZYo=i(x),B6=n(x,"LI",{});var cLe=s(B6);uge=n(cLe,"STRONG",{});var kct=s(uge);eKo=r(kct,"convnext"),kct.forEach(t),oKo=r(cLe," \u2014 "),Xq=n(cLe,"A",{href:!0});var Rct=s(Xq);rKo=r(Rct,"TFConvNextModel"),Rct.forEach(t),tKo=r(cLe," (ConvNext model)"),cLe.forEach(t),aKo=i(x),x6=n(x,"LI",{});var fLe=s(x6);bge=n(fLe,"STRONG",{});var Sct=s(bge);nKo=r(Sct,"ctrl"),Sct.forEach(t),sKo=r(fLe," \u2014 "),Vq=n(fLe,"A",{href:!0});var Pct=s(Vq);lKo=r(Pct,"TFCTRLModel"),Pct.forEach(t),iKo=r(fLe," (CTRL model)"),fLe.forEach(t),dKo=i(x),k6=n(x,"LI",{});var mLe=s(k6);vge=n(mLe,"STRONG",{});var $ct=s(vge);cKo=r($ct,"deberta"),$ct.forEach(t),fKo=r(mLe," \u2014 "),zq=n(mLe,"A",{href:!0});var Ict=s(zq);mKo=r(Ict,"TFDebertaModel"),Ict.forEach(t),gKo=r(mLe," (DeBERTa model)"),mLe.forEach(t),hKo=i(x),R6=n(x,"LI",{});var gLe=s(R6);Tge=n(gLe,"STRONG",{});var jct=s(Tge);pKo=r(jct,"deberta-v2"),jct.forEach(t),_Ko=r(gLe," \u2014 "),Wq=n(gLe,"A",{href:!0});var Dct=s(Wq);uKo=r(Dct,"TFDebertaV2Model"),Dct.forEach(t),bKo=r(gLe," (DeBERTa-v2 model)"),gLe.forEach(t),vKo=i(x),S6=n(x,"LI",{});var hLe=s(S6);Fge=n(hLe,"STRONG",{});var Nct=s(Fge);TKo=r(Nct,"distilbert"),Nct.forEach(t),FKo=r(hLe," \u2014 "),Qq=n(hLe,"A",{href:!0});var qct=s(Qq);CKo=r(qct,"TFDistilBertModel"),qct.forEach(t),MKo=r(hLe," (DistilBERT model)"),hLe.forEach(t),EKo=i(x),P6=n(x,"LI",{});var pLe=s(P6);Cge=n(pLe,"STRONG",{});var Oct=s(Cge);yKo=r(Oct,"dpr"),Oct.forEach(t),wKo=r(pLe," \u2014 "),Hq=n(pLe,"A",{href:!0});var Gct=s(Hq);AKo=r(Gct,"TFDPRQuestionEncoder"),Gct.forEach(t),LKo=r(pLe," (DPR model)"),pLe.forEach(t),BKo=i(x),$6=n(x,"LI",{});var _Le=s($6);Mge=n(_Le,"STRONG",{});var Xct=s(Mge);xKo=r(Xct,"electra"),Xct.forEach(t),kKo=r(_Le," \u2014 "),Uq=n(_Le,"A",{href:!0});var Vct=s(Uq);RKo=r(Vct,"TFElectraModel"),Vct.forEach(t),SKo=r(_Le," (ELECTRA model)"),_Le.forEach(t),PKo=i(x),I6=n(x,"LI",{});var uLe=s(I6);Ege=n(uLe,"STRONG",{});var zct=s(Ege);$Ko=r(zct,"flaubert"),zct.forEach(t),IKo=r(uLe," \u2014 "),Jq=n(uLe,"A",{href:!0});var Wct=s(Jq);jKo=r(Wct,"TFFlaubertModel"),Wct.forEach(t),DKo=r(uLe," (FlauBERT model)"),uLe.forEach(t),NKo=i(x),Ws=n(x,"LI",{});var g9=s(Ws);yge=n(g9,"STRONG",{});var Qct=s(yge);qKo=r(Qct,"funnel"),Qct.forEach(t),OKo=r(g9," \u2014 "),Yq=n(g9,"A",{href:!0});var Hct=s(Yq);GKo=r(Hct,"TFFunnelModel"),Hct.forEach(t),XKo=r(g9," or "),Kq=n(g9,"A",{href:!0});var Uct=s(Kq);VKo=r(Uct,"TFFunnelBaseModel"),Uct.forEach(t),zKo=r(g9," (Funnel Transformer model)"),g9.forEach(t),WKo=i(x),j6=n(x,"LI",{});var bLe=s(j6);wge=n(bLe,"STRONG",{});var Jct=s(wge);QKo=r(Jct,"gpt2"),Jct.forEach(t),HKo=r(bLe," \u2014 "),Zq=n(bLe,"A",{href:!0});var Yct=s(Zq);UKo=r(Yct,"TFGPT2Model"),Yct.forEach(t),JKo=r(bLe," (OpenAI GPT-2 model)"),bLe.forEach(t),YKo=i(x),D6=n(x,"LI",{});var vLe=s(D6);Age=n(vLe,"STRONG",{});var Kct=s(Age);KKo=r(Kct,"hubert"),Kct.forEach(t),ZKo=r(vLe," \u2014 "),eO=n(vLe,"A",{href:!0});var Zct=s(eO);eZo=r(Zct,"TFHubertModel"),Zct.forEach(t),oZo=r(vLe," (Hubert model)"),vLe.forEach(t),rZo=i(x),N6=n(x,"LI",{});var TLe=s(N6);Lge=n(TLe,"STRONG",{});var eft=s(Lge);tZo=r(eft,"layoutlm"),eft.forEach(t),aZo=r(TLe," \u2014 "),oO=n(TLe,"A",{href:!0});var oft=s(oO);nZo=r(oft,"TFLayoutLMModel"),oft.forEach(t),sZo=r(TLe," (LayoutLM model)"),TLe.forEach(t),lZo=i(x),q6=n(x,"LI",{});var FLe=s(q6);Bge=n(FLe,"STRONG",{});var rft=s(Bge);iZo=r(rft,"led"),rft.forEach(t),dZo=r(FLe," \u2014 "),rO=n(FLe,"A",{href:!0});var tft=s(rO);cZo=r(tft,"TFLEDModel"),tft.forEach(t),fZo=r(FLe," (LED model)"),FLe.forEach(t),mZo=i(x),O6=n(x,"LI",{});var CLe=s(O6);xge=n(CLe,"STRONG",{});var aft=s(xge);gZo=r(aft,"longformer"),aft.forEach(t),hZo=r(CLe," \u2014 "),tO=n(CLe,"A",{href:!0});var nft=s(tO);pZo=r(nft,"TFLongformerModel"),nft.forEach(t),_Zo=r(CLe," (Longformer model)"),CLe.forEach(t),uZo=i(x),G6=n(x,"LI",{});var MLe=s(G6);kge=n(MLe,"STRONG",{});var sft=s(kge);bZo=r(sft,"lxmert"),sft.forEach(t),vZo=r(MLe," \u2014 "),aO=n(MLe,"A",{href:!0});var lft=s(aO);TZo=r(lft,"TFLxmertModel"),lft.forEach(t),FZo=r(MLe," (LXMERT model)"),MLe.forEach(t),CZo=i(x),X6=n(x,"LI",{});var ELe=s(X6);Rge=n(ELe,"STRONG",{});var ift=s(Rge);MZo=r(ift,"marian"),ift.forEach(t),EZo=r(ELe," \u2014 "),nO=n(ELe,"A",{href:!0});var dft=s(nO);yZo=r(dft,"TFMarianModel"),dft.forEach(t),wZo=r(ELe," (Marian model)"),ELe.forEach(t),AZo=i(x),V6=n(x,"LI",{});var yLe=s(V6);Sge=n(yLe,"STRONG",{});var cft=s(Sge);LZo=r(cft,"mbart"),cft.forEach(t),BZo=r(yLe," \u2014 "),sO=n(yLe,"A",{href:!0});var fft=s(sO);xZo=r(fft,"TFMBartModel"),fft.forEach(t),kZo=r(yLe," (mBART model)"),yLe.forEach(t),RZo=i(x),z6=n(x,"LI",{});var wLe=s(z6);Pge=n(wLe,"STRONG",{});var mft=s(Pge);SZo=r(mft,"mobilebert"),mft.forEach(t),PZo=r(wLe," \u2014 "),lO=n(wLe,"A",{href:!0});var gft=s(lO);$Zo=r(gft,"TFMobileBertModel"),gft.forEach(t),IZo=r(wLe," (MobileBERT model)"),wLe.forEach(t),jZo=i(x),W6=n(x,"LI",{});var ALe=s(W6);$ge=n(ALe,"STRONG",{});var hft=s($ge);DZo=r(hft,"mpnet"),hft.forEach(t),NZo=r(ALe," \u2014 "),iO=n(ALe,"A",{href:!0});var pft=s(iO);qZo=r(pft,"TFMPNetModel"),pft.forEach(t),OZo=r(ALe," (MPNet model)"),ALe.forEach(t),GZo=i(x),Q6=n(x,"LI",{});var LLe=s(Q6);Ige=n(LLe,"STRONG",{});var _ft=s(Ige);XZo=r(_ft,"mt5"),_ft.forEach(t),VZo=r(LLe," \u2014 "),dO=n(LLe,"A",{href:!0});var uft=s(dO);zZo=r(uft,"TFMT5Model"),uft.forEach(t),WZo=r(LLe," (mT5 model)"),LLe.forEach(t),QZo=i(x),H6=n(x,"LI",{});var BLe=s(H6);jge=n(BLe,"STRONG",{});var bft=s(jge);HZo=r(bft,"openai-gpt"),bft.forEach(t),UZo=r(BLe," \u2014 "),cO=n(BLe,"A",{href:!0});var vft=s(cO);JZo=r(vft,"TFOpenAIGPTModel"),vft.forEach(t),YZo=r(BLe," (OpenAI GPT model)"),BLe.forEach(t),KZo=i(x),U6=n(x,"LI",{});var xLe=s(U6);Dge=n(xLe,"STRONG",{});var Tft=s(Dge);ZZo=r(Tft,"pegasus"),Tft.forEach(t),eer=r(xLe," \u2014 "),fO=n(xLe,"A",{href:!0});var Fft=s(fO);oer=r(Fft,"TFPegasusModel"),Fft.forEach(t),rer=r(xLe," (Pegasus model)"),xLe.forEach(t),ter=i(x),J6=n(x,"LI",{});var kLe=s(J6);Nge=n(kLe,"STRONG",{});var Cft=s(Nge);aer=r(Cft,"rembert"),Cft.forEach(t),ner=r(kLe," \u2014 "),mO=n(kLe,"A",{href:!0});var Mft=s(mO);ser=r(Mft,"TFRemBertModel"),Mft.forEach(t),ler=r(kLe," (RemBERT model)"),kLe.forEach(t),ier=i(x),Y6=n(x,"LI",{});var RLe=s(Y6);qge=n(RLe,"STRONG",{});var Eft=s(qge);der=r(Eft,"roberta"),Eft.forEach(t),cer=r(RLe," \u2014 "),gO=n(RLe,"A",{href:!0});var yft=s(gO);fer=r(yft,"TFRobertaModel"),yft.forEach(t),mer=r(RLe," (RoBERTa model)"),RLe.forEach(t),ger=i(x),K6=n(x,"LI",{});var SLe=s(K6);Oge=n(SLe,"STRONG",{});var wft=s(Oge);her=r(wft,"roformer"),wft.forEach(t),per=r(SLe," \u2014 "),hO=n(SLe,"A",{href:!0});var Aft=s(hO);_er=r(Aft,"TFRoFormerModel"),Aft.forEach(t),uer=r(SLe," (RoFormer model)"),SLe.forEach(t),ber=i(x),Z6=n(x,"LI",{});var PLe=s(Z6);Gge=n(PLe,"STRONG",{});var Lft=s(Gge);ver=r(Lft,"speech_to_text"),Lft.forEach(t),Ter=r(PLe," \u2014 "),pO=n(PLe,"A",{href:!0});var Bft=s(pO);Fer=r(Bft,"TFSpeech2TextModel"),Bft.forEach(t),Cer=r(PLe," (Speech2Text model)"),PLe.forEach(t),Mer=i(x),e0=n(x,"LI",{});var $Le=s(e0);Xge=n($Le,"STRONG",{});var xft=s(Xge);Eer=r(xft,"t5"),xft.forEach(t),yer=r($Le," \u2014 "),_O=n($Le,"A",{href:!0});var kft=s(_O);wer=r(kft,"TFT5Model"),kft.forEach(t),Aer=r($Le," (T5 model)"),$Le.forEach(t),Ler=i(x),o0=n(x,"LI",{});var ILe=s(o0);Vge=n(ILe,"STRONG",{});var Rft=s(Vge);Ber=r(Rft,"tapas"),Rft.forEach(t),xer=r(ILe," \u2014 "),uO=n(ILe,"A",{href:!0});var Sft=s(uO);ker=r(Sft,"TFTapasModel"),Sft.forEach(t),Rer=r(ILe," (TAPAS model)"),ILe.forEach(t),Ser=i(x),r0=n(x,"LI",{});var jLe=s(r0);zge=n(jLe,"STRONG",{});var Pft=s(zge);Per=r(Pft,"transfo-xl"),Pft.forEach(t),$er=r(jLe," \u2014 "),bO=n(jLe,"A",{href:!0});var $ft=s(bO);Ier=r($ft,"TFTransfoXLModel"),$ft.forEach(t),jer=r(jLe," (Transformer-XL model)"),jLe.forEach(t),Der=i(x),t0=n(x,"LI",{});var DLe=s(t0);Wge=n(DLe,"STRONG",{});var Ift=s(Wge);Ner=r(Ift,"vit"),Ift.forEach(t),qer=r(DLe," \u2014 "),vO=n(DLe,"A",{href:!0});var jft=s(vO);Oer=r(jft,"TFViTModel"),jft.forEach(t),Ger=r(DLe," (ViT model)"),DLe.forEach(t),Xer=i(x),a0=n(x,"LI",{});var NLe=s(a0);Qge=n(NLe,"STRONG",{});var Dft=s(Qge);Ver=r(Dft,"wav2vec2"),Dft.forEach(t),zer=r(NLe," \u2014 "),TO=n(NLe,"A",{href:!0});var Nft=s(TO);Wer=r(Nft,"TFWav2Vec2Model"),Nft.forEach(t),Qer=r(NLe," (Wav2Vec2 model)"),NLe.forEach(t),Her=i(x),n0=n(x,"LI",{});var qLe=s(n0);Hge=n(qLe,"STRONG",{});var qft=s(Hge);Uer=r(qft,"xlm"),qft.forEach(t),Jer=r(qLe," \u2014 "),FO=n(qLe,"A",{href:!0});var Oft=s(FO);Yer=r(Oft,"TFXLMModel"),Oft.forEach(t),Ker=r(qLe," (XLM model)"),qLe.forEach(t),Zer=i(x),s0=n(x,"LI",{});var OLe=s(s0);Uge=n(OLe,"STRONG",{});var Gft=s(Uge);eor=r(Gft,"xlm-roberta"),Gft.forEach(t),oor=r(OLe," \u2014 "),CO=n(OLe,"A",{href:!0});var Xft=s(CO);ror=r(Xft,"TFXLMRobertaModel"),Xft.forEach(t),tor=r(OLe," (XLM-RoBERTa model)"),OLe.forEach(t),aor=i(x),l0=n(x,"LI",{});var GLe=s(l0);Jge=n(GLe,"STRONG",{});var Vft=s(Jge);nor=r(Vft,"xlnet"),Vft.forEach(t),sor=r(GLe," \u2014 "),MO=n(GLe,"A",{href:!0});var zft=s(MO);lor=r(zft,"TFXLNetModel"),zft.forEach(t),ior=r(GLe," (XLNet model)"),GLe.forEach(t),x.forEach(t),dor=i(ba),Yge=n(ba,"P",{});var Wft=s(Yge);cor=r(Wft,"Examples:"),Wft.forEach(t),mor=i(ba),m(ow.$$.fragment,ba),ba.forEach(t),Vl.forEach(t),kRe=i(d),Mc=n(d,"H2",{class:!0});var VPe=s(Mc);i0=n(VPe,"A",{id:!0,class:!0,href:!0});var Qft=s(i0);Kge=n(Qft,"SPAN",{});var Hft=s(Kge);m(rw.$$.fragment,Hft),Hft.forEach(t),Qft.forEach(t),gor=i(VPe),Zge=n(VPe,"SPAN",{});var Uft=s(Zge);hor=r(Uft,"TFAutoModelForPreTraining"),Uft.forEach(t),VPe.forEach(t),RRe=i(d),Fr=n(d,"DIV",{class:!0});var Wl=s(Fr);m(tw.$$.fragment,Wl),por=i(Wl),Ec=n(Wl,"P",{});var tQ=s(Ec);_or=r(tQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),ehe=n(tQ,"CODE",{});var Jft=s(ehe);uor=r(Jft,"from_pretrained()"),Jft.forEach(t),bor=r(tQ,"class method or the "),ohe=n(tQ,"CODE",{});var Yft=s(ohe);vor=r(Yft,"from_config()"),Yft.forEach(t),Tor=r(tQ,`class
method.`),tQ.forEach(t),For=i(Wl),aw=n(Wl,"P",{});var zPe=s(aw);Cor=r(zPe,"This class cannot be instantiated directly using "),rhe=n(zPe,"CODE",{});var Kft=s(rhe);Mor=r(Kft,"__init__()"),Kft.forEach(t),Eor=r(zPe," (throws an error)."),zPe.forEach(t),yor=i(Wl),_t=n(Wl,"DIV",{class:!0});var Ql=s(_t);m(nw.$$.fragment,Ql),wor=i(Ql),the=n(Ql,"P",{});var Zft=s(the);Aor=r(Zft,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Zft.forEach(t),Lor=i(Ql),yc=n(Ql,"P",{});var aQ=s(yc);Bor=r(aQ,`Note:
Loading a model from its configuration file does `),ahe=n(aQ,"STRONG",{});var emt=s(ahe);xor=r(emt,"not"),emt.forEach(t),kor=r(aQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),nhe=n(aQ,"CODE",{});var omt=s(nhe);Ror=r(omt,"from_pretrained()"),omt.forEach(t),Sor=r(aQ,"to load the model weights."),aQ.forEach(t),Por=i(Ql),she=n(Ql,"P",{});var rmt=s(she);$or=r(rmt,"Examples:"),rmt.forEach(t),Ior=i(Ql),m(sw.$$.fragment,Ql),Ql.forEach(t),jor=i(Wl),po=n(Wl,"DIV",{class:!0});var va=s(po);m(lw.$$.fragment,va),Dor=i(va),lhe=n(va,"P",{});var tmt=s(lhe);Nor=r(tmt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),tmt.forEach(t),qor=i(va),Fn=n(va,"P",{});var XM=s(Fn);Oor=r(XM,"The model class to instantiate is selected based on the "),ihe=n(XM,"CODE",{});var amt=s(ihe);Gor=r(amt,"model_type"),amt.forEach(t),Xor=r(XM,` property of the config object (either
passed as an argument or loaded from `),dhe=n(XM,"CODE",{});var nmt=s(dhe);Vor=r(nmt,"pretrained_model_name_or_path"),nmt.forEach(t),zor=r(XM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),che=n(XM,"CODE",{});var smt=s(che);Wor=r(smt,"pretrained_model_name_or_path"),smt.forEach(t),Qor=r(XM,":"),XM.forEach(t),Hor=i(va),H=n(va,"UL",{});var U=s(H);d0=n(U,"LI",{});var XLe=s(d0);fhe=n(XLe,"STRONG",{});var lmt=s(fhe);Uor=r(lmt,"albert"),lmt.forEach(t),Jor=r(XLe," \u2014 "),EO=n(XLe,"A",{href:!0});var imt=s(EO);Yor=r(imt,"TFAlbertForPreTraining"),imt.forEach(t),Kor=r(XLe," (ALBERT model)"),XLe.forEach(t),Zor=i(U),c0=n(U,"LI",{});var VLe=s(c0);mhe=n(VLe,"STRONG",{});var dmt=s(mhe);err=r(dmt,"bart"),dmt.forEach(t),orr=r(VLe," \u2014 "),yO=n(VLe,"A",{href:!0});var cmt=s(yO);rrr=r(cmt,"TFBartForConditionalGeneration"),cmt.forEach(t),trr=r(VLe," (BART model)"),VLe.forEach(t),arr=i(U),f0=n(U,"LI",{});var zLe=s(f0);ghe=n(zLe,"STRONG",{});var fmt=s(ghe);nrr=r(fmt,"bert"),fmt.forEach(t),srr=r(zLe," \u2014 "),wO=n(zLe,"A",{href:!0});var mmt=s(wO);lrr=r(mmt,"TFBertForPreTraining"),mmt.forEach(t),irr=r(zLe," (BERT model)"),zLe.forEach(t),drr=i(U),m0=n(U,"LI",{});var WLe=s(m0);hhe=n(WLe,"STRONG",{});var gmt=s(hhe);crr=r(gmt,"camembert"),gmt.forEach(t),frr=r(WLe," \u2014 "),AO=n(WLe,"A",{href:!0});var hmt=s(AO);mrr=r(hmt,"TFCamembertForMaskedLM"),hmt.forEach(t),grr=r(WLe," (CamemBERT model)"),WLe.forEach(t),hrr=i(U),g0=n(U,"LI",{});var QLe=s(g0);phe=n(QLe,"STRONG",{});var pmt=s(phe);prr=r(pmt,"ctrl"),pmt.forEach(t),_rr=r(QLe," \u2014 "),LO=n(QLe,"A",{href:!0});var _mt=s(LO);urr=r(_mt,"TFCTRLLMHeadModel"),_mt.forEach(t),brr=r(QLe," (CTRL model)"),QLe.forEach(t),vrr=i(U),h0=n(U,"LI",{});var HLe=s(h0);_he=n(HLe,"STRONG",{});var umt=s(_he);Trr=r(umt,"distilbert"),umt.forEach(t),Frr=r(HLe," \u2014 "),BO=n(HLe,"A",{href:!0});var bmt=s(BO);Crr=r(bmt,"TFDistilBertForMaskedLM"),bmt.forEach(t),Mrr=r(HLe," (DistilBERT model)"),HLe.forEach(t),Err=i(U),p0=n(U,"LI",{});var ULe=s(p0);uhe=n(ULe,"STRONG",{});var vmt=s(uhe);yrr=r(vmt,"electra"),vmt.forEach(t),wrr=r(ULe," \u2014 "),xO=n(ULe,"A",{href:!0});var Tmt=s(xO);Arr=r(Tmt,"TFElectraForPreTraining"),Tmt.forEach(t),Lrr=r(ULe," (ELECTRA model)"),ULe.forEach(t),Brr=i(U),_0=n(U,"LI",{});var JLe=s(_0);bhe=n(JLe,"STRONG",{});var Fmt=s(bhe);xrr=r(Fmt,"flaubert"),Fmt.forEach(t),krr=r(JLe," \u2014 "),kO=n(JLe,"A",{href:!0});var Cmt=s(kO);Rrr=r(Cmt,"TFFlaubertWithLMHeadModel"),Cmt.forEach(t),Srr=r(JLe," (FlauBERT model)"),JLe.forEach(t),Prr=i(U),u0=n(U,"LI",{});var YLe=s(u0);vhe=n(YLe,"STRONG",{});var Mmt=s(vhe);$rr=r(Mmt,"funnel"),Mmt.forEach(t),Irr=r(YLe," \u2014 "),RO=n(YLe,"A",{href:!0});var Emt=s(RO);jrr=r(Emt,"TFFunnelForPreTraining"),Emt.forEach(t),Drr=r(YLe," (Funnel Transformer model)"),YLe.forEach(t),Nrr=i(U),b0=n(U,"LI",{});var KLe=s(b0);The=n(KLe,"STRONG",{});var ymt=s(The);qrr=r(ymt,"gpt2"),ymt.forEach(t),Orr=r(KLe," \u2014 "),SO=n(KLe,"A",{href:!0});var wmt=s(SO);Grr=r(wmt,"TFGPT2LMHeadModel"),wmt.forEach(t),Xrr=r(KLe," (OpenAI GPT-2 model)"),KLe.forEach(t),Vrr=i(U),v0=n(U,"LI",{});var ZLe=s(v0);Fhe=n(ZLe,"STRONG",{});var Amt=s(Fhe);zrr=r(Amt,"layoutlm"),Amt.forEach(t),Wrr=r(ZLe," \u2014 "),PO=n(ZLe,"A",{href:!0});var Lmt=s(PO);Qrr=r(Lmt,"TFLayoutLMForMaskedLM"),Lmt.forEach(t),Hrr=r(ZLe," (LayoutLM model)"),ZLe.forEach(t),Urr=i(U),T0=n(U,"LI",{});var e7e=s(T0);Che=n(e7e,"STRONG",{});var Bmt=s(Che);Jrr=r(Bmt,"lxmert"),Bmt.forEach(t),Yrr=r(e7e," \u2014 "),$O=n(e7e,"A",{href:!0});var xmt=s($O);Krr=r(xmt,"TFLxmertForPreTraining"),xmt.forEach(t),Zrr=r(e7e," (LXMERT model)"),e7e.forEach(t),etr=i(U),F0=n(U,"LI",{});var o7e=s(F0);Mhe=n(o7e,"STRONG",{});var kmt=s(Mhe);otr=r(kmt,"mobilebert"),kmt.forEach(t),rtr=r(o7e," \u2014 "),IO=n(o7e,"A",{href:!0});var Rmt=s(IO);ttr=r(Rmt,"TFMobileBertForPreTraining"),Rmt.forEach(t),atr=r(o7e," (MobileBERT model)"),o7e.forEach(t),ntr=i(U),C0=n(U,"LI",{});var r7e=s(C0);Ehe=n(r7e,"STRONG",{});var Smt=s(Ehe);str=r(Smt,"mpnet"),Smt.forEach(t),ltr=r(r7e," \u2014 "),jO=n(r7e,"A",{href:!0});var Pmt=s(jO);itr=r(Pmt,"TFMPNetForMaskedLM"),Pmt.forEach(t),dtr=r(r7e," (MPNet model)"),r7e.forEach(t),ctr=i(U),M0=n(U,"LI",{});var t7e=s(M0);yhe=n(t7e,"STRONG",{});var $mt=s(yhe);ftr=r($mt,"openai-gpt"),$mt.forEach(t),mtr=r(t7e," \u2014 "),DO=n(t7e,"A",{href:!0});var Imt=s(DO);gtr=r(Imt,"TFOpenAIGPTLMHeadModel"),Imt.forEach(t),htr=r(t7e," (OpenAI GPT model)"),t7e.forEach(t),ptr=i(U),E0=n(U,"LI",{});var a7e=s(E0);whe=n(a7e,"STRONG",{});var jmt=s(whe);_tr=r(jmt,"roberta"),jmt.forEach(t),utr=r(a7e," \u2014 "),NO=n(a7e,"A",{href:!0});var Dmt=s(NO);btr=r(Dmt,"TFRobertaForMaskedLM"),Dmt.forEach(t),vtr=r(a7e," (RoBERTa model)"),a7e.forEach(t),Ttr=i(U),y0=n(U,"LI",{});var n7e=s(y0);Ahe=n(n7e,"STRONG",{});var Nmt=s(Ahe);Ftr=r(Nmt,"t5"),Nmt.forEach(t),Ctr=r(n7e," \u2014 "),qO=n(n7e,"A",{href:!0});var qmt=s(qO);Mtr=r(qmt,"TFT5ForConditionalGeneration"),qmt.forEach(t),Etr=r(n7e," (T5 model)"),n7e.forEach(t),ytr=i(U),w0=n(U,"LI",{});var s7e=s(w0);Lhe=n(s7e,"STRONG",{});var Omt=s(Lhe);wtr=r(Omt,"tapas"),Omt.forEach(t),Atr=r(s7e," \u2014 "),OO=n(s7e,"A",{href:!0});var Gmt=s(OO);Ltr=r(Gmt,"TFTapasForMaskedLM"),Gmt.forEach(t),Btr=r(s7e," (TAPAS model)"),s7e.forEach(t),xtr=i(U),A0=n(U,"LI",{});var l7e=s(A0);Bhe=n(l7e,"STRONG",{});var Xmt=s(Bhe);ktr=r(Xmt,"transfo-xl"),Xmt.forEach(t),Rtr=r(l7e," \u2014 "),GO=n(l7e,"A",{href:!0});var Vmt=s(GO);Str=r(Vmt,"TFTransfoXLLMHeadModel"),Vmt.forEach(t),Ptr=r(l7e," (Transformer-XL model)"),l7e.forEach(t),$tr=i(U),L0=n(U,"LI",{});var i7e=s(L0);xhe=n(i7e,"STRONG",{});var zmt=s(xhe);Itr=r(zmt,"xlm"),zmt.forEach(t),jtr=r(i7e," \u2014 "),XO=n(i7e,"A",{href:!0});var Wmt=s(XO);Dtr=r(Wmt,"TFXLMWithLMHeadModel"),Wmt.forEach(t),Ntr=r(i7e," (XLM model)"),i7e.forEach(t),qtr=i(U),B0=n(U,"LI",{});var d7e=s(B0);khe=n(d7e,"STRONG",{});var Qmt=s(khe);Otr=r(Qmt,"xlm-roberta"),Qmt.forEach(t),Gtr=r(d7e," \u2014 "),VO=n(d7e,"A",{href:!0});var Hmt=s(VO);Xtr=r(Hmt,"TFXLMRobertaForMaskedLM"),Hmt.forEach(t),Vtr=r(d7e," (XLM-RoBERTa model)"),d7e.forEach(t),ztr=i(U),x0=n(U,"LI",{});var c7e=s(x0);Rhe=n(c7e,"STRONG",{});var Umt=s(Rhe);Wtr=r(Umt,"xlnet"),Umt.forEach(t),Qtr=r(c7e," \u2014 "),zO=n(c7e,"A",{href:!0});var Jmt=s(zO);Htr=r(Jmt,"TFXLNetLMHeadModel"),Jmt.forEach(t),Utr=r(c7e," (XLNet model)"),c7e.forEach(t),U.forEach(t),Jtr=i(va),She=n(va,"P",{});var Ymt=s(She);Ytr=r(Ymt,"Examples:"),Ymt.forEach(t),Ktr=i(va),m(iw.$$.fragment,va),va.forEach(t),Wl.forEach(t),SRe=i(d),wc=n(d,"H2",{class:!0});var WPe=s(wc);k0=n(WPe,"A",{id:!0,class:!0,href:!0});var Kmt=s(k0);Phe=n(Kmt,"SPAN",{});var Zmt=s(Phe);m(dw.$$.fragment,Zmt),Zmt.forEach(t),Kmt.forEach(t),Ztr=i(WPe),$he=n(WPe,"SPAN",{});var egt=s($he);ear=r(egt,"TFAutoModelForCausalLM"),egt.forEach(t),WPe.forEach(t),PRe=i(d),Cr=n(d,"DIV",{class:!0});var Hl=s(Cr);m(cw.$$.fragment,Hl),oar=i(Hl),Ac=n(Hl,"P",{});var nQ=s(Ac);rar=r(nQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Ihe=n(nQ,"CODE",{});var ogt=s(Ihe);tar=r(ogt,"from_pretrained()"),ogt.forEach(t),aar=r(nQ,"class method or the "),jhe=n(nQ,"CODE",{});var rgt=s(jhe);nar=r(rgt,"from_config()"),rgt.forEach(t),sar=r(nQ,`class
method.`),nQ.forEach(t),lar=i(Hl),fw=n(Hl,"P",{});var QPe=s(fw);iar=r(QPe,"This class cannot be instantiated directly using "),Dhe=n(QPe,"CODE",{});var tgt=s(Dhe);dar=r(tgt,"__init__()"),tgt.forEach(t),car=r(QPe," (throws an error)."),QPe.forEach(t),far=i(Hl),ut=n(Hl,"DIV",{class:!0});var Ul=s(ut);m(mw.$$.fragment,Ul),mar=i(Ul),Nhe=n(Ul,"P",{});var agt=s(Nhe);gar=r(agt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),agt.forEach(t),har=i(Ul),Lc=n(Ul,"P",{});var sQ=s(Lc);par=r(sQ,`Note:
Loading a model from its configuration file does `),qhe=n(sQ,"STRONG",{});var ngt=s(qhe);_ar=r(ngt,"not"),ngt.forEach(t),uar=r(sQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ohe=n(sQ,"CODE",{});var sgt=s(Ohe);bar=r(sgt,"from_pretrained()"),sgt.forEach(t),Tar=r(sQ,"to load the model weights."),sQ.forEach(t),Far=i(Ul),Ghe=n(Ul,"P",{});var lgt=s(Ghe);Car=r(lgt,"Examples:"),lgt.forEach(t),Mar=i(Ul),m(gw.$$.fragment,Ul),Ul.forEach(t),Ear=i(Hl),_o=n(Hl,"DIV",{class:!0});var Ta=s(_o);m(hw.$$.fragment,Ta),yar=i(Ta),Xhe=n(Ta,"P",{});var igt=s(Xhe);war=r(igt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),igt.forEach(t),Aar=i(Ta),Cn=n(Ta,"P",{});var VM=s(Cn);Lar=r(VM,"The model class to instantiate is selected based on the "),Vhe=n(VM,"CODE",{});var dgt=s(Vhe);Bar=r(dgt,"model_type"),dgt.forEach(t),xar=r(VM,` property of the config object (either
passed as an argument or loaded from `),zhe=n(VM,"CODE",{});var cgt=s(zhe);kar=r(cgt,"pretrained_model_name_or_path"),cgt.forEach(t),Rar=r(VM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Whe=n(VM,"CODE",{});var fgt=s(Whe);Sar=r(fgt,"pretrained_model_name_or_path"),fgt.forEach(t),Par=r(VM,":"),VM.forEach(t),$ar=i(Ta),ge=n(Ta,"UL",{});var Ce=s(ge);R0=n(Ce,"LI",{});var f7e=s(R0);Qhe=n(f7e,"STRONG",{});var mgt=s(Qhe);Iar=r(mgt,"bert"),mgt.forEach(t),jar=r(f7e," \u2014 "),WO=n(f7e,"A",{href:!0});var ggt=s(WO);Dar=r(ggt,"TFBertLMHeadModel"),ggt.forEach(t),Nar=r(f7e," (BERT model)"),f7e.forEach(t),qar=i(Ce),S0=n(Ce,"LI",{});var m7e=s(S0);Hhe=n(m7e,"STRONG",{});var hgt=s(Hhe);Oar=r(hgt,"camembert"),hgt.forEach(t),Gar=r(m7e," \u2014 "),QO=n(m7e,"A",{href:!0});var pgt=s(QO);Xar=r(pgt,"TFCamembertForCausalLM"),pgt.forEach(t),Var=r(m7e," (CamemBERT model)"),m7e.forEach(t),zar=i(Ce),P0=n(Ce,"LI",{});var g7e=s(P0);Uhe=n(g7e,"STRONG",{});var _gt=s(Uhe);War=r(_gt,"ctrl"),_gt.forEach(t),Qar=r(g7e," \u2014 "),HO=n(g7e,"A",{href:!0});var ugt=s(HO);Har=r(ugt,"TFCTRLLMHeadModel"),ugt.forEach(t),Uar=r(g7e," (CTRL model)"),g7e.forEach(t),Jar=i(Ce),$0=n(Ce,"LI",{});var h7e=s($0);Jhe=n(h7e,"STRONG",{});var bgt=s(Jhe);Yar=r(bgt,"gpt2"),bgt.forEach(t),Kar=r(h7e," \u2014 "),UO=n(h7e,"A",{href:!0});var vgt=s(UO);Zar=r(vgt,"TFGPT2LMHeadModel"),vgt.forEach(t),enr=r(h7e," (OpenAI GPT-2 model)"),h7e.forEach(t),onr=i(Ce),I0=n(Ce,"LI",{});var p7e=s(I0);Yhe=n(p7e,"STRONG",{});var Tgt=s(Yhe);rnr=r(Tgt,"openai-gpt"),Tgt.forEach(t),tnr=r(p7e," \u2014 "),JO=n(p7e,"A",{href:!0});var Fgt=s(JO);anr=r(Fgt,"TFOpenAIGPTLMHeadModel"),Fgt.forEach(t),nnr=r(p7e," (OpenAI GPT model)"),p7e.forEach(t),snr=i(Ce),j0=n(Ce,"LI",{});var _7e=s(j0);Khe=n(_7e,"STRONG",{});var Cgt=s(Khe);lnr=r(Cgt,"rembert"),Cgt.forEach(t),inr=r(_7e," \u2014 "),YO=n(_7e,"A",{href:!0});var Mgt=s(YO);dnr=r(Mgt,"TFRemBertForCausalLM"),Mgt.forEach(t),cnr=r(_7e," (RemBERT model)"),_7e.forEach(t),fnr=i(Ce),D0=n(Ce,"LI",{});var u7e=s(D0);Zhe=n(u7e,"STRONG",{});var Egt=s(Zhe);mnr=r(Egt,"roberta"),Egt.forEach(t),gnr=r(u7e," \u2014 "),KO=n(u7e,"A",{href:!0});var ygt=s(KO);hnr=r(ygt,"TFRobertaForCausalLM"),ygt.forEach(t),pnr=r(u7e," (RoBERTa model)"),u7e.forEach(t),_nr=i(Ce),N0=n(Ce,"LI",{});var b7e=s(N0);epe=n(b7e,"STRONG",{});var wgt=s(epe);unr=r(wgt,"roformer"),wgt.forEach(t),bnr=r(b7e," \u2014 "),ZO=n(b7e,"A",{href:!0});var Agt=s(ZO);vnr=r(Agt,"TFRoFormerForCausalLM"),Agt.forEach(t),Tnr=r(b7e," (RoFormer model)"),b7e.forEach(t),Fnr=i(Ce),q0=n(Ce,"LI",{});var v7e=s(q0);ope=n(v7e,"STRONG",{});var Lgt=s(ope);Cnr=r(Lgt,"transfo-xl"),Lgt.forEach(t),Mnr=r(v7e," \u2014 "),eG=n(v7e,"A",{href:!0});var Bgt=s(eG);Enr=r(Bgt,"TFTransfoXLLMHeadModel"),Bgt.forEach(t),ynr=r(v7e," (Transformer-XL model)"),v7e.forEach(t),wnr=i(Ce),O0=n(Ce,"LI",{});var T7e=s(O0);rpe=n(T7e,"STRONG",{});var xgt=s(rpe);Anr=r(xgt,"xlm"),xgt.forEach(t),Lnr=r(T7e," \u2014 "),oG=n(T7e,"A",{href:!0});var kgt=s(oG);Bnr=r(kgt,"TFXLMWithLMHeadModel"),kgt.forEach(t),xnr=r(T7e," (XLM model)"),T7e.forEach(t),knr=i(Ce),G0=n(Ce,"LI",{});var F7e=s(G0);tpe=n(F7e,"STRONG",{});var Rgt=s(tpe);Rnr=r(Rgt,"xlnet"),Rgt.forEach(t),Snr=r(F7e," \u2014 "),rG=n(F7e,"A",{href:!0});var Sgt=s(rG);Pnr=r(Sgt,"TFXLNetLMHeadModel"),Sgt.forEach(t),$nr=r(F7e," (XLNet model)"),F7e.forEach(t),Ce.forEach(t),Inr=i(Ta),ape=n(Ta,"P",{});var Pgt=s(ape);jnr=r(Pgt,"Examples:"),Pgt.forEach(t),Dnr=i(Ta),m(pw.$$.fragment,Ta),Ta.forEach(t),Hl.forEach(t),$Re=i(d),Bc=n(d,"H2",{class:!0});var HPe=s(Bc);X0=n(HPe,"A",{id:!0,class:!0,href:!0});var $gt=s(X0);npe=n($gt,"SPAN",{});var Igt=s(npe);m(_w.$$.fragment,Igt),Igt.forEach(t),$gt.forEach(t),Nnr=i(HPe),spe=n(HPe,"SPAN",{});var jgt=s(spe);qnr=r(jgt,"TFAutoModelForImageClassification"),jgt.forEach(t),HPe.forEach(t),IRe=i(d),Mr=n(d,"DIV",{class:!0});var Jl=s(Mr);m(uw.$$.fragment,Jl),Onr=i(Jl),xc=n(Jl,"P",{});var lQ=s(xc);Gnr=r(lQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),lpe=n(lQ,"CODE",{});var Dgt=s(lpe);Xnr=r(Dgt,"from_pretrained()"),Dgt.forEach(t),Vnr=r(lQ,"class method or the "),ipe=n(lQ,"CODE",{});var Ngt=s(ipe);znr=r(Ngt,"from_config()"),Ngt.forEach(t),Wnr=r(lQ,`class
method.`),lQ.forEach(t),Qnr=i(Jl),bw=n(Jl,"P",{});var UPe=s(bw);Hnr=r(UPe,"This class cannot be instantiated directly using "),dpe=n(UPe,"CODE",{});var qgt=s(dpe);Unr=r(qgt,"__init__()"),qgt.forEach(t),Jnr=r(UPe," (throws an error)."),UPe.forEach(t),Ynr=i(Jl),bt=n(Jl,"DIV",{class:!0});var Yl=s(bt);m(vw.$$.fragment,Yl),Knr=i(Yl),cpe=n(Yl,"P",{});var Ogt=s(cpe);Znr=r(Ogt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Ogt.forEach(t),esr=i(Yl),kc=n(Yl,"P",{});var iQ=s(kc);osr=r(iQ,`Note:
Loading a model from its configuration file does `),fpe=n(iQ,"STRONG",{});var Ggt=s(fpe);rsr=r(Ggt,"not"),Ggt.forEach(t),tsr=r(iQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),mpe=n(iQ,"CODE",{});var Xgt=s(mpe);asr=r(Xgt,"from_pretrained()"),Xgt.forEach(t),nsr=r(iQ,"to load the model weights."),iQ.forEach(t),ssr=i(Yl),gpe=n(Yl,"P",{});var Vgt=s(gpe);lsr=r(Vgt,"Examples:"),Vgt.forEach(t),isr=i(Yl),m(Tw.$$.fragment,Yl),Yl.forEach(t),dsr=i(Jl),uo=n(Jl,"DIV",{class:!0});var Fa=s(uo);m(Fw.$$.fragment,Fa),csr=i(Fa),hpe=n(Fa,"P",{});var zgt=s(hpe);fsr=r(zgt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),zgt.forEach(t),msr=i(Fa),Mn=n(Fa,"P",{});var zM=s(Mn);gsr=r(zM,"The model class to instantiate is selected based on the "),ppe=n(zM,"CODE",{});var Wgt=s(ppe);hsr=r(Wgt,"model_type"),Wgt.forEach(t),psr=r(zM,` property of the config object (either
passed as an argument or loaded from `),_pe=n(zM,"CODE",{});var Qgt=s(_pe);_sr=r(Qgt,"pretrained_model_name_or_path"),Qgt.forEach(t),usr=r(zM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),upe=n(zM,"CODE",{});var Hgt=s(upe);bsr=r(Hgt,"pretrained_model_name_or_path"),Hgt.forEach(t),vsr=r(zM,":"),zM.forEach(t),Tsr=i(Fa),Cw=n(Fa,"UL",{});var JPe=s(Cw);V0=n(JPe,"LI",{});var C7e=s(V0);bpe=n(C7e,"STRONG",{});var Ugt=s(bpe);Fsr=r(Ugt,"convnext"),Ugt.forEach(t),Csr=r(C7e," \u2014 "),tG=n(C7e,"A",{href:!0});var Jgt=s(tG);Msr=r(Jgt,"TFConvNextForImageClassification"),Jgt.forEach(t),Esr=r(C7e," (ConvNext model)"),C7e.forEach(t),ysr=i(JPe),z0=n(JPe,"LI",{});var M7e=s(z0);vpe=n(M7e,"STRONG",{});var Ygt=s(vpe);wsr=r(Ygt,"vit"),Ygt.forEach(t),Asr=r(M7e," \u2014 "),aG=n(M7e,"A",{href:!0});var Kgt=s(aG);Lsr=r(Kgt,"TFViTForImageClassification"),Kgt.forEach(t),Bsr=r(M7e," (ViT model)"),M7e.forEach(t),JPe.forEach(t),xsr=i(Fa),Tpe=n(Fa,"P",{});var Zgt=s(Tpe);ksr=r(Zgt,"Examples:"),Zgt.forEach(t),Rsr=i(Fa),m(Mw.$$.fragment,Fa),Fa.forEach(t),Jl.forEach(t),jRe=i(d),Rc=n(d,"H2",{class:!0});var YPe=s(Rc);W0=n(YPe,"A",{id:!0,class:!0,href:!0});var eht=s(W0);Fpe=n(eht,"SPAN",{});var oht=s(Fpe);m(Ew.$$.fragment,oht),oht.forEach(t),eht.forEach(t),Ssr=i(YPe),Cpe=n(YPe,"SPAN",{});var rht=s(Cpe);Psr=r(rht,"TFAutoModelForMaskedLM"),rht.forEach(t),YPe.forEach(t),DRe=i(d),Er=n(d,"DIV",{class:!0});var Kl=s(Er);m(yw.$$.fragment,Kl),$sr=i(Kl),Sc=n(Kl,"P",{});var dQ=s(Sc);Isr=r(dQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Mpe=n(dQ,"CODE",{});var tht=s(Mpe);jsr=r(tht,"from_pretrained()"),tht.forEach(t),Dsr=r(dQ,"class method or the "),Epe=n(dQ,"CODE",{});var aht=s(Epe);Nsr=r(aht,"from_config()"),aht.forEach(t),qsr=r(dQ,`class
method.`),dQ.forEach(t),Osr=i(Kl),ww=n(Kl,"P",{});var KPe=s(ww);Gsr=r(KPe,"This class cannot be instantiated directly using "),ype=n(KPe,"CODE",{});var nht=s(ype);Xsr=r(nht,"__init__()"),nht.forEach(t),Vsr=r(KPe," (throws an error)."),KPe.forEach(t),zsr=i(Kl),vt=n(Kl,"DIV",{class:!0});var Zl=s(vt);m(Aw.$$.fragment,Zl),Wsr=i(Zl),wpe=n(Zl,"P",{});var sht=s(wpe);Qsr=r(sht,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),sht.forEach(t),Hsr=i(Zl),Pc=n(Zl,"P",{});var cQ=s(Pc);Usr=r(cQ,`Note:
Loading a model from its configuration file does `),Ape=n(cQ,"STRONG",{});var lht=s(Ape);Jsr=r(lht,"not"),lht.forEach(t),Ysr=r(cQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lpe=n(cQ,"CODE",{});var iht=s(Lpe);Ksr=r(iht,"from_pretrained()"),iht.forEach(t),Zsr=r(cQ,"to load the model weights."),cQ.forEach(t),elr=i(Zl),Bpe=n(Zl,"P",{});var dht=s(Bpe);olr=r(dht,"Examples:"),dht.forEach(t),rlr=i(Zl),m(Lw.$$.fragment,Zl),Zl.forEach(t),tlr=i(Kl),bo=n(Kl,"DIV",{class:!0});var Ca=s(bo);m(Bw.$$.fragment,Ca),alr=i(Ca),xpe=n(Ca,"P",{});var cht=s(xpe);nlr=r(cht,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),cht.forEach(t),slr=i(Ca),En=n(Ca,"P",{});var WM=s(En);llr=r(WM,"The model class to instantiate is selected based on the "),kpe=n(WM,"CODE",{});var fht=s(kpe);ilr=r(fht,"model_type"),fht.forEach(t),dlr=r(WM,` property of the config object (either
passed as an argument or loaded from `),Rpe=n(WM,"CODE",{});var mht=s(Rpe);clr=r(mht,"pretrained_model_name_or_path"),mht.forEach(t),flr=r(WM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Spe=n(WM,"CODE",{});var ght=s(Spe);mlr=r(ght,"pretrained_model_name_or_path"),ght.forEach(t),glr=r(WM,":"),WM.forEach(t),hlr=i(Ca),Y=n(Ca,"UL",{});var ee=s(Y);Q0=n(ee,"LI",{});var E7e=s(Q0);Ppe=n(E7e,"STRONG",{});var hht=s(Ppe);plr=r(hht,"albert"),hht.forEach(t),_lr=r(E7e," \u2014 "),nG=n(E7e,"A",{href:!0});var pht=s(nG);ulr=r(pht,"TFAlbertForMaskedLM"),pht.forEach(t),blr=r(E7e," (ALBERT model)"),E7e.forEach(t),vlr=i(ee),H0=n(ee,"LI",{});var y7e=s(H0);$pe=n(y7e,"STRONG",{});var _ht=s($pe);Tlr=r(_ht,"bert"),_ht.forEach(t),Flr=r(y7e," \u2014 "),sG=n(y7e,"A",{href:!0});var uht=s(sG);Clr=r(uht,"TFBertForMaskedLM"),uht.forEach(t),Mlr=r(y7e," (BERT model)"),y7e.forEach(t),Elr=i(ee),U0=n(ee,"LI",{});var w7e=s(U0);Ipe=n(w7e,"STRONG",{});var bht=s(Ipe);ylr=r(bht,"camembert"),bht.forEach(t),wlr=r(w7e," \u2014 "),lG=n(w7e,"A",{href:!0});var vht=s(lG);Alr=r(vht,"TFCamembertForMaskedLM"),vht.forEach(t),Llr=r(w7e," (CamemBERT model)"),w7e.forEach(t),Blr=i(ee),J0=n(ee,"LI",{});var A7e=s(J0);jpe=n(A7e,"STRONG",{});var Tht=s(jpe);xlr=r(Tht,"convbert"),Tht.forEach(t),klr=r(A7e," \u2014 "),iG=n(A7e,"A",{href:!0});var Fht=s(iG);Rlr=r(Fht,"TFConvBertForMaskedLM"),Fht.forEach(t),Slr=r(A7e," (ConvBERT model)"),A7e.forEach(t),Plr=i(ee),Y0=n(ee,"LI",{});var L7e=s(Y0);Dpe=n(L7e,"STRONG",{});var Cht=s(Dpe);$lr=r(Cht,"deberta"),Cht.forEach(t),Ilr=r(L7e," \u2014 "),dG=n(L7e,"A",{href:!0});var Mht=s(dG);jlr=r(Mht,"TFDebertaForMaskedLM"),Mht.forEach(t),Dlr=r(L7e," (DeBERTa model)"),L7e.forEach(t),Nlr=i(ee),K0=n(ee,"LI",{});var B7e=s(K0);Npe=n(B7e,"STRONG",{});var Eht=s(Npe);qlr=r(Eht,"deberta-v2"),Eht.forEach(t),Olr=r(B7e," \u2014 "),cG=n(B7e,"A",{href:!0});var yht=s(cG);Glr=r(yht,"TFDebertaV2ForMaskedLM"),yht.forEach(t),Xlr=r(B7e," (DeBERTa-v2 model)"),B7e.forEach(t),Vlr=i(ee),Z0=n(ee,"LI",{});var x7e=s(Z0);qpe=n(x7e,"STRONG",{});var wht=s(qpe);zlr=r(wht,"distilbert"),wht.forEach(t),Wlr=r(x7e," \u2014 "),fG=n(x7e,"A",{href:!0});var Aht=s(fG);Qlr=r(Aht,"TFDistilBertForMaskedLM"),Aht.forEach(t),Hlr=r(x7e," (DistilBERT model)"),x7e.forEach(t),Ulr=i(ee),eT=n(ee,"LI",{});var k7e=s(eT);Ope=n(k7e,"STRONG",{});var Lht=s(Ope);Jlr=r(Lht,"electra"),Lht.forEach(t),Ylr=r(k7e," \u2014 "),mG=n(k7e,"A",{href:!0});var Bht=s(mG);Klr=r(Bht,"TFElectraForMaskedLM"),Bht.forEach(t),Zlr=r(k7e," (ELECTRA model)"),k7e.forEach(t),eir=i(ee),oT=n(ee,"LI",{});var R7e=s(oT);Gpe=n(R7e,"STRONG",{});var xht=s(Gpe);oir=r(xht,"flaubert"),xht.forEach(t),rir=r(R7e," \u2014 "),gG=n(R7e,"A",{href:!0});var kht=s(gG);tir=r(kht,"TFFlaubertWithLMHeadModel"),kht.forEach(t),air=r(R7e," (FlauBERT model)"),R7e.forEach(t),nir=i(ee),rT=n(ee,"LI",{});var S7e=s(rT);Xpe=n(S7e,"STRONG",{});var Rht=s(Xpe);sir=r(Rht,"funnel"),Rht.forEach(t),lir=r(S7e," \u2014 "),hG=n(S7e,"A",{href:!0});var Sht=s(hG);iir=r(Sht,"TFFunnelForMaskedLM"),Sht.forEach(t),dir=r(S7e," (Funnel Transformer model)"),S7e.forEach(t),cir=i(ee),tT=n(ee,"LI",{});var P7e=s(tT);Vpe=n(P7e,"STRONG",{});var Pht=s(Vpe);fir=r(Pht,"layoutlm"),Pht.forEach(t),mir=r(P7e," \u2014 "),pG=n(P7e,"A",{href:!0});var $ht=s(pG);gir=r($ht,"TFLayoutLMForMaskedLM"),$ht.forEach(t),hir=r(P7e," (LayoutLM model)"),P7e.forEach(t),pir=i(ee),aT=n(ee,"LI",{});var $7e=s(aT);zpe=n($7e,"STRONG",{});var Iht=s(zpe);_ir=r(Iht,"longformer"),Iht.forEach(t),uir=r($7e," \u2014 "),_G=n($7e,"A",{href:!0});var jht=s(_G);bir=r(jht,"TFLongformerForMaskedLM"),jht.forEach(t),vir=r($7e," (Longformer model)"),$7e.forEach(t),Tir=i(ee),nT=n(ee,"LI",{});var I7e=s(nT);Wpe=n(I7e,"STRONG",{});var Dht=s(Wpe);Fir=r(Dht,"mobilebert"),Dht.forEach(t),Cir=r(I7e," \u2014 "),uG=n(I7e,"A",{href:!0});var Nht=s(uG);Mir=r(Nht,"TFMobileBertForMaskedLM"),Nht.forEach(t),Eir=r(I7e," (MobileBERT model)"),I7e.forEach(t),yir=i(ee),sT=n(ee,"LI",{});var j7e=s(sT);Qpe=n(j7e,"STRONG",{});var qht=s(Qpe);wir=r(qht,"mpnet"),qht.forEach(t),Air=r(j7e," \u2014 "),bG=n(j7e,"A",{href:!0});var Oht=s(bG);Lir=r(Oht,"TFMPNetForMaskedLM"),Oht.forEach(t),Bir=r(j7e," (MPNet model)"),j7e.forEach(t),xir=i(ee),lT=n(ee,"LI",{});var D7e=s(lT);Hpe=n(D7e,"STRONG",{});var Ght=s(Hpe);kir=r(Ght,"rembert"),Ght.forEach(t),Rir=r(D7e," \u2014 "),vG=n(D7e,"A",{href:!0});var Xht=s(vG);Sir=r(Xht,"TFRemBertForMaskedLM"),Xht.forEach(t),Pir=r(D7e," (RemBERT model)"),D7e.forEach(t),$ir=i(ee),iT=n(ee,"LI",{});var N7e=s(iT);Upe=n(N7e,"STRONG",{});var Vht=s(Upe);Iir=r(Vht,"roberta"),Vht.forEach(t),jir=r(N7e," \u2014 "),TG=n(N7e,"A",{href:!0});var zht=s(TG);Dir=r(zht,"TFRobertaForMaskedLM"),zht.forEach(t),Nir=r(N7e," (RoBERTa model)"),N7e.forEach(t),qir=i(ee),dT=n(ee,"LI",{});var q7e=s(dT);Jpe=n(q7e,"STRONG",{});var Wht=s(Jpe);Oir=r(Wht,"roformer"),Wht.forEach(t),Gir=r(q7e," \u2014 "),FG=n(q7e,"A",{href:!0});var Qht=s(FG);Xir=r(Qht,"TFRoFormerForMaskedLM"),Qht.forEach(t),Vir=r(q7e," (RoFormer model)"),q7e.forEach(t),zir=i(ee),cT=n(ee,"LI",{});var O7e=s(cT);Ype=n(O7e,"STRONG",{});var Hht=s(Ype);Wir=r(Hht,"tapas"),Hht.forEach(t),Qir=r(O7e," \u2014 "),CG=n(O7e,"A",{href:!0});var Uht=s(CG);Hir=r(Uht,"TFTapasForMaskedLM"),Uht.forEach(t),Uir=r(O7e," (TAPAS model)"),O7e.forEach(t),Jir=i(ee),fT=n(ee,"LI",{});var G7e=s(fT);Kpe=n(G7e,"STRONG",{});var Jht=s(Kpe);Yir=r(Jht,"xlm"),Jht.forEach(t),Kir=r(G7e," \u2014 "),MG=n(G7e,"A",{href:!0});var Yht=s(MG);Zir=r(Yht,"TFXLMWithLMHeadModel"),Yht.forEach(t),edr=r(G7e," (XLM model)"),G7e.forEach(t),odr=i(ee),mT=n(ee,"LI",{});var X7e=s(mT);Zpe=n(X7e,"STRONG",{});var Kht=s(Zpe);rdr=r(Kht,"xlm-roberta"),Kht.forEach(t),tdr=r(X7e," \u2014 "),EG=n(X7e,"A",{href:!0});var Zht=s(EG);adr=r(Zht,"TFXLMRobertaForMaskedLM"),Zht.forEach(t),ndr=r(X7e," (XLM-RoBERTa model)"),X7e.forEach(t),ee.forEach(t),sdr=i(Ca),e_e=n(Ca,"P",{});var ept=s(e_e);ldr=r(ept,"Examples:"),ept.forEach(t),idr=i(Ca),m(xw.$$.fragment,Ca),Ca.forEach(t),Kl.forEach(t),NRe=i(d),$c=n(d,"H2",{class:!0});var ZPe=s($c);gT=n(ZPe,"A",{id:!0,class:!0,href:!0});var opt=s(gT);o_e=n(opt,"SPAN",{});var rpt=s(o_e);m(kw.$$.fragment,rpt),rpt.forEach(t),opt.forEach(t),ddr=i(ZPe),r_e=n(ZPe,"SPAN",{});var tpt=s(r_e);cdr=r(tpt,"TFAutoModelForSeq2SeqLM"),tpt.forEach(t),ZPe.forEach(t),qRe=i(d),yr=n(d,"DIV",{class:!0});var ei=s(yr);m(Rw.$$.fragment,ei),fdr=i(ei),Ic=n(ei,"P",{});var fQ=s(Ic);mdr=r(fQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),t_e=n(fQ,"CODE",{});var apt=s(t_e);gdr=r(apt,"from_pretrained()"),apt.forEach(t),hdr=r(fQ,"class method or the "),a_e=n(fQ,"CODE",{});var npt=s(a_e);pdr=r(npt,"from_config()"),npt.forEach(t),_dr=r(fQ,`class
method.`),fQ.forEach(t),udr=i(ei),Sw=n(ei,"P",{});var e$e=s(Sw);bdr=r(e$e,"This class cannot be instantiated directly using "),n_e=n(e$e,"CODE",{});var spt=s(n_e);vdr=r(spt,"__init__()"),spt.forEach(t),Tdr=r(e$e," (throws an error)."),e$e.forEach(t),Fdr=i(ei),Tt=n(ei,"DIV",{class:!0});var oi=s(Tt);m(Pw.$$.fragment,oi),Cdr=i(oi),s_e=n(oi,"P",{});var lpt=s(s_e);Mdr=r(lpt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),lpt.forEach(t),Edr=i(oi),jc=n(oi,"P",{});var mQ=s(jc);ydr=r(mQ,`Note:
Loading a model from its configuration file does `),l_e=n(mQ,"STRONG",{});var ipt=s(l_e);wdr=r(ipt,"not"),ipt.forEach(t),Adr=r(mQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),i_e=n(mQ,"CODE",{});var dpt=s(i_e);Ldr=r(dpt,"from_pretrained()"),dpt.forEach(t),Bdr=r(mQ,"to load the model weights."),mQ.forEach(t),xdr=i(oi),d_e=n(oi,"P",{});var cpt=s(d_e);kdr=r(cpt,"Examples:"),cpt.forEach(t),Rdr=i(oi),m($w.$$.fragment,oi),oi.forEach(t),Sdr=i(ei),vo=n(ei,"DIV",{class:!0});var Ma=s(vo);m(Iw.$$.fragment,Ma),Pdr=i(Ma),c_e=n(Ma,"P",{});var fpt=s(c_e);$dr=r(fpt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),fpt.forEach(t),Idr=i(Ma),yn=n(Ma,"P",{});var QM=s(yn);jdr=r(QM,"The model class to instantiate is selected based on the "),f_e=n(QM,"CODE",{});var mpt=s(f_e);Ddr=r(mpt,"model_type"),mpt.forEach(t),Ndr=r(QM,` property of the config object (either
passed as an argument or loaded from `),m_e=n(QM,"CODE",{});var gpt=s(m_e);qdr=r(gpt,"pretrained_model_name_or_path"),gpt.forEach(t),Odr=r(QM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g_e=n(QM,"CODE",{});var hpt=s(g_e);Gdr=r(hpt,"pretrained_model_name_or_path"),hpt.forEach(t),Xdr=r(QM,":"),QM.forEach(t),Vdr=i(Ma),ue=n(Ma,"UL",{});var ye=s(ue);hT=n(ye,"LI",{});var V7e=s(hT);h_e=n(V7e,"STRONG",{});var ppt=s(h_e);zdr=r(ppt,"bart"),ppt.forEach(t),Wdr=r(V7e," \u2014 "),yG=n(V7e,"A",{href:!0});var _pt=s(yG);Qdr=r(_pt,"TFBartForConditionalGeneration"),_pt.forEach(t),Hdr=r(V7e," (BART model)"),V7e.forEach(t),Udr=i(ye),pT=n(ye,"LI",{});var z7e=s(pT);p_e=n(z7e,"STRONG",{});var upt=s(p_e);Jdr=r(upt,"blenderbot"),upt.forEach(t),Ydr=r(z7e," \u2014 "),wG=n(z7e,"A",{href:!0});var bpt=s(wG);Kdr=r(bpt,"TFBlenderbotForConditionalGeneration"),bpt.forEach(t),Zdr=r(z7e," (Blenderbot model)"),z7e.forEach(t),ecr=i(ye),_T=n(ye,"LI",{});var W7e=s(_T);__e=n(W7e,"STRONG",{});var vpt=s(__e);ocr=r(vpt,"blenderbot-small"),vpt.forEach(t),rcr=r(W7e," \u2014 "),AG=n(W7e,"A",{href:!0});var Tpt=s(AG);tcr=r(Tpt,"TFBlenderbotSmallForConditionalGeneration"),Tpt.forEach(t),acr=r(W7e," (BlenderbotSmall model)"),W7e.forEach(t),ncr=i(ye),uT=n(ye,"LI",{});var Q7e=s(uT);u_e=n(Q7e,"STRONG",{});var Fpt=s(u_e);scr=r(Fpt,"encoder-decoder"),Fpt.forEach(t),lcr=r(Q7e," \u2014 "),LG=n(Q7e,"A",{href:!0});var Cpt=s(LG);icr=r(Cpt,"TFEncoderDecoderModel"),Cpt.forEach(t),dcr=r(Q7e," (Encoder decoder model)"),Q7e.forEach(t),ccr=i(ye),bT=n(ye,"LI",{});var H7e=s(bT);b_e=n(H7e,"STRONG",{});var Mpt=s(b_e);fcr=r(Mpt,"led"),Mpt.forEach(t),mcr=r(H7e," \u2014 "),BG=n(H7e,"A",{href:!0});var Ept=s(BG);gcr=r(Ept,"TFLEDForConditionalGeneration"),Ept.forEach(t),hcr=r(H7e," (LED model)"),H7e.forEach(t),pcr=i(ye),vT=n(ye,"LI",{});var U7e=s(vT);v_e=n(U7e,"STRONG",{});var ypt=s(v_e);_cr=r(ypt,"marian"),ypt.forEach(t),ucr=r(U7e," \u2014 "),xG=n(U7e,"A",{href:!0});var wpt=s(xG);bcr=r(wpt,"TFMarianMTModel"),wpt.forEach(t),vcr=r(U7e," (Marian model)"),U7e.forEach(t),Tcr=i(ye),TT=n(ye,"LI",{});var J7e=s(TT);T_e=n(J7e,"STRONG",{});var Apt=s(T_e);Fcr=r(Apt,"mbart"),Apt.forEach(t),Ccr=r(J7e," \u2014 "),kG=n(J7e,"A",{href:!0});var Lpt=s(kG);Mcr=r(Lpt,"TFMBartForConditionalGeneration"),Lpt.forEach(t),Ecr=r(J7e," (mBART model)"),J7e.forEach(t),ycr=i(ye),FT=n(ye,"LI",{});var Y7e=s(FT);F_e=n(Y7e,"STRONG",{});var Bpt=s(F_e);wcr=r(Bpt,"mt5"),Bpt.forEach(t),Acr=r(Y7e," \u2014 "),RG=n(Y7e,"A",{href:!0});var xpt=s(RG);Lcr=r(xpt,"TFMT5ForConditionalGeneration"),xpt.forEach(t),Bcr=r(Y7e," (mT5 model)"),Y7e.forEach(t),xcr=i(ye),CT=n(ye,"LI",{});var K7e=s(CT);C_e=n(K7e,"STRONG",{});var kpt=s(C_e);kcr=r(kpt,"pegasus"),kpt.forEach(t),Rcr=r(K7e," \u2014 "),SG=n(K7e,"A",{href:!0});var Rpt=s(SG);Scr=r(Rpt,"TFPegasusForConditionalGeneration"),Rpt.forEach(t),Pcr=r(K7e," (Pegasus model)"),K7e.forEach(t),$cr=i(ye),MT=n(ye,"LI",{});var Z7e=s(MT);M_e=n(Z7e,"STRONG",{});var Spt=s(M_e);Icr=r(Spt,"t5"),Spt.forEach(t),jcr=r(Z7e," \u2014 "),PG=n(Z7e,"A",{href:!0});var Ppt=s(PG);Dcr=r(Ppt,"TFT5ForConditionalGeneration"),Ppt.forEach(t),Ncr=r(Z7e," (T5 model)"),Z7e.forEach(t),ye.forEach(t),qcr=i(Ma),E_e=n(Ma,"P",{});var $pt=s(E_e);Ocr=r($pt,"Examples:"),$pt.forEach(t),Gcr=i(Ma),m(jw.$$.fragment,Ma),Ma.forEach(t),ei.forEach(t),ORe=i(d),Dc=n(d,"H2",{class:!0});var o$e=s(Dc);ET=n(o$e,"A",{id:!0,class:!0,href:!0});var Ipt=s(ET);y_e=n(Ipt,"SPAN",{});var jpt=s(y_e);m(Dw.$$.fragment,jpt),jpt.forEach(t),Ipt.forEach(t),Xcr=i(o$e),w_e=n(o$e,"SPAN",{});var Dpt=s(w_e);Vcr=r(Dpt,"TFAutoModelForSequenceClassification"),Dpt.forEach(t),o$e.forEach(t),GRe=i(d),wr=n(d,"DIV",{class:!0});var ri=s(wr);m(Nw.$$.fragment,ri),zcr=i(ri),Nc=n(ri,"P",{});var gQ=s(Nc);Wcr=r(gQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),A_e=n(gQ,"CODE",{});var Npt=s(A_e);Qcr=r(Npt,"from_pretrained()"),Npt.forEach(t),Hcr=r(gQ,"class method or the "),L_e=n(gQ,"CODE",{});var qpt=s(L_e);Ucr=r(qpt,"from_config()"),qpt.forEach(t),Jcr=r(gQ,`class
method.`),gQ.forEach(t),Ycr=i(ri),qw=n(ri,"P",{});var r$e=s(qw);Kcr=r(r$e,"This class cannot be instantiated directly using "),B_e=n(r$e,"CODE",{});var Opt=s(B_e);Zcr=r(Opt,"__init__()"),Opt.forEach(t),efr=r(r$e," (throws an error)."),r$e.forEach(t),ofr=i(ri),Ft=n(ri,"DIV",{class:!0});var ti=s(Ft);m(Ow.$$.fragment,ti),rfr=i(ti),x_e=n(ti,"P",{});var Gpt=s(x_e);tfr=r(Gpt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Gpt.forEach(t),afr=i(ti),qc=n(ti,"P",{});var hQ=s(qc);nfr=r(hQ,`Note:
Loading a model from its configuration file does `),k_e=n(hQ,"STRONG",{});var Xpt=s(k_e);sfr=r(Xpt,"not"),Xpt.forEach(t),lfr=r(hQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),R_e=n(hQ,"CODE",{});var Vpt=s(R_e);ifr=r(Vpt,"from_pretrained()"),Vpt.forEach(t),dfr=r(hQ,"to load the model weights."),hQ.forEach(t),cfr=i(ti),S_e=n(ti,"P",{});var zpt=s(S_e);ffr=r(zpt,"Examples:"),zpt.forEach(t),mfr=i(ti),m(Gw.$$.fragment,ti),ti.forEach(t),gfr=i(ri),To=n(ri,"DIV",{class:!0});var Ea=s(To);m(Xw.$$.fragment,Ea),hfr=i(Ea),P_e=n(Ea,"P",{});var Wpt=s(P_e);pfr=r(Wpt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Wpt.forEach(t),_fr=i(Ea),wn=n(Ea,"P",{});var HM=s(wn);ufr=r(HM,"The model class to instantiate is selected based on the "),$_e=n(HM,"CODE",{});var Qpt=s($_e);bfr=r(Qpt,"model_type"),Qpt.forEach(t),vfr=r(HM,` property of the config object (either
passed as an argument or loaded from `),I_e=n(HM,"CODE",{});var Hpt=s(I_e);Tfr=r(Hpt,"pretrained_model_name_or_path"),Hpt.forEach(t),Ffr=r(HM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j_e=n(HM,"CODE",{});var Upt=s(j_e);Cfr=r(Upt,"pretrained_model_name_or_path"),Upt.forEach(t),Mfr=r(HM,":"),HM.forEach(t),Efr=i(Ea),V=n(Ea,"UL",{});var W=s(V);yT=n(W,"LI",{});var e9e=s(yT);D_e=n(e9e,"STRONG",{});var Jpt=s(D_e);yfr=r(Jpt,"albert"),Jpt.forEach(t),wfr=r(e9e," \u2014 "),$G=n(e9e,"A",{href:!0});var Ypt=s($G);Afr=r(Ypt,"TFAlbertForSequenceClassification"),Ypt.forEach(t),Lfr=r(e9e," (ALBERT model)"),e9e.forEach(t),Bfr=i(W),wT=n(W,"LI",{});var o9e=s(wT);N_e=n(o9e,"STRONG",{});var Kpt=s(N_e);xfr=r(Kpt,"bert"),Kpt.forEach(t),kfr=r(o9e," \u2014 "),IG=n(o9e,"A",{href:!0});var Zpt=s(IG);Rfr=r(Zpt,"TFBertForSequenceClassification"),Zpt.forEach(t),Sfr=r(o9e," (BERT model)"),o9e.forEach(t),Pfr=i(W),AT=n(W,"LI",{});var r9e=s(AT);q_e=n(r9e,"STRONG",{});var e_t=s(q_e);$fr=r(e_t,"camembert"),e_t.forEach(t),Ifr=r(r9e," \u2014 "),jG=n(r9e,"A",{href:!0});var o_t=s(jG);jfr=r(o_t,"TFCamembertForSequenceClassification"),o_t.forEach(t),Dfr=r(r9e," (CamemBERT model)"),r9e.forEach(t),Nfr=i(W),LT=n(W,"LI",{});var t9e=s(LT);O_e=n(t9e,"STRONG",{});var r_t=s(O_e);qfr=r(r_t,"convbert"),r_t.forEach(t),Ofr=r(t9e," \u2014 "),DG=n(t9e,"A",{href:!0});var t_t=s(DG);Gfr=r(t_t,"TFConvBertForSequenceClassification"),t_t.forEach(t),Xfr=r(t9e," (ConvBERT model)"),t9e.forEach(t),Vfr=i(W),BT=n(W,"LI",{});var a9e=s(BT);G_e=n(a9e,"STRONG",{});var a_t=s(G_e);zfr=r(a_t,"ctrl"),a_t.forEach(t),Wfr=r(a9e," \u2014 "),NG=n(a9e,"A",{href:!0});var n_t=s(NG);Qfr=r(n_t,"TFCTRLForSequenceClassification"),n_t.forEach(t),Hfr=r(a9e," (CTRL model)"),a9e.forEach(t),Ufr=i(W),xT=n(W,"LI",{});var n9e=s(xT);X_e=n(n9e,"STRONG",{});var s_t=s(X_e);Jfr=r(s_t,"deberta"),s_t.forEach(t),Yfr=r(n9e," \u2014 "),qG=n(n9e,"A",{href:!0});var l_t=s(qG);Kfr=r(l_t,"TFDebertaForSequenceClassification"),l_t.forEach(t),Zfr=r(n9e," (DeBERTa model)"),n9e.forEach(t),emr=i(W),kT=n(W,"LI",{});var s9e=s(kT);V_e=n(s9e,"STRONG",{});var i_t=s(V_e);omr=r(i_t,"deberta-v2"),i_t.forEach(t),rmr=r(s9e," \u2014 "),OG=n(s9e,"A",{href:!0});var d_t=s(OG);tmr=r(d_t,"TFDebertaV2ForSequenceClassification"),d_t.forEach(t),amr=r(s9e," (DeBERTa-v2 model)"),s9e.forEach(t),nmr=i(W),RT=n(W,"LI",{});var l9e=s(RT);z_e=n(l9e,"STRONG",{});var c_t=s(z_e);smr=r(c_t,"distilbert"),c_t.forEach(t),lmr=r(l9e," \u2014 "),GG=n(l9e,"A",{href:!0});var f_t=s(GG);imr=r(f_t,"TFDistilBertForSequenceClassification"),f_t.forEach(t),dmr=r(l9e," (DistilBERT model)"),l9e.forEach(t),cmr=i(W),ST=n(W,"LI",{});var i9e=s(ST);W_e=n(i9e,"STRONG",{});var m_t=s(W_e);fmr=r(m_t,"electra"),m_t.forEach(t),mmr=r(i9e," \u2014 "),XG=n(i9e,"A",{href:!0});var g_t=s(XG);gmr=r(g_t,"TFElectraForSequenceClassification"),g_t.forEach(t),hmr=r(i9e," (ELECTRA model)"),i9e.forEach(t),pmr=i(W),PT=n(W,"LI",{});var d9e=s(PT);Q_e=n(d9e,"STRONG",{});var h_t=s(Q_e);_mr=r(h_t,"flaubert"),h_t.forEach(t),umr=r(d9e," \u2014 "),VG=n(d9e,"A",{href:!0});var p_t=s(VG);bmr=r(p_t,"TFFlaubertForSequenceClassification"),p_t.forEach(t),vmr=r(d9e," (FlauBERT model)"),d9e.forEach(t),Tmr=i(W),$T=n(W,"LI",{});var c9e=s($T);H_e=n(c9e,"STRONG",{});var __t=s(H_e);Fmr=r(__t,"funnel"),__t.forEach(t),Cmr=r(c9e," \u2014 "),zG=n(c9e,"A",{href:!0});var u_t=s(zG);Mmr=r(u_t,"TFFunnelForSequenceClassification"),u_t.forEach(t),Emr=r(c9e," (Funnel Transformer model)"),c9e.forEach(t),ymr=i(W),IT=n(W,"LI",{});var f9e=s(IT);U_e=n(f9e,"STRONG",{});var b_t=s(U_e);wmr=r(b_t,"gpt2"),b_t.forEach(t),Amr=r(f9e," \u2014 "),WG=n(f9e,"A",{href:!0});var v_t=s(WG);Lmr=r(v_t,"TFGPT2ForSequenceClassification"),v_t.forEach(t),Bmr=r(f9e," (OpenAI GPT-2 model)"),f9e.forEach(t),xmr=i(W),jT=n(W,"LI",{});var m9e=s(jT);J_e=n(m9e,"STRONG",{});var T_t=s(J_e);kmr=r(T_t,"layoutlm"),T_t.forEach(t),Rmr=r(m9e," \u2014 "),QG=n(m9e,"A",{href:!0});var F_t=s(QG);Smr=r(F_t,"TFLayoutLMForSequenceClassification"),F_t.forEach(t),Pmr=r(m9e," (LayoutLM model)"),m9e.forEach(t),$mr=i(W),DT=n(W,"LI",{});var g9e=s(DT);Y_e=n(g9e,"STRONG",{});var C_t=s(Y_e);Imr=r(C_t,"longformer"),C_t.forEach(t),jmr=r(g9e," \u2014 "),HG=n(g9e,"A",{href:!0});var M_t=s(HG);Dmr=r(M_t,"TFLongformerForSequenceClassification"),M_t.forEach(t),Nmr=r(g9e," (Longformer model)"),g9e.forEach(t),qmr=i(W),NT=n(W,"LI",{});var h9e=s(NT);K_e=n(h9e,"STRONG",{});var E_t=s(K_e);Omr=r(E_t,"mobilebert"),E_t.forEach(t),Gmr=r(h9e," \u2014 "),UG=n(h9e,"A",{href:!0});var y_t=s(UG);Xmr=r(y_t,"TFMobileBertForSequenceClassification"),y_t.forEach(t),Vmr=r(h9e," (MobileBERT model)"),h9e.forEach(t),zmr=i(W),qT=n(W,"LI",{});var p9e=s(qT);Z_e=n(p9e,"STRONG",{});var w_t=s(Z_e);Wmr=r(w_t,"mpnet"),w_t.forEach(t),Qmr=r(p9e," \u2014 "),JG=n(p9e,"A",{href:!0});var A_t=s(JG);Hmr=r(A_t,"TFMPNetForSequenceClassification"),A_t.forEach(t),Umr=r(p9e," (MPNet model)"),p9e.forEach(t),Jmr=i(W),OT=n(W,"LI",{});var _9e=s(OT);eue=n(_9e,"STRONG",{});var L_t=s(eue);Ymr=r(L_t,"openai-gpt"),L_t.forEach(t),Kmr=r(_9e," \u2014 "),YG=n(_9e,"A",{href:!0});var B_t=s(YG);Zmr=r(B_t,"TFOpenAIGPTForSequenceClassification"),B_t.forEach(t),egr=r(_9e," (OpenAI GPT model)"),_9e.forEach(t),ogr=i(W),GT=n(W,"LI",{});var u9e=s(GT);oue=n(u9e,"STRONG",{});var x_t=s(oue);rgr=r(x_t,"rembert"),x_t.forEach(t),tgr=r(u9e," \u2014 "),KG=n(u9e,"A",{href:!0});var k_t=s(KG);agr=r(k_t,"TFRemBertForSequenceClassification"),k_t.forEach(t),ngr=r(u9e," (RemBERT model)"),u9e.forEach(t),sgr=i(W),XT=n(W,"LI",{});var b9e=s(XT);rue=n(b9e,"STRONG",{});var R_t=s(rue);lgr=r(R_t,"roberta"),R_t.forEach(t),igr=r(b9e," \u2014 "),ZG=n(b9e,"A",{href:!0});var S_t=s(ZG);dgr=r(S_t,"TFRobertaForSequenceClassification"),S_t.forEach(t),cgr=r(b9e," (RoBERTa model)"),b9e.forEach(t),fgr=i(W),VT=n(W,"LI",{});var v9e=s(VT);tue=n(v9e,"STRONG",{});var P_t=s(tue);mgr=r(P_t,"roformer"),P_t.forEach(t),ggr=r(v9e," \u2014 "),eX=n(v9e,"A",{href:!0});var $_t=s(eX);hgr=r($_t,"TFRoFormerForSequenceClassification"),$_t.forEach(t),pgr=r(v9e," (RoFormer model)"),v9e.forEach(t),_gr=i(W),zT=n(W,"LI",{});var T9e=s(zT);aue=n(T9e,"STRONG",{});var I_t=s(aue);ugr=r(I_t,"tapas"),I_t.forEach(t),bgr=r(T9e," \u2014 "),oX=n(T9e,"A",{href:!0});var j_t=s(oX);vgr=r(j_t,"TFTapasForSequenceClassification"),j_t.forEach(t),Tgr=r(T9e," (TAPAS model)"),T9e.forEach(t),Fgr=i(W),WT=n(W,"LI",{});var F9e=s(WT);nue=n(F9e,"STRONG",{});var D_t=s(nue);Cgr=r(D_t,"transfo-xl"),D_t.forEach(t),Mgr=r(F9e," \u2014 "),rX=n(F9e,"A",{href:!0});var N_t=s(rX);Egr=r(N_t,"TFTransfoXLForSequenceClassification"),N_t.forEach(t),ygr=r(F9e," (Transformer-XL model)"),F9e.forEach(t),wgr=i(W),QT=n(W,"LI",{});var C9e=s(QT);sue=n(C9e,"STRONG",{});var q_t=s(sue);Agr=r(q_t,"xlm"),q_t.forEach(t),Lgr=r(C9e," \u2014 "),tX=n(C9e,"A",{href:!0});var O_t=s(tX);Bgr=r(O_t,"TFXLMForSequenceClassification"),O_t.forEach(t),xgr=r(C9e," (XLM model)"),C9e.forEach(t),kgr=i(W),HT=n(W,"LI",{});var M9e=s(HT);lue=n(M9e,"STRONG",{});var G_t=s(lue);Rgr=r(G_t,"xlm-roberta"),G_t.forEach(t),Sgr=r(M9e," \u2014 "),aX=n(M9e,"A",{href:!0});var X_t=s(aX);Pgr=r(X_t,"TFXLMRobertaForSequenceClassification"),X_t.forEach(t),$gr=r(M9e," (XLM-RoBERTa model)"),M9e.forEach(t),Igr=i(W),UT=n(W,"LI",{});var E9e=s(UT);iue=n(E9e,"STRONG",{});var V_t=s(iue);jgr=r(V_t,"xlnet"),V_t.forEach(t),Dgr=r(E9e," \u2014 "),nX=n(E9e,"A",{href:!0});var z_t=s(nX);Ngr=r(z_t,"TFXLNetForSequenceClassification"),z_t.forEach(t),qgr=r(E9e," (XLNet model)"),E9e.forEach(t),W.forEach(t),Ogr=i(Ea),due=n(Ea,"P",{});var W_t=s(due);Ggr=r(W_t,"Examples:"),W_t.forEach(t),Xgr=i(Ea),m(Vw.$$.fragment,Ea),Ea.forEach(t),ri.forEach(t),XRe=i(d),Oc=n(d,"H2",{class:!0});var t$e=s(Oc);JT=n(t$e,"A",{id:!0,class:!0,href:!0});var Q_t=s(JT);cue=n(Q_t,"SPAN",{});var H_t=s(cue);m(zw.$$.fragment,H_t),H_t.forEach(t),Q_t.forEach(t),Vgr=i(t$e),fue=n(t$e,"SPAN",{});var U_t=s(fue);zgr=r(U_t,"TFAutoModelForMultipleChoice"),U_t.forEach(t),t$e.forEach(t),VRe=i(d),Ar=n(d,"DIV",{class:!0});var ai=s(Ar);m(Ww.$$.fragment,ai),Wgr=i(ai),Gc=n(ai,"P",{});var pQ=s(Gc);Qgr=r(pQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),mue=n(pQ,"CODE",{});var J_t=s(mue);Hgr=r(J_t,"from_pretrained()"),J_t.forEach(t),Ugr=r(pQ,"class method or the "),gue=n(pQ,"CODE",{});var Y_t=s(gue);Jgr=r(Y_t,"from_config()"),Y_t.forEach(t),Ygr=r(pQ,`class
method.`),pQ.forEach(t),Kgr=i(ai),Qw=n(ai,"P",{});var a$e=s(Qw);Zgr=r(a$e,"This class cannot be instantiated directly using "),hue=n(a$e,"CODE",{});var K_t=s(hue);ehr=r(K_t,"__init__()"),K_t.forEach(t),ohr=r(a$e," (throws an error)."),a$e.forEach(t),rhr=i(ai),Ct=n(ai,"DIV",{class:!0});var ni=s(Ct);m(Hw.$$.fragment,ni),thr=i(ni),pue=n(ni,"P",{});var Z_t=s(pue);ahr=r(Z_t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Z_t.forEach(t),nhr=i(ni),Xc=n(ni,"P",{});var _Q=s(Xc);shr=r(_Q,`Note:
Loading a model from its configuration file does `),_ue=n(_Q,"STRONG",{});var eut=s(_ue);lhr=r(eut,"not"),eut.forEach(t),ihr=r(_Q,` load the model weights. It only affects the
model\u2019s configuration. Use `),uue=n(_Q,"CODE",{});var out=s(uue);dhr=r(out,"from_pretrained()"),out.forEach(t),chr=r(_Q,"to load the model weights."),_Q.forEach(t),fhr=i(ni),bue=n(ni,"P",{});var rut=s(bue);mhr=r(rut,"Examples:"),rut.forEach(t),ghr=i(ni),m(Uw.$$.fragment,ni),ni.forEach(t),hhr=i(ai),Fo=n(ai,"DIV",{class:!0});var ya=s(Fo);m(Jw.$$.fragment,ya),phr=i(ya),vue=n(ya,"P",{});var tut=s(vue);_hr=r(tut,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),tut.forEach(t),uhr=i(ya),An=n(ya,"P",{});var UM=s(An);bhr=r(UM,"The model class to instantiate is selected based on the "),Tue=n(UM,"CODE",{});var aut=s(Tue);vhr=r(aut,"model_type"),aut.forEach(t),Thr=r(UM,` property of the config object (either
passed as an argument or loaded from `),Fue=n(UM,"CODE",{});var nut=s(Fue);Fhr=r(nut,"pretrained_model_name_or_path"),nut.forEach(t),Chr=r(UM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cue=n(UM,"CODE",{});var sut=s(Cue);Mhr=r(sut,"pretrained_model_name_or_path"),sut.forEach(t),Ehr=r(UM,":"),UM.forEach(t),yhr=i(ya),ae=n(ya,"UL",{});var le=s(ae);YT=n(le,"LI",{});var y9e=s(YT);Mue=n(y9e,"STRONG",{});var lut=s(Mue);whr=r(lut,"albert"),lut.forEach(t),Ahr=r(y9e," \u2014 "),sX=n(y9e,"A",{href:!0});var iut=s(sX);Lhr=r(iut,"TFAlbertForMultipleChoice"),iut.forEach(t),Bhr=r(y9e," (ALBERT model)"),y9e.forEach(t),xhr=i(le),KT=n(le,"LI",{});var w9e=s(KT);Eue=n(w9e,"STRONG",{});var dut=s(Eue);khr=r(dut,"bert"),dut.forEach(t),Rhr=r(w9e," \u2014 "),lX=n(w9e,"A",{href:!0});var cut=s(lX);Shr=r(cut,"TFBertForMultipleChoice"),cut.forEach(t),Phr=r(w9e," (BERT model)"),w9e.forEach(t),$hr=i(le),ZT=n(le,"LI",{});var A9e=s(ZT);yue=n(A9e,"STRONG",{});var fut=s(yue);Ihr=r(fut,"camembert"),fut.forEach(t),jhr=r(A9e," \u2014 "),iX=n(A9e,"A",{href:!0});var mut=s(iX);Dhr=r(mut,"TFCamembertForMultipleChoice"),mut.forEach(t),Nhr=r(A9e," (CamemBERT model)"),A9e.forEach(t),qhr=i(le),e8=n(le,"LI",{});var L9e=s(e8);wue=n(L9e,"STRONG",{});var gut=s(wue);Ohr=r(gut,"convbert"),gut.forEach(t),Ghr=r(L9e," \u2014 "),dX=n(L9e,"A",{href:!0});var hut=s(dX);Xhr=r(hut,"TFConvBertForMultipleChoice"),hut.forEach(t),Vhr=r(L9e," (ConvBERT model)"),L9e.forEach(t),zhr=i(le),o8=n(le,"LI",{});var B9e=s(o8);Aue=n(B9e,"STRONG",{});var put=s(Aue);Whr=r(put,"distilbert"),put.forEach(t),Qhr=r(B9e," \u2014 "),cX=n(B9e,"A",{href:!0});var _ut=s(cX);Hhr=r(_ut,"TFDistilBertForMultipleChoice"),_ut.forEach(t),Uhr=r(B9e," (DistilBERT model)"),B9e.forEach(t),Jhr=i(le),r8=n(le,"LI",{});var x9e=s(r8);Lue=n(x9e,"STRONG",{});var uut=s(Lue);Yhr=r(uut,"electra"),uut.forEach(t),Khr=r(x9e," \u2014 "),fX=n(x9e,"A",{href:!0});var but=s(fX);Zhr=r(but,"TFElectraForMultipleChoice"),but.forEach(t),epr=r(x9e," (ELECTRA model)"),x9e.forEach(t),opr=i(le),t8=n(le,"LI",{});var k9e=s(t8);Bue=n(k9e,"STRONG",{});var vut=s(Bue);rpr=r(vut,"flaubert"),vut.forEach(t),tpr=r(k9e," \u2014 "),mX=n(k9e,"A",{href:!0});var Tut=s(mX);apr=r(Tut,"TFFlaubertForMultipleChoice"),Tut.forEach(t),npr=r(k9e," (FlauBERT model)"),k9e.forEach(t),spr=i(le),a8=n(le,"LI",{});var R9e=s(a8);xue=n(R9e,"STRONG",{});var Fut=s(xue);lpr=r(Fut,"funnel"),Fut.forEach(t),ipr=r(R9e," \u2014 "),gX=n(R9e,"A",{href:!0});var Cut=s(gX);dpr=r(Cut,"TFFunnelForMultipleChoice"),Cut.forEach(t),cpr=r(R9e," (Funnel Transformer model)"),R9e.forEach(t),fpr=i(le),n8=n(le,"LI",{});var S9e=s(n8);kue=n(S9e,"STRONG",{});var Mut=s(kue);mpr=r(Mut,"longformer"),Mut.forEach(t),gpr=r(S9e," \u2014 "),hX=n(S9e,"A",{href:!0});var Eut=s(hX);hpr=r(Eut,"TFLongformerForMultipleChoice"),Eut.forEach(t),ppr=r(S9e," (Longformer model)"),S9e.forEach(t),_pr=i(le),s8=n(le,"LI",{});var P9e=s(s8);Rue=n(P9e,"STRONG",{});var yut=s(Rue);upr=r(yut,"mobilebert"),yut.forEach(t),bpr=r(P9e," \u2014 "),pX=n(P9e,"A",{href:!0});var wut=s(pX);vpr=r(wut,"TFMobileBertForMultipleChoice"),wut.forEach(t),Tpr=r(P9e," (MobileBERT model)"),P9e.forEach(t),Fpr=i(le),l8=n(le,"LI",{});var $9e=s(l8);Sue=n($9e,"STRONG",{});var Aut=s(Sue);Cpr=r(Aut,"mpnet"),Aut.forEach(t),Mpr=r($9e," \u2014 "),_X=n($9e,"A",{href:!0});var Lut=s(_X);Epr=r(Lut,"TFMPNetForMultipleChoice"),Lut.forEach(t),ypr=r($9e," (MPNet model)"),$9e.forEach(t),wpr=i(le),i8=n(le,"LI",{});var I9e=s(i8);Pue=n(I9e,"STRONG",{});var But=s(Pue);Apr=r(But,"rembert"),But.forEach(t),Lpr=r(I9e," \u2014 "),uX=n(I9e,"A",{href:!0});var xut=s(uX);Bpr=r(xut,"TFRemBertForMultipleChoice"),xut.forEach(t),xpr=r(I9e," (RemBERT model)"),I9e.forEach(t),kpr=i(le),d8=n(le,"LI",{});var j9e=s(d8);$ue=n(j9e,"STRONG",{});var kut=s($ue);Rpr=r(kut,"roberta"),kut.forEach(t),Spr=r(j9e," \u2014 "),bX=n(j9e,"A",{href:!0});var Rut=s(bX);Ppr=r(Rut,"TFRobertaForMultipleChoice"),Rut.forEach(t),$pr=r(j9e," (RoBERTa model)"),j9e.forEach(t),Ipr=i(le),c8=n(le,"LI",{});var D9e=s(c8);Iue=n(D9e,"STRONG",{});var Sut=s(Iue);jpr=r(Sut,"roformer"),Sut.forEach(t),Dpr=r(D9e," \u2014 "),vX=n(D9e,"A",{href:!0});var Put=s(vX);Npr=r(Put,"TFRoFormerForMultipleChoice"),Put.forEach(t),qpr=r(D9e," (RoFormer model)"),D9e.forEach(t),Opr=i(le),f8=n(le,"LI",{});var N9e=s(f8);jue=n(N9e,"STRONG",{});var $ut=s(jue);Gpr=r($ut,"xlm"),$ut.forEach(t),Xpr=r(N9e," \u2014 "),TX=n(N9e,"A",{href:!0});var Iut=s(TX);Vpr=r(Iut,"TFXLMForMultipleChoice"),Iut.forEach(t),zpr=r(N9e," (XLM model)"),N9e.forEach(t),Wpr=i(le),m8=n(le,"LI",{});var q9e=s(m8);Due=n(q9e,"STRONG",{});var jut=s(Due);Qpr=r(jut,"xlm-roberta"),jut.forEach(t),Hpr=r(q9e," \u2014 "),FX=n(q9e,"A",{href:!0});var Dut=s(FX);Upr=r(Dut,"TFXLMRobertaForMultipleChoice"),Dut.forEach(t),Jpr=r(q9e," (XLM-RoBERTa model)"),q9e.forEach(t),Ypr=i(le),g8=n(le,"LI",{});var O9e=s(g8);Nue=n(O9e,"STRONG",{});var Nut=s(Nue);Kpr=r(Nut,"xlnet"),Nut.forEach(t),Zpr=r(O9e," \u2014 "),CX=n(O9e,"A",{href:!0});var qut=s(CX);e_r=r(qut,"TFXLNetForMultipleChoice"),qut.forEach(t),o_r=r(O9e," (XLNet model)"),O9e.forEach(t),le.forEach(t),r_r=i(ya),que=n(ya,"P",{});var Out=s(que);t_r=r(Out,"Examples:"),Out.forEach(t),a_r=i(ya),m(Yw.$$.fragment,ya),ya.forEach(t),ai.forEach(t),zRe=i(d),Vc=n(d,"H2",{class:!0});var n$e=s(Vc);h8=n(n$e,"A",{id:!0,class:!0,href:!0});var Gut=s(h8);Oue=n(Gut,"SPAN",{});var Xut=s(Oue);m(Kw.$$.fragment,Xut),Xut.forEach(t),Gut.forEach(t),n_r=i(n$e),Gue=n(n$e,"SPAN",{});var Vut=s(Gue);s_r=r(Vut,"TFAutoModelForTableQuestionAnswering"),Vut.forEach(t),n$e.forEach(t),WRe=i(d),Lr=n(d,"DIV",{class:!0});var si=s(Lr);m(Zw.$$.fragment,si),l_r=i(si),zc=n(si,"P",{});var uQ=s(zc);i_r=r(uQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Xue=n(uQ,"CODE",{});var zut=s(Xue);d_r=r(zut,"from_pretrained()"),zut.forEach(t),c_r=r(uQ,"class method or the "),Vue=n(uQ,"CODE",{});var Wut=s(Vue);f_r=r(Wut,"from_config()"),Wut.forEach(t),m_r=r(uQ,`class
method.`),uQ.forEach(t),g_r=i(si),eA=n(si,"P",{});var s$e=s(eA);h_r=r(s$e,"This class cannot be instantiated directly using "),zue=n(s$e,"CODE",{});var Qut=s(zue);p_r=r(Qut,"__init__()"),Qut.forEach(t),__r=r(s$e," (throws an error)."),s$e.forEach(t),u_r=i(si),Mt=n(si,"DIV",{class:!0});var li=s(Mt);m(oA.$$.fragment,li),b_r=i(li),Wue=n(li,"P",{});var Hut=s(Wue);v_r=r(Hut,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Hut.forEach(t),T_r=i(li),Wc=n(li,"P",{});var bQ=s(Wc);F_r=r(bQ,`Note:
Loading a model from its configuration file does `),Que=n(bQ,"STRONG",{});var Uut=s(Que);C_r=r(Uut,"not"),Uut.forEach(t),M_r=r(bQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hue=n(bQ,"CODE",{});var Jut=s(Hue);E_r=r(Jut,"from_pretrained()"),Jut.forEach(t),y_r=r(bQ,"to load the model weights."),bQ.forEach(t),w_r=i(li),Uue=n(li,"P",{});var Yut=s(Uue);A_r=r(Yut,"Examples:"),Yut.forEach(t),L_r=i(li),m(rA.$$.fragment,li),li.forEach(t),B_r=i(si),Co=n(si,"DIV",{class:!0});var wa=s(Co);m(tA.$$.fragment,wa),x_r=i(wa),Jue=n(wa,"P",{});var Kut=s(Jue);k_r=r(Kut,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Kut.forEach(t),R_r=i(wa),Ln=n(wa,"P",{});var JM=s(Ln);S_r=r(JM,"The model class to instantiate is selected based on the "),Yue=n(JM,"CODE",{});var Zut=s(Yue);P_r=r(Zut,"model_type"),Zut.forEach(t),$_r=r(JM,` property of the config object (either
passed as an argument or loaded from `),Kue=n(JM,"CODE",{});var e1t=s(Kue);I_r=r(e1t,"pretrained_model_name_or_path"),e1t.forEach(t),j_r=r(JM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zue=n(JM,"CODE",{});var o1t=s(Zue);D_r=r(o1t,"pretrained_model_name_or_path"),o1t.forEach(t),N_r=r(JM,":"),JM.forEach(t),q_r=i(wa),e1e=n(wa,"UL",{});var r1t=s(e1e);p8=n(r1t,"LI",{});var G9e=s(p8);o1e=n(G9e,"STRONG",{});var t1t=s(o1e);O_r=r(t1t,"tapas"),t1t.forEach(t),G_r=r(G9e," \u2014 "),MX=n(G9e,"A",{href:!0});var a1t=s(MX);X_r=r(a1t,"TFTapasForQuestionAnswering"),a1t.forEach(t),V_r=r(G9e," (TAPAS model)"),G9e.forEach(t),r1t.forEach(t),z_r=i(wa),r1e=n(wa,"P",{});var n1t=s(r1e);W_r=r(n1t,"Examples:"),n1t.forEach(t),Q_r=i(wa),m(aA.$$.fragment,wa),wa.forEach(t),si.forEach(t),QRe=i(d),Qc=n(d,"H2",{class:!0});var l$e=s(Qc);_8=n(l$e,"A",{id:!0,class:!0,href:!0});var s1t=s(_8);t1e=n(s1t,"SPAN",{});var l1t=s(t1e);m(nA.$$.fragment,l1t),l1t.forEach(t),s1t.forEach(t),H_r=i(l$e),a1e=n(l$e,"SPAN",{});var i1t=s(a1e);U_r=r(i1t,"TFAutoModelForTokenClassification"),i1t.forEach(t),l$e.forEach(t),HRe=i(d),Br=n(d,"DIV",{class:!0});var ii=s(Br);m(sA.$$.fragment,ii),J_r=i(ii),Hc=n(ii,"P",{});var vQ=s(Hc);Y_r=r(vQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),n1e=n(vQ,"CODE",{});var d1t=s(n1e);K_r=r(d1t,"from_pretrained()"),d1t.forEach(t),Z_r=r(vQ,"class method or the "),s1e=n(vQ,"CODE",{});var c1t=s(s1e);eur=r(c1t,"from_config()"),c1t.forEach(t),our=r(vQ,`class
method.`),vQ.forEach(t),rur=i(ii),lA=n(ii,"P",{});var i$e=s(lA);tur=r(i$e,"This class cannot be instantiated directly using "),l1e=n(i$e,"CODE",{});var f1t=s(l1e);aur=r(f1t,"__init__()"),f1t.forEach(t),nur=r(i$e," (throws an error)."),i$e.forEach(t),sur=i(ii),Et=n(ii,"DIV",{class:!0});var di=s(Et);m(iA.$$.fragment,di),lur=i(di),i1e=n(di,"P",{});var m1t=s(i1e);iur=r(m1t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),m1t.forEach(t),dur=i(di),Uc=n(di,"P",{});var TQ=s(Uc);cur=r(TQ,`Note:
Loading a model from its configuration file does `),d1e=n(TQ,"STRONG",{});var g1t=s(d1e);fur=r(g1t,"not"),g1t.forEach(t),mur=r(TQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),c1e=n(TQ,"CODE",{});var h1t=s(c1e);gur=r(h1t,"from_pretrained()"),h1t.forEach(t),hur=r(TQ,"to load the model weights."),TQ.forEach(t),pur=i(di),f1e=n(di,"P",{});var p1t=s(f1e);_ur=r(p1t,"Examples:"),p1t.forEach(t),uur=i(di),m(dA.$$.fragment,di),di.forEach(t),bur=i(ii),Mo=n(ii,"DIV",{class:!0});var Aa=s(Mo);m(cA.$$.fragment,Aa),vur=i(Aa),m1e=n(Aa,"P",{});var _1t=s(m1e);Tur=r(_1t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),_1t.forEach(t),Fur=i(Aa),Bn=n(Aa,"P",{});var YM=s(Bn);Cur=r(YM,"The model class to instantiate is selected based on the "),g1e=n(YM,"CODE",{});var u1t=s(g1e);Mur=r(u1t,"model_type"),u1t.forEach(t),Eur=r(YM,` property of the config object (either
passed as an argument or loaded from `),h1e=n(YM,"CODE",{});var b1t=s(h1e);yur=r(b1t,"pretrained_model_name_or_path"),b1t.forEach(t),wur=r(YM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p1e=n(YM,"CODE",{});var v1t=s(p1e);Aur=r(v1t,"pretrained_model_name_or_path"),v1t.forEach(t),Lur=r(YM,":"),YM.forEach(t),Bur=i(Aa),K=n(Aa,"UL",{});var oe=s(K);u8=n(oe,"LI",{});var X9e=s(u8);_1e=n(X9e,"STRONG",{});var T1t=s(_1e);xur=r(T1t,"albert"),T1t.forEach(t),kur=r(X9e," \u2014 "),EX=n(X9e,"A",{href:!0});var F1t=s(EX);Rur=r(F1t,"TFAlbertForTokenClassification"),F1t.forEach(t),Sur=r(X9e," (ALBERT model)"),X9e.forEach(t),Pur=i(oe),b8=n(oe,"LI",{});var V9e=s(b8);u1e=n(V9e,"STRONG",{});var C1t=s(u1e);$ur=r(C1t,"bert"),C1t.forEach(t),Iur=r(V9e," \u2014 "),yX=n(V9e,"A",{href:!0});var M1t=s(yX);jur=r(M1t,"TFBertForTokenClassification"),M1t.forEach(t),Dur=r(V9e," (BERT model)"),V9e.forEach(t),Nur=i(oe),v8=n(oe,"LI",{});var z9e=s(v8);b1e=n(z9e,"STRONG",{});var E1t=s(b1e);qur=r(E1t,"camembert"),E1t.forEach(t),Our=r(z9e," \u2014 "),wX=n(z9e,"A",{href:!0});var y1t=s(wX);Gur=r(y1t,"TFCamembertForTokenClassification"),y1t.forEach(t),Xur=r(z9e," (CamemBERT model)"),z9e.forEach(t),Vur=i(oe),T8=n(oe,"LI",{});var W9e=s(T8);v1e=n(W9e,"STRONG",{});var w1t=s(v1e);zur=r(w1t,"convbert"),w1t.forEach(t),Wur=r(W9e," \u2014 "),AX=n(W9e,"A",{href:!0});var A1t=s(AX);Qur=r(A1t,"TFConvBertForTokenClassification"),A1t.forEach(t),Hur=r(W9e," (ConvBERT model)"),W9e.forEach(t),Uur=i(oe),F8=n(oe,"LI",{});var Q9e=s(F8);T1e=n(Q9e,"STRONG",{});var L1t=s(T1e);Jur=r(L1t,"deberta"),L1t.forEach(t),Yur=r(Q9e," \u2014 "),LX=n(Q9e,"A",{href:!0});var B1t=s(LX);Kur=r(B1t,"TFDebertaForTokenClassification"),B1t.forEach(t),Zur=r(Q9e," (DeBERTa model)"),Q9e.forEach(t),e1r=i(oe),C8=n(oe,"LI",{});var H9e=s(C8);F1e=n(H9e,"STRONG",{});var x1t=s(F1e);o1r=r(x1t,"deberta-v2"),x1t.forEach(t),r1r=r(H9e," \u2014 "),BX=n(H9e,"A",{href:!0});var k1t=s(BX);t1r=r(k1t,"TFDebertaV2ForTokenClassification"),k1t.forEach(t),a1r=r(H9e," (DeBERTa-v2 model)"),H9e.forEach(t),n1r=i(oe),M8=n(oe,"LI",{});var U9e=s(M8);C1e=n(U9e,"STRONG",{});var R1t=s(C1e);s1r=r(R1t,"distilbert"),R1t.forEach(t),l1r=r(U9e," \u2014 "),xX=n(U9e,"A",{href:!0});var S1t=s(xX);i1r=r(S1t,"TFDistilBertForTokenClassification"),S1t.forEach(t),d1r=r(U9e," (DistilBERT model)"),U9e.forEach(t),c1r=i(oe),E8=n(oe,"LI",{});var J9e=s(E8);M1e=n(J9e,"STRONG",{});var P1t=s(M1e);f1r=r(P1t,"electra"),P1t.forEach(t),m1r=r(J9e," \u2014 "),kX=n(J9e,"A",{href:!0});var $1t=s(kX);g1r=r($1t,"TFElectraForTokenClassification"),$1t.forEach(t),h1r=r(J9e," (ELECTRA model)"),J9e.forEach(t),p1r=i(oe),y8=n(oe,"LI",{});var Y9e=s(y8);E1e=n(Y9e,"STRONG",{});var I1t=s(E1e);_1r=r(I1t,"flaubert"),I1t.forEach(t),u1r=r(Y9e," \u2014 "),RX=n(Y9e,"A",{href:!0});var j1t=s(RX);b1r=r(j1t,"TFFlaubertForTokenClassification"),j1t.forEach(t),v1r=r(Y9e," (FlauBERT model)"),Y9e.forEach(t),T1r=i(oe),w8=n(oe,"LI",{});var K9e=s(w8);y1e=n(K9e,"STRONG",{});var D1t=s(y1e);F1r=r(D1t,"funnel"),D1t.forEach(t),C1r=r(K9e," \u2014 "),SX=n(K9e,"A",{href:!0});var N1t=s(SX);M1r=r(N1t,"TFFunnelForTokenClassification"),N1t.forEach(t),E1r=r(K9e," (Funnel Transformer model)"),K9e.forEach(t),y1r=i(oe),A8=n(oe,"LI",{});var Z9e=s(A8);w1e=n(Z9e,"STRONG",{});var q1t=s(w1e);w1r=r(q1t,"layoutlm"),q1t.forEach(t),A1r=r(Z9e," \u2014 "),PX=n(Z9e,"A",{href:!0});var O1t=s(PX);L1r=r(O1t,"TFLayoutLMForTokenClassification"),O1t.forEach(t),B1r=r(Z9e," (LayoutLM model)"),Z9e.forEach(t),x1r=i(oe),L8=n(oe,"LI",{});var eBe=s(L8);A1e=n(eBe,"STRONG",{});var G1t=s(A1e);k1r=r(G1t,"longformer"),G1t.forEach(t),R1r=r(eBe," \u2014 "),$X=n(eBe,"A",{href:!0});var X1t=s($X);S1r=r(X1t,"TFLongformerForTokenClassification"),X1t.forEach(t),P1r=r(eBe," (Longformer model)"),eBe.forEach(t),$1r=i(oe),B8=n(oe,"LI",{});var oBe=s(B8);L1e=n(oBe,"STRONG",{});var V1t=s(L1e);I1r=r(V1t,"mobilebert"),V1t.forEach(t),j1r=r(oBe," \u2014 "),IX=n(oBe,"A",{href:!0});var z1t=s(IX);D1r=r(z1t,"TFMobileBertForTokenClassification"),z1t.forEach(t),N1r=r(oBe," (MobileBERT model)"),oBe.forEach(t),q1r=i(oe),x8=n(oe,"LI",{});var rBe=s(x8);B1e=n(rBe,"STRONG",{});var W1t=s(B1e);O1r=r(W1t,"mpnet"),W1t.forEach(t),G1r=r(rBe," \u2014 "),jX=n(rBe,"A",{href:!0});var Q1t=s(jX);X1r=r(Q1t,"TFMPNetForTokenClassification"),Q1t.forEach(t),V1r=r(rBe," (MPNet model)"),rBe.forEach(t),z1r=i(oe),k8=n(oe,"LI",{});var tBe=s(k8);x1e=n(tBe,"STRONG",{});var H1t=s(x1e);W1r=r(H1t,"rembert"),H1t.forEach(t),Q1r=r(tBe," \u2014 "),DX=n(tBe,"A",{href:!0});var U1t=s(DX);H1r=r(U1t,"TFRemBertForTokenClassification"),U1t.forEach(t),U1r=r(tBe," (RemBERT model)"),tBe.forEach(t),J1r=i(oe),R8=n(oe,"LI",{});var aBe=s(R8);k1e=n(aBe,"STRONG",{});var J1t=s(k1e);Y1r=r(J1t,"roberta"),J1t.forEach(t),K1r=r(aBe," \u2014 "),NX=n(aBe,"A",{href:!0});var Y1t=s(NX);Z1r=r(Y1t,"TFRobertaForTokenClassification"),Y1t.forEach(t),ebr=r(aBe," (RoBERTa model)"),aBe.forEach(t),obr=i(oe),S8=n(oe,"LI",{});var nBe=s(S8);R1e=n(nBe,"STRONG",{});var K1t=s(R1e);rbr=r(K1t,"roformer"),K1t.forEach(t),tbr=r(nBe," \u2014 "),qX=n(nBe,"A",{href:!0});var Z1t=s(qX);abr=r(Z1t,"TFRoFormerForTokenClassification"),Z1t.forEach(t),nbr=r(nBe," (RoFormer model)"),nBe.forEach(t),sbr=i(oe),P8=n(oe,"LI",{});var sBe=s(P8);S1e=n(sBe,"STRONG",{});var ebt=s(S1e);lbr=r(ebt,"xlm"),ebt.forEach(t),ibr=r(sBe," \u2014 "),OX=n(sBe,"A",{href:!0});var obt=s(OX);dbr=r(obt,"TFXLMForTokenClassification"),obt.forEach(t),cbr=r(sBe," (XLM model)"),sBe.forEach(t),fbr=i(oe),$8=n(oe,"LI",{});var lBe=s($8);P1e=n(lBe,"STRONG",{});var rbt=s(P1e);mbr=r(rbt,"xlm-roberta"),rbt.forEach(t),gbr=r(lBe," \u2014 "),GX=n(lBe,"A",{href:!0});var tbt=s(GX);hbr=r(tbt,"TFXLMRobertaForTokenClassification"),tbt.forEach(t),pbr=r(lBe," (XLM-RoBERTa model)"),lBe.forEach(t),_br=i(oe),I8=n(oe,"LI",{});var iBe=s(I8);$1e=n(iBe,"STRONG",{});var abt=s($1e);ubr=r(abt,"xlnet"),abt.forEach(t),bbr=r(iBe," \u2014 "),XX=n(iBe,"A",{href:!0});var nbt=s(XX);vbr=r(nbt,"TFXLNetForTokenClassification"),nbt.forEach(t),Tbr=r(iBe," (XLNet model)"),iBe.forEach(t),oe.forEach(t),Fbr=i(Aa),I1e=n(Aa,"P",{});var sbt=s(I1e);Cbr=r(sbt,"Examples:"),sbt.forEach(t),Mbr=i(Aa),m(fA.$$.fragment,Aa),Aa.forEach(t),ii.forEach(t),URe=i(d),Jc=n(d,"H2",{class:!0});var d$e=s(Jc);j8=n(d$e,"A",{id:!0,class:!0,href:!0});var lbt=s(j8);j1e=n(lbt,"SPAN",{});var ibt=s(j1e);m(mA.$$.fragment,ibt),ibt.forEach(t),lbt.forEach(t),Ebr=i(d$e),D1e=n(d$e,"SPAN",{});var dbt=s(D1e);ybr=r(dbt,"TFAutoModelForQuestionAnswering"),dbt.forEach(t),d$e.forEach(t),JRe=i(d),xr=n(d,"DIV",{class:!0});var ci=s(xr);m(gA.$$.fragment,ci),wbr=i(ci),Yc=n(ci,"P",{});var FQ=s(Yc);Abr=r(FQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),N1e=n(FQ,"CODE",{});var cbt=s(N1e);Lbr=r(cbt,"from_pretrained()"),cbt.forEach(t),Bbr=r(FQ,"class method or the "),q1e=n(FQ,"CODE",{});var fbt=s(q1e);xbr=r(fbt,"from_config()"),fbt.forEach(t),kbr=r(FQ,`class
method.`),FQ.forEach(t),Rbr=i(ci),hA=n(ci,"P",{});var c$e=s(hA);Sbr=r(c$e,"This class cannot be instantiated directly using "),O1e=n(c$e,"CODE",{});var mbt=s(O1e);Pbr=r(mbt,"__init__()"),mbt.forEach(t),$br=r(c$e," (throws an error)."),c$e.forEach(t),Ibr=i(ci),yt=n(ci,"DIV",{class:!0});var fi=s(yt);m(pA.$$.fragment,fi),jbr=i(fi),G1e=n(fi,"P",{});var gbt=s(G1e);Dbr=r(gbt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),gbt.forEach(t),Nbr=i(fi),Kc=n(fi,"P",{});var CQ=s(Kc);qbr=r(CQ,`Note:
Loading a model from its configuration file does `),X1e=n(CQ,"STRONG",{});var hbt=s(X1e);Obr=r(hbt,"not"),hbt.forEach(t),Gbr=r(CQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),V1e=n(CQ,"CODE",{});var pbt=s(V1e);Xbr=r(pbt,"from_pretrained()"),pbt.forEach(t),Vbr=r(CQ,"to load the model weights."),CQ.forEach(t),zbr=i(fi),z1e=n(fi,"P",{});var _bt=s(z1e);Wbr=r(_bt,"Examples:"),_bt.forEach(t),Qbr=i(fi),m(_A.$$.fragment,fi),fi.forEach(t),Hbr=i(ci),Eo=n(ci,"DIV",{class:!0});var La=s(Eo);m(uA.$$.fragment,La),Ubr=i(La),W1e=n(La,"P",{});var ubt=s(W1e);Jbr=r(ubt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),ubt.forEach(t),Ybr=i(La),xn=n(La,"P",{});var KM=s(xn);Kbr=r(KM,"The model class to instantiate is selected based on the "),Q1e=n(KM,"CODE",{});var bbt=s(Q1e);Zbr=r(bbt,"model_type"),bbt.forEach(t),e5r=r(KM,` property of the config object (either
passed as an argument or loaded from `),H1e=n(KM,"CODE",{});var vbt=s(H1e);o5r=r(vbt,"pretrained_model_name_or_path"),vbt.forEach(t),r5r=r(KM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U1e=n(KM,"CODE",{});var Tbt=s(U1e);t5r=r(Tbt,"pretrained_model_name_or_path"),Tbt.forEach(t),a5r=r(KM,":"),KM.forEach(t),n5r=i(La),Z=n(La,"UL",{});var te=s(Z);D8=n(te,"LI",{});var dBe=s(D8);J1e=n(dBe,"STRONG",{});var Fbt=s(J1e);s5r=r(Fbt,"albert"),Fbt.forEach(t),l5r=r(dBe," \u2014 "),VX=n(dBe,"A",{href:!0});var Cbt=s(VX);i5r=r(Cbt,"TFAlbertForQuestionAnswering"),Cbt.forEach(t),d5r=r(dBe," (ALBERT model)"),dBe.forEach(t),c5r=i(te),N8=n(te,"LI",{});var cBe=s(N8);Y1e=n(cBe,"STRONG",{});var Mbt=s(Y1e);f5r=r(Mbt,"bert"),Mbt.forEach(t),m5r=r(cBe," \u2014 "),zX=n(cBe,"A",{href:!0});var Ebt=s(zX);g5r=r(Ebt,"TFBertForQuestionAnswering"),Ebt.forEach(t),h5r=r(cBe," (BERT model)"),cBe.forEach(t),p5r=i(te),q8=n(te,"LI",{});var fBe=s(q8);K1e=n(fBe,"STRONG",{});var ybt=s(K1e);_5r=r(ybt,"camembert"),ybt.forEach(t),u5r=r(fBe," \u2014 "),WX=n(fBe,"A",{href:!0});var wbt=s(WX);b5r=r(wbt,"TFCamembertForQuestionAnswering"),wbt.forEach(t),v5r=r(fBe," (CamemBERT model)"),fBe.forEach(t),T5r=i(te),O8=n(te,"LI",{});var mBe=s(O8);Z1e=n(mBe,"STRONG",{});var Abt=s(Z1e);F5r=r(Abt,"convbert"),Abt.forEach(t),C5r=r(mBe," \u2014 "),QX=n(mBe,"A",{href:!0});var Lbt=s(QX);M5r=r(Lbt,"TFConvBertForQuestionAnswering"),Lbt.forEach(t),E5r=r(mBe," (ConvBERT model)"),mBe.forEach(t),y5r=i(te),G8=n(te,"LI",{});var gBe=s(G8);ebe=n(gBe,"STRONG",{});var Bbt=s(ebe);w5r=r(Bbt,"deberta"),Bbt.forEach(t),A5r=r(gBe," \u2014 "),HX=n(gBe,"A",{href:!0});var xbt=s(HX);L5r=r(xbt,"TFDebertaForQuestionAnswering"),xbt.forEach(t),B5r=r(gBe," (DeBERTa model)"),gBe.forEach(t),x5r=i(te),X8=n(te,"LI",{});var hBe=s(X8);obe=n(hBe,"STRONG",{});var kbt=s(obe);k5r=r(kbt,"deberta-v2"),kbt.forEach(t),R5r=r(hBe," \u2014 "),UX=n(hBe,"A",{href:!0});var Rbt=s(UX);S5r=r(Rbt,"TFDebertaV2ForQuestionAnswering"),Rbt.forEach(t),P5r=r(hBe," (DeBERTa-v2 model)"),hBe.forEach(t),$5r=i(te),V8=n(te,"LI",{});var pBe=s(V8);rbe=n(pBe,"STRONG",{});var Sbt=s(rbe);I5r=r(Sbt,"distilbert"),Sbt.forEach(t),j5r=r(pBe," \u2014 "),JX=n(pBe,"A",{href:!0});var Pbt=s(JX);D5r=r(Pbt,"TFDistilBertForQuestionAnswering"),Pbt.forEach(t),N5r=r(pBe," (DistilBERT model)"),pBe.forEach(t),q5r=i(te),z8=n(te,"LI",{});var _Be=s(z8);tbe=n(_Be,"STRONG",{});var $bt=s(tbe);O5r=r($bt,"electra"),$bt.forEach(t),G5r=r(_Be," \u2014 "),YX=n(_Be,"A",{href:!0});var Ibt=s(YX);X5r=r(Ibt,"TFElectraForQuestionAnswering"),Ibt.forEach(t),V5r=r(_Be," (ELECTRA model)"),_Be.forEach(t),z5r=i(te),W8=n(te,"LI",{});var uBe=s(W8);abe=n(uBe,"STRONG",{});var jbt=s(abe);W5r=r(jbt,"flaubert"),jbt.forEach(t),Q5r=r(uBe," \u2014 "),KX=n(uBe,"A",{href:!0});var Dbt=s(KX);H5r=r(Dbt,"TFFlaubertForQuestionAnsweringSimple"),Dbt.forEach(t),U5r=r(uBe," (FlauBERT model)"),uBe.forEach(t),J5r=i(te),Q8=n(te,"LI",{});var bBe=s(Q8);nbe=n(bBe,"STRONG",{});var Nbt=s(nbe);Y5r=r(Nbt,"funnel"),Nbt.forEach(t),K5r=r(bBe," \u2014 "),ZX=n(bBe,"A",{href:!0});var qbt=s(ZX);Z5r=r(qbt,"TFFunnelForQuestionAnswering"),qbt.forEach(t),e2r=r(bBe," (Funnel Transformer model)"),bBe.forEach(t),o2r=i(te),H8=n(te,"LI",{});var vBe=s(H8);sbe=n(vBe,"STRONG",{});var Obt=s(sbe);r2r=r(Obt,"longformer"),Obt.forEach(t),t2r=r(vBe," \u2014 "),eV=n(vBe,"A",{href:!0});var Gbt=s(eV);a2r=r(Gbt,"TFLongformerForQuestionAnswering"),Gbt.forEach(t),n2r=r(vBe," (Longformer model)"),vBe.forEach(t),s2r=i(te),U8=n(te,"LI",{});var TBe=s(U8);lbe=n(TBe,"STRONG",{});var Xbt=s(lbe);l2r=r(Xbt,"mobilebert"),Xbt.forEach(t),i2r=r(TBe," \u2014 "),oV=n(TBe,"A",{href:!0});var Vbt=s(oV);d2r=r(Vbt,"TFMobileBertForQuestionAnswering"),Vbt.forEach(t),c2r=r(TBe," (MobileBERT model)"),TBe.forEach(t),f2r=i(te),J8=n(te,"LI",{});var FBe=s(J8);ibe=n(FBe,"STRONG",{});var zbt=s(ibe);m2r=r(zbt,"mpnet"),zbt.forEach(t),g2r=r(FBe," \u2014 "),rV=n(FBe,"A",{href:!0});var Wbt=s(rV);h2r=r(Wbt,"TFMPNetForQuestionAnswering"),Wbt.forEach(t),p2r=r(FBe," (MPNet model)"),FBe.forEach(t),_2r=i(te),Y8=n(te,"LI",{});var CBe=s(Y8);dbe=n(CBe,"STRONG",{});var Qbt=s(dbe);u2r=r(Qbt,"rembert"),Qbt.forEach(t),b2r=r(CBe," \u2014 "),tV=n(CBe,"A",{href:!0});var Hbt=s(tV);v2r=r(Hbt,"TFRemBertForQuestionAnswering"),Hbt.forEach(t),T2r=r(CBe," (RemBERT model)"),CBe.forEach(t),F2r=i(te),K8=n(te,"LI",{});var MBe=s(K8);cbe=n(MBe,"STRONG",{});var Ubt=s(cbe);C2r=r(Ubt,"roberta"),Ubt.forEach(t),M2r=r(MBe," \u2014 "),aV=n(MBe,"A",{href:!0});var Jbt=s(aV);E2r=r(Jbt,"TFRobertaForQuestionAnswering"),Jbt.forEach(t),y2r=r(MBe," (RoBERTa model)"),MBe.forEach(t),w2r=i(te),Z8=n(te,"LI",{});var EBe=s(Z8);fbe=n(EBe,"STRONG",{});var Ybt=s(fbe);A2r=r(Ybt,"roformer"),Ybt.forEach(t),L2r=r(EBe," \u2014 "),nV=n(EBe,"A",{href:!0});var Kbt=s(nV);B2r=r(Kbt,"TFRoFormerForQuestionAnswering"),Kbt.forEach(t),x2r=r(EBe," (RoFormer model)"),EBe.forEach(t),k2r=i(te),eF=n(te,"LI",{});var yBe=s(eF);mbe=n(yBe,"STRONG",{});var Zbt=s(mbe);R2r=r(Zbt,"xlm"),Zbt.forEach(t),S2r=r(yBe," \u2014 "),sV=n(yBe,"A",{href:!0});var e5t=s(sV);P2r=r(e5t,"TFXLMForQuestionAnsweringSimple"),e5t.forEach(t),$2r=r(yBe," (XLM model)"),yBe.forEach(t),I2r=i(te),oF=n(te,"LI",{});var wBe=s(oF);gbe=n(wBe,"STRONG",{});var o5t=s(gbe);j2r=r(o5t,"xlm-roberta"),o5t.forEach(t),D2r=r(wBe," \u2014 "),lV=n(wBe,"A",{href:!0});var r5t=s(lV);N2r=r(r5t,"TFXLMRobertaForQuestionAnswering"),r5t.forEach(t),q2r=r(wBe," (XLM-RoBERTa model)"),wBe.forEach(t),O2r=i(te),rF=n(te,"LI",{});var ABe=s(rF);hbe=n(ABe,"STRONG",{});var t5t=s(hbe);G2r=r(t5t,"xlnet"),t5t.forEach(t),X2r=r(ABe," \u2014 "),iV=n(ABe,"A",{href:!0});var a5t=s(iV);V2r=r(a5t,"TFXLNetForQuestionAnsweringSimple"),a5t.forEach(t),z2r=r(ABe," (XLNet model)"),ABe.forEach(t),te.forEach(t),W2r=i(La),pbe=n(La,"P",{});var n5t=s(pbe);Q2r=r(n5t,"Examples:"),n5t.forEach(t),H2r=i(La),m(bA.$$.fragment,La),La.forEach(t),ci.forEach(t),YRe=i(d),Zc=n(d,"H2",{class:!0});var f$e=s(Zc);tF=n(f$e,"A",{id:!0,class:!0,href:!0});var s5t=s(tF);_be=n(s5t,"SPAN",{});var l5t=s(_be);m(vA.$$.fragment,l5t),l5t.forEach(t),s5t.forEach(t),U2r=i(f$e),ube=n(f$e,"SPAN",{});var i5t=s(ube);J2r=r(i5t,"TFAutoModelForVision2Seq"),i5t.forEach(t),f$e.forEach(t),KRe=i(d),kr=n(d,"DIV",{class:!0});var mi=s(kr);m(TA.$$.fragment,mi),Y2r=i(mi),ef=n(mi,"P",{});var MQ=s(ef);K2r=r(MQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),bbe=n(MQ,"CODE",{});var d5t=s(bbe);Z2r=r(d5t,"from_pretrained()"),d5t.forEach(t),evr=r(MQ,"class method or the "),vbe=n(MQ,"CODE",{});var c5t=s(vbe);ovr=r(c5t,"from_config()"),c5t.forEach(t),rvr=r(MQ,`class
method.`),MQ.forEach(t),tvr=i(mi),FA=n(mi,"P",{});var m$e=s(FA);avr=r(m$e,"This class cannot be instantiated directly using "),Tbe=n(m$e,"CODE",{});var f5t=s(Tbe);nvr=r(f5t,"__init__()"),f5t.forEach(t),svr=r(m$e," (throws an error)."),m$e.forEach(t),lvr=i(mi),wt=n(mi,"DIV",{class:!0});var gi=s(wt);m(CA.$$.fragment,gi),ivr=i(gi),Fbe=n(gi,"P",{});var m5t=s(Fbe);dvr=r(m5t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),m5t.forEach(t),cvr=i(gi),of=n(gi,"P",{});var EQ=s(of);fvr=r(EQ,`Note:
Loading a model from its configuration file does `),Cbe=n(EQ,"STRONG",{});var g5t=s(Cbe);mvr=r(g5t,"not"),g5t.forEach(t),gvr=r(EQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mbe=n(EQ,"CODE",{});var h5t=s(Mbe);hvr=r(h5t,"from_pretrained()"),h5t.forEach(t),pvr=r(EQ,"to load the model weights."),EQ.forEach(t),_vr=i(gi),Ebe=n(gi,"P",{});var p5t=s(Ebe);uvr=r(p5t,"Examples:"),p5t.forEach(t),bvr=i(gi),m(MA.$$.fragment,gi),gi.forEach(t),vvr=i(mi),yo=n(mi,"DIV",{class:!0});var Ba=s(yo);m(EA.$$.fragment,Ba),Tvr=i(Ba),ybe=n(Ba,"P",{});var _5t=s(ybe);Fvr=r(_5t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),_5t.forEach(t),Cvr=i(Ba),kn=n(Ba,"P",{});var ZM=s(kn);Mvr=r(ZM,"The model class to instantiate is selected based on the "),wbe=n(ZM,"CODE",{});var u5t=s(wbe);Evr=r(u5t,"model_type"),u5t.forEach(t),yvr=r(ZM,` property of the config object (either
passed as an argument or loaded from `),Abe=n(ZM,"CODE",{});var b5t=s(Abe);wvr=r(b5t,"pretrained_model_name_or_path"),b5t.forEach(t),Avr=r(ZM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lbe=n(ZM,"CODE",{});var v5t=s(Lbe);Lvr=r(v5t,"pretrained_model_name_or_path"),v5t.forEach(t),Bvr=r(ZM,":"),ZM.forEach(t),xvr=i(Ba),Bbe=n(Ba,"UL",{});var T5t=s(Bbe);aF=n(T5t,"LI",{});var LBe=s(aF);xbe=n(LBe,"STRONG",{});var F5t=s(xbe);kvr=r(F5t,"vision-encoder-decoder"),F5t.forEach(t),Rvr=r(LBe," \u2014 "),dV=n(LBe,"A",{href:!0});var C5t=s(dV);Svr=r(C5t,"TFVisionEncoderDecoderModel"),C5t.forEach(t),Pvr=r(LBe," (Vision Encoder decoder model)"),LBe.forEach(t),T5t.forEach(t),$vr=i(Ba),kbe=n(Ba,"P",{});var M5t=s(kbe);Ivr=r(M5t,"Examples:"),M5t.forEach(t),jvr=i(Ba),m(yA.$$.fragment,Ba),Ba.forEach(t),mi.forEach(t),ZRe=i(d),rf=n(d,"H2",{class:!0});var g$e=s(rf);nF=n(g$e,"A",{id:!0,class:!0,href:!0});var E5t=s(nF);Rbe=n(E5t,"SPAN",{});var y5t=s(Rbe);m(wA.$$.fragment,y5t),y5t.forEach(t),E5t.forEach(t),Dvr=i(g$e),Sbe=n(g$e,"SPAN",{});var w5t=s(Sbe);Nvr=r(w5t,"TFAutoModelForSpeechSeq2Seq"),w5t.forEach(t),g$e.forEach(t),eSe=i(d),Rr=n(d,"DIV",{class:!0});var hi=s(Rr);m(AA.$$.fragment,hi),qvr=i(hi),tf=n(hi,"P",{});var yQ=s(tf);Ovr=r(yQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Pbe=n(yQ,"CODE",{});var A5t=s(Pbe);Gvr=r(A5t,"from_pretrained()"),A5t.forEach(t),Xvr=r(yQ,"class method or the "),$be=n(yQ,"CODE",{});var L5t=s($be);Vvr=r(L5t,"from_config()"),L5t.forEach(t),zvr=r(yQ,`class
method.`),yQ.forEach(t),Wvr=i(hi),LA=n(hi,"P",{});var h$e=s(LA);Qvr=r(h$e,"This class cannot be instantiated directly using "),Ibe=n(h$e,"CODE",{});var B5t=s(Ibe);Hvr=r(B5t,"__init__()"),B5t.forEach(t),Uvr=r(h$e," (throws an error)."),h$e.forEach(t),Jvr=i(hi),At=n(hi,"DIV",{class:!0});var pi=s(At);m(BA.$$.fragment,pi),Yvr=i(pi),jbe=n(pi,"P",{});var x5t=s(jbe);Kvr=r(x5t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),x5t.forEach(t),Zvr=i(pi),af=n(pi,"P",{});var wQ=s(af);e6r=r(wQ,`Note:
Loading a model from its configuration file does `),Dbe=n(wQ,"STRONG",{});var k5t=s(Dbe);o6r=r(k5t,"not"),k5t.forEach(t),r6r=r(wQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nbe=n(wQ,"CODE",{});var R5t=s(Nbe);t6r=r(R5t,"from_pretrained()"),R5t.forEach(t),a6r=r(wQ,"to load the model weights."),wQ.forEach(t),n6r=i(pi),qbe=n(pi,"P",{});var S5t=s(qbe);s6r=r(S5t,"Examples:"),S5t.forEach(t),l6r=i(pi),m(xA.$$.fragment,pi),pi.forEach(t),i6r=i(hi),wo=n(hi,"DIV",{class:!0});var xa=s(wo);m(kA.$$.fragment,xa),d6r=i(xa),Obe=n(xa,"P",{});var P5t=s(Obe);c6r=r(P5t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),P5t.forEach(t),f6r=i(xa),Rn=n(xa,"P",{});var e4=s(Rn);m6r=r(e4,"The model class to instantiate is selected based on the "),Gbe=n(e4,"CODE",{});var $5t=s(Gbe);g6r=r($5t,"model_type"),$5t.forEach(t),h6r=r(e4,` property of the config object (either
passed as an argument or loaded from `),Xbe=n(e4,"CODE",{});var I5t=s(Xbe);p6r=r(I5t,"pretrained_model_name_or_path"),I5t.forEach(t),_6r=r(e4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vbe=n(e4,"CODE",{});var j5t=s(Vbe);u6r=r(j5t,"pretrained_model_name_or_path"),j5t.forEach(t),b6r=r(e4,":"),e4.forEach(t),v6r=i(xa),zbe=n(xa,"UL",{});var D5t=s(zbe);sF=n(D5t,"LI",{});var BBe=s(sF);Wbe=n(BBe,"STRONG",{});var N5t=s(Wbe);T6r=r(N5t,"speech_to_text"),N5t.forEach(t),F6r=r(BBe," \u2014 "),cV=n(BBe,"A",{href:!0});var q5t=s(cV);C6r=r(q5t,"TFSpeech2TextForConditionalGeneration"),q5t.forEach(t),M6r=r(BBe," (Speech2Text model)"),BBe.forEach(t),D5t.forEach(t),E6r=i(xa),Qbe=n(xa,"P",{});var O5t=s(Qbe);y6r=r(O5t,"Examples:"),O5t.forEach(t),w6r=i(xa),m(RA.$$.fragment,xa),xa.forEach(t),hi.forEach(t),oSe=i(d),nf=n(d,"H2",{class:!0});var p$e=s(nf);lF=n(p$e,"A",{id:!0,class:!0,href:!0});var G5t=s(lF);Hbe=n(G5t,"SPAN",{});var X5t=s(Hbe);m(SA.$$.fragment,X5t),X5t.forEach(t),G5t.forEach(t),A6r=i(p$e),Ube=n(p$e,"SPAN",{});var V5t=s(Ube);L6r=r(V5t,"FlaxAutoModel"),V5t.forEach(t),p$e.forEach(t),rSe=i(d),Sr=n(d,"DIV",{class:!0});var _i=s(Sr);m(PA.$$.fragment,_i),B6r=i(_i),sf=n(_i,"P",{});var AQ=s(sf);x6r=r(AQ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Jbe=n(AQ,"CODE",{});var z5t=s(Jbe);k6r=r(z5t,"from_pretrained()"),z5t.forEach(t),R6r=r(AQ,"class method or the "),Ybe=n(AQ,"CODE",{});var W5t=s(Ybe);S6r=r(W5t,"from_config()"),W5t.forEach(t),P6r=r(AQ,`class
method.`),AQ.forEach(t),$6r=i(_i),$A=n(_i,"P",{});var _$e=s($A);I6r=r(_$e,"This class cannot be instantiated directly using "),Kbe=n(_$e,"CODE",{});var Q5t=s(Kbe);j6r=r(Q5t,"__init__()"),Q5t.forEach(t),D6r=r(_$e," (throws an error)."),_$e.forEach(t),N6r=i(_i),Lt=n(_i,"DIV",{class:!0});var ui=s(Lt);m(IA.$$.fragment,ui),q6r=i(ui),Zbe=n(ui,"P",{});var H5t=s(Zbe);O6r=r(H5t,"Instantiates one of the base model classes of the library from a configuration."),H5t.forEach(t),G6r=i(ui),lf=n(ui,"P",{});var LQ=s(lf);X6r=r(LQ,`Note:
Loading a model from its configuration file does `),e5e=n(LQ,"STRONG",{});var U5t=s(e5e);V6r=r(U5t,"not"),U5t.forEach(t),z6r=r(LQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),o5e=n(LQ,"CODE",{});var J5t=s(o5e);W6r=r(J5t,"from_pretrained()"),J5t.forEach(t),Q6r=r(LQ,"to load the model weights."),LQ.forEach(t),H6r=i(ui),r5e=n(ui,"P",{});var Y5t=s(r5e);U6r=r(Y5t,"Examples:"),Y5t.forEach(t),J6r=i(ui),m(jA.$$.fragment,ui),ui.forEach(t),Y6r=i(_i),Ao=n(_i,"DIV",{class:!0});var ka=s(Ao);m(DA.$$.fragment,ka),K6r=i(ka),t5e=n(ka,"P",{});var K5t=s(t5e);Z6r=r(K5t,"Instantiate one of the base model classes of the library from a pretrained model."),K5t.forEach(t),e0r=i(ka),Sn=n(ka,"P",{});var o4=s(Sn);o0r=r(o4,"The model class to instantiate is selected based on the "),a5e=n(o4,"CODE",{});var Z5t=s(a5e);r0r=r(Z5t,"model_type"),Z5t.forEach(t),t0r=r(o4,` property of the config object (either
passed as an argument or loaded from `),n5e=n(o4,"CODE",{});var e2t=s(n5e);a0r=r(e2t,"pretrained_model_name_or_path"),e2t.forEach(t),n0r=r(o4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s5e=n(o4,"CODE",{});var o2t=s(s5e);s0r=r(o2t,"pretrained_model_name_or_path"),o2t.forEach(t),l0r=r(o4,":"),o4.forEach(t),i0r=i(ka),z=n(ka,"UL",{});var Q=s(z);iF=n(Q,"LI",{});var xBe=s(iF);l5e=n(xBe,"STRONG",{});var r2t=s(l5e);d0r=r(r2t,"albert"),r2t.forEach(t),c0r=r(xBe," \u2014 "),fV=n(xBe,"A",{href:!0});var t2t=s(fV);f0r=r(t2t,"FlaxAlbertModel"),t2t.forEach(t),m0r=r(xBe," (ALBERT model)"),xBe.forEach(t),g0r=i(Q),dF=n(Q,"LI",{});var kBe=s(dF);i5e=n(kBe,"STRONG",{});var a2t=s(i5e);h0r=r(a2t,"bart"),a2t.forEach(t),p0r=r(kBe," \u2014 "),mV=n(kBe,"A",{href:!0});var n2t=s(mV);_0r=r(n2t,"FlaxBartModel"),n2t.forEach(t),u0r=r(kBe," (BART model)"),kBe.forEach(t),b0r=i(Q),cF=n(Q,"LI",{});var RBe=s(cF);d5e=n(RBe,"STRONG",{});var s2t=s(d5e);v0r=r(s2t,"beit"),s2t.forEach(t),T0r=r(RBe," \u2014 "),gV=n(RBe,"A",{href:!0});var l2t=s(gV);F0r=r(l2t,"FlaxBeitModel"),l2t.forEach(t),C0r=r(RBe," (BEiT model)"),RBe.forEach(t),M0r=i(Q),fF=n(Q,"LI",{});var SBe=s(fF);c5e=n(SBe,"STRONG",{});var i2t=s(c5e);E0r=r(i2t,"bert"),i2t.forEach(t),y0r=r(SBe," \u2014 "),hV=n(SBe,"A",{href:!0});var d2t=s(hV);w0r=r(d2t,"FlaxBertModel"),d2t.forEach(t),A0r=r(SBe," (BERT model)"),SBe.forEach(t),L0r=i(Q),mF=n(Q,"LI",{});var PBe=s(mF);f5e=n(PBe,"STRONG",{});var c2t=s(f5e);B0r=r(c2t,"big_bird"),c2t.forEach(t),x0r=r(PBe," \u2014 "),pV=n(PBe,"A",{href:!0});var f2t=s(pV);k0r=r(f2t,"FlaxBigBirdModel"),f2t.forEach(t),R0r=r(PBe," (BigBird model)"),PBe.forEach(t),S0r=i(Q),gF=n(Q,"LI",{});var $Be=s(gF);m5e=n($Be,"STRONG",{});var m2t=s(m5e);P0r=r(m2t,"blenderbot"),m2t.forEach(t),$0r=r($Be," \u2014 "),_V=n($Be,"A",{href:!0});var g2t=s(_V);I0r=r(g2t,"FlaxBlenderbotModel"),g2t.forEach(t),j0r=r($Be," (Blenderbot model)"),$Be.forEach(t),D0r=i(Q),hF=n(Q,"LI",{});var IBe=s(hF);g5e=n(IBe,"STRONG",{});var h2t=s(g5e);N0r=r(h2t,"blenderbot-small"),h2t.forEach(t),q0r=r(IBe," \u2014 "),uV=n(IBe,"A",{href:!0});var p2t=s(uV);O0r=r(p2t,"FlaxBlenderbotSmallModel"),p2t.forEach(t),G0r=r(IBe," (BlenderbotSmall model)"),IBe.forEach(t),X0r=i(Q),pF=n(Q,"LI",{});var jBe=s(pF);h5e=n(jBe,"STRONG",{});var _2t=s(h5e);V0r=r(_2t,"clip"),_2t.forEach(t),z0r=r(jBe," \u2014 "),bV=n(jBe,"A",{href:!0});var u2t=s(bV);W0r=r(u2t,"FlaxCLIPModel"),u2t.forEach(t),Q0r=r(jBe," (CLIP model)"),jBe.forEach(t),H0r=i(Q),_F=n(Q,"LI",{});var DBe=s(_F);p5e=n(DBe,"STRONG",{});var b2t=s(p5e);U0r=r(b2t,"distilbert"),b2t.forEach(t),J0r=r(DBe," \u2014 "),vV=n(DBe,"A",{href:!0});var v2t=s(vV);Y0r=r(v2t,"FlaxDistilBertModel"),v2t.forEach(t),K0r=r(DBe," (DistilBERT model)"),DBe.forEach(t),Z0r=i(Q),uF=n(Q,"LI",{});var NBe=s(uF);_5e=n(NBe,"STRONG",{});var T2t=s(_5e);eTr=r(T2t,"electra"),T2t.forEach(t),oTr=r(NBe," \u2014 "),TV=n(NBe,"A",{href:!0});var F2t=s(TV);rTr=r(F2t,"FlaxElectraModel"),F2t.forEach(t),tTr=r(NBe," (ELECTRA model)"),NBe.forEach(t),aTr=i(Q),bF=n(Q,"LI",{});var qBe=s(bF);u5e=n(qBe,"STRONG",{});var C2t=s(u5e);nTr=r(C2t,"gpt2"),C2t.forEach(t),sTr=r(qBe," \u2014 "),FV=n(qBe,"A",{href:!0});var M2t=s(FV);lTr=r(M2t,"FlaxGPT2Model"),M2t.forEach(t),iTr=r(qBe," (OpenAI GPT-2 model)"),qBe.forEach(t),dTr=i(Q),vF=n(Q,"LI",{});var OBe=s(vF);b5e=n(OBe,"STRONG",{});var E2t=s(b5e);cTr=r(E2t,"gpt_neo"),E2t.forEach(t),fTr=r(OBe," \u2014 "),CV=n(OBe,"A",{href:!0});var y2t=s(CV);mTr=r(y2t,"FlaxGPTNeoModel"),y2t.forEach(t),gTr=r(OBe," (GPT Neo model)"),OBe.forEach(t),hTr=i(Q),TF=n(Q,"LI",{});var GBe=s(TF);v5e=n(GBe,"STRONG",{});var w2t=s(v5e);pTr=r(w2t,"gptj"),w2t.forEach(t),_Tr=r(GBe," \u2014 "),MV=n(GBe,"A",{href:!0});var A2t=s(MV);uTr=r(A2t,"FlaxGPTJModel"),A2t.forEach(t),bTr=r(GBe," (GPT-J model)"),GBe.forEach(t),vTr=i(Q),FF=n(Q,"LI",{});var XBe=s(FF);T5e=n(XBe,"STRONG",{});var L2t=s(T5e);TTr=r(L2t,"marian"),L2t.forEach(t),FTr=r(XBe," \u2014 "),EV=n(XBe,"A",{href:!0});var B2t=s(EV);CTr=r(B2t,"FlaxMarianModel"),B2t.forEach(t),MTr=r(XBe," (Marian model)"),XBe.forEach(t),ETr=i(Q),CF=n(Q,"LI",{});var VBe=s(CF);F5e=n(VBe,"STRONG",{});var x2t=s(F5e);yTr=r(x2t,"mbart"),x2t.forEach(t),wTr=r(VBe," \u2014 "),yV=n(VBe,"A",{href:!0});var k2t=s(yV);ATr=r(k2t,"FlaxMBartModel"),k2t.forEach(t),LTr=r(VBe," (mBART model)"),VBe.forEach(t),BTr=i(Q),MF=n(Q,"LI",{});var zBe=s(MF);C5e=n(zBe,"STRONG",{});var R2t=s(C5e);xTr=r(R2t,"mt5"),R2t.forEach(t),kTr=r(zBe," \u2014 "),wV=n(zBe,"A",{href:!0});var S2t=s(wV);RTr=r(S2t,"FlaxMT5Model"),S2t.forEach(t),STr=r(zBe," (mT5 model)"),zBe.forEach(t),PTr=i(Q),EF=n(Q,"LI",{});var WBe=s(EF);M5e=n(WBe,"STRONG",{});var P2t=s(M5e);$Tr=r(P2t,"pegasus"),P2t.forEach(t),ITr=r(WBe," \u2014 "),AV=n(WBe,"A",{href:!0});var $2t=s(AV);jTr=r($2t,"FlaxPegasusModel"),$2t.forEach(t),DTr=r(WBe," (Pegasus model)"),WBe.forEach(t),NTr=i(Q),yF=n(Q,"LI",{});var QBe=s(yF);E5e=n(QBe,"STRONG",{});var I2t=s(E5e);qTr=r(I2t,"roberta"),I2t.forEach(t),OTr=r(QBe," \u2014 "),LV=n(QBe,"A",{href:!0});var j2t=s(LV);GTr=r(j2t,"FlaxRobertaModel"),j2t.forEach(t),XTr=r(QBe," (RoBERTa model)"),QBe.forEach(t),VTr=i(Q),wF=n(Q,"LI",{});var HBe=s(wF);y5e=n(HBe,"STRONG",{});var D2t=s(y5e);zTr=r(D2t,"roformer"),D2t.forEach(t),WTr=r(HBe," \u2014 "),BV=n(HBe,"A",{href:!0});var N2t=s(BV);QTr=r(N2t,"FlaxRoFormerModel"),N2t.forEach(t),HTr=r(HBe," (RoFormer model)"),HBe.forEach(t),UTr=i(Q),AF=n(Q,"LI",{});var UBe=s(AF);w5e=n(UBe,"STRONG",{});var q2t=s(w5e);JTr=r(q2t,"t5"),q2t.forEach(t),YTr=r(UBe," \u2014 "),xV=n(UBe,"A",{href:!0});var O2t=s(xV);KTr=r(O2t,"FlaxT5Model"),O2t.forEach(t),ZTr=r(UBe," (T5 model)"),UBe.forEach(t),e8r=i(Q),LF=n(Q,"LI",{});var JBe=s(LF);A5e=n(JBe,"STRONG",{});var G2t=s(A5e);o8r=r(G2t,"vision-text-dual-encoder"),G2t.forEach(t),r8r=r(JBe," \u2014 "),kV=n(JBe,"A",{href:!0});var X2t=s(kV);t8r=r(X2t,"FlaxVisionTextDualEncoderModel"),X2t.forEach(t),a8r=r(JBe," (VisionTextDualEncoder model)"),JBe.forEach(t),n8r=i(Q),BF=n(Q,"LI",{});var YBe=s(BF);L5e=n(YBe,"STRONG",{});var V2t=s(L5e);s8r=r(V2t,"vit"),V2t.forEach(t),l8r=r(YBe," \u2014 "),RV=n(YBe,"A",{href:!0});var z2t=s(RV);i8r=r(z2t,"FlaxViTModel"),z2t.forEach(t),d8r=r(YBe," (ViT model)"),YBe.forEach(t),c8r=i(Q),xF=n(Q,"LI",{});var KBe=s(xF);B5e=n(KBe,"STRONG",{});var W2t=s(B5e);f8r=r(W2t,"wav2vec2"),W2t.forEach(t),m8r=r(KBe," \u2014 "),SV=n(KBe,"A",{href:!0});var Q2t=s(SV);g8r=r(Q2t,"FlaxWav2Vec2Model"),Q2t.forEach(t),h8r=r(KBe," (Wav2Vec2 model)"),KBe.forEach(t),p8r=i(Q),kF=n(Q,"LI",{});var ZBe=s(kF);x5e=n(ZBe,"STRONG",{});var H2t=s(x5e);_8r=r(H2t,"xglm"),H2t.forEach(t),u8r=r(ZBe," \u2014 "),PV=n(ZBe,"A",{href:!0});var U2t=s(PV);b8r=r(U2t,"FlaxXGLMModel"),U2t.forEach(t),v8r=r(ZBe," (XGLM model)"),ZBe.forEach(t),T8r=i(Q),RF=n(Q,"LI",{});var exe=s(RF);k5e=n(exe,"STRONG",{});var J2t=s(k5e);F8r=r(J2t,"xlm-roberta"),J2t.forEach(t),C8r=r(exe," \u2014 "),$V=n(exe,"A",{href:!0});var Y2t=s($V);M8r=r(Y2t,"FlaxXLMRobertaModel"),Y2t.forEach(t),E8r=r(exe," (XLM-RoBERTa model)"),exe.forEach(t),Q.forEach(t),y8r=i(ka),R5e=n(ka,"P",{});var K2t=s(R5e);w8r=r(K2t,"Examples:"),K2t.forEach(t),A8r=i(ka),m(NA.$$.fragment,ka),ka.forEach(t),_i.forEach(t),tSe=i(d),df=n(d,"H2",{class:!0});var u$e=s(df);SF=n(u$e,"A",{id:!0,class:!0,href:!0});var Z2t=s(SF);S5e=n(Z2t,"SPAN",{});var evt=s(S5e);m(qA.$$.fragment,evt),evt.forEach(t),Z2t.forEach(t),L8r=i(u$e),P5e=n(u$e,"SPAN",{});var ovt=s(P5e);B8r=r(ovt,"FlaxAutoModelForCausalLM"),ovt.forEach(t),u$e.forEach(t),aSe=i(d),Pr=n(d,"DIV",{class:!0});var bi=s(Pr);m(OA.$$.fragment,bi),x8r=i(bi),cf=n(bi,"P",{});var BQ=s(cf);k8r=r(BQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),$5e=n(BQ,"CODE",{});var rvt=s($5e);R8r=r(rvt,"from_pretrained()"),rvt.forEach(t),S8r=r(BQ,"class method or the "),I5e=n(BQ,"CODE",{});var tvt=s(I5e);P8r=r(tvt,"from_config()"),tvt.forEach(t),$8r=r(BQ,`class
method.`),BQ.forEach(t),I8r=i(bi),GA=n(bi,"P",{});var b$e=s(GA);j8r=r(b$e,"This class cannot be instantiated directly using "),j5e=n(b$e,"CODE",{});var avt=s(j5e);D8r=r(avt,"__init__()"),avt.forEach(t),N8r=r(b$e," (throws an error)."),b$e.forEach(t),q8r=i(bi),Bt=n(bi,"DIV",{class:!0});var vi=s(Bt);m(XA.$$.fragment,vi),O8r=i(vi),D5e=n(vi,"P",{});var nvt=s(D5e);G8r=r(nvt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),nvt.forEach(t),X8r=i(vi),ff=n(vi,"P",{});var xQ=s(ff);V8r=r(xQ,`Note:
Loading a model from its configuration file does `),N5e=n(xQ,"STRONG",{});var svt=s(N5e);z8r=r(svt,"not"),svt.forEach(t),W8r=r(xQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),q5e=n(xQ,"CODE",{});var lvt=s(q5e);Q8r=r(lvt,"from_pretrained()"),lvt.forEach(t),H8r=r(xQ,"to load the model weights."),xQ.forEach(t),U8r=i(vi),O5e=n(vi,"P",{});var ivt=s(O5e);J8r=r(ivt,"Examples:"),ivt.forEach(t),Y8r=i(vi),m(VA.$$.fragment,vi),vi.forEach(t),K8r=i(bi),Lo=n(bi,"DIV",{class:!0});var Ra=s(Lo);m(zA.$$.fragment,Ra),Z8r=i(Ra),G5e=n(Ra,"P",{});var dvt=s(G5e);eFr=r(dvt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),dvt.forEach(t),oFr=i(Ra),Pn=n(Ra,"P",{});var r4=s(Pn);rFr=r(r4,"The model class to instantiate is selected based on the "),X5e=n(r4,"CODE",{});var cvt=s(X5e);tFr=r(cvt,"model_type"),cvt.forEach(t),aFr=r(r4,` property of the config object (either
passed as an argument or loaded from `),V5e=n(r4,"CODE",{});var fvt=s(V5e);nFr=r(fvt,"pretrained_model_name_or_path"),fvt.forEach(t),sFr=r(r4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z5e=n(r4,"CODE",{});var mvt=s(z5e);lFr=r(mvt,"pretrained_model_name_or_path"),mvt.forEach(t),iFr=r(r4,":"),r4.forEach(t),dFr=i(Ra),ga=n(Ra,"UL",{});var Ti=s(ga);PF=n(Ti,"LI",{});var oxe=s(PF);W5e=n(oxe,"STRONG",{});var gvt=s(W5e);cFr=r(gvt,"bart"),gvt.forEach(t),fFr=r(oxe," \u2014 "),IV=n(oxe,"A",{href:!0});var hvt=s(IV);mFr=r(hvt,"FlaxBartForCausalLM"),hvt.forEach(t),gFr=r(oxe," (BART model)"),oxe.forEach(t),hFr=i(Ti),$F=n(Ti,"LI",{});var rxe=s($F);Q5e=n(rxe,"STRONG",{});var pvt=s(Q5e);pFr=r(pvt,"gpt2"),pvt.forEach(t),_Fr=r(rxe," \u2014 "),jV=n(rxe,"A",{href:!0});var _vt=s(jV);uFr=r(_vt,"FlaxGPT2LMHeadModel"),_vt.forEach(t),bFr=r(rxe," (OpenAI GPT-2 model)"),rxe.forEach(t),vFr=i(Ti),IF=n(Ti,"LI",{});var txe=s(IF);H5e=n(txe,"STRONG",{});var uvt=s(H5e);TFr=r(uvt,"gpt_neo"),uvt.forEach(t),FFr=r(txe," \u2014 "),DV=n(txe,"A",{href:!0});var bvt=s(DV);CFr=r(bvt,"FlaxGPTNeoForCausalLM"),bvt.forEach(t),MFr=r(txe," (GPT Neo model)"),txe.forEach(t),EFr=i(Ti),jF=n(Ti,"LI",{});var axe=s(jF);U5e=n(axe,"STRONG",{});var vvt=s(U5e);yFr=r(vvt,"gptj"),vvt.forEach(t),wFr=r(axe," \u2014 "),NV=n(axe,"A",{href:!0});var Tvt=s(NV);AFr=r(Tvt,"FlaxGPTJForCausalLM"),Tvt.forEach(t),LFr=r(axe," (GPT-J model)"),axe.forEach(t),BFr=i(Ti),DF=n(Ti,"LI",{});var nxe=s(DF);J5e=n(nxe,"STRONG",{});var Fvt=s(J5e);xFr=r(Fvt,"xglm"),Fvt.forEach(t),kFr=r(nxe," \u2014 "),qV=n(nxe,"A",{href:!0});var Cvt=s(qV);RFr=r(Cvt,"FlaxXGLMForCausalLM"),Cvt.forEach(t),SFr=r(nxe," (XGLM model)"),nxe.forEach(t),Ti.forEach(t),PFr=i(Ra),Y5e=n(Ra,"P",{});var Mvt=s(Y5e);$Fr=r(Mvt,"Examples:"),Mvt.forEach(t),IFr=i(Ra),m(WA.$$.fragment,Ra),Ra.forEach(t),bi.forEach(t),nSe=i(d),mf=n(d,"H2",{class:!0});var v$e=s(mf);NF=n(v$e,"A",{id:!0,class:!0,href:!0});var Evt=s(NF);K5e=n(Evt,"SPAN",{});var yvt=s(K5e);m(QA.$$.fragment,yvt),yvt.forEach(t),Evt.forEach(t),jFr=i(v$e),Z5e=n(v$e,"SPAN",{});var wvt=s(Z5e);DFr=r(wvt,"FlaxAutoModelForPreTraining"),wvt.forEach(t),v$e.forEach(t),sSe=i(d),$r=n(d,"DIV",{class:!0});var Fi=s($r);m(HA.$$.fragment,Fi),NFr=i(Fi),gf=n(Fi,"P",{});var kQ=s(gf);qFr=r(kQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),e2e=n(kQ,"CODE",{});var Avt=s(e2e);OFr=r(Avt,"from_pretrained()"),Avt.forEach(t),GFr=r(kQ,"class method or the "),o2e=n(kQ,"CODE",{});var Lvt=s(o2e);XFr=r(Lvt,"from_config()"),Lvt.forEach(t),VFr=r(kQ,`class
method.`),kQ.forEach(t),zFr=i(Fi),UA=n(Fi,"P",{});var T$e=s(UA);WFr=r(T$e,"This class cannot be instantiated directly using "),r2e=n(T$e,"CODE",{});var Bvt=s(r2e);QFr=r(Bvt,"__init__()"),Bvt.forEach(t),HFr=r(T$e," (throws an error)."),T$e.forEach(t),UFr=i(Fi),xt=n(Fi,"DIV",{class:!0});var Ci=s(xt);m(JA.$$.fragment,Ci),JFr=i(Ci),t2e=n(Ci,"P",{});var xvt=s(t2e);YFr=r(xvt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),xvt.forEach(t),KFr=i(Ci),hf=n(Ci,"P",{});var RQ=s(hf);ZFr=r(RQ,`Note:
Loading a model from its configuration file does `),a2e=n(RQ,"STRONG",{});var kvt=s(a2e);eCr=r(kvt,"not"),kvt.forEach(t),oCr=r(RQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),n2e=n(RQ,"CODE",{});var Rvt=s(n2e);rCr=r(Rvt,"from_pretrained()"),Rvt.forEach(t),tCr=r(RQ,"to load the model weights."),RQ.forEach(t),aCr=i(Ci),s2e=n(Ci,"P",{});var Svt=s(s2e);nCr=r(Svt,"Examples:"),Svt.forEach(t),sCr=i(Ci),m(YA.$$.fragment,Ci),Ci.forEach(t),lCr=i(Fi),Bo=n(Fi,"DIV",{class:!0});var Sa=s(Bo);m(KA.$$.fragment,Sa),iCr=i(Sa),l2e=n(Sa,"P",{});var Pvt=s(l2e);dCr=r(Pvt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Pvt.forEach(t),cCr=i(Sa),$n=n(Sa,"P",{});var t4=s($n);fCr=r(t4,"The model class to instantiate is selected based on the "),i2e=n(t4,"CODE",{});var $vt=s(i2e);mCr=r($vt,"model_type"),$vt.forEach(t),gCr=r(t4,` property of the config object (either
passed as an argument or loaded from `),d2e=n(t4,"CODE",{});var Ivt=s(d2e);hCr=r(Ivt,"pretrained_model_name_or_path"),Ivt.forEach(t),pCr=r(t4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c2e=n(t4,"CODE",{});var jvt=s(c2e);_Cr=r(jvt,"pretrained_model_name_or_path"),jvt.forEach(t),uCr=r(t4,":"),t4.forEach(t),bCr=i(Sa),ce=n(Sa,"UL",{});var he=s(ce);qF=n(he,"LI",{});var sxe=s(qF);f2e=n(sxe,"STRONG",{});var Dvt=s(f2e);vCr=r(Dvt,"albert"),Dvt.forEach(t),TCr=r(sxe," \u2014 "),OV=n(sxe,"A",{href:!0});var Nvt=s(OV);FCr=r(Nvt,"FlaxAlbertForPreTraining"),Nvt.forEach(t),CCr=r(sxe," (ALBERT model)"),sxe.forEach(t),MCr=i(he),OF=n(he,"LI",{});var lxe=s(OF);m2e=n(lxe,"STRONG",{});var qvt=s(m2e);ECr=r(qvt,"bart"),qvt.forEach(t),yCr=r(lxe," \u2014 "),GV=n(lxe,"A",{href:!0});var Ovt=s(GV);wCr=r(Ovt,"FlaxBartForConditionalGeneration"),Ovt.forEach(t),ACr=r(lxe," (BART model)"),lxe.forEach(t),LCr=i(he),GF=n(he,"LI",{});var ixe=s(GF);g2e=n(ixe,"STRONG",{});var Gvt=s(g2e);BCr=r(Gvt,"bert"),Gvt.forEach(t),xCr=r(ixe," \u2014 "),XV=n(ixe,"A",{href:!0});var Xvt=s(XV);kCr=r(Xvt,"FlaxBertForPreTraining"),Xvt.forEach(t),RCr=r(ixe," (BERT model)"),ixe.forEach(t),SCr=i(he),XF=n(he,"LI",{});var dxe=s(XF);h2e=n(dxe,"STRONG",{});var Vvt=s(h2e);PCr=r(Vvt,"big_bird"),Vvt.forEach(t),$Cr=r(dxe," \u2014 "),VV=n(dxe,"A",{href:!0});var zvt=s(VV);ICr=r(zvt,"FlaxBigBirdForPreTraining"),zvt.forEach(t),jCr=r(dxe," (BigBird model)"),dxe.forEach(t),DCr=i(he),VF=n(he,"LI",{});var cxe=s(VF);p2e=n(cxe,"STRONG",{});var Wvt=s(p2e);NCr=r(Wvt,"electra"),Wvt.forEach(t),qCr=r(cxe," \u2014 "),zV=n(cxe,"A",{href:!0});var Qvt=s(zV);OCr=r(Qvt,"FlaxElectraForPreTraining"),Qvt.forEach(t),GCr=r(cxe," (ELECTRA model)"),cxe.forEach(t),XCr=i(he),zF=n(he,"LI",{});var fxe=s(zF);_2e=n(fxe,"STRONG",{});var Hvt=s(_2e);VCr=r(Hvt,"mbart"),Hvt.forEach(t),zCr=r(fxe," \u2014 "),WV=n(fxe,"A",{href:!0});var Uvt=s(WV);WCr=r(Uvt,"FlaxMBartForConditionalGeneration"),Uvt.forEach(t),QCr=r(fxe," (mBART model)"),fxe.forEach(t),HCr=i(he),WF=n(he,"LI",{});var mxe=s(WF);u2e=n(mxe,"STRONG",{});var Jvt=s(u2e);UCr=r(Jvt,"mt5"),Jvt.forEach(t),JCr=r(mxe," \u2014 "),QV=n(mxe,"A",{href:!0});var Yvt=s(QV);YCr=r(Yvt,"FlaxMT5ForConditionalGeneration"),Yvt.forEach(t),KCr=r(mxe," (mT5 model)"),mxe.forEach(t),ZCr=i(he),QF=n(he,"LI",{});var gxe=s(QF);b2e=n(gxe,"STRONG",{});var Kvt=s(b2e);eMr=r(Kvt,"roberta"),Kvt.forEach(t),oMr=r(gxe," \u2014 "),HV=n(gxe,"A",{href:!0});var Zvt=s(HV);rMr=r(Zvt,"FlaxRobertaForMaskedLM"),Zvt.forEach(t),tMr=r(gxe," (RoBERTa model)"),gxe.forEach(t),aMr=i(he),HF=n(he,"LI",{});var hxe=s(HF);v2e=n(hxe,"STRONG",{});var e6t=s(v2e);nMr=r(e6t,"roformer"),e6t.forEach(t),sMr=r(hxe," \u2014 "),UV=n(hxe,"A",{href:!0});var o6t=s(UV);lMr=r(o6t,"FlaxRoFormerForMaskedLM"),o6t.forEach(t),iMr=r(hxe," (RoFormer model)"),hxe.forEach(t),dMr=i(he),UF=n(he,"LI",{});var pxe=s(UF);T2e=n(pxe,"STRONG",{});var r6t=s(T2e);cMr=r(r6t,"t5"),r6t.forEach(t),fMr=r(pxe," \u2014 "),JV=n(pxe,"A",{href:!0});var t6t=s(JV);mMr=r(t6t,"FlaxT5ForConditionalGeneration"),t6t.forEach(t),gMr=r(pxe," (T5 model)"),pxe.forEach(t),hMr=i(he),JF=n(he,"LI",{});var _xe=s(JF);F2e=n(_xe,"STRONG",{});var a6t=s(F2e);pMr=r(a6t,"wav2vec2"),a6t.forEach(t),_Mr=r(_xe," \u2014 "),YV=n(_xe,"A",{href:!0});var n6t=s(YV);uMr=r(n6t,"FlaxWav2Vec2ForPreTraining"),n6t.forEach(t),bMr=r(_xe," (Wav2Vec2 model)"),_xe.forEach(t),vMr=i(he),YF=n(he,"LI",{});var uxe=s(YF);C2e=n(uxe,"STRONG",{});var s6t=s(C2e);TMr=r(s6t,"xlm-roberta"),s6t.forEach(t),FMr=r(uxe," \u2014 "),KV=n(uxe,"A",{href:!0});var l6t=s(KV);CMr=r(l6t,"FlaxXLMRobertaForMaskedLM"),l6t.forEach(t),MMr=r(uxe," (XLM-RoBERTa model)"),uxe.forEach(t),he.forEach(t),EMr=i(Sa),M2e=n(Sa,"P",{});var i6t=s(M2e);yMr=r(i6t,"Examples:"),i6t.forEach(t),wMr=i(Sa),m(ZA.$$.fragment,Sa),Sa.forEach(t),Fi.forEach(t),lSe=i(d),pf=n(d,"H2",{class:!0});var F$e=s(pf);KF=n(F$e,"A",{id:!0,class:!0,href:!0});var d6t=s(KF);E2e=n(d6t,"SPAN",{});var c6t=s(E2e);m(eL.$$.fragment,c6t),c6t.forEach(t),d6t.forEach(t),AMr=i(F$e),y2e=n(F$e,"SPAN",{});var f6t=s(y2e);LMr=r(f6t,"FlaxAutoModelForMaskedLM"),f6t.forEach(t),F$e.forEach(t),iSe=i(d),Ir=n(d,"DIV",{class:!0});var Mi=s(Ir);m(oL.$$.fragment,Mi),BMr=i(Mi),_f=n(Mi,"P",{});var SQ=s(_f);xMr=r(SQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),w2e=n(SQ,"CODE",{});var m6t=s(w2e);kMr=r(m6t,"from_pretrained()"),m6t.forEach(t),RMr=r(SQ,"class method or the "),A2e=n(SQ,"CODE",{});var g6t=s(A2e);SMr=r(g6t,"from_config()"),g6t.forEach(t),PMr=r(SQ,`class
method.`),SQ.forEach(t),$Mr=i(Mi),rL=n(Mi,"P",{});var C$e=s(rL);IMr=r(C$e,"This class cannot be instantiated directly using "),L2e=n(C$e,"CODE",{});var h6t=s(L2e);jMr=r(h6t,"__init__()"),h6t.forEach(t),DMr=r(C$e," (throws an error)."),C$e.forEach(t),NMr=i(Mi),kt=n(Mi,"DIV",{class:!0});var Ei=s(kt);m(tL.$$.fragment,Ei),qMr=i(Ei),B2e=n(Ei,"P",{});var p6t=s(B2e);OMr=r(p6t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),p6t.forEach(t),GMr=i(Ei),uf=n(Ei,"P",{});var PQ=s(uf);XMr=r(PQ,`Note:
Loading a model from its configuration file does `),x2e=n(PQ,"STRONG",{});var _6t=s(x2e);VMr=r(_6t,"not"),_6t.forEach(t),zMr=r(PQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),k2e=n(PQ,"CODE",{});var u6t=s(k2e);WMr=r(u6t,"from_pretrained()"),u6t.forEach(t),QMr=r(PQ,"to load the model weights."),PQ.forEach(t),HMr=i(Ei),R2e=n(Ei,"P",{});var b6t=s(R2e);UMr=r(b6t,"Examples:"),b6t.forEach(t),JMr=i(Ei),m(aL.$$.fragment,Ei),Ei.forEach(t),YMr=i(Mi),xo=n(Mi,"DIV",{class:!0});var Pa=s(xo);m(nL.$$.fragment,Pa),KMr=i(Pa),S2e=n(Pa,"P",{});var v6t=s(S2e);ZMr=r(v6t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),v6t.forEach(t),e4r=i(Pa),In=n(Pa,"P",{});var a4=s(In);o4r=r(a4,"The model class to instantiate is selected based on the "),P2e=n(a4,"CODE",{});var T6t=s(P2e);r4r=r(T6t,"model_type"),T6t.forEach(t),t4r=r(a4,` property of the config object (either
passed as an argument or loaded from `),$2e=n(a4,"CODE",{});var F6t=s($2e);a4r=r(F6t,"pretrained_model_name_or_path"),F6t.forEach(t),n4r=r(a4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I2e=n(a4,"CODE",{});var C6t=s(I2e);s4r=r(C6t,"pretrained_model_name_or_path"),C6t.forEach(t),l4r=r(a4,":"),a4.forEach(t),i4r=i(Pa),be=n(Pa,"UL",{});var we=s(be);ZF=n(we,"LI",{});var bxe=s(ZF);j2e=n(bxe,"STRONG",{});var M6t=s(j2e);d4r=r(M6t,"albert"),M6t.forEach(t),c4r=r(bxe," \u2014 "),ZV=n(bxe,"A",{href:!0});var E6t=s(ZV);f4r=r(E6t,"FlaxAlbertForMaskedLM"),E6t.forEach(t),m4r=r(bxe," (ALBERT model)"),bxe.forEach(t),g4r=i(we),eC=n(we,"LI",{});var vxe=s(eC);D2e=n(vxe,"STRONG",{});var y6t=s(D2e);h4r=r(y6t,"bart"),y6t.forEach(t),p4r=r(vxe," \u2014 "),ez=n(vxe,"A",{href:!0});var w6t=s(ez);_4r=r(w6t,"FlaxBartForConditionalGeneration"),w6t.forEach(t),u4r=r(vxe," (BART model)"),vxe.forEach(t),b4r=i(we),oC=n(we,"LI",{});var Txe=s(oC);N2e=n(Txe,"STRONG",{});var A6t=s(N2e);v4r=r(A6t,"bert"),A6t.forEach(t),T4r=r(Txe," \u2014 "),oz=n(Txe,"A",{href:!0});var L6t=s(oz);F4r=r(L6t,"FlaxBertForMaskedLM"),L6t.forEach(t),C4r=r(Txe," (BERT model)"),Txe.forEach(t),M4r=i(we),rC=n(we,"LI",{});var Fxe=s(rC);q2e=n(Fxe,"STRONG",{});var B6t=s(q2e);E4r=r(B6t,"big_bird"),B6t.forEach(t),y4r=r(Fxe," \u2014 "),rz=n(Fxe,"A",{href:!0});var x6t=s(rz);w4r=r(x6t,"FlaxBigBirdForMaskedLM"),x6t.forEach(t),A4r=r(Fxe," (BigBird model)"),Fxe.forEach(t),L4r=i(we),tC=n(we,"LI",{});var Cxe=s(tC);O2e=n(Cxe,"STRONG",{});var k6t=s(O2e);B4r=r(k6t,"distilbert"),k6t.forEach(t),x4r=r(Cxe," \u2014 "),tz=n(Cxe,"A",{href:!0});var R6t=s(tz);k4r=r(R6t,"FlaxDistilBertForMaskedLM"),R6t.forEach(t),R4r=r(Cxe," (DistilBERT model)"),Cxe.forEach(t),S4r=i(we),aC=n(we,"LI",{});var Mxe=s(aC);G2e=n(Mxe,"STRONG",{});var S6t=s(G2e);P4r=r(S6t,"electra"),S6t.forEach(t),$4r=r(Mxe," \u2014 "),az=n(Mxe,"A",{href:!0});var P6t=s(az);I4r=r(P6t,"FlaxElectraForMaskedLM"),P6t.forEach(t),j4r=r(Mxe," (ELECTRA model)"),Mxe.forEach(t),D4r=i(we),nC=n(we,"LI",{});var Exe=s(nC);X2e=n(Exe,"STRONG",{});var $6t=s(X2e);N4r=r($6t,"mbart"),$6t.forEach(t),q4r=r(Exe," \u2014 "),nz=n(Exe,"A",{href:!0});var I6t=s(nz);O4r=r(I6t,"FlaxMBartForConditionalGeneration"),I6t.forEach(t),G4r=r(Exe," (mBART model)"),Exe.forEach(t),X4r=i(we),sC=n(we,"LI",{});var yxe=s(sC);V2e=n(yxe,"STRONG",{});var j6t=s(V2e);V4r=r(j6t,"roberta"),j6t.forEach(t),z4r=r(yxe," \u2014 "),sz=n(yxe,"A",{href:!0});var D6t=s(sz);W4r=r(D6t,"FlaxRobertaForMaskedLM"),D6t.forEach(t),Q4r=r(yxe," (RoBERTa model)"),yxe.forEach(t),H4r=i(we),lC=n(we,"LI",{});var wxe=s(lC);z2e=n(wxe,"STRONG",{});var N6t=s(z2e);U4r=r(N6t,"roformer"),N6t.forEach(t),J4r=r(wxe," \u2014 "),lz=n(wxe,"A",{href:!0});var q6t=s(lz);Y4r=r(q6t,"FlaxRoFormerForMaskedLM"),q6t.forEach(t),K4r=r(wxe," (RoFormer model)"),wxe.forEach(t),Z4r=i(we),iC=n(we,"LI",{});var Axe=s(iC);W2e=n(Axe,"STRONG",{});var O6t=s(W2e);eEr=r(O6t,"xlm-roberta"),O6t.forEach(t),oEr=r(Axe," \u2014 "),iz=n(Axe,"A",{href:!0});var G6t=s(iz);rEr=r(G6t,"FlaxXLMRobertaForMaskedLM"),G6t.forEach(t),tEr=r(Axe," (XLM-RoBERTa model)"),Axe.forEach(t),we.forEach(t),aEr=i(Pa),Q2e=n(Pa,"P",{});var X6t=s(Q2e);nEr=r(X6t,"Examples:"),X6t.forEach(t),sEr=i(Pa),m(sL.$$.fragment,Pa),Pa.forEach(t),Mi.forEach(t),dSe=i(d),bf=n(d,"H2",{class:!0});var M$e=s(bf);dC=n(M$e,"A",{id:!0,class:!0,href:!0});var V6t=s(dC);H2e=n(V6t,"SPAN",{});var z6t=s(H2e);m(lL.$$.fragment,z6t),z6t.forEach(t),V6t.forEach(t),lEr=i(M$e),U2e=n(M$e,"SPAN",{});var W6t=s(U2e);iEr=r(W6t,"FlaxAutoModelForSeq2SeqLM"),W6t.forEach(t),M$e.forEach(t),cSe=i(d),jr=n(d,"DIV",{class:!0});var yi=s(jr);m(iL.$$.fragment,yi),dEr=i(yi),vf=n(yi,"P",{});var $Q=s(vf);cEr=r($Q,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),J2e=n($Q,"CODE",{});var Q6t=s(J2e);fEr=r(Q6t,"from_pretrained()"),Q6t.forEach(t),mEr=r($Q,"class method or the "),Y2e=n($Q,"CODE",{});var H6t=s(Y2e);gEr=r(H6t,"from_config()"),H6t.forEach(t),hEr=r($Q,`class
method.`),$Q.forEach(t),pEr=i(yi),dL=n(yi,"P",{});var E$e=s(dL);_Er=r(E$e,"This class cannot be instantiated directly using "),K2e=n(E$e,"CODE",{});var U6t=s(K2e);uEr=r(U6t,"__init__()"),U6t.forEach(t),bEr=r(E$e," (throws an error)."),E$e.forEach(t),vEr=i(yi),Rt=n(yi,"DIV",{class:!0});var wi=s(Rt);m(cL.$$.fragment,wi),TEr=i(wi),Z2e=n(wi,"P",{});var J6t=s(Z2e);FEr=r(J6t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),J6t.forEach(t),CEr=i(wi),Tf=n(wi,"P",{});var IQ=s(Tf);MEr=r(IQ,`Note:
Loading a model from its configuration file does `),eve=n(IQ,"STRONG",{});var Y6t=s(eve);EEr=r(Y6t,"not"),Y6t.forEach(t),yEr=r(IQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),ove=n(IQ,"CODE",{});var K6t=s(ove);wEr=r(K6t,"from_pretrained()"),K6t.forEach(t),AEr=r(IQ,"to load the model weights."),IQ.forEach(t),LEr=i(wi),rve=n(wi,"P",{});var Z6t=s(rve);BEr=r(Z6t,"Examples:"),Z6t.forEach(t),xEr=i(wi),m(fL.$$.fragment,wi),wi.forEach(t),kEr=i(yi),ko=n(yi,"DIV",{class:!0});var $a=s(ko);m(mL.$$.fragment,$a),REr=i($a),tve=n($a,"P",{});var e0t=s(tve);SEr=r(e0t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),e0t.forEach(t),PEr=i($a),jn=n($a,"P",{});var n4=s(jn);$Er=r(n4,"The model class to instantiate is selected based on the "),ave=n(n4,"CODE",{});var o0t=s(ave);IEr=r(o0t,"model_type"),o0t.forEach(t),jEr=r(n4,` property of the config object (either
passed as an argument or loaded from `),nve=n(n4,"CODE",{});var r0t=s(nve);DEr=r(r0t,"pretrained_model_name_or_path"),r0t.forEach(t),NEr=r(n4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sve=n(n4,"CODE",{});var t0t=s(sve);qEr=r(t0t,"pretrained_model_name_or_path"),t0t.forEach(t),OEr=r(n4,":"),n4.forEach(t),GEr=i($a),Ee=n($a,"UL",{});var lo=s(Ee);cC=n(lo,"LI",{});var Lxe=s(cC);lve=n(Lxe,"STRONG",{});var a0t=s(lve);XEr=r(a0t,"bart"),a0t.forEach(t),VEr=r(Lxe," \u2014 "),dz=n(Lxe,"A",{href:!0});var n0t=s(dz);zEr=r(n0t,"FlaxBartForConditionalGeneration"),n0t.forEach(t),WEr=r(Lxe," (BART model)"),Lxe.forEach(t),QEr=i(lo),fC=n(lo,"LI",{});var Bxe=s(fC);ive=n(Bxe,"STRONG",{});var s0t=s(ive);HEr=r(s0t,"blenderbot"),s0t.forEach(t),UEr=r(Bxe," \u2014 "),cz=n(Bxe,"A",{href:!0});var l0t=s(cz);JEr=r(l0t,"FlaxBlenderbotForConditionalGeneration"),l0t.forEach(t),YEr=r(Bxe," (Blenderbot model)"),Bxe.forEach(t),KEr=i(lo),mC=n(lo,"LI",{});var xxe=s(mC);dve=n(xxe,"STRONG",{});var i0t=s(dve);ZEr=r(i0t,"blenderbot-small"),i0t.forEach(t),e3r=r(xxe," \u2014 "),fz=n(xxe,"A",{href:!0});var d0t=s(fz);o3r=r(d0t,"FlaxBlenderbotSmallForConditionalGeneration"),d0t.forEach(t),r3r=r(xxe," (BlenderbotSmall model)"),xxe.forEach(t),t3r=i(lo),gC=n(lo,"LI",{});var kxe=s(gC);cve=n(kxe,"STRONG",{});var c0t=s(cve);a3r=r(c0t,"encoder-decoder"),c0t.forEach(t),n3r=r(kxe," \u2014 "),mz=n(kxe,"A",{href:!0});var f0t=s(mz);s3r=r(f0t,"FlaxEncoderDecoderModel"),f0t.forEach(t),l3r=r(kxe," (Encoder decoder model)"),kxe.forEach(t),i3r=i(lo),hC=n(lo,"LI",{});var Rxe=s(hC);fve=n(Rxe,"STRONG",{});var m0t=s(fve);d3r=r(m0t,"marian"),m0t.forEach(t),c3r=r(Rxe," \u2014 "),gz=n(Rxe,"A",{href:!0});var g0t=s(gz);f3r=r(g0t,"FlaxMarianMTModel"),g0t.forEach(t),m3r=r(Rxe," (Marian model)"),Rxe.forEach(t),g3r=i(lo),pC=n(lo,"LI",{});var Sxe=s(pC);mve=n(Sxe,"STRONG",{});var h0t=s(mve);h3r=r(h0t,"mbart"),h0t.forEach(t),p3r=r(Sxe," \u2014 "),hz=n(Sxe,"A",{href:!0});var p0t=s(hz);_3r=r(p0t,"FlaxMBartForConditionalGeneration"),p0t.forEach(t),u3r=r(Sxe," (mBART model)"),Sxe.forEach(t),b3r=i(lo),_C=n(lo,"LI",{});var Pxe=s(_C);gve=n(Pxe,"STRONG",{});var _0t=s(gve);v3r=r(_0t,"mt5"),_0t.forEach(t),T3r=r(Pxe," \u2014 "),pz=n(Pxe,"A",{href:!0});var u0t=s(pz);F3r=r(u0t,"FlaxMT5ForConditionalGeneration"),u0t.forEach(t),C3r=r(Pxe," (mT5 model)"),Pxe.forEach(t),M3r=i(lo),uC=n(lo,"LI",{});var $xe=s(uC);hve=n($xe,"STRONG",{});var b0t=s(hve);E3r=r(b0t,"pegasus"),b0t.forEach(t),y3r=r($xe," \u2014 "),_z=n($xe,"A",{href:!0});var v0t=s(_z);w3r=r(v0t,"FlaxPegasusForConditionalGeneration"),v0t.forEach(t),A3r=r($xe," (Pegasus model)"),$xe.forEach(t),L3r=i(lo),bC=n(lo,"LI",{});var Ixe=s(bC);pve=n(Ixe,"STRONG",{});var T0t=s(pve);B3r=r(T0t,"t5"),T0t.forEach(t),x3r=r(Ixe," \u2014 "),uz=n(Ixe,"A",{href:!0});var F0t=s(uz);k3r=r(F0t,"FlaxT5ForConditionalGeneration"),F0t.forEach(t),R3r=r(Ixe," (T5 model)"),Ixe.forEach(t),lo.forEach(t),S3r=i($a),_ve=n($a,"P",{});var C0t=s(_ve);P3r=r(C0t,"Examples:"),C0t.forEach(t),$3r=i($a),m(gL.$$.fragment,$a),$a.forEach(t),yi.forEach(t),fSe=i(d),Ff=n(d,"H2",{class:!0});var y$e=s(Ff);vC=n(y$e,"A",{id:!0,class:!0,href:!0});var M0t=s(vC);uve=n(M0t,"SPAN",{});var E0t=s(uve);m(hL.$$.fragment,E0t),E0t.forEach(t),M0t.forEach(t),I3r=i(y$e),bve=n(y$e,"SPAN",{});var y0t=s(bve);j3r=r(y0t,"FlaxAutoModelForSequenceClassification"),y0t.forEach(t),y$e.forEach(t),mSe=i(d),Dr=n(d,"DIV",{class:!0});var Ai=s(Dr);m(pL.$$.fragment,Ai),D3r=i(Ai),Cf=n(Ai,"P",{});var jQ=s(Cf);N3r=r(jQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),vve=n(jQ,"CODE",{});var w0t=s(vve);q3r=r(w0t,"from_pretrained()"),w0t.forEach(t),O3r=r(jQ,"class method or the "),Tve=n(jQ,"CODE",{});var A0t=s(Tve);G3r=r(A0t,"from_config()"),A0t.forEach(t),X3r=r(jQ,`class
method.`),jQ.forEach(t),V3r=i(Ai),_L=n(Ai,"P",{});var w$e=s(_L);z3r=r(w$e,"This class cannot be instantiated directly using "),Fve=n(w$e,"CODE",{});var L0t=s(Fve);W3r=r(L0t,"__init__()"),L0t.forEach(t),Q3r=r(w$e," (throws an error)."),w$e.forEach(t),H3r=i(Ai),St=n(Ai,"DIV",{class:!0});var Li=s(St);m(uL.$$.fragment,Li),U3r=i(Li),Cve=n(Li,"P",{});var B0t=s(Cve);J3r=r(B0t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),B0t.forEach(t),Y3r=i(Li),Mf=n(Li,"P",{});var DQ=s(Mf);K3r=r(DQ,`Note:
Loading a model from its configuration file does `),Mve=n(DQ,"STRONG",{});var x0t=s(Mve);Z3r=r(x0t,"not"),x0t.forEach(t),eyr=r(DQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Eve=n(DQ,"CODE",{});var k0t=s(Eve);oyr=r(k0t,"from_pretrained()"),k0t.forEach(t),ryr=r(DQ,"to load the model weights."),DQ.forEach(t),tyr=i(Li),yve=n(Li,"P",{});var R0t=s(yve);ayr=r(R0t,"Examples:"),R0t.forEach(t),nyr=i(Li),m(bL.$$.fragment,Li),Li.forEach(t),syr=i(Ai),Ro=n(Ai,"DIV",{class:!0});var Ia=s(Ro);m(vL.$$.fragment,Ia),lyr=i(Ia),wve=n(Ia,"P",{});var S0t=s(wve);iyr=r(S0t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),S0t.forEach(t),dyr=i(Ia),Dn=n(Ia,"P",{});var s4=s(Dn);cyr=r(s4,"The model class to instantiate is selected based on the "),Ave=n(s4,"CODE",{});var P0t=s(Ave);fyr=r(P0t,"model_type"),P0t.forEach(t),myr=r(s4,` property of the config object (either
passed as an argument or loaded from `),Lve=n(s4,"CODE",{});var $0t=s(Lve);gyr=r($0t,"pretrained_model_name_or_path"),$0t.forEach(t),hyr=r(s4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bve=n(s4,"CODE",{});var I0t=s(Bve);pyr=r(I0t,"pretrained_model_name_or_path"),I0t.forEach(t),_yr=r(s4,":"),s4.forEach(t),uyr=i(Ia),ve=n(Ia,"UL",{});var Ae=s(ve);TC=n(Ae,"LI",{});var jxe=s(TC);xve=n(jxe,"STRONG",{});var j0t=s(xve);byr=r(j0t,"albert"),j0t.forEach(t),vyr=r(jxe," \u2014 "),bz=n(jxe,"A",{href:!0});var D0t=s(bz);Tyr=r(D0t,"FlaxAlbertForSequenceClassification"),D0t.forEach(t),Fyr=r(jxe," (ALBERT model)"),jxe.forEach(t),Cyr=i(Ae),FC=n(Ae,"LI",{});var Dxe=s(FC);kve=n(Dxe,"STRONG",{});var N0t=s(kve);Myr=r(N0t,"bart"),N0t.forEach(t),Eyr=r(Dxe," \u2014 "),vz=n(Dxe,"A",{href:!0});var q0t=s(vz);yyr=r(q0t,"FlaxBartForSequenceClassification"),q0t.forEach(t),wyr=r(Dxe," (BART model)"),Dxe.forEach(t),Ayr=i(Ae),CC=n(Ae,"LI",{});var Nxe=s(CC);Rve=n(Nxe,"STRONG",{});var O0t=s(Rve);Lyr=r(O0t,"bert"),O0t.forEach(t),Byr=r(Nxe," \u2014 "),Tz=n(Nxe,"A",{href:!0});var G0t=s(Tz);xyr=r(G0t,"FlaxBertForSequenceClassification"),G0t.forEach(t),kyr=r(Nxe," (BERT model)"),Nxe.forEach(t),Ryr=i(Ae),MC=n(Ae,"LI",{});var qxe=s(MC);Sve=n(qxe,"STRONG",{});var X0t=s(Sve);Syr=r(X0t,"big_bird"),X0t.forEach(t),Pyr=r(qxe," \u2014 "),Fz=n(qxe,"A",{href:!0});var V0t=s(Fz);$yr=r(V0t,"FlaxBigBirdForSequenceClassification"),V0t.forEach(t),Iyr=r(qxe," (BigBird model)"),qxe.forEach(t),jyr=i(Ae),EC=n(Ae,"LI",{});var Oxe=s(EC);Pve=n(Oxe,"STRONG",{});var z0t=s(Pve);Dyr=r(z0t,"distilbert"),z0t.forEach(t),Nyr=r(Oxe," \u2014 "),Cz=n(Oxe,"A",{href:!0});var W0t=s(Cz);qyr=r(W0t,"FlaxDistilBertForSequenceClassification"),W0t.forEach(t),Oyr=r(Oxe," (DistilBERT model)"),Oxe.forEach(t),Gyr=i(Ae),yC=n(Ae,"LI",{});var Gxe=s(yC);$ve=n(Gxe,"STRONG",{});var Q0t=s($ve);Xyr=r(Q0t,"electra"),Q0t.forEach(t),Vyr=r(Gxe," \u2014 "),Mz=n(Gxe,"A",{href:!0});var H0t=s(Mz);zyr=r(H0t,"FlaxElectraForSequenceClassification"),H0t.forEach(t),Wyr=r(Gxe," (ELECTRA model)"),Gxe.forEach(t),Qyr=i(Ae),wC=n(Ae,"LI",{});var Xxe=s(wC);Ive=n(Xxe,"STRONG",{});var U0t=s(Ive);Hyr=r(U0t,"mbart"),U0t.forEach(t),Uyr=r(Xxe," \u2014 "),Ez=n(Xxe,"A",{href:!0});var J0t=s(Ez);Jyr=r(J0t,"FlaxMBartForSequenceClassification"),J0t.forEach(t),Yyr=r(Xxe," (mBART model)"),Xxe.forEach(t),Kyr=i(Ae),AC=n(Ae,"LI",{});var Vxe=s(AC);jve=n(Vxe,"STRONG",{});var Y0t=s(jve);Zyr=r(Y0t,"roberta"),Y0t.forEach(t),ewr=r(Vxe," \u2014 "),yz=n(Vxe,"A",{href:!0});var K0t=s(yz);owr=r(K0t,"FlaxRobertaForSequenceClassification"),K0t.forEach(t),rwr=r(Vxe," (RoBERTa model)"),Vxe.forEach(t),twr=i(Ae),LC=n(Ae,"LI",{});var zxe=s(LC);Dve=n(zxe,"STRONG",{});var Z0t=s(Dve);awr=r(Z0t,"roformer"),Z0t.forEach(t),nwr=r(zxe," \u2014 "),wz=n(zxe,"A",{href:!0});var eTt=s(wz);swr=r(eTt,"FlaxRoFormerForSequenceClassification"),eTt.forEach(t),lwr=r(zxe," (RoFormer model)"),zxe.forEach(t),iwr=i(Ae),BC=n(Ae,"LI",{});var Wxe=s(BC);Nve=n(Wxe,"STRONG",{});var oTt=s(Nve);dwr=r(oTt,"xlm-roberta"),oTt.forEach(t),cwr=r(Wxe," \u2014 "),Az=n(Wxe,"A",{href:!0});var rTt=s(Az);fwr=r(rTt,"FlaxXLMRobertaForSequenceClassification"),rTt.forEach(t),mwr=r(Wxe," (XLM-RoBERTa model)"),Wxe.forEach(t),Ae.forEach(t),gwr=i(Ia),qve=n(Ia,"P",{});var tTt=s(qve);hwr=r(tTt,"Examples:"),tTt.forEach(t),pwr=i(Ia),m(TL.$$.fragment,Ia),Ia.forEach(t),Ai.forEach(t),gSe=i(d),Ef=n(d,"H2",{class:!0});var A$e=s(Ef);xC=n(A$e,"A",{id:!0,class:!0,href:!0});var aTt=s(xC);Ove=n(aTt,"SPAN",{});var nTt=s(Ove);m(FL.$$.fragment,nTt),nTt.forEach(t),aTt.forEach(t),_wr=i(A$e),Gve=n(A$e,"SPAN",{});var sTt=s(Gve);uwr=r(sTt,"FlaxAutoModelForSpeechSeq2Seq"),sTt.forEach(t),A$e.forEach(t),hSe=i(d),Nr=n(d,"DIV",{class:!0});var Bi=s(Nr);m(CL.$$.fragment,Bi),bwr=i(Bi),yf=n(Bi,"P",{});var NQ=s(yf);vwr=r(NQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Xve=n(NQ,"CODE",{});var lTt=s(Xve);Twr=r(lTt,"from_pretrained()"),lTt.forEach(t),Fwr=r(NQ,"class method or the "),Vve=n(NQ,"CODE",{});var iTt=s(Vve);Cwr=r(iTt,"from_config()"),iTt.forEach(t),Mwr=r(NQ,`class
method.`),NQ.forEach(t),Ewr=i(Bi),ML=n(Bi,"P",{});var L$e=s(ML);ywr=r(L$e,"This class cannot be instantiated directly using "),zve=n(L$e,"CODE",{});var dTt=s(zve);wwr=r(dTt,"__init__()"),dTt.forEach(t),Awr=r(L$e," (throws an error)."),L$e.forEach(t),Lwr=i(Bi),Pt=n(Bi,"DIV",{class:!0});var xi=s(Pt);m(EL.$$.fragment,xi),Bwr=i(xi),Wve=n(xi,"P",{});var cTt=s(Wve);xwr=r(cTt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),cTt.forEach(t),kwr=i(xi),wf=n(xi,"P",{});var qQ=s(wf);Rwr=r(qQ,`Note:
Loading a model from its configuration file does `),Qve=n(qQ,"STRONG",{});var fTt=s(Qve);Swr=r(fTt,"not"),fTt.forEach(t),Pwr=r(qQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hve=n(qQ,"CODE",{});var mTt=s(Hve);$wr=r(mTt,"from_pretrained()"),mTt.forEach(t),Iwr=r(qQ,"to load the model weights."),qQ.forEach(t),jwr=i(xi),Uve=n(xi,"P",{});var gTt=s(Uve);Dwr=r(gTt,"Examples:"),gTt.forEach(t),Nwr=i(xi),m(yL.$$.fragment,xi),xi.forEach(t),qwr=i(Bi),So=n(Bi,"DIV",{class:!0});var ja=s(So);m(wL.$$.fragment,ja),Owr=i(ja),Jve=n(ja,"P",{});var hTt=s(Jve);Gwr=r(hTt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),hTt.forEach(t),Xwr=i(ja),Nn=n(ja,"P",{});var l4=s(Nn);Vwr=r(l4,"The model class to instantiate is selected based on the "),Yve=n(l4,"CODE",{});var pTt=s(Yve);zwr=r(pTt,"model_type"),pTt.forEach(t),Wwr=r(l4,` property of the config object (either
passed as an argument or loaded from `),Kve=n(l4,"CODE",{});var _Tt=s(Kve);Qwr=r(_Tt,"pretrained_model_name_or_path"),_Tt.forEach(t),Hwr=r(l4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zve=n(l4,"CODE",{});var uTt=s(Zve);Uwr=r(uTt,"pretrained_model_name_or_path"),uTt.forEach(t),Jwr=r(l4,":"),l4.forEach(t),Ywr=i(ja),e6e=n(ja,"UL",{});var bTt=s(e6e);kC=n(bTt,"LI",{});var Qxe=s(kC);o6e=n(Qxe,"STRONG",{});var vTt=s(o6e);Kwr=r(vTt,"speech-encoder-decoder"),vTt.forEach(t),Zwr=r(Qxe," \u2014 "),Lz=n(Qxe,"A",{href:!0});var TTt=s(Lz);eAr=r(TTt,"FlaxSpeechEncoderDecoderModel"),TTt.forEach(t),oAr=r(Qxe," (Speech Encoder decoder model)"),Qxe.forEach(t),bTt.forEach(t),rAr=i(ja),r6e=n(ja,"P",{});var FTt=s(r6e);tAr=r(FTt,"Examples:"),FTt.forEach(t),aAr=i(ja),m(AL.$$.fragment,ja),ja.forEach(t),Bi.forEach(t),pSe=i(d),Af=n(d,"H2",{class:!0});var B$e=s(Af);RC=n(B$e,"A",{id:!0,class:!0,href:!0});var CTt=s(RC);t6e=n(CTt,"SPAN",{});var MTt=s(t6e);m(LL.$$.fragment,MTt),MTt.forEach(t),CTt.forEach(t),nAr=i(B$e),a6e=n(B$e,"SPAN",{});var ETt=s(a6e);sAr=r(ETt,"FlaxAutoModelForQuestionAnswering"),ETt.forEach(t),B$e.forEach(t),_Se=i(d),qr=n(d,"DIV",{class:!0});var ki=s(qr);m(BL.$$.fragment,ki),lAr=i(ki),Lf=n(ki,"P",{});var OQ=s(Lf);iAr=r(OQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),n6e=n(OQ,"CODE",{});var yTt=s(n6e);dAr=r(yTt,"from_pretrained()"),yTt.forEach(t),cAr=r(OQ,"class method or the "),s6e=n(OQ,"CODE",{});var wTt=s(s6e);fAr=r(wTt,"from_config()"),wTt.forEach(t),mAr=r(OQ,`class
method.`),OQ.forEach(t),gAr=i(ki),xL=n(ki,"P",{});var x$e=s(xL);hAr=r(x$e,"This class cannot be instantiated directly using "),l6e=n(x$e,"CODE",{});var ATt=s(l6e);pAr=r(ATt,"__init__()"),ATt.forEach(t),_Ar=r(x$e," (throws an error)."),x$e.forEach(t),uAr=i(ki),$t=n(ki,"DIV",{class:!0});var Ri=s($t);m(kL.$$.fragment,Ri),bAr=i(Ri),i6e=n(Ri,"P",{});var LTt=s(i6e);vAr=r(LTt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),LTt.forEach(t),TAr=i(Ri),Bf=n(Ri,"P",{});var GQ=s(Bf);FAr=r(GQ,`Note:
Loading a model from its configuration file does `),d6e=n(GQ,"STRONG",{});var BTt=s(d6e);CAr=r(BTt,"not"),BTt.forEach(t),MAr=r(GQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),c6e=n(GQ,"CODE",{});var xTt=s(c6e);EAr=r(xTt,"from_pretrained()"),xTt.forEach(t),yAr=r(GQ,"to load the model weights."),GQ.forEach(t),wAr=i(Ri),f6e=n(Ri,"P",{});var kTt=s(f6e);AAr=r(kTt,"Examples:"),kTt.forEach(t),LAr=i(Ri),m(RL.$$.fragment,Ri),Ri.forEach(t),BAr=i(ki),Po=n(ki,"DIV",{class:!0});var Da=s(Po);m(SL.$$.fragment,Da),xAr=i(Da),m6e=n(Da,"P",{});var RTt=s(m6e);kAr=r(RTt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),RTt.forEach(t),RAr=i(Da),qn=n(Da,"P",{});var i4=s(qn);SAr=r(i4,"The model class to instantiate is selected based on the "),g6e=n(i4,"CODE",{});var STt=s(g6e);PAr=r(STt,"model_type"),STt.forEach(t),$Ar=r(i4,` property of the config object (either
passed as an argument or loaded from `),h6e=n(i4,"CODE",{});var PTt=s(h6e);IAr=r(PTt,"pretrained_model_name_or_path"),PTt.forEach(t),jAr=r(i4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p6e=n(i4,"CODE",{});var $Tt=s(p6e);DAr=r($Tt,"pretrained_model_name_or_path"),$Tt.forEach(t),NAr=r(i4,":"),i4.forEach(t),qAr=i(Da),Te=n(Da,"UL",{});var Le=s(Te);SC=n(Le,"LI",{});var Hxe=s(SC);_6e=n(Hxe,"STRONG",{});var ITt=s(_6e);OAr=r(ITt,"albert"),ITt.forEach(t),GAr=r(Hxe," \u2014 "),Bz=n(Hxe,"A",{href:!0});var jTt=s(Bz);XAr=r(jTt,"FlaxAlbertForQuestionAnswering"),jTt.forEach(t),VAr=r(Hxe," (ALBERT model)"),Hxe.forEach(t),zAr=i(Le),PC=n(Le,"LI",{});var Uxe=s(PC);u6e=n(Uxe,"STRONG",{});var DTt=s(u6e);WAr=r(DTt,"bart"),DTt.forEach(t),QAr=r(Uxe," \u2014 "),xz=n(Uxe,"A",{href:!0});var NTt=s(xz);HAr=r(NTt,"FlaxBartForQuestionAnswering"),NTt.forEach(t),UAr=r(Uxe," (BART model)"),Uxe.forEach(t),JAr=i(Le),$C=n(Le,"LI",{});var Jxe=s($C);b6e=n(Jxe,"STRONG",{});var qTt=s(b6e);YAr=r(qTt,"bert"),qTt.forEach(t),KAr=r(Jxe," \u2014 "),kz=n(Jxe,"A",{href:!0});var OTt=s(kz);ZAr=r(OTt,"FlaxBertForQuestionAnswering"),OTt.forEach(t),eLr=r(Jxe," (BERT model)"),Jxe.forEach(t),oLr=i(Le),IC=n(Le,"LI",{});var Yxe=s(IC);v6e=n(Yxe,"STRONG",{});var GTt=s(v6e);rLr=r(GTt,"big_bird"),GTt.forEach(t),tLr=r(Yxe," \u2014 "),Rz=n(Yxe,"A",{href:!0});var XTt=s(Rz);aLr=r(XTt,"FlaxBigBirdForQuestionAnswering"),XTt.forEach(t),nLr=r(Yxe," (BigBird model)"),Yxe.forEach(t),sLr=i(Le),jC=n(Le,"LI",{});var Kxe=s(jC);T6e=n(Kxe,"STRONG",{});var VTt=s(T6e);lLr=r(VTt,"distilbert"),VTt.forEach(t),iLr=r(Kxe," \u2014 "),Sz=n(Kxe,"A",{href:!0});var zTt=s(Sz);dLr=r(zTt,"FlaxDistilBertForQuestionAnswering"),zTt.forEach(t),cLr=r(Kxe," (DistilBERT model)"),Kxe.forEach(t),fLr=i(Le),DC=n(Le,"LI",{});var Zxe=s(DC);F6e=n(Zxe,"STRONG",{});var WTt=s(F6e);mLr=r(WTt,"electra"),WTt.forEach(t),gLr=r(Zxe," \u2014 "),Pz=n(Zxe,"A",{href:!0});var QTt=s(Pz);hLr=r(QTt,"FlaxElectraForQuestionAnswering"),QTt.forEach(t),pLr=r(Zxe," (ELECTRA model)"),Zxe.forEach(t),_Lr=i(Le),NC=n(Le,"LI",{});var eke=s(NC);C6e=n(eke,"STRONG",{});var HTt=s(C6e);uLr=r(HTt,"mbart"),HTt.forEach(t),bLr=r(eke," \u2014 "),$z=n(eke,"A",{href:!0});var UTt=s($z);vLr=r(UTt,"FlaxMBartForQuestionAnswering"),UTt.forEach(t),TLr=r(eke," (mBART model)"),eke.forEach(t),FLr=i(Le),qC=n(Le,"LI",{});var oke=s(qC);M6e=n(oke,"STRONG",{});var JTt=s(M6e);CLr=r(JTt,"roberta"),JTt.forEach(t),MLr=r(oke," \u2014 "),Iz=n(oke,"A",{href:!0});var YTt=s(Iz);ELr=r(YTt,"FlaxRobertaForQuestionAnswering"),YTt.forEach(t),yLr=r(oke," (RoBERTa model)"),oke.forEach(t),wLr=i(Le),OC=n(Le,"LI",{});var rke=s(OC);E6e=n(rke,"STRONG",{});var KTt=s(E6e);ALr=r(KTt,"roformer"),KTt.forEach(t),LLr=r(rke," \u2014 "),jz=n(rke,"A",{href:!0});var ZTt=s(jz);BLr=r(ZTt,"FlaxRoFormerForQuestionAnswering"),ZTt.forEach(t),xLr=r(rke," (RoFormer model)"),rke.forEach(t),kLr=i(Le),GC=n(Le,"LI",{});var tke=s(GC);y6e=n(tke,"STRONG",{});var e8t=s(y6e);RLr=r(e8t,"xlm-roberta"),e8t.forEach(t),SLr=r(tke," \u2014 "),Dz=n(tke,"A",{href:!0});var o8t=s(Dz);PLr=r(o8t,"FlaxXLMRobertaForQuestionAnswering"),o8t.forEach(t),$Lr=r(tke," (XLM-RoBERTa model)"),tke.forEach(t),Le.forEach(t),ILr=i(Da),w6e=n(Da,"P",{});var r8t=s(w6e);jLr=r(r8t,"Examples:"),r8t.forEach(t),DLr=i(Da),m(PL.$$.fragment,Da),Da.forEach(t),ki.forEach(t),uSe=i(d),xf=n(d,"H2",{class:!0});var k$e=s(xf);XC=n(k$e,"A",{id:!0,class:!0,href:!0});var t8t=s(XC);A6e=n(t8t,"SPAN",{});var a8t=s(A6e);m($L.$$.fragment,a8t),a8t.forEach(t),t8t.forEach(t),NLr=i(k$e),L6e=n(k$e,"SPAN",{});var n8t=s(L6e);qLr=r(n8t,"FlaxAutoModelForTokenClassification"),n8t.forEach(t),k$e.forEach(t),bSe=i(d),Or=n(d,"DIV",{class:!0});var Si=s(Or);m(IL.$$.fragment,Si),OLr=i(Si),kf=n(Si,"P",{});var XQ=s(kf);GLr=r(XQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),B6e=n(XQ,"CODE",{});var s8t=s(B6e);XLr=r(s8t,"from_pretrained()"),s8t.forEach(t),VLr=r(XQ,"class method or the "),x6e=n(XQ,"CODE",{});var l8t=s(x6e);zLr=r(l8t,"from_config()"),l8t.forEach(t),WLr=r(XQ,`class
method.`),XQ.forEach(t),QLr=i(Si),jL=n(Si,"P",{});var R$e=s(jL);HLr=r(R$e,"This class cannot be instantiated directly using "),k6e=n(R$e,"CODE",{});var i8t=s(k6e);ULr=r(i8t,"__init__()"),i8t.forEach(t),JLr=r(R$e," (throws an error)."),R$e.forEach(t),YLr=i(Si),It=n(Si,"DIV",{class:!0});var Pi=s(It);m(DL.$$.fragment,Pi),KLr=i(Pi),R6e=n(Pi,"P",{});var d8t=s(R6e);ZLr=r(d8t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),d8t.forEach(t),e7r=i(Pi),Rf=n(Pi,"P",{});var VQ=s(Rf);o7r=r(VQ,`Note:
Loading a model from its configuration file does `),S6e=n(VQ,"STRONG",{});var c8t=s(S6e);r7r=r(c8t,"not"),c8t.forEach(t),t7r=r(VQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),P6e=n(VQ,"CODE",{});var f8t=s(P6e);a7r=r(f8t,"from_pretrained()"),f8t.forEach(t),n7r=r(VQ,"to load the model weights."),VQ.forEach(t),s7r=i(Pi),$6e=n(Pi,"P",{});var m8t=s($6e);l7r=r(m8t,"Examples:"),m8t.forEach(t),i7r=i(Pi),m(NL.$$.fragment,Pi),Pi.forEach(t),d7r=i(Si),$o=n(Si,"DIV",{class:!0});var Na=s($o);m(qL.$$.fragment,Na),c7r=i(Na),I6e=n(Na,"P",{});var g8t=s(I6e);f7r=r(g8t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),g8t.forEach(t),m7r=i(Na),On=n(Na,"P",{});var d4=s(On);g7r=r(d4,"The model class to instantiate is selected based on the "),j6e=n(d4,"CODE",{});var h8t=s(j6e);h7r=r(h8t,"model_type"),h8t.forEach(t),p7r=r(d4,` property of the config object (either
passed as an argument or loaded from `),D6e=n(d4,"CODE",{});var p8t=s(D6e);_7r=r(p8t,"pretrained_model_name_or_path"),p8t.forEach(t),u7r=r(d4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N6e=n(d4,"CODE",{});var _8t=s(N6e);b7r=r(_8t,"pretrained_model_name_or_path"),_8t.forEach(t),v7r=r(d4,":"),d4.forEach(t),T7r=i(Na),Se=n(Na,"UL",{});var Xo=s(Se);VC=n(Xo,"LI",{});var ake=s(VC);q6e=n(ake,"STRONG",{});var u8t=s(q6e);F7r=r(u8t,"albert"),u8t.forEach(t),C7r=r(ake," \u2014 "),Nz=n(ake,"A",{href:!0});var b8t=s(Nz);M7r=r(b8t,"FlaxAlbertForTokenClassification"),b8t.forEach(t),E7r=r(ake," (ALBERT model)"),ake.forEach(t),y7r=i(Xo),zC=n(Xo,"LI",{});var nke=s(zC);O6e=n(nke,"STRONG",{});var v8t=s(O6e);w7r=r(v8t,"bert"),v8t.forEach(t),A7r=r(nke," \u2014 "),qz=n(nke,"A",{href:!0});var T8t=s(qz);L7r=r(T8t,"FlaxBertForTokenClassification"),T8t.forEach(t),B7r=r(nke," (BERT model)"),nke.forEach(t),x7r=i(Xo),WC=n(Xo,"LI",{});var ske=s(WC);G6e=n(ske,"STRONG",{});var F8t=s(G6e);k7r=r(F8t,"big_bird"),F8t.forEach(t),R7r=r(ske," \u2014 "),Oz=n(ske,"A",{href:!0});var C8t=s(Oz);S7r=r(C8t,"FlaxBigBirdForTokenClassification"),C8t.forEach(t),P7r=r(ske," (BigBird model)"),ske.forEach(t),$7r=i(Xo),QC=n(Xo,"LI",{});var lke=s(QC);X6e=n(lke,"STRONG",{});var M8t=s(X6e);I7r=r(M8t,"distilbert"),M8t.forEach(t),j7r=r(lke," \u2014 "),Gz=n(lke,"A",{href:!0});var E8t=s(Gz);D7r=r(E8t,"FlaxDistilBertForTokenClassification"),E8t.forEach(t),N7r=r(lke," (DistilBERT model)"),lke.forEach(t),q7r=i(Xo),HC=n(Xo,"LI",{});var ike=s(HC);V6e=n(ike,"STRONG",{});var y8t=s(V6e);O7r=r(y8t,"electra"),y8t.forEach(t),G7r=r(ike," \u2014 "),Xz=n(ike,"A",{href:!0});var w8t=s(Xz);X7r=r(w8t,"FlaxElectraForTokenClassification"),w8t.forEach(t),V7r=r(ike," (ELECTRA model)"),ike.forEach(t),z7r=i(Xo),UC=n(Xo,"LI",{});var dke=s(UC);z6e=n(dke,"STRONG",{});var A8t=s(z6e);W7r=r(A8t,"roberta"),A8t.forEach(t),Q7r=r(dke," \u2014 "),Vz=n(dke,"A",{href:!0});var L8t=s(Vz);H7r=r(L8t,"FlaxRobertaForTokenClassification"),L8t.forEach(t),U7r=r(dke," (RoBERTa model)"),dke.forEach(t),J7r=i(Xo),JC=n(Xo,"LI",{});var cke=s(JC);W6e=n(cke,"STRONG",{});var B8t=s(W6e);Y7r=r(B8t,"roformer"),B8t.forEach(t),K7r=r(cke," \u2014 "),zz=n(cke,"A",{href:!0});var x8t=s(zz);Z7r=r(x8t,"FlaxRoFormerForTokenClassification"),x8t.forEach(t),e9r=r(cke," (RoFormer model)"),cke.forEach(t),o9r=i(Xo),YC=n(Xo,"LI",{});var fke=s(YC);Q6e=n(fke,"STRONG",{});var k8t=s(Q6e);r9r=r(k8t,"xlm-roberta"),k8t.forEach(t),t9r=r(fke," \u2014 "),Wz=n(fke,"A",{href:!0});var R8t=s(Wz);a9r=r(R8t,"FlaxXLMRobertaForTokenClassification"),R8t.forEach(t),n9r=r(fke," (XLM-RoBERTa model)"),fke.forEach(t),Xo.forEach(t),s9r=i(Na),H6e=n(Na,"P",{});var S8t=s(H6e);l9r=r(S8t,"Examples:"),S8t.forEach(t),i9r=i(Na),m(OL.$$.fragment,Na),Na.forEach(t),Si.forEach(t),vSe=i(d),Sf=n(d,"H2",{class:!0});var S$e=s(Sf);KC=n(S$e,"A",{id:!0,class:!0,href:!0});var P8t=s(KC);U6e=n(P8t,"SPAN",{});var $8t=s(U6e);m(GL.$$.fragment,$8t),$8t.forEach(t),P8t.forEach(t),d9r=i(S$e),J6e=n(S$e,"SPAN",{});var I8t=s(J6e);c9r=r(I8t,"FlaxAutoModelForMultipleChoice"),I8t.forEach(t),S$e.forEach(t),TSe=i(d),Gr=n(d,"DIV",{class:!0});var $i=s(Gr);m(XL.$$.fragment,$i),f9r=i($i),Pf=n($i,"P",{});var zQ=s(Pf);m9r=r(zQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Y6e=n(zQ,"CODE",{});var j8t=s(Y6e);g9r=r(j8t,"from_pretrained()"),j8t.forEach(t),h9r=r(zQ,"class method or the "),K6e=n(zQ,"CODE",{});var D8t=s(K6e);p9r=r(D8t,"from_config()"),D8t.forEach(t),_9r=r(zQ,`class
method.`),zQ.forEach(t),u9r=i($i),VL=n($i,"P",{});var P$e=s(VL);b9r=r(P$e,"This class cannot be instantiated directly using "),Z6e=n(P$e,"CODE",{});var N8t=s(Z6e);v9r=r(N8t,"__init__()"),N8t.forEach(t),T9r=r(P$e," (throws an error)."),P$e.forEach(t),F9r=i($i),jt=n($i,"DIV",{class:!0});var Ii=s(jt);m(zL.$$.fragment,Ii),C9r=i(Ii),e0e=n(Ii,"P",{});var q8t=s(e0e);M9r=r(q8t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),q8t.forEach(t),E9r=i(Ii),$f=n(Ii,"P",{});var WQ=s($f);y9r=r(WQ,`Note:
Loading a model from its configuration file does `),o0e=n(WQ,"STRONG",{});var O8t=s(o0e);w9r=r(O8t,"not"),O8t.forEach(t),A9r=r(WQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),r0e=n(WQ,"CODE",{});var G8t=s(r0e);L9r=r(G8t,"from_pretrained()"),G8t.forEach(t),B9r=r(WQ,"to load the model weights."),WQ.forEach(t),x9r=i(Ii),t0e=n(Ii,"P",{});var X8t=s(t0e);k9r=r(X8t,"Examples:"),X8t.forEach(t),R9r=i(Ii),m(WL.$$.fragment,Ii),Ii.forEach(t),S9r=i($i),Io=n($i,"DIV",{class:!0});var qa=s(Io);m(QL.$$.fragment,qa),P9r=i(qa),a0e=n(qa,"P",{});var V8t=s(a0e);$9r=r(V8t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),V8t.forEach(t),I9r=i(qa),Gn=n(qa,"P",{});var c4=s(Gn);j9r=r(c4,"The model class to instantiate is selected based on the "),n0e=n(c4,"CODE",{});var z8t=s(n0e);D9r=r(z8t,"model_type"),z8t.forEach(t),N9r=r(c4,` property of the config object (either
passed as an argument or loaded from `),s0e=n(c4,"CODE",{});var W8t=s(s0e);q9r=r(W8t,"pretrained_model_name_or_path"),W8t.forEach(t),O9r=r(c4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l0e=n(c4,"CODE",{});var Q8t=s(l0e);G9r=r(Q8t,"pretrained_model_name_or_path"),Q8t.forEach(t),X9r=r(c4,":"),c4.forEach(t),V9r=i(qa),Pe=n(qa,"UL",{});var Vo=s(Pe);ZC=n(Vo,"LI",{});var mke=s(ZC);i0e=n(mke,"STRONG",{});var H8t=s(i0e);z9r=r(H8t,"albert"),H8t.forEach(t),W9r=r(mke," \u2014 "),Qz=n(mke,"A",{href:!0});var U8t=s(Qz);Q9r=r(U8t,"FlaxAlbertForMultipleChoice"),U8t.forEach(t),H9r=r(mke," (ALBERT model)"),mke.forEach(t),U9r=i(Vo),eM=n(Vo,"LI",{});var gke=s(eM);d0e=n(gke,"STRONG",{});var J8t=s(d0e);J9r=r(J8t,"bert"),J8t.forEach(t),Y9r=r(gke," \u2014 "),Hz=n(gke,"A",{href:!0});var Y8t=s(Hz);K9r=r(Y8t,"FlaxBertForMultipleChoice"),Y8t.forEach(t),Z9r=r(gke," (BERT model)"),gke.forEach(t),eBr=i(Vo),oM=n(Vo,"LI",{});var hke=s(oM);c0e=n(hke,"STRONG",{});var K8t=s(c0e);oBr=r(K8t,"big_bird"),K8t.forEach(t),rBr=r(hke," \u2014 "),Uz=n(hke,"A",{href:!0});var Z8t=s(Uz);tBr=r(Z8t,"FlaxBigBirdForMultipleChoice"),Z8t.forEach(t),aBr=r(hke," (BigBird model)"),hke.forEach(t),nBr=i(Vo),rM=n(Vo,"LI",{});var pke=s(rM);f0e=n(pke,"STRONG",{});var eFt=s(f0e);sBr=r(eFt,"distilbert"),eFt.forEach(t),lBr=r(pke," \u2014 "),Jz=n(pke,"A",{href:!0});var oFt=s(Jz);iBr=r(oFt,"FlaxDistilBertForMultipleChoice"),oFt.forEach(t),dBr=r(pke," (DistilBERT model)"),pke.forEach(t),cBr=i(Vo),tM=n(Vo,"LI",{});var _ke=s(tM);m0e=n(_ke,"STRONG",{});var rFt=s(m0e);fBr=r(rFt,"electra"),rFt.forEach(t),mBr=r(_ke," \u2014 "),Yz=n(_ke,"A",{href:!0});var tFt=s(Yz);gBr=r(tFt,"FlaxElectraForMultipleChoice"),tFt.forEach(t),hBr=r(_ke," (ELECTRA model)"),_ke.forEach(t),pBr=i(Vo),aM=n(Vo,"LI",{});var uke=s(aM);g0e=n(uke,"STRONG",{});var aFt=s(g0e);_Br=r(aFt,"roberta"),aFt.forEach(t),uBr=r(uke," \u2014 "),Kz=n(uke,"A",{href:!0});var nFt=s(Kz);bBr=r(nFt,"FlaxRobertaForMultipleChoice"),nFt.forEach(t),vBr=r(uke," (RoBERTa model)"),uke.forEach(t),TBr=i(Vo),nM=n(Vo,"LI",{});var bke=s(nM);h0e=n(bke,"STRONG",{});var sFt=s(h0e);FBr=r(sFt,"roformer"),sFt.forEach(t),CBr=r(bke," \u2014 "),Zz=n(bke,"A",{href:!0});var lFt=s(Zz);MBr=r(lFt,"FlaxRoFormerForMultipleChoice"),lFt.forEach(t),EBr=r(bke," (RoFormer model)"),bke.forEach(t),yBr=i(Vo),sM=n(Vo,"LI",{});var vke=s(sM);p0e=n(vke,"STRONG",{});var iFt=s(p0e);wBr=r(iFt,"xlm-roberta"),iFt.forEach(t),ABr=r(vke," \u2014 "),eW=n(vke,"A",{href:!0});var dFt=s(eW);LBr=r(dFt,"FlaxXLMRobertaForMultipleChoice"),dFt.forEach(t),BBr=r(vke," (XLM-RoBERTa model)"),vke.forEach(t),Vo.forEach(t),xBr=i(qa),_0e=n(qa,"P",{});var cFt=s(_0e);kBr=r(cFt,"Examples:"),cFt.forEach(t),RBr=i(qa),m(HL.$$.fragment,qa),qa.forEach(t),$i.forEach(t),FSe=i(d),If=n(d,"H2",{class:!0});var $$e=s(If);lM=n($$e,"A",{id:!0,class:!0,href:!0});var fFt=s(lM);u0e=n(fFt,"SPAN",{});var mFt=s(u0e);m(UL.$$.fragment,mFt),mFt.forEach(t),fFt.forEach(t),SBr=i($$e),b0e=n($$e,"SPAN",{});var gFt=s(b0e);PBr=r(gFt,"FlaxAutoModelForNextSentencePrediction"),gFt.forEach(t),$$e.forEach(t),CSe=i(d),Xr=n(d,"DIV",{class:!0});var ji=s(Xr);m(JL.$$.fragment,ji),$Br=i(ji),jf=n(ji,"P",{});var QQ=s(jf);IBr=r(QQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),v0e=n(QQ,"CODE",{});var hFt=s(v0e);jBr=r(hFt,"from_pretrained()"),hFt.forEach(t),DBr=r(QQ,"class method or the "),T0e=n(QQ,"CODE",{});var pFt=s(T0e);NBr=r(pFt,"from_config()"),pFt.forEach(t),qBr=r(QQ,`class
method.`),QQ.forEach(t),OBr=i(ji),YL=n(ji,"P",{});var I$e=s(YL);GBr=r(I$e,"This class cannot be instantiated directly using "),F0e=n(I$e,"CODE",{});var _Ft=s(F0e);XBr=r(_Ft,"__init__()"),_Ft.forEach(t),VBr=r(I$e," (throws an error)."),I$e.forEach(t),zBr=i(ji),Dt=n(ji,"DIV",{class:!0});var Di=s(Dt);m(KL.$$.fragment,Di),WBr=i(Di),C0e=n(Di,"P",{});var uFt=s(C0e);QBr=r(uFt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),uFt.forEach(t),HBr=i(Di),Df=n(Di,"P",{});var HQ=s(Df);UBr=r(HQ,`Note:
Loading a model from its configuration file does `),M0e=n(HQ,"STRONG",{});var bFt=s(M0e);JBr=r(bFt,"not"),bFt.forEach(t),YBr=r(HQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),E0e=n(HQ,"CODE",{});var vFt=s(E0e);KBr=r(vFt,"from_pretrained()"),vFt.forEach(t),ZBr=r(HQ,"to load the model weights."),HQ.forEach(t),exr=i(Di),y0e=n(Di,"P",{});var TFt=s(y0e);oxr=r(TFt,"Examples:"),TFt.forEach(t),rxr=i(Di),m(ZL.$$.fragment,Di),Di.forEach(t),txr=i(ji),jo=n(ji,"DIV",{class:!0});var Oa=s(jo);m(e7.$$.fragment,Oa),axr=i(Oa),w0e=n(Oa,"P",{});var FFt=s(w0e);nxr=r(FFt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),FFt.forEach(t),sxr=i(Oa),Xn=n(Oa,"P",{});var f4=s(Xn);lxr=r(f4,"The model class to instantiate is selected based on the "),A0e=n(f4,"CODE",{});var CFt=s(A0e);ixr=r(CFt,"model_type"),CFt.forEach(t),dxr=r(f4,` property of the config object (either
passed as an argument or loaded from `),L0e=n(f4,"CODE",{});var MFt=s(L0e);cxr=r(MFt,"pretrained_model_name_or_path"),MFt.forEach(t),fxr=r(f4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B0e=n(f4,"CODE",{});var EFt=s(B0e);mxr=r(EFt,"pretrained_model_name_or_path"),EFt.forEach(t),gxr=r(f4,":"),f4.forEach(t),hxr=i(Oa),x0e=n(Oa,"UL",{});var yFt=s(x0e);iM=n(yFt,"LI",{});var Tke=s(iM);k0e=n(Tke,"STRONG",{});var wFt=s(k0e);pxr=r(wFt,"bert"),wFt.forEach(t),_xr=r(Tke," \u2014 "),oW=n(Tke,"A",{href:!0});var AFt=s(oW);uxr=r(AFt,"FlaxBertForNextSentencePrediction"),AFt.forEach(t),bxr=r(Tke," (BERT model)"),Tke.forEach(t),yFt.forEach(t),vxr=i(Oa),R0e=n(Oa,"P",{});var LFt=s(R0e);Txr=r(LFt,"Examples:"),LFt.forEach(t),Fxr=i(Oa),m(o7.$$.fragment,Oa),Oa.forEach(t),ji.forEach(t),MSe=i(d),Nf=n(d,"H2",{class:!0});var j$e=s(Nf);dM=n(j$e,"A",{id:!0,class:!0,href:!0});var BFt=s(dM);S0e=n(BFt,"SPAN",{});var xFt=s(S0e);m(r7.$$.fragment,xFt),xFt.forEach(t),BFt.forEach(t),Cxr=i(j$e),P0e=n(j$e,"SPAN",{});var kFt=s(P0e);Mxr=r(kFt,"FlaxAutoModelForImageClassification"),kFt.forEach(t),j$e.forEach(t),ESe=i(d),Vr=n(d,"DIV",{class:!0});var Ni=s(Vr);m(t7.$$.fragment,Ni),Exr=i(Ni),qf=n(Ni,"P",{});var UQ=s(qf);yxr=r(UQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),$0e=n(UQ,"CODE",{});var RFt=s($0e);wxr=r(RFt,"from_pretrained()"),RFt.forEach(t),Axr=r(UQ,"class method or the "),I0e=n(UQ,"CODE",{});var SFt=s(I0e);Lxr=r(SFt,"from_config()"),SFt.forEach(t),Bxr=r(UQ,`class
method.`),UQ.forEach(t),xxr=i(Ni),a7=n(Ni,"P",{});var D$e=s(a7);kxr=r(D$e,"This class cannot be instantiated directly using "),j0e=n(D$e,"CODE",{});var PFt=s(j0e);Rxr=r(PFt,"__init__()"),PFt.forEach(t),Sxr=r(D$e," (throws an error)."),D$e.forEach(t),Pxr=i(Ni),Nt=n(Ni,"DIV",{class:!0});var qi=s(Nt);m(n7.$$.fragment,qi),$xr=i(qi),D0e=n(qi,"P",{});var $Ft=s(D0e);Ixr=r($Ft,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),$Ft.forEach(t),jxr=i(qi),Of=n(qi,"P",{});var JQ=s(Of);Dxr=r(JQ,`Note:
Loading a model from its configuration file does `),N0e=n(JQ,"STRONG",{});var IFt=s(N0e);Nxr=r(IFt,"not"),IFt.forEach(t),qxr=r(JQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),q0e=n(JQ,"CODE",{});var jFt=s(q0e);Oxr=r(jFt,"from_pretrained()"),jFt.forEach(t),Gxr=r(JQ,"to load the model weights."),JQ.forEach(t),Xxr=i(qi),O0e=n(qi,"P",{});var DFt=s(O0e);Vxr=r(DFt,"Examples:"),DFt.forEach(t),zxr=i(qi),m(s7.$$.fragment,qi),qi.forEach(t),Wxr=i(Ni),Do=n(Ni,"DIV",{class:!0});var Ga=s(Do);m(l7.$$.fragment,Ga),Qxr=i(Ga),G0e=n(Ga,"P",{});var NFt=s(G0e);Hxr=r(NFt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),NFt.forEach(t),Uxr=i(Ga),Vn=n(Ga,"P",{});var m4=s(Vn);Jxr=r(m4,"The model class to instantiate is selected based on the "),X0e=n(m4,"CODE",{});var qFt=s(X0e);Yxr=r(qFt,"model_type"),qFt.forEach(t),Kxr=r(m4,` property of the config object (either
passed as an argument or loaded from `),V0e=n(m4,"CODE",{});var OFt=s(V0e);Zxr=r(OFt,"pretrained_model_name_or_path"),OFt.forEach(t),ekr=r(m4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z0e=n(m4,"CODE",{});var GFt=s(z0e);okr=r(GFt,"pretrained_model_name_or_path"),GFt.forEach(t),rkr=r(m4,":"),m4.forEach(t),tkr=i(Ga),i7=n(Ga,"UL",{});var N$e=s(i7);cM=n(N$e,"LI",{});var Fke=s(cM);W0e=n(Fke,"STRONG",{});var XFt=s(W0e);akr=r(XFt,"beit"),XFt.forEach(t),nkr=r(Fke," \u2014 "),rW=n(Fke,"A",{href:!0});var VFt=s(rW);skr=r(VFt,"FlaxBeitForImageClassification"),VFt.forEach(t),lkr=r(Fke," (BEiT model)"),Fke.forEach(t),ikr=i(N$e),fM=n(N$e,"LI",{});var Cke=s(fM);Q0e=n(Cke,"STRONG",{});var zFt=s(Q0e);dkr=r(zFt,"vit"),zFt.forEach(t),ckr=r(Cke," \u2014 "),tW=n(Cke,"A",{href:!0});var WFt=s(tW);fkr=r(WFt,"FlaxViTForImageClassification"),WFt.forEach(t),mkr=r(Cke," (ViT model)"),Cke.forEach(t),N$e.forEach(t),gkr=i(Ga),H0e=n(Ga,"P",{});var QFt=s(H0e);hkr=r(QFt,"Examples:"),QFt.forEach(t),pkr=i(Ga),m(d7.$$.fragment,Ga),Ga.forEach(t),Ni.forEach(t),ySe=i(d),Gf=n(d,"H2",{class:!0});var q$e=s(Gf);mM=n(q$e,"A",{id:!0,class:!0,href:!0});var HFt=s(mM);U0e=n(HFt,"SPAN",{});var UFt=s(U0e);m(c7.$$.fragment,UFt),UFt.forEach(t),HFt.forEach(t),_kr=i(q$e),J0e=n(q$e,"SPAN",{});var JFt=s(J0e);ukr=r(JFt,"FlaxAutoModelForVision2Seq"),JFt.forEach(t),q$e.forEach(t),wSe=i(d),zr=n(d,"DIV",{class:!0});var Oi=s(zr);m(f7.$$.fragment,Oi),bkr=i(Oi),Xf=n(Oi,"P",{});var YQ=s(Xf);vkr=r(YQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Y0e=n(YQ,"CODE",{});var YFt=s(Y0e);Tkr=r(YFt,"from_pretrained()"),YFt.forEach(t),Fkr=r(YQ,"class method or the "),K0e=n(YQ,"CODE",{});var KFt=s(K0e);Ckr=r(KFt,"from_config()"),KFt.forEach(t),Mkr=r(YQ,`class
method.`),YQ.forEach(t),Ekr=i(Oi),m7=n(Oi,"P",{});var O$e=s(m7);ykr=r(O$e,"This class cannot be instantiated directly using "),Z0e=n(O$e,"CODE",{});var ZFt=s(Z0e);wkr=r(ZFt,"__init__()"),ZFt.forEach(t),Akr=r(O$e," (throws an error)."),O$e.forEach(t),Lkr=i(Oi),qt=n(Oi,"DIV",{class:!0});var Gi=s(qt);m(g7.$$.fragment,Gi),Bkr=i(Gi),eTe=n(Gi,"P",{});var eCt=s(eTe);xkr=r(eCt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),eCt.forEach(t),kkr=i(Gi),Vf=n(Gi,"P",{});var KQ=s(Vf);Rkr=r(KQ,`Note:
Loading a model from its configuration file does `),oTe=n(KQ,"STRONG",{});var oCt=s(oTe);Skr=r(oCt,"not"),oCt.forEach(t),Pkr=r(KQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),rTe=n(KQ,"CODE",{});var rCt=s(rTe);$kr=r(rCt,"from_pretrained()"),rCt.forEach(t),Ikr=r(KQ,"to load the model weights."),KQ.forEach(t),jkr=i(Gi),tTe=n(Gi,"P",{});var tCt=s(tTe);Dkr=r(tCt,"Examples:"),tCt.forEach(t),Nkr=i(Gi),m(h7.$$.fragment,Gi),Gi.forEach(t),qkr=i(Oi),No=n(Oi,"DIV",{class:!0});var Xa=s(No);m(p7.$$.fragment,Xa),Okr=i(Xa),aTe=n(Xa,"P",{});var aCt=s(aTe);Gkr=r(aCt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),aCt.forEach(t),Xkr=i(Xa),zn=n(Xa,"P",{});var g4=s(zn);Vkr=r(g4,"The model class to instantiate is selected based on the "),nTe=n(g4,"CODE",{});var nCt=s(nTe);zkr=r(nCt,"model_type"),nCt.forEach(t),Wkr=r(g4,` property of the config object (either
passed as an argument or loaded from `),sTe=n(g4,"CODE",{});var sCt=s(sTe);Qkr=r(sCt,"pretrained_model_name_or_path"),sCt.forEach(t),Hkr=r(g4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lTe=n(g4,"CODE",{});var lCt=s(lTe);Ukr=r(lCt,"pretrained_model_name_or_path"),lCt.forEach(t),Jkr=r(g4,":"),g4.forEach(t),Ykr=i(Xa),iTe=n(Xa,"UL",{});var iCt=s(iTe);gM=n(iCt,"LI",{});var Mke=s(gM);dTe=n(Mke,"STRONG",{});var dCt=s(dTe);Kkr=r(dCt,"vision-encoder-decoder"),dCt.forEach(t),Zkr=r(Mke," \u2014 "),aW=n(Mke,"A",{href:!0});var cCt=s(aW);eRr=r(cCt,"FlaxVisionEncoderDecoderModel"),cCt.forEach(t),oRr=r(Mke," (Vision Encoder decoder model)"),Mke.forEach(t),iCt.forEach(t),rRr=i(Xa),cTe=n(Xa,"P",{});var fCt=s(cTe);tRr=r(fCt,"Examples:"),fCt.forEach(t),aRr=i(Xa),m(_7.$$.fragment,Xa),Xa.forEach(t),Oi.forEach(t),this.h()},h(){c(J,"name","hf:doc:metadata"),c(J,"content",JSON.stringify(TCt)),c(pe,"id","auto-classes"),c(pe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pe,"href","#auto-classes"),c(de,"class","relative group"),c(Wn,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.AutoConfig"),c(Hn,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.AutoModel"),c(Un,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.AutoTokenizer"),c(Ji,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertModel"),c(Jf,"id","extending-the-auto-classes"),c(Jf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Jf,"href","#extending-the-auto-classes"),c(Yi,"class","relative group"),c(Kf,"id","transformers.AutoConfig"),c(Kf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Kf,"href","#transformers.AutoConfig"),c(Ki,"class","relative group"),c(T9,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(F9,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig"),c(C9,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig"),c(M9,"href","/docs/transformers/pr_16058/en/model_doc/beit#transformers.BeitConfig"),c(E9,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig"),c(y9,"href","/docs/transformers/pr_16058/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(w9,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig"),c(A9,"href","/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(L9,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(B9,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(x9,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig"),c(k9,"href","/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineConfig"),c(R9,"href","/docs/transformers/pr_16058/en/model_doc/clip#transformers.CLIPConfig"),c(S9,"href","/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertConfig"),c(P9,"href","/docs/transformers/pr_16058/en/model_doc/convnext#transformers.ConvNextConfig"),c($9,"href","/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLConfig"),c(I9,"href","/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(j9,"href","/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(D9,"href","/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaConfig"),c(N9,"href","/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(q9,"href","/docs/transformers/pr_16058/en/model_doc/deit#transformers.DeiTConfig"),c(O9,"href","/docs/transformers/pr_16058/en/model_doc/detr#transformers.DetrConfig"),c(G9,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig"),c(X9,"href","/docs/transformers/pr_16058/en/model_doc/dpr#transformers.DPRConfig"),c(V9,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig"),c(z9,"href","/docs/transformers/pr_16058/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(W9,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertConfig"),c(Q9,"href","/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetConfig"),c(H9,"href","/docs/transformers/pr_16058/en/model_doc/fsmt#transformers.FSMTConfig"),c(U9,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelConfig"),c(J9,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Config"),c(Y9,"href","/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(K9,"href","/docs/transformers/pr_16058/en/model_doc/gptj#transformers.GPTJConfig"),c(Z9,"href","/docs/transformers/pr_16058/en/model_doc/hubert#transformers.HubertConfig"),c(eB,"href","/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertConfig"),c(oB,"href","/docs/transformers/pr_16058/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(rB,"href","/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(tB,"href","/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(aB,"href","/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDConfig"),c(nB,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerConfig"),c(sB,"href","/docs/transformers/pr_16058/en/model_doc/luke#transformers.LukeConfig"),c(lB,"href","/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.LxmertConfig"),c(iB,"href","/docs/transformers/pr_16058/en/model_doc/m2m_100#transformers.M2M100Config"),c(dB,"href","/docs/transformers/pr_16058/en/model_doc/marian#transformers.MarianConfig"),c(cB,"href","/docs/transformers/pr_16058/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(fB,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartConfig"),c(mB,"href","/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(gB,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(hB,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetConfig"),c(pB,"href","/docs/transformers/pr_16058/en/model_doc/mt5#transformers.MT5Config"),c(_B,"href","/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(uB,"href","/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(bB,"href","/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusConfig"),c(vB,"href","/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverConfig"),c(TB,"href","/docs/transformers/pr_16058/en/model_doc/plbart#transformers.PLBartConfig"),c(FB,"href","/docs/transformers/pr_16058/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(CB,"href","/docs/transformers/pr_16058/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(MB,"href","/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(EB,"href","/docs/transformers/pr_16058/en/model_doc/rag#transformers.RagConfig"),c(yB,"href","/docs/transformers/pr_16058/en/model_doc/realm#transformers.RealmConfig"),c(wB,"href","/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerConfig"),c(AB,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertConfig"),c(LB,"href","/docs/transformers/pr_16058/en/model_doc/resnet#transformers.ResNetConfig"),c(BB,"href","/docs/transformers/pr_16058/en/model_doc/retribert#transformers.RetriBertConfig"),c(xB,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig"),c(kB,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig"),c(RB,"href","/docs/transformers/pr_16058/en/model_doc/segformer#transformers.SegformerConfig"),c(SB,"href","/docs/transformers/pr_16058/en/model_doc/sew#transformers.SEWConfig"),c(PB,"href","/docs/transformers/pr_16058/en/model_doc/sew-d#transformers.SEWDConfig"),c($B,"href","/docs/transformers/pr_16058/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(IB,"href","/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(jB,"href","/docs/transformers/pr_16058/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(DB,"href","/docs/transformers/pr_16058/en/model_doc/splinter#transformers.SplinterConfig"),c(NB,"href","/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(qB,"href","/docs/transformers/pr_16058/en/model_doc/swin#transformers.SwinConfig"),c(OB,"href","/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5Config"),c(GB,"href","/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasConfig"),c(XB,"href","/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(VB,"href","/docs/transformers/pr_16058/en/model_doc/trocr#transformers.TrOCRConfig"),c(zB,"href","/docs/transformers/pr_16058/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(WB,"href","/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(QB,"href","/docs/transformers/pr_16058/en/model_doc/van#transformers.VanConfig"),c(HB,"href","/docs/transformers/pr_16058/en/model_doc/vilt#transformers.ViltConfig"),c(UB,"href","/docs/transformers/pr_16058/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(JB,"href","/docs/transformers/pr_16058/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(YB,"href","/docs/transformers/pr_16058/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(KB,"href","/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTConfig"),c(ZB,"href","/docs/transformers/pr_16058/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(ex,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(ox,"href","/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMConfig"),c(rx,"href","/docs/transformers/pr_16058/en/model_doc/xglm#transformers.XGLMConfig"),c(tx,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig"),c(ax,"href","/docs/transformers/pr_16058/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(nx,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(sx,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(lx,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetConfig"),c(ix,"href","/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoConfig"),c(mo,"class","docstring"),c(Og,"class","docstring"),c(Qo,"class","docstring"),c(Gg,"id","transformers.AutoTokenizer"),c(Gg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gg,"href","#transformers.AutoTokenizer"),c(ed,"class","relative group"),c(dx,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(cx,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertTokenizer"),c(fx,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(mx,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartTokenizer"),c(gx,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartTokenizerFast"),c(hx,"href","/docs/transformers/pr_16058/en/model_doc/barthez#transformers.BarthezTokenizer"),c(px,"href","/docs/transformers/pr_16058/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(_x,"href","/docs/transformers/pr_16058/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(ux,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertTokenizer"),c(bx,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertTokenizerFast"),c(vx,"href","/docs/transformers/pr_16058/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(Tx,"href","/docs/transformers/pr_16058/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(Fx,"href","/docs/transformers/pr_16058/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(Cx,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(Mx,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(Ex,"href","/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(yx,"href","/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(wx,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(Ax,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(Lx,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(Bx,"href","/docs/transformers/pr_16058/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(xx,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertTokenizer"),c(kx,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(Rx,"href","/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineTokenizer"),c(Sx,"href","/docs/transformers/pr_16058/en/model_doc/clip#transformers.CLIPTokenizer"),c(Px,"href","/docs/transformers/pr_16058/en/model_doc/clip#transformers.CLIPTokenizerFast"),c($x,"href","/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(Ix,"href","/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(jx,"href","/docs/transformers/pr_16058/en/model_doc/cpm#transformers.CpmTokenizer"),c(Dx,"href","/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(Nx,"href","/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaTokenizer"),c(qx,"href","/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(Ox,"href","/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(Gx,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(Xx,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(Vx,"href","/docs/transformers/pr_16058/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(zx,"href","/docs/transformers/pr_16058/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(Wx,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraTokenizer"),c(Qx,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(Hx,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(Ux,"href","/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetTokenizer"),c(Jx,"href","/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(Yx,"href","/docs/transformers/pr_16058/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(Kx,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelTokenizer"),c(Zx,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(ek,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(ok,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(rk,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(tk,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(ak,"href","/docs/transformers/pr_16058/en/model_doc/herbert#transformers.HerbertTokenizer"),c(nk,"href","/docs/transformers/pr_16058/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(sk,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(lk,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaTokenizer"),c(ik,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(dk,"href","/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(ck,"href","/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(fk,"href","/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(mk,"href","/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(gk,"href","/docs/transformers/pr_16058/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(hk,"href","/docs/transformers/pr_16058/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(pk,"href","/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDTokenizer"),c(_k,"href","/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDTokenizerFast"),c(uk,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerTokenizer"),c(bk,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(vk,"href","/docs/transformers/pr_16058/en/model_doc/luke#transformers.LukeTokenizer"),c(Tk,"href","/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(Fk,"href","/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(Ck,"href","/docs/transformers/pr_16058/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(Mk,"href","/docs/transformers/pr_16058/en/model_doc/marian#transformers.MarianTokenizer"),c(Ek,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartTokenizer"),c(yk,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(wk,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(Ak,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(Lk,"href","/docs/transformers/pr_16058/en/model_doc/mluke#transformers.MLukeTokenizer"),c(Bk,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(xk,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(kk,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(Rk,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(Sk,"href","/docs/transformers/pr_16058/en/model_doc/mt5#transformers.T5Tokenizer"),c(Pk,"href","/docs/transformers/pr_16058/en/model_doc/mt5#transformers.T5TokenizerFast"),c($k,"href","/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(Ik,"href","/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(jk,"href","/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(Dk,"href","/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(Nk,"href","/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(qk,"href","/docs/transformers/pr_16058/en/model_doc/phobert#transformers.PhobertTokenizer"),c(Ok,"href","/docs/transformers/pr_16058/en/model_doc/plbart#transformers.PLBartTokenizer"),c(Gk,"href","/docs/transformers/pr_16058/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(Xk,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertTokenizer"),c(Vk,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertTokenizerFast"),c(zk,"href","/docs/transformers/pr_16058/en/model_doc/rag#transformers.RagTokenizer"),c(Wk,"href","/docs/transformers/pr_16058/en/model_doc/realm#transformers.RealmTokenizer"),c(Qk,"href","/docs/transformers/pr_16058/en/model_doc/realm#transformers.RealmTokenizerFast"),c(Hk,"href","/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerTokenizer"),c(Uk,"href","/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(Jk,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertTokenizer"),c(Yk,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(Kk,"href","/docs/transformers/pr_16058/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(Zk,"href","/docs/transformers/pr_16058/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(eR,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaTokenizer"),c(oR,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(rR,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(tR,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(aR,"href","/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(nR,"href","/docs/transformers/pr_16058/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(sR,"href","/docs/transformers/pr_16058/en/model_doc/splinter#transformers.SplinterTokenizer"),c(lR,"href","/docs/transformers/pr_16058/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(iR,"href","/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(dR,"href","/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(cR,"href","/docs/transformers/pr_16058/en/model_doc/mt5#transformers.T5Tokenizer"),c(fR,"href","/docs/transformers/pr_16058/en/model_doc/mt5#transformers.T5TokenizerFast"),c(mR,"href","/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasTokenizer"),c(gR,"href","/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(hR,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(pR,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(_R,"href","/docs/transformers/pr_16058/en/model_doc/xglm#transformers.XGLMTokenizer"),c(uR,"href","/docs/transformers/pr_16058/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(bR,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMTokenizer"),c(vR,"href","/docs/transformers/pr_16058/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(TR,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(FR,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(CR,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(MR,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(go,"class","docstring"),c(bh,"class","docstring"),c(Ho,"class","docstring"),c(vh,"id","transformers.AutoFeatureExtractor"),c(vh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vh,"href","#transformers.AutoFeatureExtractor"),c(od,"class","relative group"),c(ER,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(yR,"href","/docs/transformers/pr_16058/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(wR,"href","/docs/transformers/pr_16058/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(AR,"href","/docs/transformers/pr_16058/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(LR,"href","/docs/transformers/pr_16058/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(BR,"href","/docs/transformers/pr_16058/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(xR,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(kR,"href","/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(RR,"href","/docs/transformers/pr_16058/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(SR,"href","/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(PR,"href","/docs/transformers/pr_16058/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c($R,"href","/docs/transformers/pr_16058/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(IR,"href","/docs/transformers/pr_16058/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(jR,"href","/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(DR,"href","/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(NR,"href","/docs/transformers/pr_16058/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(qR,"href","/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(OR,"href","/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(GR,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Ie,"class","docstring"),c(Nh,"class","docstring"),c(Uo,"class","docstring"),c(qh,"id","transformers.AutoProcessor"),c(qh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qh,"href","#transformers.AutoProcessor"),c(rd,"class","relative group"),c(XR,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(VR,"href","/docs/transformers/pr_16058/en/model_doc/clip#transformers.CLIPProcessor"),c(zR,"href","/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(WR,"href","/docs/transformers/pr_16058/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(QR,"href","/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(HR,"href","/docs/transformers/pr_16058/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(UR,"href","/docs/transformers/pr_16058/en/model_doc/trocr#transformers.TrOCRProcessor"),c(JR,"href","/docs/transformers/pr_16058/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(YR,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(je,"class","docstring"),c(Jh,"class","docstring"),c(Jo,"class","docstring"),c(Yh,"id","transformers.AutoModel"),c(Yh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Yh,"href","#transformers.AutoModel"),c(ad,"class","relative group"),c(Wr,"class","docstring"),c(KR,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertModel"),c(ZR,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartModel"),c(eS,"href","/docs/transformers/pr_16058/en/model_doc/beit#transformers.BeitModel"),c(oS,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertModel"),c(rS,"href","/docs/transformers/pr_16058/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(tS,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdModel"),c(aS,"href","/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(nS,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(sS,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(lS,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertModel"),c(iS,"href","/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineModel"),c(dS,"href","/docs/transformers/pr_16058/en/model_doc/clip#transformers.CLIPModel"),c(cS,"href","/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertModel"),c(fS,"href","/docs/transformers/pr_16058/en/model_doc/convnext#transformers.ConvNextModel"),c(mS,"href","/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLModel"),c(gS,"href","/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(hS,"href","/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(pS,"href","/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaModel"),c(_S,"href","/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(uS,"href","/docs/transformers/pr_16058/en/model_doc/deit#transformers.DeiTModel"),c(bS,"href","/docs/transformers/pr_16058/en/model_doc/detr#transformers.DetrModel"),c(vS,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertModel"),c(TS,"href","/docs/transformers/pr_16058/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(FS,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraModel"),c(CS,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertModel"),c(MS,"href","/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetModel"),c(ES,"href","/docs/transformers/pr_16058/en/model_doc/fsmt#transformers.FSMTModel"),c(yS,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelModel"),c(wS,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelBaseModel"),c(AS,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Model"),c(LS,"href","/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(BS,"href","/docs/transformers/pr_16058/en/model_doc/gptj#transformers.GPTJModel"),c(xS,"href","/docs/transformers/pr_16058/en/model_doc/hubert#transformers.HubertModel"),c(kS,"href","/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertModel"),c(RS,"href","/docs/transformers/pr_16058/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(SS,"href","/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(PS,"href","/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c($S,"href","/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDModel"),c(IS,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerModel"),c(jS,"href","/docs/transformers/pr_16058/en/model_doc/luke#transformers.LukeModel"),c(DS,"href","/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.LxmertModel"),c(NS,"href","/docs/transformers/pr_16058/en/model_doc/m2m_100#transformers.M2M100Model"),c(qS,"href","/docs/transformers/pr_16058/en/model_doc/marian#transformers.MarianModel"),c(OS,"href","/docs/transformers/pr_16058/en/model_doc/maskformer#transformers.MaskFormerModel"),c(GS,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartModel"),c(XS,"href","/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(VS,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertModel"),c(zS,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetModel"),c(WS,"href","/docs/transformers/pr_16058/en/model_doc/mt5#transformers.MT5Model"),c(QS,"href","/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerModel"),c(HS,"href","/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(US,"href","/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusModel"),c(JS,"href","/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverModel"),c(YS,"href","/docs/transformers/pr_16058/en/model_doc/plbart#transformers.PLBartModel"),c(KS,"href","/docs/transformers/pr_16058/en/model_doc/poolformer#transformers.PoolFormerModel"),c(ZS,"href","/docs/transformers/pr_16058/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(eP,"href","/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertModel"),c(oP,"href","/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerModel"),c(rP,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertModel"),c(tP,"href","/docs/transformers/pr_16058/en/model_doc/resnet#transformers.ResNetModel"),c(aP,"href","/docs/transformers/pr_16058/en/model_doc/retribert#transformers.RetriBertModel"),c(nP,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaModel"),c(sP,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerModel"),c(lP,"href","/docs/transformers/pr_16058/en/model_doc/segformer#transformers.SegformerModel"),c(iP,"href","/docs/transformers/pr_16058/en/model_doc/sew#transformers.SEWModel"),c(dP,"href","/docs/transformers/pr_16058/en/model_doc/sew-d#transformers.SEWDModel"),c(cP,"href","/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(fP,"href","/docs/transformers/pr_16058/en/model_doc/splinter#transformers.SplinterModel"),c(mP,"href","/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(gP,"href","/docs/transformers/pr_16058/en/model_doc/swin#transformers.SwinModel"),c(hP,"href","/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5Model"),c(pP,"href","/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasModel"),c(_P,"href","/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(uP,"href","/docs/transformers/pr_16058/en/model_doc/unispeech#transformers.UniSpeechModel"),c(bP,"href","/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(vP,"href","/docs/transformers/pr_16058/en/model_doc/van#transformers.VanModel"),c(TP,"href","/docs/transformers/pr_16058/en/model_doc/vilt#transformers.ViltModel"),c(FP,"href","/docs/transformers/pr_16058/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(CP,"href","/docs/transformers/pr_16058/en/model_doc/visual_bert#transformers.VisualBertModel"),c(MP,"href","/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTModel"),c(EP,"href","/docs/transformers/pr_16058/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(yP,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(wP,"href","/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMModel"),c(AP,"href","/docs/transformers/pr_16058/en/model_doc/xglm#transformers.XGLMModel"),c(LP,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMModel"),c(BP,"href","/docs/transformers/pr_16058/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(xP,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(kP,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(RP,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetModel"),c(SP,"href","/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoModel"),c(De,"class","docstring"),c(Yo,"class","docstring"),c(S_,"id","transformers.AutoModelForPreTraining"),c(S_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S_,"href","#transformers.AutoModelForPreTraining"),c(ld,"class","relative group"),c(Qr,"class","docstring"),c(PP,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertForPreTraining"),c($P,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(IP,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertForPreTraining"),c(jP,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(DP,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(NP,"href","/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(qP,"href","/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(OP,"href","/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(GP,"href","/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(XP,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(VP,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraForPreTraining"),c(zP,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(WP,"href","/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetForPreTraining"),c(QP,"href","/docs/transformers/pr_16058/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(HP,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(UP,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(JP,"href","/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(YP,"href","/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(KP,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(ZP,"href","/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(e$,"href","/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(o$,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(r$,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(t$,"href","/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(a$,"href","/docs/transformers/pr_16058/en/model_doc/retribert#transformers.RetriBertModel"),c(n$,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(s$,"href","/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(l$,"href","/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(i$,"href","/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(d$,"href","/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(c$,"href","/docs/transformers/pr_16058/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(f$,"href","/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(m$,"href","/docs/transformers/pr_16058/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(g$,"href","/docs/transformers/pr_16058/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(h$,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(p$,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(_$,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(u$,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(b$,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ne,"class","docstring"),c(Ko,"class","docstring"),c(Tu,"id","transformers.AutoModelForCausalLM"),c(Tu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tu,"href","#transformers.AutoModelForCausalLM"),c(cd,"class","relative group"),c(Hr,"class","docstring"),c(v$,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartForCausalLM"),c(T$,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertLMHeadModel"),c(F$,"href","/docs/transformers/pr_16058/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(C$,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(M$,"href","/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(E$,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(y$,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(w$,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(A$,"href","/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(L$,"href","/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(B$,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraForCausalLM"),c(x$,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(k$,"href","/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(R$,"href","/docs/transformers/pr_16058/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(S$,"href","/docs/transformers/pr_16058/en/model_doc/marian#transformers.MarianForCausalLM"),c(P$,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartForCausalLM"),c($$,"href","/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(I$,"href","/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(j$,"href","/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(D$,"href","/docs/transformers/pr_16058/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(N$,"href","/docs/transformers/pr_16058/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(q$,"href","/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(O$,"href","/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(G$,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(X$,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(V$,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(z$,"href","/docs/transformers/pr_16058/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(W$,"href","/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(Q$,"href","/docs/transformers/pr_16058/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(H$,"href","/docs/transformers/pr_16058/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(U$,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(J$,"href","/docs/transformers/pr_16058/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(Y$,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(K$,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(Z$,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(qe,"class","docstring"),c(Zo,"class","docstring"),c(t1,"id","transformers.AutoModelForMaskedLM"),c(t1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t1,"href","#transformers.AutoModelForMaskedLM"),c(gd,"class","relative group"),c(Ur,"class","docstring"),c(eI,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(oI,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(rI,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertForMaskedLM"),c(tI,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(aI,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(nI,"href","/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(sI,"href","/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(lI,"href","/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(iI,"href","/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(dI,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(cI,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(fI,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(mI,"href","/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(gI,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(hI,"href","/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(pI,"href","/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(_I,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(uI,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(bI,"href","/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(vI,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(TI,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(FI,"href","/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(CI,"href","/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(MI,"href","/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(EI,"href","/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(yI,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(wI,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(AI,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(LI,"href","/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(BI,"href","/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(xI,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(kI,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(RI,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(SI,"href","/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Oe,"class","docstring"),c(er,"class","docstring"),c(q1,"id","transformers.AutoModelForSeq2SeqLM"),c(q1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q1,"href","#transformers.AutoModelForSeq2SeqLM"),c(_d,"class","relative group"),c(Jr,"class","docstring"),c(PI,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartForConditionalGeneration"),c($I,"href","/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(II,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(jI,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(DI,"href","/docs/transformers/pr_16058/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(NI,"href","/docs/transformers/pr_16058/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(qI,"href","/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(OI,"href","/docs/transformers/pr_16058/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(GI,"href","/docs/transformers/pr_16058/en/model_doc/marian#transformers.MarianMTModel"),c(XI,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(VI,"href","/docs/transformers/pr_16058/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(zI,"href","/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(WI,"href","/docs/transformers/pr_16058/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(QI,"href","/docs/transformers/pr_16058/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(HI,"href","/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(UI,"href","/docs/transformers/pr_16058/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Ge,"class","docstring"),c(or,"class","docstring"),c(ab,"id","transformers.AutoModelForSequenceClassification"),c(ab,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ab,"href","#transformers.AutoModelForSequenceClassification"),c(vd,"class","relative group"),c(Yr,"class","docstring"),c(JI,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(YI,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartForSequenceClassification"),c(KI,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertForSequenceClassification"),c(ZI,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(ej,"href","/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(oj,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(rj,"href","/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(tj,"href","/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(aj,"href","/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(nj,"href","/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(sj,"href","/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(lj,"href","/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(ij,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(dj,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(cj,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(fj,"href","/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(mj,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(gj,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(hj,"href","/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(pj,"href","/docs/transformers/pr_16058/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(_j,"href","/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(uj,"href","/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(bj,"href","/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(vj,"href","/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDForSequenceClassification"),c(Tj,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(Fj,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(Cj,"href","/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(Mj,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(Ej,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(yj,"href","/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(wj,"href","/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(Aj,"href","/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(Lj,"href","/docs/transformers/pr_16058/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(Bj,"href","/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(xj,"href","/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(kj,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(Rj,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(Sj,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(Pj,"href","/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c($j,"href","/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(Ij,"href","/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(jj,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(Dj,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(Nj,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(qj,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(Oj,"href","/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(Xe,"class","docstring"),c(rr,"class","docstring"),c(Kb,"id","transformers.AutoModelForMultipleChoice"),c(Kb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Kb,"href","#transformers.AutoModelForMultipleChoice"),c(Cd,"class","relative group"),c(Kr,"class","docstring"),c(Gj,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(Xj,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertForMultipleChoice"),c(Vj,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(zj,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(Wj,"href","/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(Qj,"href","/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(Hj,"href","/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(Uj,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(Jj,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(Yj,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(Kj,"href","/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(Zj,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(eD,"href","/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(oD,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(rD,"href","/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(tD,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(aD,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(nD,"href","/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(sD,"href","/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(lD,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(iD,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(dD,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(cD,"href","/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(fD,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(mD,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(gD,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(hD,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(pD,"href","/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(Ve,"class","docstring"),c(tr,"class","docstring"),c(L5,"id","transformers.AutoModelForNextSentencePrediction"),c(L5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L5,"href","#transformers.AutoModelForNextSentencePrediction"),c(yd,"class","relative group"),c(Zr,"class","docstring"),c(_D,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(uD,"href","/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(bD,"href","/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(vD,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(TD,"href","/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(ze,"class","docstring"),c(ar,"class","docstring"),c($5,"id","transformers.AutoModelForTokenClassification"),c($5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($5,"href","#transformers.AutoModelForTokenClassification"),c(Ld,"class","relative group"),c(et,"class","docstring"),c(FD,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(CD,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertForTokenClassification"),c(MD,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(ED,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(yD,"href","/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineForTokenClassification"),c(wD,"href","/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(AD,"href","/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(LD,"href","/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(BD,"href","/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(xD,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(kD,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(RD,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(SD,"href","/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(PD,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c($D,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(ID,"href","/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(jD,"href","/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(DD,"href","/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(ND,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(qD,"href","/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(OD,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(GD,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(XD,"href","/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(VD,"href","/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(zD,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(WD,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(QD,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(HD,"href","/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(UD,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(JD,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(YD,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(KD,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(ZD,"href","/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(We,"class","docstring"),c(nr,"class","docstring"),c(_2,"id","transformers.AutoModelForQuestionAnswering"),c(_2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_2,"href","#transformers.AutoModelForQuestionAnswering"),c(kd,"class","relative group"),c(ot,"class","docstring"),c(eN,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(oN,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(rN,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(tN,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(aN,"href","/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(nN,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(sN,"href","/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(lN,"href","/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(iN,"href","/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(dN,"href","/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(cN,"href","/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(fN,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(mN,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(gN,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(hN,"href","/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(pN,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(_N,"href","/docs/transformers/pr_16058/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(uN,"href","/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(bN,"href","/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(vN,"href","/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(TN,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(FN,"href","/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(CN,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(MN,"href","/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(EN,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(yN,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(wN,"href","/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(AN,"href","/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(LN,"href","/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(BN,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(xN,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(kN,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(RN,"href","/docs/transformers/pr_16058/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(SN,"href","/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(PN,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c($N,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(IN,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(jN,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(DN,"href","/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(Qe,"class","docstring"),c(sr,"class","docstring"),c(tv,"id","transformers.AutoModelForTableQuestionAnswering"),c(tv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tv,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Pd,"class","relative group"),c(rt,"class","docstring"),c(NN,"href","/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(He,"class","docstring"),c(lr,"class","docstring"),c(sv,"id","transformers.AutoModelForImageClassification"),c(sv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sv,"href","#transformers.AutoModelForImageClassification"),c(jd,"class","relative group"),c(tt,"class","docstring"),c(qN,"href","/docs/transformers/pr_16058/en/model_doc/beit#transformers.BeitForImageClassification"),c(ON,"href","/docs/transformers/pr_16058/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(GN,"href","/docs/transformers/pr_16058/en/model_doc/deit#transformers.DeiTForImageClassification"),c(XN,"href","/docs/transformers/pr_16058/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(VN,"href","/docs/transformers/pr_16058/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(zN,"href","/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(WN,"href","/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(QN,"href","/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(HN,"href","/docs/transformers/pr_16058/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(UN,"href","/docs/transformers/pr_16058/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(JN,"href","/docs/transformers/pr_16058/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(YN,"href","/docs/transformers/pr_16058/en/model_doc/swin#transformers.SwinForImageClassification"),c(KN,"href","/docs/transformers/pr_16058/en/model_doc/van#transformers.VanForImageClassification"),c(ZN,"href","/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTForImageClassification"),c(Ue,"class","docstring"),c(ir,"class","docstring"),c(uv,"id","transformers.AutoModelForVision2Seq"),c(uv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uv,"href","#transformers.AutoModelForVision2Seq"),c(qd,"class","relative group"),c(at,"class","docstring"),c(eq,"href","/docs/transformers/pr_16058/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(Je,"class","docstring"),c(dr,"class","docstring"),c(Tv,"id","transformers.AutoModelForAudioClassification"),c(Tv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tv,"href","#transformers.AutoModelForAudioClassification"),c(Xd,"class","relative group"),c(nt,"class","docstring"),c(oq,"href","/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(rq,"href","/docs/transformers/pr_16058/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(tq,"href","/docs/transformers/pr_16058/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(aq,"href","/docs/transformers/pr_16058/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(nq,"href","/docs/transformers/pr_16058/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(sq,"href","/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(lq,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(iq,"href","/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(Ye,"class","docstring"),c(cr,"class","docstring"),c(xv,"id","transformers.AutoModelForAudioFrameClassification"),c(xv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xv,"href","#transformers.AutoModelForAudioFrameClassification"),c(Wd,"class","relative group"),c(st,"class","docstring"),c(dq,"href","/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(cq,"href","/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(fq,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(mq,"href","/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(Ke,"class","docstring"),c(fr,"class","docstring"),c(Iv,"id","transformers.AutoModelForCTC"),c(Iv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Iv,"href","#transformers.AutoModelForCTC"),c(Ud,"class","relative group"),c(lt,"class","docstring"),c(gq,"href","/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(hq,"href","/docs/transformers/pr_16058/en/model_doc/hubert#transformers.HubertForCTC"),c(pq,"href","/docs/transformers/pr_16058/en/model_doc/sew#transformers.SEWForCTC"),c(_q,"href","/docs/transformers/pr_16058/en/model_doc/sew-d#transformers.SEWDForCTC"),c(uq,"href","/docs/transformers/pr_16058/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(bq,"href","/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(vq,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(Tq,"href","/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMForCTC"),c(Ze,"class","docstring"),c(mr,"class","docstring"),c(Wv,"id","transformers.AutoModelForSpeechSeq2Seq"),c(Wv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Wv,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Kd,"class","relative group"),c(it,"class","docstring"),c(Fq,"href","/docs/transformers/pr_16058/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(Cq,"href","/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(eo,"class","docstring"),c(gr,"class","docstring"),c(Jv,"id","transformers.AutoModelForAudioXVector"),c(Jv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Jv,"href","#transformers.AutoModelForAudioXVector"),c(oc,"class","relative group"),c(dt,"class","docstring"),c(Mq,"href","/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(Eq,"href","/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(yq,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(wq,"href","/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMForXVector"),c(oo,"class","docstring"),c(hr,"class","docstring"),c(r6,"id","transformers.AutoModelForMaskedImageModeling"),c(r6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r6,"href","#transformers.AutoModelForMaskedImageModeling"),c(ac,"class","relative group"),c(ct,"class","docstring"),c(Aq,"href","/docs/transformers/pr_16058/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(Lq,"href","/docs/transformers/pr_16058/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(Bq,"href","/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(ro,"class","docstring"),c(pr,"class","docstring"),c(l6,"id","transformers.AutoModelForObjectDetection"),c(l6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l6,"href","#transformers.AutoModelForObjectDetection"),c(ic,"class","relative group"),c(ft,"class","docstring"),c(xq,"href","/docs/transformers/pr_16058/en/model_doc/detr#transformers.DetrForObjectDetection"),c(to,"class","docstring"),c(_r,"class","docstring"),c(c6,"id","transformers.AutoModelForImageSegmentation"),c(c6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c6,"href","#transformers.AutoModelForImageSegmentation"),c(fc,"class","relative group"),c(mt,"class","docstring"),c(kq,"href","/docs/transformers/pr_16058/en/model_doc/detr#transformers.DetrForSegmentation"),c(ao,"class","docstring"),c(ur,"class","docstring"),c(g6,"id","transformers.AutoModelForSemanticSegmentation"),c(g6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g6,"href","#transformers.AutoModelForSemanticSegmentation"),c(hc,"class","relative group"),c(gt,"class","docstring"),c(Rq,"href","/docs/transformers/pr_16058/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(Sq,"href","/docs/transformers/pr_16058/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(no,"class","docstring"),c(br,"class","docstring"),c(u6,"id","transformers.AutoModelForInstanceSegmentation"),c(u6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u6,"href","#transformers.AutoModelForInstanceSegmentation"),c(uc,"class","relative group"),c(ht,"class","docstring"),c(Pq,"href","/docs/transformers/pr_16058/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(so,"class","docstring"),c(vr,"class","docstring"),c(T6,"id","transformers.TFAutoModel"),c(T6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T6,"href","#transformers.TFAutoModel"),c(Tc,"class","relative group"),c(pt,"class","docstring"),c($q,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.TFAlbertModel"),c(Iq,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.TFBartModel"),c(jq,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertModel"),c(Dq,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(Nq,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(qq,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.TFCamembertModel"),c(Oq,"href","/docs/transformers/pr_16058/en/model_doc/clip#transformers.TFCLIPModel"),c(Gq,"href","/docs/transformers/pr_16058/en/model_doc/convbert#transformers.TFConvBertModel"),c(Xq,"href","/docs/transformers/pr_16058/en/model_doc/convnext#transformers.TFConvNextModel"),c(Vq,"href","/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.TFCTRLModel"),c(zq,"href","/docs/transformers/pr_16058/en/model_doc/deberta#transformers.TFDebertaModel"),c(Wq,"href","/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(Qq,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(Hq,"href","/docs/transformers/pr_16058/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(Uq,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.TFElectraModel"),c(Jq,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(Yq,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelModel"),c(Kq,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(Zq,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.TFGPT2Model"),c(eO,"href","/docs/transformers/pr_16058/en/model_doc/hubert#transformers.TFHubertModel"),c(oO,"href","/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(rO,"href","/docs/transformers/pr_16058/en/model_doc/led#transformers.TFLEDModel"),c(tO,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.TFLongformerModel"),c(aO,"href","/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.TFLxmertModel"),c(nO,"href","/docs/transformers/pr_16058/en/model_doc/marian#transformers.TFMarianModel"),c(sO,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.TFMBartModel"),c(lO,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(iO,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.TFMPNetModel"),c(dO,"href","/docs/transformers/pr_16058/en/model_doc/mt5#transformers.TFMT5Model"),c(cO,"href","/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(fO,"href","/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.TFPegasusModel"),c(mO,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.TFRemBertModel"),c(gO,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaModel"),c(hO,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.TFRoFormerModel"),c(pO,"href","/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(_O,"href","/docs/transformers/pr_16058/en/model_doc/t5#transformers.TFT5Model"),c(uO,"href","/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TFTapasModel"),c(bO,"href","/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(vO,"href","/docs/transformers/pr_16058/en/model_doc/vit#transformers.TFViTModel"),c(TO,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(FO,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMModel"),c(CO,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(MO,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.TFXLNetModel"),c(ho,"class","docstring"),c(Tr,"class","docstring"),c(i0,"id","transformers.TFAutoModelForPreTraining"),c(i0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i0,"href","#transformers.TFAutoModelForPreTraining"),c(Mc,"class","relative group"),c(_t,"class","docstring"),c(EO,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(yO,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(wO,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertForPreTraining"),c(AO,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(LO,"href","/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(BO,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(xO,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(kO,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(RO,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(SO,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(PO,"href","/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c($O,"href","/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(IO,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(jO,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(DO,"href","/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(NO,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(qO,"href","/docs/transformers/pr_16058/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(OO,"href","/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(GO,"href","/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(XO,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(VO,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(zO,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(po,"class","docstring"),c(Fr,"class","docstring"),c(k0,"id","transformers.TFAutoModelForCausalLM"),c(k0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k0,"href","#transformers.TFAutoModelForCausalLM"),c(wc,"class","relative group"),c(ut,"class","docstring"),c(WO,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(QO,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(HO,"href","/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(UO,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(JO,"href","/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(YO,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(KO,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(ZO,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(eG,"href","/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(oG,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(rG,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(_o,"class","docstring"),c(Cr,"class","docstring"),c(X0,"id","transformers.TFAutoModelForImageClassification"),c(X0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X0,"href","#transformers.TFAutoModelForImageClassification"),c(Bc,"class","relative group"),c(bt,"class","docstring"),c(tG,"href","/docs/transformers/pr_16058/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(aG,"href","/docs/transformers/pr_16058/en/model_doc/vit#transformers.TFViTForImageClassification"),c(uo,"class","docstring"),c(Mr,"class","docstring"),c(W0,"id","transformers.TFAutoModelForMaskedLM"),c(W0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W0,"href","#transformers.TFAutoModelForMaskedLM"),c(Rc,"class","relative group"),c(vt,"class","docstring"),c(nG,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(sG,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(lG,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(iG,"href","/docs/transformers/pr_16058/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(dG,"href","/docs/transformers/pr_16058/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(cG,"href","/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(fG,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(mG,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(gG,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(hG,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(pG,"href","/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(_G,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(uG,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(bG,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(vG,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(TG,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(FG,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(CG,"href","/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(MG,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(EG,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(bo,"class","docstring"),c(Er,"class","docstring"),c(gT,"id","transformers.TFAutoModelForSeq2SeqLM"),c(gT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gT,"href","#transformers.TFAutoModelForSeq2SeqLM"),c($c,"class","relative group"),c(Tt,"class","docstring"),c(yG,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(wG,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(AG,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(LG,"href","/docs/transformers/pr_16058/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(BG,"href","/docs/transformers/pr_16058/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(xG,"href","/docs/transformers/pr_16058/en/model_doc/marian#transformers.TFMarianMTModel"),c(kG,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(RG,"href","/docs/transformers/pr_16058/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(SG,"href","/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(PG,"href","/docs/transformers/pr_16058/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(vo,"class","docstring"),c(yr,"class","docstring"),c(ET,"id","transformers.TFAutoModelForSequenceClassification"),c(ET,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ET,"href","#transformers.TFAutoModelForSequenceClassification"),c(Dc,"class","relative group"),c(Ft,"class","docstring"),c($G,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(IG,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(jG,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(DG,"href","/docs/transformers/pr_16058/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(NG,"href","/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(qG,"href","/docs/transformers/pr_16058/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(OG,"href","/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(GG,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(XG,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(VG,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(zG,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(WG,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(QG,"href","/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(HG,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(UG,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(JG,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(YG,"href","/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(KG,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(ZG,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(eX,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(oX,"href","/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(rX,"href","/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(tX,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(aX,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(nX,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(To,"class","docstring"),c(wr,"class","docstring"),c(JT,"id","transformers.TFAutoModelForMultipleChoice"),c(JT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JT,"href","#transformers.TFAutoModelForMultipleChoice"),c(Oc,"class","relative group"),c(Ct,"class","docstring"),c(sX,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(lX,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(iX,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(dX,"href","/docs/transformers/pr_16058/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(cX,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(fX,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(mX,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(gX,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(hX,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(pX,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(_X,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(uX,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(bX,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(vX,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(TX,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(FX,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(CX,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Fo,"class","docstring"),c(Ar,"class","docstring"),c(h8,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(h8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h8,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(Vc,"class","relative group"),c(Mt,"class","docstring"),c(MX,"href","/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Co,"class","docstring"),c(Lr,"class","docstring"),c(_8,"id","transformers.TFAutoModelForTokenClassification"),c(_8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_8,"href","#transformers.TFAutoModelForTokenClassification"),c(Qc,"class","relative group"),c(Et,"class","docstring"),c(EX,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(yX,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(wX,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(AX,"href","/docs/transformers/pr_16058/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(LX,"href","/docs/transformers/pr_16058/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(BX,"href","/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(xX,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(kX,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(RX,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(SX,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(PX,"href","/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c($X,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(IX,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(jX,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(DX,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(NX,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(qX,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(OX,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(GX,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(XX,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Mo,"class","docstring"),c(Br,"class","docstring"),c(j8,"id","transformers.TFAutoModelForQuestionAnswering"),c(j8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j8,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Jc,"class","relative group"),c(yt,"class","docstring"),c(VX,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(zX,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(WX,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(QX,"href","/docs/transformers/pr_16058/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(HX,"href","/docs/transformers/pr_16058/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(UX,"href","/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(JX,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(YX,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(KX,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(ZX,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(eV,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(oV,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(rV,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(tV,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(aV,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(nV,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(sV,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(lV,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(iV,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Eo,"class","docstring"),c(xr,"class","docstring"),c(tF,"id","transformers.TFAutoModelForVision2Seq"),c(tF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tF,"href","#transformers.TFAutoModelForVision2Seq"),c(Zc,"class","relative group"),c(wt,"class","docstring"),c(dV,"href","/docs/transformers/pr_16058/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(yo,"class","docstring"),c(kr,"class","docstring"),c(nF,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(nF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nF,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(rf,"class","relative group"),c(At,"class","docstring"),c(cV,"href","/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(wo,"class","docstring"),c(Rr,"class","docstring"),c(lF,"id","transformers.FlaxAutoModel"),c(lF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lF,"href","#transformers.FlaxAutoModel"),c(nf,"class","relative group"),c(Lt,"class","docstring"),c(fV,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.FlaxAlbertModel"),c(mV,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.FlaxBartModel"),c(gV,"href","/docs/transformers/pr_16058/en/model_doc/beit#transformers.FlaxBeitModel"),c(hV,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertModel"),c(pV,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(_V,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(uV,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(bV,"href","/docs/transformers/pr_16058/en/model_doc/clip#transformers.FlaxCLIPModel"),c(vV,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(TV,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.FlaxElectraModel"),c(FV,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(CV,"href","/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(MV,"href","/docs/transformers/pr_16058/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(EV,"href","/docs/transformers/pr_16058/en/model_doc/marian#transformers.FlaxMarianModel"),c(yV,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.FlaxMBartModel"),c(wV,"href","/docs/transformers/pr_16058/en/model_doc/mt5#transformers.FlaxMT5Model"),c(AV,"href","/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(LV,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(BV,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(xV,"href","/docs/transformers/pr_16058/en/model_doc/t5#transformers.FlaxT5Model"),c(kV,"href","/docs/transformers/pr_16058/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(RV,"href","/docs/transformers/pr_16058/en/model_doc/vit#transformers.FlaxViTModel"),c(SV,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(PV,"href","/docs/transformers/pr_16058/en/model_doc/xglm#transformers.FlaxXGLMModel"),c($V,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Ao,"class","docstring"),c(Sr,"class","docstring"),c(SF,"id","transformers.FlaxAutoModelForCausalLM"),c(SF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(SF,"href","#transformers.FlaxAutoModelForCausalLM"),c(df,"class","relative group"),c(Bt,"class","docstring"),c(IV,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(jV,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(DV,"href","/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(NV,"href","/docs/transformers/pr_16058/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(qV,"href","/docs/transformers/pr_16058/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Lo,"class","docstring"),c(Pr,"class","docstring"),c(NF,"id","transformers.FlaxAutoModelForPreTraining"),c(NF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(NF,"href","#transformers.FlaxAutoModelForPreTraining"),c(mf,"class","relative group"),c(xt,"class","docstring"),c(OV,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(GV,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(XV,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(VV,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(zV,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(WV,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(QV,"href","/docs/transformers/pr_16058/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(HV,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(UV,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(JV,"href","/docs/transformers/pr_16058/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(YV,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(KV,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Bo,"class","docstring"),c($r,"class","docstring"),c(KF,"id","transformers.FlaxAutoModelForMaskedLM"),c(KF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KF,"href","#transformers.FlaxAutoModelForMaskedLM"),c(pf,"class","relative group"),c(kt,"class","docstring"),c(ZV,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(ez,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(oz,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(rz,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(tz,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(az,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(nz,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(sz,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(lz,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(iz,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(xo,"class","docstring"),c(Ir,"class","docstring"),c(dC,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(dC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dC,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(bf,"class","relative group"),c(Rt,"class","docstring"),c(dz,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(cz,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(fz,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(mz,"href","/docs/transformers/pr_16058/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(gz,"href","/docs/transformers/pr_16058/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(hz,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(pz,"href","/docs/transformers/pr_16058/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(_z,"href","/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(uz,"href","/docs/transformers/pr_16058/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(ko,"class","docstring"),c(jr,"class","docstring"),c(vC,"id","transformers.FlaxAutoModelForSequenceClassification"),c(vC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vC,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Ff,"class","relative group"),c(St,"class","docstring"),c(bz,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(vz,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(Tz,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(Fz,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(Cz,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(Mz,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(Ez,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(yz,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(wz,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(Az,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Ro,"class","docstring"),c(Dr,"class","docstring"),c(xC,"id","transformers.FlaxAutoModelForSpeechSeq2Seq"),c(xC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xC,"href","#transformers.FlaxAutoModelForSpeechSeq2Seq"),c(Ef,"class","relative group"),c(Pt,"class","docstring"),c(Lz,"href","/docs/transformers/pr_16058/en/model_doc/speech-encoder-decoder#transformers.FlaxSpeechEncoderDecoderModel"),c(So,"class","docstring"),c(Nr,"class","docstring"),c(RC,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(RC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RC,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Af,"class","relative group"),c($t,"class","docstring"),c(Bz,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(xz,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(kz,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(Rz,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(Sz,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(Pz,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c($z,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(Iz,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(jz,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(Dz,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Po,"class","docstring"),c(qr,"class","docstring"),c(XC,"id","transformers.FlaxAutoModelForTokenClassification"),c(XC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XC,"href","#transformers.FlaxAutoModelForTokenClassification"),c(xf,"class","relative group"),c(It,"class","docstring"),c(Nz,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(qz,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(Oz,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(Gz,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(Xz,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(Vz,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(zz,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(Wz,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c($o,"class","docstring"),c(Or,"class","docstring"),c(KC,"id","transformers.FlaxAutoModelForMultipleChoice"),c(KC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KC,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Sf,"class","relative group"),c(jt,"class","docstring"),c(Qz,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(Hz,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(Uz,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(Jz,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(Yz,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(Kz,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(Zz,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(eW,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Io,"class","docstring"),c(Gr,"class","docstring"),c(lM,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(lM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lM,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(If,"class","relative group"),c(Dt,"class","docstring"),c(oW,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(jo,"class","docstring"),c(Xr,"class","docstring"),c(dM,"id","transformers.FlaxAutoModelForImageClassification"),c(dM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dM,"href","#transformers.FlaxAutoModelForImageClassification"),c(Nf,"class","relative group"),c(Nt,"class","docstring"),c(rW,"href","/docs/transformers/pr_16058/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(tW,"href","/docs/transformers/pr_16058/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Do,"class","docstring"),c(Vr,"class","docstring"),c(mM,"id","transformers.FlaxAutoModelForVision2Seq"),c(mM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mM,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Gf,"class","relative group"),c(qt,"class","docstring"),c(aW,"href","/docs/transformers/pr_16058/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(No,"class","docstring"),c(zr,"class","docstring")},m(d,u){e(document.head,J),b(d,$e,u),b(d,de,u),e(de,pe),e(pe,io),g(fe,io,null),e(de,Me),e(de,zo),e(zo,Vi),b(d,Wf,u),b(d,ha,u),e(ha,zi),e(ha,Wi),e(Wi,h4),e(ha,Qf),b(d,Be,u),b(d,co,u),e(co,Qi),e(co,Wn),e(Wn,p4),e(co,Qn),e(co,Hn),e(Hn,_4),e(co,Hi),e(co,Un),e(Un,u4),e(co,Ui),b(d,Hf,u),g(Va,d,u),b(d,fo,u),b(d,_e,u),e(_e,h9),e(_e,Ji),e(Ji,p9),e(_e,_9),b(d,Wo,u),b(d,za,u),e(za,u9),e(za,Uf),e(Uf,b9),e(za,G$e),b(d,Eke,u),b(d,Yi,u),e(Yi,Jf),e(Jf,ZQ),g(b4,ZQ,null),e(Yi,X$e),e(Yi,eH),e(eH,V$e),b(d,yke,u),b(d,Jn,u),e(Jn,z$e),e(Jn,oH),e(oH,W$e),e(Jn,Q$e),e(Jn,rH),e(rH,H$e),e(Jn,U$e),b(d,wke,u),g(v4,d,u),b(d,Ake,u),b(d,v9,u),e(v9,J$e),b(d,Lke,u),g(Yf,d,u),b(d,Bke,u),b(d,Ki,u),e(Ki,Kf),e(Kf,tH),g(T4,tH,null),e(Ki,Y$e),e(Ki,aH),e(aH,K$e),b(d,xke,u),b(d,Qo,u),g(F4,Qo,null),e(Qo,Z$e),e(Qo,C4),e(C4,eIe),e(C4,T9),e(T9,oIe),e(C4,rIe),e(Qo,tIe),e(Qo,M4),e(M4,aIe),e(M4,nH),e(nH,nIe),e(M4,sIe),e(Qo,lIe),e(Qo,mo),g(E4,mo,null),e(mo,iIe),e(mo,sH),e(sH,dIe),e(mo,cIe),e(mo,Zi),e(Zi,fIe),e(Zi,lH),e(lH,mIe),e(Zi,gIe),e(Zi,iH),e(iH,hIe),e(Zi,pIe),e(mo,_Ie),e(mo,v),e(v,Zf),e(Zf,dH),e(dH,uIe),e(Zf,bIe),e(Zf,F9),e(F9,vIe),e(Zf,TIe),e(v,FIe),e(v,em),e(em,cH),e(cH,CIe),e(em,MIe),e(em,C9),e(C9,EIe),e(em,yIe),e(v,wIe),e(v,om),e(om,fH),e(fH,AIe),e(om,LIe),e(om,M9),e(M9,BIe),e(om,xIe),e(v,kIe),e(v,rm),e(rm,mH),e(mH,RIe),e(rm,SIe),e(rm,E9),e(E9,PIe),e(rm,$Ie),e(v,IIe),e(v,tm),e(tm,gH),e(gH,jIe),e(tm,DIe),e(tm,y9),e(y9,NIe),e(tm,qIe),e(v,OIe),e(v,am),e(am,hH),e(hH,GIe),e(am,XIe),e(am,w9),e(w9,VIe),e(am,zIe),e(v,WIe),e(v,nm),e(nm,pH),e(pH,QIe),e(nm,HIe),e(nm,A9),e(A9,UIe),e(nm,JIe),e(v,YIe),e(v,sm),e(sm,_H),e(_H,KIe),e(sm,ZIe),e(sm,L9),e(L9,eje),e(sm,oje),e(v,rje),e(v,lm),e(lm,uH),e(uH,tje),e(lm,aje),e(lm,B9),e(B9,nje),e(lm,sje),e(v,lje),e(v,im),e(im,bH),e(bH,ije),e(im,dje),e(im,x9),e(x9,cje),e(im,fje),e(v,mje),e(v,dm),e(dm,vH),e(vH,gje),e(dm,hje),e(dm,k9),e(k9,pje),e(dm,_je),e(v,uje),e(v,cm),e(cm,TH),e(TH,bje),e(cm,vje),e(cm,R9),e(R9,Tje),e(cm,Fje),e(v,Cje),e(v,fm),e(fm,FH),e(FH,Mje),e(fm,Eje),e(fm,S9),e(S9,yje),e(fm,wje),e(v,Aje),e(v,mm),e(mm,CH),e(CH,Lje),e(mm,Bje),e(mm,P9),e(P9,xje),e(mm,kje),e(v,Rje),e(v,gm),e(gm,MH),e(MH,Sje),e(gm,Pje),e(gm,$9),e($9,$je),e(gm,Ije),e(v,jje),e(v,hm),e(hm,EH),e(EH,Dje),e(hm,Nje),e(hm,I9),e(I9,qje),e(hm,Oje),e(v,Gje),e(v,pm),e(pm,yH),e(yH,Xje),e(pm,Vje),e(pm,j9),e(j9,zje),e(pm,Wje),e(v,Qje),e(v,_m),e(_m,wH),e(wH,Hje),e(_m,Uje),e(_m,D9),e(D9,Jje),e(_m,Yje),e(v,Kje),e(v,um),e(um,AH),e(AH,Zje),e(um,eDe),e(um,N9),e(N9,oDe),e(um,rDe),e(v,tDe),e(v,bm),e(bm,LH),e(LH,aDe),e(bm,nDe),e(bm,q9),e(q9,sDe),e(bm,lDe),e(v,iDe),e(v,vm),e(vm,BH),e(BH,dDe),e(vm,cDe),e(vm,O9),e(O9,fDe),e(vm,mDe),e(v,gDe),e(v,Tm),e(Tm,xH),e(xH,hDe),e(Tm,pDe),e(Tm,G9),e(G9,_De),e(Tm,uDe),e(v,bDe),e(v,Fm),e(Fm,kH),e(kH,vDe),e(Fm,TDe),e(Fm,X9),e(X9,FDe),e(Fm,CDe),e(v,MDe),e(v,Cm),e(Cm,RH),e(RH,EDe),e(Cm,yDe),e(Cm,V9),e(V9,wDe),e(Cm,ADe),e(v,LDe),e(v,Mm),e(Mm,SH),e(SH,BDe),e(Mm,xDe),e(Mm,z9),e(z9,kDe),e(Mm,RDe),e(v,SDe),e(v,Em),e(Em,PH),e(PH,PDe),e(Em,$De),e(Em,W9),e(W9,IDe),e(Em,jDe),e(v,DDe),e(v,ym),e(ym,$H),e($H,NDe),e(ym,qDe),e(ym,Q9),e(Q9,ODe),e(ym,GDe),e(v,XDe),e(v,wm),e(wm,IH),e(IH,VDe),e(wm,zDe),e(wm,H9),e(H9,WDe),e(wm,QDe),e(v,HDe),e(v,Am),e(Am,jH),e(jH,UDe),e(Am,JDe),e(Am,U9),e(U9,YDe),e(Am,KDe),e(v,ZDe),e(v,Lm),e(Lm,DH),e(DH,eNe),e(Lm,oNe),e(Lm,J9),e(J9,rNe),e(Lm,tNe),e(v,aNe),e(v,Bm),e(Bm,NH),e(NH,nNe),e(Bm,sNe),e(Bm,Y9),e(Y9,lNe),e(Bm,iNe),e(v,dNe),e(v,xm),e(xm,qH),e(qH,cNe),e(xm,fNe),e(xm,K9),e(K9,mNe),e(xm,gNe),e(v,hNe),e(v,km),e(km,OH),e(OH,pNe),e(km,_Ne),e(km,Z9),e(Z9,uNe),e(km,bNe),e(v,vNe),e(v,Rm),e(Rm,GH),e(GH,TNe),e(Rm,FNe),e(Rm,eB),e(eB,CNe),e(Rm,MNe),e(v,ENe),e(v,Sm),e(Sm,XH),e(XH,yNe),e(Sm,wNe),e(Sm,oB),e(oB,ANe),e(Sm,LNe),e(v,BNe),e(v,Pm),e(Pm,VH),e(VH,xNe),e(Pm,kNe),e(Pm,rB),e(rB,RNe),e(Pm,SNe),e(v,PNe),e(v,$m),e($m,zH),e(zH,$Ne),e($m,INe),e($m,tB),e(tB,jNe),e($m,DNe),e(v,NNe),e(v,Im),e(Im,WH),e(WH,qNe),e(Im,ONe),e(Im,aB),e(aB,GNe),e(Im,XNe),e(v,VNe),e(v,jm),e(jm,QH),e(QH,zNe),e(jm,WNe),e(jm,nB),e(nB,QNe),e(jm,HNe),e(v,UNe),e(v,Dm),e(Dm,HH),e(HH,JNe),e(Dm,YNe),e(Dm,sB),e(sB,KNe),e(Dm,ZNe),e(v,eqe),e(v,Nm),e(Nm,UH),e(UH,oqe),e(Nm,rqe),e(Nm,lB),e(lB,tqe),e(Nm,aqe),e(v,nqe),e(v,qm),e(qm,JH),e(JH,sqe),e(qm,lqe),e(qm,iB),e(iB,iqe),e(qm,dqe),e(v,cqe),e(v,Om),e(Om,YH),e(YH,fqe),e(Om,mqe),e(Om,dB),e(dB,gqe),e(Om,hqe),e(v,pqe),e(v,Gm),e(Gm,KH),e(KH,_qe),e(Gm,uqe),e(Gm,cB),e(cB,bqe),e(Gm,vqe),e(v,Tqe),e(v,Xm),e(Xm,ZH),e(ZH,Fqe),e(Xm,Cqe),e(Xm,fB),e(fB,Mqe),e(Xm,Eqe),e(v,yqe),e(v,Vm),e(Vm,eU),e(eU,wqe),e(Vm,Aqe),e(Vm,mB),e(mB,Lqe),e(Vm,Bqe),e(v,xqe),e(v,zm),e(zm,oU),e(oU,kqe),e(zm,Rqe),e(zm,gB),e(gB,Sqe),e(zm,Pqe),e(v,$qe),e(v,Wm),e(Wm,rU),e(rU,Iqe),e(Wm,jqe),e(Wm,hB),e(hB,Dqe),e(Wm,Nqe),e(v,qqe),e(v,Qm),e(Qm,tU),e(tU,Oqe),e(Qm,Gqe),e(Qm,pB),e(pB,Xqe),e(Qm,Vqe),e(v,zqe),e(v,Hm),e(Hm,aU),e(aU,Wqe),e(Hm,Qqe),e(Hm,_B),e(_B,Hqe),e(Hm,Uqe),e(v,Jqe),e(v,Um),e(Um,nU),e(nU,Yqe),e(Um,Kqe),e(Um,uB),e(uB,Zqe),e(Um,eOe),e(v,oOe),e(v,Jm),e(Jm,sU),e(sU,rOe),e(Jm,tOe),e(Jm,bB),e(bB,aOe),e(Jm,nOe),e(v,sOe),e(v,Ym),e(Ym,lU),e(lU,lOe),e(Ym,iOe),e(Ym,vB),e(vB,dOe),e(Ym,cOe),e(v,fOe),e(v,Km),e(Km,iU),e(iU,mOe),e(Km,gOe),e(Km,TB),e(TB,hOe),e(Km,pOe),e(v,_Oe),e(v,Zm),e(Zm,dU),e(dU,uOe),e(Zm,bOe),e(Zm,FB),e(FB,vOe),e(Zm,TOe),e(v,FOe),e(v,eg),e(eg,cU),e(cU,COe),e(eg,MOe),e(eg,CB),e(CB,EOe),e(eg,yOe),e(v,wOe),e(v,og),e(og,fU),e(fU,AOe),e(og,LOe),e(og,MB),e(MB,BOe),e(og,xOe),e(v,kOe),e(v,rg),e(rg,mU),e(mU,ROe),e(rg,SOe),e(rg,EB),e(EB,POe),e(rg,$Oe),e(v,IOe),e(v,tg),e(tg,gU),e(gU,jOe),e(tg,DOe),e(tg,yB),e(yB,NOe),e(tg,qOe),e(v,OOe),e(v,ag),e(ag,hU),e(hU,GOe),e(ag,XOe),e(ag,wB),e(wB,VOe),e(ag,zOe),e(v,WOe),e(v,ng),e(ng,pU),e(pU,QOe),e(ng,HOe),e(ng,AB),e(AB,UOe),e(ng,JOe),e(v,YOe),e(v,sg),e(sg,_U),e(_U,KOe),e(sg,ZOe),e(sg,LB),e(LB,eGe),e(sg,oGe),e(v,rGe),e(v,lg),e(lg,uU),e(uU,tGe),e(lg,aGe),e(lg,BB),e(BB,nGe),e(lg,sGe),e(v,lGe),e(v,ig),e(ig,bU),e(bU,iGe),e(ig,dGe),e(ig,xB),e(xB,cGe),e(ig,fGe),e(v,mGe),e(v,dg),e(dg,vU),e(vU,gGe),e(dg,hGe),e(dg,kB),e(kB,pGe),e(dg,_Ge),e(v,uGe),e(v,cg),e(cg,TU),e(TU,bGe),e(cg,vGe),e(cg,RB),e(RB,TGe),e(cg,FGe),e(v,CGe),e(v,fg),e(fg,FU),e(FU,MGe),e(fg,EGe),e(fg,SB),e(SB,yGe),e(fg,wGe),e(v,AGe),e(v,mg),e(mg,CU),e(CU,LGe),e(mg,BGe),e(mg,PB),e(PB,xGe),e(mg,kGe),e(v,RGe),e(v,gg),e(gg,MU),e(MU,SGe),e(gg,PGe),e(gg,$B),e($B,$Ge),e(gg,IGe),e(v,jGe),e(v,hg),e(hg,EU),e(EU,DGe),e(hg,NGe),e(hg,IB),e(IB,qGe),e(hg,OGe),e(v,GGe),e(v,pg),e(pg,yU),e(yU,XGe),e(pg,VGe),e(pg,jB),e(jB,zGe),e(pg,WGe),e(v,QGe),e(v,_g),e(_g,wU),e(wU,HGe),e(_g,UGe),e(_g,DB),e(DB,JGe),e(_g,YGe),e(v,KGe),e(v,ug),e(ug,AU),e(AU,ZGe),e(ug,eXe),e(ug,NB),e(NB,oXe),e(ug,rXe),e(v,tXe),e(v,bg),e(bg,LU),e(LU,aXe),e(bg,nXe),e(bg,qB),e(qB,sXe),e(bg,lXe),e(v,iXe),e(v,vg),e(vg,BU),e(BU,dXe),e(vg,cXe),e(vg,OB),e(OB,fXe),e(vg,mXe),e(v,gXe),e(v,Tg),e(Tg,xU),e(xU,hXe),e(Tg,pXe),e(Tg,GB),e(GB,_Xe),e(Tg,uXe),e(v,bXe),e(v,Fg),e(Fg,kU),e(kU,vXe),e(Fg,TXe),e(Fg,XB),e(XB,FXe),e(Fg,CXe),e(v,MXe),e(v,Cg),e(Cg,RU),e(RU,EXe),e(Cg,yXe),e(Cg,VB),e(VB,wXe),e(Cg,AXe),e(v,LXe),e(v,Mg),e(Mg,SU),e(SU,BXe),e(Mg,xXe),e(Mg,zB),e(zB,kXe),e(Mg,RXe),e(v,SXe),e(v,Eg),e(Eg,PU),e(PU,PXe),e(Eg,$Xe),e(Eg,WB),e(WB,IXe),e(Eg,jXe),e(v,DXe),e(v,yg),e(yg,$U),e($U,NXe),e(yg,qXe),e(yg,QB),e(QB,OXe),e(yg,GXe),e(v,XXe),e(v,wg),e(wg,IU),e(IU,VXe),e(wg,zXe),e(wg,HB),e(HB,WXe),e(wg,QXe),e(v,HXe),e(v,Ag),e(Ag,jU),e(jU,UXe),e(Ag,JXe),e(Ag,UB),e(UB,YXe),e(Ag,KXe),e(v,ZXe),e(v,Lg),e(Lg,DU),e(DU,eVe),e(Lg,oVe),e(Lg,JB),e(JB,rVe),e(Lg,tVe),e(v,aVe),e(v,Bg),e(Bg,NU),e(NU,nVe),e(Bg,sVe),e(Bg,YB),e(YB,lVe),e(Bg,iVe),e(v,dVe),e(v,xg),e(xg,qU),e(qU,cVe),e(xg,fVe),e(xg,KB),e(KB,mVe),e(xg,gVe),e(v,hVe),e(v,kg),e(kg,OU),e(OU,pVe),e(kg,_Ve),e(kg,ZB),e(ZB,uVe),e(kg,bVe),e(v,vVe),e(v,Rg),e(Rg,GU),e(GU,TVe),e(Rg,FVe),e(Rg,ex),e(ex,CVe),e(Rg,MVe),e(v,EVe),e(v,Sg),e(Sg,XU),e(XU,yVe),e(Sg,wVe),e(Sg,ox),e(ox,AVe),e(Sg,LVe),e(v,BVe),e(v,Pg),e(Pg,VU),e(VU,xVe),e(Pg,kVe),e(Pg,rx),e(rx,RVe),e(Pg,SVe),e(v,PVe),e(v,$g),e($g,zU),e(zU,$Ve),e($g,IVe),e($g,tx),e(tx,jVe),e($g,DVe),e(v,NVe),e(v,Ig),e(Ig,WU),e(WU,qVe),e(Ig,OVe),e(Ig,ax),e(ax,GVe),e(Ig,XVe),e(v,VVe),e(v,jg),e(jg,QU),e(QU,zVe),e(jg,WVe),e(jg,nx),e(nx,QVe),e(jg,HVe),e(v,UVe),e(v,Dg),e(Dg,HU),e(HU,JVe),e(Dg,YVe),e(Dg,sx),e(sx,KVe),e(Dg,ZVe),e(v,eze),e(v,Ng),e(Ng,UU),e(UU,oze),e(Ng,rze),e(Ng,lx),e(lx,tze),e(Ng,aze),e(v,nze),e(v,qg),e(qg,JU),e(JU,sze),e(qg,lze),e(qg,ix),e(ix,ize),e(qg,dze),e(mo,cze),e(mo,YU),e(YU,fze),e(mo,mze),g(y4,mo,null),e(Qo,gze),e(Qo,Og),g(w4,Og,null),e(Og,hze),e(Og,KU),e(KU,pze),b(d,kke,u),b(d,ed,u),e(ed,Gg),e(Gg,ZU),g(A4,ZU,null),e(ed,_ze),e(ed,eJ),e(eJ,uze),b(d,Rke,u),b(d,Ho,u),g(L4,Ho,null),e(Ho,bze),e(Ho,B4),e(B4,vze),e(B4,dx),e(dx,Tze),e(B4,Fze),e(Ho,Cze),e(Ho,x4),e(x4,Mze),e(x4,oJ),e(oJ,Eze),e(x4,yze),e(Ho,wze),e(Ho,go),g(k4,go,null),e(go,Aze),e(go,rJ),e(rJ,Lze),e(go,Bze),e(go,Wa),e(Wa,xze),e(Wa,tJ),e(tJ,kze),e(Wa,Rze),e(Wa,aJ),e(aJ,Sze),e(Wa,Pze),e(Wa,nJ),e(nJ,$ze),e(Wa,Ize),e(go,jze),e(go,E),e(E,Yn),e(Yn,sJ),e(sJ,Dze),e(Yn,Nze),e(Yn,cx),e(cx,qze),e(Yn,Oze),e(Yn,fx),e(fx,Gze),e(Yn,Xze),e(E,Vze),e(E,Kn),e(Kn,lJ),e(lJ,zze),e(Kn,Wze),e(Kn,mx),e(mx,Qze),e(Kn,Hze),e(Kn,gx),e(gx,Uze),e(Kn,Jze),e(E,Yze),e(E,Zn),e(Zn,iJ),e(iJ,Kze),e(Zn,Zze),e(Zn,hx),e(hx,eWe),e(Zn,oWe),e(Zn,px),e(px,rWe),e(Zn,tWe),e(E,aWe),e(E,Xg),e(Xg,dJ),e(dJ,nWe),e(Xg,sWe),e(Xg,_x),e(_x,lWe),e(Xg,iWe),e(E,dWe),e(E,es),e(es,cJ),e(cJ,cWe),e(es,fWe),e(es,ux),e(ux,mWe),e(es,gWe),e(es,bx),e(bx,hWe),e(es,pWe),e(E,_We),e(E,Vg),e(Vg,fJ),e(fJ,uWe),e(Vg,bWe),e(Vg,vx),e(vx,vWe),e(Vg,TWe),e(E,FWe),e(E,zg),e(zg,mJ),e(mJ,CWe),e(zg,MWe),e(zg,Tx),e(Tx,EWe),e(zg,yWe),e(E,wWe),e(E,Wg),e(Wg,gJ),e(gJ,AWe),e(Wg,LWe),e(Wg,Fx),e(Fx,BWe),e(Wg,xWe),e(E,kWe),e(E,os),e(os,hJ),e(hJ,RWe),e(os,SWe),e(os,Cx),e(Cx,PWe),e(os,$We),e(os,Mx),e(Mx,IWe),e(os,jWe),e(E,DWe),e(E,rs),e(rs,pJ),e(pJ,NWe),e(rs,qWe),e(rs,Ex),e(Ex,OWe),e(rs,GWe),e(rs,yx),e(yx,XWe),e(rs,VWe),e(E,zWe),e(E,ts),e(ts,_J),e(_J,WWe),e(ts,QWe),e(ts,wx),e(wx,HWe),e(ts,UWe),e(ts,Ax),e(Ax,JWe),e(ts,YWe),e(E,KWe),e(E,Qg),e(Qg,uJ),e(uJ,ZWe),e(Qg,eQe),e(Qg,Lx),e(Lx,oQe),e(Qg,rQe),e(E,tQe),e(E,Hg),e(Hg,bJ),e(bJ,aQe),e(Hg,nQe),e(Hg,Bx),e(Bx,sQe),e(Hg,lQe),e(E,iQe),e(E,as),e(as,vJ),e(vJ,dQe),e(as,cQe),e(as,xx),e(xx,fQe),e(as,mQe),e(as,kx),e(kx,gQe),e(as,hQe),e(E,pQe),e(E,Ug),e(Ug,TJ),e(TJ,_Qe),e(Ug,uQe),e(Ug,Rx),e(Rx,bQe),e(Ug,vQe),e(E,TQe),e(E,ns),e(ns,FJ),e(FJ,FQe),e(ns,CQe),e(ns,Sx),e(Sx,MQe),e(ns,EQe),e(ns,Px),e(Px,yQe),e(ns,wQe),e(E,AQe),e(E,ss),e(ss,CJ),e(CJ,LQe),e(ss,BQe),e(ss,$x),e($x,xQe),e(ss,kQe),e(ss,Ix),e(Ix,RQe),e(ss,SQe),e(E,PQe),e(E,ls),e(ls,MJ),e(MJ,$Qe),e(ls,IQe),e(ls,jx),e(jx,jQe),e(ls,DQe),e(ls,EJ),e(EJ,NQe),e(ls,qQe),e(E,OQe),e(E,Jg),e(Jg,yJ),e(yJ,GQe),e(Jg,XQe),e(Jg,Dx),e(Dx,VQe),e(Jg,zQe),e(E,WQe),e(E,is),e(is,wJ),e(wJ,QQe),e(is,HQe),e(is,Nx),e(Nx,UQe),e(is,JQe),e(is,qx),e(qx,YQe),e(is,KQe),e(E,ZQe),e(E,Yg),e(Yg,AJ),e(AJ,eHe),e(Yg,oHe),e(Yg,Ox),e(Ox,rHe),e(Yg,tHe),e(E,aHe),e(E,ds),e(ds,LJ),e(LJ,nHe),e(ds,sHe),e(ds,Gx),e(Gx,lHe),e(ds,iHe),e(ds,Xx),e(Xx,dHe),e(ds,cHe),e(E,fHe),e(E,cs),e(cs,BJ),e(BJ,mHe),e(cs,gHe),e(cs,Vx),e(Vx,hHe),e(cs,pHe),e(cs,zx),e(zx,_He),e(cs,uHe),e(E,bHe),e(E,fs),e(fs,xJ),e(xJ,vHe),e(fs,THe),e(fs,Wx),e(Wx,FHe),e(fs,CHe),e(fs,Qx),e(Qx,MHe),e(fs,EHe),e(E,yHe),e(E,Kg),e(Kg,kJ),e(kJ,wHe),e(Kg,AHe),e(Kg,Hx),e(Hx,LHe),e(Kg,BHe),e(E,xHe),e(E,ms),e(ms,RJ),e(RJ,kHe),e(ms,RHe),e(ms,Ux),e(Ux,SHe),e(ms,PHe),e(ms,Jx),e(Jx,$He),e(ms,IHe),e(E,jHe),e(E,Zg),e(Zg,SJ),e(SJ,DHe),e(Zg,NHe),e(Zg,Yx),e(Yx,qHe),e(Zg,OHe),e(E,GHe),e(E,gs),e(gs,PJ),e(PJ,XHe),e(gs,VHe),e(gs,Kx),e(Kx,zHe),e(gs,WHe),e(gs,Zx),e(Zx,QHe),e(gs,HHe),e(E,UHe),e(E,hs),e(hs,$J),e($J,JHe),e(hs,YHe),e(hs,ek),e(ek,KHe),e(hs,ZHe),e(hs,ok),e(ok,eUe),e(hs,oUe),e(E,rUe),e(E,ps),e(ps,IJ),e(IJ,tUe),e(ps,aUe),e(ps,rk),e(rk,nUe),e(ps,sUe),e(ps,tk),e(tk,lUe),e(ps,iUe),e(E,dUe),e(E,_s),e(_s,jJ),e(jJ,cUe),e(_s,fUe),e(_s,ak),e(ak,mUe),e(_s,gUe),e(_s,nk),e(nk,hUe),e(_s,pUe),e(E,_Ue),e(E,eh),e(eh,DJ),e(DJ,uUe),e(eh,bUe),e(eh,sk),e(sk,vUe),e(eh,TUe),e(E,FUe),e(E,us),e(us,NJ),e(NJ,CUe),e(us,MUe),e(us,lk),e(lk,EUe),e(us,yUe),e(us,ik),e(ik,wUe),e(us,AUe),e(E,LUe),e(E,bs),e(bs,qJ),e(qJ,BUe),e(bs,xUe),e(bs,dk),e(dk,kUe),e(bs,RUe),e(bs,ck),e(ck,SUe),e(bs,PUe),e(E,$Ue),e(E,vs),e(vs,OJ),e(OJ,IUe),e(vs,jUe),e(vs,fk),e(fk,DUe),e(vs,NUe),e(vs,mk),e(mk,qUe),e(vs,OUe),e(E,GUe),e(E,Ts),e(Ts,GJ),e(GJ,XUe),e(Ts,VUe),e(Ts,gk),e(gk,zUe),e(Ts,WUe),e(Ts,hk),e(hk,QUe),e(Ts,HUe),e(E,UUe),e(E,Fs),e(Fs,XJ),e(XJ,JUe),e(Fs,YUe),e(Fs,pk),e(pk,KUe),e(Fs,ZUe),e(Fs,_k),e(_k,eJe),e(Fs,oJe),e(E,rJe),e(E,Cs),e(Cs,VJ),e(VJ,tJe),e(Cs,aJe),e(Cs,uk),e(uk,nJe),e(Cs,sJe),e(Cs,bk),e(bk,lJe),e(Cs,iJe),e(E,dJe),e(E,oh),e(oh,zJ),e(zJ,cJe),e(oh,fJe),e(oh,vk),e(vk,mJe),e(oh,gJe),e(E,hJe),e(E,Ms),e(Ms,WJ),e(WJ,pJe),e(Ms,_Je),e(Ms,Tk),e(Tk,uJe),e(Ms,bJe),e(Ms,Fk),e(Fk,vJe),e(Ms,TJe),e(E,FJe),e(E,rh),e(rh,QJ),e(QJ,CJe),e(rh,MJe),e(rh,Ck),e(Ck,EJe),e(rh,yJe),e(E,wJe),e(E,th),e(th,HJ),e(HJ,AJe),e(th,LJe),e(th,Mk),e(Mk,BJe),e(th,xJe),e(E,kJe),e(E,Es),e(Es,UJ),e(UJ,RJe),e(Es,SJe),e(Es,Ek),e(Ek,PJe),e(Es,$Je),e(Es,yk),e(yk,IJe),e(Es,jJe),e(E,DJe),e(E,ys),e(ys,JJ),e(JJ,NJe),e(ys,qJe),e(ys,wk),e(wk,OJe),e(ys,GJe),e(ys,Ak),e(Ak,XJe),e(ys,VJe),e(E,zJe),e(E,ah),e(ah,YJ),e(YJ,WJe),e(ah,QJe),e(ah,Lk),e(Lk,HJe),e(ah,UJe),e(E,JJe),e(E,ws),e(ws,KJ),e(KJ,YJe),e(ws,KJe),e(ws,Bk),e(Bk,ZJe),e(ws,eYe),e(ws,xk),e(xk,oYe),e(ws,rYe),e(E,tYe),e(E,As),e(As,ZJ),e(ZJ,aYe),e(As,nYe),e(As,kk),e(kk,sYe),e(As,lYe),e(As,Rk),e(Rk,iYe),e(As,dYe),e(E,cYe),e(E,Ls),e(Ls,eY),e(eY,fYe),e(Ls,mYe),e(Ls,Sk),e(Sk,gYe),e(Ls,hYe),e(Ls,Pk),e(Pk,pYe),e(Ls,_Ye),e(E,uYe),e(E,Bs),e(Bs,oY),e(oY,bYe),e(Bs,vYe),e(Bs,$k),e($k,TYe),e(Bs,FYe),e(Bs,Ik),e(Ik,CYe),e(Bs,MYe),e(E,EYe),e(E,xs),e(xs,rY),e(rY,yYe),e(xs,wYe),e(xs,jk),e(jk,AYe),e(xs,LYe),e(xs,Dk),e(Dk,BYe),e(xs,xYe),e(E,kYe),e(E,nh),e(nh,tY),e(tY,RYe),e(nh,SYe),e(nh,Nk),e(Nk,PYe),e(nh,$Ye),e(E,IYe),e(E,sh),e(sh,aY),e(aY,jYe),e(sh,DYe),e(sh,qk),e(qk,NYe),e(sh,qYe),e(E,OYe),e(E,lh),e(lh,nY),e(nY,GYe),e(lh,XYe),e(lh,Ok),e(Ok,VYe),e(lh,zYe),e(E,WYe),e(E,ih),e(ih,sY),e(sY,QYe),e(ih,HYe),e(ih,Gk),e(Gk,UYe),e(ih,JYe),e(E,YYe),e(E,ks),e(ks,lY),e(lY,KYe),e(ks,ZYe),e(ks,Xk),e(Xk,eKe),e(ks,oKe),e(ks,Vk),e(Vk,rKe),e(ks,tKe),e(E,aKe),e(E,dh),e(dh,iY),e(iY,nKe),e(dh,sKe),e(dh,zk),e(zk,lKe),e(dh,iKe),e(E,dKe),e(E,Rs),e(Rs,dY),e(dY,cKe),e(Rs,fKe),e(Rs,Wk),e(Wk,mKe),e(Rs,gKe),e(Rs,Qk),e(Qk,hKe),e(Rs,pKe),e(E,_Ke),e(E,Ss),e(Ss,cY),e(cY,uKe),e(Ss,bKe),e(Ss,Hk),e(Hk,vKe),e(Ss,TKe),e(Ss,Uk),e(Uk,FKe),e(Ss,CKe),e(E,MKe),e(E,Ps),e(Ps,fY),e(fY,EKe),e(Ps,yKe),e(Ps,Jk),e(Jk,wKe),e(Ps,AKe),e(Ps,Yk),e(Yk,LKe),e(Ps,BKe),e(E,xKe),e(E,$s),e($s,mY),e(mY,kKe),e($s,RKe),e($s,Kk),e(Kk,SKe),e($s,PKe),e($s,Zk),e(Zk,$Ke),e($s,IKe),e(E,jKe),e(E,Is),e(Is,gY),e(gY,DKe),e(Is,NKe),e(Is,eR),e(eR,qKe),e(Is,OKe),e(Is,oR),e(oR,GKe),e(Is,XKe),e(E,VKe),e(E,js),e(js,hY),e(hY,zKe),e(js,WKe),e(js,rR),e(rR,QKe),e(js,HKe),e(js,tR),e(tR,UKe),e(js,JKe),e(E,YKe),e(E,ch),e(ch,pY),e(pY,KKe),e(ch,ZKe),e(ch,aR),e(aR,eZe),e(ch,oZe),e(E,rZe),e(E,fh),e(fh,_Y),e(_Y,tZe),e(fh,aZe),e(fh,nR),e(nR,nZe),e(fh,sZe),e(E,lZe),e(E,Ds),e(Ds,uY),e(uY,iZe),e(Ds,dZe),e(Ds,sR),e(sR,cZe),e(Ds,fZe),e(Ds,lR),e(lR,mZe),e(Ds,gZe),e(E,hZe),e(E,Ns),e(Ns,bY),e(bY,pZe),e(Ns,_Ze),e(Ns,iR),e(iR,uZe),e(Ns,bZe),e(Ns,dR),e(dR,vZe),e(Ns,TZe),e(E,FZe),e(E,qs),e(qs,vY),e(vY,CZe),e(qs,MZe),e(qs,cR),e(cR,EZe),e(qs,yZe),e(qs,fR),e(fR,wZe),e(qs,AZe),e(E,LZe),e(E,mh),e(mh,TY),e(TY,BZe),e(mh,xZe),e(mh,mR),e(mR,kZe),e(mh,RZe),e(E,SZe),e(E,gh),e(gh,FY),e(FY,PZe),e(gh,$Ze),e(gh,gR),e(gR,IZe),e(gh,jZe),e(E,DZe),e(E,hh),e(hh,CY),e(CY,NZe),e(hh,qZe),e(hh,hR),e(hR,OZe),e(hh,GZe),e(E,XZe),e(E,ph),e(ph,MY),e(MY,VZe),e(ph,zZe),e(ph,pR),e(pR,WZe),e(ph,QZe),e(E,HZe),e(E,Os),e(Os,EY),e(EY,UZe),e(Os,JZe),e(Os,_R),e(_R,YZe),e(Os,KZe),e(Os,uR),e(uR,ZZe),e(Os,eeo),e(E,oeo),e(E,_h),e(_h,yY),e(yY,reo),e(_h,teo),e(_h,bR),e(bR,aeo),e(_h,neo),e(E,seo),e(E,uh),e(uh,wY),e(wY,leo),e(uh,ieo),e(uh,vR),e(vR,deo),e(uh,ceo),e(E,feo),e(E,Gs),e(Gs,AY),e(AY,meo),e(Gs,geo),e(Gs,TR),e(TR,heo),e(Gs,peo),e(Gs,FR),e(FR,_eo),e(Gs,ueo),e(E,beo),e(E,Xs),e(Xs,LY),e(LY,veo),e(Xs,Teo),e(Xs,CR),e(CR,Feo),e(Xs,Ceo),e(Xs,MR),e(MR,Meo),e(Xs,Eeo),e(go,yeo),e(go,BY),e(BY,weo),e(go,Aeo),g(R4,go,null),e(Ho,Leo),e(Ho,bh),g(S4,bh,null),e(bh,Beo),e(bh,xY),e(xY,xeo),b(d,Ske,u),b(d,od,u),e(od,vh),e(vh,kY),g(P4,kY,null),e(od,keo),e(od,RY),e(RY,Reo),b(d,Pke,u),b(d,Uo,u),g($4,Uo,null),e(Uo,Seo),e(Uo,I4),e(I4,Peo),e(I4,ER),e(ER,$eo),e(I4,Ieo),e(Uo,jeo),e(Uo,j4),e(j4,Deo),e(j4,SY),e(SY,Neo),e(j4,qeo),e(Uo,Oeo),e(Uo,Ie),g(D4,Ie,null),e(Ie,Geo),e(Ie,PY),e(PY,Xeo),e(Ie,Veo),e(Ie,Qa),e(Qa,zeo),e(Qa,$Y),e($Y,Weo),e(Qa,Qeo),e(Qa,IY),e(IY,Heo),e(Qa,Ueo),e(Qa,jY),e(jY,Jeo),e(Qa,Yeo),e(Ie,Keo),e(Ie,re),e(re,Th),e(Th,DY),e(DY,Zeo),e(Th,eoo),e(Th,yR),e(yR,ooo),e(Th,roo),e(re,too),e(re,Fh),e(Fh,NY),e(NY,aoo),e(Fh,noo),e(Fh,wR),e(wR,soo),e(Fh,loo),e(re,ioo),e(re,Ch),e(Ch,qY),e(qY,doo),e(Ch,coo),e(Ch,AR),e(AR,foo),e(Ch,moo),e(re,goo),e(re,Mh),e(Mh,OY),e(OY,hoo),e(Mh,poo),e(Mh,LR),e(LR,_oo),e(Mh,uoo),e(re,boo),e(re,Eh),e(Eh,GY),e(GY,voo),e(Eh,Too),e(Eh,BR),e(BR,Foo),e(Eh,Coo),e(re,Moo),e(re,yh),e(yh,XY),e(XY,Eoo),e(yh,yoo),e(yh,xR),e(xR,woo),e(yh,Aoo),e(re,Loo),e(re,wh),e(wh,VY),e(VY,Boo),e(wh,xoo),e(wh,kR),e(kR,koo),e(wh,Roo),e(re,Soo),e(re,Ah),e(Ah,zY),e(zY,Poo),e(Ah,$oo),e(Ah,RR),e(RR,Ioo),e(Ah,joo),e(re,Doo),e(re,Lh),e(Lh,WY),e(WY,Noo),e(Lh,qoo),e(Lh,SR),e(SR,Ooo),e(Lh,Goo),e(re,Xoo),e(re,Bh),e(Bh,QY),e(QY,Voo),e(Bh,zoo),e(Bh,PR),e(PR,Woo),e(Bh,Qoo),e(re,Hoo),e(re,xh),e(xh,HY),e(HY,Uoo),e(xh,Joo),e(xh,$R),e($R,Yoo),e(xh,Koo),e(re,Zoo),e(re,kh),e(kh,UY),e(UY,ero),e(kh,oro),e(kh,IR),e(IR,rro),e(kh,tro),e(re,aro),e(re,Rh),e(Rh,JY),e(JY,nro),e(Rh,sro),e(Rh,jR),e(jR,lro),e(Rh,iro),e(re,dro),e(re,Sh),e(Sh,YY),e(YY,cro),e(Sh,fro),e(Sh,DR),e(DR,mro),e(Sh,gro),e(re,hro),e(re,Ph),e(Ph,KY),e(KY,pro),e(Ph,_ro),e(Ph,NR),e(NR,uro),e(Ph,bro),e(re,vro),e(re,$h),e($h,ZY),e(ZY,Tro),e($h,Fro),e($h,qR),e(qR,Cro),e($h,Mro),e(re,Ero),e(re,Ih),e(Ih,eK),e(eK,yro),e(Ih,wro),e(Ih,OR),e(OR,Aro),e(Ih,Lro),e(re,Bro),e(re,jh),e(jh,oK),e(oK,xro),e(jh,kro),e(jh,GR),e(GR,Rro),e(jh,Sro),e(Ie,Pro),g(Dh,Ie,null),e(Ie,$ro),e(Ie,rK),e(rK,Iro),e(Ie,jro),g(N4,Ie,null),e(Uo,Dro),e(Uo,Nh),g(q4,Nh,null),e(Nh,Nro),e(Nh,tK),e(tK,qro),b(d,$ke,u),b(d,rd,u),e(rd,qh),e(qh,aK),g(O4,aK,null),e(rd,Oro),e(rd,nK),e(nK,Gro),b(d,Ike,u),b(d,Jo,u),g(G4,Jo,null),e(Jo,Xro),e(Jo,X4),e(X4,Vro),e(X4,XR),e(XR,zro),e(X4,Wro),e(Jo,Qro),e(Jo,V4),e(V4,Hro),e(V4,sK),e(sK,Uro),e(V4,Jro),e(Jo,Yro),e(Jo,je),g(z4,je,null),e(je,Kro),e(je,lK),e(lK,Zro),e(je,eto),e(je,td),e(td,oto),e(td,iK),e(iK,rto),e(td,tto),e(td,dK),e(dK,ato),e(td,nto),e(je,sto),e(je,xe),e(xe,Oh),e(Oh,cK),e(cK,lto),e(Oh,ito),e(Oh,VR),e(VR,dto),e(Oh,cto),e(xe,fto),e(xe,Gh),e(Gh,fK),e(fK,mto),e(Gh,gto),e(Gh,zR),e(zR,hto),e(Gh,pto),e(xe,_to),e(xe,Xh),e(Xh,mK),e(mK,uto),e(Xh,bto),e(Xh,WR),e(WR,vto),e(Xh,Tto),e(xe,Fto),e(xe,Vh),e(Vh,gK),e(gK,Cto),e(Vh,Mto),e(Vh,QR),e(QR,Eto),e(Vh,yto),e(xe,wto),e(xe,zh),e(zh,hK),e(hK,Ato),e(zh,Lto),e(zh,HR),e(HR,Bto),e(zh,xto),e(xe,kto),e(xe,Wh),e(Wh,pK),e(pK,Rto),e(Wh,Sto),e(Wh,UR),e(UR,Pto),e(Wh,$to),e(xe,Ito),e(xe,Qh),e(Qh,_K),e(_K,jto),e(Qh,Dto),e(Qh,JR),e(JR,Nto),e(Qh,qto),e(xe,Oto),e(xe,Hh),e(Hh,uK),e(uK,Gto),e(Hh,Xto),e(Hh,YR),e(YR,Vto),e(Hh,zto),e(je,Wto),g(Uh,je,null),e(je,Qto),e(je,bK),e(bK,Hto),e(je,Uto),g(W4,je,null),e(Jo,Jto),e(Jo,Jh),g(Q4,Jh,null),e(Jh,Yto),e(Jh,vK),e(vK,Kto),b(d,jke,u),b(d,ad,u),e(ad,Yh),e(Yh,TK),g(H4,TK,null),e(ad,Zto),e(ad,FK),e(FK,eao),b(d,Dke,u),b(d,Yo,u),g(U4,Yo,null),e(Yo,oao),e(Yo,nd),e(nd,rao),e(nd,CK),e(CK,tao),e(nd,aao),e(nd,MK),e(MK,nao),e(nd,sao),e(Yo,lao),e(Yo,J4),e(J4,iao),e(J4,EK),e(EK,dao),e(J4,cao),e(Yo,fao),e(Yo,Wr),g(Y4,Wr,null),e(Wr,mao),e(Wr,yK),e(yK,gao),e(Wr,hao),e(Wr,sd),e(sd,pao),e(sd,wK),e(wK,_ao),e(sd,uao),e(sd,AK),e(AK,bao),e(sd,vao),e(Wr,Tao),e(Wr,LK),e(LK,Fao),e(Wr,Cao),g(K4,Wr,null),e(Yo,Mao),e(Yo,De),g(Z4,De,null),e(De,Eao),e(De,BK),e(BK,yao),e(De,wao),e(De,Ha),e(Ha,Aao),e(Ha,xK),e(xK,Lao),e(Ha,Bao),e(Ha,kK),e(kK,xao),e(Ha,kao),e(Ha,RK),e(RK,Rao),e(Ha,Sao),e(De,Pao),e(De,F),e(F,Kh),e(Kh,SK),e(SK,$ao),e(Kh,Iao),e(Kh,KR),e(KR,jao),e(Kh,Dao),e(F,Nao),e(F,Zh),e(Zh,PK),e(PK,qao),e(Zh,Oao),e(Zh,ZR),e(ZR,Gao),e(Zh,Xao),e(F,Vao),e(F,ep),e(ep,$K),e($K,zao),e(ep,Wao),e(ep,eS),e(eS,Qao),e(ep,Hao),e(F,Uao),e(F,op),e(op,IK),e(IK,Jao),e(op,Yao),e(op,oS),e(oS,Kao),e(op,Zao),e(F,eno),e(F,rp),e(rp,jK),e(jK,ono),e(rp,rno),e(rp,rS),e(rS,tno),e(rp,ano),e(F,nno),e(F,tp),e(tp,DK),e(DK,sno),e(tp,lno),e(tp,tS),e(tS,ino),e(tp,dno),e(F,cno),e(F,ap),e(ap,NK),e(NK,fno),e(ap,mno),e(ap,aS),e(aS,gno),e(ap,hno),e(F,pno),e(F,np),e(np,qK),e(qK,_no),e(np,uno),e(np,nS),e(nS,bno),e(np,vno),e(F,Tno),e(F,sp),e(sp,OK),e(OK,Fno),e(sp,Cno),e(sp,sS),e(sS,Mno),e(sp,Eno),e(F,yno),e(F,lp),e(lp,GK),e(GK,wno),e(lp,Ano),e(lp,lS),e(lS,Lno),e(lp,Bno),e(F,xno),e(F,ip),e(ip,XK),e(XK,kno),e(ip,Rno),e(ip,iS),e(iS,Sno),e(ip,Pno),e(F,$no),e(F,dp),e(dp,VK),e(VK,Ino),e(dp,jno),e(dp,dS),e(dS,Dno),e(dp,Nno),e(F,qno),e(F,cp),e(cp,zK),e(zK,Ono),e(cp,Gno),e(cp,cS),e(cS,Xno),e(cp,Vno),e(F,zno),e(F,fp),e(fp,WK),e(WK,Wno),e(fp,Qno),e(fp,fS),e(fS,Hno),e(fp,Uno),e(F,Jno),e(F,mp),e(mp,QK),e(QK,Yno),e(mp,Kno),e(mp,mS),e(mS,Zno),e(mp,eso),e(F,oso),e(F,gp),e(gp,HK),e(HK,rso),e(gp,tso),e(gp,gS),e(gS,aso),e(gp,nso),e(F,sso),e(F,hp),e(hp,UK),e(UK,lso),e(hp,iso),e(hp,hS),e(hS,dso),e(hp,cso),e(F,fso),e(F,pp),e(pp,JK),e(JK,mso),e(pp,gso),e(pp,pS),e(pS,hso),e(pp,pso),e(F,_so),e(F,_p),e(_p,YK),e(YK,uso),e(_p,bso),e(_p,_S),e(_S,vso),e(_p,Tso),e(F,Fso),e(F,up),e(up,KK),e(KK,Cso),e(up,Mso),e(up,uS),e(uS,Eso),e(up,yso),e(F,wso),e(F,bp),e(bp,ZK),e(ZK,Aso),e(bp,Lso),e(bp,bS),e(bS,Bso),e(bp,xso),e(F,kso),e(F,vp),e(vp,eZ),e(eZ,Rso),e(vp,Sso),e(vp,vS),e(vS,Pso),e(vp,$so),e(F,Iso),e(F,Tp),e(Tp,oZ),e(oZ,jso),e(Tp,Dso),e(Tp,TS),e(TS,Nso),e(Tp,qso),e(F,Oso),e(F,Fp),e(Fp,rZ),e(rZ,Gso),e(Fp,Xso),e(Fp,FS),e(FS,Vso),e(Fp,zso),e(F,Wso),e(F,Cp),e(Cp,tZ),e(tZ,Qso),e(Cp,Hso),e(Cp,CS),e(CS,Uso),e(Cp,Jso),e(F,Yso),e(F,Mp),e(Mp,aZ),e(aZ,Kso),e(Mp,Zso),e(Mp,MS),e(MS,elo),e(Mp,olo),e(F,rlo),e(F,Ep),e(Ep,nZ),e(nZ,tlo),e(Ep,alo),e(Ep,ES),e(ES,nlo),e(Ep,slo),e(F,llo),e(F,Vs),e(Vs,sZ),e(sZ,ilo),e(Vs,dlo),e(Vs,yS),e(yS,clo),e(Vs,flo),e(Vs,wS),e(wS,mlo),e(Vs,glo),e(F,hlo),e(F,yp),e(yp,lZ),e(lZ,plo),e(yp,_lo),e(yp,AS),e(AS,ulo),e(yp,blo),e(F,vlo),e(F,wp),e(wp,iZ),e(iZ,Tlo),e(wp,Flo),e(wp,LS),e(LS,Clo),e(wp,Mlo),e(F,Elo),e(F,Ap),e(Ap,dZ),e(dZ,ylo),e(Ap,wlo),e(Ap,BS),e(BS,Alo),e(Ap,Llo),e(F,Blo),e(F,Lp),e(Lp,cZ),e(cZ,xlo),e(Lp,klo),e(Lp,xS),e(xS,Rlo),e(Lp,Slo),e(F,Plo),e(F,Bp),e(Bp,fZ),e(fZ,$lo),e(Bp,Ilo),e(Bp,kS),e(kS,jlo),e(Bp,Dlo),e(F,Nlo),e(F,xp),e(xp,mZ),e(mZ,qlo),e(xp,Olo),e(xp,RS),e(RS,Glo),e(xp,Xlo),e(F,Vlo),e(F,kp),e(kp,gZ),e(gZ,zlo),e(kp,Wlo),e(kp,SS),e(SS,Qlo),e(kp,Hlo),e(F,Ulo),e(F,Rp),e(Rp,hZ),e(hZ,Jlo),e(Rp,Ylo),e(Rp,PS),e(PS,Klo),e(Rp,Zlo),e(F,eio),e(F,Sp),e(Sp,pZ),e(pZ,oio),e(Sp,rio),e(Sp,$S),e($S,tio),e(Sp,aio),e(F,nio),e(F,Pp),e(Pp,_Z),e(_Z,sio),e(Pp,lio),e(Pp,IS),e(IS,iio),e(Pp,dio),e(F,cio),e(F,$p),e($p,uZ),e(uZ,fio),e($p,mio),e($p,jS),e(jS,gio),e($p,hio),e(F,pio),e(F,Ip),e(Ip,bZ),e(bZ,_io),e(Ip,uio),e(Ip,DS),e(DS,bio),e(Ip,vio),e(F,Tio),e(F,jp),e(jp,vZ),e(vZ,Fio),e(jp,Cio),e(jp,NS),e(NS,Mio),e(jp,Eio),e(F,yio),e(F,Dp),e(Dp,TZ),e(TZ,wio),e(Dp,Aio),e(Dp,qS),e(qS,Lio),e(Dp,Bio),e(F,xio),e(F,Np),e(Np,FZ),e(FZ,kio),e(Np,Rio),e(Np,OS),e(OS,Sio),e(Np,Pio),e(F,$io),e(F,qp),e(qp,CZ),e(CZ,Iio),e(qp,jio),e(qp,GS),e(GS,Dio),e(qp,Nio),e(F,qio),e(F,Op),e(Op,MZ),e(MZ,Oio),e(Op,Gio),e(Op,XS),e(XS,Xio),e(Op,Vio),e(F,zio),e(F,Gp),e(Gp,EZ),e(EZ,Wio),e(Gp,Qio),e(Gp,VS),e(VS,Hio),e(Gp,Uio),e(F,Jio),e(F,Xp),e(Xp,yZ),e(yZ,Yio),e(Xp,Kio),e(Xp,zS),e(zS,Zio),e(Xp,edo),e(F,odo),e(F,Vp),e(Vp,wZ),e(wZ,rdo),e(Vp,tdo),e(Vp,WS),e(WS,ado),e(Vp,ndo),e(F,sdo),e(F,zp),e(zp,AZ),e(AZ,ldo),e(zp,ido),e(zp,QS),e(QS,ddo),e(zp,cdo),e(F,fdo),e(F,Wp),e(Wp,LZ),e(LZ,mdo),e(Wp,gdo),e(Wp,HS),e(HS,hdo),e(Wp,pdo),e(F,_do),e(F,Qp),e(Qp,BZ),e(BZ,udo),e(Qp,bdo),e(Qp,US),e(US,vdo),e(Qp,Tdo),e(F,Fdo),e(F,Hp),e(Hp,xZ),e(xZ,Cdo),e(Hp,Mdo),e(Hp,JS),e(JS,Edo),e(Hp,ydo),e(F,wdo),e(F,Up),e(Up,kZ),e(kZ,Ado),e(Up,Ldo),e(Up,YS),e(YS,Bdo),e(Up,xdo),e(F,kdo),e(F,Jp),e(Jp,RZ),e(RZ,Rdo),e(Jp,Sdo),e(Jp,KS),e(KS,Pdo),e(Jp,$do),e(F,Ido),e(F,Yp),e(Yp,SZ),e(SZ,jdo),e(Yp,Ddo),e(Yp,ZS),e(ZS,Ndo),e(Yp,qdo),e(F,Odo),e(F,Kp),e(Kp,PZ),e(PZ,Gdo),e(Kp,Xdo),e(Kp,eP),e(eP,Vdo),e(Kp,zdo),e(F,Wdo),e(F,Zp),e(Zp,$Z),e($Z,Qdo),e(Zp,Hdo),e(Zp,oP),e(oP,Udo),e(Zp,Jdo),e(F,Ydo),e(F,e_),e(e_,IZ),e(IZ,Kdo),e(e_,Zdo),e(e_,rP),e(rP,eco),e(e_,oco),e(F,rco),e(F,o_),e(o_,jZ),e(jZ,tco),e(o_,aco),e(o_,tP),e(tP,nco),e(o_,sco),e(F,lco),e(F,r_),e(r_,DZ),e(DZ,ico),e(r_,dco),e(r_,aP),e(aP,cco),e(r_,fco),e(F,mco),e(F,t_),e(t_,NZ),e(NZ,gco),e(t_,hco),e(t_,nP),e(nP,pco),e(t_,_co),e(F,uco),e(F,a_),e(a_,qZ),e(qZ,bco),e(a_,vco),e(a_,sP),e(sP,Tco),e(a_,Fco),e(F,Cco),e(F,n_),e(n_,OZ),e(OZ,Mco),e(n_,Eco),e(n_,lP),e(lP,yco),e(n_,wco),e(F,Aco),e(F,s_),e(s_,GZ),e(GZ,Lco),e(s_,Bco),e(s_,iP),e(iP,xco),e(s_,kco),e(F,Rco),e(F,l_),e(l_,XZ),e(XZ,Sco),e(l_,Pco),e(l_,dP),e(dP,$co),e(l_,Ico),e(F,jco),e(F,i_),e(i_,VZ),e(VZ,Dco),e(i_,Nco),e(i_,cP),e(cP,qco),e(i_,Oco),e(F,Gco),e(F,d_),e(d_,zZ),e(zZ,Xco),e(d_,Vco),e(d_,fP),e(fP,zco),e(d_,Wco),e(F,Qco),e(F,c_),e(c_,WZ),e(WZ,Hco),e(c_,Uco),e(c_,mP),e(mP,Jco),e(c_,Yco),e(F,Kco),e(F,f_),e(f_,QZ),e(QZ,Zco),e(f_,efo),e(f_,gP),e(gP,ofo),e(f_,rfo),e(F,tfo),e(F,m_),e(m_,HZ),e(HZ,afo),e(m_,nfo),e(m_,hP),e(hP,sfo),e(m_,lfo),e(F,ifo),e(F,g_),e(g_,UZ),e(UZ,dfo),e(g_,cfo),e(g_,pP),e(pP,ffo),e(g_,mfo),e(F,gfo),e(F,h_),e(h_,JZ),e(JZ,hfo),e(h_,pfo),e(h_,_P),e(_P,_fo),e(h_,ufo),e(F,bfo),e(F,p_),e(p_,YZ),e(YZ,vfo),e(p_,Tfo),e(p_,uP),e(uP,Ffo),e(p_,Cfo),e(F,Mfo),e(F,__),e(__,KZ),e(KZ,Efo),e(__,yfo),e(__,bP),e(bP,wfo),e(__,Afo),e(F,Lfo),e(F,u_),e(u_,ZZ),e(ZZ,Bfo),e(u_,xfo),e(u_,vP),e(vP,kfo),e(u_,Rfo),e(F,Sfo),e(F,b_),e(b_,eee),e(eee,Pfo),e(b_,$fo),e(b_,TP),e(TP,Ifo),e(b_,jfo),e(F,Dfo),e(F,v_),e(v_,oee),e(oee,Nfo),e(v_,qfo),e(v_,FP),e(FP,Ofo),e(v_,Gfo),e(F,Xfo),e(F,T_),e(T_,ree),e(ree,Vfo),e(T_,zfo),e(T_,CP),e(CP,Wfo),e(T_,Qfo),e(F,Hfo),e(F,F_),e(F_,tee),e(tee,Ufo),e(F_,Jfo),e(F_,MP),e(MP,Yfo),e(F_,Kfo),e(F,Zfo),e(F,C_),e(C_,aee),e(aee,emo),e(C_,omo),e(C_,EP),e(EP,rmo),e(C_,tmo),e(F,amo),e(F,M_),e(M_,nee),e(nee,nmo),e(M_,smo),e(M_,yP),e(yP,lmo),e(M_,imo),e(F,dmo),e(F,E_),e(E_,see),e(see,cmo),e(E_,fmo),e(E_,wP),e(wP,mmo),e(E_,gmo),e(F,hmo),e(F,y_),e(y_,lee),e(lee,pmo),e(y_,_mo),e(y_,AP),e(AP,umo),e(y_,bmo),e(F,vmo),e(F,w_),e(w_,iee),e(iee,Tmo),e(w_,Fmo),e(w_,LP),e(LP,Cmo),e(w_,Mmo),e(F,Emo),e(F,A_),e(A_,dee),e(dee,ymo),e(A_,wmo),e(A_,BP),e(BP,Amo),e(A_,Lmo),e(F,Bmo),e(F,L_),e(L_,cee),e(cee,xmo),e(L_,kmo),e(L_,xP),e(xP,Rmo),e(L_,Smo),e(F,Pmo),e(F,B_),e(B_,fee),e(fee,$mo),e(B_,Imo),e(B_,kP),e(kP,jmo),e(B_,Dmo),e(F,Nmo),e(F,x_),e(x_,mee),e(mee,qmo),e(x_,Omo),e(x_,RP),e(RP,Gmo),e(x_,Xmo),e(F,Vmo),e(F,k_),e(k_,gee),e(gee,zmo),e(k_,Wmo),e(k_,SP),e(SP,Qmo),e(k_,Hmo),e(De,Umo),e(De,R_),e(R_,Jmo),e(R_,hee),e(hee,Ymo),e(R_,Kmo),e(R_,pee),e(pee,Zmo),e(De,ego),e(De,_ee),e(_ee,ogo),e(De,rgo),g(eE,De,null),b(d,Nke,u),b(d,ld,u),e(ld,S_),e(S_,uee),g(oE,uee,null),e(ld,tgo),e(ld,bee),e(bee,ago),b(d,qke,u),b(d,Ko,u),g(rE,Ko,null),e(Ko,ngo),e(Ko,id),e(id,sgo),e(id,vee),e(vee,lgo),e(id,igo),e(id,Tee),e(Tee,dgo),e(id,cgo),e(Ko,fgo),e(Ko,tE),e(tE,mgo),e(tE,Fee),e(Fee,ggo),e(tE,hgo),e(Ko,pgo),e(Ko,Qr),g(aE,Qr,null),e(Qr,_go),e(Qr,Cee),e(Cee,ugo),e(Qr,bgo),e(Qr,dd),e(dd,vgo),e(dd,Mee),e(Mee,Tgo),e(dd,Fgo),e(dd,Eee),e(Eee,Cgo),e(dd,Mgo),e(Qr,Ego),e(Qr,yee),e(yee,ygo),e(Qr,wgo),g(nE,Qr,null),e(Ko,Ago),e(Ko,Ne),g(sE,Ne,null),e(Ne,Lgo),e(Ne,wee),e(wee,Bgo),e(Ne,xgo),e(Ne,Ua),e(Ua,kgo),e(Ua,Aee),e(Aee,Rgo),e(Ua,Sgo),e(Ua,Lee),e(Lee,Pgo),e(Ua,$go),e(Ua,Bee),e(Bee,Igo),e(Ua,jgo),e(Ne,Dgo),e(Ne,k),e(k,P_),e(P_,xee),e(xee,Ngo),e(P_,qgo),e(P_,PP),e(PP,Ogo),e(P_,Ggo),e(k,Xgo),e(k,$_),e($_,kee),e(kee,Vgo),e($_,zgo),e($_,$P),e($P,Wgo),e($_,Qgo),e(k,Hgo),e(k,I_),e(I_,Ree),e(Ree,Ugo),e(I_,Jgo),e(I_,IP),e(IP,Ygo),e(I_,Kgo),e(k,Zgo),e(k,j_),e(j_,See),e(See,eho),e(j_,oho),e(j_,jP),e(jP,rho),e(j_,tho),e(k,aho),e(k,D_),e(D_,Pee),e(Pee,nho),e(D_,sho),e(D_,DP),e(DP,lho),e(D_,iho),e(k,dho),e(k,N_),e(N_,$ee),e($ee,cho),e(N_,fho),e(N_,NP),e(NP,mho),e(N_,gho),e(k,hho),e(k,q_),e(q_,Iee),e(Iee,pho),e(q_,_ho),e(q_,qP),e(qP,uho),e(q_,bho),e(k,vho),e(k,O_),e(O_,jee),e(jee,Tho),e(O_,Fho),e(O_,OP),e(OP,Cho),e(O_,Mho),e(k,Eho),e(k,G_),e(G_,Dee),e(Dee,yho),e(G_,who),e(G_,GP),e(GP,Aho),e(G_,Lho),e(k,Bho),e(k,X_),e(X_,Nee),e(Nee,xho),e(X_,kho),e(X_,XP),e(XP,Rho),e(X_,Sho),e(k,Pho),e(k,V_),e(V_,qee),e(qee,$ho),e(V_,Iho),e(V_,VP),e(VP,jho),e(V_,Dho),e(k,Nho),e(k,z_),e(z_,Oee),e(Oee,qho),e(z_,Oho),e(z_,zP),e(zP,Gho),e(z_,Xho),e(k,Vho),e(k,W_),e(W_,Gee),e(Gee,zho),e(W_,Who),e(W_,WP),e(WP,Qho),e(W_,Hho),e(k,Uho),e(k,Q_),e(Q_,Xee),e(Xee,Jho),e(Q_,Yho),e(Q_,QP),e(QP,Kho),e(Q_,Zho),e(k,epo),e(k,H_),e(H_,Vee),e(Vee,opo),e(H_,rpo),e(H_,HP),e(HP,tpo),e(H_,apo),e(k,npo),e(k,U_),e(U_,zee),e(zee,spo),e(U_,lpo),e(U_,UP),e(UP,ipo),e(U_,dpo),e(k,cpo),e(k,J_),e(J_,Wee),e(Wee,fpo),e(J_,mpo),e(J_,JP),e(JP,gpo),e(J_,hpo),e(k,ppo),e(k,Y_),e(Y_,Qee),e(Qee,_po),e(Y_,upo),e(Y_,YP),e(YP,bpo),e(Y_,vpo),e(k,Tpo),e(k,K_),e(K_,Hee),e(Hee,Fpo),e(K_,Cpo),e(K_,KP),e(KP,Mpo),e(K_,Epo),e(k,ypo),e(k,Z_),e(Z_,Uee),e(Uee,wpo),e(Z_,Apo),e(Z_,ZP),e(ZP,Lpo),e(Z_,Bpo),e(k,xpo),e(k,eu),e(eu,Jee),e(Jee,kpo),e(eu,Rpo),e(eu,e$),e(e$,Spo),e(eu,Ppo),e(k,$po),e(k,ou),e(ou,Yee),e(Yee,Ipo),e(ou,jpo),e(ou,o$),e(o$,Dpo),e(ou,Npo),e(k,qpo),e(k,ru),e(ru,Kee),e(Kee,Opo),e(ru,Gpo),e(ru,r$),e(r$,Xpo),e(ru,Vpo),e(k,zpo),e(k,tu),e(tu,Zee),e(Zee,Wpo),e(tu,Qpo),e(tu,t$),e(t$,Hpo),e(tu,Upo),e(k,Jpo),e(k,au),e(au,eoe),e(eoe,Ypo),e(au,Kpo),e(au,a$),e(a$,Zpo),e(au,e_o),e(k,o_o),e(k,nu),e(nu,ooe),e(ooe,r_o),e(nu,t_o),e(nu,n$),e(n$,a_o),e(nu,n_o),e(k,s_o),e(k,su),e(su,roe),e(roe,l_o),e(su,i_o),e(su,s$),e(s$,d_o),e(su,c_o),e(k,f_o),e(k,lu),e(lu,toe),e(toe,m_o),e(lu,g_o),e(lu,l$),e(l$,h_o),e(lu,p_o),e(k,__o),e(k,iu),e(iu,aoe),e(aoe,u_o),e(iu,b_o),e(iu,i$),e(i$,v_o),e(iu,T_o),e(k,F_o),e(k,du),e(du,noe),e(noe,C_o),e(du,M_o),e(du,d$),e(d$,E_o),e(du,y_o),e(k,w_o),e(k,cu),e(cu,soe),e(soe,A_o),e(cu,L_o),e(cu,c$),e(c$,B_o),e(cu,x_o),e(k,k_o),e(k,fu),e(fu,loe),e(loe,R_o),e(fu,S_o),e(fu,f$),e(f$,P_o),e(fu,$_o),e(k,I_o),e(k,mu),e(mu,ioe),e(ioe,j_o),e(mu,D_o),e(mu,m$),e(m$,N_o),e(mu,q_o),e(k,O_o),e(k,gu),e(gu,doe),e(doe,G_o),e(gu,X_o),e(gu,g$),e(g$,V_o),e(gu,z_o),e(k,W_o),e(k,hu),e(hu,coe),e(coe,Q_o),e(hu,H_o),e(hu,h$),e(h$,U_o),e(hu,J_o),e(k,Y_o),e(k,pu),e(pu,foe),e(foe,K_o),e(pu,Z_o),e(pu,p$),e(p$,euo),e(pu,ouo),e(k,ruo),e(k,_u),e(_u,moe),e(moe,tuo),e(_u,auo),e(_u,_$),e(_$,nuo),e(_u,suo),e(k,luo),e(k,uu),e(uu,goe),e(goe,iuo),e(uu,duo),e(uu,u$),e(u$,cuo),e(uu,fuo),e(k,muo),e(k,bu),e(bu,hoe),e(hoe,guo),e(bu,huo),e(bu,b$),e(b$,puo),e(bu,_uo),e(Ne,uuo),e(Ne,vu),e(vu,buo),e(vu,poe),e(poe,vuo),e(vu,Tuo),e(vu,_oe),e(_oe,Fuo),e(Ne,Cuo),e(Ne,uoe),e(uoe,Muo),e(Ne,Euo),g(lE,Ne,null),b(d,Oke,u),b(d,cd,u),e(cd,Tu),e(Tu,boe),g(iE,boe,null),e(cd,yuo),e(cd,voe),e(voe,wuo),b(d,Gke,u),b(d,Zo,u),g(dE,Zo,null),e(Zo,Auo),e(Zo,fd),e(fd,Luo),e(fd,Toe),e(Toe,Buo),e(fd,xuo),e(fd,Foe),e(Foe,kuo),e(fd,Ruo),e(Zo,Suo),e(Zo,cE),e(cE,Puo),e(cE,Coe),e(Coe,$uo),e(cE,Iuo),e(Zo,juo),e(Zo,Hr),g(fE,Hr,null),e(Hr,Duo),e(Hr,Moe),e(Moe,Nuo),e(Hr,quo),e(Hr,md),e(md,Ouo),e(md,Eoe),e(Eoe,Guo),e(md,Xuo),e(md,yoe),e(yoe,Vuo),e(md,zuo),e(Hr,Wuo),e(Hr,woe),e(woe,Quo),e(Hr,Huo),g(mE,Hr,null),e(Zo,Uuo),e(Zo,qe),g(gE,qe,null),e(qe,Juo),e(qe,Aoe),e(Aoe,Yuo),e(qe,Kuo),e(qe,Ja),e(Ja,Zuo),e(Ja,Loe),e(Loe,e1o),e(Ja,o1o),e(Ja,Boe),e(Boe,r1o),e(Ja,t1o),e(Ja,xoe),e(xoe,a1o),e(Ja,n1o),e(qe,s1o),e(qe,$),e($,Fu),e(Fu,koe),e(koe,l1o),e(Fu,i1o),e(Fu,v$),e(v$,d1o),e(Fu,c1o),e($,f1o),e($,Cu),e(Cu,Roe),e(Roe,m1o),e(Cu,g1o),e(Cu,T$),e(T$,h1o),e(Cu,p1o),e($,_1o),e($,Mu),e(Mu,Soe),e(Soe,u1o),e(Mu,b1o),e(Mu,F$),e(F$,v1o),e(Mu,T1o),e($,F1o),e($,Eu),e(Eu,Poe),e(Poe,C1o),e(Eu,M1o),e(Eu,C$),e(C$,E1o),e(Eu,y1o),e($,w1o),e($,yu),e(yu,$oe),e($oe,A1o),e(yu,L1o),e(yu,M$),e(M$,B1o),e(yu,x1o),e($,k1o),e($,wu),e(wu,Ioe),e(Ioe,R1o),e(wu,S1o),e(wu,E$),e(E$,P1o),e(wu,$1o),e($,I1o),e($,Au),e(Au,joe),e(joe,j1o),e(Au,D1o),e(Au,y$),e(y$,N1o),e(Au,q1o),e($,O1o),e($,Lu),e(Lu,Doe),e(Doe,G1o),e(Lu,X1o),e(Lu,w$),e(w$,V1o),e(Lu,z1o),e($,W1o),e($,Bu),e(Bu,Noe),e(Noe,Q1o),e(Bu,H1o),e(Bu,A$),e(A$,U1o),e(Bu,J1o),e($,Y1o),e($,xu),e(xu,qoe),e(qoe,K1o),e(xu,Z1o),e(xu,L$),e(L$,ebo),e(xu,obo),e($,rbo),e($,ku),e(ku,Ooe),e(Ooe,tbo),e(ku,abo),e(ku,B$),e(B$,nbo),e(ku,sbo),e($,lbo),e($,Ru),e(Ru,Goe),e(Goe,ibo),e(Ru,dbo),e(Ru,x$),e(x$,cbo),e(Ru,fbo),e($,mbo),e($,Su),e(Su,Xoe),e(Xoe,gbo),e(Su,hbo),e(Su,k$),e(k$,pbo),e(Su,_bo),e($,ubo),e($,Pu),e(Pu,Voe),e(Voe,bbo),e(Pu,vbo),e(Pu,R$),e(R$,Tbo),e(Pu,Fbo),e($,Cbo),e($,$u),e($u,zoe),e(zoe,Mbo),e($u,Ebo),e($u,S$),e(S$,ybo),e($u,wbo),e($,Abo),e($,Iu),e(Iu,Woe),e(Woe,Lbo),e(Iu,Bbo),e(Iu,P$),e(P$,xbo),e(Iu,kbo),e($,Rbo),e($,ju),e(ju,Qoe),e(Qoe,Sbo),e(ju,Pbo),e(ju,$$),e($$,$bo),e(ju,Ibo),e($,jbo),e($,Du),e(Du,Hoe),e(Hoe,Dbo),e(Du,Nbo),e(Du,I$),e(I$,qbo),e(Du,Obo),e($,Gbo),e($,Nu),e(Nu,Uoe),e(Uoe,Xbo),e(Nu,Vbo),e(Nu,j$),e(j$,zbo),e(Nu,Wbo),e($,Qbo),e($,qu),e(qu,Joe),e(Joe,Hbo),e(qu,Ubo),e(qu,D$),e(D$,Jbo),e(qu,Ybo),e($,Kbo),e($,Ou),e(Ou,Yoe),e(Yoe,Zbo),e(Ou,e5o),e(Ou,N$),e(N$,o5o),e(Ou,r5o),e($,t5o),e($,Gu),e(Gu,Koe),e(Koe,a5o),e(Gu,n5o),e(Gu,q$),e(q$,s5o),e(Gu,l5o),e($,i5o),e($,Xu),e(Xu,Zoe),e(Zoe,d5o),e(Xu,c5o),e(Xu,O$),e(O$,f5o),e(Xu,m5o),e($,g5o),e($,Vu),e(Vu,ere),e(ere,h5o),e(Vu,p5o),e(Vu,G$),e(G$,_5o),e(Vu,u5o),e($,b5o),e($,zu),e(zu,ore),e(ore,v5o),e(zu,T5o),e(zu,X$),e(X$,F5o),e(zu,C5o),e($,M5o),e($,Wu),e(Wu,rre),e(rre,E5o),e(Wu,y5o),e(Wu,V$),e(V$,w5o),e(Wu,A5o),e($,L5o),e($,Qu),e(Qu,tre),e(tre,B5o),e(Qu,x5o),e(Qu,z$),e(z$,k5o),e(Qu,R5o),e($,S5o),e($,Hu),e(Hu,are),e(are,P5o),e(Hu,$5o),e(Hu,W$),e(W$,I5o),e(Hu,j5o),e($,D5o),e($,Uu),e(Uu,nre),e(nre,N5o),e(Uu,q5o),e(Uu,Q$),e(Q$,O5o),e(Uu,G5o),e($,X5o),e($,Ju),e(Ju,sre),e(sre,V5o),e(Ju,z5o),e(Ju,H$),e(H$,W5o),e(Ju,Q5o),e($,H5o),e($,Yu),e(Yu,lre),e(lre,U5o),e(Yu,J5o),e(Yu,U$),e(U$,Y5o),e(Yu,K5o),e($,Z5o),e($,Ku),e(Ku,ire),e(ire,e2o),e(Ku,o2o),e(Ku,J$),e(J$,r2o),e(Ku,t2o),e($,a2o),e($,Zu),e(Zu,dre),e(dre,n2o),e(Zu,s2o),e(Zu,Y$),e(Y$,l2o),e(Zu,i2o),e($,d2o),e($,e1),e(e1,cre),e(cre,c2o),e(e1,f2o),e(e1,K$),e(K$,m2o),e(e1,g2o),e($,h2o),e($,o1),e(o1,fre),e(fre,p2o),e(o1,_2o),e(o1,Z$),e(Z$,u2o),e(o1,b2o),e(qe,v2o),e(qe,r1),e(r1,T2o),e(r1,mre),e(mre,F2o),e(r1,C2o),e(r1,gre),e(gre,M2o),e(qe,E2o),e(qe,hre),e(hre,y2o),e(qe,w2o),g(hE,qe,null),b(d,Xke,u),b(d,gd,u),e(gd,t1),e(t1,pre),g(pE,pre,null),e(gd,A2o),e(gd,_re),e(_re,L2o),b(d,Vke,u),b(d,er,u),g(_E,er,null),e(er,B2o),e(er,hd),e(hd,x2o),e(hd,ure),e(ure,k2o),e(hd,R2o),e(hd,bre),e(bre,S2o),e(hd,P2o),e(er,$2o),e(er,uE),e(uE,I2o),e(uE,vre),e(vre,j2o),e(uE,D2o),e(er,N2o),e(er,Ur),g(bE,Ur,null),e(Ur,q2o),e(Ur,Tre),e(Tre,O2o),e(Ur,G2o),e(Ur,pd),e(pd,X2o),e(pd,Fre),e(Fre,V2o),e(pd,z2o),e(pd,Cre),e(Cre,W2o),e(pd,Q2o),e(Ur,H2o),e(Ur,Mre),e(Mre,U2o),e(Ur,J2o),g(vE,Ur,null),e(er,Y2o),e(er,Oe),g(TE,Oe,null),e(Oe,K2o),e(Oe,Ere),e(Ere,Z2o),e(Oe,evo),e(Oe,Ya),e(Ya,ovo),e(Ya,yre),e(yre,rvo),e(Ya,tvo),e(Ya,wre),e(wre,avo),e(Ya,nvo),e(Ya,Are),e(Are,svo),e(Ya,lvo),e(Oe,ivo),e(Oe,I),e(I,a1),e(a1,Lre),e(Lre,dvo),e(a1,cvo),e(a1,eI),e(eI,fvo),e(a1,mvo),e(I,gvo),e(I,n1),e(n1,Bre),e(Bre,hvo),e(n1,pvo),e(n1,oI),e(oI,_vo),e(n1,uvo),e(I,bvo),e(I,s1),e(s1,xre),e(xre,vvo),e(s1,Tvo),e(s1,rI),e(rI,Fvo),e(s1,Cvo),e(I,Mvo),e(I,l1),e(l1,kre),e(kre,Evo),e(l1,yvo),e(l1,tI),e(tI,wvo),e(l1,Avo),e(I,Lvo),e(I,i1),e(i1,Rre),e(Rre,Bvo),e(i1,xvo),e(i1,aI),e(aI,kvo),e(i1,Rvo),e(I,Svo),e(I,d1),e(d1,Sre),e(Sre,Pvo),e(d1,$vo),e(d1,nI),e(nI,Ivo),e(d1,jvo),e(I,Dvo),e(I,c1),e(c1,Pre),e(Pre,Nvo),e(c1,qvo),e(c1,sI),e(sI,Ovo),e(c1,Gvo),e(I,Xvo),e(I,f1),e(f1,$re),e($re,Vvo),e(f1,zvo),e(f1,lI),e(lI,Wvo),e(f1,Qvo),e(I,Hvo),e(I,m1),e(m1,Ire),e(Ire,Uvo),e(m1,Jvo),e(m1,iI),e(iI,Yvo),e(m1,Kvo),e(I,Zvo),e(I,g1),e(g1,jre),e(jre,e6o),e(g1,o6o),e(g1,dI),e(dI,r6o),e(g1,t6o),e(I,a6o),e(I,h1),e(h1,Dre),e(Dre,n6o),e(h1,s6o),e(h1,cI),e(cI,l6o),e(h1,i6o),e(I,d6o),e(I,p1),e(p1,Nre),e(Nre,c6o),e(p1,f6o),e(p1,fI),e(fI,m6o),e(p1,g6o),e(I,h6o),e(I,_1),e(_1,qre),e(qre,p6o),e(_1,_6o),e(_1,mI),e(mI,u6o),e(_1,b6o),e(I,v6o),e(I,u1),e(u1,Ore),e(Ore,T6o),e(u1,F6o),e(u1,gI),e(gI,C6o),e(u1,M6o),e(I,E6o),e(I,b1),e(b1,Gre),e(Gre,y6o),e(b1,w6o),e(b1,hI),e(hI,A6o),e(b1,L6o),e(I,B6o),e(I,v1),e(v1,Xre),e(Xre,x6o),e(v1,k6o),e(v1,pI),e(pI,R6o),e(v1,S6o),e(I,P6o),e(I,T1),e(T1,Vre),e(Vre,$6o),e(T1,I6o),e(T1,_I),e(_I,j6o),e(T1,D6o),e(I,N6o),e(I,F1),e(F1,zre),e(zre,q6o),e(F1,O6o),e(F1,uI),e(uI,G6o),e(F1,X6o),e(I,V6o),e(I,C1),e(C1,Wre),e(Wre,z6o),e(C1,W6o),e(C1,bI),e(bI,Q6o),e(C1,H6o),e(I,U6o),e(I,M1),e(M1,Qre),e(Qre,J6o),e(M1,Y6o),e(M1,vI),e(vI,K6o),e(M1,Z6o),e(I,e0o),e(I,E1),e(E1,Hre),e(Hre,o0o),e(E1,r0o),e(E1,TI),e(TI,t0o),e(E1,a0o),e(I,n0o),e(I,y1),e(y1,Ure),e(Ure,s0o),e(y1,l0o),e(y1,FI),e(FI,i0o),e(y1,d0o),e(I,c0o),e(I,w1),e(w1,Jre),e(Jre,f0o),e(w1,m0o),e(w1,CI),e(CI,g0o),e(w1,h0o),e(I,p0o),e(I,A1),e(A1,Yre),e(Yre,_0o),e(A1,u0o),e(A1,MI),e(MI,b0o),e(A1,v0o),e(I,T0o),e(I,L1),e(L1,Kre),e(Kre,F0o),e(L1,C0o),e(L1,EI),e(EI,M0o),e(L1,E0o),e(I,y0o),e(I,B1),e(B1,Zre),e(Zre,w0o),e(B1,A0o),e(B1,yI),e(yI,L0o),e(B1,B0o),e(I,x0o),e(I,x1),e(x1,ete),e(ete,k0o),e(x1,R0o),e(x1,wI),e(wI,S0o),e(x1,P0o),e(I,$0o),e(I,k1),e(k1,ote),e(ote,I0o),e(k1,j0o),e(k1,AI),e(AI,D0o),e(k1,N0o),e(I,q0o),e(I,R1),e(R1,rte),e(rte,O0o),e(R1,G0o),e(R1,LI),e(LI,X0o),e(R1,V0o),e(I,z0o),e(I,S1),e(S1,tte),e(tte,W0o),e(S1,Q0o),e(S1,BI),e(BI,H0o),e(S1,U0o),e(I,J0o),e(I,P1),e(P1,ate),e(ate,Y0o),e(P1,K0o),e(P1,nte),e(nte,Z0o),e(P1,eTo),e(I,oTo),e(I,$1),e($1,ste),e(ste,rTo),e($1,tTo),e($1,xI),e(xI,aTo),e($1,nTo),e(I,sTo),e(I,I1),e(I1,lte),e(lte,lTo),e(I1,iTo),e(I1,kI),e(kI,dTo),e(I1,cTo),e(I,fTo),e(I,j1),e(j1,ite),e(ite,mTo),e(j1,gTo),e(j1,RI),e(RI,hTo),e(j1,pTo),e(I,_To),e(I,D1),e(D1,dte),e(dte,uTo),e(D1,bTo),e(D1,SI),e(SI,vTo),e(D1,TTo),e(Oe,FTo),e(Oe,N1),e(N1,CTo),e(N1,cte),e(cte,MTo),e(N1,ETo),e(N1,fte),e(fte,yTo),e(Oe,wTo),e(Oe,mte),e(mte,ATo),e(Oe,LTo),g(FE,Oe,null),b(d,zke,u),b(d,_d,u),e(_d,q1),e(q1,gte),g(CE,gte,null),e(_d,BTo),e(_d,hte),e(hte,xTo),b(d,Wke,u),b(d,or,u),g(ME,or,null),e(or,kTo),e(or,ud),e(ud,RTo),e(ud,pte),e(pte,STo),e(ud,PTo),e(ud,_te),e(_te,$To),e(ud,ITo),e(or,jTo),e(or,EE),e(EE,DTo),e(EE,ute),e(ute,NTo),e(EE,qTo),e(or,OTo),e(or,Jr),g(yE,Jr,null),e(Jr,GTo),e(Jr,bte),e(bte,XTo),e(Jr,VTo),e(Jr,bd),e(bd,zTo),e(bd,vte),e(vte,WTo),e(bd,QTo),e(bd,Tte),e(Tte,HTo),e(bd,UTo),e(Jr,JTo),e(Jr,Fte),e(Fte,YTo),e(Jr,KTo),g(wE,Jr,null),e(or,ZTo),e(or,Ge),g(AE,Ge,null),e(Ge,e8o),e(Ge,Cte),e(Cte,o8o),e(Ge,r8o),e(Ge,Ka),e(Ka,t8o),e(Ka,Mte),e(Mte,a8o),e(Ka,n8o),e(Ka,Ete),e(Ete,s8o),e(Ka,l8o),e(Ka,yte),e(yte,i8o),e(Ka,d8o),e(Ge,c8o),e(Ge,se),e(se,O1),e(O1,wte),e(wte,f8o),e(O1,m8o),e(O1,PI),e(PI,g8o),e(O1,h8o),e(se,p8o),e(se,G1),e(G1,Ate),e(Ate,_8o),e(G1,u8o),e(G1,$I),e($I,b8o),e(G1,v8o),e(se,T8o),e(se,X1),e(X1,Lte),e(Lte,F8o),e(X1,C8o),e(X1,II),e(II,M8o),e(X1,E8o),e(se,y8o),e(se,V1),e(V1,Bte),e(Bte,w8o),e(V1,A8o),e(V1,jI),e(jI,L8o),e(V1,B8o),e(se,x8o),e(se,z1),e(z1,xte),e(xte,k8o),e(z1,R8o),e(z1,DI),e(DI,S8o),e(z1,P8o),e(se,$8o),e(se,W1),e(W1,kte),e(kte,I8o),e(W1,j8o),e(W1,NI),e(NI,D8o),e(W1,N8o),e(se,q8o),e(se,Q1),e(Q1,Rte),e(Rte,O8o),e(Q1,G8o),e(Q1,qI),e(qI,X8o),e(Q1,V8o),e(se,z8o),e(se,H1),e(H1,Ste),e(Ste,W8o),e(H1,Q8o),e(H1,OI),e(OI,H8o),e(H1,U8o),e(se,J8o),e(se,U1),e(U1,Pte),e(Pte,Y8o),e(U1,K8o),e(U1,GI),e(GI,Z8o),e(U1,eFo),e(se,oFo),e(se,J1),e(J1,$te),e($te,rFo),e(J1,tFo),e(J1,XI),e(XI,aFo),e(J1,nFo),e(se,sFo),e(se,Y1),e(Y1,Ite),e(Ite,lFo),e(Y1,iFo),e(Y1,VI),e(VI,dFo),e(Y1,cFo),e(se,fFo),e(se,K1),e(K1,jte),e(jte,mFo),e(K1,gFo),e(K1,zI),e(zI,hFo),e(K1,pFo),e(se,_Fo),e(se,Z1),e(Z1,Dte),e(Dte,uFo),e(Z1,bFo),e(Z1,WI),e(WI,vFo),e(Z1,TFo),e(se,FFo),e(se,eb),e(eb,Nte),e(Nte,CFo),e(eb,MFo),e(eb,QI),e(QI,EFo),e(eb,yFo),e(se,wFo),e(se,ob),e(ob,qte),e(qte,AFo),e(ob,LFo),e(ob,HI),e(HI,BFo),e(ob,xFo),e(se,kFo),e(se,rb),e(rb,Ote),e(Ote,RFo),e(rb,SFo),e(rb,UI),e(UI,PFo),e(rb,$Fo),e(Ge,IFo),e(Ge,tb),e(tb,jFo),e(tb,Gte),e(Gte,DFo),e(tb,NFo),e(tb,Xte),e(Xte,qFo),e(Ge,OFo),e(Ge,Vte),e(Vte,GFo),e(Ge,XFo),g(LE,Ge,null),b(d,Qke,u),b(d,vd,u),e(vd,ab),e(ab,zte),g(BE,zte,null),e(vd,VFo),e(vd,Wte),e(Wte,zFo),b(d,Hke,u),b(d,rr,u),g(xE,rr,null),e(rr,WFo),e(rr,Td),e(Td,QFo),e(Td,Qte),e(Qte,HFo),e(Td,UFo),e(Td,Hte),e(Hte,JFo),e(Td,YFo),e(rr,KFo),e(rr,kE),e(kE,ZFo),e(kE,Ute),e(Ute,eCo),e(kE,oCo),e(rr,rCo),e(rr,Yr),g(RE,Yr,null),e(Yr,tCo),e(Yr,Jte),e(Jte,aCo),e(Yr,nCo),e(Yr,Fd),e(Fd,sCo),e(Fd,Yte),e(Yte,lCo),e(Fd,iCo),e(Fd,Kte),e(Kte,dCo),e(Fd,cCo),e(Yr,fCo),e(Yr,Zte),e(Zte,mCo),e(Yr,gCo),g(SE,Yr,null),e(rr,hCo),e(rr,Xe),g(PE,Xe,null),e(Xe,pCo),e(Xe,eae),e(eae,_Co),e(Xe,uCo),e(Xe,Za),e(Za,bCo),e(Za,oae),e(oae,vCo),e(Za,TCo),e(Za,rae),e(rae,FCo),e(Za,CCo),e(Za,tae),e(tae,MCo),e(Za,ECo),e(Xe,yCo),e(Xe,A),e(A,nb),e(nb,aae),e(aae,wCo),e(nb,ACo),e(nb,JI),e(JI,LCo),e(nb,BCo),e(A,xCo),e(A,sb),e(sb,nae),e(nae,kCo),e(sb,RCo),e(sb,YI),e(YI,SCo),e(sb,PCo),e(A,$Co),e(A,lb),e(lb,sae),e(sae,ICo),e(lb,jCo),e(lb,KI),e(KI,DCo),e(lb,NCo),e(A,qCo),e(A,ib),e(ib,lae),e(lae,OCo),e(ib,GCo),e(ib,ZI),e(ZI,XCo),e(ib,VCo),e(A,zCo),e(A,db),e(db,iae),e(iae,WCo),e(db,QCo),e(db,ej),e(ej,HCo),e(db,UCo),e(A,JCo),e(A,cb),e(cb,dae),e(dae,YCo),e(cb,KCo),e(cb,oj),e(oj,ZCo),e(cb,eMo),e(A,oMo),e(A,fb),e(fb,cae),e(cae,rMo),e(fb,tMo),e(fb,rj),e(rj,aMo),e(fb,nMo),e(A,sMo),e(A,mb),e(mb,fae),e(fae,lMo),e(mb,iMo),e(mb,tj),e(tj,dMo),e(mb,cMo),e(A,fMo),e(A,gb),e(gb,mae),e(mae,mMo),e(gb,gMo),e(gb,aj),e(aj,hMo),e(gb,pMo),e(A,_Mo),e(A,hb),e(hb,gae),e(gae,uMo),e(hb,bMo),e(hb,nj),e(nj,vMo),e(hb,TMo),e(A,FMo),e(A,pb),e(pb,hae),e(hae,CMo),e(pb,MMo),e(pb,sj),e(sj,EMo),e(pb,yMo),e(A,wMo),e(A,_b),e(_b,pae),e(pae,AMo),e(_b,LMo),e(_b,lj),e(lj,BMo),e(_b,xMo),e(A,kMo),e(A,ub),e(ub,_ae),e(_ae,RMo),e(ub,SMo),e(ub,ij),e(ij,PMo),e(ub,$Mo),e(A,IMo),e(A,bb),e(bb,uae),e(uae,jMo),e(bb,DMo),e(bb,dj),e(dj,NMo),e(bb,qMo),e(A,OMo),e(A,vb),e(vb,bae),e(bae,GMo),e(vb,XMo),e(vb,cj),e(cj,VMo),e(vb,zMo),e(A,WMo),e(A,Tb),e(Tb,vae),e(vae,QMo),e(Tb,HMo),e(Tb,fj),e(fj,UMo),e(Tb,JMo),e(A,YMo),e(A,Fb),e(Fb,Tae),e(Tae,KMo),e(Fb,ZMo),e(Fb,mj),e(mj,e4o),e(Fb,o4o),e(A,r4o),e(A,Cb),e(Cb,Fae),e(Fae,t4o),e(Cb,a4o),e(Cb,gj),e(gj,n4o),e(Cb,s4o),e(A,l4o),e(A,Mb),e(Mb,Cae),e(Cae,i4o),e(Mb,d4o),e(Mb,hj),e(hj,c4o),e(Mb,f4o),e(A,m4o),e(A,Eb),e(Eb,Mae),e(Mae,g4o),e(Eb,h4o),e(Eb,pj),e(pj,p4o),e(Eb,_4o),e(A,u4o),e(A,yb),e(yb,Eae),e(Eae,b4o),e(yb,v4o),e(yb,_j),e(_j,T4o),e(yb,F4o),e(A,C4o),e(A,wb),e(wb,yae),e(yae,M4o),e(wb,E4o),e(wb,uj),e(uj,y4o),e(wb,w4o),e(A,A4o),e(A,Ab),e(Ab,wae),e(wae,L4o),e(Ab,B4o),e(Ab,bj),e(bj,x4o),e(Ab,k4o),e(A,R4o),e(A,Lb),e(Lb,Aae),e(Aae,S4o),e(Lb,P4o),e(Lb,vj),e(vj,$4o),e(Lb,I4o),e(A,j4o),e(A,Bb),e(Bb,Lae),e(Lae,D4o),e(Bb,N4o),e(Bb,Tj),e(Tj,q4o),e(Bb,O4o),e(A,G4o),e(A,xb),e(xb,Bae),e(Bae,X4o),e(xb,V4o),e(xb,Fj),e(Fj,z4o),e(xb,W4o),e(A,Q4o),e(A,kb),e(kb,xae),e(xae,H4o),e(kb,U4o),e(kb,Cj),e(Cj,J4o),e(kb,Y4o),e(A,K4o),e(A,Rb),e(Rb,kae),e(kae,Z4o),e(Rb,eEo),e(Rb,Mj),e(Mj,oEo),e(Rb,rEo),e(A,tEo),e(A,Sb),e(Sb,Rae),e(Rae,aEo),e(Sb,nEo),e(Sb,Ej),e(Ej,sEo),e(Sb,lEo),e(A,iEo),e(A,Pb),e(Pb,Sae),e(Sae,dEo),e(Pb,cEo),e(Pb,yj),e(yj,fEo),e(Pb,mEo),e(A,gEo),e(A,$b),e($b,Pae),e(Pae,hEo),e($b,pEo),e($b,wj),e(wj,_Eo),e($b,uEo),e(A,bEo),e(A,Ib),e(Ib,$ae),e($ae,vEo),e(Ib,TEo),e(Ib,Aj),e(Aj,FEo),e(Ib,CEo),e(A,MEo),e(A,jb),e(jb,Iae),e(Iae,EEo),e(jb,yEo),e(jb,Lj),e(Lj,wEo),e(jb,AEo),e(A,LEo),e(A,Db),e(Db,jae),e(jae,BEo),e(Db,xEo),e(Db,Bj),e(Bj,kEo),e(Db,REo),e(A,SEo),e(A,Nb),e(Nb,Dae),e(Dae,PEo),e(Nb,$Eo),e(Nb,xj),e(xj,IEo),e(Nb,jEo),e(A,DEo),e(A,qb),e(qb,Nae),e(Nae,NEo),e(qb,qEo),e(qb,kj),e(kj,OEo),e(qb,GEo),e(A,XEo),e(A,Ob),e(Ob,qae),e(qae,VEo),e(Ob,zEo),e(Ob,Rj),e(Rj,WEo),e(Ob,QEo),e(A,HEo),e(A,Gb),e(Gb,Oae),e(Oae,UEo),e(Gb,JEo),e(Gb,Sj),e(Sj,YEo),e(Gb,KEo),e(A,ZEo),e(A,Xb),e(Xb,Gae),e(Gae,e3o),e(Xb,o3o),e(Xb,Pj),e(Pj,r3o),e(Xb,t3o),e(A,a3o),e(A,Vb),e(Vb,Xae),e(Xae,n3o),e(Vb,s3o),e(Vb,$j),e($j,l3o),e(Vb,i3o),e(A,d3o),e(A,zb),e(zb,Vae),e(Vae,c3o),e(zb,f3o),e(zb,Ij),e(Ij,m3o),e(zb,g3o),e(A,h3o),e(A,Wb),e(Wb,zae),e(zae,p3o),e(Wb,_3o),e(Wb,jj),e(jj,u3o),e(Wb,b3o),e(A,v3o),e(A,Qb),e(Qb,Wae),e(Wae,T3o),e(Qb,F3o),e(Qb,Dj),e(Dj,C3o),e(Qb,M3o),e(A,E3o),e(A,Hb),e(Hb,Qae),e(Qae,y3o),e(Hb,w3o),e(Hb,Nj),e(Nj,A3o),e(Hb,L3o),e(A,B3o),e(A,Ub),e(Ub,Hae),e(Hae,x3o),e(Ub,k3o),e(Ub,qj),e(qj,R3o),e(Ub,S3o),e(A,P3o),e(A,Jb),e(Jb,Uae),e(Uae,$3o),e(Jb,I3o),e(Jb,Oj),e(Oj,j3o),e(Jb,D3o),e(Xe,N3o),e(Xe,Yb),e(Yb,q3o),e(Yb,Jae),e(Jae,O3o),e(Yb,G3o),e(Yb,Yae),e(Yae,X3o),e(Xe,V3o),e(Xe,Kae),e(Kae,z3o),e(Xe,W3o),g($E,Xe,null),b(d,Uke,u),b(d,Cd,u),e(Cd,Kb),e(Kb,Zae),g(IE,Zae,null),e(Cd,Q3o),e(Cd,ene),e(ene,H3o),b(d,Jke,u),b(d,tr,u),g(jE,tr,null),e(tr,U3o),e(tr,Md),e(Md,J3o),e(Md,one),e(one,Y3o),e(Md,K3o),e(Md,rne),e(rne,Z3o),e(Md,eyo),e(tr,oyo),e(tr,DE),e(DE,ryo),e(DE,tne),e(tne,tyo),e(DE,ayo),e(tr,nyo),e(tr,Kr),g(NE,Kr,null),e(Kr,syo),e(Kr,ane),e(ane,lyo),e(Kr,iyo),e(Kr,Ed),e(Ed,dyo),e(Ed,nne),e(nne,cyo),e(Ed,fyo),e(Ed,sne),e(sne,myo),e(Ed,gyo),e(Kr,hyo),e(Kr,lne),e(lne,pyo),e(Kr,_yo),g(qE,Kr,null),e(tr,uyo),e(tr,Ve),g(OE,Ve,null),e(Ve,byo),e(Ve,ine),e(ine,vyo),e(Ve,Tyo),e(Ve,en),e(en,Fyo),e(en,dne),e(dne,Cyo),e(en,Myo),e(en,cne),e(cne,Eyo),e(en,yyo),e(en,fne),e(fne,wyo),e(en,Ayo),e(Ve,Lyo),e(Ve,O),e(O,Zb),e(Zb,mne),e(mne,Byo),e(Zb,xyo),e(Zb,Gj),e(Gj,kyo),e(Zb,Ryo),e(O,Syo),e(O,e5),e(e5,gne),e(gne,Pyo),e(e5,$yo),e(e5,Xj),e(Xj,Iyo),e(e5,jyo),e(O,Dyo),e(O,o5),e(o5,hne),e(hne,Nyo),e(o5,qyo),e(o5,Vj),e(Vj,Oyo),e(o5,Gyo),e(O,Xyo),e(O,r5),e(r5,pne),e(pne,Vyo),e(r5,zyo),e(r5,zj),e(zj,Wyo),e(r5,Qyo),e(O,Hyo),e(O,t5),e(t5,_ne),e(_ne,Uyo),e(t5,Jyo),e(t5,Wj),e(Wj,Yyo),e(t5,Kyo),e(O,Zyo),e(O,a5),e(a5,une),e(une,ewo),e(a5,owo),e(a5,Qj),e(Qj,rwo),e(a5,two),e(O,awo),e(O,n5),e(n5,bne),e(bne,nwo),e(n5,swo),e(n5,Hj),e(Hj,lwo),e(n5,iwo),e(O,dwo),e(O,s5),e(s5,vne),e(vne,cwo),e(s5,fwo),e(s5,Uj),e(Uj,mwo),e(s5,gwo),e(O,hwo),e(O,l5),e(l5,Tne),e(Tne,pwo),e(l5,_wo),e(l5,Jj),e(Jj,uwo),e(l5,bwo),e(O,vwo),e(O,i5),e(i5,Fne),e(Fne,Two),e(i5,Fwo),e(i5,Yj),e(Yj,Cwo),e(i5,Mwo),e(O,Ewo),e(O,d5),e(d5,Cne),e(Cne,ywo),e(d5,wwo),e(d5,Kj),e(Kj,Awo),e(d5,Lwo),e(O,Bwo),e(O,c5),e(c5,Mne),e(Mne,xwo),e(c5,kwo),e(c5,Zj),e(Zj,Rwo),e(c5,Swo),e(O,Pwo),e(O,f5),e(f5,Ene),e(Ene,$wo),e(f5,Iwo),e(f5,eD),e(eD,jwo),e(f5,Dwo),e(O,Nwo),e(O,m5),e(m5,yne),e(yne,qwo),e(m5,Owo),e(m5,oD),e(oD,Gwo),e(m5,Xwo),e(O,Vwo),e(O,g5),e(g5,wne),e(wne,zwo),e(g5,Wwo),e(g5,rD),e(rD,Qwo),e(g5,Hwo),e(O,Uwo),e(O,h5),e(h5,Ane),e(Ane,Jwo),e(h5,Ywo),e(h5,tD),e(tD,Kwo),e(h5,Zwo),e(O,eAo),e(O,p5),e(p5,Lne),e(Lne,oAo),e(p5,rAo),e(p5,aD),e(aD,tAo),e(p5,aAo),e(O,nAo),e(O,_5),e(_5,Bne),e(Bne,sAo),e(_5,lAo),e(_5,nD),e(nD,iAo),e(_5,dAo),e(O,cAo),e(O,u5),e(u5,xne),e(xne,fAo),e(u5,mAo),e(u5,sD),e(sD,gAo),e(u5,hAo),e(O,pAo),e(O,b5),e(b5,kne),e(kne,_Ao),e(b5,uAo),e(b5,lD),e(lD,bAo),e(b5,vAo),e(O,TAo),e(O,v5),e(v5,Rne),e(Rne,FAo),e(v5,CAo),e(v5,iD),e(iD,MAo),e(v5,EAo),e(O,yAo),e(O,T5),e(T5,Sne),e(Sne,wAo),e(T5,AAo),e(T5,dD),e(dD,LAo),e(T5,BAo),e(O,xAo),e(O,F5),e(F5,Pne),e(Pne,kAo),e(F5,RAo),e(F5,cD),e(cD,SAo),e(F5,PAo),e(O,$Ao),e(O,C5),e(C5,$ne),e($ne,IAo),e(C5,jAo),e(C5,fD),e(fD,DAo),e(C5,NAo),e(O,qAo),e(O,M5),e(M5,Ine),e(Ine,OAo),e(M5,GAo),e(M5,mD),e(mD,XAo),e(M5,VAo),e(O,zAo),e(O,E5),e(E5,jne),e(jne,WAo),e(E5,QAo),e(E5,gD),e(gD,HAo),e(E5,UAo),e(O,JAo),e(O,y5),e(y5,Dne),e(Dne,YAo),e(y5,KAo),e(y5,hD),e(hD,ZAo),e(y5,eLo),e(O,oLo),e(O,w5),e(w5,Nne),e(Nne,rLo),e(w5,tLo),e(w5,pD),e(pD,aLo),e(w5,nLo),e(Ve,sLo),e(Ve,A5),e(A5,lLo),e(A5,qne),e(qne,iLo),e(A5,dLo),e(A5,One),e(One,cLo),e(Ve,fLo),e(Ve,Gne),e(Gne,mLo),e(Ve,gLo),g(GE,Ve,null),b(d,Yke,u),b(d,yd,u),e(yd,L5),e(L5,Xne),g(XE,Xne,null),e(yd,hLo),e(yd,Vne),e(Vne,pLo),b(d,Kke,u),b(d,ar,u),g(VE,ar,null),e(ar,_Lo),e(ar,wd),e(wd,uLo),e(wd,zne),e(zne,bLo),e(wd,vLo),e(wd,Wne),e(Wne,TLo),e(wd,FLo),e(ar,CLo),e(ar,zE),e(zE,MLo),e(zE,Qne),e(Qne,ELo),e(zE,yLo),e(ar,wLo),e(ar,Zr),g(WE,Zr,null),e(Zr,ALo),e(Zr,Hne),e(Hne,LLo),e(Zr,BLo),e(Zr,Ad),e(Ad,xLo),e(Ad,Une),e(Une,kLo),e(Ad,RLo),e(Ad,Jne),e(Jne,SLo),e(Ad,PLo),e(Zr,$Lo),e(Zr,Yne),e(Yne,ILo),e(Zr,jLo),g(QE,Zr,null),e(ar,DLo),e(ar,ze),g(HE,ze,null),e(ze,NLo),e(ze,Kne),e(Kne,qLo),e(ze,OLo),e(ze,on),e(on,GLo),e(on,Zne),e(Zne,XLo),e(on,VLo),e(on,ese),e(ese,zLo),e(on,WLo),e(on,ose),e(ose,QLo),e(on,HLo),e(ze,ULo),e(ze,ma),e(ma,B5),e(B5,rse),e(rse,JLo),e(B5,YLo),e(B5,_D),e(_D,KLo),e(B5,ZLo),e(ma,e7o),e(ma,x5),e(x5,tse),e(tse,o7o),e(x5,r7o),e(x5,uD),e(uD,t7o),e(x5,a7o),e(ma,n7o),e(ma,k5),e(k5,ase),e(ase,s7o),e(k5,l7o),e(k5,bD),e(bD,i7o),e(k5,d7o),e(ma,c7o),e(ma,R5),e(R5,nse),e(nse,f7o),e(R5,m7o),e(R5,vD),e(vD,g7o),e(R5,h7o),e(ma,p7o),e(ma,S5),e(S5,sse),e(sse,_7o),e(S5,u7o),e(S5,TD),e(TD,b7o),e(S5,v7o),e(ze,T7o),e(ze,P5),e(P5,F7o),e(P5,lse),e(lse,C7o),e(P5,M7o),e(P5,ise),e(ise,E7o),e(ze,y7o),e(ze,dse),e(dse,w7o),e(ze,A7o),g(UE,ze,null),b(d,Zke,u),b(d,Ld,u),e(Ld,$5),e($5,cse),g(JE,cse,null),e(Ld,L7o),e(Ld,fse),e(fse,B7o),b(d,eRe,u),b(d,nr,u),g(YE,nr,null),e(nr,x7o),e(nr,Bd),e(Bd,k7o),e(Bd,mse),e(mse,R7o),e(Bd,S7o),e(Bd,gse),e(gse,P7o),e(Bd,$7o),e(nr,I7o),e(nr,KE),e(KE,j7o),e(KE,hse),e(hse,D7o),e(KE,N7o),e(nr,q7o),e(nr,et),g(ZE,et,null),e(et,O7o),e(et,pse),e(pse,G7o),e(et,X7o),e(et,xd),e(xd,V7o),e(xd,_se),e(_se,z7o),e(xd,W7o),e(xd,use),e(use,Q7o),e(xd,H7o),e(et,U7o),e(et,bse),e(bse,J7o),e(et,Y7o),g(e3,et,null),e(nr,K7o),e(nr,We),g(o3,We,null),e(We,Z7o),e(We,vse),e(vse,e9o),e(We,o9o),e(We,rn),e(rn,r9o),e(rn,Tse),e(Tse,t9o),e(rn,a9o),e(rn,Fse),e(Fse,n9o),e(rn,s9o),e(rn,Cse),e(Cse,l9o),e(rn,i9o),e(We,d9o),e(We,N),e(N,I5),e(I5,Mse),e(Mse,c9o),e(I5,f9o),e(I5,FD),e(FD,m9o),e(I5,g9o),e(N,h9o),e(N,j5),e(j5,Ese),e(Ese,p9o),e(j5,_9o),e(j5,CD),e(CD,u9o),e(j5,b9o),e(N,v9o),e(N,D5),e(D5,yse),e(yse,T9o),e(D5,F9o),e(D5,MD),e(MD,C9o),e(D5,M9o),e(N,E9o),e(N,N5),e(N5,wse),e(wse,y9o),e(N5,w9o),e(N5,ED),e(ED,A9o),e(N5,L9o),e(N,B9o),e(N,q5),e(q5,Ase),e(Ase,x9o),e(q5,k9o),e(q5,yD),e(yD,R9o),e(q5,S9o),e(N,P9o),e(N,O5),e(O5,Lse),e(Lse,$9o),e(O5,I9o),e(O5,wD),e(wD,j9o),e(O5,D9o),e(N,N9o),e(N,G5),e(G5,Bse),e(Bse,q9o),e(G5,O9o),e(G5,AD),e(AD,G9o),e(G5,X9o),e(N,V9o),e(N,X5),e(X5,xse),e(xse,z9o),e(X5,W9o),e(X5,LD),e(LD,Q9o),e(X5,H9o),e(N,U9o),e(N,V5),e(V5,kse),e(kse,J9o),e(V5,Y9o),e(V5,BD),e(BD,K9o),e(V5,Z9o),e(N,eBo),e(N,z5),e(z5,Rse),e(Rse,oBo),e(z5,rBo),e(z5,xD),e(xD,tBo),e(z5,aBo),e(N,nBo),e(N,W5),e(W5,Sse),e(Sse,sBo),e(W5,lBo),e(W5,kD),e(kD,iBo),e(W5,dBo),e(N,cBo),e(N,Q5),e(Q5,Pse),e(Pse,fBo),e(Q5,mBo),e(Q5,RD),e(RD,gBo),e(Q5,hBo),e(N,pBo),e(N,H5),e(H5,$se),e($se,_Bo),e(H5,uBo),e(H5,SD),e(SD,bBo),e(H5,vBo),e(N,TBo),e(N,U5),e(U5,Ise),e(Ise,FBo),e(U5,CBo),e(U5,PD),e(PD,MBo),e(U5,EBo),e(N,yBo),e(N,J5),e(J5,jse),e(jse,wBo),e(J5,ABo),e(J5,$D),e($D,LBo),e(J5,BBo),e(N,xBo),e(N,Y5),e(Y5,Dse),e(Dse,kBo),e(Y5,RBo),e(Y5,ID),e(ID,SBo),e(Y5,PBo),e(N,$Bo),e(N,K5),e(K5,Nse),e(Nse,IBo),e(K5,jBo),e(K5,jD),e(jD,DBo),e(K5,NBo),e(N,qBo),e(N,Z5),e(Z5,qse),e(qse,OBo),e(Z5,GBo),e(Z5,DD),e(DD,XBo),e(Z5,VBo),e(N,zBo),e(N,e2),e(e2,Ose),e(Ose,WBo),e(e2,QBo),e(e2,ND),e(ND,HBo),e(e2,UBo),e(N,JBo),e(N,o2),e(o2,Gse),e(Gse,YBo),e(o2,KBo),e(o2,qD),e(qD,ZBo),e(o2,exo),e(N,oxo),e(N,r2),e(r2,Xse),e(Xse,rxo),e(r2,txo),e(r2,OD),e(OD,axo),e(r2,nxo),e(N,sxo),e(N,t2),e(t2,Vse),e(Vse,lxo),e(t2,ixo),e(t2,GD),e(GD,dxo),e(t2,cxo),e(N,fxo),e(N,a2),e(a2,zse),e(zse,mxo),e(a2,gxo),e(a2,XD),e(XD,hxo),e(a2,pxo),e(N,_xo),e(N,n2),e(n2,Wse),e(Wse,uxo),e(n2,bxo),e(n2,VD),e(VD,vxo),e(n2,Txo),e(N,Fxo),e(N,s2),e(s2,Qse),e(Qse,Cxo),e(s2,Mxo),e(s2,zD),e(zD,Exo),e(s2,yxo),e(N,wxo),e(N,l2),e(l2,Hse),e(Hse,Axo),e(l2,Lxo),e(l2,WD),e(WD,Bxo),e(l2,xxo),e(N,kxo),e(N,i2),e(i2,Use),e(Use,Rxo),e(i2,Sxo),e(i2,QD),e(QD,Pxo),e(i2,$xo),e(N,Ixo),e(N,d2),e(d2,Jse),e(Jse,jxo),e(d2,Dxo),e(d2,HD),e(HD,Nxo),e(d2,qxo),e(N,Oxo),e(N,c2),e(c2,Yse),e(Yse,Gxo),e(c2,Xxo),e(c2,UD),e(UD,Vxo),e(c2,zxo),e(N,Wxo),e(N,f2),e(f2,Kse),e(Kse,Qxo),e(f2,Hxo),e(f2,JD),e(JD,Uxo),e(f2,Jxo),e(N,Yxo),e(N,m2),e(m2,Zse),e(Zse,Kxo),e(m2,Zxo),e(m2,YD),e(YD,eko),e(m2,oko),e(N,rko),e(N,g2),e(g2,ele),e(ele,tko),e(g2,ako),e(g2,KD),e(KD,nko),e(g2,sko),e(N,lko),e(N,h2),e(h2,ole),e(ole,iko),e(h2,dko),e(h2,ZD),e(ZD,cko),e(h2,fko),e(We,mko),e(We,p2),e(p2,gko),e(p2,rle),e(rle,hko),e(p2,pko),e(p2,tle),e(tle,_ko),e(We,uko),e(We,ale),e(ale,bko),e(We,vko),g(r3,We,null),b(d,oRe,u),b(d,kd,u),e(kd,_2),e(_2,nle),g(t3,nle,null),e(kd,Tko),e(kd,sle),e(sle,Fko),b(d,rRe,u),b(d,sr,u),g(a3,sr,null),e(sr,Cko),e(sr,Rd),e(Rd,Mko),e(Rd,lle),e(lle,Eko),e(Rd,yko),e(Rd,ile),e(ile,wko),e(Rd,Ako),e(sr,Lko),e(sr,n3),e(n3,Bko),e(n3,dle),e(dle,xko),e(n3,kko),e(sr,Rko),e(sr,ot),g(s3,ot,null),e(ot,Sko),e(ot,cle),e(cle,Pko),e(ot,$ko),e(ot,Sd),e(Sd,Iko),e(Sd,fle),e(fle,jko),e(Sd,Dko),e(Sd,mle),e(mle,Nko),e(Sd,qko),e(ot,Oko),e(ot,gle),e(gle,Gko),e(ot,Xko),g(l3,ot,null),e(sr,Vko),e(sr,Qe),g(i3,Qe,null),e(Qe,zko),e(Qe,hle),e(hle,Wko),e(Qe,Qko),e(Qe,tn),e(tn,Hko),e(tn,ple),e(ple,Uko),e(tn,Jko),e(tn,_le),e(_le,Yko),e(tn,Kko),e(tn,ule),e(ule,Zko),e(tn,eRo),e(Qe,oRo),e(Qe,R),e(R,u2),e(u2,ble),e(ble,rRo),e(u2,tRo),e(u2,eN),e(eN,aRo),e(u2,nRo),e(R,sRo),e(R,b2),e(b2,vle),e(vle,lRo),e(b2,iRo),e(b2,oN),e(oN,dRo),e(b2,cRo),e(R,fRo),e(R,v2),e(v2,Tle),e(Tle,mRo),e(v2,gRo),e(v2,rN),e(rN,hRo),e(v2,pRo),e(R,_Ro),e(R,T2),e(T2,Fle),e(Fle,uRo),e(T2,bRo),e(T2,tN),e(tN,vRo),e(T2,TRo),e(R,FRo),e(R,F2),e(F2,Cle),e(Cle,CRo),e(F2,MRo),e(F2,aN),e(aN,ERo),e(F2,yRo),e(R,wRo),e(R,C2),e(C2,Mle),e(Mle,ARo),e(C2,LRo),e(C2,nN),e(nN,BRo),e(C2,xRo),e(R,kRo),e(R,M2),e(M2,Ele),e(Ele,RRo),e(M2,SRo),e(M2,sN),e(sN,PRo),e(M2,$Ro),e(R,IRo),e(R,E2),e(E2,yle),e(yle,jRo),e(E2,DRo),e(E2,lN),e(lN,NRo),e(E2,qRo),e(R,ORo),e(R,y2),e(y2,wle),e(wle,GRo),e(y2,XRo),e(y2,iN),e(iN,VRo),e(y2,zRo),e(R,WRo),e(R,w2),e(w2,Ale),e(Ale,QRo),e(w2,HRo),e(w2,dN),e(dN,URo),e(w2,JRo),e(R,YRo),e(R,A2),e(A2,Lle),e(Lle,KRo),e(A2,ZRo),e(A2,cN),e(cN,eSo),e(A2,oSo),e(R,rSo),e(R,L2),e(L2,Ble),e(Ble,tSo),e(L2,aSo),e(L2,fN),e(fN,nSo),e(L2,sSo),e(R,lSo),e(R,B2),e(B2,xle),e(xle,iSo),e(B2,dSo),e(B2,mN),e(mN,cSo),e(B2,fSo),e(R,mSo),e(R,x2),e(x2,kle),e(kle,gSo),e(x2,hSo),e(x2,gN),e(gN,pSo),e(x2,_So),e(R,uSo),e(R,k2),e(k2,Rle),e(Rle,bSo),e(k2,vSo),e(k2,hN),e(hN,TSo),e(k2,FSo),e(R,CSo),e(R,R2),e(R2,Sle),e(Sle,MSo),e(R2,ESo),e(R2,pN),e(pN,ySo),e(R2,wSo),e(R,ASo),e(R,S2),e(S2,Ple),e(Ple,LSo),e(S2,BSo),e(S2,_N),e(_N,xSo),e(S2,kSo),e(R,RSo),e(R,P2),e(P2,$le),e($le,SSo),e(P2,PSo),e(P2,uN),e(uN,$So),e(P2,ISo),e(R,jSo),e(R,$2),e($2,Ile),e(Ile,DSo),e($2,NSo),e($2,bN),e(bN,qSo),e($2,OSo),e(R,GSo),e(R,I2),e(I2,jle),e(jle,XSo),e(I2,VSo),e(I2,vN),e(vN,zSo),e(I2,WSo),e(R,QSo),e(R,j2),e(j2,Dle),e(Dle,HSo),e(j2,USo),e(j2,TN),e(TN,JSo),e(j2,YSo),e(R,KSo),e(R,D2),e(D2,Nle),e(Nle,ZSo),e(D2,ePo),e(D2,FN),e(FN,oPo),e(D2,rPo),e(R,tPo),e(R,N2),e(N2,qle),e(qle,aPo),e(N2,nPo),e(N2,CN),e(CN,sPo),e(N2,lPo),e(R,iPo),e(R,q2),e(q2,Ole),e(Ole,dPo),e(q2,cPo),e(q2,MN),e(MN,fPo),e(q2,mPo),e(R,gPo),e(R,O2),e(O2,Gle),e(Gle,hPo),e(O2,pPo),e(O2,EN),e(EN,_Po),e(O2,uPo),e(R,bPo),e(R,G2),e(G2,Xle),e(Xle,vPo),e(G2,TPo),e(G2,yN),e(yN,FPo),e(G2,CPo),e(R,MPo),e(R,X2),e(X2,Vle),e(Vle,EPo),e(X2,yPo),e(X2,wN),e(wN,wPo),e(X2,APo),e(R,LPo),e(R,V2),e(V2,zle),e(zle,BPo),e(V2,xPo),e(V2,AN),e(AN,kPo),e(V2,RPo),e(R,SPo),e(R,z2),e(z2,Wle),e(Wle,PPo),e(z2,$Po),e(z2,LN),e(LN,IPo),e(z2,jPo),e(R,DPo),e(R,W2),e(W2,Qle),e(Qle,NPo),e(W2,qPo),e(W2,BN),e(BN,OPo),e(W2,GPo),e(R,XPo),e(R,Q2),e(Q2,Hle),e(Hle,VPo),e(Q2,zPo),e(Q2,xN),e(xN,WPo),e(Q2,QPo),e(R,HPo),e(R,H2),e(H2,Ule),e(Ule,UPo),e(H2,JPo),e(H2,kN),e(kN,YPo),e(H2,KPo),e(R,ZPo),e(R,U2),e(U2,Jle),e(Jle,e$o),e(U2,o$o),e(U2,RN),e(RN,r$o),e(U2,t$o),e(R,a$o),e(R,J2),e(J2,Yle),e(Yle,n$o),e(J2,s$o),e(J2,SN),e(SN,l$o),e(J2,i$o),e(R,d$o),e(R,Y2),e(Y2,Kle),e(Kle,c$o),e(Y2,f$o),e(Y2,PN),e(PN,m$o),e(Y2,g$o),e(R,h$o),e(R,K2),e(K2,Zle),e(Zle,p$o),e(K2,_$o),e(K2,$N),e($N,u$o),e(K2,b$o),e(R,v$o),e(R,Z2),e(Z2,eie),e(eie,T$o),e(Z2,F$o),e(Z2,IN),e(IN,C$o),e(Z2,M$o),e(R,E$o),e(R,ev),e(ev,oie),e(oie,y$o),e(ev,w$o),e(ev,jN),e(jN,A$o),e(ev,L$o),e(R,B$o),e(R,ov),e(ov,rie),e(rie,x$o),e(ov,k$o),e(ov,DN),e(DN,R$o),e(ov,S$o),e(Qe,P$o),e(Qe,rv),e(rv,$$o),e(rv,tie),e(tie,I$o),e(rv,j$o),e(rv,aie),e(aie,D$o),e(Qe,N$o),e(Qe,nie),e(nie,q$o),e(Qe,O$o),g(d3,Qe,null),b(d,tRe,u),b(d,Pd,u),e(Pd,tv),e(tv,sie),g(c3,sie,null),e(Pd,G$o),e(Pd,lie),e(lie,X$o),b(d,aRe,u),b(d,lr,u),g(f3,lr,null),e(lr,V$o),e(lr,$d),e($d,z$o),e($d,iie),e(iie,W$o),e($d,Q$o),e($d,die),e(die,H$o),e($d,U$o),e(lr,J$o),e(lr,m3),e(m3,Y$o),e(m3,cie),e(cie,K$o),e(m3,Z$o),e(lr,eIo),e(lr,rt),g(g3,rt,null),e(rt,oIo),e(rt,fie),e(fie,rIo),e(rt,tIo),e(rt,Id),e(Id,aIo),e(Id,mie),e(mie,nIo),e(Id,sIo),e(Id,gie),e(gie,lIo),e(Id,iIo),e(rt,dIo),e(rt,hie),e(hie,cIo),e(rt,fIo),g(h3,rt,null),e(lr,mIo),e(lr,He),g(p3,He,null),e(He,gIo),e(He,pie),e(pie,hIo),e(He,pIo),e(He,an),e(an,_Io),e(an,_ie),e(_ie,uIo),e(an,bIo),e(an,uie),e(uie,vIo),e(an,TIo),e(an,bie),e(bie,FIo),e(an,CIo),e(He,MIo),e(He,vie),e(vie,av),e(av,Tie),e(Tie,EIo),e(av,yIo),e(av,NN),e(NN,wIo),e(av,AIo),e(He,LIo),e(He,nv),e(nv,BIo),e(nv,Fie),e(Fie,xIo),e(nv,kIo),e(nv,Cie),e(Cie,RIo),e(He,SIo),e(He,Mie),e(Mie,PIo),e(He,$Io),g(_3,He,null),b(d,nRe,u),b(d,jd,u),e(jd,sv),e(sv,Eie),g(u3,Eie,null),e(jd,IIo),e(jd,yie),e(yie,jIo),b(d,sRe,u),b(d,ir,u),g(b3,ir,null),e(ir,DIo),e(ir,Dd),e(Dd,NIo),e(Dd,wie),e(wie,qIo),e(Dd,OIo),e(Dd,Aie),e(Aie,GIo),e(Dd,XIo),e(ir,VIo),e(ir,v3),e(v3,zIo),e(v3,Lie),e(Lie,WIo),e(v3,QIo),e(ir,HIo),e(ir,tt),g(T3,tt,null),e(tt,UIo),e(tt,Bie),e(Bie,JIo),e(tt,YIo),e(tt,Nd),e(Nd,KIo),e(Nd,xie),e(xie,ZIo),e(Nd,ejo),e(Nd,kie),e(kie,ojo),e(Nd,rjo),e(tt,tjo),e(tt,Rie),e(Rie,ajo),e(tt,njo),g(F3,tt,null),e(ir,sjo),e(ir,Ue),g(C3,Ue,null),e(Ue,ljo),e(Ue,Sie),e(Sie,ijo),e(Ue,djo),e(Ue,nn),e(nn,cjo),e(nn,Pie),e(Pie,fjo),e(nn,mjo),e(nn,$ie),e($ie,gjo),e(nn,hjo),e(nn,Iie),e(Iie,pjo),e(nn,_jo),e(Ue,ujo),e(Ue,me),e(me,lv),e(lv,jie),e(jie,bjo),e(lv,vjo),e(lv,qN),e(qN,Tjo),e(lv,Fjo),e(me,Cjo),e(me,iv),e(iv,Die),e(Die,Mjo),e(iv,Ejo),e(iv,ON),e(ON,yjo),e(iv,wjo),e(me,Ajo),e(me,zs),e(zs,Nie),e(Nie,Ljo),e(zs,Bjo),e(zs,GN),e(GN,xjo),e(zs,kjo),e(zs,XN),e(XN,Rjo),e(zs,Sjo),e(me,Pjo),e(me,dv),e(dv,qie),e(qie,$jo),e(dv,Ijo),e(dv,VN),e(VN,jjo),e(dv,Djo),e(me,Njo),e(me,pa),e(pa,Oie),e(Oie,qjo),e(pa,Ojo),e(pa,zN),e(zN,Gjo),e(pa,Xjo),e(pa,WN),e(WN,Vjo),e(pa,zjo),e(pa,QN),e(QN,Wjo),e(pa,Qjo),e(me,Hjo),e(me,cv),e(cv,Gie),e(Gie,Ujo),e(cv,Jjo),e(cv,HN),e(HN,Yjo),e(cv,Kjo),e(me,Zjo),e(me,fv),e(fv,Xie),e(Xie,eDo),e(fv,oDo),e(fv,UN),e(UN,rDo),e(fv,tDo),e(me,aDo),e(me,mv),e(mv,Vie),e(Vie,nDo),e(mv,sDo),e(mv,JN),e(JN,lDo),e(mv,iDo),e(me,dDo),e(me,gv),e(gv,zie),e(zie,cDo),e(gv,fDo),e(gv,YN),e(YN,mDo),e(gv,gDo),e(me,hDo),e(me,hv),e(hv,Wie),e(Wie,pDo),e(hv,_Do),e(hv,KN),e(KN,uDo),e(hv,bDo),e(me,vDo),e(me,pv),e(pv,Qie),e(Qie,TDo),e(pv,FDo),e(pv,ZN),e(ZN,CDo),e(pv,MDo),e(Ue,EDo),e(Ue,_v),e(_v,yDo),e(_v,Hie),e(Hie,wDo),e(_v,ADo),e(_v,Uie),e(Uie,LDo),e(Ue,BDo),e(Ue,Jie),e(Jie,xDo),e(Ue,kDo),g(M3,Ue,null),b(d,lRe,u),b(d,qd,u),e(qd,uv),e(uv,Yie),g(E3,Yie,null),e(qd,RDo),e(qd,Kie),e(Kie,SDo),b(d,iRe,u),b(d,dr,u),g(y3,dr,null),e(dr,PDo),e(dr,Od),e(Od,$Do),e(Od,Zie),e(Zie,IDo),e(Od,jDo),e(Od,ede),e(ede,DDo),e(Od,NDo),e(dr,qDo),e(dr,w3),e(w3,ODo),e(w3,ode),e(ode,GDo),e(w3,XDo),e(dr,VDo),e(dr,at),g(A3,at,null),e(at,zDo),e(at,rde),e(rde,WDo),e(at,QDo),e(at,Gd),e(Gd,HDo),e(Gd,tde),e(tde,UDo),e(Gd,JDo),e(Gd,ade),e(ade,YDo),e(Gd,KDo),e(at,ZDo),e(at,nde),e(nde,eNo),e(at,oNo),g(L3,at,null),e(dr,rNo),e(dr,Je),g(B3,Je,null),e(Je,tNo),e(Je,sde),e(sde,aNo),e(Je,nNo),e(Je,sn),e(sn,sNo),e(sn,lde),e(lde,lNo),e(sn,iNo),e(sn,ide),e(ide,dNo),e(sn,cNo),e(sn,dde),e(dde,fNo),e(sn,mNo),e(Je,gNo),e(Je,cde),e(cde,bv),e(bv,fde),e(fde,hNo),e(bv,pNo),e(bv,eq),e(eq,_No),e(bv,uNo),e(Je,bNo),e(Je,vv),e(vv,vNo),e(vv,mde),e(mde,TNo),e(vv,FNo),e(vv,gde),e(gde,CNo),e(Je,MNo),e(Je,hde),e(hde,ENo),e(Je,yNo),g(x3,Je,null),b(d,dRe,u),b(d,Xd,u),e(Xd,Tv),e(Tv,pde),g(k3,pde,null),e(Xd,wNo),e(Xd,_de),e(_de,ANo),b(d,cRe,u),b(d,cr,u),g(R3,cr,null),e(cr,LNo),e(cr,Vd),e(Vd,BNo),e(Vd,ude),e(ude,xNo),e(Vd,kNo),e(Vd,bde),e(bde,RNo),e(Vd,SNo),e(cr,PNo),e(cr,S3),e(S3,$No),e(S3,vde),e(vde,INo),e(S3,jNo),e(cr,DNo),e(cr,nt),g(P3,nt,null),e(nt,NNo),e(nt,Tde),e(Tde,qNo),e(nt,ONo),e(nt,zd),e(zd,GNo),e(zd,Fde),e(Fde,XNo),e(zd,VNo),e(zd,Cde),e(Cde,zNo),e(zd,WNo),e(nt,QNo),e(nt,Mde),e(Mde,HNo),e(nt,UNo),g($3,nt,null),e(cr,JNo),e(cr,Ye),g(I3,Ye,null),e(Ye,YNo),e(Ye,Ede),e(Ede,KNo),e(Ye,ZNo),e(Ye,ln),e(ln,eqo),e(ln,yde),e(yde,oqo),e(ln,rqo),e(ln,wde),e(wde,tqo),e(ln,aqo),e(ln,Ade),e(Ade,nqo),e(ln,sqo),e(Ye,lqo),e(Ye,ke),e(ke,Fv),e(Fv,Lde),e(Lde,iqo),e(Fv,dqo),e(Fv,oq),e(oq,cqo),e(Fv,fqo),e(ke,mqo),e(ke,Cv),e(Cv,Bde),e(Bde,gqo),e(Cv,hqo),e(Cv,rq),e(rq,pqo),e(Cv,_qo),e(ke,uqo),e(ke,Mv),e(Mv,xde),e(xde,bqo),e(Mv,vqo),e(Mv,tq),e(tq,Tqo),e(Mv,Fqo),e(ke,Cqo),e(ke,Ev),e(Ev,kde),e(kde,Mqo),e(Ev,Eqo),e(Ev,aq),e(aq,yqo),e(Ev,wqo),e(ke,Aqo),e(ke,yv),e(yv,Rde),e(Rde,Lqo),e(yv,Bqo),e(yv,nq),e(nq,xqo),e(yv,kqo),e(ke,Rqo),e(ke,wv),e(wv,Sde),e(Sde,Sqo),e(wv,Pqo),e(wv,sq),e(sq,$qo),e(wv,Iqo),e(ke,jqo),e(ke,Av),e(Av,Pde),e(Pde,Dqo),e(Av,Nqo),e(Av,lq),e(lq,qqo),e(Av,Oqo),e(ke,Gqo),e(ke,Lv),e(Lv,$de),e($de,Xqo),e(Lv,Vqo),e(Lv,iq),e(iq,zqo),e(Lv,Wqo),e(Ye,Qqo),e(Ye,Bv),e(Bv,Hqo),e(Bv,Ide),e(Ide,Uqo),e(Bv,Jqo),e(Bv,jde),e(jde,Yqo),e(Ye,Kqo),e(Ye,Dde),e(Dde,Zqo),e(Ye,eOo),g(j3,Ye,null),b(d,fRe,u),b(d,Wd,u),e(Wd,xv),e(xv,Nde),g(D3,Nde,null),e(Wd,oOo),e(Wd,qde),e(qde,rOo),b(d,mRe,u),b(d,fr,u),g(N3,fr,null),e(fr,tOo),e(fr,Qd),e(Qd,aOo),e(Qd,Ode),e(Ode,nOo),e(Qd,sOo),e(Qd,Gde),e(Gde,lOo),e(Qd,iOo),e(fr,dOo),e(fr,q3),e(q3,cOo),e(q3,Xde),e(Xde,fOo),e(q3,mOo),e(fr,gOo),e(fr,st),g(O3,st,null),e(st,hOo),e(st,Vde),e(Vde,pOo),e(st,_Oo),e(st,Hd),e(Hd,uOo),e(Hd,zde),e(zde,bOo),e(Hd,vOo),e(Hd,Wde),e(Wde,TOo),e(Hd,FOo),e(st,COo),e(st,Qde),e(Qde,MOo),e(st,EOo),g(G3,st,null),e(fr,yOo),e(fr,Ke),g(X3,Ke,null),e(Ke,wOo),e(Ke,Hde),e(Hde,AOo),e(Ke,LOo),e(Ke,dn),e(dn,BOo),e(dn,Ude),e(Ude,xOo),e(dn,kOo),e(dn,Jde),e(Jde,ROo),e(dn,SOo),e(dn,Yde),e(Yde,POo),e(dn,$Oo),e(Ke,IOo),e(Ke,cn),e(cn,kv),e(kv,Kde),e(Kde,jOo),e(kv,DOo),e(kv,dq),e(dq,NOo),e(kv,qOo),e(cn,OOo),e(cn,Rv),e(Rv,Zde),e(Zde,GOo),e(Rv,XOo),e(Rv,cq),e(cq,VOo),e(Rv,zOo),e(cn,WOo),e(cn,Sv),e(Sv,ece),e(ece,QOo),e(Sv,HOo),e(Sv,fq),e(fq,UOo),e(Sv,JOo),e(cn,YOo),e(cn,Pv),e(Pv,oce),e(oce,KOo),e(Pv,ZOo),e(Pv,mq),e(mq,eGo),e(Pv,oGo),e(Ke,rGo),e(Ke,$v),e($v,tGo),e($v,rce),e(rce,aGo),e($v,nGo),e($v,tce),e(tce,sGo),e(Ke,lGo),e(Ke,ace),e(ace,iGo),e(Ke,dGo),g(V3,Ke,null),b(d,gRe,u),b(d,Ud,u),e(Ud,Iv),e(Iv,nce),g(z3,nce,null),e(Ud,cGo),e(Ud,sce),e(sce,fGo),b(d,hRe,u),b(d,mr,u),g(W3,mr,null),e(mr,mGo),e(mr,Jd),e(Jd,gGo),e(Jd,lce),e(lce,hGo),e(Jd,pGo),e(Jd,ice),e(ice,_Go),e(Jd,uGo),e(mr,bGo),e(mr,Q3),e(Q3,vGo),e(Q3,dce),e(dce,TGo),e(Q3,FGo),e(mr,CGo),e(mr,lt),g(H3,lt,null),e(lt,MGo),e(lt,cce),e(cce,EGo),e(lt,yGo),e(lt,Yd),e(Yd,wGo),e(Yd,fce),e(fce,AGo),e(Yd,LGo),e(Yd,mce),e(mce,BGo),e(Yd,xGo),e(lt,kGo),e(lt,gce),e(gce,RGo),e(lt,SGo),g(U3,lt,null),e(mr,PGo),e(mr,Ze),g(J3,Ze,null),e(Ze,$Go),e(Ze,hce),e(hce,IGo),e(Ze,jGo),e(Ze,fn),e(fn,DGo),e(fn,pce),e(pce,NGo),e(fn,qGo),e(fn,_ce),e(_ce,OGo),e(fn,GGo),e(fn,uce),e(uce,XGo),e(fn,VGo),e(Ze,zGo),e(Ze,Re),e(Re,jv),e(jv,bce),e(bce,WGo),e(jv,QGo),e(jv,gq),e(gq,HGo),e(jv,UGo),e(Re,JGo),e(Re,Dv),e(Dv,vce),e(vce,YGo),e(Dv,KGo),e(Dv,hq),e(hq,ZGo),e(Dv,eXo),e(Re,oXo),e(Re,Nv),e(Nv,Tce),e(Tce,rXo),e(Nv,tXo),e(Nv,pq),e(pq,aXo),e(Nv,nXo),e(Re,sXo),e(Re,qv),e(qv,Fce),e(Fce,lXo),e(qv,iXo),e(qv,_q),e(_q,dXo),e(qv,cXo),e(Re,fXo),e(Re,Ov),e(Ov,Cce),e(Cce,mXo),e(Ov,gXo),e(Ov,uq),e(uq,hXo),e(Ov,pXo),e(Re,_Xo),e(Re,Gv),e(Gv,Mce),e(Mce,uXo),e(Gv,bXo),e(Gv,bq),e(bq,vXo),e(Gv,TXo),e(Re,FXo),e(Re,Xv),e(Xv,Ece),e(Ece,CXo),e(Xv,MXo),e(Xv,vq),e(vq,EXo),e(Xv,yXo),e(Re,wXo),e(Re,Vv),e(Vv,yce),e(yce,AXo),e(Vv,LXo),e(Vv,Tq),e(Tq,BXo),e(Vv,xXo),e(Ze,kXo),e(Ze,zv),e(zv,RXo),e(zv,wce),e(wce,SXo),e(zv,PXo),e(zv,Ace),e(Ace,$Xo),e(Ze,IXo),e(Ze,Lce),e(Lce,jXo),e(Ze,DXo),g(Y3,Ze,null),b(d,pRe,u),b(d,Kd,u),e(Kd,Wv),e(Wv,Bce),g(K3,Bce,null),e(Kd,NXo),e(Kd,xce),e(xce,qXo),b(d,_Re,u),b(d,gr,u),g(Z3,gr,null),e(gr,OXo),e(gr,Zd),e(Zd,GXo),e(Zd,kce),e(kce,XXo),e(Zd,VXo),e(Zd,Rce),e(Rce,zXo),e(Zd,WXo),e(gr,QXo),e(gr,ey),e(ey,HXo),e(ey,Sce),e(Sce,UXo),e(ey,JXo),e(gr,YXo),e(gr,it),g(oy,it,null),e(it,KXo),e(it,Pce),e(Pce,ZXo),e(it,eVo),e(it,ec),e(ec,oVo),e(ec,$ce),e($ce,rVo),e(ec,tVo),e(ec,Ice),e(Ice,aVo),e(ec,nVo),e(it,sVo),e(it,jce),e(jce,lVo),e(it,iVo),g(ry,it,null),e(gr,dVo),e(gr,eo),g(ty,eo,null),e(eo,cVo),e(eo,Dce),e(Dce,fVo),e(eo,mVo),e(eo,mn),e(mn,gVo),e(mn,Nce),e(Nce,hVo),e(mn,pVo),e(mn,qce),e(qce,_Vo),e(mn,uVo),e(mn,Oce),e(Oce,bVo),e(mn,vVo),e(eo,TVo),e(eo,ay),e(ay,Qv),e(Qv,Gce),e(Gce,FVo),e(Qv,CVo),e(Qv,Fq),e(Fq,MVo),e(Qv,EVo),e(ay,yVo),e(ay,Hv),e(Hv,Xce),e(Xce,wVo),e(Hv,AVo),e(Hv,Cq),e(Cq,LVo),e(Hv,BVo),e(eo,xVo),e(eo,Uv),e(Uv,kVo),e(Uv,Vce),e(Vce,RVo),e(Uv,SVo),e(Uv,zce),e(zce,PVo),e(eo,$Vo),e(eo,Wce),e(Wce,IVo),e(eo,jVo),g(ny,eo,null),b(d,uRe,u),b(d,oc,u),e(oc,Jv),e(Jv,Qce),g(sy,Qce,null),e(oc,DVo),e(oc,Hce),e(Hce,NVo),b(d,bRe,u),b(d,hr,u),g(ly,hr,null),e(hr,qVo),e(hr,rc),e(rc,OVo),e(rc,Uce),e(Uce,GVo),e(rc,XVo),e(rc,Jce),e(Jce,VVo),e(rc,zVo),e(hr,WVo),e(hr,iy),e(iy,QVo),e(iy,Yce),e(Yce,HVo),e(iy,UVo),e(hr,JVo),e(hr,dt),g(dy,dt,null),e(dt,YVo),e(dt,Kce),e(Kce,KVo),e(dt,ZVo),e(dt,tc),e(tc,ezo),e(tc,Zce),e(Zce,ozo),e(tc,rzo),e(tc,efe),e(efe,tzo),e(tc,azo),e(dt,nzo),e(dt,ofe),e(ofe,szo),e(dt,lzo),g(cy,dt,null),e(hr,izo),e(hr,oo),g(fy,oo,null),e(oo,dzo),e(oo,rfe),e(rfe,czo),e(oo,fzo),e(oo,gn),e(gn,mzo),e(gn,tfe),e(tfe,gzo),e(gn,hzo),e(gn,afe),e(afe,pzo),e(gn,_zo),e(gn,nfe),e(nfe,uzo),e(gn,bzo),e(oo,vzo),e(oo,hn),e(hn,Yv),e(Yv,sfe),e(sfe,Tzo),e(Yv,Fzo),e(Yv,Mq),e(Mq,Czo),e(Yv,Mzo),e(hn,Ezo),e(hn,Kv),e(Kv,lfe),e(lfe,yzo),e(Kv,wzo),e(Kv,Eq),e(Eq,Azo),e(Kv,Lzo),e(hn,Bzo),e(hn,Zv),e(Zv,ife),e(ife,xzo),e(Zv,kzo),e(Zv,yq),e(yq,Rzo),e(Zv,Szo),e(hn,Pzo),e(hn,e6),e(e6,dfe),e(dfe,$zo),e(e6,Izo),e(e6,wq),e(wq,jzo),e(e6,Dzo),e(oo,Nzo),e(oo,o6),e(o6,qzo),e(o6,cfe),e(cfe,Ozo),e(o6,Gzo),e(o6,ffe),e(ffe,Xzo),e(oo,Vzo),e(oo,mfe),e(mfe,zzo),e(oo,Wzo),g(my,oo,null),b(d,vRe,u),b(d,ac,u),e(ac,r6),e(r6,gfe),g(gy,gfe,null),e(ac,Qzo),e(ac,hfe),e(hfe,Hzo),b(d,TRe,u),b(d,pr,u),g(hy,pr,null),e(pr,Uzo),e(pr,nc),e(nc,Jzo),e(nc,pfe),e(pfe,Yzo),e(nc,Kzo),e(nc,_fe),e(_fe,Zzo),e(nc,eWo),e(pr,oWo),e(pr,py),e(py,rWo),e(py,ufe),e(ufe,tWo),e(py,aWo),e(pr,nWo),e(pr,ct),g(_y,ct,null),e(ct,sWo),e(ct,bfe),e(bfe,lWo),e(ct,iWo),e(ct,sc),e(sc,dWo),e(sc,vfe),e(vfe,cWo),e(sc,fWo),e(sc,Tfe),e(Tfe,mWo),e(sc,gWo),e(ct,hWo),e(ct,Ffe),e(Ffe,pWo),e(ct,_Wo),g(uy,ct,null),e(pr,uWo),e(pr,ro),g(by,ro,null),e(ro,bWo),e(ro,Cfe),e(Cfe,vWo),e(ro,TWo),e(ro,pn),e(pn,FWo),e(pn,Mfe),e(Mfe,CWo),e(pn,MWo),e(pn,Efe),e(Efe,EWo),e(pn,yWo),e(pn,yfe),e(yfe,wWo),e(pn,AWo),e(ro,LWo),e(ro,lc),e(lc,t6),e(t6,wfe),e(wfe,BWo),e(t6,xWo),e(t6,Aq),e(Aq,kWo),e(t6,RWo),e(lc,SWo),e(lc,a6),e(a6,Afe),e(Afe,PWo),e(a6,$Wo),e(a6,Lq),e(Lq,IWo),e(a6,jWo),e(lc,DWo),e(lc,n6),e(n6,Lfe),e(Lfe,NWo),e(n6,qWo),e(n6,Bq),e(Bq,OWo),e(n6,GWo),e(ro,XWo),e(ro,s6),e(s6,VWo),e(s6,Bfe),e(Bfe,zWo),e(s6,WWo),e(s6,xfe),e(xfe,QWo),e(ro,HWo),e(ro,kfe),e(kfe,UWo),e(ro,JWo),g(vy,ro,null),b(d,FRe,u),b(d,ic,u),e(ic,l6),e(l6,Rfe),g(Ty,Rfe,null),e(ic,YWo),e(ic,Sfe),e(Sfe,KWo),b(d,CRe,u),b(d,_r,u),g(Fy,_r,null),e(_r,ZWo),e(_r,dc),e(dc,eQo),e(dc,Pfe),e(Pfe,oQo),e(dc,rQo),e(dc,$fe),e($fe,tQo),e(dc,aQo),e(_r,nQo),e(_r,Cy),e(Cy,sQo),e(Cy,Ife),e(Ife,lQo),e(Cy,iQo),e(_r,dQo),e(_r,ft),g(My,ft,null),e(ft,cQo),e(ft,jfe),e(jfe,fQo),e(ft,mQo),e(ft,cc),e(cc,gQo),e(cc,Dfe),e(Dfe,hQo),e(cc,pQo),e(cc,Nfe),e(Nfe,_Qo),e(cc,uQo),e(ft,bQo),e(ft,qfe),e(qfe,vQo),e(ft,TQo),g(Ey,ft,null),e(_r,FQo),e(_r,to),g(yy,to,null),e(to,CQo),e(to,Ofe),e(Ofe,MQo),e(to,EQo),e(to,_n),e(_n,yQo),e(_n,Gfe),e(Gfe,wQo),e(_n,AQo),e(_n,Xfe),e(Xfe,LQo),e(_n,BQo),e(_n,Vfe),e(Vfe,xQo),e(_n,kQo),e(to,RQo),e(to,zfe),e(zfe,i6),e(i6,Wfe),e(Wfe,SQo),e(i6,PQo),e(i6,xq),e(xq,$Qo),e(i6,IQo),e(to,jQo),e(to,d6),e(d6,DQo),e(d6,Qfe),e(Qfe,NQo),e(d6,qQo),e(d6,Hfe),e(Hfe,OQo),e(to,GQo),e(to,Ufe),e(Ufe,XQo),e(to,VQo),g(wy,to,null),b(d,MRe,u),b(d,fc,u),e(fc,c6),e(c6,Jfe),g(Ay,Jfe,null),e(fc,zQo),e(fc,Yfe),e(Yfe,WQo),b(d,ERe,u),b(d,ur,u),g(Ly,ur,null),e(ur,QQo),e(ur,mc),e(mc,HQo),e(mc,Kfe),e(Kfe,UQo),e(mc,JQo),e(mc,Zfe),e(Zfe,YQo),e(mc,KQo),e(ur,ZQo),e(ur,By),e(By,eHo),e(By,eme),e(eme,oHo),e(By,rHo),e(ur,tHo),e(ur,mt),g(xy,mt,null),e(mt,aHo),e(mt,ome),e(ome,nHo),e(mt,sHo),e(mt,gc),e(gc,lHo),e(gc,rme),e(rme,iHo),e(gc,dHo),e(gc,tme),e(tme,cHo),e(gc,fHo),e(mt,mHo),e(mt,ame),e(ame,gHo),e(mt,hHo),g(ky,mt,null),e(ur,pHo),e(ur,ao),g(Ry,ao,null),e(ao,_Ho),e(ao,nme),e(nme,uHo),e(ao,bHo),e(ao,un),e(un,vHo),e(un,sme),e(sme,THo),e(un,FHo),e(un,lme),e(lme,CHo),e(un,MHo),e(un,ime),e(ime,EHo),e(un,yHo),e(ao,wHo),e(ao,dme),e(dme,f6),e(f6,cme),e(cme,AHo),e(f6,LHo),e(f6,kq),e(kq,BHo),e(f6,xHo),e(ao,kHo),e(ao,m6),e(m6,RHo),e(m6,fme),e(fme,SHo),e(m6,PHo),e(m6,mme),e(mme,$Ho),e(ao,IHo),e(ao,gme),e(gme,jHo),e(ao,DHo),g(Sy,ao,null),b(d,yRe,u),b(d,hc,u),e(hc,g6),e(g6,hme),g(Py,hme,null),e(hc,NHo),e(hc,pme),e(pme,qHo),b(d,wRe,u),b(d,br,u),g($y,br,null),e(br,OHo),e(br,pc),e(pc,GHo),e(pc,_me),e(_me,XHo),e(pc,VHo),e(pc,ume),e(ume,zHo),e(pc,WHo),e(br,QHo),e(br,Iy),e(Iy,HHo),e(Iy,bme),e(bme,UHo),e(Iy,JHo),e(br,YHo),e(br,gt),g(jy,gt,null),e(gt,KHo),e(gt,vme),e(vme,ZHo),e(gt,eUo),e(gt,_c),e(_c,oUo),e(_c,Tme),e(Tme,rUo),e(_c,tUo),e(_c,Fme),e(Fme,aUo),e(_c,nUo),e(gt,sUo),e(gt,Cme),e(Cme,lUo),e(gt,iUo),g(Dy,gt,null),e(br,dUo),e(br,no),g(Ny,no,null),e(no,cUo),e(no,Mme),e(Mme,fUo),e(no,mUo),e(no,bn),e(bn,gUo),e(bn,Eme),e(Eme,hUo),e(bn,pUo),e(bn,yme),e(yme,_Uo),e(bn,uUo),e(bn,wme),e(wme,bUo),e(bn,vUo),e(no,TUo),e(no,qy),e(qy,h6),e(h6,Ame),e(Ame,FUo),e(h6,CUo),e(h6,Rq),e(Rq,MUo),e(h6,EUo),e(qy,yUo),e(qy,p6),e(p6,Lme),e(Lme,wUo),e(p6,AUo),e(p6,Sq),e(Sq,LUo),e(p6,BUo),e(no,xUo),e(no,_6),e(_6,kUo),e(_6,Bme),e(Bme,RUo),e(_6,SUo),e(_6,xme),e(xme,PUo),e(no,$Uo),e(no,kme),e(kme,IUo),e(no,jUo),g(Oy,no,null),b(d,ARe,u),b(d,uc,u),e(uc,u6),e(u6,Rme),g(Gy,Rme,null),e(uc,DUo),e(uc,Sme),e(Sme,NUo),b(d,LRe,u),b(d,vr,u),g(Xy,vr,null),e(vr,qUo),e(vr,bc),e(bc,OUo),e(bc,Pme),e(Pme,GUo),e(bc,XUo),e(bc,$me),e($me,VUo),e(bc,zUo),e(vr,WUo),e(vr,Vy),e(Vy,QUo),e(Vy,Ime),e(Ime,HUo),e(Vy,UUo),e(vr,JUo),e(vr,ht),g(zy,ht,null),e(ht,YUo),e(ht,jme),e(jme,KUo),e(ht,ZUo),e(ht,vc),e(vc,eJo),e(vc,Dme),e(Dme,oJo),e(vc,rJo),e(vc,Nme),e(Nme,tJo),e(vc,aJo),e(ht,nJo),e(ht,qme),e(qme,sJo),e(ht,lJo),g(Wy,ht,null),e(vr,iJo),e(vr,so),g(Qy,so,null),e(so,dJo),e(so,Ome),e(Ome,cJo),e(so,fJo),e(so,vn),e(vn,mJo),e(vn,Gme),e(Gme,gJo),e(vn,hJo),e(vn,Xme),e(Xme,pJo),e(vn,_Jo),e(vn,Vme),e(Vme,uJo),e(vn,bJo),e(so,vJo),e(so,zme),e(zme,b6),e(b6,Wme),e(Wme,TJo),e(b6,FJo),e(b6,Pq),e(Pq,CJo),e(b6,MJo),e(so,EJo),e(so,v6),e(v6,yJo),e(v6,Qme),e(Qme,wJo),e(v6,AJo),e(v6,Hme),e(Hme,LJo),e(so,BJo),e(so,Ume),e(Ume,xJo),e(so,kJo),g(Hy,so,null),b(d,BRe,u),b(d,Tc,u),e(Tc,T6),e(T6,Jme),g(Uy,Jme,null),e(Tc,RJo),e(Tc,Yme),e(Yme,SJo),b(d,xRe,u),b(d,Tr,u),g(Jy,Tr,null),e(Tr,PJo),e(Tr,Fc),e(Fc,$Jo),e(Fc,Kme),e(Kme,IJo),e(Fc,jJo),e(Fc,Zme),e(Zme,DJo),e(Fc,NJo),e(Tr,qJo),e(Tr,Yy),e(Yy,OJo),e(Yy,ege),e(ege,GJo),e(Yy,XJo),e(Tr,VJo),e(Tr,pt),g(Ky,pt,null),e(pt,zJo),e(pt,oge),e(oge,WJo),e(pt,QJo),e(pt,Cc),e(Cc,HJo),e(Cc,rge),e(rge,UJo),e(Cc,JJo),e(Cc,tge),e(tge,YJo),e(Cc,KJo),e(pt,ZJo),e(pt,age),e(age,eYo),e(pt,oYo),g(Zy,pt,null),e(Tr,rYo),e(Tr,ho),g(ew,ho,null),e(ho,tYo),e(ho,nge),e(nge,aYo),e(ho,nYo),e(ho,Tn),e(Tn,sYo),e(Tn,sge),e(sge,lYo),e(Tn,iYo),e(Tn,lge),e(lge,dYo),e(Tn,cYo),e(Tn,ige),e(ige,fYo),e(Tn,mYo),e(ho,gYo),e(ho,B),e(B,F6),e(F6,dge),e(dge,hYo),e(F6,pYo),e(F6,$q),e($q,_Yo),e(F6,uYo),e(B,bYo),e(B,C6),e(C6,cge),e(cge,vYo),e(C6,TYo),e(C6,Iq),e(Iq,FYo),e(C6,CYo),e(B,MYo),e(B,M6),e(M6,fge),e(fge,EYo),e(M6,yYo),e(M6,jq),e(jq,wYo),e(M6,AYo),e(B,LYo),e(B,E6),e(E6,mge),e(mge,BYo),e(E6,xYo),e(E6,Dq),e(Dq,kYo),e(E6,RYo),e(B,SYo),e(B,y6),e(y6,gge),e(gge,PYo),e(y6,$Yo),e(y6,Nq),e(Nq,IYo),e(y6,jYo),e(B,DYo),e(B,w6),e(w6,hge),e(hge,NYo),e(w6,qYo),e(w6,qq),e(qq,OYo),e(w6,GYo),e(B,XYo),e(B,A6),e(A6,pge),e(pge,VYo),e(A6,zYo),e(A6,Oq),e(Oq,WYo),e(A6,QYo),e(B,HYo),e(B,L6),e(L6,_ge),e(_ge,UYo),e(L6,JYo),e(L6,Gq),e(Gq,YYo),e(L6,KYo),e(B,ZYo),e(B,B6),e(B6,uge),e(uge,eKo),e(B6,oKo),e(B6,Xq),e(Xq,rKo),e(B6,tKo),e(B,aKo),e(B,x6),e(x6,bge),e(bge,nKo),e(x6,sKo),e(x6,Vq),e(Vq,lKo),e(x6,iKo),e(B,dKo),e(B,k6),e(k6,vge),e(vge,cKo),e(k6,fKo),e(k6,zq),e(zq,mKo),e(k6,gKo),e(B,hKo),e(B,R6),e(R6,Tge),e(Tge,pKo),e(R6,_Ko),e(R6,Wq),e(Wq,uKo),e(R6,bKo),e(B,vKo),e(B,S6),e(S6,Fge),e(Fge,TKo),e(S6,FKo),e(S6,Qq),e(Qq,CKo),e(S6,MKo),e(B,EKo),e(B,P6),e(P6,Cge),e(Cge,yKo),e(P6,wKo),e(P6,Hq),e(Hq,AKo),e(P6,LKo),e(B,BKo),e(B,$6),e($6,Mge),e(Mge,xKo),e($6,kKo),e($6,Uq),e(Uq,RKo),e($6,SKo),e(B,PKo),e(B,I6),e(I6,Ege),e(Ege,$Ko),e(I6,IKo),e(I6,Jq),e(Jq,jKo),e(I6,DKo),e(B,NKo),e(B,Ws),e(Ws,yge),e(yge,qKo),e(Ws,OKo),e(Ws,Yq),e(Yq,GKo),e(Ws,XKo),e(Ws,Kq),e(Kq,VKo),e(Ws,zKo),e(B,WKo),e(B,j6),e(j6,wge),e(wge,QKo),e(j6,HKo),e(j6,Zq),e(Zq,UKo),e(j6,JKo),e(B,YKo),e(B,D6),e(D6,Age),e(Age,KKo),e(D6,ZKo),e(D6,eO),e(eO,eZo),e(D6,oZo),e(B,rZo),e(B,N6),e(N6,Lge),e(Lge,tZo),e(N6,aZo),e(N6,oO),e(oO,nZo),e(N6,sZo),e(B,lZo),e(B,q6),e(q6,Bge),e(Bge,iZo),e(q6,dZo),e(q6,rO),e(rO,cZo),e(q6,fZo),e(B,mZo),e(B,O6),e(O6,xge),e(xge,gZo),e(O6,hZo),e(O6,tO),e(tO,pZo),e(O6,_Zo),e(B,uZo),e(B,G6),e(G6,kge),e(kge,bZo),e(G6,vZo),e(G6,aO),e(aO,TZo),e(G6,FZo),e(B,CZo),e(B,X6),e(X6,Rge),e(Rge,MZo),e(X6,EZo),e(X6,nO),e(nO,yZo),e(X6,wZo),e(B,AZo),e(B,V6),e(V6,Sge),e(Sge,LZo),e(V6,BZo),e(V6,sO),e(sO,xZo),e(V6,kZo),e(B,RZo),e(B,z6),e(z6,Pge),e(Pge,SZo),e(z6,PZo),e(z6,lO),e(lO,$Zo),e(z6,IZo),e(B,jZo),e(B,W6),e(W6,$ge),e($ge,DZo),e(W6,NZo),e(W6,iO),e(iO,qZo),e(W6,OZo),e(B,GZo),e(B,Q6),e(Q6,Ige),e(Ige,XZo),e(Q6,VZo),e(Q6,dO),e(dO,zZo),e(Q6,WZo),e(B,QZo),e(B,H6),e(H6,jge),e(jge,HZo),e(H6,UZo),e(H6,cO),e(cO,JZo),e(H6,YZo),e(B,KZo),e(B,U6),e(U6,Dge),e(Dge,ZZo),e(U6,eer),e(U6,fO),e(fO,oer),e(U6,rer),e(B,ter),e(B,J6),e(J6,Nge),e(Nge,aer),e(J6,ner),e(J6,mO),e(mO,ser),e(J6,ler),e(B,ier),e(B,Y6),e(Y6,qge),e(qge,der),e(Y6,cer),e(Y6,gO),e(gO,fer),e(Y6,mer),e(B,ger),e(B,K6),e(K6,Oge),e(Oge,her),e(K6,per),e(K6,hO),e(hO,_er),e(K6,uer),e(B,ber),e(B,Z6),e(Z6,Gge),e(Gge,ver),e(Z6,Ter),e(Z6,pO),e(pO,Fer),e(Z6,Cer),e(B,Mer),e(B,e0),e(e0,Xge),e(Xge,Eer),e(e0,yer),e(e0,_O),e(_O,wer),e(e0,Aer),e(B,Ler),e(B,o0),e(o0,Vge),e(Vge,Ber),e(o0,xer),e(o0,uO),e(uO,ker),e(o0,Rer),e(B,Ser),e(B,r0),e(r0,zge),e(zge,Per),e(r0,$er),e(r0,bO),e(bO,Ier),e(r0,jer),e(B,Der),e(B,t0),e(t0,Wge),e(Wge,Ner),e(t0,qer),e(t0,vO),e(vO,Oer),e(t0,Ger),e(B,Xer),e(B,a0),e(a0,Qge),e(Qge,Ver),e(a0,zer),e(a0,TO),e(TO,Wer),e(a0,Qer),e(B,Her),e(B,n0),e(n0,Hge),e(Hge,Uer),e(n0,Jer),e(n0,FO),e(FO,Yer),e(n0,Ker),e(B,Zer),e(B,s0),e(s0,Uge),e(Uge,eor),e(s0,oor),e(s0,CO),e(CO,ror),e(s0,tor),e(B,aor),e(B,l0),e(l0,Jge),e(Jge,nor),e(l0,sor),e(l0,MO),e(MO,lor),e(l0,ior),e(ho,dor),e(ho,Yge),e(Yge,cor),e(ho,mor),g(ow,ho,null),b(d,kRe,u),b(d,Mc,u),e(Mc,i0),e(i0,Kge),g(rw,Kge,null),e(Mc,gor),e(Mc,Zge),e(Zge,hor),b(d,RRe,u),b(d,Fr,u),g(tw,Fr,null),e(Fr,por),e(Fr,Ec),e(Ec,_or),e(Ec,ehe),e(ehe,uor),e(Ec,bor),e(Ec,ohe),e(ohe,vor),e(Ec,Tor),e(Fr,For),e(Fr,aw),e(aw,Cor),e(aw,rhe),e(rhe,Mor),e(aw,Eor),e(Fr,yor),e(Fr,_t),g(nw,_t,null),e(_t,wor),e(_t,the),e(the,Aor),e(_t,Lor),e(_t,yc),e(yc,Bor),e(yc,ahe),e(ahe,xor),e(yc,kor),e(yc,nhe),e(nhe,Ror),e(yc,Sor),e(_t,Por),e(_t,she),e(she,$or),e(_t,Ior),g(sw,_t,null),e(Fr,jor),e(Fr,po),g(lw,po,null),e(po,Dor),e(po,lhe),e(lhe,Nor),e(po,qor),e(po,Fn),e(Fn,Oor),e(Fn,ihe),e(ihe,Gor),e(Fn,Xor),e(Fn,dhe),e(dhe,Vor),e(Fn,zor),e(Fn,che),e(che,Wor),e(Fn,Qor),e(po,Hor),e(po,H),e(H,d0),e(d0,fhe),e(fhe,Uor),e(d0,Jor),e(d0,EO),e(EO,Yor),e(d0,Kor),e(H,Zor),e(H,c0),e(c0,mhe),e(mhe,err),e(c0,orr),e(c0,yO),e(yO,rrr),e(c0,trr),e(H,arr),e(H,f0),e(f0,ghe),e(ghe,nrr),e(f0,srr),e(f0,wO),e(wO,lrr),e(f0,irr),e(H,drr),e(H,m0),e(m0,hhe),e(hhe,crr),e(m0,frr),e(m0,AO),e(AO,mrr),e(m0,grr),e(H,hrr),e(H,g0),e(g0,phe),e(phe,prr),e(g0,_rr),e(g0,LO),e(LO,urr),e(g0,brr),e(H,vrr),e(H,h0),e(h0,_he),e(_he,Trr),e(h0,Frr),e(h0,BO),e(BO,Crr),e(h0,Mrr),e(H,Err),e(H,p0),e(p0,uhe),e(uhe,yrr),e(p0,wrr),e(p0,xO),e(xO,Arr),e(p0,Lrr),e(H,Brr),e(H,_0),e(_0,bhe),e(bhe,xrr),e(_0,krr),e(_0,kO),e(kO,Rrr),e(_0,Srr),e(H,Prr),e(H,u0),e(u0,vhe),e(vhe,$rr),e(u0,Irr),e(u0,RO),e(RO,jrr),e(u0,Drr),e(H,Nrr),e(H,b0),e(b0,The),e(The,qrr),e(b0,Orr),e(b0,SO),e(SO,Grr),e(b0,Xrr),e(H,Vrr),e(H,v0),e(v0,Fhe),e(Fhe,zrr),e(v0,Wrr),e(v0,PO),e(PO,Qrr),e(v0,Hrr),e(H,Urr),e(H,T0),e(T0,Che),e(Che,Jrr),e(T0,Yrr),e(T0,$O),e($O,Krr),e(T0,Zrr),e(H,etr),e(H,F0),e(F0,Mhe),e(Mhe,otr),e(F0,rtr),e(F0,IO),e(IO,ttr),e(F0,atr),e(H,ntr),e(H,C0),e(C0,Ehe),e(Ehe,str),e(C0,ltr),e(C0,jO),e(jO,itr),e(C0,dtr),e(H,ctr),e(H,M0),e(M0,yhe),e(yhe,ftr),e(M0,mtr),e(M0,DO),e(DO,gtr),e(M0,htr),e(H,ptr),e(H,E0),e(E0,whe),e(whe,_tr),e(E0,utr),e(E0,NO),e(NO,btr),e(E0,vtr),e(H,Ttr),e(H,y0),e(y0,Ahe),e(Ahe,Ftr),e(y0,Ctr),e(y0,qO),e(qO,Mtr),e(y0,Etr),e(H,ytr),e(H,w0),e(w0,Lhe),e(Lhe,wtr),e(w0,Atr),e(w0,OO),e(OO,Ltr),e(w0,Btr),e(H,xtr),e(H,A0),e(A0,Bhe),e(Bhe,ktr),e(A0,Rtr),e(A0,GO),e(GO,Str),e(A0,Ptr),e(H,$tr),e(H,L0),e(L0,xhe),e(xhe,Itr),e(L0,jtr),e(L0,XO),e(XO,Dtr),e(L0,Ntr),e(H,qtr),e(H,B0),e(B0,khe),e(khe,Otr),e(B0,Gtr),e(B0,VO),e(VO,Xtr),e(B0,Vtr),e(H,ztr),e(H,x0),e(x0,Rhe),e(Rhe,Wtr),e(x0,Qtr),e(x0,zO),e(zO,Htr),e(x0,Utr),e(po,Jtr),e(po,She),e(She,Ytr),e(po,Ktr),g(iw,po,null),b(d,SRe,u),b(d,wc,u),e(wc,k0),e(k0,Phe),g(dw,Phe,null),e(wc,Ztr),e(wc,$he),e($he,ear),b(d,PRe,u),b(d,Cr,u),g(cw,Cr,null),e(Cr,oar),e(Cr,Ac),e(Ac,rar),e(Ac,Ihe),e(Ihe,tar),e(Ac,aar),e(Ac,jhe),e(jhe,nar),e(Ac,sar),e(Cr,lar),e(Cr,fw),e(fw,iar),e(fw,Dhe),e(Dhe,dar),e(fw,car),e(Cr,far),e(Cr,ut),g(mw,ut,null),e(ut,mar),e(ut,Nhe),e(Nhe,gar),e(ut,har),e(ut,Lc),e(Lc,par),e(Lc,qhe),e(qhe,_ar),e(Lc,uar),e(Lc,Ohe),e(Ohe,bar),e(Lc,Tar),e(ut,Far),e(ut,Ghe),e(Ghe,Car),e(ut,Mar),g(gw,ut,null),e(Cr,Ear),e(Cr,_o),g(hw,_o,null),e(_o,yar),e(_o,Xhe),e(Xhe,war),e(_o,Aar),e(_o,Cn),e(Cn,Lar),e(Cn,Vhe),e(Vhe,Bar),e(Cn,xar),e(Cn,zhe),e(zhe,kar),e(Cn,Rar),e(Cn,Whe),e(Whe,Sar),e(Cn,Par),e(_o,$ar),e(_o,ge),e(ge,R0),e(R0,Qhe),e(Qhe,Iar),e(R0,jar),e(R0,WO),e(WO,Dar),e(R0,Nar),e(ge,qar),e(ge,S0),e(S0,Hhe),e(Hhe,Oar),e(S0,Gar),e(S0,QO),e(QO,Xar),e(S0,Var),e(ge,zar),e(ge,P0),e(P0,Uhe),e(Uhe,War),e(P0,Qar),e(P0,HO),e(HO,Har),e(P0,Uar),e(ge,Jar),e(ge,$0),e($0,Jhe),e(Jhe,Yar),e($0,Kar),e($0,UO),e(UO,Zar),e($0,enr),e(ge,onr),e(ge,I0),e(I0,Yhe),e(Yhe,rnr),e(I0,tnr),e(I0,JO),e(JO,anr),e(I0,nnr),e(ge,snr),e(ge,j0),e(j0,Khe),e(Khe,lnr),e(j0,inr),e(j0,YO),e(YO,dnr),e(j0,cnr),e(ge,fnr),e(ge,D0),e(D0,Zhe),e(Zhe,mnr),e(D0,gnr),e(D0,KO),e(KO,hnr),e(D0,pnr),e(ge,_nr),e(ge,N0),e(N0,epe),e(epe,unr),e(N0,bnr),e(N0,ZO),e(ZO,vnr),e(N0,Tnr),e(ge,Fnr),e(ge,q0),e(q0,ope),e(ope,Cnr),e(q0,Mnr),e(q0,eG),e(eG,Enr),e(q0,ynr),e(ge,wnr),e(ge,O0),e(O0,rpe),e(rpe,Anr),e(O0,Lnr),e(O0,oG),e(oG,Bnr),e(O0,xnr),e(ge,knr),e(ge,G0),e(G0,tpe),e(tpe,Rnr),e(G0,Snr),e(G0,rG),e(rG,Pnr),e(G0,$nr),e(_o,Inr),e(_o,ape),e(ape,jnr),e(_o,Dnr),g(pw,_o,null),b(d,$Re,u),b(d,Bc,u),e(Bc,X0),e(X0,npe),g(_w,npe,null),e(Bc,Nnr),e(Bc,spe),e(spe,qnr),b(d,IRe,u),b(d,Mr,u),g(uw,Mr,null),e(Mr,Onr),e(Mr,xc),e(xc,Gnr),e(xc,lpe),e(lpe,Xnr),e(xc,Vnr),e(xc,ipe),e(ipe,znr),e(xc,Wnr),e(Mr,Qnr),e(Mr,bw),e(bw,Hnr),e(bw,dpe),e(dpe,Unr),e(bw,Jnr),e(Mr,Ynr),e(Mr,bt),g(vw,bt,null),e(bt,Knr),e(bt,cpe),e(cpe,Znr),e(bt,esr),e(bt,kc),e(kc,osr),e(kc,fpe),e(fpe,rsr),e(kc,tsr),e(kc,mpe),e(mpe,asr),e(kc,nsr),e(bt,ssr),e(bt,gpe),e(gpe,lsr),e(bt,isr),g(Tw,bt,null),e(Mr,dsr),e(Mr,uo),g(Fw,uo,null),e(uo,csr),e(uo,hpe),e(hpe,fsr),e(uo,msr),e(uo,Mn),e(Mn,gsr),e(Mn,ppe),e(ppe,hsr),e(Mn,psr),e(Mn,_pe),e(_pe,_sr),e(Mn,usr),e(Mn,upe),e(upe,bsr),e(Mn,vsr),e(uo,Tsr),e(uo,Cw),e(Cw,V0),e(V0,bpe),e(bpe,Fsr),e(V0,Csr),e(V0,tG),e(tG,Msr),e(V0,Esr),e(Cw,ysr),e(Cw,z0),e(z0,vpe),e(vpe,wsr),e(z0,Asr),e(z0,aG),e(aG,Lsr),e(z0,Bsr),e(uo,xsr),e(uo,Tpe),e(Tpe,ksr),e(uo,Rsr),g(Mw,uo,null),b(d,jRe,u),b(d,Rc,u),e(Rc,W0),e(W0,Fpe),g(Ew,Fpe,null),e(Rc,Ssr),e(Rc,Cpe),e(Cpe,Psr),b(d,DRe,u),b(d,Er,u),g(yw,Er,null),e(Er,$sr),e(Er,Sc),e(Sc,Isr),e(Sc,Mpe),e(Mpe,jsr),e(Sc,Dsr),e(Sc,Epe),e(Epe,Nsr),e(Sc,qsr),e(Er,Osr),e(Er,ww),e(ww,Gsr),e(ww,ype),e(ype,Xsr),e(ww,Vsr),e(Er,zsr),e(Er,vt),g(Aw,vt,null),e(vt,Wsr),e(vt,wpe),e(wpe,Qsr),e(vt,Hsr),e(vt,Pc),e(Pc,Usr),e(Pc,Ape),e(Ape,Jsr),e(Pc,Ysr),e(Pc,Lpe),e(Lpe,Ksr),e(Pc,Zsr),e(vt,elr),e(vt,Bpe),e(Bpe,olr),e(vt,rlr),g(Lw,vt,null),e(Er,tlr),e(Er,bo),g(Bw,bo,null),e(bo,alr),e(bo,xpe),e(xpe,nlr),e(bo,slr),e(bo,En),e(En,llr),e(En,kpe),e(kpe,ilr),e(En,dlr),e(En,Rpe),e(Rpe,clr),e(En,flr),e(En,Spe),e(Spe,mlr),e(En,glr),e(bo,hlr),e(bo,Y),e(Y,Q0),e(Q0,Ppe),e(Ppe,plr),e(Q0,_lr),e(Q0,nG),e(nG,ulr),e(Q0,blr),e(Y,vlr),e(Y,H0),e(H0,$pe),e($pe,Tlr),e(H0,Flr),e(H0,sG),e(sG,Clr),e(H0,Mlr),e(Y,Elr),e(Y,U0),e(U0,Ipe),e(Ipe,ylr),e(U0,wlr),e(U0,lG),e(lG,Alr),e(U0,Llr),e(Y,Blr),e(Y,J0),e(J0,jpe),e(jpe,xlr),e(J0,klr),e(J0,iG),e(iG,Rlr),e(J0,Slr),e(Y,Plr),e(Y,Y0),e(Y0,Dpe),e(Dpe,$lr),e(Y0,Ilr),e(Y0,dG),e(dG,jlr),e(Y0,Dlr),e(Y,Nlr),e(Y,K0),e(K0,Npe),e(Npe,qlr),e(K0,Olr),e(K0,cG),e(cG,Glr),e(K0,Xlr),e(Y,Vlr),e(Y,Z0),e(Z0,qpe),e(qpe,zlr),e(Z0,Wlr),e(Z0,fG),e(fG,Qlr),e(Z0,Hlr),e(Y,Ulr),e(Y,eT),e(eT,Ope),e(Ope,Jlr),e(eT,Ylr),e(eT,mG),e(mG,Klr),e(eT,Zlr),e(Y,eir),e(Y,oT),e(oT,Gpe),e(Gpe,oir),e(oT,rir),e(oT,gG),e(gG,tir),e(oT,air),e(Y,nir),e(Y,rT),e(rT,Xpe),e(Xpe,sir),e(rT,lir),e(rT,hG),e(hG,iir),e(rT,dir),e(Y,cir),e(Y,tT),e(tT,Vpe),e(Vpe,fir),e(tT,mir),e(tT,pG),e(pG,gir),e(tT,hir),e(Y,pir),e(Y,aT),e(aT,zpe),e(zpe,_ir),e(aT,uir),e(aT,_G),e(_G,bir),e(aT,vir),e(Y,Tir),e(Y,nT),e(nT,Wpe),e(Wpe,Fir),e(nT,Cir),e(nT,uG),e(uG,Mir),e(nT,Eir),e(Y,yir),e(Y,sT),e(sT,Qpe),e(Qpe,wir),e(sT,Air),e(sT,bG),e(bG,Lir),e(sT,Bir),e(Y,xir),e(Y,lT),e(lT,Hpe),e(Hpe,kir),e(lT,Rir),e(lT,vG),e(vG,Sir),e(lT,Pir),e(Y,$ir),e(Y,iT),e(iT,Upe),e(Upe,Iir),e(iT,jir),e(iT,TG),e(TG,Dir),e(iT,Nir),e(Y,qir),e(Y,dT),e(dT,Jpe),e(Jpe,Oir),e(dT,Gir),e(dT,FG),e(FG,Xir),e(dT,Vir),e(Y,zir),e(Y,cT),e(cT,Ype),e(Ype,Wir),e(cT,Qir),e(cT,CG),e(CG,Hir),e(cT,Uir),e(Y,Jir),e(Y,fT),e(fT,Kpe),e(Kpe,Yir),e(fT,Kir),e(fT,MG),e(MG,Zir),e(fT,edr),e(Y,odr),e(Y,mT),e(mT,Zpe),e(Zpe,rdr),e(mT,tdr),e(mT,EG),e(EG,adr),e(mT,ndr),e(bo,sdr),e(bo,e_e),e(e_e,ldr),e(bo,idr),g(xw,bo,null),b(d,NRe,u),b(d,$c,u),e($c,gT),e(gT,o_e),g(kw,o_e,null),e($c,ddr),e($c,r_e),e(r_e,cdr),b(d,qRe,u),b(d,yr,u),g(Rw,yr,null),e(yr,fdr),e(yr,Ic),e(Ic,mdr),e(Ic,t_e),e(t_e,gdr),e(Ic,hdr),e(Ic,a_e),e(a_e,pdr),e(Ic,_dr),e(yr,udr),e(yr,Sw),e(Sw,bdr),e(Sw,n_e),e(n_e,vdr),e(Sw,Tdr),e(yr,Fdr),e(yr,Tt),g(Pw,Tt,null),e(Tt,Cdr),e(Tt,s_e),e(s_e,Mdr),e(Tt,Edr),e(Tt,jc),e(jc,ydr),e(jc,l_e),e(l_e,wdr),e(jc,Adr),e(jc,i_e),e(i_e,Ldr),e(jc,Bdr),e(Tt,xdr),e(Tt,d_e),e(d_e,kdr),e(Tt,Rdr),g($w,Tt,null),e(yr,Sdr),e(yr,vo),g(Iw,vo,null),e(vo,Pdr),e(vo,c_e),e(c_e,$dr),e(vo,Idr),e(vo,yn),e(yn,jdr),e(yn,f_e),e(f_e,Ddr),e(yn,Ndr),e(yn,m_e),e(m_e,qdr),e(yn,Odr),e(yn,g_e),e(g_e,Gdr),e(yn,Xdr),e(vo,Vdr),e(vo,ue),e(ue,hT),e(hT,h_e),e(h_e,zdr),e(hT,Wdr),e(hT,yG),e(yG,Qdr),e(hT,Hdr),e(ue,Udr),e(ue,pT),e(pT,p_e),e(p_e,Jdr),e(pT,Ydr),e(pT,wG),e(wG,Kdr),e(pT,Zdr),e(ue,ecr),e(ue,_T),e(_T,__e),e(__e,ocr),e(_T,rcr),e(_T,AG),e(AG,tcr),e(_T,acr),e(ue,ncr),e(ue,uT),e(uT,u_e),e(u_e,scr),e(uT,lcr),e(uT,LG),e(LG,icr),e(uT,dcr),e(ue,ccr),e(ue,bT),e(bT,b_e),e(b_e,fcr),e(bT,mcr),e(bT,BG),e(BG,gcr),e(bT,hcr),e(ue,pcr),e(ue,vT),e(vT,v_e),e(v_e,_cr),e(vT,ucr),e(vT,xG),e(xG,bcr),e(vT,vcr),e(ue,Tcr),e(ue,TT),e(TT,T_e),e(T_e,Fcr),e(TT,Ccr),e(TT,kG),e(kG,Mcr),e(TT,Ecr),e(ue,ycr),e(ue,FT),e(FT,F_e),e(F_e,wcr),e(FT,Acr),e(FT,RG),e(RG,Lcr),e(FT,Bcr),e(ue,xcr),e(ue,CT),e(CT,C_e),e(C_e,kcr),e(CT,Rcr),e(CT,SG),e(SG,Scr),e(CT,Pcr),e(ue,$cr),e(ue,MT),e(MT,M_e),e(M_e,Icr),e(MT,jcr),e(MT,PG),e(PG,Dcr),e(MT,Ncr),e(vo,qcr),e(vo,E_e),e(E_e,Ocr),e(vo,Gcr),g(jw,vo,null),b(d,ORe,u),b(d,Dc,u),e(Dc,ET),e(ET,y_e),g(Dw,y_e,null),e(Dc,Xcr),e(Dc,w_e),e(w_e,Vcr),b(d,GRe,u),b(d,wr,u),g(Nw,wr,null),e(wr,zcr),e(wr,Nc),e(Nc,Wcr),e(Nc,A_e),e(A_e,Qcr),e(Nc,Hcr),e(Nc,L_e),e(L_e,Ucr),e(Nc,Jcr),e(wr,Ycr),e(wr,qw),e(qw,Kcr),e(qw,B_e),e(B_e,Zcr),e(qw,efr),e(wr,ofr),e(wr,Ft),g(Ow,Ft,null),e(Ft,rfr),e(Ft,x_e),e(x_e,tfr),e(Ft,afr),e(Ft,qc),e(qc,nfr),e(qc,k_e),e(k_e,sfr),e(qc,lfr),e(qc,R_e),e(R_e,ifr),e(qc,dfr),e(Ft,cfr),e(Ft,S_e),e(S_e,ffr),e(Ft,mfr),g(Gw,Ft,null),e(wr,gfr),e(wr,To),g(Xw,To,null),e(To,hfr),e(To,P_e),e(P_e,pfr),e(To,_fr),e(To,wn),e(wn,ufr),e(wn,$_e),e($_e,bfr),e(wn,vfr),e(wn,I_e),e(I_e,Tfr),e(wn,Ffr),e(wn,j_e),e(j_e,Cfr),e(wn,Mfr),e(To,Efr),e(To,V),e(V,yT),e(yT,D_e),e(D_e,yfr),e(yT,wfr),e(yT,$G),e($G,Afr),e(yT,Lfr),e(V,Bfr),e(V,wT),e(wT,N_e),e(N_e,xfr),e(wT,kfr),e(wT,IG),e(IG,Rfr),e(wT,Sfr),e(V,Pfr),e(V,AT),e(AT,q_e),e(q_e,$fr),e(AT,Ifr),e(AT,jG),e(jG,jfr),e(AT,Dfr),e(V,Nfr),e(V,LT),e(LT,O_e),e(O_e,qfr),e(LT,Ofr),e(LT,DG),e(DG,Gfr),e(LT,Xfr),e(V,Vfr),e(V,BT),e(BT,G_e),e(G_e,zfr),e(BT,Wfr),e(BT,NG),e(NG,Qfr),e(BT,Hfr),e(V,Ufr),e(V,xT),e(xT,X_e),e(X_e,Jfr),e(xT,Yfr),e(xT,qG),e(qG,Kfr),e(xT,Zfr),e(V,emr),e(V,kT),e(kT,V_e),e(V_e,omr),e(kT,rmr),e(kT,OG),e(OG,tmr),e(kT,amr),e(V,nmr),e(V,RT),e(RT,z_e),e(z_e,smr),e(RT,lmr),e(RT,GG),e(GG,imr),e(RT,dmr),e(V,cmr),e(V,ST),e(ST,W_e),e(W_e,fmr),e(ST,mmr),e(ST,XG),e(XG,gmr),e(ST,hmr),e(V,pmr),e(V,PT),e(PT,Q_e),e(Q_e,_mr),e(PT,umr),e(PT,VG),e(VG,bmr),e(PT,vmr),e(V,Tmr),e(V,$T),e($T,H_e),e(H_e,Fmr),e($T,Cmr),e($T,zG),e(zG,Mmr),e($T,Emr),e(V,ymr),e(V,IT),e(IT,U_e),e(U_e,wmr),e(IT,Amr),e(IT,WG),e(WG,Lmr),e(IT,Bmr),e(V,xmr),e(V,jT),e(jT,J_e),e(J_e,kmr),e(jT,Rmr),e(jT,QG),e(QG,Smr),e(jT,Pmr),e(V,$mr),e(V,DT),e(DT,Y_e),e(Y_e,Imr),e(DT,jmr),e(DT,HG),e(HG,Dmr),e(DT,Nmr),e(V,qmr),e(V,NT),e(NT,K_e),e(K_e,Omr),e(NT,Gmr),e(NT,UG),e(UG,Xmr),e(NT,Vmr),e(V,zmr),e(V,qT),e(qT,Z_e),e(Z_e,Wmr),e(qT,Qmr),e(qT,JG),e(JG,Hmr),e(qT,Umr),e(V,Jmr),e(V,OT),e(OT,eue),e(eue,Ymr),e(OT,Kmr),e(OT,YG),e(YG,Zmr),e(OT,egr),e(V,ogr),e(V,GT),e(GT,oue),e(oue,rgr),e(GT,tgr),e(GT,KG),e(KG,agr),e(GT,ngr),e(V,sgr),e(V,XT),e(XT,rue),e(rue,lgr),e(XT,igr),e(XT,ZG),e(ZG,dgr),e(XT,cgr),e(V,fgr),e(V,VT),e(VT,tue),e(tue,mgr),e(VT,ggr),e(VT,eX),e(eX,hgr),e(VT,pgr),e(V,_gr),e(V,zT),e(zT,aue),e(aue,ugr),e(zT,bgr),e(zT,oX),e(oX,vgr),e(zT,Tgr),e(V,Fgr),e(V,WT),e(WT,nue),e(nue,Cgr),e(WT,Mgr),e(WT,rX),e(rX,Egr),e(WT,ygr),e(V,wgr),e(V,QT),e(QT,sue),e(sue,Agr),e(QT,Lgr),e(QT,tX),e(tX,Bgr),e(QT,xgr),e(V,kgr),e(V,HT),e(HT,lue),e(lue,Rgr),e(HT,Sgr),e(HT,aX),e(aX,Pgr),e(HT,$gr),e(V,Igr),e(V,UT),e(UT,iue),e(iue,jgr),e(UT,Dgr),e(UT,nX),e(nX,Ngr),e(UT,qgr),e(To,Ogr),e(To,due),e(due,Ggr),e(To,Xgr),g(Vw,To,null),b(d,XRe,u),b(d,Oc,u),e(Oc,JT),e(JT,cue),g(zw,cue,null),e(Oc,Vgr),e(Oc,fue),e(fue,zgr),b(d,VRe,u),b(d,Ar,u),g(Ww,Ar,null),e(Ar,Wgr),e(Ar,Gc),e(Gc,Qgr),e(Gc,mue),e(mue,Hgr),e(Gc,Ugr),e(Gc,gue),e(gue,Jgr),e(Gc,Ygr),e(Ar,Kgr),e(Ar,Qw),e(Qw,Zgr),e(Qw,hue),e(hue,ehr),e(Qw,ohr),e(Ar,rhr),e(Ar,Ct),g(Hw,Ct,null),e(Ct,thr),e(Ct,pue),e(pue,ahr),e(Ct,nhr),e(Ct,Xc),e(Xc,shr),e(Xc,_ue),e(_ue,lhr),e(Xc,ihr),e(Xc,uue),e(uue,dhr),e(Xc,chr),e(Ct,fhr),e(Ct,bue),e(bue,mhr),e(Ct,ghr),g(Uw,Ct,null),e(Ar,hhr),e(Ar,Fo),g(Jw,Fo,null),e(Fo,phr),e(Fo,vue),e(vue,_hr),e(Fo,uhr),e(Fo,An),e(An,bhr),e(An,Tue),e(Tue,vhr),e(An,Thr),e(An,Fue),e(Fue,Fhr),e(An,Chr),e(An,Cue),e(Cue,Mhr),e(An,Ehr),e(Fo,yhr),e(Fo,ae),e(ae,YT),e(YT,Mue),e(Mue,whr),e(YT,Ahr),e(YT,sX),e(sX,Lhr),e(YT,Bhr),e(ae,xhr),e(ae,KT),e(KT,Eue),e(Eue,khr),e(KT,Rhr),e(KT,lX),e(lX,Shr),e(KT,Phr),e(ae,$hr),e(ae,ZT),e(ZT,yue),e(yue,Ihr),e(ZT,jhr),e(ZT,iX),e(iX,Dhr),e(ZT,Nhr),e(ae,qhr),e(ae,e8),e(e8,wue),e(wue,Ohr),e(e8,Ghr),e(e8,dX),e(dX,Xhr),e(e8,Vhr),e(ae,zhr),e(ae,o8),e(o8,Aue),e(Aue,Whr),e(o8,Qhr),e(o8,cX),e(cX,Hhr),e(o8,Uhr),e(ae,Jhr),e(ae,r8),e(r8,Lue),e(Lue,Yhr),e(r8,Khr),e(r8,fX),e(fX,Zhr),e(r8,epr),e(ae,opr),e(ae,t8),e(t8,Bue),e(Bue,rpr),e(t8,tpr),e(t8,mX),e(mX,apr),e(t8,npr),e(ae,spr),e(ae,a8),e(a8,xue),e(xue,lpr),e(a8,ipr),e(a8,gX),e(gX,dpr),e(a8,cpr),e(ae,fpr),e(ae,n8),e(n8,kue),e(kue,mpr),e(n8,gpr),e(n8,hX),e(hX,hpr),e(n8,ppr),e(ae,_pr),e(ae,s8),e(s8,Rue),e(Rue,upr),e(s8,bpr),e(s8,pX),e(pX,vpr),e(s8,Tpr),e(ae,Fpr),e(ae,l8),e(l8,Sue),e(Sue,Cpr),e(l8,Mpr),e(l8,_X),e(_X,Epr),e(l8,ypr),e(ae,wpr),e(ae,i8),e(i8,Pue),e(Pue,Apr),e(i8,Lpr),e(i8,uX),e(uX,Bpr),e(i8,xpr),e(ae,kpr),e(ae,d8),e(d8,$ue),e($ue,Rpr),e(d8,Spr),e(d8,bX),e(bX,Ppr),e(d8,$pr),e(ae,Ipr),e(ae,c8),e(c8,Iue),e(Iue,jpr),e(c8,Dpr),e(c8,vX),e(vX,Npr),e(c8,qpr),e(ae,Opr),e(ae,f8),e(f8,jue),e(jue,Gpr),e(f8,Xpr),e(f8,TX),e(TX,Vpr),e(f8,zpr),e(ae,Wpr),e(ae,m8),e(m8,Due),e(Due,Qpr),e(m8,Hpr),e(m8,FX),e(FX,Upr),e(m8,Jpr),e(ae,Ypr),e(ae,g8),e(g8,Nue),e(Nue,Kpr),e(g8,Zpr),e(g8,CX),e(CX,e_r),e(g8,o_r),e(Fo,r_r),e(Fo,que),e(que,t_r),e(Fo,a_r),g(Yw,Fo,null),b(d,zRe,u),b(d,Vc,u),e(Vc,h8),e(h8,Oue),g(Kw,Oue,null),e(Vc,n_r),e(Vc,Gue),e(Gue,s_r),b(d,WRe,u),b(d,Lr,u),g(Zw,Lr,null),e(Lr,l_r),e(Lr,zc),e(zc,i_r),e(zc,Xue),e(Xue,d_r),e(zc,c_r),e(zc,Vue),e(Vue,f_r),e(zc,m_r),e(Lr,g_r),e(Lr,eA),e(eA,h_r),e(eA,zue),e(zue,p_r),e(eA,__r),e(Lr,u_r),e(Lr,Mt),g(oA,Mt,null),e(Mt,b_r),e(Mt,Wue),e(Wue,v_r),e(Mt,T_r),e(Mt,Wc),e(Wc,F_r),e(Wc,Que),e(Que,C_r),e(Wc,M_r),e(Wc,Hue),e(Hue,E_r),e(Wc,y_r),e(Mt,w_r),e(Mt,Uue),e(Uue,A_r),e(Mt,L_r),g(rA,Mt,null),e(Lr,B_r),e(Lr,Co),g(tA,Co,null),e(Co,x_r),e(Co,Jue),e(Jue,k_r),e(Co,R_r),e(Co,Ln),e(Ln,S_r),e(Ln,Yue),e(Yue,P_r),e(Ln,$_r),e(Ln,Kue),e(Kue,I_r),e(Ln,j_r),e(Ln,Zue),e(Zue,D_r),e(Ln,N_r),e(Co,q_r),e(Co,e1e),e(e1e,p8),e(p8,o1e),e(o1e,O_r),e(p8,G_r),e(p8,MX),e(MX,X_r),e(p8,V_r),e(Co,z_r),e(Co,r1e),e(r1e,W_r),e(Co,Q_r),g(aA,Co,null),b(d,QRe,u),b(d,Qc,u),e(Qc,_8),e(_8,t1e),g(nA,t1e,null),e(Qc,H_r),e(Qc,a1e),e(a1e,U_r),b(d,HRe,u),b(d,Br,u),g(sA,Br,null),e(Br,J_r),e(Br,Hc),e(Hc,Y_r),e(Hc,n1e),e(n1e,K_r),e(Hc,Z_r),e(Hc,s1e),e(s1e,eur),e(Hc,our),e(Br,rur),e(Br,lA),e(lA,tur),e(lA,l1e),e(l1e,aur),e(lA,nur),e(Br,sur),e(Br,Et),g(iA,Et,null),e(Et,lur),e(Et,i1e),e(i1e,iur),e(Et,dur),e(Et,Uc),e(Uc,cur),e(Uc,d1e),e(d1e,fur),e(Uc,mur),e(Uc,c1e),e(c1e,gur),e(Uc,hur),e(Et,pur),e(Et,f1e),e(f1e,_ur),e(Et,uur),g(dA,Et,null),e(Br,bur),e(Br,Mo),g(cA,Mo,null),e(Mo,vur),e(Mo,m1e),e(m1e,Tur),e(Mo,Fur),e(Mo,Bn),e(Bn,Cur),e(Bn,g1e),e(g1e,Mur),e(Bn,Eur),e(Bn,h1e),e(h1e,yur),e(Bn,wur),e(Bn,p1e),e(p1e,Aur),e(Bn,Lur),e(Mo,Bur),e(Mo,K),e(K,u8),e(u8,_1e),e(_1e,xur),e(u8,kur),e(u8,EX),e(EX,Rur),e(u8,Sur),e(K,Pur),e(K,b8),e(b8,u1e),e(u1e,$ur),e(b8,Iur),e(b8,yX),e(yX,jur),e(b8,Dur),e(K,Nur),e(K,v8),e(v8,b1e),e(b1e,qur),e(v8,Our),e(v8,wX),e(wX,Gur),e(v8,Xur),e(K,Vur),e(K,T8),e(T8,v1e),e(v1e,zur),e(T8,Wur),e(T8,AX),e(AX,Qur),e(T8,Hur),e(K,Uur),e(K,F8),e(F8,T1e),e(T1e,Jur),e(F8,Yur),e(F8,LX),e(LX,Kur),e(F8,Zur),e(K,e1r),e(K,C8),e(C8,F1e),e(F1e,o1r),e(C8,r1r),e(C8,BX),e(BX,t1r),e(C8,a1r),e(K,n1r),e(K,M8),e(M8,C1e),e(C1e,s1r),e(M8,l1r),e(M8,xX),e(xX,i1r),e(M8,d1r),e(K,c1r),e(K,E8),e(E8,M1e),e(M1e,f1r),e(E8,m1r),e(E8,kX),e(kX,g1r),e(E8,h1r),e(K,p1r),e(K,y8),e(y8,E1e),e(E1e,_1r),e(y8,u1r),e(y8,RX),e(RX,b1r),e(y8,v1r),e(K,T1r),e(K,w8),e(w8,y1e),e(y1e,F1r),e(w8,C1r),e(w8,SX),e(SX,M1r),e(w8,E1r),e(K,y1r),e(K,A8),e(A8,w1e),e(w1e,w1r),e(A8,A1r),e(A8,PX),e(PX,L1r),e(A8,B1r),e(K,x1r),e(K,L8),e(L8,A1e),e(A1e,k1r),e(L8,R1r),e(L8,$X),e($X,S1r),e(L8,P1r),e(K,$1r),e(K,B8),e(B8,L1e),e(L1e,I1r),e(B8,j1r),e(B8,IX),e(IX,D1r),e(B8,N1r),e(K,q1r),e(K,x8),e(x8,B1e),e(B1e,O1r),e(x8,G1r),e(x8,jX),e(jX,X1r),e(x8,V1r),e(K,z1r),e(K,k8),e(k8,x1e),e(x1e,W1r),e(k8,Q1r),e(k8,DX),e(DX,H1r),e(k8,U1r),e(K,J1r),e(K,R8),e(R8,k1e),e(k1e,Y1r),e(R8,K1r),e(R8,NX),e(NX,Z1r),e(R8,ebr),e(K,obr),e(K,S8),e(S8,R1e),e(R1e,rbr),e(S8,tbr),e(S8,qX),e(qX,abr),e(S8,nbr),e(K,sbr),e(K,P8),e(P8,S1e),e(S1e,lbr),e(P8,ibr),e(P8,OX),e(OX,dbr),e(P8,cbr),e(K,fbr),e(K,$8),e($8,P1e),e(P1e,mbr),e($8,gbr),e($8,GX),e(GX,hbr),e($8,pbr),e(K,_br),e(K,I8),e(I8,$1e),e($1e,ubr),e(I8,bbr),e(I8,XX),e(XX,vbr),e(I8,Tbr),e(Mo,Fbr),e(Mo,I1e),e(I1e,Cbr),e(Mo,Mbr),g(fA,Mo,null),b(d,URe,u),b(d,Jc,u),e(Jc,j8),e(j8,j1e),g(mA,j1e,null),e(Jc,Ebr),e(Jc,D1e),e(D1e,ybr),b(d,JRe,u),b(d,xr,u),g(gA,xr,null),e(xr,wbr),e(xr,Yc),e(Yc,Abr),e(Yc,N1e),e(N1e,Lbr),e(Yc,Bbr),e(Yc,q1e),e(q1e,xbr),e(Yc,kbr),e(xr,Rbr),e(xr,hA),e(hA,Sbr),e(hA,O1e),e(O1e,Pbr),e(hA,$br),e(xr,Ibr),e(xr,yt),g(pA,yt,null),e(yt,jbr),e(yt,G1e),e(G1e,Dbr),e(yt,Nbr),e(yt,Kc),e(Kc,qbr),e(Kc,X1e),e(X1e,Obr),e(Kc,Gbr),e(Kc,V1e),e(V1e,Xbr),e(Kc,Vbr),e(yt,zbr),e(yt,z1e),e(z1e,Wbr),e(yt,Qbr),g(_A,yt,null),e(xr,Hbr),e(xr,Eo),g(uA,Eo,null),e(Eo,Ubr),e(Eo,W1e),e(W1e,Jbr),e(Eo,Ybr),e(Eo,xn),e(xn,Kbr),e(xn,Q1e),e(Q1e,Zbr),e(xn,e5r),e(xn,H1e),e(H1e,o5r),e(xn,r5r),e(xn,U1e),e(U1e,t5r),e(xn,a5r),e(Eo,n5r),e(Eo,Z),e(Z,D8),e(D8,J1e),e(J1e,s5r),e(D8,l5r),e(D8,VX),e(VX,i5r),e(D8,d5r),e(Z,c5r),e(Z,N8),e(N8,Y1e),e(Y1e,f5r),e(N8,m5r),e(N8,zX),e(zX,g5r),e(N8,h5r),e(Z,p5r),e(Z,q8),e(q8,K1e),e(K1e,_5r),e(q8,u5r),e(q8,WX),e(WX,b5r),e(q8,v5r),e(Z,T5r),e(Z,O8),e(O8,Z1e),e(Z1e,F5r),e(O8,C5r),e(O8,QX),e(QX,M5r),e(O8,E5r),e(Z,y5r),e(Z,G8),e(G8,ebe),e(ebe,w5r),e(G8,A5r),e(G8,HX),e(HX,L5r),e(G8,B5r),e(Z,x5r),e(Z,X8),e(X8,obe),e(obe,k5r),e(X8,R5r),e(X8,UX),e(UX,S5r),e(X8,P5r),e(Z,$5r),e(Z,V8),e(V8,rbe),e(rbe,I5r),e(V8,j5r),e(V8,JX),e(JX,D5r),e(V8,N5r),e(Z,q5r),e(Z,z8),e(z8,tbe),e(tbe,O5r),e(z8,G5r),e(z8,YX),e(YX,X5r),e(z8,V5r),e(Z,z5r),e(Z,W8),e(W8,abe),e(abe,W5r),e(W8,Q5r),e(W8,KX),e(KX,H5r),e(W8,U5r),e(Z,J5r),e(Z,Q8),e(Q8,nbe),e(nbe,Y5r),e(Q8,K5r),e(Q8,ZX),e(ZX,Z5r),e(Q8,e2r),e(Z,o2r),e(Z,H8),e(H8,sbe),e(sbe,r2r),e(H8,t2r),e(H8,eV),e(eV,a2r),e(H8,n2r),e(Z,s2r),e(Z,U8),e(U8,lbe),e(lbe,l2r),e(U8,i2r),e(U8,oV),e(oV,d2r),e(U8,c2r),e(Z,f2r),e(Z,J8),e(J8,ibe),e(ibe,m2r),e(J8,g2r),e(J8,rV),e(rV,h2r),e(J8,p2r),e(Z,_2r),e(Z,Y8),e(Y8,dbe),e(dbe,u2r),e(Y8,b2r),e(Y8,tV),e(tV,v2r),e(Y8,T2r),e(Z,F2r),e(Z,K8),e(K8,cbe),e(cbe,C2r),e(K8,M2r),e(K8,aV),e(aV,E2r),e(K8,y2r),e(Z,w2r),e(Z,Z8),e(Z8,fbe),e(fbe,A2r),e(Z8,L2r),e(Z8,nV),e(nV,B2r),e(Z8,x2r),e(Z,k2r),e(Z,eF),e(eF,mbe),e(mbe,R2r),e(eF,S2r),e(eF,sV),e(sV,P2r),e(eF,$2r),e(Z,I2r),e(Z,oF),e(oF,gbe),e(gbe,j2r),e(oF,D2r),e(oF,lV),e(lV,N2r),e(oF,q2r),e(Z,O2r),e(Z,rF),e(rF,hbe),e(hbe,G2r),e(rF,X2r),e(rF,iV),e(iV,V2r),e(rF,z2r),e(Eo,W2r),e(Eo,pbe),e(pbe,Q2r),e(Eo,H2r),g(bA,Eo,null),b(d,YRe,u),b(d,Zc,u),e(Zc,tF),e(tF,_be),g(vA,_be,null),e(Zc,U2r),e(Zc,ube),e(ube,J2r),b(d,KRe,u),b(d,kr,u),g(TA,kr,null),e(kr,Y2r),e(kr,ef),e(ef,K2r),e(ef,bbe),e(bbe,Z2r),e(ef,evr),e(ef,vbe),e(vbe,ovr),e(ef,rvr),e(kr,tvr),e(kr,FA),e(FA,avr),e(FA,Tbe),e(Tbe,nvr),e(FA,svr),e(kr,lvr),e(kr,wt),g(CA,wt,null),e(wt,ivr),e(wt,Fbe),e(Fbe,dvr),e(wt,cvr),e(wt,of),e(of,fvr),e(of,Cbe),e(Cbe,mvr),e(of,gvr),e(of,Mbe),e(Mbe,hvr),e(of,pvr),e(wt,_vr),e(wt,Ebe),e(Ebe,uvr),e(wt,bvr),g(MA,wt,null),e(kr,vvr),e(kr,yo),g(EA,yo,null),e(yo,Tvr),e(yo,ybe),e(ybe,Fvr),e(yo,Cvr),e(yo,kn),e(kn,Mvr),e(kn,wbe),e(wbe,Evr),e(kn,yvr),e(kn,Abe),e(Abe,wvr),e(kn,Avr),e(kn,Lbe),e(Lbe,Lvr),e(kn,Bvr),e(yo,xvr),e(yo,Bbe),e(Bbe,aF),e(aF,xbe),e(xbe,kvr),e(aF,Rvr),e(aF,dV),e(dV,Svr),e(aF,Pvr),e(yo,$vr),e(yo,kbe),e(kbe,Ivr),e(yo,jvr),g(yA,yo,null),b(d,ZRe,u),b(d,rf,u),e(rf,nF),e(nF,Rbe),g(wA,Rbe,null),e(rf,Dvr),e(rf,Sbe),e(Sbe,Nvr),b(d,eSe,u),b(d,Rr,u),g(AA,Rr,null),e(Rr,qvr),e(Rr,tf),e(tf,Ovr),e(tf,Pbe),e(Pbe,Gvr),e(tf,Xvr),e(tf,$be),e($be,Vvr),e(tf,zvr),e(Rr,Wvr),e(Rr,LA),e(LA,Qvr),e(LA,Ibe),e(Ibe,Hvr),e(LA,Uvr),e(Rr,Jvr),e(Rr,At),g(BA,At,null),e(At,Yvr),e(At,jbe),e(jbe,Kvr),e(At,Zvr),e(At,af),e(af,e6r),e(af,Dbe),e(Dbe,o6r),e(af,r6r),e(af,Nbe),e(Nbe,t6r),e(af,a6r),e(At,n6r),e(At,qbe),e(qbe,s6r),e(At,l6r),g(xA,At,null),e(Rr,i6r),e(Rr,wo),g(kA,wo,null),e(wo,d6r),e(wo,Obe),e(Obe,c6r),e(wo,f6r),e(wo,Rn),e(Rn,m6r),e(Rn,Gbe),e(Gbe,g6r),e(Rn,h6r),e(Rn,Xbe),e(Xbe,p6r),e(Rn,_6r),e(Rn,Vbe),e(Vbe,u6r),e(Rn,b6r),e(wo,v6r),e(wo,zbe),e(zbe,sF),e(sF,Wbe),e(Wbe,T6r),e(sF,F6r),e(sF,cV),e(cV,C6r),e(sF,M6r),e(wo,E6r),e(wo,Qbe),e(Qbe,y6r),e(wo,w6r),g(RA,wo,null),b(d,oSe,u),b(d,nf,u),e(nf,lF),e(lF,Hbe),g(SA,Hbe,null),e(nf,A6r),e(nf,Ube),e(Ube,L6r),b(d,rSe,u),b(d,Sr,u),g(PA,Sr,null),e(Sr,B6r),e(Sr,sf),e(sf,x6r),e(sf,Jbe),e(Jbe,k6r),e(sf,R6r),e(sf,Ybe),e(Ybe,S6r),e(sf,P6r),e(Sr,$6r),e(Sr,$A),e($A,I6r),e($A,Kbe),e(Kbe,j6r),e($A,D6r),e(Sr,N6r),e(Sr,Lt),g(IA,Lt,null),e(Lt,q6r),e(Lt,Zbe),e(Zbe,O6r),e(Lt,G6r),e(Lt,lf),e(lf,X6r),e(lf,e5e),e(e5e,V6r),e(lf,z6r),e(lf,o5e),e(o5e,W6r),e(lf,Q6r),e(Lt,H6r),e(Lt,r5e),e(r5e,U6r),e(Lt,J6r),g(jA,Lt,null),e(Sr,Y6r),e(Sr,Ao),g(DA,Ao,null),e(Ao,K6r),e(Ao,t5e),e(t5e,Z6r),e(Ao,e0r),e(Ao,Sn),e(Sn,o0r),e(Sn,a5e),e(a5e,r0r),e(Sn,t0r),e(Sn,n5e),e(n5e,a0r),e(Sn,n0r),e(Sn,s5e),e(s5e,s0r),e(Sn,l0r),e(Ao,i0r),e(Ao,z),e(z,iF),e(iF,l5e),e(l5e,d0r),e(iF,c0r),e(iF,fV),e(fV,f0r),e(iF,m0r),e(z,g0r),e(z,dF),e(dF,i5e),e(i5e,h0r),e(dF,p0r),e(dF,mV),e(mV,_0r),e(dF,u0r),e(z,b0r),e(z,cF),e(cF,d5e),e(d5e,v0r),e(cF,T0r),e(cF,gV),e(gV,F0r),e(cF,C0r),e(z,M0r),e(z,fF),e(fF,c5e),e(c5e,E0r),e(fF,y0r),e(fF,hV),e(hV,w0r),e(fF,A0r),e(z,L0r),e(z,mF),e(mF,f5e),e(f5e,B0r),e(mF,x0r),e(mF,pV),e(pV,k0r),e(mF,R0r),e(z,S0r),e(z,gF),e(gF,m5e),e(m5e,P0r),e(gF,$0r),e(gF,_V),e(_V,I0r),e(gF,j0r),e(z,D0r),e(z,hF),e(hF,g5e),e(g5e,N0r),e(hF,q0r),e(hF,uV),e(uV,O0r),e(hF,G0r),e(z,X0r),e(z,pF),e(pF,h5e),e(h5e,V0r),e(pF,z0r),e(pF,bV),e(bV,W0r),e(pF,Q0r),e(z,H0r),e(z,_F),e(_F,p5e),e(p5e,U0r),e(_F,J0r),e(_F,vV),e(vV,Y0r),e(_F,K0r),e(z,Z0r),e(z,uF),e(uF,_5e),e(_5e,eTr),e(uF,oTr),e(uF,TV),e(TV,rTr),e(uF,tTr),e(z,aTr),e(z,bF),e(bF,u5e),e(u5e,nTr),e(bF,sTr),e(bF,FV),e(FV,lTr),e(bF,iTr),e(z,dTr),e(z,vF),e(vF,b5e),e(b5e,cTr),e(vF,fTr),e(vF,CV),e(CV,mTr),e(vF,gTr),e(z,hTr),e(z,TF),e(TF,v5e),e(v5e,pTr),e(TF,_Tr),e(TF,MV),e(MV,uTr),e(TF,bTr),e(z,vTr),e(z,FF),e(FF,T5e),e(T5e,TTr),e(FF,FTr),e(FF,EV),e(EV,CTr),e(FF,MTr),e(z,ETr),e(z,CF),e(CF,F5e),e(F5e,yTr),e(CF,wTr),e(CF,yV),e(yV,ATr),e(CF,LTr),e(z,BTr),e(z,MF),e(MF,C5e),e(C5e,xTr),e(MF,kTr),e(MF,wV),e(wV,RTr),e(MF,STr),e(z,PTr),e(z,EF),e(EF,M5e),e(M5e,$Tr),e(EF,ITr),e(EF,AV),e(AV,jTr),e(EF,DTr),e(z,NTr),e(z,yF),e(yF,E5e),e(E5e,qTr),e(yF,OTr),e(yF,LV),e(LV,GTr),e(yF,XTr),e(z,VTr),e(z,wF),e(wF,y5e),e(y5e,zTr),e(wF,WTr),e(wF,BV),e(BV,QTr),e(wF,HTr),e(z,UTr),e(z,AF),e(AF,w5e),e(w5e,JTr),e(AF,YTr),e(AF,xV),e(xV,KTr),e(AF,ZTr),e(z,e8r),e(z,LF),e(LF,A5e),e(A5e,o8r),e(LF,r8r),e(LF,kV),e(kV,t8r),e(LF,a8r),e(z,n8r),e(z,BF),e(BF,L5e),e(L5e,s8r),e(BF,l8r),e(BF,RV),e(RV,i8r),e(BF,d8r),e(z,c8r),e(z,xF),e(xF,B5e),e(B5e,f8r),e(xF,m8r),e(xF,SV),e(SV,g8r),e(xF,h8r),e(z,p8r),e(z,kF),e(kF,x5e),e(x5e,_8r),e(kF,u8r),e(kF,PV),e(PV,b8r),e(kF,v8r),e(z,T8r),e(z,RF),e(RF,k5e),e(k5e,F8r),e(RF,C8r),e(RF,$V),e($V,M8r),e(RF,E8r),e(Ao,y8r),e(Ao,R5e),e(R5e,w8r),e(Ao,A8r),g(NA,Ao,null),b(d,tSe,u),b(d,df,u),e(df,SF),e(SF,S5e),g(qA,S5e,null),e(df,L8r),e(df,P5e),e(P5e,B8r),b(d,aSe,u),b(d,Pr,u),g(OA,Pr,null),e(Pr,x8r),e(Pr,cf),e(cf,k8r),e(cf,$5e),e($5e,R8r),e(cf,S8r),e(cf,I5e),e(I5e,P8r),e(cf,$8r),e(Pr,I8r),e(Pr,GA),e(GA,j8r),e(GA,j5e),e(j5e,D8r),e(GA,N8r),e(Pr,q8r),e(Pr,Bt),g(XA,Bt,null),e(Bt,O8r),e(Bt,D5e),e(D5e,G8r),e(Bt,X8r),e(Bt,ff),e(ff,V8r),e(ff,N5e),e(N5e,z8r),e(ff,W8r),e(ff,q5e),e(q5e,Q8r),e(ff,H8r),e(Bt,U8r),e(Bt,O5e),e(O5e,J8r),e(Bt,Y8r),g(VA,Bt,null),e(Pr,K8r),e(Pr,Lo),g(zA,Lo,null),e(Lo,Z8r),e(Lo,G5e),e(G5e,eFr),e(Lo,oFr),e(Lo,Pn),e(Pn,rFr),e(Pn,X5e),e(X5e,tFr),e(Pn,aFr),e(Pn,V5e),e(V5e,nFr),e(Pn,sFr),e(Pn,z5e),e(z5e,lFr),e(Pn,iFr),e(Lo,dFr),e(Lo,ga),e(ga,PF),e(PF,W5e),e(W5e,cFr),e(PF,fFr),e(PF,IV),e(IV,mFr),e(PF,gFr),e(ga,hFr),e(ga,$F),e($F,Q5e),e(Q5e,pFr),e($F,_Fr),e($F,jV),e(jV,uFr),e($F,bFr),e(ga,vFr),e(ga,IF),e(IF,H5e),e(H5e,TFr),e(IF,FFr),e(IF,DV),e(DV,CFr),e(IF,MFr),e(ga,EFr),e(ga,jF),e(jF,U5e),e(U5e,yFr),e(jF,wFr),e(jF,NV),e(NV,AFr),e(jF,LFr),e(ga,BFr),e(ga,DF),e(DF,J5e),e(J5e,xFr),e(DF,kFr),e(DF,qV),e(qV,RFr),e(DF,SFr),e(Lo,PFr),e(Lo,Y5e),e(Y5e,$Fr),e(Lo,IFr),g(WA,Lo,null),b(d,nSe,u),b(d,mf,u),e(mf,NF),e(NF,K5e),g(QA,K5e,null),e(mf,jFr),e(mf,Z5e),e(Z5e,DFr),b(d,sSe,u),b(d,$r,u),g(HA,$r,null),e($r,NFr),e($r,gf),e(gf,qFr),e(gf,e2e),e(e2e,OFr),e(gf,GFr),e(gf,o2e),e(o2e,XFr),e(gf,VFr),e($r,zFr),e($r,UA),e(UA,WFr),e(UA,r2e),e(r2e,QFr),e(UA,HFr),e($r,UFr),e($r,xt),g(JA,xt,null),e(xt,JFr),e(xt,t2e),e(t2e,YFr),e(xt,KFr),e(xt,hf),e(hf,ZFr),e(hf,a2e),e(a2e,eCr),e(hf,oCr),e(hf,n2e),e(n2e,rCr),e(hf,tCr),e(xt,aCr),e(xt,s2e),e(s2e,nCr),e(xt,sCr),g(YA,xt,null),e($r,lCr),e($r,Bo),g(KA,Bo,null),e(Bo,iCr),e(Bo,l2e),e(l2e,dCr),e(Bo,cCr),e(Bo,$n),e($n,fCr),e($n,i2e),e(i2e,mCr),e($n,gCr),e($n,d2e),e(d2e,hCr),e($n,pCr),e($n,c2e),e(c2e,_Cr),e($n,uCr),e(Bo,bCr),e(Bo,ce),e(ce,qF),e(qF,f2e),e(f2e,vCr),e(qF,TCr),e(qF,OV),e(OV,FCr),e(qF,CCr),e(ce,MCr),e(ce,OF),e(OF,m2e),e(m2e,ECr),e(OF,yCr),e(OF,GV),e(GV,wCr),e(OF,ACr),e(ce,LCr),e(ce,GF),e(GF,g2e),e(g2e,BCr),e(GF,xCr),e(GF,XV),e(XV,kCr),e(GF,RCr),e(ce,SCr),e(ce,XF),e(XF,h2e),e(h2e,PCr),e(XF,$Cr),e(XF,VV),e(VV,ICr),e(XF,jCr),e(ce,DCr),e(ce,VF),e(VF,p2e),e(p2e,NCr),e(VF,qCr),e(VF,zV),e(zV,OCr),e(VF,GCr),e(ce,XCr),e(ce,zF),e(zF,_2e),e(_2e,VCr),e(zF,zCr),e(zF,WV),e(WV,WCr),e(zF,QCr),e(ce,HCr),e(ce,WF),e(WF,u2e),e(u2e,UCr),e(WF,JCr),e(WF,QV),e(QV,YCr),e(WF,KCr),e(ce,ZCr),e(ce,QF),e(QF,b2e),e(b2e,eMr),e(QF,oMr),e(QF,HV),e(HV,rMr),e(QF,tMr),e(ce,aMr),e(ce,HF),e(HF,v2e),e(v2e,nMr),e(HF,sMr),e(HF,UV),e(UV,lMr),e(HF,iMr),e(ce,dMr),e(ce,UF),e(UF,T2e),e(T2e,cMr),e(UF,fMr),e(UF,JV),e(JV,mMr),e(UF,gMr),e(ce,hMr),e(ce,JF),e(JF,F2e),e(F2e,pMr),e(JF,_Mr),e(JF,YV),e(YV,uMr),e(JF,bMr),e(ce,vMr),e(ce,YF),e(YF,C2e),e(C2e,TMr),e(YF,FMr),e(YF,KV),e(KV,CMr),e(YF,MMr),e(Bo,EMr),e(Bo,M2e),e(M2e,yMr),e(Bo,wMr),g(ZA,Bo,null),b(d,lSe,u),b(d,pf,u),e(pf,KF),e(KF,E2e),g(eL,E2e,null),e(pf,AMr),e(pf,y2e),e(y2e,LMr),b(d,iSe,u),b(d,Ir,u),g(oL,Ir,null),e(Ir,BMr),e(Ir,_f),e(_f,xMr),e(_f,w2e),e(w2e,kMr),e(_f,RMr),e(_f,A2e),e(A2e,SMr),e(_f,PMr),e(Ir,$Mr),e(Ir,rL),e(rL,IMr),e(rL,L2e),e(L2e,jMr),e(rL,DMr),e(Ir,NMr),e(Ir,kt),g(tL,kt,null),e(kt,qMr),e(kt,B2e),e(B2e,OMr),e(kt,GMr),e(kt,uf),e(uf,XMr),e(uf,x2e),e(x2e,VMr),e(uf,zMr),e(uf,k2e),e(k2e,WMr),e(uf,QMr),e(kt,HMr),e(kt,R2e),e(R2e,UMr),e(kt,JMr),g(aL,kt,null),e(Ir,YMr),e(Ir,xo),g(nL,xo,null),e(xo,KMr),e(xo,S2e),e(S2e,ZMr),e(xo,e4r),e(xo,In),e(In,o4r),e(In,P2e),e(P2e,r4r),e(In,t4r),e(In,$2e),e($2e,a4r),e(In,n4r),e(In,I2e),e(I2e,s4r),e(In,l4r),e(xo,i4r),e(xo,be),e(be,ZF),e(ZF,j2e),e(j2e,d4r),e(ZF,c4r),e(ZF,ZV),e(ZV,f4r),e(ZF,m4r),e(be,g4r),e(be,eC),e(eC,D2e),e(D2e,h4r),e(eC,p4r),e(eC,ez),e(ez,_4r),e(eC,u4r),e(be,b4r),e(be,oC),e(oC,N2e),e(N2e,v4r),e(oC,T4r),e(oC,oz),e(oz,F4r),e(oC,C4r),e(be,M4r),e(be,rC),e(rC,q2e),e(q2e,E4r),e(rC,y4r),e(rC,rz),e(rz,w4r),e(rC,A4r),e(be,L4r),e(be,tC),e(tC,O2e),e(O2e,B4r),e(tC,x4r),e(tC,tz),e(tz,k4r),e(tC,R4r),e(be,S4r),e(be,aC),e(aC,G2e),e(G2e,P4r),e(aC,$4r),e(aC,az),e(az,I4r),e(aC,j4r),e(be,D4r),e(be,nC),e(nC,X2e),e(X2e,N4r),e(nC,q4r),e(nC,nz),e(nz,O4r),e(nC,G4r),e(be,X4r),e(be,sC),e(sC,V2e),e(V2e,V4r),e(sC,z4r),e(sC,sz),e(sz,W4r),e(sC,Q4r),e(be,H4r),e(be,lC),e(lC,z2e),e(z2e,U4r),e(lC,J4r),e(lC,lz),e(lz,Y4r),e(lC,K4r),e(be,Z4r),e(be,iC),e(iC,W2e),e(W2e,eEr),e(iC,oEr),e(iC,iz),e(iz,rEr),e(iC,tEr),e(xo,aEr),e(xo,Q2e),e(Q2e,nEr),e(xo,sEr),g(sL,xo,null),b(d,dSe,u),b(d,bf,u),e(bf,dC),e(dC,H2e),g(lL,H2e,null),e(bf,lEr),e(bf,U2e),e(U2e,iEr),b(d,cSe,u),b(d,jr,u),g(iL,jr,null),e(jr,dEr),e(jr,vf),e(vf,cEr),e(vf,J2e),e(J2e,fEr),e(vf,mEr),e(vf,Y2e),e(Y2e,gEr),e(vf,hEr),e(jr,pEr),e(jr,dL),e(dL,_Er),e(dL,K2e),e(K2e,uEr),e(dL,bEr),e(jr,vEr),e(jr,Rt),g(cL,Rt,null),e(Rt,TEr),e(Rt,Z2e),e(Z2e,FEr),e(Rt,CEr),e(Rt,Tf),e(Tf,MEr),e(Tf,eve),e(eve,EEr),e(Tf,yEr),e(Tf,ove),e(ove,wEr),e(Tf,AEr),e(Rt,LEr),e(Rt,rve),e(rve,BEr),e(Rt,xEr),g(fL,Rt,null),e(jr,kEr),e(jr,ko),g(mL,ko,null),e(ko,REr),e(ko,tve),e(tve,SEr),e(ko,PEr),e(ko,jn),e(jn,$Er),e(jn,ave),e(ave,IEr),e(jn,jEr),e(jn,nve),e(nve,DEr),e(jn,NEr),e(jn,sve),e(sve,qEr),e(jn,OEr),e(ko,GEr),e(ko,Ee),e(Ee,cC),e(cC,lve),e(lve,XEr),e(cC,VEr),e(cC,dz),e(dz,zEr),e(cC,WEr),e(Ee,QEr),e(Ee,fC),e(fC,ive),e(ive,HEr),e(fC,UEr),e(fC,cz),e(cz,JEr),e(fC,YEr),e(Ee,KEr),e(Ee,mC),e(mC,dve),e(dve,ZEr),e(mC,e3r),e(mC,fz),e(fz,o3r),e(mC,r3r),e(Ee,t3r),e(Ee,gC),e(gC,cve),e(cve,a3r),e(gC,n3r),e(gC,mz),e(mz,s3r),e(gC,l3r),e(Ee,i3r),e(Ee,hC),e(hC,fve),e(fve,d3r),e(hC,c3r),e(hC,gz),e(gz,f3r),e(hC,m3r),e(Ee,g3r),e(Ee,pC),e(pC,mve),e(mve,h3r),e(pC,p3r),e(pC,hz),e(hz,_3r),e(pC,u3r),e(Ee,b3r),e(Ee,_C),e(_C,gve),e(gve,v3r),e(_C,T3r),e(_C,pz),e(pz,F3r),e(_C,C3r),e(Ee,M3r),e(Ee,uC),e(uC,hve),e(hve,E3r),e(uC,y3r),e(uC,_z),e(_z,w3r),e(uC,A3r),e(Ee,L3r),e(Ee,bC),e(bC,pve),e(pve,B3r),e(bC,x3r),e(bC,uz),e(uz,k3r),e(bC,R3r),e(ko,S3r),e(ko,_ve),e(_ve,P3r),e(ko,$3r),g(gL,ko,null),b(d,fSe,u),b(d,Ff,u),e(Ff,vC),e(vC,uve),g(hL,uve,null),e(Ff,I3r),e(Ff,bve),e(bve,j3r),b(d,mSe,u),b(d,Dr,u),g(pL,Dr,null),e(Dr,D3r),e(Dr,Cf),e(Cf,N3r),e(Cf,vve),e(vve,q3r),e(Cf,O3r),e(Cf,Tve),e(Tve,G3r),e(Cf,X3r),e(Dr,V3r),e(Dr,_L),e(_L,z3r),e(_L,Fve),e(Fve,W3r),e(_L,Q3r),e(Dr,H3r),e(Dr,St),g(uL,St,null),e(St,U3r),e(St,Cve),e(Cve,J3r),e(St,Y3r),e(St,Mf),e(Mf,K3r),e(Mf,Mve),e(Mve,Z3r),e(Mf,eyr),e(Mf,Eve),e(Eve,oyr),e(Mf,ryr),e(St,tyr),e(St,yve),e(yve,ayr),e(St,nyr),g(bL,St,null),e(Dr,syr),e(Dr,Ro),g(vL,Ro,null),e(Ro,lyr),e(Ro,wve),e(wve,iyr),e(Ro,dyr),e(Ro,Dn),e(Dn,cyr),e(Dn,Ave),e(Ave,fyr),e(Dn,myr),e(Dn,Lve),e(Lve,gyr),e(Dn,hyr),e(Dn,Bve),e(Bve,pyr),e(Dn,_yr),e(Ro,uyr),e(Ro,ve),e(ve,TC),e(TC,xve),e(xve,byr),e(TC,vyr),e(TC,bz),e(bz,Tyr),e(TC,Fyr),e(ve,Cyr),e(ve,FC),e(FC,kve),e(kve,Myr),e(FC,Eyr),e(FC,vz),e(vz,yyr),e(FC,wyr),e(ve,Ayr),e(ve,CC),e(CC,Rve),e(Rve,Lyr),e(CC,Byr),e(CC,Tz),e(Tz,xyr),e(CC,kyr),e(ve,Ryr),e(ve,MC),e(MC,Sve),e(Sve,Syr),e(MC,Pyr),e(MC,Fz),e(Fz,$yr),e(MC,Iyr),e(ve,jyr),e(ve,EC),e(EC,Pve),e(Pve,Dyr),e(EC,Nyr),e(EC,Cz),e(Cz,qyr),e(EC,Oyr),e(ve,Gyr),e(ve,yC),e(yC,$ve),e($ve,Xyr),e(yC,Vyr),e(yC,Mz),e(Mz,zyr),e(yC,Wyr),e(ve,Qyr),e(ve,wC),e(wC,Ive),e(Ive,Hyr),e(wC,Uyr),e(wC,Ez),e(Ez,Jyr),e(wC,Yyr),e(ve,Kyr),e(ve,AC),e(AC,jve),e(jve,Zyr),e(AC,ewr),e(AC,yz),e(yz,owr),e(AC,rwr),e(ve,twr),e(ve,LC),e(LC,Dve),e(Dve,awr),e(LC,nwr),e(LC,wz),e(wz,swr),e(LC,lwr),e(ve,iwr),e(ve,BC),e(BC,Nve),e(Nve,dwr),e(BC,cwr),e(BC,Az),e(Az,fwr),e(BC,mwr),e(Ro,gwr),e(Ro,qve),e(qve,hwr),e(Ro,pwr),g(TL,Ro,null),b(d,gSe,u),b(d,Ef,u),e(Ef,xC),e(xC,Ove),g(FL,Ove,null),e(Ef,_wr),e(Ef,Gve),e(Gve,uwr),b(d,hSe,u),b(d,Nr,u),g(CL,Nr,null),e(Nr,bwr),e(Nr,yf),e(yf,vwr),e(yf,Xve),e(Xve,Twr),e(yf,Fwr),e(yf,Vve),e(Vve,Cwr),e(yf,Mwr),e(Nr,Ewr),e(Nr,ML),e(ML,ywr),e(ML,zve),e(zve,wwr),e(ML,Awr),e(Nr,Lwr),e(Nr,Pt),g(EL,Pt,null),e(Pt,Bwr),e(Pt,Wve),e(Wve,xwr),e(Pt,kwr),e(Pt,wf),e(wf,Rwr),e(wf,Qve),e(Qve,Swr),e(wf,Pwr),e(wf,Hve),e(Hve,$wr),e(wf,Iwr),e(Pt,jwr),e(Pt,Uve),e(Uve,Dwr),e(Pt,Nwr),g(yL,Pt,null),e(Nr,qwr),e(Nr,So),g(wL,So,null),e(So,Owr),e(So,Jve),e(Jve,Gwr),e(So,Xwr),e(So,Nn),e(Nn,Vwr),e(Nn,Yve),e(Yve,zwr),e(Nn,Wwr),e(Nn,Kve),e(Kve,Qwr),e(Nn,Hwr),e(Nn,Zve),e(Zve,Uwr),e(Nn,Jwr),e(So,Ywr),e(So,e6e),e(e6e,kC),e(kC,o6e),e(o6e,Kwr),e(kC,Zwr),e(kC,Lz),e(Lz,eAr),e(kC,oAr),e(So,rAr),e(So,r6e),e(r6e,tAr),e(So,aAr),g(AL,So,null),b(d,pSe,u),b(d,Af,u),e(Af,RC),e(RC,t6e),g(LL,t6e,null),e(Af,nAr),e(Af,a6e),e(a6e,sAr),b(d,_Se,u),b(d,qr,u),g(BL,qr,null),e(qr,lAr),e(qr,Lf),e(Lf,iAr),e(Lf,n6e),e(n6e,dAr),e(Lf,cAr),e(Lf,s6e),e(s6e,fAr),e(Lf,mAr),e(qr,gAr),e(qr,xL),e(xL,hAr),e(xL,l6e),e(l6e,pAr),e(xL,_Ar),e(qr,uAr),e(qr,$t),g(kL,$t,null),e($t,bAr),e($t,i6e),e(i6e,vAr),e($t,TAr),e($t,Bf),e(Bf,FAr),e(Bf,d6e),e(d6e,CAr),e(Bf,MAr),e(Bf,c6e),e(c6e,EAr),e(Bf,yAr),e($t,wAr),e($t,f6e),e(f6e,AAr),e($t,LAr),g(RL,$t,null),e(qr,BAr),e(qr,Po),g(SL,Po,null),e(Po,xAr),e(Po,m6e),e(m6e,kAr),e(Po,RAr),e(Po,qn),e(qn,SAr),e(qn,g6e),e(g6e,PAr),e(qn,$Ar),e(qn,h6e),e(h6e,IAr),e(qn,jAr),e(qn,p6e),e(p6e,DAr),e(qn,NAr),e(Po,qAr),e(Po,Te),e(Te,SC),e(SC,_6e),e(_6e,OAr),e(SC,GAr),e(SC,Bz),e(Bz,XAr),e(SC,VAr),e(Te,zAr),e(Te,PC),e(PC,u6e),e(u6e,WAr),e(PC,QAr),e(PC,xz),e(xz,HAr),e(PC,UAr),e(Te,JAr),e(Te,$C),e($C,b6e),e(b6e,YAr),e($C,KAr),e($C,kz),e(kz,ZAr),e($C,eLr),e(Te,oLr),e(Te,IC),e(IC,v6e),e(v6e,rLr),e(IC,tLr),e(IC,Rz),e(Rz,aLr),e(IC,nLr),e(Te,sLr),e(Te,jC),e(jC,T6e),e(T6e,lLr),e(jC,iLr),e(jC,Sz),e(Sz,dLr),e(jC,cLr),e(Te,fLr),e(Te,DC),e(DC,F6e),e(F6e,mLr),e(DC,gLr),e(DC,Pz),e(Pz,hLr),e(DC,pLr),e(Te,_Lr),e(Te,NC),e(NC,C6e),e(C6e,uLr),e(NC,bLr),e(NC,$z),e($z,vLr),e(NC,TLr),e(Te,FLr),e(Te,qC),e(qC,M6e),e(M6e,CLr),e(qC,MLr),e(qC,Iz),e(Iz,ELr),e(qC,yLr),e(Te,wLr),e(Te,OC),e(OC,E6e),e(E6e,ALr),e(OC,LLr),e(OC,jz),e(jz,BLr),e(OC,xLr),e(Te,kLr),e(Te,GC),e(GC,y6e),e(y6e,RLr),e(GC,SLr),e(GC,Dz),e(Dz,PLr),e(GC,$Lr),e(Po,ILr),e(Po,w6e),e(w6e,jLr),e(Po,DLr),g(PL,Po,null),b(d,uSe,u),b(d,xf,u),e(xf,XC),e(XC,A6e),g($L,A6e,null),e(xf,NLr),e(xf,L6e),e(L6e,qLr),b(d,bSe,u),b(d,Or,u),g(IL,Or,null),e(Or,OLr),e(Or,kf),e(kf,GLr),e(kf,B6e),e(B6e,XLr),e(kf,VLr),e(kf,x6e),e(x6e,zLr),e(kf,WLr),e(Or,QLr),e(Or,jL),e(jL,HLr),e(jL,k6e),e(k6e,ULr),e(jL,JLr),e(Or,YLr),e(Or,It),g(DL,It,null),e(It,KLr),e(It,R6e),e(R6e,ZLr),e(It,e7r),e(It,Rf),e(Rf,o7r),e(Rf,S6e),e(S6e,r7r),e(Rf,t7r),e(Rf,P6e),e(P6e,a7r),e(Rf,n7r),e(It,s7r),e(It,$6e),e($6e,l7r),e(It,i7r),g(NL,It,null),e(Or,d7r),e(Or,$o),g(qL,$o,null),e($o,c7r),e($o,I6e),e(I6e,f7r),e($o,m7r),e($o,On),e(On,g7r),e(On,j6e),e(j6e,h7r),e(On,p7r),e(On,D6e),e(D6e,_7r),e(On,u7r),e(On,N6e),e(N6e,b7r),e(On,v7r),e($o,T7r),e($o,Se),e(Se,VC),e(VC,q6e),e(q6e,F7r),e(VC,C7r),e(VC,Nz),e(Nz,M7r),e(VC,E7r),e(Se,y7r),e(Se,zC),e(zC,O6e),e(O6e,w7r),e(zC,A7r),e(zC,qz),e(qz,L7r),e(zC,B7r),e(Se,x7r),e(Se,WC),e(WC,G6e),e(G6e,k7r),e(WC,R7r),e(WC,Oz),e(Oz,S7r),e(WC,P7r),e(Se,$7r),e(Se,QC),e(QC,X6e),e(X6e,I7r),e(QC,j7r),e(QC,Gz),e(Gz,D7r),e(QC,N7r),e(Se,q7r),e(Se,HC),e(HC,V6e),e(V6e,O7r),e(HC,G7r),e(HC,Xz),e(Xz,X7r),e(HC,V7r),e(Se,z7r),e(Se,UC),e(UC,z6e),e(z6e,W7r),e(UC,Q7r),e(UC,Vz),e(Vz,H7r),e(UC,U7r),e(Se,J7r),e(Se,JC),e(JC,W6e),e(W6e,Y7r),e(JC,K7r),e(JC,zz),e(zz,Z7r),e(JC,e9r),e(Se,o9r),e(Se,YC),e(YC,Q6e),e(Q6e,r9r),e(YC,t9r),e(YC,Wz),e(Wz,a9r),e(YC,n9r),e($o,s9r),e($o,H6e),e(H6e,l9r),e($o,i9r),g(OL,$o,null),b(d,vSe,u),b(d,Sf,u),e(Sf,KC),e(KC,U6e),g(GL,U6e,null),e(Sf,d9r),e(Sf,J6e),e(J6e,c9r),b(d,TSe,u),b(d,Gr,u),g(XL,Gr,null),e(Gr,f9r),e(Gr,Pf),e(Pf,m9r),e(Pf,Y6e),e(Y6e,g9r),e(Pf,h9r),e(Pf,K6e),e(K6e,p9r),e(Pf,_9r),e(Gr,u9r),e(Gr,VL),e(VL,b9r),e(VL,Z6e),e(Z6e,v9r),e(VL,T9r),e(Gr,F9r),e(Gr,jt),g(zL,jt,null),e(jt,C9r),e(jt,e0e),e(e0e,M9r),e(jt,E9r),e(jt,$f),e($f,y9r),e($f,o0e),e(o0e,w9r),e($f,A9r),e($f,r0e),e(r0e,L9r),e($f,B9r),e(jt,x9r),e(jt,t0e),e(t0e,k9r),e(jt,R9r),g(WL,jt,null),e(Gr,S9r),e(Gr,Io),g(QL,Io,null),e(Io,P9r),e(Io,a0e),e(a0e,$9r),e(Io,I9r),e(Io,Gn),e(Gn,j9r),e(Gn,n0e),e(n0e,D9r),e(Gn,N9r),e(Gn,s0e),e(s0e,q9r),e(Gn,O9r),e(Gn,l0e),e(l0e,G9r),e(Gn,X9r),e(Io,V9r),e(Io,Pe),e(Pe,ZC),e(ZC,i0e),e(i0e,z9r),e(ZC,W9r),e(ZC,Qz),e(Qz,Q9r),e(ZC,H9r),e(Pe,U9r),e(Pe,eM),e(eM,d0e),e(d0e,J9r),e(eM,Y9r),e(eM,Hz),e(Hz,K9r),e(eM,Z9r),e(Pe,eBr),e(Pe,oM),e(oM,c0e),e(c0e,oBr),e(oM,rBr),e(oM,Uz),e(Uz,tBr),e(oM,aBr),e(Pe,nBr),e(Pe,rM),e(rM,f0e),e(f0e,sBr),e(rM,lBr),e(rM,Jz),e(Jz,iBr),e(rM,dBr),e(Pe,cBr),e(Pe,tM),e(tM,m0e),e(m0e,fBr),e(tM,mBr),e(tM,Yz),e(Yz,gBr),e(tM,hBr),e(Pe,pBr),e(Pe,aM),e(aM,g0e),e(g0e,_Br),e(aM,uBr),e(aM,Kz),e(Kz,bBr),e(aM,vBr),e(Pe,TBr),e(Pe,nM),e(nM,h0e),e(h0e,FBr),e(nM,CBr),e(nM,Zz),e(Zz,MBr),e(nM,EBr),e(Pe,yBr),e(Pe,sM),e(sM,p0e),e(p0e,wBr),e(sM,ABr),e(sM,eW),e(eW,LBr),e(sM,BBr),e(Io,xBr),e(Io,_0e),e(_0e,kBr),e(Io,RBr),g(HL,Io,null),b(d,FSe,u),b(d,If,u),e(If,lM),e(lM,u0e),g(UL,u0e,null),e(If,SBr),e(If,b0e),e(b0e,PBr),b(d,CSe,u),b(d,Xr,u),g(JL,Xr,null),e(Xr,$Br),e(Xr,jf),e(jf,IBr),e(jf,v0e),e(v0e,jBr),e(jf,DBr),e(jf,T0e),e(T0e,NBr),e(jf,qBr),e(Xr,OBr),e(Xr,YL),e(YL,GBr),e(YL,F0e),e(F0e,XBr),e(YL,VBr),e(Xr,zBr),e(Xr,Dt),g(KL,Dt,null),e(Dt,WBr),e(Dt,C0e),e(C0e,QBr),e(Dt,HBr),e(Dt,Df),e(Df,UBr),e(Df,M0e),e(M0e,JBr),e(Df,YBr),e(Df,E0e),e(E0e,KBr),e(Df,ZBr),e(Dt,exr),e(Dt,y0e),e(y0e,oxr),e(Dt,rxr),g(ZL,Dt,null),e(Xr,txr),e(Xr,jo),g(e7,jo,null),e(jo,axr),e(jo,w0e),e(w0e,nxr),e(jo,sxr),e(jo,Xn),e(Xn,lxr),e(Xn,A0e),e(A0e,ixr),e(Xn,dxr),e(Xn,L0e),e(L0e,cxr),e(Xn,fxr),e(Xn,B0e),e(B0e,mxr),e(Xn,gxr),e(jo,hxr),e(jo,x0e),e(x0e,iM),e(iM,k0e),e(k0e,pxr),e(iM,_xr),e(iM,oW),e(oW,uxr),e(iM,bxr),e(jo,vxr),e(jo,R0e),e(R0e,Txr),e(jo,Fxr),g(o7,jo,null),b(d,MSe,u),b(d,Nf,u),e(Nf,dM),e(dM,S0e),g(r7,S0e,null),e(Nf,Cxr),e(Nf,P0e),e(P0e,Mxr),b(d,ESe,u),b(d,Vr,u),g(t7,Vr,null),e(Vr,Exr),e(Vr,qf),e(qf,yxr),e(qf,$0e),e($0e,wxr),e(qf,Axr),e(qf,I0e),e(I0e,Lxr),e(qf,Bxr),e(Vr,xxr),e(Vr,a7),e(a7,kxr),e(a7,j0e),e(j0e,Rxr),e(a7,Sxr),e(Vr,Pxr),e(Vr,Nt),g(n7,Nt,null),e(Nt,$xr),e(Nt,D0e),e(D0e,Ixr),e(Nt,jxr),e(Nt,Of),e(Of,Dxr),e(Of,N0e),e(N0e,Nxr),e(Of,qxr),e(Of,q0e),e(q0e,Oxr),e(Of,Gxr),e(Nt,Xxr),e(Nt,O0e),e(O0e,Vxr),e(Nt,zxr),g(s7,Nt,null),e(Vr,Wxr),e(Vr,Do),g(l7,Do,null),e(Do,Qxr),e(Do,G0e),e(G0e,Hxr),e(Do,Uxr),e(Do,Vn),e(Vn,Jxr),e(Vn,X0e),e(X0e,Yxr),e(Vn,Kxr),e(Vn,V0e),e(V0e,Zxr),e(Vn,ekr),e(Vn,z0e),e(z0e,okr),e(Vn,rkr),e(Do,tkr),e(Do,i7),e(i7,cM),e(cM,W0e),e(W0e,akr),e(cM,nkr),e(cM,rW),e(rW,skr),e(cM,lkr),e(i7,ikr),e(i7,fM),e(fM,Q0e),e(Q0e,dkr),e(fM,ckr),e(fM,tW),e(tW,fkr),e(fM,mkr),e(Do,gkr),e(Do,H0e),e(H0e,hkr),e(Do,pkr),g(d7,Do,null),b(d,ySe,u),b(d,Gf,u),e(Gf,mM),e(mM,U0e),g(c7,U0e,null),e(Gf,_kr),e(Gf,J0e),e(J0e,ukr),b(d,wSe,u),b(d,zr,u),g(f7,zr,null),e(zr,bkr),e(zr,Xf),e(Xf,vkr),e(Xf,Y0e),e(Y0e,Tkr),e(Xf,Fkr),e(Xf,K0e),e(K0e,Ckr),e(Xf,Mkr),e(zr,Ekr),e(zr,m7),e(m7,ykr),e(m7,Z0e),e(Z0e,wkr),e(m7,Akr),e(zr,Lkr),e(zr,qt),g(g7,qt,null),e(qt,Bkr),e(qt,eTe),e(eTe,xkr),e(qt,kkr),e(qt,Vf),e(Vf,Rkr),e(Vf,oTe),e(oTe,Skr),e(Vf,Pkr),e(Vf,rTe),e(rTe,$kr),e(Vf,Ikr),e(qt,jkr),e(qt,tTe),e(tTe,Dkr),e(qt,Nkr),g(h7,qt,null),e(zr,qkr),e(zr,No),g(p7,No,null),e(No,Okr),e(No,aTe),e(aTe,Gkr),e(No,Xkr),e(No,zn),e(zn,Vkr),e(zn,nTe),e(nTe,zkr),e(zn,Wkr),e(zn,sTe),e(sTe,Qkr),e(zn,Hkr),e(zn,lTe),e(lTe,Ukr),e(zn,Jkr),e(No,Ykr),e(No,iTe),e(iTe,gM),e(gM,dTe),e(dTe,Kkr),e(gM,Zkr),e(gM,aW),e(aW,eRr),e(gM,oRr),e(No,rRr),e(No,cTe),e(cTe,tRr),e(No,aRr),g(_7,No,null),ASe=!0},p(d,[u]){const u7={};u&2&&(u7.$$scope={dirty:u,ctx:d}),Yf.$set(u7);const fTe={};u&2&&(fTe.$$scope={dirty:u,ctx:d}),Dh.$set(fTe);const mTe={};u&2&&(mTe.$$scope={dirty:u,ctx:d}),Uh.$set(mTe)},i(d){ASe||(h(fe.$$.fragment,d),h(Va.$$.fragment,d),h(b4.$$.fragment,d),h(v4.$$.fragment,d),h(Yf.$$.fragment,d),h(T4.$$.fragment,d),h(F4.$$.fragment,d),h(E4.$$.fragment,d),h(y4.$$.fragment,d),h(w4.$$.fragment,d),h(A4.$$.fragment,d),h(L4.$$.fragment,d),h(k4.$$.fragment,d),h(R4.$$.fragment,d),h(S4.$$.fragment,d),h(P4.$$.fragment,d),h($4.$$.fragment,d),h(D4.$$.fragment,d),h(Dh.$$.fragment,d),h(N4.$$.fragment,d),h(q4.$$.fragment,d),h(O4.$$.fragment,d),h(G4.$$.fragment,d),h(z4.$$.fragment,d),h(Uh.$$.fragment,d),h(W4.$$.fragment,d),h(Q4.$$.fragment,d),h(H4.$$.fragment,d),h(U4.$$.fragment,d),h(Y4.$$.fragment,d),h(K4.$$.fragment,d),h(Z4.$$.fragment,d),h(eE.$$.fragment,d),h(oE.$$.fragment,d),h(rE.$$.fragment,d),h(aE.$$.fragment,d),h(nE.$$.fragment,d),h(sE.$$.fragment,d),h(lE.$$.fragment,d),h(iE.$$.fragment,d),h(dE.$$.fragment,d),h(fE.$$.fragment,d),h(mE.$$.fragment,d),h(gE.$$.fragment,d),h(hE.$$.fragment,d),h(pE.$$.fragment,d),h(_E.$$.fragment,d),h(bE.$$.fragment,d),h(vE.$$.fragment,d),h(TE.$$.fragment,d),h(FE.$$.fragment,d),h(CE.$$.fragment,d),h(ME.$$.fragment,d),h(yE.$$.fragment,d),h(wE.$$.fragment,d),h(AE.$$.fragment,d),h(LE.$$.fragment,d),h(BE.$$.fragment,d),h(xE.$$.fragment,d),h(RE.$$.fragment,d),h(SE.$$.fragment,d),h(PE.$$.fragment,d),h($E.$$.fragment,d),h(IE.$$.fragment,d),h(jE.$$.fragment,d),h(NE.$$.fragment,d),h(qE.$$.fragment,d),h(OE.$$.fragment,d),h(GE.$$.fragment,d),h(XE.$$.fragment,d),h(VE.$$.fragment,d),h(WE.$$.fragment,d),h(QE.$$.fragment,d),h(HE.$$.fragment,d),h(UE.$$.fragment,d),h(JE.$$.fragment,d),h(YE.$$.fragment,d),h(ZE.$$.fragment,d),h(e3.$$.fragment,d),h(o3.$$.fragment,d),h(r3.$$.fragment,d),h(t3.$$.fragment,d),h(a3.$$.fragment,d),h(s3.$$.fragment,d),h(l3.$$.fragment,d),h(i3.$$.fragment,d),h(d3.$$.fragment,d),h(c3.$$.fragment,d),h(f3.$$.fragment,d),h(g3.$$.fragment,d),h(h3.$$.fragment,d),h(p3.$$.fragment,d),h(_3.$$.fragment,d),h(u3.$$.fragment,d),h(b3.$$.fragment,d),h(T3.$$.fragment,d),h(F3.$$.fragment,d),h(C3.$$.fragment,d),h(M3.$$.fragment,d),h(E3.$$.fragment,d),h(y3.$$.fragment,d),h(A3.$$.fragment,d),h(L3.$$.fragment,d),h(B3.$$.fragment,d),h(x3.$$.fragment,d),h(k3.$$.fragment,d),h(R3.$$.fragment,d),h(P3.$$.fragment,d),h($3.$$.fragment,d),h(I3.$$.fragment,d),h(j3.$$.fragment,d),h(D3.$$.fragment,d),h(N3.$$.fragment,d),h(O3.$$.fragment,d),h(G3.$$.fragment,d),h(X3.$$.fragment,d),h(V3.$$.fragment,d),h(z3.$$.fragment,d),h(W3.$$.fragment,d),h(H3.$$.fragment,d),h(U3.$$.fragment,d),h(J3.$$.fragment,d),h(Y3.$$.fragment,d),h(K3.$$.fragment,d),h(Z3.$$.fragment,d),h(oy.$$.fragment,d),h(ry.$$.fragment,d),h(ty.$$.fragment,d),h(ny.$$.fragment,d),h(sy.$$.fragment,d),h(ly.$$.fragment,d),h(dy.$$.fragment,d),h(cy.$$.fragment,d),h(fy.$$.fragment,d),h(my.$$.fragment,d),h(gy.$$.fragment,d),h(hy.$$.fragment,d),h(_y.$$.fragment,d),h(uy.$$.fragment,d),h(by.$$.fragment,d),h(vy.$$.fragment,d),h(Ty.$$.fragment,d),h(Fy.$$.fragment,d),h(My.$$.fragment,d),h(Ey.$$.fragment,d),h(yy.$$.fragment,d),h(wy.$$.fragment,d),h(Ay.$$.fragment,d),h(Ly.$$.fragment,d),h(xy.$$.fragment,d),h(ky.$$.fragment,d),h(Ry.$$.fragment,d),h(Sy.$$.fragment,d),h(Py.$$.fragment,d),h($y.$$.fragment,d),h(jy.$$.fragment,d),h(Dy.$$.fragment,d),h(Ny.$$.fragment,d),h(Oy.$$.fragment,d),h(Gy.$$.fragment,d),h(Xy.$$.fragment,d),h(zy.$$.fragment,d),h(Wy.$$.fragment,d),h(Qy.$$.fragment,d),h(Hy.$$.fragment,d),h(Uy.$$.fragment,d),h(Jy.$$.fragment,d),h(Ky.$$.fragment,d),h(Zy.$$.fragment,d),h(ew.$$.fragment,d),h(ow.$$.fragment,d),h(rw.$$.fragment,d),h(tw.$$.fragment,d),h(nw.$$.fragment,d),h(sw.$$.fragment,d),h(lw.$$.fragment,d),h(iw.$$.fragment,d),h(dw.$$.fragment,d),h(cw.$$.fragment,d),h(mw.$$.fragment,d),h(gw.$$.fragment,d),h(hw.$$.fragment,d),h(pw.$$.fragment,d),h(_w.$$.fragment,d),h(uw.$$.fragment,d),h(vw.$$.fragment,d),h(Tw.$$.fragment,d),h(Fw.$$.fragment,d),h(Mw.$$.fragment,d),h(Ew.$$.fragment,d),h(yw.$$.fragment,d),h(Aw.$$.fragment,d),h(Lw.$$.fragment,d),h(Bw.$$.fragment,d),h(xw.$$.fragment,d),h(kw.$$.fragment,d),h(Rw.$$.fragment,d),h(Pw.$$.fragment,d),h($w.$$.fragment,d),h(Iw.$$.fragment,d),h(jw.$$.fragment,d),h(Dw.$$.fragment,d),h(Nw.$$.fragment,d),h(Ow.$$.fragment,d),h(Gw.$$.fragment,d),h(Xw.$$.fragment,d),h(Vw.$$.fragment,d),h(zw.$$.fragment,d),h(Ww.$$.fragment,d),h(Hw.$$.fragment,d),h(Uw.$$.fragment,d),h(Jw.$$.fragment,d),h(Yw.$$.fragment,d),h(Kw.$$.fragment,d),h(Zw.$$.fragment,d),h(oA.$$.fragment,d),h(rA.$$.fragment,d),h(tA.$$.fragment,d),h(aA.$$.fragment,d),h(nA.$$.fragment,d),h(sA.$$.fragment,d),h(iA.$$.fragment,d),h(dA.$$.fragment,d),h(cA.$$.fragment,d),h(fA.$$.fragment,d),h(mA.$$.fragment,d),h(gA.$$.fragment,d),h(pA.$$.fragment,d),h(_A.$$.fragment,d),h(uA.$$.fragment,d),h(bA.$$.fragment,d),h(vA.$$.fragment,d),h(TA.$$.fragment,d),h(CA.$$.fragment,d),h(MA.$$.fragment,d),h(EA.$$.fragment,d),h(yA.$$.fragment,d),h(wA.$$.fragment,d),h(AA.$$.fragment,d),h(BA.$$.fragment,d),h(xA.$$.fragment,d),h(kA.$$.fragment,d),h(RA.$$.fragment,d),h(SA.$$.fragment,d),h(PA.$$.fragment,d),h(IA.$$.fragment,d),h(jA.$$.fragment,d),h(DA.$$.fragment,d),h(NA.$$.fragment,d),h(qA.$$.fragment,d),h(OA.$$.fragment,d),h(XA.$$.fragment,d),h(VA.$$.fragment,d),h(zA.$$.fragment,d),h(WA.$$.fragment,d),h(QA.$$.fragment,d),h(HA.$$.fragment,d),h(JA.$$.fragment,d),h(YA.$$.fragment,d),h(KA.$$.fragment,d),h(ZA.$$.fragment,d),h(eL.$$.fragment,d),h(oL.$$.fragment,d),h(tL.$$.fragment,d),h(aL.$$.fragment,d),h(nL.$$.fragment,d),h(sL.$$.fragment,d),h(lL.$$.fragment,d),h(iL.$$.fragment,d),h(cL.$$.fragment,d),h(fL.$$.fragment,d),h(mL.$$.fragment,d),h(gL.$$.fragment,d),h(hL.$$.fragment,d),h(pL.$$.fragment,d),h(uL.$$.fragment,d),h(bL.$$.fragment,d),h(vL.$$.fragment,d),h(TL.$$.fragment,d),h(FL.$$.fragment,d),h(CL.$$.fragment,d),h(EL.$$.fragment,d),h(yL.$$.fragment,d),h(wL.$$.fragment,d),h(AL.$$.fragment,d),h(LL.$$.fragment,d),h(BL.$$.fragment,d),h(kL.$$.fragment,d),h(RL.$$.fragment,d),h(SL.$$.fragment,d),h(PL.$$.fragment,d),h($L.$$.fragment,d),h(IL.$$.fragment,d),h(DL.$$.fragment,d),h(NL.$$.fragment,d),h(qL.$$.fragment,d),h(OL.$$.fragment,d),h(GL.$$.fragment,d),h(XL.$$.fragment,d),h(zL.$$.fragment,d),h(WL.$$.fragment,d),h(QL.$$.fragment,d),h(HL.$$.fragment,d),h(UL.$$.fragment,d),h(JL.$$.fragment,d),h(KL.$$.fragment,d),h(ZL.$$.fragment,d),h(e7.$$.fragment,d),h(o7.$$.fragment,d),h(r7.$$.fragment,d),h(t7.$$.fragment,d),h(n7.$$.fragment,d),h(s7.$$.fragment,d),h(l7.$$.fragment,d),h(d7.$$.fragment,d),h(c7.$$.fragment,d),h(f7.$$.fragment,d),h(g7.$$.fragment,d),h(h7.$$.fragment,d),h(p7.$$.fragment,d),h(_7.$$.fragment,d),ASe=!0)},o(d){p(fe.$$.fragment,d),p(Va.$$.fragment,d),p(b4.$$.fragment,d),p(v4.$$.fragment,d),p(Yf.$$.fragment,d),p(T4.$$.fragment,d),p(F4.$$.fragment,d),p(E4.$$.fragment,d),p(y4.$$.fragment,d),p(w4.$$.fragment,d),p(A4.$$.fragment,d),p(L4.$$.fragment,d),p(k4.$$.fragment,d),p(R4.$$.fragment,d),p(S4.$$.fragment,d),p(P4.$$.fragment,d),p($4.$$.fragment,d),p(D4.$$.fragment,d),p(Dh.$$.fragment,d),p(N4.$$.fragment,d),p(q4.$$.fragment,d),p(O4.$$.fragment,d),p(G4.$$.fragment,d),p(z4.$$.fragment,d),p(Uh.$$.fragment,d),p(W4.$$.fragment,d),p(Q4.$$.fragment,d),p(H4.$$.fragment,d),p(U4.$$.fragment,d),p(Y4.$$.fragment,d),p(K4.$$.fragment,d),p(Z4.$$.fragment,d),p(eE.$$.fragment,d),p(oE.$$.fragment,d),p(rE.$$.fragment,d),p(aE.$$.fragment,d),p(nE.$$.fragment,d),p(sE.$$.fragment,d),p(lE.$$.fragment,d),p(iE.$$.fragment,d),p(dE.$$.fragment,d),p(fE.$$.fragment,d),p(mE.$$.fragment,d),p(gE.$$.fragment,d),p(hE.$$.fragment,d),p(pE.$$.fragment,d),p(_E.$$.fragment,d),p(bE.$$.fragment,d),p(vE.$$.fragment,d),p(TE.$$.fragment,d),p(FE.$$.fragment,d),p(CE.$$.fragment,d),p(ME.$$.fragment,d),p(yE.$$.fragment,d),p(wE.$$.fragment,d),p(AE.$$.fragment,d),p(LE.$$.fragment,d),p(BE.$$.fragment,d),p(xE.$$.fragment,d),p(RE.$$.fragment,d),p(SE.$$.fragment,d),p(PE.$$.fragment,d),p($E.$$.fragment,d),p(IE.$$.fragment,d),p(jE.$$.fragment,d),p(NE.$$.fragment,d),p(qE.$$.fragment,d),p(OE.$$.fragment,d),p(GE.$$.fragment,d),p(XE.$$.fragment,d),p(VE.$$.fragment,d),p(WE.$$.fragment,d),p(QE.$$.fragment,d),p(HE.$$.fragment,d),p(UE.$$.fragment,d),p(JE.$$.fragment,d),p(YE.$$.fragment,d),p(ZE.$$.fragment,d),p(e3.$$.fragment,d),p(o3.$$.fragment,d),p(r3.$$.fragment,d),p(t3.$$.fragment,d),p(a3.$$.fragment,d),p(s3.$$.fragment,d),p(l3.$$.fragment,d),p(i3.$$.fragment,d),p(d3.$$.fragment,d),p(c3.$$.fragment,d),p(f3.$$.fragment,d),p(g3.$$.fragment,d),p(h3.$$.fragment,d),p(p3.$$.fragment,d),p(_3.$$.fragment,d),p(u3.$$.fragment,d),p(b3.$$.fragment,d),p(T3.$$.fragment,d),p(F3.$$.fragment,d),p(C3.$$.fragment,d),p(M3.$$.fragment,d),p(E3.$$.fragment,d),p(y3.$$.fragment,d),p(A3.$$.fragment,d),p(L3.$$.fragment,d),p(B3.$$.fragment,d),p(x3.$$.fragment,d),p(k3.$$.fragment,d),p(R3.$$.fragment,d),p(P3.$$.fragment,d),p($3.$$.fragment,d),p(I3.$$.fragment,d),p(j3.$$.fragment,d),p(D3.$$.fragment,d),p(N3.$$.fragment,d),p(O3.$$.fragment,d),p(G3.$$.fragment,d),p(X3.$$.fragment,d),p(V3.$$.fragment,d),p(z3.$$.fragment,d),p(W3.$$.fragment,d),p(H3.$$.fragment,d),p(U3.$$.fragment,d),p(J3.$$.fragment,d),p(Y3.$$.fragment,d),p(K3.$$.fragment,d),p(Z3.$$.fragment,d),p(oy.$$.fragment,d),p(ry.$$.fragment,d),p(ty.$$.fragment,d),p(ny.$$.fragment,d),p(sy.$$.fragment,d),p(ly.$$.fragment,d),p(dy.$$.fragment,d),p(cy.$$.fragment,d),p(fy.$$.fragment,d),p(my.$$.fragment,d),p(gy.$$.fragment,d),p(hy.$$.fragment,d),p(_y.$$.fragment,d),p(uy.$$.fragment,d),p(by.$$.fragment,d),p(vy.$$.fragment,d),p(Ty.$$.fragment,d),p(Fy.$$.fragment,d),p(My.$$.fragment,d),p(Ey.$$.fragment,d),p(yy.$$.fragment,d),p(wy.$$.fragment,d),p(Ay.$$.fragment,d),p(Ly.$$.fragment,d),p(xy.$$.fragment,d),p(ky.$$.fragment,d),p(Ry.$$.fragment,d),p(Sy.$$.fragment,d),p(Py.$$.fragment,d),p($y.$$.fragment,d),p(jy.$$.fragment,d),p(Dy.$$.fragment,d),p(Ny.$$.fragment,d),p(Oy.$$.fragment,d),p(Gy.$$.fragment,d),p(Xy.$$.fragment,d),p(zy.$$.fragment,d),p(Wy.$$.fragment,d),p(Qy.$$.fragment,d),p(Hy.$$.fragment,d),p(Uy.$$.fragment,d),p(Jy.$$.fragment,d),p(Ky.$$.fragment,d),p(Zy.$$.fragment,d),p(ew.$$.fragment,d),p(ow.$$.fragment,d),p(rw.$$.fragment,d),p(tw.$$.fragment,d),p(nw.$$.fragment,d),p(sw.$$.fragment,d),p(lw.$$.fragment,d),p(iw.$$.fragment,d),p(dw.$$.fragment,d),p(cw.$$.fragment,d),p(mw.$$.fragment,d),p(gw.$$.fragment,d),p(hw.$$.fragment,d),p(pw.$$.fragment,d),p(_w.$$.fragment,d),p(uw.$$.fragment,d),p(vw.$$.fragment,d),p(Tw.$$.fragment,d),p(Fw.$$.fragment,d),p(Mw.$$.fragment,d),p(Ew.$$.fragment,d),p(yw.$$.fragment,d),p(Aw.$$.fragment,d),p(Lw.$$.fragment,d),p(Bw.$$.fragment,d),p(xw.$$.fragment,d),p(kw.$$.fragment,d),p(Rw.$$.fragment,d),p(Pw.$$.fragment,d),p($w.$$.fragment,d),p(Iw.$$.fragment,d),p(jw.$$.fragment,d),p(Dw.$$.fragment,d),p(Nw.$$.fragment,d),p(Ow.$$.fragment,d),p(Gw.$$.fragment,d),p(Xw.$$.fragment,d),p(Vw.$$.fragment,d),p(zw.$$.fragment,d),p(Ww.$$.fragment,d),p(Hw.$$.fragment,d),p(Uw.$$.fragment,d),p(Jw.$$.fragment,d),p(Yw.$$.fragment,d),p(Kw.$$.fragment,d),p(Zw.$$.fragment,d),p(oA.$$.fragment,d),p(rA.$$.fragment,d),p(tA.$$.fragment,d),p(aA.$$.fragment,d),p(nA.$$.fragment,d),p(sA.$$.fragment,d),p(iA.$$.fragment,d),p(dA.$$.fragment,d),p(cA.$$.fragment,d),p(fA.$$.fragment,d),p(mA.$$.fragment,d),p(gA.$$.fragment,d),p(pA.$$.fragment,d),p(_A.$$.fragment,d),p(uA.$$.fragment,d),p(bA.$$.fragment,d),p(vA.$$.fragment,d),p(TA.$$.fragment,d),p(CA.$$.fragment,d),p(MA.$$.fragment,d),p(EA.$$.fragment,d),p(yA.$$.fragment,d),p(wA.$$.fragment,d),p(AA.$$.fragment,d),p(BA.$$.fragment,d),p(xA.$$.fragment,d),p(kA.$$.fragment,d),p(RA.$$.fragment,d),p(SA.$$.fragment,d),p(PA.$$.fragment,d),p(IA.$$.fragment,d),p(jA.$$.fragment,d),p(DA.$$.fragment,d),p(NA.$$.fragment,d),p(qA.$$.fragment,d),p(OA.$$.fragment,d),p(XA.$$.fragment,d),p(VA.$$.fragment,d),p(zA.$$.fragment,d),p(WA.$$.fragment,d),p(QA.$$.fragment,d),p(HA.$$.fragment,d),p(JA.$$.fragment,d),p(YA.$$.fragment,d),p(KA.$$.fragment,d),p(ZA.$$.fragment,d),p(eL.$$.fragment,d),p(oL.$$.fragment,d),p(tL.$$.fragment,d),p(aL.$$.fragment,d),p(nL.$$.fragment,d),p(sL.$$.fragment,d),p(lL.$$.fragment,d),p(iL.$$.fragment,d),p(cL.$$.fragment,d),p(fL.$$.fragment,d),p(mL.$$.fragment,d),p(gL.$$.fragment,d),p(hL.$$.fragment,d),p(pL.$$.fragment,d),p(uL.$$.fragment,d),p(bL.$$.fragment,d),p(vL.$$.fragment,d),p(TL.$$.fragment,d),p(FL.$$.fragment,d),p(CL.$$.fragment,d),p(EL.$$.fragment,d),p(yL.$$.fragment,d),p(wL.$$.fragment,d),p(AL.$$.fragment,d),p(LL.$$.fragment,d),p(BL.$$.fragment,d),p(kL.$$.fragment,d),p(RL.$$.fragment,d),p(SL.$$.fragment,d),p(PL.$$.fragment,d),p($L.$$.fragment,d),p(IL.$$.fragment,d),p(DL.$$.fragment,d),p(NL.$$.fragment,d),p(qL.$$.fragment,d),p(OL.$$.fragment,d),p(GL.$$.fragment,d),p(XL.$$.fragment,d),p(zL.$$.fragment,d),p(WL.$$.fragment,d),p(QL.$$.fragment,d),p(HL.$$.fragment,d),p(UL.$$.fragment,d),p(JL.$$.fragment,d),p(KL.$$.fragment,d),p(ZL.$$.fragment,d),p(e7.$$.fragment,d),p(o7.$$.fragment,d),p(r7.$$.fragment,d),p(t7.$$.fragment,d),p(n7.$$.fragment,d),p(s7.$$.fragment,d),p(l7.$$.fragment,d),p(d7.$$.fragment,d),p(c7.$$.fragment,d),p(f7.$$.fragment,d),p(g7.$$.fragment,d),p(h7.$$.fragment,d),p(p7.$$.fragment,d),p(_7.$$.fragment,d),ASe=!1},d(d){t(J),d&&t($e),d&&t(de),_(fe),d&&t(Wf),d&&t(ha),d&&t(Be),d&&t(co),d&&t(Hf),_(Va,d),d&&t(fo),d&&t(_e),d&&t(Wo),d&&t(za),d&&t(Eke),d&&t(Yi),_(b4),d&&t(yke),d&&t(Jn),d&&t(wke),_(v4,d),d&&t(Ake),d&&t(v9),d&&t(Lke),_(Yf,d),d&&t(Bke),d&&t(Ki),_(T4),d&&t(xke),d&&t(Qo),_(F4),_(E4),_(y4),_(w4),d&&t(kke),d&&t(ed),_(A4),d&&t(Rke),d&&t(Ho),_(L4),_(k4),_(R4),_(S4),d&&t(Ske),d&&t(od),_(P4),d&&t(Pke),d&&t(Uo),_($4),_(D4),_(Dh),_(N4),_(q4),d&&t($ke),d&&t(rd),_(O4),d&&t(Ike),d&&t(Jo),_(G4),_(z4),_(Uh),_(W4),_(Q4),d&&t(jke),d&&t(ad),_(H4),d&&t(Dke),d&&t(Yo),_(U4),_(Y4),_(K4),_(Z4),_(eE),d&&t(Nke),d&&t(ld),_(oE),d&&t(qke),d&&t(Ko),_(rE),_(aE),_(nE),_(sE),_(lE),d&&t(Oke),d&&t(cd),_(iE),d&&t(Gke),d&&t(Zo),_(dE),_(fE),_(mE),_(gE),_(hE),d&&t(Xke),d&&t(gd),_(pE),d&&t(Vke),d&&t(er),_(_E),_(bE),_(vE),_(TE),_(FE),d&&t(zke),d&&t(_d),_(CE),d&&t(Wke),d&&t(or),_(ME),_(yE),_(wE),_(AE),_(LE),d&&t(Qke),d&&t(vd),_(BE),d&&t(Hke),d&&t(rr),_(xE),_(RE),_(SE),_(PE),_($E),d&&t(Uke),d&&t(Cd),_(IE),d&&t(Jke),d&&t(tr),_(jE),_(NE),_(qE),_(OE),_(GE),d&&t(Yke),d&&t(yd),_(XE),d&&t(Kke),d&&t(ar),_(VE),_(WE),_(QE),_(HE),_(UE),d&&t(Zke),d&&t(Ld),_(JE),d&&t(eRe),d&&t(nr),_(YE),_(ZE),_(e3),_(o3),_(r3),d&&t(oRe),d&&t(kd),_(t3),d&&t(rRe),d&&t(sr),_(a3),_(s3),_(l3),_(i3),_(d3),d&&t(tRe),d&&t(Pd),_(c3),d&&t(aRe),d&&t(lr),_(f3),_(g3),_(h3),_(p3),_(_3),d&&t(nRe),d&&t(jd),_(u3),d&&t(sRe),d&&t(ir),_(b3),_(T3),_(F3),_(C3),_(M3),d&&t(lRe),d&&t(qd),_(E3),d&&t(iRe),d&&t(dr),_(y3),_(A3),_(L3),_(B3),_(x3),d&&t(dRe),d&&t(Xd),_(k3),d&&t(cRe),d&&t(cr),_(R3),_(P3),_($3),_(I3),_(j3),d&&t(fRe),d&&t(Wd),_(D3),d&&t(mRe),d&&t(fr),_(N3),_(O3),_(G3),_(X3),_(V3),d&&t(gRe),d&&t(Ud),_(z3),d&&t(hRe),d&&t(mr),_(W3),_(H3),_(U3),_(J3),_(Y3),d&&t(pRe),d&&t(Kd),_(K3),d&&t(_Re),d&&t(gr),_(Z3),_(oy),_(ry),_(ty),_(ny),d&&t(uRe),d&&t(oc),_(sy),d&&t(bRe),d&&t(hr),_(ly),_(dy),_(cy),_(fy),_(my),d&&t(vRe),d&&t(ac),_(gy),d&&t(TRe),d&&t(pr),_(hy),_(_y),_(uy),_(by),_(vy),d&&t(FRe),d&&t(ic),_(Ty),d&&t(CRe),d&&t(_r),_(Fy),_(My),_(Ey),_(yy),_(wy),d&&t(MRe),d&&t(fc),_(Ay),d&&t(ERe),d&&t(ur),_(Ly),_(xy),_(ky),_(Ry),_(Sy),d&&t(yRe),d&&t(hc),_(Py),d&&t(wRe),d&&t(br),_($y),_(jy),_(Dy),_(Ny),_(Oy),d&&t(ARe),d&&t(uc),_(Gy),d&&t(LRe),d&&t(vr),_(Xy),_(zy),_(Wy),_(Qy),_(Hy),d&&t(BRe),d&&t(Tc),_(Uy),d&&t(xRe),d&&t(Tr),_(Jy),_(Ky),_(Zy),_(ew),_(ow),d&&t(kRe),d&&t(Mc),_(rw),d&&t(RRe),d&&t(Fr),_(tw),_(nw),_(sw),_(lw),_(iw),d&&t(SRe),d&&t(wc),_(dw),d&&t(PRe),d&&t(Cr),_(cw),_(mw),_(gw),_(hw),_(pw),d&&t($Re),d&&t(Bc),_(_w),d&&t(IRe),d&&t(Mr),_(uw),_(vw),_(Tw),_(Fw),_(Mw),d&&t(jRe),d&&t(Rc),_(Ew),d&&t(DRe),d&&t(Er),_(yw),_(Aw),_(Lw),_(Bw),_(xw),d&&t(NRe),d&&t($c),_(kw),d&&t(qRe),d&&t(yr),_(Rw),_(Pw),_($w),_(Iw),_(jw),d&&t(ORe),d&&t(Dc),_(Dw),d&&t(GRe),d&&t(wr),_(Nw),_(Ow),_(Gw),_(Xw),_(Vw),d&&t(XRe),d&&t(Oc),_(zw),d&&t(VRe),d&&t(Ar),_(Ww),_(Hw),_(Uw),_(Jw),_(Yw),d&&t(zRe),d&&t(Vc),_(Kw),d&&t(WRe),d&&t(Lr),_(Zw),_(oA),_(rA),_(tA),_(aA),d&&t(QRe),d&&t(Qc),_(nA),d&&t(HRe),d&&t(Br),_(sA),_(iA),_(dA),_(cA),_(fA),d&&t(URe),d&&t(Jc),_(mA),d&&t(JRe),d&&t(xr),_(gA),_(pA),_(_A),_(uA),_(bA),d&&t(YRe),d&&t(Zc),_(vA),d&&t(KRe),d&&t(kr),_(TA),_(CA),_(MA),_(EA),_(yA),d&&t(ZRe),d&&t(rf),_(wA),d&&t(eSe),d&&t(Rr),_(AA),_(BA),_(xA),_(kA),_(RA),d&&t(oSe),d&&t(nf),_(SA),d&&t(rSe),d&&t(Sr),_(PA),_(IA),_(jA),_(DA),_(NA),d&&t(tSe),d&&t(df),_(qA),d&&t(aSe),d&&t(Pr),_(OA),_(XA),_(VA),_(zA),_(WA),d&&t(nSe),d&&t(mf),_(QA),d&&t(sSe),d&&t($r),_(HA),_(JA),_(YA),_(KA),_(ZA),d&&t(lSe),d&&t(pf),_(eL),d&&t(iSe),d&&t(Ir),_(oL),_(tL),_(aL),_(nL),_(sL),d&&t(dSe),d&&t(bf),_(lL),d&&t(cSe),d&&t(jr),_(iL),_(cL),_(fL),_(mL),_(gL),d&&t(fSe),d&&t(Ff),_(hL),d&&t(mSe),d&&t(Dr),_(pL),_(uL),_(bL),_(vL),_(TL),d&&t(gSe),d&&t(Ef),_(FL),d&&t(hSe),d&&t(Nr),_(CL),_(EL),_(yL),_(wL),_(AL),d&&t(pSe),d&&t(Af),_(LL),d&&t(_Se),d&&t(qr),_(BL),_(kL),_(RL),_(SL),_(PL),d&&t(uSe),d&&t(xf),_($L),d&&t(bSe),d&&t(Or),_(IL),_(DL),_(NL),_(qL),_(OL),d&&t(vSe),d&&t(Sf),_(GL),d&&t(TSe),d&&t(Gr),_(XL),_(zL),_(WL),_(QL),_(HL),d&&t(FSe),d&&t(If),_(UL),d&&t(CSe),d&&t(Xr),_(JL),_(KL),_(ZL),_(e7),_(o7),d&&t(MSe),d&&t(Nf),_(r7),d&&t(ESe),d&&t(Vr),_(t7),_(n7),_(s7),_(l7),_(d7),d&&t(ySe),d&&t(Gf),_(c7),d&&t(wSe),d&&t(zr),_(f7),_(g7),_(h7),_(p7),_(_7)}}}const TCt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForSpeechSeq2Seq",title:"FlaxAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function FCt(Xi,J,$e){let{fw:de}=J;return Xi.$$set=pe=>{"fw"in pe&&$e(0,de=pe.fw)},[de]}class ACt extends mCt{constructor(J){super();gCt(this,J,FCt,vCt,hCt,{fw:0})}}export{ACt as default,TCt as metadata};
